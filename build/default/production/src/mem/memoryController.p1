Version 3.2 HI-TECH Software Intermediate Code
"35 src/mem/../mem/../mem/memoryTypes.h
[s S1 `ui 1 `ui 1 `ui 1 `uc 1 `uc 1 `uc 1 ]
[n S1 memoryField start end length fIsAssigned fOutOfMemory index ]
"85 src/mem/../mem/memoryController.h
[v _checkForOverlapSwitched `(b ~T0 @X0 0 sf2`S1`S1 ]
[; ;stdint.h: 13: typedef signed char int8_t;
[; ;stdint.h: 20: typedef signed int int16_t;
[; ;stdint.h: 28: typedef signed short long int int24_t;
[; ;stdint.h: 36: typedef signed long int int32_t;
[; ;stdint.h: 43: typedef unsigned char uint8_t;
[; ;stdint.h: 49: typedef unsigned int uint16_t;
[; ;stdint.h: 56: typedef unsigned short long int uint24_t;
[; ;stdint.h: 63: typedef unsigned long int uint32_t;
[; ;stdint.h: 71: typedef signed char int_least8_t;
[; ;stdint.h: 78: typedef signed int int_least16_t;
[; ;stdint.h: 90: typedef signed short long int int_least24_t;
[; ;stdint.h: 98: typedef signed long int int_least32_t;
[; ;stdint.h: 105: typedef unsigned char uint_least8_t;
[; ;stdint.h: 111: typedef unsigned int uint_least16_t;
[; ;stdint.h: 121: typedef unsigned short long int uint_least24_t;
[; ;stdint.h: 128: typedef unsigned long int uint_least32_t;
[; ;stdint.h: 137: typedef signed char int_fast8_t;
[; ;stdint.h: 144: typedef signed int int_fast16_t;
[; ;stdint.h: 156: typedef signed short long int int_fast24_t;
[; ;stdint.h: 164: typedef signed long int int_fast32_t;
[; ;stdint.h: 171: typedef unsigned char uint_fast8_t;
[; ;stdint.h: 177: typedef unsigned int uint_fast16_t;
[; ;stdint.h: 187: typedef unsigned short long int uint_fast24_t;
[; ;stdint.h: 194: typedef unsigned long int uint_fast32_t;
[; ;stdint.h: 200: typedef int32_t intmax_t;
[; ;stdint.h: 205: typedef uint32_t uintmax_t;
[; ;stdint.h: 210: typedef int16_t intptr_t;
[; ;stdint.h: 215: typedef uint16_t uintptr_t;
[; ;bool.h: 32: typedef bit bool_t;
[; ;memoryTypes.h: 35: typedef struct memoryField {
[; ;memoryTypes.h: 42: uint16_t start;
[; ;memoryTypes.h: 43: uint16_t end;
[; ;memoryTypes.h: 44: uint16_t length;
[; ;memoryTypes.h: 45: uint8_t fIsAssigned;
[; ;memoryTypes.h: 46: uint8_t fOutOfMemory;
[; ;memoryTypes.h: 51: uint8_t index;
[; ;memoryTypes.h: 52: } memoryField_t;
[; ;memoryController.h: 62: memoryField_t memory_txFrameRequest(uint16_t length);
[; ;memoryController.h: 68: void memory_txFrameClear(uint8_t index);
[; ;memoryController.h: 76: bool_t static checkForOverlap(memoryField_t a, memoryField_t b);
[; ;memoryController.h: 85: bool_t static checkForOverlapSwitched(memoryField_t a, memoryField_t b);
[; ;memoryController.h: 91: bool_t static entireMemoryEmpty();
[; ;memoryController.h: 97: bool_t static entireMemoryFull();
[; ;memoryController.h: 104: bool_t static isOnlyOneAssigned(uint8_t index);
"27 src/mem/memoryController.c
[v _occupiedMemory `S1 ~T0 @X0 -> 8 `i s ]
[; ;memoryController.c: 27: memoryField_t static occupiedMemory[8];
"28
[v _numberOfOccupiedFields `uc ~T0 @X0 1 s ]
[i _numberOfOccupiedFields
-> -> 0 `i `uc
]
[; ;memoryController.c: 28: uint8_t static numberOfOccupiedFields = 0;
"30
[v _initBuffer `(v ~T0 @X0 1 ef ]
{
[; ;memoryController.c: 30: void initBuffer() {
[e :U _initBuffer ]
[f ]
[; ;memoryController.c: 31: for (uint8_t i = 0; i < 8; i++) {
"31
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 3  ]
[e $U 4  ]
[e :U 3 ]
{
[; ;memoryController.c: 32: occupiedMemory[i].fIsAssigned = 0;
"32
[e = . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 -> -> 0 `i `uc ]
[; ;memoryController.c: 33: occupiedMemory[i].fOutOfMemory = 0;
"33
[e = . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 4 -> -> 0 `i `uc ]
"34
}
"31
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 3  ]
[e :U 4 ]
"34
}
[; ;memoryController.c: 34: }
[; ;memoryController.c: 35: }
"35
[e :UE 2 ]
}
"37
[v _entireMemoryEmpty `(b ~T0 @X0 1 sf ]
{
[; ;memoryController.c: 37: bool_t static entireMemoryEmpty() {
[e :U _entireMemoryEmpty ]
[f ]
[; ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
"38
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 7  ]
[e $U 8  ]
[e :U 7 ]
{
[; ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
"39
[e $ ! != -> . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 10  ]
[; ;memoryController.c: 40: return 0;
"40
[e ) -> -> 0 `i `b ]
[e $UE 6  ]
[e :U 10 ]
"41
}
"38
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 7  ]
[e :U 8 ]
"41
}
[; ;memoryController.c: 41: }
[; ;memoryController.c: 42: return 1;
"42
[e ) -> -> 1 `i `b ]
[e $UE 6  ]
[; ;memoryController.c: 43: }
"43
[e :UE 6 ]
}
"45
[v _entireMemoryFull `(b ~T0 @X0 1 sf ]
{
[; ;memoryController.c: 45: bool_t static entireMemoryFull() {
[e :U _entireMemoryFull ]
[f ]
[; ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
"46
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 12  ]
[e $U 13  ]
[e :U 12 ]
{
[; ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
"47
[e $ ! ! != -> . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 15  ]
[; ;memoryController.c: 48: return 0;
"48
[e ) -> -> 0 `i `b ]
[e $UE 11  ]
[e :U 15 ]
"49
}
"46
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 12  ]
[e :U 13 ]
"49
}
[; ;memoryController.c: 49: }
[; ;memoryController.c: 50: return 1;
"50
[e ) -> -> 1 `i `b ]
[e $UE 11  ]
[; ;memoryController.c: 51: }
"51
[e :UE 11 ]
}
"53
[v _isOnlyOneAssigned `(b ~T0 @X0 1 sf1`uc ]
{
[; ;memoryController.c: 53: bool_t static isOnlyOneAssigned(uint8_t index) {
[e :U _isOnlyOneAssigned ]
[v _index `uc ~T0 @X0 1 r1 ]
[f ]
[; ;memoryController.c: 54: for (uint8_t i = 0; i < 8; i++) {
"54
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 17  ]
[e $U 18  ]
[e :U 17 ]
{
[; ;memoryController.c: 55: if (i == index)
"55
[e $ ! == -> _i `i -> _index `i 20  ]
[; ;memoryController.c: 56: continue;
"56
[e $U 19  ]
[e :U 20 ]
[; ;memoryController.c: 57: if (occupiedMemory[i].fIsAssigned)
"57
[e $ ! != -> . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 21  ]
[; ;memoryController.c: 58: return 0;
"58
[e ) -> -> 0 `i `b ]
[e $UE 16  ]
[e :U 21 ]
"59
}
"54
[e :U 19 ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 17  ]
[e :U 18 ]
"59
}
[; ;memoryController.c: 59: }
[; ;memoryController.c: 60: return 1;
"60
[e ) -> -> 1 `i `b ]
[e $UE 16  ]
[; ;memoryController.c: 61: }
"61
[e :UE 16 ]
}
"63
[v _checkForOverlap `(b ~T0 @X0 1 sf2`S1`S1 ]
{
[; ;memoryController.c: 63: bool_t static checkForOverlap(memoryField_t a, memoryField_t b) {
[e :U _checkForOverlap ]
[v _a `S1 ~T0 @X0 1 r1 ]
[v _b `S1 ~T0 @X0 1 r2 ]
[f ]
[; ;memoryController.c: 64: if ((a.start == b.start) ||
[; ;memoryController.c: 65: (a.end == b.end) ||
[; ;memoryController.c: 66: (a.start == b.end) ||
[; ;memoryController.c: 67: (a.end == b.start) ||
[; ;memoryController.c: 68: (a.end > 0x3000) ||
[; ;memoryController.c: 69: (a.start > 0x3000) ||
[; ;memoryController.c: 70: (b.end > 0x3000) ||
[; ;memoryController.c: 71: (b.start > 0x3000))
"71
[e $ ! || || || || || || || == . _a 0 . _b 0 == . _a 1 . _b 1 == . _a 0 . _b 1 == . _a 1 . _b 0 > . _a 1 -> -> 12288 `i `ui > . _a 0 -> -> 12288 `i `ui > . _b 1 -> -> 12288 `i `ui > . _b 0 -> -> 12288 `i `ui 23  ]
[; ;memoryController.c: 72: return 1;
"72
[e ) -> -> 1 `i `b ]
[e $UE 22  ]
[e :U 23 ]
[; ;memoryController.c: 75: if (a.start < a.end) {
"75
[e $ ! < . _a 0 . _a 1 24  ]
{
[; ;memoryController.c: 76: if (b.start < b.end) {
"76
[e $ ! < . _b 0 . _b 1 25  ]
{
[; ;memoryController.c: 78: if (a.start < b.start) {
"78
[e $ ! < . _a 0 . _b 0 26  ]
{
[; ;memoryController.c: 79: if (a.end > b.start) {
"79
[e $ ! > . _a 1 . _b 0 27  ]
{
[; ;memoryController.c: 80: return 1;
"80
[e ) -> -> 1 `i `b ]
[e $UE 22  ]
"81
}
[; ;memoryController.c: 81: } else {
[e $U 28  ]
[e :U 27 ]
{
[; ;memoryController.c: 82: return 0;
"82
[e ) -> -> 0 `i `b ]
[e $UE 22  ]
"83
}
[e :U 28 ]
"84
}
[; ;memoryController.c: 83: }
[; ;memoryController.c: 84: } else {
[e $U 29  ]
[e :U 26 ]
{
[; ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
"85
[e ) -> -> ( _checkForOverlapSwitched (2 , _b _a `i `b ]
[e $UE 22  ]
"86
}
[e :U 29 ]
"87
}
[; ;memoryController.c: 86: }
[; ;memoryController.c: 87: } else {
[e $U 30  ]
[e :U 25 ]
{
[; ;memoryController.c: 88: if (b.end < a.start)
"88
[e $ ! < . _b 1 . _a 0 31  ]
[; ;memoryController.c: 89: return 0;
"89
[e ) -> -> 0 `i `b ]
[e $UE 22  ]
[e $U 32  ]
"90
[e :U 31 ]
[; ;memoryController.c: 90: else
[; ;memoryController.c: 91: return 1;
"91
[e ) -> -> 1 `i `b ]
[e $UE 22  ]
[e :U 32 ]
"92
}
[e :U 30 ]
"93
}
[; ;memoryController.c: 92: }
[; ;memoryController.c: 93: } else {
[e $U 33  ]
[e :U 24 ]
{
[; ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
"94
[e ) -> -> ( _checkForOverlapSwitched (2 , _b _a `i `b ]
[e $UE 22  ]
"95
}
[e :U 33 ]
[; ;memoryController.c: 95: }
[; ;memoryController.c: 96: }
"96
[e :UE 22 ]
}
"98
[v _checkForOverlapSwitched `(b ~T0 @X0 1 sf2`S1`S1 ]
{
[; ;memoryController.c: 98: bool_t static checkForOverlapSwitched(memoryField_t a, memoryField_t b) {
[e :U _checkForOverlapSwitched ]
[v _a `S1 ~T0 @X0 1 r1 ]
[v _b `S1 ~T0 @X0 1 r2 ]
[f ]
[; ;memoryController.c: 101: if ((a.start == b.start) ||
[; ;memoryController.c: 102: (a.end == b.end) ||
[; ;memoryController.c: 103: (a.start == b.end) ||
[; ;memoryController.c: 104: (a.end == b.start) ||
[; ;memoryController.c: 105: (a.end > 0x3000) ||
[; ;memoryController.c: 106: (a.start > 0x3000) ||
[; ;memoryController.c: 107: (b.end > 0x3000) ||
[; ;memoryController.c: 108: (b.start > 0x3000))
"108
[e $ ! || || || || || || || == . _a 0 . _b 0 == . _a 1 . _b 1 == . _a 0 . _b 1 == . _a 1 . _b 0 > . _a 1 -> -> 12288 `i `ui > . _a 0 -> -> 12288 `i `ui > . _b 1 -> -> 12288 `i `ui > . _b 0 -> -> 12288 `i `ui 35  ]
[; ;memoryController.c: 109: return 1;
"109
[e ) -> -> 1 `i `b ]
[e $UE 34  ]
[e :U 35 ]
[; ;memoryController.c: 112: if (a.start < a.end) {
"112
[e $ ! < . _a 0 . _a 1 36  ]
{
[; ;memoryController.c: 113: if (b.start < b.end) {
"113
[e $ ! < . _b 0 . _b 1 37  ]
{
[; ;memoryController.c: 115: if (a.start < b.start) {
"115
[e $ ! < . _a 0 . _b 0 38  ]
{
[; ;memoryController.c: 116: if (a.end > b.start) {
"116
[e $ ! > . _a 1 . _b 0 39  ]
{
[; ;memoryController.c: 117: return 1;
"117
[e ) -> -> 1 `i `b ]
[e $UE 34  ]
"118
}
[; ;memoryController.c: 118: } else {
[e $U 40  ]
[e :U 39 ]
{
[; ;memoryController.c: 119: return 0;
"119
[e ) -> -> 0 `i `b ]
[e $UE 34  ]
"120
}
[e :U 40 ]
"121
}
[e :U 38 ]
"122
}
[; ;memoryController.c: 120: }
[; ;memoryController.c: 121: }
[; ;memoryController.c: 122: } else {
[e $U 41  ]
[e :U 37 ]
{
[; ;memoryController.c: 123: if (b.end < a.start)
"123
[e $ ! < . _b 1 . _a 0 42  ]
[; ;memoryController.c: 124: return 0;
"124
[e ) -> -> 0 `i `b ]
[e $UE 34  ]
[e $U 43  ]
"125
[e :U 42 ]
[; ;memoryController.c: 125: else
[; ;memoryController.c: 126: return 1;
"126
[e ) -> -> 1 `i `b ]
[e $UE 34  ]
[e :U 43 ]
"127
}
[e :U 41 ]
"128
}
[e :U 36 ]
[; ;memoryController.c: 127: }
[; ;memoryController.c: 128: }
[; ;memoryController.c: 130: return 1;
"130
[e ) -> -> 1 `i `b ]
[e $UE 34  ]
[; ;memoryController.c: 131: }
"131
[e :UE 34 ]
}
"133
[v _memory_txFrameRequest `(S1 ~T0 @X0 1 ef1`ui ]
{
[; ;memoryController.c: 133: memoryField_t memory_txFrameRequest(uint16_t length) {
[e :U _memory_txFrameRequest ]
[v _length `ui ~T0 @X0 1 r1 ]
[f ]
"134
[v _field `S1 ~T0 @X0 1 a ]
"135
[v _freeIndex `uc ~T0 @X0 1 a ]
[; ;memoryController.c: 134: memoryField_t field;
[; ;memoryController.c: 135: uint8_t freeIndex = 0;
[e = _freeIndex -> -> 0 `i `uc ]
[; ;memoryController.c: 137: if (length == 0) {
"137
[e $ ! == _length -> -> 0 `i `ui 45  ]
{
[; ;memoryController.c: 138: field.fOutOfMemory = 1;
"138
[e = . _field 4 -> -> 1 `i `uc ]
[; ;memoryController.c: 139: return field;
"139
[e ) _field ]
[e $UE 44  ]
"140
}
[e :U 45 ]
[; ;memoryController.c: 140: }
[; ;memoryController.c: 142: if (entireMemoryFull()) {
"142
[e $ ! ( _entireMemoryFull ..  46  ]
{
[; ;memoryController.c: 143: field.fOutOfMemory = 1;
"143
[e = . _field 4 -> -> 1 `i `uc ]
[; ;memoryController.c: 144: return field;
"144
[e ) _field ]
[e $UE 44  ]
"145
}
[e :U 46 ]
[; ;memoryController.c: 145: }
[; ;memoryController.c: 146: if (entireMemoryEmpty()) {
"146
[e $ ! ( _entireMemoryEmpty ..  47  ]
{
[; ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
"148
[e $ ! > + -> -> 0 `i `ui _length -> - -> 12288 `i -> 1 `i `ui 48  ]
{
[; ;memoryController.c: 149: field.fOutOfMemory = 1;
"149
[e = . _field 4 -> -> 1 `i `uc ]
[; ;memoryController.c: 150: return field;
"150
[e ) _field ]
[e $UE 44  ]
"151
}
[; ;memoryController.c: 151: } else {
[e $U 49  ]
[e :U 48 ]
{
[; ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
"152
[e = . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 0 -> -> 0 `i `ui ]
[; ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
"153
[e = . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 1 + -> -> 0 `i `ui _length ]
[; ;memoryController.c: 154: occupiedMemory[0].length = length;
"154
[e = . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 2 _length ]
[; ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
"155
[e = . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 3 -> -> 1 `i `uc ]
[; ;memoryController.c: 156: occupiedMemory[0].index = 0;
"156
[e = . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 5 -> -> 0 `i `uc ]
[; ;memoryController.c: 157: return occupiedMemory[0];
"157
[e ) *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux ]
[e $UE 44  ]
"158
}
[e :U 49 ]
"159
}
[e :U 47 ]
[; ;memoryController.c: 158: }
[; ;memoryController.c: 159: }
[; ;memoryController.c: 161: while (freeIndex <= 8) {
"161
[e $U 50  ]
[e :U 51 ]
{
[; ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
"163
[e $ ! ! != -> . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 53  ]
{
[; ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex == 0) ? 8 - 1 : freeIndex - 1].end + 1;
"167
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 0 + . *U + &U _occupiedMemory * -> -> ? == -> _freeIndex `i -> 0 `i : - -> 8 `i -> 1 `i - -> _freeIndex `i -> 1 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 1 -> -> 1 `i `ui ]
[; ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
"168
[e $ ! > + . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 0 _length -> -> 12288 `i `ui 54  ]
{
[; ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
"169
[e $ ! && == -> _freeIndex `i - -> 8 `i -> 1 `i ! != -> . *U + &U _occupiedMemory * -> -> -> 0 `i `ui `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 55  ]
{
[; ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
"170
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 2 _length ]
[; ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].length - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
"171
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 1 - . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 2 - -> - -> 12288 `i -> 1 `i `ui . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 0 ]
[; ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
"172
{
[v _i `uc ~T0 @X0 1 a ]
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 56  ]
[e $U 57  ]
[e :U 56 ]
{
[; ;memoryController.c: 173: if (i == freeIndex)
"173
[e $ ! == -> _i `i -> _freeIndex `i 59  ]
[; ;memoryController.c: 174: continue;
"174
[e $U 58  ]
[e :U 59 ]
[; ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[i]) && occupiedMemory[i].fIsAssigned) {
"175
[e $ ! && ( _checkForOverlap (2 , *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux != -> . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 60  ]
{
[; ;memoryController.c: 177: field.fOutOfMemory = 1;
"177
[e = . _field 4 -> -> 1 `i `uc ]
[; ;memoryController.c: 178: return field;
"178
[e ) _field ]
[e $UE 44  ]
"179
}
[e :U 60 ]
"180
}
"172
[e :U 58 ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 56  ]
[e :U 57 ]
"180
}
[; ;memoryController.c: 179: }
[; ;memoryController.c: 180: }
[; ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
"181
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 3 -> -> 1 `i `uc ]
[; ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
"182
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 5 _freeIndex ]
[; ;memoryController.c: 183: return occupiedMemory[freeIndex];
"183
[e ) *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux ]
[e $UE 44  ]
"184
}
[e :U 55 ]
"185
}
[e :U 54 ]
"187
[v _fNoOverlapMarker `uc ~T0 @X0 1 a ]
[; ;memoryController.c: 184: }
[; ;memoryController.c: 185: }
[; ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
[e = _fNoOverlapMarker -> -> 1 `i `uc ]
"188
[v _i `uc ~T0 @X0 1 a ]
[; ;memoryController.c: 188: uint8_t i;
[; ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].start + length;
"189
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 1 + . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 0 _length ]
[; ;memoryController.c: 190: for (i = 0; i < 8; i++) {
"190
{
[e = _i -> -> 0 `i `uc ]
[e $ < -> _i `i -> 8 `i 61  ]
[e $U 62  ]
[e :U 61 ]
{
[; ;memoryController.c: 191: if (i == freeIndex)
"191
[e $ ! == -> _i `i -> _freeIndex `i 64  ]
[; ;memoryController.c: 192: continue;
"192
[e $U 63  ]
[e :U 64 ]
[; ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
"193
[e $ ! ! != -> . *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 3 `i -> -> -> 0 `i `uc `i 65  ]
{
[; ;memoryController.c: 194: continue;
"194
[e $U 63  ]
"196
}
[e :U 65 ]
[; ;memoryController.c: 196: }
[; ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[i]))
"198
[e $ ! ( _checkForOverlap (2 , *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux *U + &U _occupiedMemory * -> _i `ux -> -> # *U &U _occupiedMemory `ui `ux 66  ]
[; ;memoryController.c: 199: fNoOverlapMarker = 0;
"199
[e = _fNoOverlapMarker -> -> 0 `i `uc ]
[e :U 66 ]
"201
}
"190
[e :U 63 ]
[e ++ _i -> -> 1 `i `uc ]
[e $ < -> _i `i -> 8 `i 61  ]
[e :U 62 ]
"201
}
[; ;memoryController.c: 201: }
[; ;memoryController.c: 202: if (fNoOverlapMarker) {
"202
[e $ ! != -> _fNoOverlapMarker `i -> -> -> 0 `i `uc `i 67  ]
{
[; ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
"203
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 3 -> -> 1 `i `uc ]
[; ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].start + length;
"204
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 1 + . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 0 _length ]
[; ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
"205
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 4 -> -> 0 `i `uc ]
[; ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
"206
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 2 _length ]
[; ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
"207
[e = . *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux 5 _freeIndex ]
[; ;memoryController.c: 208: return occupiedMemory[freeIndex];
"208
[e ) *U + &U _occupiedMemory * -> _freeIndex `ux -> -> # *U &U _occupiedMemory `ui `ux ]
[e $UE 44  ]
"209
}
[e :U 67 ]
"210
}
[e :U 53 ]
[; ;memoryController.c: 209: }
[; ;memoryController.c: 210: }
[; ;memoryController.c: 211: freeIndex++;
"211
[e ++ _freeIndex -> -> 1 `i `uc ]
[; ;memoryController.c: 212: if (freeIndex == 8) {
"212
[e $ ! == -> _freeIndex `i -> 8 `i 68  ]
{
[; ;memoryController.c: 214: field.fOutOfMemory = 1;
"214
[e = . _field 4 -> -> 1 `i `uc ]
[; ;memoryController.c: 215: return field;
"215
[e ) _field ]
[e $UE 44  ]
"216
}
[e :U 68 ]
"217
}
[e :U 50 ]
"161
[e $ <= -> _freeIndex `i -> 8 `i 51  ]
[e :U 52 ]
[; ;memoryController.c: 216: }
[; ;memoryController.c: 217: }
[; ;memoryController.c: 218: return field;
"218
[e ) _field ]
[e $UE 44  ]
[; ;memoryController.c: 219: }
"219
[e :UE 44 ]
}
"221
[v _memory_txFrameClear `(v ~T0 @X0 1 ef1`uc ]
{
[; ;memoryController.c: 221: void memory_txFrameClear(uint8_t index) {
[e :U _memory_txFrameClear ]
[v _index `uc ~T0 @X0 1 r1 ]
[f ]
[; ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
"222
[e = . *U + &U _occupiedMemory * -> _index `ux -> -> # *U &U _occupiedMemory `ui `ux 3 -> -> 0 `i `uc ]
[; ;memoryController.c: 223: }
"223
[e :UE 69 ]
}
