

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Feb 26 00:13:51 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	text81,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	text89,global,reloc=2,class=CODE,delta=1
   109                           	psect	text90,global,reloc=2,class=CODE,delta=1
   110                           	psect	text91,global,reloc=2,class=CODE,delta=1
   111                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   112                           	psect	text93,global,reloc=2,class=CODE,delta=1
   113                           	psect	text94,global,reloc=2,class=CODE,delta=1
   114                           	psect	text95,global,reloc=2,class=CODE,delta=1
   115                           	psect	text96,global,reloc=2,class=CODE,delta=1
   116                           	psect	text97,global,reloc=2,class=CODE,delta=1
   117                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   118                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   119                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   120  0000                     
   121                           ; Version 1.45
   122                           ; Generated 16/11/2017 GMT
   123                           ; 
   124                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   125                           ; All rights reserved.
   126                           ; 
   127                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   128                           ; 
   129                           ; Redistribution and use in source and binary forms, with or without modification, are
   130                           ; permitted provided that the following conditions are met:
   131                           ; 
   132                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   133                           ;        conditions and the following disclaimer.
   134                           ; 
   135                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   136                           ;        of conditions and the following disclaimer in the documentation and/or other
   137                           ;        materials provided with the distribution.
   138                           ; 
   139                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   140                           ;        software without specific prior written permission.
   141                           ; 
   142                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   143                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   144                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   145                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   146                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   147                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   148                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   149                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   150                           ; 
   151                           ; 
   152                           ; Code-generator required, PIC18F25K50 Definitions
   153                           ; 
   154                           ; SFR Addresses
   155  0000                     
   156                           	psect	idataCOMRAM
   157  00467C                     __pidataCOMRAM:
   158                           	opt stack 0
   159                           
   160                           ;initializer for ethernetController_softReset@F5823
   161  00467C  12                 	db	18
   162  00467D  34                 	db	52
   163                           
   164                           	psect	idataBANK2
   165  0042F2                     __pidataBANK2:
   166                           	opt stack 0
   167                           
   168                           ;initializer for macToString@F5785
   169  0042F2  3F                 	db	63
   170  0042F3  3F                 	db	63
   171  0042F4  3A                 	db	58
   172  0042F5  3F                 	db	63
   173  0042F6  3F                 	db	63
   174  0042F7  3A                 	db	58
   175  0042F8  3F                 	db	63
   176  0042F9  3F                 	db	63
   177  0042FA  3A                 	db	58
   178  0042FB  3F                 	db	63
   179  0042FC  3F                 	db	63
   180  0042FD  3A                 	db	58
   181  0042FE  3F                 	db	63
   182  0042FF  3F                 	db	63
   183  004300  3A                 	db	58
   184  004301  3F                 	db	63
   185  004302  3F                 	db	63
   186  004303  00                 	db	0
   187                           
   188                           ;initializer for _sevenSegCharacters
   189  004304  3F                 	db	63
   190  004305  06                 	db	6
   191  004306  5B                 	db	91
   192  004307  4F                 	db	79
   193  004308  66                 	db	102
   194  004309  6D                 	db	109
   195  00430A  7D                 	db	125
   196  00430B  07                 	db	7
   197  00430C  7F                 	db	127
   198  00430D  6F                 	db	111
   199  00430E  00                 	db	0
   200  00430F  40                 	db	64
   201                           
   202                           ;initializer for ipAdressToString@address
   203  004310  3F                 	db	63
   204  004311  3F                 	db	63
   205  004312  3F                 	db	63
   206  004313  2E                 	db	46
   207  004314  3F                 	db	63
   208  004315  3F                 	db	63
   209  004316  3F                 	db	63
   210  004317  2E                 	db	46
   211  004318  3F                 	db	63
   212  004319  3F                 	db	63
   213  00431A  3F                 	db	63
   214  00431B  2E                 	db	46
   215  00431C  3F                 	db	63
   216  00431D  3F                 	db	63
   217  00431E  3F                 	db	63
   218  00431F  00                 	db	0
   219                           
   220                           	psect	mediumconst
   221  007C84                     __pmediumconst:
   222                           	opt stack 0
   223  007C84  00                 	db	0
   224  007C85                     ethernetController_getDeviceName@F5835:
   225                           	opt stack 0
   226  007C85  45                 	db	69
   227  007C86  4E                 	db	78
   228  007C87  43                 	db	67
   229  007C88  34                 	db	52
   230  007C89  32                 	db	50
   231  007C8A  34                 	db	52
   232  007C8B  4A                 	db	74
   233  007C8C  36                 	db	54
   234  007C8D  30                 	db	48
   235  007C8E  30                 	db	48
   236  007C8F  00                 	db	0
   237  007C90                     __end_ofethernetController_getDeviceName@F5835:
   238                           	opt stack 0
   239  0000                     _ANSELC	set	3933
   240  0000                     _ANSELA	set	3931
   241  0000                     _ANSELB	set	3932
   242  0000                     _ANSELBbits	set	3932
   243  0000                     _TXREG1	set	4013
   244  0000                     _SPBRG	set	4015
   245  0000                     _RCSTA1bits	set	4011
   246  0000                     _TXSTA1bits	set	4012
   247  0000                     _PORTA	set	3968
   248  0000                     _TRISA	set	3986
   249  0000                     _TRISC	set	3988
   250  0000                     _PORTC	set	3970
   251  0000                     _PORTB	set	3969
   252  0000                     _TRISB	set	3987
   253  0000                     _T0CONbits	set	4053
   254  0000                     _INTCON3bits	set	4080
   255  0000                     _INTCONbits	set	4082
   256  0000                     _OSCCON2bits	set	4050
   257  0000                     _OSCCONbits	set	4051
   258  0000                     _SSP1BUF	set	4041
   259  0000                     _TRISBbits	set	3987
   260  0000                     _SSP1STATbits	set	4039
   261  0000                     _SSP1CON1bits	set	4038
   262  0000                     _PORTBbits	set	3969
   263  0000                     _TRMT	set	32097
   264  0000                     _RCIF	set	31989
   265  0000                     _RCIE	set	31981
   266  0000                     _RCIP	set	31997
   267  007C90                     STR_46:
   268  007C90  45                 	db	69	;'E'
   269  007C91  74                 	db	116	;'t'
   270  007C92  68                 	db	104	;'h'
   271  007C93  65                 	db	101	;'e'
   272  007C94  72                 	db	114	;'r'
   273  007C95  6E                 	db	110	;'n'
   274  007C96  65                 	db	101	;'e'
   275  007C97  74                 	db	116	;'t'
   276  007C98  20                 	db	32
   277  007C99  63                 	db	99	;'c'
   278  007C9A  6F                 	db	111	;'o'
   279  007C9B  6E                 	db	110	;'n'
   280  007C9C  74                 	db	116	;'t'
   281  007C9D  72                 	db	114	;'r'
   282  007C9E  6F                 	db	111	;'o'
   283  007C9F  6C                 	db	108	;'l'
   284  007CA0  6C                 	db	108	;'l'
   285  007CA1  65                 	db	101	;'e'
   286  007CA2  72                 	db	114	;'r'
   287  007CA3  20                 	db	32
   288  007CA4  68                 	db	104	;'h'
   289  007CA5  61                 	db	97	;'a'
   290  007CA6  73                 	db	115	;'s'
   291  007CA7  20                 	db	32
   292  007CA8  72                 	db	114	;'r'
   293  007CA9  65                 	db	101	;'e'
   294  007CAA  74                 	db	116	;'t'
   295  007CAB  75                 	db	117	;'u'
   296  007CAC  72                 	db	114	;'r'
   297  007CAD  6E                 	db	110	;'n'
   298  007CAE  65                 	db	101	;'e'
   299  007CAF  64                 	db	100	;'d'
   300  007CB0  20                 	db	32
   301  007CB1  61                 	db	97	;'a'
   302  007CB2  6E                 	db	110	;'n'
   303  007CB3  20                 	db	32
   304  007CB4  75                 	db	117	;'u'
   305  007CB5  6E                 	db	110	;'n'
   306  007CB6  6B                 	db	107	;'k'
   307  007CB7  6E                 	db	110	;'n'
   308  007CB8  6F                 	db	111	;'o'
   309  007CB9  77                 	db	119	;'w'
   310  007CBA  6E                 	db	110	;'n'
   311  007CBB  20                 	db	32
   312  007CBC  64                 	db	100	;'d'
   313  007CBD  65                 	db	101	;'e'
   314  007CBE  76                 	db	118	;'v'
   315  007CBF  69                 	db	105	;'i'
   316  007CC0  63                 	db	99	;'c'
   317  007CC1  65                 	db	101	;'e'
   318  007CC2  20                 	db	32
   319  007CC3  49                 	db	73	;'I'
   320  007CC4  44                 	db	68	;'D'
   321  007CC5  2E                 	db	46
   322  007CC6  00                 	db	0
   323  007CC7                     STR_32:
   324  007CC7  2D                 	db	45
   325  007CC8  2D                 	db	45
   326  007CC9  2D                 	db	45
   327  007CCA  2D                 	db	45
   328  007CCB  2D                 	db	45
   329  007CCC  2D                 	db	45
   330  007CCD  2D                 	db	45
   331  007CCE  2D                 	db	45
   332  007CCF  2D                 	db	45
   333  007CD0  2D                 	db	45
   334  007CD1  2D                 	db	45
   335  007CD2  2D                 	db	45
   336  007CD3  2D                 	db	45
   337  007CD4  2D                 	db	45
   338  007CD5  2D                 	db	45
   339  007CD6  2D                 	db	45
   340  007CD7  2D                 	db	45
   341  007CD8  2D                 	db	45
   342  007CD9  2D                 	db	45
   343  007CDA  2D                 	db	45
   344  007CDB  2D                 	db	45
   345  007CDC  2D                 	db	45
   346  007CDD  2D                 	db	45
   347  007CDE  2D                 	db	45
   348  007CDF  2D                 	db	45
   349  007CE0  2D                 	db	45
   350  007CE1  2D                 	db	45
   351  007CE2  2D                 	db	45
   352  007CE3  2D                 	db	45
   353  007CE4  2D                 	db	45
   354  007CE5  2D                 	db	45
   355  007CE6  2D                 	db	45
   356  007CE7  2D                 	db	45
   357  007CE8  2D                 	db	45
   358  007CE9  2D                 	db	45
   359  007CEA  2D                 	db	45
   360  007CEB  2D                 	db	45
   361  007CEC  2D                 	db	45
   362  007CED  2D                 	db	45
   363  007CEE  2D                 	db	45
   364  007CEF  2D                 	db	45
   365  007CF0  2D                 	db	45
   366  007CF1  2D                 	db	45
   367  007CF2  2D                 	db	45
   368  007CF3  2D                 	db	45
   369  007CF4  2D                 	db	45
   370  007CF5  2D                 	db	45
   371  007CF6  2D                 	db	45
   372  007CF7  0A                 	db	10
   373  007CF8  0D                 	db	13
   374  007CF9  00                 	db	0
   375  007CFA                     STR_53:
   376  007CFA  5B                 	db	91	;'['
   377  007CFB  49                 	db	73	;'I'
   378  007CFC  6E                 	db	110	;'n'
   379  007CFD  76                 	db	118	;'v'
   380  007CFE  61                 	db	97	;'a'
   381  007CFF  6C                 	db	108	;'l'
   382  007D00  69                 	db	105	;'i'
   383  007D01  64                 	db	100	;'d'
   384  007D02  20                 	db	32
   385  007D03  41                 	db	65	;'A'
   386  007D04  52                 	db	82	;'R'
   387  007D05  50                 	db	80	;'P'
   388  007D06  20                 	db	32
   389  007D07  4D                 	db	77	;'M'
   390  007D08  65                 	db	101	;'e'
   391  007D09  73                 	db	115	;'s'
   392  007D0A  73                 	db	115	;'s'
   393  007D0B  61                 	db	97	;'a'
   394  007D0C  67                 	db	103	;'g'
   395  007D0D  65                 	db	101	;'e'
   396  007D0E  20                 	db	32
   397  007D0F  77                 	db	119	;'w'
   398  007D10  61                 	db	97	;'a'
   399  007D11  73                 	db	115	;'s'
   400  007D12  20                 	db	32
   401  007D13  64                 	db	100	;'d'
   402  007D14  69                 	db	105	;'i'
   403  007D15  73                 	db	115	;'s'
   404  007D16  63                 	db	99	;'c'
   405  007D17  61                 	db	97	;'a'
   406  007D18  72                 	db	114	;'r'
   407  007D19  64                 	db	100	;'d'
   408  007D1A  65                 	db	101	;'e'
   409  007D1B  64                 	db	100	;'d'
   410  007D1C  2E                 	db	46
   411  007D1D  5D                 	db	93	;']'
   412  007D1E  0D                 	db	13
   413  007D1F  0A                 	db	10
   414  007D20  00                 	db	0
   415  007D21                     STR_25:
   416  007D21  49                 	db	73	;'I'
   417  007D22  6E                 	db	110	;'n'
   418  007D23  69                 	db	105	;'i'
   419  007D24  74                 	db	116	;'t'
   420  007D25  69                 	db	105	;'i'
   421  007D26  61                 	db	97	;'a'
   422  007D27  6C                 	db	108	;'l'
   423  007D28  69                 	db	105	;'i'
   424  007D29  73                 	db	115	;'s'
   425  007D2A  69                 	db	105	;'i'
   426  007D2B  6E                 	db	110	;'n'
   427  007D2C  67                 	db	103	;'g'
   428  007D2D  20                 	db	32
   429  007D2E  45                 	db	69	;'E'
   430  007D2F  74                 	db	116	;'t'
   431  007D30  68                 	db	104	;'h'
   432  007D31  65                 	db	101	;'e'
   433  007D32  72                 	db	114	;'r'
   434  007D33  6E                 	db	110	;'n'
   435  007D34  65                 	db	101	;'e'
   436  007D35  74                 	db	116	;'t'
   437  007D36  20                 	db	32
   438  007D37  43                 	db	67	;'C'
   439  007D38  6F                 	db	111	;'o'
   440  007D39  6E                 	db	110	;'n'
   441  007D3A  74                 	db	116	;'t'
   442  007D3B  72                 	db	114	;'r'
   443  007D3C  6F                 	db	111	;'o'
   444  007D3D  6C                 	db	108	;'l'
   445  007D3E  6C                 	db	108	;'l'
   446  007D3F  65                 	db	101	;'e'
   447  007D40  72                 	db	114	;'r'
   448  007D41  2E                 	db	46
   449  007D42  2E                 	db	46
   450  007D43  2E                 	db	46
   451  007D44  0A                 	db	10
   452  007D45  0D                 	db	13
   453  007D46  00                 	db	0
   454  007D47                     STR_45:
   455  007D47  45                 	db	69	;'E'
   456  007D48  74                 	db	116	;'t'
   457  007D49  68                 	db	104	;'h'
   458  007D4A  65                 	db	101	;'e'
   459  007D4B  72                 	db	114	;'r'
   460  007D4C  6E                 	db	110	;'n'
   461  007D4D  65                 	db	101	;'e'
   462  007D4E  74                 	db	116	;'t'
   463  007D4F  20                 	db	32
   464  007D50  63                 	db	99	;'c'
   465  007D51  6F                 	db	111	;'o'
   466  007D52  6E                 	db	110	;'n'
   467  007D53  74                 	db	116	;'t'
   468  007D54  72                 	db	114	;'r'
   469  007D55  6F                 	db	111	;'o'
   470  007D56  6C                 	db	108	;'l'
   471  007D57  6C                 	db	108	;'l'
   472  007D58  65                 	db	101	;'e'
   473  007D59  72                 	db	114	;'r'
   474  007D5A  20                 	db	32
   475  007D5B  69                 	db	105	;'i'
   476  007D5C  73                 	db	115	;'s'
   477  007D5D  20                 	db	32
   478  007D5E  75                 	db	117	;'u'
   479  007D5F  6E                 	db	110	;'n'
   480  007D60  72                 	db	114	;'r'
   481  007D61  65                 	db	101	;'e'
   482  007D62  73                 	db	115	;'s'
   483  007D63  70                 	db	112	;'p'
   484  007D64  6F                 	db	111	;'o'
   485  007D65  6E                 	db	110	;'n'
   486  007D66  73                 	db	115	;'s'
   487  007D67  69                 	db	105	;'i'
   488  007D68  76                 	db	118	;'v'
   489  007D69  65                 	db	101	;'e'
   490  007D6A  2E                 	db	46
   491  007D6B  00                 	db	0
   492  007D6C                     STR_41:
   493  007D6C  20                 	db	32
   494  007D6D  45                 	db	69	;'E'
   495  007D6E  54                 	db	84	;'T'
   496  007D6F  48                 	db	72	;'H'
   497  007D70  45                 	db	69	;'E'
   498  007D71  52                 	db	82	;'R'
   499  007D72  4E                 	db	78	;'N'
   500  007D73  45                 	db	69	;'E'
   501  007D74  54                 	db	84	;'T'
   502  007D75  20                 	db	32
   503  007D76  43                 	db	67	;'C'
   504  007D77  4F                 	db	79	;'O'
   505  007D78  4E                 	db	78	;'N'
   506  007D79  54                 	db	84	;'T'
   507  007D7A  52                 	db	82	;'R'
   508  007D7B  4F                 	db	79	;'O'
   509  007D7C  4C                 	db	76	;'L'
   510  007D7D  4C                 	db	76	;'L'
   511  007D7E  45                 	db	69	;'E'
   512  007D7F  52                 	db	82	;'R'
   513  007D80  20                 	db	32
   514  007D81  4D                 	db	77	;'M'
   515  007D82  4F                 	db	79	;'O'
   516  007D83  44                 	db	68	;'D'
   517  007D84  55                 	db	85	;'U'
   518  007D85  4C                 	db	76	;'L'
   519  007D86  45                 	db	69	;'E'
   520  007D87  3A                 	db	58	;':'
   521  007D88  20                 	db	32
   522  007D89  00                 	db	0
   523  007D8A                     STR_47:
   524  007D8A  41                 	db	65	;'A'
   525  007D8B  6E                 	db	110	;'n'
   526  007D8C  20                 	db	32
   527  007D8D  75                 	db	117	;'u'
   528  007D8E  6E                 	db	110	;'n'
   529  007D8F  6B                 	db	107	;'k'
   530  007D90  6E                 	db	110	;'n'
   531  007D91  6F                 	db	111	;'o'
   532  007D92  77                 	db	119	;'w'
   533  007D93  6E                 	db	110	;'n'
   534  007D94  20                 	db	32
   535  007D95  65                 	db	101	;'e'
   536  007D96  72                 	db	114	;'r'
   537  007D97  72                 	db	114	;'r'
   538  007D98  6F                 	db	111	;'o'
   539  007D99  72                 	db	114	;'r'
   540  007D9A  20                 	db	32
   541  007D9B  68                 	db	104	;'h'
   542  007D9C  61                 	db	97	;'a'
   543  007D9D  73                 	db	115	;'s'
   544  007D9E  20                 	db	32
   545  007D9F  6F                 	db	111	;'o'
   546  007DA0  63                 	db	99	;'c'
   547  007DA1  63                 	db	99	;'c'
   548  007DA2  75                 	db	117	;'u'
   549  007DA3  72                 	db	114	;'r'
   550  007DA4  65                 	db	101	;'e'
   551  007DA5  64                 	db	100	;'d'
   552  007DA6  2E                 	db	46
   553  007DA7  00                 	db	0
   554  007DA8                     STR_37:
   555  007DA8  63                 	db	99	;'c'
   556  007DA9  6F                 	db	111	;'o'
   557  007DAA  6E                 	db	110	;'n'
   558  007DAB  6E                 	db	110	;'n'
   559  007DAC  65                 	db	101	;'e'
   560  007DAD  63                 	db	99	;'c'
   561  007DAE  74                 	db	116	;'t'
   562  007DAF  69                 	db	105	;'i'
   563  007DB0  6F                 	db	111	;'o'
   564  007DB1  6E                 	db	110	;'n'
   565  007DB2  20                 	db	32
   566  007DB3  69                 	db	105	;'i'
   567  007DB4  73                 	db	115	;'s'
   568  007DB5  20                 	db	32
   569  007DB6  48                 	db	72	;'H'
   570  007DB7  61                 	db	97	;'a'
   571  007DB8  6C                 	db	108	;'l'
   572  007DB9  66                 	db	102	;'f'
   573  007DBA  20                 	db	32
   574  007DBB  44                 	db	68	;'D'
   575  007DBC  75                 	db	117	;'u'
   576  007DBD  70                 	db	112	;'p'
   577  007DBE  6C                 	db	108	;'l'
   578  007DBF  65                 	db	101	;'e'
   579  007DC0  78                 	db	120	;'x'
   580  007DC1  2E                 	db	46
   581  007DC2  0A                 	db	10
   582  007DC3  0D                 	db	13
   583  007DC4  00                 	db	0
   584  007DC5                     STR_38:
   585  007DC5  63                 	db	99	;'c'
   586  007DC6  6F                 	db	111	;'o'
   587  007DC7  6E                 	db	110	;'n'
   588  007DC8  6E                 	db	110	;'n'
   589  007DC9  65                 	db	101	;'e'
   590  007DCA  63                 	db	99	;'c'
   591  007DCB  74                 	db	116	;'t'
   592  007DCC  69                 	db	105	;'i'
   593  007DCD  6F                 	db	111	;'o'
   594  007DCE  6E                 	db	110	;'n'
   595  007DCF  20                 	db	32
   596  007DD0  69                 	db	105	;'i'
   597  007DD1  73                 	db	115	;'s'
   598  007DD2  20                 	db	32
   599  007DD3  46                 	db	70	;'F'
   600  007DD4  75                 	db	117	;'u'
   601  007DD5  6C                 	db	108	;'l'
   602  007DD6  6C                 	db	108	;'l'
   603  007DD7  20                 	db	32
   604  007DD8  44                 	db	68	;'D'
   605  007DD9  75                 	db	117	;'u'
   606  007DDA  70                 	db	112	;'p'
   607  007DDB  6C                 	db	108	;'l'
   608  007DDC  65                 	db	101	;'e'
   609  007DDD  78                 	db	120	;'x'
   610  007DDE  2E                 	db	46
   611  007DDF  0A                 	db	10
   612  007DE0  0D                 	db	13
   613  007DE1  00                 	db	0
   614  007DE2                     STR_1:
   615  007DE2  57                 	db	87	;'W'
   616  007DE3  72                 	db	114	;'r'
   617  007DE4  69                 	db	105	;'i'
   618  007DE5  74                 	db	116	;'t'
   619  007DE6  69                 	db	105	;'i'
   620  007DE7  6E                 	db	110	;'n'
   621  007DE8  67                 	db	103	;'g'
   622  007DE9  20                 	db	32
   623  007DEA  30                 	db	48	;'0'
   624  007DEB  78                 	db	120	;'x'
   625  007DEC  31                 	db	49	;'1'
   626  007DED  32                 	db	50	;'2'
   627  007DEE  33                 	db	51	;'3'
   628  007DEF  34                 	db	52	;'4'
   629  007DF0  20                 	db	32
   630  007DF1  73                 	db	115	;'s'
   631  007DF2  75                 	db	117	;'u'
   632  007DF3  63                 	db	99	;'c'
   633  007DF4  63                 	db	99	;'c'
   634  007DF5  65                 	db	101	;'e'
   635  007DF6  73                 	db	115	;'s'
   636  007DF7  73                 	db	115	;'s'
   637  007DF8  66                 	db	102	;'f'
   638  007DF9  75                 	db	117	;'u'
   639  007DFA  6C                 	db	108	;'l'
   640  007DFB  2E                 	db	46
   641  007DFC  0A                 	db	10
   642  007DFD  0D                 	db	13
   643  007DFE  00                 	db	0
   644  007DFF                     STR_31:
   645  007DFF  49                 	db	73	;'I'
   646  007E00  6E                 	db	110	;'n'
   647  007E01  69                 	db	105	;'i'
   648  007E02  74                 	db	116	;'t'
   649  007E03  69                 	db	105	;'i'
   650  007E04  61                 	db	97	;'a'
   651  007E05  6C                 	db	108	;'l'
   652  007E06  69                 	db	105	;'i'
   653  007E07  73                 	db	115	;'s'
   654  007E08  61                 	db	97	;'a'
   655  007E09  74                 	db	116	;'t'
   656  007E0A  69                 	db	105	;'i'
   657  007E0B  6F                 	db	111	;'o'
   658  007E0C  6E                 	db	110	;'n'
   659  007E0D  20                 	db	32
   660  007E0E  63                 	db	99	;'c'
   661  007E0F  6F                 	db	111	;'o'
   662  007E10  6D                 	db	109	;'m'
   663  007E11  70                 	db	112	;'p'
   664  007E12  6C                 	db	108	;'l'
   665  007E13  65                 	db	101	;'e'
   666  007E14  74                 	db	116	;'t'
   667  007E15  65                 	db	101	;'e'
   668  007E16  64                 	db	100	;'d'
   669  007E17  2E                 	db	46
   670  007E18  0A                 	db	10
   671  007E19  0D                 	db	13
   672  007E1A  00                 	db	0
   673  007E1B                     STR_4:
   674  007E1B  57                 	db	87	;'W'
   675  007E1C  72                 	db	114	;'r'
   676  007E1D  69                 	db	105	;'i'
   677  007E1E  74                 	db	116	;'t'
   678  007E1F  69                 	db	105	;'i'
   679  007E20  6E                 	db	110	;'n'
   680  007E21  67                 	db	103	;'g'
   681  007E22  20                 	db	32
   682  007E23  30                 	db	48	;'0'
   683  007E24  78                 	db	120	;'x'
   684  007E25  31                 	db	49	;'1'
   685  007E26  32                 	db	50	;'2'
   686  007E27  33                 	db	51	;'3'
   687  007E28  34                 	db	52	;'4'
   688  007E29  20                 	db	32
   689  007E2A  66                 	db	102	;'f'
   690  007E2B  61                 	db	97	;'a'
   691  007E2C  69                 	db	105	;'i'
   692  007E2D  6C                 	db	108	;'l'
   693  007E2E  65                 	db	101	;'e'
   694  007E2F  64                 	db	100	;'d'
   695  007E30  2E                 	db	46
   696  007E31  0A                 	db	10
   697  007E32  0D                 	db	13
   698  007E33  00                 	db	0
   699  007E34                     STR_20:
   700  007E34  46                 	db	70	;'F'
   701  007E35  49                 	db	73	;'I'
   702  007E36  52                 	db	82	;'R'
   703  007E37  4D                 	db	77	;'M'
   704  007E38  57                 	db	87	;'W'
   705  007E39  41                 	db	65	;'A'
   706  007E3A  52                 	db	82	;'R'
   707  007E3B  45                 	db	69	;'E'
   708  007E3C  20                 	db	32
   709  007E3D  42                 	db	66	;'B'
   710  007E3E  55                 	db	85	;'U'
   711  007E3F  49                 	db	73	;'I'
   712  007E40  4C                 	db	76	;'L'
   713  007E41  44                 	db	68	;'D'
   714  007E42  20                 	db	32
   715  007E43  44                 	db	68	;'D'
   716  007E44  41                 	db	65	;'A'
   717  007E45  54                 	db	84	;'T'
   718  007E46  45                 	db	69	;'E'
   719  007E47  20                 	db	32
   720  007E48  49                 	db	73	;'I'
   721  007E49  53                 	db	83	;'S'
   722  007E4A  20                 	db	32
   723  007E4B  00                 	db	0
   724  007E4C                     STR_29:
   725  007E4C  53                 	db	83	;'S'
   726  007E4D  6F                 	db	111	;'o'
   727  007E4E  75                 	db	117	;'u'
   728  007E4F  72                 	db	114	;'r'
   729  007E50  63                 	db	99	;'c'
   730  007E51  65                 	db	101	;'e'
   731  007E52  20                 	db	32
   732  007E53  4D                 	db	77	;'M'
   733  007E54  41                 	db	65	;'A'
   734  007E55  43                 	db	67	;'C'
   735  007E56  20                 	db	32
   736  007E57  61                 	db	97	;'a'
   737  007E58  64                 	db	100	;'d'
   738  007E59  64                 	db	100	;'d'
   739  007E5A  72                 	db	114	;'r'
   740  007E5B  65                 	db	101	;'e'
   741  007E5C  73                 	db	115	;'s'
   742  007E5D  73                 	db	115	;'s'
   743  007E5E  20                 	db	32
   744  007E5F  69                 	db	105	;'i'
   745  007E60  73                 	db	115	;'s'
   746  007E61  20                 	db	32
   747  007E62  00                 	db	0
   748  007E63                     STR_27:
   749  007E63  53                 	db	83	;'S'
   750  007E64  69                 	db	105	;'i'
   751  007E65  6C                 	db	108	;'l'
   752  007E66  69                 	db	105	;'i'
   753  007E67  63                 	db	99	;'c'
   754  007E68  6F                 	db	111	;'o'
   755  007E69  6E                 	db	110	;'n'
   756  007E6A  20                 	db	32
   757  007E6B  72                 	db	114	;'r'
   758  007E6C  65                 	db	101	;'e'
   759  007E6D  76                 	db	118	;'v'
   760  007E6E  69                 	db	105	;'i'
   761  007E6F  73                 	db	115	;'s'
   762  007E70  69                 	db	105	;'i'
   763  007E71  6F                 	db	111	;'o'
   764  007E72  6E                 	db	110	;'n'
   765  007E73  20                 	db	32
   766  007E74  69                 	db	105	;'i'
   767  007E75  73                 	db	115	;'s'
   768  007E76  20                 	db	32
   769  007E77  00                 	db	0
   770  007E78                     STR_36:
   771  007E78  53                 	db	83	;'S'
   772  007E79  70                 	db	112	;'p'
   773  007E7A  65                 	db	101	;'e'
   774  007E7B  65                 	db	101	;'e'
   775  007E7C  64                 	db	100	;'d'
   776  007E7D  20                 	db	32
   777  007E7E  69                 	db	105	;'i'
   778  007E7F  73                 	db	115	;'s'
   779  007E80  20                 	db	32
   780  007E81  31                 	db	49	;'1'
   781  007E82  30                 	db	48	;'0'
   782  007E83  30                 	db	48	;'0'
   783  007E84  20                 	db	32
   784  007E85  4D                 	db	77	;'M'
   785  007E86  62                 	db	98	;'b'
   786  007E87  70                 	db	112	;'p'
   787  007E88  73                 	db	115	;'s'
   788  007E89  2C                 	db	44
   789  007E8A  20                 	db	32
   790  007E8B  00                 	db	0
   791  007E8C                     STR_35:
   792  007E8C  53                 	db	83	;'S'
   793  007E8D  70                 	db	112	;'p'
   794  007E8E  65                 	db	101	;'e'
   795  007E8F  65                 	db	101	;'e'
   796  007E90  64                 	db	100	;'d'
   797  007E91  20                 	db	32
   798  007E92  69                 	db	105	;'i'
   799  007E93  73                 	db	115	;'s'
   800  007E94  20                 	db	32
   801  007E95  31                 	db	49	;'1'
   802  007E96  30                 	db	48	;'0'
   803  007E97  20                 	db	32
   804  007E98  4D                 	db	77	;'M'
   805  007E99  62                 	db	98	;'b'
   806  007E9A  70                 	db	112	;'p'
   807  007E9B  73                 	db	115	;'s'
   808  007E9C  2C                 	db	44
   809  007E9D  20                 	db	32
   810  007E9E  00                 	db	0
   811  007E9F                     STR_34:
   812  007E9F  4C                 	db	76	;'L'
   813  007EA0  69                 	db	105	;'i'
   814  007EA1  6E                 	db	110	;'n'
   815  007EA2  6B                 	db	107	;'k'
   816  007EA3  20                 	db	32
   817  007EA4  65                 	db	101	;'e'
   818  007EA5  73                 	db	115	;'s'
   819  007EA6  74                 	db	116	;'t'
   820  007EA7  61                 	db	97	;'a'
   821  007EA8  62                 	db	98	;'b'
   822  007EA9  6C                 	db	108	;'l'
   823  007EAA  69                 	db	105	;'i'
   824  007EAB  73                 	db	115	;'s'
   825  007EAC  68                 	db	104	;'h'
   826  007EAD  65                 	db	101	;'e'
   827  007EAE  64                 	db	100	;'d'
   828  007EAF  2E                 	db	46
   829  007EB0  20                 	db	32
   830  007EB1  00                 	db	0
   831  007EB2                     STR_42:
   832  007EB2  20                 	db	32
   833  007EB3  45                 	db	69	;'E'
   834  007EB4  54                 	db	84	;'T'
   835  007EB5  48                 	db	72	;'H'
   836  007EB6  45                 	db	69	;'E'
   837  007EB7  52                 	db	82	;'R'
   838  007EB8  4E                 	db	78	;'N'
   839  007EB9  45                 	db	69	;'E'
   840  007EBA  54                 	db	84	;'T'
   841  007EBB  20                 	db	32
   842  007EBC  4D                 	db	77	;'M'
   843  007EBD  4F                 	db	79	;'O'
   844  007EBE  44                 	db	68	;'D'
   845  007EBF  55                 	db	85	;'U'
   846  007EC0  4C                 	db	76	;'L'
   847  007EC1  45                 	db	69	;'E'
   848  007EC2  3A                 	db	58	;':'
   849  007EC3  20                 	db	32
   850  007EC4  00                 	db	0
   851  007EC5                     STR_52:
   852  007EC5  55                 	db	85	;'U'
   853  007EC6  6E                 	db	110	;'n'
   854  007EC7  6B                 	db	107	;'k'
   855  007EC8  6E                 	db	110	;'n'
   856  007EC9  6F                 	db	111	;'o'
   857  007ECA  77                 	db	119	;'w'
   858  007ECB  6E                 	db	110	;'n'
   859  007ECC  20                 	db	32
   860  007ECD  45                 	db	69	;'E'
   861  007ECE  74                 	db	116	;'t'
   862  007ECF  68                 	db	104	;'h'
   863  007ED0  65                 	db	101	;'e'
   864  007ED1  72                 	db	114	;'r'
   865  007ED2  54                 	db	84	;'T'
   866  007ED3  79                 	db	121	;'y'
   867  007ED4  70                 	db	112	;'p'
   868  007ED5  65                 	db	101	;'e'
   869  007ED6  00                 	db	0
   870  007ED7                     STR_67:
   871  007ED7  5B                 	db	91	;'['
   872  007ED8  50                 	db	80	;'P'
   873  007ED9  41                 	db	65	;'A'
   874  007EDA  43                 	db	67	;'C'
   875  007EDB  4B                 	db	75	;'K'
   876  007EDC  45                 	db	69	;'E'
   877  007EDD  54                 	db	84	;'T'
   878  007EDE  20                 	db	32
   879  007EDF  44                 	db	68	;'D'
   880  007EE0  52                 	db	82	;'R'
   881  007EE1  4F                 	db	79	;'O'
   882  007EE2  50                 	db	80	;'P'
   883  007EE3  50                 	db	80	;'P'
   884  007EE4  45                 	db	69	;'E'
   885  007EE5  44                 	db	68	;'D'
   886  007EE6  5D                 	db	93	;']'
   887  007EE7  00                 	db	0
   888  007EE8                     STR_40:
   889  007EE8  20                 	db	32
   890  007EE9  4D                 	db	77	;'M'
   891  007EEA  45                 	db	69	;'E'
   892  007EEB  4D                 	db	77	;'M'
   893  007EEC  4F                 	db	79	;'O'
   894  007EED  52                 	db	82	;'R'
   895  007EEE  59                 	db	89	;'Y'
   896  007EEF  20                 	db	32
   897  007EF0  4D                 	db	77	;'M'
   898  007EF1  4F                 	db	79	;'O'
   899  007EF2  44                 	db	68	;'D'
   900  007EF3  55                 	db	85	;'U'
   901  007EF4  4C                 	db	76	;'L'
   902  007EF5  45                 	db	69	;'E'
   903  007EF6  3A                 	db	58	;':'
   904  007EF7  20                 	db	32
   905  007EF8  00                 	db	0
   906  007EF9                     STR_2:
   907  007EF9  52                 	db	82	;'R'
   908  007EFA  65                 	db	101	;'e'
   909  007EFB  73                 	db	115	;'s'
   910  007EFC  65                 	db	101	;'e'
   911  007EFD  74                 	db	116	;'t'
   912  007EFE  20                 	db	32
   913  007EFF  73                 	db	115	;'s'
   914  007F00  75                 	db	117	;'u'
   915  007F01  63                 	db	99	;'c'
   916  007F02  63                 	db	99	;'c'
   917  007F03  65                 	db	101	;'e'
   918  007F04  73                 	db	115	;'s'
   919  007F05  73                 	db	115	;'s'
   920  007F06  2E                 	db	46
   921  007F07  0A                 	db	10
   922  007F08  0D                 	db	13
   923  007F09  00                 	db	0
   924  007F0A                     STR_61:
   925  007F0A  5B                 	db	91	;'['
   926  007F0B  52                 	db	82	;'R'
   927  007F0C  65                 	db	101	;'e'
   928  007F0D  70                 	db	112	;'p'
   929  007F0E  6C                 	db	108	;'l'
   930  007F0F  79                 	db	121	;'y'
   931  007F10  20                 	db	32
   932  007F11  73                 	db	115	;'s'
   933  007F12  65                 	db	101	;'e'
   934  007F13  6E                 	db	110	;'n'
   935  007F14  74                 	db	116	;'t'
   936  007F15  20                 	db	32
   937  007F16  74                 	db	116	;'t'
   938  007F17  6F                 	db	111	;'o'
   939  007F18  20                 	db	32
   940  007F19  00                 	db	0
   941  007F1A                     STR_7:
   942  007F1A  5B                 	db	91	;'['
   943  007F1B  53                 	db	83	;'S'
   944  007F1C  79                 	db	121	;'y'
   945  007F1D  6D                 	db	109	;'m'
   946  007F1E  62                 	db	98	;'b'
   947  007F1F  6F                 	db	111	;'o'
   948  007F20  6C                 	db	108	;'l'
   949  007F21  20                 	db	32
   950  007F22  45                 	db	69	;'E'
   951  007F23  72                 	db	114	;'r'
   952  007F24  72                 	db	114	;'r'
   953  007F25  6F                 	db	111	;'o'
   954  007F26  72                 	db	114	;'r'
   955  007F27  73                 	db	115	;'s'
   956  007F28  5D                 	db	93	;']'
   957  007F29  00                 	db	0
   958  007F2A                     STR_3:
   959  007F2A  52                 	db	82	;'R'
   960  007F2B  65                 	db	101	;'e'
   961  007F2C  73                 	db	115	;'s'
   962  007F2D  65                 	db	101	;'e'
   963  007F2E  74                 	db	116	;'t'
   964  007F2F  20                 	db	32
   965  007F30  66                 	db	102	;'f'
   966  007F31  61                 	db	97	;'a'
   967  007F32  69                 	db	105	;'i'
   968  007F33  6C                 	db	108	;'l'
   969  007F34  65                 	db	101	;'e'
   970  007F35  64                 	db	100	;'d'
   971  007F36  2E                 	db	46
   972  007F37  0A                 	db	10
   973  007F38  0D                 	db	13
   974  007F39  00                 	db	0
   975  007F3A                     STR_60:
   976  007F3A  5B                 	db	91	;'['
   977  007F3B  49                 	db	73	;'I'
   978  007F3C  73                 	db	115	;'s'
   979  007F3D  47                 	db	71	;'G'
   980  007F3E  72                 	db	114	;'r'
   981  007F3F  61                 	db	97	;'a'
   982  007F40  74                 	db	116	;'t'
   983  007F41  75                 	db	117	;'u'
   984  007F42  69                 	db	105	;'i'
   985  007F43  74                 	db	116	;'t'
   986  007F44  6F                 	db	111	;'o'
   987  007F45  75                 	db	117	;'u'
   988  007F46  73                 	db	115	;'s'
   989  007F47  5D                 	db	93	;']'
   990  007F48  00                 	db	0
   991  007F49                     STR_44:
   992  007F49  20                 	db	32
   993  007F4A  49                 	db	73	;'I'
   994  007F4B  50                 	db	80	;'P'
   995  007F4C  76                 	db	118	;'v'
   996  007F4D  34                 	db	52	;'4'
   997  007F4E  20                 	db	32
   998  007F4F  4D                 	db	77	;'M'
   999  007F50  4F                 	db	79	;'O'
  1000  007F51  44                 	db	68	;'D'
  1001  007F52  55                 	db	85	;'U'
  1002  007F53  4C                 	db	76	;'L'
  1003  007F54  45                 	db	69	;'E'
  1004  007F55  3A                 	db	58	;':'
  1005  007F56  20                 	db	32
  1006  007F57  00                 	db	0
  1007  007F58                     STR_43:
  1008  007F58  20                 	db	32
  1009  007F59  41                 	db	65	;'A'
  1010  007F5A  52                 	db	82	;'R'
  1011  007F5B  50                 	db	80	;'P'
  1012  007F5C  20                 	db	32
  1013  007F5D  4D                 	db	77	;'M'
  1014  007F5E  4F                 	db	79	;'O'
  1015  007F5F  44                 	db	68	;'D'
  1016  007F60  55                 	db	85	;'U'
  1017  007F61  4C                 	db	76	;'L'
  1018  007F62  45                 	db	69	;'E'
  1019  007F63  3A                 	db	58	;':'
  1020  007F64  20                 	db	32
  1021  007F65  00                 	db	0
  1022  007F66                     STR_33:
  1023  007F66  4C                 	db	76	;'L'
  1024  007F67  69                 	db	105	;'i'
  1025  007F68  6E                 	db	110	;'n'
  1026  007F69  6B                 	db	107	;'k'
  1027  007F6A  20                 	db	32
  1028  007F6B  6C                 	db	108	;'l'
  1029  007F6C  6F                 	db	111	;'o'
  1030  007F6D  73                 	db	115	;'s'
  1031  007F6E  74                 	db	116	;'t'
  1032  007F6F  2E                 	db	46
  1033  007F70  0A                 	db	10
  1034  007F71  0D                 	db	13
  1035  007F72  00                 	db	0
  1036  007F73                     STR_26:
  1037  007F73  20                 	db	32
  1038  007F74  64                 	db	100	;'d'
  1039  007F75  65                 	db	101	;'e'
  1040  007F76  74                 	db	116	;'t'
  1041  007F77  65                 	db	101	;'e'
  1042  007F78  63                 	db	99	;'c'
  1043  007F79  74                 	db	116	;'t'
  1044  007F7A  65                 	db	101	;'e'
  1045  007F7B  64                 	db	100	;'d'
  1046  007F7C  2E                 	db	46
  1047  007F7D  20                 	db	32
  1048  007F7E  00                 	db	0
  1049  007F7F                     STR_21:
  1050  007F7F  46                 	db	70	;'F'
  1051  007F80  65                 	db	101	;'e'
  1052  007F81  62                 	db	98	;'b'
  1053  007F82  20                 	db	32
  1054  007F83  32                 	db	50	;'2'
  1055  007F84  36                 	db	54	;'6'
  1056  007F85  20                 	db	32
  1057  007F86  32                 	db	50	;'2'
  1058  007F87  30                 	db	48	;'0'
  1059  007F88  31                 	db	49	;'1'
  1060  007F89  39                 	db	57	;'9'
  1061  007F8A  00                 	db	0
  1062  007F8B                     STR_5:
  1063  007F8B  5B                 	db	91	;'['
  1064  007F8C  42                 	db	66	;'B'
  1065  007F8D  72                 	db	114	;'r'
  1066  007F8E  6F                 	db	111	;'o'
  1067  007F8F  61                 	db	97	;'a'
  1068  007F90  64                 	db	100	;'d'
  1069  007F91  63                 	db	99	;'c'
  1070  007F92  61                 	db	97	;'a'
  1071  007F93  73                 	db	115	;'s'
  1072  007F94  74                 	db	116	;'t'
  1073  007F95  5D                 	db	93	;']'
  1074  007F96  00                 	db	0
  1075  007F97                     STR_59:
  1076  007F97  5B                 	db	91	;'['
  1077  007F98  49                 	db	73	;'I'
  1078  007F99  73                 	db	115	;'s'
  1079  007F9A  50                 	db	80	;'P'
  1080  007F9B  72                 	db	114	;'r'
  1081  007F9C  6F                 	db	111	;'o'
  1082  007F9D  62                 	db	98	;'b'
  1083  007F9E  65                 	db	101	;'e'
  1084  007F9F  5D                 	db	93	;']'
  1085  007FA0  00                 	db	0
  1086  007FA1                     STR_6:
  1087  007FA1  5B                 	db	91	;'['
  1088  007FA2  55                 	db	85	;'U'
  1089  007FA3  6E                 	db	110	;'n'
  1090  007FA4  69                 	db	105	;'i'
  1091  007FA5  63                 	db	99	;'c'
  1092  007FA6  61                 	db	97	;'a'
  1093  007FA7  73                 	db	115	;'s'
  1094  007FA8  74                 	db	116	;'t'
  1095  007FA9  5D                 	db	93	;']'
  1096  007FAA  00                 	db	0
  1097  007FAB                     STR_48:
  1098  007FAB  20                 	db	32
  1099  007FAC  28                 	db	40
  1100  007FAD  43                 	db	67	;'C'
  1101  007FAE  6F                 	db	111	;'o'
  1102  007FAF  64                 	db	100	;'d'
  1103  007FB0  65                 	db	101	;'e'
  1104  007FB1  3A                 	db	58	;':'
  1105  007FB2  20                 	db	32
  1106  007FB3  00                 	db	0
  1107  007FB4                     STR_23:
  1108  007FB4  30                 	db	48	;'0'
  1109  007FB5  30                 	db	48	;'0'
  1110  007FB6  3A                 	db	58	;':'
  1111  007FB7  31                 	db	49	;'1'
  1112  007FB8  33                 	db	51	;'3'
  1113  007FB9  3A                 	db	58	;':'
  1114  007FBA  33                 	db	51	;'3'
  1115  007FBB  38                 	db	56	;'8'
  1116  007FBC  00                 	db	0
  1117  007FBD                     STR_65:
  1118  007FBD  20                 	db	32
  1119  007FBE  69                 	db	105	;'i'
  1120  007FBF  73                 	db	115	;'s'
  1121  007FC0  20                 	db	32
  1122  007FC1  61                 	db	97	;'a'
  1123  007FC2  74                 	db	116	;'t'
  1124  007FC3  20                 	db	32
  1125  007FC4  00                 	db	0
  1126  007FC5                     STR_39:
  1127  007FC5  5B                 	db	91	;'['
  1128  007FC6  45                 	db	69	;'E'
  1129  007FC7  52                 	db	82	;'R'
  1130  007FC8  52                 	db	82	;'R'
  1131  007FC9  4F                 	db	79	;'O'
  1132  007FCA  52                 	db	82	;'R'
  1133  007FCB  5D                 	db	93	;']'
  1134  007FCC  00                 	db	0
  1135  007FCD                     STR_9:
  1136  007FCD  5B                 	db	91	;'['
  1137  007FCE  49                 	db	73	;'I'
  1138  007FCF  50                 	db	80	;'P'
  1139  007FD0  76                 	db	118	;'v'
  1140  007FD1  34                 	db	52	;'4'
  1141  007FD2  5D                 	db	93	;']'
  1142  007FD3  00                 	db	0
  1143  007FD4                     STR_8:
  1144  007FD4  5B                 	db	91	;'['
  1145  007FD5  41                 	db	65	;'A'
  1146  007FD6  52                 	db	82	;'R'
  1147  007FD7  50                 	db	80	;'P'
  1148  007FD8  5D                 	db	93	;']'
  1149  007FD9  00                 	db	0
  1150  007FDA                     STR_56:
  1151  007FDA  5D                 	db	93	;']'
  1152  007FDB  2D                 	db	45
  1153  007FDC  3E                 	db	62	;'>'
  1154  007FDD  5B                 	db	91	;'['
  1155  007FDE  00                 	db	0
  1156  007FDF                     STR_50:
  1157  007FDF  49                 	db	73	;'I'
  1158  007FE0  50                 	db	80	;'P'
  1159  007FE1  76                 	db	118	;'v'
  1160  007FE2  34                 	db	52	;'4'
  1161  007FE3  00                 	db	0
  1162  007FE4                     STR_49:
  1163  007FE4  29                 	db	41
  1164  007FE5  2E                 	db	46
  1165  007FE6  0A                 	db	10
  1166  007FE7  0D                 	db	13
  1167  007FE8  00                 	db	0
  1168  007FE9                     STR_13:
  1169  007FE9  5D                 	db	93	;']'
  1170  007FEA  5B                 	db	91	;'['
  1171  007FEB  4C                 	db	76	;'L'
  1172  007FEC  3D                 	db	61	;'='
  1173  007FED  00                 	db	0
  1174  007FEE                     STR_51:
  1175  007FEE  41                 	db	65	;'A'
  1176  007FEF  52                 	db	82	;'R'
  1177  007FF0  50                 	db	80	;'P'
  1178  007FF1  00                 	db	0
  1179  007FF2                     STR_17:
  1180  007FF2  20                 	db	32
  1181  007FF3  28                 	db	40
  1182  007FF4  00                 	db	0
  1183  007FF5                     STR_11:
  1184  007FF5  2D                 	db	45
  1185  007FF6  3E                 	db	62	;'>'
  1186  007FF7  00                 	db	0
  1187  007FF8                     STR_12:
  1188  007FF8  5D                 	db	93	;']'
  1189  007FF9  5B                 	db	91	;'['
  1190  007FFA  00                 	db	0
  1191  007FFB                     STR_18:
  1192  007FFB  29                 	db	41
  1193  007FFC  5D                 	db	93	;']'
  1194  007FFD  00                 	db	0
  1195  0000                     
  1196                           ; #config settings
  1197  007FFE  00                 	db	0	; dummy byte at the end
  1198  0000                     
  1199                           	psect	cinit
  1200  0039C0                     __pcinit:
  1201                           	opt stack 0
  1202  0039C0                     start_initialization:
  1203                           	opt stack 0
  1204  0039C0                     __initialization:
  1205                           	opt stack 0
  1206                           
  1207                           ; Initialize objects allocated to BANK2 (46 bytes)
  1208                           ; load TBLPTR registers with __pidataBANK2
  1209  0039C0  0EF2               	movlw	low __pidataBANK2
  1210  0039C2  6EF6               	movwf	tblptrl,c
  1211  0039C4  0E42               	movlw	high __pidataBANK2
  1212  0039C6  6EF7               	movwf	tblptrh,c
  1213  0039C8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1214  0039CA  6EF8               	movwf	tblptru,c
  1215  0039CC  EE02  F0B5         	lfsr	0,__pdataBANK2
  1216  0039D0  EE10 F02E          	lfsr	1,46
  1217  0039D4                     copy_data0:
  1218  0039D4  0009               	tblrd		*+
  1219  0039D6  CFF5 FFEE          	movff	tablat,postinc0
  1220  0039DA  50E5               	movf	postdec1,w,c
  1221  0039DC  50E1               	movf	fsr1l,w,c
  1222  0039DE  E1FA               	bnz	copy_data0
  1223                           
  1224                           ; Initialize objects allocated to COMRAM (2 bytes)
  1225                           ; load TBLPTR registers with __pidataCOMRAM
  1226  0039E0  0E7C               	movlw	low __pidataCOMRAM
  1227  0039E2  6EF6               	movwf	tblptrl,c
  1228  0039E4  0E46               	movlw	high __pidataCOMRAM
  1229  0039E6  6EF7               	movwf	tblptrh,c
  1230  0039E8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1231  0039EA  6EF8               	movwf	tblptru,c
  1232  0039EC  0009               	tblrd		*+	;fetch initializer
  1233  0039EE  CFF5 F04D          	movff	tablat,__pdataCOMRAM
  1234  0039F2  0009               	tblrd		*+	;fetch initializer
  1235  0039F4  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
  1236                           
  1237                           ; Clear objects allocated to BANK3 (112 bytes)
  1238  0039F8  EE03  F000         	lfsr	0,__pbssBANK3
  1239  0039FC  0E70               	movlw	112
  1240  0039FE                     clear_0:
  1241  0039FE  6AEE               	clrf	postinc0,c
  1242  003A00  06E8               	decf	wreg,f,c
  1243  003A02  E1FD               	bnz	clear_0
  1244                           
  1245                           ; Clear objects allocated to BANK2 (181 bytes)
  1246  003A04  EE02  F000         	lfsr	0,__pbssBANK2
  1247  003A08  0EB5               	movlw	181
  1248  003A0A                     clear_1:
  1249  003A0A  6AEE               	clrf	postinc0,c
  1250  003A0C  06E8               	decf	wreg,f,c
  1251  003A0E  E1FD               	bnz	clear_1
  1252                           
  1253                           ; Clear objects allocated to BANK1 (84 bytes)
  1254  003A10  EE01  F080         	lfsr	0,__pbssBANK1
  1255  003A14  0E54               	movlw	84
  1256  003A16                     clear_2:
  1257  003A16  6AEE               	clrf	postinc0,c
  1258  003A18  06E8               	decf	wreg,f,c
  1259  003A1A  E1FD               	bnz	clear_2
  1260                           
  1261                           ; Clear objects allocated to COMRAM (37 bytes)
  1262  003A1C  EE00  F028         	lfsr	0,__pbssCOMRAM
  1263  003A20  0E25               	movlw	37
  1264  003A22                     clear_3:
  1265  003A22  6AEE               	clrf	postinc0,c
  1266  003A24  06E8               	decf	wreg,f,c
  1267  003A26  E1FD               	bnz	clear_3
  1268  003A28                     end_of_initialization:
  1269                           	opt stack 0
  1270  003A28                     __end_of__initialization:
  1271                           	opt stack 0
  1272  003A28  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1273  003A2A  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1274  003A2C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1275  003A2E  6EF8               	movwf	tblptru,c
  1276  003A30  0100               	movlb	0
  1277  003A32  EF02  F005         	goto	_main	;jump to C main() function
  1278                           tblptru	equ	0xFF8
  1279                           tblptrh	equ	0xFF7
  1280                           tblptrl	equ	0xFF6
  1281                           tablat	equ	0xFF5
  1282                           postinc0	equ	0xFEE
  1283                           wreg	equ	0xFE8
  1284                           postdec1	equ	0xFE5
  1285                           fsr1l	equ	0xFE1
  1286                           
  1287                           	psect	bssCOMRAM
  1288  000028                     __pbssCOMRAM:
  1289                           	opt stack 0
  1290  000028                     	ds	4
  1291  00002C                     buttonHandler@debounceCounter:
  1292                           	opt stack 0
  1293  00002C                     	ds	4
  1294  000030                     _numberToDisplay:
  1295                           	opt stack 0
  1296  000030                     	ds	4
  1297  000034                     _seconds:
  1298                           	opt stack 0
  1299  000034                     	ds	4
  1300  000038                     sevenSegmentUpdate@digitsToDisplay:
  1301                           	opt stack 0
  1302  000038                     	ds	3
  1303  00003B                     ipv4_streamToTransmissionBuffer@dataPointer:
  1304                           	opt stack 0
  1305  00003B                     	ds	2
  1306  00003D                     	ds	2
  1307  00003F                     updateSeconds@prescaler_ms:
  1308                           	opt stack 0
  1309  00003F                     	ds	2
  1310  000041                     ethernetController_streamToTransmitBuffer@pointer:
  1311                           	opt stack 0
  1312  000041                     	ds	2
  1313  000043                     ethernetController_softReset@F5825:
  1314                           	opt stack 0
  1315  000043                     	ds	2
  1316  000045                     _nextPacketPointer:
  1317                           	opt stack 0
  1318  000045                     	ds	2
  1319  000047                     sevenSegmentUpdate@digitPointer:
  1320                           	opt stack 0
  1321  000047                     	ds	1
  1322  000048                     buttonHandler@newState:
  1323                           	opt stack 0
  1324  000048                     	ds	1
  1325  000049                     buttonHandler@oldState:
  1326                           	opt stack 0
  1327  000049                     	ds	1
  1328  00004A                     	ds	1
  1329  00004B                     ARP_parseFromRXBuffer@length:
  1330                           	opt stack 0
  1331  00004B                     	ds	2
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1l	equ	0xFE1
  1340                           
  1341                           	psect	dataCOMRAM
  1342  00004D                     __pdataCOMRAM:
  1343                           	opt stack 0
  1344  00004D                     ethernetController_softReset@F5823:
  1345                           	opt stack 0
  1346  00004D                     	ds	2
  1347                           tblptru	equ	0xFF8
  1348                           tblptrh	equ	0xFF7
  1349                           tblptrl	equ	0xFF6
  1350                           tablat	equ	0xFF5
  1351                           postinc0	equ	0xFEE
  1352                           wreg	equ	0xFE8
  1353                           postdec1	equ	0xFE5
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	bssBANK1
  1357  000180                     __pbssBANK1:
  1358                           	opt stack 0
  1359  000180                     _occupiedMemory:
  1360                           	opt stack 0
  1361  000180                     	ds	64
  1362  0001C0                     ipv4_sendFrame@oldTime:
  1363                           	opt stack 0
  1364  0001C0                     	ds	4
  1365  0001C4                     	ds	4
  1366  0001C8                     ipv4_sendFrame@requestCounter:
  1367                           	opt stack 0
  1368  0001C8                     	ds	1
  1369  0001C9                     intToString@number:
  1370                           	opt stack 0
  1371  0001C9                     	ds	10
  1372  0001D3                     _buttonState:
  1373                           	opt stack 0
  1374  0001D3                     	ds	1
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1l	equ	0xFE1
  1383                           
  1384                           	psect	bssBANK2
  1385  000200                     __pbssBANK2:
  1386                           	opt stack 0
  1387  000200                     printEthernetState@oldState:
  1388                           	opt stack 0
  1389  000200                     	ds	15
  1390  00020F                     _stack:
  1391                           	opt stack 0
  1392  00020F                     	ds	110
  1393  00027D                     arpEntryToString@string:
  1394                           	opt stack 0
  1395  00027D                     	ds	50
  1396  0002AF                     ethernetController_getRSV@temp:
  1397                           	opt stack 0
  1398  0002AF                     	ds	6
  1399                           tblptru	equ	0xFF8
  1400                           tblptrh	equ	0xFF7
  1401                           tblptrl	equ	0xFF6
  1402                           tablat	equ	0xFF5
  1403                           postinc0	equ	0xFEE
  1404                           wreg	equ	0xFE8
  1405                           postdec1	equ	0xFE5
  1406                           fsr1l	equ	0xFE1
  1407                           
  1408                           	psect	dataBANK2
  1409  0002B5                     __pdataBANK2:
  1410                           	opt stack 0
  1411  0002B5                     macToString@F5785:
  1412                           	opt stack 0
  1413  0002B5                     	ds	18
  1414  0002C7                     _sevenSegCharacters:
  1415                           	opt stack 0
  1416  0002C7                     	ds	12
  1417  0002D3                     ipAdressToString@address:
  1418                           	opt stack 0
  1419  0002D3                     	ds	16
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	bssBANK3
  1430  000300                     __pbssBANK3:
  1431                           	opt stack 0
  1432  000300                     _ARP_table:
  1433                           	opt stack 0
  1434  000300                     	ds	112
  1435                           tblptru	equ	0xFF8
  1436                           tblptrh	equ	0xFF7
  1437                           tblptrl	equ	0xFF6
  1438                           tablat	equ	0xFF5
  1439                           postinc0	equ	0xFEE
  1440                           wreg	equ	0xFE8
  1441                           postdec1	equ	0xFE5
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	cstackBANK3
  1445  000370                     __pcstackBANK3:
  1446                           	opt stack 0
  1447  000370                     main@prescaler:
  1448                           	opt stack 0
  1449                           
  1450                           ; 4 bytes @ 0x0
  1451  000370                     	ds	4
  1452  000374                     main@headerBuf:
  1453                           	opt stack 0
  1454                           
  1455                           ; 32 bytes @ 0x4
  1456  000374                     	ds	32
  1457  000394                     _main$1973:
  1458                           	opt stack 0
  1459                           
  1460                           ; 2 bytes @ 0x24
  1461  000394                     	ds	2
  1462  000396                     main@i:
  1463                           	opt stack 0
  1464                           
  1465                           ; 1 bytes @ 0x26
  1466  000396                     	ds	1
  1467  000397                     main@err:
  1468                           	opt stack 0
  1469                           
  1470                           ; 3 bytes @ 0x27
  1471  000397                     	ds	3
  1472  00039A                     main@IPsource:
  1473                           	opt stack 0
  1474                           
  1475                           ; 4 bytes @ 0x2A
  1476  00039A                     	ds	4
  1477  00039E                     main@IPdestination:
  1478                           	opt stack 0
  1479                           
  1480                           ; 4 bytes @ 0x2E
  1481  00039E                     	ds	4
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	cstackBANK1
  1492  000100                     __pcstackBANK1:
  1493                           	opt stack 0
  1494  000100                     ARP_sendRequest@senderIP:
  1495                           	opt stack 0
  1496  000100                     ARP_replyIfNeeded@request:
  1497                           	opt stack 0
  1498                           
  1499                           ; 32 bytes @ 0x0
  1500  000100                     	ds	4
  1501  000104                     ARP_sendRequest@senderMAC:
  1502                           	opt stack 0
  1503                           
  1504                           ; 6 bytes @ 0x4
  1505  000104                     	ds	6
  1506  00010A                     ARP_sendRequest@targetIP:
  1507                           	opt stack 0
  1508                           
  1509                           ; 4 bytes @ 0xA
  1510  00010A                     	ds	4
  1511  00010E                     ARP_sendRequest@targetMAC:
  1512                           	opt stack 0
  1513                           
  1514                           ; 6 bytes @ 0xE
  1515  00010E                     	ds	6
  1516  000114                     ARP_sendRequest@request:
  1517                           	opt stack 0
  1518                           
  1519                           ; 32 bytes @ 0x14
  1520  000114                     	ds	12
  1521  000120                     ARP_replyIfNeeded@senderIP:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x20
  1525  000120                     	ds	4
  1526  000124                     ARP_replyIfNeeded@senderMAC:
  1527                           	opt stack 0
  1528                           
  1529                           ; 6 bytes @ 0x24
  1530  000124                     	ds	6
  1531  00012A                     ARP_replyIfNeeded@targetMAC:
  1532                           	opt stack 0
  1533                           
  1534                           ; 6 bytes @ 0x2A
  1535  00012A                     	ds	6
  1536  000130                     ARP_replyIfNeeded@targetIP:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x30
  1540  000130                     	ds	4
  1541  000134                     ?_ipv4_sendFrame:
  1542                           	opt stack 0
  1543  000134                     ARP_replyIfNeeded@reply:
  1544                           	opt stack 0
  1545  000134                     ipv4_sendFrame@ipPacket:
  1546                           	opt stack 0
  1547                           
  1548                           ; 60 bytes @ 0x34
  1549  000134                     	ds	32
  1550  000154                     ARP_handleNewPacket@frame:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x54
  1554  000154                     	ds	2
  1555  000156                     ARP_handleNewPacket@arp:
  1556                           	opt stack 0
  1557                           
  1558                           ; 32 bytes @ 0x56
  1559  000156                     	ds	26
  1560  000170                     ipv4_sendFrame@numberOfRequests:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x70
  1564  000170                     	ds	1
  1565  000171                     ipv4_sendFrame@requestTimeout:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x71
  1569  000171                     	ds	1
  1570  000172                     ipv4_sendFrame@index:
  1571                           	opt stack 0
  1572                           
  1573                           ; 1 bytes @ 0x72
  1574  000172                     	ds	1
  1575  000173                     ipv4_sendFrame@err:
  1576                           	opt stack 0
  1577                           
  1578                           ; 3 bytes @ 0x73
  1579  000173                     	ds	3
  1580  000176                     ?_ethernet_rxGetNewFrame:
  1581                           	opt stack 0
  1582  000176                     ethernet_rxGetNewFrame@frame:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x76
  1586  000176                     	ds	3
  1587  000179                     handleStackBackgroundTasks@stack:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x79
  1591  000179                     	ds	2
  1592  00017B                     
  1593                           ; 1 bytes @ 0x7B
  1594  00017B                     	ds	2
  1595  00017D                     ??_main:
  1596                           
  1597                           ; 1 bytes @ 0x7D
  1598  00017D                     	ds	3
  1599                           tblptru	equ	0xFF8
  1600                           tblptrh	equ	0xFF7
  1601                           tblptrl	equ	0xFF6
  1602                           tablat	equ	0xFF5
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           postdec1	equ	0xFE5
  1606                           fsr1l	equ	0xFE1
  1607                           
  1608                           	psect	cstackBANK0
  1609  000060                     __pcstackBANK0:
  1610                           	opt stack 0
  1611  000060                     ?_ENC424J600_getNextPacketPointer:
  1612                           	opt stack 0
  1613  000060                     ?_ethernetController_getDeviceName:
  1614                           	opt stack 0
  1615  000060                     ?_etherTypeToString:
  1616                           	opt stack 0
  1617  000060                     ?___wmul:
  1618                           	opt stack 0
  1619  000060                     ?___lwdiv:
  1620                           	opt stack 0
  1621  000060                     ?___lwmod:
  1622                           	opt stack 0
  1623  000060                     ?_getSeconds:
  1624                           	opt stack 0
  1625  000060                     ?___llmod:
  1626                           	opt stack 0
  1627  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1628                           	opt stack 0
  1629  000060                     ?_ARP_getEntryFromTable:
  1630                           	opt stack 0
  1631  000060                     entireMemoryEmpty@i:
  1632                           	opt stack 0
  1633  000060                     entireMemoryFull@i:
  1634                           	opt stack 0
  1635  000060                     memory_txFrameClear@index:
  1636                           	opt stack 0
  1637  000060                     ENC424J600_setNextPacketPointer@ptr:
  1638                           	opt stack 0
  1639  000060                     ENC424J600_writeSPI@data:
  1640                           	opt stack 0
  1641  000060                     ENC424J600_readSPI@data:
  1642                           	opt stack 0
  1643  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1644                           	opt stack 0
  1645  000060                     mac_setToBroadcast@mac:
  1646                           	opt stack 0
  1647  000060                     mac_isAllZero@mac:
  1648                           	opt stack 0
  1649  000060                     mac_cmp@a:
  1650                           	opt stack 0
  1651  000060                     mac_setAllZero@mac:
  1652                           	opt stack 0
  1653  000060                     etherTypeToString@ethertype:
  1654                           	opt stack 0
  1655  000060                     ipv4_calculateHeaderChecksum@header:
  1656                           	opt stack 0
  1657  000060                     ipv4_cmp@a:
  1658                           	opt stack 0
  1659  000060                     ipv4_isAllZero@ip:
  1660                           	opt stack 0
  1661  000060                     ipv4_setToAllZero@ip:
  1662                           	opt stack 0
  1663  000060                     ___wmul@multiplier:
  1664                           	opt stack 0
  1665  000060                     ___lwdiv@dividend:
  1666                           	opt stack 0
  1667  000060                     ___lwmod@dividend:
  1668                           	opt stack 0
  1669  000060                     ___llmod@dividend:
  1670                           	opt stack 0
  1671  000060                     checkForOverlapSwitched@a:
  1672                           	opt stack 0
  1673  000060                     ipv4_writeHeaderIntoBuffer@header:
  1674                           	opt stack 0
  1675                           
  1676                           ; 23 bytes @ 0x0
  1677  000060                     	ds	2
  1678  000062                     ??_ENC424J600_writeSPI:
  1679  000062                     ??_ENC424J600_readSPI:
  1680  000062                     ??_etherTypeToString:
  1681  000062                     ??_ipv4_calculateHeaderChecksum:
  1682  000062                     ?_ethernetController_getNextPacketPointer:
  1683                           	opt stack 0
  1684  000062                     mac_setToBroadcast@i:
  1685                           	opt stack 0
  1686  000062                     mac_isAllZero@i:
  1687                           	opt stack 0
  1688  000062                     mac_setAllZero@i:
  1689                           	opt stack 0
  1690  000062                     ipv4_isAllZero@i:
  1691                           	opt stack 0
  1692  000062                     ipv4_setToAllZero@i:
  1693                           	opt stack 0
  1694  000062                     mac_cmp@b:
  1695                           	opt stack 0
  1696  000062                     ipv4_cmp@b:
  1697                           	opt stack 0
  1698  000062                     ___wmul@multiplicand:
  1699                           	opt stack 0
  1700  000062                     ___lwdiv@divisor:
  1701                           	opt stack 0
  1702  000062                     ___lwmod@divisor:
  1703                           	opt stack 0
  1704  000062                     ethernetController_getDeviceName@string:
  1705                           	opt stack 0
  1706                           
  1707                           ; 11 bytes @ 0x2
  1708  000062                     	ds	2
  1709  000064                     ___lwdiv@counter:
  1710                           	opt stack 0
  1711  000064                     ___lwmod@counter:
  1712                           	opt stack 0
  1713  000064                     ___wmul@product:
  1714                           	opt stack 0
  1715  000064                     ___llmod@divisor:
  1716                           	opt stack 0
  1717  000064                     ARP_setNewEntry@mac:
  1718                           	opt stack 0
  1719                           
  1720                           ; 6 bytes @ 0x4
  1721  000064                     	ds	1
  1722  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1723  000065                     ___lwdiv@quotient:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x5
  1727  000065                     	ds	1
  1728  000066                     ?___lldiv:
  1729                           	opt stack 0
  1730  000066                     mac_cmp@i:
  1731                           	opt stack 0
  1732  000066                     ipv4_cmp@i:
  1733                           	opt stack 0
  1734  000066                     ENC424J600_writeSPI@timeoutCounter:
  1735                           	opt stack 0
  1736  000066                     ENC424J600_readSPI@timeoutCounter:
  1737                           	opt stack 0
  1738  000066                     ___lldiv@dividend:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0x6
  1742  000066                     	ds	1
  1743  000067                     ?_ipAdressToString:
  1744                           	opt stack 0
  1745  000067                     ARP_getEntryFromTable@index:
  1746                           	opt stack 0
  1747  000067                     ipAdressToString@ip:
  1748                           	opt stack 0
  1749  000067                     ARP_checkForEntry@ip:
  1750                           	opt stack 0
  1751                           
  1752                           ; 4 bytes @ 0x7
  1753  000067                     	ds	1
  1754  000068                     ___llmod@counter:
  1755                           	opt stack 0
  1756  000068                     checkForOverlapSwitched@b:
  1757                           	opt stack 0
  1758                           
  1759                           ; 8 bytes @ 0x8
  1760  000068                     	ds	2
  1761  00006A                     ENC424J600_writeSingleByte@opcode:
  1762                           	opt stack 0
  1763  00006A                     ethernetController_streamToTransmitBuffer@len:
  1764                           	opt stack 0
  1765  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1766                           	opt stack 0
  1767  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1768                           	opt stack 0
  1769  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1770                           	opt stack 0
  1771  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1772                           	opt stack 0
  1773  00006A                     ARP_setNewEntry@ip:
  1774                           	opt stack 0
  1775  00006A                     ___lldiv@divisor:
  1776                           	opt stack 0
  1777                           
  1778                           ; 4 bytes @ 0xA
  1779  00006A                     	ds	1
  1780  00006B                     ??_ipAdressToString:
  1781  00006B                     ARP_checkForEntry@index:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0xB
  1785  00006B                     	ds	1
  1786  00006C                     ??_ethernetController_streamToTransmitBuffer:
  1787  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  1788                           	opt stack 0
  1789  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  1790                           	opt stack 0
  1791  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1792                           	opt stack 0
  1793  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1794                           	opt stack 0
  1795  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  1796                           	opt stack 0
  1797                           
  1798                           ; 5 bytes @ 0xC
  1799  00006C                     	ds	1
  1800  00006D                     ??_ARP_checkForEntry:
  1801  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  1802                           	opt stack 0
  1803  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  1804                           	opt stack 0
  1805  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  1806                           	opt stack 0
  1807  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0xD
  1811  00006D                     	ds	1
  1812  00006E                     ??_ENC424J600_clearInterruptFlag:
  1813  00006E                     ?_ENC424J600_getInterruptFlags:
  1814                           	opt stack 0
  1815  00006E                     ?_ethernetController_checkDeviceId:
  1816                           	opt stack 0
  1817  00006E                     ?_ethernetController_getMacAddress:
  1818                           	opt stack 0
  1819  00006E                     ethernetController_getSiliconRevision@data:
  1820                           	opt stack 0
  1821  00006E                     ethernetController_setLEDStatus@status:
  1822                           	opt stack 0
  1823  00006E                     ethernetController_setLEDConfiguration@conf:
  1824                           	opt stack 0
  1825  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  1826                           	opt stack 0
  1827  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  1828                           	opt stack 0
  1829  00006E                     ENC424J600_getPacketCount@lowByte:
  1830                           	opt stack 0
  1831  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  1832                           	opt stack 0
  1833  00006E                     ENC424J600_setTXLength@len:
  1834                           	opt stack 0
  1835  00006E                     ENC424J600_setTXStartAddress@addr:
  1836                           	opt stack 0
  1837  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  1838                           	opt stack 0
  1839  00006E                     ENC424J600_setRXTailPointer@addr:
  1840                           	opt stack 0
  1841  00006E                     ENC424J600_readPHYRegister@data:
  1842                           	opt stack 0
  1843  00006E                     ARP_setNewEntry@timestamp:
  1844                           	opt stack 0
  1845  00006E                     ipv4_calculateHeaderChecksum@sum:
  1846                           	opt stack 0
  1847  00006E                     ___lldiv@quotient:
  1848                           	opt stack 0
  1849                           
  1850                           ; 4 bytes @ 0xE
  1851  00006E                     	ds	1
  1852  00006F                     ?_ethernetController_getEtherTypeField:
  1853                           	opt stack 0
  1854  00006F                     ?_ethernetController_getSourceMACAddress:
  1855                           	opt stack 0
  1856  00006F                     ethernetController_setLEDStatus@LED:
  1857                           	opt stack 0
  1858  00006F                     ethernetController_setLEDConfiguration@LED:
  1859                           	opt stack 0
  1860  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  1861                           	opt stack 0
  1862  00006F                     ipAdressToString@ones:
  1863                           	opt stack 0
  1864  00006F                     ethernetController_writeDestinationMACAddress@addr:
  1865                           	opt stack 0
  1866                           
  1867                           ; 6 bytes @ 0xF
  1868  00006F                     	ds	1
  1869  000070                     ??_ENC424J600_getInterruptFlags:
  1870  000070                     ??_ENC424J600_readPHYRegister:
  1871  000070                     ethernetController_streamToTransmitBuffer@data:
  1872                           	opt stack 0
  1873  000070                     ethernetController_setLEDStatus@data:
  1874                           	opt stack 0
  1875  000070                     ethernetController_setLEDConfiguration@data:
  1876                           	opt stack 0
  1877  000070                     ENC424J600_setTXLength@lowByte:
  1878                           	opt stack 0
  1879  000070                     ENC424J600_setTXStartAddress@lowByte:
  1880                           	opt stack 0
  1881  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  1882                           	opt stack 0
  1883  000070                     ENC424J600_setRXTailPointer@lowByte:
  1884                           	opt stack 0
  1885  000070                     ENC424J600_clearInterruptFlag@flag:
  1886                           	opt stack 0
  1887  000070                     checkForOverlap@a:
  1888                           	opt stack 0
  1889                           
  1890                           ; 8 bytes @ 0x10
  1891  000070                     	ds	1
  1892  000071                     ??_ethernetController_getEtherTypeField:
  1893  000071                     ?_ethernetController_getRSV:
  1894                           	opt stack 0
  1895  000071                     ethernetController_checkDeviceId@data:
  1896                           	opt stack 0
  1897  000071                     ethernetController_streamToTransmitBuffer@opcode:
  1898                           	opt stack 0
  1899  000071                     ENC424J600_setTXLength@highByte:
  1900                           	opt stack 0
  1901  000071                     ENC424J600_setTXStartAddress@highByte:
  1902                           	opt stack 0
  1903  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  1904                           	opt stack 0
  1905  000071                     ENC424J600_setRXTailPointer@highByte:
  1906                           	opt stack 0
  1907  000071                     ENC424J600_clearInterruptFlag@temp:
  1908                           	opt stack 0
  1909  000071                     ethernetController_getRSV@address:
  1910                           	opt stack 0
  1911  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  1912                           	opt stack 0
  1913                           
  1914                           ; 8 bytes @ 0x11
  1915  000071                     	ds	1
  1916  000072                     ethernetController_clearInterruptFlag@flag:
  1917                           	opt stack 0
  1918  000072                     ___lldiv@counter:
  1919                           	opt stack 0
  1920  000072                     ethernetController_streamFromRXBuffer@len:
  1921                           	opt stack 0
  1922  000072                     ethernetController_dropPacket@frame:
  1923                           	opt stack 0
  1924  000072                     ethernetController_checkDeviceId@err:
  1925                           	opt stack 0
  1926  000072                     ethernetController_sendPacket@field:
  1927                           	opt stack 0
  1928  000072                     ipv4_streamToTransmissionBuffer@packet:
  1929                           	opt stack 0
  1930                           
  1931                           ; 60 bytes @ 0x12
  1932  000072                     	ds	1
  1933  000073                     ?_intToString:
  1934                           	opt stack 0
  1935  000073                     intToString@val:
  1936                           	opt stack 0
  1937  000073                     ipAdressToString@tens:
  1938                           	opt stack 0
  1939                           
  1940                           ; 4 bytes @ 0x13
  1941  000073                     	ds	1
  1942  000074                     ??_ethernetController_dropPacket:
  1943  000074                     ethernetController_streamFromRXBuffer@offset:
  1944                           	opt stack 0
  1945  000074                     ethernetController_getMacAddress@mac:
  1946                           	opt stack 0
  1947                           
  1948                           ; 6 bytes @ 0x14
  1949  000074                     	ds	1
  1950  000075                     ARP_checkForEntry@i:
  1951                           	opt stack 0
  1952  000075                     ethernetController_getSourceMACAddress@nextPktPointer:
  1953                           	opt stack 0
  1954  000075                     ethernetController_getEtherTypeField@nextPktPointer:
  1955                           	opt stack 0
  1956  000075                     ethernetController_writeDestinationMACAddress@field:
  1957                           	opt stack 0
  1958                           
  1959                           ; 8 bytes @ 0x15
  1960  000075                     	ds	1
  1961  000076                     ??_ethernetController_streamFromRXBuffer:
  1962  000076                     ethernetController_getRSV@opcode:
  1963                           	opt stack 0
  1964  000076                     ENC424J600_readPHYRegister@addr:
  1965                           	opt stack 0
  1966  000076                     ENC424J600_getInterruptFlags@low:
  1967                           	opt stack 0
  1968  000076                     ARP_setNewEntry@maxSeconds:
  1969                           	opt stack 0
  1970                           
  1971                           ; 4 bytes @ 0x16
  1972  000076                     	ds	1
  1973  000077                     ??_intToString:
  1974  000077                     ethernetController_getRSV@i:
  1975                           	opt stack 0
  1976  000077                     ENC424J600_readPHYRegister@PHYaddress:
  1977                           	opt stack 0
  1978  000077                     ENC424J600_getInterruptFlags@high:
  1979                           	opt stack 0
  1980  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  1981                           	opt stack 0
  1982  000077                     ipAdressToString@hundreds:
  1983                           	opt stack 0
  1984                           
  1985                           ; 4 bytes @ 0x17
  1986  000077                     	ds	1
  1987  000078                     ?_ethernetController_pollInterruptFlags:
  1988                           	opt stack 0
  1989  000078                     ENC424J600_readPHYRegister@unusedBits:
  1990                           	opt stack 0
  1991  000078                     checkForOverlap@b:
  1992                           	opt stack 0
  1993                           
  1994                           ; 8 bytes @ 0x18
  1995  000078                     	ds	1
  1996  000079                     ??_ipv4_writeHeaderIntoBuffer:
  1997  000079                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  1998                           	opt stack 0
  1999  000079                     ethernetController_getSourceMACAddress@opcode:
  2000                           	opt stack 0
  2001  000079                     ethernetController_getEtherTypeField@ethertype:
  2002                           	opt stack 0
  2003  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0x19
  2007  000079                     	ds	1
  2008  00007A                     ??_ethernetController_pollInterruptFlags:
  2009  00007A                     ?_macToString:
  2010                           	opt stack 0
  2011  00007A                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2012                           	opt stack 0
  2013  00007A                     ethernetController_dropPacket@opcode:
  2014                           	opt stack 0
  2015  00007A                     ARP_setNewEntry@oldestIndex:
  2016                           	opt stack 0
  2017  00007A                     ethernetController_getSourceMACAddress@sourceAddress:
  2018                           	opt stack 0
  2019  00007A                     macToString@addr:
  2020                           	opt stack 0
  2021                           
  2022                           ; 6 bytes @ 0x1A
  2023  00007A                     	ds	1
  2024  00007B                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2025                           	opt stack 0
  2026  00007B                     ethernetController_getEtherTypeField@opcode:
  2027                           	opt stack 0
  2028  00007B                     ethernetController_dropPacket@newPointerL:
  2029                           	opt stack 0
  2030  00007B                     ipAdressToString@pointer:
  2031                           	opt stack 0
  2032  00007B                     ARP_setNewEntry@i:
  2033                           	opt stack 0
  2034  00007B                     ethernetController_pollInterruptFlags@flags:
  2035                           	opt stack 0
  2036                           
  2037                           ; 2 bytes @ 0x1B
  2038  00007B                     	ds	1
  2039  00007C                     ethernetController_getEtherTypeField@lowByte:
  2040                           	opt stack 0
  2041  00007C                     ethernetController_dropPacket@newPointerH:
  2042                           	opt stack 0
  2043  00007C                     ipAdressToString@i:
  2044                           	opt stack 0
  2045  00007C                     ethernetController_streamFromRXBuffer@rsvBytes:
  2046                           	opt stack 0
  2047  00007C                     ARP_initTable@mac:
  2048                           	opt stack 0
  2049                           
  2050                           ; 6 bytes @ 0x1C
  2051  00007C                     	ds	1
  2052  00007D                     ethernetController_getEtherTypeField@highByte:
  2053                           	opt stack 0
  2054  00007D                     ENC424J600_readPHYRegister@lowByte:
  2055                           	opt stack 0
  2056  00007D                     ethernetController_pollInterruptFlags@reg:
  2057                           	opt stack 0
  2058  00007D                     ethernetController_dropPacket@nextPktPointer:
  2059                           	opt stack 0
  2060  00007D                     ethernetController_writeDestinationMACAddress@data:
  2061                           	opt stack 0
  2062                           
  2063                           ; 6 bytes @ 0x1D
  2064  00007D                     	ds	1
  2065  00007E                     ENC424J600_readPHYRegister@highByte:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x1E
  2069  00007E                     	ds	1
  2070  00007F                     ENC424J600_readPHYRegister@temp:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x1F
  2074  00007F                     	ds	1
  2075  000080                     ??_macToString:
  2076  000080                     ?_memory_txFrameRequest:
  2077                           	opt stack 0
  2078  000080                     ethernetController_getSourceMACAddress@temp:
  2079                           	opt stack 0
  2080  000080                     ethernetController_updateLinkStatus@state:
  2081                           	opt stack 0
  2082  000080                     memory_txFrameRequest@length:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x20
  2086  000080                     	ds	1
  2087  000081                     ethernetController_getSourceMACAddress@i:
  2088                           	opt stack 0
  2089  000081                     intToString@tens:
  2090                           	opt stack 0
  2091  000081                     macToString@address:
  2092                           	opt stack 0
  2093                           
  2094                           ; 18 bytes @ 0x21
  2095  000081                     	ds	1
  2096  000082                     ethernetController_updateLinkStatus@temp:
  2097                           	opt stack 0
  2098  000082                     intToString@ones:
  2099                           	opt stack 0
  2100  000082                     ethernetController_streamFromRXBuffer@lengthOfReceivedFrame:
  2101                           	opt stack 0
  2102  000082                     ARP_initTable@ip:
  2103                           	opt stack 0
  2104                           
  2105                           ; 4 bytes @ 0x22
  2106  000082                     	ds	1
  2107  000083                     ethernetController_writeDestinationMACAddress@opcode:
  2108                           	opt stack 0
  2109  000083                     ethernetController_updateLinkStatus@temp16:
  2110                           	opt stack 0
  2111  000083                     intToString@hundreds:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x23
  2115  000083                     	ds	1
  2116  000084                     ethernetController_writeDestinationMACAddress@i_620:
  2117                           	opt stack 0
  2118  000084                     intToString@thousands:
  2119                           	opt stack 0
  2120  000084                     ethernetController_streamFromRXBuffer@i_691:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x24
  2124  000084                     	ds	1
  2125  000085                     ethernetController_writeDestinationMACAddress@i:
  2126                           	opt stack 0
  2127  000085                     intToString@tenthousands:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x25
  2131  000085                     	ds	1
  2132  000086                     ethernetController_streamFromRXBuffer@opcode:
  2133                           	opt stack 0
  2134  000086                     intToString@pointer:
  2135                           	opt stack 0
  2136  000086                     ARP_initTable@i:
  2137                           	opt stack 0
  2138                           
  2139                           ; 1 bytes @ 0x26
  2140  000086                     	ds	1
  2141  000087                     ethernetController_streamFromRXBuffer@foo:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x27
  2145  000087                     	ds	1
  2146  000088                     ??_memory_txFrameRequest:
  2147  000088                     ethernetController_streamFromRXBuffer@newPointerL:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x28
  2151  000088                     	ds	1
  2152  000089                     ethernetController_streamFromRXBuffer@newPointerH:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x29
  2156  000089                     	ds	1
  2157  00008A                     ethernetController_streamFromRXBuffer@temp:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x2A
  2161  00008A                     	ds	1
  2162  00008B                     ethernetController_streamFromRXBuffer@nextPktPointer:
  2163                           	opt stack 0
  2164                           
  2165                           ; 4 bytes @ 0x2B
  2166  00008B                     	ds	3
  2167  00008E                     _memory_txFrameRequest$1132:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0x2E
  2171  00008E                     	ds	1
  2172  00008F                     ethernetController_streamFromRXBuffer@startEnd:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x2F
  2176  00008F                     	ds	1
  2177  000090                     ethernetController_streamFromRXBuffer@i:
  2178                           	opt stack 0
  2179  000090                     memory_txFrameRequest@fNoOverlapMarker:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x30
  2183  000090                     	ds	1
  2184  000091                     ?_ARP_parseFromRXBuffer:
  2185                           	opt stack 0
  2186  000091                     memory_txFrameRequest@i:
  2187                           	opt stack 0
  2188  000091                     ARP_parseFromRXBuffer@frame:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x31
  2192  000091                     	ds	1
  2193  000092                     memory_txFrameRequest@i_1136:
  2194                           	opt stack 0
  2195                           
  2196                           ; 1 bytes @ 0x32
  2197  000092                     	ds	1
  2198  000093                     macToString@firstDigit:
  2199                           	opt stack 0
  2200  000093                     memory_txFrameRequest@field:
  2201                           	opt stack 0
  2202                           
  2203                           ; 8 bytes @ 0x33
  2204  000093                     	ds	1
  2205  000094                     macToString@secondDigit:
  2206                           	opt stack 0
  2207                           
  2208                           ; 1 bytes @ 0x34
  2209  000094                     	ds	1
  2210  000095                     macToString@i:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x35
  2214  000095                     	ds	2
  2215  000097                     macToString@j:
  2216                           	opt stack 0
  2217                           
  2218                           ; 1 bytes @ 0x37
  2219  000097                     	ds	1
  2220  000098                     UARTTransmitText@str:
  2221                           	opt stack 0
  2222                           
  2223                           ; 2 bytes @ 0x38
  2224  000098                     	ds	2
  2225  00009A                     ?_ethernetController_softReset:
  2226                           	opt stack 0
  2227  00009A                     ipv4_handleNewPacket@frame:
  2228                           	opt stack 0
  2229  00009A                     printErrorMessage@err:
  2230                           	opt stack 0
  2231  00009A                     UARTTransmitInt@val:
  2232                           	opt stack 0
  2233  00009A                     printEthernetState@state:
  2234                           	opt stack 0
  2235                           
  2236                           ; 15 bytes @ 0x3A
  2237  00009A                     	ds	1
  2238  00009B                     memory_txFrameRequest@freeIndex:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x3B
  2242  00009B                     	ds	1
  2243  00009C                     ethernet_txFrameRequest@frame:
  2244                           	opt stack 0
  2245                           
  2246                           ; 2 bytes @ 0x3C
  2247  00009C                     	ds	1
  2248  00009D                     ??_ethernetController_softReset:
  2249  00009D                     ??_printErrorMessage:
  2250                           
  2251                           ; 1 bytes @ 0x3D
  2252  00009D                     	ds	1
  2253  00009E                     ethernetController_softReset@comFailCount:
  2254                           	opt stack 0
  2255  00009E                     ethernet_txFrameRequest@err:
  2256                           	opt stack 0
  2257                           
  2258                           ; 3 bytes @ 0x3E
  2259  00009E                     	ds	1
  2260  00009F                     ethernetController_softReset@dataToSend:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x3F
  2264  00009F                     	ds	2
  2265  0000A1                     ethernetController_softReset@receivedData:
  2266                           	opt stack 0
  2267  0000A1                     ipv4_txFrameRequest@packet:
  2268                           	opt stack 0
  2269  0000A1                     ARP_send@arp:
  2270                           	opt stack 0
  2271                           
  2272                           ; 32 bytes @ 0x41
  2273  0000A1                     	ds	2
  2274  0000A3                     ??_ipv4_txFrameRequest:
  2275  0000A3                     ethernetController_softReset@err:
  2276                           	opt stack 0
  2277                           
  2278                           ; 3 bytes @ 0x43
  2279  0000A3                     	ds	3
  2280  0000A6                     ?_ethernetController_init:
  2281                           	opt stack 0
  2282                           
  2283                           ; 3 bytes @ 0x46
  2284  0000A6                     	ds	3
  2285  0000A9                     ethernetController_init@err:
  2286                           	opt stack 0
  2287                           
  2288                           ; 3 bytes @ 0x49
  2289  0000A9                     	ds	5
  2290  0000AE                     ??_ipv4_streamToTransmissionBuffer:
  2291                           
  2292                           ; 1 bytes @ 0x4E
  2293  0000AE                     	ds	3
  2294  0000B1                     ??_ARP_parseFromRXBuffer:
  2295                           
  2296                           ; 1 bytes @ 0x51
  2297  0000B1                     	ds	1
  2298  0000B2                     ARP_parseFromRXBuffer@i:
  2299                           	opt stack 0
  2300  0000B2                     ipv4_streamToTransmissionBuffer@data:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x52
  2304  0000B2                     	ds	1
  2305  0000B3                     ARP_parseFromRXBuffer@i_2503:
  2306                           	opt stack 0
  2307  0000B3                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x53
  2311  0000B3                     	ds	1
  2312  0000B4                     ARP_parseFromRXBuffer@i_2504:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x54
  2316  0000B4                     	ds	1
  2317  0000B5                     ARP_parseFromRXBuffer@i_2505:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x55
  2321  0000B5                     	ds	1
  2322  0000B6                     ARP_parseFromRXBuffer@offset:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x56
  2326  0000B6                     	ds	2
  2327  0000B8                     ARP_parseFromRXBuffer@arp:
  2328                           	opt stack 0
  2329                           
  2330                           ; 32 bytes @ 0x58
  2331  0000B8                     	ds	9
  2332  0000C1                     ARP_send@destination:
  2333                           	opt stack 0
  2334                           
  2335                           ; 6 bytes @ 0x61
  2336  0000C1                     	ds	6
  2337  0000C7                     ARP_send@i:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x67
  2341  0000C7                     	ds	1
  2342  0000C8                     ARP_send@i_2627:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x68
  2346  0000C8                     	ds	1
  2347  0000C9                     ARP_send@i_2628:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0x69
  2351  0000C9                     	ds	1
  2352  0000CA                     ARP_send@i_2629:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x6A
  2356  0000CA                     	ds	1
  2357  0000CB                     ARP_send@ethFrame:
  2358                           	opt stack 0
  2359                           
  2360                           ; 29 bytes @ 0x6B
  2361  0000CB                     	ds	29
  2362  0000E8                     ARP_send@field:
  2363                           	opt stack 0
  2364                           
  2365                           ; 8 bytes @ 0x88
  2366  0000E8                     	ds	8
  2367  0000F0                     ARP_sendRequest@ip:
  2368                           	opt stack 0
  2369                           
  2370                           ; 4 bytes @ 0x90
  2371  0000F0                     	ds	2
  2372  0000F2                     ??_ethernet_rxGetNewFrame:
  2373                           
  2374                           ; 1 bytes @ 0x92
  2375  0000F2                     	ds	2
  2376  0000F4                     ??_ipv4_sendFrame:
  2377  0000F4                     
  2378                           ; 1 bytes @ 0x94
  2379  0000F4                     	ds	6
  2380  0000FA                     ethernet_rxGetNewFrame@err:
  2381                           	opt stack 0
  2382                           
  2383                           ; 3 bytes @ 0x9A
  2384  0000FA                     	ds	6
  2385                           tblptru	equ	0xFF8
  2386                           tblptrh	equ	0xFF7
  2387                           tblptrl	equ	0xFF6
  2388                           tablat	equ	0xFF5
  2389                           postinc0	equ	0xFEE
  2390                           wreg	equ	0xFE8
  2391                           postdec1	equ	0xFE5
  2392                           fsr1l	equ	0xFE1
  2393                           
  2394                           	psect	cstackCOMRAM
  2395  000001                     __pcstackCOMRAM:
  2396                           	opt stack 0
  2397  000001                     ?i2___lwdiv:
  2398                           	opt stack 0
  2399  000001                     buttonHandler@state:
  2400                           	opt stack 0
  2401  000001                     i2___lwdiv@dividend:
  2402                           	opt stack 0
  2403                           
  2404                           ; 2 bytes @ 0x0
  2405  000001                     	ds	2
  2406  000003                     i2___lwdiv@divisor:
  2407                           	opt stack 0
  2408  000003                     buttonHandler@debounceValue:
  2409                           	opt stack 0
  2410                           
  2411                           ; 4 bytes @ 0x2
  2412  000003                     	ds	2
  2413  000005                     i2___lwdiv@quotient:
  2414                           	opt stack 0
  2415                           
  2416                           ; 2 bytes @ 0x4
  2417  000005                     	ds	2
  2418  000007                     i2___lwdiv@counter:
  2419                           	opt stack 0
  2420                           
  2421                           ; 1 bytes @ 0x6
  2422  000007                     	ds	1
  2423  000008                     parseNumber@numberToDisplay:
  2424                           	opt stack 0
  2425                           
  2426                           ; 2 bytes @ 0x7
  2427  000008                     	ds	2
  2428  00000A                     parseNumber@digit:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x9
  2432  00000A                     	ds	1
  2433  00000B                     ??_parseNumber:
  2434                           
  2435                           ; 1 bytes @ 0xA
  2436  00000B                     	ds	1
  2437  00000C                     parseNumber@ones:
  2438                           	opt stack 0
  2439                           
  2440                           ; 1 bytes @ 0xB
  2441  00000C                     	ds	1
  2442  00000D                     parseNumber@tens:
  2443                           	opt stack 0
  2444                           
  2445                           ; 1 bytes @ 0xC
  2446  00000D                     	ds	1
  2447  00000E                     parseNumber@hundreds:
  2448                           	opt stack 0
  2449                           
  2450                           ; 1 bytes @ 0xD
  2451  00000E                     	ds	1
  2452  00000F                     sevenSegmentUpdate@numberToDisplay:
  2453                           	opt stack 0
  2454                           
  2455                           ; 2 bytes @ 0xE
  2456  00000F                     	ds	2
  2457  000011                     ??_sevenSegmentUpdate:
  2458                           
  2459                           ; 1 bytes @ 0x10
  2460  000011                     	ds	2
  2461  000013                     _sevenSegmentUpdate$2047:
  2462                           	opt stack 0
  2463                           
  2464                           ; 2 bytes @ 0x12
  2465  000013                     	ds	2
  2466  000015                     sevenSegmentUpdate@i:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0x14
  2470  000015                     	ds	1
  2471  000016                     ??_ISR:
  2472                           
  2473                           ; 1 bytes @ 0x15
  2474  000016                     	ds	18
  2475                           tblptru	equ	0xFF8
  2476                           tblptrh	equ	0xFF7
  2477                           tblptrl	equ	0xFF6
  2478                           tablat	equ	0xFF5
  2479                           postinc0	equ	0xFEE
  2480                           wreg	equ	0xFE8
  2481                           postdec1	equ	0xFE5
  2482                           fsr1l	equ	0xFE1
  2483                           
  2484 ;;
  2485 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2486 ;;
  2487 ;; *************** function _main *****************
  2488 ;; Defined at:
  2489 ;;		line 32 in file "src/system/main.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  i               1   38[BANK3 ] unsigned char 
  2494 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  2495 ;;  IPdestinatio    4   46[BANK3 ] struct ipv4_address
  2496 ;;  IPsource        4   42[BANK3 ] struct ipv4_address
  2497 ;;  prescaler       4    0[BANK3 ] unsigned long 
  2498 ;;  err             3   39[BANK3 ] struct error
  2499 ;;  oldState        1    0        unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2509 ;;      Params:         0       0       0       0       0       0       0       0       0
  2510 ;;      Locals:         0       0       0       0      50       0       0       0       0
  2511 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2512 ;;      Totals:         0       0       3       0      50       0       0       0       0
  2513 ;;Total ram usage:       53 bytes
  2514 ;; Hardware stack levels required when called:   14
  2515 ;; This function calls:
  2516 ;;		_ARP_initTable
  2517 ;;		_UARTInit
  2518 ;;		_UARTTransmitInt
  2519 ;;		_UARTTransmitText
  2520 ;;		_ethernetController_checkDeviceId
  2521 ;;		_ethernetController_getCurrentPacketCount
  2522 ;;		_ethernetController_getDeviceName
  2523 ;;		_ethernetController_getMacAddress
  2524 ;;		_ethernetController_getSiliconRevision
  2525 ;;		_ethernetController_init
  2526 ;;		_ethernetController_setLEDStatus
  2527 ;;		_handleStackBackgroundTasks
  2528 ;;		_ipv4_calculateHeaderChecksum
  2529 ;;		_ipv4_streamToTransmissionBuffer
  2530 ;;		_ipv4_txFrameRequest
  2531 ;;		_ipv4_writeHeaderIntoBuffer
  2532 ;;		_macToString
  2533 ;;		_printErrorMessage
  2534 ;;		_printEthernetState
  2535 ;;		_sevenSegmentInit
  2536 ;; This function is called by:
  2537 ;;		Startup code after reset
  2538 ;; This function uses a non-reentrant model
  2539 ;;
  2540                           
  2541                           	psect	text0
  2542  000A04                     __ptext0:
  2543                           	opt stack 0
  2544  000A04                     _main:
  2545                           	opt stack 17
  2546                           
  2547                           ;main.c: 35: OSCCONbits.SCS = 0b00;
  2548                           
  2549                           ;incstack = 0
  2550  000A04  0EFC               	movlw	-4
  2551  000A06  16D3               	andwf	4051,f,c	;volatile
  2552                           
  2553                           ;main.c: 36: OSCCONbits.IRCF = 0b1110;
  2554  000A08  50D3               	movf	4051,w,c	;volatile
  2555  000A0A  0B8F               	andlw	-113
  2556  000A0C  0960               	iorlw	96
  2557  000A0E  6ED3               	movwf	4051,c	;volatile
  2558                           
  2559                           ;main.c: 37: OSCCON2bits.PLLEN = 0b1;
  2560  000A10  88D2               	bsf	4050,4,c	;volatile
  2561                           
  2562                           ;main.c: 40: INTCONbits.GIE = 0;
  2563  000A12  9EF2               	bcf	intcon,7,c	;volatile
  2564                           
  2565                           ;main.c: 41: INTCONbits.TMR0IE = 1;
  2566  000A14  8AF2               	bsf	intcon,5,c	;volatile
  2567                           
  2568                           ;main.c: 42: INTCON3bits.INT2IE = 1;
  2569  000A16  88F0               	bsf	intcon3,4,c	;volatile
  2570                           
  2571                           ;main.c: 43: RCIP = 0;
  2572  000A18  9A9F               	bcf	3999,5,c	;volatile
  2573                           
  2574                           ;main.c: 44: RCIE = 1;
  2575  000A1A  8A9D               	bsf	3997,5,c	;volatile
  2576                           
  2577                           ;main.c: 45: INTCONbits.PEIE = 1;
  2578  000A1C  8CF2               	bsf	intcon,6,c	;volatile
  2579                           
  2580                           ;main.c: 49: T0CONbits.TMR0ON = 1;
  2581  000A1E  8ED5               	bsf	4053,7,c	;volatile
  2582                           
  2583                           ;main.c: 50: T0CONbits.T08BIT = 1;
  2584  000A20  8CD5               	bsf	4053,6,c	;volatile
  2585                           
  2586                           ;main.c: 51: T0CONbits.T0CS = 0;
  2587  000A22  9AD5               	bcf	4053,5,c	;volatile
  2588                           
  2589                           ;main.c: 52: T0CONbits.PSA = 0;
  2590  000A24  96D5               	bcf	4053,3,c	;volatile
  2591                           
  2592                           ;main.c: 53: T0CONbits.T0PS = 0b101;
  2593  000A26  50D5               	movf	4053,w,c	;volatile
  2594  000A28  0BF8               	andlw	-8
  2595  000A2A  0905               	iorlw	5
  2596  000A2C  6ED5               	movwf	4053,c	;volatile
  2597                           
  2598                           ;main.c: 55: UARTInit();
  2599  000A2E  EC17  F023         	call	_UARTInit	;wreg free
  2600                           
  2601                           ;main.c: 56: sevenSegmentInit();
  2602  000A32  ECDF  F022         	call	_sevenSegmentInit	;wreg free
  2603                           
  2604                           ;main.c: 57: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2605  000A36  0E34               	movlw	low STR_20
  2606  000A38  0100               	movlb	0	; () banked
  2607  000A3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2608  000A3C  0E7E               	movlw	high STR_20
  2609  000A3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2610  000A40  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2611                           
  2612                           ;main.c: 58: UARTTransmitText("Feb 26 2019");
  2613  000A44  0E7F               	movlw	low STR_21
  2614  000A46  0100               	movlb	0	; () banked
  2615  000A48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2616  000A4A  0E7F               	movlw	high STR_21
  2617  000A4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2618  000A4E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2619                           
  2620                           ;main.c: 59: UARTTransmitText(" ");
  2621  000A52  0E8A               	movlw	low (STR_36+18)
  2622  000A54  0100               	movlb	0	; () banked
  2623  000A56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2624  000A58  0E7E               	movlw	high (STR_36+18)
  2625  000A5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2626  000A5C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2627                           
  2628                           ;main.c: 60: UARTTransmitText("00:13:38");
  2629  000A60  0EB4               	movlw	low STR_23
  2630  000A62  0100               	movlb	0	; () banked
  2631  000A64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2632  000A66  0E7F               	movlw	high STR_23
  2633  000A68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2634  000A6A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2635                           
  2636                           ;main.c: 61: UARTTransmitText("\n\r");
  2637  000A6E  0EF7               	movlw	low (STR_32+48)
  2638  000A70  0100               	movlb	0	; () banked
  2639  000A72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2640  000A74  0E7C               	movlw	high (STR_32+48)
  2641  000A76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2642  000A78  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2643                           
  2644                           ;main.c: 62: UARTTransmitText("Initialising Ethernet Controller...\n\r");
  2645  000A7C  0E21               	movlw	low STR_25
  2646  000A7E  0100               	movlb	0	; () banked
  2647  000A80  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2648  000A82  0E7D               	movlw	high STR_25
  2649  000A84  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2650  000A86  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2651                           
  2652                           ;main.c: 63: error_t err;
  2653                           ;main.c: 64: err = ethernetController_init();
  2654  000A8A  EC8F  F01D         	call	_ethernetController_init	;wreg free
  2655  000A8E  C0A6  F397         	movff	?_ethernetController_init,main@err
  2656  000A92  C0A7  F398         	movff	?_ethernetController_init+1,main@err+1
  2657  000A96  C0A8  F399         	movff	?_ethernetController_init+2,main@err+2
  2658                           
  2659                           ;main.c: 65: if (err.code != (uint16_t)0)
  2660  000A9A  0103               	movlb	3	; () banked
  2661  000A9C  5198               	movf	(main@err+1)& (0+255),w,b
  2662  000A9E  1199               	iorwf	(main@err+2)& (0+255),w,b
  2663  000AA0  B4D8               	btfsc	status,2,c
  2664  000AA2  D008               	goto	l600
  2665                           
  2666                           ; BSR set to: 3
  2667                           ;main.c: 66: printErrorMessage(err);
  2668  000AA4  C397  F09A         	movff	main@err,printErrorMessage@err
  2669  000AA8  C398  F09B         	movff	main@err+1,printErrorMessage@err+1
  2670  000AAC  C399  F09C         	movff	main@err+2,printErrorMessage@err+2
  2671  000AB0  ECF1  F015         	call	_printErrorMessage	;wreg free
  2672  000AB4                     l600:
  2673                           
  2674                           ;main.c: 67: err = ethernetController_checkDeviceId();
  2675  000AB4  ECCA  F01F         	call	_ethernetController_checkDeviceId	;wreg free
  2676  000AB8  C06E  F397         	movff	?_ethernetController_checkDeviceId,main@err
  2677  000ABC  C06F  F398         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2678  000AC0  C070  F399         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2679                           
  2680                           ;main.c: 68: if (err.code == (uint16_t)0) {
  2681  000AC4  0103               	movlb	3	; () banked
  2682  000AC6  5198               	movf	(main@err+1)& (0+255),w,b
  2683  000AC8  1199               	iorwf	(main@err+2)& (0+255),w,b
  2684  000ACA  A4D8               	btfss	status,2,c
  2685  000ACC  D00F               	goto	l601
  2686                           
  2687                           ; BSR set to: 3
  2688                           ;main.c: 69: UARTTransmitText(ethernetController_getDeviceName());
  2689  000ACE  EC82  F022         	call	_ethernetController_getDeviceName	;wreg free
  2690  000AD2  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2691  000AD6  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2692  000ADA  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2693                           
  2694                           ;main.c: 70: UARTTransmitText(" detected. ");
  2695  000ADE  0E73               	movlw	low STR_26
  2696  000AE0  0100               	movlb	0	; () banked
  2697  000AE2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2698  000AE4  0E7F               	movlw	high STR_26
  2699  000AE6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2700  000AE8  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2701  000AEC                     l601:
  2702                           
  2703                           ;main.c: 71: }
  2704                           ;main.c: 72: UARTTransmitText("Silicon revision is ");
  2705  000AEC  0E63               	movlw	low STR_27
  2706  000AEE  0100               	movlb	0	; () banked
  2707  000AF0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2708  000AF2  0E7E               	movlw	high STR_27
  2709  000AF4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2710  000AF6  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2711                           
  2712                           ;main.c: 73: UARTTransmitInt(ethernetController_getSiliconRevision());
  2713  000AFA  ECA5  F022         	call	_ethernetController_getSiliconRevision	;wreg free
  2714  000AFE  0101               	movlb	1	; () banked
  2715  000B00  6F7D               	movwf	??_main& (0+255),b
  2716  000B02  517D               	movf	??_main& (0+255),w,b
  2717  000B04  0100               	movlb	0	; () banked
  2718  000B06  6F9A               	movwf	UARTTransmitInt@val& (0+255),b
  2719  000B08  6B9B               	clrf	(UARTTransmitInt@val+1)& (0+255),b
  2720  000B0A  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  2721  000B0C  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  2722  000B0E  EC94  F022         	call	_UARTTransmitInt	;wreg free
  2723                           
  2724                           ;main.c: 74: UARTTransmitText(".\n\r");
  2725  000B12  0EE5               	movlw	low (STR_49+1)
  2726  000B14  0100               	movlb	0	; () banked
  2727  000B16  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2728  000B18  0E7F               	movlw	high (STR_49+1)
  2729  000B1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2730  000B1C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2731                           
  2732                           ;main.c: 75: UARTTransmitText("Source MAC address is ");
  2733  000B20  0E4C               	movlw	low STR_29
  2734  000B22  0100               	movlb	0	; () banked
  2735  000B24  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2736  000B26  0E7E               	movlw	high STR_29
  2737  000B28  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2738  000B2A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2739                           
  2740                           ;main.c: 76: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  2741  000B2E  EC55  F01D         	call	_ethernetController_getMacAddress	;wreg free
  2742  000B32  CFE9 FFD9          	movff	fsr0l,fsr2l
  2743  000B36  CFEA FFDA          	movff	fsr0h,fsr2h
  2744  000B3A  EE00  F07A         	lfsr	0,macToString@addr
  2745  000B3E  0E05               	movlw	5
  2746  000B40                     u11011:
  2747  000B40  CFDB FFEB          	movff	plusw2,plusw0
  2748  000B44  06E8               	decf	wreg,f,c
  2749  000B46  E2FC               	bc	u11011
  2750  000B48  EC7C  F016         	call	_macToString	;wreg free
  2751  000B4C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  2752  000B50  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  2753  000B54  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2754                           
  2755                           ;main.c: 77: UARTTransmitText(".\n\r");
  2756  000B58  0EE5               	movlw	low (STR_49+1)
  2757  000B5A  0100               	movlb	0	; () banked
  2758  000B5C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2759  000B5E  0E7F               	movlw	high (STR_49+1)
  2760  000B60  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2761  000B62  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2762                           
  2763                           ;main.c: 78: UARTTransmitText("Initialisation completed.\n\r");
  2764  000B66  0EFF               	movlw	low STR_31
  2765  000B68  0100               	movlb	0	; () banked
  2766  000B6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2767  000B6C  0E7D               	movlw	high STR_31
  2768  000B6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2769  000B70  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2770                           
  2771                           ;main.c: 79: UARTTransmitText("------------------------------------------------\n\r");
  2772  000B74  0EC7               	movlw	low STR_32
  2773  000B76  0100               	movlb	0	; () banked
  2774  000B78  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2775  000B7A  0E7C               	movlw	high STR_32
  2776  000B7C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2777  000B7E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  2778                           
  2779                           ;main.c: 81: ARP_initTable();
  2780  000B82  EC65  F01E         	call	_ARP_initTable	;wreg free
  2781                           
  2782                           ;main.c: 84: ethernetController_setLEDStatus(LEDA, LED_ON);
  2783  000B86  0E00               	movlw	0
  2784  000B88  0100               	movlb	0	; () banked
  2785  000B8A  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2786  000B8C  0E00               	movlw	0
  2787  000B8E  ECCA  F01E         	call	_ethernetController_setLEDStatus
  2788                           
  2789                           ;main.c: 85: ethernetController_setLEDStatus(LEDB, LED_ON);
  2790  000B92  0E00               	movlw	0
  2791  000B94  0100               	movlb	0	; () banked
  2792  000B96  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2793  000B98  0E01               	movlw	1
  2794  000B9A  ECCA  F01E         	call	_ethernetController_setLEDStatus
  2795                           
  2796                           ;main.c: 86: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  2797  000B9E  0E15               	movlw	21
  2798  000BA0  0101               	movlb	1	; () banked
  2799  000BA2  6F7E               	movwf	(??_main+1)& (0+255),b
  2800  000BA4  0E4B               	movlw	75
  2801  000BA6  6F7D               	movwf	??_main& (0+255),b
  2802  000BA8  0EBE               	movlw	190
  2803  000BAA                     u11147:
  2804  000BAA  2EE8               	decfsz	wreg,f,c
  2805  000BAC  D7FE               	bra	u11147
  2806  000BAE  2F7D               	decfsz	??_main& (0+255),f,b
  2807  000BB0  D7FC               	bra	u11147
  2808  000BB2  2F7E               	decfsz	(??_main+1)& (0+255),f,b
  2809  000BB4  D7FA               	bra	u11147
  2810  000BB6  F000               	nop	
  2811                           
  2812                           ;main.c: 88: ethernetController_setLEDStatus(LEDA, LED_OFF);
  2813  000BB8  0E01               	movlw	1
  2814  000BBA  0100               	movlb	0	; () banked
  2815  000BBC  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2816  000BBE  0E00               	movlw	0
  2817  000BC0  ECCA  F01E         	call	_ethernetController_setLEDStatus
  2818                           
  2819                           ;main.c: 89: ethernetController_setLEDStatus(LEDB, LED_OFF);
  2820  000BC4  0E01               	movlw	1
  2821  000BC6  0100               	movlb	0	; () banked
  2822  000BC8  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  2823  000BCA  0E01               	movlw	1
  2824  000BCC  ECCA  F01E         	call	_ethernetController_setLEDStatus
  2825                           
  2826                           ;main.c: 92: uint32_t prescaler = 0;
  2827  000BD0  0E00               	movlw	0
  2828  000BD2  0103               	movlb	3	; () banked
  2829  000BD4  6F70               	movwf	main@prescaler& (0+255),b
  2830  000BD6  0E00               	movlw	0
  2831  000BD8  6F71               	movwf	(main@prescaler+1)& (0+255),b
  2832  000BDA  0E00               	movlw	0
  2833  000BDC  6F72               	movwf	(main@prescaler+2)& (0+255),b
  2834  000BDE  0E00               	movlw	0
  2835  000BE0  6F73               	movwf	(main@prescaler+3)& (0+255),b
  2836                           
  2837                           ; BSR set to: 3
  2838                           ;main.c: 94: ANSELB &= ~(1<<5);
  2839  000BE2  010F               	movlb	15	; () banked
  2840  000BE4  9B5C               	bcf	92,5,b	;volatile
  2841                           
  2842                           ; BSR set to: 15
  2843                           ;main.c: 95: TRISB |= (1<<5);
  2844  000BE6  8A93               	bsf	3987,5,c	;volatile
  2845                           
  2846                           ; BSR set to: 15
  2847                           ;main.c: 97: uint8_t oldState;
  2848                           ;main.c: 100: stack.ethernet.destination.address[0] = 0x80;
  2849  000BE8  0E80               	movlw	128
  2850  000BEA  0102               	movlb	2	; () banked
  2851  000BEC  6F18               	movwf	(_stack+9)& (0+255),b	;volatile
  2852                           
  2853                           ; BSR set to: 2
  2854                           ;main.c: 101: stack.ethernet.destination.address[1] = 0x1F;
  2855  000BEE  0E1F               	movlw	31
  2856  000BF0  6F19               	movwf	(_stack+10)& (0+255),b	;volatile
  2857                           
  2858                           ; BSR set to: 2
  2859                           ;main.c: 102: stack.ethernet.destination.address[2] = 0x12;
  2860  000BF2  0E12               	movlw	18
  2861  000BF4  6F1A               	movwf	(_stack+11)& (0+255),b	;volatile
  2862                           
  2863                           ; BSR set to: 2
  2864                           ;main.c: 103: stack.ethernet.destination.address[3] = 0x1B;
  2865  000BF6  0E1B               	movlw	27
  2866  000BF8  6F1B               	movwf	(_stack+12)& (0+255),b	;volatile
  2867                           
  2868                           ; BSR set to: 2
  2869                           ;main.c: 104: stack.ethernet.destination.address[4] = 0x6A;
  2870  000BFA  0E6A               	movlw	106
  2871  000BFC  6F1C               	movwf	(_stack+13)& (0+255),b	;volatile
  2872                           
  2873                           ; BSR set to: 2
  2874                           ;main.c: 105: stack.ethernet.destination.address[5] = 0x2F;
  2875  000BFE  0E2F               	movlw	47
  2876  000C00  6F1D               	movwf	(_stack+14)& (0+255),b	;volatile
  2877                           
  2878                           ; BSR set to: 2
  2879                           ;main.c: 120: ipv4_address_t IPsource;
  2880                           ;main.c: 121: IPsource.address[0] = 192;
  2881  000C02  0EC0               	movlw	192
  2882  000C04  0103               	movlb	3	; () banked
  2883  000C06  6F9A               	movwf	main@IPsource& (0+255),b
  2884                           
  2885                           ; BSR set to: 3
  2886                           ;main.c: 122: IPsource.address[1] = 168;
  2887  000C08  0EA8               	movlw	168
  2888  000C0A  6F9B               	movwf	(main@IPsource+1)& (0+255),b
  2889                           
  2890                           ; BSR set to: 3
  2891                           ;main.c: 123: IPsource.address[2] = 0;
  2892  000C0C  0E00               	movlw	0
  2893  000C0E  6F9C               	movwf	(main@IPsource+2)& (0+255),b
  2894                           
  2895                           ; BSR set to: 3
  2896                           ;main.c: 124: IPsource.address[3] = 4;
  2897  000C10  0E04               	movlw	4
  2898  000C12  6F9D               	movwf	(main@IPsource+3)& (0+255),b
  2899                           
  2900                           ; BSR set to: 3
  2901                           ;main.c: 126: ipv4_address_t IPdestination;
  2902                           ;main.c: 127: IPdestination.address[0] = 169;
  2903  000C14  0EA9               	movlw	169
  2904  000C16  6F9E               	movwf	main@IPdestination& (0+255),b
  2905                           
  2906                           ; BSR set to: 3
  2907                           ;main.c: 128: IPdestination.address[1] = 254;
  2908  000C18  0EFE               	movlw	254
  2909  000C1A  6F9F               	movwf	(main@IPdestination+1)& (0+255),b
  2910                           
  2911                           ; BSR set to: 3
  2912                           ;main.c: 129: IPdestination.address[2] = 108;
  2913  000C1C  0E6C               	movlw	108
  2914  000C1E  6FA0               	movwf	(main@IPdestination+2)& (0+255),b
  2915                           
  2916                           ; BSR set to: 3
  2917                           ;main.c: 130: IPdestination.address[3] = 135;
  2918  000C20  0E87               	movlw	135
  2919  000C22  6FA1               	movwf	(main@IPdestination+3)& (0+255),b
  2920                           
  2921                           ; BSR set to: 3
  2922                           ;main.c: 137: INTCONbits.GIE = 1;
  2923  000C24  8EF2               	bsf	intcon,7,c	;volatile
  2924                           
  2925                           ; BSR set to: 3
  2926                           ;main.c: 138: INTCONbits.PEIE = 1;
  2927  000C26  8CF2               	bsf	intcon,6,c	;volatile
  2928  000C28                     l602:
  2929  000C28  0004               	clrwdt		;# 
  2930                           
  2931                           ;main.c: 144: handleStackBackgroundTasks(&stack);
  2932  000C2A  0E0F               	movlw	low _stack
  2933  000C2C  0101               	movlb	1	; () banked
  2934  000C2E  6F79               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  2935  000C30  0E02               	movlw	high _stack
  2936  000C32  6F7A               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  2937  000C34  ECDD  F00F         	call	_handleStackBackgroundTasks	;wreg free
  2938                           
  2939                           ;main.c: 147: printEthernetState(stack.ethernet);
  2940  000C38  EE22  F00F         	lfsr	2,_stack	;volatile
  2941  000C3C  EE00  F09A         	lfsr	0,printEthernetState@state
  2942  000C40  0E0E               	movlw	14
  2943  000C42                     u11021:
  2944  000C42  CFDB FFEB          	movff	plusw2,plusw0
  2945  000C46  06E8               	decf	wreg,f,c
  2946  000C48  E2FC               	bc	u11021
  2947  000C4A  EC30  F01A         	call	_printEthernetState	;wreg free
  2948                           
  2949                           ;main.c: 148: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  2950  000C4E  0102               	movlb	2	; () banked
  2951  000C50  510F               	movf	_stack& (0+255),w,b	;volatile
  2952  000C52  B4D8               	btfsc	status,2,c
  2953  000C54  D009               	goto	l604
  2954                           
  2955                           ; BSR set to: 2
  2956  000C56  EC3B  F023         	call	_ethernetController_getCurrentPacketCount	;wreg free
  2957  000C5A  0101               	movlb	1	; () banked
  2958  000C5C  6F7D               	movwf	??_main& (0+255),b
  2959  000C5E  517D               	movf	??_main& (0+255),w,b
  2960  000C60  0103               	movlb	3	; () banked
  2961  000C62  6F94               	movwf	_main$1973& (0+255),b
  2962  000C64  6B95               	clrf	(_main$1973+1)& (0+255),b
  2963  000C66  D005               	goto	l606
  2964  000C68                     l604:
  2965                           
  2966                           ; BSR set to: 3
  2967  000C68  0E03               	movlw	3
  2968  000C6A  0103               	movlb	3	; () banked
  2969  000C6C  6F95               	movwf	(_main$1973+1)& (0+255),b
  2970  000C6E  0EE8               	movlw	232
  2971  000C70  6F94               	movwf	_main$1973& (0+255),b
  2972  000C72                     l606:
  2973                           
  2974                           ; BSR set to: 3
  2975                           
  2976                           ; BSR set to: 3
  2977  000C72  C394  F030         	movff	_main$1973,_numberToDisplay	;volatile
  2978  000C76  C395  F031         	movff	_main$1973+1,_numberToDisplay+1	;volatile
  2979  000C7A  0E00               	movlw	0
  2980  000C7C  BE31               	btfsc	_numberToDisplay+1,7,c	;volatile
  2981  000C7E  0EFF               	movlw	-1
  2982  000C80  6E32               	movwf	_numberToDisplay+2,c	;volatile
  2983  000C82  6E33               	movwf	_numberToDisplay+3,c	;volatile
  2984                           
  2985                           ; BSR set to: 3
  2986                           ;main.c: 150: if (buttonState) {
  2987  000C84  0101               	movlb	1	; () banked
  2988  000C86  51D3               	movf	_buttonState& (0+255),w,b	;volatile
  2989  000C88  B4D8               	btfsc	status,2,c
  2990  000C8A  D7CE               	goto	l602
  2991                           
  2992                           ; BSR set to: 1
  2993                           ;main.c: 151: buttonState = 0;
  2994  000C8C  0E00               	movlw	0
  2995  000C8E  6FD3               	movwf	_buttonState& (0+255),b	;volatile
  2996                           
  2997                           ; BSR set to: 1
  2998                           ;main.c: 153: if (stack.ethernet.link == LINK_ESTABLISHED) {
  2999  000C90  0102               	movlb	2	; () banked
  3000  000C92  050F               	decf	_stack& (0+255),w,b	;volatile
  3001  000C94  A4D8               	btfss	status,2,c
  3002  000C96  D7C8               	goto	l602
  3003                           
  3004                           ; BSR set to: 2
  3005                           ;main.c: 156: uint8_t headerBuf[32];
  3006                           ;main.c: 157: stack.pendingPacketToSend.ipv4Header.destination = IPdestination;
  3007  000C98  C39E  F254         	movff	main@IPdestination,_stack+69	;volatile
  3008  000C9C  C39F  F255         	movff	main@IPdestination+1,_stack+70	;volatile
  3009  000CA0  C3A0  F256         	movff	main@IPdestination+2,_stack+71	;volatile
  3010  000CA4  C3A1  F257         	movff	main@IPdestination+3,_stack+72	;volatile
  3011                           
  3012                           ;main.c: 158: stack.pendingPacketToSend.ipv4Header.source = IPsource;
  3013  000CA8  C39A  F250         	movff	main@IPsource,_stack+65	;volatile
  3014  000CAC  C39B  F251         	movff	main@IPsource+1,_stack+66	;volatile
  3015  000CB0  C39C  F252         	movff	main@IPsource+2,_stack+67	;volatile
  3016  000CB4  C39D  F253         	movff	main@IPsource+3,_stack+68	;volatile
  3017                           
  3018                           ; BSR set to: 2
  3019                           ;main.c: 159: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3020  000CB8  0E00               	movlw	0
  3021  000CBA  6F46               	movwf	(_stack+55)& (0+255),b	;volatile
  3022  000CBC  0E78               	movlw	120
  3023  000CBE  6F45               	movwf	(_stack+54)& (0+255),b	;volatile
  3024                           
  3025                           ; BSR set to: 2
  3026                           ;main.c: 160: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3027  000CC0  694C               	setf	(_stack+61)& (0+255),b	;volatile
  3028                           
  3029                           ;main.c: 161: stack.pendingPacketToSend.ipv4Header.version = 4;
  3030  000CC2  0E04               	movlw	4
  3031  000CC4  6F41               	movwf	(_stack+50)& (0+255),b	;volatile
  3032                           
  3033                           ; BSR set to: 2
  3034                           ;main.c: 162: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3035  000CC6  0E41               	movlw	low (_stack+50)
  3036  000CC8  0100               	movlb	0	; () banked
  3037  000CCA  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3038  000CCC  0E02               	movlw	high (_stack+50)
  3039  000CCE  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3040  000CD0  ECCC  F006         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3041                           
  3042                           ;main.c: 163: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3043  000CD4  EE22  F041         	lfsr	2,_stack+50	;volatile
  3044  000CD8  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3045  000CDC  0E16               	movlw	22
  3046  000CDE                     u11061:
  3047  000CDE  CFDB FFEB          	movff	plusw2,plusw0
  3048  000CE2  06E8               	decf	wreg,f,c
  3049  000CE4  E2FC               	bc	u11061
  3050  000CE6  0E74               	movlw	low main@headerBuf
  3051  000CE8  0100               	movlb	0	; () banked
  3052  000CEA  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3053  000CEC  0E03               	movlw	high main@headerBuf
  3054  000CEE  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3055  000CF0  EC40  F012         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3056                           
  3057                           ;main.c: 165: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3058  000CF4  0E41               	movlw	low (_stack+50)
  3059  000CF6  0100               	movlb	0	; () banked
  3060  000CF8  6FA1               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3061  000CFA  0E02               	movlw	high (_stack+50)
  3062  000CFC  6FA2               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3063  000CFE  ECF7  F012         	call	_ipv4_txFrameRequest	;wreg free
  3064                           
  3065                           ;main.c: 167: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3066  000D02  0E00               	movlw	0
  3067  000D04  0103               	movlb	3	; () banked
  3068  000D06  6F96               	movwf	main@i& (0+255),b
  3069  000D08  D036               	goto	l609
  3070  000D0A                     
  3071                           ;main.c: 168: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3072                           
  3073                           ; BSR set to: 3
  3074  000D0A  0102               	movlb	2	; () banked
  3075  000D0C  5142               	movf	(_stack+51)& (0+255),w,b	;volatile
  3076  000D0E  0D04               	mullw	4
  3077  000D10  0103               	movlb	3	; () banked
  3078  000D12  5196               	movf	main@i& (0+255),w,b
  3079  000D14  0101               	movlb	1	; () banked
  3080  000D16  6F7D               	movwf	??_main& (0+255),b
  3081  000D18  6B7E               	clrf	(??_main+1)& (0+255),b
  3082  000D1A  50F3               	movf	prodl,w,c
  3083  000D1C  5D7D               	subwf	??_main& (0+255),w,b
  3084  000D1E  517E               	movf	(??_main+1)& (0+255),w,b
  3085  000D20  0A80               	xorlw	128
  3086  000D22  6F7F               	movwf	(??_main+2)& (0+255),b
  3087  000D24  50F4               	movf	prodh,w,c
  3088  000D26  0A80               	xorlw	128
  3089  000D28  597F               	subwfb	(??_main+2)& (0+255),w,b
  3090  000D2A  B0D8               	btfsc	status,0,c
  3091  000D2C  D016               	goto	l611
  3092                           
  3093                           ; BSR set to: 1
  3094                           ;main.c: 169: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3095  000D2E  EE22  F041         	lfsr	2,_stack+50	;volatile
  3096  000D32  EE00  F072         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3097  000D36  0E3B               	movlw	59
  3098  000D38                     u11081:
  3099  000D38  CFDB FFEB          	movff	plusw2,plusw0
  3100  000D3C  06E8               	decf	wreg,f,c
  3101  000D3E  E2FC               	bc	u11081
  3102  000D40  0103               	movlb	3	; () banked
  3103  000D42  5196               	movf	main@i& (0+255),w,b
  3104  000D44  0D01               	mullw	1
  3105  000D46  0E74               	movlw	low main@headerBuf
  3106  000D48  24F3               	addwf	prodl,w,c
  3107  000D4A  6ED9               	movwf	fsr2l,c
  3108  000D4C  0E03               	movlw	high main@headerBuf
  3109  000D4E  20F4               	addwfc	prodh,w,c
  3110  000D50  6EDA               	movwf	fsr2h,c
  3111  000D52  50DF               	movf	indf2,w,c
  3112  000D54  EC26  F01F         	call	_ipv4_streamToTransmissionBuffer
  3113                           
  3114                           ;main.c: 170: } else
  3115  000D58  D00C               	goto	l612
  3116  000D5A                     l611:
  3117                           
  3118                           ;main.c: 171: ipv4_streamToTransmissionBuffer(1, stack.pendingPacketToSend);
  3119  000D5A  EE22  F041         	lfsr	2,_stack+50	;volatile
  3120  000D5E  EE00  F072         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3121  000D62  0E3B               	movlw	59
  3122  000D64                     u11091:
  3123  000D64  CFDB FFEB          	movff	plusw2,plusw0
  3124  000D68  06E8               	decf	wreg,f,c
  3125  000D6A  E2FC               	bc	u11091
  3126  000D6C  0E01               	movlw	1
  3127  000D6E  EC26  F01F         	call	_ipv4_streamToTransmissionBuffer
  3128  000D72                     l612:
  3129  000D72  0103               	movlb	3	; () banked
  3130  000D74  2B96               	incf	main@i& (0+255),f,b
  3131  000D76                     l609:
  3132                           
  3133                           ; BSR set to: 3
  3134                           
  3135                           ; BSR set to: 3
  3136  000D76  5196               	movf	main@i& (0+255),w,b
  3137  000D78  0101               	movlb	1	; () banked
  3138  000D7A  6F7D               	movwf	??_main& (0+255),b
  3139  000D7C  6B7E               	clrf	(??_main+1)& (0+255),b
  3140  000D7E  0102               	movlb	2	; () banked
  3141  000D80  5145               	movf	(_stack+54)& (0+255),w,b	;volatile
  3142  000D82  0101               	movlb	1	; () banked
  3143  000D84  5D7D               	subwf	??_main& (0+255),w,b
  3144  000D86  0102               	movlb	2	; () banked
  3145  000D88  5146               	movf	(_stack+55)& (0+255),w,b	;volatile
  3146  000D8A  0101               	movlb	1	; () banked
  3147  000D8C  597E               	subwfb	(??_main+1)& (0+255),w,b
  3148  000D8E  A0D8               	btfss	status,0,c
  3149  000D90  D7BC               	goto	l610
  3150                           
  3151                           ; BSR set to: 1
  3152                           ;main.c: 172: }
  3153                           ;main.c: 174: stack.background.fPacketPending = 1;
  3154  000D92  0102               	movlb	2	; () banked
  3155  000D94  8123               	bsf	(_stack+20)& (0+255),0,b	;volatile
  3156                           
  3157                           ; BSR set to: 2
  3158                           
  3159                           ; BSR set to: 2
  3160                           
  3161                           ; BSR set to: 2
  3162  000D96  D748               	goto	l602
  3163  000D98                     __end_of_main:
  3164                           	opt stack 0
  3165                           tblptru	equ	0xFF8
  3166                           tblptrh	equ	0xFF7
  3167                           tblptrl	equ	0xFF6
  3168                           tablat	equ	0xFF5
  3169                           prodh	equ	0xFF4
  3170                           prodl	equ	0xFF3
  3171                           intcon	equ	0xFF2
  3172                           intcon3	equ	0xFF0
  3173                           postinc0	equ	0xFEE
  3174                           plusw0	equ	0xFEB
  3175                           fsr0h	equ	0xFEA
  3176                           fsr0l	equ	0xFE9
  3177                           wreg	equ	0xFE8
  3178                           postdec1	equ	0xFE5
  3179                           fsr1l	equ	0xFE1
  3180                           indf2	equ	0xFDF
  3181                           plusw2	equ	0xFDB
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _sevenSegmentInit *****************
  3187 ;; Defined at:
  3188 ;;		line 28 in file "src/system/sevenseg.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;		None
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;		None
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0
  3203 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3205 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3206 ;;Total ram usage:        0 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    4
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_main
  3213 ;; This function uses a non-reentrant model
  3214 ;;
  3215                           
  3216                           	psect	text1
  3217  0045BE                     __ptext1:
  3218                           	opt stack 0
  3219  0045BE                     _sevenSegmentInit:
  3220                           	opt stack 26
  3221                           
  3222                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3223                           
  3224                           ; BSR set to: 2
  3225                           ;incstack = 0
  3226  0045BE  0EF8               	movlw	248
  3227  0045C0  1682               	andwf	3970,f,c	;volatile
  3228                           
  3229                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3230  0045C2  0EF8               	movlw	248
  3231  0045C4  1694               	andwf	3988,f,c	;volatile
  3232                           
  3233                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3234  0045C6  0E00               	movlw	0
  3235  0045C8  6E92               	movwf	3986,c	;volatile
  3236                           
  3237                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3238  0045CA  0E00               	movlw	0
  3239  0045CC  010F               	movlb	15	; () banked
  3240  0045CE  6F5B               	movwf	91,b	;volatile
  3241                           
  3242                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3243  0045D0  0EF8               	movlw	248
  3244  0045D2  175D               	andwf	93,f,b	;volatile
  3245                           
  3246                           ; BSR set to: 15
  3247                           ;sevenseg.c: 38: PORTA = 0xff;
  3248  0045D4  6880               	setf	3968,c	;volatile
  3249                           
  3250                           ; BSR set to: 15
  3251  0045D6  0012               	return		;funcret
  3252  0045D8                     __end_of_sevenSegmentInit:
  3253                           	opt stack 0
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           intcon	equ	0xFF2
  3261                           intcon3	equ	0xFF0
  3262                           postinc0	equ	0xFEE
  3263                           plusw0	equ	0xFEB
  3264                           fsr0h	equ	0xFEA
  3265                           fsr0l	equ	0xFE9
  3266                           wreg	equ	0xFE8
  3267                           postdec1	equ	0xFE5
  3268                           fsr1l	equ	0xFE1
  3269                           indf2	equ	0xFDF
  3270                           plusw2	equ	0xFDB
  3271                           fsr2h	equ	0xFDA
  3272                           fsr2l	equ	0xFD9
  3273                           status	equ	0xFD8
  3274                           
  3275 ;; *************** function _printEthernetState *****************
  3276 ;; Defined at:
  3277 ;;		line 180 in file "src/system/main.c"
  3278 ;; Parameters:    Size  Location     Type
  3279 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;		None
  3282 ;; Return value:  Size  Location     Type
  3283 ;;                  1    wreg      void 
  3284 ;; Registers used:
  3285 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3286 ;; Tracked objects:
  3287 ;;		On entry : 0/0
  3288 ;;		On exit  : 0/0
  3289 ;;		Unchanged: 0/0
  3290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3291 ;;      Params:         0      15       0       0       0       0       0       0       0
  3292 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3293 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3294 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3295 ;;Total ram usage:       15 bytes
  3296 ;; Hardware stack levels used:    1
  3297 ;; Hardware stack levels required when called:    5
  3298 ;; This function calls:
  3299 ;;		_UARTTransmitText
  3300 ;; This function is called by:
  3301 ;;		_main
  3302 ;; This function uses a non-reentrant model
  3303 ;;
  3304                           
  3305                           	psect	text2
  3306  003460                     __ptext2:
  3307                           	opt stack 0
  3308  003460                     _printEthernetState:
  3309                           	opt stack 25
  3310                           
  3311                           ;main.c: 181: static ethernetConnection_t oldState;
  3312                           ;main.c: 182: if (state.link != oldState.link) {
  3313                           
  3314                           ; BSR set to: 15
  3315                           ;incstack = 0
  3316  003460  0102               	movlb	2	; () banked
  3317  003462  5100               	movf	printEthernetState@oldState& (0+255),w,b
  3318  003464  0100               	movlb	0	; () banked
  3319  003466  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3320  003468  B4D8               	btfsc	status,2,c
  3321  00346A  D041               	goto	l631
  3322                           
  3323                           ; BSR set to: 0
  3324                           ;main.c: 183: if (state.link == NO_LINK) {
  3325  00346C  519A               	movf	printEthernetState@state& (0+255),w,b
  3326  00346E  A4D8               	btfss	status,2,c
  3327  003470  D007               	goto	l622
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;main.c: 184: UARTTransmitText("Link lost.\n\r");
  3331  003472  0E66               	movlw	low STR_33
  3332  003474  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3333  003476  0E7F               	movlw	high STR_33
  3334  003478  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3335  00347A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3336                           
  3337                           ;main.c: 185: } else if (state.link == LINK_ESTABLISHED) {
  3338  00347E  D00A               	goto	l624
  3339  003480                     l622:
  3340  003480  0100               	movlb	0	; () banked
  3341  003482  059A               	decf	printEthernetState@state& (0+255),w,b
  3342  003484  A4D8               	btfss	status,2,c
  3343  003486  D006               	goto	l624
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;main.c: 186: UARTTransmitText("Link established. ");
  3347  003488  0E9F               	movlw	low STR_34
  3348  00348A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3349  00348C  0E7E               	movlw	high STR_34
  3350  00348E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3351  003490  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3352  003494                     l624:
  3353                           
  3354                           ;main.c: 187: }
  3355                           ;main.c: 189: if (state.link == LINK_ESTABLISHED) {
  3356  003494  0100               	movlb	0	; () banked
  3357  003496  059A               	decf	printEthernetState@state& (0+255),w,b
  3358  003498  A4D8               	btfss	status,2,c
  3359  00349A  D029               	goto	l631
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;main.c: 190: if (state.speed == TEN_MBIT) {
  3363  00349C  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3364  00349E  A4D8               	btfss	status,2,c
  3365  0034A0  D007               	goto	l626
  3366                           
  3367                           ; BSR set to: 0
  3368                           ;main.c: 191: UARTTransmitText("Speed is 10 Mbps, ");
  3369  0034A2  0E8C               	movlw	low STR_35
  3370  0034A4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3371  0034A6  0E7E               	movlw	high STR_35
  3372  0034A8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3373  0034AA  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3374                           
  3375                           ;main.c: 192: } else if (state.speed == HUNDRED_MBIT) {
  3376  0034AE  D00A               	goto	l628
  3377  0034B0                     l626:
  3378  0034B0  0100               	movlb	0	; () banked
  3379  0034B2  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3380  0034B4  A4D8               	btfss	status,2,c
  3381  0034B6  D006               	goto	l628
  3382                           
  3383                           ; BSR set to: 0
  3384                           ;main.c: 193: UARTTransmitText("Speed is 100 Mbps, ");
  3385  0034B8  0E78               	movlw	low STR_36
  3386  0034BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3387  0034BC  0E7E               	movlw	high STR_36
  3388  0034BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3389  0034C0  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3390  0034C4                     l628:
  3391                           
  3392                           ;main.c: 194: }
  3393                           ;main.c: 195: if (state.duplex == HALF_DUPLEX) {
  3394  0034C4  0100               	movlb	0	; () banked
  3395  0034C6  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3396  0034C8  A4D8               	btfss	status,2,c
  3397  0034CA  D007               	goto	l629
  3398                           
  3399                           ; BSR set to: 0
  3400                           ;main.c: 196: UARTTransmitText("connection is Half Duplex.\n\r");
  3401  0034CC  0EA8               	movlw	low STR_37
  3402  0034CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3403  0034D0  0E7D               	movlw	high STR_37
  3404  0034D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3405  0034D4  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3406                           
  3407                           ;main.c: 197: } else if (state.duplex == FULL_DUPLEX) {
  3408  0034D8  D00A               	goto	l631
  3409  0034DA                     l629:
  3410  0034DA  0100               	movlb	0	; () banked
  3411  0034DC  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3412  0034DE  A4D8               	btfss	status,2,c
  3413  0034E0  D006               	goto	l631
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;main.c: 199: UARTTransmitText("connection is Full Duplex.\n\r");
  3417  0034E2  0EC5               	movlw	low STR_38
  3418  0034E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3419  0034E6  0E7D               	movlw	high STR_38
  3420  0034E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3421  0034EA  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3422  0034EE                     l631:
  3423                           
  3424                           ;main.c: 200: }
  3425                           ;main.c: 201: }
  3426                           ;main.c: 202: }
  3427                           ;main.c: 203: oldState = state;
  3428  0034EE  EE20  F09A         	lfsr	2,printEthernetState@state
  3429  0034F2  EE12  F000         	lfsr	1,printEthernetState@oldState
  3430  0034F6  0E0E               	movlw	14
  3431  0034F8                     u10861:
  3432  0034F8  CFDB FFE3          	movff	plusw2,plusw1
  3433  0034FC  06E8               	decf	wreg,f,c
  3434  0034FE  E2FC               	bc	u10861
  3435  003500  0012               	return		;funcret
  3436  003502                     __end_of_printEthernetState:
  3437                           	opt stack 0
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           prodh	equ	0xFF4
  3443                           prodl	equ	0xFF3
  3444                           intcon	equ	0xFF2
  3445                           intcon3	equ	0xFF0
  3446                           postinc0	equ	0xFEE
  3447                           plusw0	equ	0xFEB
  3448                           fsr0h	equ	0xFEA
  3449                           fsr0l	equ	0xFE9
  3450                           wreg	equ	0xFE8
  3451                           postdec1	equ	0xFE5
  3452                           plusw1	equ	0xFE3
  3453                           fsr1l	equ	0xFE1
  3454                           indf2	equ	0xFDF
  3455                           plusw2	equ	0xFDB
  3456                           fsr2h	equ	0xFDA
  3457                           fsr2l	equ	0xFD9
  3458                           status	equ	0xFD8
  3459                           
  3460 ;; *************** function _printErrorMessage *****************
  3461 ;; Defined at:
  3462 ;;		line 206 in file "src/system/main.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;  err             3   58[BANK0 ] struct error
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;		None
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3476 ;;      Params:         0       3       0       0       0       0       0       0       0
  3477 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3478 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3479 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3480 ;;Total ram usage:        5 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; Hardware stack levels required when called:    6
  3483 ;; This function calls:
  3484 ;;		_UARTTransmitText
  3485 ;;		_intToString
  3486 ;; This function is called by:
  3487 ;;		_main
  3488 ;; This function uses a non-reentrant model
  3489 ;;
  3490                           
  3491                           	psect	text3
  3492  002BE2                     __ptext3:
  3493                           	opt stack 0
  3494  002BE2                     _printErrorMessage:
  3495                           	opt stack 24
  3496                           
  3497                           ;main.c: 207: UARTTransmitText("[ERROR]");
  3498                           
  3499                           ;incstack = 0
  3500  002BE2  0EC5               	movlw	low STR_39
  3501  002BE4  0100               	movlb	0	; () banked
  3502  002BE6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3503  002BE8  0E7F               	movlw	high STR_39
  3504  002BEA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3505  002BEC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3506                           
  3507                           ;main.c: 208: switch (err.module) {
  3508  002BF0  D028               	goto	l635
  3509  002BF2                     
  3510                           ;main.c: 210: UARTTransmitText(" MEMORY MODULE: ");
  3511  002BF2  0EE8               	movlw	low STR_40
  3512  002BF4  0100               	movlb	0	; () banked
  3513  002BF6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3514  002BF8  0E7E               	movlw	high STR_40
  3515  002BFA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3516  002BFC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3517                           
  3518                           ;main.c: 211: break;
  3519  002C00  D049               	goto	l643
  3520  002C02                     
  3521                           ;main.c: 213: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3522  002C02  0E6C               	movlw	low STR_41
  3523  002C04  0100               	movlb	0	; () banked
  3524  002C06  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3525  002C08  0E7D               	movlw	high STR_41
  3526  002C0A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3527  002C0C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3528                           
  3529                           ;main.c: 214: break;
  3530  002C10  D041               	goto	l643
  3531  002C12                     
  3532                           ;main.c: 216: UARTTransmitText(" ETHERNET MODULE: ");
  3533  002C12  0EB2               	movlw	low STR_42
  3534  002C14  0100               	movlb	0	; () banked
  3535  002C16  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3536  002C18  0E7E               	movlw	high STR_42
  3537  002C1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3538  002C1C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3539                           
  3540                           ;main.c: 217: break;
  3541  002C20  D039               	goto	l643
  3542  002C22                     
  3543                           ;main.c: 219: UARTTransmitText(" ARP MODULE: ");
  3544  002C22  0E58               	movlw	low STR_43
  3545  002C24  0100               	movlb	0	; () banked
  3546  002C26  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3547  002C28  0E7F               	movlw	high STR_43
  3548  002C2A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3549  002C2C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3550                           
  3551                           ;main.c: 220: break;
  3552  002C30  D031               	goto	l643
  3553  002C32                     
  3554                           ;main.c: 222: UARTTransmitText(" IPv4 MODULE: ");
  3555  002C32  0E49               	movlw	low STR_44
  3556  002C34  0100               	movlb	0	; () banked
  3557  002C36  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3558  002C38  0E7F               	movlw	high STR_44
  3559  002C3A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3560  002C3C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3561                           
  3562                           ;main.c: 225: }
  3563                           
  3564                           ;main.c: 224: break;
  3565                           
  3566                           ;main.c: 223: default:
  3567  002C40  D029               	goto	l643
  3568  002C42                     l635:
  3569  002C42  0100               	movlb	0	; () banked
  3570  002C44  519A               	movf	printErrorMessage@err& (0+255),w,b
  3571                           
  3572                           ; Switch size 1, requested type "space"
  3573                           ; Number of cases is 5, Range of values is 0 to 4
  3574                           ; switch strategies available:
  3575                           ; Name         Instructions Cycles
  3576                           ; simple_byte           16     9 (average)
  3577                           ;	Chosen strategy is simple_byte
  3578  002C46  0A00               	xorlw	0	; case 0
  3579  002C48  B4D8               	btfsc	status,2,c
  3580  002C4A  D7D3               	goto	l636
  3581  002C4C  0A01               	xorlw	1	; case 1
  3582  002C4E  B4D8               	btfsc	status,2,c
  3583  002C50  D7D8               	goto	l638
  3584  002C52  0A03               	xorlw	3	; case 2
  3585  002C54  B4D8               	btfsc	status,2,c
  3586  002C56  D7DD               	goto	l639
  3587  002C58  0A01               	xorlw	1	; case 3
  3588  002C5A  B4D8               	btfsc	status,2,c
  3589  002C5C  D7E2               	goto	l640
  3590  002C5E  0A07               	xorlw	7	; case 4
  3591  002C60  B4D8               	btfsc	status,2,c
  3592  002C62  D7E7               	goto	l641
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;main.c: 226: switch (err.code) {
  3596  002C64  D017               	goto	l643
  3597  002C66                     
  3598                           ; BSR set to: 0
  3599                           ;main.c: 228: UARTTransmitText("Ethernet controller is unresponsive.");
  3600                           
  3601                           ; BSR set to: 0
  3602  002C66  0E47               	movlw	low STR_45
  3603  002C68  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3604  002C6A  0E7D               	movlw	high STR_45
  3605  002C6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3606  002C6E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3607                           
  3608                           ;main.c: 229: break;
  3609  002C72  D024               	goto	l645
  3610  002C74                     
  3611                           ;main.c: 231: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3612  002C74  0E90               	movlw	low STR_46
  3613  002C76  0100               	movlb	0	; () banked
  3614  002C78  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3615  002C7A  0E7C               	movlw	high STR_46
  3616  002C7C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3617  002C7E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3618                           
  3619                           ;main.c: 232: break;
  3620  002C82  D01C               	goto	l645
  3621  002C84                     
  3622                           ;main.c: 235: UARTTransmitText("An unknown error has occured.");
  3623                           
  3624                           ;main.c: 234: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  3625  002C84  0E8A               	movlw	low STR_47
  3626  002C86  0100               	movlb	0	; () banked
  3627  002C88  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3628  002C8A  0E7D               	movlw	high STR_47
  3629  002C8C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3630  002C8E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3631                           
  3632                           ;main.c: 237: }
  3633                           
  3634                           ;main.c: 236: break;
  3635  002C92  D014               	goto	l645
  3636  002C94                     l643:
  3637  002C94  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  3638  002C98  CFDE F09D          	movff	postinc2,??_printErrorMessage
  3639  002C9C  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  3640                           
  3641                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3642                           ; Switch size 1, requested type "space"
  3643                           ; Number of cases is 1, Range of values is 1 to 1
  3644                           ; switch strategies available:
  3645                           ; Name         Instructions Cycles
  3646                           ; simple_byte            4     3 (average)
  3647                           ;	Chosen strategy is simple_byte
  3648  002CA0  0100               	movlb	0	; () banked
  3649  002CA2  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  3650  002CA4  0A01               	xorlw	1	; case 1
  3651  002CA6  A4D8               	btfss	status,2,c
  3652  002CA8  D7ED               	goto	l647
  3653                           
  3654                           ; BSR set to: 0
  3655                           ; Switch size 1, requested type "space"
  3656                           ; Number of cases is 3, Range of values is 45 to 143
  3657                           ; switch strategies available:
  3658                           ; Name         Instructions Cycles
  3659                           ; simple_byte           10     6 (average)
  3660                           ;	Chosen strategy is simple_byte
  3661  002CAA  519D               	movf	??_printErrorMessage& (0+255),w,b
  3662  002CAC  0A2D               	xorlw	45	; case 45
  3663  002CAE  B4D8               	btfsc	status,2,c
  3664  002CB0  D7E1               	goto	l646
  3665  002CB2  0A03               	xorlw	3	; case 46
  3666  002CB4  B4D8               	btfsc	status,2,c
  3667  002CB6  D7D7               	goto	l644
  3668  002CB8  0AA1               	xorlw	161	; case 143
  3669  002CBA  D7E4               	goto	l647
  3670  002CBC                     l645:
  3671                           
  3672                           ;main.c: 239: UARTTransmitText(" (Code: ");
  3673                           
  3674                           ; BSR set to: 0
  3675  002CBC  0EAB               	movlw	low STR_48
  3676  002CBE  0100               	movlb	0	; () banked
  3677  002CC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3678  002CC2  0E7F               	movlw	high STR_48
  3679  002CC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3680  002CC6  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3681                           
  3682                           ;main.c: 240: UARTTransmitText(intToString(err.code));
  3683  002CCA  C09B  F073         	movff	printErrorMessage@err+1,intToString@val
  3684  002CCE  C09C  F074         	movff	printErrorMessage@err+2,intToString@val+1
  3685  002CD2  0100               	movlb	0	; () banked
  3686  002CD4  6B75               	clrf	(intToString@val+2)& (0+255),b
  3687  002CD6  6B76               	clrf	(intToString@val+3)& (0+255),b
  3688  002CD8  ECA1  F00B         	call	_intToString	;wreg free
  3689  002CDC  C073  F098         	movff	?_intToString,UARTTransmitText@str
  3690  002CE0  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3691  002CE4  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3692                           
  3693                           ;main.c: 241: UARTTransmitText(").\n\r");
  3694  002CE8  0EE4               	movlw	low STR_49
  3695  002CEA  0100               	movlb	0	; () banked
  3696  002CEC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3697  002CEE  0E7F               	movlw	high STR_49
  3698  002CF0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3699  002CF2  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  3700  002CF6  0012               	return		;funcret
  3701  002CF8                     __end_of_printErrorMessage:
  3702                           	opt stack 0
  3703                           tblptru	equ	0xFF8
  3704                           tblptrh	equ	0xFF7
  3705                           tblptrl	equ	0xFF6
  3706                           tablat	equ	0xFF5
  3707                           prodh	equ	0xFF4
  3708                           prodl	equ	0xFF3
  3709                           intcon	equ	0xFF2
  3710                           intcon3	equ	0xFF0
  3711                           postinc0	equ	0xFEE
  3712                           plusw0	equ	0xFEB
  3713                           fsr0h	equ	0xFEA
  3714                           fsr0l	equ	0xFE9
  3715                           wreg	equ	0xFE8
  3716                           postdec1	equ	0xFE5
  3717                           plusw1	equ	0xFE3
  3718                           fsr1l	equ	0xFE1
  3719                           indf2	equ	0xFDF
  3720                           postinc2	equ	0xFDE
  3721                           postdec2	equ	0xFDD
  3722                           plusw2	equ	0xFDB
  3723                           fsr2h	equ	0xFDA
  3724                           fsr2l	equ	0xFD9
  3725                           status	equ	0xFD8
  3726                           
  3727 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  3728 ;; Defined at:
  3729 ;;		line 126 in file "src/stack/protocols/ipv4.c"
  3730 ;; Parameters:    Size  Location     Type
  3731 ;;  header         23    0[BANK0 ] struct ipv4_header
  3732 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  3733 ;;		 -> main@headerBuf(32), 
  3734 ;; Auto vars:     Size  Location     Type
  3735 ;;		None
  3736 ;; Return value:  Size  Location     Type
  3737 ;;                  1    wreg      void 
  3738 ;; Registers used:
  3739 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3740 ;; Tracked objects:
  3741 ;;		On entry : 0/0
  3742 ;;		On exit  : 0/0
  3743 ;;		Unchanged: 0/0
  3744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3745 ;;      Params:         0      25       0       0       0       0       0       0       0
  3746 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3747 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3748 ;;      Totals:         0      27       0       0       0       0       0       0       0
  3749 ;;Total ram usage:       27 bytes
  3750 ;; Hardware stack levels used:    1
  3751 ;; Hardware stack levels required when called:    4
  3752 ;; This function calls:
  3753 ;;		Nothing
  3754 ;; This function is called by:
  3755 ;;		_main
  3756 ;; This function uses a non-reentrant model
  3757 ;;
  3758                           
  3759                           	psect	text4
  3760  002480                     __ptext4:
  3761                           	opt stack 0
  3762  002480                     _ipv4_writeHeaderIntoBuffer:
  3763                           	opt stack 26
  3764                           
  3765                           ;ipv4.c: 127: *ptr = (header.version << 4) | (header.headerLength);
  3766                           
  3767                           ;incstack = 0
  3768  002480  0100               	movlb	0	; () banked
  3769  002482  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  3770  002484  0BF0               	andlw	240
  3771  002486  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  3772  002488  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  3773  00248C  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  3774  002490  6EDF               	movwf	indf2,c
  3775                           
  3776                           ;ipv4.c: 128: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  3777  002492  EE20 F001          	lfsr	2,1
  3778  002496  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3779  002498  26D9               	addwf	fsr2l,f,c
  3780  00249A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3781  00249C  22DA               	addwfc	fsr2h,f,c
  3782  00249E  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  3783  0024A2  0E03               	movlw	3
  3784  0024A4  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3785  0024A6  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  3786  0024A8  46E8               	rlncf	wreg,f,c
  3787  0024AA  0BFC               	andlw	252
  3788  0024AC  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3789  0024AE  6EDF               	movwf	indf2,c
  3790                           
  3791                           ;ipv4.c: 129: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  3792  0024B0  EE20 F002          	lfsr	2,2
  3793  0024B4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3794  0024B6  26D9               	addwf	fsr2l,f,c
  3795  0024B8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3796  0024BA  22DA               	addwfc	fsr2h,f,c
  3797  0024BC  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  3798  0024BE  6EDF               	movwf	indf2,c
  3799                           
  3800                           ;ipv4.c: 130: *(ptr + 3) = header.totalLength & 0x00ff;
  3801  0024C0  EE20 F003          	lfsr	2,3
  3802  0024C4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3803  0024C6  26D9               	addwf	fsr2l,f,c
  3804  0024C8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3805  0024CA  22DA               	addwfc	fsr2h,f,c
  3806  0024CC  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  3807                           
  3808                           ;ipv4.c: 131: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  3809  0024D0  EE20 F004          	lfsr	2,4
  3810  0024D4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3811  0024D6  26D9               	addwf	fsr2l,f,c
  3812  0024D8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3813  0024DA  22DA               	addwfc	fsr2h,f,c
  3814  0024DC  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  3815  0024DE  6EDF               	movwf	indf2,c
  3816                           
  3817                           ;ipv4.c: 132: *(ptr + 5) = header.identification & 0x00ff;
  3818  0024E0  EE20 F005          	lfsr	2,5
  3819  0024E4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3820  0024E6  26D9               	addwf	fsr2l,f,c
  3821  0024E8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3822  0024EA  22DA               	addwfc	fsr2h,f,c
  3823  0024EC  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;ipv4.c: 133: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  3827  0024F0  EE20 F006          	lfsr	2,6
  3828  0024F4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3829  0024F6  26D9               	addwf	fsr2l,f,c
  3830  0024F8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3831  0024FA  22DA               	addwfc	fsr2h,f,c
  3832  0024FC  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  3833  002500  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  3834  002504  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  3835  002508  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  3836  00250C  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  3837  00250E  0E1F               	movlw	31
  3838  002510  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3839  002512  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  3840  002514  46E8               	rlncf	wreg,f,c
  3841  002516  0BE0               	andlw	224
  3842  002518  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3843  00251A  6EDF               	movwf	indf2,c
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;ipv4.c: 134: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  3847  00251C  EE20 F007          	lfsr	2,7
  3848  002520  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3849  002522  26D9               	addwf	fsr2l,f,c
  3850  002524  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3851  002526  22DA               	addwfc	fsr2h,f,c
  3852  002528  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;ipv4.c: 135: *(ptr + 8) = (header.timeToLive);
  3856  00252C  EE20 F008          	lfsr	2,8
  3857  002530  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3858  002532  26D9               	addwf	fsr2l,f,c
  3859  002534  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3860  002536  22DA               	addwfc	fsr2h,f,c
  3861  002538  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  3862                           
  3863                           ; BSR set to: 0
  3864                           ;ipv4.c: 136: *(ptr + 9) = (header.protocol);
  3865  00253C  EE20 F009          	lfsr	2,9
  3866  002540  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3867  002542  26D9               	addwf	fsr2l,f,c
  3868  002544  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3869  002546  22DA               	addwfc	fsr2h,f,c
  3870  002548  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  3871                           
  3872                           ; BSR set to: 0
  3873                           ;ipv4.c: 137: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  3874  00254C  EE20 F00A          	lfsr	2,10
  3875  002550  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3876  002552  26D9               	addwf	fsr2l,f,c
  3877  002554  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3878  002556  22DA               	addwfc	fsr2h,f,c
  3879  002558  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  3880  00255A  6EDF               	movwf	indf2,c
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;ipv4.c: 138: *(ptr + 11) = (header.checksum & 0x00ff);
  3884  00255C  EE20 F00B          	lfsr	2,11
  3885  002560  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3886  002562  26D9               	addwf	fsr2l,f,c
  3887  002564  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3888  002566  22DA               	addwfc	fsr2h,f,c
  3889  002568  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  3890                           
  3891                           ; BSR set to: 0
  3892                           ;ipv4.c: 139: *(ptr + 12) = (header.source.address[0]);
  3893  00256C  EE20 F00C          	lfsr	2,12
  3894  002570  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3895  002572  26D9               	addwf	fsr2l,f,c
  3896  002574  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3897  002576  22DA               	addwfc	fsr2h,f,c
  3898  002578  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  3899                           
  3900                           ; BSR set to: 0
  3901                           ;ipv4.c: 140: *(ptr + 13) = (header.source.address[1]);
  3902  00257C  EE20 F00D          	lfsr	2,13
  3903  002580  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3904  002582  26D9               	addwf	fsr2l,f,c
  3905  002584  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3906  002586  22DA               	addwfc	fsr2h,f,c
  3907  002588  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;ipv4.c: 141: *(ptr + 14) = (header.source.address[2]);
  3911  00258C  EE20 F00E          	lfsr	2,14
  3912  002590  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3913  002592  26D9               	addwf	fsr2l,f,c
  3914  002594  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3915  002596  22DA               	addwfc	fsr2h,f,c
  3916  002598  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  3917                           
  3918                           ; BSR set to: 0
  3919                           ;ipv4.c: 142: *(ptr + 15) = (header.source.address[3]);
  3920  00259C  EE20 F00F          	lfsr	2,15
  3921  0025A0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3922  0025A2  26D9               	addwf	fsr2l,f,c
  3923  0025A4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3924  0025A6  22DA               	addwfc	fsr2h,f,c
  3925  0025A8  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  3926                           
  3927                           ; BSR set to: 0
  3928                           ;ipv4.c: 143: *(ptr + 16) = (header.destination.address[0]);
  3929  0025AC  EE20 F010          	lfsr	2,16
  3930  0025B0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3931  0025B2  26D9               	addwf	fsr2l,f,c
  3932  0025B4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3933  0025B6  22DA               	addwfc	fsr2h,f,c
  3934  0025B8  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  3935                           
  3936                           ; BSR set to: 0
  3937                           ;ipv4.c: 144: *(ptr + 17) = (header.destination.address[1]);
  3938  0025BC  EE20 F011          	lfsr	2,17
  3939  0025C0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3940  0025C2  26D9               	addwf	fsr2l,f,c
  3941  0025C4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3942  0025C6  22DA               	addwfc	fsr2h,f,c
  3943  0025C8  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  3944                           
  3945                           ; BSR set to: 0
  3946                           ;ipv4.c: 145: *(ptr + 18) = (header.destination.address[2]);
  3947  0025CC  EE20 F012          	lfsr	2,18
  3948  0025D0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3949  0025D2  26D9               	addwf	fsr2l,f,c
  3950  0025D4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3951  0025D6  22DA               	addwfc	fsr2h,f,c
  3952  0025D8  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;ipv4.c: 146: *(ptr + 19) = (header.destination.address[3]);
  3956  0025DC  EE20 F013          	lfsr	2,19
  3957  0025E0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3958  0025E2  26D9               	addwf	fsr2l,f,c
  3959  0025E4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3960  0025E6  22DA               	addwfc	fsr2h,f,c
  3961  0025E8  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  3962                           
  3963                           ; BSR set to: 0
  3964  0025EC  0012               	return		;funcret
  3965  0025EE                     __end_of_ipv4_writeHeaderIntoBuffer:
  3966                           	opt stack 0
  3967                           tblptru	equ	0xFF8
  3968                           tblptrh	equ	0xFF7
  3969                           tblptrl	equ	0xFF6
  3970                           tablat	equ	0xFF5
  3971                           prodh	equ	0xFF4
  3972                           prodl	equ	0xFF3
  3973                           intcon	equ	0xFF2
  3974                           intcon3	equ	0xFF0
  3975                           postinc0	equ	0xFEE
  3976                           plusw0	equ	0xFEB
  3977                           fsr0h	equ	0xFEA
  3978                           fsr0l	equ	0xFE9
  3979                           wreg	equ	0xFE8
  3980                           postinc1	equ	0xFE6
  3981                           postdec1	equ	0xFE5
  3982                           plusw1	equ	0xFE3
  3983                           fsr1l	equ	0xFE1
  3984                           indf2	equ	0xFDF
  3985                           postinc2	equ	0xFDE
  3986                           postdec2	equ	0xFDD
  3987                           plusw2	equ	0xFDB
  3988                           fsr2h	equ	0xFDA
  3989                           fsr2l	equ	0xFD9
  3990                           status	equ	0xFD8
  3991                           
  3992 ;; *************** function _ipv4_txFrameRequest *****************
  3993 ;; Defined at:
  3994 ;;		line 29 in file "src/stack/protocols/ipv4.c"
  3995 ;; Parameters:    Size  Location     Type
  3996 ;;  packet          2   65[BANK0 ] PTR struct ipv4_packet
  3997 ;;		 -> stack(110), 
  3998 ;; Auto vars:     Size  Location     Type
  3999 ;;		None
  4000 ;; Return value:  Size  Location     Type
  4001 ;;                  1    wreg      void 
  4002 ;; Registers used:
  4003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4004 ;; Tracked objects:
  4005 ;;		On entry : 0/0
  4006 ;;		On exit  : 0/0
  4007 ;;		Unchanged: 0/0
  4008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4009 ;;      Params:         0       2       0       0       0       0       0       0       0
  4010 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4011 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4012 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4013 ;;Total ram usage:        6 bytes
  4014 ;; Hardware stack levels used:    1
  4015 ;; Hardware stack levels required when called:    9
  4016 ;; This function calls:
  4017 ;;		_ethernet_txFrameRequest
  4018 ;; This function is called by:
  4019 ;;		_main
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text5
  4024  0025EE                     __ptext5:
  4025                           	opt stack 0
  4026  0025EE                     _ipv4_txFrameRequest:
  4027                           	opt stack 21
  4028                           
  4029                           ;ipv4.c: 30: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  4030                           
  4031                           ; BSR set to: 0
  4032                           ;incstack = 0
  4033  0025EE  0100               	movlb	0	; () banked
  4034  0025F0  EE20 F004          	lfsr	2,4
  4035  0025F4  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4036  0025F6  26D9               	addwf	fsr2l,f,c
  4037  0025F8  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4038  0025FA  22DA               	addwfc	fsr2h,f,c
  4039  0025FC  CFDE F0A3          	movff	postinc2,??_ipv4_txFrameRequest
  4040  002600  CFDD F0A4          	movff	postdec2,??_ipv4_txFrameRequest+1
  4041  002604  0E08               	movlw	8
  4042  002606  27A3               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4043  002608  0E00               	movlw	0
  4044  00260A  23A4               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4045  00260C  EE20 F01F          	lfsr	2,31
  4046  002610  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4047  002612  26D9               	addwf	fsr2l,f,c
  4048  002614  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4049  002616  22DA               	addwfc	fsr2h,f,c
  4050  002618  C0A3  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4051  00261C  C0A4  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4052                           
  4053                           ;ipv4.c: 31: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  4054  002620  EE20 F02D          	lfsr	2,45
  4055  002624  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4056  002626  26D9               	addwf	fsr2l,f,c
  4057  002628  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4058  00262A  22DA               	addwfc	fsr2h,f,c
  4059  00262C  0E00               	movlw	0
  4060  00262E  6EDE               	movwf	postinc2,c
  4061  002630  0E08               	movlw	8
  4062  002632  6EDD               	movwf	postdec2,c
  4063                           
  4064                           ; BSR set to: 0
  4065                           ;ipv4.c: 32: ethernet_txFrameRequest(&packet->ethernet);
  4066  002634  0E1F               	movlw	31
  4067  002636  25A1               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  4068  002638  6F9C               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  4069  00263A  0E00               	movlw	0
  4070  00263C  21A2               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4071  00263E  6F9D               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  4072  002640  ECFB  F017         	call	_ethernet_txFrameRequest	;wreg free
  4073                           
  4074                           ;ipv4.c: 34: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  4075  002644  0100               	movlb	0	; () banked
  4076  002646  EE20 F035          	lfsr	2,53
  4077  00264A  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4078  00264C  26D9               	addwf	fsr2l,f,c
  4079  00264E  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4080  002650  22DA               	addwfc	fsr2h,f,c
  4081  002652  EE10 F01D          	lfsr	1,29
  4082  002656  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4083  002658  26E1               	addwf	fsr1l,f,c
  4084  00265A  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4085  00265C  22E2               	addwfc	fsr1h,f,c
  4086  00265E  B0DF               	btfsc	indf2,0,c
  4087  002660  D002               	bra	u10905
  4088  002662  90E7               	bcf	indf1,0,c
  4089  002664  D002               	bra	u10906
  4090  002666                     u10905:
  4091  002666  0100               	movlb	0	; () banked
  4092  002668  80E7               	bsf	indf1,0,c
  4093  00266A                     u10906:
  4094                           
  4095                           ; BSR set to: 0
  4096                           ;ipv4.c: 35: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  4097  00266A  EE20 F035          	lfsr	2,53
  4098  00266E  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4099  002670  26D9               	addwf	fsr2l,f,c
  4100  002672  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4101  002674  22DA               	addwfc	fsr2h,f,c
  4102  002676  EE10 F01D          	lfsr	1,29
  4103  00267A  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4104  00267C  26E1               	addwf	fsr1l,f,c
  4105  00267E  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4106  002680  22E2               	addwfc	fsr1h,f,c
  4107  002682  B2DF               	btfsc	indf2,1,c
  4108  002684  D002               	bra	u10915
  4109  002686  92E7               	bcf	indf1,1,c
  4110  002688  D002               	bra	u10916
  4111  00268A                     u10915:
  4112  00268A  0100               	movlb	0	; () banked
  4113  00268C  82E7               	bsf	indf1,1,c
  4114  00268E                     u10916:
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;ipv4.c: 36: packet->memory.index = packet->ethernet.memory.index;
  4118  00268E  EE20 F036          	lfsr	2,54
  4119  002692  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4120  002694  26D9               	addwf	fsr2l,f,c
  4121  002696  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4122  002698  22DA               	addwfc	fsr2h,f,c
  4123  00269A  EE10 F01E          	lfsr	1,30
  4124  00269E  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4125  0026A0  26E1               	addwf	fsr1l,f,c
  4126  0026A2  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4127  0026A4  22E2               	addwfc	fsr1h,f,c
  4128  0026A6  CFDF FFE7          	movff	indf2,indf1
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;ipv4.c: 37: packet->memory.start = packet->ethernet.memory.start + 8;
  4132  0026AA  EE20 F02F          	lfsr	2,47
  4133  0026AE  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4134  0026B0  26D9               	addwf	fsr2l,f,c
  4135  0026B2  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4136  0026B4  22DA               	addwfc	fsr2h,f,c
  4137  0026B6  CFDE F0A3          	movff	postinc2,??_ipv4_txFrameRequest
  4138  0026BA  CFDD F0A4          	movff	postdec2,??_ipv4_txFrameRequest+1
  4139  0026BE  0E08               	movlw	8
  4140  0026C0  27A3               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4141  0026C2  0E00               	movlw	0
  4142  0026C4  23A4               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4143  0026C6  EE20 F017          	lfsr	2,23
  4144  0026CA  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4145  0026CC  26D9               	addwf	fsr2l,f,c
  4146  0026CE  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4147  0026D0  22DA               	addwfc	fsr2h,f,c
  4148  0026D2  C0A3  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4149  0026D6  C0A4  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;ipv4.c: 38: packet->memory.end = packet->ethernet.memory.end;
  4153  0026DA  EE20 F031          	lfsr	2,49
  4154  0026DE  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4155  0026E0  26D9               	addwf	fsr2l,f,c
  4156  0026E2  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4157  0026E4  22DA               	addwfc	fsr2h,f,c
  4158  0026E6  EE10 F019          	lfsr	1,25
  4159  0026EA  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4160  0026EC  26E1               	addwf	fsr1l,f,c
  4161  0026EE  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4162  0026F0  22E2               	addwfc	fsr1h,f,c
  4163  0026F2  CFDE FFE6          	movff	postinc2,postinc1
  4164  0026F6  CFDD FFE5          	movff	postdec2,postdec1
  4165                           
  4166                           ; BSR set to: 0
  4167                           ;ipv4.c: 39: packet->memory.length = packet->ethernet.memory.length - 8;
  4168  0026FA  0EF8               	movlw	248
  4169  0026FC  6FA3               	movwf	??_ipv4_txFrameRequest& (0+255),b
  4170  0026FE  0EFF               	movlw	255
  4171  002700  6FA4               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  4172  002702  EE20 F033          	lfsr	2,51
  4173  002706  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4174  002708  26D9               	addwf	fsr2l,f,c
  4175  00270A  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4176  00270C  22DA               	addwfc	fsr2h,f,c
  4177  00270E  CFDE F0A5          	movff	postinc2,??_ipv4_txFrameRequest+2
  4178  002712  CFDD F0A6          	movff	postdec2,??_ipv4_txFrameRequest+3
  4179  002716  51A3               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  4180  002718  27A5               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  4181  00271A  51A4               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  4182  00271C  23A6               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  4183  00271E  EE20 F01B          	lfsr	2,27
  4184  002722  51A1               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4185  002724  26D9               	addwf	fsr2l,f,c
  4186  002726  51A2               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4187  002728  22DA               	addwfc	fsr2h,f,c
  4188  00272A  C0A5  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  4189  00272E  C0A6  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  4190                           
  4191                           ; BSR set to: 0
  4192  002732  0012               	return		;funcret
  4193  002734                     __end_of_ipv4_txFrameRequest:
  4194                           	opt stack 0
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           intcon3	equ	0xFF0
  4203                           postinc0	equ	0xFEE
  4204                           plusw0	equ	0xFEB
  4205                           fsr0h	equ	0xFEA
  4206                           fsr0l	equ	0xFE9
  4207                           wreg	equ	0xFE8
  4208                           indf1	equ	0xFE7
  4209                           postinc1	equ	0xFE6
  4210                           postdec1	equ	0xFE5
  4211                           plusw1	equ	0xFE3
  4212                           fsr1h	equ	0xFE2
  4213                           fsr1l	equ	0xFE1
  4214                           indf2	equ	0xFDF
  4215                           postinc2	equ	0xFDE
  4216                           postdec2	equ	0xFDD
  4217                           plusw2	equ	0xFDB
  4218                           fsr2h	equ	0xFDA
  4219                           fsr2l	equ	0xFD9
  4220                           status	equ	0xFD8
  4221                           
  4222 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  4223 ;; Defined at:
  4224 ;;		line 85 in file "src/stack/protocols/ipv4.c"
  4225 ;; Parameters:    Size  Location     Type
  4226 ;;  data            1    wreg     unsigned char 
  4227 ;;  packet         60   18[BANK0 ] struct ipv4_packet
  4228 ;; Auto vars:     Size  Location     Type
  4229 ;;  data            1   82[BANK0 ] unsigned char 
  4230 ;;  ethernetPack    2   83[BANK0 ] unsigned int 
  4231 ;;  remainingLen    2    0        unsigned int 
  4232 ;; Return value:  Size  Location     Type
  4233 ;;                  1    wreg      void 
  4234 ;; Registers used:
  4235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4236 ;; Tracked objects:
  4237 ;;		On entry : 0/0
  4238 ;;		On exit  : 0/0
  4239 ;;		Unchanged: 0/0
  4240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4241 ;;      Params:         0      60       0       0       0       0       0       0       0
  4242 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4243 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4244 ;;      Totals:         0      67       0       0       0       0       0       0       0
  4245 ;;Total ram usage:       67 bytes
  4246 ;; Hardware stack levels used:    1
  4247 ;; Hardware stack levels required when called:    7
  4248 ;; This function calls:
  4249 ;;		_ethernetController_streamToTransmitBuffer
  4250 ;; This function is called by:
  4251 ;;		_main
  4252 ;; This function uses a non-reentrant model
  4253 ;;
  4254                           
  4255                           	psect	text6
  4256  003E4C                     __ptext6:
  4257                           	opt stack 0
  4258  003E4C                     _ipv4_streamToTransmissionBuffer:
  4259                           	opt stack 23
  4260                           
  4261                           ; BSR set to: 0
  4262                           ;incstack = 0
  4263                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  4264  003E4C  0100               	movlb	0	; () banked
  4265  003E4E  6FB2               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  4266                           
  4267                           ;ipv4.c: 86: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  4268  003E50  C076  F0B3         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  4269  003E54  C077  F0B4         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  4270                           
  4271                           ;ipv4.c: 87: uint16_t remainingLength;
  4272                           ;ipv4.c: 91: uint16_t static dataPointer = 0;
  4273                           ;ipv4.c: 92: ethernetController_streamToTransmitBuffer(data, ethernetPacketLength);
  4274  003E58  C0B3  F06A         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength,ethernetController_streamToT
      +                          ransmitBuffer@len
  4275  003E5C  C0B4  F06B         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength+1,ethernetController_streamT
      +                          oTransmitBuffer@len+1
  4276  003E60  0100               	movlb	0	; () banked
  4277  003E62  51B2               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  4278  003E64  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
  4279                           
  4280                           ;ipv4.c: 93: if (dataPointer == ethernetPacketLength - 1) {
  4281  003E68  0EFF               	movlw	255
  4282  003E6A  0100               	movlb	0	; () banked
  4283  003E6C  6FAE               	movwf	??_ipv4_streamToTransmissionBuffer& (0+255),b
  4284  003E6E  0EFF               	movlw	255
  4285  003E70  6FAF               	movwf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),b
  4286  003E72  C0B3  F0B0         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength,??_ipv4_streamToTransmission
      +                          Buffer+2
  4287  003E76  C0B4  F0B1         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength+1,??_ipv4_streamToTransmissi
      +                          onBuffer+3
  4288  003E7A  51AE               	movf	??_ipv4_streamToTransmissionBuffer& (0+255),w,b
  4289  003E7C  27B0               	addwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),f,b
  4290  003E7E  51AF               	movf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),w,b
  4291  003E80  23B1               	addwfc	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),f,b
  4292  003E82  503B               	movf	ipv4_streamToTransmissionBuffer@dataPointer,w,c
  4293  003E84  19B0               	xorwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),w,b
  4294  003E86  E109               	bnz	l8744
  4295  003E88  503C               	movf	ipv4_streamToTransmissionBuffer@dataPointer+1,w,c
  4296  003E8A  19B1               	xorwf	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),w,b
  4297  003E8C  A4D8               	btfss	status,2,c
  4298  003E8E  D005               	goto	l978
  4299                           
  4300                           ; BSR set to: 0
  4301                           ;ipv4.c: 94: dataPointer = 0;
  4302  003E90  0E00               	movlw	0
  4303  003E92  6E3C               	movwf	ipv4_streamToTransmissionBuffer@dataPointer+1,c
  4304  003E94  0E00               	movlw	0
  4305  003E96  6E3B               	movwf	ipv4_streamToTransmissionBuffer@dataPointer,c
  4306                           
  4307                           ;ipv4.c: 95: } else {
  4308  003E98  0012               	return	
  4309  003E9A                     l978:
  4310  003E9A                     l8744:
  4311                           
  4312                           ; BSR set to: 0
  4313                           ;ipv4.c: 96: dataPointer++;
  4314  003E9A  4A3B               	infsnz	ipv4_streamToTransmissionBuffer@dataPointer,f,c
  4315  003E9C  2A3C               	incf	ipv4_streamToTransmissionBuffer@dataPointer+1,f,c
  4316  003E9E  0012               	return	
  4317  003EA0                     __end_of_ipv4_streamToTransmissionBuffer:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           prodh	equ	0xFF4
  4324                           prodl	equ	0xFF3
  4325                           intcon	equ	0xFF2
  4326                           intcon3	equ	0xFF0
  4327                           postinc0	equ	0xFEE
  4328                           plusw0	equ	0xFEB
  4329                           fsr0h	equ	0xFEA
  4330                           fsr0l	equ	0xFE9
  4331                           wreg	equ	0xFE8
  4332                           indf1	equ	0xFE7
  4333                           postinc1	equ	0xFE6
  4334                           postdec1	equ	0xFE5
  4335                           plusw1	equ	0xFE3
  4336                           fsr1h	equ	0xFE2
  4337                           fsr1l	equ	0xFE1
  4338                           indf2	equ	0xFDF
  4339                           postinc2	equ	0xFDE
  4340                           postdec2	equ	0xFDD
  4341                           plusw2	equ	0xFDB
  4342                           fsr2h	equ	0xFDA
  4343                           fsr2l	equ	0xFD9
  4344                           status	equ	0xFD8
  4345                           
  4346 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  4347 ;; Defined at:
  4348 ;;		line 100 in file "src/stack/protocols/ipv4.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  4351 ;;		 -> stack.pendingPacketToSend(60), stack(110), 
  4352 ;; Auto vars:     Size  Location     Type
  4353 ;;  sum             4   14[BANK0 ] unsigned long 
  4354 ;; Return value:  Size  Location     Type
  4355 ;;                  1    wreg      void 
  4356 ;; Registers used:
  4357 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4358 ;; Tracked objects:
  4359 ;;		On entry : 0/0
  4360 ;;		On exit  : 0/0
  4361 ;;		Unchanged: 0/0
  4362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4363 ;;      Params:         0       2       0       0       0       0       0       0       0
  4364 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4365 ;;      Temps:          0      12       0       0       0       0       0       0       0
  4366 ;;      Totals:         0      18       0       0       0       0       0       0       0
  4367 ;;Total ram usage:       18 bytes
  4368 ;; Hardware stack levels used:    1
  4369 ;; Hardware stack levels required when called:    4
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		_main
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377                           	psect	text7
  4378  000D98                     __ptext7:
  4379                           	opt stack 0
  4380  000D98                     _ipv4_calculateHeaderChecksum:
  4381                           	opt stack 26
  4382                           
  4383                           ;ipv4.c: 101: header->headerLength = 5;
  4384                           
  4385                           ; BSR set to: 0
  4386                           ;incstack = 0
  4387  000D98  0100               	movlb	0	; () banked
  4388  000D9A  EE20 F001          	lfsr	2,1
  4389  000D9E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4390  000DA0  26D9               	addwf	fsr2l,f,c
  4391  000DA2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4392  000DA4  22DA               	addwfc	fsr2h,f,c
  4393  000DA6  0E05               	movlw	5
  4394  000DA8  6EDF               	movwf	indf2,c
  4395                           
  4396                           ;ipv4.c: 102: header->dscp = 0;
  4397  000DAA  EE20 F002          	lfsr	2,2
  4398  000DAE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4399  000DB0  26D9               	addwf	fsr2l,f,c
  4400  000DB2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4401  000DB4  22DA               	addwfc	fsr2h,f,c
  4402  000DB6  0E00               	movlw	0
  4403  000DB8  6EDF               	movwf	indf2,c
  4404                           
  4405                           ;ipv4.c: 103: header->ecn = 0;
  4406  000DBA  EE20 F003          	lfsr	2,3
  4407  000DBE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4408  000DC0  26D9               	addwf	fsr2l,f,c
  4409  000DC2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4410  000DC4  22DA               	addwfc	fsr2h,f,c
  4411  000DC6  0E00               	movlw	0
  4412  000DC8  6EDF               	movwf	indf2,c
  4413                           
  4414                           ;ipv4.c: 104: header->flags = 0x00;
  4415  000DCA  EE20 F008          	lfsr	2,8
  4416  000DCE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4417  000DD0  26D9               	addwf	fsr2l,f,c
  4418  000DD2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4419  000DD4  22DA               	addwfc	fsr2h,f,c
  4420  000DD6  0E00               	movlw	0
  4421  000DD8  6EDF               	movwf	indf2,c
  4422                           
  4423                           ;ipv4.c: 105: header->fragmentOffset = 0x00;
  4424  000DDA  EE20 F009          	lfsr	2,9
  4425  000DDE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4426  000DE0  26D9               	addwf	fsr2l,f,c
  4427  000DE2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4428  000DE4  22DA               	addwfc	fsr2h,f,c
  4429  000DE6  0E00               	movlw	0
  4430  000DE8  6EDE               	movwf	postinc2,c
  4431  000DEA  0E00               	movlw	0
  4432  000DEC  6EDD               	movwf	postdec2,c
  4433                           
  4434                           ;ipv4.c: 106: header->identification = 0x00;
  4435  000DEE  EE20 F006          	lfsr	2,6
  4436  000DF2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4437  000DF4  26D9               	addwf	fsr2l,f,c
  4438  000DF6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4439  000DF8  22DA               	addwfc	fsr2h,f,c
  4440  000DFA  0E00               	movlw	0
  4441  000DFC  6EDE               	movwf	postinc2,c
  4442  000DFE  0E00               	movlw	0
  4443  000E00  6EDD               	movwf	postdec2,c
  4444                           
  4445                           ; BSR set to: 0
  4446                           ;ipv4.c: 108: uint32_t sum = 0;
  4447  000E02  0E00               	movlw	0
  4448  000E04  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4449  000E06  0E00               	movlw	0
  4450  000E08  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4451  000E0A  0E00               	movlw	0
  4452  000E0C  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4453  000E0E  0E00               	movlw	0
  4454  000E10  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4455                           
  4456                           ; BSR set to: 0
  4457                           ;ipv4.c: 109: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  4458  000E12  EE20 F002          	lfsr	2,2
  4459  000E16  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4460  000E18  26D9               	addwf	fsr2l,f,c
  4461  000E1A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4462  000E1C  22DA               	addwfc	fsr2h,f,c
  4463  000E1E  50DF               	movf	indf2,w,c
  4464  000E20  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4465  000E22  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4466  000E24  90D8               	bcf	status,0,c
  4467  000E26  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4468  000E28  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4469  000E2A  90D8               	bcf	status,0,c
  4470  000E2C  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4471  000E2E  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4472  000E30  EE20 F001          	lfsr	2,1
  4473  000E34  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4474  000E36  26D9               	addwf	fsr2l,f,c
  4475  000E38  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4476  000E3A  22DA               	addwfc	fsr2h,f,c
  4477  000E3C  50DF               	movf	indf2,w,c
  4478  000E3E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4479  000E40  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4480  000E42  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4481  000E44  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4482  000E46  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  4483  000E4A  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  4484  000E4E  50DF               	movf	indf2,w,c
  4485  000E50  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4486  000E52  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4487  000E54  0E0C               	movlw	12
  4488  000E56                     u10875:
  4489  000E56  90D8               	bcf	status,0,c
  4490  000E58  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4491  000E5A  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4492  000E5C  2EE8               	decfsz	wreg,f,c
  4493  000E5E  D7FB               	goto	u10875
  4494  000E60  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4495  000E62  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4496  000E64  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4497  000E66  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4498  000E68  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4499  000E6A  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4500  000E6C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4501  000E6E  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4502  000E70  EE20 F003          	lfsr	2,3
  4503  000E74  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4504  000E76  26D9               	addwf	fsr2l,f,c
  4505  000E78  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4506  000E7A  22DA               	addwfc	fsr2h,f,c
  4507  000E7C  50DF               	movf	indf2,w,c
  4508  000E7E  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4509  000E80  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4510  000E82  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4511  000E84  0E00               	movlw	0
  4512  000E86  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4513  000E88  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  4514  000E8C  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  4515  000E90  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4516  000E92  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;ipv4.c: 110: sum += header->totalLength;
  4520  000E94  EE20 F004          	lfsr	2,4
  4521  000E98  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4522  000E9A  26D9               	addwf	fsr2l,f,c
  4523  000E9C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4524  000E9E  22DA               	addwfc	fsr2h,f,c
  4525  000EA0  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4526  000EA4  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4527  000EA8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4528  000EAA  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4529  000EAC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4530  000EAE  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4531  000EB0  0E00               	movlw	0
  4532  000EB2  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4533  000EB4  0E00               	movlw	0
  4534  000EB6  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4535                           
  4536                           ; BSR set to: 0
  4537                           ;ipv4.c: 111: sum += header->identification;
  4538  000EB8  EE20 F006          	lfsr	2,6
  4539  000EBC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4540  000EBE  26D9               	addwf	fsr2l,f,c
  4541  000EC0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4542  000EC2  22DA               	addwfc	fsr2h,f,c
  4543  000EC4  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4544  000EC8  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4545  000ECC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4546  000ECE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4547  000ED0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4548  000ED2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4549  000ED4  0E00               	movlw	0
  4550  000ED6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4551  000ED8  0E00               	movlw	0
  4552  000EDA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;ipv4.c: 112: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  4556  000EDC  EE20 F009          	lfsr	2,9
  4557  000EE0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4558  000EE2  26D9               	addwf	fsr2l,f,c
  4559  000EE4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4560  000EE6  22DA               	addwfc	fsr2h,f,c
  4561  000EE8  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4562  000EEC  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4563  000EF0  EE20 F008          	lfsr	2,8
  4564  000EF4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4565  000EF6  26D9               	addwf	fsr2l,f,c
  4566  000EF8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4567  000EFA  22DA               	addwfc	fsr2h,f,c
  4568  000EFC  50DF               	movf	indf2,w,c
  4569  000EFE  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4570  000F00  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4571  000F02  0E0D               	movlw	13
  4572  000F04                     u10885:
  4573  000F04  90D8               	bcf	status,0,c
  4574  000F06  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4575  000F08  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4576  000F0A  2EE8               	decfsz	wreg,f,c
  4577  000F0C  D7FB               	goto	u10885
  4578  000F0E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4579  000F10  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4580  000F12  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4581  000F14  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4582  000F16  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4583  000F18  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4584  000F1A  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4585  000F1C  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4586  000F1E  0E00               	movlw	0
  4587  000F20  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4588  000F22  0E00               	movlw	0
  4589  000F24  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4590                           
  4591                           ; BSR set to: 0
  4592                           ;ipv4.c: 113: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  4593  000F26  EE20 F00B          	lfsr	2,11
  4594  000F2A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4595  000F2C  26D9               	addwf	fsr2l,f,c
  4596  000F2E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4597  000F30  22DA               	addwfc	fsr2h,f,c
  4598  000F32  50DF               	movf	indf2,w,c
  4599  000F34  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4600  000F36  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4601  000F38  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4602  000F3A  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4603  000F3C  EE20 F00C          	lfsr	2,12
  4604  000F40  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4605  000F42  26D9               	addwf	fsr2l,f,c
  4606  000F44  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4607  000F46  22DA               	addwfc	fsr2h,f,c
  4608  000F48  50DF               	movf	indf2,w,c
  4609  000F4A  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4610  000F4C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4611  000F4E  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4612  000F50  0E00               	movlw	0
  4613  000F52  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4614  000F54  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4615  000F56  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4616  000F58  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4617  000F5A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4618  000F5C  0E00               	movlw	0
  4619  000F5E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4620  000F60  0E00               	movlw	0
  4621  000F62  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;ipv4.c: 115: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  4625  000F64  EE20 F00F          	lfsr	2,15
  4626  000F68  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4627  000F6A  26D9               	addwf	fsr2l,f,c
  4628  000F6C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4629  000F6E  22DA               	addwfc	fsr2h,f,c
  4630  000F70  50DF               	movf	indf2,w,c
  4631  000F72  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4632  000F74  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4633  000F76  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4634  000F78  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4635  000F7A  EE20 F010          	lfsr	2,16
  4636  000F7E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4637  000F80  26D9               	addwf	fsr2l,f,c
  4638  000F82  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4639  000F84  22DA               	addwfc	fsr2h,f,c
  4640  000F86  50DF               	movf	indf2,w,c
  4641  000F88  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4642  000F8A  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4643  000F8C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4644  000F8E  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4645  000F90  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4646  000F92  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4647  000F94  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4648  000F96  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4649  000F98  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4650  000F9A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4651  000F9C  0E00               	movlw	0
  4652  000F9E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4653  000FA0  0E00               	movlw	0
  4654  000FA2  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4655                           
  4656                           ; BSR set to: 0
  4657                           ;ipv4.c: 116: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  4658  000FA4  EE20 F011          	lfsr	2,17
  4659  000FA8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4660  000FAA  26D9               	addwf	fsr2l,f,c
  4661  000FAC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4662  000FAE  22DA               	addwfc	fsr2h,f,c
  4663  000FB0  50DF               	movf	indf2,w,c
  4664  000FB2  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4665  000FB4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4666  000FB6  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4667  000FB8  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4668  000FBA  EE20 F012          	lfsr	2,18
  4669  000FBE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4670  000FC0  26D9               	addwf	fsr2l,f,c
  4671  000FC2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4672  000FC4  22DA               	addwfc	fsr2h,f,c
  4673  000FC6  50DF               	movf	indf2,w,c
  4674  000FC8  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4675  000FCA  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4676  000FCC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4677  000FCE  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4678  000FD0  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4679  000FD2  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4680  000FD4  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4681  000FD6  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4682  000FD8  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4683  000FDA  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4684  000FDC  0E00               	movlw	0
  4685  000FDE  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4686  000FE0  0E00               	movlw	0
  4687  000FE2  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4688                           
  4689                           ; BSR set to: 0
  4690                           ;ipv4.c: 117: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  4691  000FE4  EE20 F013          	lfsr	2,19
  4692  000FE8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4693  000FEA  26D9               	addwf	fsr2l,f,c
  4694  000FEC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4695  000FEE  22DA               	addwfc	fsr2h,f,c
  4696  000FF0  50DF               	movf	indf2,w,c
  4697  000FF2  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4698  000FF4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4699  000FF6  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4700  000FF8  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4701  000FFA  EE20 F014          	lfsr	2,20
  4702  000FFE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4703  001000  26D9               	addwf	fsr2l,f,c
  4704  001002  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4705  001004  22DA               	addwfc	fsr2h,f,c
  4706  001006  50DF               	movf	indf2,w,c
  4707  001008  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4708  00100A  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4709  00100C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4710  00100E  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4711  001010  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4712  001012  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4713  001014  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4714  001016  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4715  001018  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4716  00101A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4717  00101C  0E00               	movlw	0
  4718  00101E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4719  001020  0E00               	movlw	0
  4720  001022  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;ipv4.c: 118: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  4724  001024  EE20 F015          	lfsr	2,21
  4725  001028  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4726  00102A  26D9               	addwf	fsr2l,f,c
  4727  00102C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4728  00102E  22DA               	addwfc	fsr2h,f,c
  4729  001030  50DF               	movf	indf2,w,c
  4730  001032  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4731  001034  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4732  001036  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4733  001038  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4734  00103A  EE20 F016          	lfsr	2,22
  4735  00103E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4736  001040  26D9               	addwf	fsr2l,f,c
  4737  001042  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4738  001044  22DA               	addwfc	fsr2h,f,c
  4739  001046  50DF               	movf	indf2,w,c
  4740  001048  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4741  00104A  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4742  00104C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4743  00104E  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4744  001050  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4745  001052  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4746  001054  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4747  001056  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4748  001058  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4749  00105A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4750  00105C  0E00               	movlw	0
  4751  00105E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4752  001060  0E00               	movlw	0
  4753  001062  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4754                           
  4755                           ; BSR set to: 0
  4756                           ;ipv4.c: 120: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  4757  001064  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4758  001068  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4759  00106C  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4760  001070  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4761  001074  0E11               	movlw	17
  4762  001076  D005               	goto	u10890
  4763  001078                     u10895:
  4764  001078  90D8               	bcf	status,0,c
  4765  00107A  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4766  00107C  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4767  00107E  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4768  001080  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4769  001082                     u10890:
  4770  001082  2EE8               	decfsz	wreg,f,c
  4771  001084  D7F9               	goto	u10895
  4772  001086  0E0F               	movlw	15
  4773  001088  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4774  00108A  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4775  00108C  0E00               	movlw	0
  4776  00108E  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4777  001090  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4778  001092  0E00               	movlw	0
  4779  001094  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4780  001096  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4781  001098  0E00               	movlw	0
  4782  00109A  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4783  00109C  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4784  00109E  0EFF               	movlw	255
  4785  0010A0  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  4786  0010A2  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  4787  0010A4  0EFF               	movlw	255
  4788  0010A6  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  4789  0010A8  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  4790  0010AA  0E00               	movlw	0
  4791  0010AC  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  4792  0010AE  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  4793  0010B0  0E00               	movlw	0
  4794  0010B2  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  4795  0010B4  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  4796  0010B6  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4797  0010B8  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  4798  0010BA  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4799  0010BC  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  4800  0010BE  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  4801  0010C0  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4802  0010C2  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  4803  0010C4  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  4804  0010C6  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4805  0010C8  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4806  0010CA  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  4807  0010CC  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4808                           
  4809                           ; BSR set to: 0
  4810                           ;ipv4.c: 121: sum = ~sum;
  4811  0010CE  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4812  0010D2  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4813  0010D6  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4814  0010DA  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4815  0010DE  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4816  0010E0  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4817  0010E2  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4818  0010E4  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4819  0010E6  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  4820  0010EA  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  4821  0010EE  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  4822  0010F2  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;ipv4.c: 123: header->checksum = sum;
  4826  0010F6  EE20 F00D          	lfsr	2,13
  4827  0010FA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4828  0010FC  26D9               	addwf	fsr2l,f,c
  4829  0010FE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4830  001100  22DA               	addwfc	fsr2h,f,c
  4831  001102  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  4832  001106  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  4833                           
  4834                           ; BSR set to: 0
  4835  00110A  0012               	return		;funcret
  4836  00110C                     __end_of_ipv4_calculateHeaderChecksum:
  4837                           	opt stack 0
  4838                           tblptru	equ	0xFF8
  4839                           tblptrh	equ	0xFF7
  4840                           tblptrl	equ	0xFF6
  4841                           tablat	equ	0xFF5
  4842                           prodh	equ	0xFF4
  4843                           prodl	equ	0xFF3
  4844                           intcon	equ	0xFF2
  4845                           intcon3	equ	0xFF0
  4846                           postinc0	equ	0xFEE
  4847                           plusw0	equ	0xFEB
  4848                           fsr0h	equ	0xFEA
  4849                           fsr0l	equ	0xFE9
  4850                           wreg	equ	0xFE8
  4851                           indf1	equ	0xFE7
  4852                           postinc1	equ	0xFE6
  4853                           postdec1	equ	0xFE5
  4854                           plusw1	equ	0xFE3
  4855                           fsr1h	equ	0xFE2
  4856                           fsr1l	equ	0xFE1
  4857                           indf2	equ	0xFDF
  4858                           postinc2	equ	0xFDE
  4859                           postdec2	equ	0xFDD
  4860                           plusw2	equ	0xFDB
  4861                           fsr2h	equ	0xFDA
  4862                           fsr2l	equ	0xFD9
  4863                           status	equ	0xFD8
  4864                           
  4865 ;; *************** function _handleStackBackgroundTasks *****************
  4866 ;; Defined at:
  4867 ;;		line 26 in file "src/stack/backgroundTasks.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;  stack           2  121[BANK1 ] PTR volatile struct stac
  4870 ;;		 -> stack(110), 
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;		None
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4882 ;;      Params:         0       0       2       0       0       0       0       0       0
  4883 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4884 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4885 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4886 ;;Total ram usage:        4 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:   13
  4889 ;; This function calls:
  4890 ;;		_UARTTransmitText
  4891 ;;		_ethernetController_clearInterruptFlag
  4892 ;;		_ethernetController_newPacketAvailable
  4893 ;;		_ethernetController_pollInterruptFlags
  4894 ;;		_ethernetController_setLEDConfiguration
  4895 ;;		_ethernetController_setLEDStatus
  4896 ;;		_ethernetController_updateLinkStatus
  4897 ;;		_ethernet_rxGetNewFrame
  4898 ;;		_ipAdressToString
  4899 ;;		_ipv4_sendFrame
  4900 ;; This function is called by:
  4901 ;;		_main
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text8
  4906  001FBA                     __ptext8:
  4907                           	opt stack 0
  4908  001FBA                     _handleStackBackgroundTasks:
  4909                           	opt stack 17
  4910                           
  4911                           ;backgroundTasks.c: 27: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4912                           
  4913                           ; BSR set to: 0
  4914                           ;incstack = 0
  4915  001FBA  ECCD  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4916  001FBE  0101               	movlb	1	; () banked
  4917  001FC0  EE20 F012          	lfsr	2,18
  4918  001FC4  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4919  001FC6  26D9               	addwf	fsr2l,f,c
  4920  001FC8  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4921  001FCA  22DA               	addwfc	fsr2h,f,c
  4922  001FCC  0100               	movlb	0	; () banked
  4923  001FCE  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4924  001FD2  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4925                           
  4926                           ; BSR set to: 0
  4927                           ;backgroundTasks.c: 28: if (stack->background.interruptFlags.PKTIF) {
  4928  001FD6  0101               	movlb	1	; () banked
  4929  001FD8  EE20 F012          	lfsr	2,18
  4930  001FDC  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4931  001FDE  26D9               	addwf	fsr2l,f,c
  4932  001FE0  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4933  001FE2  22DA               	addwfc	fsr2h,f,c
  4934  001FE4  A8DF               	btfss	indf2,4,c
  4935  001FE6  D018               	goto	l498
  4936                           
  4937                           ; BSR set to: 1
  4938                           ;backgroundTasks.c: 30: if (ethernetController_newPacketAvailable()) {
  4939  001FE8  EC0E  F023         	call	_ethernetController_newPacketAvailable	;wreg free
  4940  001FEC  0900               	iorlw	0
  4941  001FEE  B4D8               	btfsc	status,2,c
  4942  001FF0  D013               	goto	l498
  4943                           
  4944                           ;backgroundTasks.c: 31: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4945  001FF2  C179  F176         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4946  001FF6  C17A  F177         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4947  001FFA  ECD1  F002         	call	_ethernet_rxGetNewFrame	;wreg free
  4948  001FFE  0101               	movlb	1	; () banked
  4949  002000  EE20 F00F          	lfsr	2,15
  4950  002004  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4951  002006  26D9               	addwf	fsr2l,f,c
  4952  002008  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4953  00200A  22DA               	addwfc	fsr2h,f,c
  4954  00200C  C176  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4955  002010  C177  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4956  002014  C178  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4957  002018                     l498:
  4958                           
  4959                           ;backgroundTasks.c: 32: }
  4960                           ;backgroundTasks.c: 33: }
  4961                           ;backgroundTasks.c: 35: if (stack->background.fPacketPending) {
  4962                           
  4963                           ; BSR set to: 1
  4964                           
  4965                           ; BSR set to: 1
  4966  002018  0101               	movlb	1	; () banked
  4967  00201A  EE20 F014          	lfsr	2,20
  4968  00201E  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4969  002020  26D9               	addwf	fsr2l,f,c
  4970  002022  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4971  002024  22DA               	addwfc	fsr2h,f,c
  4972  002026  A0DF               	btfss	indf2,0,c
  4973  002028  D06B               	goto	l501
  4974                           
  4975                           ; BSR set to: 1
  4976                           ;backgroundTasks.c: 37: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  4977  00202A  EE20 F032          	lfsr	2,50
  4978  00202E  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4979  002030  26D9               	addwf	fsr2l,f,c
  4980  002032  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4981  002034  22DA               	addwfc	fsr2h,f,c
  4982  002036  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  4983  00203A  0E3B               	movlw	59
  4984  00203C                     u10681:
  4985  00203C  CFDB FFEB          	movff	plusw2,plusw0
  4986  002040  06E8               	decf	wreg,f,c
  4987  002042  E2FC               	bc	u10681
  4988  002044  ECF1  F00E         	call	_ipv4_sendFrame	;wreg free
  4989  002048  0101               	movlb	1	; () banked
  4990  00204A  EE20 F00F          	lfsr	2,15
  4991  00204E  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4992  002050  26D9               	addwf	fsr2l,f,c
  4993  002052  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4994  002054  22DA               	addwfc	fsr2h,f,c
  4995  002056  C134  FFDE         	movff	?_ipv4_sendFrame,postinc2
  4996  00205A  C135  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  4997  00205E  C136  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  4998                           
  4999                           ; BSR set to: 1
  5000                           ;backgroundTasks.c: 38: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5001                           ;backgroundTasks.c: 39: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  5002  002062  EE20 F00F          	lfsr	2,15
  5003  002066  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5004  002068  26D9               	addwf	fsr2l,f,c
  5005  00206A  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5006  00206C  22DA               	addwfc	fsr2h,f,c
  5007  00206E  0E03               	movlw	3
  5008  002070  18DE               	xorwf	postinc2,w,c
  5009  002072  A4D8               	btfss	status,2,c
  5010  002074  D02A               	goto	l500
  5011                           
  5012                           ; BSR set to: 1
  5013  002076  EE20 F010          	lfsr	2,16
  5014  00207A  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5015  00207C  26D9               	addwf	fsr2l,f,c
  5016  00207E  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5017  002080  22DA               	addwfc	fsr2h,f,c
  5018  002082  0E92               	movlw	146
  5019  002084  18DE               	xorwf	postinc2,w,c
  5020  002086  E121               	bnz	l8554
  5021  002088  04DE               	decf	postinc2,w,c
  5022  00208A  A4D8               	btfss	status,2,c
  5023  00208C  D01E               	goto	l500
  5024                           
  5025                           ; BSR set to: 1
  5026                           ;backgroundTasks.c: 40: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  5027  00208E  EE20 F045          	lfsr	2,69
  5028  002092  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5029  002094  26D9               	addwf	fsr2l,f,c
  5030  002096  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5031  002098  22DA               	addwfc	fsr2h,f,c
  5032  00209A  CFDE F067          	movff	postinc2,ipAdressToString@ip
  5033  00209E  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  5034  0020A2  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  5035  0020A6  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  5036  0020AA  EC04  F00D         	call	_ipAdressToString	;wreg free
  5037  0020AE  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5038  0020B2  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5039  0020B6  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  5040                           
  5041                           ;backgroundTasks.c: 41: stack->background.fPacketPending = 0;
  5042  0020BA  0101               	movlb	1	; () banked
  5043  0020BC  EE20 F014          	lfsr	2,20
  5044  0020C0  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5045  0020C2  26D9               	addwf	fsr2l,f,c
  5046  0020C4  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5047  0020C6  22DA               	addwfc	fsr2h,f,c
  5048  0020C8  90DF               	bcf	indf2,0,c
  5049  0020CA                     l500:
  5050  0020CA                     l8554:
  5051                           
  5052                           ; BSR set to: 1
  5053                           ;backgroundTasks.c: 42: }
  5054                           ;backgroundTasks.c: 43: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5055                           ;backgroundTasks.c: 44: stack->background.err.code == (uint16_t)0) {
  5056  0020CA  EE20 F00F          	lfsr	2,15
  5057  0020CE  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5058  0020D0  26D9               	addwf	fsr2l,f,c
  5059  0020D2  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5060  0020D4  22DA               	addwfc	fsr2h,f,c
  5061  0020D6  0E03               	movlw	3
  5062  0020D8  18DE               	xorwf	postinc2,w,c
  5063  0020DA  A4D8               	btfss	status,2,c
  5064  0020DC  D011               	goto	l501
  5065                           
  5066                           ; BSR set to: 1
  5067  0020DE  EE20 F010          	lfsr	2,16
  5068  0020E2  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5069  0020E4  26D9               	addwf	fsr2l,f,c
  5070  0020E6  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5071  0020E8  22DA               	addwfc	fsr2h,f,c
  5072  0020EA  50DE               	movf	postinc2,w,c
  5073  0020EC  10DE               	iorwf	postinc2,w,c
  5074  0020EE  A4D8               	btfss	status,2,c
  5075  0020F0  D007               	goto	l501
  5076                           
  5077                           ; BSR set to: 1
  5078                           ;backgroundTasks.c: 46: stack->background.fPacketPending = 0;
  5079  0020F2  EE20 F014          	lfsr	2,20
  5080  0020F6  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5081  0020F8  26D9               	addwf	fsr2l,f,c
  5082  0020FA  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5083  0020FC  22DA               	addwfc	fsr2h,f,c
  5084  0020FE  90DF               	bcf	indf2,0,c
  5085  002100                     l501:
  5086                           
  5087                           ; BSR set to: 1
  5088                           ;backgroundTasks.c: 47: }
  5089                           ;backgroundTasks.c: 48: }
  5090                           ;backgroundTasks.c: 49: if (stack->background.interruptFlags.LINKIF) {
  5091                           
  5092                           ; BSR set to: 1
  5093  002100  EE20 F012          	lfsr	2,18
  5094  002104  5179               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5095  002106  26D9               	addwf	fsr2l,f,c
  5096  002108  517A               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5097  00210A  22DA               	addwfc	fsr2h,f,c
  5098  00210C  A6DF               	btfss	indf2,3,c
  5099  00210E  0012               	return	
  5100                           
  5101                           ; BSR set to: 1
  5102                           ;backgroundTasks.c: 50: ethernetController_updateLinkStatus(&(stack->ethernet));
  5103  002110  C179  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  5104  002114  C17A  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  5105  002118  EC14  F01B         	call	_ethernetController_updateLinkStatus	;wreg free
  5106                           
  5107                           ;backgroundTasks.c: 52: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5108  00211C  C179  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  5109  002120  C17A  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  5110  002124  04DE               	decf	postinc2,w,c
  5111  002126  A4D8               	btfss	status,2,c
  5112  002128  D00D               	goto	l503
  5113                           
  5114                           ;backgroundTasks.c: 53: ethernetController_setLEDStatus(LEDA, LED_ON);
  5115  00212A  0E00               	movlw	0
  5116  00212C  0100               	movlb	0	; () banked
  5117  00212E  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5118  002130  0E00               	movlw	0
  5119  002132  ECCA  F01E         	call	_ethernetController_setLEDStatus
  5120                           
  5121                           ;backgroundTasks.c: 54: ethernetController_setLEDConfiguration(LEDB, LED_TRANSMIT_RECEIV
      +                          E_EVENTS);
  5122  002136  0E02               	movlw	2
  5123  002138  0100               	movlb	0	; () banked
  5124  00213A  6F6E               	movwf	ethernetController_setLEDConfiguration@conf& (0+255),b
  5125  00213C  0E01               	movlw	1
  5126  00213E  ECCD  F01A         	call	_ethernetController_setLEDConfiguration
  5127                           
  5128                           ;backgroundTasks.c: 55: } else {
  5129  002142  D00C               	goto	l504
  5130  002144                     l503:
  5131                           
  5132                           ;backgroundTasks.c: 56: ethernetController_setLEDStatus(LEDA, LED_OFF);
  5133  002144  0E01               	movlw	1
  5134  002146  0100               	movlb	0	; () banked
  5135  002148  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5136  00214A  0E00               	movlw	0
  5137  00214C  ECCA  F01E         	call	_ethernetController_setLEDStatus
  5138                           
  5139                           ;backgroundTasks.c: 57: ethernetController_setLEDStatus(LEDB, LED_OFF);
  5140  002150  0E01               	movlw	1
  5141  002152  0100               	movlb	0	; () banked
  5142  002154  6F6E               	movwf	ethernetController_setLEDStatus@status& (0+255),b
  5143  002156  0E01               	movlw	1
  5144  002158  ECCA  F01E         	call	_ethernetController_setLEDStatus
  5145  00215C                     l504:
  5146                           
  5147                           ;backgroundTasks.c: 58: }
  5148                           ;backgroundTasks.c: 59: ethernetController_clearInterruptFlag(LINKIF);
  5149  00215C  0E0B               	movlw	11
  5150  00215E  EC26  F023         	call	_ethernetController_clearInterruptFlag
  5151  002162  0012               	return	
  5152  002164                     __end_of_handleStackBackgroundTasks:
  5153                           	opt stack 0
  5154                           tblptru	equ	0xFF8
  5155                           tblptrh	equ	0xFF7
  5156                           tblptrl	equ	0xFF6
  5157                           tablat	equ	0xFF5
  5158                           prodh	equ	0xFF4
  5159                           prodl	equ	0xFF3
  5160                           intcon	equ	0xFF2
  5161                           intcon3	equ	0xFF0
  5162                           postinc0	equ	0xFEE
  5163                           plusw0	equ	0xFEB
  5164                           fsr0h	equ	0xFEA
  5165                           fsr0l	equ	0xFE9
  5166                           wreg	equ	0xFE8
  5167                           indf1	equ	0xFE7
  5168                           postinc1	equ	0xFE6
  5169                           postdec1	equ	0xFE5
  5170                           plusw1	equ	0xFE3
  5171                           fsr1h	equ	0xFE2
  5172                           fsr1l	equ	0xFE1
  5173                           indf2	equ	0xFDF
  5174                           postinc2	equ	0xFDE
  5175                           postdec2	equ	0xFDD
  5176                           plusw2	equ	0xFDB
  5177                           fsr2h	equ	0xFDA
  5178                           fsr2l	equ	0xFD9
  5179                           status	equ	0xFD8
  5180                           
  5181 ;; *************** function _ipv4_sendFrame *****************
  5182 ;; Defined at:
  5183 ;;		line 42 in file "src/stack/protocols/ipv4.c"
  5184 ;; Parameters:    Size  Location     Type
  5185 ;;  ipPacket       60   52[BANK1 ] struct ipv4_packet
  5186 ;; Auto vars:     Size  Location     Type
  5187 ;;  err             3  115[BANK1 ] struct error
  5188 ;;  index           1  114[BANK1 ] unsigned char 
  5189 ;;  requestTimeo    1  113[BANK1 ] const unsigned char 
  5190 ;;  numberOfRequ    1  112[BANK1 ] const unsigned char 
  5191 ;; Return value:  Size  Location     Type
  5192 ;;                  3   52[BANK1 ] struct error
  5193 ;; Registers used:
  5194 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5195 ;; Tracked objects:
  5196 ;;		On entry : 0/0
  5197 ;;		On exit  : 0/0
  5198 ;;		Unchanged: 0/0
  5199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5200 ;;      Params:         0       0      60       0       0       0       0       0       0
  5201 ;;      Locals:         0       0       6       0       0       0       0       0       0
  5202 ;;      Temps:          0      12       0       0       0       0       0       0       0
  5203 ;;      Totals:         0      12      66       0       0       0       0       0       0
  5204 ;;Total ram usage:       78 bytes
  5205 ;; Hardware stack levels used:    1
  5206 ;; Hardware stack levels required when called:   11
  5207 ;; This function calls:
  5208 ;;		_ARP_checkForEntry
  5209 ;;		_ARP_getEntryFromTable
  5210 ;;		_ARP_sendRequest
  5211 ;;		_UARTTransmitText
  5212 ;;		_ethernetController_getMacAddress
  5213 ;;		_ethernetController_sendPacket
  5214 ;;		_ethernetController_writeDestinationMACAddress
  5215 ;;		_getSeconds
  5216 ;;		_ipAdressToString
  5217 ;;		_macToString
  5218 ;; This function is called by:
  5219 ;;		_handleStackBackgroundTasks
  5220 ;; This function uses a non-reentrant model
  5221 ;;
  5222                           
  5223                           	psect	text9
  5224  001DE2                     __ptext9:
  5225                           	opt stack 0
  5226  001DE2                     _ipv4_sendFrame:
  5227                           	opt stack 18
  5228                           
  5229                           ;ipv4.c: 43: error_t err;
  5230                           ;ipv4.c: 44: err.module = ERROR_MODULE_ARP;
  5231                           
  5232                           ;incstack = 0
  5233  001DE2  0E03               	movlw	3
  5234  001DE4  0101               	movlb	1	; () banked
  5235  001DE6  6F73               	movwf	ipv4_sendFrame@err& (0+255),b
  5236                           
  5237                           ;ipv4.c: 45: uint8_t index;
  5238                           ;ipv4.c: 46: uint8_t static requestCounter = 0;
  5239                           ;ipv4.c: 47: uint8_t const numberOfRequests = 3;
  5240  001DE8  0E03               	movlw	3
  5241  001DEA  6F70               	movwf	ipv4_sendFrame@numberOfRequests& (0+255),b
  5242                           
  5243                           ;ipv4.c: 48: uint8_t const requestTimeout = 2;
  5244  001DEC  0E02               	movlw	2
  5245  001DEE  6F71               	movwf	ipv4_sendFrame@requestTimeout& (0+255),b
  5246                           
  5247                           ; BSR set to: 1
  5248                           ;ipv4.c: 49: uint32_t static oldTime = 0;
  5249                           ;ipv4.c: 52: if (ARP_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  5250  001DF0  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ARP_checkForEntry@ip
  5251  001DF4  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ARP_checkForEntry@ip+1
  5252  001DF8  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ARP_checkForEntry@ip+2
  5253  001DFC  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ARP_checkForEntry@ip+3
  5254  001E00  0E72               	movlw	low ipv4_sendFrame@index
  5255  001E02  0100               	movlb	0	; () banked
  5256  001E04  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  5257  001E06  0E01               	movlw	high ipv4_sendFrame@index
  5258  001E08  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  5259  001E0A  EC27  F019         	call	_ARP_checkForEntry	;wreg free
  5260  001E0E  0900               	iorlw	0
  5261  001E10  B4D8               	btfsc	status,2,c
  5262  001E12  D06E               	goto	l968
  5263                           
  5264                           ;ipv4.c: 54: ipPacket.ethernet.destination = ARP_getEntryFromTable(index);
  5265  001E14  0101               	movlb	1	; () banked
  5266  001E16  5172               	movf	ipv4_sendFrame@index& (0+255),w,b
  5267  001E18  EC90  F021         	call	_ARP_getEntryFromTable
  5268  001E1C  EE21  F05B         	lfsr	2,ipv4_sendFrame@ipPacket+39
  5269  001E20  0E05               	movlw	5
  5270  001E22                     u10541:
  5271  001E22  CFEB FFDB          	movff	plusw0,plusw2
  5272  001E26  06E8               	decf	wreg,f,c
  5273  001E28  E2FC               	bc	u10541
  5274                           
  5275                           ;ipv4.c: 55: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  5276  001E2A  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  5277  001E2E  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  5278  001E32  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  5279  001E36  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  5280  001E3A  EC04  F00D         	call	_ipAdressToString	;wreg free
  5281  001E3E  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5282  001E42  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5283  001E46  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  5284                           
  5285                           ;ipv4.c: 56: UARTTransmitText(" is at ");
  5286  001E4A  0EBD               	movlw	low STR_65
  5287  001E4C  0100               	movlb	0	; () banked
  5288  001E4E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5289  001E50  0E7F               	movlw	high STR_65
  5290  001E52  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5291  001E54  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  5292                           
  5293                           ;ipv4.c: 57: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  5294  001E58  EE21  F05B         	lfsr	2,ipv4_sendFrame@ipPacket+39
  5295  001E5C  EE00  F07A         	lfsr	0,macToString@addr
  5296  001E60  0E05               	movlw	5
  5297  001E62                     u10551:
  5298  001E62  CFDB FFEB          	movff	plusw2,plusw0
  5299  001E66  06E8               	decf	wreg,f,c
  5300  001E68  E2FC               	bc	u10551
  5301  001E6A  EC7C  F016         	call	_macToString	;wreg free
  5302  001E6E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5303  001E72  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5304  001E76  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  5305                           
  5306                           ;ipv4.c: 58: UARTTransmitText(".\n\r");
  5307  001E7A  0EE5               	movlw	low (STR_49+1)
  5308  001E7C  0100               	movlb	0	; () banked
  5309  001E7E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5310  001E80  0E7F               	movlw	high (STR_49+1)
  5311  001E82  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5312  001E84  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  5313                           
  5314                           ;ipv4.c: 60: ipPacket.ethernet.source = ethernetController_getMacAddress();
  5315  001E88  EC55  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5316  001E8C  EE21  F055         	lfsr	2,ipv4_sendFrame@ipPacket+33
  5317  001E90  0E05               	movlw	5
  5318  001E92                     u10561:
  5319  001E92  CFEB FFDB          	movff	plusw0,plusw2
  5320  001E96  06E8               	decf	wreg,f,c
  5321  001E98  E2FC               	bc	u10561
  5322                           
  5323                           ;ipv4.c: 62: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  5324  001E9A  EE21  F05B         	lfsr	2,ipv4_sendFrame@ipPacket+39
  5325  001E9E  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  5326  001EA2  0E05               	movlw	5
  5327  001EA4                     u10571:
  5328  001EA4  CFDB FFEB          	movff	plusw2,plusw0
  5329  001EA8  06E8               	decf	wreg,f,c
  5330  001EAA  E2FC               	bc	u10571
  5331  001EAC  EE21  F063         	lfsr	2,ipv4_sendFrame@ipPacket+47
  5332  001EB0  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  5333  001EB4  0E07               	movlw	7
  5334  001EB6                     u10581:
  5335  001EB6  CFDB FFEB          	movff	plusw2,plusw0
  5336  001EBA  06E8               	decf	wreg,f,c
  5337  001EBC  E2FC               	bc	u10581
  5338  001EBE  EC21  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  5339                           
  5340                           ;ipv4.c: 63: ethernetController_sendPacket(ipPacket.ethernet.memory);
  5341  001EC2  EE21  F063         	lfsr	2,ipv4_sendFrame@ipPacket+47
  5342  001EC6  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  5343  001ECA  0E07               	movlw	7
  5344  001ECC                     u10591:
  5345  001ECC  CFDB FFEB          	movff	plusw2,plusw0
  5346  001ED0  06E8               	decf	wreg,f,c
  5347  001ED2  E2FC               	bc	u10591
  5348  001ED4  EC0F  F022         	call	_ethernetController_sendPacket	;wreg free
  5349                           
  5350                           ;ipv4.c: 64: err.code = (uint16_t)0;
  5351  001ED8  0E00               	movlw	0
  5352  001EDA  0101               	movlb	1	; () banked
  5353  001EDC  6F75               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5354  001EDE  0E00               	movlw	0
  5355  001EE0  6F74               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5356                           
  5357                           ; BSR set to: 1
  5358                           ;ipv4.c: 65: return err;
  5359  001EE2  C173  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5360  001EE6  C174  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5361  001EEA  C175  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5362                           
  5363                           ; BSR set to: 1
  5364  001EEE  0012               	return	
  5365  001EF0                     l968:
  5366                           
  5367                           ;ipv4.c: 68: if (getSeconds() - oldTime >= requestTimeout) {
  5368                           
  5369                           ; BSR set to: 1
  5370  001EF0  C171  F0F4         	movff	ipv4_sendFrame@requestTimeout,??_ipv4_sendFrame
  5371  001EF4  0100               	movlb	0	; () banked
  5372  001EF6  6BF5               	clrf	(??_ipv4_sendFrame+1)& (0+255),b
  5373  001EF8  6BF6               	clrf	(??_ipv4_sendFrame+2)& (0+255),b
  5374  001EFA  6BF7               	clrf	(??_ipv4_sendFrame+3)& (0+255),b
  5375  001EFC  C1C0  F0F8         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame+4
  5376  001F00  C1C1  F0F9         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+5
  5377  001F04  C1C2  F0FA         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+6
  5378  001F08  C1C3  F0FB         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+7
  5379  001F0C  1FF8               	comf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5380  001F0E  1FF9               	comf	(??_ipv4_sendFrame+5)& (0+255),f,b
  5381  001F10  1FFA               	comf	(??_ipv4_sendFrame+6)& (0+255),f,b
  5382  001F12  1FFB               	comf	(??_ipv4_sendFrame+7)& (0+255),f,b
  5383  001F14  2BF8               	incf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5384  001F16  0E00               	movlw	0
  5385  001F18  23F9               	addwfc	(??_ipv4_sendFrame+5)& (0+255),f,b
  5386  001F1A  23FA               	addwfc	(??_ipv4_sendFrame+6)& (0+255),f,b
  5387  001F1C  23FB               	addwfc	(??_ipv4_sendFrame+7)& (0+255),f,b
  5388  001F1E  EC05  F023         	call	_getSeconds	;wreg free
  5389  001F22  0100               	movlb	0	; () banked
  5390  001F24  51F8               	movf	(??_ipv4_sendFrame+4)& (0+255),w,b
  5391  001F26  2560               	addwf	?_getSeconds& (0+255),w,b
  5392  001F28  6FFC               	movwf	(??_ipv4_sendFrame+8)& (0+255),b
  5393  001F2A  51F9               	movf	(??_ipv4_sendFrame+5)& (0+255),w,b
  5394  001F2C  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5395  001F2E  6FFD               	movwf	(??_ipv4_sendFrame+9)& (0+255),b
  5396  001F30  51FA               	movf	(??_ipv4_sendFrame+6)& (0+255),w,b
  5397  001F32  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5398  001F34  6FFE               	movwf	(??_ipv4_sendFrame+10)& (0+255),b
  5399  001F36  51FB               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  5400  001F38  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5401  001F3A  6FFF               	movwf	(??_ipv4_sendFrame+11)& (0+255),b
  5402  001F3C  51F4               	movf	??_ipv4_sendFrame& (0+255),w,b
  5403  001F3E  5DFC               	subwf	(??_ipv4_sendFrame+8)& (0+255),w,b
  5404  001F40  51F5               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  5405  001F42  59FD               	subwfb	(??_ipv4_sendFrame+9)& (0+255),w,b
  5406  001F44  51F6               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  5407  001F46  59FE               	subwfb	(??_ipv4_sendFrame+10)& (0+255),w,b
  5408  001F48  51F7               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  5409  001F4A  59FF               	subwfb	(??_ipv4_sendFrame+11)& (0+255),w,b
  5410  001F4C  A0D8               	btfss	status,0,c
  5411  001F4E  D029               	goto	l973
  5412                           
  5413                           ; BSR set to: 0
  5414                           ;ipv4.c: 69: oldTime = getSeconds();
  5415  001F50  EC05  F023         	call	_getSeconds	;wreg free
  5416  001F54  C060  F1C0         	movff	?_getSeconds,ipv4_sendFrame@oldTime
  5417  001F58  C061  F1C1         	movff	?_getSeconds+1,ipv4_sendFrame@oldTime+1
  5418  001F5C  C062  F1C2         	movff	?_getSeconds+2,ipv4_sendFrame@oldTime+2
  5419  001F60  C063  F1C3         	movff	?_getSeconds+3,ipv4_sendFrame@oldTime+3
  5420                           
  5421                           ;ipv4.c: 70: if (requestCounter < numberOfRequests) {
  5422  001F64  0101               	movlb	1	; () banked
  5423  001F66  5170               	movf	ipv4_sendFrame@numberOfRequests& (0+255),w,b
  5424  001F68  5DC8               	subwf	ipv4_sendFrame@requestCounter& (0+255),w,b
  5425  001F6A  B0D8               	btfsc	status,0,c
  5426  001F6C  D00C               	goto	l972
  5427                           
  5428                           ; BSR set to: 1
  5429                           ;ipv4.c: 71: requestCounter++;
  5430  001F6E  2BC8               	incf	ipv4_sendFrame@requestCounter& (0+255),f,b
  5431                           
  5432                           ; BSR set to: 1
  5433                           ;ipv4.c: 72: ARP_sendRequest(ipPacket.ipv4Header.destination);
  5434  001F70  C147  F0F0         	movff	ipv4_sendFrame@ipPacket+19,ARP_sendRequest@ip
  5435  001F74  C148  F0F1         	movff	ipv4_sendFrame@ipPacket+20,ARP_sendRequest@ip+1
  5436  001F78  C149  F0F2         	movff	ipv4_sendFrame@ipPacket+21,ARP_sendRequest@ip+2
  5437  001F7C  C14A  F0F3         	movff	ipv4_sendFrame@ipPacket+22,ARP_sendRequest@ip+3
  5438  001F80  ECD9  F019         	call	_ARP_sendRequest	;wreg free
  5439                           
  5440                           ;ipv4.c: 73: } else {
  5441  001F84  D00E               	goto	l973
  5442  001F86                     l972:
  5443                           
  5444                           ;ipv4.c: 75: requestCounter = 0;
  5445  001F86  0E00               	movlw	0
  5446  001F88  0101               	movlb	1	; () banked
  5447  001F8A  6FC8               	movwf	ipv4_sendFrame@requestCounter& (0+255),b
  5448                           
  5449                           ;ipv4.c: 76: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  5450  001F8C  0E01               	movlw	1
  5451  001F8E  6F75               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5452  001F90  0E92               	movlw	146
  5453  001F92  6F74               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5454                           
  5455                           ; BSR set to: 1
  5456                           ;ipv4.c: 77: return err;
  5457  001F94  C173  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5458  001F98  C174  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5459  001F9C  C175  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5460                           
  5461                           ; BSR set to: 1
  5462  001FA0  0012               	return	
  5463  001FA2                     l973:
  5464                           
  5465                           ;ipv4.c: 78: }
  5466                           ;ipv4.c: 79: }
  5467                           ;ipv4.c: 80: }
  5468                           ;ipv4.c: 81: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  5469                           
  5470                           ; BSR set to: 1
  5471                           
  5472                           ; BSR set to: 1
  5473                           
  5474                           ; BSR set to: 1
  5475  001FA2  0E01               	movlw	1
  5476  001FA4  0101               	movlb	1	; () banked
  5477  001FA6  6F75               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5478  001FA8  0E91               	movlw	145
  5479  001FAA  6F74               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5480                           
  5481                           ; BSR set to: 1
  5482                           ;ipv4.c: 82: return err;
  5483  001FAC  C173  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5484  001FB0  C174  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5485  001FB4  C175  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5486  001FB8  0012               	return	
  5487  001FBA                     __end_of_ipv4_sendFrame:
  5488                           	opt stack 0
  5489                           tblptru	equ	0xFF8
  5490                           tblptrh	equ	0xFF7
  5491                           tblptrl	equ	0xFF6
  5492                           tablat	equ	0xFF5
  5493                           prodh	equ	0xFF4
  5494                           prodl	equ	0xFF3
  5495                           intcon	equ	0xFF2
  5496                           intcon3	equ	0xFF0
  5497                           postinc0	equ	0xFEE
  5498                           plusw0	equ	0xFEB
  5499                           fsr0h	equ	0xFEA
  5500                           fsr0l	equ	0xFE9
  5501                           wreg	equ	0xFE8
  5502                           indf1	equ	0xFE7
  5503                           postinc1	equ	0xFE6
  5504                           postdec1	equ	0xFE5
  5505                           plusw1	equ	0xFE3
  5506                           fsr1h	equ	0xFE2
  5507                           fsr1l	equ	0xFE1
  5508                           indf2	equ	0xFDF
  5509                           postinc2	equ	0xFDE
  5510                           postdec2	equ	0xFDD
  5511                           plusw2	equ	0xFDB
  5512                           fsr2h	equ	0xFDA
  5513                           fsr2l	equ	0xFD9
  5514                           status	equ	0xFD8
  5515                           
  5516 ;; *************** function _ARP_sendRequest *****************
  5517 ;; Defined at:
  5518 ;;		line 210 in file "src/stack/protocols/arp.c"
  5519 ;; Parameters:    Size  Location     Type
  5520 ;;  ip              4  144[BANK0 ] struct ipv4_address
  5521 ;; Auto vars:     Size  Location     Type
  5522 ;;  request        32   20[BANK1 ] struct ARP_message
  5523 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  5524 ;;  senderMAC       6    4[BANK1 ] struct macaddress
  5525 ;;  targetIP        4   10[BANK1 ] struct ipv4_address
  5526 ;;  senderIP        4    0[BANK1 ] struct ipv4_address
  5527 ;; Return value:  Size  Location     Type
  5528 ;;                  1    wreg      void 
  5529 ;; Registers used:
  5530 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5536 ;;      Params:         0       4       0       0       0       0       0       0       0
  5537 ;;      Locals:         0       0      52       0       0       0       0       0       0
  5538 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5539 ;;      Totals:         0       4      52       0       0       0       0       0       0
  5540 ;;Total ram usage:       56 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:   10
  5543 ;; This function calls:
  5544 ;;		_ARP_send
  5545 ;;		_ethernetController_getMacAddress
  5546 ;;		_mac_setToBroadcast
  5547 ;; This function is called by:
  5548 ;;		_ipv4_sendFrame
  5549 ;; This function uses a non-reentrant model
  5550 ;;
  5551                           
  5552                           	psect	text10
  5553  0033B2                     __ptext10:
  5554                           	opt stack 0
  5555  0033B2                     _ARP_sendRequest:
  5556                           	opt stack 18
  5557                           
  5558                           ;arp.c: 211: ARP_message_t request;
  5559                           ;arp.c: 212: ipv4_address_t senderIP;
  5560                           ;arp.c: 213: ipv4_address_t targetIP;
  5561                           ;arp.c: 214: macaddress_t senderMAC;
  5562                           ;arp.c: 215: macaddress_t targetMAC;
  5563                           ;arp.c: 217: senderMAC = ethernetController_getMacAddress();
  5564                           
  5565                           ; BSR set to: 1
  5566                           ;incstack = 0
  5567  0033B2  EC55  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5568  0033B6  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5569  0033BA  0E05               	movlw	5
  5570  0033BC                     u9961:
  5571  0033BC  CFEB FFDB          	movff	plusw0,plusw2
  5572  0033C0  06E8               	decf	wreg,f,c
  5573  0033C2  E2FC               	bc	u9961
  5574                           
  5575                           ;arp.c: 218: mac_setToBroadcast(&targetMAC);
  5576  0033C4  0E0E               	movlw	low ARP_sendRequest@targetMAC
  5577  0033C6  0100               	movlb	0	; () banked
  5578  0033C8  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
  5579  0033CA  0E01               	movlw	high ARP_sendRequest@targetMAC
  5580  0033CC  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
  5581  0033CE  EC37  F022         	call	_mac_setToBroadcast	;wreg free
  5582                           
  5583                           ;arp.c: 220: targetIP = ip;
  5584  0033D2  C0F0  F10A         	movff	ARP_sendRequest@ip,ARP_sendRequest@targetIP
  5585  0033D6  C0F1  F10B         	movff	ARP_sendRequest@ip+1,ARP_sendRequest@targetIP+1
  5586  0033DA  C0F2  F10C         	movff	ARP_sendRequest@ip+2,ARP_sendRequest@targetIP+2
  5587  0033DE  C0F3  F10D         	movff	ARP_sendRequest@ip+3,ARP_sendRequest@targetIP+3
  5588                           
  5589                           ;arp.c: 222: request.hlen = 6;
  5590  0033E2  0E06               	movlw	6
  5591  0033E4  0101               	movlb	1	; () banked
  5592  0033E6  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  5593                           
  5594                           ; BSR set to: 1
  5595                           ;arp.c: 223: request.plen = 4;
  5596  0033E8  0E04               	movlw	4
  5597  0033EA  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  5598                           
  5599                           ; BSR set to: 1
  5600                           ;arp.c: 224: request.htype = ARP_HTYPE_ETHERNET;
  5601  0033EC  0E00               	movlw	0
  5602  0033EE  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  5603  0033F0  0E01               	movlw	1
  5604  0033F2  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  5605                           
  5606                           ; BSR set to: 1
  5607                           ;arp.c: 225: request.ptype = ARP_PTYPE_IPv4;
  5608  0033F4  0E08               	movlw	8
  5609  0033F6  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  5610  0033F8  0E00               	movlw	0
  5611  0033FA  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  5612                           
  5613                           ; BSR set to: 1
  5614                           ;arp.c: 226: request.operation = ARP_REQUEST;
  5615  0033FC  0E00               	movlw	0
  5616  0033FE  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  5617  003400  0E01               	movlw	1
  5618  003402  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  5619                           
  5620                           ; BSR set to: 1
  5621                           ;arp.c: 227: request.senderIPAddress = senderIP;
  5622  003404  C100  F122         	movff	ARP_sendRequest@senderIP,ARP_sendRequest@request+14
  5623  003408  C101  F123         	movff	ARP_sendRequest@senderIP+1,ARP_sendRequest@request+15
  5624  00340C  C102  F124         	movff	ARP_sendRequest@senderIP+2,ARP_sendRequest@request+16
  5625  003410  C103  F125         	movff	ARP_sendRequest@senderIP+3,ARP_sendRequest@request+17
  5626                           
  5627                           ; BSR set to: 1
  5628                           ;arp.c: 228: request.senderMACAddress = senderMAC;
  5629  003414  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5630  003418  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  5631  00341C  0E05               	movlw	5
  5632  00341E                     u9971:
  5633  00341E  CFDB FFE3          	movff	plusw2,plusw1
  5634  003422  06E8               	decf	wreg,f,c
  5635  003424  E2FC               	bc	u9971
  5636                           
  5637                           ; BSR set to: 1
  5638                           ;arp.c: 229: request.targetIPAddress = targetIP;
  5639  003426  C10A  F12C         	movff	ARP_sendRequest@targetIP,ARP_sendRequest@request+24
  5640  00342A  C10B  F12D         	movff	ARP_sendRequest@targetIP+1,ARP_sendRequest@request+25
  5641  00342E  C10C  F12E         	movff	ARP_sendRequest@targetIP+2,ARP_sendRequest@request+26
  5642  003432  C10D  F12F         	movff	ARP_sendRequest@targetIP+3,ARP_sendRequest@request+27
  5643                           
  5644                           ; BSR set to: 1
  5645                           ;arp.c: 230: request.targetMACAddress = targetMAC;
  5646  003436  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  5647  00343A  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  5648  00343E  0E05               	movlw	5
  5649  003440                     u9981:
  5650  003440  CFDB FFE3          	movff	plusw2,plusw1
  5651  003444  06E8               	decf	wreg,f,c
  5652  003446  E2FC               	bc	u9981
  5653                           
  5654                           ; BSR set to: 1
  5655                           ;arp.c: 232: ARP_send(request);
  5656  003448  EE21  F014         	lfsr	2,ARP_sendRequest@request
  5657  00344C  EE00  F0A1         	lfsr	0,ARP_send@arp
  5658  003450  0E1F               	movlw	31
  5659  003452                     u9991:
  5660  003452  CFDB FFEB          	movff	plusw2,plusw0
  5661  003456  06E8               	decf	wreg,f,c
  5662  003458  E2FC               	bc	u9991
  5663  00345A  ECFB  F00D         	call	_ARP_send	;wreg free
  5664  00345E  0012               	return		;funcret
  5665  003460                     __end_of_ARP_sendRequest:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           intcon	equ	0xFF2
  5674                           intcon3	equ	0xFF0
  5675                           postinc0	equ	0xFEE
  5676                           plusw0	equ	0xFEB
  5677                           fsr0h	equ	0xFEA
  5678                           fsr0l	equ	0xFE9
  5679                           wreg	equ	0xFE8
  5680                           indf1	equ	0xFE7
  5681                           postinc1	equ	0xFE6
  5682                           postdec1	equ	0xFE5
  5683                           plusw1	equ	0xFE3
  5684                           fsr1h	equ	0xFE2
  5685                           fsr1l	equ	0xFE1
  5686                           indf2	equ	0xFDF
  5687                           postinc2	equ	0xFDE
  5688                           postdec2	equ	0xFDD
  5689                           plusw2	equ	0xFDB
  5690                           fsr2h	equ	0xFDA
  5691                           fsr2l	equ	0xFD9
  5692                           status	equ	0xFD8
  5693                           
  5694 ;; *************** function _ARP_getEntryFromTable *****************
  5695 ;; Defined at:
  5696 ;;		line 248 in file "src/stack/protocols/arp.c"
  5697 ;; Parameters:    Size  Location     Type
  5698 ;;  index           1    wreg     unsigned char 
  5699 ;; Auto vars:     Size  Location     Type
  5700 ;;  index           1    7[BANK0 ] unsigned char 
  5701 ;; Return value:  Size  Location     Type
  5702 ;;                  6    0[BANK0 ] struct macaddress
  5703 ;; Registers used:
  5704 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5705 ;; Tracked objects:
  5706 ;;		On entry : 0/0
  5707 ;;		On exit  : 0/0
  5708 ;;		Unchanged: 0/0
  5709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5710 ;;      Params:         0       7       0       0       0       0       0       0       0
  5711 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5713 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5714 ;;Total ram usage:        8 bytes
  5715 ;; Hardware stack levels used:    1
  5716 ;; Hardware stack levels required when called:    4
  5717 ;; This function calls:
  5718 ;;		Nothing
  5719 ;; This function is called by:
  5720 ;;		_ipv4_sendFrame
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text11
  5725  004320                     __ptext11:
  5726                           	opt stack 0
  5727  004320                     _ARP_getEntryFromTable:
  5728                           	opt stack 24
  5729                           
  5730                           ;incstack = 0
  5731                           ;ARP_getEntryFromTable@index stored from wreg
  5732  004320  0100               	movlb	0	; () banked
  5733  004322  6F67               	movwf	ARP_getEntryFromTable@index& (0+255),b
  5734                           
  5735                           ;arp.c: 249: return ARP_table[index].mac;
  5736  004324  0100               	movlb	0	; () banked
  5737  004326  5167               	movf	ARP_getEntryFromTable@index& (0+255),w,b
  5738  004328  0D0E               	mullw	14
  5739  00432A  0E04               	movlw	4
  5740  00432C  26F3               	addwf	prodl,f,c
  5741  00432E  0E00               	movlw	0
  5742  004330  22F4               	addwfc	prodh,f,c
  5743  004332  0E00               	movlw	low _ARP_table
  5744  004334  24F3               	addwf	prodl,w,c
  5745  004336  6ED9               	movwf	fsr2l,c
  5746  004338  0E03               	movlw	high _ARP_table
  5747  00433A  20F4               	addwfc	prodh,w,c
  5748  00433C  6EDA               	movwf	fsr2h,c
  5749  00433E  EE00  F060         	lfsr	0,?_ARP_getEntryFromTable
  5750  004342  0E05               	movlw	5
  5751  004344                     u10041:
  5752  004344  CFDB FFEB          	movff	plusw2,plusw0
  5753  004348  06E8               	decf	wreg,f,c
  5754  00434A  E2FC               	bc	u10041
  5755  00434C  0012               	return	
  5756  00434E                     __end_of_ARP_getEntryFromTable:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           intcon3	equ	0xFF0
  5766                           postinc0	equ	0xFEE
  5767                           plusw0	equ	0xFEB
  5768                           fsr0h	equ	0xFEA
  5769                           fsr0l	equ	0xFE9
  5770                           wreg	equ	0xFE8
  5771                           indf1	equ	0xFE7
  5772                           postinc1	equ	0xFE6
  5773                           postdec1	equ	0xFE5
  5774                           plusw1	equ	0xFE3
  5775                           fsr1h	equ	0xFE2
  5776                           fsr1l	equ	0xFE1
  5777                           indf2	equ	0xFDF
  5778                           postinc2	equ	0xFDE
  5779                           postdec2	equ	0xFDD
  5780                           plusw2	equ	0xFDB
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _ARP_checkForEntry *****************
  5786 ;; Defined at:
  5787 ;;		line 235 in file "src/stack/protocols/arp.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;  ip              4    7[BANK0 ] struct ipv4_address
  5790 ;;  index           2   11[BANK0 ] PTR unsigned char 
  5791 ;;		 -> ipv4_sendFrame@index(1), 
  5792 ;; Auto vars:     Size  Location     Type
  5793 ;;  i               1   21[BANK0 ] unsigned char 
  5794 ;; Return value:  Size  Location     Type
  5795 ;;                  1    wreg      unsigned char 
  5796 ;; Registers used:
  5797 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5798 ;; Tracked objects:
  5799 ;;		On entry : 0/0
  5800 ;;		On exit  : 0/0
  5801 ;;		Unchanged: 0/0
  5802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5803 ;;      Params:         0       6       0       0       0       0       0       0       0
  5804 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5805 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5806 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5807 ;;Total ram usage:       15 bytes
  5808 ;; Hardware stack levels used:    1
  5809 ;; Hardware stack levels required when called:    5
  5810 ;; This function calls:
  5811 ;;		_getSeconds
  5812 ;;		_ipv4_cmp
  5813 ;; This function is called by:
  5814 ;;		_ipv4_sendFrame
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           	psect	text12
  5819  00324E                     __ptext12:
  5820                           	opt stack 0
  5821  00324E                     _ARP_checkForEntry:
  5822                           	opt stack 23
  5823                           
  5824                           ;arp.c: 236: for (uint8_t i = 0; i < 8; i++) {
  5825                           
  5826                           ; BSR set to: 0
  5827                           ;incstack = 0
  5828  00324E  0E00               	movlw	0
  5829  003250  0100               	movlb	0	; () banked
  5830  003252  6F75               	movwf	ARP_checkForEntry@i& (0+255),b
  5831  003254                     l8100:
  5832                           
  5833                           ; BSR set to: 0
  5834  003254  0E07               	movlw	7
  5835  003256  6575               	cpfsgt	ARP_checkForEntry@i& (0+255),b
  5836  003258  D001               	goto	l905
  5837  00325A  D050               	goto	u10030
  5838  00325C                     l905:
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;arp.c: 237: if (ipv4_cmp(&ARP_table[i].ip, &ip)) {
  5842                           
  5843                           ; BSR set to: 0
  5844  00325C  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5845  00325E  0D0E               	mullw	14
  5846  003260  0E00               	movlw	low _ARP_table
  5847  003262  24F3               	addwf	prodl,w,c
  5848  003264  6F60               	movwf	ipv4_cmp@a& (0+255),b
  5849  003266  0E03               	movlw	high _ARP_table
  5850  003268  20F4               	addwfc	prodh,w,c
  5851  00326A  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  5852  00326C  0E67               	movlw	low ARP_checkForEntry@ip
  5853  00326E  6F62               	movwf	ipv4_cmp@b& (0+255),b
  5854  003270  0E00               	movlw	high ARP_checkForEntry@ip
  5855  003272  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  5856  003274  EC7C  F020         	call	_ipv4_cmp	;wreg free
  5857  003278  0100               	movlb	0	; () banked
  5858  00327A  A0D8               	btfss	status,0,c
  5859  00327C  D03D               	goto	l908
  5860                           
  5861                           ; BSR set to: 0
  5862                           ;arp.c: 238: if (getSeconds() - ARP_table[i].secondsCreated < 300) {
  5863  00327E  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5864  003280  0D0E               	mullw	14
  5865  003282  0E0A               	movlw	10
  5866  003284  26F3               	addwf	prodl,f,c
  5867  003286  0E00               	movlw	0
  5868  003288  22F4               	addwfc	prodh,f,c
  5869  00328A  0E00               	movlw	low _ARP_table
  5870  00328C  24F3               	addwf	prodl,w,c
  5871  00328E  6ED9               	movwf	fsr2l,c
  5872  003290  0E03               	movlw	high _ARP_table
  5873  003292  20F4               	addwfc	prodh,w,c
  5874  003294  6EDA               	movwf	fsr2h,c
  5875  003296  CFDE F06D          	movff	postinc2,??_ARP_checkForEntry
  5876  00329A  CFDE F06E          	movff	postinc2,??_ARP_checkForEntry+1
  5877  00329E  CFDE F06F          	movff	postinc2,??_ARP_checkForEntry+2
  5878  0032A2  CFDE F070          	movff	postinc2,??_ARP_checkForEntry+3
  5879  0032A6  1F6D               	comf	??_ARP_checkForEntry& (0+255),f,b
  5880  0032A8  1F6E               	comf	(??_ARP_checkForEntry+1)& (0+255),f,b
  5881  0032AA  1F6F               	comf	(??_ARP_checkForEntry+2)& (0+255),f,b
  5882  0032AC  1F70               	comf	(??_ARP_checkForEntry+3)& (0+255),f,b
  5883  0032AE  2B6D               	incf	??_ARP_checkForEntry& (0+255),f,b
  5884  0032B0  0E00               	movlw	0
  5885  0032B2  236E               	addwfc	(??_ARP_checkForEntry+1)& (0+255),f,b
  5886  0032B4  236F               	addwfc	(??_ARP_checkForEntry+2)& (0+255),f,b
  5887  0032B6  2370               	addwfc	(??_ARP_checkForEntry+3)& (0+255),f,b
  5888  0032B8  EC05  F023         	call	_getSeconds	;wreg free
  5889  0032BC  0100               	movlb	0	; () banked
  5890  0032BE  516D               	movf	??_ARP_checkForEntry& (0+255),w,b
  5891  0032C0  2560               	addwf	?_getSeconds& (0+255),w,b
  5892  0032C2  6F71               	movwf	(??_ARP_checkForEntry+4)& (0+255),b
  5893  0032C4  516E               	movf	(??_ARP_checkForEntry+1)& (0+255),w,b
  5894  0032C6  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5895  0032C8  6F72               	movwf	(??_ARP_checkForEntry+5)& (0+255),b
  5896  0032CA  516F               	movf	(??_ARP_checkForEntry+2)& (0+255),w,b
  5897  0032CC  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5898  0032CE  6F73               	movwf	(??_ARP_checkForEntry+6)& (0+255),b
  5899  0032D0  5170               	movf	(??_ARP_checkForEntry+3)& (0+255),w,b
  5900  0032D2  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5901  0032D4  6F74               	movwf	(??_ARP_checkForEntry+7)& (0+255),b
  5902  0032D6  5174               	movf	(??_ARP_checkForEntry+7)& (0+255),w,b
  5903  0032D8  1173               	iorwf	(??_ARP_checkForEntry+6)& (0+255),w,b
  5904  0032DA  E10E               	bnz	l8114
  5905  0032DC  0E2C               	movlw	44
  5906  0032DE  5D71               	subwf	(??_ARP_checkForEntry+4)& (0+255),w,b
  5907  0032E0  0E01               	movlw	1
  5908  0032E2  5972               	subwfb	(??_ARP_checkForEntry+5)& (0+255),w,b
  5909  0032E4  B0D8               	btfsc	status,0,c
  5910  0032E6  D008               	goto	l908
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;arp.c: 240: *index = i;
  5914  0032E8  C06B  FFD9         	movff	ARP_checkForEntry@index,fsr2l
  5915  0032EC  C06C  FFDA         	movff	ARP_checkForEntry@index+1,fsr2h
  5916  0032F0  C075  FFDF         	movff	ARP_checkForEntry@i,indf2
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;arp.c: 241: return 1;
  5920  0032F4  0E01               	movlw	1
  5921                           
  5922                           ; BSR set to: 0
  5923  0032F6  0012               	return	
  5924  0032F8                     l908:
  5925  0032F8                     l8114:
  5926                           
  5927                           ; BSR set to: 0
  5928  0032F8  2B75               	incf	ARP_checkForEntry@i& (0+255),f,b
  5929  0032FA  D7AC               	goto	l8100
  5930  0032FC                     u10030:
  5931                           
  5932                           ; BSR set to: 0
  5933                           ;arp.c: 242: }
  5934                           ;arp.c: 243: }
  5935                           ;arp.c: 244: }
  5936                           ;arp.c: 245: return 0;
  5937                           
  5938                           ; BSR set to: 0
  5939  0032FC  0E00               	movlw	0
  5940  0032FE  0012               	return	
  5941  003300                     __end_of_ARP_checkForEntry:
  5942                           	opt stack 0
  5943                           tblptru	equ	0xFF8
  5944                           tblptrh	equ	0xFF7
  5945                           tblptrl	equ	0xFF6
  5946                           tablat	equ	0xFF5
  5947                           prodh	equ	0xFF4
  5948                           prodl	equ	0xFF3
  5949                           intcon	equ	0xFF2
  5950                           intcon3	equ	0xFF0
  5951                           postinc0	equ	0xFEE
  5952                           plusw0	equ	0xFEB
  5953                           fsr0h	equ	0xFEA
  5954                           fsr0l	equ	0xFE9
  5955                           wreg	equ	0xFE8
  5956                           indf1	equ	0xFE7
  5957                           postinc1	equ	0xFE6
  5958                           postdec1	equ	0xFE5
  5959                           plusw1	equ	0xFE3
  5960                           fsr1h	equ	0xFE2
  5961                           fsr1l	equ	0xFE1
  5962                           indf2	equ	0xFDF
  5963                           postinc2	equ	0xFDE
  5964                           postdec2	equ	0xFDD
  5965                           plusw2	equ	0xFDB
  5966                           fsr2h	equ	0xFDA
  5967                           fsr2l	equ	0xFD9
  5968                           status	equ	0xFD8
  5969                           
  5970 ;; *************** function _ethernet_rxGetNewFrame *****************
  5971 ;; Defined at:
  5972 ;;		line 53 in file "src/eth/ethernet.c"
  5973 ;; Parameters:    Size  Location     Type
  5974 ;;  frame           2  118[BANK1 ] PTR struct ethernetFrame
  5975 ;;		 -> stack.ethernet(15), stack(110), 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  err             3  154[BANK0 ] struct error
  5978 ;; Return value:  Size  Location     Type
  5979 ;;                  3  118[BANK1 ] struct error
  5980 ;; Registers used:
  5981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5982 ;; Tracked objects:
  5983 ;;		On entry : 0/0
  5984 ;;		On exit  : 0/0
  5985 ;;		Unchanged: 0/0
  5986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5987 ;;      Params:         0       0       3       0       0       0       0       0       0
  5988 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5989 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5990 ;;      Totals:         0      11       3       0       0       0       0       0       0
  5991 ;;Total ram usage:       14 bytes
  5992 ;; Hardware stack levels used:    1
  5993 ;; Hardware stack levels required when called:   12
  5994 ;; This function calls:
  5995 ;;		_ARP_handleNewPacket
  5996 ;;		_UARTTransmitInt
  5997 ;;		_UARTTransmitText
  5998 ;;		_etherTypeToString
  5999 ;;		_ethernetController_dropPacket
  6000 ;;		_ethernetController_getEtherTypeField
  6001 ;;		_ethernetController_getNextPacketPointer
  6002 ;;		_ethernetController_getRSV
  6003 ;;		_intToString
  6004 ;;		_ipv4_handleNewPacket
  6005 ;;		_macToString
  6006 ;; This function is called by:
  6007 ;;		_handleStackBackgroundTasks
  6008 ;; This function uses a non-reentrant model
  6009 ;;
  6010                           
  6011                           	psect	text13
  6012  0005A2                     __ptext13:
  6013                           	opt stack 0
  6014  0005A2                     _ethernet_rxGetNewFrame:
  6015                           	opt stack 17
  6016                           
  6017                           ;ethernet.c: 54: error_t err;
  6018                           ;ethernet.c: 55: err.module = ERROR_MODULE_ETHERNET;
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022  0005A2  0E02               	movlw	2
  6023  0005A4  0100               	movlb	0	; () banked
  6024  0005A6  6FFA               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6025                           
  6026                           ;ethernet.c: 56: err.code = (uint16_t)0;
  6027  0005A8  0E00               	movlw	0
  6028  0005AA  6FFC               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6029  0005AC  0E00               	movlw	0
  6030  0005AE  6FFB               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6031                           
  6032                           ; BSR set to: 0
  6033                           ;ethernet.c: 57: frame->memory.start = ethernetController_getNextPacketPointer();
  6034  0005B0  EC1F  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  6035  0005B4  0101               	movlb	1	; () banked
  6036  0005B6  EE20 F010          	lfsr	2,16
  6037  0005BA  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6038  0005BC  26D9               	addwf	fsr2l,f,c
  6039  0005BE  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6040  0005C0  22DA               	addwfc	fsr2h,f,c
  6041  0005C2  0100               	movlb	0	; () banked
  6042  0005C4  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6043  0005C8  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6044                           
  6045                           ; BSR set to: 0
  6046                           ;ethernet.c: 58: frame->memory.fIsAssigned = 1;
  6047  0005CC  0101               	movlb	1	; () banked
  6048  0005CE  EE20 F016          	lfsr	2,22
  6049  0005D2  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6050  0005D4  26D9               	addwf	fsr2l,f,c
  6051  0005D6  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6052  0005D8  22DA               	addwfc	fsr2h,f,c
  6053  0005DA  80DF               	bsf	indf2,0,c
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;ethernet.c: 59: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6057  0005DC  EE20 F010          	lfsr	2,16
  6058  0005E0  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6059  0005E2  26D9               	addwf	fsr2l,f,c
  6060  0005E4  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6061  0005E6  22DA               	addwfc	fsr2h,f,c
  6062  0005E8  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6063  0005EC  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6064  0005F0  EC1B  F01D         	call	_ethernetController_getRSV	;wreg free
  6065  0005F4  0101               	movlb	1	; () banked
  6066  0005F6  EE20 F018          	lfsr	2,24
  6067  0005FA  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6068  0005FC  26D9               	addwf	fsr2l,f,c
  6069  0005FE  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6070  000600  22DA               	addwfc	fsr2h,f,c
  6071  000602  0E04               	movlw	4
  6072  000604                     u10441:
  6073  000604  CFEB FFDB          	movff	plusw0,plusw2
  6074  000608  06E8               	decf	wreg,f,c
  6075  00060A  E2FC               	bc	u10441
  6076                           
  6077                           ; BSR set to: 1
  6078                           ;ethernet.c: 60: frame->memory.length = frame->receiveStatusVector.length;
  6079  00060C  EE20 F018          	lfsr	2,24
  6080  000610  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6081  000612  26D9               	addwf	fsr2l,f,c
  6082  000614  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6083  000616  22DA               	addwfc	fsr2h,f,c
  6084  000618  EE10 F014          	lfsr	1,20
  6085  00061C  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6086  00061E  26E1               	addwf	fsr1l,f,c
  6087  000620  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6088  000622  22E2               	addwfc	fsr1h,f,c
  6089  000624  CFDE FFE6          	movff	postinc2,postinc1
  6090  000628  CFDD FFE5          	movff	postdec2,postdec1
  6091                           
  6092                           ; BSR set to: 1
  6093                           ;ethernet.c: 62: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6094  00062C  EE20 F014          	lfsr	2,20
  6095  000630  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6096  000632  26D9               	addwf	fsr2l,f,c
  6097  000634  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6098  000636  22DA               	addwfc	fsr2h,f,c
  6099  000638  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6100  00063C  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6101  000640  EE20 F010          	lfsr	2,16
  6102  000644  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6103  000646  26D9               	addwf	fsr2l,f,c
  6104  000648  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6105  00064A  22DA               	addwfc	fsr2h,f,c
  6106  00064C  CFDE F0F4          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6107  000650  CFDD F0F5          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6108  000654  0100               	movlb	0	; () banked
  6109  000656  51F2               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6110  000658  27F4               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6111  00065A  51F3               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6112  00065C  23F5               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6113  00065E  0E60               	movlw	96
  6114  000660  5DF5               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6115  000662  A0D8               	btfss	status,0,c
  6116  000664  D040               	goto	l345
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;ethernet.c: 64: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6120  000666  0E00               	movlw	0
  6121  000668  6FF2               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6122  00066A  0E30               	movlw	48
  6123  00066C  6FF3               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6124  00066E  0101               	movlb	1	; () banked
  6125  000670  EE20 F014          	lfsr	2,20
  6126  000674  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6127  000676  26D9               	addwf	fsr2l,f,c
  6128  000678  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6129  00067A  22DA               	addwfc	fsr2h,f,c
  6130  00067C  CFDE F0F4          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6131  000680  CFDD F0F5          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6132  000684  0EFF               	movlw	255
  6133  000686  0100               	movlb	0	; () banked
  6134  000688  6FF6               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6135  00068A  0E2F               	movlw	47
  6136  00068C  6FF7               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6137  00068E  0101               	movlb	1	; () banked
  6138  000690  EE20 F010          	lfsr	2,16
  6139  000694  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6140  000696  26D9               	addwf	fsr2l,f,c
  6141  000698  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6142  00069A  22DA               	addwfc	fsr2h,f,c
  6143  00069C  CFDE F0F8          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6144  0006A0  CFDD F0F9          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6145  0006A4  0100               	movlb	0	; () banked
  6146  0006A6  1FF8               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6147  0006A8  1FF9               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6148  0006AA  4BF8               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6149  0006AC  2BF9               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6150  0006AE  51F6               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6151  0006B0  27F8               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6152  0006B2  51F7               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6153  0006B4  23F9               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6154  0006B6  1FF8               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6155  0006B8  1FF9               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6156  0006BA  4BF8               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6157  0006BC  2BF9               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6158  0006BE  51F4               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6159  0006C0  27F8               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6160  0006C2  51F5               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6161  0006C4  23F9               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6162  0006C6  51F2               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6163  0006C8  27F8               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6164  0006CA  51F3               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6165  0006CC  23F9               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6166  0006CE  0101               	movlb	1	; () banked
  6167  0006D0  EE20 F012          	lfsr	2,18
  6168  0006D4  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6169  0006D6  26D9               	addwf	fsr2l,f,c
  6170  0006D8  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6171  0006DA  22DA               	addwfc	fsr2h,f,c
  6172  0006DC  C0F8  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6173  0006E0  C0F9  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6174                           
  6175                           ;ethernet.c: 65: } else {
  6176  0006E4  D025               	goto	l346
  6177  0006E6                     l345:
  6178                           
  6179                           ;ethernet.c: 66: frame->memory.end = frame->memory.start + frame->memory.length;
  6180                           
  6181                           ; BSR set to: 1
  6182  0006E6  0101               	movlb	1	; () banked
  6183  0006E8  EE20 F014          	lfsr	2,20
  6184  0006EC  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6185  0006EE  26D9               	addwf	fsr2l,f,c
  6186  0006F0  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6187  0006F2  22DA               	addwfc	fsr2h,f,c
  6188  0006F4  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6189  0006F8  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6190  0006FC  EE20 F010          	lfsr	2,16
  6191  000700  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6192  000702  26D9               	addwf	fsr2l,f,c
  6193  000704  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6194  000706  22DA               	addwfc	fsr2h,f,c
  6195  000708  CFDE F0F4          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6196  00070C  CFDD F0F5          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6197  000710  0100               	movlb	0	; () banked
  6198  000712  51F2               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6199  000714  27F4               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6200  000716  51F3               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6201  000718  23F5               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6202  00071A  0101               	movlb	1	; () banked
  6203  00071C  EE20 F012          	lfsr	2,18
  6204  000720  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6205  000722  26D9               	addwf	fsr2l,f,c
  6206  000724  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6207  000726  22DA               	addwfc	fsr2h,f,c
  6208  000728  C0F4  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6209  00072C  C0F5  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6210  000730                     l346:
  6211                           
  6212                           ; BSR set to: 1
  6213                           ;ethernet.c: 67: }
  6214                           ;ethernet.c: 68: frame->ethertype = ethernetController_getEtherTypeField();
  6215                           
  6216                           ; BSR set to: 1
  6217  000730  ECE0  F01B         	call	_ethernetController_getEtherTypeField	;wreg free
  6218  000734  0101               	movlb	1	; () banked
  6219  000736  EE20 F00E          	lfsr	2,14
  6220  00073A  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6221  00073C  26D9               	addwf	fsr2l,f,c
  6222  00073E  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6223  000740  22DA               	addwfc	fsr2h,f,c
  6224  000742  0100               	movlb	0	; () banked
  6225  000744  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  6226  000748  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  6227                           
  6228                           ; BSR set to: 0
  6229                           ;ethernet.c: 70: if (frame->receiveStatusVector.broadcast)
  6230  00074C  0101               	movlb	1	; () banked
  6231  00074E  EE20 F01A          	lfsr	2,26
  6232  000752  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6233  000754  26D9               	addwf	fsr2l,f,c
  6234  000756  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6235  000758  22DA               	addwfc	fsr2h,f,c
  6236  00075A  AEDF               	btfss	indf2,7,c
  6237  00075C  D007               	goto	l347
  6238                           
  6239                           ; BSR set to: 1
  6240                           ;ethernet.c: 71: UARTTransmitText("[Broadcast]");
  6241  00075E  0E8B               	movlw	low STR_5
  6242  000760  0100               	movlb	0	; () banked
  6243  000762  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6244  000764  0E7F               	movlw	high STR_5
  6245  000766  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6246  000768  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6247  00076C                     l347:
  6248                           
  6249                           ;ethernet.c: 72: if (frame->receiveStatusVector.unicast)
  6250  00076C  0101               	movlb	1	; () banked
  6251  00076E  EE20 F01C          	lfsr	2,28
  6252  000772  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6253  000774  26D9               	addwf	fsr2l,f,c
  6254  000776  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6255  000778  22DA               	addwfc	fsr2h,f,c
  6256  00077A  A4DF               	btfss	indf2,2,c
  6257  00077C  D007               	goto	l348
  6258                           
  6259                           ; BSR set to: 1
  6260                           ;ethernet.c: 73: UARTTransmitText("[Unicast]");
  6261  00077E  0EA1               	movlw	low STR_6
  6262  000780  0100               	movlb	0	; () banked
  6263  000782  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6264  000784  0E7F               	movlw	high STR_6
  6265  000786  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6266  000788  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6267  00078C                     l348:
  6268                           
  6269                           ;ethernet.c: 74: if (!frame->receiveStatusVector.receivedOk)
  6270  00078C  0101               	movlb	1	; () banked
  6271  00078E  EE20 F01A          	lfsr	2,26
  6272  000792  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6273  000794  26D9               	addwf	fsr2l,f,c
  6274  000796  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6275  000798  22DA               	addwfc	fsr2h,f,c
  6276  00079A  BADF               	btfsc	indf2,5,c
  6277  00079C  D09E               	goto	l350
  6278                           
  6279                           ; BSR set to: 1
  6280                           ;ethernet.c: 75: UARTTransmitText("[Symbol Errors]");
  6281  00079E  0E1A               	movlw	low STR_7
  6282  0007A0  0100               	movlb	0	; () banked
  6283  0007A2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6284  0007A4  0E7F               	movlw	high STR_7
  6285  0007A6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6286  0007A8  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6287                           
  6288                           ;ethernet.c: 77: switch ( frame->ethertype) {
  6289  0007AC  D096               	goto	l350
  6290  0007AE                     
  6291                           ;ethernet.c: 79: UARTTransmitText("[ARP]");
  6292  0007AE  0ED4               	movlw	low STR_8
  6293  0007B0  0100               	movlb	0	; () banked
  6294  0007B2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6295  0007B4  0E7F               	movlw	high STR_8
  6296  0007B6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6297  0007B8  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6298                           
  6299                           ;ethernet.c: 80: ARP_handleNewPacket(frame);
  6300  0007BC  C176  F154         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  6301  0007C0  C177  F155         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  6302  0007C4  ECB2  F010         	call	_ARP_handleNewPacket	;wreg free
  6303                           
  6304                           ;ethernet.c: 83: break;
  6305                           
  6306                           ;ethernet.c: 82: case ETHERTYPE_FLOW_CONTROL:
  6307                           
  6308                           ;ethernet.c: 81: break;
  6309  0007C8  D0AB               	goto	l352
  6310  0007CA                     
  6311                           ;ethernet.c: 85: UARTTransmitText("[IPv4]");
  6312  0007CA  0ECD               	movlw	low STR_9
  6313  0007CC  0100               	movlb	0	; () banked
  6314  0007CE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6315  0007D0  0E7F               	movlw	high STR_9
  6316  0007D2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6317  0007D4  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6318                           
  6319                           ;ethernet.c: 86: ipv4_handleNewPacket(frame);
  6320  0007D8  C176  F09A         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  6321  0007DC  C177  F09B         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  6322  0007E0  ECC3  F022         	call	_ipv4_handleNewPacket	;wreg free
  6323                           
  6324                           ;ethernet.c: 89: break;
  6325                           
  6326                           ;ethernet.c: 88: case ETHERTYPE_WOL:
  6327                           
  6328                           ;ethernet.c: 87: break;
  6329  0007E4  D09D               	goto	l352
  6330  0007E6                     
  6331                           ;ethernet.c: 91: UARTTransmitText("[");
  6332  0007E6  0EDD               	movlw	low (STR_56+3)
  6333  0007E8  0100               	movlb	0	; () banked
  6334  0007EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6335  0007EC  0E7F               	movlw	high (STR_56+3)
  6336  0007EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6337  0007F0  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6338                           
  6339                           ;ethernet.c: 92: UARTTransmitText(macToString(frame->source));
  6340  0007F4  0101               	movlb	1	; () banked
  6341  0007F6  EE20 F002          	lfsr	2,2
  6342  0007FA  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6343  0007FC  26D9               	addwf	fsr2l,f,c
  6344  0007FE  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6345  000800  22DA               	addwfc	fsr2h,f,c
  6346  000802  EE00  F07A         	lfsr	0,macToString@addr
  6347  000806  0E05               	movlw	5
  6348  000808                     u10491:
  6349  000808  CFDB FFEB          	movff	plusw2,plusw0
  6350  00080C  06E8               	decf	wreg,f,c
  6351  00080E  E2FC               	bc	u10491
  6352  000810  EC7C  F016         	call	_macToString	;wreg free
  6353  000814  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6354  000818  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6355  00081C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6356                           
  6357                           ;ethernet.c: 93: UARTTransmitText("->");
  6358  000820  0EF5               	movlw	low STR_11
  6359  000822  0100               	movlb	0	; () banked
  6360  000824  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6361  000826  0E7F               	movlw	high STR_11
  6362  000828  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6363  00082A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6364                           
  6365                           ;ethernet.c: 94: UARTTransmitText(macToString(frame->destination));
  6366  00082E  0101               	movlb	1	; () banked
  6367  000830  EE20 F008          	lfsr	2,8
  6368  000834  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6369  000836  26D9               	addwf	fsr2l,f,c
  6370  000838  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6371  00083A  22DA               	addwfc	fsr2h,f,c
  6372  00083C  EE00  F07A         	lfsr	0,macToString@addr
  6373  000840  0E05               	movlw	5
  6374  000842                     u10501:
  6375  000842  CFDB FFEB          	movff	plusw2,plusw0
  6376  000846  06E8               	decf	wreg,f,c
  6377  000848  E2FC               	bc	u10501
  6378  00084A  EC7C  F016         	call	_macToString	;wreg free
  6379  00084E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6380  000852  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6381  000856  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6382                           
  6383                           ;ethernet.c: 95: UARTTransmitText("][");
  6384  00085A  0EF8               	movlw	low STR_12
  6385  00085C  0100               	movlb	0	; () banked
  6386  00085E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6387  000860  0E7F               	movlw	high STR_12
  6388  000862  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6389  000864  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6390                           
  6391                           ;ethernet.c: 96: UARTTransmitText(etherTypeToString(frame->ethertype));
  6392  000868  0101               	movlb	1	; () banked
  6393  00086A  EE20 F00E          	lfsr	2,14
  6394  00086E  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6395  000870  26D9               	addwf	fsr2l,f,c
  6396  000872  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6397  000874  22DA               	addwfc	fsr2h,f,c
  6398  000876  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  6399  00087A  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  6400  00087E  EC17  F020         	call	_etherTypeToString	;wreg free
  6401  000882  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  6402  000886  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  6403  00088A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6404                           
  6405                           ;ethernet.c: 97: UARTTransmitText("][L=");
  6406  00088E  0EE9               	movlw	low STR_13
  6407  000890  0100               	movlb	0	; () banked
  6408  000892  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6409  000894  0E7F               	movlw	high STR_13
  6410  000896  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6411  000898  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6412                           
  6413                           ;ethernet.c: 98: UARTTransmitInt(frame->length);
  6414  00089C  C176  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  6415  0008A0  C177  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  6416  0008A4  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6417  0008A8  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6418  0008AC  C0F2  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  6419  0008B0  C0F3  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  6420  0008B4  0100               	movlb	0	; () banked
  6421  0008B6  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  6422  0008B8  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  6423  0008BA  EC94  F022         	call	_UARTTransmitInt	;wreg free
  6424                           
  6425                           ;ethernet.c: 99: UARTTransmitText("]");
  6426  0008BE  0EFC               	movlw	low (STR_18+1)
  6427  0008C0  0100               	movlb	0	; () banked
  6428  0008C2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6429  0008C4  0E7F               	movlw	high (STR_18+1)
  6430  0008C6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6431  0008C8  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6432                           
  6433                           ;ethernet.c: 100: ethernetController_dropPacket(frame);
  6434  0008CC  C176  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  6435  0008D0  C177  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  6436  0008D4  ECCC  F018         	call	_ethernetController_dropPacket	;wreg free
  6437                           
  6438                           ;ethernet.c: 101: break;
  6439  0008D8  D023               	goto	l352
  6440  0008DA                     l350:
  6441  0008DA  0101               	movlb	1	; () banked
  6442  0008DC  EE20 F00E          	lfsr	2,14
  6443  0008E0  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6444  0008E2  26D9               	addwf	fsr2l,f,c
  6445  0008E4  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6446  0008E6  22DA               	addwfc	fsr2h,f,c
  6447  0008E8  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6448  0008EC  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6449                           
  6450                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6451                           ; Switch size 1, requested type "space"
  6452                           ; Number of cases is 2, Range of values is 8 to 136
  6453                           ; switch strategies available:
  6454                           ; Name         Instructions Cycles
  6455                           ; simple_byte            7     4 (average)
  6456                           ;	Chosen strategy is simple_byte
  6457  0008F0  0100               	movlb	0	; () banked
  6458  0008F2  51F3               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6459  0008F4  0A08               	xorlw	8	; case 8
  6460  0008F6  B4D8               	btfsc	status,2,c
  6461  0008F8  D004               	goto	l9102
  6462  0008FA  0A80               	xorlw	128	; case 136
  6463  0008FC  B4D8               	btfsc	status,2,c
  6464  0008FE  D00C               	goto	l9104
  6465  000900  D772               	goto	l356
  6466  000902                     l9102:
  6467                           
  6468                           ; BSR set to: 0
  6469                           ; Switch size 1, requested type "space"
  6470                           ; Number of cases is 3, Range of values is 0 to 66
  6471                           ; switch strategies available:
  6472                           ; Name         Instructions Cycles
  6473                           ; simple_byte           10     6 (average)
  6474                           ;	Chosen strategy is simple_byte
  6475  000902  51F2               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6476  000904  0A00               	xorlw	0	; case 0
  6477  000906  B4D8               	btfsc	status,2,c
  6478  000908  D760               	goto	l354
  6479  00090A  0A06               	xorlw	6	; case 6
  6480  00090C  B4D8               	btfsc	status,2,c
  6481  00090E  D74F               	goto	l351
  6482  000910  0A44               	xorlw	68	; case 66
  6483  000912  B4D8               	btfsc	status,2,c
  6484  000914  D005               	goto	l352
  6485  000916  D767               	goto	l356
  6486  000918                     l9104:
  6487                           
  6488                           ; BSR set to: 0
  6489                           ; Switch size 1, requested type "space"
  6490                           ; Number of cases is 1, Range of values is 8 to 8
  6491                           ; switch strategies available:
  6492                           ; Name         Instructions Cycles
  6493                           ; simple_byte            4     3 (average)
  6494                           ;	Chosen strategy is simple_byte
  6495  000918  51F2               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6496  00091A  0A08               	xorlw	8	; case 8
  6497  00091C  A4D8               	btfss	status,2,c
  6498  00091E  D763               	goto	l356
  6499  000920                     l352:
  6500                           
  6501                           ;ethernet.c: 105: UARTTransmitText("[");
  6502                           
  6503                           ; BSR set to: 0
  6504  000920  0EDD               	movlw	low (STR_56+3)
  6505  000922  0100               	movlb	0	; () banked
  6506  000924  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6507  000926  0E7F               	movlw	high (STR_56+3)
  6508  000928  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6509  00092A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6510                           
  6511                           ;ethernet.c: 106: UARTTransmitText(intToString(frame->memory.start));
  6512  00092E  0101               	movlb	1	; () banked
  6513  000930  EE20 F010          	lfsr	2,16
  6514  000934  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6515  000936  26D9               	addwf	fsr2l,f,c
  6516  000938  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6517  00093A  22DA               	addwfc	fsr2h,f,c
  6518  00093C  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6519  000940  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6520  000944  C0F2  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6521  000948  C0F3  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6522  00094C  0100               	movlb	0	; () banked
  6523  00094E  6B75               	clrf	(intToString@val+2)& (0+255),b
  6524  000950  6B76               	clrf	(intToString@val+3)& (0+255),b
  6525  000952  ECA1  F00B         	call	_intToString	;wreg free
  6526  000956  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6527  00095A  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6528  00095E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6529                           
  6530                           ;ethernet.c: 107: UARTTransmitText(" to ");
  6531  000962  0E15               	movlw	low (STR_61+11)
  6532  000964  0100               	movlb	0	; () banked
  6533  000966  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6534  000968  0E7F               	movlw	high (STR_61+11)
  6535  00096A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6536  00096C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6537                           
  6538                           ;ethernet.c: 108: UARTTransmitText(intToString(frame->memory.end));
  6539  000970  0101               	movlb	1	; () banked
  6540  000972  EE20 F012          	lfsr	2,18
  6541  000976  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6542  000978  26D9               	addwf	fsr2l,f,c
  6543  00097A  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6544  00097C  22DA               	addwfc	fsr2h,f,c
  6545  00097E  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6546  000982  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6547  000986  C0F2  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6548  00098A  C0F3  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6549  00098E  0100               	movlb	0	; () banked
  6550  000990  6B75               	clrf	(intToString@val+2)& (0+255),b
  6551  000992  6B76               	clrf	(intToString@val+3)& (0+255),b
  6552  000994  ECA1  F00B         	call	_intToString	;wreg free
  6553  000998  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6554  00099C  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6555  0009A0  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6556                           
  6557                           ;ethernet.c: 109: UARTTransmitText(" (");
  6558  0009A4  0EF2               	movlw	low STR_17
  6559  0009A6  0100               	movlb	0	; () banked
  6560  0009A8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6561  0009AA  0E7F               	movlw	high STR_17
  6562  0009AC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6563  0009AE  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6564                           
  6565                           ;ethernet.c: 110: UARTTransmitText(intToString(frame->memory.length));
  6566  0009B2  0101               	movlb	1	; () banked
  6567  0009B4  EE20 F014          	lfsr	2,20
  6568  0009B8  5176               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6569  0009BA  26D9               	addwf	fsr2l,f,c
  6570  0009BC  5177               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6571  0009BE  22DA               	addwfc	fsr2h,f,c
  6572  0009C0  CFDE F0F2          	movff	postinc2,??_ethernet_rxGetNewFrame
  6573  0009C4  CFDD F0F3          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6574  0009C8  C0F2  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6575  0009CC  C0F3  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6576  0009D0  0100               	movlb	0	; () banked
  6577  0009D2  6B75               	clrf	(intToString@val+2)& (0+255),b
  6578  0009D4  6B76               	clrf	(intToString@val+3)& (0+255),b
  6579  0009D6  ECA1  F00B         	call	_intToString	;wreg free
  6580  0009DA  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6581  0009DE  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6582  0009E2  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6583                           
  6584                           ;ethernet.c: 111: UARTTransmitText(")]");
  6585  0009E6  0EFB               	movlw	low STR_18
  6586  0009E8  0100               	movlb	0	; () banked
  6587  0009EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6588  0009EC  0E7F               	movlw	high STR_18
  6589  0009EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6590  0009F0  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6591                           
  6592                           ;ethernet.c: 114: UARTTransmitText("\n\r");
  6593  0009F4  0EF7               	movlw	low (STR_32+48)
  6594  0009F6  0100               	movlb	0	; () banked
  6595  0009F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6596  0009FA  0E7C               	movlw	high (STR_32+48)
  6597  0009FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6598  0009FE  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6599  000A02  0012               	return		;funcret
  6600  000A04                     __end_of_ethernet_rxGetNewFrame:
  6601                           	opt stack 0
  6602                           tblptru	equ	0xFF8
  6603                           tblptrh	equ	0xFF7
  6604                           tblptrl	equ	0xFF6
  6605                           tablat	equ	0xFF5
  6606                           prodh	equ	0xFF4
  6607                           prodl	equ	0xFF3
  6608                           intcon	equ	0xFF2
  6609                           intcon3	equ	0xFF0
  6610                           postinc0	equ	0xFEE
  6611                           plusw0	equ	0xFEB
  6612                           fsr0h	equ	0xFEA
  6613                           fsr0l	equ	0xFE9
  6614                           wreg	equ	0xFE8
  6615                           indf1	equ	0xFE7
  6616                           postinc1	equ	0xFE6
  6617                           postdec1	equ	0xFE5
  6618                           plusw1	equ	0xFE3
  6619                           fsr1h	equ	0xFE2
  6620                           fsr1l	equ	0xFE1
  6621                           indf2	equ	0xFDF
  6622                           postinc2	equ	0xFDE
  6623                           postdec2	equ	0xFDD
  6624                           plusw2	equ	0xFDB
  6625                           fsr2h	equ	0xFDA
  6626                           fsr2l	equ	0xFD9
  6627                           status	equ	0xFD8
  6628                           
  6629 ;; *************** function _ipv4_handleNewPacket *****************
  6630 ;; Defined at:
  6631 ;;		line 149 in file "src/stack/protocols/ipv4.c"
  6632 ;; Parameters:    Size  Location     Type
  6633 ;;  frame           2   58[BANK0 ] PTR struct ethernetFrame
  6634 ;;		 -> stack.ethernet(15), stack(110), 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6646 ;;      Params:         0       2       0       0       0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6649 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6650 ;;Total ram usage:        2 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    9
  6653 ;; This function calls:
  6654 ;;		_UARTTransmitText
  6655 ;;		_ethernetController_dropPacket
  6656 ;; This function is called by:
  6657 ;;		_ethernet_rxGetNewFrame
  6658 ;; This function uses a non-reentrant model
  6659 ;;
  6660                           
  6661                           	psect	text14
  6662  004586                     __ptext14:
  6663                           	opt stack 0
  6664  004586                     _ipv4_handleNewPacket:
  6665                           	opt stack 19
  6666                           
  6667                           ;ipv4.c: 150: UARTTransmitText("[PACKET DROPPED]");
  6668                           
  6669                           ;incstack = 0
  6670  004586  0ED7               	movlw	low STR_67
  6671  004588  0100               	movlb	0	; () banked
  6672  00458A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6673  00458C  0E7E               	movlw	high STR_67
  6674  00458E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6675  004590  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  6676                           
  6677                           ;ipv4.c: 151: ethernetController_dropPacket(frame);
  6678  004594  C09A  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6679  004598  C09B  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6680  00459C  ECCC  F018         	call	_ethernetController_dropPacket	;wreg free
  6681  0045A0  0012               	return		;funcret
  6682  0045A2                     __end_of_ipv4_handleNewPacket:
  6683                           	opt stack 0
  6684                           tblptru	equ	0xFF8
  6685                           tblptrh	equ	0xFF7
  6686                           tblptrl	equ	0xFF6
  6687                           tablat	equ	0xFF5
  6688                           prodh	equ	0xFF4
  6689                           prodl	equ	0xFF3
  6690                           intcon	equ	0xFF2
  6691                           intcon3	equ	0xFF0
  6692                           postinc0	equ	0xFEE
  6693                           plusw0	equ	0xFEB
  6694                           fsr0h	equ	0xFEA
  6695                           fsr0l	equ	0xFE9
  6696                           wreg	equ	0xFE8
  6697                           indf1	equ	0xFE7
  6698                           postinc1	equ	0xFE6
  6699                           postdec1	equ	0xFE5
  6700                           plusw1	equ	0xFE3
  6701                           fsr1h	equ	0xFE2
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           postdec2	equ	0xFDD
  6706                           plusw2	equ	0xFDB
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _ethernetController_getRSV *****************
  6712 ;; Defined at:
  6713 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  address         2   17[BANK0 ] unsigned int 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  i               1   23[BANK0 ] unsigned char 
  6718 ;;  opcode          1   22[BANK0 ] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  5   17[BANK0 ] struct RSV
  6721 ;; Registers used:
  6722 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6728 ;;      Params:         0       5       0       0       0       0       0       0       0
  6729 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6730 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6731 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6732 ;;Total ram usage:        7 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    7
  6735 ;; This function calls:
  6736 ;;		_ENC424J600_readSPI
  6737 ;;		_ENC424J600_setERXDATAReadPointer
  6738 ;;		_ENC424J600_updateReceiveStatusVector
  6739 ;;		_ENC424J600_writeSPI
  6740 ;; This function is called by:
  6741 ;;		_ethernet_rxGetNewFrame
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           	psect	text15
  6746  003A36                     __ptext15:
  6747                           	opt stack 0
  6748  003A36                     _ethernetController_getRSV:
  6749                           	opt stack 21
  6750                           
  6751                           ;ENC424J600.c: 313: uint8_t static temp[6];
  6752                           ;ENC424J600.c: 314: ENC424J600_setERXDATAReadPointer(address + 2);
  6753                           
  6754                           ;incstack = 0
  6755  003A36  0E02               	movlw	2
  6756  003A38  0100               	movlb	0	; () banked
  6757  003A3A  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  6758  003A3C  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  6759  003A3E  0E00               	movlw	0
  6760  003A40  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  6761  003A42  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  6762  003A44  ECBB  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  6763                           
  6764                           ;ENC424J600.c: 315: uint8_t opcode = 0x2C;
  6765  003A48  0E2C               	movlw	44
  6766  003A4A  0100               	movlb	0	; () banked
  6767  003A4C  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  6768                           
  6769                           ; BSR set to: 0
  6770                           ;ENC424J600.c: 316: PORTBbits.RB4=0;
  6771  003A4E  9881               	bcf	3969,4,c	;volatile
  6772                           
  6773                           ; BSR set to: 0
  6774                           ;ENC424J600.c: 317: ENC424J600_writeSPI(&opcode);
  6775  003A50  0E76               	movlw	low ethernetController_getRSV@opcode
  6776  003A52  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  6777  003A54  0E00               	movlw	high ethernetController_getRSV@opcode
  6778  003A56  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  6779  003A58  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
  6780                           
  6781                           ;ENC424J600.c: 318: for (uint8_t i = 0; i < 6; i++) {
  6782  003A5C  0E00               	movlw	0
  6783  003A5E  0100               	movlb	0	; () banked
  6784  003A60  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  6785  003A62                     l7918:
  6786                           
  6787                           ; BSR set to: 0
  6788  003A62  0E05               	movlw	5
  6789  003A64  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  6790  003A66  D001               	goto	l147
  6791  003A68  D00D               	goto	u9790
  6792  003A6A                     l147:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;ENC424J600.c: 319: ENC424J600_readSPI(&temp[i]);
  6796                           
  6797                           ; BSR set to: 0
  6798  003A6A  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  6799  003A6C  0D01               	mullw	1
  6800  003A6E  0EAF               	movlw	low ethernetController_getRSV@temp
  6801  003A70  24F3               	addwf	prodl,w,c
  6802  003A72  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6803  003A74  0E02               	movlw	high ethernetController_getRSV@temp
  6804  003A76  20F4               	addwfc	prodh,w,c
  6805  003A78  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6806  003A7A  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
  6807  003A7E  0100               	movlb	0	; () banked
  6808  003A80  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  6809  003A82  D7EF               	goto	l7918
  6810  003A84                     u9790:
  6811                           
  6812                           ; BSR set to: 0
  6813                           ;ENC424J600.c: 320: }
  6814                           ;ENC424J600.c: 321: PORTBbits.RB4=1;
  6815  003A84  8881               	bsf	3969,4,c	;volatile
  6816                           
  6817                           ; BSR set to: 0
  6818                           ;ENC424J600.c: 322: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  6819  003A86  0EAF               	movlw	low ethernetController_getRSV@temp
  6820  003A88  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  6821  003A8A  0E02               	movlw	high ethernetController_getRSV@temp
  6822  003A8C  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  6823  003A8E  EC86  F008         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  6824  003A92  CFE9 FFD9          	movff	fsr0l,fsr2l
  6825  003A96  CFEA FFDA          	movff	fsr0h,fsr2h
  6826  003A9A  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  6827  003A9E  0E04               	movlw	4
  6828  003AA0                     u9801:
  6829  003AA0  CFDB FFEB          	movff	plusw2,plusw0
  6830  003AA4  06E8               	decf	wreg,f,c
  6831  003AA6  E2FC               	bc	u9801
  6832  003AA8  0012               	return	
  6833  003AAA                     __end_of_ethernetController_getRSV:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           intcon	equ	0xFF2
  6842                           intcon3	equ	0xFF0
  6843                           postinc0	equ	0xFEE
  6844                           plusw0	equ	0xFEB
  6845                           fsr0h	equ	0xFEA
  6846                           fsr0l	equ	0xFE9
  6847                           wreg	equ	0xFE8
  6848                           indf1	equ	0xFE7
  6849                           postinc1	equ	0xFE6
  6850                           postdec1	equ	0xFE5
  6851                           plusw1	equ	0xFE3
  6852                           fsr1h	equ	0xFE2
  6853                           fsr1l	equ	0xFE1
  6854                           indf2	equ	0xFDF
  6855                           postinc2	equ	0xFDE
  6856                           postdec2	equ	0xFDD
  6857                           plusw2	equ	0xFDB
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  6863 ;; Defined at:
  6864 ;;		line 741 in file "src/enc424j600/ENC424J600.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  6867 ;;		 -> ethernetController_getRSV@temp(6), 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  6870 ;; Return value:  Size  Location     Type
  6871 ;;                  5    0[BANK0 ] struct RSV
  6872 ;; Registers used:
  6873 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  6874 ;; Tracked objects:
  6875 ;;		On entry : 0/0
  6876 ;;		On exit  : 0/0
  6877 ;;		Unchanged: 0/0
  6878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6879 ;;      Params:         0       5       0       0       0       0       0       0       0
  6880 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6881 ;;      Temps:          0       7       0       0       0       0       0       0       0
  6882 ;;      Totals:         0      17       0       0       0       0       0       0       0
  6883 ;;Total ram usage:       17 bytes
  6884 ;; Hardware stack levels used:    1
  6885 ;; Hardware stack levels required when called:    4
  6886 ;; This function calls:
  6887 ;;		Nothing
  6888 ;; This function is called by:
  6889 ;;		_ethernetController_getRSV
  6890 ;; This function uses a non-reentrant model
  6891 ;;
  6892                           
  6893                           	psect	text16
  6894  00110C                     __ptext16:
  6895                           	opt stack 0
  6896  00110C                     _ENC424J600_updateReceiveStatusVector:
  6897                           	opt stack 23
  6898                           
  6899                           ;ENC424J600.c: 742: RSV_t receiveStatusVector;
  6900                           ;ENC424J600.c: 745: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  6901                           
  6902                           ;incstack = 0
  6903  00110C  0E00               	movlw	0
  6904  00110E  0100               	movlb	0	; () banked
  6905  001110  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6906  001112  0EFF               	movlw	255
  6907  001114  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  6908  001116  EE20 F001          	lfsr	2,1
  6909  00111A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  6910  00111C  26D9               	addwf	fsr2l,f,c
  6911  00111E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  6912  001120  22DA               	addwfc	fsr2h,f,c
  6913  001122  50DF               	movf	indf2,w,c
  6914  001124  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  6915  001126  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  6916  001128  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  6917  00112A  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  6918  00112C  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6919  00112E  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  6920  001130  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  6921  001132  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  6922  001134  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  6923  001138  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  6924  00113C  50DF               	movf	indf2,w,c
  6925  00113E  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  6926  001140  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  6927  001142  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  6928  001144  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  6929  001146  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  6930  001148  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  6931  00114A  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  6932  00114C  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  6933                           
  6934                           ;ENC424J600.c: 747: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  6935  00114E  EE20 F002          	lfsr	2,2
  6936  001152  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  6937  001154  26D9               	addwf	fsr2l,f,c
  6938  001156  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  6939  001158  22DA               	addwfc	fsr2h,f,c
  6940  00115A  A0DF               	btfss	indf2,0,c
  6941  00115C  D003               	goto	u9080
  6942  00115E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6943  001160  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6944  001162  D002               	goto	u9098
  6945  001164                     u9080:
  6946  001164  0100               	movlb	0	; () banked
  6947  001166  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6948  001168                     u9098:
  6949  001168  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  6950  00116A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6951  00116C  0BFE               	andlw	-2
  6952  00116E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6953  001170  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  6954                           
  6955                           ;ENC424J600.c: 748: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  6956  001172  EE20 F002          	lfsr	2,2
  6957  001176  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  6958  001178  26D9               	addwf	fsr2l,f,c
  6959  00117A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  6960  00117C  22DA               	addwfc	fsr2h,f,c
  6961  00117E  A4DF               	btfss	indf2,2,c
  6962  001180  D003               	goto	u9100
  6963  001182  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6964  001184  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6965  001186  D002               	goto	u9118
  6966  001188                     u9100:
  6967  001188  0100               	movlb	0	; () banked
  6968  00118A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6969  00118C                     u9118:
  6970  00118C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6971  00118E  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  6972  001190  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6973  001192  0BFD               	andlw	-3
  6974  001194  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6975  001196  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  6976                           
  6977                           ;ENC424J600.c: 749: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  6978  001198  EE20 F002          	lfsr	2,2
  6979  00119C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  6980  00119E  26D9               	addwf	fsr2l,f,c
  6981  0011A0  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  6982  0011A2  22DA               	addwfc	fsr2h,f,c
  6983  0011A4  A8DF               	btfss	indf2,4,c
  6984  0011A6  D003               	goto	u9120
  6985  0011A8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6986  0011AA  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6987  0011AC  D002               	goto	u9138
  6988  0011AE                     u9120:
  6989  0011AE  0100               	movlb	0	; () banked
  6990  0011B0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  6991  0011B2                     u9138:
  6992  0011B2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6993  0011B4  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  6994  0011B6  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  6995  0011B8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6996  0011BA  0BFB               	andlw	-5
  6997  0011BC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  6998  0011BE  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  6999                           
  7000                           ;ENC424J600.c: 750: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  7001  0011C0  EE20 F002          	lfsr	2,2
  7002  0011C4  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7003  0011C6  26D9               	addwf	fsr2l,f,c
  7004  0011C8  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7005  0011CA  22DA               	addwfc	fsr2h,f,c
  7006  0011CC  AADF               	btfss	indf2,5,c
  7007  0011CE  D003               	goto	u9140
  7008  0011D0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7009  0011D2  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7010  0011D4  D002               	goto	u9158
  7011  0011D6                     u9140:
  7012  0011D6  0100               	movlb	0	; () banked
  7013  0011D8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7014  0011DA                     u9158:
  7015  0011DA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7016  0011DC  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7017  0011DE  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7018  0011E0  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7019  0011E2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7020  0011E4  0BF7               	andlw	-9
  7021  0011E6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7022  0011E8  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7023                           
  7024                           ;ENC424J600.c: 751: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  7025  0011EA  EE20 F002          	lfsr	2,2
  7026  0011EE  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7027  0011F0  26D9               	addwf	fsr2l,f,c
  7028  0011F2  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7029  0011F4  22DA               	addwfc	fsr2h,f,c
  7030  0011F6  ACDF               	btfss	indf2,6,c
  7031  0011F8  D003               	goto	u9160
  7032  0011FA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7033  0011FC  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7034  0011FE  D002               	goto	u9178
  7035  001200                     u9160:
  7036  001200  0100               	movlb	0	; () banked
  7037  001202  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7038  001204                     u9178:
  7039  001204  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7040  001206  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7041  001208  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7042  00120A  0BEF               	andlw	-17
  7043  00120C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7044  00120E  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7045                           
  7046                           ;ENC424J600.c: 752: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7047  001210  EE20 F002          	lfsr	2,2
  7048  001214  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7049  001216  26D9               	addwf	fsr2l,f,c
  7050  001218  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7051  00121A  22DA               	addwfc	fsr2h,f,c
  7052  00121C  AEDF               	btfss	indf2,7,c
  7053  00121E  D003               	goto	u9180
  7054  001220  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7055  001222  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7056  001224  D002               	goto	u9198
  7057  001226                     u9180:
  7058  001226  0100               	movlb	0	; () banked
  7059  001228  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7060  00122A                     u9198:
  7061  00122A  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7062  00122C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7063  00122E  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7064  001230  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7065  001232  0BDF               	andlw	-33
  7066  001234  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7067  001236  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7068                           
  7069                           ;ENC424J600.c: 754: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  7070  001238  EE20 F003          	lfsr	2,3
  7071  00123C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7072  00123E  26D9               	addwf	fsr2l,f,c
  7073  001240  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7074  001242  22DA               	addwfc	fsr2h,f,c
  7075  001244  A0DF               	btfss	indf2,0,c
  7076  001246  D003               	goto	u9200
  7077  001248  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7078  00124A  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7079  00124C  D002               	goto	u9218
  7080  00124E                     u9200:
  7081  00124E  0100               	movlb	0	; () banked
  7082  001250  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7083  001252                     u9218:
  7084  001252  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7085  001254  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7086  001256  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7087  001258  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7088  00125A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7089  00125C  0BBF               	andlw	-65
  7090  00125E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7091  001260  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7092                           
  7093                           ;ENC424J600.c: 755: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  7094  001262  EE20 F003          	lfsr	2,3
  7095  001266  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7096  001268  26D9               	addwf	fsr2l,f,c
  7097  00126A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7098  00126C  22DA               	addwfc	fsr2h,f,c
  7099  00126E  A2DF               	btfss	indf2,1,c
  7100  001270  D003               	goto	u9220
  7101  001272  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7102  001274  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7103  001276  D002               	goto	u9238
  7104  001278                     u9220:
  7105  001278  0100               	movlb	0	; () banked
  7106  00127A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7107  00127C                     u9238:
  7108  00127C  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7109  00127E  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7110  001280  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7111  001282  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7112  001284  0B7F               	andlw	-129
  7113  001286  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7114  001288  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7115                           
  7116                           ;ENC424J600.c: 756: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7117  00128A  EE20 F003          	lfsr	2,3
  7118  00128E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7119  001290  26D9               	addwf	fsr2l,f,c
  7120  001292  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7121  001294  22DA               	addwfc	fsr2h,f,c
  7122  001296  A6DF               	btfss	indf2,3,c
  7123  001298  D003               	goto	u9240
  7124  00129A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7125  00129C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7126  00129E  D002               	goto	u9258
  7127  0012A0                     u9240:
  7128  0012A0  0100               	movlb	0	; () banked
  7129  0012A2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7130  0012A4                     u9258:
  7131  0012A4  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7132  0012A6  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7133  0012A8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7134  0012AA  0BFD               	andlw	-3
  7135  0012AC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7136  0012AE  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7137                           
  7138                           ;ENC424J600.c: 757: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  7139  0012B0  EE20 F003          	lfsr	2,3
  7140  0012B4  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7141  0012B6  26D9               	addwf	fsr2l,f,c
  7142  0012B8  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7143  0012BA  22DA               	addwfc	fsr2h,f,c
  7144  0012BC  A8DF               	btfss	indf2,4,c
  7145  0012BE  D003               	goto	u9260
  7146  0012C0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7147  0012C2  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7148  0012C4  D002               	goto	u9278
  7149  0012C6                     u9260:
  7150  0012C6  0100               	movlb	0	; () banked
  7151  0012C8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7152  0012CA                     u9278:
  7153  0012CA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7154  0012CC  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7155  0012CE  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7156  0012D0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7157  0012D2  0BFB               	andlw	-5
  7158  0012D4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7159  0012D6  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7160                           
  7161                           ;ENC424J600.c: 758: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  7162  0012D8  EE20 F003          	lfsr	2,3
  7163  0012DC  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7164  0012DE  26D9               	addwf	fsr2l,f,c
  7165  0012E0  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7166  0012E2  22DA               	addwfc	fsr2h,f,c
  7167  0012E4  AADF               	btfss	indf2,5,c
  7168  0012E6  D003               	goto	u9280
  7169  0012E8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7170  0012EA  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7171  0012EC  D002               	goto	u9298
  7172  0012EE                     u9280:
  7173  0012EE  0100               	movlb	0	; () banked
  7174  0012F0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7175  0012F2                     u9298:
  7176  0012F2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7177  0012F4  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7178  0012F6  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7179  0012F8  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7180  0012FA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7181  0012FC  0BF7               	andlw	-9
  7182  0012FE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7183  001300  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7184                           
  7185                           ;ENC424J600.c: 759: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  7186  001302  EE20 F003          	lfsr	2,3
  7187  001306  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7188  001308  26D9               	addwf	fsr2l,f,c
  7189  00130A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7190  00130C  22DA               	addwfc	fsr2h,f,c
  7191  00130E  ACDF               	btfss	indf2,6,c
  7192  001310  D003               	goto	u9300
  7193  001312  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7194  001314  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7195  001316  D002               	goto	u9318
  7196  001318                     u9300:
  7197  001318  0100               	movlb	0	; () banked
  7198  00131A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7199  00131C                     u9318:
  7200  00131C  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7201  00131E  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7202  001320  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7203  001322  0BEF               	andlw	-17
  7204  001324  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7205  001326  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7206                           
  7207                           ;ENC424J600.c: 760: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7208  001328  EE20 F003          	lfsr	2,3
  7209  00132C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7210  00132E  26D9               	addwf	fsr2l,f,c
  7211  001330  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7212  001332  22DA               	addwfc	fsr2h,f,c
  7213  001334  AEDF               	btfss	indf2,7,c
  7214  001336  D003               	goto	u9320
  7215  001338  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7216  00133A  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7217  00133C  D002               	goto	u9338
  7218  00133E                     u9320:
  7219  00133E  0100               	movlb	0	; () banked
  7220  001340  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7221  001342                     u9338:
  7222  001342  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7223  001344  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7224  001346  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7225  001348  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7226  00134A  0BDF               	andlw	-33
  7227  00134C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7228  00134E  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7229                           
  7230                           ;ENC424J600.c: 762: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  7231  001350  EE20 F004          	lfsr	2,4
  7232  001354  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7233  001356  26D9               	addwf	fsr2l,f,c
  7234  001358  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7235  00135A  22DA               	addwfc	fsr2h,f,c
  7236  00135C  A0DF               	btfss	indf2,0,c
  7237  00135E  D003               	goto	u9340
  7238  001360  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7239  001362  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7240  001364  D002               	goto	u9358
  7241  001366                     u9340:
  7242  001366  0100               	movlb	0	; () banked
  7243  001368  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7244  00136A                     u9358:
  7245  00136A  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7246  00136C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7247  00136E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7248  001370  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7249  001372  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7250  001374  0BBF               	andlw	-65
  7251  001376  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7252  001378  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7253                           
  7254                           ;ENC424J600.c: 763: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  7255  00137A  EE20 F004          	lfsr	2,4
  7256  00137E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7257  001380  26D9               	addwf	fsr2l,f,c
  7258  001382  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7259  001384  22DA               	addwfc	fsr2h,f,c
  7260  001386  A2DF               	btfss	indf2,1,c
  7261  001388  D003               	goto	u9360
  7262  00138A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7263  00138C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7264  00138E  D002               	goto	u9378
  7265  001390                     u9360:
  7266  001390  0100               	movlb	0	; () banked
  7267  001392  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7268  001394                     u9378:
  7269  001394  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7270  001396  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7271  001398  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7272  00139A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7273  00139C  0B7F               	andlw	-129
  7274  00139E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7275  0013A0  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7276                           
  7277                           ;ENC424J600.c: 764: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  7278  0013A2  EE20 F004          	lfsr	2,4
  7279  0013A6  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7280  0013A8  26D9               	addwf	fsr2l,f,c
  7281  0013AA  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7282  0013AC  22DA               	addwfc	fsr2h,f,c
  7283  0013AE  A4DF               	btfss	indf2,2,c
  7284  0013B0  D003               	goto	u9380
  7285  0013B2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7286  0013B4  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7287  0013B6  D002               	goto	u9398
  7288  0013B8                     u9380:
  7289  0013B8  0100               	movlb	0	; () banked
  7290  0013BA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7291  0013BC                     u9398:
  7292  0013BC  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7293  0013BE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7294  0013C0  0BFE               	andlw	-2
  7295  0013C2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7296  0013C4  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7297                           
  7298                           ;ENC424J600.c: 765: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7299  0013C6  EE20 F004          	lfsr	2,4
  7300  0013CA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7301  0013CC  26D9               	addwf	fsr2l,f,c
  7302  0013CE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7303  0013D0  22DA               	addwfc	fsr2h,f,c
  7304  0013D2  A6DF               	btfss	indf2,3,c
  7305  0013D4  D003               	goto	u9400
  7306  0013D6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7307  0013D8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7308  0013DA  D002               	goto	u9418
  7309  0013DC                     u9400:
  7310  0013DC  0100               	movlb	0	; () banked
  7311  0013DE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7312  0013E0                     u9418:
  7313  0013E0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7314  0013E2  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7315  0013E4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7316  0013E6  0BFD               	andlw	-3
  7317  0013E8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7318  0013EA  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7319                           
  7320                           ;ENC424J600.c: 766: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  7321  0013EC  EE20 F004          	lfsr	2,4
  7322  0013F0  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7323  0013F2  26D9               	addwf	fsr2l,f,c
  7324  0013F4  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7325  0013F6  22DA               	addwfc	fsr2h,f,c
  7326  0013F8  A8DF               	btfss	indf2,4,c
  7327  0013FA  D003               	goto	u9420
  7328  0013FC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7329  0013FE  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7330  001400  D002               	goto	u9438
  7331  001402                     u9420:
  7332  001402  0100               	movlb	0	; () banked
  7333  001404  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7334  001406                     u9438:
  7335  001406  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7336  001408  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7337  00140A  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7338  00140C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7339  00140E  0BFB               	andlw	-5
  7340  001410  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7341  001412  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;ENC424J600.c: 768: return receiveStatusVector;
  7345  001414  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  7346  001418  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  7347  00141C  0E04               	movlw	4
  7348  00141E                     u9441:
  7349  00141E  CFDB FFEB          	movff	plusw2,plusw0
  7350  001422  06E8               	decf	wreg,f,c
  7351  001424  E2FC               	bc	u9441
  7352  001426  0012               	return	
  7353  001428                     __end_of_ENC424J600_updateReceiveStatusVector:
  7354                           	opt stack 0
  7355                           tblptru	equ	0xFF8
  7356                           tblptrh	equ	0xFF7
  7357                           tblptrl	equ	0xFF6
  7358                           tablat	equ	0xFF5
  7359                           prodh	equ	0xFF4
  7360                           prodl	equ	0xFF3
  7361                           intcon	equ	0xFF2
  7362                           intcon3	equ	0xFF0
  7363                           postinc0	equ	0xFEE
  7364                           plusw0	equ	0xFEB
  7365                           fsr0h	equ	0xFEA
  7366                           fsr0l	equ	0xFE9
  7367                           wreg	equ	0xFE8
  7368                           indf1	equ	0xFE7
  7369                           postinc1	equ	0xFE6
  7370                           postdec1	equ	0xFE5
  7371                           plusw1	equ	0xFE3
  7372                           fsr1h	equ	0xFE2
  7373                           fsr1l	equ	0xFE1
  7374                           indf2	equ	0xFDF
  7375                           postinc2	equ	0xFDE
  7376                           postdec2	equ	0xFDD
  7377                           plusw2	equ	0xFDB
  7378                           fsr2h	equ	0xFDA
  7379                           fsr2l	equ	0xFD9
  7380                           status	equ	0xFD8
  7381                           
  7382 ;; *************** function _ethernetController_getNextPacketPointer *****************
  7383 ;; Defined at:
  7384 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;                  2    2[BANK0 ] unsigned int 
  7391 ;; Registers used:
  7392 ;;		cstack
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7398 ;;      Params:         0       2       0       0       0       0       0       0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7401 ;;      Totals:         0       2       0       0       0       0       0       0       0
  7402 ;;Total ram usage:        2 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    5
  7405 ;; This function calls:
  7406 ;;		_ENC424J600_getNextPacketPointer
  7407 ;; This function is called by:
  7408 ;;		_ethernet_rxGetNewFrame
  7409 ;; This function uses a non-reentrant model
  7410 ;;
  7411                           
  7412                           	psect	text17
  7413  00463E                     __ptext17:
  7414                           	opt stack 0
  7415  00463E                     _ethernetController_getNextPacketPointer:
  7416                           	opt stack 23
  7417                           
  7418                           ;ENC424J600.c: 519: return ENC424J600_getNextPacketPointer();
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;incstack = 0
  7422  00463E  EC2D  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
  7423  004642  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
  7424  004646  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
  7425  00464A  0012               	return	
  7426  00464C                     __end_of_ethernetController_getNextPacketPointer:
  7427                           	opt stack 0
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           intcon	equ	0xFF2
  7435                           intcon3	equ	0xFF0
  7436                           postinc0	equ	0xFEE
  7437                           plusw0	equ	0xFEB
  7438                           fsr0h	equ	0xFEA
  7439                           fsr0l	equ	0xFE9
  7440                           wreg	equ	0xFE8
  7441                           indf1	equ	0xFE7
  7442                           postinc1	equ	0xFE6
  7443                           postdec1	equ	0xFE5
  7444                           plusw1	equ	0xFE3
  7445                           fsr1h	equ	0xFE2
  7446                           fsr1l	equ	0xFE1
  7447                           indf2	equ	0xFDF
  7448                           postinc2	equ	0xFDE
  7449                           postdec2	equ	0xFDD
  7450                           plusw2	equ	0xFDB
  7451                           fsr2h	equ	0xFDA
  7452                           fsr2l	equ	0xFD9
  7453                           status	equ	0xFD8
  7454                           
  7455 ;; *************** function _ethernetController_getEtherTypeField *****************
  7456 ;; Defined at:
  7457 ;;		line 295 in file "src/enc424j600/ENC424J600.c"
  7458 ;; Parameters:    Size  Location     Type
  7459 ;;		None
  7460 ;; Auto vars:     Size  Location     Type
  7461 ;;  nextPktPoint    4   21[BANK0 ] unsigned long 
  7462 ;;  ethertype       2   25[BANK0 ] enum E5497
  7463 ;;  highByte        1   29[BANK0 ] unsigned char 
  7464 ;;  lowByte         1   28[BANK0 ] unsigned char 
  7465 ;;  opcode          1   27[BANK0 ] unsigned char 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  2   15[BANK0 ] enum E5497
  7468 ;; Registers used:
  7469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : 0/0
  7472 ;;		On exit  : 0/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7475 ;;      Params:         0       2       0       0       0       0       0       0       0
  7476 ;;      Locals:         0       9       0       0       0       0       0       0       0
  7477 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7478 ;;      Totals:         0      15       0       0       0       0       0       0       0
  7479 ;;Total ram usage:       15 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    7
  7482 ;; This function calls:
  7483 ;;		_ENC424J600_getNextPacketPointer
  7484 ;;		_ENC424J600_readSPI
  7485 ;;		_ENC424J600_setERXDATAReadPointer
  7486 ;;		_ENC424J600_writeSPI
  7487 ;; This function is called by:
  7488 ;;		_ethernet_rxGetNewFrame
  7489 ;; This function uses a non-reentrant model
  7490 ;;
  7491                           
  7492                           	psect	text18
  7493  0037C0                     __ptext18:
  7494                           	opt stack 0
  7495  0037C0                     _ethernetController_getEtherTypeField:
  7496                           	opt stack 21
  7497                           
  7498                           ;ENC424J600.c: 296: etherType_t ethertype = 0x0000;
  7499                           
  7500                           ;incstack = 0
  7501  0037C0  0E00               	movlw	0
  7502  0037C2  0100               	movlb	0	; () banked
  7503  0037C4  6F7A               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7504  0037C6  0E00               	movlw	0
  7505  0037C8  6F79               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;ENC424J600.c: 297: uint32_t nextPktPointer = ENC424J600_getNextPacketPointer();
  7509  0037CA  EC2D  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
  7510  0037CE  0100               	movlb	0	; () banked
  7511  0037D0  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_getEtherTypeField@nextPktPoi
      +                          nter
  7512  0037D4  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_getEtherTypeField@nextPktP
      +                          ointer+1
  7513  0037D8  6B77               	clrf	(ethernetController_getEtherTypeField@nextPktPointer+2)& (0+255),b
  7514  0037DA  6B78               	clrf	(ethernetController_getEtherTypeField@nextPktPointer+3)& (0+255),b
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;ENC424J600.c: 298: ENC424J600_setERXDATAReadPointer(nextPktPointer + 20);
  7518  0037DC  0E14               	movlw	20
  7519  0037DE  2575               	addwf	ethernetController_getEtherTypeField@nextPktPointer& (0+255),w,b
  7520  0037E0  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  7521  0037E2  0E00               	movlw	0
  7522  0037E4  2176               	addwfc	(ethernetController_getEtherTypeField@nextPktPointer+1)& (0+255),w,b
  7523  0037E6  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  7524  0037E8  ECBB  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  7525                           
  7526                           ;ENC424J600.c: 299: uint8_t opcode = 0x2C;
  7527  0037EC  0E2C               	movlw	44
  7528  0037EE  0100               	movlb	0	; () banked
  7529  0037F0  6F7B               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;ENC424J600.c: 300: PORTBbits.RB4=0;
  7533  0037F2  9881               	bcf	3969,4,c	;volatile
  7534                           
  7535                           ; BSR set to: 0
  7536                           ;ENC424J600.c: 301: ENC424J600_writeSPI(&opcode);
  7537  0037F4  0E7B               	movlw	low ethernetController_getEtherTypeField@opcode
  7538  0037F6  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  7539  0037F8  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  7540  0037FA  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  7541  0037FC  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
  7542                           
  7543                           ;ENC424J600.c: 303: uint8_t lowByte;
  7544                           ;ENC424J600.c: 304: uint8_t highByte;
  7545                           ;ENC424J600.c: 305: ENC424J600_readSPI(&highByte);
  7546  003800  0E7D               	movlw	low ethernetController_getEtherTypeField@highByte
  7547  003802  0100               	movlb	0	; () banked
  7548  003804  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7549  003806  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  7550  003808  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7551  00380A  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
  7552                           
  7553                           ;ENC424J600.c: 306: ENC424J600_readSPI(&lowByte);
  7554  00380E  0E7C               	movlw	low ethernetController_getEtherTypeField@lowByte
  7555  003810  0100               	movlb	0	; () banked
  7556  003812  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7557  003814  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  7558  003816  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7559  003818  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
  7560                           
  7561                           ;ENC424J600.c: 307: ethertype = (uint16_t) (lowByte | (highByte << 8));
  7562  00381C  0100               	movlb	0	; () banked
  7563  00381E  517D               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  7564  003820  6F72               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  7565  003822  6B71               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  7566  003824  517C               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  7567  003826  6F73               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  7568  003828  6B74               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  7569  00382A  5171               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  7570  00382C  1173               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  7571  00382E  6F79               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7572  003830  5172               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  7573  003832  1174               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  7574  003834  6F7A               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7575                           
  7576                           ; BSR set to: 0
  7577                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  7578  003836  8881               	bsf	3969,4,c	;volatile
  7579                           
  7580                           ; BSR set to: 0
  7581                           ;ENC424J600.c: 309: return ethertype;
  7582  003838  C079  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  7583  00383C  C07A  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  7584  003840  0012               	return	
  7585  003842                     __end_of_ethernetController_getEtherTypeField:
  7586                           	opt stack 0
  7587                           tblptru	equ	0xFF8
  7588                           tblptrh	equ	0xFF7
  7589                           tblptrl	equ	0xFF6
  7590                           tablat	equ	0xFF5
  7591                           prodh	equ	0xFF4
  7592                           prodl	equ	0xFF3
  7593                           intcon	equ	0xFF2
  7594                           intcon3	equ	0xFF0
  7595                           postinc0	equ	0xFEE
  7596                           plusw0	equ	0xFEB
  7597                           fsr0h	equ	0xFEA
  7598                           fsr0l	equ	0xFE9
  7599                           wreg	equ	0xFE8
  7600                           indf1	equ	0xFE7
  7601                           postinc1	equ	0xFE6
  7602                           postdec1	equ	0xFE5
  7603                           plusw1	equ	0xFE3
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           plusw2	equ	0xFDB
  7610                           fsr2h	equ	0xFDA
  7611                           fsr2l	equ	0xFD9
  7612                           status	equ	0xFD8
  7613                           
  7614 ;; *************** function _etherTypeToString *****************
  7615 ;; Defined at:
  7616 ;;		line 155 in file "src/system/uart.c"
  7617 ;; Parameters:    Size  Location     Type
  7618 ;;  ethertype       2    0[BANK0 ] enum E5466
  7619 ;; Auto vars:     Size  Location     Type
  7620 ;;		None
  7621 ;; Return value:  Size  Location     Type
  7622 ;;                  2    0[BANK0 ] PTR unsigned char 
  7623 ;; Registers used:
  7624 ;;		wreg, status,2, status,0
  7625 ;; Tracked objects:
  7626 ;;		On entry : 0/0
  7627 ;;		On exit  : 0/0
  7628 ;;		Unchanged: 0/0
  7629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7630 ;;      Params:         0       2       0       0       0       0       0       0       0
  7631 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7632 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7633 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7634 ;;Total ram usage:        4 bytes
  7635 ;; Hardware stack levels used:    1
  7636 ;; Hardware stack levels required when called:    4
  7637 ;; This function calls:
  7638 ;;		Nothing
  7639 ;; This function is called by:
  7640 ;;		_ethernet_rxGetNewFrame
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text19
  7645  00402E                     __ptext19:
  7646                           	opt stack 0
  7647  00402E                     _etherTypeToString:
  7648                           	opt stack 24
  7649                           
  7650                           ;uart.c: 156: switch (ethertype) {
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;incstack = 0
  7654  00402E  D010               	goto	l764
  7655  004030                     
  7656                           ;uart.c: 158: return "IPv4";
  7657  004030  0EDF               	movlw	low STR_50
  7658  004032  0100               	movlb	0	; () banked
  7659  004034  6F60               	movwf	?_etherTypeToString& (0+255),b
  7660  004036  0E7F               	movlw	high STR_50
  7661  004038  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7662                           
  7663                           ; BSR set to: 0
  7664  00403A  0012               	return	
  7665  00403C                     
  7666                           ; BSR set to: 0
  7667                           ;uart.c: 160: return "ARP";
  7668                           
  7669                           ; BSR set to: 0
  7670  00403C  0EEE               	movlw	low STR_51
  7671  00403E  6F60               	movwf	?_etherTypeToString& (0+255),b
  7672  004040  0E7F               	movlw	high STR_51
  7673  004042  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7674                           
  7675                           ; BSR set to: 0
  7676  004044  0012               	return	
  7677  004046                     
  7678                           ; BSR set to: 0
  7679                           ;uart.c: 162: return "Unknown EtherType";
  7680                           
  7681                           ; BSR set to: 0
  7682  004046  0EC5               	movlw	low STR_52
  7683  004048  6F60               	movwf	?_etherTypeToString& (0+255),b
  7684  00404A  0E7E               	movlw	high STR_52
  7685  00404C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;uart.c: 163: }
  7689                           
  7690                           ; BSR set to: 0
  7691  00404E  0012               	return	
  7692  004050                     l764:
  7693                           
  7694                           ; BSR set to: 0
  7695  004050  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  7696  004054  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  7697                           
  7698                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7699                           ; Switch size 1, requested type "space"
  7700                           ; Number of cases is 1, Range of values is 8 to 8
  7701                           ; switch strategies available:
  7702                           ; Name         Instructions Cycles
  7703                           ; simple_byte            4     3 (average)
  7704                           ;	Chosen strategy is simple_byte
  7705  004058  0100               	movlb	0	; () banked
  7706  00405A  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  7707  00405C  0A08               	xorlw	8	; case 8
  7708  00405E  A4D8               	btfss	status,2,c
  7709  004060  D7F2               	goto	l768
  7710                           
  7711                           ; BSR set to: 0
  7712                           ; Switch size 1, requested type "space"
  7713                           ; Number of cases is 2, Range of values is 0 to 6
  7714                           ; switch strategies available:
  7715                           ; Name         Instructions Cycles
  7716                           ; simple_byte            7     4 (average)
  7717                           ;	Chosen strategy is simple_byte
  7718  004062  5162               	movf	??_etherTypeToString& (0+255),w,b
  7719  004064  0A00               	xorlw	0	; case 0
  7720  004066  B4D8               	btfsc	status,2,c
  7721  004068  D7E3               	goto	l765
  7722  00406A  0A06               	xorlw	6	; case 6
  7723  00406C  B4D8               	btfsc	status,2,c
  7724  00406E  D7E6               	goto	l767
  7725  004070  D7EA               	goto	l768
  7726  004072                     __end_of_etherTypeToString:
  7727                           	opt stack 0
  7728                           tblptru	equ	0xFF8
  7729                           tblptrh	equ	0xFF7
  7730                           tblptrl	equ	0xFF6
  7731                           tablat	equ	0xFF5
  7732                           prodh	equ	0xFF4
  7733                           prodl	equ	0xFF3
  7734                           intcon	equ	0xFF2
  7735                           intcon3	equ	0xFF0
  7736                           postinc0	equ	0xFEE
  7737                           plusw0	equ	0xFEB
  7738                           fsr0h	equ	0xFEA
  7739                           fsr0l	equ	0xFE9
  7740                           wreg	equ	0xFE8
  7741                           indf1	equ	0xFE7
  7742                           postinc1	equ	0xFE6
  7743                           postdec1	equ	0xFE5
  7744                           plusw1	equ	0xFE3
  7745                           fsr1h	equ	0xFE2
  7746                           fsr1l	equ	0xFE1
  7747                           indf2	equ	0xFDF
  7748                           postinc2	equ	0xFDE
  7749                           postdec2	equ	0xFDD
  7750                           plusw2	equ	0xFDB
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function _UARTTransmitInt *****************
  7756 ;; Defined at:
  7757 ;;		line 60 in file "src/system/uart.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  val             4   58[BANK0 ] unsigned long 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;		None
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  1    wreg      void 
  7764 ;; Registers used:
  7765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7766 ;; Tracked objects:
  7767 ;;		On entry : 0/0
  7768 ;;		On exit  : 0/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7771 ;;      Params:         0       4       0       0       0       0       0       0       0
  7772 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7773 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7774 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7775 ;;Total ram usage:        4 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:    6
  7778 ;; This function calls:
  7779 ;;		_UARTTransmitText
  7780 ;;		_intToString
  7781 ;; This function is called by:
  7782 ;;		_ethernet_rxGetNewFrame
  7783 ;;		_main
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text20
  7788  004528                     __ptext20:
  7789                           	opt stack 0
  7790  004528                     _UARTTransmitInt:
  7791                           	opt stack 22
  7792                           
  7793                           ;uart.c: 61: UARTTransmitText(intToString(val));
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;incstack = 0
  7797  004528  C09A  F073         	movff	UARTTransmitInt@val,intToString@val
  7798  00452C  C09B  F074         	movff	UARTTransmitInt@val+1,intToString@val+1
  7799  004530  C09C  F075         	movff	UARTTransmitInt@val+2,intToString@val+2
  7800  004534  C09D  F076         	movff	UARTTransmitInt@val+3,intToString@val+3
  7801  004538  ECA1  F00B         	call	_intToString	;wreg free
  7802  00453C  C073  F098         	movff	?_intToString,UARTTransmitText@str
  7803  004540  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7804  004544  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  7805  004548  0012               	return		;funcret
  7806  00454A                     __end_of_UARTTransmitInt:
  7807                           	opt stack 0
  7808                           tblptru	equ	0xFF8
  7809                           tblptrh	equ	0xFF7
  7810                           tblptrl	equ	0xFF6
  7811                           tablat	equ	0xFF5
  7812                           prodh	equ	0xFF4
  7813                           prodl	equ	0xFF3
  7814                           intcon	equ	0xFF2
  7815                           intcon3	equ	0xFF0
  7816                           postinc0	equ	0xFEE
  7817                           plusw0	equ	0xFEB
  7818                           fsr0h	equ	0xFEA
  7819                           fsr0l	equ	0xFE9
  7820                           wreg	equ	0xFE8
  7821                           indf1	equ	0xFE7
  7822                           postinc1	equ	0xFE6
  7823                           postdec1	equ	0xFE5
  7824                           plusw1	equ	0xFE3
  7825                           fsr1h	equ	0xFE2
  7826                           fsr1l	equ	0xFE1
  7827                           indf2	equ	0xFDF
  7828                           postinc2	equ	0xFDE
  7829                           postdec2	equ	0xFDD
  7830                           plusw2	equ	0xFDB
  7831                           fsr2h	equ	0xFDA
  7832                           fsr2l	equ	0xFD9
  7833                           status	equ	0xFD8
  7834                           
  7835 ;; *************** function _intToString *****************
  7836 ;; Defined at:
  7837 ;;		line 92 in file "src/system/uart.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  val             4   19[BANK0 ] unsigned long 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  pointer         1   38[BANK0 ] unsigned char 
  7842 ;;  tenthousands    1   37[BANK0 ] unsigned char 
  7843 ;;  thousands       1   36[BANK0 ] unsigned char 
  7844 ;;  hundreds        1   35[BANK0 ] unsigned char 
  7845 ;;  ones            1   34[BANK0 ] unsigned char 
  7846 ;;  tens            1   33[BANK0 ] unsigned char 
  7847 ;; Return value:  Size  Location     Type
  7848 ;;                  2   19[BANK0 ] PTR unsigned char 
  7849 ;; Registers used:
  7850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7851 ;; Tracked objects:
  7852 ;;		On entry : 0/0
  7853 ;;		On exit  : 0/0
  7854 ;;		Unchanged: 0/0
  7855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7856 ;;      Params:         0       4       0       0       0       0       0       0       0
  7857 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7858 ;;      Temps:          0      10       0       0       0       0       0       0       0
  7859 ;;      Totals:         0      20       0       0       0       0       0       0       0
  7860 ;;Total ram usage:       20 bytes
  7861 ;; Hardware stack levels used:    1
  7862 ;; Hardware stack levels required when called:    5
  7863 ;; This function calls:
  7864 ;;		___lldiv
  7865 ;;		___llmod
  7866 ;;		___wmul
  7867 ;; This function is called by:
  7868 ;;		_ethernet_rxGetNewFrame
  7869 ;;		_printErrorMessage
  7870 ;;		_UARTTransmitInt
  7871 ;;		_arpEntryToString
  7872 ;; This function uses a non-reentrant model
  7873 ;;
  7874                           
  7875                           	psect	text21
  7876  001742                     __ptext21:
  7877                           	opt stack 0
  7878  001742                     _intToString:
  7879                           	opt stack 24
  7880                           
  7881                           ;uart.c: 93: char static number [10];
  7882                           ;uart.c: 94: uint8_t pointer = 0;
  7883                           
  7884                           ;incstack = 0
  7885  001742  0E00               	movlw	0
  7886  001744  0100               	movlb	0	; () banked
  7887  001746  6F86               	movwf	intToString@pointer& (0+255),b
  7888                           
  7889                           ; BSR set to: 0
  7890                           ;uart.c: 96: uint8_t tenthousands = val / 10000u;
  7891  001748  C073  F066         	movff	intToString@val,___lldiv@dividend
  7892  00174C  C074  F067         	movff	intToString@val+1,___lldiv@dividend+1
  7893  001750  C075  F068         	movff	intToString@val+2,___lldiv@dividend+2
  7894  001754  C076  F069         	movff	intToString@val+3,___lldiv@dividend+3
  7895  001758  0E10               	movlw	16
  7896  00175A  6F6A               	movwf	___lldiv@divisor& (0+255),b
  7897  00175C  0E27               	movlw	39
  7898  00175E  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  7899  001760  0E00               	movlw	0
  7900  001762  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  7901  001764  0E00               	movlw	0
  7902  001766  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  7903  001768  EC9E  F01B         	call	___lldiv	;wreg free
  7904  00176C  0100               	movlb	0	; () banked
  7905  00176E  5166               	movf	?___lldiv& (0+255),w,b
  7906  001770  6F85               	movwf	intToString@tenthousands& (0+255),b
  7907                           
  7908                           ; BSR set to: 0
  7909                           ;uart.c: 97: uint8_t thousands = (val - tenthousands * 10000u) / 1000u;
  7910  001772  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  7911  001776  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7912  001778  0E27               	movlw	39
  7913  00177A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7914  00177C  0E10               	movlw	16
  7915  00177E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7916  001780  ECFB  F021         	call	___wmul	;wreg free
  7917  001784  0100               	movlb	0	; () banked
  7918  001786  5160               	movf	?___wmul& (0+255),w,b
  7919  001788  6F77               	movwf	??_intToString& (0+255),b
  7920  00178A  5161               	movf	(?___wmul+1)& (0+255),w,b
  7921  00178C  6F78               	movwf	(??_intToString+1)& (0+255),b
  7922  00178E  6B79               	clrf	(??_intToString+2)& (0+255),b
  7923  001790  6B7A               	clrf	(??_intToString+3)& (0+255),b
  7924  001792  1F77               	comf	??_intToString& (0+255),f,b
  7925  001794  1F78               	comf	(??_intToString+1)& (0+255),f,b
  7926  001796  1F79               	comf	(??_intToString+2)& (0+255),f,b
  7927  001798  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  7928  00179A  2B77               	incf	??_intToString& (0+255),f,b
  7929  00179C  0E00               	movlw	0
  7930  00179E  2378               	addwfc	(??_intToString+1)& (0+255),f,b
  7931  0017A0  2379               	addwfc	(??_intToString+2)& (0+255),f,b
  7932  0017A2  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  7933  0017A4  5173               	movf	intToString@val& (0+255),w,b
  7934  0017A6  2577               	addwf	??_intToString& (0+255),w,b
  7935  0017A8  6F66               	movwf	___lldiv@dividend& (0+255),b
  7936  0017AA  5174               	movf	(intToString@val+1)& (0+255),w,b
  7937  0017AC  2178               	addwfc	(??_intToString+1)& (0+255),w,b
  7938  0017AE  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  7939  0017B0  5175               	movf	(intToString@val+2)& (0+255),w,b
  7940  0017B2  2179               	addwfc	(??_intToString+2)& (0+255),w,b
  7941  0017B4  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  7942  0017B6  5176               	movf	(intToString@val+3)& (0+255),w,b
  7943  0017B8  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  7944  0017BA  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  7945  0017BC  0EE8               	movlw	232
  7946  0017BE  6F6A               	movwf	___lldiv@divisor& (0+255),b
  7947  0017C0  0E03               	movlw	3
  7948  0017C2  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  7949  0017C4  0E00               	movlw	0
  7950  0017C6  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  7951  0017C8  0E00               	movlw	0
  7952  0017CA  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  7953  0017CC  EC9E  F01B         	call	___lldiv	;wreg free
  7954  0017D0  0100               	movlb	0	; () banked
  7955  0017D2  5166               	movf	?___lldiv& (0+255),w,b
  7956  0017D4  6F84               	movwf	intToString@thousands& (0+255),b
  7957                           
  7958                           ; BSR set to: 0
  7959                           ;uart.c: 98: uint8_t hundreds = (val - tenthousands * 10000u - thousands * 1000u) / 100u
      +                          ;
  7960  0017D6  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  7961  0017DA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7962  0017DC  0E27               	movlw	39
  7963  0017DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7964  0017E0  0E10               	movlw	16
  7965  0017E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7966  0017E4  ECFB  F021         	call	___wmul	;wreg free
  7967  0017E8  C060  F077         	movff	?___wmul,??_intToString
  7968  0017EC  C061  F078         	movff	?___wmul+1,??_intToString+1
  7969  0017F0  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  7970  0017F4  0100               	movlb	0	; () banked
  7971  0017F6  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7972  0017F8  0E03               	movlw	3
  7973  0017FA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7974  0017FC  0EE8               	movlw	232
  7975  0017FE  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7976  001800  ECFB  F021         	call	___wmul	;wreg free
  7977  001804  0100               	movlb	0	; () banked
  7978  001806  5177               	movf	??_intToString& (0+255),w,b
  7979  001808  2560               	addwf	?___wmul& (0+255),w,b
  7980  00180A  6F79               	movwf	(??_intToString+2)& (0+255),b
  7981  00180C  5178               	movf	(??_intToString+1)& (0+255),w,b
  7982  00180E  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  7983  001810  6F7A               	movwf	(??_intToString+3)& (0+255),b
  7984  001812  6B7B               	clrf	(??_intToString+4)& (0+255),b
  7985  001814  B0D8               	btfsc	status,0,c
  7986  001816  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  7987  001818  6B7C               	clrf	(??_intToString+5)& (0+255),b
  7988  00181A  1F79               	comf	(??_intToString+2)& (0+255),f,b
  7989  00181C  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  7990  00181E  1F7B               	comf	(??_intToString+4)& (0+255),f,b
  7991  001820  1F7C               	comf	(??_intToString+5)& (0+255),f,b
  7992  001822  2B79               	incf	(??_intToString+2)& (0+255),f,b
  7993  001824  0E00               	movlw	0
  7994  001826  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  7995  001828  237B               	addwfc	(??_intToString+4)& (0+255),f,b
  7996  00182A  237C               	addwfc	(??_intToString+5)& (0+255),f,b
  7997  00182C  5173               	movf	intToString@val& (0+255),w,b
  7998  00182E  2579               	addwf	(??_intToString+2)& (0+255),w,b
  7999  001830  6F66               	movwf	___lldiv@dividend& (0+255),b
  8000  001832  5174               	movf	(intToString@val+1)& (0+255),w,b
  8001  001834  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8002  001836  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8003  001838  5175               	movf	(intToString@val+2)& (0+255),w,b
  8004  00183A  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8005  00183C  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8006  00183E  5176               	movf	(intToString@val+3)& (0+255),w,b
  8007  001840  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8008  001842  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8009  001844  0E64               	movlw	100
  8010  001846  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8011  001848  0E00               	movlw	0
  8012  00184A  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8013  00184C  0E00               	movlw	0
  8014  00184E  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8015  001850  0E00               	movlw	0
  8016  001852  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8017  001854  EC9E  F01B         	call	___lldiv	;wreg free
  8018  001858  0100               	movlb	0	; () banked
  8019  00185A  5166               	movf	?___lldiv& (0+255),w,b
  8020  00185C  6F83               	movwf	intToString@hundreds& (0+255),b
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;uart.c: 99: uint8_t tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds 
      +                          * 100u) / 10u;
  8024  00185E  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8025  001862  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8026  001864  0E27               	movlw	39
  8027  001866  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8028  001868  0E10               	movlw	16
  8029  00186A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8030  00186C  ECFB  F021         	call	___wmul	;wreg free
  8031  001870  C060  F077         	movff	?___wmul,??_intToString
  8032  001874  C061  F078         	movff	?___wmul+1,??_intToString+1
  8033  001878  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  8034  00187C  0100               	movlb	0	; () banked
  8035  00187E  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8036  001880  0E03               	movlw	3
  8037  001882  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8038  001884  0EE8               	movlw	232
  8039  001886  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8040  001888  ECFB  F021         	call	___wmul	;wreg free
  8041  00188C  0100               	movlb	0	; () banked
  8042  00188E  5177               	movf	??_intToString& (0+255),w,b
  8043  001890  2560               	addwf	?___wmul& (0+255),w,b
  8044  001892  6F79               	movwf	(??_intToString+2)& (0+255),b
  8045  001894  5178               	movf	(??_intToString+1)& (0+255),w,b
  8046  001896  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8047  001898  6F7A               	movwf	(??_intToString+3)& (0+255),b
  8048  00189A  6B7B               	clrf	(??_intToString+4)& (0+255),b
  8049  00189C  B0D8               	btfsc	status,0,c
  8050  00189E  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  8051  0018A0  6B7C               	clrf	(??_intToString+5)& (0+255),b
  8052  0018A2  5183               	movf	intToString@hundreds& (0+255),w,b
  8053  0018A4  0D64               	mullw	100
  8054  0018A6  50F3               	movf	prodl,w,c
  8055  0018A8  2579               	addwf	(??_intToString+2)& (0+255),w,b
  8056  0018AA  6F7D               	movwf	(??_intToString+6)& (0+255),b
  8057  0018AC  50F4               	movf	prodh,w,c
  8058  0018AE  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8059  0018B0  6F7E               	movwf	(??_intToString+7)& (0+255),b
  8060  0018B2  0E00               	movlw	0
  8061  0018B4  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8062  0018B6  6F7F               	movwf	(??_intToString+8)& (0+255),b
  8063  0018B8  0E00               	movlw	0
  8064  0018BA  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8065  0018BC  6F80               	movwf	(??_intToString+9)& (0+255),b
  8066  0018BE  1F7D               	comf	(??_intToString+6)& (0+255),f,b
  8067  0018C0  1F7E               	comf	(??_intToString+7)& (0+255),f,b
  8068  0018C2  1F7F               	comf	(??_intToString+8)& (0+255),f,b
  8069  0018C4  1F80               	comf	(??_intToString+9)& (0+255),f,b
  8070  0018C6  2B7D               	incf	(??_intToString+6)& (0+255),f,b
  8071  0018C8  0E00               	movlw	0
  8072  0018CA  237E               	addwfc	(??_intToString+7)& (0+255),f,b
  8073  0018CC  237F               	addwfc	(??_intToString+8)& (0+255),f,b
  8074  0018CE  2380               	addwfc	(??_intToString+9)& (0+255),f,b
  8075  0018D0  5173               	movf	intToString@val& (0+255),w,b
  8076  0018D2  257D               	addwf	(??_intToString+6)& (0+255),w,b
  8077  0018D4  6F66               	movwf	___lldiv@dividend& (0+255),b
  8078  0018D6  5174               	movf	(intToString@val+1)& (0+255),w,b
  8079  0018D8  217E               	addwfc	(??_intToString+7)& (0+255),w,b
  8080  0018DA  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8081  0018DC  5175               	movf	(intToString@val+2)& (0+255),w,b
  8082  0018DE  217F               	addwfc	(??_intToString+8)& (0+255),w,b
  8083  0018E0  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8084  0018E2  5176               	movf	(intToString@val+3)& (0+255),w,b
  8085  0018E4  2180               	addwfc	(??_intToString+9)& (0+255),w,b
  8086  0018E6  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8087  0018E8  0E0A               	movlw	10
  8088  0018EA  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8089  0018EC  0E00               	movlw	0
  8090  0018EE  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8091  0018F0  0E00               	movlw	0
  8092  0018F2  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8093  0018F4  0E00               	movlw	0
  8094  0018F6  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8095  0018F8  EC9E  F01B         	call	___lldiv	;wreg free
  8096  0018FC  0100               	movlb	0	; () banked
  8097  0018FE  5166               	movf	?___lldiv& (0+255),w,b
  8098  001900  6F81               	movwf	intToString@tens& (0+255),b
  8099                           
  8100                           ; BSR set to: 0
  8101                           ;uart.c: 100: uint8_t ones = val % 10u;
  8102  001902  C073  F060         	movff	intToString@val,___llmod@dividend
  8103  001906  C074  F061         	movff	intToString@val+1,___llmod@dividend+1
  8104  00190A  C075  F062         	movff	intToString@val+2,___llmod@dividend+2
  8105  00190E  C076  F063         	movff	intToString@val+3,___llmod@dividend+3
  8106  001912  0E0A               	movlw	10
  8107  001914  6F64               	movwf	___llmod@divisor& (0+255),b
  8108  001916  0E00               	movlw	0
  8109  001918  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  8110  00191A  0E00               	movlw	0
  8111  00191C  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  8112  00191E  0E00               	movlw	0
  8113  001920  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  8114  001922  ECFD  F01D         	call	___llmod	;wreg free
  8115  001926  0100               	movlb	0	; () banked
  8116  001928  5160               	movf	?___llmod& (0+255),w,b
  8117  00192A  6F82               	movwf	intToString@ones& (0+255),b
  8118                           
  8119                           ; BSR set to: 0
  8120                           ;uart.c: 102: if (val > 9999) {
  8121  00192C  5176               	movf	(intToString@val+3)& (0+255),w,b
  8122  00192E  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8123  001930  E106               	bnz	u9460
  8124  001932  0E10               	movlw	16
  8125  001934  5D73               	subwf	intToString@val& (0+255),w,b
  8126  001936  0E27               	movlw	39
  8127  001938  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8128  00193A  A0D8               	btfss	status,0,c
  8129  00193C  D00C               	goto	l745
  8130  00193E                     u9460:
  8131                           
  8132                           ; BSR set to: 0
  8133                           ;uart.c: 103: number[pointer++] = tenthousands + 0x30u;
  8134  00193E  5186               	movf	intToString@pointer& (0+255),w,b
  8135  001940  0D01               	mullw	1
  8136  001942  0EC9               	movlw	low intToString@number
  8137  001944  24F3               	addwf	prodl,w,c
  8138  001946  6ED9               	movwf	fsr2l,c
  8139  001948  0E01               	movlw	high intToString@number
  8140  00194A  20F4               	addwfc	prodh,w,c
  8141  00194C  6EDA               	movwf	fsr2h,c
  8142  00194E  5185               	movf	intToString@tenthousands& (0+255),w,b
  8143  001950  0F30               	addlw	48
  8144  001952  6EDF               	movwf	indf2,c
  8145                           
  8146                           ; BSR set to: 0
  8147  001954  2B86               	incf	intToString@pointer& (0+255),f,b
  8148  001956                     l745:
  8149                           
  8150                           ; BSR set to: 0
  8151                           ;uart.c: 104: }
  8152                           ;uart.c: 106: if (val > 999) {
  8153                           
  8154                           ; BSR set to: 0
  8155  001956  5176               	movf	(intToString@val+3)& (0+255),w,b
  8156  001958  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8157  00195A  E106               	bnz	u9470
  8158  00195C  0EE8               	movlw	232
  8159  00195E  5D73               	subwf	intToString@val& (0+255),w,b
  8160  001960  0E03               	movlw	3
  8161  001962  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8162  001964  A0D8               	btfss	status,0,c
  8163  001966  D00C               	goto	l746
  8164  001968                     u9470:
  8165                           
  8166                           ; BSR set to: 0
  8167                           ;uart.c: 107: number[pointer++] = thousands + 0x30u;
  8168  001968  5186               	movf	intToString@pointer& (0+255),w,b
  8169  00196A  0D01               	mullw	1
  8170  00196C  0EC9               	movlw	low intToString@number
  8171  00196E  24F3               	addwf	prodl,w,c
  8172  001970  6ED9               	movwf	fsr2l,c
  8173  001972  0E01               	movlw	high intToString@number
  8174  001974  20F4               	addwfc	prodh,w,c
  8175  001976  6EDA               	movwf	fsr2h,c
  8176  001978  5184               	movf	intToString@thousands& (0+255),w,b
  8177  00197A  0F30               	addlw	48
  8178  00197C  6EDF               	movwf	indf2,c
  8179                           
  8180                           ; BSR set to: 0
  8181  00197E  2B86               	incf	intToString@pointer& (0+255),f,b
  8182  001980                     l746:
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;uart.c: 108: }
  8186                           ;uart.c: 110: if (val > 99) {
  8187                           
  8188                           ; BSR set to: 0
  8189  001980  5176               	movf	(intToString@val+3)& (0+255),w,b
  8190  001982  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8191  001984  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8192  001986  E104               	bnz	u9480
  8193  001988  0E64               	movlw	100
  8194  00198A  5D73               	subwf	intToString@val& (0+255),w,b
  8195  00198C  A0D8               	btfss	status,0,c
  8196  00198E  D00C               	goto	l747
  8197  001990                     u9480:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;uart.c: 111: number[pointer++] = hundreds + 0x30u;
  8201  001990  5186               	movf	intToString@pointer& (0+255),w,b
  8202  001992  0D01               	mullw	1
  8203  001994  0EC9               	movlw	low intToString@number
  8204  001996  24F3               	addwf	prodl,w,c
  8205  001998  6ED9               	movwf	fsr2l,c
  8206  00199A  0E01               	movlw	high intToString@number
  8207  00199C  20F4               	addwfc	prodh,w,c
  8208  00199E  6EDA               	movwf	fsr2h,c
  8209  0019A0  5183               	movf	intToString@hundreds& (0+255),w,b
  8210  0019A2  0F30               	addlw	48
  8211  0019A4  6EDF               	movwf	indf2,c
  8212                           
  8213                           ; BSR set to: 0
  8214  0019A6  2B86               	incf	intToString@pointer& (0+255),f,b
  8215  0019A8                     l747:
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;uart.c: 112: }
  8219                           ;uart.c: 114: if (val > 9) {
  8220                           
  8221                           ; BSR set to: 0
  8222  0019A8  5176               	movf	(intToString@val+3)& (0+255),w,b
  8223  0019AA  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8224  0019AC  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8225  0019AE  E104               	bnz	u9490
  8226  0019B0  0E0A               	movlw	10
  8227  0019B2  5D73               	subwf	intToString@val& (0+255),w,b
  8228  0019B4  A0D8               	btfss	status,0,c
  8229  0019B6  D00C               	goto	l748
  8230  0019B8                     u9490:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;uart.c: 115: number[pointer++] = tens + 0x30u;
  8234  0019B8  5186               	movf	intToString@pointer& (0+255),w,b
  8235  0019BA  0D01               	mullw	1
  8236  0019BC  0EC9               	movlw	low intToString@number
  8237  0019BE  24F3               	addwf	prodl,w,c
  8238  0019C0  6ED9               	movwf	fsr2l,c
  8239  0019C2  0E01               	movlw	high intToString@number
  8240  0019C4  20F4               	addwfc	prodh,w,c
  8241  0019C6  6EDA               	movwf	fsr2h,c
  8242  0019C8  5181               	movf	intToString@tens& (0+255),w,b
  8243  0019CA  0F30               	addlw	48
  8244  0019CC  6EDF               	movwf	indf2,c
  8245                           
  8246                           ; BSR set to: 0
  8247  0019CE  2B86               	incf	intToString@pointer& (0+255),f,b
  8248  0019D0                     l748:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;uart.c: 116: }
  8252                           ;uart.c: 118: number[pointer++] = ones + 0x30u;
  8253                           
  8254                           ; BSR set to: 0
  8255  0019D0  5186               	movf	intToString@pointer& (0+255),w,b
  8256  0019D2  0D01               	mullw	1
  8257  0019D4  0EC9               	movlw	low intToString@number
  8258  0019D6  24F3               	addwf	prodl,w,c
  8259  0019D8  6ED9               	movwf	fsr2l,c
  8260  0019DA  0E01               	movlw	high intToString@number
  8261  0019DC  20F4               	addwfc	prodh,w,c
  8262  0019DE  6EDA               	movwf	fsr2h,c
  8263  0019E0  5182               	movf	intToString@ones& (0+255),w,b
  8264  0019E2  0F30               	addlw	48
  8265  0019E4  6EDF               	movwf	indf2,c
  8266  0019E6  2B86               	incf	intToString@pointer& (0+255),f,b
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;uart.c: 119: number[pointer++] = '\0';
  8270  0019E8  5186               	movf	intToString@pointer& (0+255),w,b
  8271  0019EA  0D01               	mullw	1
  8272  0019EC  0EC9               	movlw	low intToString@number
  8273  0019EE  24F3               	addwf	prodl,w,c
  8274  0019F0  6ED9               	movwf	fsr2l,c
  8275  0019F2  0E01               	movlw	high intToString@number
  8276  0019F4  20F4               	addwfc	prodh,w,c
  8277  0019F6  6EDA               	movwf	fsr2h,c
  8278  0019F8  0E00               	movlw	0
  8279  0019FA  6EDF               	movwf	indf2,c
  8280                           
  8281                           ; BSR set to: 0
  8282  0019FC  2B86               	incf	intToString@pointer& (0+255),f,b
  8283                           
  8284                           ; BSR set to: 0
  8285                           ;uart.c: 121: return number;
  8286  0019FE  0EC9               	movlw	low intToString@number
  8287  001A00  6F73               	movwf	?_intToString& (0+255),b
  8288  001A02  0E01               	movlw	high intToString@number
  8289  001A04  6F74               	movwf	(?_intToString+1)& (0+255),b
  8290  001A06  0012               	return	
  8291  001A08                     __end_of_intToString:
  8292                           	opt stack 0
  8293                           tblptru	equ	0xFF8
  8294                           tblptrh	equ	0xFF7
  8295                           tblptrl	equ	0xFF6
  8296                           tablat	equ	0xFF5
  8297                           prodh	equ	0xFF4
  8298                           prodl	equ	0xFF3
  8299                           intcon	equ	0xFF2
  8300                           intcon3	equ	0xFF0
  8301                           postinc0	equ	0xFEE
  8302                           plusw0	equ	0xFEB
  8303                           fsr0h	equ	0xFEA
  8304                           fsr0l	equ	0xFE9
  8305                           wreg	equ	0xFE8
  8306                           indf1	equ	0xFE7
  8307                           postinc1	equ	0xFE6
  8308                           postdec1	equ	0xFE5
  8309                           plusw1	equ	0xFE3
  8310                           fsr1h	equ	0xFE2
  8311                           fsr1l	equ	0xFE1
  8312                           indf2	equ	0xFDF
  8313                           postinc2	equ	0xFDE
  8314                           postdec2	equ	0xFDD
  8315                           plusw2	equ	0xFDB
  8316                           fsr2h	equ	0xFDA
  8317                           fsr2l	equ	0xFD9
  8318                           status	equ	0xFD8
  8319                           
  8320 ;; *************** function ___wmul *****************
  8321 ;; Defined at:
  8322 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8325 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  product         2    4[BANK0 ] unsigned int 
  8328 ;; Return value:  Size  Location     Type
  8329 ;;                  2    0[BANK0 ] unsigned int 
  8330 ;; Registers used:
  8331 ;;		wreg, status,2, status,0, prodl, prodh
  8332 ;; Tracked objects:
  8333 ;;		On entry : 0/0
  8334 ;;		On exit  : 0/0
  8335 ;;		Unchanged: 0/0
  8336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8337 ;;      Params:         0       4       0       0       0       0       0       0       0
  8338 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8339 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8340 ;;      Totals:         0       6       0       0       0       0       0       0       0
  8341 ;;Total ram usage:        6 bytes
  8342 ;; Hardware stack levels used:    1
  8343 ;; Hardware stack levels required when called:    4
  8344 ;; This function calls:
  8345 ;;		Nothing
  8346 ;; This function is called by:
  8347 ;;		_intToString
  8348 ;; This function uses a non-reentrant model
  8349 ;;
  8350                           
  8351                           	psect	text22
  8352  0043F6                     __ptext22:
  8353                           	opt stack 0
  8354  0043F6                     ___wmul:
  8355                           	opt stack 24
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;incstack = 0
  8359  0043F6  0100               	movlb	0	; () banked
  8360  0043F8  5160               	movf	___wmul@multiplier& (0+255),w,b
  8361  0043FA  0362               	mulwf	___wmul@multiplicand& (0+255),b
  8362  0043FC  CFF3 F064          	movff	prodl,___wmul@product
  8363  004400  CFF4 F065          	movff	prodh,___wmul@product+1
  8364  004404  5160               	movf	___wmul@multiplier& (0+255),w,b
  8365  004406  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8366  004408  50F3               	movf	prodl,w,c
  8367  00440A  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  8368  00440C  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8369  00440E  0362               	mulwf	___wmul@multiplicand& (0+255),b
  8370  004410  50F3               	movf	prodl,w,c
  8371  004412  2765               	addwf	(___wmul@product+1)& (0+255),f,b
  8372                           
  8373                           ; BSR set to: 0
  8374  004414  C064  F060         	movff	___wmul@product,?___wmul
  8375  004418  C065  F061         	movff	___wmul@product+1,?___wmul+1
  8376  00441C  0012               	return	
  8377  00441E                     __end_of___wmul:
  8378                           	opt stack 0
  8379                           tblptru	equ	0xFF8
  8380                           tblptrh	equ	0xFF7
  8381                           tblptrl	equ	0xFF6
  8382                           tablat	equ	0xFF5
  8383                           prodh	equ	0xFF4
  8384                           prodl	equ	0xFF3
  8385                           intcon	equ	0xFF2
  8386                           intcon3	equ	0xFF0
  8387                           postinc0	equ	0xFEE
  8388                           plusw0	equ	0xFEB
  8389                           fsr0h	equ	0xFEA
  8390                           fsr0l	equ	0xFE9
  8391                           wreg	equ	0xFE8
  8392                           indf1	equ	0xFE7
  8393                           postinc1	equ	0xFE6
  8394                           postdec1	equ	0xFE5
  8395                           plusw1	equ	0xFE3
  8396                           fsr1h	equ	0xFE2
  8397                           fsr1l	equ	0xFE1
  8398                           indf2	equ	0xFDF
  8399                           postinc2	equ	0xFDE
  8400                           postdec2	equ	0xFDD
  8401                           plusw2	equ	0xFDB
  8402                           fsr2h	equ	0xFDA
  8403                           fsr2l	equ	0xFD9
  8404                           status	equ	0xFD8
  8405                           
  8406 ;; *************** function ___llmod *****************
  8407 ;; Defined at:
  8408 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;  dividend        4    0[BANK0 ] unsigned long 
  8411 ;;  divisor         4    4[BANK0 ] unsigned long 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  counter         1    8[BANK0 ] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  4    0[BANK0 ] unsigned long 
  8416 ;; Registers used:
  8417 ;;		wreg, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8423 ;;      Params:         0       8       0       0       0       0       0       0       0
  8424 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8425 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8426 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8427 ;;Total ram usage:        9 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    4
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_intToString
  8434 ;;		_arpEntryToString
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           	psect	text23
  8439  003BFA                     __ptext23:
  8440                           	opt stack 0
  8441  003BFA                     ___llmod:
  8442                           	opt stack 24
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;incstack = 0
  8446  003BFA  0100               	movlb	0	; () banked
  8447  003BFC  5164               	movf	___llmod@divisor& (0+255),w,b
  8448  003BFE  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8449  003C00  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8450  003C02  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8451  003C04  B4D8               	btfsc	status,2,c
  8452  003C06  D024               	goto	l1372
  8453                           
  8454                           ; BSR set to: 0
  8455  003C08  0E01               	movlw	1
  8456  003C0A  6F68               	movwf	___llmod@counter& (0+255),b
  8457  003C0C  D006               	goto	l1367
  8458  003C0E                     
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462  003C0E  90D8               	bcf	status,0,c
  8463  003C10  3764               	rlcf	___llmod@divisor& (0+255),f,b
  8464  003C12  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8465  003C14  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8466  003C16  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8467  003C18  2B68               	incf	___llmod@counter& (0+255),f,b
  8468  003C1A                     l1367:
  8469                           
  8470                           ; BSR set to: 0
  8471                           
  8472                           ; BSR set to: 0
  8473  003C1A  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8474  003C1C  D7F8               	goto	l1368
  8475  003C1E                     u9060:
  8476                           
  8477                           ; BSR set to: 0
  8478                           
  8479                           ; BSR set to: 0
  8480                           
  8481                           ; BSR set to: 0
  8482  003C1E  5164               	movf	___llmod@divisor& (0+255),w,b
  8483  003C20  5D60               	subwf	___llmod@dividend& (0+255),w,b
  8484  003C22  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8485  003C24  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8486  003C26  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8487  003C28  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8488  003C2A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8489  003C2C  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8490  003C2E  A0D8               	btfss	status,0,c
  8491  003C30  D008               	goto	l1371
  8492                           
  8493                           ; BSR set to: 0
  8494  003C32  5164               	movf	___llmod@divisor& (0+255),w,b
  8495  003C34  5F60               	subwf	___llmod@dividend& (0+255),f,b
  8496  003C36  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8497  003C38  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8498  003C3A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8499  003C3C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8500  003C3E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8501  003C40  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8502  003C42                     l1371:
  8503                           
  8504                           ; BSR set to: 0
  8505                           
  8506                           ; BSR set to: 0
  8507  003C42  90D8               	bcf	status,0,c
  8508  003C44  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8509  003C46  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8510  003C48  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8511  003C4A  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8512                           
  8513                           ; BSR set to: 0
  8514  003C4C  2F68               	decfsz	___llmod@counter& (0+255),f,b
  8515  003C4E  D7E7               	goto	u9060
  8516  003C50                     l1372:
  8517                           
  8518                           ; BSR set to: 0
  8519                           
  8520                           ; BSR set to: 0
  8521  003C50  C060  F060         	movff	___llmod@dividend,?___llmod
  8522  003C54  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8523  003C58  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8524  003C5C  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8525                           
  8526                           ; BSR set to: 0
  8527  003C60  0012               	return		;funcret
  8528  003C62                     __end_of___llmod:
  8529                           	opt stack 0
  8530                           tblptru	equ	0xFF8
  8531                           tblptrh	equ	0xFF7
  8532                           tblptrl	equ	0xFF6
  8533                           tablat	equ	0xFF5
  8534                           prodh	equ	0xFF4
  8535                           prodl	equ	0xFF3
  8536                           intcon	equ	0xFF2
  8537                           intcon3	equ	0xFF0
  8538                           postinc0	equ	0xFEE
  8539                           plusw0	equ	0xFEB
  8540                           fsr0h	equ	0xFEA
  8541                           fsr0l	equ	0xFE9
  8542                           wreg	equ	0xFE8
  8543                           indf1	equ	0xFE7
  8544                           postinc1	equ	0xFE6
  8545                           postdec1	equ	0xFE5
  8546                           plusw1	equ	0xFE3
  8547                           fsr1h	equ	0xFE2
  8548                           fsr1l	equ	0xFE1
  8549                           indf2	equ	0xFDF
  8550                           postinc2	equ	0xFDE
  8551                           postdec2	equ	0xFDD
  8552                           plusw2	equ	0xFDB
  8553                           fsr2h	equ	0xFDA
  8554                           fsr2l	equ	0xFD9
  8555                           status	equ	0xFD8
  8556                           
  8557 ;; *************** function ___lldiv *****************
  8558 ;; Defined at:
  8559 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8560 ;; Parameters:    Size  Location     Type
  8561 ;;  dividend        4    6[BANK0 ] unsigned long 
  8562 ;;  divisor         4   10[BANK0 ] unsigned long 
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  quotient        4   14[BANK0 ] unsigned long 
  8565 ;;  counter         1   18[BANK0 ] unsigned char 
  8566 ;; Return value:  Size  Location     Type
  8567 ;;                  4    6[BANK0 ] unsigned long 
  8568 ;; Registers used:
  8569 ;;		wreg, status,2, status,0
  8570 ;; Tracked objects:
  8571 ;;		On entry : 0/0
  8572 ;;		On exit  : 0/0
  8573 ;;		Unchanged: 0/0
  8574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8575 ;;      Params:         0       8       0       0       0       0       0       0       0
  8576 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8577 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8578 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8579 ;;Total ram usage:       13 bytes
  8580 ;; Hardware stack levels used:    1
  8581 ;; Hardware stack levels required when called:    4
  8582 ;; This function calls:
  8583 ;;		Nothing
  8584 ;; This function is called by:
  8585 ;;		_intToString
  8586 ;; This function uses a non-reentrant model
  8587 ;;
  8588                           
  8589                           	psect	text24
  8590  00373C                     __ptext24:
  8591                           	opt stack 0
  8592  00373C                     ___lldiv:
  8593                           	opt stack 24
  8594                           
  8595                           ; BSR set to: 0
  8596                           ;incstack = 0
  8597  00373C  0E00               	movlw	0
  8598  00373E  0100               	movlb	0	; () banked
  8599  003740  6F6E               	movwf	___lldiv@quotient& (0+255),b
  8600  003742  0E00               	movlw	0
  8601  003744  6F6F               	movwf	(___lldiv@quotient+1)& (0+255),b
  8602  003746  0E00               	movlw	0
  8603  003748  6F70               	movwf	(___lldiv@quotient+2)& (0+255),b
  8604  00374A  0E00               	movlw	0
  8605  00374C  6F71               	movwf	(___lldiv@quotient+3)& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608  00374E  516A               	movf	___lldiv@divisor& (0+255),w,b
  8609  003750  116B               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8610  003752  116C               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8611  003754  116D               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8612  003756  B4D8               	btfsc	status,2,c
  8613  003758  D02A               	goto	l1362
  8614                           
  8615                           ; BSR set to: 0
  8616  00375A  0E01               	movlw	1
  8617  00375C  6F72               	movwf	___lldiv@counter& (0+255),b
  8618  00375E  D006               	goto	l1357
  8619  003760                     
  8620                           ; BSR set to: 0
  8621                           
  8622                           ; BSR set to: 0
  8623  003760  90D8               	bcf	status,0,c
  8624  003762  376A               	rlcf	___lldiv@divisor& (0+255),f,b
  8625  003764  376B               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8626  003766  376C               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8627  003768  376D               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8628  00376A  2B72               	incf	___lldiv@counter& (0+255),f,b
  8629  00376C                     l1357:
  8630                           
  8631                           ; BSR set to: 0
  8632                           
  8633                           ; BSR set to: 0
  8634  00376C  AF6D               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8635  00376E  D7F8               	goto	l1358
  8636  003770                     u9030:
  8637                           
  8638                           ; BSR set to: 0
  8639                           
  8640                           ; BSR set to: 0
  8641                           
  8642                           ; BSR set to: 0
  8643  003770  90D8               	bcf	status,0,c
  8644  003772  376E               	rlcf	___lldiv@quotient& (0+255),f,b
  8645  003774  376F               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8646  003776  3770               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8647  003778  3771               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8648                           
  8649                           ; BSR set to: 0
  8650  00377A  516A               	movf	___lldiv@divisor& (0+255),w,b
  8651  00377C  5D66               	subwf	___lldiv@dividend& (0+255),w,b
  8652  00377E  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8653  003780  5967               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8654  003782  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8655  003784  5968               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8656  003786  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8657  003788  5969               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8658  00378A  A0D8               	btfss	status,0,c
  8659  00378C  D009               	goto	l1361
  8660                           
  8661                           ; BSR set to: 0
  8662  00378E  516A               	movf	___lldiv@divisor& (0+255),w,b
  8663  003790  5F66               	subwf	___lldiv@dividend& (0+255),f,b
  8664  003792  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8665  003794  5B67               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8666  003796  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8667  003798  5B68               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8668  00379A  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8669  00379C  5B69               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8670                           
  8671                           ; BSR set to: 0
  8672  00379E  816E               	bsf	___lldiv@quotient& (0+255),0,b
  8673  0037A0                     l1361:
  8674                           
  8675                           ; BSR set to: 0
  8676                           
  8677                           ; BSR set to: 0
  8678  0037A0  90D8               	bcf	status,0,c
  8679  0037A2  336D               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8680  0037A4  336C               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8681  0037A6  336B               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8682  0037A8  336A               	rrcf	___lldiv@divisor& (0+255),f,b
  8683                           
  8684                           ; BSR set to: 0
  8685  0037AA  2F72               	decfsz	___lldiv@counter& (0+255),f,b
  8686  0037AC  D7E1               	goto	u9030
  8687  0037AE                     l1362:
  8688                           
  8689                           ; BSR set to: 0
  8690                           
  8691                           ; BSR set to: 0
  8692  0037AE  C06E  F066         	movff	___lldiv@quotient,?___lldiv
  8693  0037B2  C06F  F067         	movff	___lldiv@quotient+1,?___lldiv+1
  8694  0037B6  C070  F068         	movff	___lldiv@quotient+2,?___lldiv+2
  8695  0037BA  C071  F069         	movff	___lldiv@quotient+3,?___lldiv+3
  8696                           
  8697                           ; BSR set to: 0
  8698  0037BE  0012               	return		;funcret
  8699  0037C0                     __end_of___lldiv:
  8700                           	opt stack 0
  8701                           tblptru	equ	0xFF8
  8702                           tblptrh	equ	0xFF7
  8703                           tblptrl	equ	0xFF6
  8704                           tablat	equ	0xFF5
  8705                           prodh	equ	0xFF4
  8706                           prodl	equ	0xFF3
  8707                           intcon	equ	0xFF2
  8708                           intcon3	equ	0xFF0
  8709                           postinc0	equ	0xFEE
  8710                           plusw0	equ	0xFEB
  8711                           fsr0h	equ	0xFEA
  8712                           fsr0l	equ	0xFE9
  8713                           wreg	equ	0xFE8
  8714                           indf1	equ	0xFE7
  8715                           postinc1	equ	0xFE6
  8716                           postdec1	equ	0xFE5
  8717                           plusw1	equ	0xFE3
  8718                           fsr1h	equ	0xFE2
  8719                           fsr1l	equ	0xFE1
  8720                           indf2	equ	0xFDF
  8721                           postinc2	equ	0xFDE
  8722                           postdec2	equ	0xFDD
  8723                           plusw2	equ	0xFDB
  8724                           fsr2h	equ	0xFDA
  8725                           fsr2l	equ	0xFD9
  8726                           status	equ	0xFD8
  8727                           
  8728 ;; *************** function _ARP_handleNewPacket *****************
  8729 ;; Defined at:
  8730 ;;		line 28 in file "src/stack/protocols/arp.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  frame           2   84[BANK1 ] PTR struct ethernetFrame
  8733 ;;		 -> stack.ethernet(15), stack(110), 
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;  arp            32   86[BANK1 ] struct ARP_message
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      void 
  8738 ;; Registers used:
  8739 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8745 ;;      Params:         0       0       2       0       0       0       0       0       0
  8746 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8747 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8748 ;;      Totals:         0       2      34       0       0       0       0       0       0
  8749 ;;Total ram usage:       36 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:   11
  8752 ;; This function calls:
  8753 ;;		_ARP_parseFromRXBuffer
  8754 ;;		_ARP_replyIfNeeded
  8755 ;;		_ARP_setNewEntry
  8756 ;;		_UARTTransmitText
  8757 ;;		_ethernetController_dropPacket
  8758 ;;		_getSeconds
  8759 ;;		_ipAdressToString
  8760 ;;		_macToString
  8761 ;; This function is called by:
  8762 ;;		_ethernet_rxGetNewFrame
  8763 ;; This function uses a non-reentrant model
  8764 ;;
  8765                           
  8766                           	psect	text25
  8767  002164                     __ptext25:
  8768                           	opt stack 0
  8769  002164                     _ARP_handleNewPacket:
  8770                           	opt stack 17
  8771                           
  8772                           ;arp.c: 29: ARP_message_t arp;
  8773                           ;arp.c: 30: if (frame->ethertype != ETHERTYPE_ARP) {
  8774                           
  8775                           ; BSR set to: 0
  8776                           ;incstack = 0
  8777  002164  0101               	movlb	1	; () banked
  8778  002166  EE20 F00E          	lfsr	2,14
  8779  00216A  5154               	movf	ARP_handleNewPacket@frame& (0+255),w,b
  8780  00216C  26D9               	addwf	fsr2l,f,c
  8781  00216E  5155               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
  8782  002170  22DA               	addwfc	fsr2h,f,c
  8783  002172  0E06               	movlw	6
  8784  002174  18DE               	xorwf	postinc2,w,c
  8785  002176  E104               	bnz	u9870
  8786  002178  0E08               	movlw	8
  8787  00217A  18DE               	xorwf	postinc2,w,c
  8788  00217C  B4D8               	btfsc	status,2,c
  8789  00217E  D007               	goto	l846
  8790  002180                     u9870:
  8791                           
  8792                           ; BSR set to: 1
  8793                           ;arp.c: 31: ethernetController_dropPacket(frame);
  8794  002180  C154  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  8795  002184  C155  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8796  002188  ECCC  F018         	call	_ethernetController_dropPacket	;wreg free
  8797                           
  8798                           ;arp.c: 32: return;
  8799  00218C  0012               	return	
  8800  00218E                     l846:
  8801                           
  8802                           ;arp.c: 33: }
  8803                           ;arp.c: 35: arp = ARP_parseFromRXBuffer(frame);
  8804  00218E  C154  F091         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
  8805  002192  C155  F092         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
  8806  002196  EC14  F00A         	call	_ARP_parseFromRXBuffer	;wreg free
  8807  00219A  EE21  F056         	lfsr	2,ARP_handleNewPacket@arp
  8808  00219E  0E1F               	movlw	31
  8809  0021A0                     u9881:
  8810  0021A0  CFEB FFDB          	movff	plusw0,plusw2
  8811  0021A4  06E8               	decf	wreg,f,c
  8812  0021A6  E2FC               	bc	u9881
  8813                           
  8814                           ;arp.c: 36: if (arp.err.code != (uint16_t)0) {
  8815  0021A8  0101               	movlb	1	; () banked
  8816  0021AA  5174               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
  8817  0021AC  1175               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
  8818  0021AE  B4D8               	btfsc	status,2,c
  8819  0021B0  D008               	goto	l848
  8820                           
  8821                           ; BSR set to: 1
  8822                           ;arp.c: 37: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8823  0021B2  0EFA               	movlw	low STR_53
  8824  0021B4  0100               	movlb	0	; () banked
  8825  0021B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8826  0021B8  0E7C               	movlw	high STR_53
  8827  0021BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8828  0021BC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8829                           
  8830                           ;arp.c: 38: return;
  8831  0021C0  0012               	return	
  8832  0021C2                     l848:
  8833                           
  8834                           ;arp.c: 39: }
  8835                           ;arp.c: 40: UARTTransmitText("[");
  8836  0021C2  0EDD               	movlw	low (STR_56+3)
  8837  0021C4  0100               	movlb	0	; () banked
  8838  0021C6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8839  0021C8  0E7F               	movlw	high (STR_56+3)
  8840  0021CA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8841  0021CC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8842                           
  8843                           ;arp.c: 41: UARTTransmitText(macToString(arp.senderMACAddress));
  8844  0021D0  EE21  F05E         	lfsr	2,ARP_handleNewPacket@arp+8
  8845  0021D4  EE00  F07A         	lfsr	0,macToString@addr
  8846  0021D8  0E05               	movlw	5
  8847  0021DA                     u9901:
  8848  0021DA  CFDB FFEB          	movff	plusw2,plusw0
  8849  0021DE  06E8               	decf	wreg,f,c
  8850  0021E0  E2FC               	bc	u9901
  8851  0021E2  EC7C  F016         	call	_macToString	;wreg free
  8852  0021E6  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8853  0021EA  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8854  0021EE  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8855                           
  8856                           ;arp.c: 42: UARTTransmitText(", ");
  8857  0021F2  0E89               	movlw	low (STR_36+17)
  8858  0021F4  0100               	movlb	0	; () banked
  8859  0021F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8860  0021F8  0E7E               	movlw	high (STR_36+17)
  8861  0021FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8862  0021FC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8863                           
  8864                           ;arp.c: 43: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8865  002200  C164  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
  8866  002204  C165  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
  8867  002208  C166  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
  8868  00220C  C167  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
  8869  002210  EC04  F00D         	call	_ipAdressToString	;wreg free
  8870  002214  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8871  002218  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8872  00221C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8873                           
  8874                           ;arp.c: 44: UARTTransmitText("]->[");
  8875  002220  0EDA               	movlw	low STR_56
  8876  002222  0100               	movlb	0	; () banked
  8877  002224  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8878  002226  0E7F               	movlw	high STR_56
  8879  002228  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8880  00222A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8881                           
  8882                           ;arp.c: 45: UARTTransmitText(macToString(arp.targetMACAddress));
  8883  00222E  EE21  F068         	lfsr	2,ARP_handleNewPacket@arp+18
  8884  002232  EE00  F07A         	lfsr	0,macToString@addr
  8885  002236  0E05               	movlw	5
  8886  002238                     u9911:
  8887  002238  CFDB FFEB          	movff	plusw2,plusw0
  8888  00223C  06E8               	decf	wreg,f,c
  8889  00223E  E2FC               	bc	u9911
  8890  002240  EC7C  F016         	call	_macToString	;wreg free
  8891  002244  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8892  002248  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8893  00224C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8894                           
  8895                           ;arp.c: 46: UARTTransmitText(", ");
  8896  002250  0E89               	movlw	low (STR_36+17)
  8897  002252  0100               	movlb	0	; () banked
  8898  002254  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8899  002256  0E7E               	movlw	high (STR_36+17)
  8900  002258  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8901  00225A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8902                           
  8903                           ;arp.c: 47: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  8904  00225E  C16E  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
  8905  002262  C16F  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
  8906  002266  C170  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
  8907  00226A  C171  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
  8908  00226E  EC04  F00D         	call	_ipAdressToString	;wreg free
  8909  002272  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8910  002276  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8911  00227A  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8912                           
  8913                           ;arp.c: 48: UARTTransmitText("]");
  8914  00227E  0EFC               	movlw	low (STR_18+1)
  8915  002280  0100               	movlb	0	; () banked
  8916  002282  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8917  002284  0E7F               	movlw	high (STR_18+1)
  8918  002286  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8919  002288  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8920                           
  8921                           ;arp.c: 49: if (arp.fIsProbe)
  8922  00228C  0101               	movlb	1	; () banked
  8923  00228E  A372               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
  8924  002290  D007               	goto	l849
  8925                           
  8926                           ; BSR set to: 1
  8927                           ;arp.c: 50: UARTTransmitText("[IsProbe]");
  8928  002292  0E97               	movlw	low STR_59
  8929  002294  0100               	movlb	0	; () banked
  8930  002296  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8931  002298  0E7F               	movlw	high STR_59
  8932  00229A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8933  00229C  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8934  0022A0                     l849:
  8935                           
  8936                           ;arp.c: 51: if (arp.fIsGratuitous)
  8937  0022A0  0101               	movlb	1	; () banked
  8938  0022A2  A172               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
  8939  0022A4  D007               	goto	l850
  8940                           
  8941                           ; BSR set to: 1
  8942                           ;arp.c: 52: UARTTransmitText("[IsGratuitous]");
  8943  0022A6  0E3A               	movlw	low STR_60
  8944  0022A8  0100               	movlb	0	; () banked
  8945  0022AA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8946  0022AC  0E7F               	movlw	high STR_60
  8947  0022AE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8948  0022B0  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  8949  0022B4                     l850:
  8950                           
  8951                           ;arp.c: 54: ARP_replyIfNeeded(arp);
  8952  0022B4  EE21  F056         	lfsr	2,ARP_handleNewPacket@arp
  8953  0022B8  EE01  F000         	lfsr	0,ARP_replyIfNeeded@request
  8954  0022BC  0E1F               	movlw	31
  8955  0022BE                     u9941:
  8956  0022BE  CFDB FFEB          	movff	plusw2,plusw0
  8957  0022C2  06E8               	decf	wreg,f,c
  8958  0022C4  E2FC               	bc	u9941
  8959  0022C6  EC39  F014         	call	_ARP_replyIfNeeded	;wreg free
  8960                           
  8961                           ;arp.c: 55: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getSeconds());
  8962  0022CA  EE21  F05E         	lfsr	2,ARP_handleNewPacket@arp+8
  8963  0022CE  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
  8964  0022D2  0E05               	movlw	5
  8965  0022D4                     u9951:
  8966  0022D4  CFDB FFEB          	movff	plusw2,plusw0
  8967  0022D8  06E8               	decf	wreg,f,c
  8968  0022DA  E2FC               	bc	u9951
  8969  0022DC  C164  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
  8970  0022E0  C165  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
  8971  0022E4  C166  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
  8972  0022E8  C167  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
  8973  0022EC  EC05  F023         	call	_getSeconds	;wreg free
  8974  0022F0  C060  F06E         	movff	?_getSeconds,ARP_setNewEntry@timestamp
  8975  0022F4  C061  F06F         	movff	?_getSeconds+1,ARP_setNewEntry@timestamp+1
  8976  0022F8  C062  F070         	movff	?_getSeconds+2,ARP_setNewEntry@timestamp+2
  8977  0022FC  C063  F071         	movff	?_getSeconds+3,ARP_setNewEntry@timestamp+3
  8978  002300  EC84  F017         	call	_ARP_setNewEntry	;wreg free
  8979  002304  0012               	return		;funcret
  8980  002306                     __end_of_ARP_handleNewPacket:
  8981                           	opt stack 0
  8982                           tblptru	equ	0xFF8
  8983                           tblptrh	equ	0xFF7
  8984                           tblptrl	equ	0xFF6
  8985                           tablat	equ	0xFF5
  8986                           prodh	equ	0xFF4
  8987                           prodl	equ	0xFF3
  8988                           intcon	equ	0xFF2
  8989                           intcon3	equ	0xFF0
  8990                           postinc0	equ	0xFEE
  8991                           plusw0	equ	0xFEB
  8992                           fsr0h	equ	0xFEA
  8993                           fsr0l	equ	0xFE9
  8994                           wreg	equ	0xFE8
  8995                           indf1	equ	0xFE7
  8996                           postinc1	equ	0xFE6
  8997                           postdec1	equ	0xFE5
  8998                           plusw1	equ	0xFE3
  8999                           fsr1h	equ	0xFE2
  9000                           fsr1l	equ	0xFE1
  9001                           indf2	equ	0xFDF
  9002                           postinc2	equ	0xFDE
  9003                           postdec2	equ	0xFDD
  9004                           plusw2	equ	0xFDB
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function _getSeconds *****************
  9010 ;; Defined at:
  9011 ;;		line 41 in file "src/stack/stack.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;		None
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;		None
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  4    0[BANK0 ] unsigned long 
  9018 ;; Registers used:
  9019 ;;		None
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9025 ;;      Params:         0       4       0       0       0       0       0       0       0
  9026 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9028 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9029 ;;Total ram usage:        4 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    4
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_ARP_handleNewPacket
  9036 ;;		_ARP_checkForEntry
  9037 ;;		_ipv4_sendFrame
  9038 ;; This function uses a non-reentrant model
  9039 ;;
  9040                           
  9041                           	psect	text26
  9042  00460A                     __ptext26:
  9043                           	opt stack 0
  9044  00460A                     _getSeconds:
  9045                           	opt stack 24
  9046                           
  9047                           ;stack.c: 42: return seconds;
  9048                           
  9049                           ;incstack = 0
  9050  00460A  C034  F060         	movff	_seconds,?_getSeconds
  9051  00460E  C035  F061         	movff	_seconds+1,?_getSeconds+1
  9052  004612  C036  F062         	movff	_seconds+2,?_getSeconds+2
  9053  004616  C037  F063         	movff	_seconds+3,?_getSeconds+3
  9054  00461A  0012               	return		;funcret
  9055  00461C                     __end_of_getSeconds:
  9056                           	opt stack 0
  9057                           tblptru	equ	0xFF8
  9058                           tblptrh	equ	0xFF7
  9059                           tblptrl	equ	0xFF6
  9060                           tablat	equ	0xFF5
  9061                           prodh	equ	0xFF4
  9062                           prodl	equ	0xFF3
  9063                           intcon	equ	0xFF2
  9064                           intcon3	equ	0xFF0
  9065                           postinc0	equ	0xFEE
  9066                           plusw0	equ	0xFEB
  9067                           fsr0h	equ	0xFEA
  9068                           fsr0l	equ	0xFE9
  9069                           wreg	equ	0xFE8
  9070                           indf1	equ	0xFE7
  9071                           postinc1	equ	0xFE6
  9072                           postdec1	equ	0xFE5
  9073                           plusw1	equ	0xFE3
  9074                           fsr1h	equ	0xFE2
  9075                           fsr1l	equ	0xFE1
  9076                           indf2	equ	0xFDF
  9077                           postinc2	equ	0xFDE
  9078                           postdec2	equ	0xFDD
  9079                           plusw2	equ	0xFDB
  9080                           fsr2h	equ	0xFDA
  9081                           fsr2l	equ	0xFD9
  9082                           status	equ	0xFD8
  9083                           
  9084 ;; *************** function _ethernetController_dropPacket *****************
  9085 ;; Defined at:
  9086 ;;		line 399 in file "src/enc424j600/ENC424J600.c"
  9087 ;; Parameters:    Size  Location     Type
  9088 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9089 ;;		 -> stack.ethernet(15), stack(110), 
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;  nextPktPoint    4   29[BANK0 ] unsigned long 
  9092 ;;  newPointerH     1   28[BANK0 ] unsigned char 
  9093 ;;  newPointerL     1   27[BANK0 ] unsigned char 
  9094 ;;  opcode          1   26[BANK0 ] unsigned char 
  9095 ;; Return value:  Size  Location     Type
  9096 ;;                  1    wreg      void 
  9097 ;; Registers used:
  9098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9099 ;; Tracked objects:
  9100 ;;		On entry : 0/0
  9101 ;;		On exit  : 0/0
  9102 ;;		Unchanged: 0/0
  9103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9104 ;;      Params:         0       2       0       0       0       0       0       0       0
  9105 ;;      Locals:         0       7       0       0       0       0       0       0       0
  9106 ;;      Temps:          0       6       0       0       0       0       0       0       0
  9107 ;;      Totals:         0      15       0       0       0       0       0       0       0
  9108 ;;Total ram usage:       15 bytes
  9109 ;; Hardware stack levels used:    1
  9110 ;; Hardware stack levels required when called:    8
  9111 ;; This function calls:
  9112 ;;		_ENC424J600_getNextPacketPointer
  9113 ;;		_ENC424J600_readSPI
  9114 ;;		_ENC424J600_setERXDATAReadPointer
  9115 ;;		_ENC424J600_setNextPacketPointer
  9116 ;;		_ENC424J600_setRXTailPointer
  9117 ;;		_ENC424J600_writeSPI
  9118 ;;		_ENC424J600_writeSingleByte
  9119 ;; This function is called by:
  9120 ;;		_ethernet_rxGetNewFrame
  9121 ;;		_ARP_handleNewPacket
  9122 ;;		_ipv4_handleNewPacket
  9123 ;; This function uses a non-reentrant model
  9124 ;;
  9125                           
  9126                           	psect	text27
  9127  003198                     __ptext27:
  9128                           	opt stack 0
  9129  003198                     _ethernetController_dropPacket:
  9130                           	opt stack 19
  9131                           
  9132                           ;ENC424J600.c: 400: uint32_t nextPktPointer;
  9133                           ;ENC424J600.c: 401: uint8_t newPointerL, newPointerH;
  9134                           ;ENC424J600.c: 402: uint8_t opcode;
  9135                           ;ENC424J600.c: 403: nextPktPointer = ENC424J600_getNextPacketPointer();
  9136                           
  9137                           ;incstack = 0
  9138  003198  EC2D  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
  9139  00319C  0100               	movlb	0	; () banked
  9140  00319E  C060  F07D         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_dropPacket@nextPktPointer
  9141  0031A2  C061  F07E         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_dropPacket@nextPktPointer+
      +                          1
  9142  0031A6  6B7F               	clrf	(ethernetController_dropPacket@nextPktPointer+2)& (0+255),b
  9143  0031A8  6B80               	clrf	(ethernetController_dropPacket@nextPktPointer+3)& (0+255),b
  9144                           
  9145                           ; BSR set to: 0
  9146                           ;ENC424J600.c: 404: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  9147  0031AA  C07D  F06A         	movff	ethernetController_dropPacket@nextPktPointer,ENC424J600_setERXDATAReadPointer@add
      +                          r
  9148  0031AE  C07E  F06B         	movff	ethernetController_dropPacket@nextPktPointer+1,ENC424J600_setERXDATAReadPointer@a
      +                          ddr+1
  9149  0031B2  ECBB  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  9150                           
  9151                           ;ENC424J600.c: 405: opcode = 0x2C;
  9152  0031B6  0E2C               	movlw	44
  9153  0031B8  0100               	movlb	0	; () banked
  9154  0031BA  6F7A               	movwf	ethernetController_dropPacket@opcode& (0+255),b
  9155                           
  9156                           ; BSR set to: 0
  9157                           ;ENC424J600.c: 406: PORTBbits.RB4=0;
  9158  0031BC  9881               	bcf	3969,4,c	;volatile
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;ENC424J600.c: 407: ENC424J600_writeSPI(&opcode);
  9162  0031BE  0E7A               	movlw	low ethernetController_dropPacket@opcode
  9163  0031C0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  9164  0031C2  0E00               	movlw	high ethernetController_dropPacket@opcode
  9165  0031C4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  9166  0031C6  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
  9167                           
  9168                           ;ENC424J600.c: 408: ENC424J600_readSPI(&newPointerL);
  9169  0031CA  0E7B               	movlw	low ethernetController_dropPacket@newPointerL
  9170  0031CC  0100               	movlb	0	; () banked
  9171  0031CE  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9172  0031D0  0E00               	movlw	high ethernetController_dropPacket@newPointerL
  9173  0031D2  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9174  0031D4  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
  9175                           
  9176                           ;ENC424J600.c: 409: ENC424J600_readSPI(&newPointerH);
  9177  0031D8  0E7C               	movlw	low ethernetController_dropPacket@newPointerH
  9178  0031DA  0100               	movlb	0	; () banked
  9179  0031DC  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9180  0031DE  0E00               	movlw	high ethernetController_dropPacket@newPointerH
  9181  0031E0  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9182  0031E2  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
  9183                           
  9184                           ;ENC424J600.c: 411: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  9185  0031E6  0E00               	movlw	0
  9186  0031E8  0100               	movlb	0	; () banked
  9187  0031EA  6F74               	movwf	??_ethernetController_dropPacket& (0+255),b
  9188  0031EC  0EFF               	movlw	255
  9189  0031EE  6F75               	movwf	(??_ethernetController_dropPacket+1)& (0+255),b
  9190  0031F0  517C               	movf	ethernetController_dropPacket@newPointerH& (0+255),w,b
  9191  0031F2  6F77               	movwf	(??_ethernetController_dropPacket+3)& (0+255),b
  9192  0031F4  6B76               	clrf	(??_ethernetController_dropPacket+2)& (0+255),b
  9193  0031F6  5174               	movf	??_ethernetController_dropPacket& (0+255),w,b
  9194  0031F8  1776               	andwf	(??_ethernetController_dropPacket+2)& (0+255),f,b
  9195  0031FA  5175               	movf	(??_ethernetController_dropPacket+1)& (0+255),w,b
  9196  0031FC  1777               	andwf	(??_ethernetController_dropPacket+3)& (0+255),f,b
  9197  0031FE  517B               	movf	ethernetController_dropPacket@newPointerL& (0+255),w,b
  9198  003200  6F78               	movwf	(??_ethernetController_dropPacket+4)& (0+255),b
  9199  003202  6B79               	clrf	(??_ethernetController_dropPacket+5)& (0+255),b
  9200  003204  5176               	movf	(??_ethernetController_dropPacket+2)& (0+255),w,b
  9201  003206  1178               	iorwf	(??_ethernetController_dropPacket+4)& (0+255),w,b
  9202  003208  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  9203  00320A  5177               	movf	(??_ethernetController_dropPacket+3)& (0+255),w,b
  9204  00320C  1179               	iorwf	(??_ethernetController_dropPacket+5)& (0+255),w,b
  9205  00320E  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  9206  003210  EC32  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
  9207                           
  9208                           ;ENC424J600.c: 412: PORTBbits.RB4=1;
  9209  003214  8881               	bsf	3969,4,c	;volatile
  9210                           
  9211                           ;ENC424J600.c: 414: if (nextPktPointer == 0x3000) {
  9212  003216  0E30               	movlw	48
  9213  003218  0100               	movlb	0	; () banked
  9214  00321A  197E               	xorwf	(ethernetController_dropPacket@nextPktPointer+1)& (0+255),w,b
  9215  00321C  117D               	iorwf	ethernetController_dropPacket@nextPktPointer& (0+255),w,b
  9216  00321E  117F               	iorwf	(ethernetController_dropPacket@nextPktPointer+2)& (0+255),w,b
  9217  003220  1180               	iorwf	(ethernetController_dropPacket@nextPktPointer+3)& (0+255),w,b
  9218  003222  A4D8               	btfss	status,2,c
  9219  003224  D007               	goto	l171
  9220                           
  9221                           ; BSR set to: 0
  9222                           ;ENC424J600.c: 415: ENC424J600_setRXTailPointer(0x5FFF - 1);
  9223  003226  0E5F               	movlw	95
  9224  003228  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9225  00322A  0EFE               	movlw	254
  9226  00322C  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9227  00322E  ECD1  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
  9228                           
  9229                           ;ENC424J600.c: 416: } else {
  9230  003232  D009               	goto	l172
  9231  003234                     l171:
  9232                           
  9233                           ;ENC424J600.c: 417: ENC424J600_setRXTailPointer(nextPktPointer - 2);
  9234  003234  0EFE               	movlw	254
  9235  003236  0100               	movlb	0	; () banked
  9236  003238  257D               	addwf	ethernetController_dropPacket@nextPktPointer& (0+255),w,b
  9237  00323A  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9238  00323C  0EFF               	movlw	255
  9239  00323E  217E               	addwfc	(ethernetController_dropPacket@nextPktPointer+1)& (0+255),w,b
  9240  003240  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9241  003242  ECD1  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
  9242  003246                     l172:
  9243                           
  9244                           ;ENC424J600.c: 418: }
  9245                           ;ENC424J600.c: 420: ENC424J600_writeSingleByte(0b11001100);
  9246  003246  0ECC               	movlw	204
  9247  003248  ECF9  F022         	call	_ENC424J600_writeSingleByte
  9248  00324C  0012               	return		;funcret
  9249  00324E                     __end_of_ethernetController_dropPacket:
  9250                           	opt stack 0
  9251                           tblptru	equ	0xFF8
  9252                           tblptrh	equ	0xFF7
  9253                           tblptrl	equ	0xFF6
  9254                           tablat	equ	0xFF5
  9255                           prodh	equ	0xFF4
  9256                           prodl	equ	0xFF3
  9257                           intcon	equ	0xFF2
  9258                           intcon3	equ	0xFF0
  9259                           postinc0	equ	0xFEE
  9260                           plusw0	equ	0xFEB
  9261                           fsr0h	equ	0xFEA
  9262                           fsr0l	equ	0xFE9
  9263                           wreg	equ	0xFE8
  9264                           indf1	equ	0xFE7
  9265                           postinc1	equ	0xFE6
  9266                           postdec1	equ	0xFE5
  9267                           plusw1	equ	0xFE3
  9268                           fsr1h	equ	0xFE2
  9269                           fsr1l	equ	0xFE1
  9270                           indf2	equ	0xFDF
  9271                           postinc2	equ	0xFDE
  9272                           postdec2	equ	0xFDD
  9273                           plusw2	equ	0xFDB
  9274                           fsr2h	equ	0xFDA
  9275                           fsr2l	equ	0xFD9
  9276                           status	equ	0xFD8
  9277                           
  9278 ;; *************** function _ARP_replyIfNeeded *****************
  9279 ;; Defined at:
  9280 ;;		line 130 in file "src/stack/protocols/arp.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  request        32    0[BANK1 ] struct ARP_message
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  reply          32   52[BANK1 ] struct ARP_message
  9285 ;;  targetMAC       6   42[BANK1 ] struct macaddress
  9286 ;;  senderMAC       6   36[BANK1 ] struct macaddress
  9287 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9288 ;;  senderIP        4   32[BANK1 ] struct ipv4_address
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      void 
  9291 ;; Registers used:
  9292 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9293 ;; Tracked objects:
  9294 ;;		On entry : 0/0
  9295 ;;		On exit  : 0/0
  9296 ;;		Unchanged: 0/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9298 ;;      Params:         0       0      32       0       0       0       0       0       0
  9299 ;;      Locals:         0       0      52       0       0       0       0       0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9301 ;;      Totals:         0       0      84       0       0       0       0       0       0
  9302 ;;Total ram usage:       84 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:   10
  9305 ;; This function calls:
  9306 ;;		_ARP_send
  9307 ;;		_UARTTransmitText
  9308 ;;		_ethernetController_getMacAddress
  9309 ;;		_ipAdressToString
  9310 ;;		_macToString
  9311 ;; This function is called by:
  9312 ;;		_ARP_handleNewPacket
  9313 ;; This function uses a non-reentrant model
  9314 ;;
  9315                           
  9316                           	psect	text28
  9317  002872                     __ptext28:
  9318                           	opt stack 0
  9319  002872                     _ARP_replyIfNeeded:
  9320                           	opt stack 17
  9321                           
  9322                           ;arp.c: 131: if (request.operation != ARP_REQUEST)
  9323                           
  9324                           ;incstack = 0
  9325  002872  0101               	movlb	1	; () banked
  9326  002874  0506               	decf	(ARP_replyIfNeeded@request+6)& (0+255),w,b
  9327  002876  1107               	iorwf	(ARP_replyIfNeeded@request+7)& (0+255),w,b
  9328  002878  A4D8               	btfss	status,2,c
  9329  00287A  0012               	return	
  9330                           
  9331                           ; BSR set to: 1
  9332                           ;arp.c: 137: ARP_message_t reply;
  9333                           ;arp.c: 138: ipv4_address_t senderIP;
  9334                           ;arp.c: 139: ipv4_address_t targetIP;
  9335                           ;arp.c: 140: macaddress_t senderMAC;
  9336                           ;arp.c: 141: macaddress_t targetMAC;
  9337                           ;arp.c: 143: senderMAC = ethernetController_getMacAddress();
  9338                           
  9339                           ; BSR set to: 1
  9340                           
  9341                           ; BSR set to: 1
  9342                           ;arp.c: 132: return;
  9343  00287C  EC55  F01D         	call	_ethernetController_getMacAddress	;wreg free
  9344  002880  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9345  002884  0E05               	movlw	5
  9346  002886                     u9681:
  9347  002886  CFEB FFDB          	movff	plusw0,plusw2
  9348  00288A  06E8               	decf	wreg,f,c
  9349  00288C  E2FC               	bc	u9681
  9350                           
  9351                           ;arp.c: 144: targetMAC = request.senderMACAddress;
  9352  00288E  EE21  F008         	lfsr	2,ARP_replyIfNeeded@request+8
  9353  002892  EE11  F02A         	lfsr	1,ARP_replyIfNeeded@targetMAC
  9354  002896  0E05               	movlw	5
  9355  002898                     u9691:
  9356  002898  CFDB FFE3          	movff	plusw2,plusw1
  9357  00289C  06E8               	decf	wreg,f,c
  9358  00289E  E2FC               	bc	u9691
  9359                           
  9360                           ;arp.c: 146: targetIP = request.senderIPAddress;
  9361  0028A0  C10E  F130         	movff	ARP_replyIfNeeded@request+14,ARP_replyIfNeeded@targetIP
  9362  0028A4  C10F  F131         	movff	ARP_replyIfNeeded@request+15,ARP_replyIfNeeded@targetIP+1
  9363  0028A8  C110  F132         	movff	ARP_replyIfNeeded@request+16,ARP_replyIfNeeded@targetIP+2
  9364  0028AC  C111  F133         	movff	ARP_replyIfNeeded@request+17,ARP_replyIfNeeded@targetIP+3
  9365                           
  9366                           ;arp.c: 148: reply.hlen = 6;
  9367  0028B0  0E06               	movlw	6
  9368  0028B2  0101               	movlb	1	; () banked
  9369  0028B4  6F38               	movwf	(ARP_replyIfNeeded@reply+4)& (0+255),b
  9370                           
  9371                           ; BSR set to: 1
  9372                           ;arp.c: 149: reply.plen = 4;
  9373  0028B6  0E04               	movlw	4
  9374  0028B8  6F39               	movwf	(ARP_replyIfNeeded@reply+5)& (0+255),b
  9375                           
  9376                           ; BSR set to: 1
  9377                           ;arp.c: 150: reply.htype = ARP_HTYPE_ETHERNET;
  9378  0028BA  0E00               	movlw	0
  9379  0028BC  6F35               	movwf	(ARP_replyIfNeeded@reply+1)& (0+255),b
  9380  0028BE  0E01               	movlw	1
  9381  0028C0  6F34               	movwf	ARP_replyIfNeeded@reply& (0+255),b
  9382                           
  9383                           ; BSR set to: 1
  9384                           ;arp.c: 151: reply.ptype = ARP_PTYPE_IPv4;
  9385  0028C2  0E08               	movlw	8
  9386  0028C4  6F37               	movwf	(ARP_replyIfNeeded@reply+3)& (0+255),b
  9387  0028C6  0E00               	movlw	0
  9388  0028C8  6F36               	movwf	(ARP_replyIfNeeded@reply+2)& (0+255),b
  9389                           
  9390                           ; BSR set to: 1
  9391                           ;arp.c: 152: reply.operation = ARP_REPLY;
  9392  0028CA  0E00               	movlw	0
  9393  0028CC  6F3B               	movwf	(ARP_replyIfNeeded@reply+7)& (0+255),b
  9394  0028CE  0E02               	movlw	2
  9395  0028D0  6F3A               	movwf	(ARP_replyIfNeeded@reply+6)& (0+255),b
  9396                           
  9397                           ; BSR set to: 1
  9398                           ;arp.c: 153: reply.senderIPAddress = senderIP;
  9399  0028D2  C120  F142         	movff	ARP_replyIfNeeded@senderIP,ARP_replyIfNeeded@reply+14
  9400  0028D6  C121  F143         	movff	ARP_replyIfNeeded@senderIP+1,ARP_replyIfNeeded@reply+15
  9401  0028DA  C122  F144         	movff	ARP_replyIfNeeded@senderIP+2,ARP_replyIfNeeded@reply+16
  9402  0028DE  C123  F145         	movff	ARP_replyIfNeeded@senderIP+3,ARP_replyIfNeeded@reply+17
  9403                           
  9404                           ; BSR set to: 1
  9405                           ;arp.c: 154: reply.senderMACAddress = senderMAC;
  9406  0028E2  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9407  0028E6  EE11  F03C         	lfsr	1,ARP_replyIfNeeded@reply+8
  9408  0028EA  0E05               	movlw	5
  9409  0028EC                     u9701:
  9410  0028EC  CFDB FFE3          	movff	plusw2,plusw1
  9411  0028F0  06E8               	decf	wreg,f,c
  9412  0028F2  E2FC               	bc	u9701
  9413                           
  9414                           ; BSR set to: 1
  9415                           ;arp.c: 155: reply.targetIPAddress = targetIP;
  9416  0028F4  C130  F14C         	movff	ARP_replyIfNeeded@targetIP,ARP_replyIfNeeded@reply+24
  9417  0028F8  C131  F14D         	movff	ARP_replyIfNeeded@targetIP+1,ARP_replyIfNeeded@reply+25
  9418  0028FC  C132  F14E         	movff	ARP_replyIfNeeded@targetIP+2,ARP_replyIfNeeded@reply+26
  9419  002900  C133  F14F         	movff	ARP_replyIfNeeded@targetIP+3,ARP_replyIfNeeded@reply+27
  9420                           
  9421                           ; BSR set to: 1
  9422                           ;arp.c: 156: reply.targetMACAddress = targetMAC;
  9423  002904  EE21  F02A         	lfsr	2,ARP_replyIfNeeded@targetMAC
  9424  002908  EE11  F046         	lfsr	1,ARP_replyIfNeeded@reply+18
  9425  00290C  0E05               	movlw	5
  9426  00290E                     u9711:
  9427  00290E  CFDB FFE3          	movff	plusw2,plusw1
  9428  002912  06E8               	decf	wreg,f,c
  9429  002914  E2FC               	bc	u9711
  9430                           
  9431                           ; BSR set to: 1
  9432                           ;arp.c: 158: ARP_send(reply);
  9433  002916  EE21  F034         	lfsr	2,ARP_replyIfNeeded@reply
  9434  00291A  EE00  F0A1         	lfsr	0,ARP_send@arp
  9435  00291E  0E1F               	movlw	31
  9436  002920                     u9721:
  9437  002920  CFDB FFEB          	movff	plusw2,plusw0
  9438  002924  06E8               	decf	wreg,f,c
  9439  002926  E2FC               	bc	u9721
  9440  002928  ECFB  F00D         	call	_ARP_send	;wreg free
  9441                           
  9442                           ;arp.c: 160: UARTTransmitText("[Reply sent to ");
  9443  00292C  0E0A               	movlw	low STR_61
  9444  00292E  0100               	movlb	0	; () banked
  9445  002930  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9446  002932  0E7F               	movlw	high STR_61
  9447  002934  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9448  002936  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  9449                           
  9450                           ;arp.c: 161: UARTTransmitText(macToString(reply.targetMACAddress));
  9451  00293A  EE21  F046         	lfsr	2,ARP_replyIfNeeded@reply+18
  9452  00293E  EE00  F07A         	lfsr	0,macToString@addr
  9453  002942  0E05               	movlw	5
  9454  002944                     u9731:
  9455  002944  CFDB FFEB          	movff	plusw2,plusw0
  9456  002948  06E8               	decf	wreg,f,c
  9457  00294A  E2FC               	bc	u9731
  9458  00294C  EC7C  F016         	call	_macToString	;wreg free
  9459  002950  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9460  002954  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9461  002958  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  9462                           
  9463                           ;arp.c: 162: UARTTransmitText(", ");
  9464  00295C  0E89               	movlw	low (STR_36+17)
  9465  00295E  0100               	movlb	0	; () banked
  9466  002960  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9467  002962  0E7E               	movlw	high (STR_36+17)
  9468  002964  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9469  002966  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  9470                           
  9471                           ;arp.c: 163: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9472  00296A  C14C  F067         	movff	ARP_replyIfNeeded@reply+24,ipAdressToString@ip
  9473  00296E  C14D  F068         	movff	ARP_replyIfNeeded@reply+25,ipAdressToString@ip+1
  9474  002972  C14E  F069         	movff	ARP_replyIfNeeded@reply+26,ipAdressToString@ip+2
  9475  002976  C14F  F06A         	movff	ARP_replyIfNeeded@reply+27,ipAdressToString@ip+3
  9476  00297A  EC04  F00D         	call	_ipAdressToString	;wreg free
  9477  00297E  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9478  002982  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9479  002986  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  9480                           
  9481                           ;arp.c: 164: UARTTransmitText("]");
  9482  00298A  0EFC               	movlw	low (STR_18+1)
  9483  00298C  0100               	movlb	0	; () banked
  9484  00298E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9485  002990  0E7F               	movlw	high (STR_18+1)
  9486  002992  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9487  002994  ECFB  F01E         	call	_UARTTransmitText	;wreg free
  9488  002998  0012               	return		;funcret
  9489  00299A                     __end_of_ARP_replyIfNeeded:
  9490                           	opt stack 0
  9491                           tblptru	equ	0xFF8
  9492                           tblptrh	equ	0xFF7
  9493                           tblptrl	equ	0xFF6
  9494                           tablat	equ	0xFF5
  9495                           prodh	equ	0xFF4
  9496                           prodl	equ	0xFF3
  9497                           intcon	equ	0xFF2
  9498                           intcon3	equ	0xFF0
  9499                           postinc0	equ	0xFEE
  9500                           plusw0	equ	0xFEB
  9501                           fsr0h	equ	0xFEA
  9502                           fsr0l	equ	0xFE9
  9503                           wreg	equ	0xFE8
  9504                           indf1	equ	0xFE7
  9505                           postinc1	equ	0xFE6
  9506                           postdec1	equ	0xFE5
  9507                           plusw1	equ	0xFE3
  9508                           fsr1h	equ	0xFE2
  9509                           fsr1l	equ	0xFE1
  9510                           indf2	equ	0xFDF
  9511                           postinc2	equ	0xFDE
  9512                           postdec2	equ	0xFDD
  9513                           plusw2	equ	0xFDB
  9514                           fsr2h	equ	0xFDA
  9515                           fsr2l	equ	0xFD9
  9516                           status	equ	0xFD8
  9517                           
  9518 ;; *************** function _macToString *****************
  9519 ;; Defined at:
  9520 ;;		line 124 in file "src/system/uart.c"
  9521 ;; Parameters:    Size  Location     Type
  9522 ;;  addr            6   26[BANK0 ] struct macaddress
  9523 ;; Auto vars:     Size  Location     Type
  9524 ;;  i               2   53[BANK0 ] int 
  9525 ;;  address        18   33[BANK0 ] unsigned char [18]
  9526 ;;  j               1   55[BANK0 ] unsigned char 
  9527 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9528 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9529 ;; Return value:  Size  Location     Type
  9530 ;;                  2   26[BANK0 ] PTR unsigned char 
  9531 ;; Registers used:
  9532 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9533 ;; Tracked objects:
  9534 ;;		On entry : 0/0
  9535 ;;		On exit  : 0/0
  9536 ;;		Unchanged: 0/0
  9537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9538 ;;      Params:         0       6       0       0       0       0       0       0       0
  9539 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9540 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9541 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9542 ;;Total ram usage:       30 bytes
  9543 ;; Hardware stack levels used:    1
  9544 ;; Hardware stack levels required when called:    4
  9545 ;; This function calls:
  9546 ;;		Nothing
  9547 ;; This function is called by:
  9548 ;;		_ethernet_rxGetNewFrame
  9549 ;;		_main
  9550 ;;		_ARP_handleNewPacket
  9551 ;;		_ARP_replyIfNeeded
  9552 ;;		_ipv4_sendFrame
  9553 ;;		_arpEntryToString
  9554 ;; This function uses a non-reentrant model
  9555 ;;
  9556                           
  9557                           	psect	text29
  9558  002CF8                     __ptext29:
  9559                           	opt stack 0
  9560  002CF8                     _macToString:
  9561                           	opt stack 26
  9562                           
  9563                           ;uart.c: 125: char address[] = "??:??:??:??:??:??";
  9564                           
  9565                           ;incstack = 0
  9566  002CF8  EE22  F0B5         	lfsr	2,macToString@F5785
  9567  002CFC  EE10  F081         	lfsr	1,macToString@address
  9568  002D00  0E11               	movlw	17
  9569  002D02                     u8701:
  9570  002D02  CFDB FFE3          	movff	plusw2,plusw1
  9571  002D06  06E8               	decf	wreg,f,c
  9572  002D08  E2FC               	bc	u8701
  9573                           
  9574                           ;uart.c: 126: uint8_t j = 0;
  9575  002D0A  0E00               	movlw	0
  9576  002D0C  0100               	movlb	0	; () banked
  9577  002D0E  6F97               	movwf	macToString@j& (0+255),b
  9578                           
  9579                           ; BSR set to: 0
  9580                           ;uart.c: 127: uint8_t firstDigit;
  9581                           ;uart.c: 128: uint8_t secondDigit;
  9582                           ;uart.c: 130: for (int i = 0; i < 6; i++) {
  9583  002D10  0E00               	movlw	0
  9584  002D12  6F96               	movwf	(macToString@i+1)& (0+255),b
  9585  002D14  0E00               	movlw	0
  9586  002D16  6F95               	movwf	macToString@i& (0+255),b
  9587                           
  9588                           ; BSR set to: 0
  9589  002D18  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9590  002D1A  D006               	goto	l754
  9591  002D1C  5196               	movf	(macToString@i+1)& (0+255),w,b
  9592  002D1E  E16B               	bnz	l755
  9593  002D20  0E06               	movlw	6
  9594  002D22  5D95               	subwf	macToString@i& (0+255),w,b
  9595  002D24  B0D8               	btfsc	status,0,c
  9596  002D26  D067               	goto	u8750
  9597  002D28                     l754:
  9598                           
  9599                           ; BSR set to: 0
  9600                           ;uart.c: 131: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9601                           
  9602                           ; BSR set to: 0
  9603  002D28  0E7A               	movlw	low macToString@addr
  9604  002D2A  2595               	addwf	macToString@i& (0+255),w,b
  9605  002D2C  6ED9               	movwf	fsr2l,c
  9606  002D2E  0E00               	movlw	high macToString@addr
  9607  002D30  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9608  002D32  6EDA               	movwf	fsr2h,c
  9609  002D34  50DF               	movf	indf2,w,c
  9610  002D36  6F80               	movwf	??_macToString& (0+255),b
  9611  002D38  3980               	swapf	??_macToString& (0+255),w,b
  9612  002D3A  0B0F               	andlw	15
  9613  002D3C  0B0F               	andlw	15
  9614  002D3E  6F93               	movwf	macToString@firstDigit& (0+255),b
  9615                           
  9616                           ;uart.c: 132: secondDigit = addr.address[i] & 0x0F;
  9617  002D40  0E7A               	movlw	low macToString@addr
  9618  002D42  2595               	addwf	macToString@i& (0+255),w,b
  9619  002D44  6ED9               	movwf	fsr2l,c
  9620  002D46  0E00               	movlw	high macToString@addr
  9621  002D48  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9622  002D4A  6EDA               	movwf	fsr2h,c
  9623  002D4C  50DF               	movf	indf2,w,c
  9624  002D4E  0B0F               	andlw	15
  9625  002D50  6F94               	movwf	macToString@secondDigit& (0+255),b
  9626                           
  9627                           ; BSR set to: 0
  9628                           ;uart.c: 134: firstDigit += 0x30;
  9629  002D52  0E30               	movlw	48
  9630  002D54  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9631                           
  9632                           ; BSR set to: 0
  9633                           ;uart.c: 135: secondDigit += 0x30;
  9634  002D56  0E30               	movlw	48
  9635  002D58  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9636                           
  9637                           ; BSR set to: 0
  9638                           ;uart.c: 137: if (firstDigit > '9') {
  9639  002D5A  0E39               	movlw	57
  9640  002D5C  6593               	cpfsgt	macToString@firstDigit& (0+255),b
  9641  002D5E  D00C               	goto	l756
  9642                           
  9643                           ; BSR set to: 0
  9644                           ;uart.c: 138: address[j++] = firstDigit + 7;
  9645  002D60  5197               	movf	macToString@j& (0+255),w,b
  9646  002D62  0D01               	mullw	1
  9647  002D64  0E81               	movlw	low macToString@address
  9648  002D66  24F3               	addwf	prodl,w,c
  9649  002D68  6ED9               	movwf	fsr2l,c
  9650  002D6A  0E00               	movlw	high macToString@address
  9651  002D6C  20F4               	addwfc	prodh,w,c
  9652  002D6E  6EDA               	movwf	fsr2h,c
  9653  002D70  5193               	movf	macToString@firstDigit& (0+255),w,b
  9654  002D72  0F07               	addlw	7
  9655  002D74  6EDF               	movwf	indf2,c
  9656  002D76  D00A               	goto	l7394
  9657  002D78                     l756:
  9658                           
  9659                           ; BSR set to: 0
  9660                           ;uart.c: 140: address[j++] = firstDigit;
  9661                           
  9662                           ; BSR set to: 0
  9663  002D78  5197               	movf	macToString@j& (0+255),w,b
  9664  002D7A  0D01               	mullw	1
  9665  002D7C  0E81               	movlw	low macToString@address
  9666  002D7E  24F3               	addwf	prodl,w,c
  9667  002D80  6ED9               	movwf	fsr2l,c
  9668  002D82  0E00               	movlw	high macToString@address
  9669  002D84  20F4               	addwfc	prodh,w,c
  9670  002D86  6EDA               	movwf	fsr2h,c
  9671  002D88  C093  FFDF         	movff	macToString@firstDigit,indf2
  9672  002D8C                     l7394:
  9673                           
  9674                           ; BSR set to: 0
  9675  002D8C  2B97               	incf	macToString@j& (0+255),f,b
  9676                           
  9677                           ; BSR set to: 0
  9678                           ;uart.c: 141: }
  9679                           ;uart.c: 142: if (secondDigit > '9') {
  9680                           
  9681                           ; BSR set to: 0
  9682  002D8E  0E39               	movlw	57
  9683  002D90  6594               	cpfsgt	macToString@secondDigit& (0+255),b
  9684  002D92  D00C               	goto	l758
  9685                           
  9686                           ; BSR set to: 0
  9687                           ;uart.c: 143: address[j++] = secondDigit + 7;
  9688  002D94  5197               	movf	macToString@j& (0+255),w,b
  9689  002D96  0D01               	mullw	1
  9690  002D98  0E81               	movlw	low macToString@address
  9691  002D9A  24F3               	addwf	prodl,w,c
  9692  002D9C  6ED9               	movwf	fsr2l,c
  9693  002D9E  0E00               	movlw	high macToString@address
  9694  002DA0  20F4               	addwfc	prodh,w,c
  9695  002DA2  6EDA               	movwf	fsr2h,c
  9696  002DA4  5194               	movf	macToString@secondDigit& (0+255),w,b
  9697  002DA6  0F07               	addlw	7
  9698  002DA8  6EDF               	movwf	indf2,c
  9699  002DAA  D00A               	goto	l7404
  9700  002DAC                     l758:
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;uart.c: 145: address[j++] = secondDigit;
  9704                           
  9705                           ; BSR set to: 0
  9706  002DAC  5197               	movf	macToString@j& (0+255),w,b
  9707  002DAE  0D01               	mullw	1
  9708  002DB0  0E81               	movlw	low macToString@address
  9709  002DB2  24F3               	addwf	prodl,w,c
  9710  002DB4  6ED9               	movwf	fsr2l,c
  9711  002DB6  0E00               	movlw	high macToString@address
  9712  002DB8  20F4               	addwfc	prodh,w,c
  9713  002DBA  6EDA               	movwf	fsr2h,c
  9714  002DBC  C094  FFDF         	movff	macToString@secondDigit,indf2
  9715  002DC0                     l7404:
  9716                           
  9717                           ; BSR set to: 0
  9718  002DC0  2B97               	incf	macToString@j& (0+255),f,b
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;uart.c: 146: }
  9722                           ;uart.c: 148: if (i < 5) {
  9723                           
  9724                           ; BSR set to: 0
  9725  002DC2  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9726  002DC4  D006               	goto	u8740
  9727  002DC6  5196               	movf	(macToString@i+1)& (0+255),w,b
  9728  002DC8  E10F               	bnz	l7412
  9729  002DCA  0E05               	movlw	5
  9730  002DCC  5D95               	subwf	macToString@i& (0+255),w,b
  9731  002DCE  B0D8               	btfsc	status,0,c
  9732  002DD0  D00B               	goto	l760
  9733  002DD2                     u8740:
  9734                           
  9735                           ; BSR set to: 0
  9736                           ;uart.c: 149: address[j++] = ':';
  9737  002DD2  5197               	movf	macToString@j& (0+255),w,b
  9738  002DD4  0D01               	mullw	1
  9739  002DD6  0E81               	movlw	low macToString@address
  9740  002DD8  24F3               	addwf	prodl,w,c
  9741  002DDA  6ED9               	movwf	fsr2l,c
  9742  002DDC  0E00               	movlw	high macToString@address
  9743  002DDE  20F4               	addwfc	prodh,w,c
  9744  002DE0  6EDA               	movwf	fsr2h,c
  9745  002DE2  0E3A               	movlw	58
  9746  002DE4  6EDF               	movwf	indf2,c
  9747                           
  9748                           ; BSR set to: 0
  9749  002DE6  2B97               	incf	macToString@j& (0+255),f,b
  9750  002DE8                     l760:
  9751  002DE8                     l7412:
  9752                           
  9753                           ; BSR set to: 0
  9754  002DE8  4B95               	infsnz	macToString@i& (0+255),f,b
  9755  002DEA  2B96               	incf	(macToString@i+1)& (0+255),f,b
  9756                           
  9757                           ; BSR set to: 0
  9758  002DEC  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9759  002DEE  D79C               	goto	l754
  9760  002DF0  5196               	movf	(macToString@i+1)& (0+255),w,b
  9761  002DF2  E101               	bnz	l7416
  9762  002DF4  D795               	goto	L1
  9763  002DF6                     u8750:
  9764  002DF6                     l755:
  9765  002DF6                     l7416:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;uart.c: 150: }
  9769                           ;uart.c: 151: }
  9770                           ;uart.c: 152: return &address;
  9771  002DF6  0E81               	movlw	low macToString@address
  9772  002DF8  6F7A               	movwf	?_macToString& (0+255),b
  9773  002DFA  0E00               	movlw	high macToString@address
  9774  002DFC  6F7B               	movwf	(?_macToString+1)& (0+255),b
  9775  002DFE  0012               	return	
  9776  002E00                     __end_of_macToString:
  9777                           	opt stack 0
  9778                           tblptru	equ	0xFF8
  9779                           tblptrh	equ	0xFF7
  9780                           tblptrl	equ	0xFF6
  9781                           tablat	equ	0xFF5
  9782                           prodh	equ	0xFF4
  9783                           prodl	equ	0xFF3
  9784                           intcon	equ	0xFF2
  9785                           intcon3	equ	0xFF0
  9786                           postinc0	equ	0xFEE
  9787                           plusw0	equ	0xFEB
  9788                           fsr0h	equ	0xFEA
  9789                           fsr0l	equ	0xFE9
  9790                           wreg	equ	0xFE8
  9791                           indf1	equ	0xFE7
  9792                           postinc1	equ	0xFE6
  9793                           postdec1	equ	0xFE5
  9794                           plusw1	equ	0xFE3
  9795                           fsr1h	equ	0xFE2
  9796                           fsr1l	equ	0xFE1
  9797                           indf2	equ	0xFDF
  9798                           postinc2	equ	0xFDE
  9799                           postdec2	equ	0xFDD
  9800                           plusw2	equ	0xFDB
  9801                           fsr2h	equ	0xFDA
  9802                           fsr2l	equ	0xFD9
  9803                           status	equ	0xFD8
  9804                           
  9805 ;; *************** function _ipAdressToString *****************
  9806 ;; Defined at:
  9807 ;;		line 166 in file "src/system/uart.c"
  9808 ;; Parameters:    Size  Location     Type
  9809 ;;  ip              4    7[BANK0 ] struct ipv4_address
  9810 ;; Auto vars:     Size  Location     Type
  9811 ;;  i               1   28[BANK0 ] unsigned char 
  9812 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
  9813 ;;  tens            4   19[BANK0 ] unsigned char [4]
  9814 ;;  ones            4   15[BANK0 ] unsigned char [4]
  9815 ;;  pointer         1   27[BANK0 ] unsigned char 
  9816 ;; Return value:  Size  Location     Type
  9817 ;;                  2    7[BANK0 ] PTR unsigned char 
  9818 ;; Registers used:
  9819 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9820 ;; Tracked objects:
  9821 ;;		On entry : 0/0
  9822 ;;		On exit  : 0/0
  9823 ;;		Unchanged: 0/0
  9824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9825 ;;      Params:         0       4       0       0       0       0       0       0       0
  9826 ;;      Locals:         0      14       0       0       0       0       0       0       0
  9827 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9828 ;;      Totals:         0      22       0       0       0       0       0       0       0
  9829 ;;Total ram usage:       22 bytes
  9830 ;; Hardware stack levels used:    1
  9831 ;; Hardware stack levels required when called:    5
  9832 ;; This function calls:
  9833 ;;		___lwdiv
  9834 ;;		___lwmod
  9835 ;; This function is called by:
  9836 ;;		_handleStackBackgroundTasks
  9837 ;;		_ARP_handleNewPacket
  9838 ;;		_ARP_replyIfNeeded
  9839 ;;		_ipv4_sendFrame
  9840 ;;		_arpEntryToString
  9841 ;; This function uses a non-reentrant model
  9842 ;;
  9843                           
  9844                           	psect	text30
  9845  001A08                     __ptext30:
  9846                           	opt stack 0
  9847  001A08                     _ipAdressToString:
  9848                           	opt stack 23
  9849                           
  9850                           ;uart.c: 167: char static address [] = "???.???.???.???";
  9851                           ;uart.c: 168: uint8_t hundreds[4];
  9852                           ;uart.c: 169: uint8_t tens[4];
  9853                           ;uart.c: 170: uint8_t ones[4];
  9854                           ;uart.c: 171: uint8_t pointer = 0;
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;incstack = 0
  9858  001A08  0E00               	movlw	0
  9859  001A0A  0100               	movlb	0	; () banked
  9860  001A0C  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
  9861                           
  9862                           ;uart.c: 173: for (uint8_t i = 0; i < 4; i++) {
  9863  001A0E  0E00               	movlw	0
  9864  001A10  6F7C               	movwf	ipAdressToString@i& (0+255),b
  9865  001A12                     l7462:
  9866                           
  9867                           ; BSR set to: 0
  9868  001A12  0E03               	movlw	3
  9869  001A14  657C               	cpfsgt	ipAdressToString@i& (0+255),b
  9870  001A16  D001               	goto	l774
  9871  001A18  D0DF               	goto	u8870
  9872  001A1A                     l774:
  9873                           
  9874                           ; BSR set to: 0
  9875                           ;uart.c: 175: hundreds[i] = ip.address[i] / 100u;
  9876                           
  9877                           ; BSR set to: 0
  9878  001A1A  517C               	movf	ipAdressToString@i& (0+255),w,b
  9879  001A1C  0D01               	mullw	1
  9880  001A1E  0E77               	movlw	low ipAdressToString@hundreds
  9881  001A20  24F3               	addwf	prodl,w,c
  9882  001A22  6ED9               	movwf	fsr2l,c
  9883  001A24  0E00               	movlw	high ipAdressToString@hundreds
  9884  001A26  20F4               	addwfc	prodh,w,c
  9885  001A28  6EDA               	movwf	fsr2h,c
  9886  001A2A  517C               	movf	ipAdressToString@i& (0+255),w,b
  9887  001A2C  0D01               	mullw	1
  9888  001A2E  0E67               	movlw	low ipAdressToString@ip
  9889  001A30  24F3               	addwf	prodl,w,c
  9890  001A32  6EE1               	movwf	fsr1l,c
  9891  001A34  0E00               	movlw	high ipAdressToString@ip
  9892  001A36  20F4               	addwfc	prodh,w,c
  9893  001A38  6EE2               	movwf	fsr1h,c
  9894  001A3A  50E7               	movf	indf1,w,c
  9895  001A3C  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9896  001A3E  516B               	movf	??_ipAdressToString& (0+255),w,b
  9897  001A40  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9898  001A42  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
  9899  001A44  0E00               	movlw	0
  9900  001A46  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9901  001A48  0E64               	movlw	100
  9902  001A4A  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9903  001A4C  EC50  F01F         	call	___lwdiv	;wreg free
  9904  001A50  0100               	movlb	0	; () banked
  9905  001A52  5160               	movf	?___lwdiv& (0+255),w,b
  9906  001A54  6EDF               	movwf	indf2,c
  9907                           
  9908                           ;uart.c: 176: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
  9909  001A56  517C               	movf	ipAdressToString@i& (0+255),w,b
  9910  001A58  0D01               	mullw	1
  9911  001A5A  0E73               	movlw	low ipAdressToString@tens
  9912  001A5C  24F3               	addwf	prodl,w,c
  9913  001A5E  6ED9               	movwf	fsr2l,c
  9914  001A60  0E00               	movlw	high ipAdressToString@tens
  9915  001A62  20F4               	addwfc	prodh,w,c
  9916  001A64  6EDA               	movwf	fsr2h,c
  9917  001A66  517C               	movf	ipAdressToString@i& (0+255),w,b
  9918  001A68  0D01               	mullw	1
  9919  001A6A  0E77               	movlw	low ipAdressToString@hundreds
  9920  001A6C  24F3               	addwf	prodl,w,c
  9921  001A6E  6EE1               	movwf	fsr1l,c
  9922  001A70  0E00               	movlw	high ipAdressToString@hundreds
  9923  001A72  20F4               	addwfc	prodh,w,c
  9924  001A74  6EE2               	movwf	fsr1h,c
  9925  001A76  50E7               	movf	indf1,w,c
  9926  001A78  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9927  001A7A  516B               	movf	??_ipAdressToString& (0+255),w,b
  9928  001A7C  0D64               	mullw	100
  9929  001A7E  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
  9930  001A82  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
  9931  001A86  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
  9932  001A88  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
  9933  001A8A  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
  9934  001A8C  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
  9935  001A8E  517C               	movf	ipAdressToString@i& (0+255),w,b
  9936  001A90  0D01               	mullw	1
  9937  001A92  0E67               	movlw	low ipAdressToString@ip
  9938  001A94  24F3               	addwf	prodl,w,c
  9939  001A96  6EE1               	movwf	fsr1l,c
  9940  001A98  0E00               	movlw	high ipAdressToString@ip
  9941  001A9A  20F4               	addwfc	prodh,w,c
  9942  001A9C  6EE2               	movwf	fsr1h,c
  9943  001A9E  50E7               	movf	indf1,w,c
  9944  001AA0  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
  9945  001AA2  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
  9946  001AA4  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
  9947  001AA6  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9948  001AA8  0E00               	movlw	0
  9949  001AAA  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
  9950  001AAC  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
  9951  001AAE  0E00               	movlw	0
  9952  001AB0  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9953  001AB2  0E0A               	movlw	10
  9954  001AB4  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9955  001AB6  EC50  F01F         	call	___lwdiv	;wreg free
  9956  001ABA  0100               	movlb	0	; () banked
  9957  001ABC  5160               	movf	?___lwdiv& (0+255),w,b
  9958  001ABE  6EDF               	movwf	indf2,c
  9959                           
  9960                           ;uart.c: 177: ones[i] = ip.address[i] % 10u;
  9961  001AC0  517C               	movf	ipAdressToString@i& (0+255),w,b
  9962  001AC2  0D01               	mullw	1
  9963  001AC4  0E6F               	movlw	low ipAdressToString@ones
  9964  001AC6  24F3               	addwf	prodl,w,c
  9965  001AC8  6ED9               	movwf	fsr2l,c
  9966  001ACA  0E00               	movlw	high ipAdressToString@ones
  9967  001ACC  20F4               	addwfc	prodh,w,c
  9968  001ACE  6EDA               	movwf	fsr2h,c
  9969  001AD0  517C               	movf	ipAdressToString@i& (0+255),w,b
  9970  001AD2  0D01               	mullw	1
  9971  001AD4  0E67               	movlw	low ipAdressToString@ip
  9972  001AD6  24F3               	addwf	prodl,w,c
  9973  001AD8  6EE1               	movwf	fsr1l,c
  9974  001ADA  0E00               	movlw	high ipAdressToString@ip
  9975  001ADC  20F4               	addwfc	prodh,w,c
  9976  001ADE  6EE2               	movwf	fsr1h,c
  9977  001AE0  50E7               	movf	indf1,w,c
  9978  001AE2  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9979  001AE4  516B               	movf	??_ipAdressToString& (0+255),w,b
  9980  001AE6  6F60               	movwf	___lwmod@dividend& (0+255),b
  9981  001AE8  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
  9982  001AEA  0E00               	movlw	0
  9983  001AEC  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  9984  001AEE  0E0A               	movlw	10
  9985  001AF0  6F62               	movwf	___lwmod@divisor& (0+255),b
  9986  001AF2  EC39  F020         	call	___lwmod	;wreg free
  9987  001AF6  0100               	movlb	0	; () banked
  9988  001AF8  5160               	movf	?___lwmod& (0+255),w,b
  9989  001AFA  6EDF               	movwf	indf2,c
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;uart.c: 179: if (hundreds[i] > 0)
  9993  001AFC  517C               	movf	ipAdressToString@i& (0+255),w,b
  9994  001AFE  0D01               	mullw	1
  9995  001B00  0E77               	movlw	low ipAdressToString@hundreds
  9996  001B02  24F3               	addwf	prodl,w,c
  9997  001B04  6ED9               	movwf	fsr2l,c
  9998  001B06  0E00               	movlw	high ipAdressToString@hundreds
  9999  001B08  20F4               	addwfc	prodh,w,c
 10000  001B0A  6EDA               	movwf	fsr2h,c
 10001  001B0C  50DF               	movf	indf2,w,c
 10002  001B0E  B4D8               	btfsc	status,2,c
 10003  001B10  D014               	goto	l776
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;uart.c: 180: address[pointer++] = hundreds[i] + 0x30;
 10007  001B12  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10008  001B14  0D01               	mullw	1
 10009  001B16  0ED3               	movlw	low ipAdressToString@address
 10010  001B18  24F3               	addwf	prodl,w,c
 10011  001B1A  6ED9               	movwf	fsr2l,c
 10012  001B1C  0E02               	movlw	high ipAdressToString@address
 10013  001B1E  20F4               	addwfc	prodh,w,c
 10014  001B20  6EDA               	movwf	fsr2h,c
 10015  001B22  517C               	movf	ipAdressToString@i& (0+255),w,b
 10016  001B24  0D01               	mullw	1
 10017  001B26  0E77               	movlw	low ipAdressToString@hundreds
 10018  001B28  24F3               	addwf	prodl,w,c
 10019  001B2A  6EE1               	movwf	fsr1l,c
 10020  001B2C  0E00               	movlw	high ipAdressToString@hundreds
 10021  001B2E  20F4               	addwfc	prodh,w,c
 10022  001B30  6EE2               	movwf	fsr1h,c
 10023  001B32  50E7               	movf	indf1,w,c
 10024  001B34  0F30               	addlw	48
 10025  001B36  6EDF               	movwf	indf2,c
 10026                           
 10027                           ; BSR set to: 0
 10028  001B38  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10029  001B3A                     l776:
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;uart.c: 181: if ((tens[i] > 0) || hundreds[i] > 0)
 10033                           
 10034                           ; BSR set to: 0
 10035  001B3A  517C               	movf	ipAdressToString@i& (0+255),w,b
 10036  001B3C  0D01               	mullw	1
 10037  001B3E  0E73               	movlw	low ipAdressToString@tens
 10038  001B40  24F3               	addwf	prodl,w,c
 10039  001B42  6ED9               	movwf	fsr2l,c
 10040  001B44  0E00               	movlw	high ipAdressToString@tens
 10041  001B46  20F4               	addwfc	prodh,w,c
 10042  001B48  6EDA               	movwf	fsr2h,c
 10043  001B4A  50DF               	movf	indf2,w,c
 10044  001B4C  A4D8               	btfss	status,2,c
 10045  001B4E  D00B               	goto	u8850
 10046                           
 10047                           ; BSR set to: 0
 10048  001B50  517C               	movf	ipAdressToString@i& (0+255),w,b
 10049  001B52  0D01               	mullw	1
 10050  001B54  0E77               	movlw	low ipAdressToString@hundreds
 10051  001B56  24F3               	addwf	prodl,w,c
 10052  001B58  6ED9               	movwf	fsr2l,c
 10053  001B5A  0E00               	movlw	high ipAdressToString@hundreds
 10054  001B5C  20F4               	addwfc	prodh,w,c
 10055  001B5E  6EDA               	movwf	fsr2h,c
 10056  001B60  50DF               	movf	indf2,w,c
 10057  001B62  B4D8               	btfsc	status,2,c
 10058  001B64  D014               	goto	l777
 10059  001B66                     u8850:
 10060                           
 10061                           ; BSR set to: 0
 10062                           ;uart.c: 182: address[pointer++] = tens[i] + 0x30;
 10063                           
 10064                           ; BSR set to: 0
 10065  001B66  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10066  001B68  0D01               	mullw	1
 10067  001B6A  0ED3               	movlw	low ipAdressToString@address
 10068  001B6C  24F3               	addwf	prodl,w,c
 10069  001B6E  6ED9               	movwf	fsr2l,c
 10070  001B70  0E02               	movlw	high ipAdressToString@address
 10071  001B72  20F4               	addwfc	prodh,w,c
 10072  001B74  6EDA               	movwf	fsr2h,c
 10073  001B76  517C               	movf	ipAdressToString@i& (0+255),w,b
 10074  001B78  0D01               	mullw	1
 10075  001B7A  0E73               	movlw	low ipAdressToString@tens
 10076  001B7C  24F3               	addwf	prodl,w,c
 10077  001B7E  6EE1               	movwf	fsr1l,c
 10078  001B80  0E00               	movlw	high ipAdressToString@tens
 10079  001B82  20F4               	addwfc	prodh,w,c
 10080  001B84  6EE2               	movwf	fsr1h,c
 10081  001B86  50E7               	movf	indf1,w,c
 10082  001B88  0F30               	addlw	48
 10083  001B8A  6EDF               	movwf	indf2,c
 10084                           
 10085                           ; BSR set to: 0
 10086  001B8C  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10087  001B8E                     l777:
 10088                           
 10089                           ; BSR set to: 0
 10090                           ;uart.c: 183: address[pointer++] = ones[i] + 0x30;
 10091                           
 10092                           ; BSR set to: 0
 10093  001B8E  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10094  001B90  0D01               	mullw	1
 10095  001B92  0ED3               	movlw	low ipAdressToString@address
 10096  001B94  24F3               	addwf	prodl,w,c
 10097  001B96  6ED9               	movwf	fsr2l,c
 10098  001B98  0E02               	movlw	high ipAdressToString@address
 10099  001B9A  20F4               	addwfc	prodh,w,c
 10100  001B9C  6EDA               	movwf	fsr2h,c
 10101  001B9E  517C               	movf	ipAdressToString@i& (0+255),w,b
 10102  001BA0  0D01               	mullw	1
 10103  001BA2  0E6F               	movlw	low ipAdressToString@ones
 10104  001BA4  24F3               	addwf	prodl,w,c
 10105  001BA6  6EE1               	movwf	fsr1l,c
 10106  001BA8  0E00               	movlw	high ipAdressToString@ones
 10107  001BAA  20F4               	addwfc	prodh,w,c
 10108  001BAC  6EE2               	movwf	fsr1h,c
 10109  001BAE  50E7               	movf	indf1,w,c
 10110  001BB0  0F30               	addlw	48
 10111  001BB2  6EDF               	movwf	indf2,c
 10112  001BB4  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10113                           
 10114                           ; BSR set to: 0
 10115                           ;uart.c: 184: if (i != 3)
 10116  001BB6  0E03               	movlw	3
 10117  001BB8  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 10118  001BBA  B4D8               	btfsc	status,2,c
 10119  001BBC  D00B               	goto	l780
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;uart.c: 185: address[pointer++] = '.';
 10123  001BBE  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10124  001BC0  0D01               	mullw	1
 10125  001BC2  0ED3               	movlw	low ipAdressToString@address
 10126  001BC4  24F3               	addwf	prodl,w,c
 10127  001BC6  6ED9               	movwf	fsr2l,c
 10128  001BC8  0E02               	movlw	high ipAdressToString@address
 10129  001BCA  20F4               	addwfc	prodh,w,c
 10130  001BCC  6EDA               	movwf	fsr2h,c
 10131  001BCE  0E2E               	movlw	46
 10132  001BD0  6EDF               	movwf	indf2,c
 10133                           
 10134                           ; BSR set to: 0
 10135  001BD2  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10136  001BD4                     l780:
 10137                           
 10138                           ; BSR set to: 0
 10139                           
 10140                           ; BSR set to: 0
 10141  001BD4  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 10142  001BD6  D71D               	goto	l7462
 10143  001BD8                     u8870:
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;uart.c: 186: }
 10147                           ;uart.c: 187: address[pointer] = '\0';
 10148                           
 10149                           ; BSR set to: 0
 10150  001BD8  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10151  001BDA  0D01               	mullw	1
 10152  001BDC  0ED3               	movlw	low ipAdressToString@address
 10153  001BDE  24F3               	addwf	prodl,w,c
 10154  001BE0  6ED9               	movwf	fsr2l,c
 10155  001BE2  0E02               	movlw	high ipAdressToString@address
 10156  001BE4  20F4               	addwfc	prodh,w,c
 10157  001BE6  6EDA               	movwf	fsr2h,c
 10158  001BE8  0E00               	movlw	0
 10159  001BEA  6EDF               	movwf	indf2,c
 10160                           
 10161                           ; BSR set to: 0
 10162                           ;uart.c: 188: return address;
 10163  001BEC  0ED3               	movlw	low ipAdressToString@address
 10164  001BEE  6F67               	movwf	?_ipAdressToString& (0+255),b
 10165  001BF0  0E02               	movlw	high ipAdressToString@address
 10166  001BF2  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 10167  001BF4  0012               	return	
 10168  001BF6                     __end_of_ipAdressToString:
 10169                           	opt stack 0
 10170                           tblptru	equ	0xFF8
 10171                           tblptrh	equ	0xFF7
 10172                           tblptrl	equ	0xFF6
 10173                           tablat	equ	0xFF5
 10174                           prodh	equ	0xFF4
 10175                           prodl	equ	0xFF3
 10176                           intcon	equ	0xFF2
 10177                           intcon3	equ	0xFF0
 10178                           postinc0	equ	0xFEE
 10179                           plusw0	equ	0xFEB
 10180                           fsr0h	equ	0xFEA
 10181                           fsr0l	equ	0xFE9
 10182                           wreg	equ	0xFE8
 10183                           indf1	equ	0xFE7
 10184                           postinc1	equ	0xFE6
 10185                           postdec1	equ	0xFE5
 10186                           plusw1	equ	0xFE3
 10187                           fsr1h	equ	0xFE2
 10188                           fsr1l	equ	0xFE1
 10189                           indf2	equ	0xFDF
 10190                           postinc2	equ	0xFDE
 10191                           postdec2	equ	0xFDD
 10192                           plusw2	equ	0xFDB
 10193                           fsr2h	equ	0xFDA
 10194                           fsr2l	equ	0xFD9
 10195                           status	equ	0xFD8
 10196                           
 10197 ;; *************** function ___lwmod *****************
 10198 ;; Defined at:
 10199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  dividend        2    0[BANK0 ] unsigned int 
 10202 ;;  divisor         2    2[BANK0 ] unsigned int 
 10203 ;; Auto vars:     Size  Location     Type
 10204 ;;  counter         1    4[BANK0 ] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  2    0[BANK0 ] unsigned int 
 10207 ;; Registers used:
 10208 ;;		wreg, status,2, status,0
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/0
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10214 ;;      Params:         0       4       0       0       0       0       0       0       0
 10215 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10217 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10218 ;;Total ram usage:        5 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:    4
 10221 ;; This function calls:
 10222 ;;		Nothing
 10223 ;; This function is called by:
 10224 ;;		_ipAdressToString
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text31
 10229  004072                     __ptext31:
 10230                           	opt stack 0
 10231  004072                     ___lwmod:
 10232                           	opt stack 23
 10233                           
 10234                           ; BSR set to: 0
 10235                           ;incstack = 0
 10236  004072  0100               	movlb	0	; () banked
 10237  004074  5162               	movf	___lwmod@divisor& (0+255),w,b
 10238  004076  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10239  004078  B4D8               	btfsc	status,2,c
 10240  00407A  D018               	goto	l1425
 10241                           
 10242                           ; BSR set to: 0
 10243  00407C  0E01               	movlw	1
 10244  00407E  6F64               	movwf	___lwmod@counter& (0+255),b
 10245  004080  D004               	goto	l1420
 10246  004082                     
 10247                           ; BSR set to: 0
 10248                           
 10249                           ; BSR set to: 0
 10250  004082  90D8               	bcf	status,0,c
 10251  004084  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 10252  004086  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10253  004088  2B64               	incf	___lwmod@counter& (0+255),f,b
 10254  00408A                     l1420:
 10255                           
 10256                           ; BSR set to: 0
 10257                           
 10258                           ; BSR set to: 0
 10259  00408A  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10260  00408C  D7FA               	goto	l1421
 10261  00408E                     u8560:
 10262                           
 10263                           ; BSR set to: 0
 10264                           
 10265                           ; BSR set to: 0
 10266                           
 10267                           ; BSR set to: 0
 10268  00408E  5162               	movf	___lwmod@divisor& (0+255),w,b
 10269  004090  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 10270  004092  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10271  004094  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10272  004096  A0D8               	btfss	status,0,c
 10273  004098  D004               	goto	l1424
 10274                           
 10275                           ; BSR set to: 0
 10276  00409A  5162               	movf	___lwmod@divisor& (0+255),w,b
 10277  00409C  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 10278  00409E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10279  0040A0  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10280  0040A2                     l1424:
 10281                           
 10282                           ; BSR set to: 0
 10283                           
 10284                           ; BSR set to: 0
 10285  0040A2  90D8               	bcf	status,0,c
 10286  0040A4  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10287  0040A6  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 10288                           
 10289                           ; BSR set to: 0
 10290  0040A8  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 10291  0040AA  D7F1               	goto	u8560
 10292  0040AC                     l1425:
 10293                           
 10294                           ; BSR set to: 0
 10295                           
 10296                           ; BSR set to: 0
 10297  0040AC  C060  F060         	movff	___lwmod@dividend,?___lwmod
 10298  0040B0  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 10299                           
 10300                           ; BSR set to: 0
 10301  0040B4  0012               	return		;funcret
 10302  0040B6                     __end_of___lwmod:
 10303                           	opt stack 0
 10304                           tblptru	equ	0xFF8
 10305                           tblptrh	equ	0xFF7
 10306                           tblptrl	equ	0xFF6
 10307                           tablat	equ	0xFF5
 10308                           prodh	equ	0xFF4
 10309                           prodl	equ	0xFF3
 10310                           intcon	equ	0xFF2
 10311                           intcon3	equ	0xFF0
 10312                           postinc0	equ	0xFEE
 10313                           plusw0	equ	0xFEB
 10314                           fsr0h	equ	0xFEA
 10315                           fsr0l	equ	0xFE9
 10316                           wreg	equ	0xFE8
 10317                           indf1	equ	0xFE7
 10318                           postinc1	equ	0xFE6
 10319                           postdec1	equ	0xFE5
 10320                           plusw1	equ	0xFE3
 10321                           fsr1h	equ	0xFE2
 10322                           fsr1l	equ	0xFE1
 10323                           indf2	equ	0xFDF
 10324                           postinc2	equ	0xFDE
 10325                           postdec2	equ	0xFDD
 10326                           plusw2	equ	0xFDB
 10327                           fsr2h	equ	0xFDA
 10328                           fsr2l	equ	0xFD9
 10329                           status	equ	0xFD8
 10330                           
 10331 ;; *************** function ___lwdiv *****************
 10332 ;; Defined at:
 10333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;  dividend        2    0[BANK0 ] unsigned int 
 10336 ;;  divisor         2    2[BANK0 ] unsigned int 
 10337 ;; Auto vars:     Size  Location     Type
 10338 ;;  quotient        2    5[BANK0 ] unsigned int 
 10339 ;;  counter         1    4[BANK0 ] unsigned char 
 10340 ;; Return value:  Size  Location     Type
 10341 ;;                  2    0[BANK0 ] unsigned int 
 10342 ;; Registers used:
 10343 ;;		wreg, status,2, status,0
 10344 ;; Tracked objects:
 10345 ;;		On entry : 0/0
 10346 ;;		On exit  : 0/0
 10347 ;;		Unchanged: 0/0
 10348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10349 ;;      Params:         0       4       0       0       0       0       0       0       0
 10350 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10351 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10352 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10353 ;;Total ram usage:        7 bytes
 10354 ;; Hardware stack levels used:    1
 10355 ;; Hardware stack levels required when called:    4
 10356 ;; This function calls:
 10357 ;;		Nothing
 10358 ;; This function is called by:
 10359 ;;		_ipAdressToString
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           	psect	text32
 10364  003EA0                     __ptext32:
 10365                           	opt stack 0
 10366  003EA0                     ___lwdiv:
 10367                           	opt stack 23
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;incstack = 0
 10371  003EA0  0E00               	movlw	0
 10372  003EA2  0100               	movlb	0	; () banked
 10373  003EA4  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10374  003EA6  0E00               	movlw	0
 10375  003EA8  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10376                           
 10377                           ; BSR set to: 0
 10378  003EAA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10379  003EAC  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10380  003EAE  B4D8               	btfsc	status,2,c
 10381  003EB0  D01C               	goto	l1415
 10382                           
 10383                           ; BSR set to: 0
 10384  003EB2  0E01               	movlw	1
 10385  003EB4  6F64               	movwf	___lwdiv@counter& (0+255),b
 10386  003EB6  D004               	goto	l1410
 10387  003EB8                     
 10388                           ; BSR set to: 0
 10389                           
 10390                           ; BSR set to: 0
 10391  003EB8  90D8               	bcf	status,0,c
 10392  003EBA  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10393  003EBC  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10394  003EBE  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10395  003EC0                     l1410:
 10396                           
 10397                           ; BSR set to: 0
 10398                           
 10399                           ; BSR set to: 0
 10400  003EC0  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10401  003EC2  D7FA               	goto	l1411
 10402  003EC4                     u8530:
 10403                           
 10404                           ; BSR set to: 0
 10405                           
 10406                           ; BSR set to: 0
 10407                           
 10408                           ; BSR set to: 0
 10409  003EC4  90D8               	bcf	status,0,c
 10410  003EC6  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10411  003EC8  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10412                           
 10413                           ; BSR set to: 0
 10414  003ECA  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10415  003ECC  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10416  003ECE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10417  003ED0  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10418  003ED2  A0D8               	btfss	status,0,c
 10419  003ED4  D005               	goto	l1414
 10420                           
 10421                           ; BSR set to: 0
 10422  003ED6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10423  003ED8  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10424  003EDA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10425  003EDC  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10426                           
 10427                           ; BSR set to: 0
 10428  003EDE  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10429  003EE0                     l1414:
 10430                           
 10431                           ; BSR set to: 0
 10432                           
 10433                           ; BSR set to: 0
 10434  003EE0  90D8               	bcf	status,0,c
 10435  003EE2  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10436  003EE4  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10437                           
 10438                           ; BSR set to: 0
 10439  003EE6  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10440  003EE8  D7ED               	goto	u8530
 10441  003EEA                     l1415:
 10442                           
 10443                           ; BSR set to: 0
 10444                           
 10445                           ; BSR set to: 0
 10446  003EEA  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10447  003EEE  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10448                           
 10449                           ; BSR set to: 0
 10450  003EF2  0012               	return		;funcret
 10451  003EF4                     __end_of___lwdiv:
 10452                           	opt stack 0
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           intcon3	equ	0xFF0
 10461                           postinc0	equ	0xFEE
 10462                           plusw0	equ	0xFEB
 10463                           fsr0h	equ	0xFEA
 10464                           fsr0l	equ	0xFE9
 10465                           wreg	equ	0xFE8
 10466                           indf1	equ	0xFE7
 10467                           postinc1	equ	0xFE6
 10468                           postdec1	equ	0xFE5
 10469                           plusw1	equ	0xFE3
 10470                           fsr1h	equ	0xFE2
 10471                           fsr1l	equ	0xFE1
 10472                           indf2	equ	0xFDF
 10473                           postinc2	equ	0xFDE
 10474                           postdec2	equ	0xFDD
 10475                           plusw2	equ	0xFDB
 10476                           fsr2h	equ	0xFDA
 10477                           fsr2l	equ	0xFD9
 10478                           status	equ	0xFD8
 10479                           
 10480 ;; *************** function _ethernetController_getMacAddress *****************
 10481 ;; Defined at:
 10482 ;;		line 158 in file "src/enc424j600/ENC424J600.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;  mac             6   20[BANK0 ] struct macaddress
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  6   14[BANK0 ] struct macaddress
 10489 ;; Registers used:
 10490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10496 ;;      Params:         0       6       0       0       0       0       0       0       0
 10497 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10498 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10499 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10500 ;;Total ram usage:       12 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    7
 10503 ;; This function calls:
 10504 ;;		_ENC424J600_readControlRegisterUnbanked
 10505 ;; This function is called by:
 10506 ;;		_main
 10507 ;;		_ARP_replyIfNeeded
 10508 ;;		_ARP_sendRequest
 10509 ;;		_ipv4_sendFrame
 10510 ;; This function uses a non-reentrant model
 10511 ;;
 10512                           
 10513                           	psect	text33
 10514  003AAA                     __ptext33:
 10515                           	opt stack 0
 10516  003AAA                     _ethernetController_getMacAddress:
 10517                           	opt stack 21
 10518                           
 10519                           ;ENC424J600.c: 159: macaddress_t mac;
 10520                           ;ENC424J600.c: 160: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 10521                           
 10522                           ; BSR set to: 0
 10523                           ;incstack = 0
 10524  003AAA  0E74               	movlw	low ethernetController_getMacAddress@mac
 10525  003AAC  0100               	movlb	0	; () banked
 10526  003AAE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10527  003AB0  0E00               	movlw	high ethernetController_getMacAddress@mac
 10528  003AB2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10529  003AB4  0E64               	movlw	100
 10530  003AB6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10531                           
 10532                           ;ENC424J600.c: 161: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 10533  003ABA  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 10534  003ABC  0100               	movlb	0	; () banked
 10535  003ABE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10536  003AC0  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 10537  003AC2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10538  003AC4  0E65               	movlw	101
 10539  003AC6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10540                           
 10541                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 10542  003ACA  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 10543  003ACC  0100               	movlb	0	; () banked
 10544  003ACE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10545  003AD0  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 10546  003AD2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10547  003AD4  0E62               	movlw	98
 10548  003AD6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10549                           
 10550                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 10551  003ADA  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 10552  003ADC  0100               	movlb	0	; () banked
 10553  003ADE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10554  003AE0  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 10555  003AE2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10556  003AE4  0E63               	movlw	99
 10557  003AE6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10558                           
 10559                           ;ENC424J600.c: 164: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 10560  003AEA  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 10561  003AEC  0100               	movlb	0	; () banked
 10562  003AEE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10563  003AF0  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 10564  003AF2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10565  003AF4  0E60               	movlw	96
 10566  003AF6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10567                           
 10568                           ;ENC424J600.c: 165: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 10569  003AFA  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 10570  003AFC  0100               	movlb	0	; () banked
 10571  003AFE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10572  003B00  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 10573  003B02  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10574  003B04  0E61               	movlw	97
 10575  003B06  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10576                           
 10577                           ;ENC424J600.c: 166: return mac;
 10578  003B0A  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 10579  003B0E  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 10580  003B12  0E05               	movlw	5
 10581  003B14                     u8621:
 10582  003B14  CFDB FFEB          	movff	plusw2,plusw0
 10583  003B18  06E8               	decf	wreg,f,c
 10584  003B1A  E2FC               	bc	u8621
 10585  003B1C  0012               	return	
 10586  003B1E                     __end_of_ethernetController_getMacAddress:
 10587                           	opt stack 0
 10588                           tblptru	equ	0xFF8
 10589                           tblptrh	equ	0xFF7
 10590                           tblptrl	equ	0xFF6
 10591                           tablat	equ	0xFF5
 10592                           prodh	equ	0xFF4
 10593                           prodl	equ	0xFF3
 10594                           intcon	equ	0xFF2
 10595                           intcon3	equ	0xFF0
 10596                           postinc0	equ	0xFEE
 10597                           plusw0	equ	0xFEB
 10598                           fsr0h	equ	0xFEA
 10599                           fsr0l	equ	0xFE9
 10600                           wreg	equ	0xFE8
 10601                           indf1	equ	0xFE7
 10602                           postinc1	equ	0xFE6
 10603                           postdec1	equ	0xFE5
 10604                           plusw1	equ	0xFE3
 10605                           fsr1h	equ	0xFE2
 10606                           fsr1l	equ	0xFE1
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           plusw2	equ	0xFDB
 10611                           fsr2h	equ	0xFDA
 10612                           fsr2l	equ	0xFD9
 10613                           status	equ	0xFD8
 10614                           
 10615 ;; *************** function _ARP_send *****************
 10616 ;; Defined at:
 10617 ;;		line 167 in file "src/stack/protocols/arp.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;  arp            32   65[BANK0 ] struct ARP_message
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;  i               1  106[BANK0 ] unsigned char 
 10622 ;;  i               1  105[BANK0 ] unsigned char 
 10623 ;;  i               1  104[BANK0 ] unsigned char 
 10624 ;;  i               1  103[BANK0 ] unsigned char 
 10625 ;;  ethFrame       29  107[BANK0 ] struct ethernetFrame
 10626 ;;  field           8  136[BANK0 ] struct memoryField
 10627 ;;  destination     6   97[BANK0 ] struct macaddress
 10628 ;; Return value:  Size  Location     Type
 10629 ;;                  1    wreg      void 
 10630 ;; Registers used:
 10631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10637 ;;      Params:         0      32       0       0       0       0       0       0       0
 10638 ;;      Locals:         0      47       0       0       0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10640 ;;      Totals:         0      79       0       0       0       0       0       0       0
 10641 ;;Total ram usage:       79 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    9
 10644 ;; This function calls:
 10645 ;;		_ethernetController_getSourceMACAddress
 10646 ;;		_ethernetController_sendPacket
 10647 ;;		_ethernetController_streamToTransmitBuffer
 10648 ;;		_ethernet_txFrameRequest
 10649 ;;		_mac_setToBroadcast
 10650 ;; This function is called by:
 10651 ;;		_ARP_replyIfNeeded
 10652 ;;		_ARP_sendRequest
 10653 ;; This function uses a non-reentrant model
 10654 ;;
 10655                           
 10656                           	psect	text34
 10657  001BF6                     __ptext34:
 10658                           	opt stack 0
 10659  001BF6                     _ARP_send:
 10660                           	opt stack 18
 10661                           
 10662                           ;arp.c: 168: memoryField_t field;
 10663                           ;arp.c: 169: macaddress_t destination;
 10664                           ;arp.c: 170: ethernetFrame_t ethFrame;
 10665                           ;arp.c: 171: mac_setToBroadcast(&destination);
 10666                           
 10667                           ;incstack = 0
 10668  001BF6  0EC1               	movlw	low ARP_send@destination
 10669  001BF8  0100               	movlb	0	; () banked
 10670  001BFA  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 10671  001BFC  0E00               	movlw	high ARP_send@destination
 10672  001BFE  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 10673  001C00  EC37  F022         	call	_mac_setToBroadcast	;wreg free
 10674                           
 10675                           ;arp.c: 173: ethFrame.length = 36;
 10676  001C04  0E00               	movlw	0
 10677  001C06  0100               	movlb	0	; () banked
 10678  001C08  6FCC               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 10679  001C0A  0E24               	movlw	36
 10680  001C0C  6FCB               	movwf	ARP_send@ethFrame& (0+255),b
 10681                           
 10682                           ; BSR set to: 0
 10683                           ;arp.c: 174: ethFrame.destination = arp.targetMACAddress;
 10684  001C0E  EE20  F0B3         	lfsr	2,ARP_send@arp+18
 10685  001C12  EE10  F0D3         	lfsr	1,ARP_send@ethFrame+8
 10686  001C16  0E05               	movlw	5
 10687  001C18                     u8941:
 10688  001C18  CFDB FFE3          	movff	plusw2,plusw1
 10689  001C1C  06E8               	decf	wreg,f,c
 10690  001C1E  E2FC               	bc	u8941
 10691                           
 10692                           ; BSR set to: 0
 10693                           ;arp.c: 175: ethFrame.source = ethernetController_getSourceMACAddress();
 10694  001C20  EC61  F01C         	call	_ethernetController_getSourceMACAddress	;wreg free
 10695  001C24  EE20  F0CD         	lfsr	2,ARP_send@ethFrame+2
 10696  001C28  0E05               	movlw	5
 10697  001C2A                     u8951:
 10698  001C2A  CFEB FFDB          	movff	plusw0,plusw2
 10699  001C2E  06E8               	decf	wreg,f,c
 10700  001C30  E2FC               	bc	u8951
 10701                           
 10702                           ;arp.c: 176: ethFrame.ethertype = ETHERTYPE_ARP;
 10703  001C32  0E08               	movlw	8
 10704  001C34  0100               	movlb	0	; () banked
 10705  001C36  6FDA               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 10706  001C38  0E06               	movlw	6
 10707  001C3A  6FD9               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;arp.c: 178: ethernet_txFrameRequest(&ethFrame);
 10711  001C3C  0ECB               	movlw	low ARP_send@ethFrame
 10712  001C3E  6F9C               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 10713  001C40  0E00               	movlw	high ARP_send@ethFrame
 10714  001C42  6F9D               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 10715  001C44  ECFB  F017         	call	_ethernet_txFrameRequest	;wreg free
 10716                           
 10717                           ;arp.c: 180: if (ethFrame.memory.fOutOfMemory) {
 10718  001C48  0100               	movlb	0	; () banked
 10719  001C4A  B3E1               	btfsc	(ARP_send@ethFrame+22)& (0+255),1,b
 10720  001C4C  0012               	return	
 10721                           
 10722                           ; BSR set to: 0
 10723                           ;arp.c: 182: }
 10724                           ;arp.c: 184: field.start = ethFrame.memory.start + 8;
 10725                           
 10726                           ; BSR set to: 0
 10727                           
 10728                           ; BSR set to: 0
 10729                           ;arp.c: 181: return;
 10730  001C4E  0E08               	movlw	8
 10731  001C50  25DB               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 10732  001C52  6FE8               	movwf	ARP_send@field& (0+255),b
 10733  001C54  0E00               	movlw	0
 10734  001C56  21DC               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 10735  001C58  6FE9               	movwf	(ARP_send@field+1)& (0+255),b
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;arp.c: 185: field.end = ethFrame.memory.end;
 10739  001C5A  C0DD  F0EA         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 10740  001C5E  C0DE  F0EB         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;arp.c: 186: field.length = 28;
 10744  001C62  0E00               	movlw	0
 10745  001C64  6FED               	movwf	(ARP_send@field+5)& (0+255),b
 10746  001C66  0E1C               	movlw	28
 10747  001C68  6FEC               	movwf	(ARP_send@field+4)& (0+255),b
 10748                           
 10749                           ; BSR set to: 0
 10750                           ;arp.c: 189: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field.
      +                          length);
 10751  001C6A  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10752  001C6E  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10753  001C72  51A2               	movf	(ARP_send@arp+1)& (0+255),w,b
 10754  001C74  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10755                           
 10756                           ;arp.c: 190: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field.length)
      +                          ;
 10757  001C78  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10758  001C7C  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10759  001C80  0100               	movlb	0	; () banked
 10760  001C82  51A1               	movf	ARP_send@arp& (0+255),w,b
 10761  001C84  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10762                           
 10763                           ;arp.c: 191: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field.
      +                          length);
 10764  001C88  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10765  001C8C  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10766  001C90  0100               	movlb	0	; () banked
 10767  001C92  51A4               	movf	(ARP_send@arp+3)& (0+255),w,b
 10768  001C94  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10769                           
 10770                           ;arp.c: 192: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field.length)
      +                          ;
 10771  001C98  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10772  001C9C  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10773  001CA0  0100               	movlb	0	; () banked
 10774  001CA2  51A3               	movf	(ARP_send@arp+2)& (0+255),w,b
 10775  001CA4  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10776                           
 10777                           ;arp.c: 193: ethernetController_streamToTransmitBuffer(arp.hlen, field.length);
 10778  001CA8  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10779  001CAC  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10780  001CB0  0100               	movlb	0	; () banked
 10781  001CB2  51A5               	movf	(ARP_send@arp+4)& (0+255),w,b
 10782  001CB4  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10783                           
 10784                           ;arp.c: 194: ethernetController_streamToTransmitBuffer(arp.plen, field.length);
 10785  001CB8  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10786  001CBC  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10787  001CC0  0100               	movlb	0	; () banked
 10788  001CC2  51A6               	movf	(ARP_send@arp+5)& (0+255),w,b
 10789  001CC4  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10790                           
 10791                           ;arp.c: 195: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld.length);
 10792  001CC8  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10793  001CCC  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10794  001CD0  0100               	movlb	0	; () banked
 10795  001CD2  51A8               	movf	(ARP_send@arp+7)& (0+255),w,b
 10796  001CD4  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10797                           
 10798                           ;arp.c: 196: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field.len
      +                          gth);
 10799  001CD8  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10800  001CDC  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10801  001CE0  0100               	movlb	0	; () banked
 10802  001CE2  51A7               	movf	(ARP_send@arp+6)& (0+255),w,b
 10803  001CE4  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10804                           
 10805                           ;arp.c: 197: for (uint8_t i = 0; i < arp.hlen; i++)
 10806  001CE8  0E00               	movlw	0
 10807  001CEA  0100               	movlb	0	; () banked
 10808  001CEC  6FC7               	movwf	ARP_send@i& (0+255),b
 10809  001CEE  D015               	goto	l888
 10810  001CF0                     
 10811                           ; BSR set to: 0
 10812                           ;arp.c: 198: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field.length);
 10813                           
 10814                           ; BSR set to: 0
 10815  001CF0  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10816  001CF4  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10817  001CF8  51C7               	movf	ARP_send@i& (0+255),w,b
 10818  001CFA  0D01               	mullw	1
 10819  001CFC  0E08               	movlw	8
 10820  001CFE  26F3               	addwf	prodl,f,c
 10821  001D00  0E00               	movlw	0
 10822  001D02  22F4               	addwfc	prodh,f,c
 10823  001D04  0EA1               	movlw	low ARP_send@arp
 10824  001D06  24F3               	addwf	prodl,w,c
 10825  001D08  6ED9               	movwf	fsr2l,c
 10826  001D0A  0E00               	movlw	high ARP_send@arp
 10827  001D0C  20F4               	addwfc	prodh,w,c
 10828  001D0E  6EDA               	movwf	fsr2h,c
 10829  001D10  50DF               	movf	indf2,w,c
 10830  001D12  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10831  001D16  0100               	movlb	0	; () banked
 10832  001D18  2BC7               	incf	ARP_send@i& (0+255),f,b
 10833  001D1A                     l888:
 10834                           
 10835                           ; BSR set to: 0
 10836                           
 10837                           ; BSR set to: 0
 10838  001D1A  51A5               	movf	(ARP_send@arp+4)& (0+255),w,b
 10839  001D1C  5DC7               	subwf	ARP_send@i& (0+255),w,b
 10840  001D1E  A0D8               	btfss	status,0,c
 10841  001D20  D7E7               	goto	l889
 10842                           
 10843                           ; BSR set to: 0
 10844                           ;arp.c: 199: for (uint8_t i = 0; i < arp.plen; i++)
 10845                           
 10846                           ; BSR set to: 0
 10847  001D22  0E00               	movlw	0
 10848  001D24  6FC8               	movwf	ARP_send@i_2627& (0+255),b
 10849  001D26  D015               	goto	l891
 10850  001D28                     
 10851                           ; BSR set to: 0
 10852                           ;arp.c: 200: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield.length);
 10853                           
 10854                           ; BSR set to: 0
 10855  001D28  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10856  001D2C  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10857  001D30  51C8               	movf	ARP_send@i_2627& (0+255),w,b
 10858  001D32  0D01               	mullw	1
 10859  001D34  0E0E               	movlw	14
 10860  001D36  26F3               	addwf	prodl,f,c
 10861  001D38  0E00               	movlw	0
 10862  001D3A  22F4               	addwfc	prodh,f,c
 10863  001D3C  0EA1               	movlw	low ARP_send@arp
 10864  001D3E  24F3               	addwf	prodl,w,c
 10865  001D40  6ED9               	movwf	fsr2l,c
 10866  001D42  0E00               	movlw	high ARP_send@arp
 10867  001D44  20F4               	addwfc	prodh,w,c
 10868  001D46  6EDA               	movwf	fsr2h,c
 10869  001D48  50DF               	movf	indf2,w,c
 10870  001D4A  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10871  001D4E  0100               	movlb	0	; () banked
 10872  001D50  2BC8               	incf	ARP_send@i_2627& (0+255),f,b
 10873  001D52                     l891:
 10874                           
 10875                           ; BSR set to: 0
 10876                           
 10877                           ; BSR set to: 0
 10878  001D52  51A6               	movf	(ARP_send@arp+5)& (0+255),w,b
 10879  001D54  5DC8               	subwf	ARP_send@i_2627& (0+255),w,b
 10880  001D56  A0D8               	btfss	status,0,c
 10881  001D58  D7E7               	goto	l892
 10882                           
 10883                           ; BSR set to: 0
 10884                           ;arp.c: 201: for (uint8_t i = 0; i < arp.hlen; i++)
 10885                           
 10886                           ; BSR set to: 0
 10887  001D5A  0E00               	movlw	0
 10888  001D5C  6FC9               	movwf	ARP_send@i_2628& (0+255),b
 10889  001D5E  D015               	goto	l894
 10890  001D60                     
 10891                           ; BSR set to: 0
 10892                           ;arp.c: 202: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field.length);
 10893                           
 10894                           ; BSR set to: 0
 10895  001D60  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10896  001D64  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10897  001D68  51C9               	movf	ARP_send@i_2628& (0+255),w,b
 10898  001D6A  0D01               	mullw	1
 10899  001D6C  0E12               	movlw	18
 10900  001D6E  26F3               	addwf	prodl,f,c
 10901  001D70  0E00               	movlw	0
 10902  001D72  22F4               	addwfc	prodh,f,c
 10903  001D74  0EA1               	movlw	low ARP_send@arp
 10904  001D76  24F3               	addwf	prodl,w,c
 10905  001D78  6ED9               	movwf	fsr2l,c
 10906  001D7A  0E00               	movlw	high ARP_send@arp
 10907  001D7C  20F4               	addwfc	prodh,w,c
 10908  001D7E  6EDA               	movwf	fsr2h,c
 10909  001D80  50DF               	movf	indf2,w,c
 10910  001D82  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10911  001D86  0100               	movlb	0	; () banked
 10912  001D88  2BC9               	incf	ARP_send@i_2628& (0+255),f,b
 10913  001D8A                     l894:
 10914                           
 10915                           ; BSR set to: 0
 10916                           
 10917                           ; BSR set to: 0
 10918  001D8A  51A5               	movf	(ARP_send@arp+4)& (0+255),w,b
 10919  001D8C  5DC9               	subwf	ARP_send@i_2628& (0+255),w,b
 10920  001D8E  A0D8               	btfss	status,0,c
 10921  001D90  D7E7               	goto	l895
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;arp.c: 204: for (uint8_t i = 0; i < arp.plen; i++)
 10925                           
 10926                           ; BSR set to: 0
 10927  001D92  0E00               	movlw	0
 10928  001D94  6FCA               	movwf	ARP_send@i_2629& (0+255),b
 10929  001D96  D015               	goto	l897
 10930  001D98                     
 10931                           ; BSR set to: 0
 10932                           ;arp.c: 205: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield.length);
 10933                           
 10934                           ; BSR set to: 0
 10935  001D98  C0EC  F06A         	movff	ARP_send@field+4,ethernetController_streamToTransmitBuffer@len
 10936  001D9C  C0ED  F06B         	movff	ARP_send@field+5,ethernetController_streamToTransmitBuffer@len+1
 10937  001DA0  51CA               	movf	ARP_send@i_2629& (0+255),w,b
 10938  001DA2  0D01               	mullw	1
 10939  001DA4  0E18               	movlw	24
 10940  001DA6  26F3               	addwf	prodl,f,c
 10941  001DA8  0E00               	movlw	0
 10942  001DAA  22F4               	addwfc	prodh,f,c
 10943  001DAC  0EA1               	movlw	low ARP_send@arp
 10944  001DAE  24F3               	addwf	prodl,w,c
 10945  001DB0  6ED9               	movwf	fsr2l,c
 10946  001DB2  0E00               	movlw	high ARP_send@arp
 10947  001DB4  20F4               	addwfc	prodh,w,c
 10948  001DB6  6EDA               	movwf	fsr2h,c
 10949  001DB8  50DF               	movf	indf2,w,c
 10950  001DBA  EC31  F01E         	call	_ethernetController_streamToTransmitBuffer
 10951  001DBE  0100               	movlb	0	; () banked
 10952  001DC0  2BCA               	incf	ARP_send@i_2629& (0+255),f,b
 10953  001DC2                     l897:
 10954                           
 10955                           ; BSR set to: 0
 10956                           
 10957                           ; BSR set to: 0
 10958  001DC2  51A6               	movf	(ARP_send@arp+5)& (0+255),w,b
 10959  001DC4  5DCA               	subwf	ARP_send@i_2629& (0+255),w,b
 10960  001DC6  A0D8               	btfss	status,0,c
 10961  001DC8  D7E7               	goto	l898
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;arp.c: 207: ethernetController_sendPacket(ethFrame.memory);
 10965                           
 10966                           ; BSR set to: 0
 10967  001DCA  EE20  F0DB         	lfsr	2,ARP_send@ethFrame+16
 10968  001DCE  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 10969  001DD2  0E07               	movlw	7
 10970  001DD4                     u9011:
 10971  001DD4  CFDB FFEB          	movff	plusw2,plusw0
 10972  001DD8  06E8               	decf	wreg,f,c
 10973  001DDA  E2FC               	bc	u9011
 10974  001DDC  EC0F  F022         	call	_ethernetController_sendPacket	;wreg free
 10975  001DE0  0012               	return		;funcret
 10976  001DE2                     __end_of_ARP_send:
 10977                           	opt stack 0
 10978                           tblptru	equ	0xFF8
 10979                           tblptrh	equ	0xFF7
 10980                           tblptrl	equ	0xFF6
 10981                           tablat	equ	0xFF5
 10982                           prodh	equ	0xFF4
 10983                           prodl	equ	0xFF3
 10984                           intcon	equ	0xFF2
 10985                           intcon3	equ	0xFF0
 10986                           postinc0	equ	0xFEE
 10987                           plusw0	equ	0xFEB
 10988                           fsr0h	equ	0xFEA
 10989                           fsr0l	equ	0xFE9
 10990                           wreg	equ	0xFE8
 10991                           indf1	equ	0xFE7
 10992                           postinc1	equ	0xFE6
 10993                           postdec1	equ	0xFE5
 10994                           plusw1	equ	0xFE3
 10995                           fsr1h	equ	0xFE2
 10996                           fsr1l	equ	0xFE1
 10997                           indf2	equ	0xFDF
 10998                           postinc2	equ	0xFDE
 10999                           postdec2	equ	0xFDD
 11000                           plusw2	equ	0xFDB
 11001                           fsr2h	equ	0xFDA
 11002                           fsr2l	equ	0xFD9
 11003                           status	equ	0xFD8
 11004                           
 11005 ;; *************** function _mac_setToBroadcast *****************
 11006 ;; Defined at:
 11007 ;;		line 26 in file "src/eth/mac.c"
 11008 ;; Parameters:    Size  Location     Type
 11009 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 11010 ;;		 -> ARP_sendRequest@targetMAC(6), ARP_send@destination(6), 
 11011 ;; Auto vars:     Size  Location     Type
 11012 ;;  i               1    2[BANK0 ] unsigned char 
 11013 ;; Return value:  Size  Location     Type
 11014 ;;                  1    wreg      void 
 11015 ;; Registers used:
 11016 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11017 ;; Tracked objects:
 11018 ;;		On entry : 0/0
 11019 ;;		On exit  : 0/0
 11020 ;;		Unchanged: 0/0
 11021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11022 ;;      Params:         0       2       0       0       0       0       0       0       0
 11023 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11024 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11025 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11026 ;;Total ram usage:        3 bytes
 11027 ;; Hardware stack levels used:    1
 11028 ;; Hardware stack levels required when called:    4
 11029 ;; This function calls:
 11030 ;;		Nothing
 11031 ;; This function is called by:
 11032 ;;		_ARP_send
 11033 ;;		_ARP_sendRequest
 11034 ;; This function uses a non-reentrant model
 11035 ;;
 11036                           
 11037                           	psect	text35
 11038  00446E                     __ptext35:
 11039                           	opt stack 0
 11040  00446E                     _mac_setToBroadcast:
 11041                           	opt stack 23
 11042                           
 11043                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 11044                           
 11045                           ;incstack = 0
 11046  00446E  0E00               	movlw	0
 11047  004470  0100               	movlb	0	; () banked
 11048  004472  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 11049  004474                     l7234:
 11050                           
 11051                           ; BSR set to: 0
 11052  004474  0E05               	movlw	5
 11053  004476  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 11054  004478  D001               	goto	l360
 11055  00447A  0012               	return	
 11056  00447C                     l360:
 11057                           
 11058                           ; BSR set to: 0
 11059                           ;mac.c: 28: mac->address[i] = 0xff;
 11060                           
 11061                           ; BSR set to: 0
 11062  00447C  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 11063  00447E  0D01               	mullw	1
 11064  004480  50F3               	movf	prodl,w,c
 11065  004482  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 11066  004484  6ED9               	movwf	fsr2l,c
 11067  004486  50F4               	movf	prodh,w,c
 11068  004488  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 11069  00448A  6EDA               	movwf	fsr2h,c
 11070  00448C  0EFF               	movlw	255
 11071  00448E  6EDF               	movwf	indf2,c
 11072                           
 11073                           ; BSR set to: 0
 11074  004490  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 11075  004492  D7F0               	goto	l7234
 11076  004494                     __end_of_mac_setToBroadcast:
 11077                           	opt stack 0
 11078                           tblptru	equ	0xFF8
 11079                           tblptrh	equ	0xFF7
 11080                           tblptrl	equ	0xFF6
 11081                           tablat	equ	0xFF5
 11082                           prodh	equ	0xFF4
 11083                           prodl	equ	0xFF3
 11084                           intcon	equ	0xFF2
 11085                           intcon3	equ	0xFF0
 11086                           postinc0	equ	0xFEE
 11087                           plusw0	equ	0xFEB
 11088                           fsr0h	equ	0xFEA
 11089                           fsr0l	equ	0xFE9
 11090                           wreg	equ	0xFE8
 11091                           indf1	equ	0xFE7
 11092                           postinc1	equ	0xFE6
 11093                           postdec1	equ	0xFE5
 11094                           plusw1	equ	0xFE3
 11095                           fsr1h	equ	0xFE2
 11096                           fsr1l	equ	0xFE1
 11097                           indf2	equ	0xFDF
 11098                           postinc2	equ	0xFDE
 11099                           postdec2	equ	0xFDD
 11100                           plusw2	equ	0xFDB
 11101                           fsr2h	equ	0xFDA
 11102                           fsr2l	equ	0xFD9
 11103                           status	equ	0xFD8
 11104                           
 11105 ;; *************** function _ethernet_txFrameRequest *****************
 11106 ;; Defined at:
 11107 ;;		line 28 in file "src/eth/ethernet.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;  frame           2   60[BANK0 ] PTR struct ethernetFrame
 11110 ;;		 -> ARP_send@ethFrame(29), stack(110), 
 11111 ;; Auto vars:     Size  Location     Type
 11112 ;;  err             3   62[BANK0 ] struct error
 11113 ;; Return value:  Size  Location     Type
 11114 ;;                  3   60[BANK0 ] struct error
 11115 ;; Registers used:
 11116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11117 ;; Tracked objects:
 11118 ;;		On entry : 0/0
 11119 ;;		On exit  : 0/0
 11120 ;;		Unchanged: 0/0
 11121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11122 ;;      Params:         0       2       0       0       0       0       0       0       0
 11123 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11125 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11126 ;;Total ram usage:        5 bytes
 11127 ;; Hardware stack levels used:    1
 11128 ;; Hardware stack levels required when called:    8
 11129 ;; This function calls:
 11130 ;;		_ethernetController_writeDestinationMACAddress
 11131 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 11132 ;;		_memory_txFrameRequest
 11133 ;; This function is called by:
 11134 ;;		_ARP_send
 11135 ;;		_ipv4_txFrameRequest
 11136 ;; This function uses a non-reentrant model
 11137 ;;
 11138                           
 11139                           	psect	text36
 11140  002FF6                     __ptext36:
 11141                           	opt stack 0
 11142  002FF6                     _ethernet_txFrameRequest:
 11143                           	opt stack 21
 11144                           
 11145                           ;ethernet.c: 30: error_t err;
 11146                           ;ethernet.c: 31: err.module = ERROR_MODULE_ETHERNET;
 11147                           
 11148                           ; BSR set to: 0
 11149                           ;incstack = 0
 11150  002FF6  0E02               	movlw	2
 11151  002FF8  0100               	movlb	0	; () banked
 11152  002FFA  6F9E               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11153                           
 11154                           ;ethernet.c: 32: err.code = (uint16_t)0;
 11155  002FFC  0E00               	movlw	0
 11156  002FFE  6FA0               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11157  003000  0E00               	movlw	0
 11158  003002  6F9F               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11159                           
 11160                           ; BSR set to: 0
 11161                           ;ethernet.c: 33: frame->memory = memory_txFrameRequest(frame->length);
 11162  003004  C09C  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 11163  003008  C09D  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 11164  00300C  CFDE F080          	movff	postinc2,memory_txFrameRequest@length
 11165  003010  CFDD F081          	movff	postdec2,memory_txFrameRequest@length+1
 11166  003014  EC64  F000         	call	_memory_txFrameRequest	;wreg free
 11167  003018  0100               	movlb	0	; () banked
 11168  00301A  EE20 F010          	lfsr	2,16
 11169  00301E  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11170  003020  26D9               	addwf	fsr2l,f,c
 11171  003022  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11172  003024  22DA               	addwfc	fsr2h,f,c
 11173  003026  0E07               	movlw	7
 11174  003028                     u8441:
 11175  003028  CFEB FFDB          	movff	plusw0,plusw2
 11176  00302C  06E8               	decf	wreg,f,c
 11177  00302E  E2FC               	bc	u8441
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;ethernet.c: 35: if (frame->memory.fOutOfMemory) {
 11181  003030  EE20 F016          	lfsr	2,22
 11182  003034  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11183  003036  26D9               	addwf	fsr2l,f,c
 11184  003038  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11185  00303A  22DA               	addwfc	fsr2h,f,c
 11186  00303C  A2DF               	btfss	indf2,1,c
 11187  00303E  D007               	goto	l340
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;ethernet.c: 37: err.module = ERROR_MODULE_MEMORY;
 11191  003040  0E00               	movlw	0
 11192  003042  6F9E               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11193                           
 11194                           ;ethernet.c: 38: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 11195  003044  0E00               	movlw	0
 11196  003046  6FA0               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11197  003048  0E65               	movlw	101
 11198  00304A  6F9F               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;ethernet.c: 39: return err;
 11202                           ;	Return value of _ethernet_txFrameRequest is never used
 11203  00304C  0012               	return	
 11204  00304E                     l340:
 11205                           
 11206                           ; BSR set to: 0
 11207                           ;ethernet.c: 40: }
 11208                           ;ethernet.c: 41: if (!frame->memory.fIsAssigned) {
 11209                           
 11210                           ; BSR set to: 0
 11211  00304E  EE20 F016          	lfsr	2,22
 11212  003052  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11213  003054  26D9               	addwf	fsr2l,f,c
 11214  003056  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11215  003058  22DA               	addwfc	fsr2h,f,c
 11216  00305A  B0DF               	btfsc	indf2,0,c
 11217  00305C  D007               	goto	l342
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;ethernet.c: 43: err.module = ERROR_MODULE_MEMORY;
 11221  00305E  0E00               	movlw	0
 11222  003060  6F9E               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11223                           
 11224                           ;ethernet.c: 44: err.code = ERROR_MEMORY_UNKNOWN;
 11225  003062  0E00               	movlw	0
 11226  003064  6FA0               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11227  003066  0EC7               	movlw	199
 11228  003068  6F9F               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11229                           
 11230                           ; BSR set to: 0
 11231                           ;ethernet.c: 45: return err;
 11232                           ;	Return value of _ethernet_txFrameRequest is never used
 11233  00306A  0012               	return	
 11234  00306C                     l342:
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;ethernet.c: 46: }
 11238                           ;ethernet.c: 48: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 11239                           
 11240                           ; BSR set to: 0
 11241  00306C  EE20 F008          	lfsr	2,8
 11242  003070  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11243  003072  26D9               	addwf	fsr2l,f,c
 11244  003074  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11245  003076  22DA               	addwfc	fsr2h,f,c
 11246  003078  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 11247  00307C  0E05               	movlw	5
 11248  00307E                     u8471:
 11249  00307E  CFDB FFEB          	movff	plusw2,plusw0
 11250  003082  06E8               	decf	wreg,f,c
 11251  003084  E2FC               	bc	u8471
 11252  003086  EE20 F010          	lfsr	2,16
 11253  00308A  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11254  00308C  26D9               	addwf	fsr2l,f,c
 11255  00308E  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11256  003090  22DA               	addwfc	fsr2h,f,c
 11257  003092  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 11258  003096  0E07               	movlw	7
 11259  003098                     u8481:
 11260  003098  CFDB FFEB          	movff	plusw2,plusw0
 11261  00309C  06E8               	decf	wreg,f,c
 11262  00309E  E2FC               	bc	u8481
 11263  0030A0  EC21  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 11264                           
 11265                           ;ethernet.c: 49: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 11266  0030A4  0100               	movlb	0	; () banked
 11267  0030A6  EE20 F00E          	lfsr	2,14
 11268  0030AA  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11269  0030AC  26D9               	addwf	fsr2l,f,c
 11270  0030AE  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11271  0030B0  22DA               	addwfc	fsr2h,f,c
 11272  0030B2  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 11273  0030B6  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 11274  0030BA  EE20 F010          	lfsr	2,16
 11275  0030BE  519C               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11276  0030C0  26D9               	addwf	fsr2l,f,c
 11277  0030C2  519D               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11278  0030C4  22DA               	addwfc	fsr2h,f,c
 11279  0030C6  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 11280  0030CA  0E07               	movlw	7
 11281  0030CC                     u8491:
 11282  0030CC  CFDB FFEB          	movff	plusw2,plusw0
 11283  0030D0  06E8               	decf	wreg,f,c
 11284  0030D2  E2FC               	bc	u8491
 11285  0030D4  ECA3  F01F         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 11286  0030D8  0012               	return	
 11287  0030DA                     __end_of_ethernet_txFrameRequest:
 11288                           	opt stack 0
 11289                           tblptru	equ	0xFF8
 11290                           tblptrh	equ	0xFF7
 11291                           tblptrl	equ	0xFF6
 11292                           tablat	equ	0xFF5
 11293                           prodh	equ	0xFF4
 11294                           prodl	equ	0xFF3
 11295                           intcon	equ	0xFF2
 11296                           intcon3	equ	0xFF0
 11297                           postinc0	equ	0xFEE
 11298                           plusw0	equ	0xFEB
 11299                           fsr0h	equ	0xFEA
 11300                           fsr0l	equ	0xFE9
 11301                           wreg	equ	0xFE8
 11302                           indf1	equ	0xFE7
 11303                           postinc1	equ	0xFE6
 11304                           postdec1	equ	0xFE5
 11305                           plusw1	equ	0xFE3
 11306                           fsr1h	equ	0xFE2
 11307                           fsr1l	equ	0xFE1
 11308                           indf2	equ	0xFDF
 11309                           postinc2	equ	0xFDE
 11310                           postdec2	equ	0xFDD
 11311                           plusw2	equ	0xFDB
 11312                           fsr2h	equ	0xFDA
 11313                           fsr2l	equ	0xFD9
 11314                           status	equ	0xFD8
 11315                           
 11316 ;; *************** function _memory_txFrameRequest *****************
 11317 ;; Defined at:
 11318 ;;		line 136 in file "src/mem/memoryController.c"
 11319 ;; Parameters:    Size  Location     Type
 11320 ;;  length          2   32[BANK0 ] unsigned int 
 11321 ;; Auto vars:     Size  Location     Type
 11322 ;;  i               1   49[BANK0 ] unsigned char 
 11323 ;;  i               1   50[BANK0 ] unsigned char 
 11324 ;;  fNoOverlapMa    1   48[BANK0 ] unsigned char 
 11325 ;;  field           8   51[BANK0 ] struct memoryField
 11326 ;;  freeIndex       1   59[BANK0 ] unsigned char 
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  8   32[BANK0 ] struct memoryField
 11329 ;; Registers used:
 11330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11336 ;;      Params:         0       8       0       0       0       0       0       0       0
 11337 ;;      Locals:         0      14       0       0       0       0       0       0       0
 11338 ;;      Temps:          0       6       0       0       0       0       0       0       0
 11339 ;;      Totals:         0      28       0       0       0       0       0       0       0
 11340 ;;Total ram usage:       28 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    6
 11343 ;; This function calls:
 11344 ;;		_checkForOverlap
 11345 ;;		_entireMemoryEmpty
 11346 ;;		_entireMemoryFull
 11347 ;; This function is called by:
 11348 ;;		_ethernet_txFrameRequest
 11349 ;; This function uses a non-reentrant model
 11350 ;;
 11351                           
 11352                           	psect	text37
 11353  0000C8                     __ptext37:
 11354                           	opt stack 0
 11355  0000C8                     _memory_txFrameRequest:
 11356                           	opt stack 22
 11357                           
 11358                           ;memoryController.c: 137: memoryField_t field;
 11359                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 11360                           
 11361                           ;incstack = 0
 11362  0000C8  0E00               	movlw	0
 11363  0000CA  0100               	movlb	0	; () banked
 11364  0000CC  6F9B               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 11365                           
 11366                           ; BSR set to: 0
 11367                           ;memoryController.c: 140: if (length == 0) {
 11368  0000CE  5180               	movf	memory_txFrameRequest@length& (0+255),w,b
 11369  0000D0  1181               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11370  0000D2  A4D8               	btfss	status,2,c
 11371  0000D4  D00B               	goto	l443
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 11375  0000D6  8399               	bsf	(memory_txFrameRequest@field+6)& (0+255),1,b
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;memoryController.c: 142: return field;
 11379  0000D8  EE20  F093         	lfsr	2,memory_txFrameRequest@field
 11380  0000DC  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11381  0000E0  0E07               	movlw	7
 11382  0000E2                     u8061:
 11383  0000E2  CFDB FFEB          	movff	plusw2,plusw0
 11384  0000E6  06E8               	decf	wreg,f,c
 11385  0000E8  E2FC               	bc	u8061
 11386                           
 11387                           ; BSR set to: 0
 11388  0000EA  0012               	return	
 11389  0000EC                     l443:
 11390                           
 11391                           ; BSR set to: 0
 11392                           ;memoryController.c: 143: }
 11393                           ;memoryController.c: 145: if (entireMemoryFull()) {
 11394                           
 11395                           ; BSR set to: 0
 11396  0000EC  ECD9  F020         	call	_entireMemoryFull	;wreg free
 11397  0000F0  0900               	iorlw	0
 11398  0000F2  B4D8               	btfsc	status,2,c
 11399  0000F4  D00C               	goto	l445
 11400                           
 11401                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 11402  0000F6  0100               	movlb	0	; () banked
 11403  0000F8  8399               	bsf	(memory_txFrameRequest@field+6)& (0+255),1,b
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;memoryController.c: 147: return field;
 11407  0000FA  EE20  F093         	lfsr	2,memory_txFrameRequest@field
 11408  0000FE  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11409  000102  0E07               	movlw	7
 11410  000104                     u8081:
 11411  000104  CFDB FFEB          	movff	plusw2,plusw0
 11412  000108  06E8               	decf	wreg,f,c
 11413  00010A  E2FC               	bc	u8081
 11414                           
 11415                           ; BSR set to: 0
 11416  00010C  0012               	return	
 11417  00010E                     l445:
 11418                           
 11419                           ;memoryController.c: 148: }
 11420                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 11421                           
 11422                           ; BSR set to: 0
 11423  00010E  ECF6  F020         	call	_entireMemoryEmpty	;wreg free
 11424  000112  0900               	iorlw	0
 11425  000114  B4D8               	btfsc	status,2,c
 11426  000116  D240               	goto	l470
 11427                           
 11428                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 11429  000118  0E30               	movlw	48
 11430  00011A  0100               	movlb	0	; () banked
 11431  00011C  5D81               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11432  00011E  A0D8               	btfss	status,0,c
 11433  000120  D00B               	goto	l447
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 11437  000122  8399               	bsf	(memory_txFrameRequest@field+6)& (0+255),1,b
 11438                           
 11439                           ; BSR set to: 0
 11440                           ;memoryController.c: 153: return field;
 11441  000124  EE20  F093         	lfsr	2,memory_txFrameRequest@field
 11442  000128  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11443  00012C  0E07               	movlw	7
 11444  00012E                     u8111:
 11445  00012E  CFDB FFEB          	movff	plusw2,plusw0
 11446  000132  06E8               	decf	wreg,f,c
 11447  000134  E2FC               	bc	u8111
 11448                           
 11449                           ; BSR set to: 0
 11450  000136  0012               	return	
 11451  000138                     l447:
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;memoryController.c: 155: else {
 11455                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 11456                           
 11457                           ; BSR set to: 0
 11458  000138  0E00               	movlw	0
 11459  00013A  0101               	movlb	1	; () banked
 11460  00013C  6F81               	movwf	(_occupiedMemory+1)& (0+255),b
 11461  00013E  0E00               	movlw	0
 11462  000140  6F80               	movwf	_occupiedMemory& (0+255),b
 11463                           
 11464                           ; BSR set to: 1
 11465                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 11466  000142  C080  F182         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 11467  000146  C081  F183         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 11468                           
 11469                           ; BSR set to: 1
 11470                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 11471  00014A  C080  F184         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 11472  00014E  C081  F185         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 11473                           
 11474                           ; BSR set to: 1
 11475                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 11476  000152  8186               	bsf	(_occupiedMemory+6)& (0+255),0,b
 11477                           
 11478                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 11479  000154  0E00               	movlw	0
 11480  000156  6F87               	movwf	(_occupiedMemory+7)& (0+255),b
 11481                           
 11482                           ; BSR set to: 1
 11483                           ;memoryController.c: 161: return occupiedMemory[0];
 11484  000158  EE21  F080         	lfsr	2,_occupiedMemory
 11485  00015C  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11486  000160  0E07               	movlw	7
 11487  000162                     u8121:
 11488  000162  CFDB FFEB          	movff	plusw2,plusw0
 11489  000166  06E8               	decf	wreg,f,c
 11490  000168  E2FC               	bc	u8121
 11491                           
 11492                           ; BSR set to: 1
 11493  00016A  0012               	return	
 11494  00016C                     
 11495                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 11496                           
 11497                           ; BSR set to: 1
 11498  00016C  0100               	movlb	0	; () banked
 11499  00016E  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11500  000170  0D08               	mullw	8
 11501  000172  0E06               	movlw	6
 11502  000174  26F3               	addwf	prodl,f,c
 11503  000176  0E00               	movlw	0
 11504  000178  22F4               	addwfc	prodh,f,c
 11505  00017A  0E80               	movlw	low _occupiedMemory
 11506  00017C  24F3               	addwf	prodl,w,c
 11507  00017E  6ED9               	movwf	fsr2l,c
 11508  000180  0E01               	movlw	high _occupiedMemory
 11509  000182  20F4               	addwfc	prodh,w,c
 11510  000184  6EDA               	movwf	fsr2h,c
 11511  000186  0101               	movlb	1	; () banked
 11512  000188  B0DF               	btfsc	indf2,0,c
 11513  00018A  D1F5               	goto	l469
 11514                           
 11515                           ; BSR set to: 1
 11516                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 11517  00018C  0100               	movlb	0	; () banked
 11518  00018E  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11519  000190  B4D8               	btfsc	status,2,c
 11520  000192  D007               	goto	l453
 11521                           
 11522                           ; BSR set to: 0
 11523  000194  0EFF               	movlw	255
 11524  000196  259B               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11525  000198  6F8E               	movwf	_memory_txFrameRequest$1132& (0+255),b
 11526  00019A  6B8F               	clrf	(_memory_txFrameRequest$1132+1)& (0+255),b
 11527  00019C  0EFF               	movlw	255
 11528  00019E  238F               	addwfc	(_memory_txFrameRequest$1132+1)& (0+255),f,b
 11529  0001A0  D004               	goto	l455
 11530  0001A2                     l453:
 11531                           
 11532                           ; BSR set to: 0
 11533                           
 11534                           ; BSR set to: 0
 11535  0001A2  0E00               	movlw	0
 11536  0001A4  6F8F               	movwf	(_memory_txFrameRequest$1132+1)& (0+255),b
 11537  0001A6  0E07               	movlw	7
 11538  0001A8  6F8E               	movwf	_memory_txFrameRequest$1132& (0+255),b
 11539  0001AA                     l455:
 11540                           
 11541                           ; BSR set to: 0
 11542                           
 11543                           ; BSR set to: 0
 11544  0001AA  C08E  F088         	movff	_memory_txFrameRequest$1132,??_memory_txFrameRequest
 11545  0001AE  C08F  F089         	movff	_memory_txFrameRequest$1132+1,??_memory_txFrameRequest+1
 11546  0001B2  90D8               	bcf	status,0,c
 11547  0001B4  3788               	rlcf	??_memory_txFrameRequest& (0+255),f,b
 11548  0001B6  3789               	rlcf	(??_memory_txFrameRequest+1)& (0+255),f,b
 11549  0001B8  90D8               	bcf	status,0,c
 11550  0001BA  3788               	rlcf	??_memory_txFrameRequest& (0+255),f,b
 11551  0001BC  3789               	rlcf	(??_memory_txFrameRequest+1)& (0+255),f,b
 11552  0001BE  90D8               	bcf	status,0,c
 11553  0001C0  3788               	rlcf	??_memory_txFrameRequest& (0+255),f,b
 11554  0001C2  3789               	rlcf	(??_memory_txFrameRequest+1)& (0+255),f,b
 11555  0001C4  0E02               	movlw	2
 11556  0001C6  2788               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11557  0001C8  0E00               	movlw	0
 11558  0001CA  2389               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11559  0001CC  0E80               	movlw	low _occupiedMemory
 11560  0001CE  2588               	addwf	??_memory_txFrameRequest& (0+255),w,b
 11561  0001D0  6ED9               	movwf	fsr2l,c
 11562  0001D2  0E01               	movlw	high _occupiedMemory
 11563  0001D4  2189               	addwfc	(??_memory_txFrameRequest+1)& (0+255),w,b
 11564  0001D6  6EDA               	movwf	fsr2h,c
 11565  0001D8  CFDE F08A          	movff	postinc2,??_memory_txFrameRequest+2
 11566  0001DC  CFDD F08B          	movff	postdec2,??_memory_txFrameRequest+3
 11567  0001E0  0E01               	movlw	1
 11568  0001E2  278A               	addwf	(??_memory_txFrameRequest+2)& (0+255),f,b
 11569  0001E4  0E00               	movlw	0
 11570  0001E6  238B               	addwfc	(??_memory_txFrameRequest+3)& (0+255),f,b
 11571  0001E8  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11572  0001EA  0D08               	mullw	8
 11573  0001EC  0E80               	movlw	low _occupiedMemory
 11574  0001EE  24F3               	addwf	prodl,w,c
 11575  0001F0  6ED9               	movwf	fsr2l,c
 11576  0001F2  0E01               	movlw	high _occupiedMemory
 11577  0001F4  20F4               	addwfc	prodh,w,c
 11578  0001F6  6EDA               	movwf	fsr2h,c
 11579  0001F8  C08A  FFDE         	movff	??_memory_txFrameRequest+2,postinc2
 11580  0001FC  C08B  FFDD         	movff	??_memory_txFrameRequest+3,postdec2
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 11584  000200  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11585  000202  0D08               	mullw	8
 11586  000204  0E80               	movlw	low _occupiedMemory
 11587  000206  24F3               	addwf	prodl,w,c
 11588  000208  6ED9               	movwf	fsr2l,c
 11589  00020A  0E01               	movlw	high _occupiedMemory
 11590  00020C  20F4               	addwfc	prodh,w,c
 11591  00020E  6EDA               	movwf	fsr2h,c
 11592  000210  CFDE F088          	movff	postinc2,??_memory_txFrameRequest
 11593  000214  CFDD F089          	movff	postdec2,??_memory_txFrameRequest+1
 11594  000218  5180               	movf	memory_txFrameRequest@length& (0+255),w,b
 11595  00021A  2788               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11596  00021C  5181               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11597  00021E  2389               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11598  000220  0588               	decf	??_memory_txFrameRequest& (0+255),w,b
 11599  000222  0E30               	movlw	48
 11600  000224  5989               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 11601  000226  A0D8               	btfss	status,0,c
 11602  000228  D0D1               	goto	l457
 11603                           
 11604                           ; BSR set to: 0
 11605                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 11606  00022A  0E07               	movlw	7
 11607  00022C  199B               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11608  00022E  A4D8               	btfss	status,2,c
 11609  000230  D0CD               	goto	l457
 11610                           
 11611                           ; BSR set to: 0
 11612  000232  0101               	movlb	1	; () banked
 11613  000234  B186               	btfsc	(_occupiedMemory+6)& (0+255),0,b
 11614  000236  D0CA               	goto	l457
 11615                           
 11616                           ; BSR set to: 1
 11617                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 11618  000238  0100               	movlb	0	; () banked
 11619  00023A  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11620  00023C  0D08               	mullw	8
 11621  00023E  0E04               	movlw	4
 11622  000240  26F3               	addwf	prodl,f,c
 11623  000242  0E00               	movlw	0
 11624  000244  22F4               	addwfc	prodh,f,c
 11625  000246  0E80               	movlw	low _occupiedMemory
 11626  000248  24F3               	addwf	prodl,w,c
 11627  00024A  6ED9               	movwf	fsr2l,c
 11628  00024C  0E01               	movlw	high _occupiedMemory
 11629  00024E  20F4               	addwfc	prodh,w,c
 11630  000250  6EDA               	movwf	fsr2h,c
 11631  000252  C080  FFDE         	movff	memory_txFrameRequest@length,postinc2
 11632  000256  C081  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 11633                           
 11634                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 11635  00025A  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11636  00025C  0D08               	mullw	8
 11637  00025E  0E04               	movlw	4
 11638  000260  26F3               	addwf	prodl,f,c
 11639  000262  0E00               	movlw	0
 11640  000264  22F4               	addwfc	prodh,f,c
 11641  000266  0E80               	movlw	low _occupiedMemory
 11642  000268  24F3               	addwf	prodl,w,c
 11643  00026A  6ED9               	movwf	fsr2l,c
 11644  00026C  0E01               	movlw	high _occupiedMemory
 11645  00026E  20F4               	addwfc	prodh,w,c
 11646  000270  6EDA               	movwf	fsr2h,c
 11647  000272  CFDE F088          	movff	postinc2,??_memory_txFrameRequest
 11648  000276  CFDD F089          	movff	postdec2,??_memory_txFrameRequest+1
 11649  00027A  0EFF               	movlw	255
 11650  00027C  6F8A               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 11651  00027E  0E2F               	movlw	47
 11652  000280  6F8B               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 11653  000282  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11654  000284  0D08               	mullw	8
 11655  000286  0E80               	movlw	low _occupiedMemory
 11656  000288  24F3               	addwf	prodl,w,c
 11657  00028A  6ED9               	movwf	fsr2l,c
 11658  00028C  0E01               	movlw	high _occupiedMemory
 11659  00028E  20F4               	addwfc	prodh,w,c
 11660  000290  6EDA               	movwf	fsr2h,c
 11661  000292  CFDE F08C          	movff	postinc2,??_memory_txFrameRequest+4
 11662  000296  CFDD F08D          	movff	postdec2,??_memory_txFrameRequest+5
 11663  00029A  1F8C               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11664  00029C  1F8D               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11665  00029E  4B8C               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11666  0002A0  2B8D               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11667  0002A2  518A               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 11668  0002A4  278C               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11669  0002A6  518B               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 11670  0002A8  238D               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11671  0002AA  1F8C               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11672  0002AC  1F8D               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11673  0002AE  4B8C               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11674  0002B0  2B8D               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11675  0002B2  5188               	movf	??_memory_txFrameRequest& (0+255),w,b
 11676  0002B4  278C               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11677  0002B6  5189               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 11678  0002B8  238D               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11679  0002BA  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11680  0002BC  0D08               	mullw	8
 11681  0002BE  0E02               	movlw	2
 11682  0002C0  26F3               	addwf	prodl,f,c
 11683  0002C2  0E00               	movlw	0
 11684  0002C4  22F4               	addwfc	prodh,f,c
 11685  0002C6  0E80               	movlw	low _occupiedMemory
 11686  0002C8  24F3               	addwf	prodl,w,c
 11687  0002CA  6ED9               	movwf	fsr2l,c
 11688  0002CC  0E01               	movlw	high _occupiedMemory
 11689  0002CE  20F4               	addwfc	prodh,w,c
 11690  0002D0  6EDA               	movwf	fsr2h,c
 11691  0002D2  C08C  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 11692  0002D6  C08D  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 11696  0002DA  0E00               	movlw	0
 11697  0002DC  6F91               	movwf	memory_txFrameRequest@i& (0+255),b
 11698  0002DE                     l7064:
 11699                           
 11700                           ; BSR set to: 0
 11701  0002DE  0E07               	movlw	7
 11702  0002E0  6591               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 11703  0002E2  D001               	goto	l458
 11704  0002E4  D046               	goto	u8250
 11705  0002E6                     l458:
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;memoryController.c: 177: if (i == freeIndex)
 11709                           
 11710                           ; BSR set to: 0
 11711  0002E6  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11712  0002E8  1991               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 11713  0002EA  B4D8               	btfsc	status,2,c
 11714  0002EC  D03F               	goto	l462
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 11718                           
 11719                           ; BSR set to: 0
 11720                           
 11721                           ; BSR set to: 0
 11722                           ;memoryController.c: 178: continue;
 11723  0002EE  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11724  0002F0  0D08               	mullw	8
 11725  0002F2  0E80               	movlw	low _occupiedMemory
 11726  0002F4  24F3               	addwf	prodl,w,c
 11727  0002F6  6ED9               	movwf	fsr2l,c
 11728  0002F8  0E01               	movlw	high _occupiedMemory
 11729  0002FA  20F4               	addwfc	prodh,w,c
 11730  0002FC  6EDA               	movwf	fsr2h,c
 11731  0002FE  EE00  F070         	lfsr	0,checkForOverlap@a
 11732  000302  0E07               	movlw	7
 11733  000304                     u8201:
 11734  000304  CFDB FFEB          	movff	plusw2,plusw0
 11735  000308  06E8               	decf	wreg,f,c
 11736  00030A  E2FC               	bc	u8201
 11737  00030C  5191               	movf	memory_txFrameRequest@i& (0+255),w,b
 11738  00030E  0D08               	mullw	8
 11739  000310  0E80               	movlw	low _occupiedMemory
 11740  000312  24F3               	addwf	prodl,w,c
 11741  000314  6ED9               	movwf	fsr2l,c
 11742  000316  0E01               	movlw	high _occupiedMemory
 11743  000318  20F4               	addwfc	prodh,w,c
 11744  00031A  6EDA               	movwf	fsr2h,c
 11745  00031C  EE00  F078         	lfsr	0,checkForOverlap@b
 11746  000320  0E07               	movlw	7
 11747  000322                     u8211:
 11748  000322  CFDB FFEB          	movff	plusw2,plusw0
 11749  000326  06E8               	decf	wreg,f,c
 11750  000328  E2FC               	bc	u8211
 11751  00032A  EC00  F017         	call	_checkForOverlap	;wreg free
 11752  00032E  0900               	iorlw	0
 11753  000330  B4D8               	btfsc	status,2,c
 11754  000332  D01C               	goto	l462
 11755  000334  0100               	movlb	0	; () banked
 11756  000336  5191               	movf	memory_txFrameRequest@i& (0+255),w,b
 11757  000338  0D08               	mullw	8
 11758  00033A  0E06               	movlw	6
 11759  00033C  26F3               	addwf	prodl,f,c
 11760  00033E  0E00               	movlw	0
 11761  000340  22F4               	addwfc	prodh,f,c
 11762  000342  0E80               	movlw	low _occupiedMemory
 11763  000344  24F3               	addwf	prodl,w,c
 11764  000346  6ED9               	movwf	fsr2l,c
 11765  000348  0E01               	movlw	high _occupiedMemory
 11766  00034A  20F4               	addwfc	prodh,w,c
 11767  00034C  6EDA               	movwf	fsr2h,c
 11768  00034E  0101               	movlb	1	; () banked
 11769  000350  A0DF               	btfss	indf2,0,c
 11770  000352  D00C               	goto	l462
 11771                           
 11772                           ; BSR set to: 1
 11773                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 11774  000354  0100               	movlb	0	; () banked
 11775  000356  8399               	bsf	(memory_txFrameRequest@field+6)& (0+255),1,b
 11776                           
 11777                           ; BSR set to: 0
 11778                           ;memoryController.c: 182: return field;
 11779  000358  EE20  F093         	lfsr	2,memory_txFrameRequest@field
 11780  00035C  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11781  000360  0E07               	movlw	7
 11782  000362                     u8241:
 11783  000362  CFDB FFEB          	movff	plusw2,plusw0
 11784  000366  06E8               	decf	wreg,f,c
 11785  000368  E2FC               	bc	u8241
 11786                           
 11787                           ; BSR set to: 0
 11788  00036A  0012               	return	
 11789  00036C                     l462:
 11790                           
 11791                           ; BSR set to: 0
 11792                           
 11793                           ; BSR set to: 0
 11794  00036C  0100               	movlb	0	; () banked
 11795  00036E  2B91               	incf	memory_txFrameRequest@i& (0+255),f,b
 11796  000370  D7B6               	goto	l7064
 11797  000372                     u8250:
 11798                           
 11799                           ; BSR set to: 0
 11800                           ;memoryController.c: 183: }
 11801                           ;memoryController.c: 184: }
 11802                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 11803                           
 11804                           ; BSR set to: 0
 11805  000372  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11806  000374  0D08               	mullw	8
 11807  000376  0E06               	movlw	6
 11808  000378  26F3               	addwf	prodl,f,c
 11809  00037A  0E00               	movlw	0
 11810  00037C  22F4               	addwfc	prodh,f,c
 11811  00037E  0E80               	movlw	low _occupiedMemory
 11812  000380  24F3               	addwf	prodl,w,c
 11813  000382  6ED9               	movwf	fsr2l,c
 11814  000384  0E01               	movlw	high _occupiedMemory
 11815  000386  20F4               	addwfc	prodh,w,c
 11816  000388  6EDA               	movwf	fsr2h,c
 11817  00038A  0101               	movlb	1	; () banked
 11818  00038C  80DF               	bsf	indf2,0,c
 11819                           
 11820                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 11821  00038E  0100               	movlb	0	; () banked
 11822  000390  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11823  000392  0D08               	mullw	8
 11824  000394  0E07               	movlw	7
 11825  000396  26F3               	addwf	prodl,f,c
 11826  000398  0E00               	movlw	0
 11827  00039A  22F4               	addwfc	prodh,f,c
 11828  00039C  0E80               	movlw	low _occupiedMemory
 11829  00039E  24F3               	addwf	prodl,w,c
 11830  0003A0  6ED9               	movwf	fsr2l,c
 11831  0003A2  0E01               	movlw	high _occupiedMemory
 11832  0003A4  20F4               	addwfc	prodh,w,c
 11833  0003A6  6EDA               	movwf	fsr2h,c
 11834  0003A8  C09B  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 11838  0003AC  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11839  0003AE  0D08               	mullw	8
 11840  0003B0  0E80               	movlw	low _occupiedMemory
 11841  0003B2  24F3               	addwf	prodl,w,c
 11842  0003B4  6ED9               	movwf	fsr2l,c
 11843  0003B6  0E01               	movlw	high _occupiedMemory
 11844  0003B8  20F4               	addwfc	prodh,w,c
 11845  0003BA  6EDA               	movwf	fsr2h,c
 11846  0003BC  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 11847  0003C0  0E07               	movlw	7
 11848  0003C2                     u8261:
 11849  0003C2  CFDB FFEB          	movff	plusw2,plusw0
 11850  0003C6  06E8               	decf	wreg,f,c
 11851  0003C8  E2FC               	bc	u8261
 11852                           
 11853                           ; BSR set to: 0
 11854  0003CA  0012               	return	
 11855  0003CC                     l457:
 11856                           
 11857                           ;memoryController.c: 188: }
 11858                           ;memoryController.c: 189: }
 11859                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 11860                           
 11861                           ; BSR set to: 0
 11862                           
 11863                           ; BSR set to: 0
 11864  0003CC  0E01               	movlw	1
 11865  0003CE  0100               	movlb	0	; () banked
 11866  0003D0  6F90               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11867                           
 11868                           ; BSR set to: 0
 11869                           ;memoryController.c: 192: uint8_t i;
 11870                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 11871  0003D2  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11872  0003D4  0D08               	mullw	8
 11873  0003D6  0E80               	movlw	low _occupiedMemory
 11874  0003D8  24F3               	addwf	prodl,w,c
 11875  0003DA  6ED9               	movwf	fsr2l,c
 11876  0003DC  0E01               	movlw	high _occupiedMemory
 11877  0003DE  20F4               	addwfc	prodh,w,c
 11878  0003E0  6EDA               	movwf	fsr2h,c
 11879  0003E2  CFDE F088          	movff	postinc2,??_memory_txFrameRequest
 11880  0003E6  CFDD F089          	movff	postdec2,??_memory_txFrameRequest+1
 11881  0003EA  5180               	movf	memory_txFrameRequest@length& (0+255),w,b
 11882  0003EC  2788               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11883  0003EE  5181               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11884  0003F0  2389               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11885  0003F2  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11886  0003F4  0D08               	mullw	8
 11887  0003F6  0E02               	movlw	2
 11888  0003F8  26F3               	addwf	prodl,f,c
 11889  0003FA  0E00               	movlw	0
 11890  0003FC  22F4               	addwfc	prodh,f,c
 11891  0003FE  0E80               	movlw	low _occupiedMemory
 11892  000400  24F3               	addwf	prodl,w,c
 11893  000402  6ED9               	movwf	fsr2l,c
 11894  000404  0E01               	movlw	high _occupiedMemory
 11895  000406  20F4               	addwfc	prodh,w,c
 11896  000408  6EDA               	movwf	fsr2h,c
 11897  00040A  C088  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11898  00040E  C089  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 11902  000412  0E00               	movlw	0
 11903  000414  6F92               	movwf	memory_txFrameRequest@i_1136& (0+255),b
 11904  000416                     l7098:
 11905                           
 11906                           ; BSR set to: 0
 11907  000416  0E07               	movlw	7
 11908  000418  6592               	cpfsgt	memory_txFrameRequest@i_1136& (0+255),b
 11909  00041A  D001               	goto	l463
 11910  00041C  D03D               	goto	u8330
 11911  00041E                     l463:
 11912                           
 11913                           ; BSR set to: 0
 11914                           ;memoryController.c: 195: if (i == freeIndex)
 11915                           
 11916                           ; BSR set to: 0
 11917  00041E  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11918  000420  1992               	xorwf	memory_txFrameRequest@i_1136& (0+255),w,b
 11919  000422  B4D8               	btfsc	status,2,c
 11920  000424  D036               	goto	l468
 11921                           
 11922                           ; BSR set to: 0
 11923                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 11924                           
 11925                           ; BSR set to: 0
 11926                           
 11927                           ; BSR set to: 0
 11928                           ;memoryController.c: 196: continue;
 11929  000426  5192               	movf	memory_txFrameRequest@i_1136& (0+255),w,b
 11930  000428  0D08               	mullw	8
 11931  00042A  0E06               	movlw	6
 11932  00042C  26F3               	addwf	prodl,f,c
 11933  00042E  0E00               	movlw	0
 11934  000430  22F4               	addwfc	prodh,f,c
 11935  000432  0E80               	movlw	low _occupiedMemory
 11936  000434  24F3               	addwf	prodl,w,c
 11937  000436  6ED9               	movwf	fsr2l,c
 11938  000438  0E01               	movlw	high _occupiedMemory
 11939  00043A  20F4               	addwfc	prodh,w,c
 11940  00043C  6EDA               	movwf	fsr2h,c
 11941  00043E  0101               	movlb	1	; () banked
 11942  000440  A0DF               	btfss	indf2,0,c
 11943  000442  D027               	goto	l468
 11944                           
 11945                           ; BSR set to: 1
 11946                           ;memoryController.c: 200: }
 11947                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 11948                           
 11949                           ; BSR set to: 1
 11950                           
 11951                           ; BSR set to: 1
 11952                           ;memoryController.c: 198: continue;
 11953  000444  0100               	movlb	0	; () banked
 11954  000446  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11955  000448  0D08               	mullw	8
 11956  00044A  0E80               	movlw	low _occupiedMemory
 11957  00044C  24F3               	addwf	prodl,w,c
 11958  00044E  6ED9               	movwf	fsr2l,c
 11959  000450  0E01               	movlw	high _occupiedMemory
 11960  000452  20F4               	addwfc	prodh,w,c
 11961  000454  6EDA               	movwf	fsr2h,c
 11962  000456  EE00  F070         	lfsr	0,checkForOverlap@a
 11963  00045A  0E07               	movlw	7
 11964  00045C                     u8301:
 11965  00045C  CFDB FFEB          	movff	plusw2,plusw0
 11966  000460  06E8               	decf	wreg,f,c
 11967  000462  E2FC               	bc	u8301
 11968  000464  5192               	movf	memory_txFrameRequest@i_1136& (0+255),w,b
 11969  000466  0D08               	mullw	8
 11970  000468  0E80               	movlw	low _occupiedMemory
 11971  00046A  24F3               	addwf	prodl,w,c
 11972  00046C  6ED9               	movwf	fsr2l,c
 11973  00046E  0E01               	movlw	high _occupiedMemory
 11974  000470  20F4               	addwfc	prodh,w,c
 11975  000472  6EDA               	movwf	fsr2h,c
 11976  000474  EE00  F078         	lfsr	0,checkForOverlap@b
 11977  000478  0E07               	movlw	7
 11978  00047A                     u8311:
 11979  00047A  CFDB FFEB          	movff	plusw2,plusw0
 11980  00047E  06E8               	decf	wreg,f,c
 11981  000480  E2FC               	bc	u8311
 11982  000482  EC00  F017         	call	_checkForOverlap	;wreg free
 11983  000486  0900               	iorlw	0
 11984  000488  B4D8               	btfsc	status,2,c
 11985  00048A  D003               	goto	l468
 11986                           
 11987                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 11988  00048C  0E00               	movlw	0
 11989  00048E  0100               	movlb	0	; () banked
 11990  000490  6F90               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11991  000492                     l468:
 11992                           
 11993                           ; BSR set to: 0
 11994                           
 11995                           ; BSR set to: 0
 11996  000492  0100               	movlb	0	; () banked
 11997  000494  2B92               	incf	memory_txFrameRequest@i_1136& (0+255),f,b
 11998  000496  D7BF               	goto	l7098
 11999  000498                     u8330:
 12000                           
 12001                           ; BSR set to: 0
 12002                           ;memoryController.c: 205: }
 12003                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 12004                           
 12005                           ; BSR set to: 0
 12006  000498  5190               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 12007  00049A  B4D8               	btfsc	status,2,c
 12008  00049C  D06C               	goto	l469
 12009                           
 12010                           ; BSR set to: 0
 12011                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 12012  00049E  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12013  0004A0  0D08               	mullw	8
 12014  0004A2  0E06               	movlw	6
 12015  0004A4  26F3               	addwf	prodl,f,c
 12016  0004A6  0E00               	movlw	0
 12017  0004A8  22F4               	addwfc	prodh,f,c
 12018  0004AA  0E80               	movlw	low _occupiedMemory
 12019  0004AC  24F3               	addwf	prodl,w,c
 12020  0004AE  6ED9               	movwf	fsr2l,c
 12021  0004B0  0E01               	movlw	high _occupiedMemory
 12022  0004B2  20F4               	addwfc	prodh,w,c
 12023  0004B4  6EDA               	movwf	fsr2h,c
 12024  0004B6  0101               	movlb	1	; () banked
 12025  0004B8  80DF               	bsf	indf2,0,c
 12026                           
 12027                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 12028  0004BA  0100               	movlb	0	; () banked
 12029  0004BC  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12030  0004BE  0D08               	mullw	8
 12031  0004C0  0E80               	movlw	low _occupiedMemory
 12032  0004C2  24F3               	addwf	prodl,w,c
 12033  0004C4  6ED9               	movwf	fsr2l,c
 12034  0004C6  0E01               	movlw	high _occupiedMemory
 12035  0004C8  20F4               	addwfc	prodh,w,c
 12036  0004CA  6EDA               	movwf	fsr2h,c
 12037  0004CC  CFDE F088          	movff	postinc2,??_memory_txFrameRequest
 12038  0004D0  CFDD F089          	movff	postdec2,??_memory_txFrameRequest+1
 12039  0004D4  5180               	movf	memory_txFrameRequest@length& (0+255),w,b
 12040  0004D6  2788               	addwf	??_memory_txFrameRequest& (0+255),f,b
 12041  0004D8  5181               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12042  0004DA  2389               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 12043  0004DC  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12044  0004DE  0D08               	mullw	8
 12045  0004E0  0E02               	movlw	2
 12046  0004E2  26F3               	addwf	prodl,f,c
 12047  0004E4  0E00               	movlw	0
 12048  0004E6  22F4               	addwfc	prodh,f,c
 12049  0004E8  0E80               	movlw	low _occupiedMemory
 12050  0004EA  24F3               	addwf	prodl,w,c
 12051  0004EC  6ED9               	movwf	fsr2l,c
 12052  0004EE  0E01               	movlw	high _occupiedMemory
 12053  0004F0  20F4               	addwfc	prodh,w,c
 12054  0004F2  6EDA               	movwf	fsr2h,c
 12055  0004F4  C088  FFDE         	movff	??_memory_txFrameRequest,postinc2
 12056  0004F8  C089  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 12057                           
 12058                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 12059  0004FC  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12060  0004FE  0D08               	mullw	8
 12061  000500  0E06               	movlw	6
 12062  000502  26F3               	addwf	prodl,f,c
 12063  000504  0E00               	movlw	0
 12064  000506  22F4               	addwfc	prodh,f,c
 12065  000508  0E80               	movlw	low _occupiedMemory
 12066  00050A  24F3               	addwf	prodl,w,c
 12067  00050C  6ED9               	movwf	fsr2l,c
 12068  00050E  0E01               	movlw	high _occupiedMemory
 12069  000510  20F4               	addwfc	prodh,w,c
 12070  000512  6EDA               	movwf	fsr2h,c
 12071  000514  0101               	movlb	1	; () banked
 12072  000516  92DF               	bcf	indf2,1,c
 12073                           
 12074                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 12075  000518  0100               	movlb	0	; () banked
 12076  00051A  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12077  00051C  0D08               	mullw	8
 12078  00051E  0E04               	movlw	4
 12079  000520  26F3               	addwf	prodl,f,c
 12080  000522  0E00               	movlw	0
 12081  000524  22F4               	addwfc	prodh,f,c
 12082  000526  0E80               	movlw	low _occupiedMemory
 12083  000528  24F3               	addwf	prodl,w,c
 12084  00052A  6ED9               	movwf	fsr2l,c
 12085  00052C  0E01               	movlw	high _occupiedMemory
 12086  00052E  20F4               	addwfc	prodh,w,c
 12087  000530  6EDA               	movwf	fsr2h,c
 12088  000532  C080  FFDE         	movff	memory_txFrameRequest@length,postinc2
 12089  000536  C081  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 12090                           
 12091                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 12092  00053A  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12093  00053C  0D08               	mullw	8
 12094  00053E  0E07               	movlw	7
 12095  000540  26F3               	addwf	prodl,f,c
 12096  000542  0E00               	movlw	0
 12097  000544  22F4               	addwfc	prodh,f,c
 12098  000546  0E80               	movlw	low _occupiedMemory
 12099  000548  24F3               	addwf	prodl,w,c
 12100  00054A  6ED9               	movwf	fsr2l,c
 12101  00054C  0E01               	movlw	high _occupiedMemory
 12102  00054E  20F4               	addwfc	prodh,w,c
 12103  000550  6EDA               	movwf	fsr2h,c
 12104  000552  C09B  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 12105                           
 12106                           ; BSR set to: 0
 12107                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 12108  000556  519B               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12109  000558  0D08               	mullw	8
 12110  00055A  0E80               	movlw	low _occupiedMemory
 12111  00055C  24F3               	addwf	prodl,w,c
 12112  00055E  6ED9               	movwf	fsr2l,c
 12113  000560  0E01               	movlw	high _occupiedMemory
 12114  000562  20F4               	addwfc	prodh,w,c
 12115  000564  6EDA               	movwf	fsr2h,c
 12116  000566  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 12117  00056A  0E07               	movlw	7
 12118  00056C                     u8351:
 12119  00056C  CFDB FFEB          	movff	plusw2,plusw0
 12120  000570  06E8               	decf	wreg,f,c
 12121  000572  E2FC               	bc	u8351
 12122                           
 12123                           ; BSR set to: 0
 12124  000574  0012               	return	
 12125  000576                     l469:
 12126                           
 12127                           ;memoryController.c: 213: }
 12128                           ;memoryController.c: 214: }
 12129                           ;memoryController.c: 215: freeIndex++;
 12130                           
 12131                           ; BSR set to: 0
 12132                           
 12133                           ; BSR set to: 0
 12134  000576  0100               	movlb	0	; () banked
 12135  000578  2B9B               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;memoryController.c: 216: if (freeIndex == 8) {
 12139  00057A  0E08               	movlw	8
 12140  00057C  199B               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12141  00057E  A4D8               	btfss	status,2,c
 12142  000580  D00B               	goto	l470
 12143                           
 12144                           ; BSR set to: 0
 12145                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 12146  000582  8399               	bsf	(memory_txFrameRequest@field+6)& (0+255),1,b
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;memoryController.c: 219: return field;
 12150  000584  EE20  F093         	lfsr	2,memory_txFrameRequest@field
 12151  000588  EE00  F080         	lfsr	0,?_memory_txFrameRequest
 12152  00058C  0E07               	movlw	7
 12153  00058E                     u8371:
 12154  00058E  CFDB FFEB          	movff	plusw2,plusw0
 12155  000592  06E8               	decf	wreg,f,c
 12156  000594  E2FC               	bc	u8371
 12157                           
 12158                           ; BSR set to: 0
 12159  000596  0012               	return	
 12160  000598                     l470:
 12161                           
 12162                           ; BSR set to: 0
 12163                           
 12164                           ; BSR set to: 0
 12165  000598  0E08               	movlw	8
 12166  00059A  0100               	movlb	0	; () banked
 12167  00059C  659B               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 12168  00059E  D5E6               	goto	l450
 12169  0005A0  0012               	return	
 12170  0005A2                     __end_of_memory_txFrameRequest:
 12171                           	opt stack 0
 12172                           tblptru	equ	0xFF8
 12173                           tblptrh	equ	0xFF7
 12174                           tblptrl	equ	0xFF6
 12175                           tablat	equ	0xFF5
 12176                           prodh	equ	0xFF4
 12177                           prodl	equ	0xFF3
 12178                           intcon	equ	0xFF2
 12179                           intcon3	equ	0xFF0
 12180                           postinc0	equ	0xFEE
 12181                           plusw0	equ	0xFEB
 12182                           fsr0h	equ	0xFEA
 12183                           fsr0l	equ	0xFE9
 12184                           wreg	equ	0xFE8
 12185                           indf1	equ	0xFE7
 12186                           postinc1	equ	0xFE6
 12187                           postdec1	equ	0xFE5
 12188                           plusw1	equ	0xFE3
 12189                           fsr1h	equ	0xFE2
 12190                           fsr1l	equ	0xFE1
 12191                           indf2	equ	0xFDF
 12192                           postinc2	equ	0xFDE
 12193                           postdec2	equ	0xFDD
 12194                           plusw2	equ	0xFDB
 12195                           fsr2h	equ	0xFDA
 12196                           fsr2l	equ	0xFD9
 12197                           status	equ	0xFD8
 12198                           
 12199 ;; *************** function _entireMemoryFull *****************
 12200 ;; Defined at:
 12201 ;;		line 44 in file "src/mem/memoryController.c"
 12202 ;; Parameters:    Size  Location     Type
 12203 ;;		None
 12204 ;; Auto vars:     Size  Location     Type
 12205 ;;  i               1    0[BANK0 ] unsigned char 
 12206 ;; Return value:  Size  Location     Type
 12207 ;;                  1    wreg      unsigned char 
 12208 ;; Registers used:
 12209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12210 ;; Tracked objects:
 12211 ;;		On entry : 0/0
 12212 ;;		On exit  : 0/0
 12213 ;;		Unchanged: 0/0
 12214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12215 ;;      Params:         0       0       0       0       0       0       0       0       0
 12216 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12217 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12218 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12219 ;;Total ram usage:        1 bytes
 12220 ;; Hardware stack levels used:    1
 12221 ;; Hardware stack levels required when called:    4
 12222 ;; This function calls:
 12223 ;;		Nothing
 12224 ;; This function is called by:
 12225 ;;		_memory_txFrameRequest
 12226 ;; This function uses a non-reentrant model
 12227 ;;
 12228                           
 12229                           	psect	text38
 12230  0041B2                     __ptext38:
 12231                           	opt stack 0
 12232  0041B2                     _entireMemoryFull:
 12233                           	opt stack 23
 12234                           
 12235                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 12236                           
 12237                           ;incstack = 0
 12238  0041B2  0E00               	movlw	0
 12239  0041B4  0100               	movlb	0	; () banked
 12240  0041B6  6F60               	movwf	entireMemoryFull@i& (0+255),b
 12241  0041B8                     l6828:
 12242                           
 12243                           ; BSR set to: 0
 12244  0041B8  0E07               	movlw	7
 12245  0041BA  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 12246  0041BC  D001               	goto	l399
 12247  0041BE  D014               	goto	u7800
 12248  0041C0                     l399:
 12249                           
 12250                           ; BSR set to: 0
 12251                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 12252                           
 12253                           ; BSR set to: 0
 12254  0041C0  5160               	movf	entireMemoryFull@i& (0+255),w,b
 12255  0041C2  0D08               	mullw	8
 12256  0041C4  0E06               	movlw	6
 12257  0041C6  26F3               	addwf	prodl,f,c
 12258  0041C8  0E00               	movlw	0
 12259  0041CA  22F4               	addwfc	prodh,f,c
 12260  0041CC  0E80               	movlw	low _occupiedMemory
 12261  0041CE  24F3               	addwf	prodl,w,c
 12262  0041D0  6ED9               	movwf	fsr2l,c
 12263  0041D2  0E01               	movlw	high _occupiedMemory
 12264  0041D4  20F4               	addwfc	prodh,w,c
 12265  0041D6  6EDA               	movwf	fsr2h,c
 12266  0041D8  0101               	movlb	1	; () banked
 12267  0041DA  B0DF               	btfsc	indf2,0,c
 12268  0041DC  D002               	goto	l401
 12269                           
 12270                           ; BSR set to: 1
 12271                           ;memoryController.c: 47: return 0;
 12272  0041DE  0E00               	movlw	0
 12273                           
 12274                           ; BSR set to: 1
 12275  0041E0  0012               	return	
 12276  0041E2                     l401:
 12277                           
 12278                           ; BSR set to: 1
 12279                           
 12280                           ; BSR set to: 1
 12281  0041E2  0100               	movlb	0	; () banked
 12282  0041E4  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 12283  0041E6  D7E8               	goto	l6828
 12284  0041E8                     u7800:
 12285                           
 12286                           ; BSR set to: 0
 12287                           ;memoryController.c: 48: }
 12288                           ;memoryController.c: 49: return 1;
 12289                           
 12290                           ; BSR set to: 0
 12291  0041E8  0E01               	movlw	1
 12292  0041EA  0012               	return	
 12293  0041EC                     __end_of_entireMemoryFull:
 12294                           	opt stack 0
 12295                           tblptru	equ	0xFF8
 12296                           tblptrh	equ	0xFF7
 12297                           tblptrl	equ	0xFF6
 12298                           tablat	equ	0xFF5
 12299                           prodh	equ	0xFF4
 12300                           prodl	equ	0xFF3
 12301                           intcon	equ	0xFF2
 12302                           intcon3	equ	0xFF0
 12303                           postinc0	equ	0xFEE
 12304                           plusw0	equ	0xFEB
 12305                           fsr0h	equ	0xFEA
 12306                           fsr0l	equ	0xFE9
 12307                           wreg	equ	0xFE8
 12308                           indf1	equ	0xFE7
 12309                           postinc1	equ	0xFE6
 12310                           postdec1	equ	0xFE5
 12311                           plusw1	equ	0xFE3
 12312                           fsr1h	equ	0xFE2
 12313                           fsr1l	equ	0xFE1
 12314                           indf2	equ	0xFDF
 12315                           postinc2	equ	0xFDE
 12316                           postdec2	equ	0xFDD
 12317                           plusw2	equ	0xFDB
 12318                           fsr2h	equ	0xFDA
 12319                           fsr2l	equ	0xFD9
 12320                           status	equ	0xFD8
 12321                           
 12322 ;; *************** function _entireMemoryEmpty *****************
 12323 ;; Defined at:
 12324 ;;		line 36 in file "src/mem/memoryController.c"
 12325 ;; Parameters:    Size  Location     Type
 12326 ;;		None
 12327 ;; Auto vars:     Size  Location     Type
 12328 ;;  i               1    0[BANK0 ] unsigned char 
 12329 ;; Return value:  Size  Location     Type
 12330 ;;                  1    wreg      unsigned char 
 12331 ;; Registers used:
 12332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12333 ;; Tracked objects:
 12334 ;;		On entry : 0/0
 12335 ;;		On exit  : 0/0
 12336 ;;		Unchanged: 0/0
 12337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12338 ;;      Params:         0       0       0       0       0       0       0       0       0
 12339 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12340 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12341 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12342 ;;Total ram usage:        1 bytes
 12343 ;; Hardware stack levels used:    1
 12344 ;; Hardware stack levels required when called:    4
 12345 ;; This function calls:
 12346 ;;		Nothing
 12347 ;; This function is called by:
 12348 ;;		_memory_txFrameRequest
 12349 ;; This function uses a non-reentrant model
 12350 ;;
 12351                           
 12352                           	psect	text39
 12353  0041EC                     __ptext39:
 12354                           	opt stack 0
 12355  0041EC                     _entireMemoryEmpty:
 12356                           	opt stack 23
 12357                           
 12358                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 12359                           
 12360                           ;incstack = 0
 12361  0041EC  0E00               	movlw	0
 12362  0041EE  0100               	movlb	0	; () banked
 12363  0041F0  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 12364  0041F2                     l6808:
 12365                           
 12366                           ; BSR set to: 0
 12367  0041F2  0E07               	movlw	7
 12368  0041F4  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 12369  0041F6  D001               	goto	l393
 12370  0041F8  D014               	goto	u7770
 12371  0041FA                     l393:
 12372                           
 12373                           ; BSR set to: 0
 12374                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 12375                           
 12376                           ; BSR set to: 0
 12377  0041FA  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 12378  0041FC  0D08               	mullw	8
 12379  0041FE  0E06               	movlw	6
 12380  004200  26F3               	addwf	prodl,f,c
 12381  004202  0E00               	movlw	0
 12382  004204  22F4               	addwfc	prodh,f,c
 12383  004206  0E80               	movlw	low _occupiedMemory
 12384  004208  24F3               	addwf	prodl,w,c
 12385  00420A  6ED9               	movwf	fsr2l,c
 12386  00420C  0E01               	movlw	high _occupiedMemory
 12387  00420E  20F4               	addwfc	prodh,w,c
 12388  004210  6EDA               	movwf	fsr2h,c
 12389  004212  0101               	movlb	1	; () banked
 12390  004214  A0DF               	btfss	indf2,0,c
 12391  004216  D002               	goto	l395
 12392                           
 12393                           ; BSR set to: 1
 12394                           ;memoryController.c: 39: return 0;
 12395  004218  0E00               	movlw	0
 12396                           
 12397                           ; BSR set to: 1
 12398  00421A  0012               	return	
 12399  00421C                     l395:
 12400                           
 12401                           ; BSR set to: 1
 12402                           
 12403                           ; BSR set to: 1
 12404  00421C  0100               	movlb	0	; () banked
 12405  00421E  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 12406  004220  D7E8               	goto	l6808
 12407  004222                     u7770:
 12408                           
 12409                           ; BSR set to: 0
 12410                           ;memoryController.c: 40: }
 12411                           ;memoryController.c: 41: return 1;
 12412                           
 12413                           ; BSR set to: 0
 12414  004222  0E01               	movlw	1
 12415  004224  0012               	return	
 12416  004226                     __end_of_entireMemoryEmpty:
 12417                           	opt stack 0
 12418                           tblptru	equ	0xFF8
 12419                           tblptrh	equ	0xFF7
 12420                           tblptrl	equ	0xFF6
 12421                           tablat	equ	0xFF5
 12422                           prodh	equ	0xFF4
 12423                           prodl	equ	0xFF3
 12424                           intcon	equ	0xFF2
 12425                           intcon3	equ	0xFF0
 12426                           postinc0	equ	0xFEE
 12427                           plusw0	equ	0xFEB
 12428                           fsr0h	equ	0xFEA
 12429                           fsr0l	equ	0xFE9
 12430                           wreg	equ	0xFE8
 12431                           indf1	equ	0xFE7
 12432                           postinc1	equ	0xFE6
 12433                           postdec1	equ	0xFE5
 12434                           plusw1	equ	0xFE3
 12435                           fsr1h	equ	0xFE2
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           plusw2	equ	0xFDB
 12441                           fsr2h	equ	0xFDA
 12442                           fsr2l	equ	0xFD9
 12443                           status	equ	0xFD8
 12444                           
 12445 ;; *************** function _checkForOverlap *****************
 12446 ;; Defined at:
 12447 ;;		line 62 in file "src/mem/memoryController.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  a               8   16[BANK0 ] struct memoryField
 12450 ;;  b               8   24[BANK0 ] struct memoryField
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;		None
 12453 ;; Return value:  Size  Location     Type
 12454 ;;                  1    wreg      unsigned char 
 12455 ;; Registers used:
 12456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12457 ;; Tracked objects:
 12458 ;;		On entry : 0/0
 12459 ;;		On exit  : 0/0
 12460 ;;		Unchanged: 0/0
 12461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12462 ;;      Params:         0      16       0       0       0       0       0       0       0
 12463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12464 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12465 ;;      Totals:         0      16       0       0       0       0       0       0       0
 12466 ;;Total ram usage:       16 bytes
 12467 ;; Hardware stack levels used:    1
 12468 ;; Hardware stack levels required when called:    5
 12469 ;; This function calls:
 12470 ;;		_checkForOverlapSwitched
 12471 ;; This function is called by:
 12472 ;;		_memory_txFrameRequest
 12473 ;; This function uses a non-reentrant model
 12474 ;;
 12475                           
 12476                           	psect	text40
 12477  002E00                     __ptext40:
 12478                           	opt stack 0
 12479  002E00                     _checkForOverlap:
 12480                           	opt stack 22
 12481                           
 12482                           ;memoryController.c: 63: if ((a.start == b.start) ||
 12483                           ;memoryController.c: 64: (a.end == b.end) ||
 12484                           ;memoryController.c: 65: (a.start == b.end) ||
 12485                           ;memoryController.c: 66: (a.end == b.start) ||
 12486                           ;memoryController.c: 67: (a.end > 0x3000) ||
 12487                           ;memoryController.c: 68: (a.start > 0x3000) ||
 12488                           ;memoryController.c: 69: (b.end > 0x3000) ||
 12489                           ;memoryController.c: 70: (b.start > 0x3000))
 12490                           
 12491                           ;incstack = 0
 12492  002E00  0100               	movlb	0	; () banked
 12493  002E02  5178               	movf	checkForOverlap@b& (0+255),w,b
 12494  002E04  1970               	xorwf	checkForOverlap@a& (0+255),w,b
 12495  002E06  E104               	bnz	u7810
 12496  002E08  5179               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12497  002E0A  1971               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 12498  002E0C  B4D8               	btfsc	status,2,c
 12499  002E0E  D029               	goto	u7880
 12500  002E10                     u7810:
 12501                           
 12502                           ; BSR set to: 0
 12503  002E10  517A               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12504  002E12  1972               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12505  002E14  E104               	bnz	u7820
 12506  002E16  517B               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12507  002E18  1973               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12508  002E1A  B4D8               	btfsc	status,2,c
 12509  002E1C  D022               	goto	u7880
 12510  002E1E                     u7820:
 12511                           
 12512                           ; BSR set to: 0
 12513  002E1E  5170               	movf	checkForOverlap@a& (0+255),w,b
 12514  002E20  197A               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 12515  002E22  E104               	bnz	u7830
 12516  002E24  5171               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12517  002E26  197B               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 12518  002E28  B4D8               	btfsc	status,2,c
 12519  002E2A  D01B               	goto	u7880
 12520  002E2C                     u7830:
 12521                           
 12522                           ; BSR set to: 0
 12523  002E2C  5178               	movf	checkForOverlap@b& (0+255),w,b
 12524  002E2E  1972               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12525  002E30  E104               	bnz	u7840
 12526  002E32  5179               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12527  002E34  1973               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12528  002E36  B4D8               	btfsc	status,2,c
 12529  002E38  D014               	goto	u7880
 12530  002E3A                     u7840:
 12531                           
 12532                           ; BSR set to: 0
 12533  002E3A  0572               	decf	(checkForOverlap@a+2)& (0+255),w,b
 12534  002E3C  0E30               	movlw	48
 12535  002E3E  5973               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 12536  002E40  B0D8               	btfsc	status,0,c
 12537  002E42  D00F               	goto	u7880
 12538                           
 12539                           ; BSR set to: 0
 12540  002E44  0570               	decf	checkForOverlap@a& (0+255),w,b
 12541  002E46  0E30               	movlw	48
 12542  002E48  5971               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12543  002E4A  B0D8               	btfsc	status,0,c
 12544  002E4C  D00A               	goto	u7880
 12545                           
 12546                           ; BSR set to: 0
 12547  002E4E  057A               	decf	(checkForOverlap@b+2)& (0+255),w,b
 12548  002E50  0E30               	movlw	48
 12549  002E52  597B               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12550  002E54  B0D8               	btfsc	status,0,c
 12551  002E56  D005               	goto	u7880
 12552                           
 12553                           ; BSR set to: 0
 12554  002E58  0578               	decf	checkForOverlap@b& (0+255),w,b
 12555  002E5A  0E30               	movlw	48
 12556  002E5C  5979               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12557  002E5E  A0D8               	btfss	status,0,c
 12558  002E60  D002               	goto	l413
 12559  002E62                     u7880:
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;memoryController.c: 71: return 1;
 12563                           
 12564                           ; BSR set to: 0
 12565  002E62  0E01               	movlw	1
 12566                           
 12567                           ; BSR set to: 0
 12568  002E64  0012               	return	
 12569  002E66                     l413:
 12570                           
 12571                           ; BSR set to: 0
 12572                           ;memoryController.c: 74: if (a.start < a.end) {
 12573                           
 12574                           ; BSR set to: 0
 12575  002E66  5172               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12576  002E68  5D70               	subwf	checkForOverlap@a& (0+255),w,b
 12577  002E6A  5173               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12578  002E6C  5971               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12579  002E6E  B0D8               	btfsc	status,0,c
 12580  002E70  D036               	goto	l417
 12581                           
 12582                           ; BSR set to: 0
 12583                           ;memoryController.c: 75: if (b.start < b.end) {
 12584  002E72  517A               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12585  002E74  5D78               	subwf	checkForOverlap@b& (0+255),w,b
 12586  002E76  517B               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12587  002E78  5979               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12588  002E7A  B0D8               	btfsc	status,0,c
 12589  002E7C  D025               	goto	l418
 12590                           
 12591                           ; BSR set to: 0
 12592                           ;memoryController.c: 77: if (a.start < b.start) {
 12593  002E7E  5178               	movf	checkForOverlap@b& (0+255),w,b
 12594  002E80  5D70               	subwf	checkForOverlap@a& (0+255),w,b
 12595  002E82  5179               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12596  002E84  5971               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12597  002E86  B0D8               	btfsc	status,0,c
 12598  002E88  D00A               	goto	l419
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;memoryController.c: 78: if (a.end > b.start) {
 12602  002E8A  5172               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12603  002E8C  5D78               	subwf	checkForOverlap@b& (0+255),w,b
 12604  002E8E  5173               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12605  002E90  5979               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12606  002E92  B0D8               	btfsc	status,0,c
 12607  002E94  D002               	goto	l420
 12608                           
 12609                           ; BSR set to: 0
 12610                           ;memoryController.c: 79: return 1;
 12611  002E96  0E01               	movlw	1
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;memoryController.c: 80: }
 12615                           
 12616                           ; BSR set to: 0
 12617  002E98  0012               	return	
 12618  002E9A                     l420:
 12619                           
 12620                           ; BSR set to: 0
 12621                           ;memoryController.c: 81: else {
 12622                           ;memoryController.c: 82: return 0;
 12623                           
 12624                           ; BSR set to: 0
 12625  002E9A  0E00               	movlw	0
 12626                           
 12627                           ; BSR set to: 0
 12628                           ;memoryController.c: 83: }
 12629                           ;memoryController.c: 84: }
 12630                           
 12631                           ; BSR set to: 0
 12632  002E9C  0012               	return	
 12633  002E9E                     l419:
 12634                           
 12635                           ; BSR set to: 0
 12636                           ;memoryController.c: 85: else {
 12637                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 12638                           
 12639                           ; BSR set to: 0
 12640  002E9E  EE20  F078         	lfsr	2,checkForOverlap@b
 12641  002EA2  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12642  002EA6  0E07               	movlw	7
 12643  002EA8                     u7931:
 12644  002EA8  CFDB FFEB          	movff	plusw2,plusw0
 12645  002EAC  06E8               	decf	wreg,f,c
 12646  002EAE  E2FC               	bc	u7931
 12647  002EB0  EE20  F070         	lfsr	2,checkForOverlap@a
 12648  002EB4  EE00  F068         	lfsr	0,checkForOverlapSwitched@b
 12649  002EB8  0E07               	movlw	7
 12650  002EBA                     u7941:
 12651  002EBA  CFDB FFEB          	movff	plusw2,plusw0
 12652  002EBE  06E8               	decf	wreg,f,c
 12653  002EC0  E2FC               	bc	u7941
 12654  002EC2  EC80  F019         	call	_checkForOverlapSwitched	;wreg free
 12655                           
 12656                           ;memoryController.c: 87: }
 12657                           ;memoryController.c: 88: }
 12658  002EC6  0012               	return	
 12659  002EC8                     l418:
 12660                           
 12661                           ;memoryController.c: 89: else {
 12662                           ;memoryController.c: 90: if (b.end < a.start)
 12663  002EC8  0100               	movlb	0	; () banked
 12664  002ECA  5170               	movf	checkForOverlap@a& (0+255),w,b
 12665  002ECC  5D7A               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 12666  002ECE  5171               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12667  002ED0  597B               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12668  002ED2  B0D8               	btfsc	status,0,c
 12669  002ED4  D002               	goto	l424
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;memoryController.c: 91: return 0;
 12673  002ED6  0E00               	movlw	0
 12674                           
 12675                           ; BSR set to: 0
 12676                           
 12677                           ; BSR set to: 0
 12678  002ED8  0012               	return	
 12679  002EDA                     l424:
 12680                           
 12681                           ; BSR set to: 0
 12682                           ;memoryController.c: 92: else
 12683                           ;memoryController.c: 93: return 1;
 12684                           
 12685                           ; BSR set to: 0
 12686  002EDA  0E01               	movlw	1
 12687                           
 12688                           ; BSR set to: 0
 12689                           ;memoryController.c: 94: }
 12690                           ;memoryController.c: 95: }
 12691                           
 12692                           ; BSR set to: 0
 12693                           
 12694                           ; BSR set to: 0
 12695  002EDC  0012               	return	
 12696  002EDE                     l417:
 12697                           
 12698                           ; BSR set to: 0
 12699                           ;memoryController.c: 96: else {
 12700                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 12701                           
 12702                           ; BSR set to: 0
 12703  002EDE  EE20  F078         	lfsr	2,checkForOverlap@b
 12704  002EE2  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12705  002EE6  0E07               	movlw	7
 12706  002EE8                     u7961:
 12707  002EE8  CFDB FFEB          	movff	plusw2,plusw0
 12708  002EEC  06E8               	decf	wreg,f,c
 12709  002EEE  E2FC               	bc	u7961
 12710  002EF0  EE20  F070         	lfsr	2,checkForOverlap@a
 12711  002EF4  EE00  F068         	lfsr	0,checkForOverlapSwitched@b
 12712  002EF8  0E07               	movlw	7
 12713  002EFA                     u7971:
 12714  002EFA  CFDB FFEB          	movff	plusw2,plusw0
 12715  002EFE  06E8               	decf	wreg,f,c
 12716  002F00  E2FC               	bc	u7971
 12717  002F02  EC80  F019         	call	_checkForOverlapSwitched	;wreg free
 12718  002F06  0012               	return	
 12719  002F08                     __end_of_checkForOverlap:
 12720                           	opt stack 0
 12721                           tblptru	equ	0xFF8
 12722                           tblptrh	equ	0xFF7
 12723                           tblptrl	equ	0xFF6
 12724                           tablat	equ	0xFF5
 12725                           prodh	equ	0xFF4
 12726                           prodl	equ	0xFF3
 12727                           intcon	equ	0xFF2
 12728                           intcon3	equ	0xFF0
 12729                           postinc0	equ	0xFEE
 12730                           plusw0	equ	0xFEB
 12731                           fsr0h	equ	0xFEA
 12732                           fsr0l	equ	0xFE9
 12733                           wreg	equ	0xFE8
 12734                           indf1	equ	0xFE7
 12735                           postinc1	equ	0xFE6
 12736                           postdec1	equ	0xFE5
 12737                           plusw1	equ	0xFE3
 12738                           fsr1h	equ	0xFE2
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           plusw2	equ	0xFDB
 12744                           fsr2h	equ	0xFDA
 12745                           fsr2l	equ	0xFD9
 12746                           status	equ	0xFD8
 12747                           
 12748 ;; *************** function _checkForOverlapSwitched *****************
 12749 ;; Defined at:
 12750 ;;		line 101 in file "src/mem/memoryController.c"
 12751 ;; Parameters:    Size  Location     Type
 12752 ;;  a               8    0[BANK0 ] struct memoryField
 12753 ;;  b               8    8[BANK0 ] struct memoryField
 12754 ;; Auto vars:     Size  Location     Type
 12755 ;;		None
 12756 ;; Return value:  Size  Location     Type
 12757 ;;                  1    wreg      unsigned char 
 12758 ;; Registers used:
 12759 ;;		wreg, status,2, status,0
 12760 ;; Tracked objects:
 12761 ;;		On entry : 0/0
 12762 ;;		On exit  : 0/0
 12763 ;;		Unchanged: 0/0
 12764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12765 ;;      Params:         0      16       0       0       0       0       0       0       0
 12766 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12767 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12768 ;;      Totals:         0      16       0       0       0       0       0       0       0
 12769 ;;Total ram usage:       16 bytes
 12770 ;; Hardware stack levels used:    1
 12771 ;; Hardware stack levels required when called:    4
 12772 ;; This function calls:
 12773 ;;		Nothing
 12774 ;; This function is called by:
 12775 ;;		_checkForOverlap
 12776 ;; This function uses a non-reentrant model
 12777 ;;
 12778                           
 12779                           	psect	text41
 12780  003300                     __ptext41:
 12781                           	opt stack 0
 12782  003300                     _checkForOverlapSwitched:
 12783                           	opt stack 22
 12784                           
 12785                           ;memoryController.c: 104: if ((a.start == b.start) ||
 12786                           ;memoryController.c: 105: (a.end == b.end) ||
 12787                           ;memoryController.c: 106: (a.start == b.end) ||
 12788                           ;memoryController.c: 107: (a.end == b.start) ||
 12789                           ;memoryController.c: 108: (a.end > 0x3000) ||
 12790                           ;memoryController.c: 109: (a.start > 0x3000) ||
 12791                           ;memoryController.c: 110: (b.end > 0x3000) ||
 12792                           ;memoryController.c: 111: (b.start > 0x3000))
 12793                           
 12794                           ;incstack = 0
 12795  003300  0100               	movlb	0	; () banked
 12796  003302  5168               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12797  003304  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 12798  003306  E104               	bnz	u7620
 12799  003308  5169               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12800  00330A  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12801  00330C  B4D8               	btfsc	status,2,c
 12802  00330E  D029               	goto	u7690
 12803  003310                     u7620:
 12804                           
 12805                           ; BSR set to: 0
 12806  003310  516A               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12807  003312  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12808  003314  E104               	bnz	u7630
 12809  003316  516B               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12810  003318  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12811  00331A  B4D8               	btfsc	status,2,c
 12812  00331C  D022               	goto	u7690
 12813  00331E                     u7630:
 12814                           
 12815                           ; BSR set to: 0
 12816  00331E  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12817  003320  196A               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12818  003322  E104               	bnz	u7640
 12819  003324  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12820  003326  196B               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12821  003328  B4D8               	btfsc	status,2,c
 12822  00332A  D01B               	goto	u7690
 12823  00332C                     u7640:
 12824                           
 12825                           ; BSR set to: 0
 12826  00332C  5168               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12827  00332E  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12828  003330  E104               	bnz	u7650
 12829  003332  5169               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12830  003334  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12831  003336  B4D8               	btfsc	status,2,c
 12832  003338  D014               	goto	u7690
 12833  00333A                     u7650:
 12834                           
 12835                           ; BSR set to: 0
 12836  00333A  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12837  00333C  0E30               	movlw	48
 12838  00333E  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12839  003340  B0D8               	btfsc	status,0,c
 12840  003342  D00F               	goto	u7690
 12841                           
 12842                           ; BSR set to: 0
 12843  003344  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 12844  003346  0E30               	movlw	48
 12845  003348  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12846  00334A  B0D8               	btfsc	status,0,c
 12847  00334C  D00A               	goto	u7690
 12848                           
 12849                           ; BSR set to: 0
 12850  00334E  056A               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12851  003350  0E30               	movlw	48
 12852  003352  596B               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12853  003354  B0D8               	btfsc	status,0,c
 12854  003356  D005               	goto	u7690
 12855                           
 12856                           ; BSR set to: 0
 12857  003358  0568               	decf	checkForOverlapSwitched@b& (0+255),w,b
 12858  00335A  0E30               	movlw	48
 12859  00335C  5969               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12860  00335E  A0D8               	btfss	status,0,c
 12861  003360  D002               	goto	l429
 12862  003362                     u7690:
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;memoryController.c: 112: return 1;
 12866                           
 12867                           ; BSR set to: 0
 12868  003362  0E01               	movlw	1
 12869                           
 12870                           ; BSR set to: 0
 12871  003364  0012               	return	
 12872  003366                     l429:
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;memoryController.c: 115: if (a.start < a.end) {
 12876                           
 12877                           ; BSR set to: 0
 12878  003366  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12879  003368  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12880  00336A  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12881  00336C  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12882  00336E  B0D8               	btfsc	status,0,c
 12883  003370  0012               	return	
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;memoryController.c: 116: if (b.start < b.end) {
 12887  003372  516A               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12888  003374  5D68               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12889  003376  516B               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12890  003378  5969               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12891  00337A  B0D8               	btfsc	status,0,c
 12892  00337C  D010               	goto	l434
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;memoryController.c: 118: if (a.start < b.start) {
 12896  00337E  5168               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12897  003380  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12898  003382  5169               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12899  003384  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12900  003386  B0D8               	btfsc	status,0,c
 12901  003388  0012               	return	
 12902                           
 12903                           ; BSR set to: 0
 12904                           ;memoryController.c: 119: if (a.end > b.start) {
 12905  00338A  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12906  00338C  5D68               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12907  00338E  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12908  003390  5969               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12909  003392  B0D8               	btfsc	status,0,c
 12910  003394  D002               	goto	l436
 12911                           
 12912                           ; BSR set to: 0
 12913                           ;memoryController.c: 120: return 1;
 12914  003396  0E01               	movlw	1
 12915                           
 12916                           ; BSR set to: 0
 12917                           ;memoryController.c: 121: }
 12918                           
 12919                           ; BSR set to: 0
 12920  003398  0012               	return	
 12921  00339A                     l436:
 12922                           
 12923                           ; BSR set to: 0
 12924                           ;memoryController.c: 122: else {
 12925                           ;memoryController.c: 123: return 0;
 12926                           
 12927                           ; BSR set to: 0
 12928  00339A  0E00               	movlw	0
 12929                           
 12930                           ; BSR set to: 0
 12931                           ;memoryController.c: 124: }
 12932                           ;memoryController.c: 125: }
 12933                           ;memoryController.c: 126: }
 12934                           
 12935                           ; BSR set to: 0
 12936                           
 12937                           ; BSR set to: 0
 12938  00339C  0012               	return	
 12939  00339E                     l434:
 12940                           
 12941                           ; BSR set to: 0
 12942                           ;memoryController.c: 127: else {
 12943                           ;memoryController.c: 128: if (b.end < a.start)
 12944                           
 12945                           ; BSR set to: 0
 12946  00339E  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12947  0033A0  5D6A               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12948  0033A2  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12949  0033A4  596B               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12950  0033A6  B0D8               	btfsc	status,0,c
 12951  0033A8  D002               	goto	l439
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;memoryController.c: 129: return 0;
 12955  0033AA  0E00               	movlw	0
 12956                           
 12957                           ; BSR set to: 0
 12958                           
 12959                           ; BSR set to: 0
 12960  0033AC  0012               	return	
 12961  0033AE                     l439:
 12962                           
 12963                           ; BSR set to: 0
 12964                           ;memoryController.c: 130: else
 12965                           ;memoryController.c: 131: return 1;
 12966                           
 12967                           ; BSR set to: 0
 12968  0033AE  0E01               	movlw	1
 12969                           
 12970                           ; BSR set to: 0
 12971                           
 12972                           ; BSR set to: 0
 12973                           
 12974                           ; BSR set to: 0
 12975  0033B0  0012               	return	
 12976  0033B2                     __end_of_checkForOverlapSwitched:
 12977                           	opt stack 0
 12978                           tblptru	equ	0xFF8
 12979                           tblptrh	equ	0xFF7
 12980                           tblptrl	equ	0xFF6
 12981                           tablat	equ	0xFF5
 12982                           prodh	equ	0xFF4
 12983                           prodl	equ	0xFF3
 12984                           intcon	equ	0xFF2
 12985                           intcon3	equ	0xFF0
 12986                           postinc0	equ	0xFEE
 12987                           plusw0	equ	0xFEB
 12988                           fsr0h	equ	0xFEA
 12989                           fsr0l	equ	0xFE9
 12990                           wreg	equ	0xFE8
 12991                           indf1	equ	0xFE7
 12992                           postinc1	equ	0xFE6
 12993                           postdec1	equ	0xFE5
 12994                           plusw1	equ	0xFE3
 12995                           fsr1h	equ	0xFE2
 12996                           fsr1l	equ	0xFE1
 12997                           indf2	equ	0xFDF
 12998                           postinc2	equ	0xFDE
 12999                           postdec2	equ	0xFDD
 13000                           plusw2	equ	0xFDB
 13001                           fsr2h	equ	0xFDA
 13002                           fsr2l	equ	0xFD9
 13003                           status	equ	0xFD8
 13004                           
 13005 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 13006 ;; Defined at:
 13007 ;;		line 251 in file "src/enc424j600/ENC424J600.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  ethtype         2   15[BANK0 ] enum E5497
 13010 ;;  field           8   17[BANK0 ] struct memoryField
 13011 ;; Auto vars:     Size  Location     Type
 13012 ;;  opcode          1   27[BANK0 ] unsigned char 
 13013 ;;  highByte        1   26[BANK0 ] unsigned char 
 13014 ;;  lowByte         1   25[BANK0 ] unsigned char 
 13015 ;; Return value:  Size  Location     Type
 13016 ;;                  1    wreg      void 
 13017 ;; Registers used:
 13018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13019 ;; Tracked objects:
 13020 ;;		On entry : 0/0
 13021 ;;		On exit  : 0/0
 13022 ;;		Unchanged: 0/0
 13023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13024 ;;      Params:         0      10       0       0       0       0       0       0       0
 13025 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13026 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13027 ;;      Totals:         0      13       0       0       0       0       0       0       0
 13028 ;;Total ram usage:       13 bytes
 13029 ;; Hardware stack levels used:    1
 13030 ;; Hardware stack levels required when called:    7
 13031 ;; This function calls:
 13032 ;;		_ENC424J600_setGPDATAWritePointer
 13033 ;;		_ENC424J600_writeSPI
 13034 ;; This function is called by:
 13035 ;;		_ethernet_txFrameRequest
 13036 ;; This function uses a non-reentrant model
 13037 ;;
 13038                           
 13039                           	psect	text42
 13040  003F46                     __ptext42:
 13041                           	opt stack 0
 13042  003F46                     _ethernetController_writeEtherTypeFieldToBuffer:
 13043                           	opt stack 21
 13044                           
 13045                           ;ENC424J600.c: 252: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;incstack = 0
 13049  003F46  0E06               	movlw	6
 13050  003F48  0100               	movlb	0	; () banked
 13051  003F4A  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 13052  003F4C  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 13053  003F4E  0E00               	movlw	0
 13054  003F50  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 13055  003F52  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 13056  003F54  EC9D  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13057                           
 13058                           ;ENC424J600.c: 253: uint8_t lowByte = ethtype & 0x00ff;
 13059  003F58  C06F  F079         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 13060                           
 13061                           ;ENC424J600.c: 254: uint8_t highByte = (ethtype & 0xff00) >> 8;
 13062  003F5C  0100               	movlb	0	; () banked
 13063  003F5E  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 13064  003F60  6F7A               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 13065                           
 13066                           ; BSR set to: 0
 13067                           ;ENC424J600.c: 255: uint8_t opcode = 0x2A;
 13068  003F62  0E2A               	movlw	42
 13069  003F64  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;ENC424J600.c: 256: PORTBbits.RB4=0;
 13073  003F66  9881               	bcf	3969,4,c	;volatile
 13074                           
 13075                           ;ENC424J600.c: 257: ENC424J600_writeSPI(&opcode);
 13076  003F68  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 13077  003F6A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13078  003F6C  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 13079  003F6E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13080  003F70  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13081                           
 13082                           ;ENC424J600.c: 258: ENC424J600_writeSPI(&highByte);
 13083  003F74  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 13084  003F76  0100               	movlb	0	; () banked
 13085  003F78  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13086  003F7A  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 13087  003F7C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13088  003F7E  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13089                           
 13090                           ;ENC424J600.c: 259: ENC424J600_writeSPI(&lowByte);
 13091  003F82  0E79               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13092  003F84  0100               	movlb	0	; () banked
 13093  003F86  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13094  003F88  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13095  003F8A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13096  003F8C  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13097                           
 13098                           ;ENC424J600.c: 260: PORTBbits.RB4=1;
 13099  003F90  8881               	bsf	3969,4,c	;volatile
 13100  003F92  0012               	return		;funcret
 13101  003F94                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 13102                           	opt stack 0
 13103                           tblptru	equ	0xFF8
 13104                           tblptrh	equ	0xFF7
 13105                           tblptrl	equ	0xFF6
 13106                           tablat	equ	0xFF5
 13107                           prodh	equ	0xFF4
 13108                           prodl	equ	0xFF3
 13109                           intcon	equ	0xFF2
 13110                           intcon3	equ	0xFF0
 13111                           postinc0	equ	0xFEE
 13112                           plusw0	equ	0xFEB
 13113                           fsr0h	equ	0xFEA
 13114                           fsr0l	equ	0xFE9
 13115                           wreg	equ	0xFE8
 13116                           indf1	equ	0xFE7
 13117                           postinc1	equ	0xFE6
 13118                           postdec1	equ	0xFE5
 13119                           plusw1	equ	0xFE3
 13120                           fsr1h	equ	0xFE2
 13121                           fsr1l	equ	0xFE1
 13122                           indf2	equ	0xFDF
 13123                           postinc2	equ	0xFDE
 13124                           postdec2	equ	0xFDD
 13125                           plusw2	equ	0xFDB
 13126                           fsr2h	equ	0xFDA
 13127                           fsr2l	equ	0xFD9
 13128                           status	equ	0xFD8
 13129                           
 13130 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 13131 ;; Defined at:
 13132 ;;		line 238 in file "src/enc424j600/ENC424J600.c"
 13133 ;; Parameters:    Size  Location     Type
 13134 ;;  addr            6   15[BANK0 ] struct macaddress
 13135 ;;  field           8   21[BANK0 ] struct memoryField
 13136 ;; Auto vars:     Size  Location     Type
 13137 ;;  i               1   36[BANK0 ] unsigned char 
 13138 ;;  i               1   37[BANK0 ] unsigned char 
 13139 ;;  data            6   29[BANK0 ] unsigned char [6]
 13140 ;;  opcode          1   35[BANK0 ] unsigned char 
 13141 ;; Return value:  Size  Location     Type
 13142 ;;                  1    wreg      void 
 13143 ;; Registers used:
 13144 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13145 ;; Tracked objects:
 13146 ;;		On entry : 0/0
 13147 ;;		On exit  : 0/0
 13148 ;;		Unchanged: 0/0
 13149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13150 ;;      Params:         0      14       0       0       0       0       0       0       0
 13151 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13152 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13153 ;;      Totals:         0      23       0       0       0       0       0       0       0
 13154 ;;Total ram usage:       23 bytes
 13155 ;; Hardware stack levels used:    1
 13156 ;; Hardware stack levels required when called:    7
 13157 ;; This function calls:
 13158 ;;		_ENC424J600_setGPDATAWritePointer
 13159 ;;		_ENC424J600_writeSPI
 13160 ;; This function is called by:
 13161 ;;		_ethernet_txFrameRequest
 13162 ;;		_ipv4_sendFrame
 13163 ;; This function uses a non-reentrant model
 13164 ;;
 13165                           
 13166                           	psect	text43
 13167  003842                     __ptext43:
 13168                           	opt stack 0
 13169  003842                     _ethernetController_writeDestinationMACAddress:
 13170                           	opt stack 21
 13171                           
 13172                           ;ENC424J600.c: 239: ENC424J600_setGPDATAWritePointer(field.start);
 13173                           
 13174                           ;incstack = 0
 13175  003842  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 13176  003846  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 13177  00384A  EC9D  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13178                           
 13179                           ;ENC424J600.c: 240: uint8_t data[6];
 13180                           ;ENC424J600.c: 241: for (uint8_t i = 0; i < 6; i++)
 13181  00384E  0E00               	movlw	0
 13182  003850  0100               	movlb	0	; () banked
 13183  003852  6F85               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13184  003854                     l6932:
 13185                           
 13186                           ; BSR set to: 0
 13187  003854  0E05               	movlw	5
 13188  003856  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13189  003858  D001               	goto	l122
 13190  00385A  D014               	goto	u7990
 13191  00385C                     l122:
 13192                           
 13193                           ; BSR set to: 0
 13194                           ;ENC424J600.c: 242: data[i] = addr.address[i];
 13195                           
 13196                           ; BSR set to: 0
 13197  00385C  5185               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13198  00385E  0D01               	mullw	1
 13199  003860  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 13200  003862  24F3               	addwf	prodl,w,c
 13201  003864  6ED9               	movwf	fsr2l,c
 13202  003866  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 13203  003868  20F4               	addwfc	prodh,w,c
 13204  00386A  6EDA               	movwf	fsr2h,c
 13205  00386C  5185               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13206  00386E  0D01               	mullw	1
 13207  003870  0E7D               	movlw	low ethernetController_writeDestinationMACAddress@data
 13208  003872  24F3               	addwf	prodl,w,c
 13209  003874  6EE1               	movwf	fsr1l,c
 13210  003876  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13211  003878  20F4               	addwfc	prodh,w,c
 13212  00387A  6EE2               	movwf	fsr1h,c
 13213  00387C  CFDF FFE7          	movff	indf2,indf1
 13214                           
 13215                           ; BSR set to: 0
 13216  003880  2B85               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 13217  003882  D7E8               	goto	l6932
 13218  003884                     u7990:
 13219                           
 13220                           ; BSR set to: 0
 13221                           ;ENC424J600.c: 243: uint8_t opcode = 0x2A;
 13222                           
 13223                           ; BSR set to: 0
 13224  003884  0E2A               	movlw	42
 13225  003886  6F83               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 13226                           
 13227                           ; BSR set to: 0
 13228                           ;ENC424J600.c: 244: PORTBbits.RB4=0;
 13229  003888  9881               	bcf	3969,4,c	;volatile
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;ENC424J600.c: 245: ENC424J600_writeSPI(&opcode);
 13233  00388A  0E83               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 13234  00388C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13235  00388E  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 13236  003890  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13237  003892  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13238                           
 13239                           ;ENC424J600.c: 246: for (uint8_t i = 0; i < 6; i++)
 13240  003896  0E00               	movlw	0
 13241  003898  0100               	movlb	0	; () banked
 13242  00389A  6F84               	movwf	ethernetController_writeDestinationMACAddress@i_620& (0+255),b
 13243  00389C                     l6950:
 13244                           
 13245                           ; BSR set to: 0
 13246  00389C  0E05               	movlw	5
 13247  00389E  6584               	cpfsgt	ethernetController_writeDestinationMACAddress@i_620& (0+255),b
 13248  0038A0  D001               	goto	l124
 13249  0038A2  D00D               	goto	u8010
 13250  0038A4                     l124:
 13251                           
 13252                           ; BSR set to: 0
 13253                           ;ENC424J600.c: 247: ENC424J600_writeSPI(&data[i]);
 13254                           
 13255                           ; BSR set to: 0
 13256  0038A4  5184               	movf	ethernetController_writeDestinationMACAddress@i_620& (0+255),w,b
 13257  0038A6  0D01               	mullw	1
 13258  0038A8  0E7D               	movlw	low ethernetController_writeDestinationMACAddress@data
 13259  0038AA  24F3               	addwf	prodl,w,c
 13260  0038AC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13261  0038AE  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13262  0038B0  20F4               	addwfc	prodh,w,c
 13263  0038B2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13264  0038B4  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13265  0038B8  0100               	movlb	0	; () banked
 13266  0038BA  2B84               	incf	ethernetController_writeDestinationMACAddress@i_620& (0+255),f,b
 13267  0038BC  D7EF               	goto	l6950
 13268  0038BE                     u8010:
 13269                           
 13270                           ; BSR set to: 0
 13271                           ;ENC424J600.c: 248: PORTBbits.RB4=1;
 13272  0038BE  8881               	bsf	3969,4,c	;volatile
 13273                           
 13274                           ; BSR set to: 0
 13275  0038C0  0012               	return		;funcret
 13276  0038C2                     __end_of_ethernetController_writeDestinationMACAddress:
 13277                           	opt stack 0
 13278                           tblptru	equ	0xFF8
 13279                           tblptrh	equ	0xFF7
 13280                           tblptrl	equ	0xFF6
 13281                           tablat	equ	0xFF5
 13282                           prodh	equ	0xFF4
 13283                           prodl	equ	0xFF3
 13284                           intcon	equ	0xFF2
 13285                           intcon3	equ	0xFF0
 13286                           postinc0	equ	0xFEE
 13287                           plusw0	equ	0xFEB
 13288                           fsr0h	equ	0xFEA
 13289                           fsr0l	equ	0xFE9
 13290                           wreg	equ	0xFE8
 13291                           indf1	equ	0xFE7
 13292                           postinc1	equ	0xFE6
 13293                           postdec1	equ	0xFE5
 13294                           plusw1	equ	0xFE3
 13295                           fsr1h	equ	0xFE2
 13296                           fsr1l	equ	0xFE1
 13297                           indf2	equ	0xFDF
 13298                           postinc2	equ	0xFDE
 13299                           postdec2	equ	0xFDD
 13300                           plusw2	equ	0xFDB
 13301                           fsr2h	equ	0xFDA
 13302                           fsr2l	equ	0xFD9
 13303                           status	equ	0xFD8
 13304                           
 13305 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 13306 ;; Defined at:
 13307 ;;		line 542 in file "src/enc424j600/ENC424J600.c"
 13308 ;; Parameters:    Size  Location     Type
 13309 ;;  addr            2   10[BANK0 ] unsigned int 
 13310 ;; Auto vars:     Size  Location     Type
 13311 ;;  highByte        1   14[BANK0 ] unsigned char 
 13312 ;;  lowByte         1   13[BANK0 ] unsigned char 
 13313 ;;  opcode          1   12[BANK0 ] unsigned char 
 13314 ;; Return value:  Size  Location     Type
 13315 ;;                  1    wreg      void 
 13316 ;; Registers used:
 13317 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13318 ;; Tracked objects:
 13319 ;;		On entry : 0/0
 13320 ;;		On exit  : 0/0
 13321 ;;		Unchanged: 0/0
 13322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13323 ;;      Params:         0       2       0       0       0       0       0       0       0
 13324 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13325 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13326 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13327 ;;Total ram usage:        5 bytes
 13328 ;; Hardware stack levels used:    1
 13329 ;; Hardware stack levels required when called:    6
 13330 ;; This function calls:
 13331 ;;		_ENC424J600_writeSPI
 13332 ;; This function is called by:
 13333 ;;		_ethernetController_writeDestinationMACAddress
 13334 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 13335 ;; This function uses a non-reentrant model
 13336 ;;
 13337                           
 13338                           	psect	text44
 13339  00413A                     __ptext44:
 13340                           	opt stack 0
 13341  00413A                     _ENC424J600_setGPDATAWritePointer:
 13342                           	opt stack 21
 13343                           
 13344                           ;ENC424J600.c: 543: uint8_t opcode = 0x6C;
 13345                           
 13346                           ; BSR set to: 0
 13347                           ;incstack = 0
 13348  00413A  0E6C               	movlw	108
 13349  00413C  0100               	movlb	0	; () banked
 13350  00413E  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;ENC424J600.c: 544: uint8_t lowByte = addr & 0x00ff;
 13354  004140  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 13355                           
 13356                           ;ENC424J600.c: 545: uint8_t highByte = (addr & 0xff00) >> 8;
 13357  004144  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 13358  004146  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 13359                           
 13360                           ; BSR set to: 0
 13361                           ;ENC424J600.c: 546: PORTBbits.RB4=0;
 13362  004148  9881               	bcf	3969,4,c	;volatile
 13363                           
 13364                           ; BSR set to: 0
 13365                           ;ENC424J600.c: 547: ENC424J600_writeSPI(&opcode);
 13366  00414A  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 13367  00414C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13368  00414E  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 13369  004150  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13370  004152  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13371                           
 13372                           ;ENC424J600.c: 548: ENC424J600_writeSPI(&lowByte);
 13373  004156  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 13374  004158  0100               	movlb	0	; () banked
 13375  00415A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13376  00415C  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 13377  00415E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13378  004160  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13379                           
 13380                           ;ENC424J600.c: 549: ENC424J600_writeSPI(&highByte);
 13381  004164  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 13382  004166  0100               	movlb	0	; () banked
 13383  004168  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13384  00416A  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 13385  00416C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13386  00416E  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13387                           
 13388                           ;ENC424J600.c: 550: PORTBbits.RB4=1;
 13389  004172  8881               	bsf	3969,4,c	;volatile
 13390  004174  0012               	return		;funcret
 13391  004176                     __end_of_ENC424J600_setGPDATAWritePointer:
 13392                           	opt stack 0
 13393                           tblptru	equ	0xFF8
 13394                           tblptrh	equ	0xFF7
 13395                           tblptrl	equ	0xFF6
 13396                           tablat	equ	0xFF5
 13397                           prodh	equ	0xFF4
 13398                           prodl	equ	0xFF3
 13399                           intcon	equ	0xFF2
 13400                           intcon3	equ	0xFF0
 13401                           postinc0	equ	0xFEE
 13402                           plusw0	equ	0xFEB
 13403                           fsr0h	equ	0xFEA
 13404                           fsr0l	equ	0xFE9
 13405                           wreg	equ	0xFE8
 13406                           indf1	equ	0xFE7
 13407                           postinc1	equ	0xFE6
 13408                           postdec1	equ	0xFE5
 13409                           plusw1	equ	0xFE3
 13410                           fsr1h	equ	0xFE2
 13411                           fsr1l	equ	0xFE1
 13412                           indf2	equ	0xFDF
 13413                           postinc2	equ	0xFDE
 13414                           postdec2	equ	0xFDD
 13415                           plusw2	equ	0xFDB
 13416                           fsr2h	equ	0xFDA
 13417                           fsr2l	equ	0xFD9
 13418                           status	equ	0xFD8
 13419                           
 13420 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 13421 ;; Defined at:
 13422 ;;		line 210 in file "src/enc424j600/ENC424J600.c"
 13423 ;; Parameters:    Size  Location     Type
 13424 ;;  data            1    wreg     unsigned char 
 13425 ;;  len             2   10[BANK0 ] unsigned int 
 13426 ;; Auto vars:     Size  Location     Type
 13427 ;;  data            1   16[BANK0 ] unsigned char 
 13428 ;;  opcode          1   17[BANK0 ] unsigned char 
 13429 ;; Return value:  Size  Location     Type
 13430 ;;                  1    wreg      void 
 13431 ;; Registers used:
 13432 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13433 ;; Tracked objects:
 13434 ;;		On entry : 0/0
 13435 ;;		On exit  : 0/0
 13436 ;;		Unchanged: 0/0
 13437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13438 ;;      Params:         0       2       0       0       0       0       0       0       0
 13439 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13440 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13441 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13442 ;;Total ram usage:        8 bytes
 13443 ;; Hardware stack levels used:    1
 13444 ;; Hardware stack levels required when called:    6
 13445 ;; This function calls:
 13446 ;;		_ENC424J600_writeSPI
 13447 ;; This function is called by:
 13448 ;;		_ARP_send
 13449 ;;		_ipv4_streamToTransmissionBuffer
 13450 ;; This function uses a non-reentrant model
 13451 ;;
 13452                           
 13453                           	psect	text45
 13454  003C62                     __ptext45:
 13455                           	opt stack 0
 13456  003C62                     _ethernetController_streamToTransmitBuffer:
 13457                           	opt stack 23
 13458                           
 13459                           ;incstack = 0
 13460                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 13461  003C62  0100               	movlb	0	; () banked
 13462  003C64  6F70               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 13463                           
 13464                           ;ENC424J600.c: 211: uint8_t opcode;
 13465                           ;ENC424J600.c: 212: uint16_t static pointer = 0;
 13466                           ;ENC424J600.c: 213: if (pointer == 0) {
 13467  003C66  5041               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13468  003C68  1042               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13469  003C6A  A4D8               	btfss	status,2,c
 13470  003C6C  D00A               	goto	l116
 13471                           
 13472                           ;ENC424J600.c: 223: opcode = 0x2A;
 13473  003C6E  0E2A               	movlw	42
 13474  003C70  0100               	movlb	0	; () banked
 13475  003C72  6F71               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;ENC424J600.c: 224: PORTBbits.RB4=0;
 13479  003C74  9881               	bcf	3969,4,c	;volatile
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;ENC424J600.c: 225: ENC424J600_writeSPI(&opcode);
 13483  003C76  0E71               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 13484  003C78  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13485  003C7A  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 13486  003C7C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13487  003C7E  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13488  003C82                     l116:
 13489                           
 13490                           ;ENC424J600.c: 226: }
 13491                           ;ENC424J600.c: 228: ENC424J600_writeSPI(&data);
 13492  003C82  0E70               	movlw	low ethernetController_streamToTransmitBuffer@data
 13493  003C84  0100               	movlb	0	; () banked
 13494  003C86  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13495  003C88  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 13496  003C8A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13497  003C8C  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13498                           
 13499                           ;ENC424J600.c: 230: if (pointer == len - 1) {
 13500  003C90  0EFF               	movlw	255
 13501  003C92  0100               	movlb	0	; () banked
 13502  003C94  6F6C               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 13503  003C96  0EFF               	movlw	255
 13504  003C98  6F6D               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 13505  003C9A  C06A  F06E         	movff	ethernetController_streamToTransmitBuffer@len,??_ethernetController_streamToTrans
      +                          mitBuffer+2
 13506  003C9E  C06B  F06F         	movff	ethernetController_streamToTransmitBuffer@len+1,??_ethernetController_streamToTra
      +                          nsmitBuffer+3
 13507  003CA2  516C               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 13508  003CA4  276E               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 13509  003CA6  516D               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 13510  003CA8  236F               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 13511  003CAA  5041               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13512  003CAC  196E               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 13513  003CAE  E10A               	bnz	l7180
 13514  003CB0  5042               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13515  003CB2  196F               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 13516  003CB4  A4D8               	btfss	status,2,c
 13517  003CB6  D006               	goto	l117
 13518                           
 13519                           ; BSR set to: 0
 13520                           ;ENC424J600.c: 231: PORTBbits.RB4=1;
 13521  003CB8  8881               	bsf	3969,4,c	;volatile
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;ENC424J600.c: 232: pointer = 0;
 13525  003CBA  0E00               	movlw	0
 13526  003CBC  6E42               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 13527  003CBE  0E00               	movlw	0
 13528  003CC0  6E41               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 13529                           
 13530                           ;ENC424J600.c: 233: } else {
 13531  003CC2  0012               	return	
 13532  003CC4                     l117:
 13533  003CC4                     l7180:
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;ENC424J600.c: 234: pointer++;
 13537  003CC4  4A41               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 13538  003CC6  2A42               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 13539  003CC8  0012               	return	
 13540  003CCA                     __end_of_ethernetController_streamToTransmitBuffer:
 13541                           	opt stack 0
 13542                           tblptru	equ	0xFF8
 13543                           tblptrh	equ	0xFF7
 13544                           tblptrl	equ	0xFF6
 13545                           tablat	equ	0xFF5
 13546                           prodh	equ	0xFF4
 13547                           prodl	equ	0xFF3
 13548                           intcon	equ	0xFF2
 13549                           intcon3	equ	0xFF0
 13550                           postinc0	equ	0xFEE
 13551                           plusw0	equ	0xFEB
 13552                           fsr0h	equ	0xFEA
 13553                           fsr0l	equ	0xFE9
 13554                           wreg	equ	0xFE8
 13555                           indf1	equ	0xFE7
 13556                           postinc1	equ	0xFE6
 13557                           postdec1	equ	0xFE5
 13558                           plusw1	equ	0xFE3
 13559                           fsr1h	equ	0xFE2
 13560                           fsr1l	equ	0xFE1
 13561                           indf2	equ	0xFDF
 13562                           postinc2	equ	0xFDE
 13563                           postdec2	equ	0xFDD
 13564                           plusw2	equ	0xFDB
 13565                           fsr2h	equ	0xFDA
 13566                           fsr2l	equ	0xFD9
 13567                           status	equ	0xFD8
 13568                           
 13569 ;; *************** function _ethernetController_sendPacket *****************
 13570 ;; Defined at:
 13571 ;;		line 186 in file "src/enc424j600/ENC424J600.c"
 13572 ;; Parameters:    Size  Location     Type
 13573 ;;  field           8   18[BANK0 ] struct memoryField
 13574 ;; Auto vars:     Size  Location     Type
 13575 ;;		None
 13576 ;; Return value:  Size  Location     Type
 13577 ;;                  1    wreg      void 
 13578 ;; Registers used:
 13579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13580 ;; Tracked objects:
 13581 ;;		On entry : 0/0
 13582 ;;		On exit  : 0/0
 13583 ;;		Unchanged: 0/0
 13584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13585 ;;      Params:         0       8       0       0       0       0       0       0       0
 13586 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13587 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13588 ;;      Totals:         0       8       0       0       0       0       0       0       0
 13589 ;;Total ram usage:        8 bytes
 13590 ;; Hardware stack levels used:    1
 13591 ;; Hardware stack levels required when called:    8
 13592 ;; This function calls:
 13593 ;;		_ENC424J600_setTXLength
 13594 ;;		_ENC424J600_setTXStartAddress
 13595 ;;		_ENC424J600_writeSingleByte
 13596 ;;		_memory_txFrameClear
 13597 ;; This function is called by:
 13598 ;;		_ARP_send
 13599 ;;		_ipv4_sendFrame
 13600 ;; This function uses a non-reentrant model
 13601 ;;
 13602                           
 13603                           	psect	text46
 13604  00441E                     __ptext46:
 13605                           	opt stack 0
 13606  00441E                     _ethernetController_sendPacket:
 13607                           	opt stack 20
 13608                           
 13609                           ;ENC424J600.c: 187: ENC424J600_setTXStartAddress(field.start);
 13610                           
 13611                           ; BSR set to: 0
 13612                           ;incstack = 0
 13613  00441E  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 13614  004422  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 13615  004426  ECA7  F021         	call	_ENC424J600_setTXStartAddress	;wreg free
 13616                           
 13617                           ;ENC424J600.c: 188: ENC424J600_setTXLength(field.length);
 13618  00442A  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 13619  00442E  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 13620  004432  ECBC  F021         	call	_ENC424J600_setTXLength	;wreg free
 13621                           
 13622                           ;ENC424J600.c: 189: ENC424J600_writeSingleByte(0b11010100);
 13623  004436  0ED4               	movlw	212
 13624  004438  ECF9  F022         	call	_ENC424J600_writeSingleByte
 13625                           
 13626                           ;ENC424J600.c: 190: memory_txFrameClear(field.index);
 13627  00443C  0100               	movlb	0	; () banked
 13628  00443E  5179               	movf	(ethernetController_sendPacket@field+7)& (0+255),w,b
 13629  004440  EC70  F022         	call	_memory_txFrameClear
 13630  004444  0012               	return		;funcret
 13631  004446                     __end_of_ethernetController_sendPacket:
 13632                           	opt stack 0
 13633                           tblptru	equ	0xFF8
 13634                           tblptrh	equ	0xFF7
 13635                           tblptrl	equ	0xFF6
 13636                           tablat	equ	0xFF5
 13637                           prodh	equ	0xFF4
 13638                           prodl	equ	0xFF3
 13639                           intcon	equ	0xFF2
 13640                           intcon3	equ	0xFF0
 13641                           postinc0	equ	0xFEE
 13642                           plusw0	equ	0xFEB
 13643                           fsr0h	equ	0xFEA
 13644                           fsr0l	equ	0xFE9
 13645                           wreg	equ	0xFE8
 13646                           indf1	equ	0xFE7
 13647                           postinc1	equ	0xFE6
 13648                           postdec1	equ	0xFE5
 13649                           plusw1	equ	0xFE3
 13650                           fsr1h	equ	0xFE2
 13651                           fsr1l	equ	0xFE1
 13652                           indf2	equ	0xFDF
 13653                           postinc2	equ	0xFDE
 13654                           postdec2	equ	0xFDD
 13655                           plusw2	equ	0xFDB
 13656                           fsr2h	equ	0xFDA
 13657                           fsr2l	equ	0xFD9
 13658                           status	equ	0xFD8
 13659                           
 13660 ;; *************** function _memory_txFrameClear *****************
 13661 ;; Defined at:
 13662 ;;		line 224 in file "src/mem/memoryController.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  index           1    wreg     unsigned char 
 13665 ;; Auto vars:     Size  Location     Type
 13666 ;;  index           1    0[BANK0 ] unsigned char 
 13667 ;; Return value:  Size  Location     Type
 13668 ;;                  1    wreg      void 
 13669 ;; Registers used:
 13670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13671 ;; Tracked objects:
 13672 ;;		On entry : 0/0
 13673 ;;		On exit  : 0/0
 13674 ;;		Unchanged: 0/0
 13675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13676 ;;      Params:         0       0       0       0       0       0       0       0       0
 13677 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13678 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13679 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13680 ;;Total ram usage:        1 bytes
 13681 ;; Hardware stack levels used:    1
 13682 ;; Hardware stack levels required when called:    4
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		_ethernetController_sendPacket
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           	psect	text47
 13691  0044E0                     __ptext47:
 13692                           	opt stack 0
 13693  0044E0                     _memory_txFrameClear:
 13694                           	opt stack 23
 13695                           
 13696                           ;incstack = 0
 13697                           ;memory_txFrameClear@index stored from wreg
 13698  0044E0  0100               	movlb	0	; () banked
 13699  0044E2  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 13700                           
 13701                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 13702  0044E4  0100               	movlb	0	; () banked
 13703  0044E6  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 13704  0044E8  0D08               	mullw	8
 13705  0044EA  0E06               	movlw	6
 13706  0044EC  26F3               	addwf	prodl,f,c
 13707  0044EE  0E00               	movlw	0
 13708  0044F0  22F4               	addwfc	prodh,f,c
 13709  0044F2  0E80               	movlw	low _occupiedMemory
 13710  0044F4  24F3               	addwf	prodl,w,c
 13711  0044F6  6ED9               	movwf	fsr2l,c
 13712  0044F8  0E01               	movlw	high _occupiedMemory
 13713  0044FA  20F4               	addwfc	prodh,w,c
 13714  0044FC  6EDA               	movwf	fsr2h,c
 13715  0044FE  0101               	movlb	1	; () banked
 13716  004500  90DF               	bcf	indf2,0,c
 13717                           
 13718                           ; BSR set to: 1
 13719  004502  0012               	return		;funcret
 13720  004504                     __end_of_memory_txFrameClear:
 13721                           	opt stack 0
 13722                           tblptru	equ	0xFF8
 13723                           tblptrh	equ	0xFF7
 13724                           tblptrl	equ	0xFF6
 13725                           tablat	equ	0xFF5
 13726                           prodh	equ	0xFF4
 13727                           prodl	equ	0xFF3
 13728                           intcon	equ	0xFF2
 13729                           intcon3	equ	0xFF0
 13730                           postinc0	equ	0xFEE
 13731                           plusw0	equ	0xFEB
 13732                           fsr0h	equ	0xFEA
 13733                           fsr0l	equ	0xFE9
 13734                           wreg	equ	0xFE8
 13735                           indf1	equ	0xFE7
 13736                           postinc1	equ	0xFE6
 13737                           postdec1	equ	0xFE5
 13738                           plusw1	equ	0xFE3
 13739                           fsr1h	equ	0xFE2
 13740                           fsr1l	equ	0xFE1
 13741                           indf2	equ	0xFDF
 13742                           postinc2	equ	0xFDE
 13743                           postdec2	equ	0xFDD
 13744                           plusw2	equ	0xFDB
 13745                           fsr2h	equ	0xFDA
 13746                           fsr2l	equ	0xFD9
 13747                           status	equ	0xFD8
 13748                           
 13749 ;; *************** function _ENC424J600_setTXStartAddress *****************
 13750 ;; Defined at:
 13751 ;;		line 535 in file "src/enc424j600/ENC424J600.c"
 13752 ;; Parameters:    Size  Location     Type
 13753 ;;  addr            2   14[BANK0 ] unsigned int 
 13754 ;; Auto vars:     Size  Location     Type
 13755 ;;  highByte        1   17[BANK0 ] unsigned char 
 13756 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13757 ;; Return value:  Size  Location     Type
 13758 ;;                  1    wreg      void 
 13759 ;; Registers used:
 13760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13761 ;; Tracked objects:
 13762 ;;		On entry : 0/0
 13763 ;;		On exit  : 0/0
 13764 ;;		Unchanged: 0/0
 13765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13766 ;;      Params:         0       2       0       0       0       0       0       0       0
 13767 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13768 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13769 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13770 ;;Total ram usage:        4 bytes
 13771 ;; Hardware stack levels used:    1
 13772 ;; Hardware stack levels required when called:    7
 13773 ;; This function calls:
 13774 ;;		_ENC424J600_writeControlRegisterUnbanked
 13775 ;; This function is called by:
 13776 ;;		_ethernetController_sendPacket
 13777 ;; This function uses a non-reentrant model
 13778 ;;
 13779                           
 13780                           	psect	text48
 13781  00434E                     __ptext48:
 13782                           	opt stack 0
 13783  00434E                     _ENC424J600_setTXStartAddress:
 13784                           	opt stack 20
 13785                           
 13786                           ;ENC424J600.c: 536: uint8_t lowByte = addr & 0xff;
 13787                           
 13788                           ; BSR set to: 1
 13789                           ;incstack = 0
 13790  00434E  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 13791                           
 13792                           ;ENC424J600.c: 537: uint8_t highByte = (addr & 0xff00) >> 8;
 13793  004352  0100               	movlb	0	; () banked
 13794  004354  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 13795  004356  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;ENC424J600.c: 538: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 13799  004358  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 13800  00435A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13801  00435C  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 13802  00435E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13803  004360  0E00               	movlw	0
 13804  004362  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13805                           
 13806                           ;ENC424J600.c: 539: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 13807  004366  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 13808  004368  0100               	movlb	0	; () banked
 13809  00436A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13810  00436C  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 13811  00436E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13812  004370  0E01               	movlw	1
 13813  004372  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13814  004376  0012               	return		;funcret
 13815  004378                     __end_of_ENC424J600_setTXStartAddress:
 13816                           	opt stack 0
 13817                           tblptru	equ	0xFF8
 13818                           tblptrh	equ	0xFF7
 13819                           tblptrl	equ	0xFF6
 13820                           tablat	equ	0xFF5
 13821                           prodh	equ	0xFF4
 13822                           prodl	equ	0xFF3
 13823                           intcon	equ	0xFF2
 13824                           intcon3	equ	0xFF0
 13825                           postinc0	equ	0xFEE
 13826                           plusw0	equ	0xFEB
 13827                           fsr0h	equ	0xFEA
 13828                           fsr0l	equ	0xFE9
 13829                           wreg	equ	0xFE8
 13830                           indf1	equ	0xFE7
 13831                           postinc1	equ	0xFE6
 13832                           postdec1	equ	0xFE5
 13833                           plusw1	equ	0xFE3
 13834                           fsr1h	equ	0xFE2
 13835                           fsr1l	equ	0xFE1
 13836                           indf2	equ	0xFDF
 13837                           postinc2	equ	0xFDE
 13838                           postdec2	equ	0xFDD
 13839                           plusw2	equ	0xFDB
 13840                           fsr2h	equ	0xFDA
 13841                           fsr2l	equ	0xFD9
 13842                           status	equ	0xFD8
 13843                           
 13844 ;; *************** function _ENC424J600_setTXLength *****************
 13845 ;; Defined at:
 13846 ;;		line 528 in file "src/enc424j600/ENC424J600.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;  len             2   14[BANK0 ] unsigned int 
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  highByte        1   17[BANK0 ] unsigned char 
 13851 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13852 ;; Return value:  Size  Location     Type
 13853 ;;                  1    wreg      void 
 13854 ;; Registers used:
 13855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13861 ;;      Params:         0       2       0       0       0       0       0       0       0
 13862 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13863 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13864 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13865 ;;Total ram usage:        4 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    7
 13868 ;; This function calls:
 13869 ;;		_ENC424J600_writeControlRegisterUnbanked
 13870 ;; This function is called by:
 13871 ;;		_ethernetController_sendPacket
 13872 ;; This function uses a non-reentrant model
 13873 ;;
 13874                           
 13875                           	psect	text49
 13876  004378                     __ptext49:
 13877                           	opt stack 0
 13878  004378                     _ENC424J600_setTXLength:
 13879                           	opt stack 20
 13880                           
 13881                           ;ENC424J600.c: 529: uint8_t lowByte = len & 0x00ff;
 13882                           
 13883                           ;incstack = 0
 13884  004378  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 13885                           
 13886                           ;ENC424J600.c: 530: uint8_t highByte = len >> 8;
 13887  00437C  0100               	movlb	0	; () banked
 13888  00437E  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 13889  004380  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;ENC424J600.c: 531: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 13893  004382  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 13894  004384  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13895  004386  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 13896  004388  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13897  00438A  0E02               	movlw	2
 13898  00438C  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13899                           
 13900                           ;ENC424J600.c: 532: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 13901  004390  0E71               	movlw	low ENC424J600_setTXLength@highByte
 13902  004392  0100               	movlb	0	; () banked
 13903  004394  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13904  004396  0E00               	movlw	high ENC424J600_setTXLength@highByte
 13905  004398  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13906  00439A  0E03               	movlw	3
 13907  00439C  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13908  0043A0  0012               	return		;funcret
 13909  0043A2                     __end_of_ENC424J600_setTXLength:
 13910                           	opt stack 0
 13911                           tblptru	equ	0xFF8
 13912                           tblptrh	equ	0xFF7
 13913                           tblptrl	equ	0xFF6
 13914                           tablat	equ	0xFF5
 13915                           prodh	equ	0xFF4
 13916                           prodl	equ	0xFF3
 13917                           intcon	equ	0xFF2
 13918                           intcon3	equ	0xFF0
 13919                           postinc0	equ	0xFEE
 13920                           plusw0	equ	0xFEB
 13921                           fsr0h	equ	0xFEA
 13922                           fsr0l	equ	0xFE9
 13923                           wreg	equ	0xFE8
 13924                           indf1	equ	0xFE7
 13925                           postinc1	equ	0xFE6
 13926                           postdec1	equ	0xFE5
 13927                           plusw1	equ	0xFE3
 13928                           fsr1h	equ	0xFE2
 13929                           fsr1l	equ	0xFE1
 13930                           indf2	equ	0xFDF
 13931                           postinc2	equ	0xFDE
 13932                           postdec2	equ	0xFDD
 13933                           plusw2	equ	0xFDB
 13934                           fsr2h	equ	0xFDA
 13935                           fsr2l	equ	0xFD9
 13936                           status	equ	0xFD8
 13937                           
 13938 ;; *************** function _ethernetController_getSourceMACAddress *****************
 13939 ;; Defined at:
 13940 ;;		line 279 in file "src/enc424j600/ENC424J600.c"
 13941 ;; Parameters:    Size  Location     Type
 13942 ;;		None
 13943 ;; Auto vars:     Size  Location     Type
 13944 ;;  temp            1   32[BANK0 ] unsigned char 
 13945 ;;  i               1   33[BANK0 ] unsigned char 
 13946 ;;  sourceAddres    6   26[BANK0 ] struct macaddress
 13947 ;;  nextPktPoint    4   21[BANK0 ] unsigned long 
 13948 ;;  opcode          1   25[BANK0 ] unsigned char 
 13949 ;; Return value:  Size  Location     Type
 13950 ;;                  6   15[BANK0 ] struct macaddress
 13951 ;; Registers used:
 13952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13953 ;; Tracked objects:
 13954 ;;		On entry : 0/0
 13955 ;;		On exit  : 0/0
 13956 ;;		Unchanged: 0/0
 13957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13958 ;;      Params:         0       6       0       0       0       0       0       0       0
 13959 ;;      Locals:         0      13       0       0       0       0       0       0       0
 13960 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13961 ;;      Totals:         0      19       0       0       0       0       0       0       0
 13962 ;;Total ram usage:       19 bytes
 13963 ;; Hardware stack levels used:    1
 13964 ;; Hardware stack levels required when called:    7
 13965 ;; This function calls:
 13966 ;;		_ENC424J600_getNextPacketPointer
 13967 ;;		_ENC424J600_readSPI
 13968 ;;		_ENC424J600_setERXDATAReadPointer
 13969 ;;		_ENC424J600_writeSPI
 13970 ;; This function is called by:
 13971 ;;		_ARP_send
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           	psect	text50
 13976  0038C2                     __ptext50:
 13977                           	opt stack 0
 13978  0038C2                     _ethernetController_getSourceMACAddress:
 13979                           	opt stack 19
 13980                           
 13981                           ;ENC424J600.c: 280: macaddress_t sourceAddress;
 13982                           ;ENC424J600.c: 281: uint32_t nextPktPointer = ENC424J600_getNextPacketPointer();
 13983                           
 13984                           ;incstack = 0
 13985  0038C2  EC2D  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
 13986  0038C6  0100               	movlb	0	; () banked
 13987  0038C8  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_getSourceMACAddress@nextPktP
      +                          ointer
 13988  0038CC  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_getSourceMACAddress@nextPk
      +                          tPointer+1
 13989  0038D0  6B77               	clrf	(ethernetController_getSourceMACAddress@nextPktPointer+2)& (0+255),b
 13990  0038D2  6B78               	clrf	(ethernetController_getSourceMACAddress@nextPktPointer+3)& (0+255),b
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;ENC424J600.c: 282: ENC424J600_setERXDATAReadPointer(nextPktPointer + 14);
 13994  0038D4  0E0E               	movlw	14
 13995  0038D6  2575               	addwf	ethernetController_getSourceMACAddress@nextPktPointer& (0+255),w,b
 13996  0038D8  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 13997  0038DA  0E00               	movlw	0
 13998  0038DC  2176               	addwfc	(ethernetController_getSourceMACAddress@nextPktPointer+1)& (0+255),w,b
 13999  0038DE  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 14000  0038E0  ECBB  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 14001                           
 14002                           ;ENC424J600.c: 283: uint8_t opcode = 0x2C;
 14003  0038E4  0E2C               	movlw	44
 14004  0038E6  0100               	movlb	0	; () banked
 14005  0038E8  6F79               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;ENC424J600.c: 284: PORTBbits.RB4=0;
 14009  0038EA  9881               	bcf	3969,4,c	;volatile
 14010                           
 14011                           ; BSR set to: 0
 14012                           ;ENC424J600.c: 285: ENC424J600_writeSPI(&opcode);
 14013  0038EC  0E79               	movlw	low ethernetController_getSourceMACAddress@opcode
 14014  0038EE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14015  0038F0  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 14016  0038F2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14017  0038F4  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 14018                           
 14019                           ;ENC424J600.c: 286: for (uint8_t i = 0; i < 6; i++) {
 14020  0038F8  0E00               	movlw	0
 14021  0038FA  0100               	movlb	0	; () banked
 14022  0038FC  6F81               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 14023  0038FE                     l7194:
 14024                           
 14025                           ; BSR set to: 0
 14026  0038FE  0E05               	movlw	5
 14027  003900  6581               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 14028  003902  D001               	goto	l137
 14029  003904  D013               	goto	u8420
 14030  003906                     l137:
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;ENC424J600.c: 287: uint8_t temp;
 14034                           ;ENC424J600.c: 288: ENC424J600_readSPI(&temp);
 14035                           
 14036                           ; BSR set to: 0
 14037  003906  0E80               	movlw	low ethernetController_getSourceMACAddress@temp
 14038  003908  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 14039  00390A  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 14040  00390C  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 14041  00390E  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 14042                           
 14043                           ;ENC424J600.c: 289: sourceAddress.address[i] = temp;
 14044  003912  0100               	movlb	0	; () banked
 14045  003914  5181               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 14046  003916  0D01               	mullw	1
 14047  003918  0E7A               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 14048  00391A  24F3               	addwf	prodl,w,c
 14049  00391C  6ED9               	movwf	fsr2l,c
 14050  00391E  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 14051  003920  20F4               	addwfc	prodh,w,c
 14052  003922  6EDA               	movwf	fsr2h,c
 14053  003924  C080  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 14054                           
 14055                           ; BSR set to: 0
 14056  003928  2B81               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 14057  00392A  D7E9               	goto	l7194
 14058  00392C                     u8420:
 14059                           
 14060                           ; BSR set to: 0
 14061                           ;ENC424J600.c: 290: }
 14062                           ;ENC424J600.c: 291: PORTBbits.RB4=1;
 14063  00392C  8881               	bsf	3969,4,c	;volatile
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;ENC424J600.c: 292: return sourceAddress;
 14067  00392E  EE20  F07A         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 14068  003932  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 14069  003936  0E05               	movlw	5
 14070  003938                     u8431:
 14071  003938  CFDB FFEB          	movff	plusw2,plusw0
 14072  00393C  06E8               	decf	wreg,f,c
 14073  00393E  E2FC               	bc	u8431
 14074  003940  0012               	return	
 14075  003942                     __end_of_ethernetController_getSourceMACAddress:
 14076                           	opt stack 0
 14077                           tblptru	equ	0xFF8
 14078                           tblptrh	equ	0xFF7
 14079                           tblptrl	equ	0xFF6
 14080                           tablat	equ	0xFF5
 14081                           prodh	equ	0xFF4
 14082                           prodl	equ	0xFF3
 14083                           intcon	equ	0xFF2
 14084                           intcon3	equ	0xFF0
 14085                           postinc0	equ	0xFEE
 14086                           plusw0	equ	0xFEB
 14087                           fsr0h	equ	0xFEA
 14088                           fsr0l	equ	0xFE9
 14089                           wreg	equ	0xFE8
 14090                           indf1	equ	0xFE7
 14091                           postinc1	equ	0xFE6
 14092                           postdec1	equ	0xFE5
 14093                           plusw1	equ	0xFE3
 14094                           fsr1h	equ	0xFE2
 14095                           fsr1l	equ	0xFE1
 14096                           indf2	equ	0xFDF
 14097                           postinc2	equ	0xFDE
 14098                           postdec2	equ	0xFDD
 14099                           plusw2	equ	0xFDB
 14100                           fsr2h	equ	0xFDA
 14101                           fsr2l	equ	0xFD9
 14102                           status	equ	0xFD8
 14103                           
 14104 ;; *************** function _ARP_parseFromRXBuffer *****************
 14105 ;; Defined at:
 14106 ;;		line 58 in file "src/stack/protocols/arp.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  frame           2   49[BANK0 ] PTR struct ethernetFrame
 14109 ;;		 -> stack.ethernet(15), stack(110), 
 14110 ;; Auto vars:     Size  Location     Type
 14111 ;;  i               1   85[BANK0 ] unsigned char 
 14112 ;;  i               1   84[BANK0 ] unsigned char 
 14113 ;;  i               1   83[BANK0 ] unsigned char 
 14114 ;;  i               1   82[BANK0 ] unsigned char 
 14115 ;;  arp            32   88[BANK0 ] struct ARP_message
 14116 ;;  offset          2   86[BANK0 ] const unsigned int 
 14117 ;; Return value:  Size  Location     Type
 14118 ;;                  32   49[BANK0 ] struct ARP_message
 14119 ;; Registers used:
 14120 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14121 ;; Tracked objects:
 14122 ;;		On entry : 0/0
 14123 ;;		On exit  : 0/0
 14124 ;;		Unchanged: 0/0
 14125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14126 ;;      Params:         0      32       0       0       0       0       0       0       0
 14127 ;;      Locals:         0      38       0       0       0       0       0       0       0
 14128 ;;      Temps:          0       1       0       0       0       0       0       0       0
 14129 ;;      Totals:         0      71       0       0       0       0       0       0       0
 14130 ;;Total ram usage:       71 bytes
 14131 ;; Hardware stack levels used:    1
 14132 ;; Hardware stack levels required when called:    9
 14133 ;; This function calls:
 14134 ;;		_ethernetController_streamFromRXBuffer
 14135 ;;		_ipv4_cmp
 14136 ;;		_ipv4_isAllZero
 14137 ;;		_mac_cmp
 14138 ;;		_mac_isAllZero
 14139 ;; This function is called by:
 14140 ;;		_ARP_handleNewPacket
 14141 ;; This function uses a non-reentrant model
 14142 ;;
 14143                           
 14144                           	psect	text51
 14145  001428                     __ptext51:
 14146                           	opt stack 0
 14147  001428                     _ARP_parseFromRXBuffer:
 14148                           	opt stack 18
 14149                           
 14150                           ;arp.c: 59: ARP_message_t arp;
 14151                           ;arp.c: 60: uint16_t static dataPointer = 0;
 14152                           ;arp.c: 61: uint16_t static length = 0;
 14153                           ;arp.c: 62: uint16_t const offset = 14;
 14154                           
 14155                           ; BSR set to: 0
 14156                           ;incstack = 0
 14157  001428  0E00               	movlw	0
 14158  00142A  0100               	movlb	0	; () banked
 14159  00142C  6FB7               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 14160  00142E  0E0E               	movlw	14
 14161  001430  6FB6               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 14162                           
 14163                           ; BSR set to: 0
 14164                           ;arp.c: 64: ethernetController_streamFromRXBuffer(0, &length, offset);
 14165  001432  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14166  001434  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14167  001436  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14168  001438  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14169  00143A  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14170  00143E  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14171  001442  0E00               	movlw	0
 14172  001444  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14173                           
 14174                           ;arp.c: 67: arp.htype = (ethernetController_streamFromRXBuffer(1, &length, offset) << 8)
      +                          ;
 14175  001448  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14176  00144A  0100               	movlb	0	; () banked
 14177  00144C  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14178  00144E  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14179  001450  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14180  001452  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14181  001456  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14182  00145A  0E01               	movlw	1
 14183  00145C  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14184  001460  0100               	movlb	0	; () banked
 14185  001462  6FB9               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 14186  001464  6BB8               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 14187                           
 14188                           ; BSR set to: 0
 14189                           ;arp.c: 68: arp.htype |= ethernetController_streamFromRXBuffer(1, &length, offset);
 14190  001466  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14191  001468  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14192  00146A  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14193  00146C  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14194  00146E  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14195  001472  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14196  001476  0E01               	movlw	1
 14197  001478  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14198  00147C  0100               	movlb	0	; () banked
 14199  00147E  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14200  001480  51B1               	movf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14201  001482  13B8               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;arp.c: 70: arp.ptype = (ethernetController_streamFromRXBuffer(1, &length, offset) << 8)
      +                          ;
 14205  001484  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14206  001486  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14207  001488  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14208  00148A  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14209  00148C  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14210  001490  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14211  001494  0E01               	movlw	1
 14212  001496  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14213  00149A  0100               	movlb	0	; () banked
 14214  00149C  6FBB               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 14215  00149E  6BBA               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 14216                           
 14217                           ; BSR set to: 0
 14218                           ;arp.c: 71: arp.ptype |= ethernetController_streamFromRXBuffer(1, &length, offset);
 14219  0014A0  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14220  0014A2  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14221  0014A4  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14222  0014A6  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14223  0014A8  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14224  0014AC  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14225  0014B0  0E01               	movlw	1
 14226  0014B2  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14227  0014B6  0100               	movlb	0	; () banked
 14228  0014B8  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14229  0014BA  51B1               	movf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14230  0014BC  13BA               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;arp.c: 73: arp.hlen = ethernetController_streamFromRXBuffer(1, &length, offset);
 14234  0014BE  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14235  0014C0  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14236  0014C2  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14237  0014C4  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14238  0014C6  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14239  0014CA  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14240  0014CE  0E01               	movlw	1
 14241  0014D0  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14242  0014D4  0100               	movlb	0	; () banked
 14243  0014D6  6FBC               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 14244                           
 14245                           ; BSR set to: 0
 14246                           ;arp.c: 74: arp.plen = ethernetController_streamFromRXBuffer(1, &length, offset);
 14247  0014D8  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14248  0014DA  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14249  0014DC  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14250  0014DE  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14251  0014E0  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14252  0014E4  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14253  0014E8  0E01               	movlw	1
 14254  0014EA  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14255  0014EE  0100               	movlb	0	; () banked
 14256  0014F0  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 14257                           
 14258                           ; BSR set to: 0
 14259                           ;arp.c: 76: arp.operation = (ethernetController_streamFromRXBuffer(1, &length, offset) <
      +                          < 8);
 14260  0014F2  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14261  0014F4  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14262  0014F6  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14263  0014F8  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14264  0014FA  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14265  0014FE  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14266  001502  0E01               	movlw	1
 14267  001504  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14268  001508  0100               	movlb	0	; () banked
 14269  00150A  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 14270  00150C  6BBE               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 14271                           
 14272                           ; BSR set to: 0
 14273                           ;arp.c: 77: arp.operation |= ethernetController_streamFromRXBuffer(1, &length, offset);
 14274  00150E  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14275  001510  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14276  001512  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14277  001514  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14278  001516  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14279  00151A  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14280  00151E  0E01               	movlw	1
 14281  001520  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14282  001524  0100               	movlb	0	; () banked
 14283  001526  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14284  001528  51B1               	movf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14285  00152A  13BE               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;arp.c: 80: for (uint8_t i = 0; i < arp.hlen; i++)
 14289  00152C  0E00               	movlw	0
 14290  00152E  6FB2               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 14291  001530  D01C               	goto	l857
 14292  001532                     
 14293                           ; BSR set to: 0
 14294                           ;arp.c: 81: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, &
      +                          length, offset);
 14295                           
 14296                           ; BSR set to: 0
 14297  001532  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14298  001534  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14299  001536  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14300  001538  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14301  00153A  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14302  00153E  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14303  001542  0E01               	movlw	1
 14304  001544  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14305  001548  0100               	movlb	0	; () banked
 14306  00154A  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14307  00154C  51B2               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14308  00154E  0D01               	mullw	1
 14309  001550  0E08               	movlw	8
 14310  001552  26F3               	addwf	prodl,f,c
 14311  001554  0E00               	movlw	0
 14312  001556  22F4               	addwfc	prodh,f,c
 14313  001558  0EB8               	movlw	low ARP_parseFromRXBuffer@arp
 14314  00155A  24F3               	addwf	prodl,w,c
 14315  00155C  6ED9               	movwf	fsr2l,c
 14316  00155E  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14317  001560  20F4               	addwfc	prodh,w,c
 14318  001562  6EDA               	movwf	fsr2h,c
 14319  001564  C0B1  FFDF         	movff	??_ARP_parseFromRXBuffer,indf2
 14320                           
 14321                           ; BSR set to: 0
 14322  001568  2BB2               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 14323  00156A                     l857:
 14324                           
 14325                           ; BSR set to: 0
 14326                           
 14327                           ; BSR set to: 0
 14328  00156A  51BC               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14329  00156C  5DB2               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14330  00156E  A0D8               	btfss	status,0,c
 14331  001570  D7E0               	goto	l858
 14332                           
 14333                           ; BSR set to: 0
 14334                           ;arp.c: 82: for (uint8_t i = 0; i < arp.plen; i++)
 14335                           
 14336                           ; BSR set to: 0
 14337  001572  0E00               	movlw	0
 14338  001574  6FB3               	movwf	ARP_parseFromRXBuffer@i_2503& (0+255),b
 14339  001576  D01C               	goto	l860
 14340  001578                     
 14341                           ; BSR set to: 0
 14342                           ;arp.c: 83: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, &l
      +                          ength, offset);
 14343                           
 14344                           ; BSR set to: 0
 14345  001578  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14346  00157A  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14347  00157C  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14348  00157E  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14349  001580  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14350  001584  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14351  001588  0E01               	movlw	1
 14352  00158A  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14353  00158E  0100               	movlb	0	; () banked
 14354  001590  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14355  001592  51B3               	movf	ARP_parseFromRXBuffer@i_2503& (0+255),w,b
 14356  001594  0D01               	mullw	1
 14357  001596  0E0E               	movlw	14
 14358  001598  26F3               	addwf	prodl,f,c
 14359  00159A  0E00               	movlw	0
 14360  00159C  22F4               	addwfc	prodh,f,c
 14361  00159E  0EB8               	movlw	low ARP_parseFromRXBuffer@arp
 14362  0015A0  24F3               	addwf	prodl,w,c
 14363  0015A2  6ED9               	movwf	fsr2l,c
 14364  0015A4  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14365  0015A6  20F4               	addwfc	prodh,w,c
 14366  0015A8  6EDA               	movwf	fsr2h,c
 14367  0015AA  C0B1  FFDF         	movff	??_ARP_parseFromRXBuffer,indf2
 14368                           
 14369                           ; BSR set to: 0
 14370  0015AE  2BB3               	incf	ARP_parseFromRXBuffer@i_2503& (0+255),f,b
 14371  0015B0                     l860:
 14372                           
 14373                           ; BSR set to: 0
 14374                           
 14375                           ; BSR set to: 0
 14376  0015B0  51BD               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14377  0015B2  5DB3               	subwf	ARP_parseFromRXBuffer@i_2503& (0+255),w,b
 14378  0015B4  A0D8               	btfss	status,0,c
 14379  0015B6  D7E0               	goto	l861
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;arp.c: 85: for (uint8_t i = 0; i < arp.hlen; i++)
 14383                           
 14384                           ; BSR set to: 0
 14385  0015B8  0E00               	movlw	0
 14386  0015BA  6FB4               	movwf	ARP_parseFromRXBuffer@i_2504& (0+255),b
 14387  0015BC  D01C               	goto	l863
 14388  0015BE                     
 14389                           ; BSR set to: 0
 14390                           ;arp.c: 86: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, &
      +                          length, offset);
 14391                           
 14392                           ; BSR set to: 0
 14393  0015BE  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14394  0015C0  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14395  0015C2  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14396  0015C4  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14397  0015C6  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14398  0015CA  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14399  0015CE  0E01               	movlw	1
 14400  0015D0  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14401  0015D4  0100               	movlb	0	; () banked
 14402  0015D6  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14403  0015D8  51B4               	movf	ARP_parseFromRXBuffer@i_2504& (0+255),w,b
 14404  0015DA  0D01               	mullw	1
 14405  0015DC  0E12               	movlw	18
 14406  0015DE  26F3               	addwf	prodl,f,c
 14407  0015E0  0E00               	movlw	0
 14408  0015E2  22F4               	addwfc	prodh,f,c
 14409  0015E4  0EB8               	movlw	low ARP_parseFromRXBuffer@arp
 14410  0015E6  24F3               	addwf	prodl,w,c
 14411  0015E8  6ED9               	movwf	fsr2l,c
 14412  0015EA  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14413  0015EC  20F4               	addwfc	prodh,w,c
 14414  0015EE  6EDA               	movwf	fsr2h,c
 14415  0015F0  C0B1  FFDF         	movff	??_ARP_parseFromRXBuffer,indf2
 14416                           
 14417                           ; BSR set to: 0
 14418  0015F4  2BB4               	incf	ARP_parseFromRXBuffer@i_2504& (0+255),f,b
 14419  0015F6                     l863:
 14420                           
 14421                           ; BSR set to: 0
 14422                           
 14423                           ; BSR set to: 0
 14424  0015F6  51BC               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14425  0015F8  5DB4               	subwf	ARP_parseFromRXBuffer@i_2504& (0+255),w,b
 14426  0015FA  A0D8               	btfss	status,0,c
 14427  0015FC  D7E0               	goto	l864
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;arp.c: 87: for (uint8_t i = 0; i < arp.plen; i++)
 14431                           
 14432                           ; BSR set to: 0
 14433  0015FE  0E00               	movlw	0
 14434  001600  6FB5               	movwf	ARP_parseFromRXBuffer@i_2505& (0+255),b
 14435  001602  D01C               	goto	l866
 14436  001604                     
 14437                           ; BSR set to: 0
 14438                           ;arp.c: 88: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, &l
      +                          ength, offset);
 14439                           
 14440                           ; BSR set to: 0
 14441  001604  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14442  001606  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14443  001608  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14444  00160A  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14445  00160C  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14446  001610  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14447  001614  0E01               	movlw	1
 14448  001616  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14449  00161A  0100               	movlb	0	; () banked
 14450  00161C  6FB1               	movwf	??_ARP_parseFromRXBuffer& (0+255),b
 14451  00161E  51B5               	movf	ARP_parseFromRXBuffer@i_2505& (0+255),w,b
 14452  001620  0D01               	mullw	1
 14453  001622  0E18               	movlw	24
 14454  001624  26F3               	addwf	prodl,f,c
 14455  001626  0E00               	movlw	0
 14456  001628  22F4               	addwfc	prodh,f,c
 14457  00162A  0EB8               	movlw	low ARP_parseFromRXBuffer@arp
 14458  00162C  24F3               	addwf	prodl,w,c
 14459  00162E  6ED9               	movwf	fsr2l,c
 14460  001630  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14461  001632  20F4               	addwfc	prodh,w,c
 14462  001634  6EDA               	movwf	fsr2h,c
 14463  001636  C0B1  FFDF         	movff	??_ARP_parseFromRXBuffer,indf2
 14464                           
 14465                           ; BSR set to: 0
 14466  00163A  2BB5               	incf	ARP_parseFromRXBuffer@i_2505& (0+255),f,b
 14467  00163C                     l866:
 14468                           
 14469                           ; BSR set to: 0
 14470                           
 14471                           ; BSR set to: 0
 14472  00163C  51BD               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14473  00163E  5DB5               	subwf	ARP_parseFromRXBuffer@i_2505& (0+255),w,b
 14474  001640  A0D8               	btfss	status,0,c
 14475  001642  D7E0               	goto	l867
 14476                           
 14477                           ; BSR set to: 0
 14478                           ;arp.c: 90: ethernetController_streamFromRXBuffer(2, &length, offset);
 14479                           
 14480                           ; BSR set to: 0
 14481  001644  0E4B               	movlw	low ARP_parseFromRXBuffer@length
 14482  001646  6F72               	movwf	ethernetController_streamFromRXBuffer@len& (0+255),b
 14483  001648  0E00               	movlw	high ARP_parseFromRXBuffer@length
 14484  00164A  6F73               	movwf	(ethernetController_streamFromRXBuffer@len+1)& (0+255),b
 14485  00164C  C0B6  F074         	movff	ARP_parseFromRXBuffer@offset,ethernetController_streamFromRXBuffer@offset
 14486  001650  C0B7  F075         	movff	ARP_parseFromRXBuffer@offset+1,ethernetController_streamFromRXBuffer@offset+1
 14487  001654  0E02               	movlw	2
 14488  001656  EC83  F011         	call	_ethernetController_streamFromRXBuffer
 14489                           
 14490                           ;arp.c: 92: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 14491  00165A  0EC6               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14492  00165C  0100               	movlb	0	; () banked
 14493  00165E  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14494  001660  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14495  001662  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14496  001664  EC61  F021         	call	_ipv4_isAllZero	;wreg free
 14497  001668  0100               	movlb	0	; () banked
 14498  00166A  A0D8               	btfss	status,0,c
 14499  00166C  D002               	goto	l869
 14500                           
 14501                           ; BSR set to: 0
 14502                           ;arp.c: 93: arp.fIsProbe = 1;
 14503  00166E  83D4               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14504  001670  D03C               	goto	l873
 14505  001672                     l869:
 14506                           
 14507                           ; BSR set to: 0
 14508                           ;arp.c: 96: arp.fIsProbe = 0;
 14509  001672  93D4               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14510                           
 14511                           ; BSR set to: 0
 14512                           ;arp.c: 98: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14513                           ;arp.c: 99: mac_isAllZero(&arp.targetMACAddress) &&
 14514                           ;arp.c: 100: arp.operation == ARP_REQUEST) {
 14515  001674  0EC6               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14516  001676  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14517  001678  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14518  00167A  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14519  00167C  0ED0               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14520  00167E  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14521  001680  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14522  001682  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14523  001684  EC7C  F020         	call	_ipv4_cmp	;wreg free
 14524  001688  0100               	movlb	0	; () banked
 14525  00168A  A0D8               	btfss	status,0,c
 14526  00168C  D00D               	goto	l871
 14527                           
 14528                           ; BSR set to: 0
 14529  00168E  0ECA               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14530  001690  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14531  001692  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14532  001694  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14533  001696  EC49  F021         	call	_mac_isAllZero	;wreg free
 14534  00169A  0100               	movlb	0	; () banked
 14535  00169C  A0D8               	btfss	status,0,c
 14536  00169E  D004               	goto	l871
 14537                           
 14538                           ; BSR set to: 0
 14539  0016A0  05BE               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14540  0016A2  11BF               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14541  0016A4  B4D8               	btfsc	status,2,c
 14542  0016A6  D01F               	goto	u9600
 14543  0016A8                     l871:
 14544                           
 14545                           ; BSR set to: 0
 14546                           ;arp.c: 104: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14547                           ;arp.c: 105: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 14548                           ;arp.c: 106: arp.operation == ARP_REPLY) {
 14549                           
 14550                           ; BSR set to: 0
 14551  0016A8  0EC6               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14552  0016AA  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14553  0016AC  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14554  0016AE  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14555  0016B0  0ED0               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14556  0016B2  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14557  0016B4  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14558  0016B6  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14559  0016B8  EC7C  F020         	call	_ipv4_cmp	;wreg free
 14560  0016BC  0100               	movlb	0	; () banked
 14561  0016BE  A0D8               	btfss	status,0,c
 14562  0016C0  D014               	goto	l873
 14563                           
 14564                           ; BSR set to: 0
 14565  0016C2  0EC0               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 14566  0016C4  6F60               	movwf	mac_cmp@a& (0+255),b
 14567  0016C6  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 14568  0016C8  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 14569  0016CA  0ECA               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14570  0016CC  6F62               	movwf	mac_cmp@b& (0+255),b
 14571  0016CE  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14572  0016D0  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 14573  0016D2  EC5B  F020         	call	_mac_cmp	;wreg free
 14574  0016D6  0100               	movlb	0	; () banked
 14575  0016D8  A0D8               	btfss	status,0,c
 14576  0016DA  D007               	goto	l873
 14577                           
 14578                           ; BSR set to: 0
 14579  0016DC  0E02               	movlw	2
 14580  0016DE  19BE               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14581  0016E0  11BF               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14582  0016E2  A4D8               	btfss	status,2,c
 14583  0016E4  D002               	goto	l873
 14584  0016E6                     u9600:
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;arp.c: 107: arp.fIsGratuitous = 1;
 14588  0016E6  81D4               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14589                           
 14590                           ;arp.c: 108: } else {
 14591  0016E8  D001               	goto	l874
 14592  0016EA                     l873:
 14593                           
 14594                           ; BSR set to: 0
 14595                           ;arp.c: 109: arp.fIsGratuitous = 0;
 14596  0016EA  91D4               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14597  0016EC                     l874:
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;arp.c: 110: }
 14601                           ;arp.c: 111: }
 14602                           ;arp.c: 112: }
 14603                           ;arp.c: 115: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 14604                           ;arp.c: 116: (arp.ptype != ARP_PTYPE_IPv4) ||
 14605                           ;arp.c: 117: (arp.operation > 2) ||
 14606                           ;arp.c: 118: (arp.hlen != 6) ||
 14607                           ;arp.c: 119: (arp.plen != 4)) {
 14608                           
 14609                           ; BSR set to: 0
 14610                           
 14611                           ; BSR set to: 0
 14612                           
 14613                           ; BSR set to: 0
 14614  0016EC  05B8               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 14615  0016EE  11B9               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 14616  0016F0  A4D8               	btfss	status,2,c
 14617  0016F2  D013               	goto	u9650
 14618                           
 14619                           ; BSR set to: 0
 14620  0016F4  0E08               	movlw	8
 14621  0016F6  19BB               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 14622  0016F8  11BA               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 14623  0016FA  A4D8               	btfss	status,2,c
 14624  0016FC  D00E               	goto	u9650
 14625                           
 14626                           ; BSR set to: 0
 14627  0016FE  51BF               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14628  001700  E10C               	bnz	l7816
 14629  001702  0E03               	movlw	3
 14630  001704  5DBE               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14631  001706  B0D8               	btfsc	status,0,c
 14632  001708  D008               	goto	u9650
 14633                           
 14634                           ; BSR set to: 0
 14635  00170A  0E06               	movlw	6
 14636  00170C  19BC               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14637  00170E  A4D8               	btfss	status,2,c
 14638  001710  D004               	goto	u9650
 14639                           
 14640                           ; BSR set to: 0
 14641  001712  0E04               	movlw	4
 14642  001714  19BD               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14643  001716  B4D8               	btfsc	status,2,c
 14644  001718  D004               	goto	l875
 14645  00171A                     u9650:
 14646  00171A                     l7816:
 14647                           
 14648                           ; BSR set to: 0
 14649                           ;arp.c: 120: arp.err.code = ERROR_ARP_INVALID_VALUES;
 14650  00171A  0E01               	movlw	1
 14651  00171C  6FD7               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14652  00171E  0E93               	movlw	147
 14653  001720  D003               	goto	L2
 14654  001722                     l875:
 14655                           
 14656                           ; BSR set to: 0
 14657                           ;arp.c: 123: arp.err.code = (uint16_t)0;
 14658                           
 14659                           ; BSR set to: 0
 14660  001722  0E00               	movlw	0
 14661  001724  6FD7               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14662  001726  0E00               	movlw	0
 14663  001728                     L2:
 14664  001728  6FD6               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 14665                           
 14666                           ;arp.c: 124: arp.err.module = ERROR_MODULE_ARP;
 14667  00172A  0E03               	movlw	3
 14668  00172C  6FD5               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;arp.c: 125: }
 14672                           ;arp.c: 127: return arp;
 14673                           
 14674                           ; BSR set to: 0
 14675  00172E  EE20  F0B8         	lfsr	2,ARP_parseFromRXBuffer@arp
 14676  001732  EE00  F091         	lfsr	0,?_ARP_parseFromRXBuffer
 14677  001736  0E1F               	movlw	31
 14678  001738                     u9661:
 14679  001738  CFDB FFEB          	movff	plusw2,plusw0
 14680  00173C  06E8               	decf	wreg,f,c
 14681  00173E  E2FC               	bc	u9661
 14682  001740  0012               	return	
 14683  001742                     __end_of_ARP_parseFromRXBuffer:
 14684                           	opt stack 0
 14685                           tblptru	equ	0xFF8
 14686                           tblptrh	equ	0xFF7
 14687                           tblptrl	equ	0xFF6
 14688                           tablat	equ	0xFF5
 14689                           prodh	equ	0xFF4
 14690                           prodl	equ	0xFF3
 14691                           intcon	equ	0xFF2
 14692                           intcon3	equ	0xFF0
 14693                           postinc0	equ	0xFEE
 14694                           plusw0	equ	0xFEB
 14695                           fsr0h	equ	0xFEA
 14696                           fsr0l	equ	0xFE9
 14697                           wreg	equ	0xFE8
 14698                           indf1	equ	0xFE7
 14699                           postinc1	equ	0xFE6
 14700                           postdec1	equ	0xFE5
 14701                           plusw1	equ	0xFE3
 14702                           fsr1h	equ	0xFE2
 14703                           fsr1l	equ	0xFE1
 14704                           indf2	equ	0xFDF
 14705                           postinc2	equ	0xFDE
 14706                           postdec2	equ	0xFDD
 14707                           plusw2	equ	0xFDB
 14708                           fsr2h	equ	0xFDA
 14709                           fsr2l	equ	0xFD9
 14710                           status	equ	0xFD8
 14711                           
 14712 ;; *************** function _mac_isAllZero *****************
 14713 ;; Defined at:
 14714 ;;		line 31 in file "src/eth/mac.c"
 14715 ;; Parameters:    Size  Location     Type
 14716 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 14717 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14718 ;; Auto vars:     Size  Location     Type
 14719 ;;  i               1    2[BANK0 ] unsigned char 
 14720 ;; Return value:  Size  Location     Type
 14721 ;;		None               void
 14722 ;; Registers used:
 14723 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14724 ;; Tracked objects:
 14725 ;;		On entry : 0/0
 14726 ;;		On exit  : 0/0
 14727 ;;		Unchanged: 0/0
 14728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14729 ;;      Params:         0       2       0       0       0       0       0       0       0
 14730 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14731 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14732 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14733 ;;Total ram usage:        3 bytes
 14734 ;; Hardware stack levels used:    1
 14735 ;; Hardware stack levels required when called:    4
 14736 ;; This function calls:
 14737 ;;		Nothing
 14738 ;; This function is called by:
 14739 ;;		_ARP_parseFromRXBuffer
 14740 ;; This function uses a non-reentrant model
 14741 ;;
 14742                           
 14743                           	psect	text52
 14744  004292                     __ptext52:
 14745                           	opt stack 0
 14746  004292                     _mac_isAllZero:
 14747                           	opt stack 22
 14748                           
 14749                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 14750                           
 14751                           ; BSR set to: 0
 14752                           ;incstack = 0
 14753  004292  0E00               	movlw	0
 14754  004294  0100               	movlb	0	; () banked
 14755  004296  6F62               	movwf	mac_isAllZero@i& (0+255),b
 14756  004298                     l7422:
 14757                           
 14758                           ; BSR set to: 0
 14759  004298  0E05               	movlw	5
 14760  00429A  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 14761  00429C  D001               	goto	l365
 14762  00429E  D00F               	goto	u8780
 14763  0042A0                     l365:
 14764                           
 14765                           ; BSR set to: 0
 14766                           ;mac.c: 33: if (mac->address[i] != 0x00)
 14767                           
 14768                           ; BSR set to: 0
 14769  0042A0  5162               	movf	mac_isAllZero@i& (0+255),w,b
 14770  0042A2  0D01               	mullw	1
 14771  0042A4  50F3               	movf	prodl,w,c
 14772  0042A6  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 14773  0042A8  6ED9               	movwf	fsr2l,c
 14774  0042AA  50F4               	movf	prodh,w,c
 14775  0042AC  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 14776  0042AE  6EDA               	movwf	fsr2h,c
 14777  0042B0  50DF               	movf	indf2,w,c
 14778  0042B2  B4D8               	btfsc	status,2,c
 14779  0042B4  D002               	goto	l367
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;mac.c: 34: return 0;
 14783  0042B6  90D8               	bcf	status,0,c
 14784                           
 14785                           ; BSR set to: 0
 14786  0042B8  0012               	return	
 14787  0042BA                     l367:
 14788                           
 14789                           ; BSR set to: 0
 14790                           
 14791                           ; BSR set to: 0
 14792  0042BA  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 14793  0042BC  D7ED               	goto	l7422
 14794  0042BE                     u8780:
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;mac.c: 35: }
 14798                           ;mac.c: 36: return 1;
 14799                           
 14800                           ; BSR set to: 0
 14801  0042BE  80D8               	bsf	status,0,c
 14802  0042C0  0012               	return	
 14803  0042C2                     __end_of_mac_isAllZero:
 14804                           	opt stack 0
 14805                           tblptru	equ	0xFF8
 14806                           tblptrh	equ	0xFF7
 14807                           tblptrl	equ	0xFF6
 14808                           tablat	equ	0xFF5
 14809                           prodh	equ	0xFF4
 14810                           prodl	equ	0xFF3
 14811                           intcon	equ	0xFF2
 14812                           intcon3	equ	0xFF0
 14813                           postinc0	equ	0xFEE
 14814                           plusw0	equ	0xFEB
 14815                           fsr0h	equ	0xFEA
 14816                           fsr0l	equ	0xFE9
 14817                           wreg	equ	0xFE8
 14818                           indf1	equ	0xFE7
 14819                           postinc1	equ	0xFE6
 14820                           postdec1	equ	0xFE5
 14821                           plusw1	equ	0xFE3
 14822                           fsr1h	equ	0xFE2
 14823                           fsr1l	equ	0xFE1
 14824                           indf2	equ	0xFDF
 14825                           postinc2	equ	0xFDE
 14826                           postdec2	equ	0xFDD
 14827                           plusw2	equ	0xFDB
 14828                           fsr2h	equ	0xFDA
 14829                           fsr2l	equ	0xFD9
 14830                           status	equ	0xFD8
 14831                           
 14832 ;; *************** function _mac_cmp *****************
 14833 ;; Defined at:
 14834 ;;		line 39 in file "src/eth/mac.c"
 14835 ;; Parameters:    Size  Location     Type
 14836 ;;  a               2    0[BANK0 ] PTR struct macaddress
 14837 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14838 ;;  b               2    2[BANK0 ] PTR struct macaddress
 14839 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14840 ;; Auto vars:     Size  Location     Type
 14841 ;;  i               1    6[BANK0 ] unsigned char 
 14842 ;; Return value:  Size  Location     Type
 14843 ;;		None               void
 14844 ;; Registers used:
 14845 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14846 ;; Tracked objects:
 14847 ;;		On entry : 0/0
 14848 ;;		On exit  : 0/0
 14849 ;;		Unchanged: 0/0
 14850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14851 ;;      Params:         0       4       0       0       0       0       0       0       0
 14852 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14853 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14854 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14855 ;;Total ram usage:        7 bytes
 14856 ;; Hardware stack levels used:    1
 14857 ;; Hardware stack levels required when called:    4
 14858 ;; This function calls:
 14859 ;;		Nothing
 14860 ;; This function is called by:
 14861 ;;		_ARP_parseFromRXBuffer
 14862 ;; This function uses a non-reentrant model
 14863 ;;
 14864                           
 14865                           	psect	text53
 14866  0040B6                     __ptext53:
 14867                           	opt stack 0
 14868  0040B6                     _mac_cmp:
 14869                           	opt stack 22
 14870                           
 14871                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;incstack = 0
 14875  0040B6  0E00               	movlw	0
 14876  0040B8  0100               	movlb	0	; () banked
 14877  0040BA  6F66               	movwf	mac_cmp@i& (0+255),b
 14878  0040BC                     l7442:
 14879                           
 14880                           ; BSR set to: 0
 14881  0040BC  0E05               	movlw	5
 14882  0040BE  6566               	cpfsgt	mac_cmp@i& (0+255),b
 14883  0040C0  D001               	goto	l371
 14884  0040C2  D018               	goto	u8810
 14885  0040C4                     l371:
 14886                           
 14887                           ; BSR set to: 0
 14888                           ;mac.c: 41: if (a->address[i] != b->address[i])
 14889                           
 14890                           ; BSR set to: 0
 14891  0040C4  5166               	movf	mac_cmp@i& (0+255),w,b
 14892  0040C6  0D01               	mullw	1
 14893  0040C8  50F3               	movf	prodl,w,c
 14894  0040CA  2562               	addwf	mac_cmp@b& (0+255),w,b
 14895  0040CC  6ED9               	movwf	fsr2l,c
 14896  0040CE  50F4               	movf	prodh,w,c
 14897  0040D0  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 14898  0040D2  6EDA               	movwf	fsr2h,c
 14899  0040D4  5166               	movf	mac_cmp@i& (0+255),w,b
 14900  0040D6  0D01               	mullw	1
 14901  0040D8  50F3               	movf	prodl,w,c
 14902  0040DA  2560               	addwf	mac_cmp@a& (0+255),w,b
 14903  0040DC  6EE1               	movwf	fsr1l,c
 14904  0040DE  50F4               	movf	prodh,w,c
 14905  0040E0  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 14906  0040E2  6EE2               	movwf	fsr1h,c
 14907  0040E4  50DE               	movf	postinc2,w,c
 14908  0040E6  18E6               	xorwf	postinc1,w,c
 14909  0040E8  B4D8               	btfsc	status,2,c
 14910  0040EA  D002               	goto	l373
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;mac.c: 42: return 0;
 14914  0040EC  90D8               	bcf	status,0,c
 14915                           
 14916                           ; BSR set to: 0
 14917  0040EE  0012               	return	
 14918  0040F0                     l373:
 14919                           
 14920                           ; BSR set to: 0
 14921                           
 14922                           ; BSR set to: 0
 14923  0040F0  2B66               	incf	mac_cmp@i& (0+255),f,b
 14924  0040F2  D7E4               	goto	l7442
 14925  0040F4                     u8810:
 14926                           
 14927                           ; BSR set to: 0
 14928                           ;mac.c: 43: }
 14929                           ;mac.c: 44: return 1;
 14930                           
 14931                           ; BSR set to: 0
 14932  0040F4  80D8               	bsf	status,0,c
 14933  0040F6  0012               	return	
 14934  0040F8                     __end_of_mac_cmp:
 14935                           	opt stack 0
 14936                           tblptru	equ	0xFF8
 14937                           tblptrh	equ	0xFF7
 14938                           tblptrl	equ	0xFF6
 14939                           tablat	equ	0xFF5
 14940                           prodh	equ	0xFF4
 14941                           prodl	equ	0xFF3
 14942                           intcon	equ	0xFF2
 14943                           intcon3	equ	0xFF0
 14944                           postinc0	equ	0xFEE
 14945                           plusw0	equ	0xFEB
 14946                           fsr0h	equ	0xFEA
 14947                           fsr0l	equ	0xFE9
 14948                           wreg	equ	0xFE8
 14949                           indf1	equ	0xFE7
 14950                           postinc1	equ	0xFE6
 14951                           postdec1	equ	0xFE5
 14952                           plusw1	equ	0xFE3
 14953                           fsr1h	equ	0xFE2
 14954                           fsr1l	equ	0xFE1
 14955                           indf2	equ	0xFDF
 14956                           postinc2	equ	0xFDE
 14957                           postdec2	equ	0xFDD
 14958                           plusw2	equ	0xFDB
 14959                           fsr2h	equ	0xFDA
 14960                           fsr2l	equ	0xFD9
 14961                           status	equ	0xFD8
 14962                           
 14963 ;; *************** function _ipv4_isAllZero *****************
 14964 ;; Defined at:
 14965 ;;		line 178 in file "src/stack/protocols/ipv4.c"
 14966 ;; Parameters:    Size  Location     Type
 14967 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 14968 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14969 ;; Auto vars:     Size  Location     Type
 14970 ;;  i               1    2[BANK0 ] unsigned char 
 14971 ;; Return value:  Size  Location     Type
 14972 ;;		None               void
 14973 ;; Registers used:
 14974 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14975 ;; Tracked objects:
 14976 ;;		On entry : 0/0
 14977 ;;		On exit  : 0/0
 14978 ;;		Unchanged: 0/0
 14979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14980 ;;      Params:         0       2       0       0       0       0       0       0       0
 14981 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14982 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14983 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14984 ;;Total ram usage:        3 bytes
 14985 ;; Hardware stack levels used:    1
 14986 ;; Hardware stack levels required when called:    4
 14987 ;; This function calls:
 14988 ;;		Nothing
 14989 ;; This function is called by:
 14990 ;;		_ARP_parseFromRXBuffer
 14991 ;; This function uses a non-reentrant model
 14992 ;;
 14993                           
 14994                           	psect	text54
 14995  0042C2                     __ptext54:
 14996                           	opt stack 0
 14997  0042C2                     _ipv4_isAllZero:
 14998                           	opt stack 22
 14999                           
 15000                           ;ipv4.c: 179: for (uint8_t i = 0; i < 4; i++) {
 15001                           
 15002                           ; BSR set to: 0
 15003                           ;incstack = 0
 15004  0042C2  0E00               	movlw	0
 15005  0042C4  0100               	movlb	0	; () banked
 15006  0042C6  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15007  0042C8                     l7502:
 15008                           
 15009                           ; BSR set to: 0
 15010  0042C8  0E03               	movlw	3
 15011  0042CA  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15012  0042CC  D001               	goto	l998
 15013  0042CE  D00F               	goto	u8900
 15014  0042D0                     l998:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;ipv4.c: 180: if (ip->address[i] != 0x00)
 15018                           
 15019                           ; BSR set to: 0
 15020  0042D0  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15021  0042D2  0D01               	mullw	1
 15022  0042D4  50F3               	movf	prodl,w,c
 15023  0042D6  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15024  0042D8  6ED9               	movwf	fsr2l,c
 15025  0042DA  50F4               	movf	prodh,w,c
 15026  0042DC  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15027  0042DE  6EDA               	movwf	fsr2h,c
 15028  0042E0  50DF               	movf	indf2,w,c
 15029  0042E2  B4D8               	btfsc	status,2,c
 15030  0042E4  D002               	goto	l1000
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;ipv4.c: 181: return 0;
 15034  0042E6  90D8               	bcf	status,0,c
 15035                           
 15036                           ; BSR set to: 0
 15037  0042E8  0012               	return	
 15038  0042EA                     l1000:
 15039                           
 15040                           ; BSR set to: 0
 15041                           
 15042                           ; BSR set to: 0
 15043  0042EA  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15044  0042EC  D7ED               	goto	l7502
 15045  0042EE                     u8900:
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;ipv4.c: 182: }
 15049                           ;ipv4.c: 183: return 1;
 15050                           
 15051                           ; BSR set to: 0
 15052  0042EE  80D8               	bsf	status,0,c
 15053  0042F0  0012               	return	
 15054  0042F2                     __end_of_ipv4_isAllZero:
 15055                           	opt stack 0
 15056                           tblptru	equ	0xFF8
 15057                           tblptrh	equ	0xFF7
 15058                           tblptrl	equ	0xFF6
 15059                           tablat	equ	0xFF5
 15060                           prodh	equ	0xFF4
 15061                           prodl	equ	0xFF3
 15062                           intcon	equ	0xFF2
 15063                           intcon3	equ	0xFF0
 15064                           postinc0	equ	0xFEE
 15065                           plusw0	equ	0xFEB
 15066                           fsr0h	equ	0xFEA
 15067                           fsr0l	equ	0xFE9
 15068                           wreg	equ	0xFE8
 15069                           indf1	equ	0xFE7
 15070                           postinc1	equ	0xFE6
 15071                           postdec1	equ	0xFE5
 15072                           plusw1	equ	0xFE3
 15073                           fsr1h	equ	0xFE2
 15074                           fsr1l	equ	0xFE1
 15075                           indf2	equ	0xFDF
 15076                           postinc2	equ	0xFDE
 15077                           postdec2	equ	0xFDD
 15078                           plusw2	equ	0xFDB
 15079                           fsr2h	equ	0xFDA
 15080                           fsr2l	equ	0xFD9
 15081                           status	equ	0xFD8
 15082                           
 15083 ;; *************** function _ipv4_cmp *****************
 15084 ;; Defined at:
 15085 ;;		line 170 in file "src/stack/protocols/ipv4.c"
 15086 ;; Parameters:    Size  Location     Type
 15087 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 15088 ;;		 -> ARP_table(112), ARP_parseFromRXBuffer@arp(32), 
 15089 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 15090 ;;		 -> ARP_checkForEntry@ip(4), ARP_parseFromRXBuffer@arp(32), 
 15091 ;; Auto vars:     Size  Location     Type
 15092 ;;  i               1    6[BANK0 ] unsigned char 
 15093 ;; Return value:  Size  Location     Type
 15094 ;;		None               void
 15095 ;; Registers used:
 15096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15097 ;; Tracked objects:
 15098 ;;		On entry : 0/0
 15099 ;;		On exit  : 0/0
 15100 ;;		Unchanged: 0/0
 15101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15102 ;;      Params:         0       4       0       0       0       0       0       0       0
 15103 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15104 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15105 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15106 ;;Total ram usage:        7 bytes
 15107 ;; Hardware stack levels used:    1
 15108 ;; Hardware stack levels required when called:    4
 15109 ;; This function calls:
 15110 ;;		Nothing
 15111 ;; This function is called by:
 15112 ;;		_ARP_parseFromRXBuffer
 15113 ;;		_ARP_checkForEntry
 15114 ;; This function uses a non-reentrant model
 15115 ;;
 15116                           
 15117                           	psect	text55
 15118  0040F8                     __ptext55:
 15119                           	opt stack 0
 15120  0040F8                     _ipv4_cmp:
 15121                           	opt stack 23
 15122                           
 15123                           ;ipv4.c: 171: for (uint8_t i = 0; i < 4; i++) {
 15124                           
 15125                           ; BSR set to: 0
 15126                           ;incstack = 0
 15127  0040F8  0E00               	movlw	0
 15128  0040FA  0100               	movlb	0	; () banked
 15129  0040FC  6F66               	movwf	ipv4_cmp@i& (0+255),b
 15130  0040FE                     l7522:
 15131                           
 15132                           ; BSR set to: 0
 15133  0040FE  0E03               	movlw	3
 15134  004100  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 15135  004102  D001               	goto	l992
 15136  004104  D018               	goto	u8930
 15137  004106                     l992:
 15138                           
 15139                           ; BSR set to: 0
 15140                           ;ipv4.c: 172: if (a->address[i] != b->address[i])
 15141                           
 15142                           ; BSR set to: 0
 15143  004106  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15144  004108  0D01               	mullw	1
 15145  00410A  50F3               	movf	prodl,w,c
 15146  00410C  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 15147  00410E  6ED9               	movwf	fsr2l,c
 15148  004110  50F4               	movf	prodh,w,c
 15149  004112  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 15150  004114  6EDA               	movwf	fsr2h,c
 15151  004116  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15152  004118  0D01               	mullw	1
 15153  00411A  50F3               	movf	prodl,w,c
 15154  00411C  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 15155  00411E  6EE1               	movwf	fsr1l,c
 15156  004120  50F4               	movf	prodh,w,c
 15157  004122  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 15158  004124  6EE2               	movwf	fsr1h,c
 15159  004126  50DE               	movf	postinc2,w,c
 15160  004128  18E6               	xorwf	postinc1,w,c
 15161  00412A  B4D8               	btfsc	status,2,c
 15162  00412C  D002               	goto	l994
 15163                           
 15164                           ; BSR set to: 0
 15165                           ;ipv4.c: 173: return 0;
 15166  00412E  90D8               	bcf	status,0,c
 15167                           
 15168                           ; BSR set to: 0
 15169  004130  0012               	return	
 15170  004132                     l994:
 15171                           
 15172                           ; BSR set to: 0
 15173                           
 15174                           ; BSR set to: 0
 15175  004132  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 15176  004134  D7E4               	goto	l7522
 15177  004136                     u8930:
 15178                           
 15179                           ; BSR set to: 0
 15180                           ;ipv4.c: 174: }
 15181                           ;ipv4.c: 175: return 1;
 15182                           
 15183                           ; BSR set to: 0
 15184  004136  80D8               	bsf	status,0,c
 15185  004138  0012               	return	
 15186  00413A                     __end_of_ipv4_cmp:
 15187                           	opt stack 0
 15188                           tblptru	equ	0xFF8
 15189                           tblptrh	equ	0xFF7
 15190                           tblptrl	equ	0xFF6
 15191                           tablat	equ	0xFF5
 15192                           prodh	equ	0xFF4
 15193                           prodl	equ	0xFF3
 15194                           intcon	equ	0xFF2
 15195                           intcon3	equ	0xFF0
 15196                           postinc0	equ	0xFEE
 15197                           plusw0	equ	0xFEB
 15198                           fsr0h	equ	0xFEA
 15199                           fsr0l	equ	0xFE9
 15200                           wreg	equ	0xFE8
 15201                           indf1	equ	0xFE7
 15202                           postinc1	equ	0xFE6
 15203                           postdec1	equ	0xFE5
 15204                           plusw1	equ	0xFE3
 15205                           fsr1h	equ	0xFE2
 15206                           fsr1l	equ	0xFE1
 15207                           indf2	equ	0xFDF
 15208                           postinc2	equ	0xFDE
 15209                           postdec2	equ	0xFDD
 15210                           plusw2	equ	0xFDB
 15211                           fsr2h	equ	0xFDA
 15212                           fsr2l	equ	0xFD9
 15213                           status	equ	0xFD8
 15214                           
 15215 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 15216 ;; Defined at:
 15217 ;;		line 347 in file "src/enc424j600/ENC424J600.c"
 15218 ;; Parameters:    Size  Location     Type
 15219 ;;  startEnd        1    wreg     unsigned char 
 15220 ;;  len             2   18[BANK0 ] PTR unsigned int 
 15221 ;;		 -> ARP_parseFromRXBuffer@length(2), 
 15222 ;;  offset          2   20[BANK0 ] unsigned int 
 15223 ;; Auto vars:     Size  Location     Type
 15224 ;;  startEnd        1   47[BANK0 ] unsigned char 
 15225 ;;  foo             1   39[BANK0 ] unsigned char 
 15226 ;;  i               2   36[BANK0 ] unsigned int 
 15227 ;;  i               1   48[BANK0 ] unsigned char 
 15228 ;;  temp            1   42[BANK0 ] unsigned char 
 15229 ;;  rsvBytes        6   28[BANK0 ] unsigned char [6]
 15230 ;;  nextPktPoint    4   43[BANK0 ] unsigned long 
 15231 ;;  lengthOfRece    2   34[BANK0 ] unsigned int 
 15232 ;;  newPointerH     1   41[BANK0 ] unsigned char 
 15233 ;;  newPointerL     1   40[BANK0 ] unsigned char 
 15234 ;;  opcode          1   38[BANK0 ] unsigned char 
 15235 ;; Return value:  Size  Location     Type
 15236 ;;                  1    wreg      unsigned char 
 15237 ;; Registers used:
 15238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15239 ;; Tracked objects:
 15240 ;;		On entry : 0/0
 15241 ;;		On exit  : 0/0
 15242 ;;		Unchanged: 0/0
 15243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15244 ;;      Params:         0       4       0       0       0       0       0       0       0
 15245 ;;      Locals:         0      21       0       0       0       0       0       0       0
 15246 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15247 ;;      Totals:         0      31       0       0       0       0       0       0       0
 15248 ;;Total ram usage:       31 bytes
 15249 ;; Hardware stack levels used:    1
 15250 ;; Hardware stack levels required when called:    8
 15251 ;; This function calls:
 15252 ;;		_ENC424J600_getNextPacketPointer
 15253 ;;		_ENC424J600_readSPI
 15254 ;;		_ENC424J600_setERXDATAReadPointer
 15255 ;;		_ENC424J600_setNextPacketPointer
 15256 ;;		_ENC424J600_setRXTailPointer
 15257 ;;		_ENC424J600_writeSPI
 15258 ;;		_ENC424J600_writeSingleByte
 15259 ;; This function is called by:
 15260 ;;		_ARP_parseFromRXBuffer
 15261 ;; This function uses a non-reentrant model
 15262 ;;
 15263                           
 15264                           	psect	text56
 15265  002306                     __ptext56:
 15266                           	opt stack 0
 15267  002306                     _ethernetController_streamFromRXBuffer:
 15268                           	opt stack 18
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;incstack = 0
 15272                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 15273  002306  0100               	movlb	0	; () banked
 15274  002308  6F8F               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 15275                           
 15276                           ;ENC424J600.c: 348: uint32_t nextPktPointer;
 15277                           ;ENC424J600.c: 349: uint8_t newPointerL, newPointerH;
 15278                           ;ENC424J600.c: 350: uint8_t opcode;
 15279                           ;ENC424J600.c: 351: uint8_t rsvBytes[6];
 15280                           ;ENC424J600.c: 352: uint16_t lengthOfReceivedFrame = 0;
 15281  00230A  0E00               	movlw	0
 15282  00230C  0100               	movlb	0	; () banked
 15283  00230E  6F83               	movwf	(ethernetController_streamFromRXBuffer@lengthOfReceivedFrame+1)& (0+255),b
 15284  002310  0E00               	movlw	0
 15285  002312  6F82               	movwf	ethernetController_streamFromRXBuffer@lengthOfReceivedFrame& (0+255),b
 15286                           
 15287                           ; BSR set to: 0
 15288                           ;ENC424J600.c: 353: if (startEnd == 0) {
 15289  002314  518F               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15290  002316  A4D8               	btfss	status,2,c
 15291  002318  D084               	goto	l158
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;ENC424J600.c: 354: nextPktPointer = ENC424J600_getNextPacketPointer();
 15295  00231A  EC2D  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
 15296  00231E  0100               	movlb	0	; () banked
 15297  002320  C060  F08B         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_streamFromRXBuffer@nextPktPo
      +                          inter
 15298  002324  C061  F08C         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_streamFromRXBuffer@nextPkt
      +                          Pointer+1
 15299  002328  6B8D               	clrf	(ethernetController_streamFromRXBuffer@nextPktPointer+2)& (0+255),b
 15300  00232A  6B8E               	clrf	(ethernetController_streamFromRXBuffer@nextPktPointer+3)& (0+255),b
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;ENC424J600.c: 355: ENC424J600_setERXDATAReadPointer(nextPktPointer);
 15304  00232C  C08B  F06A         	movff	ethernetController_streamFromRXBuffer@nextPktPointer,ENC424J600_setERXDATAReadPoi
      +                          nter@addr
 15305  002330  C08C  F06B         	movff	ethernetController_streamFromRXBuffer@nextPktPointer+1,ENC424J600_setERXDATAReadP
      +                          ointer@addr+1
 15306  002334  ECBB  F020         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 15307                           
 15308                           ;ENC424J600.c: 356: opcode = 0x2C;
 15309  002338  0E2C               	movlw	44
 15310  00233A  0100               	movlb	0	; () banked
 15311  00233C  6F86               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 15312                           
 15313                           ; BSR set to: 0
 15314                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 15315  00233E  9881               	bcf	3969,4,c	;volatile
 15316                           
 15317                           ; BSR set to: 0
 15318                           ;ENC424J600.c: 358: ENC424J600_writeSPI(&opcode);
 15319  002340  0E86               	movlw	low ethernetController_streamFromRXBuffer@opcode
 15320  002342  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15321  002344  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 15322  002346  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15323  002348  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15324                           
 15325                           ;ENC424J600.c: 359: ENC424J600_readSPI(&newPointerL);
 15326  00234C  0E88               	movlw	low ethernetController_streamFromRXBuffer@newPointerL
 15327  00234E  0100               	movlb	0	; () banked
 15328  002350  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15329  002352  0E00               	movlw	high ethernetController_streamFromRXBuffer@newPointerL
 15330  002354  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15331  002356  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 15332                           
 15333                           ;ENC424J600.c: 360: ENC424J600_readSPI(&newPointerH);
 15334  00235A  0E89               	movlw	low ethernetController_streamFromRXBuffer@newPointerH
 15335  00235C  0100               	movlb	0	; () banked
 15336  00235E  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15337  002360  0E00               	movlw	high ethernetController_streamFromRXBuffer@newPointerH
 15338  002362  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15339  002364  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 15340                           
 15341                           ;ENC424J600.c: 362: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
 15342  002368  0E00               	movlw	0
 15343  00236A  0100               	movlb	0	; () banked
 15344  00236C  6F76               	movwf	??_ethernetController_streamFromRXBuffer& (0+255),b
 15345  00236E  0EFF               	movlw	255
 15346  002370  6F77               	movwf	(??_ethernetController_streamFromRXBuffer+1)& (0+255),b
 15347  002372  5189               	movf	ethernetController_streamFromRXBuffer@newPointerH& (0+255),w,b
 15348  002374  6F79               	movwf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),b
 15349  002376  6B78               	clrf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),b
 15350  002378  5176               	movf	??_ethernetController_streamFromRXBuffer& (0+255),w,b
 15351  00237A  1778               	andwf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),f,b
 15352  00237C  5177               	movf	(??_ethernetController_streamFromRXBuffer+1)& (0+255),w,b
 15353  00237E  1779               	andwf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),f,b
 15354  002380  5188               	movf	ethernetController_streamFromRXBuffer@newPointerL& (0+255),w,b
 15355  002382  6F7A               	movwf	(??_ethernetController_streamFromRXBuffer+4)& (0+255),b
 15356  002384  6B7B               	clrf	(??_ethernetController_streamFromRXBuffer+5)& (0+255),b
 15357  002386  5178               	movf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),w,b
 15358  002388  117A               	iorwf	(??_ethernetController_streamFromRXBuffer+4)& (0+255),w,b
 15359  00238A  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 15360  00238C  5179               	movf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),w,b
 15361  00238E  117B               	iorwf	(??_ethernetController_streamFromRXBuffer+5)& (0+255),w,b
 15362  002390  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 15363  002392  EC32  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
 15364                           
 15365                           ;ENC424J600.c: 364: for (uint8_t i = 0; i < 6; i++) {
 15366  002396  0E00               	movlw	0
 15367  002398  0100               	movlb	0	; () banked
 15368  00239A  6F90               	movwf	ethernetController_streamFromRXBuffer@i& (0+255),b
 15369  00239C                     l7318:
 15370                           
 15371                           ; BSR set to: 0
 15372  00239C  0E05               	movlw	5
 15373  00239E  6590               	cpfsgt	ethernetController_streamFromRXBuffer@i& (0+255),b
 15374  0023A0  D001               	goto	l159
 15375  0023A2  D00D               	goto	u8650
 15376  0023A4                     l159:
 15377                           
 15378                           ; BSR set to: 0
 15379                           ;ENC424J600.c: 365: ENC424J600_readSPI(&rsvBytes[i]);
 15380                           
 15381                           ; BSR set to: 0
 15382  0023A4  5190               	movf	ethernetController_streamFromRXBuffer@i& (0+255),w,b
 15383  0023A6  0D01               	mullw	1
 15384  0023A8  0E7C               	movlw	low ethernetController_streamFromRXBuffer@rsvBytes
 15385  0023AA  24F3               	addwf	prodl,w,c
 15386  0023AC  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15387  0023AE  0E00               	movlw	high ethernetController_streamFromRXBuffer@rsvBytes
 15388  0023B0  20F4               	addwfc	prodh,w,c
 15389  0023B2  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15390  0023B4  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 15391  0023B8  0100               	movlb	0	; () banked
 15392  0023BA  2B90               	incf	ethernetController_streamFromRXBuffer@i& (0+255),f,b
 15393  0023BC  D7EF               	goto	l7318
 15394  0023BE                     u8650:
 15395                           
 15396                           ; BSR set to: 0
 15397                           ;ENC424J600.c: 366: }
 15398                           ;ENC424J600.c: 368: lengthOfReceivedFrame = (uint16_t) ((rsvBytes[0]&(unsigned) 0x00ff) 
      +                          | ((unsigned) (rsvBytes[1] << 8)&(unsigned) 0xff00));
 15399                           
 15400                           ; BSR set to: 0
 15401  0023BE  0E00               	movlw	0
 15402  0023C0  6F76               	movwf	??_ethernetController_streamFromRXBuffer& (0+255),b
 15403  0023C2  0EFF               	movlw	255
 15404  0023C4  6F77               	movwf	(??_ethernetController_streamFromRXBuffer+1)& (0+255),b
 15405  0023C6  517D               	movf	(ethernetController_streamFromRXBuffer@rsvBytes+1)& (0+255),w,b
 15406  0023C8  6F79               	movwf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),b
 15407  0023CA  6B78               	clrf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),b
 15408  0023CC  5176               	movf	??_ethernetController_streamFromRXBuffer& (0+255),w,b
 15409  0023CE  1778               	andwf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),f,b
 15410  0023D0  5177               	movf	(??_ethernetController_streamFromRXBuffer+1)& (0+255),w,b
 15411  0023D2  1779               	andwf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),f,b
 15412  0023D4  517C               	movf	ethernetController_streamFromRXBuffer@rsvBytes& (0+255),w,b
 15413  0023D6  6F7A               	movwf	(??_ethernetController_streamFromRXBuffer+4)& (0+255),b
 15414  0023D8  6B7B               	clrf	(??_ethernetController_streamFromRXBuffer+5)& (0+255),b
 15415  0023DA  5178               	movf	(??_ethernetController_streamFromRXBuffer+2)& (0+255),w,b
 15416  0023DC  117A               	iorwf	(??_ethernetController_streamFromRXBuffer+4)& (0+255),w,b
 15417  0023DE  6F82               	movwf	ethernetController_streamFromRXBuffer@lengthOfReceivedFrame& (0+255),b
 15418  0023E0  5179               	movf	(??_ethernetController_streamFromRXBuffer+3)& (0+255),w,b
 15419  0023E2  117B               	iorwf	(??_ethernetController_streamFromRXBuffer+5)& (0+255),w,b
 15420  0023E4  6F83               	movwf	(ethernetController_streamFromRXBuffer@lengthOfReceivedFrame+1)& (0+255),b
 15421                           
 15422                           ; BSR set to: 0
 15423                           ;ENC424J600.c: 369: *len = lengthOfReceivedFrame;
 15424  0023E6  C072  FFD9         	movff	ethernetController_streamFromRXBuffer@len,fsr2l
 15425  0023EA  C073  FFDA         	movff	ethernetController_streamFromRXBuffer@len+1,fsr2h
 15426  0023EE  C082  FFDE         	movff	ethernetController_streamFromRXBuffer@lengthOfReceivedFrame,postinc2
 15427  0023F2  C083  FFDD         	movff	ethernetController_streamFromRXBuffer@lengthOfReceivedFrame+1,postdec2
 15428                           
 15429                           ; BSR set to: 0
 15430                           ;ENC424J600.c: 371: for (uint16_t i = 0; i < offset; i++) {
 15431  0023F6  0E00               	movlw	0
 15432  0023F8  6F85               	movwf	(ethernetController_streamFromRXBuffer@i_691+1)& (0+255),b
 15433  0023FA  0E00               	movlw	0
 15434  0023FC  6F84               	movwf	ethernetController_streamFromRXBuffer@i_691& (0+255),b
 15435  0023FE  D009               	goto	l161
 15436  002400                     
 15437                           ; BSR set to: 0
 15438                           ;ENC424J600.c: 372: uint8_t foo;
 15439                           ;ENC424J600.c: 373: ENC424J600_readSPI(&foo);
 15440                           
 15441                           ; BSR set to: 0
 15442  002400  0E87               	movlw	low ethernetController_streamFromRXBuffer@foo
 15443  002402  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15444  002404  0E00               	movlw	high ethernetController_streamFromRXBuffer@foo
 15445  002406  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15446  002408  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 15447  00240C  0100               	movlb	0	; () banked
 15448  00240E  4B84               	infsnz	ethernetController_streamFromRXBuffer@i_691& (0+255),f,b
 15449  002410  2B85               	incf	(ethernetController_streamFromRXBuffer@i_691+1)& (0+255),f,b
 15450  002412                     l161:
 15451                           
 15452                           ; BSR set to: 0
 15453                           
 15454                           ; BSR set to: 0
 15455  002412  5174               	movf	ethernetController_streamFromRXBuffer@offset& (0+255),w,b
 15456  002414  5D84               	subwf	ethernetController_streamFromRXBuffer@i_691& (0+255),w,b
 15457  002416  5175               	movf	(ethernetController_streamFromRXBuffer@offset+1)& (0+255),w,b
 15458  002418  5985               	subwfb	(ethernetController_streamFromRXBuffer@i_691+1)& (0+255),w,b
 15459  00241A  A0D8               	btfss	status,0,c
 15460  00241C  D7F1               	goto	l162
 15461                           
 15462                           ; BSR set to: 0
 15463                           ;ENC424J600.c: 374: }
 15464                           ;ENC424J600.c: 375: return 0;
 15465                           
 15466                           ; BSR set to: 0
 15467  00241E  0E00               	movlw	0
 15468                           
 15469                           ; BSR set to: 0
 15470  002420  0012               	return	
 15471  002422                     l158:
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;ENC424J600.c: 376: }
 15475                           ;ENC424J600.c: 377: if (startEnd == 1) {
 15476                           
 15477                           ; BSR set to: 0
 15478  002422  058F               	decf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15479  002424  A4D8               	btfss	status,2,c
 15480  002426  D009               	goto	l165
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;ENC424J600.c: 378: uint8_t temp;
 15484                           ;ENC424J600.c: 379: ENC424J600_readSPI(&temp);
 15485  002428  0E8A               	movlw	low ethernetController_streamFromRXBuffer@temp
 15486  00242A  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15487  00242C  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 15488  00242E  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15489  002430  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 15490                           
 15491                           ;ENC424J600.c: 380: return temp;
 15492  002434  0100               	movlb	0	; () banked
 15493  002436  518A               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 15494                           
 15495                           ; BSR set to: 0
 15496  002438  0012               	return	
 15497  00243A                     l165:
 15498                           
 15499                           ; BSR set to: 0
 15500                           ;ENC424J600.c: 381: }
 15501                           ;ENC424J600.c: 383: if (startEnd == 2) {
 15502                           
 15503                           ; BSR set to: 0
 15504  00243A  0E02               	movlw	2
 15505  00243C  198F               	xorwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15506  00243E  A4D8               	btfss	status,2,c
 15507  002440  D01D               	goto	l166
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;ENC424J600.c: 384: PORTBbits.RB4=1;
 15511  002442  8881               	bsf	3969,4,c	;volatile
 15512                           
 15513                           ; BSR set to: 0
 15514                           ;ENC424J600.c: 386: if (nextPktPointer == 0x3000) {
 15515  002444  0E30               	movlw	48
 15516  002446  198C               	xorwf	(ethernetController_streamFromRXBuffer@nextPktPointer+1)& (0+255),w,b
 15517  002448  118B               	iorwf	ethernetController_streamFromRXBuffer@nextPktPointer& (0+255),w,b
 15518  00244A  118D               	iorwf	(ethernetController_streamFromRXBuffer@nextPktPointer+2)& (0+255),w,b
 15519  00244C  118E               	iorwf	(ethernetController_streamFromRXBuffer@nextPktPointer+3)& (0+255),w,b
 15520  00244E  A4D8               	btfss	status,2,c
 15521  002450  D007               	goto	l167
 15522                           
 15523                           ; BSR set to: 0
 15524                           ;ENC424J600.c: 387: ENC424J600_setRXTailPointer(0x55FE);
 15525  002452  0E55               	movlw	85
 15526  002454  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15527  002456  0EFE               	movlw	254
 15528  002458  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15529  00245A  ECD1  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 15530                           
 15531                           ;ENC424J600.c: 388: } else {
 15532  00245E  D009               	goto	l168
 15533  002460                     l167:
 15534                           
 15535                           ;ENC424J600.c: 389: ENC424J600_setRXTailPointer(nextPktPointer - 2);
 15536  002460  0EFE               	movlw	254
 15537  002462  0100               	movlb	0	; () banked
 15538  002464  258B               	addwf	ethernetController_streamFromRXBuffer@nextPktPointer& (0+255),w,b
 15539  002466  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15540  002468  0EFF               	movlw	255
 15541  00246A  218C               	addwfc	(ethernetController_streamFromRXBuffer@nextPktPointer+1)& (0+255),w,b
 15542  00246C  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15543  00246E  ECD1  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 15544  002472                     l168:
 15545                           
 15546                           ;ENC424J600.c: 390: }
 15547                           ;ENC424J600.c: 393: ENC424J600_writeSingleByte(0b11001100);
 15548  002472  0ECC               	movlw	204
 15549  002474  ECF9  F022         	call	_ENC424J600_writeSingleByte
 15550                           
 15551                           ;ENC424J600.c: 394: return 0;
 15552  002478  0E00               	movlw	0
 15553  00247A  0012               	return	
 15554  00247C                     l166:
 15555                           
 15556                           ;ENC424J600.c: 395: }
 15557                           ;ENC424J600.c: 396: return 0;
 15558  00247C  0E00               	movlw	0
 15559  00247E  0012               	return	
 15560  002480                     __end_of_ethernetController_streamFromRXBuffer:
 15561                           	opt stack 0
 15562                           tblptru	equ	0xFF8
 15563                           tblptrh	equ	0xFF7
 15564                           tblptrl	equ	0xFF6
 15565                           tablat	equ	0xFF5
 15566                           prodh	equ	0xFF4
 15567                           prodl	equ	0xFF3
 15568                           intcon	equ	0xFF2
 15569                           intcon3	equ	0xFF0
 15570                           postinc0	equ	0xFEE
 15571                           plusw0	equ	0xFEB
 15572                           fsr0h	equ	0xFEA
 15573                           fsr0l	equ	0xFE9
 15574                           wreg	equ	0xFE8
 15575                           indf1	equ	0xFE7
 15576                           postinc1	equ	0xFE6
 15577                           postdec1	equ	0xFE5
 15578                           plusw1	equ	0xFE3
 15579                           fsr1h	equ	0xFE2
 15580                           fsr1l	equ	0xFE1
 15581                           indf2	equ	0xFDF
 15582                           postinc2	equ	0xFDE
 15583                           postdec2	equ	0xFDD
 15584                           plusw2	equ	0xFDB
 15585                           fsr2h	equ	0xFDA
 15586                           fsr2l	equ	0xFD9
 15587                           status	equ	0xFD8
 15588                           
 15589 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 15590 ;; Defined at:
 15591 ;;		line 564 in file "src/enc424j600/ENC424J600.c"
 15592 ;; Parameters:    Size  Location     Type
 15593 ;;  addr            2   10[BANK0 ] unsigned int 
 15594 ;; Auto vars:     Size  Location     Type
 15595 ;;  highByte        1   14[BANK0 ] unsigned char 
 15596 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15597 ;;  opcode          1   12[BANK0 ] unsigned char 
 15598 ;; Return value:  Size  Location     Type
 15599 ;;                  1    wreg      void 
 15600 ;; Registers used:
 15601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15602 ;; Tracked objects:
 15603 ;;		On entry : 0/0
 15604 ;;		On exit  : 0/0
 15605 ;;		Unchanged: 0/0
 15606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15607 ;;      Params:         0       2       0       0       0       0       0       0       0
 15608 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15609 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15610 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15611 ;;Total ram usage:        5 bytes
 15612 ;; Hardware stack levels used:    1
 15613 ;; Hardware stack levels required when called:    6
 15614 ;; This function calls:
 15615 ;;		_ENC424J600_writeSPI
 15616 ;; This function is called by:
 15617 ;;		_ethernetController_getSourceMACAddress
 15618 ;;		_ethernetController_getEtherTypeField
 15619 ;;		_ethernetController_getRSV
 15620 ;;		_ethernetController_streamFromRXBuffer
 15621 ;;		_ethernetController_dropPacket
 15622 ;;		_ethernetController_getDestinationMACAddress
 15623 ;; This function uses a non-reentrant model
 15624 ;;
 15625                           
 15626                           	psect	text57
 15627  004176                     __ptext57:
 15628                           	opt stack 0
 15629  004176                     _ENC424J600_setERXDATAReadPointer:
 15630                           	opt stack 19
 15631                           
 15632                           ;ENC424J600.c: 565: uint8_t opcode = 0x64;
 15633                           
 15634                           ;incstack = 0
 15635  004176  0E64               	movlw	100
 15636  004178  0100               	movlb	0	; () banked
 15637  00417A  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 15638                           
 15639                           ; BSR set to: 0
 15640                           ;ENC424J600.c: 566: uint8_t lowByte = addr & 0x00ff;
 15641  00417C  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 15642                           
 15643                           ;ENC424J600.c: 567: uint8_t highByte = (addr >> 8) & 0xff;
 15644  004180  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 15645  004182  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 15646                           
 15647                           ; BSR set to: 0
 15648                           ;ENC424J600.c: 568: PORTBbits.RB4=0;
 15649  004184  9881               	bcf	3969,4,c	;volatile
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;ENC424J600.c: 569: ENC424J600_writeSPI(&opcode);
 15653  004186  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 15654  004188  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15655  00418A  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 15656  00418C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15657  00418E  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15658                           
 15659                           ;ENC424J600.c: 570: ENC424J600_writeSPI(&lowByte);
 15660  004192  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 15661  004194  0100               	movlb	0	; () banked
 15662  004196  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15663  004198  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 15664  00419A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15665  00419C  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15666                           
 15667                           ;ENC424J600.c: 571: ENC424J600_writeSPI(&highByte);
 15668  0041A0  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 15669  0041A2  0100               	movlb	0	; () banked
 15670  0041A4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15671  0041A6  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 15672  0041A8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15673  0041AA  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15674                           
 15675                           ;ENC424J600.c: 572: PORTBbits.RB4=1;
 15676  0041AE  8881               	bsf	3969,4,c	;volatile
 15677  0041B0  0012               	return		;funcret
 15678  0041B2                     __end_of_ENC424J600_setERXDATAReadPointer:
 15679                           	opt stack 0
 15680                           tblptru	equ	0xFF8
 15681                           tblptrh	equ	0xFF7
 15682                           tblptrl	equ	0xFF6
 15683                           tablat	equ	0xFF5
 15684                           prodh	equ	0xFF4
 15685                           prodl	equ	0xFF3
 15686                           intcon	equ	0xFF2
 15687                           intcon3	equ	0xFF0
 15688                           postinc0	equ	0xFEE
 15689                           plusw0	equ	0xFEB
 15690                           fsr0h	equ	0xFEA
 15691                           fsr0l	equ	0xFE9
 15692                           wreg	equ	0xFE8
 15693                           indf1	equ	0xFE7
 15694                           postinc1	equ	0xFE6
 15695                           postdec1	equ	0xFE5
 15696                           plusw1	equ	0xFE3
 15697                           fsr1h	equ	0xFE2
 15698                           fsr1l	equ	0xFE1
 15699                           indf2	equ	0xFDF
 15700                           postinc2	equ	0xFDE
 15701                           postdec2	equ	0xFDD
 15702                           plusw2	equ	0xFDB
 15703                           fsr2h	equ	0xFDA
 15704                           fsr2l	equ	0xFD9
 15705                           status	equ	0xFD8
 15706                           
 15707 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 15708 ;; Defined at:
 15709 ;;		line 593 in file "src/enc424j600/ENC424J600.c"
 15710 ;; Parameters:    Size  Location     Type
 15711 ;;		None
 15712 ;; Auto vars:     Size  Location     Type
 15713 ;;		None
 15714 ;; Return value:  Size  Location     Type
 15715 ;;                  2    0[BANK0 ] unsigned int 
 15716 ;; Registers used:
 15717 ;;		None
 15718 ;; Tracked objects:
 15719 ;;		On entry : 0/0
 15720 ;;		On exit  : 0/0
 15721 ;;		Unchanged: 0/0
 15722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15723 ;;      Params:         0       2       0       0       0       0       0       0       0
 15724 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15725 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15726 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15727 ;;Total ram usage:        2 bytes
 15728 ;; Hardware stack levels used:    1
 15729 ;; Hardware stack levels required when called:    4
 15730 ;; This function calls:
 15731 ;;		Nothing
 15732 ;; This function is called by:
 15733 ;;		_ethernetController_getSourceMACAddress
 15734 ;;		_ethernetController_getEtherTypeField
 15735 ;;		_ethernetController_streamFromRXBuffer
 15736 ;;		_ethernetController_dropPacket
 15737 ;;		_ethernetController_getNextPacketPointer
 15738 ;;		_ethernetController_getDestinationMACAddress
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           	psect	text58
 15743  00465A                     __ptext58:
 15744                           	opt stack 0
 15745  00465A                     _ENC424J600_getNextPacketPointer:
 15746                           	opt stack 21
 15747                           
 15748                           ;ENC424J600.c: 594: return nextPacketPointer;
 15749                           
 15750                           ;incstack = 0
 15751  00465A  C045  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 15752  00465E  C046  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 15753  004662  0012               	return		;funcret
 15754  004664                     __end_of_ENC424J600_getNextPacketPointer:
 15755                           	opt stack 0
 15756                           tblptru	equ	0xFF8
 15757                           tblptrh	equ	0xFF7
 15758                           tblptrl	equ	0xFF6
 15759                           tablat	equ	0xFF5
 15760                           prodh	equ	0xFF4
 15761                           prodl	equ	0xFF3
 15762                           intcon	equ	0xFF2
 15763                           intcon3	equ	0xFF0
 15764                           postinc0	equ	0xFEE
 15765                           plusw0	equ	0xFEB
 15766                           fsr0h	equ	0xFEA
 15767                           fsr0l	equ	0xFE9
 15768                           wreg	equ	0xFE8
 15769                           indf1	equ	0xFE7
 15770                           postinc1	equ	0xFE6
 15771                           postdec1	equ	0xFE5
 15772                           plusw1	equ	0xFE3
 15773                           fsr1h	equ	0xFE2
 15774                           fsr1l	equ	0xFE1
 15775                           indf2	equ	0xFDF
 15776                           postinc2	equ	0xFDE
 15777                           postdec2	equ	0xFDD
 15778                           plusw2	equ	0xFDB
 15779                           fsr2h	equ	0xFDA
 15780                           fsr2l	equ	0xFD9
 15781                           status	equ	0xFD8
 15782                           
 15783 ;; *************** function _ethernetController_updateLinkStatus *****************
 15784 ;; Defined at:
 15785 ;;		line 427 in file "src/enc424j600/ENC424J600.c"
 15786 ;; Parameters:    Size  Location     Type
 15787 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 15788 ;;		 -> stack(110), 
 15789 ;; Auto vars:     Size  Location     Type
 15790 ;;  temp16          1   35[BANK0 ] unsigned char 
 15791 ;;  temp            1   34[BANK0 ] unsigned char 
 15792 ;; Return value:  Size  Location     Type
 15793 ;;                  1    wreg      void 
 15794 ;; Registers used:
 15795 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15796 ;; Tracked objects:
 15797 ;;		On entry : 0/0
 15798 ;;		On exit  : 0/0
 15799 ;;		Unchanged: 0/0
 15800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15801 ;;      Params:         0       2       0       0       0       0       0       0       0
 15802 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15803 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15804 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15805 ;;Total ram usage:        4 bytes
 15806 ;; Hardware stack levels used:    1
 15807 ;; Hardware stack levels required when called:    8
 15808 ;; This function calls:
 15809 ;;		_ENC424J600_readControlRegisterUnbanked
 15810 ;;		_ENC424J600_readPHYRegister
 15811 ;; This function is called by:
 15812 ;;		_handleStackBackgroundTasks
 15813 ;; This function uses a non-reentrant model
 15814 ;;
 15815                           
 15816                           	psect	text59
 15817  003628                     __ptext59:
 15818                           	opt stack 0
 15819  003628                     _ethernetController_updateLinkStatus:
 15820                           	opt stack 21
 15821                           
 15822                           ;ENC424J600.c: 428: uint8_t temp, temp16;
 15823                           ;ENC424J600.c: 429: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 15824                           
 15825                           ;incstack = 0
 15826  003628  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 15827  00362A  0100               	movlb	0	; () banked
 15828  00362C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 15829  00362E  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 15830  003630  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 15831  003632  0E1B               	movlw	27
 15832  003634  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 15833                           
 15834                           ;ENC424J600.c: 430: if (temp & 0x01) {
 15835  003638  0100               	movlb	0	; () banked
 15836  00363A  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 15837  00363C  D006               	goto	l179
 15838                           
 15839                           ; BSR set to: 0
 15840                           ;ENC424J600.c: 431: state->link = LINK_ESTABLISHED;
 15841  00363E  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15842  003642  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15843  003646  0E01               	movlw	1
 15844  003648  D005               	goto	L3
 15845  00364A                     l179:
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;ENC424J600.c: 433: state->link = NO_LINK;
 15849                           
 15850                           ; BSR set to: 0
 15851  00364A  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15852  00364E  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15853  003652  0E00               	movlw	0
 15854  003654                     L3:
 15855  003654  6EDF               	movwf	indf2,c
 15856                           
 15857                           ; BSR set to: 0
 15858                           ;ENC424J600.c: 434: }
 15859                           ;ENC424J600.c: 436: ENC424J600_readPHYRegister(0x1F, &temp16);
 15860                           
 15861                           ; BSR set to: 0
 15862  003656  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 15863  003658  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 15864  00365A  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 15865  00365C  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 15866  00365E  0E1F               	movlw	31
 15867  003660  EC60  F015         	call	_ENC424J600_readPHYRegister
 15868                           
 15869                           ;ENC424J600.c: 438: if (temp16 & (1 << 3)) {
 15870  003664  0100               	movlb	0	; () banked
 15871  003666  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 15872  003668  D008               	goto	l181
 15873                           
 15874                           ; BSR set to: 0
 15875                           ;ENC424J600.c: 439: state->speed = HUNDRED_MBIT;
 15876  00366A  EE20 F001          	lfsr	2,1
 15877  00366E  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15878  003670  26D9               	addwf	fsr2l,f,c
 15879  003672  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15880  003674  22DA               	addwfc	fsr2h,f,c
 15881  003676  0E01               	movlw	1
 15882  003678  D007               	goto	L4
 15883  00367A                     l181:
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;ENC424J600.c: 441: state->speed = TEN_MBIT;
 15887                           
 15888                           ; BSR set to: 0
 15889  00367A  EE20 F001          	lfsr	2,1
 15890  00367E  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15891  003680  26D9               	addwf	fsr2l,f,c
 15892  003682  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15893  003684  22DA               	addwfc	fsr2h,f,c
 15894  003686  0E00               	movlw	0
 15895  003688                     L4:
 15896  003688  6EDF               	movwf	indf2,c
 15897                           
 15898                           ; BSR set to: 0
 15899                           ;ENC424J600.c: 442: }
 15900                           ;ENC424J600.c: 444: if (temp16 & (1 << 4)) {
 15901                           
 15902                           ; BSR set to: 0
 15903  00368A  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 15904  00368C  D009               	goto	l183
 15905                           
 15906                           ; BSR set to: 0
 15907                           ;ENC424J600.c: 445: state->duplex = FULL_DUPLEX;
 15908  00368E  EE20 F002          	lfsr	2,2
 15909  003692  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15910  003694  26D9               	addwf	fsr2l,f,c
 15911  003696  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15912  003698  22DA               	addwfc	fsr2h,f,c
 15913  00369A  0E01               	movlw	1
 15914  00369C  6EDF               	movwf	indf2,c
 15915                           
 15916                           ;ENC424J600.c: 446: } else {
 15917  00369E  0012               	return	
 15918  0036A0                     l183:
 15919                           
 15920                           ; BSR set to: 0
 15921                           ;ENC424J600.c: 447: state->duplex = HALF_DUPLEX;
 15922                           
 15923                           ; BSR set to: 0
 15924  0036A0  EE20 F002          	lfsr	2,2
 15925  0036A4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15926  0036A6  26D9               	addwf	fsr2l,f,c
 15927  0036A8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15928  0036AA  22DA               	addwfc	fsr2h,f,c
 15929  0036AC  0E00               	movlw	0
 15930  0036AE  6EDF               	movwf	indf2,c
 15931  0036B0  0012               	return	
 15932  0036B2                     __end_of_ethernetController_updateLinkStatus:
 15933                           	opt stack 0
 15934                           tblptru	equ	0xFF8
 15935                           tblptrh	equ	0xFF7
 15936                           tblptrl	equ	0xFF6
 15937                           tablat	equ	0xFF5
 15938                           prodh	equ	0xFF4
 15939                           prodl	equ	0xFF3
 15940                           intcon	equ	0xFF2
 15941                           intcon3	equ	0xFF0
 15942                           postinc0	equ	0xFEE
 15943                           plusw0	equ	0xFEB
 15944                           fsr0h	equ	0xFEA
 15945                           fsr0l	equ	0xFE9
 15946                           wreg	equ	0xFE8
 15947                           indf1	equ	0xFE7
 15948                           postinc1	equ	0xFE6
 15949                           postdec1	equ	0xFE5
 15950                           plusw1	equ	0xFE3
 15951                           fsr1h	equ	0xFE2
 15952                           fsr1l	equ	0xFE1
 15953                           indf2	equ	0xFDF
 15954                           postinc2	equ	0xFDE
 15955                           postdec2	equ	0xFDD
 15956                           plusw2	equ	0xFDB
 15957                           fsr2h	equ	0xFDA
 15958                           fsr2l	equ	0xFD9
 15959                           status	equ	0xFD8
 15960                           
 15961 ;; *************** function _ENC424J600_readPHYRegister *****************
 15962 ;; Defined at:
 15963 ;;		line 682 in file "src/enc424j600/ENC424J600.c"
 15964 ;; Parameters:    Size  Location     Type
 15965 ;;  addr            1    wreg     unsigned char 
 15966 ;;  data            2   14[BANK0 ] PTR unsigned int 
 15967 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 15968 ;; Auto vars:     Size  Location     Type
 15969 ;;  addr            1   22[BANK0 ] unsigned char 
 15970 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 15971 ;;  temp            1   31[BANK0 ] unsigned char 
 15972 ;;  highByte        1   30[BANK0 ] unsigned char 
 15973 ;;  lowByte         1   29[BANK0 ] unsigned char 
 15974 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 15975 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 15976 ;; Return value:  Size  Location     Type
 15977 ;;                  1    wreg      void 
 15978 ;; Registers used:
 15979 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15980 ;; Tracked objects:
 15981 ;;		On entry : 0/0
 15982 ;;		On exit  : 0/0
 15983 ;;		Unchanged: 0/0
 15984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15985 ;;      Params:         0       2       0       0       0       0       0       0       0
 15986 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15987 ;;      Temps:          0       6       0       0       0       0       0       0       0
 15988 ;;      Totals:         0      18       0       0       0       0       0       0       0
 15989 ;;Total ram usage:       18 bytes
 15990 ;; Hardware stack levels used:    1
 15991 ;; Hardware stack levels required when called:    7
 15992 ;; This function calls:
 15993 ;;		_ENC424J600_readControlRegisterUnbanked
 15994 ;;		_ENC424J600_writeControlRegisterUnbanked
 15995 ;; This function is called by:
 15996 ;;		_ethernetController_updateLinkStatus
 15997 ;; This function uses a non-reentrant model
 15998 ;;
 15999                           
 16000                           	psect	text60
 16001  002AC0                     __ptext60:
 16002                           	opt stack 0
 16003  002AC0                     _ENC424J600_readPHYRegister:
 16004                           	opt stack 21
 16005                           
 16006                           ; BSR set to: 0
 16007                           ;incstack = 0
 16008                           ;ENC424J600_readPHYRegister@addr stored from wreg
 16009  002AC0  0100               	movlb	0	; () banked
 16010  002AC2  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 16011                           
 16012                           ;ENC424J600.c: 684: uint8_t PHYaddress = addr & 0x1F;
 16013  002AC4  0100               	movlb	0	; () banked
 16014  002AC6  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 16015  002AC8  0B1F               	andlw	31
 16016  002ACA  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 16017                           
 16018                           ; BSR set to: 0
 16019                           ;ENC424J600.c: 685: uint8_t unusedBits = 0x01;
 16020  002ACC  0E01               	movlw	1
 16021  002ACE  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 16022                           
 16023                           ; BSR set to: 0
 16024                           ;ENC424J600.c: 686: uint8_t temp;
 16025                           ;ENC424J600.c: 687: uint8_t lowByte;
 16026                           ;ENC424J600.c: 688: uint8_t highByte;
 16027                           ;ENC424J600.c: 689: uint32_t timeoutCounter = 0;
 16028  002AD0  0E00               	movlw	0
 16029  002AD2  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 16030  002AD4  0E00               	movlw	0
 16031  002AD6  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 16032  002AD8  0E00               	movlw	0
 16033  002ADA  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 16034  002ADC  0E00               	movlw	0
 16035  002ADE  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 16036                           
 16037                           ; BSR set to: 0
 16038                           ;ENC424J600.c: 691: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 16039  002AE0  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 16040  002AE2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16041  002AE4  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 16042  002AE6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16043  002AE8  0E54               	movlw	84
 16044  002AEA  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16045                           
 16046                           ;ENC424J600.c: 692: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 16047  002AEE  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 16048  002AF0  0100               	movlb	0	; () banked
 16049  002AF2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16050  002AF4  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 16051  002AF6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16052  002AF8  0E55               	movlw	85
 16053  002AFA  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16054                           
 16055                           ;ENC424J600.c: 695: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16056  002AFE  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16057  002B00  0100               	movlb	0	; () banked
 16058  002B02  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16059  002B04  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16060  002B06  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16061  002B08  0E52               	movlw	82
 16062  002B0A  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16063                           
 16064                           ;ENC424J600.c: 696: temp |= 0x01;
 16065  002B0E  0100               	movlb	0	; () banked
 16066  002B10  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16067                           
 16068                           ; BSR set to: 0
 16069                           ;ENC424J600.c: 697: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16070  002B12  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16071  002B14  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16072  002B16  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16073  002B18  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16074  002B1A  0E52               	movlw	82
 16075  002B1C  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16076                           
 16077                           ;ENC424J600.c: 699: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 16078  002B20  0E45               	movlw	69
 16079  002B22                     u11157:
 16080  002B22  2EE8               	decfsz	wreg,f,c
 16081  002B24  D7FE               	bra	u11157
 16082  002B26  F000               	nop	
 16083  002B28                     
 16084                           ;ENC424J600.c: 702: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 16085  002B28  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16086  002B2A  0100               	movlb	0	; () banked
 16087  002B2C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16088  002B2E  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16089  002B30  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16090  002B32  0E6A               	movlw	106
 16091  002B34  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16092                           
 16093                           ;ENC424J600.c: 703: timeoutCounter++;
 16094  002B38  0E01               	movlw	1
 16095  002B3A  0100               	movlb	0	; () banked
 16096  002B3C  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 16097  002B3E  0E00               	movlw	0
 16098  002B40  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 16099  002B42  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 16100  002B44  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 16101                           
 16102                           ; BSR set to: 0
 16103                           ;ENC424J600.c: 704: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 16104  002B46  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16105  002B48  D008               	goto	u9850
 16106                           
 16107                           ; BSR set to: 0
 16108  002B4A  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16109  002B4C  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16110  002B4E  E105               	bnz	l7984
 16111  002B50  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16112  002B52  0E0F               	movlw	15
 16113  002B54  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16114  002B56  A0D8               	btfss	status,0,c
 16115  002B58  D7E7               	goto	l293
 16116  002B5A                     u9850:
 16117  002B5A                     l7984:
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;ENC424J600.c: 705: if (timeoutCounter >= 0xfff)
 16121  002B5A  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16122  002B5C  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16123  002B5E  E140               	bnz	l298
 16124  002B60  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16125  002B62  0E0F               	movlw	15
 16126  002B64  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16127  002B66  B0D8               	btfsc	status,0,c
 16128  002B68  0012               	return	
 16129                           
 16130                           ; BSR set to: 0
 16131                           ;ENC424J600.c: 709: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16132                           
 16133                           ; BSR set to: 0
 16134                           
 16135                           ; BSR set to: 0
 16136                           ;ENC424J600.c: 706: return;
 16137  002B6A  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16138  002B6C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16139  002B6E  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16140  002B70  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16141  002B72  0E52               	movlw	82
 16142  002B74  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16143                           
 16144                           ;ENC424J600.c: 710: temp &= ~0x01;
 16145  002B78  0100               	movlb	0	; () banked
 16146  002B7A  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;ENC424J600.c: 711: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16150  002B7C  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16151  002B7E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16152  002B80  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16153  002B82  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16154  002B84  0E52               	movlw	82
 16155  002B86  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16156                           
 16157                           ;ENC424J600.c: 714: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 16158  002B8A  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 16159  002B8C  0100               	movlb	0	; () banked
 16160  002B8E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16161  002B90  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 16162  002B92  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16163  002B94  0E68               	movlw	104
 16164  002B96  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16165                           
 16166                           ;ENC424J600.c: 715: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 16167  002B9A  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 16168  002B9C  0100               	movlb	0	; () banked
 16169  002B9E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16170  002BA0  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 16171  002BA2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16172  002BA4  0E69               	movlw	105
 16173  002BA6  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16174                           
 16175                           ;ENC424J600.c: 716: *data = (lowByte | ((highByte << 8)&0xff00));
 16176  002BAA  0E00               	movlw	0
 16177  002BAC  0100               	movlb	0	; () banked
 16178  002BAE  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 16179  002BB0  0EFF               	movlw	255
 16180  002BB2  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 16181  002BB4  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 16182  002BB6  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 16183  002BB8  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 16184  002BBA  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 16185  002BBC  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 16186  002BBE  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 16187  002BC0  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 16188  002BC2  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 16189  002BC4  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 16190  002BC6  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 16191  002BC8  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 16192  002BCA  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 16193  002BCC  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 16194  002BCE  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 16195  002BD0  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 16196  002BD4  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 16197  002BD8  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 16198  002BDC  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 16199  002BE0                     l298:
 16200                           
 16201                           ; BSR set to: 0
 16202  002BE0  0012               	return		;funcret
 16203  002BE2                     __end_of_ENC424J600_readPHYRegister:
 16204                           	opt stack 0
 16205                           tblptru	equ	0xFF8
 16206                           tblptrh	equ	0xFF7
 16207                           tblptrl	equ	0xFF6
 16208                           tablat	equ	0xFF5
 16209                           prodh	equ	0xFF4
 16210                           prodl	equ	0xFF3
 16211                           intcon	equ	0xFF2
 16212                           intcon3	equ	0xFF0
 16213                           postinc0	equ	0xFEE
 16214                           plusw0	equ	0xFEB
 16215                           fsr0h	equ	0xFEA
 16216                           fsr0l	equ	0xFE9
 16217                           wreg	equ	0xFE8
 16218                           indf1	equ	0xFE7
 16219                           postinc1	equ	0xFE6
 16220                           postdec1	equ	0xFE5
 16221                           plusw1	equ	0xFE3
 16222                           fsr1h	equ	0xFE2
 16223                           fsr1l	equ	0xFE1
 16224                           indf2	equ	0xFDF
 16225                           postinc2	equ	0xFDE
 16226                           postdec2	equ	0xFDD
 16227                           plusw2	equ	0xFDB
 16228                           fsr2h	equ	0xFDA
 16229                           fsr2l	equ	0xFD9
 16230                           status	equ	0xFD8
 16231                           
 16232 ;; *************** function _ethernetController_setLEDStatus *****************
 16233 ;; Defined at:
 16234 ;;		line 451 in file "src/enc424j600/ENC424J600.c"
 16235 ;; Parameters:    Size  Location     Type
 16236 ;;  LED             1    wreg     unsigned char 
 16237 ;;  status          1   14[BANK0 ] unsigned char 
 16238 ;; Auto vars:     Size  Location     Type
 16239 ;;  LED             1   15[BANK0 ] unsigned char 
 16240 ;;  data            1   16[BANK0 ] unsigned char 
 16241 ;; Return value:  Size  Location     Type
 16242 ;;                  1    wreg      void 
 16243 ;; Registers used:
 16244 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16245 ;; Tracked objects:
 16246 ;;		On entry : 0/0
 16247 ;;		On exit  : 0/0
 16248 ;;		Unchanged: 0/0
 16249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16250 ;;      Params:         0       1       0       0       0       0       0       0       0
 16251 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16252 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16253 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16254 ;;Total ram usage:        3 bytes
 16255 ;; Hardware stack levels used:    1
 16256 ;; Hardware stack levels required when called:    7
 16257 ;; This function calls:
 16258 ;;		_ENC424J600_readControlRegisterUnbanked
 16259 ;;		_ENC424J600_writeControlRegisterUnbanked
 16260 ;; This function is called by:
 16261 ;;		_handleStackBackgroundTasks
 16262 ;;		_main
 16263 ;; This function uses a non-reentrant model
 16264 ;;
 16265                           
 16266                           	psect	text61
 16267  003D94                     __ptext61:
 16268                           	opt stack 0
 16269  003D94                     _ethernetController_setLEDStatus:
 16270                           	opt stack 22
 16271                           
 16272                           ; BSR set to: 0
 16273                           ;incstack = 0
 16274                           ;ethernetController_setLEDStatus@LED stored from wreg
 16275  003D94  0100               	movlb	0	; () banked
 16276  003D96  6F6F               	movwf	ethernetController_setLEDStatus@LED& (0+255),b
 16277                           
 16278                           ;ENC424J600.c: 452: uint8_t data;
 16279                           ;ENC424J600.c: 453: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16280  003D98  0E70               	movlw	low ethernetController_setLEDStatus@data
 16281  003D9A  0100               	movlb	0	; () banked
 16282  003D9C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16283  003D9E  0E00               	movlw	high ethernetController_setLEDStatus@data
 16284  003DA0  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16285  003DA2  0E75               	movlw	117
 16286  003DA4  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16287                           
 16288                           ;ENC424J600.c: 454: if (LED == LEDB) {
 16289  003DA8  0100               	movlb	0	; () banked
 16290  003DAA  056F               	decf	ethernetController_setLEDStatus@LED& (0+255),w,b
 16291  003DAC  A4D8               	btfss	status,2,c
 16292  003DAE  D00C               	goto	l188
 16293                           
 16294                           ; BSR set to: 0
 16295                           ;ENC424J600.c: 456: if (status == LED_ON) {
 16296  003DB0  516E               	movf	ethernetController_setLEDStatus@status& (0+255),w,b
 16297  003DB2  A4D8               	btfss	status,2,c
 16298  003DB4  D002               	goto	l189
 16299                           
 16300                           ; BSR set to: 0
 16301                           ;ENC424J600.c: 457: data &= ~0x0f;
 16302  003DB6  0EF0               	movlw	240
 16303  003DB8  D00E               	goto	L5
 16304  003DBA                     l189:
 16305                           
 16306                           ; BSR set to: 0
 16307                           
 16308                           ; BSR set to: 0
 16309  003DBA  056E               	decf	ethernetController_setLEDStatus@status& (0+255),w,b
 16310  003DBC  A4D8               	btfss	status,2,c
 16311  003DBE  D013               	goto	l196
 16312                           
 16313                           ; BSR set to: 0
 16314                           ;ENC424J600.c: 460: data &= ~0x0f;
 16315  003DC0  0EF0               	movlw	240
 16316  003DC2  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16317                           
 16318                           ; BSR set to: 0
 16319                           ;ENC424J600.c: 461: data |= 0x01;
 16320  003DC4  8170               	bsf	ethernetController_setLEDStatus@data& (0+255),0,b
 16321                           
 16322                           ; BSR set to: 0
 16323                           ;ENC424J600.c: 462: }
 16324                           ;ENC424J600.c: 463: } else if (LED == LEDA) {
 16325                           
 16326                           ; BSR set to: 0
 16327  003DC6  D00F               	goto	l196
 16328  003DC8                     l188:
 16329                           
 16330                           ; BSR set to: 0
 16331                           
 16332                           ; BSR set to: 0
 16333  003DC8  516F               	movf	ethernetController_setLEDStatus@LED& (0+255),w,b
 16334  003DCA  A4D8               	btfss	status,2,c
 16335  003DCC  D00C               	goto	l196
 16336                           
 16337                           ; BSR set to: 0
 16338                           ;ENC424J600.c: 465: if (status == LED_ON) {
 16339  003DCE  516E               	movf	ethernetController_setLEDStatus@status& (0+255),w,b
 16340  003DD0  A4D8               	btfss	status,2,c
 16341  003DD2  D003               	goto	l194
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;ENC424J600.c: 466: data &= ~(0x0f << 4);
 16345  003DD4  0E0F               	movlw	15
 16346  003DD6                     L5:
 16347  003DD6  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16348                           
 16349                           ;ENC424J600.c: 467: } else if (status == LED_OFF) {
 16350  003DD8  D006               	goto	l196
 16351  003DDA                     l194:
 16352                           
 16353                           ; BSR set to: 0
 16354                           
 16355                           ; BSR set to: 0
 16356  003DDA  056E               	decf	ethernetController_setLEDStatus@status& (0+255),w,b
 16357  003DDC  A4D8               	btfss	status,2,c
 16358  003DDE  D003               	goto	l196
 16359                           
 16360                           ; BSR set to: 0
 16361                           ;ENC424J600.c: 469: data &= ~(0x0f << 4);
 16362  003DE0  0E0F               	movlw	15
 16363  003DE2  1770               	andwf	ethernetController_setLEDStatus@data& (0+255),f,b
 16364                           
 16365                           ; BSR set to: 0
 16366                           ;ENC424J600.c: 470: data |= (0x01 << 4);
 16367  003DE4  8970               	bsf	ethernetController_setLEDStatus@data& (0+255),4,b
 16368  003DE6                     l196:
 16369                           
 16370                           ; BSR set to: 0
 16371                           ;ENC424J600.c: 471: }
 16372                           ;ENC424J600.c: 472: }
 16373                           ;ENC424J600.c: 473: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16374                           
 16375                           ; BSR set to: 0
 16376                           
 16377                           ; BSR set to: 0
 16378                           
 16379                           ; BSR set to: 0
 16380                           
 16381                           ; BSR set to: 0
 16382  003DE6  0E70               	movlw	low ethernetController_setLEDStatus@data
 16383  003DE8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16384  003DEA  0E00               	movlw	high ethernetController_setLEDStatus@data
 16385  003DEC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16386  003DEE  0E75               	movlw	117
 16387  003DF0  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16388  003DF4  0012               	return		;funcret
 16389  003DF6                     __end_of_ethernetController_setLEDStatus:
 16390                           	opt stack 0
 16391                           tblptru	equ	0xFF8
 16392                           tblptrh	equ	0xFF7
 16393                           tblptrl	equ	0xFF6
 16394                           tablat	equ	0xFF5
 16395                           prodh	equ	0xFF4
 16396                           prodl	equ	0xFF3
 16397                           intcon	equ	0xFF2
 16398                           intcon3	equ	0xFF0
 16399                           postinc0	equ	0xFEE
 16400                           plusw0	equ	0xFEB
 16401                           fsr0h	equ	0xFEA
 16402                           fsr0l	equ	0xFE9
 16403                           wreg	equ	0xFE8
 16404                           indf1	equ	0xFE7
 16405                           postinc1	equ	0xFE6
 16406                           postdec1	equ	0xFE5
 16407                           plusw1	equ	0xFE3
 16408                           fsr1h	equ	0xFE2
 16409                           fsr1l	equ	0xFE1
 16410                           indf2	equ	0xFDF
 16411                           postinc2	equ	0xFDE
 16412                           postdec2	equ	0xFDD
 16413                           plusw2	equ	0xFDB
 16414                           fsr2h	equ	0xFDA
 16415                           fsr2l	equ	0xFD9
 16416                           status	equ	0xFD8
 16417                           
 16418 ;; *************** function _ethernetController_setLEDConfiguration *****************
 16419 ;; Defined at:
 16420 ;;		line 476 in file "src/enc424j600/ENC424J600.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;  LED             1    wreg     unsigned char 
 16423 ;;  conf            1   14[BANK0 ] unsigned char 
 16424 ;; Auto vars:     Size  Location     Type
 16425 ;;  LED             1   15[BANK0 ] unsigned char 
 16426 ;;  data            1   16[BANK0 ] unsigned char 
 16427 ;; Return value:  Size  Location     Type
 16428 ;;                  1    wreg      void 
 16429 ;; Registers used:
 16430 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16431 ;; Tracked objects:
 16432 ;;		On entry : 0/0
 16433 ;;		On exit  : 0/0
 16434 ;;		Unchanged: 0/0
 16435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16436 ;;      Params:         0       1       0       0       0       0       0       0       0
 16437 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16438 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16439 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16440 ;;Total ram usage:        3 bytes
 16441 ;; Hardware stack levels used:    1
 16442 ;; Hardware stack levels required when called:    7
 16443 ;; This function calls:
 16444 ;;		_ENC424J600_readControlRegisterUnbanked
 16445 ;;		_ENC424J600_writeControlRegisterUnbanked
 16446 ;; This function is called by:
 16447 ;;		_handleStackBackgroundTasks
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           	psect	text62
 16452  00359A                     __ptext62:
 16453                           	opt stack 0
 16454  00359A                     _ethernetController_setLEDConfiguration:
 16455                           	opt stack 22
 16456                           
 16457                           ;incstack = 0
 16458                           ;ethernetController_setLEDConfiguration@LED stored from wreg
 16459  00359A  0100               	movlb	0	; () banked
 16460  00359C  6F6F               	movwf	ethernetController_setLEDConfiguration@LED& (0+255),b
 16461                           
 16462                           ;ENC424J600.c: 477: uint8_t data;
 16463                           ;ENC424J600.c: 478: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16464  00359E  0E70               	movlw	low ethernetController_setLEDConfiguration@data
 16465  0035A0  0100               	movlb	0	; () banked
 16466  0035A2  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16467  0035A4  0E00               	movlw	high ethernetController_setLEDConfiguration@data
 16468  0035A6  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16469  0035A8  0E75               	movlw	117
 16470  0035AA  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16471                           
 16472                           ;ENC424J600.c: 479: if (LED == LEDB) {
 16473  0035AE  0100               	movlb	0	; () banked
 16474  0035B0  056F               	decf	ethernetController_setLEDConfiguration@LED& (0+255),w,b
 16475  0035B2  B4D8               	btfsc	status,2,c
 16476  0035B4  D00B               	goto	l201
 16477  0035B6  D015               	goto	l200
 16478  0035B8                     
 16479                           ; BSR set to: 0
 16480                           ;ENC424J600.c: 484: data &= ~0x0f;
 16481                           
 16482                           ; BSR set to: 0
 16483                           
 16484                           ;ENC424J600.c: 483: case LED_OFF:
 16485                           
 16486                           ; BSR set to: 0
 16487  0035B8  0EF0               	movlw	240
 16488  0035BA  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;ENC424J600.c: 485: data |= 0x01;
 16492  0035BC  8170               	bsf	ethernetController_setLEDConfiguration@data& (0+255),0,b
 16493                           
 16494                           ;ENC424J600.c: 486: break;
 16495  0035BE  D02C               	goto	l212
 16496  0035C0                     
 16497                           ; BSR set to: 0
 16498                           ;ENC424J600.c: 488: data &= ~0x0f;
 16499                           
 16500                           ; BSR set to: 0
 16501  0035C0  0EF0               	movlw	240
 16502  0035C2  D018               	goto	L6
 16503  0035C4                     
 16504                           ; BSR set to: 0
 16505                           ;ENC424J600.c: 491: data &= ~0x0f;
 16506                           
 16507                           ; BSR set to: 0
 16508  0035C4  0EF0               	movlw	240
 16509  0035C6  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16510                           
 16511                           ;ENC424J600.c: 492: data |= 0x06;
 16512  0035C8  0E06               	movlw	6
 16513  0035CA  D019               	goto	L7
 16514  0035CC                     l201:
 16515                           
 16516                           ; BSR set to: 0
 16517                           
 16518                           ; BSR set to: 0
 16519  0035CC  516E               	movf	ethernetController_setLEDConfiguration@conf& (0+255),w,b
 16520                           
 16521                           ; Switch size 1, requested type "space"
 16522                           ; Number of cases is 3, Range of values is 0 to 2
 16523                           ; switch strategies available:
 16524                           ; Name         Instructions Cycles
 16525                           ; simple_byte           10     6 (average)
 16526                           ;	Chosen strategy is simple_byte
 16527  0035CE  0A00               	xorlw	0	; case 0
 16528  0035D0  B4D8               	btfsc	status,2,c
 16529  0035D2  D7F6               	goto	l205
 16530  0035D4  0A01               	xorlw	1	; case 1
 16531  0035D6  B4D8               	btfsc	status,2,c
 16532  0035D8  D7EF               	goto	l202
 16533  0035DA  0A03               	xorlw	3	; case 2
 16534  0035DC  B4D8               	btfsc	status,2,c
 16535  0035DE  D7F2               	goto	l206
 16536  0035E0  D7EB               	goto	l202
 16537  0035E2                     l200:
 16538                           
 16539                           ; BSR set to: 0
 16540                           
 16541                           ; BSR set to: 0
 16542  0035E2  516F               	movf	ethernetController_setLEDConfiguration@LED& (0+255),w,b
 16543  0035E4  B4D8               	btfsc	status,2,c
 16544  0035E6  D00D               	goto	l209
 16545  0035E8  D017               	goto	l212
 16546  0035EA                     
 16547                           ; BSR set to: 0
 16548                           ;ENC424J600.c: 499: data &= ~(0x0f << 4);
 16549                           
 16550                           ; BSR set to: 0
 16551                           
 16552                           ;ENC424J600.c: 498: case LED_OFF:
 16553                           
 16554                           ; BSR set to: 0
 16555  0035EA  0E0F               	movlw	15
 16556  0035EC  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;ENC424J600.c: 500: data |= (0x01 << 4);
 16560  0035EE  8970               	bsf	ethernetController_setLEDConfiguration@data& (0+255),4,b
 16561                           
 16562                           ;ENC424J600.c: 501: break;
 16563  0035F0  D013               	goto	l212
 16564  0035F2                     
 16565                           ; BSR set to: 0
 16566                           ;ENC424J600.c: 503: data &= ~(0x0f << 4);
 16567                           
 16568                           ; BSR set to: 0
 16569  0035F2  0E0F               	movlw	15
 16570  0035F4                     L6:
 16571  0035F4  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16572                           
 16573                           ;ENC424J600.c: 504: break;
 16574  0035F6  D010               	goto	l212
 16575  0035F8                     
 16576                           ; BSR set to: 0
 16577                           ;ENC424J600.c: 506: data &= ~(0x0f << 4);
 16578                           
 16579                           ; BSR set to: 0
 16580  0035F8  0E0F               	movlw	15
 16581  0035FA  1770               	andwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16582                           
 16583                           ;ENC424J600.c: 507: data |= (0x06 << 4);
 16584  0035FC  0E60               	movlw	96
 16585  0035FE                     L7:
 16586  0035FE  1370               	iorwf	ethernetController_setLEDConfiguration@data& (0+255),f,b
 16587                           
 16588                           ; BSR set to: 0
 16589                           ;ENC424J600.c: 509: }
 16590                           
 16591                           ;ENC424J600.c: 508: break;
 16592  003600  D00B               	goto	l212
 16593  003602                     l209:
 16594                           
 16595                           ; BSR set to: 0
 16596                           
 16597                           ; BSR set to: 0
 16598  003602  516E               	movf	ethernetController_setLEDConfiguration@conf& (0+255),w,b
 16599                           
 16600                           ; Switch size 1, requested type "space"
 16601                           ; Number of cases is 3, Range of values is 0 to 2
 16602                           ; switch strategies available:
 16603                           ; Name         Instructions Cycles
 16604                           ; simple_byte           10     6 (average)
 16605                           ;	Chosen strategy is simple_byte
 16606  003604  0A00               	xorlw	0	; case 0
 16607  003606  B4D8               	btfsc	status,2,c
 16608  003608  D7F4               	goto	l213
 16609  00360A  0A01               	xorlw	1	; case 1
 16610  00360C  B4D8               	btfsc	status,2,c
 16611  00360E  D7ED               	goto	l210
 16612  003610  0A03               	xorlw	3	; case 2
 16613  003612  B4D8               	btfsc	status,2,c
 16614  003614  D7F1               	goto	l214
 16615  003616  D7E9               	goto	l210
 16616  003618                     l212:
 16617                           
 16618                           ; BSR set to: 0
 16619                           ;ENC424J600.c: 510: }
 16620                           ;ENC424J600.c: 511: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16621                           
 16622                           ; BSR set to: 0
 16623                           
 16624                           ; BSR set to: 0
 16625                           
 16626                           ; BSR set to: 0
 16627  003618  0E70               	movlw	low ethernetController_setLEDConfiguration@data
 16628  00361A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16629  00361C  0E00               	movlw	high ethernetController_setLEDConfiguration@data
 16630  00361E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16631  003620  0E75               	movlw	117
 16632  003622  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16633  003626  0012               	return		;funcret
 16634  003628                     __end_of_ethernetController_setLEDConfiguration:
 16635                           	opt stack 0
 16636                           tblptru	equ	0xFF8
 16637                           tblptrh	equ	0xFF7
 16638                           tblptrl	equ	0xFF6
 16639                           tablat	equ	0xFF5
 16640                           prodh	equ	0xFF4
 16641                           prodl	equ	0xFF3
 16642                           intcon	equ	0xFF2
 16643                           intcon3	equ	0xFF0
 16644                           postinc0	equ	0xFEE
 16645                           plusw0	equ	0xFEB
 16646                           fsr0h	equ	0xFEA
 16647                           fsr0l	equ	0xFE9
 16648                           wreg	equ	0xFE8
 16649                           indf1	equ	0xFE7
 16650                           postinc1	equ	0xFE6
 16651                           postdec1	equ	0xFE5
 16652                           plusw1	equ	0xFE3
 16653                           fsr1h	equ	0xFE2
 16654                           fsr1l	equ	0xFE1
 16655                           indf2	equ	0xFDF
 16656                           postinc2	equ	0xFDE
 16657                           postdec2	equ	0xFDD
 16658                           plusw2	equ	0xFDB
 16659                           fsr2h	equ	0xFDA
 16660                           fsr2l	equ	0xFD9
 16661                           status	equ	0xFD8
 16662                           
 16663 ;; *************** function _ethernetController_pollInterruptFlags *****************
 16664 ;; Defined at:
 16665 ;;		line 325 in file "src/enc424j600/ENC424J600.c"
 16666 ;; Parameters:    Size  Location     Type
 16667 ;;		None
 16668 ;; Auto vars:     Size  Location     Type
 16669 ;;  reg             2   29[BANK0 ] unsigned int 
 16670 ;;  flags           2   27[BANK0 ] struct interruptFlags
 16671 ;; Return value:  Size  Location     Type
 16672 ;;                  2   24[BANK0 ] struct interruptFlags
 16673 ;; Registers used:
 16674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16675 ;; Tracked objects:
 16676 ;;		On entry : 0/0
 16677 ;;		On exit  : 0/0
 16678 ;;		Unchanged: 0/0
 16679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16680 ;;      Params:         0       2       0       0       0       0       0       0       0
 16681 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16682 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16683 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16684 ;;Total ram usage:        7 bytes
 16685 ;; Hardware stack levels used:    1
 16686 ;; Hardware stack levels required when called:    8
 16687 ;; This function calls:
 16688 ;;		_ENC424J600_getInterruptFlags
 16689 ;; This function is called by:
 16690 ;;		_handleStackBackgroundTasks
 16691 ;; This function uses a non-reentrant model
 16692 ;;
 16693                           
 16694                           	psect	text63
 16695  00299A                     __ptext63:
 16696                           	opt stack 0
 16697  00299A                     _ethernetController_pollInterruptFlags:
 16698                           	opt stack 21
 16699                           
 16700                           ;ENC424J600.c: 326: interruptFlags_t flags;
 16701                           ;ENC424J600.c: 327: uint16_t reg = ENC424J600_getInterruptFlags();
 16702                           
 16703                           ;incstack = 0
 16704  00299A  ECF1  F01F         	call	_ENC424J600_getInterruptFlags	;wreg free
 16705  00299E  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 16706  0029A2  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 16707                           
 16708                           ;ENC424J600.c: 328: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 16709  0029A6  0100               	movlb	0	; () banked
 16710  0029A8  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 16711  0029AA  D003               	goto	u10110
 16712  0029AC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16713  0029AE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16714  0029B0  D002               	goto	u10128
 16715  0029B2                     u10110:
 16716  0029B2  0100               	movlb	0	; () banked
 16717  0029B4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16718  0029B6                     u10128:
 16719  0029B6  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16720  0029B8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16721  0029BA  0BFE               	andlw	-2
 16722  0029BC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16723  0029BE  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16724                           
 16725                           ; BSR set to: 0
 16726                           ;ENC424J600.c: 329: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 16727  0029C0  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 16728  0029C2  D003               	goto	u10130
 16729  0029C4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16730  0029C6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16731  0029C8  D002               	goto	u10148
 16732  0029CA                     u10130:
 16733  0029CA  0100               	movlb	0	; () banked
 16734  0029CC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16735  0029CE                     u10148:
 16736  0029CE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16737  0029D0  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16738  0029D2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16739  0029D4  0BFD               	andlw	-3
 16740  0029D6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16741  0029D8  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16742                           
 16743                           ; BSR set to: 0
 16744                           ;ENC424J600.c: 330: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 16745  0029DA  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 16746  0029DC  D003               	goto	u10150
 16747  0029DE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16748  0029E0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16749  0029E2  D002               	goto	u10168
 16750  0029E4                     u10150:
 16751  0029E4  0100               	movlb	0	; () banked
 16752  0029E6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16753  0029E8                     u10168:
 16754  0029E8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16755  0029EA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16756  0029EC  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16757  0029EE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16758  0029F0  0BFB               	andlw	-5
 16759  0029F2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16760  0029F4  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;ENC424J600.c: 331: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 16764  0029F6  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 16765  0029F8  D003               	goto	u10170
 16766  0029FA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16767  0029FC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16768  0029FE  D002               	goto	u10188
 16769  002A00                     u10170:
 16770  002A00  0100               	movlb	0	; () banked
 16771  002A02  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16772  002A04                     u10188:
 16773  002A04  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16774  002A06  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16775  002A08  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16776  002A0A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16777  002A0C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16778  002A0E  0BF7               	andlw	-9
 16779  002A10  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16780  002A12  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16781                           
 16782                           ; BSR set to: 0
 16783                           ;ENC424J600.c: 333: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 16784  002A14  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 16785  002A16  D003               	goto	u10190
 16786  002A18  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16787  002A1A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16788  002A1C  D002               	goto	u10208
 16789  002A1E                     u10190:
 16790  002A1E  0100               	movlb	0	; () banked
 16791  002A20  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16792  002A22                     u10208:
 16793  002A22  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16794  002A24  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16795  002A26  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16796  002A28  0BEF               	andlw	-17
 16797  002A2A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16798  002A2C  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16799                           
 16800                           ; BSR set to: 0
 16801                           ;ENC424J600.c: 334: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 16802  002A2E  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 16803  002A30  D003               	goto	u10210
 16804  002A32  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16805  002A34  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16806  002A36  D002               	goto	u10228
 16807  002A38                     u10210:
 16808  002A38  0100               	movlb	0	; () banked
 16809  002A3A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16810  002A3C                     u10228:
 16811  002A3C  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16812  002A3E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16813  002A40  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16814  002A42  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16815  002A44  0BDF               	andlw	-33
 16816  002A46  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16817  002A48  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16818                           
 16819                           ; BSR set to: 0
 16820                           ;ENC424J600.c: 336: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 16821  002A4A  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 16822  002A4C  D003               	goto	u10230
 16823  002A4E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16824  002A50  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16825  002A52  D002               	goto	u10248
 16826  002A54                     u10230:
 16827  002A54  0100               	movlb	0	; () banked
 16828  002A56  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16829  002A58                     u10248:
 16830  002A58  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16831  002A5A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16832  002A5C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16833  002A5E  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16834  002A60  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16835  002A62  0BBF               	andlw	-65
 16836  002A64  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16837  002A66  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;ENC424J600.c: 337: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 16841  002A68  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 16842  002A6A  D003               	goto	u10250
 16843  002A6C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16844  002A6E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16845  002A70  D002               	goto	u10268
 16846  002A72                     u10250:
 16847  002A72  0100               	movlb	0	; () banked
 16848  002A74  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16849  002A76                     u10268:
 16850  002A76  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16851  002A78  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16852  002A7A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16853  002A7C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16854  002A7E  0B7F               	andlw	-129
 16855  002A80  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16856  002A82  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16857                           
 16858                           ; BSR set to: 0
 16859                           ;ENC424J600.c: 338: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 16860  002A84  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 16861  002A86  D003               	goto	u10270
 16862  002A88  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16863  002A8A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16864  002A8C  D002               	goto	u10288
 16865  002A8E                     u10270:
 16866  002A8E  0100               	movlb	0	; () banked
 16867  002A90  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16868  002A92                     u10288:
 16869  002A92  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16870  002A94  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16871  002A96  0BFE               	andlw	-2
 16872  002A98  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16873  002A9A  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;ENC424J600.c: 339: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 16877  002A9C  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 16878  002A9E  D003               	goto	u10290
 16879  002AA0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16880  002AA2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16881  002AA4  D002               	goto	u10308
 16882  002AA6                     u10290:
 16883  002AA6  0100               	movlb	0	; () banked
 16884  002AA8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16885  002AAA                     u10308:
 16886  002AAA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16887  002AAC  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16888  002AAE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16889  002AB0  0BFD               	andlw	-3
 16890  002AB2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16891  002AB4  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16892                           
 16893                           ; BSR set to: 0
 16894                           ;ENC424J600.c: 340: return flags;
 16895  002AB6  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 16896  002ABA  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 16897  002ABE  0012               	return	
 16898  002AC0                     __end_of_ethernetController_pollInterruptFlags:
 16899                           	opt stack 0
 16900                           tblptru	equ	0xFF8
 16901                           tblptrh	equ	0xFF7
 16902                           tblptrl	equ	0xFF6
 16903                           tablat	equ	0xFF5
 16904                           prodh	equ	0xFF4
 16905                           prodl	equ	0xFF3
 16906                           intcon	equ	0xFF2
 16907                           intcon3	equ	0xFF0
 16908                           postinc0	equ	0xFEE
 16909                           plusw0	equ	0xFEB
 16910                           fsr0h	equ	0xFEA
 16911                           fsr0l	equ	0xFE9
 16912                           wreg	equ	0xFE8
 16913                           indf1	equ	0xFE7
 16914                           postinc1	equ	0xFE6
 16915                           postdec1	equ	0xFE5
 16916                           plusw1	equ	0xFE3
 16917                           fsr1h	equ	0xFE2
 16918                           fsr1l	equ	0xFE1
 16919                           indf2	equ	0xFDF
 16920                           postinc2	equ	0xFDE
 16921                           postdec2	equ	0xFDD
 16922                           plusw2	equ	0xFDB
 16923                           fsr2h	equ	0xFDA
 16924                           fsr2l	equ	0xFD9
 16925                           status	equ	0xFD8
 16926                           
 16927 ;; *************** function _ENC424J600_getInterruptFlags *****************
 16928 ;; Defined at:
 16929 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
 16930 ;; Parameters:    Size  Location     Type
 16931 ;;		None
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;  high            1   23[BANK0 ] unsigned char 
 16934 ;;  low             1   22[BANK0 ] unsigned char 
 16935 ;; Return value:  Size  Location     Type
 16936 ;;                  2   14[BANK0 ] unsigned int 
 16937 ;; Registers used:
 16938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16939 ;; Tracked objects:
 16940 ;;		On entry : 0/0
 16941 ;;		On exit  : 0/0
 16942 ;;		Unchanged: 0/0
 16943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16944 ;;      Params:         0       2       0       0       0       0       0       0       0
 16945 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16946 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16947 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16948 ;;Total ram usage:       10 bytes
 16949 ;; Hardware stack levels used:    1
 16950 ;; Hardware stack levels required when called:    7
 16951 ;; This function calls:
 16952 ;;		_ENC424J600_readControlRegisterUnbanked
 16953 ;; This function is called by:
 16954 ;;		_ethernetController_pollInterruptFlags
 16955 ;; This function uses a non-reentrant model
 16956 ;;
 16957                           
 16958                           	psect	text64
 16959  003FE2                     __ptext64:
 16960                           	opt stack 0
 16961  003FE2                     _ENC424J600_getInterruptFlags:
 16962                           	opt stack 21
 16963                           
 16964                           ;ENC424J600.c: 720: uint8_t low, high;
 16965                           ;ENC424J600.c: 721: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 16966                           
 16967                           ; BSR set to: 0
 16968                           ;incstack = 0
 16969  003FE2  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 16970  003FE4  0100               	movlb	0	; () banked
 16971  003FE6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16972  003FE8  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 16973  003FEA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16974  003FEC  0E1D               	movlw	29
 16975  003FEE  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16976                           
 16977                           ;ENC424J600.c: 722: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 16978  003FF2  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 16979  003FF4  0100               	movlb	0	; () banked
 16980  003FF6  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16981  003FF8  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 16982  003FFA  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16983  003FFC  0E1C               	movlw	28
 16984  003FFE  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16985                           
 16986                           ;ENC424J600.c: 723: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 16987  004002  0E00               	movlw	0
 16988  004004  0100               	movlb	0	; () banked
 16989  004006  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 16990  004008  0EFF               	movlw	255
 16991  00400A  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 16992  00400C  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 16993  00400E  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 16994  004010  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 16995  004012  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 16996  004014  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 16997  004016  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 16998  004018  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 16999  00401A  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 17000  00401C  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 17001  00401E  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 17002  004020  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 17003  004022  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 17004  004024  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 17005  004026  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 17006  004028  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 17007  00402A  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 17008  00402C  0012               	return	
 17009  00402E                     __end_of_ENC424J600_getInterruptFlags:
 17010                           	opt stack 0
 17011                           tblptru	equ	0xFF8
 17012                           tblptrh	equ	0xFF7
 17013                           tblptrl	equ	0xFF6
 17014                           tablat	equ	0xFF5
 17015                           prodh	equ	0xFF4
 17016                           prodl	equ	0xFF3
 17017                           intcon	equ	0xFF2
 17018                           intcon3	equ	0xFF0
 17019                           postinc0	equ	0xFEE
 17020                           plusw0	equ	0xFEB
 17021                           fsr0h	equ	0xFEA
 17022                           fsr0l	equ	0xFE9
 17023                           wreg	equ	0xFE8
 17024                           indf1	equ	0xFE7
 17025                           postinc1	equ	0xFE6
 17026                           postdec1	equ	0xFE5
 17027                           plusw1	equ	0xFE3
 17028                           fsr1h	equ	0xFE2
 17029                           fsr1l	equ	0xFE1
 17030                           indf2	equ	0xFDF
 17031                           postinc2	equ	0xFDE
 17032                           postdec2	equ	0xFDD
 17033                           plusw2	equ	0xFDB
 17034                           fsr2h	equ	0xFDA
 17035                           fsr2l	equ	0xFD9
 17036                           status	equ	0xFD8
 17037                           
 17038 ;; *************** function _ethernetController_newPacketAvailable *****************
 17039 ;; Defined at:
 17040 ;;		line 423 in file "src/enc424j600/ENC424J600.c"
 17041 ;; Parameters:    Size  Location     Type
 17042 ;;		None
 17043 ;; Auto vars:     Size  Location     Type
 17044 ;;		None
 17045 ;; Return value:  Size  Location     Type
 17046 ;;                  1    wreg      unsigned char 
 17047 ;; Registers used:
 17048 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17049 ;; Tracked objects:
 17050 ;;		On entry : 0/0
 17051 ;;		On exit  : 0/0
 17052 ;;		Unchanged: 0/0
 17053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17054 ;;      Params:         0       0       0       0       0       0       0       0       0
 17055 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17056 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17057 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17058 ;;Total ram usage:        0 bytes
 17059 ;; Hardware stack levels used:    1
 17060 ;; Hardware stack levels required when called:    8
 17061 ;; This function calls:
 17062 ;;		_ENC424J600_getPacketCount
 17063 ;; This function is called by:
 17064 ;;		_handleStackBackgroundTasks
 17065 ;; This function uses a non-reentrant model
 17066 ;;
 17067                           
 17068                           	psect	text65
 17069  00461C                     __ptext65:
 17070                           	opt stack 0
 17071  00461C                     _ethernetController_newPacketAvailable:
 17072                           	opt stack 21
 17073                           
 17074                           ;ENC424J600.c: 424: return (unsigned) (ENC424J600_getPacketCount() != 0);
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;incstack = 0
 17078  00461C  ECEC  F022         	call	_ENC424J600_getPacketCount	;wreg free
 17079  004620  0900               	iorlw	0
 17080  004622  B4D8               	btfsc	status,2,c
 17081  004624  D002               	goto	u10310
 17082  004626  0E01               	movlw	1
 17083  004628  0012               	return	
 17084  00462A                     u10310:
 17085  00462A  0E00               	movlw	0
 17086  00462C  0012               	return	
 17087  00462E                     __end_of_ethernetController_newPacketAvailable:
 17088                           	opt stack 0
 17089                           tblptru	equ	0xFF8
 17090                           tblptrh	equ	0xFF7
 17091                           tblptrl	equ	0xFF6
 17092                           tablat	equ	0xFF5
 17093                           prodh	equ	0xFF4
 17094                           prodl	equ	0xFF3
 17095                           intcon	equ	0xFF2
 17096                           intcon3	equ	0xFF0
 17097                           postinc0	equ	0xFEE
 17098                           plusw0	equ	0xFEB
 17099                           fsr0h	equ	0xFEA
 17100                           fsr0l	equ	0xFE9
 17101                           wreg	equ	0xFE8
 17102                           indf1	equ	0xFE7
 17103                           postinc1	equ	0xFE6
 17104                           postdec1	equ	0xFE5
 17105                           plusw1	equ	0xFE3
 17106                           fsr1h	equ	0xFE2
 17107                           fsr1l	equ	0xFE1
 17108                           indf2	equ	0xFDF
 17109                           postinc2	equ	0xFDE
 17110                           postdec2	equ	0xFDD
 17111                           plusw2	equ	0xFDB
 17112                           fsr2h	equ	0xFDA
 17113                           fsr2l	equ	0xFD9
 17114                           status	equ	0xFD8
 17115                           
 17116 ;; *************** function _ethernetController_clearInterruptFlag *****************
 17117 ;; Defined at:
 17118 ;;		line 343 in file "src/enc424j600/ENC424J600.c"
 17119 ;; Parameters:    Size  Location     Type
 17120 ;;  flag            1    wreg     unsigned char 
 17121 ;; Auto vars:     Size  Location     Type
 17122 ;;  flag            1   18[BANK0 ] unsigned char 
 17123 ;; Return value:  Size  Location     Type
 17124 ;;                  1    wreg      void 
 17125 ;; Registers used:
 17126 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17127 ;; Tracked objects:
 17128 ;;		On entry : 0/0
 17129 ;;		On exit  : 0/0
 17130 ;;		Unchanged: 0/0
 17131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17132 ;;      Params:         0       0       0       0       0       0       0       0       0
 17133 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17134 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17135 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17136 ;;Total ram usage:        1 bytes
 17137 ;; Hardware stack levels used:    1
 17138 ;; Hardware stack levels required when called:    8
 17139 ;; This function calls:
 17140 ;;		_ENC424J600_clearInterruptFlag
 17141 ;; This function is called by:
 17142 ;;		_handleStackBackgroundTasks
 17143 ;; This function uses a non-reentrant model
 17144 ;;
 17145                           
 17146                           	psect	text66
 17147  00464C                     __ptext66:
 17148                           	opt stack 0
 17149  00464C                     _ethernetController_clearInterruptFlag:
 17150                           	opt stack 21
 17151                           
 17152                           ;incstack = 0
 17153                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 17154  00464C  0100               	movlb	0	; () banked
 17155  00464E  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 17156                           
 17157                           ;ENC424J600.c: 344: ENC424J600_clearInterruptFlag(flag);
 17158  004650  0100               	movlb	0	; () banked
 17159  004652  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 17160  004654  EC59  F01B         	call	_ENC424J600_clearInterruptFlag
 17161  004658  0012               	return		;funcret
 17162  00465A                     __end_of_ethernetController_clearInterruptFlag:
 17163                           	opt stack 0
 17164                           tblptru	equ	0xFF8
 17165                           tblptrh	equ	0xFF7
 17166                           tblptrl	equ	0xFF6
 17167                           tablat	equ	0xFF5
 17168                           prodh	equ	0xFF4
 17169                           prodl	equ	0xFF3
 17170                           intcon	equ	0xFF2
 17171                           intcon3	equ	0xFF0
 17172                           postinc0	equ	0xFEE
 17173                           plusw0	equ	0xFEB
 17174                           fsr0h	equ	0xFEA
 17175                           fsr0l	equ	0xFE9
 17176                           wreg	equ	0xFE8
 17177                           indf1	equ	0xFE7
 17178                           postinc1	equ	0xFE6
 17179                           postdec1	equ	0xFE5
 17180                           plusw1	equ	0xFE3
 17181                           fsr1h	equ	0xFE2
 17182                           fsr1l	equ	0xFE1
 17183                           indf2	equ	0xFDF
 17184                           postinc2	equ	0xFDE
 17185                           postdec2	equ	0xFDD
 17186                           plusw2	equ	0xFDB
 17187                           fsr2h	equ	0xFDA
 17188                           fsr2l	equ	0xFD9
 17189                           status	equ	0xFD8
 17190                           
 17191 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 17192 ;; Defined at:
 17193 ;;		line 726 in file "src/enc424j600/ENC424J600.c"
 17194 ;; Parameters:    Size  Location     Type
 17195 ;;  flag            1    wreg     unsigned char 
 17196 ;; Auto vars:     Size  Location     Type
 17197 ;;  flag            1   16[BANK0 ] unsigned char 
 17198 ;;  temp            1   17[BANK0 ] unsigned char 
 17199 ;; Return value:  Size  Location     Type
 17200 ;;                  1    wreg      void 
 17201 ;; Registers used:
 17202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17203 ;; Tracked objects:
 17204 ;;		On entry : 0/0
 17205 ;;		On exit  : 0/0
 17206 ;;		Unchanged: 0/0
 17207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17208 ;;      Params:         0       0       0       0       0       0       0       0       0
 17209 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17210 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17211 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17212 ;;Total ram usage:        4 bytes
 17213 ;; Hardware stack levels used:    1
 17214 ;; Hardware stack levels required when called:    7
 17215 ;; This function calls:
 17216 ;;		_ENC424J600_readControlRegisterUnbanked
 17217 ;;		_ENC424J600_writeControlRegisterUnbanked
 17218 ;; This function is called by:
 17219 ;;		_ethernetController_clearInterruptFlag
 17220 ;; This function uses a non-reentrant model
 17221 ;;
 17222                           
 17223                           	psect	text67
 17224  0036B2                     __ptext67:
 17225                           	opt stack 0
 17226  0036B2                     _ENC424J600_clearInterruptFlag:
 17227                           	opt stack 21
 17228                           
 17229                           ;incstack = 0
 17230                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 17231  0036B2  0100               	movlb	0	; () banked
 17232  0036B4  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17233                           
 17234                           ;ENC424J600.c: 727: uint8_t temp;
 17235                           ;ENC424J600.c: 728: if (flag < 8) {
 17236  0036B6  0E08               	movlw	8
 17237  0036B8  0100               	movlb	0	; () banked
 17238  0036BA  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17239  0036BC  D01E               	goto	l304
 17240                           
 17241                           ; BSR set to: 0
 17242                           ;ENC424J600.c: 729: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 17243  0036BE  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17244  0036C0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17245  0036C2  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17246  0036C4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17247  0036C6  0E1C               	movlw	28
 17248  0036C8  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17249                           
 17250                           ;ENC424J600.c: 730: temp &= ~(1 << flag);
 17251  0036CC  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17252  0036D0  0E01               	movlw	1
 17253  0036D2  0100               	movlb	0	; () banked
 17254  0036D4  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17255  0036D6  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17256  0036D8  D002               	goto	u9824
 17257  0036DA                     u9825:
 17258  0036DA  90D8               	bcf	status,0,c
 17259  0036DC  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17260  0036DE                     u9824:
 17261  0036DE  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17262  0036E0  D7FC               	goto	u9825
 17263  0036E2  0100               	movlb	0	; () banked
 17264  0036E4  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17265  0036E6  0AFF               	xorlw	255
 17266  0036E8  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;ENC424J600.c: 731: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 17270  0036EA  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17271  0036EC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17272  0036EE  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17273  0036F0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17274  0036F2  0E1C               	movlw	28
 17275  0036F4  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17276                           
 17277                           ;ENC424J600.c: 732: } else {
 17278  0036F8  0012               	return	
 17279  0036FA                     l304:
 17280                           
 17281                           ;ENC424J600.c: 733: flag -= 8;
 17282  0036FA  0E08               	movlw	8
 17283  0036FC  0100               	movlb	0	; () banked
 17284  0036FE  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;ENC424J600.c: 734: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 17288  003700  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17289  003702  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17290  003704  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17291  003706  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17292  003708  0E1D               	movlw	29
 17293  00370A  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17294                           
 17295                           ;ENC424J600.c: 735: temp &= ~(1 << flag);
 17296  00370E  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17297  003712  0E01               	movlw	1
 17298  003714  0100               	movlb	0	; () banked
 17299  003716  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17300  003718  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17301  00371A  D002               	goto	u9834
 17302  00371C                     u9835:
 17303  00371C  90D8               	bcf	status,0,c
 17304  00371E  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17305  003720                     u9834:
 17306  003720  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17307  003722  D7FC               	goto	u9835
 17308  003724  0100               	movlb	0	; () banked
 17309  003726  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17310  003728  0AFF               	xorlw	255
 17311  00372A  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17312                           
 17313                           ;ENC424J600.c: 736: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 17314  00372C  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17315  00372E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17316  003730  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17317  003732  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17318  003734  0E1D               	movlw	29
 17319  003736  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17320  00373A  0012               	return	
 17321  00373C                     __end_of_ENC424J600_clearInterruptFlag:
 17322                           	opt stack 0
 17323                           tblptru	equ	0xFF8
 17324                           tblptrh	equ	0xFF7
 17325                           tblptrl	equ	0xFF6
 17326                           tablat	equ	0xFF5
 17327                           prodh	equ	0xFF4
 17328                           prodl	equ	0xFF3
 17329                           intcon	equ	0xFF2
 17330                           intcon3	equ	0xFF0
 17331                           postinc0	equ	0xFEE
 17332                           plusw0	equ	0xFEB
 17333                           fsr0h	equ	0xFEA
 17334                           fsr0l	equ	0xFE9
 17335                           wreg	equ	0xFE8
 17336                           indf1	equ	0xFE7
 17337                           postinc1	equ	0xFE6
 17338                           postdec1	equ	0xFE5
 17339                           plusw1	equ	0xFE3
 17340                           fsr1h	equ	0xFE2
 17341                           fsr1l	equ	0xFE1
 17342                           indf2	equ	0xFDF
 17343                           postinc2	equ	0xFDE
 17344                           postdec2	equ	0xFDD
 17345                           plusw2	equ	0xFDB
 17346                           fsr2h	equ	0xFDA
 17347                           fsr2l	equ	0xFD9
 17348                           status	equ	0xFD8
 17349                           
 17350 ;; *************** function _ethernetController_init *****************
 17351 ;; Defined at:
 17352 ;;		line 30 in file "src/enc424j600/ENC424J600.c"
 17353 ;; Parameters:    Size  Location     Type
 17354 ;;		None
 17355 ;; Auto vars:     Size  Location     Type
 17356 ;;  err             3   73[BANK0 ] struct error
 17357 ;; Return value:  Size  Location     Type
 17358 ;;                  3   70[BANK0 ] struct error
 17359 ;; Registers used:
 17360 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17361 ;; Tracked objects:
 17362 ;;		On entry : 0/0
 17363 ;;		On exit  : 0/0
 17364 ;;		Unchanged: 0/0
 17365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17366 ;;      Params:         0       3       0       0       0       0       0       0       0
 17367 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17368 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17369 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17370 ;;Total ram usage:        6 bytes
 17371 ;; Hardware stack levels used:    1
 17372 ;; Hardware stack levels required when called:    8
 17373 ;; This function calls:
 17374 ;;		_ENC424J600_enableAutoMACInsertion
 17375 ;;		_ENC424J600_enableReception
 17376 ;;		_ENC424J600_initSPI
 17377 ;;		_ENC424J600_setNextPacketPointer
 17378 ;;		_ENC424J600_setRXBufferStartAddress
 17379 ;;		_ENC424J600_setRXTailPointer
 17380 ;;		_ethernetController_checkDeviceId
 17381 ;;		_ethernetController_softReset
 17382 ;; This function is called by:
 17383 ;;		_main
 17384 ;; This function uses a non-reentrant model
 17385 ;;
 17386                           
 17387                           	psect	text68
 17388  003B1E                     __ptext68:
 17389                           	opt stack 0
 17390  003B1E                     _ethernetController_init:
 17391                           	opt stack 22
 17392                           
 17393                           ;ENC424J600.c: 31: error_t err;
 17394                           ;ENC424J600.c: 32: ENC424J600_initSPI();
 17395                           
 17396                           ;incstack = 0
 17397  003B1E  ECD1  F022         	call	_ENC424J600_initSPI	;wreg free
 17398                           
 17399                           ;ENC424J600.c: 33: err = ethernetController_softReset();
 17400  003B22  EC9A  F013         	call	_ethernetController_softReset	;wreg free
 17401  003B26  C09A  F0A9         	movff	?_ethernetController_softReset,ethernetController_init@err
 17402  003B2A  C09B  F0AA         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 17403  003B2E  C09C  F0AB         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 17404                           
 17405                           ;ENC424J600.c: 36: }
 17406                           ;ENC424J600.c: 37: err = ethernetController_checkDeviceId();
 17407  003B32  ECCA  F01F         	call	_ethernetController_checkDeviceId	;wreg free
 17408  003B36  C06E  F0A9         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 17409  003B3A  C06F  F0AA         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 17410  003B3E  C070  F0AB         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 17411                           
 17412                           ;ENC424J600.c: 40: }
 17413                           ;ENC424J600.c: 59: ENC424J600_setRXBufferStartAddress(0x3000);
 17414  003B42  0E30               	movlw	48
 17415  003B44  0100               	movlb	0	; () banked
 17416  003B46  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 17417  003B48  0E00               	movlw	0
 17418  003B4A  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 17419  003B4C  ECE6  F021         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 17420                           
 17421                           ;ENC424J600.c: 60: ENC424J600_setNextPacketPointer(0x3000);
 17422  003B50  0E30               	movlw	48
 17423  003B52  0100               	movlb	0	; () banked
 17424  003B54  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 17425  003B56  0E00               	movlw	0
 17426  003B58  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 17427  003B5A  EC32  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
 17428                           
 17429                           ;ENC424J600.c: 61: ENC424J600_setRXTailPointer(0x5FFE);
 17430  003B5E  0E5F               	movlw	95
 17431  003B60  0100               	movlb	0	; () banked
 17432  003B62  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17433  003B64  0EFE               	movlw	254
 17434  003B66  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17435  003B68  ECD1  F021         	call	_ENC424J600_setRXTailPointer	;wreg free
 17436                           
 17437                           ;ENC424J600.c: 63: ENC424J600_enableReception();
 17438  003B6C  EC37  F023         	call	_ENC424J600_enableReception	;wreg free
 17439                           
 17440                           ;ENC424J600.c: 65: ENC424J600_enableAutoMACInsertion();
 17441  003B70  EC23  F022         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 17442                           
 17443                           ;ENC424J600.c: 67: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17444  003B74  0E01               	movlw	1
 17445  003B76  0100               	movlb	0	; () banked
 17446  003B78  6FA9               	movwf	ethernetController_init@err& (0+255),b
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;ENC424J600.c: 68: err.code = (uint16_t)0;
 17450  003B7A  0E00               	movlw	0
 17451  003B7C  6FAB               	movwf	(ethernetController_init@err+2)& (0+255),b
 17452  003B7E  0E00               	movlw	0
 17453  003B80  6FAA               	movwf	(ethernetController_init@err+1)& (0+255),b
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;ENC424J600.c: 69: return err;
 17457  003B82  C0A9  F0A6         	movff	ethernetController_init@err,?_ethernetController_init
 17458  003B86  C0AA  F0A7         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17459  003B8A  C0AB  F0A8         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17460  003B8E  0012               	return	
 17461  003B90                     __end_of_ethernetController_init:
 17462                           	opt stack 0
 17463                           tblptru	equ	0xFF8
 17464                           tblptrh	equ	0xFF7
 17465                           tblptrl	equ	0xFF6
 17466                           tablat	equ	0xFF5
 17467                           prodh	equ	0xFF4
 17468                           prodl	equ	0xFF3
 17469                           intcon	equ	0xFF2
 17470                           intcon3	equ	0xFF0
 17471                           postinc0	equ	0xFEE
 17472                           plusw0	equ	0xFEB
 17473                           fsr0h	equ	0xFEA
 17474                           fsr0l	equ	0xFE9
 17475                           wreg	equ	0xFE8
 17476                           indf1	equ	0xFE7
 17477                           postinc1	equ	0xFE6
 17478                           postdec1	equ	0xFE5
 17479                           plusw1	equ	0xFE3
 17480                           fsr1h	equ	0xFE2
 17481                           fsr1l	equ	0xFE1
 17482                           indf2	equ	0xFDF
 17483                           postinc2	equ	0xFDE
 17484                           postdec2	equ	0xFDD
 17485                           plusw2	equ	0xFDB
 17486                           fsr2h	equ	0xFDA
 17487                           fsr2l	equ	0xFD9
 17488                           status	equ	0xFD8
 17489                           
 17490 ;; *************** function _ethernetController_softReset *****************
 17491 ;; Defined at:
 17492 ;;		line 72 in file "src/enc424j600/ENC424J600.c"
 17493 ;; Parameters:    Size  Location     Type
 17494 ;;		None
 17495 ;; Auto vars:     Size  Location     Type
 17496 ;;  err             3   67[BANK0 ] struct error
 17497 ;;  receivedData    2   65[BANK0 ] unsigned char [2]
 17498 ;;  dataToSend      2   63[BANK0 ] unsigned char [2]
 17499 ;;  comFailCount    1   62[BANK0 ] unsigned char 
 17500 ;; Return value:  Size  Location     Type
 17501 ;;                  3   58[BANK0 ] struct error
 17502 ;; Registers used:
 17503 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17504 ;; Tracked objects:
 17505 ;;		On entry : 0/0
 17506 ;;		On exit  : 0/0
 17507 ;;		Unchanged: 0/0
 17508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17509 ;;      Params:         0       3       0       0       0       0       0       0       0
 17510 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17511 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17512 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17513 ;;Total ram usage:       12 bytes
 17514 ;; Hardware stack levels used:    1
 17515 ;; Hardware stack levels required when called:    7
 17516 ;; This function calls:
 17517 ;;		_ENC424J600_readControlRegisterUnbanked
 17518 ;;		_ENC424J600_writeControlRegisterUnbanked
 17519 ;;		_ENC424J600_writeSingleByte
 17520 ;;		_UARTTransmitText
 17521 ;; This function is called by:
 17522 ;;		_ethernetController_init
 17523 ;; This function uses a non-reentrant model
 17524 ;;
 17525                           
 17526                           	psect	text69
 17527  002734                     __ptext69:
 17528                           	opt stack 0
 17529  002734                     _ethernetController_softReset:
 17530                           	opt stack 22
 17531                           
 17532                           ;ENC424J600.c: 90: uint8_t comFailCount = 0;
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;incstack = 0
 17536  002734  0E00               	movlw	0
 17537  002736  0100               	movlb	0	; () banked
 17538  002738  6F9E               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;ENC424J600.c: 91: uint8_t dataToSend[2] = {0x12, 0x34};
 17542  00273A  C04D  F09F         	movff	ethernetController_softReset@F5823,ethernetController_softReset@dataToSend
 17543  00273E  C04E  F0A0         	movff	ethernetController_softReset@F5823+1,ethernetController_softReset@dataToSend+1
 17544                           
 17545                           ; BSR set to: 0
 17546                           ;ENC424J600.c: 92: uint8_t receivedData[2] = {0, 0};
 17547  002742  C043  F0A1         	movff	ethernetController_softReset@F5825,ethernetController_softReset@receivedData
 17548  002746  C044  F0A2         	movff	ethernetController_softReset@F5825+1,ethernetController_softReset@receivedData+1
 17549                           
 17550                           ;ENC424J600.c: 93: error_t err;
 17551                           ;ENC424J600.c: 94: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17552  00274A  0E01               	movlw	1
 17553  00274C  6FA3               	movwf	ethernetController_softReset@err& (0+255),b
 17554                           
 17555                           ;ENC424J600.c: 95: err.code = (uint16_t)0;
 17556  00274E  0E00               	movlw	0
 17557  002750  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17558  002752  0E00               	movlw	0
 17559  002754  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17560                           
 17561                           ; BSR set to: 0
 17562                           ;ENC424J600.c: 96: if (comFailCount < 5) {
 17563  002756  0E05               	movlw	5
 17564  002758  619E               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 17565  00275A  D072               	goto	l78
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;ENC424J600.c: 98: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0]);
 17569  00275C  0E9F               	movlw	low ethernetController_softReset@dataToSend
 17570  00275E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17571  002760  0E00               	movlw	high ethernetController_softReset@dataToSend
 17572  002762  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17573  002764  0E16               	movlw	22
 17574  002766  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17575                           
 17576                           ;ENC424J600.c: 99: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1]);
 17577  00276A  0EA0               	movlw	low (ethernetController_softReset@dataToSend+1)
 17578  00276C  0100               	movlb	0	; () banked
 17579  00276E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17580  002770  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 17581  002772  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17582  002774  0E17               	movlw	23
 17583  002776  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17584                           
 17585                           ;ENC424J600.c: 101: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17586  00277A  0EA1               	movlw	low ethernetController_softReset@receivedData
 17587  00277C  0100               	movlb	0	; () banked
 17588  00277E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17589  002780  0E00               	movlw	high ethernetController_softReset@receivedData
 17590  002782  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17591  002784  0E16               	movlw	22
 17592  002786  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17593                           
 17594                           ;ENC424J600.c: 102: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17595  00278A  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17596  00278C  0100               	movlb	0	; () banked
 17597  00278E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17598  002790  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17599  002792  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17600  002794  0E17               	movlw	23
 17601  002796  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17602                           
 17603                           ;ENC424J600.c: 104: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 17604  00279A  0100               	movlb	0	; () banked
 17605  00279C  519F               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 17606  00279E  19A1               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 17607  0027A0  A4D8               	btfss	status,2,c
 17608  0027A2  D04B               	goto	l82
 17609                           
 17610                           ; BSR set to: 0
 17611  0027A4  51A0               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 17612  0027A6  19A2               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17613  0027A8  A4D8               	btfss	status,2,c
 17614  0027AA  D047               	goto	l82
 17615                           
 17616                           ; BSR set to: 0
 17617                           ;ENC424J600.c: 106: UARTTransmitText("Writing 0x1234 successful.\n\r");
 17618  0027AC  0EE2               	movlw	low STR_1
 17619  0027AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17620  0027B0  0E7D               	movlw	high STR_1
 17621  0027B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17622  0027B4  ECFB  F01E         	call	_UARTTransmitText	;wreg free
 17623                           
 17624                           ;ENC424J600.c: 107: ENC424J600_writeSingleByte(0b11001010);
 17625  0027B8  0ECA               	movlw	202
 17626  0027BA  ECF9  F022         	call	_ENC424J600_writeSingleByte
 17627                           
 17628                           ;ENC424J600.c: 108: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 17629  0027BE  0E42               	movlw	66
 17630  0027C0                     u11167:
 17631  0027C0  2EE8               	decfsz	wreg,f,c
 17632  0027C2  D7FE               	bra	u11167
 17633  0027C4  D000               	nop2	
 17634                           
 17635                           ;ENC424J600.c: 110: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17636  0027C6  0EA1               	movlw	low ethernetController_softReset@receivedData
 17637  0027C8  0100               	movlb	0	; () banked
 17638  0027CA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17639  0027CC  0E00               	movlw	high ethernetController_softReset@receivedData
 17640  0027CE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17641  0027D0  0E16               	movlw	22
 17642  0027D2  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17643                           
 17644                           ;ENC424J600.c: 111: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17645  0027D6  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17646  0027D8  0100               	movlb	0	; () banked
 17647  0027DA  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17648  0027DC  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17649  0027DE  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17650  0027E0  0E17               	movlw	23
 17651  0027E2  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17652                           
 17653                           ;ENC424J600.c: 113: if (!receivedData[0] && !receivedData[1]) {
 17654  0027E6  0100               	movlb	0	; () banked
 17655  0027E8  51A1               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 17656  0027EA  A4D8               	btfss	status,2,c
 17657  0027EC  D013               	goto	l80
 17658                           
 17659                           ; BSR set to: 0
 17660  0027EE  51A2               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17661  0027F0  A4D8               	btfss	status,2,c
 17662  0027F2  D010               	goto	l80
 17663                           
 17664                           ; BSR set to: 0
 17665                           ;ENC424J600.c: 114: UARTTransmitText("Reset success.\n\r");
 17666  0027F4  0EF9               	movlw	low STR_2
 17667  0027F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17668  0027F8  0E7E               	movlw	high STR_2
 17669  0027FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17670  0027FC  ECFB  F01E         	call	_UARTTransmitText	;wreg free
 17671                           
 17672                           ;ENC424J600.c: 116: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 17673  002800  0E03               	movlw	3
 17674  002802  0100               	movlb	0	; () banked
 17675  002804  6F9D               	movwf	??_ethernetController_softReset& (0+255),b
 17676  002806  0EA7               	movlw	167
 17677  002808                     u11177:
 17678  002808  2EE8               	decfsz	wreg,f,c
 17679  00280A  D7FE               	bra	u11177
 17680  00280C  2F9D               	decfsz	??_ethernetController_softReset& (0+255),f,b
 17681  00280E  D7FC               	bra	u11177
 17682  002810  D000               	nop2	
 17683  002812  D00C               	goto	l8168
 17684  002814                     l80:
 17685                           
 17686                           ;ENC424J600.c: 119: UARTTransmitText("Reset failed.\n\r");
 17687  002814  0E2A               	movlw	low STR_3
 17688  002816  0100               	movlb	0	; () banked
 17689  002818  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17690  00281A  0E7F               	movlw	high STR_3
 17691  00281C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17692  00281E  ECFB  F01E         	call	_UARTTransmitText	;wreg free
 17693                           
 17694                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17695  002822  0E01               	movlw	1
 17696  002824  0100               	movlb	0	; () banked
 17697  002826  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17698  002828  0E2E               	movlw	46
 17699  00282A  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17700  00282C                     l8168:
 17701                           
 17702                           ; BSR set to: 0
 17703                           ;ENC424J600.c: 121: return err;
 17704  00282C  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17705  002830  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17706  002834  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17707                           
 17708                           ; BSR set to: 0
 17709  002838  0012               	return	
 17710  00283A                     l82:
 17711                           
 17712                           ;ENC424J600.c: 122: }
 17713                           ;ENC424J600.c: 123: }
 17714                           ;ENC424J600.c: 124: comFailCount++;
 17715                           
 17716                           ; BSR set to: 0
 17717                           
 17718                           ; BSR set to: 0
 17719  00283A  0100               	movlb	0	; () banked
 17720  00283C  2B9E               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 17721                           
 17722                           ;ENC424J600.c: 125: } else {
 17723  00283E  D012               	goto	l83
 17724  002840                     l78:
 17725                           
 17726                           ; BSR set to: 0
 17727                           ;ENC424J600.c: 126: UARTTransmitText("Writing 0x1234 failed.\n\r");
 17728                           
 17729                           ; BSR set to: 0
 17730  002840  0E1B               	movlw	low STR_4
 17731  002842  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17732  002844  0E7E               	movlw	high STR_4
 17733  002846  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17734  002848  ECFB  F01E         	call	_UARTTransmitText	;wreg free
 17735                           
 17736                           ;ENC424J600.c: 127: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17737  00284C  0E01               	movlw	1
 17738  00284E  0100               	movlb	0	; () banked
 17739  002850  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17740  002852  0E2E               	movlw	46
 17741  002854  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;ENC424J600.c: 128: return err;
 17745  002856  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17746  00285A  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17747  00285E  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17748                           
 17749                           ; BSR set to: 0
 17750  002862  0012               	return	
 17751  002864                     l83:
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;ENC424J600.c: 129: }
 17755                           ;ENC424J600.c: 130: return err;
 17756  002864  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17757  002868  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17758  00286C  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17759  002870  0012               	return		;funcret
 17760  002872                     __end_of_ethernetController_softReset:
 17761                           	opt stack 0
 17762                           tblptru	equ	0xFF8
 17763                           tblptrh	equ	0xFF7
 17764                           tblptrl	equ	0xFF6
 17765                           tablat	equ	0xFF5
 17766                           prodh	equ	0xFF4
 17767                           prodl	equ	0xFF3
 17768                           intcon	equ	0xFF2
 17769                           intcon3	equ	0xFF0
 17770                           postinc0	equ	0xFEE
 17771                           plusw0	equ	0xFEB
 17772                           fsr0h	equ	0xFEA
 17773                           fsr0l	equ	0xFE9
 17774                           wreg	equ	0xFE8
 17775                           indf1	equ	0xFE7
 17776                           postinc1	equ	0xFE6
 17777                           postdec1	equ	0xFE5
 17778                           plusw1	equ	0xFE3
 17779                           fsr1h	equ	0xFE2
 17780                           fsr1l	equ	0xFE1
 17781                           indf2	equ	0xFDF
 17782                           postinc2	equ	0xFDE
 17783                           postdec2	equ	0xFDD
 17784                           plusw2	equ	0xFDB
 17785                           fsr2h	equ	0xFDA
 17786                           fsr2l	equ	0xFD9
 17787                           status	equ	0xFD8
 17788                           
 17789 ;; *************** function _UARTTransmitText *****************
 17790 ;; Defined at:
 17791 ;;		line 53 in file "src/system/uart.c"
 17792 ;; Parameters:    Size  Location     Type
 17793 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 17794 ;;		 -> STR_67(17), STR_66(4), STR_65(8), STR_64(3), 
 17795 ;;		 -> STR_63(2), STR_62(3), STR_61(16), STR_60(15), 
 17796 ;;		 -> STR_59(10), STR_58(2), STR_57(3), STR_56(5), 
 17797 ;;		 -> STR_55(3), STR_54(2), STR_53(39), arpEntryToString@string(50), 
 17798 ;;		 -> ipAdressToString@address(16), STR_52(18), STR_51(4), STR_50(5), 
 17799 ;;		 -> macToString@address(18), intToString@number(10), STR_49(5), STR_48(9), 
 17800 ;;		 -> STR_47(30), STR_46(55), STR_45(37), STR_44(15), 
 17801 ;;		 -> STR_43(14), STR_42(19), STR_41(30), STR_40(17), 
 17802 ;;		 -> STR_39(8), STR_38(29), STR_37(29), STR_36(20), 
 17803 ;;		 -> STR_35(19), STR_34(19), STR_33(13), STR_32(51), 
 17804 ;;		 -> STR_31(28), STR_30(4), STR_29(23), STR_28(4), 
 17805 ;;		 -> STR_27(21), STR_26(12), STR_25(38), STR_24(3), 
 17806 ;;		 -> STR_23(9), STR_22(2), STR_21(12), STR_20(24), 
 17807 ;;		 -> STR_19(3), STR_18(3), STR_17(3), STR_16(5), 
 17808 ;;		 -> STR_15(2), STR_14(2), STR_13(5), STR_12(3), 
 17809 ;;		 -> STR_11(3), STR_10(2), STR_9(7), STR_8(6), 
 17810 ;;		 -> STR_7(16), STR_6(10), STR_5(12), ethernetController_getDeviceName@string(11), 
 17811 ;;		 -> STR_4(25), STR_3(16), STR_2(17), STR_1(29), 
 17812 ;; Auto vars:     Size  Location     Type
 17813 ;;		None
 17814 ;; Return value:  Size  Location     Type
 17815 ;;                  1    wreg      void 
 17816 ;; Registers used:
 17817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17818 ;; Tracked objects:
 17819 ;;		On entry : 0/0
 17820 ;;		On exit  : 0/0
 17821 ;;		Unchanged: 0/0
 17822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17823 ;;      Params:         0       2       0       0       0       0       0       0       0
 17824 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17825 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17826 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17827 ;;Total ram usage:        2 bytes
 17828 ;; Hardware stack levels used:    1
 17829 ;; Hardware stack levels required when called:    4
 17830 ;; This function calls:
 17831 ;;		Nothing
 17832 ;; This function is called by:
 17833 ;;		_ethernetController_softReset
 17834 ;;		_ethernet_rxGetNewFrame
 17835 ;;		_handleStackBackgroundTasks
 17836 ;;		_main
 17837 ;;		_printEthernetState
 17838 ;;		_printErrorMessage
 17839 ;;		_UARTTransmitInt
 17840 ;;		_ARP_handleNewPacket
 17841 ;;		_ARP_replyIfNeeded
 17842 ;;		_ipv4_sendFrame
 17843 ;;		_ipv4_handleNewPacket
 17844 ;;		_printArpTable
 17845 ;; This function uses a non-reentrant model
 17846 ;;
 17847                           
 17848                           	psect	text70
 17849  003DF6                     __ptext70:
 17850                           	opt stack 0
 17851  003DF6                     _UARTTransmitText:
 17852                           	opt stack 25
 17853                           
 17854                           ;uart.c: 54: while (*str) {
 17855                           
 17856                           ;incstack = 0
 17857  003DF6  D016               	goto	u8590
 17858  003DF8                     
 17859                           ;uart.c: 55: TXREG1 = *str++;
 17860  003DF8  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17861  003DFC  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17862  003E00  6AF8               	clrf	tblptru,c
 17863  003E02  0E07               	movlw	(high __ramtop+-1)
 17864  003E04  64F7               	cpfsgt	tblptrh,c
 17865  003E06  D003               	bra	u8587
 17866  003E08  0008               	tblrd		*
 17867  003E0A  50F5               	movf	tablat,w,c
 17868  003E0C  D005               	bra	u8580
 17869  003E0E                     u8587:
 17870  003E0E  CFF6 FFE9          	movff	tblptrl,fsr0l
 17871  003E12  CFF7 FFEA          	movff	tblptrh,fsr0h
 17872  003E16  50EF               	movf	indf0,w,c
 17873  003E18                     u8580:
 17874  003E18  6EAD               	movwf	4013,c	;volatile
 17875  003E1A  0100               	movlb	0	; () banked
 17876  003E1C  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 17877  003E1E  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 17878  003E20                     
 17879                           ; BSR set to: 0
 17880  003E20  A2AC               	btfss	4012,1,c	;volatile
 17881  003E22  D7FE               	goto	l734
 17882  003E24                     u8590:
 17883  003E24  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17884  003E28  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17885  003E2C  6AF8               	clrf	tblptru,c
 17886  003E2E  0E07               	movlw	(high __ramtop+-1)
 17887  003E30  64F7               	cpfsgt	tblptrh,c
 17888  003E32  D003               	bra	u8607
 17889  003E34  0008               	tblrd		*
 17890  003E36  50F5               	movf	tablat,w,c
 17891  003E38  D005               	bra	u8600
 17892  003E3A                     u8607:
 17893  003E3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17894  003E3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17895  003E42  50EF               	movf	indf0,w,c
 17896  003E44                     u8600:
 17897  003E44  0900               	iorlw	0
 17898  003E46  B4D8               	btfsc	status,2,c
 17899  003E48  0012               	return	
 17900  003E4A  D7D6               	goto	l732
 17901  003E4C                     __end_of_UARTTransmitText:
 17902                           	opt stack 0
 17903                           tblptru	equ	0xFF8
 17904                           tblptrh	equ	0xFF7
 17905                           tblptrl	equ	0xFF6
 17906                           tablat	equ	0xFF5
 17907                           prodh	equ	0xFF4
 17908                           prodl	equ	0xFF3
 17909                           intcon	equ	0xFF2
 17910                           intcon3	equ	0xFF0
 17911                           indf0	equ	0xFEF
 17912                           postinc0	equ	0xFEE
 17913                           plusw0	equ	0xFEB
 17914                           fsr0h	equ	0xFEA
 17915                           fsr0l	equ	0xFE9
 17916                           wreg	equ	0xFE8
 17917                           indf1	equ	0xFE7
 17918                           postinc1	equ	0xFE6
 17919                           postdec1	equ	0xFE5
 17920                           plusw1	equ	0xFE3
 17921                           fsr1h	equ	0xFE2
 17922                           fsr1l	equ	0xFE1
 17923                           indf2	equ	0xFDF
 17924                           postinc2	equ	0xFDE
 17925                           postdec2	equ	0xFDD
 17926                           plusw2	equ	0xFDB
 17927                           fsr2h	equ	0xFDA
 17928                           fsr2l	equ	0xFD9
 17929                           status	equ	0xFD8
 17930                           
 17931 ;; *************** function _ethernetController_checkDeviceId *****************
 17932 ;; Defined at:
 17933 ;;		line 133 in file "src/enc424j600/ENC424J600.c"
 17934 ;; Parameters:    Size  Location     Type
 17935 ;;		None
 17936 ;; Auto vars:     Size  Location     Type
 17937 ;;  err             3   18[BANK0 ] struct error
 17938 ;;  data            1   17[BANK0 ] unsigned char 
 17939 ;; Return value:  Size  Location     Type
 17940 ;;                  3   14[BANK0 ] struct error
 17941 ;; Registers used:
 17942 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17948 ;;      Params:         0       3       0       0       0       0       0       0       0
 17949 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17951 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17952 ;;Total ram usage:        7 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    7
 17955 ;; This function calls:
 17956 ;;		_ENC424J600_readControlRegisterUnbanked
 17957 ;; This function is called by:
 17958 ;;		_ethernetController_init
 17959 ;;		_main
 17960 ;; This function uses a non-reentrant model
 17961 ;;
 17962                           
 17963                           	psect	text71
 17964  003F94                     __ptext71:
 17965                           	opt stack 0
 17966  003F94                     _ethernetController_checkDeviceId:
 17967                           	opt stack 22
 17968                           
 17969                           ;ENC424J600.c: 134: error_t err;
 17970                           ;ENC424J600.c: 135: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17971                           
 17972                           ;incstack = 0
 17973  003F94  0E01               	movlw	1
 17974  003F96  0100               	movlb	0	; () banked
 17975  003F98  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 17976                           
 17977                           ;ENC424J600.c: 136: err.code = (uint16_t)0;
 17978  003F9A  0E00               	movlw	0
 17979  003F9C  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17980  003F9E  0E00               	movlw	0
 17981  003FA0  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17982                           
 17983                           ;ENC424J600.c: 137: uint8_t data = 0;
 17984  003FA2  0E00               	movlw	0
 17985  003FA4  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;ENC424J600.c: 138: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 17989  003FA6  0E71               	movlw	low ethernetController_checkDeviceId@data
 17990  003FA8  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17991  003FAA  0E00               	movlw	high ethernetController_checkDeviceId@data
 17992  003FAC  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17993  003FAE  0E74               	movlw	116
 17994  003FB0  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17995                           
 17996                           ;ENC424J600.c: 139: if (((data >> 5)&0x07) == 0b001)
 17997  003FB4  0100               	movlb	0	; () banked
 17998  003FB6  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 17999  003FB8  42E8               	rrncf	wreg,f,c
 18000  003FBA  0B07               	andlw	7
 18001  003FBC  0B07               	andlw	7
 18002  003FBE  06E8               	decf	wreg,f,c
 18003  003FC0  A4D8               	btfss	status,2,c
 18004  003FC2  D004               	goto	l86
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;ENC424J600.c: 140: err.code = (uint16_t)0;
 18008  003FC4  0E00               	movlw	0
 18009  003FC6  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 18010  003FC8  0E00               	movlw	0
 18011  003FCA  D003               	goto	L8
 18012  003FCC                     l86:
 18013                           
 18014                           ; BSR set to: 0
 18015                           ;ENC424J600.c: 141: else
 18016                           ;ENC424J600.c: 142: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 18017                           
 18018                           ; BSR set to: 0
 18019  003FCC  0E01               	movlw	1
 18020  003FCE  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 18021  003FD0  0E2D               	movlw	45
 18022  003FD2                     L8:
 18023  003FD2  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;ENC424J600.c: 143: return err;
 18027                           
 18028                           ; BSR set to: 0
 18029  003FD4  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 18030  003FD8  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 18031  003FDC  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 18032  003FE0  0012               	return	
 18033  003FE2                     __end_of_ethernetController_checkDeviceId:
 18034                           	opt stack 0
 18035                           tblptru	equ	0xFF8
 18036                           tblptrh	equ	0xFF7
 18037                           tblptrl	equ	0xFF6
 18038                           tablat	equ	0xFF5
 18039                           prodh	equ	0xFF4
 18040                           prodl	equ	0xFF3
 18041                           intcon	equ	0xFF2
 18042                           intcon3	equ	0xFF0
 18043                           indf0	equ	0xFEF
 18044                           postinc0	equ	0xFEE
 18045                           plusw0	equ	0xFEB
 18046                           fsr0h	equ	0xFEA
 18047                           fsr0l	equ	0xFE9
 18048                           wreg	equ	0xFE8
 18049                           indf1	equ	0xFE7
 18050                           postinc1	equ	0xFE6
 18051                           postdec1	equ	0xFE5
 18052                           plusw1	equ	0xFE3
 18053                           fsr1h	equ	0xFE2
 18054                           fsr1l	equ	0xFE1
 18055                           indf2	equ	0xFDF
 18056                           postinc2	equ	0xFDE
 18057                           postdec2	equ	0xFDD
 18058                           plusw2	equ	0xFDB
 18059                           fsr2h	equ	0xFDA
 18060                           fsr2l	equ	0xFD9
 18061                           status	equ	0xFD8
 18062                           
 18063 ;; *************** function _ENC424J600_setRXTailPointer *****************
 18064 ;; Defined at:
 18065 ;;		line 582 in file "src/enc424j600/ENC424J600.c"
 18066 ;; Parameters:    Size  Location     Type
 18067 ;;  addr            2   14[BANK0 ] unsigned int 
 18068 ;; Auto vars:     Size  Location     Type
 18069 ;;  highByte        1   17[BANK0 ] unsigned char 
 18070 ;;  lowByte         1   16[BANK0 ] unsigned char 
 18071 ;; Return value:  Size  Location     Type
 18072 ;;                  1    wreg      void 
 18073 ;; Registers used:
 18074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18075 ;; Tracked objects:
 18076 ;;		On entry : 0/0
 18077 ;;		On exit  : 0/0
 18078 ;;		Unchanged: 0/0
 18079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18080 ;;      Params:         0       2       0       0       0       0       0       0       0
 18081 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18082 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18083 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18084 ;;Total ram usage:        4 bytes
 18085 ;; Hardware stack levels used:    1
 18086 ;; Hardware stack levels required when called:    7
 18087 ;; This function calls:
 18088 ;;		_ENC424J600_writeControlRegisterUnbanked
 18089 ;; This function is called by:
 18090 ;;		_ethernetController_init
 18091 ;;		_ethernetController_streamFromRXBuffer
 18092 ;;		_ethernetController_dropPacket
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           	psect	text72
 18097  0043A2                     __ptext72:
 18098                           	opt stack 0
 18099  0043A2                     _ENC424J600_setRXTailPointer:
 18100                           	opt stack 19
 18101                           
 18102                           ;ENC424J600.c: 583: uint8_t lowByte = addr & 0x00ff;
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;incstack = 0
 18106  0043A2  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 18107                           
 18108                           ;ENC424J600.c: 584: uint8_t highByte = (addr >> 8) & 0xff;
 18109  0043A6  0100               	movlb	0	; () banked
 18110  0043A8  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 18111  0043AA  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;ENC424J600.c: 585: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 18115  0043AC  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 18116  0043AE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18117  0043B0  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 18118  0043B2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18119  0043B4  0E06               	movlw	6
 18120  0043B6  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18121                           
 18122                           ;ENC424J600.c: 586: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 18123  0043BA  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 18124  0043BC  0100               	movlb	0	; () banked
 18125  0043BE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18126  0043C0  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 18127  0043C2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18128  0043C4  0E07               	movlw	7
 18129  0043C6  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18130  0043CA  0012               	return		;funcret
 18131  0043CC                     __end_of_ENC424J600_setRXTailPointer:
 18132                           	opt stack 0
 18133                           tblptru	equ	0xFF8
 18134                           tblptrh	equ	0xFF7
 18135                           tblptrl	equ	0xFF6
 18136                           tablat	equ	0xFF5
 18137                           prodh	equ	0xFF4
 18138                           prodl	equ	0xFF3
 18139                           intcon	equ	0xFF2
 18140                           intcon3	equ	0xFF0
 18141                           indf0	equ	0xFEF
 18142                           postinc0	equ	0xFEE
 18143                           plusw0	equ	0xFEB
 18144                           fsr0h	equ	0xFEA
 18145                           fsr0l	equ	0xFE9
 18146                           wreg	equ	0xFE8
 18147                           indf1	equ	0xFE7
 18148                           postinc1	equ	0xFE6
 18149                           postdec1	equ	0xFE5
 18150                           plusw1	equ	0xFE3
 18151                           fsr1h	equ	0xFE2
 18152                           fsr1l	equ	0xFE1
 18153                           indf2	equ	0xFDF
 18154                           postinc2	equ	0xFDE
 18155                           postdec2	equ	0xFDD
 18156                           plusw2	equ	0xFDB
 18157                           fsr2h	equ	0xFDA
 18158                           fsr2l	equ	0xFD9
 18159                           status	equ	0xFD8
 18160                           
 18161 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 18162 ;; Defined at:
 18163 ;;		line 575 in file "src/enc424j600/ENC424J600.c"
 18164 ;; Parameters:    Size  Location     Type
 18165 ;;  addr            2   14[BANK0 ] unsigned int 
 18166 ;; Auto vars:     Size  Location     Type
 18167 ;;  highByte        1   17[BANK0 ] unsigned char 
 18168 ;;  lowByte         1   16[BANK0 ] unsigned char 
 18169 ;; Return value:  Size  Location     Type
 18170 ;;                  1    wreg      void 
 18171 ;; Registers used:
 18172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18173 ;; Tracked objects:
 18174 ;;		On entry : 0/0
 18175 ;;		On exit  : 0/0
 18176 ;;		Unchanged: 0/0
 18177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18178 ;;      Params:         0       2       0       0       0       0       0       0       0
 18179 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18180 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18181 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18182 ;;Total ram usage:        4 bytes
 18183 ;; Hardware stack levels used:    1
 18184 ;; Hardware stack levels required when called:    7
 18185 ;; This function calls:
 18186 ;;		_ENC424J600_writeControlRegisterUnbanked
 18187 ;; This function is called by:
 18188 ;;		_ethernetController_init
 18189 ;; This function uses a non-reentrant model
 18190 ;;
 18191                           
 18192                           	psect	text73
 18193  0043CC                     __ptext73:
 18194                           	opt stack 0
 18195  0043CC                     _ENC424J600_setRXBufferStartAddress:
 18196                           	opt stack 22
 18197                           
 18198                           ;ENC424J600.c: 576: uint8_t lowByte = addr & 0x00ff;
 18199                           
 18200                           ;incstack = 0
 18201  0043CC  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 18202                           
 18203                           ;ENC424J600.c: 577: uint8_t highByte = (addr >> 8) & 0xff;
 18204  0043D0  0100               	movlb	0	; () banked
 18205  0043D2  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 18206  0043D4  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 18207                           
 18208                           ; BSR set to: 0
 18209                           ;ENC424J600.c: 578: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 18210  0043D6  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 18211  0043D8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18212  0043DA  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 18213  0043DC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18214  0043DE  0E04               	movlw	4
 18215  0043E0  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18216                           
 18217                           ;ENC424J600.c: 579: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 18218  0043E4  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 18219  0043E6  0100               	movlb	0	; () banked
 18220  0043E8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18221  0043EA  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 18222  0043EC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18223  0043EE  0E05               	movlw	5
 18224  0043F0  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18225  0043F4  0012               	return		;funcret
 18226  0043F6                     __end_of_ENC424J600_setRXBufferStartAddress:
 18227                           	opt stack 0
 18228                           tblptru	equ	0xFF8
 18229                           tblptrh	equ	0xFF7
 18230                           tblptrl	equ	0xFF6
 18231                           tablat	equ	0xFF5
 18232                           prodh	equ	0xFF4
 18233                           prodl	equ	0xFF3
 18234                           intcon	equ	0xFF2
 18235                           intcon3	equ	0xFF0
 18236                           indf0	equ	0xFEF
 18237                           postinc0	equ	0xFEE
 18238                           plusw0	equ	0xFEB
 18239                           fsr0h	equ	0xFEA
 18240                           fsr0l	equ	0xFE9
 18241                           wreg	equ	0xFE8
 18242                           indf1	equ	0xFE7
 18243                           postinc1	equ	0xFE6
 18244                           postdec1	equ	0xFE5
 18245                           plusw1	equ	0xFE3
 18246                           fsr1h	equ	0xFE2
 18247                           fsr1l	equ	0xFE1
 18248                           indf2	equ	0xFDF
 18249                           postinc2	equ	0xFDE
 18250                           postdec2	equ	0xFDD
 18251                           plusw2	equ	0xFDB
 18252                           fsr2h	equ	0xFDA
 18253                           fsr2l	equ	0xFD9
 18254                           status	equ	0xFD8
 18255                           
 18256 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 18257 ;; Defined at:
 18258 ;;		line 589 in file "src/enc424j600/ENC424J600.c"
 18259 ;; Parameters:    Size  Location     Type
 18260 ;;  ptr             2    0[BANK0 ] unsigned int 
 18261 ;; Auto vars:     Size  Location     Type
 18262 ;;		None
 18263 ;; Return value:  Size  Location     Type
 18264 ;;                  1    wreg      void 
 18265 ;; Registers used:
 18266 ;;		None
 18267 ;; Tracked objects:
 18268 ;;		On entry : 0/0
 18269 ;;		On exit  : 0/0
 18270 ;;		Unchanged: 0/0
 18271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18272 ;;      Params:         0       2       0       0       0       0       0       0       0
 18273 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18274 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18275 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18276 ;;Total ram usage:        2 bytes
 18277 ;; Hardware stack levels used:    1
 18278 ;; Hardware stack levels required when called:    4
 18279 ;; This function calls:
 18280 ;;		Nothing
 18281 ;; This function is called by:
 18282 ;;		_ethernetController_init
 18283 ;;		_ethernetController_streamFromRXBuffer
 18284 ;;		_ethernetController_dropPacket
 18285 ;; This function uses a non-reentrant model
 18286 ;;
 18287                           
 18288                           	psect	text74
 18289  004664                     __ptext74:
 18290                           	opt stack 0
 18291  004664                     _ENC424J600_setNextPacketPointer:
 18292                           	opt stack 22
 18293                           
 18294                           ;ENC424J600.c: 590: nextPacketPointer = ptr;
 18295                           
 18296                           ;incstack = 0
 18297  004664  C060  F045         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 18298  004668  C061  F046         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 18299  00466C  0012               	return		;funcret
 18300  00466E                     __end_of_ENC424J600_setNextPacketPointer:
 18301                           	opt stack 0
 18302                           tblptru	equ	0xFF8
 18303                           tblptrh	equ	0xFF7
 18304                           tblptrl	equ	0xFF6
 18305                           tablat	equ	0xFF5
 18306                           prodh	equ	0xFF4
 18307                           prodl	equ	0xFF3
 18308                           intcon	equ	0xFF2
 18309                           intcon3	equ	0xFF0
 18310                           indf0	equ	0xFEF
 18311                           postinc0	equ	0xFEE
 18312                           plusw0	equ	0xFEB
 18313                           fsr0h	equ	0xFEA
 18314                           fsr0l	equ	0xFE9
 18315                           wreg	equ	0xFE8
 18316                           indf1	equ	0xFE7
 18317                           postinc1	equ	0xFE6
 18318                           postdec1	equ	0xFE5
 18319                           plusw1	equ	0xFE3
 18320                           fsr1h	equ	0xFE2
 18321                           fsr1l	equ	0xFE1
 18322                           indf2	equ	0xFDF
 18323                           postinc2	equ	0xFDE
 18324                           postdec2	equ	0xFDD
 18325                           plusw2	equ	0xFDB
 18326                           fsr2h	equ	0xFDA
 18327                           fsr2l	equ	0xFD9
 18328                           status	equ	0xFD8
 18329                           
 18330 ;; *************** function _ENC424J600_enableReception *****************
 18331 ;; Defined at:
 18332 ;;		line 524 in file "src/enc424j600/ENC424J600.c"
 18333 ;; Parameters:    Size  Location     Type
 18334 ;;		None
 18335 ;; Auto vars:     Size  Location     Type
 18336 ;;		None
 18337 ;; Return value:  Size  Location     Type
 18338 ;;                  1    wreg      void 
 18339 ;; Registers used:
 18340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18341 ;; Tracked objects:
 18342 ;;		On entry : 0/0
 18343 ;;		On exit  : 0/0
 18344 ;;		Unchanged: 0/0
 18345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18346 ;;      Params:         0       0       0       0       0       0       0       0       0
 18347 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18348 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18349 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18350 ;;Total ram usage:        0 bytes
 18351 ;; Hardware stack levels used:    1
 18352 ;; Hardware stack levels required when called:    7
 18353 ;; This function calls:
 18354 ;;		_ENC424J600_writeSingleByte
 18355 ;; This function is called by:
 18356 ;;		_ethernetController_init
 18357 ;;		_ethernetController_enableReception
 18358 ;; This function uses a non-reentrant model
 18359 ;;
 18360                           
 18361                           	psect	text75
 18362  00466E                     __ptext75:
 18363                           	opt stack 0
 18364  00466E                     _ENC424J600_enableReception:
 18365                           	opt stack 22
 18366                           
 18367                           ;ENC424J600.c: 525: ENC424J600_writeSingleByte(0b11101000);
 18368                           
 18369                           ;incstack = 0
 18370  00466E  0EE8               	movlw	232
 18371  004670  ECF9  F022         	call	_ENC424J600_writeSingleByte
 18372  004674  0012               	return		;funcret
 18373  004676                     __end_of_ENC424J600_enableReception:
 18374                           	opt stack 0
 18375                           tblptru	equ	0xFF8
 18376                           tblptrh	equ	0xFF7
 18377                           tblptrl	equ	0xFF6
 18378                           tablat	equ	0xFF5
 18379                           prodh	equ	0xFF4
 18380                           prodl	equ	0xFF3
 18381                           intcon	equ	0xFF2
 18382                           intcon3	equ	0xFF0
 18383                           indf0	equ	0xFEF
 18384                           postinc0	equ	0xFEE
 18385                           plusw0	equ	0xFEB
 18386                           fsr0h	equ	0xFEA
 18387                           fsr0l	equ	0xFE9
 18388                           wreg	equ	0xFE8
 18389                           indf1	equ	0xFE7
 18390                           postinc1	equ	0xFE6
 18391                           postdec1	equ	0xFE5
 18392                           plusw1	equ	0xFE3
 18393                           fsr1h	equ	0xFE2
 18394                           fsr1l	equ	0xFE1
 18395                           indf2	equ	0xFDF
 18396                           postinc2	equ	0xFDE
 18397                           postdec2	equ	0xFDD
 18398                           plusw2	equ	0xFDB
 18399                           fsr2h	equ	0xFDA
 18400                           fsr2l	equ	0xFD9
 18401                           status	equ	0xFD8
 18402                           
 18403 ;; *************** function _ENC424J600_writeSingleByte *****************
 18404 ;; Defined at:
 18405 ;;		line 676 in file "src/enc424j600/ENC424J600.c"
 18406 ;; Parameters:    Size  Location     Type
 18407 ;;  opcode          1    wreg     unsigned char 
 18408 ;; Auto vars:     Size  Location     Type
 18409 ;;  opcode          1   10[BANK0 ] unsigned char 
 18410 ;; Return value:  Size  Location     Type
 18411 ;;                  1    wreg      void 
 18412 ;; Registers used:
 18413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18414 ;; Tracked objects:
 18415 ;;		On entry : 0/0
 18416 ;;		On exit  : 0/0
 18417 ;;		Unchanged: 0/0
 18418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18419 ;;      Params:         0       0       0       0       0       0       0       0       0
 18420 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18421 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18422 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18423 ;;Total ram usage:        1 bytes
 18424 ;; Hardware stack levels used:    1
 18425 ;; Hardware stack levels required when called:    6
 18426 ;; This function calls:
 18427 ;;		_ENC424J600_writeSPI
 18428 ;; This function is called by:
 18429 ;;		_ethernetController_softReset
 18430 ;;		_ethernetController_sendPacket
 18431 ;;		_ethernetController_streamFromRXBuffer
 18432 ;;		_ethernetController_dropPacket
 18433 ;;		_ENC424J600_enableReception
 18434 ;; This function uses a non-reentrant model
 18435 ;;
 18436                           
 18437                           	psect	text76
 18438  0045F2                     __ptext76:
 18439                           	opt stack 0
 18440  0045F2                     _ENC424J600_writeSingleByte:
 18441                           	opt stack 21
 18442                           
 18443                           ;incstack = 0
 18444                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 18445  0045F2  0100               	movlb	0	; () banked
 18446  0045F4  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 18447                           
 18448                           ;ENC424J600.c: 677: PORTBbits.RB4=0;
 18449  0045F6  9881               	bcf	3969,4,c	;volatile
 18450                           
 18451                           ;ENC424J600.c: 678: ENC424J600_writeSPI(&opcode);
 18452  0045F8  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 18453  0045FA  0100               	movlb	0	; () banked
 18454  0045FC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18455  0045FE  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 18456  004600  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18457  004602  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18458                           
 18459                           ;ENC424J600.c: 679: PORTBbits.RB4=1;
 18460  004606  8881               	bsf	3969,4,c	;volatile
 18461  004608  0012               	return		;funcret
 18462  00460A                     __end_of_ENC424J600_writeSingleByte:
 18463                           	opt stack 0
 18464                           tblptru	equ	0xFF8
 18465                           tblptrh	equ	0xFF7
 18466                           tblptrl	equ	0xFF6
 18467                           tablat	equ	0xFF5
 18468                           prodh	equ	0xFF4
 18469                           prodl	equ	0xFF3
 18470                           intcon	equ	0xFF2
 18471                           intcon3	equ	0xFF0
 18472                           indf0	equ	0xFEF
 18473                           postinc0	equ	0xFEE
 18474                           plusw0	equ	0xFEB
 18475                           fsr0h	equ	0xFEA
 18476                           fsr0l	equ	0xFE9
 18477                           wreg	equ	0xFE8
 18478                           indf1	equ	0xFE7
 18479                           postinc1	equ	0xFE6
 18480                           postdec1	equ	0xFE5
 18481                           plusw1	equ	0xFE3
 18482                           fsr1h	equ	0xFE2
 18483                           fsr1l	equ	0xFE1
 18484                           indf2	equ	0xFDF
 18485                           postinc2	equ	0xFDE
 18486                           postdec2	equ	0xFDD
 18487                           plusw2	equ	0xFDB
 18488                           fsr2h	equ	0xFDA
 18489                           fsr2l	equ	0xFD9
 18490                           status	equ	0xFD8
 18491                           
 18492 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 18493 ;; Defined at:
 18494 ;;		line 603 in file "src/enc424j600/ENC424J600.c"
 18495 ;; Parameters:    Size  Location     Type
 18496 ;;		None
 18497 ;; Auto vars:     Size  Location     Type
 18498 ;;  temp            1   14[BANK0 ] unsigned char 
 18499 ;; Return value:  Size  Location     Type
 18500 ;;                  1    wreg      void 
 18501 ;; Registers used:
 18502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18503 ;; Tracked objects:
 18504 ;;		On entry : 0/0
 18505 ;;		On exit  : 0/0
 18506 ;;		Unchanged: 0/0
 18507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18508 ;;      Params:         0       0       0       0       0       0       0       0       0
 18509 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18510 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18511 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18512 ;;Total ram usage:        1 bytes
 18513 ;; Hardware stack levels used:    1
 18514 ;; Hardware stack levels required when called:    7
 18515 ;; This function calls:
 18516 ;;		_ENC424J600_readControlRegisterUnbanked
 18517 ;;		_ENC424J600_writeControlRegisterUnbanked
 18518 ;; This function is called by:
 18519 ;;		_ethernetController_init
 18520 ;; This function uses a non-reentrant model
 18521 ;;
 18522                           
 18523                           	psect	text77
 18524  004446                     __ptext77:
 18525                           	opt stack 0
 18526  004446                     _ENC424J600_enableAutoMACInsertion:
 18527                           	opt stack 22
 18528                           
 18529                           ;ENC424J600.c: 604: uint8_t temp = 0;
 18530                           
 18531                           ;incstack = 0
 18532  004446  0E00               	movlw	0
 18533  004448  0100               	movlb	0	; () banked
 18534  00444A  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 18535                           
 18536                           ; BSR set to: 0
 18537                           ;ENC424J600.c: 605: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 18538  00444C  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18539  00444E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18540  004450  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18541  004452  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18542  004454  0E6F               	movlw	111
 18543  004456  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18544                           
 18545                           ;ENC424J600.c: 606: temp |= (1 << 5);
 18546  00445A  0100               	movlb	0	; () banked
 18547  00445C  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;ENC424J600.c: 607: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 18551  00445E  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18552  004460  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18553  004462  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18554  004464  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18555  004466  0E6F               	movlw	111
 18556  004468  EC13  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18557  00446C  0012               	return		;funcret
 18558  00446E                     __end_of_ENC424J600_enableAutoMACInsertion:
 18559                           	opt stack 0
 18560                           tblptru	equ	0xFF8
 18561                           tblptrh	equ	0xFF7
 18562                           tblptrl	equ	0xFF6
 18563                           tablat	equ	0xFF5
 18564                           prodh	equ	0xFF4
 18565                           prodl	equ	0xFF3
 18566                           intcon	equ	0xFF2
 18567                           intcon3	equ	0xFF0
 18568                           indf0	equ	0xFEF
 18569                           postinc0	equ	0xFEE
 18570                           plusw0	equ	0xFEB
 18571                           fsr0h	equ	0xFEA
 18572                           fsr0l	equ	0xFE9
 18573                           wreg	equ	0xFE8
 18574                           indf1	equ	0xFE7
 18575                           postinc1	equ	0xFE6
 18576                           postdec1	equ	0xFE5
 18577                           plusw1	equ	0xFE3
 18578                           fsr1h	equ	0xFE2
 18579                           fsr1l	equ	0xFE1
 18580                           indf2	equ	0xFDF
 18581                           postinc2	equ	0xFDE
 18582                           postdec2	equ	0xFDD
 18583                           plusw2	equ	0xFDB
 18584                           fsr2h	equ	0xFDA
 18585                           fsr2l	equ	0xFD9
 18586                           status	equ	0xFD8
 18587                           
 18588 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 18589 ;; Defined at:
 18590 ;;		line 617 in file "src/enc424j600/ENC424J600.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;  addr            1    wreg     unsigned char 
 18593 ;;  data            2   10[BANK0 ] PTR unsigned char 
 18594 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits
      +(1), ENC424J600_readPHYRegister@PHYaddress(1), 
 18595 ;;		 -> ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPoint
      +er@highByte(1), ENC424J600_setRXTailPointer@lowByte(1), 
 18596 ;;		 -> ENC424J600_setRXBufferStartAddress@highByte(1), ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXS
      +tartAddress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 18597 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ethernetController_setLEDConfiguration@da
      +ta(1), ethernetController_setLEDStatus@data(1), 
 18598 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 18599 ;; Auto vars:     Size  Location     Type
 18600 ;;  addr            1   12[BANK0 ] unsigned char 
 18601 ;;  opcode          1   13[BANK0 ] unsigned char 
 18602 ;; Return value:  Size  Location     Type
 18603 ;;                  1    wreg      void 
 18604 ;; Registers used:
 18605 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18606 ;; Tracked objects:
 18607 ;;		On entry : 0/0
 18608 ;;		On exit  : 0/0
 18609 ;;		Unchanged: 0/0
 18610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18611 ;;      Params:         0       2       0       0       0       0       0       0       0
 18612 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18613 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18614 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18615 ;;Total ram usage:        4 bytes
 18616 ;; Hardware stack levels used:    1
 18617 ;; Hardware stack levels required when called:    6
 18618 ;; This function calls:
 18619 ;;		_ENC424J600_writeSPI
 18620 ;; This function is called by:
 18621 ;;		_ethernetController_softReset
 18622 ;;		_ethernetController_setLEDStatus
 18623 ;;		_ethernetController_setLEDConfiguration
 18624 ;;		_ENC424J600_setTXLength
 18625 ;;		_ENC424J600_setTXStartAddress
 18626 ;;		_ENC424J600_setRXBufferStartAddress
 18627 ;;		_ENC424J600_setRXTailPointer
 18628 ;;		_ENC424J600_enableAutoMACInsertion
 18629 ;;		_ENC424J600_readPHYRegister
 18630 ;;		_ENC424J600_clearInterruptFlag
 18631 ;;		_ethernetController_setMacAddress
 18632 ;;		_ENC424J600_disableAutoMACInsertion
 18633 ;; This function uses a non-reentrant model
 18634 ;;
 18635                           
 18636                           	psect	text78
 18637  004226                     __ptext78:
 18638                           	opt stack 0
 18639  004226                     _ENC424J600_writeControlRegisterUnbanked:
 18640                           	opt stack 20
 18641                           
 18642                           ;incstack = 0
 18643                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 18644  004226  0100               	movlb	0	; () banked
 18645  004228  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 18646                           
 18647                           ;ENC424J600.c: 618: uint8_t opcode = 0x22;
 18648  00422A  0E22               	movlw	34
 18649  00422C  0100               	movlb	0	; () banked
 18650  00422E  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 18651                           
 18652                           ; BSR set to: 0
 18653                           ;ENC424J600.c: 619: PORTBbits.RB4=0;
 18654  004230  9881               	bcf	3969,4,c	;volatile
 18655                           
 18656                           ; BSR set to: 0
 18657                           ;ENC424J600.c: 620: ENC424J600_writeSPI(&opcode);
 18658  004232  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 18659  004234  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18660  004236  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 18661  004238  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18662  00423A  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18663                           
 18664                           ;ENC424J600.c: 621: ENC424J600_writeSPI(&addr);
 18665  00423E  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 18666  004240  0100               	movlb	0	; () banked
 18667  004242  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18668  004244  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 18669  004246  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18670  004248  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18671                           
 18672                           ;ENC424J600.c: 622: ENC424J600_writeSPI(data);
 18673  00424C  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 18674  004250  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 18675  004254  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18676                           
 18677                           ;ENC424J600.c: 623: PORTBbits.RB4=1;
 18678  004258  8881               	bsf	3969,4,c	;volatile
 18679  00425A  0012               	return		;funcret
 18680  00425C                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 18681                           	opt stack 0
 18682                           tblptru	equ	0xFF8
 18683                           tblptrh	equ	0xFF7
 18684                           tblptrl	equ	0xFF6
 18685                           tablat	equ	0xFF5
 18686                           prodh	equ	0xFF4
 18687                           prodl	equ	0xFF3
 18688                           intcon	equ	0xFF2
 18689                           intcon3	equ	0xFF0
 18690                           indf0	equ	0xFEF
 18691                           postinc0	equ	0xFEE
 18692                           plusw0	equ	0xFEB
 18693                           fsr0h	equ	0xFEA
 18694                           fsr0l	equ	0xFE9
 18695                           wreg	equ	0xFE8
 18696                           indf1	equ	0xFE7
 18697                           postinc1	equ	0xFE6
 18698                           postdec1	equ	0xFE5
 18699                           plusw1	equ	0xFE3
 18700                           fsr1h	equ	0xFE2
 18701                           fsr1l	equ	0xFE1
 18702                           indf2	equ	0xFDF
 18703                           postinc2	equ	0xFDE
 18704                           postdec2	equ	0xFDD
 18705                           plusw2	equ	0xFDB
 18706                           fsr2h	equ	0xFDA
 18707                           fsr2l	equ	0xFD9
 18708                           status	equ	0xFD8
 18709                           
 18710 ;; *************** function _ethernetController_getSiliconRevision *****************
 18711 ;; Defined at:
 18712 ;;		line 151 in file "src/enc424j600/ENC424J600.c"
 18713 ;; Parameters:    Size  Location     Type
 18714 ;;		None
 18715 ;; Auto vars:     Size  Location     Type
 18716 ;;  data            1   14[BANK0 ] unsigned char 
 18717 ;; Return value:  Size  Location     Type
 18718 ;;                  1    wreg      unsigned char 
 18719 ;; Registers used:
 18720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18721 ;; Tracked objects:
 18722 ;;		On entry : 0/0
 18723 ;;		On exit  : 0/0
 18724 ;;		Unchanged: 0/0
 18725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18726 ;;      Params:         0       0       0       0       0       0       0       0       0
 18727 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18728 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18729 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18730 ;;Total ram usage:        1 bytes
 18731 ;; Hardware stack levels used:    1
 18732 ;; Hardware stack levels required when called:    7
 18733 ;; This function calls:
 18734 ;;		_ENC424J600_readControlRegisterUnbanked
 18735 ;; This function is called by:
 18736 ;;		_main
 18737 ;; This function uses a non-reentrant model
 18738 ;;
 18739                           
 18740                           	psect	text79
 18741  00454A                     __ptext79:
 18742                           	opt stack 0
 18743  00454A                     _ethernetController_getSiliconRevision:
 18744                           	opt stack 23
 18745                           
 18746                           ;ENC424J600.c: 152: uint8_t data = 0;
 18747                           
 18748                           ;incstack = 0
 18749  00454A  0E00               	movlw	0
 18750  00454C  0100               	movlb	0	; () banked
 18751  00454E  6F6E               	movwf	ethernetController_getSiliconRevision@data& (0+255),b
 18752                           
 18753                           ; BSR set to: 0
 18754                           ;ENC424J600.c: 153: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 18755  004550  0E6E               	movlw	low ethernetController_getSiliconRevision@data
 18756  004552  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18757  004554  0E00               	movlw	high ethernetController_getSiliconRevision@data
 18758  004556  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18759  004558  0E74               	movlw	116
 18760  00455A  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18761                           
 18762                           ;ENC424J600.c: 154: data &= 0x1F;
 18763  00455E  0E1F               	movlw	31
 18764  004560  0100               	movlb	0	; () banked
 18765  004562  176E               	andwf	ethernetController_getSiliconRevision@data& (0+255),f,b
 18766                           
 18767                           ; BSR set to: 0
 18768                           ;ENC424J600.c: 155: return data;
 18769  004564  516E               	movf	ethernetController_getSiliconRevision@data& (0+255),w,b
 18770  004566  0012               	return	
 18771  004568                     __end_of_ethernetController_getSiliconRevision:
 18772                           	opt stack 0
 18773                           tblptru	equ	0xFF8
 18774                           tblptrh	equ	0xFF7
 18775                           tblptrl	equ	0xFF6
 18776                           tablat	equ	0xFF5
 18777                           prodh	equ	0xFF4
 18778                           prodl	equ	0xFF3
 18779                           intcon	equ	0xFF2
 18780                           intcon3	equ	0xFF0
 18781                           indf0	equ	0xFEF
 18782                           postinc0	equ	0xFEE
 18783                           plusw0	equ	0xFEB
 18784                           fsr0h	equ	0xFEA
 18785                           fsr0l	equ	0xFE9
 18786                           wreg	equ	0xFE8
 18787                           indf1	equ	0xFE7
 18788                           postinc1	equ	0xFE6
 18789                           postdec1	equ	0xFE5
 18790                           plusw1	equ	0xFE3
 18791                           fsr1h	equ	0xFE2
 18792                           fsr1l	equ	0xFE1
 18793                           indf2	equ	0xFDF
 18794                           postinc2	equ	0xFDE
 18795                           postdec2	equ	0xFDD
 18796                           plusw2	equ	0xFDB
 18797                           fsr2h	equ	0xFDA
 18798                           fsr2l	equ	0xFD9
 18799                           status	equ	0xFD8
 18800                           
 18801 ;; *************** function _ethernetController_getDeviceName *****************
 18802 ;; Defined at:
 18803 ;;		line 146 in file "src/enc424j600/ENC424J600.c"
 18804 ;; Parameters:    Size  Location     Type
 18805 ;;		None
 18806 ;; Auto vars:     Size  Location     Type
 18807 ;;  string         11    2[BANK0 ] const unsigned char [11]
 18808 ;; Return value:  Size  Location     Type
 18809 ;;                  2    0[BANK0 ] PTR unsigned char 
 18810 ;; Registers used:
 18811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18812 ;; Tracked objects:
 18813 ;;		On entry : 0/0
 18814 ;;		On exit  : 0/0
 18815 ;;		Unchanged: 0/0
 18816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18817 ;;      Params:         0       2       0       0       0       0       0       0       0
 18818 ;;      Locals:         0      11       0       0       0       0       0       0       0
 18819 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18820 ;;      Totals:         0      13       0       0       0       0       0       0       0
 18821 ;;Total ram usage:       13 bytes
 18822 ;; Hardware stack levels used:    1
 18823 ;; Hardware stack levels required when called:    4
 18824 ;; This function calls:
 18825 ;;		Nothing
 18826 ;; This function is called by:
 18827 ;;		_main
 18828 ;; This function uses a non-reentrant model
 18829 ;;
 18830                           
 18831                           	psect	text80
 18832  004504                     __ptext80:
 18833                           	opt stack 0
 18834  004504                     _ethernetController_getDeviceName:
 18835                           	opt stack 26
 18836                           
 18837                           ;ENC424J600.c: 147: const char string [] = "ENC424J600";
 18838                           
 18839                           ; BSR set to: 0
 18840                           ;incstack = 0
 18841  004504  0E85               	movlw	low ethernetController_getDeviceName@F5835
 18842  004506  6EF6               	movwf	tblptrl,c
 18843  004508                     	if	1	;There is more than 1 active tblptr byte
 18844  004508  0E7C               	movlw	high ethernetController_getDeviceName@F5835
 18845  00450A  6EF7               	movwf	tblptrh,c
 18846  00450C                     	endif
 18847  00450C                     	if	0	;There are less than 3 active tblptr bytes
 18848  00450C                     	endif
 18849  00450C  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 18850  004510  0E0A               	movlw	10
 18851  004512                     u10640:
 18852  004512  0009               	tblrd		*+
 18853  004514  CFF5 FFDE          	movff	tablat,postinc2
 18854  004518  06E8               	decf	wreg,f,c
 18855  00451A  E2FB               	bc	u10640
 18856                           
 18857                           ;ENC424J600.c: 148: return string;
 18858  00451C  0E62               	movlw	low ethernetController_getDeviceName@string
 18859  00451E  0100               	movlb	0	; () banked
 18860  004520  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 18861  004522  0E00               	movlw	high ethernetController_getDeviceName@string
 18862  004524  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 18863  004526  0012               	return	
 18864  004528                     __end_of_ethernetController_getDeviceName:
 18865                           	opt stack 0
 18866                           tblptru	equ	0xFF8
 18867                           tblptrh	equ	0xFF7
 18868                           tblptrl	equ	0xFF6
 18869                           tablat	equ	0xFF5
 18870                           prodh	equ	0xFF4
 18871                           prodl	equ	0xFF3
 18872                           intcon	equ	0xFF2
 18873                           intcon3	equ	0xFF0
 18874                           indf0	equ	0xFEF
 18875                           postinc0	equ	0xFEE
 18876                           plusw0	equ	0xFEB
 18877                           fsr0h	equ	0xFEA
 18878                           fsr0l	equ	0xFE9
 18879                           wreg	equ	0xFE8
 18880                           indf1	equ	0xFE7
 18881                           postinc1	equ	0xFE6
 18882                           postdec1	equ	0xFE5
 18883                           plusw1	equ	0xFE3
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 18895 ;; Defined at:
 18896 ;;		line 514 in file "src/enc424j600/ENC424J600.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;		None
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;		None
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      unsigned char 
 18903 ;; Registers used:
 18904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18910 ;;      Params:         0       0       0       0       0       0       0       0       0
 18911 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18912 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18913 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18914 ;;Total ram usage:        0 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    8
 18917 ;; This function calls:
 18918 ;;		_ENC424J600_getPacketCount
 18919 ;; This function is called by:
 18920 ;;		_main
 18921 ;; This function uses a non-reentrant model
 18922 ;;
 18923                           
 18924                           	psect	text81
 18925  004676                     __ptext81:
 18926                           	opt stack 0
 18927  004676                     _ethernetController_getCurrentPacketCount:
 18928                           	opt stack 22
 18929                           
 18930                           ;ENC424J600.c: 515: return ENC424J600_getPacketCount();
 18931                           
 18932                           ; BSR set to: 0
 18933                           ;incstack = 0
 18934  004676  ECEC  F022         	call	_ENC424J600_getPacketCount	;wreg free
 18935  00467A  0012               	return	
 18936  00467C                     __end_of_ethernetController_getCurrentPacketCount:
 18937                           	opt stack 0
 18938                           tblptru	equ	0xFF8
 18939                           tblptrh	equ	0xFF7
 18940                           tblptrl	equ	0xFF6
 18941                           tablat	equ	0xFF5
 18942                           prodh	equ	0xFF4
 18943                           prodl	equ	0xFF3
 18944                           intcon	equ	0xFF2
 18945                           intcon3	equ	0xFF0
 18946                           indf0	equ	0xFEF
 18947                           postinc0	equ	0xFEE
 18948                           plusw0	equ	0xFEB
 18949                           fsr0h	equ	0xFEA
 18950                           fsr0l	equ	0xFE9
 18951                           wreg	equ	0xFE8
 18952                           indf1	equ	0xFE7
 18953                           postinc1	equ	0xFE6
 18954                           postdec1	equ	0xFE5
 18955                           plusw1	equ	0xFE3
 18956                           fsr1h	equ	0xFE2
 18957                           fsr1l	equ	0xFE1
 18958                           indf2	equ	0xFDF
 18959                           postinc2	equ	0xFDE
 18960                           postdec2	equ	0xFDD
 18961                           plusw2	equ	0xFDB
 18962                           fsr2h	equ	0xFDA
 18963                           fsr2l	equ	0xFD9
 18964                           status	equ	0xFD8
 18965                           
 18966 ;; *************** function _ENC424J600_getPacketCount *****************
 18967 ;; Defined at:
 18968 ;;		line 597 in file "src/enc424j600/ENC424J600.c"
 18969 ;; Parameters:    Size  Location     Type
 18970 ;;		None
 18971 ;; Auto vars:     Size  Location     Type
 18972 ;;  lowByte         1   14[BANK0 ] unsigned char 
 18973 ;; Return value:  Size  Location     Type
 18974 ;;                  1    wreg      unsigned char 
 18975 ;; Registers used:
 18976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18977 ;; Tracked objects:
 18978 ;;		On entry : 0/0
 18979 ;;		On exit  : 0/0
 18980 ;;		Unchanged: 0/0
 18981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18982 ;;      Params:         0       0       0       0       0       0       0       0       0
 18983 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18984 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18985 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18986 ;;Total ram usage:        1 bytes
 18987 ;; Hardware stack levels used:    1
 18988 ;; Hardware stack levels required when called:    7
 18989 ;; This function calls:
 18990 ;;		_ENC424J600_readControlRegisterUnbanked
 18991 ;; This function is called by:
 18992 ;;		_ethernetController_newPacketAvailable
 18993 ;;		_ethernetController_getCurrentPacketCount
 18994 ;; This function uses a non-reentrant model
 18995 ;;
 18996                           
 18997                           	psect	text82
 18998  0045D8                     __ptext82:
 18999                           	opt stack 0
 19000  0045D8                     _ENC424J600_getPacketCount:
 19001                           	opt stack 21
 19002                           
 19003                           ;ENC424J600.c: 598: uint8_t lowByte = 0;
 19004                           
 19005                           ;incstack = 0
 19006  0045D8  0E00               	movlw	0
 19007  0045DA  0100               	movlb	0	; () banked
 19008  0045DC  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 19009                           
 19010                           ; BSR set to: 0
 19011                           ;ENC424J600.c: 599: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 19012  0045DE  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 19013  0045E0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19014  0045E2  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 19015  0045E4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19016  0045E6  0E1A               	movlw	26
 19017  0045E8  EC2E  F021         	call	_ENC424J600_readControlRegisterUnbanked
 19018                           
 19019                           ;ENC424J600.c: 600: return (uint32_t) lowByte;
 19020  0045EC  0100               	movlb	0	; () banked
 19021  0045EE  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 19022  0045F0  0012               	return	
 19023  0045F2                     __end_of_ENC424J600_getPacketCount:
 19024                           	opt stack 0
 19025                           tblptru	equ	0xFF8
 19026                           tblptrh	equ	0xFF7
 19027                           tblptrl	equ	0xFF6
 19028                           tablat	equ	0xFF5
 19029                           prodh	equ	0xFF4
 19030                           prodl	equ	0xFF3
 19031                           intcon	equ	0xFF2
 19032                           intcon3	equ	0xFF0
 19033                           indf0	equ	0xFEF
 19034                           postinc0	equ	0xFEE
 19035                           plusw0	equ	0xFEB
 19036                           fsr0h	equ	0xFEA
 19037                           fsr0l	equ	0xFE9
 19038                           wreg	equ	0xFE8
 19039                           indf1	equ	0xFE7
 19040                           postinc1	equ	0xFE6
 19041                           postdec1	equ	0xFE5
 19042                           plusw1	equ	0xFE3
 19043                           fsr1h	equ	0xFE2
 19044                           fsr1l	equ	0xFE1
 19045                           indf2	equ	0xFDF
 19046                           postinc2	equ	0xFDE
 19047                           postdec2	equ	0xFDD
 19048                           plusw2	equ	0xFDB
 19049                           fsr2h	equ	0xFDA
 19050                           fsr2l	equ	0xFD9
 19051                           status	equ	0xFD8
 19052                           
 19053 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 19054 ;; Defined at:
 19055 ;;		line 626 in file "src/enc424j600/ENC424J600.c"
 19056 ;; Parameters:    Size  Location     Type
 19057 ;;  addr            1    wreg     unsigned char 
 19058 ;;  data            2   10[BANK0 ] PTR unsigned char 
 19059 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_readPHYRegister@highByte(1), 
 19060 ;;		 -> ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_disableAutoMACInsertion@te
      +mp(1), ENC424J600_enableAutoMACInsertion@temp(1), 
 19061 ;;		 -> ENC424J600_getPacketCount@lowByte(1), ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDS
      +tatus@data(1), ethernetController_updateLinkStatus@temp(1), 
 19062 ;;		 -> mac.address(6), ethernetController_getMacAddress@mac(6), ethernetController_getSiliconRevision@data(1), ethernet
      +Controller_checkDeviceId@data(1), 
 19063 ;;		 -> ethernetController_softReset@receivedData(2), 
 19064 ;; Auto vars:     Size  Location     Type
 19065 ;;  addr            1   12[BANK0 ] unsigned char 
 19066 ;;  opcode          1   13[BANK0 ] unsigned char 
 19067 ;; Return value:  Size  Location     Type
 19068 ;;                  1    wreg      void 
 19069 ;; Registers used:
 19070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19071 ;; Tracked objects:
 19072 ;;		On entry : 0/0
 19073 ;;		On exit  : 0/0
 19074 ;;		Unchanged: 0/0
 19075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19076 ;;      Params:         0       2       0       0       0       0       0       0       0
 19077 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19078 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19079 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19080 ;;Total ram usage:        4 bytes
 19081 ;; Hardware stack levels used:    1
 19082 ;; Hardware stack levels required when called:    6
 19083 ;; This function calls:
 19084 ;;		_ENC424J600_readSPI
 19085 ;;		_ENC424J600_writeSPI
 19086 ;; This function is called by:
 19087 ;;		_ethernetController_softReset
 19088 ;;		_ethernetController_checkDeviceId
 19089 ;;		_ethernetController_getSiliconRevision
 19090 ;;		_ethernetController_getMacAddress
 19091 ;;		_ethernetController_updateLinkStatus
 19092 ;;		_ethernetController_setLEDStatus
 19093 ;;		_ethernetController_setLEDConfiguration
 19094 ;;		_ENC424J600_getPacketCount
 19095 ;;		_ENC424J600_enableAutoMACInsertion
 19096 ;;		_ENC424J600_readPHYRegister
 19097 ;;		_ENC424J600_getInterruptFlags
 19098 ;;		_ENC424J600_clearInterruptFlag
 19099 ;;		_ENC424J600_disableAutoMACInsertion
 19100 ;; This function uses a non-reentrant model
 19101 ;;
 19102                           
 19103                           	psect	text83
 19104  00425C                     __ptext83:
 19105                           	opt stack 0
 19106  00425C                     _ENC424J600_readControlRegisterUnbanked:
 19107                           	opt stack 21
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;incstack = 0
 19111                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 19112  00425C  0100               	movlb	0	; () banked
 19113  00425E  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 19114                           
 19115                           ;ENC424J600.c: 627: uint8_t opcode = 0x20;
 19116  004260  0E20               	movlw	32
 19117  004262  0100               	movlb	0	; () banked
 19118  004264  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 19119                           
 19120                           ; BSR set to: 0
 19121                           ;ENC424J600.c: 628: PORTBbits.RB4=0;
 19122  004266  9881               	bcf	3969,4,c	;volatile
 19123                           
 19124                           ; BSR set to: 0
 19125                           ;ENC424J600.c: 629: ENC424J600_writeSPI(&opcode);
 19126  004268  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 19127  00426A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19128  00426C  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 19129  00426E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19130  004270  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19131                           
 19132                           ;ENC424J600.c: 630: ENC424J600_writeSPI(&addr);
 19133  004274  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 19134  004276  0100               	movlb	0	; () banked
 19135  004278  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19136  00427A  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 19137  00427C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19138  00427E  EC98  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19139                           
 19140                           ;ENC424J600.c: 631: ENC424J600_readSPI(data);
 19141  004282  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 19142  004286  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 19143  00428A  ECC8  F01D         	call	_ENC424J600_readSPI	;wreg free
 19144                           
 19145                           ;ENC424J600.c: 632: PORTBbits.RB4=1;
 19146  00428E  8881               	bsf	3969,4,c	;volatile
 19147  004290  0012               	return		;funcret
 19148  004292                     __end_of_ENC424J600_readControlRegisterUnbanked:
 19149                           	opt stack 0
 19150                           tblptru	equ	0xFF8
 19151                           tblptrh	equ	0xFF7
 19152                           tblptrl	equ	0xFF6
 19153                           tablat	equ	0xFF5
 19154                           prodh	equ	0xFF4
 19155                           prodl	equ	0xFF3
 19156                           intcon	equ	0xFF2
 19157                           intcon3	equ	0xFF0
 19158                           indf0	equ	0xFEF
 19159                           postinc0	equ	0xFEE
 19160                           plusw0	equ	0xFEB
 19161                           fsr0h	equ	0xFEA
 19162                           fsr0l	equ	0xFE9
 19163                           wreg	equ	0xFE8
 19164                           indf1	equ	0xFE7
 19165                           postinc1	equ	0xFE6
 19166                           postdec1	equ	0xFE5
 19167                           plusw1	equ	0xFE3
 19168                           fsr1h	equ	0xFE2
 19169                           fsr1l	equ	0xFE1
 19170                           indf2	equ	0xFDF
 19171                           postinc2	equ	0xFDE
 19172                           postdec2	equ	0xFDD
 19173                           plusw2	equ	0xFDB
 19174                           fsr2h	equ	0xFDA
 19175                           fsr2l	equ	0xFD9
 19176                           status	equ	0xFD8
 19177                           
 19178 ;; *************** function _ENC424J600_writeSPI *****************
 19179 ;; Defined at:
 19180 ;;		line 651 in file "src/enc424j600/ENC424J600.c"
 19181 ;; Parameters:    Size  Location     Type
 19182 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19183 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits
      +(1), ENC424J600_readPHYRegister@PHYaddress(1), 
 19184 ;;		 -> ENC424J600_writeSingleByte@opcode(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControlRegi
      +sterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 19185 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enable
      +AutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), 
 19186 ;;		 -> ENC424J600_setRXTailPointer@lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), ENC424J600_setRXBufferSt
      +artAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), 
 19187 ;;		 -> ENC424J600_setERXDATAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), ENC424J600_setGPDATARea
      +dPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), 
 19188 ;;		 -> ENC424J600_setGPDATAReadPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), ENC424J600_setGPDATAWri
      +tePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), 
 19189 ;;		 -> ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), ENC424J600_setTXLength@highBy
      +te(1), ENC424J600_setTXLength@lowByte(1), 
 19190 ;;		 -> ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDStatus@data(1), ethernetController_drop
      +Packet@opcode(1), ethernetController_streamFromRXBuffer@opcode(1), 
 19191 ;;		 -> ethernetController_getRSV@opcode(1), ethernetController_getEtherTypeField@opcode(1), ethernetController_getSourc
      +eMACAddress@opcode(1), ethernetController_getDestinationMACAddress@opcode(1), 
 19192 ;;		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@highByt
      +e(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), ethernetController_writeDestinationMACAddress@opcode(1)
      +, 
 19193 ;;		 -> ethernetController_writeDestinationMACAddress@data(6), ethernetController_streamToTransmitBuffer@data(1), ethern
      +etController_streamToTransmitBuffer@opcode(1), mac.address(6), 
 19194 ;;		 -> ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19197 ;; Return value:  Size  Location     Type
 19198 ;;                  1    wreg      void 
 19199 ;; Registers used:
 19200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19201 ;; Tracked objects:
 19202 ;;		On entry : 0/0
 19203 ;;		On exit  : 0/0
 19204 ;;		Unchanged: 0/0
 19205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19206 ;;      Params:         0       2       0       0       0       0       0       0       0
 19207 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19208 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19209 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19210 ;;Total ram usage:       10 bytes
 19211 ;; Hardware stack levels used:    1
 19212 ;; Hardware stack levels required when called:    5
 19213 ;; This function calls:
 19214 ;;		_ENC424J600_initSPI
 19215 ;; This function is called by:
 19216 ;;		_ethernetController_streamToTransmitBuffer
 19217 ;;		_ethernetController_writeDestinationMACAddress
 19218 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19219 ;;		_ethernetController_getSourceMACAddress
 19220 ;;		_ethernetController_getEtherTypeField
 19221 ;;		_ethernetController_getRSV
 19222 ;;		_ethernetController_streamFromRXBuffer
 19223 ;;		_ethernetController_dropPacket
 19224 ;;		_ENC424J600_setGPDATAWritePointer
 19225 ;;		_ENC424J600_setERXDATAReadPointer
 19226 ;;		_ENC424J600_writeControlRegisterUnbanked
 19227 ;;		_ENC424J600_readControlRegisterUnbanked
 19228 ;;		_ENC424J600_writeSingleByte
 19229 ;;		_ethernetController_getDestinationMACAddress
 19230 ;;		_ENC424J600_setGPDATAReadPointer
 19231 ;; This function uses a non-reentrant model
 19232 ;;
 19233                           
 19234                           	psect	text84
 19235  003D30                     __ptext84:
 19236                           	opt stack 0
 19237  003D30                     _ENC424J600_writeSPI:
 19238                           	opt stack 22
 19239                           
 19240                           ;ENC424J600.c: 653: uint32_t timeoutCounter = 0;
 19241                           
 19242                           ;incstack = 0
 19243  003D30  0E00               	movlw	0
 19244  003D32  0100               	movlb	0	; () banked
 19245  003D34  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 19246  003D36  0E00               	movlw	0
 19247  003D38  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 19248  003D3A  0E00               	movlw	0
 19249  003D3C  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 19250  003D3E  0E00               	movlw	0
 19251  003D40  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 19252                           
 19253                           ; BSR set to: 0
 19254                           ;ENC424J600.c: 654: SSP1BUF = *data;
 19255  003D42  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 19256  003D46  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 19257  003D4A  50DF               	movf	indf2,w,c
 19258  003D4C  6EC9               	movwf	4041,c	;volatile
 19259  003D4E                     
 19260                           ; BSR set to: 0
 19261                           
 19262                           ; BSR set to: 0
 19263  003D4E  B0C7               	btfsc	4039,0,c	;volatile
 19264  003D50  D015               	goto	u7600
 19265                           
 19266                           ; BSR set to: 0
 19267  003D52  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 19268  003D56  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 19269  003D5A  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 19270  003D5E  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 19271  003D62  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 19272  003D64  0E00               	movlw	0
 19273  003D66  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 19274  003D68  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 19275  003D6A  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 19276  003D6C  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 19277  003D6E  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 19278  003D70  E105               	bnz	l6722
 19279  003D72  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 19280  003D74  0E0F               	movlw	15
 19281  003D76  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 19282  003D78  A0D8               	btfss	status,0,c
 19283  003D7A  D7E9               	goto	l273
 19284  003D7C                     u7600:
 19285  003D7C                     l6722:
 19286                           
 19287                           ; BSR set to: 0
 19288                           ;ENC424J600.c: 656: if (timeoutCounter >= 0xfff) {
 19289  003D7C  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 19290  003D7E  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 19291  003D80  E105               	bnz	u7610
 19292  003D82  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 19293  003D84  0E0F               	movlw	15
 19294  003D86  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 19295  003D88  A0D8               	btfss	status,0,c
 19296  003D8A  0012               	return	
 19297  003D8C                     u7610:
 19298                           
 19299                           ; BSR set to: 0
 19300                           ;ENC424J600.c: 657: PORTBbits.RB4=1;
 19301  003D8C  8881               	bsf	3969,4,c	;volatile
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;ENC424J600.c: 658: ENC424J600_initSPI();
 19305  003D8E  ECD1  F022         	call	_ENC424J600_initSPI	;wreg free
 19306                           
 19307                           ;ENC424J600.c: 659: return;
 19308  003D92  0012               	return	
 19309  003D94                     __end_of_ENC424J600_writeSPI:
 19310                           	opt stack 0
 19311                           tblptru	equ	0xFF8
 19312                           tblptrh	equ	0xFF7
 19313                           tblptrl	equ	0xFF6
 19314                           tablat	equ	0xFF5
 19315                           prodh	equ	0xFF4
 19316                           prodl	equ	0xFF3
 19317                           intcon	equ	0xFF2
 19318                           intcon3	equ	0xFF0
 19319                           indf0	equ	0xFEF
 19320                           postinc0	equ	0xFEE
 19321                           plusw0	equ	0xFEB
 19322                           fsr0h	equ	0xFEA
 19323                           fsr0l	equ	0xFE9
 19324                           wreg	equ	0xFE8
 19325                           indf1	equ	0xFE7
 19326                           postinc1	equ	0xFE6
 19327                           postdec1	equ	0xFE5
 19328                           plusw1	equ	0xFE3
 19329                           fsr1h	equ	0xFE2
 19330                           fsr1l	equ	0xFE1
 19331                           indf2	equ	0xFDF
 19332                           postinc2	equ	0xFDE
 19333                           postdec2	equ	0xFDD
 19334                           plusw2	equ	0xFDB
 19335                           fsr2h	equ	0xFDA
 19336                           fsr2l	equ	0xFD9
 19337                           status	equ	0xFD8
 19338                           
 19339 ;; *************** function _ENC424J600_readSPI *****************
 19340 ;; Defined at:
 19341 ;;		line 663 in file "src/enc424j600/ENC424J600.c"
 19342 ;; Parameters:    Size  Location     Type
 19343 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19344 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_readPHYRegister@highByte(1), 
 19345 ;;		 -> ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_disableAutoMACInsertion@te
      +mp(1), ENC424J600_enableAutoMACInsertion@temp(1), 
 19346 ;;		 -> ENC424J600_getPacketCount@lowByte(1), ethernetController_setLEDConfiguration@data(1), ethernetController_setLEDS
      +tatus@data(1), ethernetController_updateLinkStatus@temp(1), 
 19347 ;;		 -> ethernetController_dropPacket@newPointerH(1), ethernetController_dropPacket@newPointerL(1), ethernetController_s
      +treamFromRXBuffer@temp(1), ethernetController_streamFromRXBuffer@foo(1), 
 19348 ;;		 -> ethernetController_streamFromRXBuffer@rsvBytes(6), ethernetController_streamFromRXBuffer@newPointerH(1), etherne
      +tController_streamFromRXBuffer@newPointerL(1), ethernetController_getRSV@temp(6), 
 19349 ;;		 -> ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherTypeField@highByte(1), ethernetContr
      +oller_getSourceMACAddress@temp(1), ethernetController_getDestinationMACAddress@temp(1), 
 19350 ;;		 -> mac.address(6), ethernetController_getMacAddress@mac(6), ethernetController_getSiliconRevision@data(1), ethernet
      +Controller_checkDeviceId@data(1), 
 19351 ;;		 -> ethernetController_softReset@receivedData(2), 
 19352 ;; Auto vars:     Size  Location     Type
 19353 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19354 ;; Return value:  Size  Location     Type
 19355 ;;                  1    wreg      void 
 19356 ;; Registers used:
 19357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19358 ;; Tracked objects:
 19359 ;;		On entry : 0/0
 19360 ;;		On exit  : 0/0
 19361 ;;		Unchanged: 0/0
 19362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19363 ;;      Params:         0       2       0       0       0       0       0       0       0
 19364 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19365 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19366 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19367 ;;Total ram usage:       10 bytes
 19368 ;; Hardware stack levels used:    1
 19369 ;; Hardware stack levels required when called:    5
 19370 ;; This function calls:
 19371 ;;		_ENC424J600_initSPI
 19372 ;; This function is called by:
 19373 ;;		_ethernetController_getSourceMACAddress
 19374 ;;		_ethernetController_getEtherTypeField
 19375 ;;		_ethernetController_getRSV
 19376 ;;		_ethernetController_streamFromRXBuffer
 19377 ;;		_ethernetController_dropPacket
 19378 ;;		_ENC424J600_readControlRegisterUnbanked
 19379 ;;		_ethernetController_getDestinationMACAddress
 19380 ;; This function uses a non-reentrant model
 19381 ;;
 19382                           
 19383                           	psect	text85
 19384  003B90                     __ptext85:
 19385                           	opt stack 0
 19386  003B90                     _ENC424J600_readSPI:
 19387                           	opt stack 21
 19388                           
 19389                           ;ENC424J600.c: 665: uint32_t timeoutCounter = 0;
 19390                           
 19391                           ;incstack = 0
 19392  003B90  0E00               	movlw	0
 19393  003B92  0100               	movlb	0	; () banked
 19394  003B94  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 19395  003B96  0E00               	movlw	0
 19396  003B98  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 19397  003B9A  0E00               	movlw	0
 19398  003B9C  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 19399  003B9E  0E00               	movlw	0
 19400  003BA0  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 19401                           
 19402                           ;ENC424J600.c: 666: SSP1BUF = 0x00;
 19403  003BA2  0E00               	movlw	0
 19404  003BA4  6EC9               	movwf	4041,c	;volatile
 19405  003BA6                     
 19406                           ; BSR set to: 0
 19407                           
 19408                           ; BSR set to: 0
 19409  003BA6  B0C7               	btfsc	4039,0,c	;volatile
 19410  003BA8  D015               	goto	u8030
 19411                           
 19412                           ; BSR set to: 0
 19413  003BAA  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 19414  003BAE  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 19415  003BB2  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 19416  003BB6  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 19417  003BBA  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 19418  003BBC  0E00               	movlw	0
 19419  003BBE  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 19420  003BC0  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 19421  003BC2  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 19422  003BC4  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 19423  003BC6  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 19424  003BC8  E105               	bnz	l6992
 19425  003BCA  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 19426  003BCC  0E0F               	movlw	15
 19427  003BCE  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 19428  003BD0  A0D8               	btfss	status,0,c
 19429  003BD2  D7E9               	goto	l282
 19430  003BD4                     u8030:
 19431  003BD4                     l6992:
 19432                           
 19433                           ; BSR set to: 0
 19434                           ;ENC424J600.c: 668: if (timeoutCounter >= 0xfff) {
 19435  003BD4  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 19436  003BD6  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 19437  003BD8  E105               	bnz	u8040
 19438  003BDA  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 19439  003BDC  0E0F               	movlw	15
 19440  003BDE  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 19441  003BE0  A0D8               	btfss	status,0,c
 19442  003BE2  D004               	goto	l286
 19443  003BE4                     u8040:
 19444                           
 19445                           ; BSR set to: 0
 19446                           ;ENC424J600.c: 669: PORTBbits.RB4=1;
 19447  003BE4  8881               	bsf	3969,4,c	;volatile
 19448                           
 19449                           ; BSR set to: 0
 19450                           ;ENC424J600.c: 670: ENC424J600_initSPI();
 19451  003BE6  ECD1  F022         	call	_ENC424J600_initSPI	;wreg free
 19452                           
 19453                           ;ENC424J600.c: 671: return;
 19454  003BEA  0012               	return	
 19455  003BEC                     l286:
 19456                           
 19457                           ;ENC424J600.c: 672: }
 19458                           ;ENC424J600.c: 673: *data = SSP1BUF;
 19459  003BEC  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 19460  003BF0  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 19461  003BF4  CFC9 FFDF          	movff	4041,indf2	;volatile
 19462  003BF8  0012               	return		;funcret
 19463  003BFA                     __end_of_ENC424J600_readSPI:
 19464                           	opt stack 0
 19465                           tblptru	equ	0xFF8
 19466                           tblptrh	equ	0xFF7
 19467                           tblptrl	equ	0xFF6
 19468                           tablat	equ	0xFF5
 19469                           prodh	equ	0xFF4
 19470                           prodl	equ	0xFF3
 19471                           intcon	equ	0xFF2
 19472                           intcon3	equ	0xFF0
 19473                           indf0	equ	0xFEF
 19474                           postinc0	equ	0xFEE
 19475                           plusw0	equ	0xFEB
 19476                           fsr0h	equ	0xFEA
 19477                           fsr0l	equ	0xFE9
 19478                           wreg	equ	0xFE8
 19479                           indf1	equ	0xFE7
 19480                           postinc1	equ	0xFE6
 19481                           postdec1	equ	0xFE5
 19482                           plusw1	equ	0xFE3
 19483                           fsr1h	equ	0xFE2
 19484                           fsr1l	equ	0xFE1
 19485                           indf2	equ	0xFDF
 19486                           postinc2	equ	0xFDE
 19487                           postdec2	equ	0xFDD
 19488                           plusw2	equ	0xFDB
 19489                           fsr2h	equ	0xFDA
 19490                           fsr2l	equ	0xFD9
 19491                           status	equ	0xFD8
 19492                           
 19493 ;; *************** function _ENC424J600_initSPI *****************
 19494 ;; Defined at:
 19495 ;;		line 635 in file "src/enc424j600/ENC424J600.c"
 19496 ;; Parameters:    Size  Location     Type
 19497 ;;		None
 19498 ;; Auto vars:     Size  Location     Type
 19499 ;;		None
 19500 ;; Return value:  Size  Location     Type
 19501 ;;                  1    wreg      void 
 19502 ;; Registers used:
 19503 ;;		None
 19504 ;; Tracked objects:
 19505 ;;		On entry : 0/0
 19506 ;;		On exit  : 0/0
 19507 ;;		Unchanged: 0/0
 19508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19509 ;;      Params:         0       0       0       0       0       0       0       0       0
 19510 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19511 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19512 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19513 ;;Total ram usage:        0 bytes
 19514 ;; Hardware stack levels used:    1
 19515 ;; Hardware stack levels required when called:    4
 19516 ;; This function calls:
 19517 ;;		Nothing
 19518 ;; This function is called by:
 19519 ;;		_ethernetController_init
 19520 ;;		_ENC424J600_writeSPI
 19521 ;;		_ENC424J600_readSPI
 19522 ;; This function uses a non-reentrant model
 19523 ;;
 19524                           
 19525                           	psect	text86
 19526  0045A2                     __ptext86:
 19527                           	opt stack 0
 19528  0045A2                     _ENC424J600_initSPI:
 19529                           	opt stack 22
 19530                           
 19531                           ;ENC424J600.c: 636: SSP1CON1bits.SSPEN = 0;
 19532                           
 19533                           ;incstack = 0
 19534  0045A2  9AC6               	bcf	4038,5,c	;volatile
 19535                           
 19536                           ;ENC424J600.c: 637: SSP1STATbits.CKE = 1;
 19537  0045A4  8CC7               	bsf	4039,6,c	;volatile
 19538                           
 19539                           ;ENC424J600.c: 639: TRISBbits.TRISB0 = 1;
 19540  0045A6  8093               	bsf	3987,0,c	;volatile
 19541                           
 19542                           ;ENC424J600.c: 640: ANSELBbits.ANSB0 = 0;
 19543  0045A8  010F               	movlb	15	; () banked
 19544  0045AA  915C               	bcf	92,0,b	;volatile
 19545                           
 19546                           ;ENC424J600.c: 641: TRISBbits.TRISB1 = 0;
 19547  0045AC  9293               	bcf	3987,1,c	;volatile
 19548                           
 19549                           ;ENC424J600.c: 642: ANSELBbits.ANSB1 = 0;
 19550  0045AE  935C               	bcf	92,1,b	;volatile
 19551                           
 19552                           ;ENC424J600.c: 643: TRISBbits.TRISB3 = 0;
 19553  0045B0  9693               	bcf	3987,3,c	;volatile
 19554                           
 19555                           ;ENC424J600.c: 644: ANSELBbits.ANSB3 = 0;
 19556  0045B2  975C               	bcf	92,3,b	;volatile
 19557                           
 19558                           ;ENC424J600.c: 645: TRISBbits.TRISB4 = 0;
 19559  0045B4  9893               	bcf	3987,4,c	;volatile
 19560                           
 19561                           ;ENC424J600.c: 646: ANSELBbits.ANSB4 = 0;
 19562  0045B6  995C               	bcf	92,4,b	;volatile
 19563                           
 19564                           ;ENC424J600.c: 647: PORTBbits.RB4=1;
 19565  0045B8  8881               	bsf	3969,4,c	;volatile
 19566                           
 19567                           ;ENC424J600.c: 648: SSP1CON1bits.SSPEN = 1;
 19568  0045BA  8AC6               	bsf	4038,5,c	;volatile
 19569                           
 19570                           ; BSR set to: 15
 19571  0045BC  0012               	return		;funcret
 19572  0045BE                     __end_of_ENC424J600_initSPI:
 19573                           	opt stack 0
 19574                           tblptru	equ	0xFF8
 19575                           tblptrh	equ	0xFF7
 19576                           tblptrl	equ	0xFF6
 19577                           tablat	equ	0xFF5
 19578                           prodh	equ	0xFF4
 19579                           prodl	equ	0xFF3
 19580                           intcon	equ	0xFF2
 19581                           intcon3	equ	0xFF0
 19582                           indf0	equ	0xFEF
 19583                           postinc0	equ	0xFEE
 19584                           plusw0	equ	0xFEB
 19585                           fsr0h	equ	0xFEA
 19586                           fsr0l	equ	0xFE9
 19587                           wreg	equ	0xFE8
 19588                           indf1	equ	0xFE7
 19589                           postinc1	equ	0xFE6
 19590                           postdec1	equ	0xFE5
 19591                           plusw1	equ	0xFE3
 19592                           fsr1h	equ	0xFE2
 19593                           fsr1l	equ	0xFE1
 19594                           indf2	equ	0xFDF
 19595                           postinc2	equ	0xFDE
 19596                           postdec2	equ	0xFDD
 19597                           plusw2	equ	0xFDB
 19598                           fsr2h	equ	0xFDA
 19599                           fsr2l	equ	0xFD9
 19600                           status	equ	0xFD8
 19601                           
 19602 ;; *************** function _UARTInit *****************
 19603 ;; Defined at:
 19604 ;;		line 26 in file "src/system/uart.c"
 19605 ;; Parameters:    Size  Location     Type
 19606 ;;		None
 19607 ;; Auto vars:     Size  Location     Type
 19608 ;;		None
 19609 ;; Return value:  Size  Location     Type
 19610 ;;                  1    wreg      void 
 19611 ;; Registers used:
 19612 ;;		wreg, status,2
 19613 ;; Tracked objects:
 19614 ;;		On entry : 0/0
 19615 ;;		On exit  : 0/0
 19616 ;;		Unchanged: 0/0
 19617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19618 ;;      Params:         0       0       0       0       0       0       0       0       0
 19619 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19620 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19621 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19622 ;;Total ram usage:        0 bytes
 19623 ;; Hardware stack levels used:    1
 19624 ;; Hardware stack levels required when called:    4
 19625 ;; This function calls:
 19626 ;;		Nothing
 19627 ;; This function is called by:
 19628 ;;		_main
 19629 ;; This function uses a non-reentrant model
 19630 ;;
 19631                           
 19632                           	psect	text87
 19633  00462E                     __ptext87:
 19634                           	opt stack 0
 19635  00462E                     _UARTInit:
 19636                           	opt stack 26
 19637                           
 19638                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 19639                           
 19640                           ; BSR set to: 15
 19641                           ;incstack = 0
 19642  00462E  8AAC               	bsf	4012,5,c	;volatile
 19643                           
 19644                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 19645  004630  98AC               	bcf	4012,4,c	;volatile
 19646                           
 19647                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 19648  004632  8EAB               	bsf	4011,7,c	;volatile
 19649                           
 19650                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 19651  004634  8CAC               	bsf	4012,6,c	;volatile
 19652                           
 19653                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 19654  004636  80AC               	bsf	4012,0,c	;volatile
 19655                           
 19656                           ;uart.c: 32: SPBRG = 3;
 19657  004638  0E03               	movlw	3
 19658  00463A  6EAF               	movwf	4015,c	;volatile
 19659  00463C  0012               	return		;funcret
 19660  00463E                     __end_of_UARTInit:
 19661                           	opt stack 0
 19662                           tblptru	equ	0xFF8
 19663                           tblptrh	equ	0xFF7
 19664                           tblptrl	equ	0xFF6
 19665                           tablat	equ	0xFF5
 19666                           prodh	equ	0xFF4
 19667                           prodl	equ	0xFF3
 19668                           intcon	equ	0xFF2
 19669                           intcon3	equ	0xFF0
 19670                           indf0	equ	0xFEF
 19671                           postinc0	equ	0xFEE
 19672                           plusw0	equ	0xFEB
 19673                           fsr0h	equ	0xFEA
 19674                           fsr0l	equ	0xFE9
 19675                           wreg	equ	0xFE8
 19676                           indf1	equ	0xFE7
 19677                           postinc1	equ	0xFE6
 19678                           postdec1	equ	0xFE5
 19679                           plusw1	equ	0xFE3
 19680                           fsr1h	equ	0xFE2
 19681                           fsr1l	equ	0xFE1
 19682                           indf2	equ	0xFDF
 19683                           postinc2	equ	0xFDE
 19684                           postdec2	equ	0xFDD
 19685                           plusw2	equ	0xFDB
 19686                           fsr2h	equ	0xFDA
 19687                           fsr2l	equ	0xFD9
 19688                           status	equ	0xFD8
 19689                           
 19690 ;; *************** function _ARP_initTable *****************
 19691 ;; Defined at:
 19692 ;;		line 268 in file "src/stack/protocols/arp.c"
 19693 ;; Parameters:    Size  Location     Type
 19694 ;;		None
 19695 ;; Auto vars:     Size  Location     Type
 19696 ;;  i               1   38[BANK0 ] unsigned char 
 19697 ;;  mac             6   28[BANK0 ] struct macaddress
 19698 ;;  ip              4   34[BANK0 ] struct ipv4_address
 19699 ;; Return value:  Size  Location     Type
 19700 ;;                  1    wreg      void 
 19701 ;; Registers used:
 19702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19703 ;; Tracked objects:
 19704 ;;		On entry : 0/0
 19705 ;;		On exit  : 0/0
 19706 ;;		Unchanged: 0/0
 19707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19708 ;;      Params:         0       0       0       0       0       0       0       0       0
 19709 ;;      Locals:         0      11       0       0       0       0       0       0       0
 19710 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19711 ;;      Totals:         0      11       0       0       0       0       0       0       0
 19712 ;;Total ram usage:       11 bytes
 19713 ;; Hardware stack levels used:    1
 19714 ;; Hardware stack levels required when called:    5
 19715 ;; This function calls:
 19716 ;;		_ARP_setNewEntry
 19717 ;;		_ipv4_setToAllZero
 19718 ;;		_mac_setAllZero
 19719 ;; This function is called by:
 19720 ;;		_main
 19721 ;; This function uses a non-reentrant model
 19722 ;;
 19723                           
 19724                           	psect	text88
 19725  003CCA                     __ptext88:
 19726                           	opt stack 0
 19727  003CCA                     _ARP_initTable:
 19728                           	opt stack 25
 19729                           
 19730                           ;arp.c: 269: macaddress_t mac;
 19731                           ;arp.c: 270: ipv4_address_t ip;
 19732                           ;arp.c: 271: mac_setAllZero(&mac);
 19733                           
 19734                           ;incstack = 0
 19735  003CCA  0E7C               	movlw	low ARP_initTable@mac
 19736  003CCC  0100               	movlb	0	; () banked
 19737  003CCE  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 19738  003CD0  0E00               	movlw	high ARP_initTable@mac
 19739  003CD2  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 19740  003CD4  EC4A  F022         	call	_mac_setAllZero	;wreg free
 19741                           
 19742                           ;arp.c: 272: ipv4_setToAllZero(&ip);
 19743  003CD8  0E82               	movlw	low ARP_initTable@ip
 19744  003CDA  0100               	movlb	0	; () banked
 19745  003CDC  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 19746  003CDE  0E00               	movlw	high ARP_initTable@ip
 19747  003CE0  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 19748  003CE2  ECB4  F022         	call	_ipv4_setToAllZero	;wreg free
 19749                           
 19750                           ;arp.c: 273: for (uint8_t i = 0; i < 8; i++)
 19751  003CE6  0E00               	movlw	0
 19752  003CE8  0100               	movlb	0	; () banked
 19753  003CEA  6F86               	movwf	ARP_initTable@i& (0+255),b
 19754  003CEC                     l8622:
 19755                           
 19756                           ; BSR set to: 0
 19757  003CEC  0E07               	movlw	7
 19758  003CEE  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 19759  003CF0  D001               	goto	l921
 19760  003CF2  0012               	return	
 19761  003CF4                     l921:
 19762                           
 19763                           ; BSR set to: 0
 19764                           ;arp.c: 274: ARP_setNewEntry(mac, ip, 0xffffffff);
 19765                           
 19766                           ; BSR set to: 0
 19767  003CF4  EE20  F07C         	lfsr	2,ARP_initTable@mac
 19768  003CF8  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 19769  003CFC  0E05               	movlw	5
 19770  003CFE                     u10761:
 19771  003CFE  CFDB FFEB          	movff	plusw2,plusw0
 19772  003D02  06E8               	decf	wreg,f,c
 19773  003D04  E2FC               	bc	u10761
 19774  003D06  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 19775  003D0A  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 19776  003D0E  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 19777  003D12  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 19778  003D16  0EFF               	movlw	255
 19779  003D18  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 19780  003D1A  0EFF               	movlw	255
 19781  003D1C  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 19782  003D1E  0EFF               	movlw	255
 19783  003D20  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 19784  003D22  0EFF               	movlw	255
 19785  003D24  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 19786  003D26  EC84  F017         	call	_ARP_setNewEntry	;wreg free
 19787  003D2A  0100               	movlb	0	; () banked
 19788  003D2C  2B86               	incf	ARP_initTable@i& (0+255),f,b
 19789  003D2E  D7DE               	goto	l8622
 19790  003D30                     __end_of_ARP_initTable:
 19791                           	opt stack 0
 19792                           tblptru	equ	0xFF8
 19793                           tblptrh	equ	0xFF7
 19794                           tblptrl	equ	0xFF6
 19795                           tablat	equ	0xFF5
 19796                           prodh	equ	0xFF4
 19797                           prodl	equ	0xFF3
 19798                           intcon	equ	0xFF2
 19799                           intcon3	equ	0xFF0
 19800                           indf0	equ	0xFEF
 19801                           postinc0	equ	0xFEE
 19802                           plusw0	equ	0xFEB
 19803                           fsr0h	equ	0xFEA
 19804                           fsr0l	equ	0xFE9
 19805                           wreg	equ	0xFE8
 19806                           indf1	equ	0xFE7
 19807                           postinc1	equ	0xFE6
 19808                           postdec1	equ	0xFE5
 19809                           plusw1	equ	0xFE3
 19810                           fsr1h	equ	0xFE2
 19811                           fsr1l	equ	0xFE1
 19812                           indf2	equ	0xFDF
 19813                           postinc2	equ	0xFDE
 19814                           postdec2	equ	0xFDD
 19815                           plusw2	equ	0xFDB
 19816                           fsr2h	equ	0xFDA
 19817                           fsr2l	equ	0xFD9
 19818                           status	equ	0xFD8
 19819                           
 19820 ;; *************** function _mac_setAllZero *****************
 19821 ;; Defined at:
 19822 ;;		line 47 in file "src/eth/mac.c"
 19823 ;; Parameters:    Size  Location     Type
 19824 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 19825 ;;		 -> ARP_initTable@mac(6), 
 19826 ;; Auto vars:     Size  Location     Type
 19827 ;;  i               1    2[BANK0 ] unsigned char 
 19828 ;; Return value:  Size  Location     Type
 19829 ;;                  1    wreg      void 
 19830 ;; Registers used:
 19831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19832 ;; Tracked objects:
 19833 ;;		On entry : 0/0
 19834 ;;		On exit  : 0/0
 19835 ;;		Unchanged: 0/0
 19836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19837 ;;      Params:         0       2       0       0       0       0       0       0       0
 19838 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19839 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19840 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19841 ;;Total ram usage:        3 bytes
 19842 ;; Hardware stack levels used:    1
 19843 ;; Hardware stack levels required when called:    4
 19844 ;; This function calls:
 19845 ;;		Nothing
 19846 ;; This function is called by:
 19847 ;;		_ARP_initTable
 19848 ;; This function uses a non-reentrant model
 19849 ;;
 19850                           
 19851                           	psect	text89
 19852  004494                     __ptext89:
 19853                           	opt stack 0
 19854  004494                     _mac_setAllZero:
 19855                           	opt stack 25
 19856                           
 19857                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;incstack = 0
 19861  004494  0E00               	movlw	0
 19862  004496  0100               	movlb	0	; () banked
 19863  004498  6F62               	movwf	mac_setAllZero@i& (0+255),b
 19864  00449A                     l8414:
 19865                           
 19866                           ; BSR set to: 0
 19867  00449A  0E05               	movlw	5
 19868  00449C  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 19869  00449E  D001               	goto	l377
 19870  0044A0  0012               	return	
 19871  0044A2                     l377:
 19872                           
 19873                           ; BSR set to: 0
 19874                           ;mac.c: 49: mac->address[i] = 0x00;
 19875                           
 19876                           ; BSR set to: 0
 19877  0044A2  5162               	movf	mac_setAllZero@i& (0+255),w,b
 19878  0044A4  0D01               	mullw	1
 19879  0044A6  50F3               	movf	prodl,w,c
 19880  0044A8  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 19881  0044AA  6ED9               	movwf	fsr2l,c
 19882  0044AC  50F4               	movf	prodh,w,c
 19883  0044AE  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 19884  0044B0  6EDA               	movwf	fsr2h,c
 19885  0044B2  0E00               	movlw	0
 19886  0044B4  6EDF               	movwf	indf2,c
 19887                           
 19888                           ; BSR set to: 0
 19889  0044B6  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 19890  0044B8  D7F0               	goto	l8414
 19891  0044BA                     __end_of_mac_setAllZero:
 19892                           	opt stack 0
 19893                           tblptru	equ	0xFF8
 19894                           tblptrh	equ	0xFF7
 19895                           tblptrl	equ	0xFF6
 19896                           tablat	equ	0xFF5
 19897                           prodh	equ	0xFF4
 19898                           prodl	equ	0xFF3
 19899                           intcon	equ	0xFF2
 19900                           intcon3	equ	0xFF0
 19901                           indf0	equ	0xFEF
 19902                           postinc0	equ	0xFEE
 19903                           plusw0	equ	0xFEB
 19904                           fsr0h	equ	0xFEA
 19905                           fsr0l	equ	0xFE9
 19906                           wreg	equ	0xFE8
 19907                           indf1	equ	0xFE7
 19908                           postinc1	equ	0xFE6
 19909                           postdec1	equ	0xFE5
 19910                           plusw1	equ	0xFE3
 19911                           fsr1h	equ	0xFE2
 19912                           fsr1l	equ	0xFE1
 19913                           indf2	equ	0xFDF
 19914                           postinc2	equ	0xFDE
 19915                           postdec2	equ	0xFDD
 19916                           plusw2	equ	0xFDB
 19917                           fsr2h	equ	0xFDA
 19918                           fsr2l	equ	0xFD9
 19919                           status	equ	0xFD8
 19920                           
 19921 ;; *************** function _ipv4_setToAllZero *****************
 19922 ;; Defined at:
 19923 ;;		line 186 in file "src/stack/protocols/ipv4.c"
 19924 ;; Parameters:    Size  Location     Type
 19925 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 19926 ;;		 -> ARP_initTable@ip(4), 
 19927 ;; Auto vars:     Size  Location     Type
 19928 ;;  i               1    2[BANK0 ] unsigned char 
 19929 ;; Return value:  Size  Location     Type
 19930 ;;                  1    wreg      void 
 19931 ;; Registers used:
 19932 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19933 ;; Tracked objects:
 19934 ;;		On entry : 0/0
 19935 ;;		On exit  : 0/0
 19936 ;;		Unchanged: 0/0
 19937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19938 ;;      Params:         0       2       0       0       0       0       0       0       0
 19939 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19940 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19941 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19942 ;;Total ram usage:        3 bytes
 19943 ;; Hardware stack levels used:    1
 19944 ;; Hardware stack levels required when called:    4
 19945 ;; This function calls:
 19946 ;;		Nothing
 19947 ;; This function is called by:
 19948 ;;		_ARP_initTable
 19949 ;; This function uses a non-reentrant model
 19950 ;;
 19951                           
 19952                           	psect	text90
 19953  004568                     __ptext90:
 19954                           	opt stack 0
 19955  004568                     _ipv4_setToAllZero:
 19956                           	opt stack 25
 19957                           
 19958                           ;ipv4.c: 187: for (uint8_t i = 0; i < 4; i++) {
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;incstack = 0
 19962  004568  0E00               	movlw	0
 19963  00456A  0100               	movlb	0	; () banked
 19964  00456C  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 19965  00456E                     l8476:
 19966                           
 19967                           ; BSR set to: 0
 19968  00456E  0E03               	movlw	3
 19969  004570  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 19970  004572  D001               	goto	l1004
 19971  004574  0012               	return	
 19972  004576                     l1004:
 19973                           
 19974                           ; BSR set to: 0
 19975                           ;ipv4.c: 188: ip->address[0] = 0x00;
 19976                           
 19977                           ; BSR set to: 0
 19978  004576  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 19979  00457A  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 19980  00457E  0E00               	movlw	0
 19981  004580  6EDF               	movwf	indf2,c
 19982                           
 19983                           ; BSR set to: 0
 19984  004582  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 19985  004584  D7F4               	goto	l8476
 19986  004586                     __end_of_ipv4_setToAllZero:
 19987                           	opt stack 0
 19988                           tblptru	equ	0xFF8
 19989                           tblptrh	equ	0xFF7
 19990                           tblptrl	equ	0xFF6
 19991                           tablat	equ	0xFF5
 19992                           prodh	equ	0xFF4
 19993                           prodl	equ	0xFF3
 19994                           intcon	equ	0xFF2
 19995                           intcon3	equ	0xFF0
 19996                           indf0	equ	0xFEF
 19997                           postinc0	equ	0xFEE
 19998                           plusw0	equ	0xFEB
 19999                           fsr0h	equ	0xFEA
 20000                           fsr0l	equ	0xFE9
 20001                           wreg	equ	0xFE8
 20002                           indf1	equ	0xFE7
 20003                           postinc1	equ	0xFE6
 20004                           postdec1	equ	0xFE5
 20005                           plusw1	equ	0xFE3
 20006                           fsr1h	equ	0xFE2
 20007                           fsr1l	equ	0xFE1
 20008                           indf2	equ	0xFDF
 20009                           postinc2	equ	0xFDE
 20010                           postdec2	equ	0xFDD
 20011                           plusw2	equ	0xFDB
 20012                           fsr2h	equ	0xFDA
 20013                           fsr2l	equ	0xFD9
 20014                           status	equ	0xFD8
 20015                           
 20016 ;; *************** function _ARP_setNewEntry *****************
 20017 ;; Defined at:
 20018 ;;		line 252 in file "src/stack/protocols/arp.c"
 20019 ;; Parameters:    Size  Location     Type
 20020 ;;  mac             6    4[BANK0 ] struct macaddress
 20021 ;;  ip              4   10[BANK0 ] struct ipv4_address
 20022 ;;  timestamp       4   14[BANK0 ] unsigned long 
 20023 ;; Auto vars:     Size  Location     Type
 20024 ;;  i               1   27[BANK0 ] unsigned char 
 20025 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 20026 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 20027 ;; Return value:  Size  Location     Type
 20028 ;;                  1    wreg      void 
 20029 ;; Registers used:
 20030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20031 ;; Tracked objects:
 20032 ;;		On entry : 0/0
 20033 ;;		On exit  : 0/0
 20034 ;;		Unchanged: 0/0
 20035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20036 ;;      Params:         0      14       0       0       0       0       0       0       0
 20037 ;;      Locals:         0       6       0       0       0       0       0       0       0
 20038 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20039 ;;      Totals:         0      24       0       0       0       0       0       0       0
 20040 ;;Total ram usage:       24 bytes
 20041 ;; Hardware stack levels used:    1
 20042 ;; Hardware stack levels required when called:    4
 20043 ;; This function calls:
 20044 ;;		Nothing
 20045 ;; This function is called by:
 20046 ;;		_ARP_handleNewPacket
 20047 ;;		_ARP_initTable
 20048 ;; This function uses a non-reentrant model
 20049 ;;
 20050                           
 20051                           	psect	text91
 20052  002F08                     __ptext91:
 20053                           	opt stack 0
 20054  002F08                     _ARP_setNewEntry:
 20055                           	opt stack 23
 20056                           
 20057                           ;arp.c: 253: uint32_t maxSeconds = 0;
 20058                           
 20059                           ; BSR set to: 0
 20060                           ;incstack = 0
 20061  002F08  0E00               	movlw	0
 20062  002F0A  0100               	movlb	0	; () banked
 20063  002F0C  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 20064  002F0E  0E00               	movlw	0
 20065  002F10  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 20066  002F12  0E00               	movlw	0
 20067  002F14  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 20068  002F16  0E00               	movlw	0
 20069  002F18  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 20070                           
 20071                           ;arp.c: 254: uint8_t oldestIndex = 0;
 20072  002F1A  0E00               	movlw	0
 20073  002F1C  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 20074                           
 20075                           ;arp.c: 256: for (uint8_t i = 0; i < 8; i++) {
 20076  002F1E  0E00               	movlw	0
 20077  002F20  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 20078  002F22                     l7866:
 20079                           
 20080                           ; BSR set to: 0
 20081  002F22  0E07               	movlw	7
 20082  002F24  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 20083  002F26  D001               	goto	l915
 20084  002F28  D02E               	goto	u9760
 20085  002F2A                     l915:
 20086                           
 20087                           ; BSR set to: 0
 20088                           ;arp.c: 257: if (ARP_table[i].secondsCreated > maxSeconds) {
 20089                           
 20090                           ; BSR set to: 0
 20091  002F2A  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 20092  002F2C  0D0E               	mullw	14
 20093  002F2E  0E0A               	movlw	10
 20094  002F30  26F3               	addwf	prodl,f,c
 20095  002F32  0E00               	movlw	0
 20096  002F34  22F4               	addwfc	prodh,f,c
 20097  002F36  0E00               	movlw	low _ARP_table
 20098  002F38  24F3               	addwf	prodl,w,c
 20099  002F3A  6ED9               	movwf	fsr2l,c
 20100  002F3C  0E03               	movlw	high _ARP_table
 20101  002F3E  20F4               	addwfc	prodh,w,c
 20102  002F40  6EDA               	movwf	fsr2h,c
 20103  002F42  50DE               	movf	postinc2,w,c
 20104  002F44  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 20105  002F46  50DE               	movf	postinc2,w,c
 20106  002F48  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 20107  002F4A  50DE               	movf	postinc2,w,c
 20108  002F4C  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 20109  002F4E  50DE               	movf	postinc2,w,c
 20110  002F50  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 20111  002F52  B0D8               	btfsc	status,0,c
 20112  002F54  D016               	goto	l917
 20113                           
 20114                           ; BSR set to: 0
 20115                           ;arp.c: 258: maxSeconds = ARP_table[i].secondsCreated;
 20116  002F56  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 20117  002F58  0D0E               	mullw	14
 20118  002F5A  0E0A               	movlw	10
 20119  002F5C  26F3               	addwf	prodl,f,c
 20120  002F5E  0E00               	movlw	0
 20121  002F60  22F4               	addwfc	prodh,f,c
 20122  002F62  0E00               	movlw	low _ARP_table
 20123  002F64  24F3               	addwf	prodl,w,c
 20124  002F66  6ED9               	movwf	fsr2l,c
 20125  002F68  0E03               	movlw	high _ARP_table
 20126  002F6A  20F4               	addwfc	prodh,w,c
 20127  002F6C  6EDA               	movwf	fsr2h,c
 20128  002F6E  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 20129  002F72  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 20130  002F76  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 20131  002F7A  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;arp.c: 259: oldestIndex = i;
 20135  002F7E  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 20136  002F82                     l917:
 20137                           
 20138                           ; BSR set to: 0
 20139                           
 20140                           ; BSR set to: 0
 20141  002F82  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 20142  002F84  D7CE               	goto	l7866
 20143  002F86                     u9760:
 20144                           
 20145                           ; BSR set to: 0
 20146                           ;arp.c: 260: }
 20147                           ;arp.c: 261: }
 20148                           ;arp.c: 263: ARP_table[oldestIndex].ip = ip;
 20149                           
 20150                           ; BSR set to: 0
 20151  002F86  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20152  002F88  0D0E               	mullw	14
 20153  002F8A  0E00               	movlw	low _ARP_table
 20154  002F8C  24F3               	addwf	prodl,w,c
 20155  002F8E  6ED9               	movwf	fsr2l,c
 20156  002F90  0E03               	movlw	high _ARP_table
 20157  002F92  20F4               	addwfc	prodh,w,c
 20158  002F94  6EDA               	movwf	fsr2h,c
 20159  002F96  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 20160  002F9A  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 20161  002F9E  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 20162  002FA2  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;arp.c: 264: ARP_table[oldestIndex].mac = mac;
 20166  002FA6  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 20167  002FAA  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20168  002FAC  0D0E               	mullw	14
 20169  002FAE  0E04               	movlw	4
 20170  002FB0  26F3               	addwf	prodl,f,c
 20171  002FB2  0E00               	movlw	0
 20172  002FB4  22F4               	addwfc	prodh,f,c
 20173  002FB6  0E00               	movlw	low _ARP_table
 20174  002FB8  24F3               	addwf	prodl,w,c
 20175  002FBA  6EE1               	movwf	fsr1l,c
 20176  002FBC  0E03               	movlw	high _ARP_table
 20177  002FBE  20F4               	addwfc	prodh,w,c
 20178  002FC0  6EE2               	movwf	fsr1h,c
 20179  002FC2  0E05               	movlw	5
 20180  002FC4                     u9771:
 20181  002FC4  CFDB FFE3          	movff	plusw2,plusw1
 20182  002FC8  06E8               	decf	wreg,f,c
 20183  002FCA  E2FC               	bc	u9771
 20184                           
 20185                           ; BSR set to: 0
 20186                           ;arp.c: 265: ARP_table[oldestIndex].secondsCreated = timestamp;
 20187  002FCC  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20188  002FCE  0D0E               	mullw	14
 20189  002FD0  0E0A               	movlw	10
 20190  002FD2  26F3               	addwf	prodl,f,c
 20191  002FD4  0E00               	movlw	0
 20192  002FD6  22F4               	addwfc	prodh,f,c
 20193  002FD8  0E00               	movlw	low _ARP_table
 20194  002FDA  24F3               	addwf	prodl,w,c
 20195  002FDC  6ED9               	movwf	fsr2l,c
 20196  002FDE  0E03               	movlw	high _ARP_table
 20197  002FE0  20F4               	addwfc	prodh,w,c
 20198  002FE2  6EDA               	movwf	fsr2h,c
 20199  002FE4  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 20200  002FE8  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 20201  002FEC  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 20202  002FF0  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 20203                           
 20204                           ; BSR set to: 0
 20205  002FF4  0012               	return		;funcret
 20206  002FF6                     __end_of_ARP_setNewEntry:
 20207                           	opt stack 0
 20208                           tblptru	equ	0xFF8
 20209                           tblptrh	equ	0xFF7
 20210                           tblptrl	equ	0xFF6
 20211                           tablat	equ	0xFF5
 20212                           prodh	equ	0xFF4
 20213                           prodl	equ	0xFF3
 20214                           intcon	equ	0xFF2
 20215                           intcon3	equ	0xFF0
 20216                           indf0	equ	0xFEF
 20217                           postinc0	equ	0xFEE
 20218                           plusw0	equ	0xFEB
 20219                           fsr0h	equ	0xFEA
 20220                           fsr0l	equ	0xFE9
 20221                           wreg	equ	0xFE8
 20222                           indf1	equ	0xFE7
 20223                           postinc1	equ	0xFE6
 20224                           postdec1	equ	0xFE5
 20225                           plusw1	equ	0xFE3
 20226                           fsr1h	equ	0xFE2
 20227                           fsr1l	equ	0xFE1
 20228                           indf2	equ	0xFDF
 20229                           postinc2	equ	0xFDE
 20230                           postdec2	equ	0xFDD
 20231                           plusw2	equ	0xFDB
 20232                           fsr2h	equ	0xFDA
 20233                           fsr2l	equ	0xFD9
 20234                           status	equ	0xFD8
 20235                           
 20236 ;; *************** function _ISR *****************
 20237 ;; Defined at:
 20238 ;;		line 265 in file "src/system/main.c"
 20239 ;; Parameters:    Size  Location     Type
 20240 ;;		None
 20241 ;; Auto vars:     Size  Location     Type
 20242 ;;		None
 20243 ;; Return value:  Size  Location     Type
 20244 ;;                  1    wreg      void 
 20245 ;; Registers used:
 20246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20247 ;; Tracked objects:
 20248 ;;		On entry : 0/0
 20249 ;;		On exit  : 0/0
 20250 ;;		Unchanged: 0/0
 20251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20252 ;;      Params:         0       0       0       0       0       0       0       0       0
 20253 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20254 ;;      Temps:         18       0       0       0       0       0       0       0       0
 20255 ;;      Totals:        18       0       0       0       0       0       0       0       0
 20256 ;;Total ram usage:       18 bytes
 20257 ;; Hardware stack levels used:    1
 20258 ;; Hardware stack levels required when called:    3
 20259 ;; This function calls:
 20260 ;;		_buttonHandler
 20261 ;;		_sevenSegmentUpdate
 20262 ;;		_updateSeconds
 20263 ;; This function is called by:
 20264 ;;		Interrupt level 2
 20265 ;; This function uses a non-reentrant model
 20266 ;;
 20267                           
 20268                           	psect	intcode
 20269  000008                     __pintcode:
 20270                           	opt stack 0
 20271  000008                     _ISR:
 20272                           	opt stack 17
 20273                           
 20274                           ; BSR set to: 0
 20275                           ;incstack = 0
 20276  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20277  00000A  CFFA F016          	movff	pclath,??_ISR
 20278  00000E  CFFB F017          	movff	pclatu,??_ISR+1
 20279  000012  CFE9 F018          	movff	fsr0l,??_ISR+2
 20280  000016  CFEA F019          	movff	fsr0h,??_ISR+3
 20281  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+4
 20282  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+5
 20283  000022  CFD9 F01C          	movff	fsr2l,??_ISR+6
 20284  000026  CFDA F01D          	movff	fsr2h,??_ISR+7
 20285  00002A  CFF3 F01E          	movff	prodl,??_ISR+8
 20286  00002E  CFF4 F01F          	movff	prodh,??_ISR+9
 20287  000032  CFF6 F020          	movff	tblptrl,??_ISR+10
 20288  000036  CFF7 F021          	movff	tblptrh,??_ISR+11
 20289  00003A  CFF8 F022          	movff	tblptru,??_ISR+12
 20290  00003E  CFF5 F023          	movff	tablat,??_ISR+13
 20291  000042  C04F  F024         	movff	btemp,??_ISR+14
 20292  000046  C050  F025         	movff	btemp+1,??_ISR+15
 20293  00004A  C051  F026         	movff	btemp+2,??_ISR+16
 20294  00004E  C052  F027         	movff	btemp+3,??_ISR+17
 20295                           
 20296                           ;main.c: 266: if (INTCONbits.TMR0IF) {
 20297  000052  A4F2               	btfss	intcon,2,c	;volatile
 20298  000054  D00F               	goto	i2l668
 20299                           
 20300                           ;main.c: 267: INTCONbits.TMR0IF = 0;
 20301  000056  94F2               	bcf	intcon,2,c	;volatile
 20302                           
 20303                           ;main.c: 268: updateSeconds();
 20304  000058  EC5D  F022         	call	_updateSeconds	;wreg free
 20305                           
 20306                           ;main.c: 269: sevenSegmentUpdate(numberToDisplay);
 20307  00005C  C030  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 20308  000060  C031  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 20309  000064  EC6D  F018         	call	_sevenSegmentUpdate	;wreg free
 20310                           
 20311                           ;main.c: 270: buttonHandler(&buttonState);
 20312  000068  0ED3               	movlw	low _buttonState
 20313  00006A  6E01               	movwf	buttonHandler@state,c
 20314  00006C  0E01               	movlw	high _buttonState
 20315  00006E  6E02               	movwf	buttonHandler@state+1,c
 20316  000070  EC81  F01A         	call	_buttonHandler	;wreg free
 20317  000074                     i2l668:
 20318                           
 20319                           ;main.c: 271: }
 20320                           ;main.c: 272: if (INTCON3bits.INT2IF) {
 20321  000074  B2F0               	btfsc	intcon3,1,c	;volatile
 20322                           
 20323                           ;main.c: 273: INTCON3bits.INT2IF = 0;
 20324  000076  92F0               	bcf	intcon3,1,c	;volatile
 20325                           
 20326                           ;main.c: 280: }
 20327                           ;main.c: 281: if (RCIF) {
 20328  000078  C027  F052         	movff	??_ISR+17,btemp+3
 20329  00007C  C026  F051         	movff	??_ISR+16,btemp+2
 20330  000080  C025  F050         	movff	??_ISR+15,btemp+1
 20331  000084  C024  F04F         	movff	??_ISR+14,btemp
 20332  000088  C023  FFF5         	movff	??_ISR+13,tablat
 20333  00008C  C022  FFF8         	movff	??_ISR+12,tblptru
 20334  000090  C021  FFF7         	movff	??_ISR+11,tblptrh
 20335  000094  C020  FFF6         	movff	??_ISR+10,tblptrl
 20336  000098  C01F  FFF4         	movff	??_ISR+9,prodh
 20337  00009C  C01E  FFF3         	movff	??_ISR+8,prodl
 20338  0000A0  C01D  FFDA         	movff	??_ISR+7,fsr2h
 20339  0000A4  C01C  FFD9         	movff	??_ISR+6,fsr2l
 20340  0000A8  C01B  FFE2         	movff	??_ISR+5,fsr1h
 20341  0000AC  C01A  FFE1         	movff	??_ISR+4,fsr1l
 20342  0000B0  C019  FFEA         	movff	??_ISR+3,fsr0h
 20343  0000B4  C018  FFE9         	movff	??_ISR+2,fsr0l
 20344  0000B8  C017  FFFB         	movff	??_ISR+1,pclatu
 20345  0000BC  C016  FFFA         	movff	??_ISR,pclath
 20346  0000C0  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20347  0000C2  0011               	retfie		f
 20348  0000C4                     __end_of_ISR:
 20349                           	opt stack 0
 20350                           pclatu	equ	0xFFB
 20351                           pclath	equ	0xFFA
 20352                           tblptru	equ	0xFF8
 20353                           tblptrh	equ	0xFF7
 20354                           tblptrl	equ	0xFF6
 20355                           tablat	equ	0xFF5
 20356                           prodh	equ	0xFF4
 20357                           prodl	equ	0xFF3
 20358                           intcon	equ	0xFF2
 20359                           intcon3	equ	0xFF0
 20360                           indf0	equ	0xFEF
 20361                           postinc0	equ	0xFEE
 20362                           plusw0	equ	0xFEB
 20363                           fsr0h	equ	0xFEA
 20364                           fsr0l	equ	0xFE9
 20365                           wreg	equ	0xFE8
 20366                           indf1	equ	0xFE7
 20367                           postinc1	equ	0xFE6
 20368                           postdec1	equ	0xFE5
 20369                           plusw1	equ	0xFE3
 20370                           fsr1h	equ	0xFE2
 20371                           fsr1l	equ	0xFE1
 20372                           indf2	equ	0xFDF
 20373                           postinc2	equ	0xFDE
 20374                           postdec2	equ	0xFDD
 20375                           plusw2	equ	0xFDB
 20376                           fsr2h	equ	0xFDA
 20377                           fsr2l	equ	0xFD9
 20378                           status	equ	0xFD8
 20379                           
 20380 ;; *************** function _updateSeconds *****************
 20381 ;; Defined at:
 20382 ;;		line 28 in file "src/stack/stack.c"
 20383 ;; Parameters:    Size  Location     Type
 20384 ;;		None
 20385 ;; Auto vars:     Size  Location     Type
 20386 ;;		None
 20387 ;; Return value:  Size  Location     Type
 20388 ;;                  1    wreg      void 
 20389 ;; Registers used:
 20390 ;;		wreg, status,2, status,0
 20391 ;; Tracked objects:
 20392 ;;		On entry : 0/0
 20393 ;;		On exit  : 0/0
 20394 ;;		Unchanged: 0/0
 20395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20396 ;;      Params:         0       0       0       0       0       0       0       0       0
 20397 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20398 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20399 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20400 ;;Total ram usage:        0 bytes
 20401 ;; Hardware stack levels used:    1
 20402 ;; This function calls:
 20403 ;;		Nothing
 20404 ;; This function is called by:
 20405 ;;		_ISR
 20406 ;; This function uses a non-reentrant model
 20407 ;;
 20408                           
 20409                           	psect	text93
 20410  0044BA                     __ptext93:
 20411                           	opt stack 0
 20412  0044BA                     _updateSeconds:
 20413                           	opt stack 19
 20414                           
 20415                           ;stack.c: 29: uint16_t static prescaler_ms = 0;
 20416                           ;stack.c: 33: if (prescaler_ms == 243) {
 20417                           
 20418                           ;incstack = 0
 20419  0044BA  0EF3               	movlw	243
 20420  0044BC  183F               	xorwf	updateSeconds@prescaler_ms,w,c
 20421  0044BE  1040               	iorwf	updateSeconds@prescaler_ms+1,w,c
 20422  0044C0  A4D8               	btfss	status,2,c
 20423  0044C2  D00B               	goto	i2l512
 20424                           
 20425                           ;stack.c: 34: prescaler_ms = 0;
 20426  0044C4  0E00               	movlw	0
 20427  0044C6  6E40               	movwf	updateSeconds@prescaler_ms+1,c
 20428  0044C8  0E00               	movlw	0
 20429  0044CA  6E3F               	movwf	updateSeconds@prescaler_ms,c
 20430                           
 20431                           ;stack.c: 35: seconds++;
 20432  0044CC  0E01               	movlw	1
 20433  0044CE  2634               	addwf	_seconds,f,c
 20434  0044D0  0E00               	movlw	0
 20435  0044D2  2235               	addwfc	_seconds+1,f,c
 20436  0044D4  2236               	addwfc	_seconds+2,f,c
 20437  0044D6  2237               	addwfc	_seconds+3,f,c
 20438                           
 20439                           ;stack.c: 36: } else {
 20440  0044D8  0012               	return	
 20441  0044DA                     i2l512:
 20442                           
 20443                           ;stack.c: 37: prescaler_ms++;
 20444  0044DA  4A3F               	infsnz	updateSeconds@prescaler_ms,f,c
 20445  0044DC  2A40               	incf	updateSeconds@prescaler_ms+1,f,c
 20446  0044DE  0012               	return	
 20447  0044E0                     __end_of_updateSeconds:
 20448                           	opt stack 0
 20449                           pclatu	equ	0xFFB
 20450                           pclath	equ	0xFFA
 20451                           tblptru	equ	0xFF8
 20452                           tblptrh	equ	0xFF7
 20453                           tblptrl	equ	0xFF6
 20454                           tablat	equ	0xFF5
 20455                           prodh	equ	0xFF4
 20456                           prodl	equ	0xFF3
 20457                           intcon	equ	0xFF2
 20458                           intcon3	equ	0xFF0
 20459                           indf0	equ	0xFEF
 20460                           postinc0	equ	0xFEE
 20461                           plusw0	equ	0xFEB
 20462                           fsr0h	equ	0xFEA
 20463                           fsr0l	equ	0xFE9
 20464                           wreg	equ	0xFE8
 20465                           indf1	equ	0xFE7
 20466                           postinc1	equ	0xFE6
 20467                           postdec1	equ	0xFE5
 20468                           plusw1	equ	0xFE3
 20469                           fsr1h	equ	0xFE2
 20470                           fsr1l	equ	0xFE1
 20471                           indf2	equ	0xFDF
 20472                           postinc2	equ	0xFDE
 20473                           postdec2	equ	0xFDD
 20474                           plusw2	equ	0xFDB
 20475                           fsr2h	equ	0xFDA
 20476                           fsr2l	equ	0xFD9
 20477                           status	equ	0xFD8
 20478                           
 20479 ;; *************** function _sevenSegmentUpdate *****************
 20480 ;; Defined at:
 20481 ;;		line 41 in file "src/system/sevenseg.c"
 20482 ;; Parameters:    Size  Location     Type
 20483 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 20484 ;; Auto vars:     Size  Location     Type
 20485 ;;  i               1   20[COMRAM] unsigned char 
 20486 ;; Return value:  Size  Location     Type
 20487 ;;                  1    wreg      void 
 20488 ;; Registers used:
 20489 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20490 ;; Tracked objects:
 20491 ;;		On entry : 0/0
 20492 ;;		On exit  : 0/0
 20493 ;;		Unchanged: 0/0
 20494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20495 ;;      Params:         2       0       0       0       0       0       0       0       0
 20496 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20497 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20498 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20499 ;;Total ram usage:        7 bytes
 20500 ;; Hardware stack levels used:    1
 20501 ;; Hardware stack levels required when called:    2
 20502 ;; This function calls:
 20503 ;;		_parseNumber
 20504 ;; This function is called by:
 20505 ;;		_ISR
 20506 ;; This function uses a non-reentrant model
 20507 ;;
 20508                           
 20509                           	psect	text94
 20510  0030DA                     __ptext94:
 20511                           	opt stack 0
 20512  0030DA                     _sevenSegmentUpdate:
 20513                           	opt stack 17
 20514                           
 20515                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 20516                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 20517                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 20518                           
 20519                           ;incstack = 0
 20520  0030DA  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20521  0030DE  0E01               	movlw	1
 20522  0030E0  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20523  0030E2  2A11               	incf	??_sevenSegmentUpdate,f,c
 20524  0030E4  D002               	goto	i2u724_44
 20525  0030E6                     i2u724_45:
 20526  0030E6  90D8               	bcf	status,0,c
 20527  0030E8  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20528  0030EA                     i2u724_44:
 20529  0030EA  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20530  0030EC  D7FC               	goto	i2u724_45
 20531  0030EE  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20532  0030F0  0AFF               	xorlw	255
 20533  0030F2  1682               	andwf	3970,f,c	;volatile
 20534                           
 20535                           ;sevenseg.c: 46: PORTA = 0x00;
 20536  0030F4  0E00               	movlw	0
 20537  0030F6  6E80               	movwf	3968,c	;volatile
 20538                           
 20539                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 20540  0030F8  0E02               	movlw	2
 20541  0030FA  6047               	cpfslt	sevenSegmentUpdate@digitPointer,c
 20542  0030FC  D007               	goto	i2l698
 20543  0030FE  0E01               	movlw	1
 20544  003100  2447               	addwf	sevenSegmentUpdate@digitPointer,w,c
 20545  003102  6E13               	movwf	_sevenSegmentUpdate$2047,c
 20546  003104  6A14               	clrf	_sevenSegmentUpdate$2047+1,c
 20547  003106  0E00               	movlw	0
 20548  003108  2214               	addwfc	_sevenSegmentUpdate$2047+1,f,c
 20549  00310A  D004               	goto	i2l700
 20550  00310C                     i2l698:
 20551  00310C  0E00               	movlw	0
 20552  00310E  6E14               	movwf	_sevenSegmentUpdate$2047+1,c
 20553  003110  0E00               	movlw	0
 20554  003112  6E13               	movwf	_sevenSegmentUpdate$2047,c
 20555  003114                     i2l700:
 20556  003114  C013  F047         	movff	_sevenSegmentUpdate$2047,sevenSegmentUpdate@digitPointer
 20557                           
 20558                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 20559  003118  0EE8               	movlw	232
 20560  00311A  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 20561  00311C  0E03               	movlw	3
 20562  00311E  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 20563  003120  B0D8               	btfsc	status,0,c
 20564  003122  0012               	return	
 20565                           
 20566                           ;sevenseg.c: 51: }
 20567                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 20568                           
 20569                           ;sevenseg.c: 50: return;
 20570  003124  0E00               	movlw	0
 20571  003126  6E15               	movwf	sevenSegmentUpdate@i,c
 20572  003128                     i2l6302:
 20573  003128  0E02               	movlw	2
 20574  00312A  6415               	cpfsgt	sevenSegmentUpdate@i,c
 20575  00312C  D001               	goto	i2l703
 20576  00312E  D013               	goto	i2u728_40
 20577  003130                     i2l703:
 20578                           
 20579                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 20580  003130  5015               	movf	sevenSegmentUpdate@i,w,c
 20581  003132  0D01               	mullw	1
 20582  003134  0E38               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20583  003136  24F3               	addwf	prodl,w,c
 20584  003138  6ED9               	movwf	fsr2l,c
 20585  00313A  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20586  00313C  20F4               	addwfc	prodh,w,c
 20587  00313E  6EDA               	movwf	fsr2h,c
 20588  003140  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 20589  003144  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 20590  003148  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 20591  00314C  ECA1  F01C         	call	_parseNumber	;wreg free
 20592  003150  6EDF               	movwf	indf2,c
 20593  003152  2A15               	incf	sevenSegmentUpdate@i,f,c
 20594  003154  D7E9               	goto	i2l6302
 20595  003156                     i2u728_40:
 20596                           
 20597                           ;sevenseg.c: 54: }
 20598                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 20599  003156  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20600  00315A  0E01               	movlw	1
 20601  00315C  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20602  00315E  2A11               	incf	??_sevenSegmentUpdate,f,c
 20603  003160  D002               	goto	i2u729_44
 20604  003162                     i2u729_45:
 20605  003162  90D8               	bcf	status,0,c
 20606  003164  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20607  003166                     i2u729_44:
 20608  003166  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20609  003168  D7FC               	goto	i2u729_45
 20610  00316A  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20611  00316C  1282               	iorwf	3970,f,c	;volatile
 20612                           
 20613                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 20614  00316E  5047               	movf	sevenSegmentUpdate@digitPointer,w,c
 20615  003170  0D01               	mullw	1
 20616  003172  0E38               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20617  003174  24F3               	addwf	prodl,w,c
 20618  003176  6ED9               	movwf	fsr2l,c
 20619  003178  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20620  00317A  20F4               	addwfc	prodh,w,c
 20621  00317C  6EDA               	movwf	fsr2h,c
 20622  00317E  50DF               	movf	indf2,w,c
 20623  003180  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 20624  003182  5011               	movf	??_sevenSegmentUpdate,w,c
 20625  003184  0D01               	mullw	1
 20626  003186  0EC7               	movlw	low _sevenSegCharacters
 20627  003188  24F3               	addwf	prodl,w,c
 20628  00318A  6ED9               	movwf	fsr2l,c
 20629  00318C  0E02               	movlw	high _sevenSegCharacters
 20630  00318E  20F4               	addwfc	prodh,w,c
 20631  003190  6EDA               	movwf	fsr2h,c
 20632  003192  50DF               	movf	indf2,w,c
 20633  003194  6E80               	movwf	3968,c	;volatile
 20634  003196  0012               	return		;funcret
 20635  003198                     __end_of_sevenSegmentUpdate:
 20636                           	opt stack 0
 20637                           pclatu	equ	0xFFB
 20638                           pclath	equ	0xFFA
 20639                           tblptru	equ	0xFF8
 20640                           tblptrh	equ	0xFF7
 20641                           tblptrl	equ	0xFF6
 20642                           tablat	equ	0xFF5
 20643                           prodh	equ	0xFF4
 20644                           prodl	equ	0xFF3
 20645                           intcon	equ	0xFF2
 20646                           intcon3	equ	0xFF0
 20647                           indf0	equ	0xFEF
 20648                           postinc0	equ	0xFEE
 20649                           plusw0	equ	0xFEB
 20650                           fsr0h	equ	0xFEA
 20651                           fsr0l	equ	0xFE9
 20652                           wreg	equ	0xFE8
 20653                           indf1	equ	0xFE7
 20654                           postinc1	equ	0xFE6
 20655                           postdec1	equ	0xFE5
 20656                           plusw1	equ	0xFE3
 20657                           fsr1h	equ	0xFE2
 20658                           fsr1l	equ	0xFE1
 20659                           indf2	equ	0xFDF
 20660                           postinc2	equ	0xFDE
 20661                           postdec2	equ	0xFDD
 20662                           plusw2	equ	0xFDB
 20663                           fsr2h	equ	0xFDA
 20664                           fsr2l	equ	0xFD9
 20665                           status	equ	0xFD8
 20666                           
 20667 ;; *************** function _parseNumber *****************
 20668 ;; Defined at:
 20669 ;;		line 59 in file "src/system/sevenseg.c"
 20670 ;; Parameters:    Size  Location     Type
 20671 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 20672 ;;  digit           1    9[COMRAM] unsigned char 
 20673 ;; Auto vars:     Size  Location     Type
 20674 ;;  hundreds        1   13[COMRAM] unsigned char 
 20675 ;;  tens            1   12[COMRAM] unsigned char 
 20676 ;;  ones            1   11[COMRAM] unsigned char 
 20677 ;; Return value:  Size  Location     Type
 20678 ;;                  1    wreg      unsigned char 
 20679 ;; Registers used:
 20680 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20681 ;; Tracked objects:
 20682 ;;		On entry : 0/0
 20683 ;;		On exit  : 0/0
 20684 ;;		Unchanged: 0/0
 20685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20686 ;;      Params:         3       0       0       0       0       0       0       0       0
 20687 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20688 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20689 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20690 ;;Total ram usage:        7 bytes
 20691 ;; Hardware stack levels used:    1
 20692 ;; Hardware stack levels required when called:    1
 20693 ;; This function calls:
 20694 ;;		i2___lwdiv
 20695 ;; This function is called by:
 20696 ;;		_sevenSegmentUpdate
 20697 ;; This function uses a non-reentrant model
 20698 ;;
 20699                           
 20700                           	psect	text95
 20701  003942                     __ptext95:
 20702                           	opt stack 0
 20703  003942                     _parseNumber:
 20704                           	opt stack 17
 20705                           
 20706                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 20707                           
 20708                           ;incstack = 0
 20709  003942  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 20710  003946  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 20711  00394A  0E00               	movlw	0
 20712  00394C  6E04               	movwf	i2___lwdiv@divisor+1,c
 20713  00394E  0E64               	movlw	100
 20714  003950  6E03               	movwf	i2___lwdiv@divisor,c
 20715  003952  EC7A  F01F         	call	i2___lwdiv	;wreg free
 20716  003956  5001               	movf	?i2___lwdiv,w,c
 20717  003958  6E0E               	movwf	parseNumber@hundreds,c
 20718                           
 20719                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 20720  00395A  500E               	movf	parseNumber@hundreds,w,c
 20721  00395C  0D64               	mullw	100
 20722  00395E  1EF3               	comf	prodl,f,c
 20723  003960  1EF4               	comf	prodh,f,c
 20724  003962  4AF3               	infsnz	prodl,f,c
 20725  003964  2AF4               	incf	prodh,f,c
 20726  003966  5008               	movf	parseNumber@numberToDisplay,w,c
 20727  003968  24F3               	addwf	prodl,w,c
 20728  00396A  6E01               	movwf	i2___lwdiv@dividend,c
 20729  00396C  5009               	movf	parseNumber@numberToDisplay+1,w,c
 20730  00396E  20F4               	addwfc	prodh,w,c
 20731  003970  6E02               	movwf	i2___lwdiv@dividend+1,c
 20732  003972  0E00               	movlw	0
 20733  003974  6E04               	movwf	i2___lwdiv@divisor+1,c
 20734  003976  0E0A               	movlw	10
 20735  003978  6E03               	movwf	i2___lwdiv@divisor,c
 20736  00397A  EC7A  F01F         	call	i2___lwdiv	;wreg free
 20737  00397E  5001               	movf	?i2___lwdiv,w,c
 20738  003980  6E0D               	movwf	parseNumber@tens,c
 20739                           
 20740                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 20741  003982  500D               	movf	parseNumber@tens,w,c
 20742  003984  0D0A               	mullw	10
 20743  003986  CFF3 F00B          	movff	prodl,??_parseNumber
 20744  00398A  500E               	movf	parseNumber@hundreds,w,c
 20745  00398C  0D64               	mullw	100
 20746  00398E  50F3               	movf	prodl,w,c
 20747  003990  240B               	addwf	??_parseNumber,w,c
 20748  003992  0800               	sublw	0
 20749  003994  2408               	addwf	parseNumber@numberToDisplay,w,c
 20750  003996  6E0C               	movwf	parseNumber@ones,c
 20751                           
 20752                           ;sevenseg.c: 64: switch (digit) {
 20753  003998  D008               	goto	i2l707
 20754  00399A                     
 20755                           ;sevenseg.c: 66: return ones;
 20756  00399A  500C               	movf	parseNumber@ones,w,c
 20757  00399C  0012               	return	
 20758  00399E                     
 20759                           ;sevenseg.c: 68: return tens;
 20760  00399E  500D               	movf	parseNumber@tens,w,c
 20761  0039A0  0012               	return	
 20762  0039A2                     
 20763                           ;sevenseg.c: 70: return hundreds;
 20764  0039A2  500E               	movf	parseNumber@hundreds,w,c
 20765  0039A4  0012               	return	
 20766  0039A6  0E00               	movlw	0
 20767                           
 20768                           ;sevenseg.c: 72: }
 20769  0039A8  0012               	return	
 20770  0039AA                     i2l707:
 20771  0039AA  500A               	movf	parseNumber@digit,w,c
 20772                           
 20773                           ; Switch size 1, requested type "space"
 20774                           ; Number of cases is 3, Range of values is 0 to 2
 20775                           ; switch strategies available:
 20776                           ; Name         Instructions Cycles
 20777                           ; simple_byte           10     6 (average)
 20778                           ;	Chosen strategy is simple_byte
 20779  0039AC  0A00               	xorlw	0	; case 0
 20780  0039AE  B4D8               	btfsc	status,2,c
 20781  0039B0  D7F8               	goto	i2l711
 20782  0039B2  0A01               	xorlw	1	; case 1
 20783  0039B4  B4D8               	btfsc	status,2,c
 20784  0039B6  D7F3               	goto	i2l710
 20785  0039B8  0A03               	xorlw	3	; case 2
 20786  0039BA  B4D8               	btfsc	status,2,c
 20787  0039BC  D7EE               	goto	i2l708
 20788  0039BE  D7F3               	goto	i2l712
 20789  0039C0                     __end_of_parseNumber:
 20790                           	opt stack 0
 20791                           pclatu	equ	0xFFB
 20792                           pclath	equ	0xFFA
 20793                           tblptru	equ	0xFF8
 20794                           tblptrh	equ	0xFF7
 20795                           tblptrl	equ	0xFF6
 20796                           tablat	equ	0xFF5
 20797                           prodh	equ	0xFF4
 20798                           prodl	equ	0xFF3
 20799                           intcon	equ	0xFF2
 20800                           intcon3	equ	0xFF0
 20801                           indf0	equ	0xFEF
 20802                           postinc0	equ	0xFEE
 20803                           plusw0	equ	0xFEB
 20804                           fsr0h	equ	0xFEA
 20805                           fsr0l	equ	0xFE9
 20806                           wreg	equ	0xFE8
 20807                           indf1	equ	0xFE7
 20808                           postinc1	equ	0xFE6
 20809                           postdec1	equ	0xFE5
 20810                           plusw1	equ	0xFE3
 20811                           fsr1h	equ	0xFE2
 20812                           fsr1l	equ	0xFE1
 20813                           indf2	equ	0xFDF
 20814                           postinc2	equ	0xFDE
 20815                           postdec2	equ	0xFDD
 20816                           plusw2	equ	0xFDB
 20817                           fsr2h	equ	0xFDA
 20818                           fsr2l	equ	0xFD9
 20819                           status	equ	0xFD8
 20820                           
 20821 ;; *************** function i2___lwdiv *****************
 20822 ;; Defined at:
 20823 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 20824 ;; Parameters:    Size  Location     Type
 20825 ;;  dividend        2    0[COMRAM] unsigned int 
 20826 ;;  divisor         2    2[COMRAM] unsigned int 
 20827 ;; Auto vars:     Size  Location     Type
 20828 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 20829 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 20830 ;; Return value:  Size  Location     Type
 20831 ;;                  2    0[COMRAM] unsigned int 
 20832 ;; Registers used:
 20833 ;;		wreg, status,2, status,0
 20834 ;; Tracked objects:
 20835 ;;		On entry : 0/0
 20836 ;;		On exit  : 0/0
 20837 ;;		Unchanged: 0/0
 20838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20839 ;;      Params:         4       0       0       0       0       0       0       0       0
 20840 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20841 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20842 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20843 ;;Total ram usage:        7 bytes
 20844 ;; Hardware stack levels used:    1
 20845 ;; This function calls:
 20846 ;;		Nothing
 20847 ;; This function is called by:
 20848 ;;		_parseNumber
 20849 ;; This function uses a non-reentrant model
 20850 ;;
 20851                           
 20852                           	psect	text96
 20853  003EF4                     __ptext96:
 20854                           	opt stack 0
 20855  003EF4                     i2___lwdiv:
 20856                           	opt stack 17
 20857                           
 20858                           ;incstack = 0
 20859  003EF4  0E00               	movlw	0
 20860  003EF6  6E06               	movwf	i2___lwdiv@quotient+1,c
 20861  003EF8  0E00               	movlw	0
 20862  003EFA  6E05               	movwf	i2___lwdiv@quotient,c
 20863  003EFC  5003               	movf	i2___lwdiv@divisor,w,c
 20864  003EFE  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 20865  003F00  B4D8               	btfsc	status,2,c
 20866  003F02  D01C               	goto	i2l1415
 20867  003F04  0E01               	movlw	1
 20868  003F06  6E07               	movwf	i2___lwdiv@counter,c
 20869  003F08  D004               	goto	i2l1410
 20870  003F0A  90D8               	bcf	status,0,c
 20871  003F0C  3603               	rlcf	i2___lwdiv@divisor,f,c
 20872  003F0E  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 20873  003F10  2A07               	incf	i2___lwdiv@counter,f,c
 20874  003F12                     i2l1410:
 20875  003F12  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 20876  003F14  D7FA               	goto	i2l1411
 20877  003F16                     i2u627_40:
 20878  003F16  90D8               	bcf	status,0,c
 20879  003F18  3605               	rlcf	i2___lwdiv@quotient,f,c
 20880  003F1A  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 20881  003F1C  5003               	movf	i2___lwdiv@divisor,w,c
 20882  003F1E  5C01               	subwf	i2___lwdiv@dividend,w,c
 20883  003F20  5004               	movf	i2___lwdiv@divisor+1,w,c
 20884  003F22  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 20885  003F24  A0D8               	btfss	status,0,c
 20886  003F26  D005               	goto	i2l1414
 20887  003F28  5003               	movf	i2___lwdiv@divisor,w,c
 20888  003F2A  5E01               	subwf	i2___lwdiv@dividend,f,c
 20889  003F2C  5004               	movf	i2___lwdiv@divisor+1,w,c
 20890  003F2E  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 20891  003F30  8005               	bsf	i2___lwdiv@quotient,0,c
 20892  003F32                     i2l1414:
 20893  003F32  90D8               	bcf	status,0,c
 20894  003F34  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 20895  003F36  3203               	rrcf	i2___lwdiv@divisor,f,c
 20896  003F38  2E07               	decfsz	i2___lwdiv@counter,f,c
 20897  003F3A  D7ED               	goto	i2u627_40
 20898  003F3C                     i2l1415:
 20899  003F3C  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20900  003F40  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20901  003F44  0012               	return		;funcret
 20902  003F46                     __end_ofi2___lwdiv:
 20903                           	opt stack 0
 20904                           pclatu	equ	0xFFB
 20905                           pclath	equ	0xFFA
 20906                           tblptru	equ	0xFF8
 20907                           tblptrh	equ	0xFF7
 20908                           tblptrl	equ	0xFF6
 20909                           tablat	equ	0xFF5
 20910                           prodh	equ	0xFF4
 20911                           prodl	equ	0xFF3
 20912                           intcon	equ	0xFF2
 20913                           intcon3	equ	0xFF0
 20914                           indf0	equ	0xFEF
 20915                           postinc0	equ	0xFEE
 20916                           plusw0	equ	0xFEB
 20917                           fsr0h	equ	0xFEA
 20918                           fsr0l	equ	0xFE9
 20919                           wreg	equ	0xFE8
 20920                           indf1	equ	0xFE7
 20921                           postinc1	equ	0xFE6
 20922                           postdec1	equ	0xFE5
 20923                           plusw1	equ	0xFE3
 20924                           fsr1h	equ	0xFE2
 20925                           fsr1l	equ	0xFE1
 20926                           indf2	equ	0xFDF
 20927                           postinc2	equ	0xFDE
 20928                           postdec2	equ	0xFDD
 20929                           plusw2	equ	0xFDB
 20930                           fsr2h	equ	0xFDA
 20931                           fsr2l	equ	0xFD9
 20932                           status	equ	0xFD8
 20933                           
 20934 ;; *************** function _buttonHandler *****************
 20935 ;; Defined at:
 20936 ;;		line 244 in file "src/system/main.c"
 20937 ;; Parameters:    Size  Location     Type
 20938 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 20939 ;;		 -> buttonState(1), 
 20940 ;; Auto vars:     Size  Location     Type
 20941 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 20942 ;; Return value:  Size  Location     Type
 20943 ;;                  1    wreg      void 
 20944 ;; Registers used:
 20945 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20946 ;; Tracked objects:
 20947 ;;		On entry : 0/0
 20948 ;;		On exit  : 0/0
 20949 ;;		Unchanged: 0/0
 20950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20951 ;;      Params:         2       0       0       0       0       0       0       0       0
 20952 ;;      Locals:         4       0       0       0       0       0       0       0       0
 20953 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20954 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20955 ;;Total ram usage:        6 bytes
 20956 ;; Hardware stack levels used:    1
 20957 ;; This function calls:
 20958 ;;		Nothing
 20959 ;; This function is called by:
 20960 ;;		_ISR
 20961 ;; This function uses a non-reentrant model
 20962 ;;
 20963                           
 20964                           	psect	text97
 20965  003502                     __ptext97:
 20966                           	opt stack 0
 20967  003502                     _buttonHandler:
 20968                           	opt stack 19
 20969                           
 20970                           ;main.c: 245: uint8_t static oldState = 0;
 20971                           ;main.c: 246: uint8_t static newState = 0;
 20972                           ;main.c: 247: uint32_t static debounceCounter = 0;
 20973                           ;main.c: 248: const uint32_t debounceValue = 0x1f;
 20974                           
 20975                           ;incstack = 0
 20976  003502  0E1F               	movlw	31
 20977  003504  6E03               	movwf	buttonHandler@debounceValue,c
 20978  003506  0E00               	movlw	0
 20979  003508  6E04               	movwf	buttonHandler@debounceValue+1,c
 20980  00350A  0E00               	movlw	0
 20981  00350C  6E05               	movwf	buttonHandler@debounceValue+2,c
 20982  00350E  0E00               	movlw	0
 20983  003510  6E06               	movwf	buttonHandler@debounceValue+3,c
 20984                           
 20985                           ;main.c: 249: if ((unsigned)(!(PORTB & (1<<5)))) {
 20986  003512  BA81               	btfsc	3969,5,c	;volatile
 20987  003514  D00F               	goto	i2l658
 20988                           
 20989                           ;main.c: 250: if (debounceCounter < 0xffff)
 20990  003516  502F               	movf	buttonHandler@debounceCounter+3,w,c
 20991  003518  102E               	iorwf	buttonHandler@debounceCounter+2,w,c
 20992  00351A  E114               	bnz	i2l6270
 20993  00351C  282C               	incf	buttonHandler@debounceCounter,w,c
 20994  00351E  0EFF               	movlw	255
 20995  003520  582D               	subwfb	buttonHandler@debounceCounter+1,w,c
 20996  003522  B0D8               	btfsc	status,0,c
 20997  003524  D00F               	goto	i2l660
 20998                           
 20999                           ;main.c: 251: debounceCounter++;
 21000  003526  0E01               	movlw	1
 21001  003528  262C               	addwf	buttonHandler@debounceCounter,f,c
 21002  00352A  0E00               	movlw	0
 21003  00352C  222D               	addwfc	buttonHandler@debounceCounter+1,f,c
 21004  00352E  222E               	addwfc	buttonHandler@debounceCounter+2,f,c
 21005  003530  222F               	addwfc	buttonHandler@debounceCounter+3,f,c
 21006                           
 21007                           ;main.c: 252: } else {
 21008  003532  D008               	goto	i2l660
 21009  003534                     i2l658:
 21010                           
 21011                           ;main.c: 253: debounceCounter = 0;
 21012  003534  0E00               	movlw	0
 21013  003536  6E2C               	movwf	buttonHandler@debounceCounter,c
 21014  003538  0E00               	movlw	0
 21015  00353A  6E2D               	movwf	buttonHandler@debounceCounter+1,c
 21016  00353C  0E00               	movlw	0
 21017  00353E  6E2E               	movwf	buttonHandler@debounceCounter+2,c
 21018  003540  0E00               	movlw	0
 21019  003542  6E2F               	movwf	buttonHandler@debounceCounter+3,c
 21020  003544                     i2l660:
 21021  003544                     i2l6270:
 21022                           
 21023                           ;main.c: 254: }
 21024                           ;main.c: 255: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 21025  003544  5003               	movf	buttonHandler@debounceValue,w,c
 21026  003546  5C2C               	subwf	buttonHandler@debounceCounter,w,c
 21027  003548  5004               	movf	buttonHandler@debounceValue+1,w,c
 21028  00354A  582D               	subwfb	buttonHandler@debounceCounter+1,w,c
 21029  00354C  5005               	movf	buttonHandler@debounceValue+2,w,c
 21030  00354E  582E               	subwfb	buttonHandler@debounceCounter+2,w,c
 21031  003550  5006               	movf	buttonHandler@debounceValue+3,w,c
 21032  003552  582F               	subwfb	buttonHandler@debounceCounter+3,w,c
 21033  003554  A0D8               	btfss	status,0,c
 21034  003556  D002               	goto	i2u720_40
 21035  003558  0E01               	movlw	1
 21036  00355A  D001               	goto	i2u721_40
 21037  00355C                     i2u720_40:
 21038  00355C  0E00               	movlw	0
 21039  00355E                     i2u721_40:
 21040  00355E  6E48               	movwf	buttonHandler@newState,c
 21041                           
 21042                           ;main.c: 256: if (newState && !oldState) {
 21043  003560  5048               	movf	buttonHandler@newState,w,c
 21044  003562  B4D8               	btfsc	status,2,c
 21045  003564  D011               	goto	i2l661
 21046  003566  5049               	movf	buttonHandler@oldState,w,c
 21047  003568  A4D8               	btfss	status,2,c
 21048  00356A  D00E               	goto	i2l661
 21049                           
 21050                           ;main.c: 257: debounceCounter = debounceValue;
 21051  00356C  C003  F02C         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 21052  003570  C004  F02D         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 21053  003574  C005  F02E         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 21054  003578  C006  F02F         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 21055                           
 21056                           ;main.c: 258: *state = 1;
 21057  00357C  C001  FFD9         	movff	buttonHandler@state,fsr2l
 21058  003580  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 21059  003584  0E01               	movlw	1
 21060  003586  D005               	goto	L9
 21061  003588                     i2l661:
 21062                           
 21063                           ;main.c: 260: *state = 0;
 21064  003588  C001  FFD9         	movff	buttonHandler@state,fsr2l
 21065  00358C  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 21066  003590  0E00               	movlw	0
 21067  003592                     L9:
 21068  003592  6EDF               	movwf	indf2,c
 21069                           
 21070                           ;main.c: 261: }
 21071                           ;main.c: 262: oldState = newState;
 21072  003594  C048  F049         	movff	buttonHandler@newState,buttonHandler@oldState
 21073  003598  0012               	return		;funcret
 21074  00359A                     __end_of_buttonHandler:
 21075                           	opt stack 0
 21076                           pclatu	equ	0xFFB
 21077                           pclath	equ	0xFFA
 21078                           tblptru	equ	0xFF8
 21079                           tblptrh	equ	0xFF7
 21080                           tblptrl	equ	0xFF6
 21081                           tablat	equ	0xFF5
 21082                           prodh	equ	0xFF4
 21083                           prodl	equ	0xFF3
 21084                           intcon	equ	0xFF2
 21085                           intcon3	equ	0xFF0
 21086                           indf0	equ	0xFEF
 21087                           postinc0	equ	0xFEE
 21088                           plusw0	equ	0xFEB
 21089                           fsr0h	equ	0xFEA
 21090                           fsr0l	equ	0xFE9
 21091                           wreg	equ	0xFE8
 21092                           indf1	equ	0xFE7
 21093                           postinc1	equ	0xFE6
 21094                           postdec1	equ	0xFE5
 21095                           plusw1	equ	0xFE3
 21096                           fsr1h	equ	0xFE2
 21097                           fsr1l	equ	0xFE1
 21098                           indf2	equ	0xFDF
 21099                           postinc2	equ	0xFDE
 21100                           postdec2	equ	0xFDD
 21101                           plusw2	equ	0xFDB
 21102                           fsr2h	equ	0xFDA
 21103                           fsr2l	equ	0xFD9
 21104                           status	equ	0xFD8
 21105                           pclatu	equ	0xFFB
 21106                           pclath	equ	0xFFA
 21107                           tblptru	equ	0xFF8
 21108                           tblptrh	equ	0xFF7
 21109                           tblptrl	equ	0xFF6
 21110                           tablat	equ	0xFF5
 21111                           prodh	equ	0xFF4
 21112                           prodl	equ	0xFF3
 21113                           intcon	equ	0xFF2
 21114                           intcon3	equ	0xFF0
 21115                           indf0	equ	0xFEF
 21116                           postinc0	equ	0xFEE
 21117                           plusw0	equ	0xFEB
 21118                           fsr0h	equ	0xFEA
 21119                           fsr0l	equ	0xFE9
 21120                           wreg	equ	0xFE8
 21121                           indf1	equ	0xFE7
 21122                           postinc1	equ	0xFE6
 21123                           postdec1	equ	0xFE5
 21124                           plusw1	equ	0xFE3
 21125                           fsr1h	equ	0xFE2
 21126                           fsr1l	equ	0xFE1
 21127                           indf2	equ	0xFDF
 21128                           postinc2	equ	0xFDE
 21129                           postdec2	equ	0xFDD
 21130                           plusw2	equ	0xFDB
 21131                           fsr2h	equ	0xFDA
 21132                           fsr2l	equ	0xFD9
 21133                           status	equ	0xFD8
 21134                           
 21135                           	psect	rparam
 21136  0000                     pclatu	equ	0xFFB
 21137                           pclath	equ	0xFFA
 21138                           tblptru	equ	0xFF8
 21139                           tblptrh	equ	0xFF7
 21140                           tblptrl	equ	0xFF6
 21141                           tablat	equ	0xFF5
 21142                           prodh	equ	0xFF4
 21143                           prodl	equ	0xFF3
 21144                           intcon	equ	0xFF2
 21145                           intcon3	equ	0xFF0
 21146                           indf0	equ	0xFEF
 21147                           postinc0	equ	0xFEE
 21148                           plusw0	equ	0xFEB
 21149                           fsr0h	equ	0xFEA
 21150                           fsr0l	equ	0xFE9
 21151                           wreg	equ	0xFE8
 21152                           indf1	equ	0xFE7
 21153                           postinc1	equ	0xFE6
 21154                           postdec1	equ	0xFE5
 21155                           plusw1	equ	0xFE3
 21156                           fsr1h	equ	0xFE2
 21157                           fsr1l	equ	0xFE1
 21158                           indf2	equ	0xFDF
 21159                           postinc2	equ	0xFDE
 21160                           postdec2	equ	0xFDD
 21161                           plusw2	equ	0xFDB
 21162                           fsr2h	equ	0xFDA
 21163                           fsr2l	equ	0xFD9
 21164                           status	equ	0xFD8
 21165                           
 21166                           	psect	temp
 21167  00004F                     btemp:
 21168                           	opt stack 0
 21169  00004F                     	ds	1
 21170  0000                     int$flags	set	btemp
 21171  0000                     wtemp6	set	btemp+1
 21172                           pclatu	equ	0xFFB
 21173                           pclath	equ	0xFFA
 21174                           tblptru	equ	0xFF8
 21175                           tblptrh	equ	0xFF7
 21176                           tblptrl	equ	0xFF6
 21177                           tablat	equ	0xFF5
 21178                           prodh	equ	0xFF4
 21179                           prodl	equ	0xFF3
 21180                           intcon	equ	0xFF2
 21181                           intcon3	equ	0xFF0
 21182                           indf0	equ	0xFEF
 21183                           postinc0	equ	0xFEE
 21184                           plusw0	equ	0xFEB
 21185                           fsr0h	equ	0xFEA
 21186                           fsr0l	equ	0xFE9
 21187                           wreg	equ	0xFE8
 21188                           indf1	equ	0xFE7
 21189                           postinc1	equ	0xFE6
 21190                           postdec1	equ	0xFE5
 21191                           plusw1	equ	0xFE3
 21192                           fsr1h	equ	0xFE2
 21193                           fsr1l	equ	0xFE1
 21194                           indf2	equ	0xFDF
 21195                           postinc2	equ	0xFDE
 21196                           postdec2	equ	0xFDD
 21197                           plusw2	equ	0xFDB
 21198                           fsr2h	equ	0xFDA
 21199                           fsr2l	equ	0xFD9
 21200                           status	equ	0xFD8


Data Sizes:
    Strings     878
    Constant    11
    Data        48
    BSS         414
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      78
    BANK0           160    160     160
    BANK1           256    128     212
    BANK2           256      0     227
    BANK3           256     50     162
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> stack.ethernet(BANK2[15]), stack(BANK2[110]), 

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> stack.ethernet(BANK2[15]), stack(BANK2[110]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(BANK0[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK3[112]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> stack.ethernet(BANK2[15]), stack(BANK2[110]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 110
		 -> stack.pendingPacketToSend(BANK2[60]), stack(BANK2[110]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 110
		 -> stack(BANK2[110]), 

    ARP_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK1[1]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> stack.ethernet(BANK2[15]), stack(BANK2[110]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_67(CODE[17]), STR_66(CODE[4]), STR_65(CODE[8]), STR_64(CODE[3]), 
		 -> STR_63(CODE[2]), STR_62(CODE[3]), STR_61(CODE[16]), STR_60(CODE[15]), 
		 -> STR_59(CODE[10]), STR_58(CODE[2]), STR_57(CODE[3]), STR_56(CODE[5]), 
		 -> STR_55(CODE[3]), STR_54(CODE[2]), STR_53(CODE[39]), arpEntryToString@string(BANK2[50]), 
		 -> ipAdressToString@address(BANK2[16]), STR_52(CODE[18]), STR_51(CODE[4]), STR_50(CODE[5]), 
		 -> macToString@address(BANK0[18]), intToString@number(BANK1[10]), STR_49(CODE[5]), STR_48(CODE[9]), 
		 -> STR_47(CODE[30]), STR_46(CODE[55]), STR_45(CODE[37]), STR_44(CODE[15]), 
		 -> STR_43(CODE[14]), STR_42(CODE[19]), STR_41(CODE[30]), STR_40(CODE[17]), 
		 -> STR_39(CODE[8]), STR_38(CODE[29]), STR_37(CODE[29]), STR_36(CODE[20]), 
		 -> STR_35(CODE[19]), STR_34(CODE[19]), STR_33(CODE[13]), STR_32(CODE[51]), 
		 -> STR_31(CODE[28]), STR_30(CODE[4]), STR_29(CODE[23]), STR_28(CODE[4]), 
		 -> STR_27(CODE[21]), STR_26(CODE[12]), STR_25(CODE[38]), STR_24(CODE[3]), 
		 -> STR_23(CODE[9]), STR_22(CODE[2]), STR_21(CODE[12]), STR_20(CODE[24]), 
		 -> STR_19(CODE[3]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[5]), 
		 -> STR_15(CODE[2]), STR_14(CODE[2]), STR_13(CODE[5]), STR_12(CODE[3]), 
		 -> STR_11(CODE[3]), STR_10(CODE[2]), STR_9(CODE[7]), STR_8(CODE[6]), 
		 -> STR_7(CODE[16]), STR_6(CODE[10]), STR_5(CODE[12]), ethernetController_getDeviceName@string(BANK0[11]), 
		 -> STR_4(CODE[25]), STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[29]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 110
		 -> stack(BANK2[110]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_sendRequest@targetMAC(BANK1[6]), ARP_send@destination(BANK0[6]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_52(CODE[18]), STR_51(CODE[4]), STR_50(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> stack.ethernet(BANK2[15]), stack(BANK2[110]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 110
		 -> ARP_send@ethFrame(BANK0[29]), stack(BANK2[110]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK2[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_readPHYRegister@highByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), 
		 -> ENC424J600_getPacketCount@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_updateLinkStatus@temp(BANK0[1]), 
		 -> ethernetController_dropPacket@newPointerH(BANK0[1]), ethernetController_dropPacket@newPointerL(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_streamFromRXBuffer@foo(BANK0[1]), 
		 -> ethernetController_streamFromRXBuffer@rsvBytes(BANK0[6]), ethernetController_streamFromRXBuffer@newPointerH(BANK0[1]), ethernetController_streamFromRXBuffer@newPointerL(BANK0[1]), ethernetController_getRSV@temp(BANK2[6]), 
		 -> ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), ethernetController_getDestinationMACAddress@temp(COMRAM[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), ethernetController_checkDeviceId@data(BANK0[1]), 
		 -> ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ENC424J600_writeSingleByte@opcode(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), 
		 -> ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), 
		 -> ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), 
		 -> ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), 
		 -> ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), 
		 -> ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_dropPacket@opcode(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), 
		 -> ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), mac.address(COMRAM[6]), 
		 -> ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_readPHYRegister@highByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), 
		 -> ENC424J600_getPacketCount@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), ethernetController_updateLinkStatus@temp(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), ethernetController_checkDeviceId@data(BANK0[1]), 
		 -> ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ethernetController_setLEDConfiguration@data(BANK0[1]), ethernetController_setLEDStatus@data(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 110
		 -> stack(BANK2[110]), 

    ethernetController_streamFromRXBuffer@len	PTR unsigned int  size(2) Largest target is 2
		 -> ARP_parseFromRXBuffer@length(COMRAM[2]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ARP_sendRequest->_ARP_send
    _ARP_checkForEntry->_ipv4_cmp
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_UARTTransmitText
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___wmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_replyIfNeeded->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_streamToTransmitBuffer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDStatus->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDStatus->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfiguration->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfiguration->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_UARTTransmitText
    _UARTTransmitText->_macToString
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getSiliconRevision->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getSeconds

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_replyIfNeeded

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  533017
                                            125 BANK1      3     3      0
                                              0 BANK3     50    50      0
                      _ARP_initTable
                           _UARTInit
                    _UARTTransmitInt
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
_ethernetController_getSiliconRevisi
            _ethernetController_init
    _ethernetController_setLEDStatus
         _handleStackBackgroundTasks
       _ipv4_calculateHeaderChecksum
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15    8006
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   11884
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1579
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   17963
                                             65 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     69     9     60    4198
                                             18 BANK0     67     7     60
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2    1025
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  371734
                                            121 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
_ethernetController_setLEDConfigurat
    _ethernetController_setLEDStatus
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    18     60   92543
                                            148 BANK0     12    12      0
                                             52 BANK1     66     6     60
                  _ARP_checkForEntry
              _ARP_getEntryFromTable
                    _ARP_sendRequest
                   _UARTTransmitText
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ARP_sendRequest                                     56    52      4   52033
                                            144 BANK0      4     0      4
                                              0 BANK1     52    52      0
                           _ARP_send
   _ethernetController_getMacAddress
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (3) _ARP_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _ARP_checkForEntry                                   15     9      6    1138
                                              7 BANK0     15     9      6
                         _getSeconds
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  199720
                                            146 BANK0     11    11      0
                                            118 BANK1      3     0      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                 2     0      2   24091
                                             58 BANK0      2     0      2
                   _UARTTransmitText
      _ethernetController_dropPacket
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8824
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                15    13      2    7455
                                             15 BANK0     15    13      2
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   11903
                                             58 BANK0      4     0      4
                   _UARTTransmitText
_ethernetController_getSiliconRevisi (ARG)
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         20    16      4    4067
                                             19 BANK0     20    16      4
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1132
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                              6 BANK0     13     5      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  116666
                                            144 BANK0      2     2      0
                                             84 BANK1     34    32      2
              _ARP_parseFromRXBuffer
                  _ARP_replyIfNeeded
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _getSeconds                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                       15    13      2   16345
                                             18 BANK0     15    13      2
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ARP_replyIfNeeded                                   84    52     32   63915
                                              0 BANK1     84    52     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1563
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (3) _ipAdressToString                                    22    18      4    2896
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    6637
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ARP_send                                            79    47     32   44471
                                             65 BANK0     79    47     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (4) _mac_setToBroadcast                                   3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   17377
                                             60 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               28    20      8    4492
                                             32 BANK0     28    20      8
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     16     0     16    2268
                                             16 BANK0     16     0     16
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             16     0     16    1072
                                              0 BANK0     16     0     16
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      13     3     10    5969
                                             15 BANK0     13     3     10
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       23     9     14    6347
                                             15 BANK0     23     9     14
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setGPDATAWritePointer                     5     3      2    2969
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer            8     6      2    3888
                                             10 BANK0      8     6      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        8     0      8   13528
                                             18 BANK0      8     0      8
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXStartAddress                         4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXLength                               4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              19    13      6    7517
                                             15 BANK0     19    13      6
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               71    39     32   22869
                                             49 BANK0     71    39     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4     732
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer               31    27      4   19130
                                             18 BANK0     31    27      4
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18960
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   12103
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDStatus                      3     2      1   12377
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfiguration               3     2      1   11787
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6986
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6550
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6485
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11738
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11707
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   54621
                                             70 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   22418
                                             58 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2    7625
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6630
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_setRXTailPointer                          4     2      2    5644
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5284
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_setNextPacketPointer                      2     0      2     301
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11549
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5058
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getSiliconRevision                1     1      0    6488
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6485
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6485
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_readControlRegisterUnbanked               4     2      2    6414
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_readSPI                                  10     8      2    1266
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1540
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _mac_setAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_setToAllZero                                    3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                         _getSeconds (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                18    18      0    1040
                                             21 COMRAM    18    18      0
                      _buttonHandler
                 _sevenSegmentUpdate
                      _updateSeconds
 ---------------------------------------------------------------------------------
 (12) _updateSeconds                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     165
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getSeconds (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitInt
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_getSiliconRevision (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getSiliconRevision
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
   _ethernetController_setLEDStatus
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfiguration
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_setLEDStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_getNextPacketPointer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setNextPacketPointer
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_replyIfNeeded
           _ARP_send
             _ethernetController_getSourceMACAddress
               _ENC424J600_getNextPacketPointer
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getSeconds (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_getNextPacketPointer
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_setERXDATAReadPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ENC424J600_setNextPacketPointer
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _getSeconds
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_getSiliconRevision (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_getEtherTypeField
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _intToString
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_getNextPacketPointer
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_setERXDATAReadPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ENC424J600_setNextPacketPointer
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
       _ARP_checkForEntry
         _getSeconds
         _ipv4_cmp
       _ARP_getEntryFromTable
       _ARP_sendRequest
         _ARP_send
           _ethernetController_getSourceMACAddress
             _ENC424J600_getNextPacketPointer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_sendPacket
             _ENC424J600_setTXLength
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_setTXStartAddress
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameRequest
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _mac_setToBroadcast
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _ethernetController_getMacAddress
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_sendPacket
         _ENC424J600_setTXLength
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_setTXStartAddress
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getSeconds
       _ipAdressToString
         ___lwdiv
         ___lwmod
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _ipv4_calculateHeaderChecksum
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _memory_txFrameRequest
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateSeconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     32      A2      12       63.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      E3      10       88.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     80      D4       8       82.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     347       6        0.0%
DATA                 0      0     347       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Feb 26 00:13:51 2019

                                              main@IPsource 039A  
                  __end_of_ethernetController_getMacAddress 3B1E  
                 __size_of_ethernetController_getMacAddress 0074  
                        ??_ethernetController_getMacAddress 0074  
                         ?_ethernetController_getMacAddress 006E  
                          _ethernetController_getMacAddress 3AAA  
                                                        l80 2814  
                                                        l82 283A  
                                                        l83 2864  
                                                        l86 3FCC  
                                                        l78 2840  
                       __size_of_ipv4_writeHeaderIntoBuffer 016E  
                   ethernetController_getSourceMACAddress@i 0081  
                                       ___wmul@multiplicand 0062  
                                        i2___lwdiv@dividend 0001  
                        ipv4_calculateHeaderChecksum@header 0060  
                                              __CFG_CP0$OFF 000000  
                                              __CFG_CP1$OFF 000000  
                                              __CFG_CP2$OFF 000000  
                                              __CFG_CP3$OFF 000000  
                                               __CFG_LVP$ON 000000  
                                   ??_memory_txFrameRequest 0088  
                                                       l200 35E2  
                                                       l201 35CC  
                                                       l210 35EA  
                                                       l202 35B8  
                                                       l122 385C  
                                                       l212 3618  
                                                       l116 3C82  
                                                       l124 38A4  
                                                       l213 35F2  
                                                       l205 35C0  
                                                       l117 3CC4  
                                                       l214 35F8  
                                                       l206 35C4  
                                                       l304 36FA  
                                                       l209 3602  
                                                       l161 2412  
                                                       l137 3906  
                                                       l401 41E2  
                                                       l162 2400  
                                                       l171 3234  
                                                       l147 3A6A  
                                                       l420 2E9A  
                                                       l340 304E  
                                                       l172 3246  
                                                       l500 20CA  
                                                       l181 367A  
                                                       l165 243A  
                                                       l413 2E66  
                                                       l501 2100  
                                                       l166 247C  
                                                       l158 2422  
                                                       l342 306C  
                                                       l350 08DA  
                                                       l183 36A0  
                                                       l167 2460  
                                                       l159 23A4  
                                                       l351 07AE  
                                                       l503 2144  
                                                       l168 2472  
                                                       l424 2EDA  
                                                       l360 447C  
                                                       l352 0920  
                                                       l504 215C  
                                                       l600 0AB4  
                                                       l273 3D4E  
                                                       l417 2EDE  
                                                       l345 06E6  
                                                       l601 0AEC  
                                                       l282 3BA6  
                                                       l194 3DDA  
                                                       l434 339E  
                                                       l418 2EC8  
                                                       l450 016C  
                                                       l354 07CA  
                                                       l346 0730  
                                                       l610 0D0A  
                                                       l602 0C28  
                                                       l179 364A  
                                                       l371 40C4  
                                                       l419 2E9E  
                                                       l443 00EC  
                                                       l347 076C  
                                                       l611 0D5A  
                                                       l196 3DE6  
                                                       l188 3DC8  
                                                       l436 339A  
                                                       l356 07E6  
                                                       l348 078C  
                                                       l612 0D72  
                                                       l604 0C68  
                                                       l189 3DBA  
                                                       l293 2B28  
                                                       l373 40F0  
                                                       l365 42A0  
                                                       l429 3366  
                                                       l453 01A2  
                                                       l445 010E  
                                                       l286 3BEC  
                                                       l470 0598  
                                                       l462 036C  
                                                       l622 3480  
                                                       l606 0C72  
                                                       l367 42BA  
                                                       l439 33AE  
                                                       l463 041E  
                                                       l455 01AA  
                                                       l447 0138  
                                                       l631 34EE  
                                                       l640 2C22  
                                                       l624 3494  
                                                       l377 44A2  
                                                       l393 41FA  
                                                       l457 03CC  
                                                       l641 2C32  
                                                       l609 0D76  
                                                       l298 2BE0  
                                                       l458 02E6  
                                                       l626 34B0  
                                                       l395 421C  
                                                       l643 2C94  
                                                       l635 2C42  
                                                       l732 3DF8  
                                                       l468 0492  
                                                       l644 2C66  
                                                       l636 2BF2  
                                                       l628 34C4  
                                                       l469 0576  
                                                       l645 2CBC  
                                                       l629 34DA  
                                                       l734 3E20  
                                                       l646 2C74  
                                                       l638 2C02  
                                                       l399 41C0  
                                                       l647 2C84  
                                                       l639 2C12  
                                                       l760 2DE8  
                                                       l921 3CF4  
                                                       l745 1956  
                                                       l905 325C  
                                                       l754 2D28  
                                                       l850 22B4  
                                                       l746 1980  
                                                       l498 2018  
                                                       l915 2F2A  
                                                       l755 2DF6  
                                                       l747 19A8  
                                                       l860 15B0  
                                                       l780 1BD4  
                                                       l756 2D78  
                                                       l748 19D0  
                                                       l764 4050  
                                                       l908 32F8  
                                                       l917 2F82  
                                                       l861 1578  
                                                       l765 4030  
                                                       l774 1A1A  
                                                       l758 2DAC  
                                                       l846 218E  
                                                       l871 16A8  
                                                       l863 15F6  
                                                       l767 403C  
                                                       l864 15BE  
                                                       l776 1B3A  
                                                       l848 21C2  
                                                       l768 4046  
                                                       l873 16EA  
                                                       l857 156A  
                                                       l777 1B8E  
                                                       l849 22A0  
                                                       l874 16EC  
                                                       l866 163C  
                                                       l858 1532  
                                                       l875 1722  
                                                       l867 1604  
                                                       l891 1D52  
                                                       l892 1D28  
                                                       l972 1F86  
                                                       l869 1672  
                                                       l973 1FA2  
                                                       l894 1D8A  
                                                       l895 1D60  
                                                       l992 4106  
                                                       l888 1D1A  
                                                       l968 1EF0  
                                                       l897 1DC2  
                                                       l889 1CF0  
                                                       l994 4132  
                                                       l898 1D98  
                                                       l978 3E9A  
                                                       l998 42D0  
                                              __CFG_CPB$OFF 000000  
                               __end_of_ipv4_txFrameRequest 2734  
                                              __CFG_CPD$OFF 000000  
                                                       _ISR 0008  
             ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                  __end_of_ethernetController_getDeviceName 4528  
                 __size_of_ethernetController_getDeviceName 0024  
                        ??_ethernetController_getDeviceName 0062  
                         ?_ethernetController_getDeviceName 0060  
                                         _ARP_replyIfNeeded 2872  
                          _ethernetController_getDeviceName 4504  
                                  memory_txFrameClear@index 0060  
                      ENC424J600_readPHYRegister@unusedBits 0078  
                       ethernetController_getMacAddress@mac 0074  
                            memory_txFrameRequest@freeIndex 009B  
             ethernetController_streamFromRXBuffer@rsvBytes 007C  
                              ??_ENC424J600_enableReception 006B  
                                                       prod 000FF3  
             ethernetController_streamFromRXBuffer@startEnd 008F  
                                                       wreg 000FE8  
                                                _TXSTA1bits 000FAC  
                                        _sevenSegmentUpdate 30DA  
                                        ?_ARP_replyIfNeeded 0100  
                                    _numberOfOccupiedFields 004A  
                        __size_of_ethernetController_getRSV 0074  
                              ipv4_sendFrame@requestCounter 01C8  
                                                      ?_ISR 0001  
                            ?_ethernetController_sendPacket 0072  
                                                      l1000 42EA  
                                                      l1004 4576  
                                                      l1410 3EC0  
                                                      l1411 3EB8  
                                                      l1420 408A  
                                                      l1421 4082  
                                                      l1414 3EE0  
                                                      l1415 3EEA  
                                                      l1424 40A2  
                                                      l1425 40AC  
                                                      l1361 37A0  
                                                      l1362 37AE  
                                                      l1371 3C42  
                                                      l1372 3C50  
                                                      l1357 376C  
                                                      l1358 3760  
                                                      l1367 3C1A  
                                                      l1368 3C0E  
                                                      l8100 3254  
                                                      l7064 02DE  
                                                      l7234 4474  
                                                      l8114 32F8  
                                                      l7180 3CC4  
                                                      l7412 2DE8  
                                                      l7404 2DC0  
                                                      l7318 239C  
                                                      l7502 42C8  
                                                      l7422 4298  
                                                      l9102 0902  
                                                      l7416 2DF6  
                                                      l9104 0918  
                                                      l6722 3D7C  
                                                      l7522 40FE  
                                                      l7442 40BC  
                                                      l7194 38FE  
                                                      l7098 0416  
                                                      l8414 449A  
                                                      l7462 1A12  
                                                      l8168 282C  
                                                      l6808 41F2  
                                                      l7394 2D8C  
                                                      l6932 3854  
                                                      l6828 41B8  
                                                      l8622 3CEC  
                                                      l6950 389C  
                                                      l7816 171A  
                                                      l8554 20CA  
                                                      l8476 456E  
           ethernetController_streamToTransmitBuffer@opcode 0071  
                                                      l7918 3A62  
                                                      l6992 3BD4  
                                                      l8744 3E9A  
                                                      l7866 2F22  
                                                      l7984 2B5A  
                                                      STR_1 7DE2  
                                                      STR_2 7EF9  
                                                      STR_3 7F2A  
                                                      STR_4 7E1B  
                                                      STR_5 7F8B  
                             ?_ethernetController_softReset 009A  
                                                      STR_6 7FA1  
                                                      STR_7 7F1A  
                                                      STR_8 7FD4  
                                                      STR_9 7FCD  
                 ethernetController_clearInterruptFlag@flag 0072  
                 ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                      u8010 38BE  
                                                      _RCIE 007CED  
                                                      _RCIF 007CF5  
                                                      u8030 3BD4  
                                                      u8111 012E  
                                                      u8040 3BE4  
                                                      u8201 0304  
                                                      u8121 0162  
                                                      u8211 0322  
                                                      u9011 1DD4  
                                                      u9100 1188  
                                                      u8301 045C  
                                                      u8061 00E2  
                                                      u9030 3770  
                                                      _RCIP 007CFD  
                                                      u8311 047A  
                                                      u7600 3D7C  
                                                      u9200 124E  
                                                      u9120 11AE  
                                                      u8241 0362  
                                                      u8081 0104  
                                                      u7610 3D8C  
                                                      u8330 0498  
                                                      u8250 0372  
                                                      u8420 392C  
                                                      u7620 3310  
                                                      u9060 3C1E  
                                                      u9300 1318  
                                                      u9220 1278  
                                                      u9140 11D6  
                                                      u8261 03C2  
                                                      u7630 331E  
                                                      u9118 118C  
                                                      u8431 3938  
                                                      u8351 056C  
                                                      u8600 3E44  
                                                      u7640 332C  
                                                      u7800 41E8  
                                                      u9400 13DC  
                                                      u9320 133E  
                                                      u9240 12A0  
                                                      u9160 1200  
                                                      u9080 1164  
                                                      u8441 3028  
                                                      u7650 333A  
                                                      u7810 2E10  
                                                      u8530 3EC4  
                                                      u9218 1252  
                                                      u9138 11B2  
                                                      u8371 058E  
                                                      u7820 2E1E  
                                                      u9420 1402  
                                                      u9340 1366  
                                                      u9260 12C6  
                                                      u9180 1226  
                                                      u8621 3B14  
                                                      u8701 2D02  
                                                      u7830 2E2C  
                                                      u9318 131C  
                                                      u9238 127C  
                                                      u9158 11DA  
                                                      u8607 3E3A  
                                                      u8471 307E  
                                                      u9600 16E6  
                                                      u7840 2E3A  
                                                      u8560 408E  
                                                      u9360 1390  
                                                      u9280 12EE  
                                                      u8481 3098  
                                                      u9441 141E  
                                                      u8650 23BE  
                                                      u8810 40F4  
                                                      u7690 3362  
                                                      u7770 4222  
                                                      u9418 13E0  
                                                      u9338 1342  
                                                      u9258 12A4  
                                                      u9178 1204  
                                                      u9098 1168  
                                                      u7931 2EA8  
                                                      u8491 30CC  
                                                      u8580 3E18  
                                                      u8900 42EE  
                                                      u8740 2DD2  
                                                      u9460 193E  
                                                      u9380 13B8  
                                                      u7941 2EBA  
                                                      u9701 28EC  
                                                      u8590 3E24  
                                                      u8750 2DF6  
                                                      u9470 1968  
                                                      u9438 1406  
                                                      u9358 136A  
                                                      u9278 12CA  
                                                      u9198 122A  
                                                      u9711 290E  
                                                      u7880 2E62  
                                                      u9480 1990  
                                                      u7961 2EE8  
                                                      u9721 2920  
                                                      u9801 3AA0  
                                                      u8930 4136  
                                                      u9650 171A  
                                                      u8850 1B66  
                                                      u9490 19B8  
                                                      u9378 1394  
                                                      u9298 12F2  
                                                      u8587 3E0E  
                                                      u7971 2EFA  
                                                      u9731 2944  
                                                      u8780 42BE  
                                                      u9661 1738  
                                                      u8941 1C18  
                                                      u9901 21DA  
                                                      u7990 3884  
                                                      u8870 1BD8  
                                                      u9398 13BC  
                                                      u8951 1C2A  
                                                      u9911 2238  
                                                      u9760 2F86  
                                                      u9824 36DE  
                                                      u9825 36DA  
                                                      u9681 2886  
                                                      u9834 3720  
                                                      u9850 2B5A  
                                                      u9771 2FC4  
                                                      u9835 371C  
                                                      u9691 2898  
                                                      u9941 22BE  
                                                      u9870 2180  
                                                      u9790 3A84  
                                                      u9951 22D4  
                                                      u9881 21A0  
                                                      u9961 33BC  
                                                      u9971 341E  
                                                      u9981 3440  
                                                      u9991 3452  
                                                      _TRMT 007D61  
                                            mac_isAllZero@i 0062  
                                       ?_sevenSegmentUpdate 000F  
                                       ??_ARP_replyIfNeeded 00F0  
                              ipv4_sendFrame@requestTimeout 0171  
                                         _ipv4_setToAllZero 4568  
                                                      _main 0A04  
                                   printEthernetState@state 009A  
                                                      fsr0h 000FEA  
                                                      fsr1h 000FE2  
                                        i2___lwdiv@quotient 0005  
                                                      indf0 000FEF  
                                                      fsr2h 000FDA  
                                                      fsr0l 000FE9  
                                                      indf1 000FE7  
                                                      indf2 000FDF  
                                                      fsr1l 000FE1  
                                                      fsr2l 000FD9  
                                                      btemp 004F  
                                             __CFG_BORV$190 000000  
              ethernetController_streamToTransmitBuffer@len 006A  
                                        intToString@pointer 0086  
                                            ?_updateSeconds 0001  
                                 __size_of_sevenSegmentInit 001A  
                                   _ethernetController_init 3B1E  
                                        ?_ipv4_setToAllZero 0060  
                                                      prodh 000FF4  
                                                      prodl 000FF3  
                       __size_of_handleStackBackgroundTasks 01AA  
                                                      start 00C4  
            __end_of_ethernetController_getSourceMACAddress 3942  
           __size_of_ethernetController_getSourceMACAddress 0080  
                  ??_ethernetController_getSourceMACAddress 0075  
                   ?_ethernetController_getSourceMACAddress 006F  
                    _ethernetController_getSourceMACAddress 38C2  
                                             __CFG_IESO$OFF 000000  
                                   __end_of_UARTTransmitInt 454A  
                                 _ENC424J600_getPacketCount 45D8  
                               __end_of_ENC424J600_writeSPI 3D94  
                                           ??_mac_isAllZero 0062  
                                             __CFG_MCLRE$ON 000000  
                                memory_txFrameRequest@field 0093  
                                              ___param_bank 000000  
                                          ARP_setNewEntry@i 007B  
                                   _checkForOverlapSwitched 3300  
                ENC424J600_setRXBufferStartAddress@highByte 0071  
              __end_of_ethernetController_getEtherTypeField 3842  
             __size_of_ethernetController_getEtherTypeField 0082  
                    ??_ethernetController_getEtherTypeField 0071  
                     ?_ethernetController_getEtherTypeField 006F  
                      _ethernetController_getEtherTypeField 37C0  
                                                     ??_ISR 0016  
                                       ??_ipv4_setToAllZero 0062  
                       __size_of_ENC424J600_enableReception 0008  
                                            _ipv4_isAllZero 42C2  
                                      ??_sevenSegmentUpdate 0011  
                                              ?_intToString 0073  
          __end_of_ethernetController_getCurrentPacketCount 467C  
         __size_of_ethernetController_getCurrentPacketCount 0006  
                 ?_ethernetController_getCurrentPacketCount 0001  
                ??_ethernetController_getCurrentPacketCount 006F  
                  _ethernetController_getCurrentPacketCount 4676  
                                  __size_of_ARP_setNewEntry 00EE  
                                          __end_of_ARP_send 1DE2  
                                 __end_of_ARP_replyIfNeeded 299A  
                                         _nextPacketPointer 0045  
                                  __size_of_ARP_sendRequest 00AE  
                                                     ?_main 0001  
                                                     STR_10 7FDD  
                                                     STR_11 7FF5  
                                                     STR_12 7FF8  
                                                     STR_20 7E34  
                                                     STR_13 7FE9  
                                                     STR_21 7F7F  
                                                     STR_30 7FE5  
                                                     STR_22 7E8A  
                                                     STR_14 7FFC  
                                                     STR_15 7FDD  
                                                     STR_23 7FB4  
                                                     STR_31 7DFF  
                                                     STR_24 7CF7  
                                                     STR_16 7F15  
                                                     STR_40 7EE8  
                                                     STR_32 7CC7  
                                                     STR_17 7FF2  
                                                     STR_33 7F66  
                                                     STR_41 7D6C  
                                                     STR_25 7D21  
                                                     STR_18 7FFB  
                                                     STR_50 7FDF  
                                                     STR_26 7F73  
                                                     STR_42 7EB2  
                                                     STR_34 7E9F  
                                                     STR_19 7CF7  
                                                     STR_51 7FEE  
                                                     STR_43 7F58  
                                                     STR_35 7E8C  
                                                     STR_27 7E63  
                                                     STR_28 7FE5  
                                                     STR_44 7F49  
                                                     STR_60 7F3A  
                                                     STR_52 7EC5  
                                                     STR_36 7E78  
                                                     STR_61 7F0A  
                                                     STR_29 7E4C  
                                                     STR_37 7DA8  
                                                     STR_45 7D47  
                                                     STR_53 7CFA  
                                                     STR_62 7E89  
                                                     STR_54 7FDD  
                                                     STR_38 7DC5  
                                                     STR_46 7C90  
                                                     STR_55 7E89  
                                                     STR_63 7FFC  
                                                     STR_39 7FC5  
                                                     STR_47 7D8A  
                                                     STR_56 7FDA  
                                                     STR_48 7FAB  
                                                     STR_57 7E89  
                                                     STR_49 7FE4  
                                                     STR_65 7FBD  
                                                     STR_66 7FE5  
                                                     STR_58 7FFC  
                                                     STR_59 7F97  
                                                     STR_67 7ED7  
                                           __end_of___lldiv 37C0  
                                                     u10110 29B2  
                                                     u10030 32FC  
                                                     u10041 4344  
                                                     u10210 2A38  
                                                     u10130 29CA  
                                                     u11011 0B40  
                                                     u11021 0C42  
                                                     u10310 462A  
                                                     u10230 2A54  
                                                     u10150 29E4  
                                                     u10208 2A22  
                                                     u10128 29B6  
                                                     u10250 2A72  
                                                     u10170 2A00  
                                                     u10308 2AAA  
                                                     u10228 2A3C  
                                                     u10148 29CE  
                                                     u10501 0842  
                                                     u11061 0CDE  
                                                     u10270 2A8E  
                                                     u10190 2A1E  
                                                     u10248 2A58  
                                                     u10168 29E8  
                                                     u10441 0604  
                                                     u11081 0D38  
                                                     u10290 2AA6  
                                                     u11091 0D64  
                                                     u11147 0BAA  
                                                     u10268 2A76  
                                                     u10188 2A04  
                                                     u11157 2B22  
                                                     u10541 1E22  
                                                     u11167 27C0  
                                                     u10551 1E62  
                                                     u10640 4512  
                                                     u10288 2A92  
                                                     u11177 2808  
                                           __end_of___llmod 3C62  
                                                     u10561 1E92  
                                                     u10491 0808  
                                                     u10571 1EA4  
                                                     u10581 1EB6  
                                                     u10591 1ECC  
                                                     u10761 3CFE  
                                                     u10681 203C  
                                                     u10905 2666  
                                                     u10906 266A  
                                                     u10915 268A  
                                                     u10916 268E  
                                                     u10861 34F8  
                                                     u10890 1082  
                                                     u10875 0E56  
                                                     u10885 0F04  
                                                     u10895 1078  
                                           __end_of___lwdiv 3EF4  
                                __end_of_printEthernetState 3502  
                                           __end_of___lwmod 40B6  
                                             __CFG_WDTEN$ON 000000  
                                                     i2l512 44DA  
                                                     i2l700 3114  
                                                     i2l710 399E  
                                                     i2l711 39A2  
                                                     i2l703 3130  
                                                     i2l712 39A6  
          ethernetController_streamToTransmitBuffer@pointer 0041  
                                                     i2l707 39AA  
                                                     i2l660 3544  
                                                     i2l708 399A  
                                                     i2l661 3588  
                                                     i2l658 3534  
                                                     i2l668 0074  
                                                     i2l698 310C  
                                                     _SPBRG 000FAF  
                                                     _PORTA 000F80  
                                                     _PORTB 000F81  
                                                     _PORTC 000F82  
                          __size_of_ethernet_txFrameRequest 00E4  
                                                     _TRISA 000F92  
                                                     _TRISB 000F93  
                                                     _TRISC 000F94  
                          ENC424J600_setTXStartAddress@addr 006E  
           __end_of_ENC424J600_writeControlRegisterUnbanked 425C  
          __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
                 ??_ENC424J600_writeControlRegisterUnbanked 006C  
                  ?_ENC424J600_writeControlRegisterUnbanked 006A  
                   _ENC424J600_writeControlRegisterUnbanked 4226  
                                  ARP_parseFromRXBuffer@arp 00B8  
                                             __CFG_WRT0$OFF 000000  
                                             __CFG_WRT1$OFF 000000  
                                             __CFG_WRT2$OFF 000000  
                                             __CFG_WRT3$OFF 000000  
                                             _ARP_initTable 3CCA  
                                            __CFG_EBTR0$OFF 000000  
                                            __CFG_FCMEN$OFF 000000  
                                            __CFG_EBTR1$OFF 000000  
                                            __CFG_EBTR2$OFF 000000  
                                            __CFG_EBTR3$OFF 000000  
                                           __end_of_mac_cmp 40F8  
                                          __end_of_UARTInit 463E  
                                       intToString@hundreds 0083  
                                             __CFG_WRTB$OFF 000000  
                                             __CFG_WRTC$OFF 000000  
                                             __CFG_WRTD$OFF 000000  
                                            __CFG_EBTRB$OFF 000000  
                  __end_of_ENC424J600_setGPDATAWritePointer 4176  
                 __size_of_ENC424J600_setGPDATAWritePointer 003C  
                        ??_ENC424J600_setGPDATAWritePointer 006C  
                         ?_ENC424J600_setGPDATAWritePointer 006A  
                          _ENC424J600_setGPDATAWritePointer 413A  
                                 __end_of_ipv4_setToAllZero 4586  
                                                     _stack 020F  
                                                     main@i 0396  
             ethernetController_streamToTransmitBuffer@data 0070  
                         __end_of_ethernetController_getRSV 3AAA  
                                                     pclath 000FFA  
                                                     tablat 000FF5  
                              ethernet_txFrameRequest@frame 009C  
                               ARP_parseFromRXBuffer@i_2503 00B3  
                               ARP_parseFromRXBuffer@i_2504 00B4  
                               ARP_parseFromRXBuffer@i_2505 00B5  
                                          ?_checkForOverlap 0070  
                                                     plusw0 000FEB  
                                                     plusw1 000FE3  
                                                     plusw2 000FDB  
                                    ENC424J600_readSPI@data 0060  
                               memory_txFrameRequest@i_1136 0092  
                                                     status 000FD8  
                                            __CFG_T3CMX$RC0 000000  
                                                     wtemp6 0050  
                         ENC424J600_clearInterruptFlag@flag 0070  
                               __size_of_mac_setToBroadcast 0026  
                                            __CFG_ICPRT$OFF 000000  
                         ENC424J600_clearInterruptFlag@temp 0071  
                                  __end_of_UARTTransmitText 3E4C  
                                               ARP_send@arp 00A1  
                                            __CFG_PBADEN$ON 000000  
                                            _ipv4_sendFrame 1DE2  
                                        __size_ofi2___lwdiv 0052  
                                              ?_parseNumber 0008  
                                           intToString@ones 0082  
                                          _ipAdressToString 1A08  
                                           intToString@tens 0081  
                               ARP_parseFromRXBuffer@length 004B  
                               ARP_parseFromRXBuffer@offset 00B6  
                               ?_ENC424J600_readPHYRegister 006E  
                                           __initialization 39C0  
                         ethernetController_softReset@F5823 004D  
                         ethernetController_softReset@F5825 0043  
                               memory_txFrameRequest@length 0080  
                                         ARP_setNewEntry@ip 006A  
                            __size_of_ARP_getEntryFromTable 002E  
                                              __end_of_main 0D98  
                                    __end_of_ipv4_isAllZero 42F2  
                             __end_of_ARP_getEntryFromTable 434E  
                                    arpEntryToString@string 027D  
                                      _ipv4_handleNewPacket 4586  
                                            __CFG_PCLKEN$ON 000000  
                                _memory_txFrameRequest$1132 008E  
                                             main@headerBuf 0374  
                                                    ??_main 017D  
                                 __size_of_entireMemoryFull 003A  
            __end_of_ethernetController_setLEDConfiguration 3628  
           __size_of_ethernetController_setLEDConfiguration 008E  
                  ??_ethernetController_setLEDConfiguration 006F  
                   ?_ethernetController_setLEDConfiguration 006E  
                    _ethernetController_setLEDConfiguration 359A  
                                             __activetblptr 000002  
                        __end_of_ipv4_writeHeaderIntoBuffer 25EE  
                                _ipv4_writeHeaderIntoBuffer 2480  
                                            ?_ARP_initTable 0001  
                                         ARP_sendRequest@ip 00F0  
                           handleStackBackgroundTasks@stack 0179  
                                            __CFG_SDOMX$RB3 000000  
                                           __CFG_CCP2MX$RC1 000000  
         ethernetController_writeDestinationMACAddress@addr 006F  
         ethernetController_writeDestinationMACAddress@data 007D  
                  ethernetController_pollInterruptFlags@reg 007D  
                                          ___llmod@dividend 0060  
                                      __size_of_macToString 0108  
                                                    _ANSELA 000F5B  
                                                    _ANSELB 000F5C  
                                                    _ANSELC 000F5D  
                                ethernetController_getRSV@i 0077  
                                printEthernetState@oldState 0200  
                                                    i2l1410 3F12  
                                                    i2l1411 3F0A  
                                                    i2l1414 3F32  
                                                    i2l1415 3F3C  
                                    ARP_sendRequest@request 0114  
                                                    i2l6302 3128  
                                                    i2l6270 3544  
                                 ??_ethernetController_init 00A9  
                                           ??_updateSeconds 0001  
         __end_of_ethernetController_streamToTransmitBuffer 3CCA  
        __size_of_ethernetController_streamToTransmitBuffer 0068  
               ??_ethernetController_streamToTransmitBuffer 006C  
                ?_ethernetController_streamToTransmitBuffer 006A  
                 _ethernetController_streamToTransmitBuffer 3C62  
                              __size_of_ARP_handleNewPacket 01A2  
                                    __end_of_ipv4_sendFrame 1FBA  
                                                    _TXREG1 000FAD  
                        ethernetController_setLEDStatus@LED 006F  
                               __size_of_ENC424J600_initSPI 001C  
                               __size_of_ENC424J600_readSPI 006A  
                                          mac_isAllZero@mac 0060  
                            ??_ethernetController_softReset 009D  
                                 ??_checkForOverlapSwitched 0070  
                                ethernetController_init@err 00A9  
                                    __size_of_buttonHandler 0098  
                                   ?_ethernet_rxGetNewFrame 0176  
                                          ?_UARTTransmitInt 009A  
                                            __CFG_XINST$OFF 000000  
                                          __end_of_ipv4_cmp 413A  
                                           ?_ipv4_isAllZero 0060  
                                                    ___wmul 43F6  
                                     ?_ipv4_handleNewPacket 009A  
                        __end_of_handleStackBackgroundTasks 2164  
                                _handleStackBackgroundTasks 1FBA  
                                            __CFG_STVREN$ON 000000  
                                     buttonHandler@oldState 0049  
                                                 ??___lldiv 006E  
               ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                     buttonHandler@newState 0048  
               ENC424J600_writeControlRegisterUnbanked@data 006A  
                                                 ??___llmod 0068  
                                                 ??___lwdiv 0064  
                                                 ??___lwmod 0064  
                              buttonHandler@debounceCounter 002C  
                                                    clear_0 39FE  
                                                    clear_1 3A0A  
                                                    clear_2 3A16  
                                                    clear_3 3A22  
                                parseNumber@numberToDisplay 0008  
                            __size_of_ARP_parseFromRXBuffer 031A  
                                __size_of_ARP_replyIfNeeded 0128  
                             __end_of_ARP_parseFromRXBuffer 1742  
    __end_of_ethernetController_writeEtherTypeFieldToBuffer 3F94  
   __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
          ??_ethernetController_writeEtherTypeFieldToBuffer 0079  
           ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
            _ethernetController_writeEtherTypeFieldToBuffer 3F46  
                                                 ??_mac_cmp 0064  
                                          ??_mac_setAllZero 0062  
                                             main@prescaler 0370  
                        __end_of_ENC424J600_enableReception 4676  
                                _ENC424J600_enableReception 466E  
            __end_of_ENC424J600_readControlRegisterUnbanked 4292  
           __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                  ??_ENC424J600_readControlRegisterUnbanked 006C  
                   ?_ENC424J600_readControlRegisterUnbanked 006A  
                    _ENC424J600_readControlRegisterUnbanked 425C  
                                              __pdataCOMRAM 004D  
                  ethernetController_softReset@comFailCount 009E  
                                         __end_ofi2___lwdiv 3F46  
                      __end_of_ENC424J600_setTXStartAddress 4378  
                     __size_of_ENC424J600_setTXStartAddress 002A  
                              _ENC424J600_setTXStartAddress 434E  
                                              __mediumconst 7C84  
                                                    tblptrh 000FF7  
                                                    tblptrl 000FF6  
                                                    tblptru 000FF8  
                                         ??_ARP_setNewEntry 0072  
                            ipv4_sendFrame@numberOfRequests 0170  
             __end_of_ethernetController_clearInterruptFlag 465A  
            __size_of_ethernetController_clearInterruptFlag 000E  
                    ?_ethernetController_clearInterruptFlag 0001  
                   ??_ethernetController_clearInterruptFlag 0072  
                     _ethernetController_clearInterruptFlag 464C  
                                         ??_ARP_sendRequest 00F4  
                                      intToString@thousands 0084  
                                       mac_setToBroadcast@i 0062  
                                __size_of_ipv4_setToAllZero 001E  
          ethernetController_streamFromRXBuffer@newPointerH 0089  
          ethernetController_streamFromRXBuffer@newPointerL 0088  
                           ethernetController_softReset@err 00A3  
                                           _numberToDisplay 0030  
                                      __CFG_LS48MHZ$SYS24X4 000000  
                                   ipAdressToString@address 02D3  
                         sevenSegmentUpdate@digitsToDisplay 0038  
                                                __accesstop 0060  
                                   __end_of__initialization 3A28  
                                         _printErrorMessage 2BE2  
             ethernetController_getEtherTypeField@ethertype 0079  
                                           ?_ipv4_sendFrame 0134  
                                   ?_ENC424J600_setTXLength 006E  
                                                 ?_ARP_send 00A1  
                            __end_of_ethernet_rxGetNewFrame 0A04  
                                          _sevenSegmentInit 45BE  
                 ethernetController_updateLinkStatus@temp16 0083  
                                             ___rparam_used 000001  
                                        ?_printErrorMessage 009A  
                 ethernetController_getSiliconRevision@data 006E  
                ethernetController_pollInterruptFlags@flags 007B  
                                            __pcstackCOMRAM 0001  
                                          __CFG_nPWRTEN$OFF 000000  
                                   ipAdressToString@pointer 007B  
   ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                              __pidataBANK2 42F2  
                                                 ?_UARTInit 0001  
                                        ARP_setNewEntry@mac 0064  
                                       ??_printErrorMessage 009D  
                           __end_of_ethernetController_init 3B90  
                           ??_ethernetController_dropPacket 0074  
                                                 ARP_send@i 00C7  
       ethernetController_getSourceMACAddress@sourceAddress 007A  
                                           ??_ARP_initTable 007C  
                                   _ethernet_txFrameRequest 2FF6  
                      __end_of_ENC424J600_getInterruptFlags 402E  
                     __size_of_ENC424J600_getInterruptFlags 004C  
                              _ENC424J600_getInterruptFlags 3FE2  
                                      __size_of_intToString 02C6  
                           __end_of_checkForOverlapSwitched 33B2  
                                             _buttonHandler 3502  
                        ethernetController_dropPacket@frame 0072  
                            __size_of_memory_txFrameRequest 04DA  
                             __end_of_memory_txFrameRequest 05A2  
                             ?_ENC424J600_setTXStartAddress 006E  
                                 __end_of_printErrorMessage 2CF8  
                                                __pbssBANK1 0180  
                                                __pbssBANK2 0200  
                                                __pbssBANK3 0300  
       ethernetController_streamFromRXBuffer@nextPktPointer 008B  
                            __end_of_ENC424J600_setTXLength 43A2  
                               __end_of_memory_txFrameClear 4504  
                    ethernetController_streamFromRXBuffer@i 0090  
                                                ??_ARP_send 00C1  
                                         _etherTypeToString 402E  
                     ethernetController_setLEDStatus@status 006E  
                                        ?_etherTypeToString 0060  
                                         __CFG_PLLSEL$PLL4X 000000  
                                    ??_ipv4_handleNewPacket 009C  
             __end_of_ethernetController_getSiliconRevision 4568  
            __size_of_ethernetController_getSiliconRevision 001E  
                    ?_ethernetController_getSiliconRevision 0001  
                   ??_ethernetController_getSiliconRevision 006E  
                     _ethernetController_getSiliconRevision 454A  
                           ??_ethernetController_sendPacket 007A  
                                                   ?___wmul 0060  
                                                ??_UARTInit 0060  
                                      __size_of_parseNumber 007E  
                                     macToString@firstDigit 0093  
                                       ??_etherTypeToString 0062  
                                                _getSeconds 460A  
            ethernetController_writeDestinationMACAddress@i 0085  
                                          _entireMemoryFull 41B2  
                                   ARP_sendRequest@senderIP 0100  
                                   ARP_sendRequest@targetIP 010A  
                                            ?_buttonHandler 0001  
                                etherTypeToString@ethertype 0060  
                                 updateSeconds@prescaler_ms 003F  
                   ENC424J600_updateReceiveStatusVector@rsv 0060  
                             ?_ENC424J600_getInterruptFlags 006E  
                         ENC424J600_readPHYRegister@lowByte 007D  
                                  __end_of_ipAdressToString 1BF6  
                  ENC424J600_setERXDATAReadPointer@highByte 006E  
                                   ENC424J600_writeSPI@data 0060  
                                                   _SSP1BUF 000FC9  
                                         ipv4_sendFrame@err 0173  
    ethernetController_writeEtherTypeFieldToBuffer@highByte 007A  
                              __size_of_ipv4_txFrameRequest 0146  
                                                 ?_ipv4_cmp 0060  
                                          __CFG_CFGPLLEN$ON 000000  
                                        _printEthernetState 3460  
                              ?_ENC424J600_setRXTailPointer 006E  
                                 __end_of_etherTypeToString 4072  
                    ENC424J600_setRXBufferStartAddress@addr 006E  
                       ethernetController_setLEDStatus@data 0070  
             __end_of_ethernetController_streamFromRXBuffer 2480  
            __size_of_ethernetController_streamFromRXBuffer 017A  
                   ??_ethernetController_streamFromRXBuffer 0076  
                    ?_ethernetController_streamFromRXBuffer 0072  
                     _ethernetController_streamFromRXBuffer 2306  
                            sevenSegmentUpdate@digitPointer 0047  
                                         ?_UARTTransmitText 0098  
                                                   __Hparam 0000  
                                                   __Lparam 0000  
                                           ipv4_isAllZero@i 0062  
                                       ?_printEthernetState 009A  
                                        ??_UARTTransmitText 009A  
                                  checkForOverlapSwitched@a 0060  
                                  checkForOverlapSwitched@b 0068  
                                        buttonHandler@state 0001  
                                     __end_of_mac_isAllZero 42C2  
                                                   ___lldiv 373C  
                                           __size_of___wmul 0028  
                                                   ___llmod 3BFA  
                                                   ___lwdiv 3EA0  
                                                   ___lwmod 4072  
                      ENC424J600_setGPDATAWritePointer@addr 006A  
                                 ??_ethernet_txFrameRequest 009E  
                                       sevenSegmentUpdate@i 0015  
                ipv4_streamToTransmissionBuffer@dataPointer 003B  
                                                   __pcinit 39C0  
                               __size_of_sevenSegmentUpdate 00BE  
                                       parseNumber@hundreds 000E  
                                                   __ramtop 0800  
                              __size_of_ENC424J600_writeSPI 0064  
                                       _ARP_handleNewPacket 2164  
                                                   __ptext0 0A04  
                                                   __ptext1 45BE  
                                                   __ptext2 3460  
                                                   __ptext3 2BE2  
                                                   __ptext4 2480  
                                                   __ptext5 25EE  
                                                   __ptext6 3E4C  
                                                   __ptext7 0D98  
                                                   __ptext8 1FBA  
                                                   __ptext9 1DE2  
                                                   _mac_cmp 40B6  
                                                 _T0CONbits 000FD5  
                              ??_handleStackBackgroundTasks 017B  
                                              __size_of_ISR 00BC  
                    ENC424J600_setGPDATAWritePointer@opcode 006C  
                        ENC424J600_setRXTailPointer@lowByte 0070  
                ethernetController_streamFromRXBuffer@i_691 0084  
                __end_of_ENC424J600_setRXBufferStartAddress 43F6  
               __size_of_ENC424J600_setRXBufferStartAddress 002A  
                      ??_ENC424J600_setRXBufferStartAddress 0070  
                       ?_ENC424J600_setRXBufferStartAddress 006E  
                        _ENC424J600_setRXBufferStartAddress 43CC  
                           ENC424J600_setRXTailPointer@addr 006E  
                     __end_of_ethernetController_dropPacket 324E  
                    __size_of_ethernetController_dropPacket 00B6  
                             _ethernetController_dropPacket 3198  
                               ?_ipv4_writeHeaderIntoBuffer 0060  
                                      ??_printEthernetState 00A9  
                                                   _seconds 0034  
             __end_of_ethernetController_pollInterruptFlags 2AC0  
            __size_of_ethernetController_pollInterruptFlags 0126  
                   ??_ethernetController_pollInterruptFlags 007A  
                    ?_ethernetController_pollInterruptFlags 0078  
                     _ethernetController_pollInterruptFlags 299A  
                   ENC424J600_setGPDATAWritePointer@lowByte 006D  
                                                   main@err 0397  
                              ??_ENC424J600_writeSingleByte 006A  
                                      end_of_initialization 3A28  
                                __size_of_printErrorMessage 0116  
                                                 _ARP_table 0300  
                                                ??_ipv4_cmp 0064  
                                __end_of_mac_setToBroadcast 4494  
                                      ?_ARP_handleNewPacket 0154  
                                ?_ethernetController_getRSV 0071  
                                             __Lmediumconst 7C84  
               ethernetController_streamFromRXBuffer@offset 0074  
                                          ??_ipv4_isAllZero 0062  
                           ipv4_calculateHeaderChecksum@sum 006E  
                                           mac_setAllZero@i 0062  
               ethernetController_streamFromRXBuffer@opcode 0086  
                  ethernetController_streamFromRXBuffer@foo 0087  
                  ethernetController_streamFromRXBuffer@len 0072  
                                           ___lldiv@divisor 006A  
                                ARP_getEntryFromTable@index 0067  
                                           ___lldiv@counter 0072  
                                        entireMemoryEmpty@i 0060  
                                ARP_setNewEntry@oldestIndex 007A  
                                  __size_of_checkForOverlap 0108  
                                                   postdec1 000FE5  
                                                   postdec2 000FDD  
                                           macToString@addr 007A  
                                                   postinc0 000FEE  
                                                   postinc1 000FE6  
                                                   postinc2 000FDE  
                               ?_handleStackBackgroundTasks 0179  
                                           _ARP_setNewEntry 2F08  
                     memory_txFrameRequest@fNoOverlapMarker 0090  
                      ENC424J600_readPHYRegister@PHYaddress 0077  
                                           _ARP_sendRequest 33B2  
                                     _ARP_getEntryFromTable 4320  
                            ENC424J600_setTXLength@highByte 0071  
                                               ?_getSeconds 0060  
                                           ??_buttonHandler 0003  
                     __end_of_ethernetController_sendPacket 4446  
                    __size_of_ethernetController_sendPacket 0028  
                             _ethernetController_sendPacket 441E  
                                                 _PORTBbits 000F81  
                                       ipv4_sendFrame@index 0172  
                       __size_of_ENC424J600_writeSingleByte 0018  
                         sevenSegmentUpdate@numberToDisplay 000F  
                                  __end_of_sevenSegmentInit 45D8  
                   __end_of_ipv4_streamToTransmissionBuffer 3EA0  
                  __size_of_ipv4_streamToTransmissionBuffer 0054  
                         ??_ipv4_streamToTransmissionBuffer 00AE  
                          ?_ipv4_streamToTransmissionBuffer 0072  
                           _ipv4_streamToTransmissionBuffer 3E4C  
                               ?_ENC424J600_enableReception 0001  
                                             ??_macToString 0080  
                    ethernetController_softReset@dataToSend 009F  
                                             ARP_send@field 00E8  
                                                 _TRISBbits 000F93  
           __end_of_ethernetController_getNextPacketPointer 464C  
          __size_of_ethernetController_getNextPacketPointer 000E  
                 ??_ethernetController_getNextPacketPointer 0064  
                  ?_ethernetController_getNextPacketPointer 0062  
                   _ethernetController_getNextPacketPointer 463E  
                                          ??_ipv4_sendFrame 00F4  
                                         i2___lwdiv@divisor 0003  
                           __end_of_ethernet_txFrameRequest 30DA  
                          ethernetController_getRSV@address 0071  
                                                 i2___lwdiv 3EF4  
                                         i2___lwdiv@counter 0007  
                                     ??_ARP_handleNewPacket 00F0  
                                __end_of_ENC424J600_initSPI 45BE  
                                __end_of_ENC424J600_readSPI 3BFA  
                                __size_of_etherTypeToString 0044  
                                       UARTTransmitText@str 0098  
                      __end_of_ipv4_calculateHeaderChecksum 110C  
                     __size_of_ipv4_calculateHeaderChecksum 0374  
                              _ipv4_calculateHeaderChecksum 0D98  
                      ENC424J600_setTXStartAddress@highByte 0071  
                                     __end_of_updateSeconds 44E0  
                                    ARP_parseFromRXBuffer@i 00B2  
                                         intToString@number 01C9  
                                  ipAdressToString@hundreds 0077  
                                         __size_of_ARP_send 01EC  
                                            __end_of___wmul 441E  
                                             __pidataCOMRAM 467C  
                                          parseNumber@digit 000A  
                                  __size_of_UARTTransmitInt 0022  
                                         __size_of_UARTInit 0010  
                 ethernetController_setLEDConfiguration@LED 006F  
                      __size_of_ENC424J600_setRXTailPointer 002A  
                    ENC424J600_setERXDATAReadPointer@opcode 006C  
                                     _ARP_parseFromRXBuffer 1428  
               __end_of_ethernetController_updateLinkStatus 36B2  
              __size_of_ethernetController_updateLinkStatus 008A  
                     ??_ethernetController_updateLinkStatus 0082  
                      ?_ethernetController_updateLinkStatus 0080  
                       _ethernetController_updateLinkStatus 3628  
                                       start_initialization 39C0  
                                ARP_parseFromRXBuffer@frame 0091  
                                               __end_of_ISR 00C4  
                                            intToString@val 0073  
                                  ?_ethernetController_init 00A6  
                                                ?i2___lwdiv 0001  
                             ipv4_writeHeaderIntoBuffer@ptr 0077  
                                  ?_checkForOverlapSwitched 0060  
                  ethernetController_dropPacket@newPointerH 007C  
                  ethernetController_dropPacket@newPointerL 007B  
                                       __end_of_macToString 2E00  
                                           __CFG_nLPBOR$OFF 000000  
                                       __size_of_getSeconds 0012  
                                  __end_of_entireMemoryFull 41EC  
     __end_of_ethernetController_writeDestinationMACAddress 38C2  
    __size_of_ethernetController_writeDestinationMACAddress 0080  
           ??_ethernetController_writeDestinationMACAddress 007D  
            ?_ethernetController_writeDestinationMACAddress 006F  
             _ethernetController_writeDestinationMACAddress 3842  
                                           ___llmod@divisor 0064  
                       ethernetController_checkDeviceId@err 0072  
                                           ___llmod@counter 0068  
                       ethernetController_dropPacket@opcode 007A  
                           ??_ENC424J600_clearInterruptFlag 006E  
                                   __end_of_ARP_setNewEntry 2FF6  
                             ?_ipv4_calculateHeaderChecksum 0060  
                             ethernetController_getRSV@temp 02AF  
                                   __end_of_ARP_sendRequest 3460  
                                  ARP_setNewEntry@timestamp 006E  
                                      printErrorMessage@err 009A  
                                            _occupiedMemory 0180  
                                           _sourceIPAddress 0028  
                                                  ??___wmul 0064  
                          ENC424J600_getPacketCount@lowByte 006E  
                                       _ipv4_txFrameRequest 25EE  
                                    ?_ARP_getEntryFromTable 0060  
                    ethernetController_getDeviceName@string 0062  
                                      _destinationIPAddress 01C4  
                                               __pdataBANK2 02B5  
                                             ??_intToString 0077  
                                          checkForOverlap@a 0070  
                                          checkForOverlap@b 0078  
                          ARP_parseFromRXBuffer@dataPointer 003D  
                                         ??_checkForOverlap 0080  
                                     __end_of_ARP_initTable 3D30  
                                               __pbssCOMRAM 0028  
                  ethernetController_updateLinkStatus@state 0080  
                                             __pcstackBANK0 0060  
                                             __pcstackBANK1 0100  
                                             __pcstackBANK3 0370  
                                         ?_ipAdressToString 0067  
                        __end_of_ENC424J600_writeSingleByte 460A  
                                _ENC424J600_writeSingleByte 45F2  
                                     _memory_txFrameRequest 00C8  
             __end_of_ethernetController_newPacketAvailable 462E  
            __size_of_ethernetController_newPacketAvailable 0012  
                    ?_ethernetController_newPacketAvailable 0001  
                   ??_ethernetController_newPacketAvailable 006F  
                     _ethernetController_newPacketAvailable 461C  
                                  ARP_replyIfNeeded@request 0100  
                                      ?_ipv4_txFrameRequest 00A1  
                  ethernetController_softReset@receivedData 00A1  
                                        ??_ipAdressToString 006B  
                                   __size_of_mac_setAllZero 0026  
                                       _ENC424J600_writeSPI 3D30  
                                         __size_of_ipv4_cmp 0042  
                                 ipv4_txFrameRequest@packet 00A1  
                                buttonHandler@debounceValue 0003  
                                             ??_parseNumber 000B  
                                                 _main$1973 0394  
                                          ___lwdiv@dividend 0060  
                                        _sevenSegCharacters 02C7  
                ethernetController_getEtherTypeField@opcode 007B  
                                                 __pintcode 0008  
                              ??_ENC424J600_readPHYRegister 0070  
                              __size_of_memory_txFrameClear 0024  
                                             __pmediumconst 7C84  
                                                  ?___lldiv 0066  
                                                  ?___llmod 0060  
                             __size_of_ipv4_handleNewPacket 001C  
                                                  ?___lwdiv 0060  
                                                  ?___lwmod 0060  
       ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                      ?_ENC424J600_writeSPI 0060  
                                       ipv4_setToAllZero@ip 0060  
                                                  ?_mac_cmp 0060  
                                 ARP_setNewEntry@maxSeconds 0076  
                                    ?_ARP_parseFromRXBuffer 0091  
                                 __size_of_UARTTransmitText 0056  
                ethernetController_getSourceMACAddress@temp 0080  
                      ENC424J600_setERXDATAReadPointer@addr 006A  
                        __size_of_ENC424J600_getPacketCount 001A  
                   ENC424J600_setERXDATAReadPointer@lowByte 006D  
                 __end_of_ENC424J600_enableAutoMACInsertion 446E  
                __size_of_ENC424J600_enableAutoMACInsertion 0028  
                        ?_ENC424J600_enableAutoMACInsertion 0001  
                       ??_ENC424J600_enableAutoMACInsertion 006E  
                         _ENC424J600_enableAutoMACInsertion 4446  
                                        ipAdressToString@ip 0067  
                                       __end_of_intToString 1A08  
                                ?_ENC424J600_getPacketCount 0001  
                ethernetController_setLEDConfiguration@data 0070  
                ethernetController_setLEDConfiguration@conf 006E  
                                               _macToString 2CF8  
                                         ??_UARTTransmitInt 009E  
                                     ??_ipv4_txFrameRequest 00A3  
                                          ___lwdiv@quotient 0065  
                                         _entireMemoryEmpty 41EC  
                                  ??_ethernet_rxGetNewFrame 00F2  
                                               ??i2___lwdiv 0005  
                                  ARP_sendRequest@senderMAC 0104  
                                  ARP_sendRequest@targetMAC 010E  
                        ENC424J600_readPHYRegister@highByte 007E  
                                        ?_entireMemoryEmpty 0001  
                       __size_of_ENC424J600_readPHYRegister 0122  
                       ipv4_streamToTransmissionBuffer@data 00B2  
                               ??_ethernetController_getRSV 0076  
                                            ___wmul@product 0064  
                               ethernet_rxGetNewFrame@frame 0176  
                                                  _ARP_send 1BF6  
                                ARP_replyIfNeeded@senderMAC 0124  
                         ENC424J600_writeSPI@timeoutCounter 0066  
                                ARP_replyIfNeeded@targetMAC 012A  
                                          ?_ARP_setNewEntry 0064  
                                       ??_entireMemoryEmpty 0060  
                                          ARP_initTable@mac 007C  
                                          ?_ARP_sendRequest 00F0  
                                                  i2u720_40 355C  
                                         entireMemoryFull@i 0060  
                                                  i2u721_40 355E  
                                                  i2u627_40 3F16  
                                                  i2u724_44 30EA  
                                                  i2u724_45 30E6  
                                                  i2u728_40 3156  
                                                  i2u729_44 3166  
                                                  i2u729_45 3162  
                                       ARP_checkForEntry@ip 0067  
                                          __CFG_WDTPS$32768 000000  
                                        _mac_setToBroadcast 446E  
                                __end_of_sevenSegmentUpdate 3198  
                     __end_of_ENC424J600_clearInterruptFlag 373C  
                    __size_of_ENC424J600_clearInterruptFlag 008A  
                             _ENC424J600_clearInterruptFlag 36B2  
                                                  _UARTInit 462E  
                            ??_ipv4_calculateHeaderChecksum 0062  
                                     ??_ENC424J600_writeSPI 0062  
                                        UARTTransmitInt@val 009A  
                                              ??_getSeconds 0064  
                                       __end_of_parseNumber 39C0  
                             ENC424J600_setTXLength@lowByte 0070  
                                         main@IPdestination 039E  
                                         ___wmul@multiplier 0060  
                                       ?_mac_setToBroadcast 0060  
                                         ?_sevenSegmentInit 0001  
                                 __end_of_entireMemoryEmpty 4226  
                                    ?_memory_txFrameRequest 0080  
                                  ??_ENC424J600_setTXLength 0070  
                      ethernetController_checkDeviceId@data 0071  
                               __size_of_printEthernetState 00A2  
                         __end_of_ENC424J600_getPacketCount 45F2  
                                        ??_sevenSegmentInit 0060  
                       ENC424J600_setTXStartAddress@lowByte 0070  
                                                 ipv4_cmp@a 0060  
                                                 ipv4_cmp@b 0062  
                                                 ipv4_cmp@i 0066  
                                               _INTCON3bits 000FF0  
                                                 copy_data0 39D4  
                                           parseNumber@ones 000C  
                                           parseNumber@tens 000D  
                                    __size_of_mac_isAllZero 0030  
                                        macToString@address 0081  
                                      ipAdressToString@ones 006F  
                                      ipAdressToString@tens 0073  
                                      ??_mac_setToBroadcast 0062  
                                        __end_of_getSeconds 461C  
               ethernetController_dropPacket@nextPktPointer 007D  
                  __end_of_ethernetController_checkDeviceId 3FE2  
                 __size_of_ethernetController_checkDeviceId 004E  
                        ??_ethernetController_checkDeviceId 0071  
                         ?_ethernetController_checkDeviceId 006E  
                          _ethernetController_checkDeviceId 3F94  
                                                  __Hrparam 0000  
                                          ipv4_isAllZero@ip 0060  
                                  ?_ethernet_txFrameRequest 009C  
                                                  __Lrparam 0000  
                                        __CFG_BOREN$SBORDIS 000000  
                          ipv4_writeHeaderIntoBuffer@header 0060  
                                         _ARP_checkForEntry 324E  
                                        _ENC424J600_initSPI 45A2  
ethernetController_streamFromRXBuffer@lengthOfReceivedFrame 0082  
                                        _ENC424J600_readSPI 3B90  
                                    macToString@secondDigit 0094  
                                          __size_of___lldiv 0084  
                                          __size_of___llmod 0068  
                                               _intToString 1742  
                                          __size_of___lwdiv 0054  
                                        ?_ARP_checkForEntry 0067  
                                          __size_of___lwmod 0044  
                   ethernetController_updateLinkStatus@temp 0082  
                                 _ethernetController_getRSV 3A36  
              ethernetController_getEtherTypeField@highByte 007D  
                                                _ANSELBbits 000F5C  
                                 ENC424J600_setTXLength@len 006E  
                                     __end_of_buttonHandler 359A  
                                       ?_ENC424J600_initSPI 0001  
                                       ?_ENC424J600_readSPI 0060  
                                          __size_of_mac_cmp 0042  
                                   intToString@tenthousands 0085  
                   __end_of_ethernetController_setLEDStatus 3DF6  
                  __size_of_ethernetController_setLEDStatus 0062  
                         ??_ethernetController_setLEDStatus 006F  
                          ?_ethernetController_setLEDStatus 006E  
                           _ethernetController_setLEDStatus 3D94  
                                               _buttonState 01D3  
                       ENC424J600_setRXTailPointer@highByte 0071  
                                       ??_ARP_checkForEntry 006D  
                                    memory_txFrameRequest@i 0091  
                               __end_of_ARP_handleNewPacket 2306  
                                           ___lwdiv@divisor 0062  
                                           ___lwdiv@counter 0064  
                                         mac_setAllZero@mac 0060  
                                                  __ptext10 33B2  
                                                  __ptext11 4320  
                                                  __ptext20 4528  
                                                  __ptext12 324E  
                                                  __ptext21 1742  
                                                  __ptext13 05A2  
                                                  __ptext30 1A08  
                                                  __ptext22 43F6  
                                                  __ptext14 4586  
                                                  __ptext31 4072  
                                                  __ptext23 3BFA  
                                                  __ptext15 3A36  
                                                  __ptext40 2E00  
                                                  __ptext32 3EA0  
                                                  __ptext24 373C  
                                                  __ptext16 110C  
                                                  __ptext41 3300  
                                                  __ptext33 3AAA  
                                                  __ptext25 2164  
                                                  __ptext17 463E  
                                                  __ptext50 38C2  
                                                  __ptext42 3F46  
                                                  __ptext34 1BF6  
                                                  __ptext26 460A  
                                                  __ptext18 37C0  
                                                  __ptext51 1428  
                                                  __ptext43 3842  
                                                  __ptext35 446E  
                                                  __ptext27 3198  
                                                  __ptext19 402E  
                                                  __ptext60 2AC0  
                                                  __ptext52 4292  
                                                  __ptext44 413A  
                                                  __ptext36 2FF6  
                                                  __ptext28 2872  
                                                  __ptext61 3D94  
                                                  __ptext53 40B6  
                                                  __ptext45 3C62  
                                                  __ptext37 00C8  
                                                  __ptext29 2CF8  
                                                  __ptext70 3DF6  
                                                  __ptext62 359A  
                                                  __ptext54 42C2  
                                                  __ptext46 441E  
                                                  __ptext38 41B2  
                                                  __ptext71 3F94  
                                                  __ptext63 299A  
                                                  __ptext55 40F8  
                                                  __ptext47 44E0  
                                                  __ptext39 41EC  
                                                  __ptext80 4504  
                                                  __ptext72 43A2  
                                                  __ptext64 3FE2  
                                                  __ptext56 2306  
                                                  __ptext48 434E  
                                                  __ptext81 4676  
                                                  __ptext73 43CC  
                                                  __ptext65 461C  
                                                  __ptext57 4176  
                                                  __ptext49 4378  
                                                  __ptext90 4568  
                                                  __ptext82 45D8  
                                                  __ptext74 4664  
                                                  __ptext66 464C  
                                                  __ptext58 465A  
                                                  __ptext91 2F08  
                                                  __ptext83 425C  
                                                  __ptext75 466E  
                                                  __ptext67 36B2  
                                                  __ptext59 3628  
                                                  __ptext84 3D30  
                                                  __ptext76 45F2  
                                                  __ptext68 3B1E  
                                                  __ptext93 44BA  
                                                  __ptext85 3B90  
                                                  __ptext77 4446  
                                                  __ptext69 2734  
                                                  __ptext94 30DA  
                                                  __ptext86 45A2  
                                                  __ptext78 4226  
                                                  __ptext95 3942  
                                                  __ptext87 462E  
                                                  __ptext79 454A  
                                                  __ptext96 3EF4  
                                                  __ptext88 3CCA  
                                                  __ptext97 3502  
                                                  __ptext89 4494  
                                              _SSP1CON1bits 000FC6  
                     ENC424J600_enableAutoMACInsertion@temp 006E  
                                        ipv4_setToAllZero@i 0062  
                           __size_of_ethernet_rxGetNewFrame 0462  
                                            _mac_setAllZero 4494  
                                                  _ipv4_cmp 40F8  
                       __end_of_ENC424J600_setRXTailPointer 43CC  
                               _ENC424J600_setRXTailPointer 43A2  
                                               _OSCCON2bits 000FD2  
                                         ipAdressToString@i 007C  
                  ENC424J600_setGPDATAWritePointer@highByte 006E  
                                             __size_of_main 0394  
                                      ??_ENC424J600_initSPI 0060  
                                      ??_ENC424J600_readSPI 0062  
                                  ARP_handleNewPacket@frame 0154  
                                         ?_entireMemoryFull 0001  
       ethernetController_writeDestinationMACAddress@opcode 0083  
                            ??_ENC424J600_setTXStartAddress 0070  
                                 ARP_replyIfNeeded@senderIP 0120  
                          __size_of_ethernetController_init 0072  
                                           _checkForOverlap 2E00  
                                 ARP_replyIfNeeded@targetIP 0130  
                                   ??_ARP_getEntryFromTable 0067  
                        __end_of_ENC424J600_readPHYRegister 2BE2  
                                _ENC424J600_readPHYRegister 2AC0  
                                        ??_entireMemoryFull 0060  
                                 __end_of_ARP_checkForEntry 3300  
                                               _parseNumber 3942  
                                           ARP_initTable@ip 0082  
                             ??_ENC424J600_setRXTailPointer 0070  
                                        ARP_checkForEntry@i 0075  
                                                  int$flags 004F  
                                                  mac_cmp@a 0060  
                          __size_of_checkForOverlapSwitched 00B2  
                                                  mac_cmp@b 0062  
                                                  mac_cmp@i 0066  
              ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                             _mac_isAllZero 4292  
                     ipv4_streamToTransmissionBuffer@packet 0072  
                                              _SSP1STATbits 000FC7  
                                ethernet_txFrameRequest@err 009E  
                                   __size_of_ipv4_isAllZero 0030  
                                 ethernet_rxGetNewFrame@err 00FA  
                            ?_ENC424J600_clearInterruptFlag 0001  
                                          _UARTTransmitText 3DF6  
                                                _INTCONbits 000FF2  
        ethernetController_getEtherTypeField@nextPktPointer 0075  
                                    __size_of_updateSeconds 0026  
                                    ARP_checkForEntry@index 006B  
                                    ipv4_sendFrame@ipPacket 0134  
                  __end_of_ENC424J600_setERXDATAReadPointer 41B2  
                 __size_of_ENC424J600_setERXDATAReadPointer 003C  
                        ??_ENC424J600_setERXDATAReadPointer 006C  
                         ?_ENC424J600_setERXDATAReadPointer 006A  
                          _ENC424J600_setERXDATAReadPointer 4176  
      ethernetController_getSourceMACAddress@nextPktPointer 0075  
                                __size_of_entireMemoryEmpty 003A  
     ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
     ethernetController_writeEtherTypeFieldToBuffer@lowByte 0079  
                           __size_of_ENC424J600_setTXLength 002A  
                                    __end_of_mac_setAllZero 44BA  
                               ?_ENC424J600_writeSingleByte 0001  
                                       _memory_txFrameClear 44E0  
                                    ARP_replyIfNeeded@reply 0134  
                          ENC424J600_readSPI@timeoutCounter 0066  
       ipv4_streamToTransmissionBuffer@ethernetPacketLength 00B3  
                                                  intlevel2 0000  
                                          ___lwmod@dividend 0060  
                            ??_ENC424J600_getInterruptFlags 0070  
                                          ___lldiv@dividend 0066  
               ethernetController_getEtherTypeField@lowByte 007C  
        ethernetController_writeDestinationMACAddress@i_620 0084  
                 ethernetController_streamFromRXBuffer@temp 008A  
                          ENC424J600_writeSingleByte@opcode 006A  
                                                _RCSTA1bits 000FAB  
                                          macToString@F5785 02B5  
        ethernetController_writeDestinationMACAddress@field 0075  
                                                _OSCCONbits 000FD3  
                                   __size_of_ipv4_sendFrame 01D8  
                   __end_of_ENC424J600_getNextPacketPointer 4664  
                  __size_of_ENC424J600_getNextPacketPointer 000A  
                         ??_ENC424J600_getNextPacketPointer 0062  
                          ?_ENC424J600_getNextPacketPointer 0060  
                           _ENC424J600_getNextPacketPointer 465A  
                                 __size_of_ipAdressToString 01EE  
                                            ARP_initTable@i 0086  
                                              macToString@i 0095  
                                              macToString@j 0097  
                  ENC424J600_readPHYRegister@timeoutCounter 0079  
                   __end_of_ENC424J600_setNextPacketPointer 466E  
                  __size_of_ENC424J600_setNextPacketPointer 000A  
                         ??_ENC424J600_setNextPacketPointer 0062  
                          ?_ENC424J600_setNextPacketPointer 0060  
                           _ENC424J600_setNextPacketPointer 4664  
                                      ?_memory_txFrameClear 0001  
                                       ARP_send@destination 00C1  
                                            ?_mac_isAllZero 0060  
                                    _ethernet_rxGetNewFrame 05A2  
                                      __CFG_CPUDIV$NOCLKDIV 000000  
                          ENC424J600_getInterruptFlags@high 0077  
                                   ??_ARP_parseFromRXBuffer 00B1  
                                           _UARTTransmitInt 4528  
                        ethernetController_sendPacket@field 0072  
              ethernetController_getSourceMACAddress@opcode 0079  
      ethernetController_writeEtherTypeFieldToBuffer@opcode 007B  
              __end_of_ENC424J600_updateReceiveStatusVector 1428  
             __size_of_ENC424J600_updateReceiveStatusVector 031C  
                    ??_ENC424J600_updateReceiveStatusVector 0065  
                     ?_ENC424J600_updateReceiveStatusVector 0060  
                      _ENC424J600_updateReceiveStatusVector 110C  
                                     mac_setToBroadcast@mac 0060  
                                 ipv4_handleNewPacket@frame 009A  
                                     ipv4_sendFrame@oldTime 01C0  
                                          ___lldiv@quotient 006E  
                                           ___lwmod@divisor 0062  
                        ENC424J600_setNextPacketPointer@ptr 0060  
                                           ___lwmod@counter 0064  
                                    ARP_handleNewPacket@arp 0156  
                              ??_ipv4_writeHeaderIntoBuffer 0079  
                                              ?_macToString 007A  
                               ??_ENC424J600_getPacketCount 006E  
                ENC424J600_readControlRegisterUnbanked@addr 006C  
                ENC424J600_readControlRegisterUnbanked@data 006A  
                           ethernetController_getRSV@opcode 0076  
                      __end_of_ethernetController_softReset 2872  
                     __size_of_ethernetController_softReset 013E  
                              _ethernetController_softReset 2734  
                                           ?_mac_setAllZero 0060  
                              __end_of_ipv4_handleNewPacket 45A2  
                           ENC424J600_getInterruptFlags@low 0076  
                                        __CFG_FOSC$INTOSCIO 000000  
                                   __end_of_checkForOverlap 2F08  
             __end_ofethernetController_getDeviceName@F5835 7C90  
                     ethernetController_getDeviceName@F5835 7C85  
                                            ARP_send@i_2627 00C8  
                                            ARP_send@i_2628 00C9  
                                            ARP_send@i_2629 00CA  
                            ?_ethernetController_dropPacket 0072  
                                          ARP_send@ethFrame 00CB  
                                             _updateSeconds 44BA  
                                   _sevenSegmentUpdate$2047 0013  
                                __size_of_ARP_checkForEntry 00B2  
                            ENC424J600_readPHYRegister@addr 0076  
                            ENC424J600_readPHYRegister@data 006E  
                                    _ENC424J600_setTXLength 4378  
                                    __size_of_ARP_initTable 0066  
                                     ??_memory_txFrameClear 0060  
                            ENC424J600_readPHYRegister@temp 007F  
