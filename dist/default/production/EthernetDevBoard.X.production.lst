

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 01 16:31:12 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1,group=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   120                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   121                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   122  0000                     
   123                           ; Version 1.45
   124                           ; Generated 16/11/2017 GMT
   125                           ; 
   126                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   127                           ; All rights reserved.
   128                           ; 
   129                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   130                           ; 
   131                           ; Redistribution and use in source and binary forms, with or without modification, are
   132                           ; permitted provided that the following conditions are met:
   133                           ; 
   134                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   135                           ;        conditions and the following disclaimer.
   136                           ; 
   137                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   138                           ;        of conditions and the following disclaimer in the documentation and/or other
   139                           ;        materials provided with the distribution.
   140                           ; 
   141                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   142                           ;        software without specific prior written permission.
   143                           ; 
   144                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   145                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   146                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   147                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   148                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   149                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   150                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   151                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   152                           ; 
   153                           ; 
   154                           ; Code-generator required, PIC18F25K50 Definitions
   155                           ; 
   156                           ; SFR Addresses
   157  0000                     
   158                           	psect	idataCOMRAM
   159  00470C                     __pidataCOMRAM:
   160                           	opt stack 0
   161                           
   162                           ;initializer for ethernetController_softReset@F5826
   163  00470C  12                 	db	18
   164  00470D  34                 	db	52
   165                           
   166                           	psect	idataBANK1
   167  0045E8                     __pidataBANK1:
   168                           	opt stack 0
   169                           
   170                           ;initializer for _sevenSegCharacters
   171  0045E8  3F                 	db	63
   172  0045E9  06                 	db	6
   173  0045EA  5B                 	db	91
   174  0045EB  4F                 	db	79
   175  0045EC  66                 	db	102
   176  0045ED  6D                 	db	109
   177  0045EE  7D                 	db	125
   178  0045EF  07                 	db	7
   179  0045F0  7F                 	db	127
   180  0045F1  6F                 	db	111
   181  0045F2  00                 	db	0
   182  0045F3  40                 	db	64
   183                           
   184                           ;initializer for ipAdressToString@address
   185  0045F4  3F                 	db	63
   186  0045F5  3F                 	db	63
   187  0045F6  3F                 	db	63
   188  0045F7  2E                 	db	46
   189  0045F8  3F                 	db	63
   190  0045F9  3F                 	db	63
   191  0045FA  3F                 	db	63
   192  0045FB  2E                 	db	46
   193  0045FC  3F                 	db	63
   194  0045FD  3F                 	db	63
   195  0045FE  3F                 	db	63
   196  0045FF  2E                 	db	46
   197  004600  3F                 	db	63
   198  004601  3F                 	db	63
   199  004602  3F                 	db	63
   200  004603  00                 	db	0
   201                           
   202                           	psect	idataBANK2
   203  004688                     __pidataBANK2:
   204                           	opt stack 0
   205                           
   206                           ;initializer for macToString@F5791
   207  004688  3F                 	db	63
   208  004689  3F                 	db	63
   209  00468A  3A                 	db	58
   210  00468B  3F                 	db	63
   211  00468C  3F                 	db	63
   212  00468D  3A                 	db	58
   213  00468E  3F                 	db	63
   214  00468F  3F                 	db	63
   215  004690  3A                 	db	58
   216  004691  3F                 	db	63
   217  004692  3F                 	db	63
   218  004693  3A                 	db	58
   219  004694  3F                 	db	63
   220  004695  3F                 	db	63
   221  004696  3A                 	db	58
   222  004697  3F                 	db	63
   223  004698  3F                 	db	63
   224  004699  00                 	db	0
   225                           
   226                           	psect	mediumconst
   227  007C84                     __pmediumconst:
   228                           	opt stack 0
   229  007C84  00                 	db	0
   230  007C85                     ethernetController_getDeviceName@F5838:
   231                           	opt stack 0
   232  007C85  45                 	db	69
   233  007C86  4E                 	db	78
   234  007C87  43                 	db	67
   235  007C88  34                 	db	52
   236  007C89  32                 	db	50
   237  007C8A  34                 	db	52
   238  007C8B  4A                 	db	74
   239  007C8C  36                 	db	54
   240  007C8D  30                 	db	48
   241  007C8E  30                 	db	48
   242  007C8F  00                 	db	0
   243  007C90                     __end_ofethernetController_getDeviceName@F5838:
   244                           	opt stack 0
   245  0000                     _ANSELC	set	3933
   246  0000                     _ANSELA	set	3931
   247  0000                     _ANSELB	set	3932
   248  0000                     _ANSELBbits	set	3932
   249  0000                     _TXREG1	set	4013
   250  0000                     _SPBRG	set	4015
   251  0000                     _RCSTA1bits	set	4011
   252  0000                     _TXSTA1bits	set	4012
   253  0000                     _PORTA	set	3968
   254  0000                     _TRISA	set	3986
   255  0000                     _TRISC	set	3988
   256  0000                     _PORTC	set	3970
   257  0000                     _PORTB	set	3969
   258  0000                     _TRISB	set	3987
   259  0000                     _T0CONbits	set	4053
   260  0000                     _INTCON3bits	set	4080
   261  0000                     _INTCONbits	set	4082
   262  0000                     _OSCCON2bits	set	4050
   263  0000                     _OSCCONbits	set	4051
   264  0000                     _SSP1BUF	set	4041
   265  0000                     _TRISBbits	set	3987
   266  0000                     _SSP1STATbits	set	4039
   267  0000                     _SSP1CON1bits	set	4038
   268  0000                     _PORTBbits	set	3969
   269  0000                     _TRMT	set	32097
   270  0000                     _RCIF	set	31989
   271  0000                     _RCIE	set	31981
   272  0000                     _RCIP	set	31997
   273  007C90                     STR_48:
   274  007C90  45                 	db	69	;'E'
   275  007C91  74                 	db	116	;'t'
   276  007C92  68                 	db	104	;'h'
   277  007C93  65                 	db	101	;'e'
   278  007C94  72                 	db	114	;'r'
   279  007C95  6E                 	db	110	;'n'
   280  007C96  65                 	db	101	;'e'
   281  007C97  74                 	db	116	;'t'
   282  007C98  20                 	db	32
   283  007C99  63                 	db	99	;'c'
   284  007C9A  6F                 	db	111	;'o'
   285  007C9B  6E                 	db	110	;'n'
   286  007C9C  74                 	db	116	;'t'
   287  007C9D  72                 	db	114	;'r'
   288  007C9E  6F                 	db	111	;'o'
   289  007C9F  6C                 	db	108	;'l'
   290  007CA0  6C                 	db	108	;'l'
   291  007CA1  65                 	db	101	;'e'
   292  007CA2  72                 	db	114	;'r'
   293  007CA3  20                 	db	32
   294  007CA4  68                 	db	104	;'h'
   295  007CA5  61                 	db	97	;'a'
   296  007CA6  73                 	db	115	;'s'
   297  007CA7  20                 	db	32
   298  007CA8  72                 	db	114	;'r'
   299  007CA9  65                 	db	101	;'e'
   300  007CAA  74                 	db	116	;'t'
   301  007CAB  75                 	db	117	;'u'
   302  007CAC  72                 	db	114	;'r'
   303  007CAD  6E                 	db	110	;'n'
   304  007CAE  65                 	db	101	;'e'
   305  007CAF  64                 	db	100	;'d'
   306  007CB0  20                 	db	32
   307  007CB1  61                 	db	97	;'a'
   308  007CB2  6E                 	db	110	;'n'
   309  007CB3  20                 	db	32
   310  007CB4  75                 	db	117	;'u'
   311  007CB5  6E                 	db	110	;'n'
   312  007CB6  6B                 	db	107	;'k'
   313  007CB7  6E                 	db	110	;'n'
   314  007CB8  6F                 	db	111	;'o'
   315  007CB9  77                 	db	119	;'w'
   316  007CBA  6E                 	db	110	;'n'
   317  007CBB  20                 	db	32
   318  007CBC  64                 	db	100	;'d'
   319  007CBD  65                 	db	101	;'e'
   320  007CBE  76                 	db	118	;'v'
   321  007CBF  69                 	db	105	;'i'
   322  007CC0  63                 	db	99	;'c'
   323  007CC1  65                 	db	101	;'e'
   324  007CC2  20                 	db	32
   325  007CC3  49                 	db	73	;'I'
   326  007CC4  44                 	db	68	;'D'
   327  007CC5  2E                 	db	46
   328  007CC6  00                 	db	0
   329  007CC7                     STR_34:
   330  007CC7  2D                 	db	45
   331  007CC8  2D                 	db	45
   332  007CC9  2D                 	db	45
   333  007CCA  2D                 	db	45
   334  007CCB  2D                 	db	45
   335  007CCC  2D                 	db	45
   336  007CCD  2D                 	db	45
   337  007CCE  2D                 	db	45
   338  007CCF  2D                 	db	45
   339  007CD0  2D                 	db	45
   340  007CD1  2D                 	db	45
   341  007CD2  2D                 	db	45
   342  007CD3  2D                 	db	45
   343  007CD4  2D                 	db	45
   344  007CD5  2D                 	db	45
   345  007CD6  2D                 	db	45
   346  007CD7  2D                 	db	45
   347  007CD8  2D                 	db	45
   348  007CD9  2D                 	db	45
   349  007CDA  2D                 	db	45
   350  007CDB  2D                 	db	45
   351  007CDC  2D                 	db	45
   352  007CDD  2D                 	db	45
   353  007CDE  2D                 	db	45
   354  007CDF  2D                 	db	45
   355  007CE0  2D                 	db	45
   356  007CE1  2D                 	db	45
   357  007CE2  2D                 	db	45
   358  007CE3  2D                 	db	45
   359  007CE4  2D                 	db	45
   360  007CE5  2D                 	db	45
   361  007CE6  2D                 	db	45
   362  007CE7  2D                 	db	45
   363  007CE8  2D                 	db	45
   364  007CE9  2D                 	db	45
   365  007CEA  2D                 	db	45
   366  007CEB  2D                 	db	45
   367  007CEC  2D                 	db	45
   368  007CED  2D                 	db	45
   369  007CEE  2D                 	db	45
   370  007CEF  2D                 	db	45
   371  007CF0  2D                 	db	45
   372  007CF1  2D                 	db	45
   373  007CF2  2D                 	db	45
   374  007CF3  2D                 	db	45
   375  007CF4  2D                 	db	45
   376  007CF5  2D                 	db	45
   377  007CF6  2D                 	db	45
   378  007CF7  0A                 	db	10
   379  007CF8  0D                 	db	13
   380  007CF9  00                 	db	0
   381  007CFA                     STR_55:
   382  007CFA  5B                 	db	91	;'['
   383  007CFB  49                 	db	73	;'I'
   384  007CFC  6E                 	db	110	;'n'
   385  007CFD  76                 	db	118	;'v'
   386  007CFE  61                 	db	97	;'a'
   387  007CFF  6C                 	db	108	;'l'
   388  007D00  69                 	db	105	;'i'
   389  007D01  64                 	db	100	;'d'
   390  007D02  20                 	db	32
   391  007D03  41                 	db	65	;'A'
   392  007D04  52                 	db	82	;'R'
   393  007D05  50                 	db	80	;'P'
   394  007D06  20                 	db	32
   395  007D07  4D                 	db	77	;'M'
   396  007D08  65                 	db	101	;'e'
   397  007D09  73                 	db	115	;'s'
   398  007D0A  73                 	db	115	;'s'
   399  007D0B  61                 	db	97	;'a'
   400  007D0C  67                 	db	103	;'g'
   401  007D0D  65                 	db	101	;'e'
   402  007D0E  20                 	db	32
   403  007D0F  77                 	db	119	;'w'
   404  007D10  61                 	db	97	;'a'
   405  007D11  73                 	db	115	;'s'
   406  007D12  20                 	db	32
   407  007D13  64                 	db	100	;'d'
   408  007D14  69                 	db	105	;'i'
   409  007D15  73                 	db	115	;'s'
   410  007D16  63                 	db	99	;'c'
   411  007D17  61                 	db	97	;'a'
   412  007D18  72                 	db	114	;'r'
   413  007D19  64                 	db	100	;'d'
   414  007D1A  65                 	db	101	;'e'
   415  007D1B  64                 	db	100	;'d'
   416  007D1C  2E                 	db	46
   417  007D1D  5D                 	db	93	;']'
   418  007D1E  0D                 	db	13
   419  007D1F  0A                 	db	10
   420  007D20  00                 	db	0
   421  007D21                     STR_27:
   422  007D21  49                 	db	73	;'I'
   423  007D22  6E                 	db	110	;'n'
   424  007D23  69                 	db	105	;'i'
   425  007D24  74                 	db	116	;'t'
   426  007D25  69                 	db	105	;'i'
   427  007D26  61                 	db	97	;'a'
   428  007D27  6C                 	db	108	;'l'
   429  007D28  69                 	db	105	;'i'
   430  007D29  73                 	db	115	;'s'
   431  007D2A  69                 	db	105	;'i'
   432  007D2B  6E                 	db	110	;'n'
   433  007D2C  67                 	db	103	;'g'
   434  007D2D  20                 	db	32
   435  007D2E  45                 	db	69	;'E'
   436  007D2F  74                 	db	116	;'t'
   437  007D30  68                 	db	104	;'h'
   438  007D31  65                 	db	101	;'e'
   439  007D32  72                 	db	114	;'r'
   440  007D33  6E                 	db	110	;'n'
   441  007D34  65                 	db	101	;'e'
   442  007D35  74                 	db	116	;'t'
   443  007D36  20                 	db	32
   444  007D37  43                 	db	67	;'C'
   445  007D38  6F                 	db	111	;'o'
   446  007D39  6E                 	db	110	;'n'
   447  007D3A  74                 	db	116	;'t'
   448  007D3B  72                 	db	114	;'r'
   449  007D3C  6F                 	db	111	;'o'
   450  007D3D  6C                 	db	108	;'l'
   451  007D3E  6C                 	db	108	;'l'
   452  007D3F  65                 	db	101	;'e'
   453  007D40  72                 	db	114	;'r'
   454  007D41  2E                 	db	46
   455  007D42  2E                 	db	46
   456  007D43  2E                 	db	46
   457  007D44  0A                 	db	10
   458  007D45  0D                 	db	13
   459  007D46  00                 	db	0
   460  007D47                     STR_47:
   461  007D47  45                 	db	69	;'E'
   462  007D48  74                 	db	116	;'t'
   463  007D49  68                 	db	104	;'h'
   464  007D4A  65                 	db	101	;'e'
   465  007D4B  72                 	db	114	;'r'
   466  007D4C  6E                 	db	110	;'n'
   467  007D4D  65                 	db	101	;'e'
   468  007D4E  74                 	db	116	;'t'
   469  007D4F  20                 	db	32
   470  007D50  63                 	db	99	;'c'
   471  007D51  6F                 	db	111	;'o'
   472  007D52  6E                 	db	110	;'n'
   473  007D53  74                 	db	116	;'t'
   474  007D54  72                 	db	114	;'r'
   475  007D55  6F                 	db	111	;'o'
   476  007D56  6C                 	db	108	;'l'
   477  007D57  6C                 	db	108	;'l'
   478  007D58  65                 	db	101	;'e'
   479  007D59  72                 	db	114	;'r'
   480  007D5A  20                 	db	32
   481  007D5B  69                 	db	105	;'i'
   482  007D5C  73                 	db	115	;'s'
   483  007D5D  20                 	db	32
   484  007D5E  75                 	db	117	;'u'
   485  007D5F  6E                 	db	110	;'n'
   486  007D60  72                 	db	114	;'r'
   487  007D61  65                 	db	101	;'e'
   488  007D62  73                 	db	115	;'s'
   489  007D63  70                 	db	112	;'p'
   490  007D64  6F                 	db	111	;'o'
   491  007D65  6E                 	db	110	;'n'
   492  007D66  73                 	db	115	;'s'
   493  007D67  69                 	db	105	;'i'
   494  007D68  76                 	db	118	;'v'
   495  007D69  65                 	db	101	;'e'
   496  007D6A  2E                 	db	46
   497  007D6B  00                 	db	0
   498  007D6C                     STR_43:
   499  007D6C  20                 	db	32
   500  007D6D  45                 	db	69	;'E'
   501  007D6E  54                 	db	84	;'T'
   502  007D6F  48                 	db	72	;'H'
   503  007D70  45                 	db	69	;'E'
   504  007D71  52                 	db	82	;'R'
   505  007D72  4E                 	db	78	;'N'
   506  007D73  45                 	db	69	;'E'
   507  007D74  54                 	db	84	;'T'
   508  007D75  20                 	db	32
   509  007D76  43                 	db	67	;'C'
   510  007D77  4F                 	db	79	;'O'
   511  007D78  4E                 	db	78	;'N'
   512  007D79  54                 	db	84	;'T'
   513  007D7A  52                 	db	82	;'R'
   514  007D7B  4F                 	db	79	;'O'
   515  007D7C  4C                 	db	76	;'L'
   516  007D7D  4C                 	db	76	;'L'
   517  007D7E  45                 	db	69	;'E'
   518  007D7F  52                 	db	82	;'R'
   519  007D80  20                 	db	32
   520  007D81  4D                 	db	77	;'M'
   521  007D82  4F                 	db	79	;'O'
   522  007D83  44                 	db	68	;'D'
   523  007D84  55                 	db	85	;'U'
   524  007D85  4C                 	db	76	;'L'
   525  007D86  45                 	db	69	;'E'
   526  007D87  3A                 	db	58	;':'
   527  007D88  20                 	db	32
   528  007D89  00                 	db	0
   529  007D8A                     STR_49:
   530  007D8A  41                 	db	65	;'A'
   531  007D8B  6E                 	db	110	;'n'
   532  007D8C  20                 	db	32
   533  007D8D  75                 	db	117	;'u'
   534  007D8E  6E                 	db	110	;'n'
   535  007D8F  6B                 	db	107	;'k'
   536  007D90  6E                 	db	110	;'n'
   537  007D91  6F                 	db	111	;'o'
   538  007D92  77                 	db	119	;'w'
   539  007D93  6E                 	db	110	;'n'
   540  007D94  20                 	db	32
   541  007D95  65                 	db	101	;'e'
   542  007D96  72                 	db	114	;'r'
   543  007D97  72                 	db	114	;'r'
   544  007D98  6F                 	db	111	;'o'
   545  007D99  72                 	db	114	;'r'
   546  007D9A  20                 	db	32
   547  007D9B  68                 	db	104	;'h'
   548  007D9C  61                 	db	97	;'a'
   549  007D9D  73                 	db	115	;'s'
   550  007D9E  20                 	db	32
   551  007D9F  6F                 	db	111	;'o'
   552  007DA0  63                 	db	99	;'c'
   553  007DA1  63                 	db	99	;'c'
   554  007DA2  75                 	db	117	;'u'
   555  007DA3  72                 	db	114	;'r'
   556  007DA4  65                 	db	101	;'e'
   557  007DA5  64                 	db	100	;'d'
   558  007DA6  2E                 	db	46
   559  007DA7  00                 	db	0
   560  007DA8                     STR_39:
   561  007DA8  63                 	db	99	;'c'
   562  007DA9  6F                 	db	111	;'o'
   563  007DAA  6E                 	db	110	;'n'
   564  007DAB  6E                 	db	110	;'n'
   565  007DAC  65                 	db	101	;'e'
   566  007DAD  63                 	db	99	;'c'
   567  007DAE  74                 	db	116	;'t'
   568  007DAF  69                 	db	105	;'i'
   569  007DB0  6F                 	db	111	;'o'
   570  007DB1  6E                 	db	110	;'n'
   571  007DB2  20                 	db	32
   572  007DB3  69                 	db	105	;'i'
   573  007DB4  73                 	db	115	;'s'
   574  007DB5  20                 	db	32
   575  007DB6  48                 	db	72	;'H'
   576  007DB7  61                 	db	97	;'a'
   577  007DB8  6C                 	db	108	;'l'
   578  007DB9  66                 	db	102	;'f'
   579  007DBA  20                 	db	32
   580  007DBB  44                 	db	68	;'D'
   581  007DBC  75                 	db	117	;'u'
   582  007DBD  70                 	db	112	;'p'
   583  007DBE  6C                 	db	108	;'l'
   584  007DBF  65                 	db	101	;'e'
   585  007DC0  78                 	db	120	;'x'
   586  007DC1  2E                 	db	46
   587  007DC2  0A                 	db	10
   588  007DC3  0D                 	db	13
   589  007DC4  00                 	db	0
   590  007DC5                     STR_40:
   591  007DC5  63                 	db	99	;'c'
   592  007DC6  6F                 	db	111	;'o'
   593  007DC7  6E                 	db	110	;'n'
   594  007DC8  6E                 	db	110	;'n'
   595  007DC9  65                 	db	101	;'e'
   596  007DCA  63                 	db	99	;'c'
   597  007DCB  74                 	db	116	;'t'
   598  007DCC  69                 	db	105	;'i'
   599  007DCD  6F                 	db	111	;'o'
   600  007DCE  6E                 	db	110	;'n'
   601  007DCF  20                 	db	32
   602  007DD0  69                 	db	105	;'i'
   603  007DD1  73                 	db	115	;'s'
   604  007DD2  20                 	db	32
   605  007DD3  46                 	db	70	;'F'
   606  007DD4  75                 	db	117	;'u'
   607  007DD5  6C                 	db	108	;'l'
   608  007DD6  6C                 	db	108	;'l'
   609  007DD7  20                 	db	32
   610  007DD8  44                 	db	68	;'D'
   611  007DD9  75                 	db	117	;'u'
   612  007DDA  70                 	db	112	;'p'
   613  007DDB  6C                 	db	108	;'l'
   614  007DDC  65                 	db	101	;'e'
   615  007DDD  78                 	db	120	;'x'
   616  007DDE  2E                 	db	46
   617  007DDF  0A                 	db	10
   618  007DE0  0D                 	db	13
   619  007DE1  00                 	db	0
   620  007DE2                     STR_1:
   621  007DE2  57                 	db	87	;'W'
   622  007DE3  72                 	db	114	;'r'
   623  007DE4  69                 	db	105	;'i'
   624  007DE5  74                 	db	116	;'t'
   625  007DE6  69                 	db	105	;'i'
   626  007DE7  6E                 	db	110	;'n'
   627  007DE8  67                 	db	103	;'g'
   628  007DE9  20                 	db	32
   629  007DEA  30                 	db	48	;'0'
   630  007DEB  78                 	db	120	;'x'
   631  007DEC  31                 	db	49	;'1'
   632  007DED  32                 	db	50	;'2'
   633  007DEE  33                 	db	51	;'3'
   634  007DEF  34                 	db	52	;'4'
   635  007DF0  20                 	db	32
   636  007DF1  73                 	db	115	;'s'
   637  007DF2  75                 	db	117	;'u'
   638  007DF3  63                 	db	99	;'c'
   639  007DF4  63                 	db	99	;'c'
   640  007DF5  65                 	db	101	;'e'
   641  007DF6  73                 	db	115	;'s'
   642  007DF7  73                 	db	115	;'s'
   643  007DF8  66                 	db	102	;'f'
   644  007DF9  75                 	db	117	;'u'
   645  007DFA  6C                 	db	108	;'l'
   646  007DFB  2E                 	db	46
   647  007DFC  0A                 	db	10
   648  007DFD  0D                 	db	13
   649  007DFE  00                 	db	0
   650  007DFF                     STR_33:
   651  007DFF  49                 	db	73	;'I'
   652  007E00  6E                 	db	110	;'n'
   653  007E01  69                 	db	105	;'i'
   654  007E02  74                 	db	116	;'t'
   655  007E03  69                 	db	105	;'i'
   656  007E04  61                 	db	97	;'a'
   657  007E05  6C                 	db	108	;'l'
   658  007E06  69                 	db	105	;'i'
   659  007E07  73                 	db	115	;'s'
   660  007E08  61                 	db	97	;'a'
   661  007E09  74                 	db	116	;'t'
   662  007E0A  69                 	db	105	;'i'
   663  007E0B  6F                 	db	111	;'o'
   664  007E0C  6E                 	db	110	;'n'
   665  007E0D  20                 	db	32
   666  007E0E  63                 	db	99	;'c'
   667  007E0F  6F                 	db	111	;'o'
   668  007E10  6D                 	db	109	;'m'
   669  007E11  70                 	db	112	;'p'
   670  007E12  6C                 	db	108	;'l'
   671  007E13  65                 	db	101	;'e'
   672  007E14  74                 	db	116	;'t'
   673  007E15  65                 	db	101	;'e'
   674  007E16  64                 	db	100	;'d'
   675  007E17  2E                 	db	46
   676  007E18  0A                 	db	10
   677  007E19  0D                 	db	13
   678  007E1A  00                 	db	0
   679  007E1B                     STR_4:
   680  007E1B  57                 	db	87	;'W'
   681  007E1C  72                 	db	114	;'r'
   682  007E1D  69                 	db	105	;'i'
   683  007E1E  74                 	db	116	;'t'
   684  007E1F  69                 	db	105	;'i'
   685  007E20  6E                 	db	110	;'n'
   686  007E21  67                 	db	103	;'g'
   687  007E22  20                 	db	32
   688  007E23  30                 	db	48	;'0'
   689  007E24  78                 	db	120	;'x'
   690  007E25  31                 	db	49	;'1'
   691  007E26  32                 	db	50	;'2'
   692  007E27  33                 	db	51	;'3'
   693  007E28  34                 	db	52	;'4'
   694  007E29  20                 	db	32
   695  007E2A  66                 	db	102	;'f'
   696  007E2B  61                 	db	97	;'a'
   697  007E2C  69                 	db	105	;'i'
   698  007E2D  6C                 	db	108	;'l'
   699  007E2E  65                 	db	101	;'e'
   700  007E2F  64                 	db	100	;'d'
   701  007E30  2E                 	db	46
   702  007E31  0A                 	db	10
   703  007E32  0D                 	db	13
   704  007E33  00                 	db	0
   705  007E34                     STR_22:
   706  007E34  46                 	db	70	;'F'
   707  007E35  49                 	db	73	;'I'
   708  007E36  52                 	db	82	;'R'
   709  007E37  4D                 	db	77	;'M'
   710  007E38  57                 	db	87	;'W'
   711  007E39  41                 	db	65	;'A'
   712  007E3A  52                 	db	82	;'R'
   713  007E3B  45                 	db	69	;'E'
   714  007E3C  20                 	db	32
   715  007E3D  42                 	db	66	;'B'
   716  007E3E  55                 	db	85	;'U'
   717  007E3F  49                 	db	73	;'I'
   718  007E40  4C                 	db	76	;'L'
   719  007E41  44                 	db	68	;'D'
   720  007E42  20                 	db	32
   721  007E43  44                 	db	68	;'D'
   722  007E44  41                 	db	65	;'A'
   723  007E45  54                 	db	84	;'T'
   724  007E46  45                 	db	69	;'E'
   725  007E47  20                 	db	32
   726  007E48  49                 	db	73	;'I'
   727  007E49  53                 	db	83	;'S'
   728  007E4A  20                 	db	32
   729  007E4B  00                 	db	0
   730  007E4C                     STR_31:
   731  007E4C  53                 	db	83	;'S'
   732  007E4D  6F                 	db	111	;'o'
   733  007E4E  75                 	db	117	;'u'
   734  007E4F  72                 	db	114	;'r'
   735  007E50  63                 	db	99	;'c'
   736  007E51  65                 	db	101	;'e'
   737  007E52  20                 	db	32
   738  007E53  4D                 	db	77	;'M'
   739  007E54  41                 	db	65	;'A'
   740  007E55  43                 	db	67	;'C'
   741  007E56  20                 	db	32
   742  007E57  61                 	db	97	;'a'
   743  007E58  64                 	db	100	;'d'
   744  007E59  64                 	db	100	;'d'
   745  007E5A  72                 	db	114	;'r'
   746  007E5B  65                 	db	101	;'e'
   747  007E5C  73                 	db	115	;'s'
   748  007E5D  73                 	db	115	;'s'
   749  007E5E  20                 	db	32
   750  007E5F  69                 	db	105	;'i'
   751  007E60  73                 	db	115	;'s'
   752  007E61  20                 	db	32
   753  007E62  00                 	db	0
   754  007E63                     STR_29:
   755  007E63  53                 	db	83	;'S'
   756  007E64  69                 	db	105	;'i'
   757  007E65  6C                 	db	108	;'l'
   758  007E66  69                 	db	105	;'i'
   759  007E67  63                 	db	99	;'c'
   760  007E68  6F                 	db	111	;'o'
   761  007E69  6E                 	db	110	;'n'
   762  007E6A  20                 	db	32
   763  007E6B  72                 	db	114	;'r'
   764  007E6C  65                 	db	101	;'e'
   765  007E6D  76                 	db	118	;'v'
   766  007E6E  69                 	db	105	;'i'
   767  007E6F  73                 	db	115	;'s'
   768  007E70  69                 	db	105	;'i'
   769  007E71  6F                 	db	111	;'o'
   770  007E72  6E                 	db	110	;'n'
   771  007E73  20                 	db	32
   772  007E74  69                 	db	105	;'i'
   773  007E75  73                 	db	115	;'s'
   774  007E76  20                 	db	32
   775  007E77  00                 	db	0
   776  007E78                     STR_38:
   777  007E78  53                 	db	83	;'S'
   778  007E79  70                 	db	112	;'p'
   779  007E7A  65                 	db	101	;'e'
   780  007E7B  65                 	db	101	;'e'
   781  007E7C  64                 	db	100	;'d'
   782  007E7D  20                 	db	32
   783  007E7E  69                 	db	105	;'i'
   784  007E7F  73                 	db	115	;'s'
   785  007E80  20                 	db	32
   786  007E81  31                 	db	49	;'1'
   787  007E82  30                 	db	48	;'0'
   788  007E83  30                 	db	48	;'0'
   789  007E84  20                 	db	32
   790  007E85  4D                 	db	77	;'M'
   791  007E86  62                 	db	98	;'b'
   792  007E87  70                 	db	112	;'p'
   793  007E88  73                 	db	115	;'s'
   794  007E89  2C                 	db	44
   795  007E8A  20                 	db	32
   796  007E8B  00                 	db	0
   797  007E8C                     STR_37:
   798  007E8C  53                 	db	83	;'S'
   799  007E8D  70                 	db	112	;'p'
   800  007E8E  65                 	db	101	;'e'
   801  007E8F  65                 	db	101	;'e'
   802  007E90  64                 	db	100	;'d'
   803  007E91  20                 	db	32
   804  007E92  69                 	db	105	;'i'
   805  007E93  73                 	db	115	;'s'
   806  007E94  20                 	db	32
   807  007E95  31                 	db	49	;'1'
   808  007E96  30                 	db	48	;'0'
   809  007E97  20                 	db	32
   810  007E98  4D                 	db	77	;'M'
   811  007E99  62                 	db	98	;'b'
   812  007E9A  70                 	db	112	;'p'
   813  007E9B  73                 	db	115	;'s'
   814  007E9C  2C                 	db	44
   815  007E9D  20                 	db	32
   816  007E9E  00                 	db	0
   817  007E9F                     STR_36:
   818  007E9F  4C                 	db	76	;'L'
   819  007EA0  69                 	db	105	;'i'
   820  007EA1  6E                 	db	110	;'n'
   821  007EA2  6B                 	db	107	;'k'
   822  007EA3  20                 	db	32
   823  007EA4  65                 	db	101	;'e'
   824  007EA5  73                 	db	115	;'s'
   825  007EA6  74                 	db	116	;'t'
   826  007EA7  61                 	db	97	;'a'
   827  007EA8  62                 	db	98	;'b'
   828  007EA9  6C                 	db	108	;'l'
   829  007EAA  69                 	db	105	;'i'
   830  007EAB  73                 	db	115	;'s'
   831  007EAC  68                 	db	104	;'h'
   832  007EAD  65                 	db	101	;'e'
   833  007EAE  64                 	db	100	;'d'
   834  007EAF  2E                 	db	46
   835  007EB0  20                 	db	32
   836  007EB1  00                 	db	0
   837  007EB2                     STR_44:
   838  007EB2  20                 	db	32
   839  007EB3  45                 	db	69	;'E'
   840  007EB4  54                 	db	84	;'T'
   841  007EB5  48                 	db	72	;'H'
   842  007EB6  45                 	db	69	;'E'
   843  007EB7  52                 	db	82	;'R'
   844  007EB8  4E                 	db	78	;'N'
   845  007EB9  45                 	db	69	;'E'
   846  007EBA  54                 	db	84	;'T'
   847  007EBB  20                 	db	32
   848  007EBC  4D                 	db	77	;'M'
   849  007EBD  4F                 	db	79	;'O'
   850  007EBE  44                 	db	68	;'D'
   851  007EBF  55                 	db	85	;'U'
   852  007EC0  4C                 	db	76	;'L'
   853  007EC1  45                 	db	69	;'E'
   854  007EC2  3A                 	db	58	;':'
   855  007EC3  20                 	db	32
   856  007EC4  00                 	db	0
   857  007EC5                     STR_54:
   858  007EC5  55                 	db	85	;'U'
   859  007EC6  6E                 	db	110	;'n'
   860  007EC7  6B                 	db	107	;'k'
   861  007EC8  6E                 	db	110	;'n'
   862  007EC9  6F                 	db	111	;'o'
   863  007ECA  77                 	db	119	;'w'
   864  007ECB  6E                 	db	110	;'n'
   865  007ECC  20                 	db	32
   866  007ECD  45                 	db	69	;'E'
   867  007ECE  74                 	db	116	;'t'
   868  007ECF  68                 	db	104	;'h'
   869  007ED0  65                 	db	101	;'e'
   870  007ED1  72                 	db	114	;'r'
   871  007ED2  54                 	db	84	;'T'
   872  007ED3  79                 	db	121	;'y'
   873  007ED4  70                 	db	112	;'p'
   874  007ED5  65                 	db	101	;'e'
   875  007ED6  00                 	db	0
   876  007ED7                     STR_69:
   877  007ED7  5B                 	db	91	;'['
   878  007ED8  50                 	db	80	;'P'
   879  007ED9  41                 	db	65	;'A'
   880  007EDA  43                 	db	67	;'C'
   881  007EDB  4B                 	db	75	;'K'
   882  007EDC  45                 	db	69	;'E'
   883  007EDD  54                 	db	84	;'T'
   884  007EDE  20                 	db	32
   885  007EDF  44                 	db	68	;'D'
   886  007EE0  52                 	db	82	;'R'
   887  007EE1  4F                 	db	79	;'O'
   888  007EE2  50                 	db	80	;'P'
   889  007EE3  50                 	db	80	;'P'
   890  007EE4  45                 	db	69	;'E'
   891  007EE5  44                 	db	68	;'D'
   892  007EE6  5D                 	db	93	;']'
   893  007EE7  00                 	db	0
   894  007EE8                     STR_42:
   895  007EE8  20                 	db	32
   896  007EE9  4D                 	db	77	;'M'
   897  007EEA  45                 	db	69	;'E'
   898  007EEB  4D                 	db	77	;'M'
   899  007EEC  4F                 	db	79	;'O'
   900  007EED  52                 	db	82	;'R'
   901  007EEE  59                 	db	89	;'Y'
   902  007EEF  20                 	db	32
   903  007EF0  4D                 	db	77	;'M'
   904  007EF1  4F                 	db	79	;'O'
   905  007EF2  44                 	db	68	;'D'
   906  007EF3  55                 	db	85	;'U'
   907  007EF4  4C                 	db	76	;'L'
   908  007EF5  45                 	db	69	;'E'
   909  007EF6  3A                 	db	58	;':'
   910  007EF7  20                 	db	32
   911  007EF8  00                 	db	0
   912  007EF9                     STR_2:
   913  007EF9  52                 	db	82	;'R'
   914  007EFA  65                 	db	101	;'e'
   915  007EFB  73                 	db	115	;'s'
   916  007EFC  65                 	db	101	;'e'
   917  007EFD  74                 	db	116	;'t'
   918  007EFE  20                 	db	32
   919  007EFF  73                 	db	115	;'s'
   920  007F00  75                 	db	117	;'u'
   921  007F01  63                 	db	99	;'c'
   922  007F02  63                 	db	99	;'c'
   923  007F03  65                 	db	101	;'e'
   924  007F04  73                 	db	115	;'s'
   925  007F05  73                 	db	115	;'s'
   926  007F06  2E                 	db	46
   927  007F07  0A                 	db	10
   928  007F08  0D                 	db	13
   929  007F09  00                 	db	0
   930  007F0A                     STR_63:
   931  007F0A  5B                 	db	91	;'['
   932  007F0B  52                 	db	82	;'R'
   933  007F0C  65                 	db	101	;'e'
   934  007F0D  70                 	db	112	;'p'
   935  007F0E  6C                 	db	108	;'l'
   936  007F0F  79                 	db	121	;'y'
   937  007F10  20                 	db	32
   938  007F11  73                 	db	115	;'s'
   939  007F12  65                 	db	101	;'e'
   940  007F13  6E                 	db	110	;'n'
   941  007F14  74                 	db	116	;'t'
   942  007F15  20                 	db	32
   943  007F16  74                 	db	116	;'t'
   944  007F17  6F                 	db	111	;'o'
   945  007F18  20                 	db	32
   946  007F19  00                 	db	0
   947  007F1A                     STR_9:
   948  007F1A  5B                 	db	91	;'['
   949  007F1B  53                 	db	83	;'S'
   950  007F1C  79                 	db	121	;'y'
   951  007F1D  6D                 	db	109	;'m'
   952  007F1E  62                 	db	98	;'b'
   953  007F1F  6F                 	db	111	;'o'
   954  007F20  6C                 	db	108	;'l'
   955  007F21  20                 	db	32
   956  007F22  45                 	db	69	;'E'
   957  007F23  72                 	db	114	;'r'
   958  007F24  72                 	db	114	;'r'
   959  007F25  6F                 	db	111	;'o'
   960  007F26  72                 	db	114	;'r'
   961  007F27  73                 	db	115	;'s'
   962  007F28  5D                 	db	93	;']'
   963  007F29  00                 	db	0
   964  007F2A                     STR_3:
   965  007F2A  52                 	db	82	;'R'
   966  007F2B  65                 	db	101	;'e'
   967  007F2C  73                 	db	115	;'s'
   968  007F2D  65                 	db	101	;'e'
   969  007F2E  74                 	db	116	;'t'
   970  007F2F  20                 	db	32
   971  007F30  66                 	db	102	;'f'
   972  007F31  61                 	db	97	;'a'
   973  007F32  69                 	db	105	;'i'
   974  007F33  6C                 	db	108	;'l'
   975  007F34  65                 	db	101	;'e'
   976  007F35  64                 	db	100	;'d'
   977  007F36  2E                 	db	46
   978  007F37  0A                 	db	10
   979  007F38  0D                 	db	13
   980  007F39  00                 	db	0
   981  007F3A                     STR_62:
   982  007F3A  5B                 	db	91	;'['
   983  007F3B  49                 	db	73	;'I'
   984  007F3C  73                 	db	115	;'s'
   985  007F3D  47                 	db	71	;'G'
   986  007F3E  72                 	db	114	;'r'
   987  007F3F  61                 	db	97	;'a'
   988  007F40  74                 	db	116	;'t'
   989  007F41  75                 	db	117	;'u'
   990  007F42  69                 	db	105	;'i'
   991  007F43  74                 	db	116	;'t'
   992  007F44  6F                 	db	111	;'o'
   993  007F45  75                 	db	117	;'u'
   994  007F46  73                 	db	115	;'s'
   995  007F47  5D                 	db	93	;']'
   996  007F48  00                 	db	0
   997  007F49                     STR_46:
   998  007F49  20                 	db	32
   999  007F4A  49                 	db	73	;'I'
  1000  007F4B  50                 	db	80	;'P'
  1001  007F4C  76                 	db	118	;'v'
  1002  007F4D  34                 	db	52	;'4'
  1003  007F4E  20                 	db	32
  1004  007F4F  4D                 	db	77	;'M'
  1005  007F50  4F                 	db	79	;'O'
  1006  007F51  44                 	db	68	;'D'
  1007  007F52  55                 	db	85	;'U'
  1008  007F53  4C                 	db	76	;'L'
  1009  007F54  45                 	db	69	;'E'
  1010  007F55  3A                 	db	58	;':'
  1011  007F56  20                 	db	32
  1012  007F57  00                 	db	0
  1013  007F58                     STR_45:
  1014  007F58  20                 	db	32
  1015  007F59  41                 	db	65	;'A'
  1016  007F5A  52                 	db	82	;'R'
  1017  007F5B  50                 	db	80	;'P'
  1018  007F5C  20                 	db	32
  1019  007F5D  4D                 	db	77	;'M'
  1020  007F5E  4F                 	db	79	;'O'
  1021  007F5F  44                 	db	68	;'D'
  1022  007F60  55                 	db	85	;'U'
  1023  007F61  4C                 	db	76	;'L'
  1024  007F62  45                 	db	69	;'E'
  1025  007F63  3A                 	db	58	;':'
  1026  007F64  20                 	db	32
  1027  007F65  00                 	db	0
  1028  007F66                     STR_35:
  1029  007F66  4C                 	db	76	;'L'
  1030  007F67  69                 	db	105	;'i'
  1031  007F68  6E                 	db	110	;'n'
  1032  007F69  6B                 	db	107	;'k'
  1033  007F6A  20                 	db	32
  1034  007F6B  6C                 	db	108	;'l'
  1035  007F6C  6F                 	db	111	;'o'
  1036  007F6D  73                 	db	115	;'s'
  1037  007F6E  74                 	db	116	;'t'
  1038  007F6F  2E                 	db	46
  1039  007F70  0A                 	db	10
  1040  007F71  0D                 	db	13
  1041  007F72  00                 	db	0
  1042  007F73                     STR_28:
  1043  007F73  20                 	db	32
  1044  007F74  64                 	db	100	;'d'
  1045  007F75  65                 	db	101	;'e'
  1046  007F76  74                 	db	116	;'t'
  1047  007F77  65                 	db	101	;'e'
  1048  007F78  63                 	db	99	;'c'
  1049  007F79  74                 	db	116	;'t'
  1050  007F7A  65                 	db	101	;'e'
  1051  007F7B  64                 	db	100	;'d'
  1052  007F7C  2E                 	db	46
  1053  007F7D  20                 	db	32
  1054  007F7E  00                 	db	0
  1055  007F7F                     STR_23:
  1056  007F7F  4D                 	db	77	;'M'
  1057  007F80  61                 	db	97	;'a'
  1058  007F81  72                 	db	114	;'r'
  1059  007F82  20                 	db	32
  1060  007F83  30                 	db	48	;'0'
  1061  007F84  31                 	db	49	;'1'
  1062  007F85  20                 	db	32
  1063  007F86  32                 	db	50	;'2'
  1064  007F87  30                 	db	48	;'0'
  1065  007F88  31                 	db	49	;'1'
  1066  007F89  39                 	db	57	;'9'
  1067  007F8A  00                 	db	0
  1068  007F8B                     STR_7:
  1069  007F8B  5B                 	db	91	;'['
  1070  007F8C  42                 	db	66	;'B'
  1071  007F8D  72                 	db	114	;'r'
  1072  007F8E  6F                 	db	111	;'o'
  1073  007F8F  61                 	db	97	;'a'
  1074  007F90  64                 	db	100	;'d'
  1075  007F91  63                 	db	99	;'c'
  1076  007F92  61                 	db	97	;'a'
  1077  007F93  73                 	db	115	;'s'
  1078  007F94  74                 	db	116	;'t'
  1079  007F95  5D                 	db	93	;']'
  1080  007F96  00                 	db	0
  1081  007F97                     STR_61:
  1082  007F97  5B                 	db	91	;'['
  1083  007F98  49                 	db	73	;'I'
  1084  007F99  73                 	db	115	;'s'
  1085  007F9A  50                 	db	80	;'P'
  1086  007F9B  72                 	db	114	;'r'
  1087  007F9C  6F                 	db	111	;'o'
  1088  007F9D  62                 	db	98	;'b'
  1089  007F9E  65                 	db	101	;'e'
  1090  007F9F  5D                 	db	93	;']'
  1091  007FA0  00                 	db	0
  1092  007FA1                     STR_8:
  1093  007FA1  5B                 	db	91	;'['
  1094  007FA2  55                 	db	85	;'U'
  1095  007FA3  6E                 	db	110	;'n'
  1096  007FA4  69                 	db	105	;'i'
  1097  007FA5  63                 	db	99	;'c'
  1098  007FA6  61                 	db	97	;'a'
  1099  007FA7  73                 	db	115	;'s'
  1100  007FA8  74                 	db	116	;'t'
  1101  007FA9  5D                 	db	93	;']'
  1102  007FAA  00                 	db	0
  1103  007FAB                     STR_50:
  1104  007FAB  20                 	db	32
  1105  007FAC  28                 	db	40
  1106  007FAD  43                 	db	67	;'C'
  1107  007FAE  6F                 	db	111	;'o'
  1108  007FAF  64                 	db	100	;'d'
  1109  007FB0  65                 	db	101	;'e'
  1110  007FB1  3A                 	db	58	;':'
  1111  007FB2  20                 	db	32
  1112  007FB3  00                 	db	0
  1113  007FB4                     STR_25:
  1114  007FB4  31                 	db	49	;'1'
  1115  007FB5  36                 	db	54	;'6'
  1116  007FB6  3A                 	db	58	;':'
  1117  007FB7  33                 	db	51	;'3'
  1118  007FB8  31                 	db	49	;'1'
  1119  007FB9  3A                 	db	58	;':'
  1120  007FBA  30                 	db	48	;'0'
  1121  007FBB  34                 	db	52	;'4'
  1122  007FBC  00                 	db	0
  1123  007FBD                     STR_67:
  1124  007FBD  20                 	db	32
  1125  007FBE  69                 	db	105	;'i'
  1126  007FBF  73                 	db	115	;'s'
  1127  007FC0  20                 	db	32
  1128  007FC1  61                 	db	97	;'a'
  1129  007FC2  74                 	db	116	;'t'
  1130  007FC3  20                 	db	32
  1131  007FC4  00                 	db	0
  1132  007FC5                     STR_41:
  1133  007FC5  5B                 	db	91	;'['
  1134  007FC6  45                 	db	69	;'E'
  1135  007FC7  52                 	db	82	;'R'
  1136  007FC8  52                 	db	82	;'R'
  1137  007FC9  4F                 	db	79	;'O'
  1138  007FCA  52                 	db	82	;'R'
  1139  007FCB  5D                 	db	93	;']'
  1140  007FCC  00                 	db	0
  1141  007FCD                     STR_11:
  1142  007FCD  5B                 	db	91	;'['
  1143  007FCE  49                 	db	73	;'I'
  1144  007FCF  50                 	db	80	;'P'
  1145  007FD0  76                 	db	118	;'v'
  1146  007FD1  34                 	db	52	;'4'
  1147  007FD2  5D                 	db	93	;']'
  1148  007FD3  00                 	db	0
  1149  007FD4                     STR_10:
  1150  007FD4  5B                 	db	91	;'['
  1151  007FD5  41                 	db	65	;'A'
  1152  007FD6  52                 	db	82	;'R'
  1153  007FD7  50                 	db	80	;'P'
  1154  007FD8  5D                 	db	93	;']'
  1155  007FD9  00                 	db	0
  1156  007FDA                     STR_58:
  1157  007FDA  5D                 	db	93	;']'
  1158  007FDB  2D                 	db	45
  1159  007FDC  3E                 	db	62	;'>'
  1160  007FDD  5B                 	db	91	;'['
  1161  007FDE  00                 	db	0
  1162  007FDF                     STR_52:
  1163  007FDF  49                 	db	73	;'I'
  1164  007FE0  50                 	db	80	;'P'
  1165  007FE1  76                 	db	118	;'v'
  1166  007FE2  34                 	db	52	;'4'
  1167  007FE3  00                 	db	0
  1168  007FE4                     STR_51:
  1169  007FE4  29                 	db	41
  1170  007FE5  2E                 	db	46
  1171  007FE6  0A                 	db	10
  1172  007FE7  0D                 	db	13
  1173  007FE8  00                 	db	0
  1174  007FE9                     STR_15:
  1175  007FE9  5D                 	db	93	;']'
  1176  007FEA  5B                 	db	91	;'['
  1177  007FEB  4C                 	db	76	;'L'
  1178  007FEC  3D                 	db	61	;'='
  1179  007FED  00                 	db	0
  1180  007FEE                     STR_53:
  1181  007FEE  41                 	db	65	;'A'
  1182  007FEF  52                 	db	82	;'R'
  1183  007FF0  50                 	db	80	;'P'
  1184  007FF1  00                 	db	0
  1185  007FF2                     STR_19:
  1186  007FF2  20                 	db	32
  1187  007FF3  28                 	db	40
  1188  007FF4  00                 	db	0
  1189  007FF5                     STR_13:
  1190  007FF5  2D                 	db	45
  1191  007FF6  3E                 	db	62	;'>'
  1192  007FF7  00                 	db	0
  1193  007FF8                     STR_14:
  1194  007FF8  5D                 	db	93	;']'
  1195  007FF9  5B                 	db	91	;'['
  1196  007FFA  00                 	db	0
  1197  007FFB                     STR_20:
  1198  007FFB  29                 	db	41
  1199  007FFC  5D                 	db	93	;']'
  1200  007FFD  00                 	db	0
  1201  0000                     
  1202                           ; #config settings
  1203  007FFE  00                 	db	0	; dummy byte at the end
  1204  0000                     
  1205                           	psect	cinit
  1206  0035E0                     __pcinit:
  1207                           	opt stack 0
  1208  0035E0                     start_initialization:
  1209                           	opt stack 0
  1210  0035E0                     __initialization:
  1211                           	opt stack 0
  1212                           
  1213                           ; Initialize objects allocated to BANK2 (18 bytes)
  1214                           ; load TBLPTR registers with __pidataBANK2
  1215  0035E0  0E88               	movlw	low __pidataBANK2
  1216  0035E2  6EF6               	movwf	tblptrl,c
  1217  0035E4  0E46               	movlw	high __pidataBANK2
  1218  0035E6  6EF7               	movwf	tblptrh,c
  1219  0035E8  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1220  0035EA  6EF8               	movwf	tblptru,c
  1221  0035EC  EE02  F0EB         	lfsr	0,__pdataBANK2
  1222  0035F0  EE10 F012          	lfsr	1,18
  1223  0035F4                     copy_data0:
  1224  0035F4  0009               	tblrd		*+
  1225  0035F6  CFF5 FFEE          	movff	tablat,postinc0
  1226  0035FA  50E5               	movf	postdec1,w,c
  1227  0035FC  50E1               	movf	fsr1l,w,c
  1228  0035FE  E1FA               	bnz	copy_data0
  1229                           
  1230                           ; Initialize objects allocated to BANK1 (28 bytes)
  1231                           ; load TBLPTR registers with __pidataBANK1
  1232  003600  0EE8               	movlw	low __pidataBANK1
  1233  003602  6EF6               	movwf	tblptrl,c
  1234  003604  0E45               	movlw	high __pidataBANK1
  1235  003606  6EF7               	movwf	tblptrh,c
  1236  003608  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1237  00360A  6EF8               	movwf	tblptru,c
  1238  00360C  EE01  F0BE         	lfsr	0,__pdataBANK1
  1239  003610  EE10 F01C          	lfsr	1,28
  1240  003614                     copy_data1:
  1241  003614  0009               	tblrd		*+
  1242  003616  CFF5 FFEE          	movff	tablat,postinc0
  1243  00361A  50E5               	movf	postdec1,w,c
  1244  00361C  50E1               	movf	fsr1l,w,c
  1245  00361E  E1FA               	bnz	copy_data1
  1246                           
  1247                           ; Initialize objects allocated to COMRAM (2 bytes)
  1248                           ; load TBLPTR registers with __pidataCOMRAM
  1249  003620  0E0C               	movlw	low __pidataCOMRAM
  1250  003622  6EF6               	movwf	tblptrl,c
  1251  003624  0E47               	movlw	high __pidataCOMRAM
  1252  003626  6EF7               	movwf	tblptrh,c
  1253  003628  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1254  00362A  6EF8               	movwf	tblptru,c
  1255  00362C  0009               	tblrd		*+	;fetch initializer
  1256  00362E  CFF5 F04D          	movff	tablat,__pdataCOMRAM
  1257  003632  0009               	tblrd		*+	;fetch initializer
  1258  003634  CFF5 F04E          	movff	tablat,__pdataCOMRAM+1
  1259                           
  1260                           ; Clear objects allocated to BANK3 (112 bytes)
  1261  003638  EE03  F000         	lfsr	0,__pbssBANK3
  1262  00363C  0E70               	movlw	112
  1263  00363E                     clear_0:
  1264  00363E  6AEE               	clrf	postinc0,c
  1265  003640  06E8               	decf	wreg,f,c
  1266  003642  E1FD               	bnz	clear_0
  1267                           
  1268                           ; Clear objects allocated to BANK2 (235 bytes)
  1269  003644  EE02  F000         	lfsr	0,__pbssBANK2
  1270  003648  0EEB               	movlw	235
  1271  00364A                     clear_1:
  1272  00364A  6AEE               	clrf	postinc0,c
  1273  00364C  06E8               	decf	wreg,f,c
  1274  00364E  E1FD               	bnz	clear_1
  1275                           
  1276                           ; Clear objects allocated to BANK1 (51 bytes)
  1277  003650  EE01  F08B         	lfsr	0,__pbssBANK1
  1278  003654  0E33               	movlw	51
  1279  003656                     clear_2:
  1280  003656  6AEE               	clrf	postinc0,c
  1281  003658  06E8               	decf	wreg,f,c
  1282  00365A  E1FD               	bnz	clear_2
  1283                           
  1284                           ; Clear objects allocated to COMRAM (37 bytes)
  1285  00365C  EE00  F028         	lfsr	0,__pbssCOMRAM
  1286  003660  0E25               	movlw	37
  1287  003662                     clear_3:
  1288  003662  6AEE               	clrf	postinc0,c
  1289  003664  06E8               	decf	wreg,f,c
  1290  003666  E1FD               	bnz	clear_3
  1291  003668                     end_of_initialization:
  1292                           	opt stack 0
  1293  003668                     __end_of__initialization:
  1294                           	opt stack 0
  1295  003668  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1296  00366A  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1297  00366C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1298  00366E  6EF8               	movwf	tblptru,c
  1299  003670  0100               	movlb	0
  1300  003672  EF27  F007         	goto	_main	;jump to C main() function
  1301                           tblptru	equ	0xFF8
  1302                           tblptrh	equ	0xFF7
  1303                           tblptrl	equ	0xFF6
  1304                           tablat	equ	0xFF5
  1305                           postinc0	equ	0xFEE
  1306                           wreg	equ	0xFE8
  1307                           postdec1	equ	0xFE5
  1308                           fsr1l	equ	0xFE1
  1309                           
  1310                           	psect	bssCOMRAM
  1311  000028                     __pbssCOMRAM:
  1312                           	opt stack 0
  1313  000028                     	ds	4
  1314  00002C                     	ds	4
  1315  000030                     buttonHandler@debounceCounter:
  1316                           	opt stack 0
  1317  000030                     	ds	4
  1318  000034                     _numberToDisplay:
  1319                           	opt stack 0
  1320  000034                     	ds	4
  1321  000038                     _seconds:
  1322                           	opt stack 0
  1323  000038                     	ds	4
  1324  00003C                     sevenSegmentUpdate@digitsToDisplay:
  1325                           	opt stack 0
  1326  00003C                     	ds	3
  1327  00003F                     ipv4_streamToTransmissionBuffer@dataPointer:
  1328                           	opt stack 0
  1329  00003F                     	ds	2
  1330  000041                     updateSeconds@prescaler_ms:
  1331                           	opt stack 0
  1332  000041                     	ds	2
  1333  000043                     ethernetController_streamToTransmitBuffer@pointer:
  1334                           	opt stack 0
  1335  000043                     	ds	2
  1336  000045                     ethernetController_softReset@F5828:
  1337                           	opt stack 0
  1338  000045                     	ds	2
  1339  000047                     _nextPacketPointer:
  1340                           	opt stack 0
  1341  000047                     	ds	2
  1342  000049                     sevenSegmentUpdate@digitPointer:
  1343                           	opt stack 0
  1344  000049                     	ds	1
  1345  00004A                     buttonHandler@newState:
  1346                           	opt stack 0
  1347  00004A                     	ds	1
  1348  00004B                     buttonHandler@oldState:
  1349                           	opt stack 0
  1350  00004B                     	ds	1
  1351  00004C                     	ds	1
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           postinc0	equ	0xFEE
  1357                           wreg	equ	0xFE8
  1358                           postdec1	equ	0xFE5
  1359                           fsr1l	equ	0xFE1
  1360                           
  1361                           	psect	dataCOMRAM
  1362  00004D                     __pdataCOMRAM:
  1363                           	opt stack 0
  1364  00004D                     ethernetController_softReset@F5826:
  1365                           	opt stack 0
  1366  00004D                     	ds	2
  1367                           tblptru	equ	0xFF8
  1368                           tblptrh	equ	0xFF7
  1369                           tblptrl	equ	0xFF6
  1370                           tablat	equ	0xFF5
  1371                           postinc0	equ	0xFEE
  1372                           wreg	equ	0xFE8
  1373                           postdec1	equ	0xFE5
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           	psect	bssBANK1
  1377  00018B                     __pbssBANK1:
  1378                           	opt stack 0
  1379  00018B                     printEthernetState@oldState:
  1380                           	opt stack 0
  1381  00018B                     	ds	15
  1382  00019A                     ipv4_sendFrame@oldTime:
  1383                           	opt stack 0
  1384  00019A                     	ds	4
  1385  00019E                     ethernet_rxGetNewFrame@counter:
  1386                           	opt stack 0
  1387  00019E                     	ds	4
  1388  0001A2                     ipv4_sendFrame@requestCounter:
  1389                           	opt stack 0
  1390  0001A2                     	ds	1
  1391  0001A3                     hexToString@number:
  1392                           	opt stack 0
  1393  0001A3                     	ds	10
  1394  0001AD                     intToString@number:
  1395                           	opt stack 0
  1396  0001AD                     	ds	10
  1397  0001B7                     ethernetController_getRSV@temp:
  1398                           	opt stack 0
  1399  0001B7                     	ds	6
  1400  0001BD                     _buttonState:
  1401                           	opt stack 0
  1402  0001BD                     	ds	1
  1403                           tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1l	equ	0xFE1
  1411                           
  1412                           	psect	dataBANK1
  1413  0001BE                     __pdataBANK1:
  1414                           	opt stack 0
  1415  0001BE                     _sevenSegCharacters:
  1416                           	opt stack 0
  1417  0001BE                     	ds	12
  1418  0001CA                     ipAdressToString@address:
  1419                           	opt stack 0
  1420  0001CA                     	ds	16
  1421                           tblptru	equ	0xFF8
  1422                           tblptrh	equ	0xFF7
  1423                           tblptrl	equ	0xFF6
  1424                           tablat	equ	0xFF5
  1425                           postinc0	equ	0xFEE
  1426                           wreg	equ	0xFE8
  1427                           postdec1	equ	0xFE5
  1428                           fsr1l	equ	0xFE1
  1429                           
  1430                           	psect	bssBANK2
  1431  000200                     __pbssBANK2:
  1432                           	opt stack 0
  1433  000200                     _occupiedMemory:
  1434                           	opt stack 0
  1435  000200                     	ds	72
  1436  000248                     _stack:
  1437                           	opt stack 0
  1438  000248                     	ds	113
  1439  0002B9                     arpEntryToString@string:
  1440                           	opt stack 0
  1441  0002B9                     	ds	50
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1l	equ	0xFE1
  1450                           
  1451                           	psect	dataBANK2
  1452  0002EB                     __pdataBANK2:
  1453                           	opt stack 0
  1454  0002EB                     macToString@F5791:
  1455                           	opt stack 0
  1456  0002EB                     	ds	18
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           postdec1	equ	0xFE5
  1464                           fsr1l	equ	0xFE1
  1465                           
  1466                           	psect	bssBANK3
  1467  000300                     __pbssBANK3:
  1468                           	opt stack 0
  1469  000300                     _ARP_table:
  1470                           	opt stack 0
  1471  000300                     	ds	112
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           postinc0	equ	0xFEE
  1477                           wreg	equ	0xFE8
  1478                           postdec1	equ	0xFE5
  1479                           fsr1l	equ	0xFE1
  1480                           
  1481                           	psect	cstackBANK3
  1482  000370                     __pcstackBANK3:
  1483                           	opt stack 0
  1484  000370                     main@prescaler:
  1485                           	opt stack 0
  1486                           
  1487                           ; 4 bytes @ 0x0
  1488  000370                     	ds	4
  1489  000374                     main@headerBuf:
  1490                           	opt stack 0
  1491                           
  1492                           ; 32 bytes @ 0x4
  1493  000374                     	ds	32
  1494  000394                     _main$1997:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x24
  1498  000394                     	ds	2
  1499  000396                     main@i:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x26
  1503  000396                     	ds	1
  1504  000397                     main@err:
  1505                           	opt stack 0
  1506                           
  1507                           ; 3 bytes @ 0x27
  1508  000397                     	ds	3
  1509  00039A                     main@IPsource:
  1510                           	opt stack 0
  1511                           
  1512                           ; 4 bytes @ 0x2A
  1513  00039A                     	ds	4
  1514  00039E                     main@IPdestination:
  1515                           	opt stack 0
  1516                           
  1517                           ; 4 bytes @ 0x2E
  1518  00039E                     	ds	4
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1l	equ	0xFE1
  1527                           
  1528                           	psect	cstackBANK1
  1529  000100                     __pcstackBANK1:
  1530                           	opt stack 0
  1531  000100                     ARP_sendRequest@senderIP:
  1532                           	opt stack 0
  1533  000100                     ARP_replyIfNeeded@request:
  1534                           	opt stack 0
  1535                           
  1536                           ; 32 bytes @ 0x0
  1537  000100                     	ds	4
  1538  000104                     ARP_sendRequest@senderMAC:
  1539                           	opt stack 0
  1540                           
  1541                           ; 6 bytes @ 0x4
  1542  000104                     	ds	6
  1543  00010A                     ARP_sendRequest@targetIP:
  1544                           	opt stack 0
  1545                           
  1546                           ; 4 bytes @ 0xA
  1547  00010A                     	ds	4
  1548  00010E                     ARP_sendRequest@targetMAC:
  1549                           	opt stack 0
  1550                           
  1551                           ; 6 bytes @ 0xE
  1552  00010E                     	ds	6
  1553  000114                     ARP_sendRequest@request:
  1554                           	opt stack 0
  1555                           
  1556                           ; 32 bytes @ 0x14
  1557  000114                     	ds	12
  1558  000120                     ARP_replyIfNeeded@senderIP:
  1559                           	opt stack 0
  1560                           
  1561                           ; 4 bytes @ 0x20
  1562  000120                     	ds	4
  1563  000124                     ARP_replyIfNeeded@senderMAC:
  1564                           	opt stack 0
  1565                           
  1566                           ; 6 bytes @ 0x24
  1567  000124                     	ds	6
  1568  00012A                     ARP_replyIfNeeded@targetMAC:
  1569                           	opt stack 0
  1570                           
  1571                           ; 6 bytes @ 0x2A
  1572  00012A                     	ds	6
  1573  000130                     ARP_replyIfNeeded@targetIP:
  1574                           	opt stack 0
  1575                           
  1576                           ; 4 bytes @ 0x30
  1577  000130                     	ds	4
  1578  000134                     ?_ipv4_sendFrame:
  1579                           	opt stack 0
  1580  000134                     ARP_replyIfNeeded@reply:
  1581                           	opt stack 0
  1582  000134                     ipv4_sendFrame@ipPacket:
  1583                           	opt stack 0
  1584                           
  1585                           ; 62 bytes @ 0x34
  1586  000134                     	ds	32
  1587  000154                     ARP_handleNewPacket@arp:
  1588                           	opt stack 0
  1589                           
  1590                           ; 32 bytes @ 0x54
  1591  000154                     	ds	30
  1592  000172                     ??_ipv4_sendFrame:
  1593                           
  1594                           ; 1 bytes @ 0x72
  1595  000172                     	ds	2
  1596  000174                     ?_ethernet_rxGetNewFrame:
  1597                           	opt stack 0
  1598  000174                     ethernet_rxGetNewFrame@frame:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x74
  1602  000174                     	ds	3
  1603  000177                     ??_ethernet_rxGetNewFrame:
  1604                           
  1605                           ; 1 bytes @ 0x77
  1606  000177                     	ds	7
  1607  00017E                     ipv4_sendFrame@numberOfRequests:
  1608                           	opt stack 0
  1609                           
  1610                           ; 1 bytes @ 0x7E
  1611  00017E                     	ds	1
  1612  00017F                     ipv4_sendFrame@requestTimeout:
  1613                           	opt stack 0
  1614                           
  1615                           ; 1 bytes @ 0x7F
  1616  00017F                     	ds	1
  1617  000180                     ipv4_sendFrame@index:
  1618                           	opt stack 0
  1619                           
  1620                           ; 1 bytes @ 0x80
  1621  000180                     	ds	1
  1622  000181                     ipv4_sendFrame@err:
  1623                           	opt stack 0
  1624                           
  1625                           ; 3 bytes @ 0x81
  1626  000181                     	ds	3
  1627  000184                     handleStackBackgroundTasks@stack:
  1628                           	opt stack 0
  1629                           
  1630                           ; 2 bytes @ 0x84
  1631  000184                     	ds	2
  1632  000186                     
  1633                           ; 1 bytes @ 0x86
  1634  000186                     	ds	2
  1635  000188                     ??_main:
  1636                           
  1637                           ; 1 bytes @ 0x88
  1638  000188                     	ds	3
  1639                           tblptru	equ	0xFF8
  1640                           tblptrh	equ	0xFF7
  1641                           tblptrl	equ	0xFF6
  1642                           tablat	equ	0xFF5
  1643                           postinc0	equ	0xFEE
  1644                           wreg	equ	0xFE8
  1645                           postdec1	equ	0xFE5
  1646                           fsr1l	equ	0xFE1
  1647                           
  1648                           	psect	cstackBANK0
  1649  000060                     __pcstackBANK0:
  1650                           	opt stack 0
  1651  000060                     ?_ENC424J600_getNextPacketPointer:
  1652                           	opt stack 0
  1653  000060                     ?_ethernetController_getDeviceName:
  1654                           	opt stack 0
  1655  000060                     ?_etherTypeToString:
  1656                           	opt stack 0
  1657  000060                     ?___wmul:
  1658                           	opt stack 0
  1659  000060                     ?___lwdiv:
  1660                           	opt stack 0
  1661  000060                     ?___lwmod:
  1662                           	opt stack 0
  1663  000060                     ?_getSeconds:
  1664                           	opt stack 0
  1665  000060                     ?___llmod:
  1666                           	opt stack 0
  1667  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1668                           	opt stack 0
  1669  000060                     ?_ARP_getEntryFromTable:
  1670                           	opt stack 0
  1671  000060                     entireMemoryEmpty@i:
  1672                           	opt stack 0
  1673  000060                     entireMemoryFull@i:
  1674                           	opt stack 0
  1675  000060                     memory_txFrameClear@index:
  1676                           	opt stack 0
  1677  000060                     ENC424J600_writeSPI@data:
  1678                           	opt stack 0
  1679  000060                     ENC424J600_readSPI@data:
  1680                           	opt stack 0
  1681  000060                     ENC424J600_setNextPacketPointer@ptr:
  1682                           	opt stack 0
  1683  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1684                           	opt stack 0
  1685  000060                     mac_setToBroadcast@mac:
  1686                           	opt stack 0
  1687  000060                     mac_isAllZero@mac:
  1688                           	opt stack 0
  1689  000060                     mac_cmp@a:
  1690                           	opt stack 0
  1691  000060                     mac_setAllZero@mac:
  1692                           	opt stack 0
  1693  000060                     etherTypeToString@ethertype:
  1694                           	opt stack 0
  1695  000060                     ipv4_calculateHeaderChecksum@header:
  1696                           	opt stack 0
  1697  000060                     ipv4_cmp@a:
  1698                           	opt stack 0
  1699  000060                     ipv4_isAllZero@ip:
  1700                           	opt stack 0
  1701  000060                     ipv4_setToAllZero@ip:
  1702                           	opt stack 0
  1703  000060                     ___wmul@multiplier:
  1704                           	opt stack 0
  1705  000060                     ___lwdiv@dividend:
  1706                           	opt stack 0
  1707  000060                     ___lwmod@dividend:
  1708                           	opt stack 0
  1709  000060                     ___llmod@dividend:
  1710                           	opt stack 0
  1711  000060                     checkForOverlapSwitched@a:
  1712                           	opt stack 0
  1713  000060                     ipv4_writeHeaderIntoBuffer@header:
  1714                           	opt stack 0
  1715  000060                     ipv4_streamToTransmissionBuffer@packet:
  1716                           	opt stack 0
  1717                           
  1718                           ; 62 bytes @ 0x0
  1719  000060                     	ds	2
  1720  000062                     ??_ENC424J600_writeSPI:
  1721  000062                     ??_ENC424J600_readSPI:
  1722  000062                     ??_etherTypeToString:
  1723  000062                     ??_ipv4_calculateHeaderChecksum:
  1724  000062                     ?_ethernetController_getNextPacketPointer:
  1725                           	opt stack 0
  1726  000062                     mac_setToBroadcast@i:
  1727                           	opt stack 0
  1728  000062                     mac_isAllZero@i:
  1729                           	opt stack 0
  1730  000062                     mac_setAllZero@i:
  1731                           	opt stack 0
  1732  000062                     ipv4_isAllZero@i:
  1733                           	opt stack 0
  1734  000062                     ipv4_setToAllZero@i:
  1735                           	opt stack 0
  1736  000062                     mac_cmp@b:
  1737                           	opt stack 0
  1738  000062                     ipv4_cmp@b:
  1739                           	opt stack 0
  1740  000062                     ___wmul@multiplicand:
  1741                           	opt stack 0
  1742  000062                     ___lwdiv@divisor:
  1743                           	opt stack 0
  1744  000062                     ___lwmod@divisor:
  1745                           	opt stack 0
  1746  000062                     ethernetController_getDeviceName@string:
  1747                           	opt stack 0
  1748                           
  1749                           ; 11 bytes @ 0x2
  1750  000062                     	ds	2
  1751  000064                     ___lwdiv@counter:
  1752                           	opt stack 0
  1753  000064                     ___lwmod@counter:
  1754                           	opt stack 0
  1755  000064                     ___wmul@product:
  1756                           	opt stack 0
  1757  000064                     ___llmod@divisor:
  1758                           	opt stack 0
  1759  000064                     ARP_setNewEntry@mac:
  1760                           	opt stack 0
  1761                           
  1762                           ; 6 bytes @ 0x4
  1763  000064                     	ds	1
  1764  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1765  000065                     ___lwdiv@quotient:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0x5
  1769  000065                     	ds	1
  1770  000066                     ?___lldiv:
  1771                           	opt stack 0
  1772  000066                     mac_cmp@i:
  1773                           	opt stack 0
  1774  000066                     ipv4_cmp@i:
  1775                           	opt stack 0
  1776  000066                     ENC424J600_writeSPI@timeoutCounter:
  1777                           	opt stack 0
  1778  000066                     ENC424J600_readSPI@timeoutCounter:
  1779                           	opt stack 0
  1780  000066                     ___lldiv@dividend:
  1781                           	opt stack 0
  1782                           
  1783                           ; 4 bytes @ 0x6
  1784  000066                     	ds	1
  1785  000067                     ?_ipAdressToString:
  1786                           	opt stack 0
  1787  000067                     ARP_getEntryFromTable@index:
  1788                           	opt stack 0
  1789  000067                     ipAdressToString@ip:
  1790                           	opt stack 0
  1791  000067                     ARP_checkForEntry@ip:
  1792                           	opt stack 0
  1793                           
  1794                           ; 4 bytes @ 0x7
  1795  000067                     	ds	1
  1796  000068                     ___llmod@counter:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x8
  1800  000068                     	ds	1
  1801  000069                     checkForOverlapSwitched@b:
  1802                           	opt stack 0
  1803                           
  1804                           ; 9 bytes @ 0x9
  1805  000069                     	ds	1
  1806  00006A                     ENC424J600_writeSingleByte@opcode:
  1807                           	opt stack 0
  1808  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1809                           	opt stack 0
  1810  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1811                           	opt stack 0
  1812  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1813                           	opt stack 0
  1814  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1815                           	opt stack 0
  1816  00006A                     ARP_setNewEntry@ip:
  1817                           	opt stack 0
  1818  00006A                     ___lldiv@divisor:
  1819                           	opt stack 0
  1820                           
  1821                           ; 4 bytes @ 0xA
  1822  00006A                     	ds	1
  1823  00006B                     ??_ipAdressToString:
  1824  00006B                     ARP_checkForEntry@index:
  1825                           	opt stack 0
  1826                           
  1827                           ; 2 bytes @ 0xB
  1828  00006B                     	ds	1
  1829  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1830                           	opt stack 0
  1831  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1832                           	opt stack 0
  1833  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  1834                           	opt stack 0
  1835  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  1836                           	opt stack 0
  1837  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  1838                           	opt stack 0
  1839                           
  1840                           ; 5 bytes @ 0xC
  1841  00006C                     	ds	1
  1842  00006D                     ??_ARP_checkForEntry:
  1843  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  1844                           	opt stack 0
  1845  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  1846                           	opt stack 0
  1847  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  1848                           	opt stack 0
  1849  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  1850                           	opt stack 0
  1851                           
  1852                           ; 1 bytes @ 0xD
  1853  00006D                     	ds	1
  1854  00006E                     ??_ENC424J600_clearInterruptFlag:
  1855  00006E                     ?_ENC424J600_getInterruptFlags:
  1856                           	opt stack 0
  1857  00006E                     ?_ethernetController_checkDeviceId:
  1858                           	opt stack 0
  1859  00006E                     ?_ethernetController_getMacAddress:
  1860                           	opt stack 0
  1861  00006E                     ethernetController_getSiliconRevision@data:
  1862                           	opt stack 0
  1863  00006E                     ethernetController_setLEDConfig@conf:
  1864                           	opt stack 0
  1865  00006E                     ENC424J600_getPacketCount@lowByte:
  1866                           	opt stack 0
  1867  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  1868                           	opt stack 0
  1869  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  1870                           	opt stack 0
  1871  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  1872                           	opt stack 0
  1873  00006E                     ENC424J600_readPHYRegister@data:
  1874                           	opt stack 0
  1875  00006E                     ENC424J600_setTXLength@len:
  1876                           	opt stack 0
  1877  00006E                     ENC424J600_setTXStartAddress@addr:
  1878                           	opt stack 0
  1879  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  1880                           	opt stack 0
  1881  00006E                     ENC424J600_setRXTailPointer@addr:
  1882                           	opt stack 0
  1883  00006E                     ARP_setNewEntry@timestamp:
  1884                           	opt stack 0
  1885  00006E                     ipv4_calculateHeaderChecksum@sum:
  1886                           	opt stack 0
  1887  00006E                     ___lldiv@quotient:
  1888                           	opt stack 0
  1889                           
  1890                           ; 4 bytes @ 0xE
  1891  00006E                     	ds	1
  1892  00006F                     ??_ethernetController_updateNextPacketPointer:
  1893  00006F                     ?_ethernetController_getEtherTypeField:
  1894                           	opt stack 0
  1895  00006F                     ?_ethernetController_getSourceMACAddress:
  1896                           	opt stack 0
  1897  00006F                     ethernetController_setLEDConfig@LED:
  1898                           	opt stack 0
  1899  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  1900                           	opt stack 0
  1901  00006F                     ipAdressToString@ones:
  1902                           	opt stack 0
  1903  00006F                     ethernetController_writeDestinationMACAddress@addr:
  1904                           	opt stack 0
  1905  00006F                     ethernetController_streamToTransmitBuffer@field:
  1906                           	opt stack 0
  1907  00006F                     ethernetController_getSourceMACAddress@field:
  1908                           	opt stack 0
  1909  00006F                     ethernetController_getEtherTypeField@field:
  1910                           	opt stack 0
  1911                           
  1912                           ; 9 bytes @ 0xF
  1913  00006F                     	ds	1
  1914  000070                     ??_ENC424J600_getInterruptFlags:
  1915  000070                     ??_ENC424J600_readPHYRegister:
  1916  000070                     ethernetController_setLEDConfig@data:
  1917                           	opt stack 0
  1918  000070                     ENC424J600_setTXLength@lowByte:
  1919                           	opt stack 0
  1920  000070                     ENC424J600_setTXStartAddress@lowByte:
  1921                           	opt stack 0
  1922  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  1923                           	opt stack 0
  1924  000070                     ENC424J600_setRXTailPointer@lowByte:
  1925                           	opt stack 0
  1926  000070                     ENC424J600_clearInterruptFlag@flag:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x10
  1930  000070                     	ds	1
  1931  000071                     ?_ethernetController_getRSV:
  1932                           	opt stack 0
  1933  000071                     ethernetController_checkDeviceId@data:
  1934                           	opt stack 0
  1935  000071                     ENC424J600_setTXLength@highByte:
  1936                           	opt stack 0
  1937  000071                     ENC424J600_setTXStartAddress@highByte:
  1938                           	opt stack 0
  1939  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  1940                           	opt stack 0
  1941  000071                     ENC424J600_setRXTailPointer@highByte:
  1942                           	opt stack 0
  1943  000071                     ENC424J600_clearInterruptFlag@temp:
  1944                           	opt stack 0
  1945  000071                     ethernetController_getRSV@address:
  1946                           	opt stack 0
  1947  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  1948                           	opt stack 0
  1949                           
  1950                           ; 9 bytes @ 0x11
  1951  000071                     	ds	1
  1952  000072                     ethernetController_clearInterruptFlag@flag:
  1953                           	opt stack 0
  1954  000072                     ___lldiv@counter:
  1955                           	opt stack 0
  1956  000072                     ethernetController_streamFromRXBuffer@startAddress:
  1957                           	opt stack 0
  1958  000072                     ethernetController_dropPacket@frame:
  1959                           	opt stack 0
  1960  000072                     ethernetController_checkDeviceId@err:
  1961                           	opt stack 0
  1962  000072                     ethernetController_sendPacket@field:
  1963                           	opt stack 0
  1964  000072                     checkForOverlap@a:
  1965                           	opt stack 0
  1966                           
  1967                           ; 9 bytes @ 0x12
  1968  000072                     	ds	1
  1969  000073                     ?_intToString:
  1970                           	opt stack 0
  1971  000073                     intToString@val:
  1972                           	opt stack 0
  1973  000073                     ipAdressToString@tens:
  1974                           	opt stack 0
  1975                           
  1976                           ; 4 bytes @ 0x13
  1977  000073                     	ds	1
  1978  000074                     ethernetController_streamFromRXBuffer@startEnd:
  1979                           	opt stack 0
  1980  000074                     ethernetController_getMacAddress@mac:
  1981                           	opt stack 0
  1982                           
  1983                           ; 6 bytes @ 0x14
  1984  000074                     	ds	1
  1985  000075                     ethernetController_streamFromRXBuffer@opcode:
  1986                           	opt stack 0
  1987  000075                     ARP_checkForEntry@i:
  1988                           	opt stack 0
  1989  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  1990                           	opt stack 0
  1991  000075                     ethernetController_writeDestinationMACAddress@field:
  1992                           	opt stack 0
  1993                           
  1994                           ; 9 bytes @ 0x15
  1995  000075                     	ds	1
  1996  000076                     ethernetController_getRSV@opcode:
  1997                           	opt stack 0
  1998  000076                     ethernetController_streamFromRXBuffer@temp:
  1999                           	opt stack 0
  2000  000076                     ENC424J600_readPHYRegister@addr:
  2001                           	opt stack 0
  2002  000076                     ENC424J600_getInterruptFlags@low:
  2003                           	opt stack 0
  2004  000076                     ARP_setNewEntry@maxSeconds:
  2005                           	opt stack 0
  2006                           
  2007                           ; 4 bytes @ 0x16
  2008  000076                     	ds	1
  2009  000077                     ??_intToString:
  2010  000077                     ?_ARP_parseFromRXBuffer:
  2011                           	opt stack 0
  2012  000077                     ethernetController_getRSV@i:
  2013                           	opt stack 0
  2014  000077                     ethernetController_updateNextPacketPointer@opcode:
  2015                           	opt stack 0
  2016  000077                     ENC424J600_readPHYRegister@PHYaddress:
  2017                           	opt stack 0
  2018  000077                     ENC424J600_getInterruptFlags@high:
  2019                           	opt stack 0
  2020  000077                     ARP_parseFromRXBuffer@frame:
  2021                           	opt stack 0
  2022  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2023                           	opt stack 0
  2024  000077                     ipAdressToString@hundreds:
  2025                           	opt stack 0
  2026                           
  2027                           ; 4 bytes @ 0x17
  2028  000077                     	ds	1
  2029  000078                     ??_ethernetController_streamToTransmitBuffer:
  2030  000078                     ??_ethernetController_getEtherTypeField:
  2031  000078                     ?_ethernetController_pollInterruptFlags:
  2032                           	opt stack 0
  2033  000078                     ethernetController_getSourceMACAddress@opcode:
  2034                           	opt stack 0
  2035  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2036                           	opt stack 0
  2037  000078                     ENC424J600_readPHYRegister@unusedBits:
  2038                           	opt stack 0
  2039                           
  2040                           ; 1 bytes @ 0x18
  2041  000078                     	ds	1
  2042  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2043  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2044                           	opt stack 0
  2045  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2046                           	opt stack 0
  2047  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2048                           	opt stack 0
  2049                           
  2050                           ; 6 bytes @ 0x19
  2051  000079                     	ds	1
  2052  00007A                     ??_ethernetController_pollInterruptFlags:
  2053  00007A                     ?_macToString:
  2054                           	opt stack 0
  2055  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2056                           	opt stack 0
  2057  00007A                     ARP_setNewEntry@oldestIndex:
  2058                           	opt stack 0
  2059  00007A                     macToString@addr:
  2060                           	opt stack 0
  2061                           
  2062                           ; 6 bytes @ 0x1A
  2063  00007A                     	ds	1
  2064  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2065                           	opt stack 0
  2066  00007B                     ipAdressToString@pointer:
  2067                           	opt stack 0
  2068  00007B                     ARP_setNewEntry@i:
  2069                           	opt stack 0
  2070  00007B                     ethernetController_pollInterruptFlags@flags:
  2071                           	opt stack 0
  2072  00007B                     checkForOverlap@b:
  2073                           	opt stack 0
  2074                           
  2075                           ; 9 bytes @ 0x1B
  2076  00007B                     	ds	1
  2077  00007C                     ethernetController_streamToTransmitBuffer@data:
  2078                           	opt stack 0
  2079  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2080                           	opt stack 0
  2081  00007C                     ipAdressToString@i:
  2082                           	opt stack 0
  2083  00007C                     ethernetController_getEtherTypeField@ethertype:
  2084                           	opt stack 0
  2085  00007C                     ARP_initTable@mac:
  2086                           	opt stack 0
  2087                           
  2088                           ; 6 bytes @ 0x1C
  2089  00007C                     	ds	1
  2090  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2091                           	opt stack 0
  2092  00007D                     ENC424J600_readPHYRegister@lowByte:
  2093                           	opt stack 0
  2094  00007D                     ethernetController_pollInterruptFlags@reg:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x1D
  2098  00007D                     	ds	1
  2099  00007E                     ethernetController_getEtherTypeField@opcode:
  2100                           	opt stack 0
  2101  00007E                     ENC424J600_readPHYRegister@highByte:
  2102                           	opt stack 0
  2103  00007E                     ethernetController_writeDestinationMACAddress@data:
  2104                           	opt stack 0
  2105                           
  2106                           ; 6 bytes @ 0x1E
  2107  00007E                     	ds	1
  2108  00007F                     ethernetController_getSourceMACAddress@temp:
  2109                           	opt stack 0
  2110  00007F                     ethernetController_getEtherTypeField@lowByte:
  2111                           	opt stack 0
  2112  00007F                     ENC424J600_readPHYRegister@temp:
  2113                           	opt stack 0
  2114                           
  2115                           ; 1 bytes @ 0x1F
  2116  00007F                     	ds	1
  2117  000080                     ??_macToString:
  2118  000080                     ethernetController_getSourceMACAddress@i:
  2119                           	opt stack 0
  2120  000080                     ethernetController_getEtherTypeField@highByte:
  2121                           	opt stack 0
  2122  000080                     ethernetController_updateLinkStatus@state:
  2123                           	opt stack 0
  2124                           
  2125                           ; 2 bytes @ 0x20
  2126  000080                     	ds	1
  2127  000081                     intToString@tens:
  2128                           	opt stack 0
  2129  000081                     macToString@address:
  2130                           	opt stack 0
  2131                           
  2132                           ; 18 bytes @ 0x21
  2133  000081                     	ds	1
  2134  000082                     ethernetController_updateLinkStatus@temp:
  2135                           	opt stack 0
  2136  000082                     intToString@ones:
  2137                           	opt stack 0
  2138  000082                     ARP_initTable@ip:
  2139                           	opt stack 0
  2140                           
  2141                           ; 4 bytes @ 0x22
  2142  000082                     	ds	1
  2143  000083                     ethernetController_updateLinkStatus@temp16:
  2144                           	opt stack 0
  2145  000083                     intToString@hundreds:
  2146                           	opt stack 0
  2147                           
  2148                           ; 1 bytes @ 0x23
  2149  000083                     	ds	1
  2150  000084                     ?_memory_txFrameRequest:
  2151                           	opt stack 0
  2152  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2153                           	opt stack 0
  2154  000084                     intToString@thousands:
  2155                           	opt stack 0
  2156  000084                     memory_txFrameRequest@length:
  2157                           	opt stack 0
  2158                           
  2159                           ; 2 bytes @ 0x24
  2160  000084                     	ds	1
  2161  000085                     ethernetController_writeDestinationMACAddress@i_638:
  2162                           	opt stack 0
  2163  000085                     intToString@tenthousands:
  2164                           	opt stack 0
  2165                           
  2166                           ; 1 bytes @ 0x25
  2167  000085                     	ds	1
  2168  000086                     ethernetController_writeDestinationMACAddress@i:
  2169                           	opt stack 0
  2170  000086                     intToString@pointer:
  2171                           	opt stack 0
  2172  000086                     ARP_initTable@i:
  2173                           	opt stack 0
  2174                           
  2175                           ; 1 bytes @ 0x26
  2176  000086                     	ds	7
  2177  00008D                     ??_memory_txFrameRequest:
  2178                           
  2179                           ; 1 bytes @ 0x2D
  2180  00008D                     	ds	6
  2181  000093                     macToString@firstDigit:
  2182                           	opt stack 0
  2183  000093                     _memory_txFrameRequest$1158:
  2184                           	opt stack 0
  2185                           
  2186                           ; 2 bytes @ 0x33
  2187  000093                     	ds	1
  2188  000094                     macToString@secondDigit:
  2189                           	opt stack 0
  2190                           
  2191                           ; 1 bytes @ 0x34
  2192  000094                     	ds	1
  2193  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2194                           	opt stack 0
  2195  000095                     macToString@i:
  2196                           	opt stack 0
  2197                           
  2198                           ; 2 bytes @ 0x35
  2199  000095                     	ds	1
  2200  000096                     memory_txFrameRequest@i:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x36
  2204  000096                     	ds	1
  2205  000097                     ??_ARP_parseFromRXBuffer:
  2206  000097                     memory_txFrameRequest@i_1162:
  2207                           	opt stack 0
  2208  000097                     macToString@j:
  2209                           	opt stack 0
  2210                           
  2211                           ; 1 bytes @ 0x37
  2212  000097                     	ds	1
  2213  000098                     UARTTransmitText@str:
  2214                           	opt stack 0
  2215  000098                     memory_txFrameRequest@field:
  2216                           	opt stack 0
  2217                           
  2218                           ; 9 bytes @ 0x38
  2219  000098                     	ds	2
  2220  00009A                     ?_ethernetController_softReset:
  2221                           	opt stack 0
  2222  00009A                     ARP_parseFromRXBuffer@i:
  2223                           	opt stack 0
  2224  00009A                     ipv4_handleNewPacket@frame:
  2225                           	opt stack 0
  2226  00009A                     printErrorMessage@err:
  2227                           	opt stack 0
  2228  00009A                     UARTTransmitInt@val:
  2229                           	opt stack 0
  2230  00009A                     printEthernetState@state:
  2231                           	opt stack 0
  2232                           
  2233                           ; 15 bytes @ 0x3A
  2234  00009A                     	ds	1
  2235  00009B                     ARP_parseFromRXBuffer@i_2569:
  2236                           	opt stack 0
  2237                           
  2238                           ; 1 bytes @ 0x3B
  2239  00009B                     	ds	1
  2240  00009C                     ARP_parseFromRXBuffer@i_2570:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x3C
  2244  00009C                     	ds	1
  2245  00009D                     ??_ethernetController_softReset:
  2246  00009D                     ??_printErrorMessage:
  2247  00009D                     ARP_parseFromRXBuffer@i_2571:
  2248                           	opt stack 0
  2249                           
  2250                           ; 1 bytes @ 0x3D
  2251  00009D                     	ds	1
  2252  00009E                     ??_ipv4_streamToTransmissionBuffer:
  2253  00009E                     ethernetController_softReset@comFailCount:
  2254                           	opt stack 0
  2255  00009E                     ARP_parseFromRXBuffer@offset:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x3E
  2259  00009E                     	ds	1
  2260  00009F                     ethernetController_softReset@dataToSend:
  2261                           	opt stack 0
  2262                           
  2263                           ; 2 bytes @ 0x3F
  2264  00009F                     	ds	1
  2265  0000A0                     ARP_parseFromRXBuffer@arp:
  2266                           	opt stack 0
  2267                           
  2268                           ; 32 bytes @ 0x40
  2269  0000A0                     	ds	1
  2270  0000A1                     memory_txFrameRequest@freeIndex:
  2271                           	opt stack 0
  2272  0000A1                     ethernetController_softReset@receivedData:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x41
  2276  0000A1                     	ds	1
  2277  0000A2                     ethernet_txFrameRequest@frame:
  2278                           	opt stack 0
  2279  0000A2                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  2280                           	opt stack 0
  2281                           
  2282                           ; 2 bytes @ 0x42
  2283  0000A2                     	ds	1
  2284  0000A3                     ethernetController_softReset@err:
  2285                           	opt stack 0
  2286                           
  2287                           ; 3 bytes @ 0x43
  2288  0000A3                     	ds	1
  2289  0000A4                     ethernet_txFrameRequest@err:
  2290                           	opt stack 0
  2291                           
  2292                           ; 3 bytes @ 0x44
  2293  0000A4                     	ds	2
  2294  0000A6                     ?_ethernetController_init:
  2295                           	opt stack 0
  2296                           
  2297                           ; 3 bytes @ 0x46
  2298  0000A6                     	ds	1
  2299  0000A7                     ipv4_txFrameRequest@packet:
  2300                           	opt stack 0
  2301  0000A7                     ARP_send@arp:
  2302                           	opt stack 0
  2303                           
  2304                           ; 32 bytes @ 0x47
  2305  0000A7                     	ds	2
  2306  0000A9                     ??_ipv4_txFrameRequest:
  2307  0000A9                     ethernetController_init@err:
  2308                           	opt stack 0
  2309                           
  2310                           ; 3 bytes @ 0x49
  2311  0000A9                     	ds	30
  2312  0000C7                     ARP_send@destination:
  2313                           	opt stack 0
  2314                           
  2315                           ; 6 bytes @ 0x67
  2316  0000C7                     	ds	6
  2317  0000CD                     ARP_send@i:
  2318                           	opt stack 0
  2319                           
  2320                           ; 1 bytes @ 0x6D
  2321  0000CD                     	ds	1
  2322  0000CE                     ARP_send@i_2693:
  2323                           	opt stack 0
  2324                           
  2325                           ; 1 bytes @ 0x6E
  2326  0000CE                     	ds	1
  2327  0000CF                     ARP_send@i_2694:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x6F
  2331  0000CF                     	ds	1
  2332  0000D0                     ARP_send@i_2695:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x70
  2336  0000D0                     	ds	1
  2337  0000D1                     ARP_send@ethFrame:
  2338                           	opt stack 0
  2339                           
  2340                           ; 30 bytes @ 0x71
  2341  0000D1                     	ds	30
  2342  0000EF                     ARP_send@field:
  2343                           	opt stack 0
  2344                           
  2345                           ; 9 bytes @ 0x8F
  2346  0000EF                     	ds	9
  2347  0000F8                     ARP_handleNewPacket@frame:
  2348                           	opt stack 0
  2349  0000F8                     ARP_sendRequest@ip:
  2350                           	opt stack 0
  2351                           
  2352                           ; 4 bytes @ 0x98
  2353  0000F8                     	ds	2
  2354  0000FA                     
  2355                           ; 1 bytes @ 0x9A
  2356  0000FA                     	ds	2
  2357  0000FC                     ethernet_rxGetNewFrame@err:
  2358                           	opt stack 0
  2359                           
  2360                           ; 3 bytes @ 0x9C
  2361  0000FC                     	ds	3
  2362                           tblptru	equ	0xFF8
  2363                           tblptrh	equ	0xFF7
  2364                           tblptrl	equ	0xFF6
  2365                           tablat	equ	0xFF5
  2366                           postinc0	equ	0xFEE
  2367                           wreg	equ	0xFE8
  2368                           postdec1	equ	0xFE5
  2369                           fsr1l	equ	0xFE1
  2370                           
  2371                           	psect	cstackCOMRAM
  2372  000001                     __pcstackCOMRAM:
  2373                           	opt stack 0
  2374  000001                     ?i2___lwdiv:
  2375                           	opt stack 0
  2376  000001                     buttonHandler@state:
  2377                           	opt stack 0
  2378  000001                     i2___lwdiv@dividend:
  2379                           	opt stack 0
  2380                           
  2381                           ; 2 bytes @ 0x0
  2382  000001                     	ds	2
  2383  000003                     i2___lwdiv@divisor:
  2384                           	opt stack 0
  2385  000003                     buttonHandler@debounceValue:
  2386                           	opt stack 0
  2387                           
  2388                           ; 4 bytes @ 0x2
  2389  000003                     	ds	2
  2390  000005                     i2___lwdiv@quotient:
  2391                           	opt stack 0
  2392                           
  2393                           ; 2 bytes @ 0x4
  2394  000005                     	ds	2
  2395  000007                     i2___lwdiv@counter:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x6
  2399  000007                     	ds	1
  2400  000008                     parseNumber@numberToDisplay:
  2401                           	opt stack 0
  2402                           
  2403                           ; 2 bytes @ 0x7
  2404  000008                     	ds	2
  2405  00000A                     parseNumber@digit:
  2406                           	opt stack 0
  2407                           
  2408                           ; 1 bytes @ 0x9
  2409  00000A                     	ds	1
  2410  00000B                     ??_parseNumber:
  2411                           
  2412                           ; 1 bytes @ 0xA
  2413  00000B                     	ds	1
  2414  00000C                     parseNumber@ones:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0xB
  2418  00000C                     	ds	1
  2419  00000D                     parseNumber@tens:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0xC
  2423  00000D                     	ds	1
  2424  00000E                     parseNumber@hundreds:
  2425                           	opt stack 0
  2426                           
  2427                           ; 1 bytes @ 0xD
  2428  00000E                     	ds	1
  2429  00000F                     sevenSegmentUpdate@numberToDisplay:
  2430                           	opt stack 0
  2431                           
  2432                           ; 2 bytes @ 0xE
  2433  00000F                     	ds	2
  2434  000011                     ??_sevenSegmentUpdate:
  2435                           
  2436                           ; 1 bytes @ 0x10
  2437  000011                     	ds	2
  2438  000013                     _sevenSegmentUpdate$2071:
  2439                           	opt stack 0
  2440                           
  2441                           ; 2 bytes @ 0x12
  2442  000013                     	ds	2
  2443  000015                     sevenSegmentUpdate@i:
  2444                           	opt stack 0
  2445                           
  2446                           ; 1 bytes @ 0x14
  2447  000015                     	ds	1
  2448  000016                     ??_ISR:
  2449                           
  2450                           ; 1 bytes @ 0x15
  2451  000016                     	ds	18
  2452                           tblptru	equ	0xFF8
  2453                           tblptrh	equ	0xFF7
  2454                           tblptrl	equ	0xFF6
  2455                           tablat	equ	0xFF5
  2456                           postinc0	equ	0xFEE
  2457                           wreg	equ	0xFE8
  2458                           postdec1	equ	0xFE5
  2459                           fsr1l	equ	0xFE1
  2460                           
  2461 ;;
  2462 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2463 ;;
  2464 ;; *************** function _main *****************
  2465 ;; Defined at:
  2466 ;;		line 32 in file "src/system/main.c"
  2467 ;; Parameters:    Size  Location     Type
  2468 ;;		None
  2469 ;; Auto vars:     Size  Location     Type
  2470 ;;  i               1   38[BANK3 ] unsigned char 
  2471 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  2472 ;;  IPdestinatio    4   46[BANK3 ] struct ipv4_address
  2473 ;;  IPsource        4   42[BANK3 ] struct ipv4_address
  2474 ;;  prescaler       4    0[BANK3 ] unsigned long 
  2475 ;;  err             3   39[BANK3 ] struct error
  2476 ;;  oldState        1    0        unsigned char 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2486 ;;      Params:         0       0       0       0       0       0       0       0       0
  2487 ;;      Locals:         0       0       0       0      50       0       0       0       0
  2488 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2489 ;;      Totals:         0       0       3       0      50       0       0       0       0
  2490 ;;Total ram usage:       53 bytes
  2491 ;; Hardware stack levels required when called:   14
  2492 ;; This function calls:
  2493 ;;		_ARP_initTable
  2494 ;;		_UARTInit
  2495 ;;		_UARTTransmitInt
  2496 ;;		_UARTTransmitText
  2497 ;;		_ethernetController_checkDeviceId
  2498 ;;		_ethernetController_getCurrentPacketCount
  2499 ;;		_ethernetController_getDeviceName
  2500 ;;		_ethernetController_getMacAddress
  2501 ;;		_ethernetController_getSiliconRevision
  2502 ;;		_ethernetController_init
  2503 ;;		_ethernetController_setLEDConfig
  2504 ;;		_handleStackBackgroundTasks
  2505 ;;		_ipv4_calculateHeaderChecksum
  2506 ;;		_ipv4_streamToTransmissionBuffer
  2507 ;;		_ipv4_txFrameRequest
  2508 ;;		_ipv4_writeHeaderIntoBuffer
  2509 ;;		_macToString
  2510 ;;		_printErrorMessage
  2511 ;;		_printEthernetState
  2512 ;;		_sevenSegmentInit
  2513 ;; This function is called by:
  2514 ;;		Startup code after reset
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517                           
  2518                           	psect	text0
  2519  000E4E                     __ptext0:
  2520                           	opt stack 0
  2521  000E4E                     _main:
  2522                           	opt stack 17
  2523                           
  2524                           ;main.c: 35: OSCCONbits.SCS = 0b00;
  2525                           
  2526                           ;incstack = 0
  2527  000E4E  0EFC               	movlw	-4
  2528  000E50  16D3               	andwf	4051,f,c	;volatile
  2529                           
  2530                           ;main.c: 36: OSCCONbits.IRCF = 0b1110;
  2531  000E52  50D3               	movf	4051,w,c	;volatile
  2532  000E54  0B8F               	andlw	-113
  2533  000E56  0960               	iorlw	96
  2534  000E58  6ED3               	movwf	4051,c	;volatile
  2535                           
  2536                           ;main.c: 37: OSCCON2bits.PLLEN = 0b1;
  2537  000E5A  88D2               	bsf	4050,4,c	;volatile
  2538                           
  2539                           ;main.c: 40: INTCONbits.GIE = 0;
  2540  000E5C  9EF2               	bcf	intcon,7,c	;volatile
  2541                           
  2542                           ;main.c: 41: INTCONbits.TMR0IE = 1;
  2543  000E5E  8AF2               	bsf	intcon,5,c	;volatile
  2544                           
  2545                           ;main.c: 42: INTCON3bits.INT2IE = 1;
  2546  000E60  88F0               	bsf	intcon3,4,c	;volatile
  2547                           
  2548                           ;main.c: 43: RCIP = 0;
  2549  000E62  9A9F               	bcf	3999,5,c	;volatile
  2550                           
  2551                           ;main.c: 44: RCIE = 1;
  2552  000E64  8A9D               	bsf	3997,5,c	;volatile
  2553                           
  2554                           ;main.c: 45: INTCONbits.PEIE = 1;
  2555  000E66  8CF2               	bsf	intcon,6,c	;volatile
  2556                           
  2557                           ;main.c: 49: T0CONbits.TMR0ON = 1;
  2558  000E68  8ED5               	bsf	4053,7,c	;volatile
  2559                           
  2560                           ;main.c: 50: T0CONbits.T08BIT = 1;
  2561  000E6A  8CD5               	bsf	4053,6,c	;volatile
  2562                           
  2563                           ;main.c: 51: T0CONbits.T0CS = 0;
  2564  000E6C  9AD5               	bcf	4053,5,c	;volatile
  2565                           
  2566                           ;main.c: 52: T0CONbits.PSA = 0;
  2567  000E6E  96D5               	bcf	4053,3,c	;volatile
  2568                           
  2569                           ;main.c: 53: T0CONbits.T0PS = 0b101;
  2570  000E70  50D5               	movf	4053,w,c	;volatile
  2571  000E72  0BF8               	andlw	-8
  2572  000E74  0905               	iorlw	5
  2573  000E76  6ED5               	movwf	4053,c	;volatile
  2574                           
  2575                           ;main.c: 55: UARTInit();
  2576  000E78  EC5F  F023         	call	_UARTInit	;wreg free
  2577                           
  2578                           ;main.c: 56: sevenSegmentInit();
  2579  000E7C  EC1E  F023         	call	_sevenSegmentInit	;wreg free
  2580                           
  2581                           ;main.c: 57: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  2582  000E80  0E68               	movlw	104
  2583  000E82  0101               	movlb	1	; () banked
  2584  000E84  6F88               	movwf	??_main& (0+255),b
  2585  000E86  0EE4               	movlw	228
  2586  000E88                     u11247:
  2587  000E88  2EE8               	decfsz	wreg,f,c
  2588  000E8A  D7FE               	bra	u11247
  2589  000E8C  2F88               	decfsz	??_main& (0+255),f,b
  2590  000E8E  D7FC               	bra	u11247
  2591  000E90  F000               	nop	
  2592                           
  2593                           ;main.c: 58: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2594  000E92  0E34               	movlw	low STR_22
  2595  000E94  0100               	movlb	0	; () banked
  2596  000E96  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2597  000E98  0E7E               	movlw	high STR_22
  2598  000E9A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2599  000E9C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2600                           
  2601                           ;main.c: 59: UARTTransmitText("Mar 01 2019");
  2602  000EA0  0E7F               	movlw	low STR_23
  2603  000EA2  0100               	movlb	0	; () banked
  2604  000EA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2605  000EA6  0E7F               	movlw	high STR_23
  2606  000EA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2607  000EAA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2608                           
  2609                           ;main.c: 60: UARTTransmitText(" ");
  2610  000EAE  0E8A               	movlw	low (STR_38+18)
  2611  000EB0  0100               	movlb	0	; () banked
  2612  000EB2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2613  000EB4  0E7E               	movlw	high (STR_38+18)
  2614  000EB6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2615  000EB8  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2616                           
  2617                           ;main.c: 61: UARTTransmitText("16:31:04");
  2618  000EBC  0EB4               	movlw	low STR_25
  2619  000EBE  0100               	movlb	0	; () banked
  2620  000EC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2621  000EC2  0E7F               	movlw	high STR_25
  2622  000EC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2623  000EC6  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2624                           
  2625                           ;main.c: 62: UARTTransmitText("\n\r");
  2626  000ECA  0EF7               	movlw	low (STR_34+48)
  2627  000ECC  0100               	movlb	0	; () banked
  2628  000ECE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2629  000ED0  0E7C               	movlw	high (STR_34+48)
  2630  000ED2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2631  000ED4  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2632                           
  2633                           ;main.c: 63: UARTTransmitText("Initialising Ethernet Controller...\n\r");
  2634  000ED8  0E21               	movlw	low STR_27
  2635  000EDA  0100               	movlb	0	; () banked
  2636  000EDC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2637  000EDE  0E7D               	movlw	high STR_27
  2638  000EE0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2639  000EE2  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2640                           
  2641                           ;main.c: 64: error_t err;
  2642                           ;main.c: 65: err = ethernetController_init();
  2643  000EE6  ECBA  F01D         	call	_ethernetController_init	;wreg free
  2644  000EEA  C0A6  F397         	movff	?_ethernetController_init,main@err
  2645  000EEE  C0A7  F398         	movff	?_ethernetController_init+1,main@err+1
  2646  000EF2  C0A8  F399         	movff	?_ethernetController_init+2,main@err+2
  2647                           
  2648                           ;main.c: 66: if (err.code != (uint16_t)0)
  2649  000EF6  0103               	movlb	3	; () banked
  2650  000EF8  5198               	movf	(main@err+1)& (0+255),w,b
  2651  000EFA  1199               	iorwf	(main@err+2)& (0+255),w,b
  2652  000EFC  B4D8               	btfsc	status,2,c
  2653  000EFE  D008               	goto	l615
  2654                           
  2655                           ; BSR set to: 3
  2656                           ;main.c: 67: printErrorMessage(err);
  2657  000F00  C397  F09A         	movff	main@err,printErrorMessage@err
  2658  000F04  C398  F09B         	movff	main@err+1,printErrorMessage@err+1
  2659  000F08  C399  F09C         	movff	main@err+2,printErrorMessage@err+2
  2660  000F0C  EC21  F016         	call	_printErrorMessage	;wreg free
  2661  000F10                     l615:
  2662                           
  2663                           ;main.c: 68: err = ethernetController_checkDeviceId();
  2664  000F10  ECD6  F01F         	call	_ethernetController_checkDeviceId	;wreg free
  2665  000F14  C06E  F397         	movff	?_ethernetController_checkDeviceId,main@err
  2666  000F18  C06F  F398         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2667  000F1C  C070  F399         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2668                           
  2669                           ;main.c: 69: if (err.code == (uint16_t)0) {
  2670  000F20  0103               	movlb	3	; () banked
  2671  000F22  5198               	movf	(main@err+1)& (0+255),w,b
  2672  000F24  1199               	iorwf	(main@err+2)& (0+255),w,b
  2673  000F26  A4D8               	btfss	status,2,c
  2674  000F28  D00F               	goto	l616
  2675                           
  2676                           ; BSR set to: 3
  2677                           ;main.c: 70: UARTTransmitText(ethernetController_getDeviceName());
  2678  000F2A  ECB3  F022         	call	_ethernetController_getDeviceName	;wreg free
  2679  000F2E  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2680  000F32  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2681  000F36  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2682                           
  2683                           ;main.c: 71: UARTTransmitText(" detected. ");
  2684  000F3A  0E73               	movlw	low STR_28
  2685  000F3C  0100               	movlb	0	; () banked
  2686  000F3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2687  000F40  0E7F               	movlw	high STR_28
  2688  000F42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2689  000F44  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2690  000F48                     l616:
  2691                           
  2692                           ;main.c: 72: }
  2693                           ;main.c: 73: UARTTransmitText("Silicon revision is ");
  2694  000F48  0E63               	movlw	low STR_29
  2695  000F4A  0100               	movlb	0	; () banked
  2696  000F4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2697  000F4E  0E7E               	movlw	high STR_29
  2698  000F50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2699  000F52  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2700                           
  2701                           ;main.c: 74: UARTTransmitInt(ethernetController_getSiliconRevision());
  2702  000F56  ECD6  F022         	call	_ethernetController_getSiliconRevision	;wreg free
  2703  000F5A  0101               	movlb	1	; () banked
  2704  000F5C  6F88               	movwf	??_main& (0+255),b
  2705  000F5E  5188               	movf	??_main& (0+255),w,b
  2706  000F60  0100               	movlb	0	; () banked
  2707  000F62  6F9A               	movwf	UARTTransmitInt@val& (0+255),b
  2708  000F64  6B9B               	clrf	(UARTTransmitInt@val+1)& (0+255),b
  2709  000F66  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  2710  000F68  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  2711  000F6A  ECC5  F022         	call	_UARTTransmitInt	;wreg free
  2712                           
  2713                           ;main.c: 75: UARTTransmitText(".\n\r");
  2714  000F6E  0EE5               	movlw	low (STR_51+1)
  2715  000F70  0100               	movlb	0	; () banked
  2716  000F72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2717  000F74  0E7F               	movlw	high (STR_51+1)
  2718  000F76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2719  000F78  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2720                           
  2721                           ;main.c: 76: UARTTransmitText("Source MAC address is ");
  2722  000F7C  0E4C               	movlw	low STR_31
  2723  000F7E  0100               	movlb	0	; () banked
  2724  000F80  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2725  000F82  0E7E               	movlw	high STR_31
  2726  000F84  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2727  000F86  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2728                           
  2729                           ;main.c: 77: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  2730  000F8A  EC80  F01D         	call	_ethernetController_getMacAddress	;wreg free
  2731  000F8E  CFE9 FFD9          	movff	fsr0l,fsr2l
  2732  000F92  CFEA FFDA          	movff	fsr0h,fsr2h
  2733  000F96  EE00  F07A         	lfsr	0,macToString@addr
  2734  000F9A  0E05               	movlw	5
  2735  000F9C                     u11111:
  2736  000F9C  CFDB FFEB          	movff	plusw2,plusw0
  2737  000FA0  06E8               	decf	wreg,f,c
  2738  000FA2  E2FC               	bc	u11111
  2739  000FA4  ECAC  F016         	call	_macToString	;wreg free
  2740  000FA8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  2741  000FAC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  2742  000FB0  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2743                           
  2744                           ;main.c: 78: UARTTransmitText(".\n\r");
  2745  000FB4  0EE5               	movlw	low (STR_51+1)
  2746  000FB6  0100               	movlb	0	; () banked
  2747  000FB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2748  000FBA  0E7F               	movlw	high (STR_51+1)
  2749  000FBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2750  000FBE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2751                           
  2752                           ;main.c: 79: UARTTransmitText("Initialisation completed.\n\r");
  2753  000FC2  0EFF               	movlw	low STR_33
  2754  000FC4  0100               	movlb	0	; () banked
  2755  000FC6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2756  000FC8  0E7D               	movlw	high STR_33
  2757  000FCA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2758  000FCC  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2759                           
  2760                           ;main.c: 80: UARTTransmitText("------------------------------------------------\n\r");
  2761  000FD0  0EC7               	movlw	low STR_34
  2762  000FD2  0100               	movlb	0	; () banked
  2763  000FD4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2764  000FD6  0E7C               	movlw	high STR_34
  2765  000FD8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2766  000FDA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  2767                           
  2768                           ;main.c: 82: ARP_initTable();
  2769  000FDE  ECCC  F01E         	call	_ARP_initTable	;wreg free
  2770                           
  2771                           ;main.c: 84: ethernetController_setLEDConfig(LEDA, LED_ON);
  2772  000FE2  0E00               	movlw	0
  2773  000FE4  0100               	movlb	0	; () banked
  2774  000FE6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2775  000FE8  0E00               	movlw	0
  2776  000FEA  EC3B  F01B         	call	_ethernetController_setLEDConfig
  2777                           
  2778                           ;main.c: 85: ethernetController_setLEDConfig(LEDA, LED_ON);
  2779  000FEE  0E00               	movlw	0
  2780  000FF0  0100               	movlb	0	; () banked
  2781  000FF2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2782  000FF4  0E00               	movlw	0
  2783  000FF6  EC3B  F01B         	call	_ethernetController_setLEDConfig
  2784                           
  2785                           ;main.c: 86: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  2786  000FFA  0E15               	movlw	21
  2787  000FFC  0101               	movlb	1	; () banked
  2788  000FFE  6F89               	movwf	(??_main+1)& (0+255),b
  2789  001000  0E4B               	movlw	75
  2790  001002  6F88               	movwf	??_main& (0+255),b
  2791  001004  0EBE               	movlw	190
  2792  001006                     u11257:
  2793  001006  2EE8               	decfsz	wreg,f,c
  2794  001008  D7FE               	bra	u11257
  2795  00100A  2F88               	decfsz	??_main& (0+255),f,b
  2796  00100C  D7FC               	bra	u11257
  2797  00100E  2F89               	decfsz	(??_main+1)& (0+255),f,b
  2798  001010  D7FA               	bra	u11257
  2799  001012  F000               	nop	
  2800                           
  2801                           ;main.c: 88: ethernetController_setLEDConfig(LEDA, LED_OFF);
  2802  001014  0E01               	movlw	1
  2803  001016  0100               	movlb	0	; () banked
  2804  001018  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2805  00101A  0E00               	movlw	0
  2806  00101C  EC3B  F01B         	call	_ethernetController_setLEDConfig
  2807                           
  2808                           ;main.c: 89: ethernetController_setLEDConfig(LEDA, LED_OFF);
  2809  001020  0E01               	movlw	1
  2810  001022  0100               	movlb	0	; () banked
  2811  001024  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2812  001026  0E00               	movlw	0
  2813  001028  EC3B  F01B         	call	_ethernetController_setLEDConfig
  2814                           
  2815                           ;main.c: 92: uint32_t prescaler = 0;
  2816  00102C  0E00               	movlw	0
  2817  00102E  0103               	movlb	3	; () banked
  2818  001030  6F70               	movwf	main@prescaler& (0+255),b
  2819  001032  0E00               	movlw	0
  2820  001034  6F71               	movwf	(main@prescaler+1)& (0+255),b
  2821  001036  0E00               	movlw	0
  2822  001038  6F72               	movwf	(main@prescaler+2)& (0+255),b
  2823  00103A  0E00               	movlw	0
  2824  00103C  6F73               	movwf	(main@prescaler+3)& (0+255),b
  2825                           
  2826                           ; BSR set to: 3
  2827                           ;main.c: 94: ANSELB &= ~(1<<5);
  2828  00103E  010F               	movlb	15	; () banked
  2829  001040  9B5C               	bcf	92,5,b	;volatile
  2830                           
  2831                           ; BSR set to: 15
  2832                           ;main.c: 95: TRISB |= (1<<5);
  2833  001042  8A93               	bsf	3987,5,c	;volatile
  2834                           
  2835                           ; BSR set to: 15
  2836                           ;main.c: 97: uint8_t oldState;
  2837                           ;main.c: 100: stack.ethernet.destination.address[0] = 0x80;
  2838  001044  0E80               	movlw	128
  2839  001046  0102               	movlb	2	; () banked
  2840  001048  6F51               	movwf	(_stack+9)& (0+255),b	;volatile
  2841                           
  2842                           ; BSR set to: 2
  2843                           ;main.c: 101: stack.ethernet.destination.address[1] = 0x1F;
  2844  00104A  0E1F               	movlw	31
  2845  00104C  6F52               	movwf	(_stack+10)& (0+255),b	;volatile
  2846                           
  2847                           ; BSR set to: 2
  2848                           ;main.c: 102: stack.ethernet.destination.address[2] = 0x12;
  2849  00104E  0E12               	movlw	18
  2850  001050  6F53               	movwf	(_stack+11)& (0+255),b	;volatile
  2851                           
  2852                           ; BSR set to: 2
  2853                           ;main.c: 103: stack.ethernet.destination.address[3] = 0x1B;
  2854  001052  0E1B               	movlw	27
  2855  001054  6F54               	movwf	(_stack+12)& (0+255),b	;volatile
  2856                           
  2857                           ; BSR set to: 2
  2858                           ;main.c: 104: stack.ethernet.destination.address[4] = 0x6A;
  2859  001056  0E6A               	movlw	106
  2860  001058  6F55               	movwf	(_stack+13)& (0+255),b	;volatile
  2861                           
  2862                           ; BSR set to: 2
  2863                           ;main.c: 105: stack.ethernet.destination.address[5] = 0x2F;
  2864  00105A  0E2F               	movlw	47
  2865  00105C  6F56               	movwf	(_stack+14)& (0+255),b	;volatile
  2866                           
  2867                           ; BSR set to: 2
  2868                           ;main.c: 120: ipv4_address_t IPsource;
  2869                           ;main.c: 121: IPsource.address[0] = 192;
  2870  00105E  0EC0               	movlw	192
  2871  001060  0103               	movlb	3	; () banked
  2872  001062  6F9A               	movwf	main@IPsource& (0+255),b
  2873                           
  2874                           ; BSR set to: 3
  2875                           ;main.c: 122: IPsource.address[1] = 168;
  2876  001064  0EA8               	movlw	168
  2877  001066  6F9B               	movwf	(main@IPsource+1)& (0+255),b
  2878                           
  2879                           ; BSR set to: 3
  2880                           ;main.c: 123: IPsource.address[2] = 0;
  2881  001068  0E00               	movlw	0
  2882  00106A  6F9C               	movwf	(main@IPsource+2)& (0+255),b
  2883                           
  2884                           ; BSR set to: 3
  2885                           ;main.c: 124: IPsource.address[3] = 4;
  2886  00106C  0E04               	movlw	4
  2887  00106E  6F9D               	movwf	(main@IPsource+3)& (0+255),b
  2888                           
  2889                           ; BSR set to: 3
  2890                           ;main.c: 126: ipv4_address_t IPdestination;
  2891                           ;main.c: 127: IPdestination.address[0] = 169;
  2892  001070  0EA9               	movlw	169
  2893  001072  6F9E               	movwf	main@IPdestination& (0+255),b
  2894                           
  2895                           ; BSR set to: 3
  2896                           ;main.c: 128: IPdestination.address[1] = 254;
  2897  001074  0EFE               	movlw	254
  2898  001076  6F9F               	movwf	(main@IPdestination+1)& (0+255),b
  2899                           
  2900                           ; BSR set to: 3
  2901                           ;main.c: 129: IPdestination.address[2] = 108;
  2902  001078  0E6C               	movlw	108
  2903  00107A  6FA0               	movwf	(main@IPdestination+2)& (0+255),b
  2904                           
  2905                           ; BSR set to: 3
  2906                           ;main.c: 130: IPdestination.address[3] = 135;
  2907  00107C  0E87               	movlw	135
  2908  00107E  6FA1               	movwf	(main@IPdestination+3)& (0+255),b
  2909                           
  2910                           ; BSR set to: 3
  2911                           ;main.c: 137: INTCONbits.GIE = 1;
  2912  001080  8EF2               	bsf	intcon,7,c	;volatile
  2913                           
  2914                           ; BSR set to: 3
  2915                           ;main.c: 138: INTCONbits.PEIE = 1;
  2916  001082  8CF2               	bsf	intcon,6,c	;volatile
  2917  001084                     l617:
  2918  001084  0004               	clrwdt		;# 
  2919                           
  2920                           ;main.c: 144: handleStackBackgroundTasks(&stack);
  2921  001086  0E48               	movlw	low _stack
  2922  001088  0101               	movlb	1	; () banked
  2923  00108A  6F84               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  2924  00108C  0E02               	movlw	high _stack
  2925  00108E  6F85               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  2926  001090  ECA3  F011         	call	_handleStackBackgroundTasks	;wreg free
  2927                           
  2928                           ;main.c: 147: printEthernetState(stack.ethernet);
  2929  001094  EE22  F048         	lfsr	2,_stack	;volatile
  2930  001098  EE00  F09A         	lfsr	0,printEthernetState@state
  2931  00109C  0E0E               	movlw	14
  2932  00109E                     u11121:
  2933  00109E  CFDB FFEB          	movff	plusw2,plusw0
  2934  0010A2  06E8               	decf	wreg,f,c
  2935  0010A4  E2FC               	bc	u11121
  2936  0010A6  EC07  F01A         	call	_printEthernetState	;wreg free
  2937                           
  2938                           ;main.c: 148: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  2939  0010AA  0102               	movlb	2	; () banked
  2940  0010AC  5148               	movf	_stack& (0+255),w,b	;volatile
  2941  0010AE  B4D8               	btfsc	status,2,c
  2942  0010B0  D009               	goto	l619
  2943                           
  2944                           ; BSR set to: 2
  2945  0010B2  EC83  F023         	call	_ethernetController_getCurrentPacketCount	;wreg free
  2946  0010B6  0101               	movlb	1	; () banked
  2947  0010B8  6F88               	movwf	??_main& (0+255),b
  2948  0010BA  5188               	movf	??_main& (0+255),w,b
  2949  0010BC  0103               	movlb	3	; () banked
  2950  0010BE  6F94               	movwf	_main$1997& (0+255),b
  2951  0010C0  6B95               	clrf	(_main$1997+1)& (0+255),b
  2952  0010C2  D005               	goto	l621
  2953  0010C4                     l619:
  2954                           
  2955                           ; BSR set to: 3
  2956  0010C4  0E03               	movlw	3
  2957  0010C6  0103               	movlb	3	; () banked
  2958  0010C8  6F95               	movwf	(_main$1997+1)& (0+255),b
  2959  0010CA  0EE8               	movlw	232
  2960  0010CC  6F94               	movwf	_main$1997& (0+255),b
  2961  0010CE                     l621:
  2962                           
  2963                           ; BSR set to: 3
  2964                           
  2965                           ; BSR set to: 3
  2966  0010CE  C394  F034         	movff	_main$1997,_numberToDisplay	;volatile
  2967  0010D2  C395  F035         	movff	_main$1997+1,_numberToDisplay+1	;volatile
  2968  0010D6  0E00               	movlw	0
  2969  0010D8  BE35               	btfsc	_numberToDisplay+1,7,c	;volatile
  2970  0010DA  0EFF               	movlw	-1
  2971  0010DC  6E36               	movwf	_numberToDisplay+2,c	;volatile
  2972  0010DE  6E37               	movwf	_numberToDisplay+3,c	;volatile
  2973                           
  2974                           ; BSR set to: 3
  2975                           ;main.c: 150: if (buttonState) {
  2976  0010E0  0101               	movlb	1	; () banked
  2977  0010E2  51BD               	movf	_buttonState& (0+255),w,b	;volatile
  2978  0010E4  B4D8               	btfsc	status,2,c
  2979  0010E6  D7CE               	goto	l617
  2980                           
  2981                           ; BSR set to: 1
  2982                           ;main.c: 151: buttonState = 0;
  2983  0010E8  0E00               	movlw	0
  2984  0010EA  6FBD               	movwf	_buttonState& (0+255),b	;volatile
  2985                           
  2986                           ; BSR set to: 1
  2987                           ;main.c: 153: if (stack.ethernet.link == LINK_ESTABLISHED) {
  2988  0010EC  0102               	movlb	2	; () banked
  2989  0010EE  0548               	decf	_stack& (0+255),w,b	;volatile
  2990  0010F0  A4D8               	btfss	status,2,c
  2991  0010F2  D7C8               	goto	l617
  2992                           
  2993                           ; BSR set to: 2
  2994                           ;main.c: 156: uint8_t headerBuf[32];
  2995                           ;main.c: 157: stack.pendingPacketToSend.ipv4Header.destination = IPdestination;
  2996  0010F4  C39E  F28E         	movff	main@IPdestination,_stack+70	;volatile
  2997  0010F8  C39F  F28F         	movff	main@IPdestination+1,_stack+71	;volatile
  2998  0010FC  C3A0  F290         	movff	main@IPdestination+2,_stack+72	;volatile
  2999  001100  C3A1  F291         	movff	main@IPdestination+3,_stack+73	;volatile
  3000                           
  3001                           ;main.c: 158: stack.pendingPacketToSend.ipv4Header.source = IPsource;
  3002  001104  C39A  F28A         	movff	main@IPsource,_stack+66	;volatile
  3003  001108  C39B  F28B         	movff	main@IPsource+1,_stack+67	;volatile
  3004  00110C  C39C  F28C         	movff	main@IPsource+2,_stack+68	;volatile
  3005  001110  C39D  F28D         	movff	main@IPsource+3,_stack+69	;volatile
  3006                           
  3007                           ; BSR set to: 2
  3008                           ;main.c: 159: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3009  001114  0E00               	movlw	0
  3010  001116  6F80               	movwf	(_stack+56)& (0+255),b	;volatile
  3011  001118  0E78               	movlw	120
  3012  00111A  6F7F               	movwf	(_stack+55)& (0+255),b	;volatile
  3013                           
  3014                           ; BSR set to: 2
  3015                           ;main.c: 160: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3016  00111C  6986               	setf	(_stack+62)& (0+255),b	;volatile
  3017                           
  3018                           ;main.c: 161: stack.pendingPacketToSend.ipv4Header.version = 4;
  3019  00111E  0E04               	movlw	4
  3020  001120  6F7B               	movwf	(_stack+51)& (0+255),b	;volatile
  3021                           
  3022                           ; BSR set to: 2
  3023                           ;main.c: 162: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3024  001122  0E7B               	movlw	low (_stack+51)
  3025  001124  0100               	movlb	0	; () banked
  3026  001126  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3027  001128  0E02               	movlw	high (_stack+51)
  3028  00112A  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3029  00112C  ECFA  F008         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3030                           
  3031                           ;main.c: 163: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3032  001130  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3033  001134  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3034  001138  0E16               	movlw	22
  3035  00113A                     u11161:
  3036  00113A  CFDB FFEB          	movff	plusw2,plusw0
  3037  00113E  06E8               	decf	wreg,f,c
  3038  001140  E2FC               	bc	u11161
  3039  001142  0E74               	movlw	low main@headerBuf
  3040  001144  0100               	movlb	0	; () banked
  3041  001146  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3042  001148  0E03               	movlw	high main@headerBuf
  3043  00114A  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3044  00114C  EC78  F012         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3045                           
  3046                           ;main.c: 165: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3047  001150  0E7B               	movlw	low (_stack+51)
  3048  001152  0100               	movlb	0	; () banked
  3049  001154  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3050  001156  0E02               	movlw	high (_stack+51)
  3051  001158  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3052  00115A  ECCE  F013         	call	_ipv4_txFrameRequest	;wreg free
  3053                           
  3054                           ;main.c: 167: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3055  00115E  0E00               	movlw	0
  3056  001160  0103               	movlb	3	; () banked
  3057  001162  6F96               	movwf	main@i& (0+255),b
  3058  001164  D036               	goto	l624
  3059  001166                     
  3060                           ;main.c: 168: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3061                           
  3062                           ; BSR set to: 3
  3063  001166  0102               	movlb	2	; () banked
  3064  001168  517C               	movf	(_stack+52)& (0+255),w,b	;volatile
  3065  00116A  0D04               	mullw	4
  3066  00116C  0103               	movlb	3	; () banked
  3067  00116E  5196               	movf	main@i& (0+255),w,b
  3068  001170  0101               	movlb	1	; () banked
  3069  001172  6F88               	movwf	??_main& (0+255),b
  3070  001174  6B89               	clrf	(??_main+1)& (0+255),b
  3071  001176  50F3               	movf	prodl,w,c
  3072  001178  5D88               	subwf	??_main& (0+255),w,b
  3073  00117A  5189               	movf	(??_main+1)& (0+255),w,b
  3074  00117C  0A80               	xorlw	128
  3075  00117E  6F8A               	movwf	(??_main+2)& (0+255),b
  3076  001180  50F4               	movf	prodh,w,c
  3077  001182  0A80               	xorlw	128
  3078  001184  598A               	subwfb	(??_main+2)& (0+255),w,b
  3079  001186  B0D8               	btfsc	status,0,c
  3080  001188  D016               	goto	l626
  3081                           
  3082                           ; BSR set to: 1
  3083                           ;main.c: 169: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3084  00118A  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3085  00118E  EE00  F060         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3086  001192  0E3D               	movlw	61
  3087  001194                     u11181:
  3088  001194  CFDB FFEB          	movff	plusw2,plusw0
  3089  001198  06E8               	decf	wreg,f,c
  3090  00119A  E2FC               	bc	u11181
  3091  00119C  0103               	movlb	3	; () banked
  3092  00119E  5196               	movf	main@i& (0+255),w,b
  3093  0011A0  0D01               	mullw	1
  3094  0011A2  0E74               	movlw	low main@headerBuf
  3095  0011A4  24F3               	addwf	prodl,w,c
  3096  0011A6  6ED9               	movwf	fsr2l,c
  3097  0011A8  0E03               	movlw	high main@headerBuf
  3098  0011AA  20F4               	addwfc	prodh,w,c
  3099  0011AC  6EDA               	movwf	fsr2h,c
  3100  0011AE  50DF               	movf	indf2,w,c
  3101  0011B0  ECA9  F020         	call	_ipv4_streamToTransmissionBuffer
  3102                           
  3103                           ;main.c: 170: } else
  3104  0011B4  D00C               	goto	l627
  3105  0011B6                     l626:
  3106                           
  3107                           ;main.c: 171: ipv4_streamToTransmissionBuffer(1, stack.pendingPacketToSend);
  3108  0011B6  EE22  F07B         	lfsr	2,_stack+51	;volatile
  3109  0011BA  EE00  F060         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3110  0011BE  0E3D               	movlw	61
  3111  0011C0                     u11191:
  3112  0011C0  CFDB FFEB          	movff	plusw2,plusw0
  3113  0011C4  06E8               	decf	wreg,f,c
  3114  0011C6  E2FC               	bc	u11191
  3115  0011C8  0E01               	movlw	1
  3116  0011CA  ECA9  F020         	call	_ipv4_streamToTransmissionBuffer
  3117  0011CE                     l627:
  3118  0011CE  0103               	movlb	3	; () banked
  3119  0011D0  2B96               	incf	main@i& (0+255),f,b
  3120  0011D2                     l624:
  3121                           
  3122                           ; BSR set to: 3
  3123                           
  3124                           ; BSR set to: 3
  3125  0011D2  5196               	movf	main@i& (0+255),w,b
  3126  0011D4  0101               	movlb	1	; () banked
  3127  0011D6  6F88               	movwf	??_main& (0+255),b
  3128  0011D8  6B89               	clrf	(??_main+1)& (0+255),b
  3129  0011DA  0102               	movlb	2	; () banked
  3130  0011DC  517F               	movf	(_stack+55)& (0+255),w,b	;volatile
  3131  0011DE  0101               	movlb	1	; () banked
  3132  0011E0  5D88               	subwf	??_main& (0+255),w,b
  3133  0011E2  0102               	movlb	2	; () banked
  3134  0011E4  5180               	movf	(_stack+56)& (0+255),w,b	;volatile
  3135  0011E6  0101               	movlb	1	; () banked
  3136  0011E8  5989               	subwfb	(??_main+1)& (0+255),w,b
  3137  0011EA  A0D8               	btfss	status,0,c
  3138  0011EC  D7BC               	goto	l625
  3139                           
  3140                           ; BSR set to: 1
  3141                           ;main.c: 172: }
  3142                           ;main.c: 174: stack.background.fPacketPending = 1;
  3143  0011EE  0102               	movlb	2	; () banked
  3144  0011F0  815C               	bsf	(_stack+20)& (0+255),0,b	;volatile
  3145                           
  3146                           ; BSR set to: 2
  3147                           
  3148                           ; BSR set to: 2
  3149                           
  3150                           ; BSR set to: 2
  3151  0011F2  D748               	goto	l617
  3152  0011F4                     __end_of_main:
  3153                           	opt stack 0
  3154                           tblptru	equ	0xFF8
  3155                           tblptrh	equ	0xFF7
  3156                           tblptrl	equ	0xFF6
  3157                           tablat	equ	0xFF5
  3158                           prodh	equ	0xFF4
  3159                           prodl	equ	0xFF3
  3160                           intcon	equ	0xFF2
  3161                           intcon3	equ	0xFF0
  3162                           postinc0	equ	0xFEE
  3163                           plusw0	equ	0xFEB
  3164                           fsr0h	equ	0xFEA
  3165                           fsr0l	equ	0xFE9
  3166                           wreg	equ	0xFE8
  3167                           postdec1	equ	0xFE5
  3168                           fsr1l	equ	0xFE1
  3169                           indf2	equ	0xFDF
  3170                           plusw2	equ	0xFDB
  3171                           fsr2h	equ	0xFDA
  3172                           fsr2l	equ	0xFD9
  3173                           status	equ	0xFD8
  3174                           
  3175 ;; *************** function _sevenSegmentInit *****************
  3176 ;; Defined at:
  3177 ;;		line 28 in file "src/system/sevenseg.c"
  3178 ;; Parameters:    Size  Location     Type
  3179 ;;		None
  3180 ;; Auto vars:     Size  Location     Type
  3181 ;;		None
  3182 ;; Return value:  Size  Location     Type
  3183 ;;                  1    wreg      void 
  3184 ;; Registers used:
  3185 ;;		wreg, status,2, status,0
  3186 ;; Tracked objects:
  3187 ;;		On entry : 0/0
  3188 ;;		On exit  : 0/0
  3189 ;;		Unchanged: 0/0
  3190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3191 ;;      Params:         0       0       0       0       0       0       0       0       0
  3192 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3193 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3194 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3195 ;;Total ram usage:        0 bytes
  3196 ;; Hardware stack levels used:    1
  3197 ;; Hardware stack levels required when called:    4
  3198 ;; This function calls:
  3199 ;;		Nothing
  3200 ;; This function is called by:
  3201 ;;		_main
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           	psect	text1
  3206  00463C                     __ptext1:
  3207                           	opt stack 0
  3208  00463C                     _sevenSegmentInit:
  3209                           	opt stack 26
  3210                           
  3211                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3212                           
  3213                           ; BSR set to: 2
  3214                           ;incstack = 0
  3215  00463C  0EF8               	movlw	248
  3216  00463E  1682               	andwf	3970,f,c	;volatile
  3217                           
  3218                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3219  004640  0EF8               	movlw	248
  3220  004642  1694               	andwf	3988,f,c	;volatile
  3221                           
  3222                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3223  004644  0E00               	movlw	0
  3224  004646  6E92               	movwf	3986,c	;volatile
  3225                           
  3226                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3227  004648  0E00               	movlw	0
  3228  00464A  010F               	movlb	15	; () banked
  3229  00464C  6F5B               	movwf	91,b	;volatile
  3230                           
  3231                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3232  00464E  0EF8               	movlw	248
  3233  004650  175D               	andwf	93,f,b	;volatile
  3234                           
  3235                           ; BSR set to: 15
  3236                           ;sevenseg.c: 38: PORTA = 0xff;
  3237  004652  6880               	setf	3968,c	;volatile
  3238                           
  3239                           ; BSR set to: 15
  3240  004654  0012               	return		;funcret
  3241  004656                     __end_of_sevenSegmentInit:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           intcon3	equ	0xFF0
  3251                           postinc0	equ	0xFEE
  3252                           plusw0	equ	0xFEB
  3253                           fsr0h	equ	0xFEA
  3254                           fsr0l	equ	0xFE9
  3255                           wreg	equ	0xFE8
  3256                           postdec1	equ	0xFE5
  3257                           fsr1l	equ	0xFE1
  3258                           indf2	equ	0xFDF
  3259                           plusw2	equ	0xFDB
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _printEthernetState *****************
  3265 ;; Defined at:
  3266 ;;		line 180 in file "src/system/main.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;                  1    wreg      void 
  3273 ;; Registers used:
  3274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3280 ;;      Params:         0      15       0       0       0       0       0       0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3283 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3284 ;;Total ram usage:       15 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    5
  3287 ;; This function calls:
  3288 ;;		_UARTTransmitText
  3289 ;; This function is called by:
  3290 ;;		_main
  3291 ;; This function uses a non-reentrant model
  3292 ;;
  3293                           
  3294                           	psect	text2
  3295  00340E                     __ptext2:
  3296                           	opt stack 0
  3297  00340E                     _printEthernetState:
  3298                           	opt stack 25
  3299                           
  3300                           ;main.c: 181: static ethernetConnection_t oldState;
  3301                           ;main.c: 182: if (state.link != oldState.link) {
  3302                           
  3303                           ; BSR set to: 15
  3304                           ;incstack = 0
  3305  00340E  0101               	movlb	1	; () banked
  3306  003410  518B               	movf	printEthernetState@oldState& (0+255),w,b
  3307  003412  0100               	movlb	0	; () banked
  3308  003414  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3309  003416  B4D8               	btfsc	status,2,c
  3310  003418  D041               	goto	l646
  3311                           
  3312                           ; BSR set to: 0
  3313                           ;main.c: 183: if (state.link == NO_LINK) {
  3314  00341A  519A               	movf	printEthernetState@state& (0+255),w,b
  3315  00341C  A4D8               	btfss	status,2,c
  3316  00341E  D007               	goto	l637
  3317                           
  3318                           ; BSR set to: 0
  3319                           ;main.c: 184: UARTTransmitText("Link lost.\n\r");
  3320  003420  0E66               	movlw	low STR_35
  3321  003422  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3322  003424  0E7F               	movlw	high STR_35
  3323  003426  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3324  003428  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3325                           
  3326                           ;main.c: 185: } else if (state.link == LINK_ESTABLISHED) {
  3327  00342C  D00A               	goto	l639
  3328  00342E                     l637:
  3329  00342E  0100               	movlb	0	; () banked
  3330  003430  059A               	decf	printEthernetState@state& (0+255),w,b
  3331  003432  A4D8               	btfss	status,2,c
  3332  003434  D006               	goto	l639
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;main.c: 186: UARTTransmitText("Link established. ");
  3336  003436  0E9F               	movlw	low STR_36
  3337  003438  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3338  00343A  0E7E               	movlw	high STR_36
  3339  00343C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3340  00343E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3341  003442                     l639:
  3342                           
  3343                           ;main.c: 187: }
  3344                           ;main.c: 189: if (state.link == LINK_ESTABLISHED) {
  3345  003442  0100               	movlb	0	; () banked
  3346  003444  059A               	decf	printEthernetState@state& (0+255),w,b
  3347  003446  A4D8               	btfss	status,2,c
  3348  003448  D029               	goto	l646
  3349                           
  3350                           ; BSR set to: 0
  3351                           ;main.c: 190: if (state.speed == TEN_MBIT) {
  3352  00344A  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3353  00344C  A4D8               	btfss	status,2,c
  3354  00344E  D007               	goto	l641
  3355                           
  3356                           ; BSR set to: 0
  3357                           ;main.c: 191: UARTTransmitText("Speed is 10 Mbps, ");
  3358  003450  0E8C               	movlw	low STR_37
  3359  003452  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3360  003454  0E7E               	movlw	high STR_37
  3361  003456  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3362  003458  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3363                           
  3364                           ;main.c: 192: } else if (state.speed == HUNDRED_MBIT) {
  3365  00345C  D00A               	goto	l643
  3366  00345E                     l641:
  3367  00345E  0100               	movlb	0	; () banked
  3368  003460  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3369  003462  A4D8               	btfss	status,2,c
  3370  003464  D006               	goto	l643
  3371                           
  3372                           ; BSR set to: 0
  3373                           ;main.c: 193: UARTTransmitText("Speed is 100 Mbps, ");
  3374  003466  0E78               	movlw	low STR_38
  3375  003468  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3376  00346A  0E7E               	movlw	high STR_38
  3377  00346C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3378  00346E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3379  003472                     l643:
  3380                           
  3381                           ;main.c: 194: }
  3382                           ;main.c: 195: if (state.duplex == HALF_DUPLEX) {
  3383  003472  0100               	movlb	0	; () banked
  3384  003474  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3385  003476  A4D8               	btfss	status,2,c
  3386  003478  D007               	goto	l644
  3387                           
  3388                           ; BSR set to: 0
  3389                           ;main.c: 196: UARTTransmitText("connection is Half Duplex.\n\r");
  3390  00347A  0EA8               	movlw	low STR_39
  3391  00347C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3392  00347E  0E7D               	movlw	high STR_39
  3393  003480  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3394  003482  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3395                           
  3396                           ;main.c: 197: } else if (state.duplex == FULL_DUPLEX) {
  3397  003486  D00A               	goto	l646
  3398  003488                     l644:
  3399  003488  0100               	movlb	0	; () banked
  3400  00348A  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3401  00348C  A4D8               	btfss	status,2,c
  3402  00348E  D006               	goto	l646
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;main.c: 199: UARTTransmitText("connection is Full Duplex.\n\r");
  3406  003490  0EC5               	movlw	low STR_40
  3407  003492  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3408  003494  0E7D               	movlw	high STR_40
  3409  003496  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3410  003498  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3411  00349C                     l646:
  3412                           
  3413                           ;main.c: 200: }
  3414                           ;main.c: 201: }
  3415                           ;main.c: 202: }
  3416                           ;main.c: 203: oldState = state;
  3417  00349C  EE20  F09A         	lfsr	2,printEthernetState@state
  3418  0034A0  EE11  F08B         	lfsr	1,printEthernetState@oldState
  3419  0034A4  0E0E               	movlw	14
  3420  0034A6                     u10981:
  3421  0034A6  CFDB FFE3          	movff	plusw2,plusw1
  3422  0034AA  06E8               	decf	wreg,f,c
  3423  0034AC  E2FC               	bc	u10981
  3424  0034AE  0012               	return		;funcret
  3425  0034B0                     __end_of_printEthernetState:
  3426                           	opt stack 0
  3427                           tblptru	equ	0xFF8
  3428                           tblptrh	equ	0xFF7
  3429                           tblptrl	equ	0xFF6
  3430                           tablat	equ	0xFF5
  3431                           prodh	equ	0xFF4
  3432                           prodl	equ	0xFF3
  3433                           intcon	equ	0xFF2
  3434                           intcon3	equ	0xFF0
  3435                           postinc0	equ	0xFEE
  3436                           plusw0	equ	0xFEB
  3437                           fsr0h	equ	0xFEA
  3438                           fsr0l	equ	0xFE9
  3439                           wreg	equ	0xFE8
  3440                           postdec1	equ	0xFE5
  3441                           plusw1	equ	0xFE3
  3442                           fsr1l	equ	0xFE1
  3443                           indf2	equ	0xFDF
  3444                           plusw2	equ	0xFDB
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function _printErrorMessage *****************
  3450 ;; Defined at:
  3451 ;;		line 206 in file "src/system/main.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  err             3   58[BANK0 ] struct error
  3454 ;; Auto vars:     Size  Location     Type
  3455 ;;		None
  3456 ;; Return value:  Size  Location     Type
  3457 ;;                  1    wreg      void 
  3458 ;; Registers used:
  3459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3460 ;; Tracked objects:
  3461 ;;		On entry : 0/0
  3462 ;;		On exit  : 0/0
  3463 ;;		Unchanged: 0/0
  3464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3465 ;;      Params:         0       3       0       0       0       0       0       0       0
  3466 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3467 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3468 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3469 ;;Total ram usage:        5 bytes
  3470 ;; Hardware stack levels used:    1
  3471 ;; Hardware stack levels required when called:    6
  3472 ;; This function calls:
  3473 ;;		_UARTTransmitText
  3474 ;;		_intToString
  3475 ;; This function is called by:
  3476 ;;		_main
  3477 ;; This function uses a non-reentrant model
  3478 ;;
  3479                           
  3480                           	psect	text3
  3481  002C42                     __ptext3:
  3482                           	opt stack 0
  3483  002C42                     _printErrorMessage:
  3484                           	opt stack 24
  3485                           
  3486                           ;main.c: 207: UARTTransmitText("[ERROR]");
  3487                           
  3488                           ;incstack = 0
  3489  002C42  0EC5               	movlw	low STR_41
  3490  002C44  0100               	movlb	0	; () banked
  3491  002C46  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3492  002C48  0E7F               	movlw	high STR_41
  3493  002C4A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3494  002C4C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3495                           
  3496                           ;main.c: 208: switch (err.module) {
  3497  002C50  D028               	goto	l650
  3498  002C52                     
  3499                           ;main.c: 210: UARTTransmitText(" MEMORY MODULE: ");
  3500  002C52  0EE8               	movlw	low STR_42
  3501  002C54  0100               	movlb	0	; () banked
  3502  002C56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3503  002C58  0E7E               	movlw	high STR_42
  3504  002C5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3505  002C5C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3506                           
  3507                           ;main.c: 211: break;
  3508  002C60  D049               	goto	l658
  3509  002C62                     
  3510                           ;main.c: 213: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3511  002C62  0E6C               	movlw	low STR_43
  3512  002C64  0100               	movlb	0	; () banked
  3513  002C66  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3514  002C68  0E7D               	movlw	high STR_43
  3515  002C6A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3516  002C6C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3517                           
  3518                           ;main.c: 214: break;
  3519  002C70  D041               	goto	l658
  3520  002C72                     
  3521                           ;main.c: 216: UARTTransmitText(" ETHERNET MODULE: ");
  3522  002C72  0EB2               	movlw	low STR_44
  3523  002C74  0100               	movlb	0	; () banked
  3524  002C76  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3525  002C78  0E7E               	movlw	high STR_44
  3526  002C7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3527  002C7C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3528                           
  3529                           ;main.c: 217: break;
  3530  002C80  D039               	goto	l658
  3531  002C82                     
  3532                           ;main.c: 219: UARTTransmitText(" ARP MODULE: ");
  3533  002C82  0E58               	movlw	low STR_45
  3534  002C84  0100               	movlb	0	; () banked
  3535  002C86  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3536  002C88  0E7F               	movlw	high STR_45
  3537  002C8A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3538  002C8C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3539                           
  3540                           ;main.c: 220: break;
  3541  002C90  D031               	goto	l658
  3542  002C92                     
  3543                           ;main.c: 222: UARTTransmitText(" IPv4 MODULE: ");
  3544  002C92  0E49               	movlw	low STR_46
  3545  002C94  0100               	movlb	0	; () banked
  3546  002C96  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3547  002C98  0E7F               	movlw	high STR_46
  3548  002C9A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3549  002C9C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3550                           
  3551                           ;main.c: 225: }
  3552                           
  3553                           ;main.c: 224: break;
  3554                           
  3555                           ;main.c: 223: default:
  3556  002CA0  D029               	goto	l658
  3557  002CA2                     l650:
  3558  002CA2  0100               	movlb	0	; () banked
  3559  002CA4  519A               	movf	printErrorMessage@err& (0+255),w,b
  3560                           
  3561                           ; Switch size 1, requested type "space"
  3562                           ; Number of cases is 5, Range of values is 0 to 4
  3563                           ; switch strategies available:
  3564                           ; Name         Instructions Cycles
  3565                           ; simple_byte           16     9 (average)
  3566                           ;	Chosen strategy is simple_byte
  3567  002CA6  0A00               	xorlw	0	; case 0
  3568  002CA8  B4D8               	btfsc	status,2,c
  3569  002CAA  D7D3               	goto	l651
  3570  002CAC  0A01               	xorlw	1	; case 1
  3571  002CAE  B4D8               	btfsc	status,2,c
  3572  002CB0  D7D8               	goto	l653
  3573  002CB2  0A03               	xorlw	3	; case 2
  3574  002CB4  B4D8               	btfsc	status,2,c
  3575  002CB6  D7DD               	goto	l654
  3576  002CB8  0A01               	xorlw	1	; case 3
  3577  002CBA  B4D8               	btfsc	status,2,c
  3578  002CBC  D7E2               	goto	l655
  3579  002CBE  0A07               	xorlw	7	; case 4
  3580  002CC0  B4D8               	btfsc	status,2,c
  3581  002CC2  D7E7               	goto	l656
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;main.c: 226: switch (err.code) {
  3585  002CC4  D017               	goto	l658
  3586  002CC6                     
  3587                           ; BSR set to: 0
  3588                           ;main.c: 228: UARTTransmitText("Ethernet controller is unresponsive.");
  3589                           
  3590                           ; BSR set to: 0
  3591  002CC6  0E47               	movlw	low STR_47
  3592  002CC8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3593  002CCA  0E7D               	movlw	high STR_47
  3594  002CCC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3595  002CCE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3596                           
  3597                           ;main.c: 229: break;
  3598  002CD2  D024               	goto	l660
  3599  002CD4                     
  3600                           ;main.c: 231: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3601  002CD4  0E90               	movlw	low STR_48
  3602  002CD6  0100               	movlb	0	; () banked
  3603  002CD8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3604  002CDA  0E7C               	movlw	high STR_48
  3605  002CDC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3606  002CDE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3607                           
  3608                           ;main.c: 232: break;
  3609  002CE2  D01C               	goto	l660
  3610  002CE4                     
  3611                           ;main.c: 235: UARTTransmitText("An unknown error has occured.");
  3612                           
  3613                           ;main.c: 234: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  3614  002CE4  0E8A               	movlw	low STR_49
  3615  002CE6  0100               	movlb	0	; () banked
  3616  002CE8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3617  002CEA  0E7D               	movlw	high STR_49
  3618  002CEC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3619  002CEE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3620                           
  3621                           ;main.c: 237: }
  3622                           
  3623                           ;main.c: 236: break;
  3624  002CF2  D014               	goto	l660
  3625  002CF4                     l658:
  3626  002CF4  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  3627  002CF8  CFDE F09D          	movff	postinc2,??_printErrorMessage
  3628  002CFC  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  3629                           
  3630                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3631                           ; Switch size 1, requested type "space"
  3632                           ; Number of cases is 1, Range of values is 1 to 1
  3633                           ; switch strategies available:
  3634                           ; Name         Instructions Cycles
  3635                           ; simple_byte            4     3 (average)
  3636                           ;	Chosen strategy is simple_byte
  3637  002D00  0100               	movlb	0	; () banked
  3638  002D02  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  3639  002D04  0A01               	xorlw	1	; case 1
  3640  002D06  A4D8               	btfss	status,2,c
  3641  002D08  D7ED               	goto	l662
  3642                           
  3643                           ; BSR set to: 0
  3644                           ; Switch size 1, requested type "space"
  3645                           ; Number of cases is 3, Range of values is 45 to 143
  3646                           ; switch strategies available:
  3647                           ; Name         Instructions Cycles
  3648                           ; simple_byte           10     6 (average)
  3649                           ;	Chosen strategy is simple_byte
  3650  002D0A  519D               	movf	??_printErrorMessage& (0+255),w,b
  3651  002D0C  0A2D               	xorlw	45	; case 45
  3652  002D0E  B4D8               	btfsc	status,2,c
  3653  002D10  D7E1               	goto	l661
  3654  002D12  0A03               	xorlw	3	; case 46
  3655  002D14  B4D8               	btfsc	status,2,c
  3656  002D16  D7D7               	goto	l659
  3657  002D18  0AA1               	xorlw	161	; case 143
  3658  002D1A  D7E4               	goto	l662
  3659  002D1C                     l660:
  3660                           
  3661                           ;main.c: 239: UARTTransmitText(" (Code: ");
  3662                           
  3663                           ; BSR set to: 0
  3664  002D1C  0EAB               	movlw	low STR_50
  3665  002D1E  0100               	movlb	0	; () banked
  3666  002D20  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3667  002D22  0E7F               	movlw	high STR_50
  3668  002D24  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3669  002D26  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3670                           
  3671                           ;main.c: 240: UARTTransmitText(intToString(err.code));
  3672  002D2A  C09B  F073         	movff	printErrorMessage@err+1,intToString@val
  3673  002D2E  C09C  F074         	movff	printErrorMessage@err+2,intToString@val+1
  3674  002D32  0100               	movlb	0	; () banked
  3675  002D34  6B75               	clrf	(intToString@val+2)& (0+255),b
  3676  002D36  6B76               	clrf	(intToString@val+3)& (0+255),b
  3677  002D38  EC42  F00C         	call	_intToString	;wreg free
  3678  002D3C  C073  F098         	movff	?_intToString,UARTTransmitText@str
  3679  002D40  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3680  002D44  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3681                           
  3682                           ;main.c: 241: UARTTransmitText(").\n\r");
  3683  002D48  0EE4               	movlw	low STR_51
  3684  002D4A  0100               	movlb	0	; () banked
  3685  002D4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3686  002D4E  0E7F               	movlw	high STR_51
  3687  002D50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3688  002D52  EC31  F01F         	call	_UARTTransmitText	;wreg free
  3689  002D56  0012               	return		;funcret
  3690  002D58                     __end_of_printErrorMessage:
  3691                           	opt stack 0
  3692                           tblptru	equ	0xFF8
  3693                           tblptrh	equ	0xFF7
  3694                           tblptrl	equ	0xFF6
  3695                           tablat	equ	0xFF5
  3696                           prodh	equ	0xFF4
  3697                           prodl	equ	0xFF3
  3698                           intcon	equ	0xFF2
  3699                           intcon3	equ	0xFF0
  3700                           postinc0	equ	0xFEE
  3701                           plusw0	equ	0xFEB
  3702                           fsr0h	equ	0xFEA
  3703                           fsr0l	equ	0xFE9
  3704                           wreg	equ	0xFE8
  3705                           postdec1	equ	0xFE5
  3706                           plusw1	equ	0xFE3
  3707                           fsr1l	equ	0xFE1
  3708                           indf2	equ	0xFDF
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           plusw2	equ	0xFDB
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  3717 ;; Defined at:
  3718 ;;		line 126 in file "src/stack/protocols/ipv4.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  header         23    0[BANK0 ] struct ipv4_header
  3721 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  3722 ;;		 -> main@headerBuf(32), 
  3723 ;; Auto vars:     Size  Location     Type
  3724 ;;		None
  3725 ;; Return value:  Size  Location     Type
  3726 ;;                  1    wreg      void 
  3727 ;; Registers used:
  3728 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3729 ;; Tracked objects:
  3730 ;;		On entry : 0/0
  3731 ;;		On exit  : 0/0
  3732 ;;		Unchanged: 0/0
  3733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3734 ;;      Params:         0      25       0       0       0       0       0       0       0
  3735 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3736 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3737 ;;      Totals:         0      27       0       0       0       0       0       0       0
  3738 ;;Total ram usage:       27 bytes
  3739 ;; Hardware stack levels used:    1
  3740 ;; Hardware stack levels required when called:    4
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_main
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text4
  3749  0024F0                     __ptext4:
  3750                           	opt stack 0
  3751  0024F0                     _ipv4_writeHeaderIntoBuffer:
  3752                           	opt stack 26
  3753                           
  3754                           ;ipv4.c: 127: *ptr = (header.version << 4) | (header.headerLength);
  3755                           
  3756                           ;incstack = 0
  3757  0024F0  0100               	movlb	0	; () banked
  3758  0024F2  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  3759  0024F4  0BF0               	andlw	240
  3760  0024F6  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  3761  0024F8  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  3762  0024FC  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  3763  002500  6EDF               	movwf	indf2,c
  3764                           
  3765                           ;ipv4.c: 128: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  3766  002502  EE20 F001          	lfsr	2,1
  3767  002506  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3768  002508  26D9               	addwf	fsr2l,f,c
  3769  00250A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3770  00250C  22DA               	addwfc	fsr2h,f,c
  3771  00250E  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  3772  002512  0E03               	movlw	3
  3773  002514  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3774  002516  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  3775  002518  46E8               	rlncf	wreg,f,c
  3776  00251A  0BFC               	andlw	252
  3777  00251C  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3778  00251E  6EDF               	movwf	indf2,c
  3779                           
  3780                           ;ipv4.c: 129: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  3781  002520  EE20 F002          	lfsr	2,2
  3782  002524  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3783  002526  26D9               	addwf	fsr2l,f,c
  3784  002528  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3785  00252A  22DA               	addwfc	fsr2h,f,c
  3786  00252C  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  3787  00252E  6EDF               	movwf	indf2,c
  3788                           
  3789                           ;ipv4.c: 130: *(ptr + 3) = header.totalLength & 0x00ff;
  3790  002530  EE20 F003          	lfsr	2,3
  3791  002534  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3792  002536  26D9               	addwf	fsr2l,f,c
  3793  002538  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3794  00253A  22DA               	addwfc	fsr2h,f,c
  3795  00253C  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  3796                           
  3797                           ;ipv4.c: 131: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  3798  002540  EE20 F004          	lfsr	2,4
  3799  002544  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3800  002546  26D9               	addwf	fsr2l,f,c
  3801  002548  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3802  00254A  22DA               	addwfc	fsr2h,f,c
  3803  00254C  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  3804  00254E  6EDF               	movwf	indf2,c
  3805                           
  3806                           ;ipv4.c: 132: *(ptr + 5) = header.identification & 0x00ff;
  3807  002550  EE20 F005          	lfsr	2,5
  3808  002554  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3809  002556  26D9               	addwf	fsr2l,f,c
  3810  002558  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3811  00255A  22DA               	addwfc	fsr2h,f,c
  3812  00255C  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;ipv4.c: 133: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  3816  002560  EE20 F006          	lfsr	2,6
  3817  002564  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3818  002566  26D9               	addwf	fsr2l,f,c
  3819  002568  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3820  00256A  22DA               	addwfc	fsr2h,f,c
  3821  00256C  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  3822  002570  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  3823  002574  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  3824  002578  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  3825  00257C  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  3826  00257E  0E1F               	movlw	31
  3827  002580  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3828  002582  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  3829  002584  46E8               	rlncf	wreg,f,c
  3830  002586  0BE0               	andlw	224
  3831  002588  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3832  00258A  6EDF               	movwf	indf2,c
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;ipv4.c: 134: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  3836  00258C  EE20 F007          	lfsr	2,7
  3837  002590  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3838  002592  26D9               	addwf	fsr2l,f,c
  3839  002594  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3840  002596  22DA               	addwfc	fsr2h,f,c
  3841  002598  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  3842                           
  3843                           ; BSR set to: 0
  3844                           ;ipv4.c: 135: *(ptr + 8) = (header.timeToLive);
  3845  00259C  EE20 F008          	lfsr	2,8
  3846  0025A0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3847  0025A2  26D9               	addwf	fsr2l,f,c
  3848  0025A4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3849  0025A6  22DA               	addwfc	fsr2h,f,c
  3850  0025A8  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;ipv4.c: 136: *(ptr + 9) = (header.protocol);
  3854  0025AC  EE20 F009          	lfsr	2,9
  3855  0025B0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3856  0025B2  26D9               	addwf	fsr2l,f,c
  3857  0025B4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3858  0025B6  22DA               	addwfc	fsr2h,f,c
  3859  0025B8  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  3860                           
  3861                           ; BSR set to: 0
  3862                           ;ipv4.c: 137: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  3863  0025BC  EE20 F00A          	lfsr	2,10
  3864  0025C0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3865  0025C2  26D9               	addwf	fsr2l,f,c
  3866  0025C4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3867  0025C6  22DA               	addwfc	fsr2h,f,c
  3868  0025C8  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  3869  0025CA  6EDF               	movwf	indf2,c
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;ipv4.c: 138: *(ptr + 11) = (header.checksum & 0x00ff);
  3873  0025CC  EE20 F00B          	lfsr	2,11
  3874  0025D0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3875  0025D2  26D9               	addwf	fsr2l,f,c
  3876  0025D4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3877  0025D6  22DA               	addwfc	fsr2h,f,c
  3878  0025D8  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  3879                           
  3880                           ; BSR set to: 0
  3881                           ;ipv4.c: 139: *(ptr + 12) = (header.source.address[0]);
  3882  0025DC  EE20 F00C          	lfsr	2,12
  3883  0025E0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3884  0025E2  26D9               	addwf	fsr2l,f,c
  3885  0025E4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3886  0025E6  22DA               	addwfc	fsr2h,f,c
  3887  0025E8  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  3888                           
  3889                           ; BSR set to: 0
  3890                           ;ipv4.c: 140: *(ptr + 13) = (header.source.address[1]);
  3891  0025EC  EE20 F00D          	lfsr	2,13
  3892  0025F0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3893  0025F2  26D9               	addwf	fsr2l,f,c
  3894  0025F4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3895  0025F6  22DA               	addwfc	fsr2h,f,c
  3896  0025F8  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;ipv4.c: 141: *(ptr + 14) = (header.source.address[2]);
  3900  0025FC  EE20 F00E          	lfsr	2,14
  3901  002600  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3902  002602  26D9               	addwf	fsr2l,f,c
  3903  002604  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3904  002606  22DA               	addwfc	fsr2h,f,c
  3905  002608  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  3906                           
  3907                           ; BSR set to: 0
  3908                           ;ipv4.c: 142: *(ptr + 15) = (header.source.address[3]);
  3909  00260C  EE20 F00F          	lfsr	2,15
  3910  002610  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3911  002612  26D9               	addwf	fsr2l,f,c
  3912  002614  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3913  002616  22DA               	addwfc	fsr2h,f,c
  3914  002618  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;ipv4.c: 143: *(ptr + 16) = (header.destination.address[0]);
  3918  00261C  EE20 F010          	lfsr	2,16
  3919  002620  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3920  002622  26D9               	addwf	fsr2l,f,c
  3921  002624  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3922  002626  22DA               	addwfc	fsr2h,f,c
  3923  002628  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;ipv4.c: 144: *(ptr + 17) = (header.destination.address[1]);
  3927  00262C  EE20 F011          	lfsr	2,17
  3928  002630  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3929  002632  26D9               	addwf	fsr2l,f,c
  3930  002634  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3931  002636  22DA               	addwfc	fsr2h,f,c
  3932  002638  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  3933                           
  3934                           ; BSR set to: 0
  3935                           ;ipv4.c: 145: *(ptr + 18) = (header.destination.address[2]);
  3936  00263C  EE20 F012          	lfsr	2,18
  3937  002640  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3938  002642  26D9               	addwf	fsr2l,f,c
  3939  002644  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3940  002646  22DA               	addwfc	fsr2h,f,c
  3941  002648  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  3942                           
  3943                           ; BSR set to: 0
  3944                           ;ipv4.c: 146: *(ptr + 19) = (header.destination.address[3]);
  3945  00264C  EE20 F013          	lfsr	2,19
  3946  002650  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3947  002652  26D9               	addwf	fsr2l,f,c
  3948  002654  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3949  002656  22DA               	addwfc	fsr2h,f,c
  3950  002658  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  3951                           
  3952                           ; BSR set to: 0
  3953  00265C  0012               	return		;funcret
  3954  00265E                     __end_of_ipv4_writeHeaderIntoBuffer:
  3955                           	opt stack 0
  3956                           tblptru	equ	0xFF8
  3957                           tblptrh	equ	0xFF7
  3958                           tblptrl	equ	0xFF6
  3959                           tablat	equ	0xFF5
  3960                           prodh	equ	0xFF4
  3961                           prodl	equ	0xFF3
  3962                           intcon	equ	0xFF2
  3963                           intcon3	equ	0xFF0
  3964                           postinc0	equ	0xFEE
  3965                           plusw0	equ	0xFEB
  3966                           fsr0h	equ	0xFEA
  3967                           fsr0l	equ	0xFE9
  3968                           wreg	equ	0xFE8
  3969                           postinc1	equ	0xFE6
  3970                           postdec1	equ	0xFE5
  3971                           plusw1	equ	0xFE3
  3972                           fsr1l	equ	0xFE1
  3973                           indf2	equ	0xFDF
  3974                           postinc2	equ	0xFDE
  3975                           postdec2	equ	0xFDD
  3976                           plusw2	equ	0xFDB
  3977                           fsr2h	equ	0xFDA
  3978                           fsr2l	equ	0xFD9
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _ipv4_txFrameRequest *****************
  3982 ;; Defined at:
  3983 ;;		line 29 in file "src/stack/protocols/ipv4.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  3986 ;;		 -> stack(113), 
  3987 ;; Auto vars:     Size  Location     Type
  3988 ;;		None
  3989 ;; Return value:  Size  Location     Type
  3990 ;;                  1    wreg      void 
  3991 ;; Registers used:
  3992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3993 ;; Tracked objects:
  3994 ;;		On entry : 0/0
  3995 ;;		On exit  : 0/0
  3996 ;;		Unchanged: 0/0
  3997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3998 ;;      Params:         0       2       0       0       0       0       0       0       0
  3999 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4000 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4001 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4002 ;;Total ram usage:        6 bytes
  4003 ;; Hardware stack levels used:    1
  4004 ;; Hardware stack levels required when called:    9
  4005 ;; This function calls:
  4006 ;;		_ethernet_txFrameRequest
  4007 ;; This function is called by:
  4008 ;;		_main
  4009 ;; This function uses a non-reentrant model
  4010 ;;
  4011                           
  4012                           	psect	text5
  4013  00279C                     __ptext5:
  4014                           	opt stack 0
  4015  00279C                     _ipv4_txFrameRequest:
  4016                           	opt stack 21
  4017                           
  4018                           ;ipv4.c: 30: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;incstack = 0
  4022  00279C  0100               	movlb	0	; () banked
  4023  00279E  EE20 F004          	lfsr	2,4
  4024  0027A2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4025  0027A4  26D9               	addwf	fsr2l,f,c
  4026  0027A6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4027  0027A8  22DA               	addwfc	fsr2h,f,c
  4028  0027AA  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4029  0027AE  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4030  0027B2  0E08               	movlw	8
  4031  0027B4  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4032  0027B6  0E00               	movlw	0
  4033  0027B8  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4034  0027BA  EE20 F020          	lfsr	2,32
  4035  0027BE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4036  0027C0  26D9               	addwf	fsr2l,f,c
  4037  0027C2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4038  0027C4  22DA               	addwfc	fsr2h,f,c
  4039  0027C6  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4040  0027CA  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4041                           
  4042                           ;ipv4.c: 31: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  4043  0027CE  EE20 F02E          	lfsr	2,46
  4044  0027D2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4045  0027D4  26D9               	addwf	fsr2l,f,c
  4046  0027D6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4047  0027D8  22DA               	addwfc	fsr2h,f,c
  4048  0027DA  0E00               	movlw	0
  4049  0027DC  6EDE               	movwf	postinc2,c
  4050  0027DE  0E08               	movlw	8
  4051  0027E0  6EDD               	movwf	postdec2,c
  4052                           
  4053                           ; BSR set to: 0
  4054                           ;ipv4.c: 32: ethernet_txFrameRequest(&packet->ethernet);
  4055  0027E2  0E20               	movlw	32
  4056  0027E4  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  4057  0027E6  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  4058  0027E8  0E00               	movlw	0
  4059  0027EA  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4060  0027EC  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  4061  0027EE  EC2B  F018         	call	_ethernet_txFrameRequest	;wreg free
  4062                           
  4063                           ;ipv4.c: 34: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  4064  0027F2  0100               	movlb	0	; () banked
  4065  0027F4  EE20 F036          	lfsr	2,54
  4066  0027F8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4067  0027FA  26D9               	addwf	fsr2l,f,c
  4068  0027FC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4069  0027FE  22DA               	addwfc	fsr2h,f,c
  4070  002800  EE10 F01D          	lfsr	1,29
  4071  002804  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4072  002806  26E1               	addwf	fsr1l,f,c
  4073  002808  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4074  00280A  22E2               	addwfc	fsr1h,f,c
  4075  00280C  CFDF FFE7          	movff	indf2,indf1
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;ipv4.c: 35: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  4079  002810  EE20 F037          	lfsr	2,55
  4080  002814  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4081  002816  26D9               	addwf	fsr2l,f,c
  4082  002818  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4083  00281A  22DA               	addwfc	fsr2h,f,c
  4084  00281C  EE10 F01E          	lfsr	1,30
  4085  002820  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4086  002822  26E1               	addwf	fsr1l,f,c
  4087  002824  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4088  002826  22E2               	addwfc	fsr1h,f,c
  4089  002828  CFDF FFE7          	movff	indf2,indf1
  4090                           
  4091                           ; BSR set to: 0
  4092                           ;ipv4.c: 36: packet->memory.index = packet->ethernet.memory.index;
  4093  00282C  EE20 F038          	lfsr	2,56
  4094  002830  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4095  002832  26D9               	addwf	fsr2l,f,c
  4096  002834  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4097  002836  22DA               	addwfc	fsr2h,f,c
  4098  002838  EE10 F01F          	lfsr	1,31
  4099  00283C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4100  00283E  26E1               	addwf	fsr1l,f,c
  4101  002840  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4102  002842  22E2               	addwfc	fsr1h,f,c
  4103  002844  CFDF FFE7          	movff	indf2,indf1
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;ipv4.c: 37: packet->memory.start = packet->ethernet.memory.start + 8;
  4107  002848  EE20 F030          	lfsr	2,48
  4108  00284C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4109  00284E  26D9               	addwf	fsr2l,f,c
  4110  002850  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4111  002852  22DA               	addwfc	fsr2h,f,c
  4112  002854  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4113  002858  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4114  00285C  0E08               	movlw	8
  4115  00285E  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4116  002860  0E00               	movlw	0
  4117  002862  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4118  002864  EE20 F017          	lfsr	2,23
  4119  002868  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4120  00286A  26D9               	addwf	fsr2l,f,c
  4121  00286C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4122  00286E  22DA               	addwfc	fsr2h,f,c
  4123  002870  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4124  002874  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;ipv4.c: 38: packet->memory.end = packet->ethernet.memory.end;
  4128  002878  EE20 F032          	lfsr	2,50
  4129  00287C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4130  00287E  26D9               	addwf	fsr2l,f,c
  4131  002880  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4132  002882  22DA               	addwfc	fsr2h,f,c
  4133  002884  EE10 F019          	lfsr	1,25
  4134  002888  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4135  00288A  26E1               	addwf	fsr1l,f,c
  4136  00288C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4137  00288E  22E2               	addwfc	fsr1h,f,c
  4138  002890  CFDE FFE6          	movff	postinc2,postinc1
  4139  002894  CFDD FFE5          	movff	postdec2,postdec1
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;ipv4.c: 39: packet->memory.length = packet->ethernet.memory.length - 8;
  4143  002898  0EF8               	movlw	248
  4144  00289A  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  4145  00289C  0EFF               	movlw	255
  4146  00289E  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  4147  0028A0  EE20 F034          	lfsr	2,52
  4148  0028A4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4149  0028A6  26D9               	addwf	fsr2l,f,c
  4150  0028A8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4151  0028AA  22DA               	addwfc	fsr2h,f,c
  4152  0028AC  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  4153  0028B0  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  4154  0028B4  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  4155  0028B6  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  4156  0028B8  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  4157  0028BA  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  4158  0028BC  EE20 F01B          	lfsr	2,27
  4159  0028C0  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4160  0028C2  26D9               	addwf	fsr2l,f,c
  4161  0028C4  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4162  0028C6  22DA               	addwfc	fsr2h,f,c
  4163  0028C8  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  4164  0028CC  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  4165                           
  4166                           ; BSR set to: 0
  4167  0028D0  0012               	return		;funcret
  4168  0028D2                     __end_of_ipv4_txFrameRequest:
  4169                           	opt stack 0
  4170                           tblptru	equ	0xFF8
  4171                           tblptrh	equ	0xFF7
  4172                           tblptrl	equ	0xFF6
  4173                           tablat	equ	0xFF5
  4174                           prodh	equ	0xFF4
  4175                           prodl	equ	0xFF3
  4176                           intcon	equ	0xFF2
  4177                           intcon3	equ	0xFF0
  4178                           postinc0	equ	0xFEE
  4179                           plusw0	equ	0xFEB
  4180                           fsr0h	equ	0xFEA
  4181                           fsr0l	equ	0xFE9
  4182                           wreg	equ	0xFE8
  4183                           indf1	equ	0xFE7
  4184                           postinc1	equ	0xFE6
  4185                           postdec1	equ	0xFE5
  4186                           plusw1	equ	0xFE3
  4187                           fsr1h	equ	0xFE2
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           plusw2	equ	0xFDB
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  4198 ;; Defined at:
  4199 ;;		line 85 in file "src/stack/protocols/ipv4.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;  data            1    wreg     unsigned char 
  4202 ;;  packet         62    0[BANK0 ] struct ipv4_packet
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;  data            1    0[COMRAM] unsigned char 
  4205 ;;  ethernetPack    2   66[BANK0 ] unsigned int 
  4206 ;;  remainingLen    2    0        unsigned int 
  4207 ;; Return value:  Size  Location     Type
  4208 ;;                  1    wreg      void 
  4209 ;; Registers used:
  4210 ;;		wreg, status,2, status,0
  4211 ;; Tracked objects:
  4212 ;;		On entry : 0/0
  4213 ;;		On exit  : 0/0
  4214 ;;		Unchanged: 0/0
  4215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4216 ;;      Params:         0      62       0       0       0       0       0       0       0
  4217 ;;      Locals:         0       2       0       0       0       0       0       0       0
  4218 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4219 ;;      Totals:         0      68       0       0       0       0       0       0       0
  4220 ;;Total ram usage:       68 bytes
  4221 ;; Hardware stack levels used:    1
  4222 ;; Hardware stack levels required when called:    4
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_main
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text6
  4231  004152                     __ptext6:
  4232                           	opt stack 0
  4233  004152                     _ipv4_streamToTransmissionBuffer:
  4234                           	opt stack 26
  4235                           
  4236                           ;ipv4.c: 86: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  4237                           
  4238                           ; BSR set to: 0
  4239                           ;incstack = 0
  4240  004152  C064  F0A2         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  4241  004156  C065  F0A3         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  4242                           
  4243                           ;ipv4.c: 87: uint16_t remainingLength;
  4244                           ;ipv4.c: 91: uint16_t static dataPointer = 0;
  4245                           ;ipv4.c: 93: if (dataPointer == ethernetPacketLength - 1) {
  4246  00415A  0EFF               	movlw	255
  4247  00415C  0100               	movlb	0	; () banked
  4248  00415E  6F9E               	movwf	??_ipv4_streamToTransmissionBuffer& (0+255),b
  4249  004160  0EFF               	movlw	255
  4250  004162  6F9F               	movwf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),b
  4251  004164  C0A2  F0A0         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength,??_ipv4_streamToTransmission
      +                          Buffer+2
  4252  004168  C0A3  F0A1         	movff	ipv4_streamToTransmissionBuffer@ethernetPacketLength+1,??_ipv4_streamToTransmissi
      +                          onBuffer+3
  4253  00416C  519E               	movf	??_ipv4_streamToTransmissionBuffer& (0+255),w,b
  4254  00416E  27A0               	addwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),f,b
  4255  004170  519F               	movf	(??_ipv4_streamToTransmissionBuffer+1)& (0+255),w,b
  4256  004172  23A1               	addwfc	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),f,b
  4257  004174  503F               	movf	ipv4_streamToTransmissionBuffer@dataPointer,w,c
  4258  004176  19A0               	xorwf	(??_ipv4_streamToTransmissionBuffer+2)& (0+255),w,b
  4259  004178  E109               	bnz	l8681
  4260  00417A  5040               	movf	ipv4_streamToTransmissionBuffer@dataPointer+1,w,c
  4261  00417C  19A1               	xorwf	(??_ipv4_streamToTransmissionBuffer+3)& (0+255),w,b
  4262  00417E  A4D8               	btfss	status,2,c
  4263  004180  D005               	goto	l999
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;ipv4.c: 94: dataPointer = 0;
  4267  004182  0E00               	movlw	0
  4268  004184  6E40               	movwf	ipv4_streamToTransmissionBuffer@dataPointer+1,c
  4269  004186  0E00               	movlw	0
  4270  004188  6E3F               	movwf	ipv4_streamToTransmissionBuffer@dataPointer,c
  4271                           
  4272                           ;ipv4.c: 95: } else {
  4273  00418A  0012               	return	
  4274  00418C                     l999:
  4275  00418C                     l8681:
  4276                           
  4277                           ; BSR set to: 0
  4278                           ;ipv4.c: 96: dataPointer++;
  4279  00418C  4A3F               	infsnz	ipv4_streamToTransmissionBuffer@dataPointer,f,c
  4280  00418E  2A40               	incf	ipv4_streamToTransmissionBuffer@dataPointer+1,f,c
  4281  004190  0012               	return	
  4282  004192                     __end_of_ipv4_streamToTransmissionBuffer:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           intcon3	equ	0xFF0
  4292                           postinc0	equ	0xFEE
  4293                           plusw0	equ	0xFEB
  4294                           fsr0h	equ	0xFEA
  4295                           fsr0l	equ	0xFE9
  4296                           wreg	equ	0xFE8
  4297                           indf1	equ	0xFE7
  4298                           postinc1	equ	0xFE6
  4299                           postdec1	equ	0xFE5
  4300                           plusw1	equ	0xFE3
  4301                           fsr1h	equ	0xFE2
  4302                           fsr1l	equ	0xFE1
  4303                           indf2	equ	0xFDF
  4304                           postinc2	equ	0xFDE
  4305                           postdec2	equ	0xFDD
  4306                           plusw2	equ	0xFDB
  4307                           fsr2h	equ	0xFDA
  4308                           fsr2l	equ	0xFD9
  4309                           status	equ	0xFD8
  4310                           
  4311 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  4312 ;; Defined at:
  4313 ;;		line 100 in file "src/stack/protocols/ipv4.c"
  4314 ;; Parameters:    Size  Location     Type
  4315 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  4316 ;;		 -> stack.pendingPacketToSend(62), stack(113), 
  4317 ;; Auto vars:     Size  Location     Type
  4318 ;;  sum             4   14[BANK0 ] unsigned long 
  4319 ;; Return value:  Size  Location     Type
  4320 ;;                  1    wreg      void 
  4321 ;; Registers used:
  4322 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4323 ;; Tracked objects:
  4324 ;;		On entry : 0/0
  4325 ;;		On exit  : 0/0
  4326 ;;		Unchanged: 0/0
  4327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4328 ;;      Params:         0       2       0       0       0       0       0       0       0
  4329 ;;      Locals:         0       4       0       0       0       0       0       0       0
  4330 ;;      Temps:          0      12       0       0       0       0       0       0       0
  4331 ;;      Totals:         0      18       0       0       0       0       0       0       0
  4332 ;;Total ram usage:       18 bytes
  4333 ;; Hardware stack levels used:    1
  4334 ;; Hardware stack levels required when called:    4
  4335 ;; This function calls:
  4336 ;;		Nothing
  4337 ;; This function is called by:
  4338 ;;		_main
  4339 ;; This function uses a non-reentrant model
  4340 ;;
  4341                           
  4342                           	psect	text7
  4343  0011F4                     __ptext7:
  4344                           	opt stack 0
  4345  0011F4                     _ipv4_calculateHeaderChecksum:
  4346                           	opt stack 26
  4347                           
  4348                           ;ipv4.c: 101: header->headerLength = 5;
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;incstack = 0
  4352  0011F4  0100               	movlb	0	; () banked
  4353  0011F6  EE20 F001          	lfsr	2,1
  4354  0011FA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4355  0011FC  26D9               	addwf	fsr2l,f,c
  4356  0011FE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4357  001200  22DA               	addwfc	fsr2h,f,c
  4358  001202  0E05               	movlw	5
  4359  001204  6EDF               	movwf	indf2,c
  4360                           
  4361                           ;ipv4.c: 102: header->dscp = 0;
  4362  001206  EE20 F002          	lfsr	2,2
  4363  00120A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4364  00120C  26D9               	addwf	fsr2l,f,c
  4365  00120E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4366  001210  22DA               	addwfc	fsr2h,f,c
  4367  001212  0E00               	movlw	0
  4368  001214  6EDF               	movwf	indf2,c
  4369                           
  4370                           ;ipv4.c: 103: header->ecn = 0;
  4371  001216  EE20 F003          	lfsr	2,3
  4372  00121A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4373  00121C  26D9               	addwf	fsr2l,f,c
  4374  00121E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4375  001220  22DA               	addwfc	fsr2h,f,c
  4376  001222  0E00               	movlw	0
  4377  001224  6EDF               	movwf	indf2,c
  4378                           
  4379                           ;ipv4.c: 104: header->flags = 0x00;
  4380  001226  EE20 F008          	lfsr	2,8
  4381  00122A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4382  00122C  26D9               	addwf	fsr2l,f,c
  4383  00122E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4384  001230  22DA               	addwfc	fsr2h,f,c
  4385  001232  0E00               	movlw	0
  4386  001234  6EDF               	movwf	indf2,c
  4387                           
  4388                           ;ipv4.c: 105: header->fragmentOffset = 0x00;
  4389  001236  EE20 F009          	lfsr	2,9
  4390  00123A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4391  00123C  26D9               	addwf	fsr2l,f,c
  4392  00123E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4393  001240  22DA               	addwfc	fsr2h,f,c
  4394  001242  0E00               	movlw	0
  4395  001244  6EDE               	movwf	postinc2,c
  4396  001246  0E00               	movlw	0
  4397  001248  6EDD               	movwf	postdec2,c
  4398                           
  4399                           ;ipv4.c: 106: header->identification = 0x00;
  4400  00124A  EE20 F006          	lfsr	2,6
  4401  00124E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4402  001250  26D9               	addwf	fsr2l,f,c
  4403  001252  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4404  001254  22DA               	addwfc	fsr2h,f,c
  4405  001256  0E00               	movlw	0
  4406  001258  6EDE               	movwf	postinc2,c
  4407  00125A  0E00               	movlw	0
  4408  00125C  6EDD               	movwf	postdec2,c
  4409                           
  4410                           ; BSR set to: 0
  4411                           ;ipv4.c: 108: uint32_t sum = 0;
  4412  00125E  0E00               	movlw	0
  4413  001260  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4414  001262  0E00               	movlw	0
  4415  001264  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4416  001266  0E00               	movlw	0
  4417  001268  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4418  00126A  0E00               	movlw	0
  4419  00126C  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;ipv4.c: 109: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  4423  00126E  EE20 F002          	lfsr	2,2
  4424  001272  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4425  001274  26D9               	addwf	fsr2l,f,c
  4426  001276  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4427  001278  22DA               	addwfc	fsr2h,f,c
  4428  00127A  50DF               	movf	indf2,w,c
  4429  00127C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4430  00127E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4431  001280  90D8               	bcf	status,0,c
  4432  001282  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4433  001284  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4434  001286  90D8               	bcf	status,0,c
  4435  001288  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4436  00128A  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4437  00128C  EE20 F001          	lfsr	2,1
  4438  001290  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4439  001292  26D9               	addwf	fsr2l,f,c
  4440  001294  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4441  001296  22DA               	addwfc	fsr2h,f,c
  4442  001298  50DF               	movf	indf2,w,c
  4443  00129A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4444  00129C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4445  00129E  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4446  0012A0  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4447  0012A2  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  4448  0012A6  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  4449  0012AA  50DF               	movf	indf2,w,c
  4450  0012AC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4451  0012AE  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4452  0012B0  0E0C               	movlw	12
  4453  0012B2                     u10995:
  4454  0012B2  90D8               	bcf	status,0,c
  4455  0012B4  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4456  0012B6  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4457  0012B8  2EE8               	decfsz	wreg,f,c
  4458  0012BA  D7FB               	goto	u10995
  4459  0012BC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4460  0012BE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4461  0012C0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4462  0012C2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4463  0012C4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4464  0012C6  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4465  0012C8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4466  0012CA  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4467  0012CC  EE20 F003          	lfsr	2,3
  4468  0012D0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4469  0012D2  26D9               	addwf	fsr2l,f,c
  4470  0012D4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4471  0012D6  22DA               	addwfc	fsr2h,f,c
  4472  0012D8  50DF               	movf	indf2,w,c
  4473  0012DA  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4474  0012DC  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4475  0012DE  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  4476  0012E0  0E00               	movlw	0
  4477  0012E2  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  4478  0012E4  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  4479  0012E8  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  4480  0012EC  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4481  0012EE  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           ;ipv4.c: 110: sum += header->totalLength;
  4485  0012F0  EE20 F004          	lfsr	2,4
  4486  0012F4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4487  0012F6  26D9               	addwf	fsr2l,f,c
  4488  0012F8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4489  0012FA  22DA               	addwfc	fsr2h,f,c
  4490  0012FC  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4491  001300  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4492  001304  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4493  001306  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4494  001308  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4495  00130A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4496  00130C  0E00               	movlw	0
  4497  00130E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4498  001310  0E00               	movlw	0
  4499  001312  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;ipv4.c: 111: sum += header->identification;
  4503  001314  EE20 F006          	lfsr	2,6
  4504  001318  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4505  00131A  26D9               	addwf	fsr2l,f,c
  4506  00131C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4507  00131E  22DA               	addwfc	fsr2h,f,c
  4508  001320  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4509  001324  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4510  001328  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4511  00132A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4512  00132C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4513  00132E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4514  001330  0E00               	movlw	0
  4515  001332  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4516  001334  0E00               	movlw	0
  4517  001336  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4518                           
  4519                           ; BSR set to: 0
  4520                           ;ipv4.c: 112: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  4521  001338  EE20 F009          	lfsr	2,9
  4522  00133C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4523  00133E  26D9               	addwf	fsr2l,f,c
  4524  001340  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4525  001342  22DA               	addwfc	fsr2h,f,c
  4526  001344  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  4527  001348  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  4528  00134C  EE20 F008          	lfsr	2,8
  4529  001350  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4530  001352  26D9               	addwf	fsr2l,f,c
  4531  001354  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4532  001356  22DA               	addwfc	fsr2h,f,c
  4533  001358  50DF               	movf	indf2,w,c
  4534  00135A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4535  00135C  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4536  00135E  0E0D               	movlw	13
  4537  001360                     u11005:
  4538  001360  90D8               	bcf	status,0,c
  4539  001362  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4540  001364  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4541  001366  2EE8               	decfsz	wreg,f,c
  4542  001368  D7FB               	goto	u11005
  4543  00136A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4544  00136C  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4545  00136E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4546  001370  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4547  001372  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4548  001374  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4549  001376  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4550  001378  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4551  00137A  0E00               	movlw	0
  4552  00137C  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4553  00137E  0E00               	movlw	0
  4554  001380  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;ipv4.c: 113: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  4558  001382  EE20 F00B          	lfsr	2,11
  4559  001386  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4560  001388  26D9               	addwf	fsr2l,f,c
  4561  00138A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4562  00138C  22DA               	addwfc	fsr2h,f,c
  4563  00138E  50DF               	movf	indf2,w,c
  4564  001390  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4565  001392  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4566  001394  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4567  001396  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4568  001398  EE20 F00C          	lfsr	2,12
  4569  00139C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4570  00139E  26D9               	addwf	fsr2l,f,c
  4571  0013A0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4572  0013A2  22DA               	addwfc	fsr2h,f,c
  4573  0013A4  50DF               	movf	indf2,w,c
  4574  0013A6  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4575  0013A8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4576  0013AA  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4577  0013AC  0E00               	movlw	0
  4578  0013AE  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4579  0013B0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4580  0013B2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4581  0013B4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4582  0013B6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4583  0013B8  0E00               	movlw	0
  4584  0013BA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4585  0013BC  0E00               	movlw	0
  4586  0013BE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4587                           
  4588                           ; BSR set to: 0
  4589                           ;ipv4.c: 115: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  4590  0013C0  EE20 F00F          	lfsr	2,15
  4591  0013C4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4592  0013C6  26D9               	addwf	fsr2l,f,c
  4593  0013C8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4594  0013CA  22DA               	addwfc	fsr2h,f,c
  4595  0013CC  50DF               	movf	indf2,w,c
  4596  0013CE  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4597  0013D0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4598  0013D2  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4599  0013D4  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4600  0013D6  EE20 F010          	lfsr	2,16
  4601  0013DA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4602  0013DC  26D9               	addwf	fsr2l,f,c
  4603  0013DE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4604  0013E0  22DA               	addwfc	fsr2h,f,c
  4605  0013E2  50DF               	movf	indf2,w,c
  4606  0013E4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4607  0013E6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4608  0013E8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4609  0013EA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4610  0013EC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4611  0013EE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4612  0013F0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4613  0013F2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4614  0013F4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4615  0013F6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4616  0013F8  0E00               	movlw	0
  4617  0013FA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4618  0013FC  0E00               	movlw	0
  4619  0013FE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4620                           
  4621                           ; BSR set to: 0
  4622                           ;ipv4.c: 116: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  4623  001400  EE20 F011          	lfsr	2,17
  4624  001404  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4625  001406  26D9               	addwf	fsr2l,f,c
  4626  001408  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4627  00140A  22DA               	addwfc	fsr2h,f,c
  4628  00140C  50DF               	movf	indf2,w,c
  4629  00140E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4630  001410  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4631  001412  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4632  001414  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4633  001416  EE20 F012          	lfsr	2,18
  4634  00141A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4635  00141C  26D9               	addwf	fsr2l,f,c
  4636  00141E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4637  001420  22DA               	addwfc	fsr2h,f,c
  4638  001422  50DF               	movf	indf2,w,c
  4639  001424  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4640  001426  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4641  001428  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4642  00142A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4643  00142C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4644  00142E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4645  001430  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4646  001432  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4647  001434  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4648  001436  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4649  001438  0E00               	movlw	0
  4650  00143A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4651  00143C  0E00               	movlw	0
  4652  00143E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;ipv4.c: 117: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  4656  001440  EE20 F013          	lfsr	2,19
  4657  001444  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4658  001446  26D9               	addwf	fsr2l,f,c
  4659  001448  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4660  00144A  22DA               	addwfc	fsr2h,f,c
  4661  00144C  50DF               	movf	indf2,w,c
  4662  00144E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4663  001450  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4664  001452  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4665  001454  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4666  001456  EE20 F014          	lfsr	2,20
  4667  00145A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4668  00145C  26D9               	addwf	fsr2l,f,c
  4669  00145E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4670  001460  22DA               	addwfc	fsr2h,f,c
  4671  001462  50DF               	movf	indf2,w,c
  4672  001464  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4673  001466  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4674  001468  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4675  00146A  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4676  00146C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4677  00146E  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4678  001470  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4679  001472  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4680  001474  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4681  001476  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4682  001478  0E00               	movlw	0
  4683  00147A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4684  00147C  0E00               	movlw	0
  4685  00147E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;ipv4.c: 118: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  4689  001480  EE20 F015          	lfsr	2,21
  4690  001484  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4691  001486  26D9               	addwf	fsr2l,f,c
  4692  001488  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4693  00148A  22DA               	addwfc	fsr2h,f,c
  4694  00148C  50DF               	movf	indf2,w,c
  4695  00148E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  4696  001490  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4697  001492  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  4698  001494  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  4699  001496  EE20 F016          	lfsr	2,22
  4700  00149A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4701  00149C  26D9               	addwf	fsr2l,f,c
  4702  00149E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4703  0014A0  22DA               	addwfc	fsr2h,f,c
  4704  0014A2  50DF               	movf	indf2,w,c
  4705  0014A4  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  4706  0014A6  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4707  0014A8  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4708  0014AA  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4709  0014AC  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4710  0014AE  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  4711  0014B0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4712  0014B2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  4713  0014B4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4714  0014B6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  4715  0014B8  0E00               	movlw	0
  4716  0014BA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  4717  0014BC  0E00               	movlw	0
  4718  0014BE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;ipv4.c: 120: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  4722  0014C0  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4723  0014C4  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4724  0014C8  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4725  0014CC  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4726  0014D0  0E11               	movlw	17
  4727  0014D2  D005               	goto	u11010
  4728  0014D4                     u11015:
  4729  0014D4  90D8               	bcf	status,0,c
  4730  0014D6  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4731  0014D8  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4732  0014DA  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4733  0014DC  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4734  0014DE                     u11010:
  4735  0014DE  2EE8               	decfsz	wreg,f,c
  4736  0014E0  D7F9               	goto	u11015
  4737  0014E2  0E0F               	movlw	15
  4738  0014E4  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  4739  0014E6  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  4740  0014E8  0E00               	movlw	0
  4741  0014EA  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  4742  0014EC  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  4743  0014EE  0E00               	movlw	0
  4744  0014F0  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  4745  0014F2  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  4746  0014F4  0E00               	movlw	0
  4747  0014F6  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  4748  0014F8  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  4749  0014FA  0EFF               	movlw	255
  4750  0014FC  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  4751  0014FE  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  4752  001500  0EFF               	movlw	255
  4753  001502  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  4754  001504  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  4755  001506  0E00               	movlw	0
  4756  001508  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  4757  00150A  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  4758  00150C  0E00               	movlw	0
  4759  00150E  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  4760  001510  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  4761  001512  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  4762  001514  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  4763  001516  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  4764  001518  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  4765  00151A  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  4766  00151C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  4767  00151E  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  4768  001520  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  4769  001522  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  4770  001524  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  4771  001526  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  4772  001528  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  4773                           
  4774                           ; BSR set to: 0
  4775                           ;ipv4.c: 121: sum = ~sum;
  4776  00152A  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  4777  00152E  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  4778  001532  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  4779  001536  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  4780  00153A  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  4781  00153C  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  4782  00153E  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  4783  001540  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  4784  001542  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  4785  001546  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  4786  00154A  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  4787  00154E  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;ipv4.c: 123: header->checksum = sum;
  4791  001552  EE20 F00D          	lfsr	2,13
  4792  001556  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  4793  001558  26D9               	addwf	fsr2l,f,c
  4794  00155A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  4795  00155C  22DA               	addwfc	fsr2h,f,c
  4796  00155E  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  4797  001562  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  4798                           
  4799                           ; BSR set to: 0
  4800  001566  0012               	return		;funcret
  4801  001568                     __end_of_ipv4_calculateHeaderChecksum:
  4802                           	opt stack 0
  4803                           tblptru	equ	0xFF8
  4804                           tblptrh	equ	0xFF7
  4805                           tblptrl	equ	0xFF6
  4806                           tablat	equ	0xFF5
  4807                           prodh	equ	0xFF4
  4808                           prodl	equ	0xFF3
  4809                           intcon	equ	0xFF2
  4810                           intcon3	equ	0xFF0
  4811                           postinc0	equ	0xFEE
  4812                           plusw0	equ	0xFEB
  4813                           fsr0h	equ	0xFEA
  4814                           fsr0l	equ	0xFE9
  4815                           wreg	equ	0xFE8
  4816                           indf1	equ	0xFE7
  4817                           postinc1	equ	0xFE6
  4818                           postdec1	equ	0xFE5
  4819                           plusw1	equ	0xFE3
  4820                           fsr1h	equ	0xFE2
  4821                           fsr1l	equ	0xFE1
  4822                           indf2	equ	0xFDF
  4823                           postinc2	equ	0xFDE
  4824                           postdec2	equ	0xFDD
  4825                           plusw2	equ	0xFDB
  4826                           fsr2h	equ	0xFDA
  4827                           fsr2l	equ	0xFD9
  4828                           status	equ	0xFD8
  4829                           
  4830 ;; *************** function _handleStackBackgroundTasks *****************
  4831 ;; Defined at:
  4832 ;;		line 26 in file "src/stack/backgroundTasks.c"
  4833 ;; Parameters:    Size  Location     Type
  4834 ;;  stack           2  132[BANK1 ] PTR volatile struct stac
  4835 ;;		 -> stack(113), 
  4836 ;; Auto vars:     Size  Location     Type
  4837 ;;		None
  4838 ;; Return value:  Size  Location     Type
  4839 ;;                  1    wreg      void 
  4840 ;; Registers used:
  4841 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4842 ;; Tracked objects:
  4843 ;;		On entry : 0/0
  4844 ;;		On exit  : 0/0
  4845 ;;		Unchanged: 0/0
  4846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4847 ;;      Params:         0       0       2       0       0       0       0       0       0
  4848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4849 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4850 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4851 ;;Total ram usage:        4 bytes
  4852 ;; Hardware stack levels used:    1
  4853 ;; Hardware stack levels required when called:   13
  4854 ;; This function calls:
  4855 ;;		_UARTTransmitText
  4856 ;;		_ethernetController_clearInterruptFlag
  4857 ;;		_ethernetController_newPacketAvailable
  4858 ;;		_ethernetController_pollInterruptFlags
  4859 ;;		_ethernetController_setLEDConfig
  4860 ;;		_ethernetController_updateLinkStatus
  4861 ;;		_ethernet_rxGetNewFrame
  4862 ;;		_ipAdressToString
  4863 ;;		_ipv4_sendFrame
  4864 ;; This function is called by:
  4865 ;;		_main
  4866 ;; This function uses a non-reentrant model
  4867 ;;
  4868                           
  4869                           	psect	text8
  4870  002346                     __ptext8:
  4871                           	opt stack 0
  4872  002346                     _handleStackBackgroundTasks:
  4873                           	opt stack 17
  4874                           
  4875                           ;backgroundTasks.c: 27: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4876                           
  4877                           ; BSR set to: 0
  4878                           ;incstack = 0
  4879  002346  ECFD  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4880  00234A  0101               	movlb	1	; () banked
  4881  00234C  EE20 F012          	lfsr	2,18
  4882  002350  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4883  002352  26D9               	addwf	fsr2l,f,c
  4884  002354  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4885  002356  22DA               	addwfc	fsr2h,f,c
  4886  002358  0100               	movlb	0	; () banked
  4887  00235A  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4888  00235E  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;backgroundTasks.c: 28: if (stack->background.interruptFlags.PKTIF) {
  4892  002362  0101               	movlb	1	; () banked
  4893  002364  EE20 F012          	lfsr	2,18
  4894  002368  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4895  00236A  26D9               	addwf	fsr2l,f,c
  4896  00236C  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4897  00236E  22DA               	addwfc	fsr2h,f,c
  4898  002370  A8DF               	btfss	indf2,4,c
  4899  002372  D018               	goto	l513
  4900                           
  4901                           ; BSR set to: 1
  4902                           ;backgroundTasks.c: 30: if (ethernetController_newPacketAvailable()) {
  4903  002374  EC56  F023         	call	_ethernetController_newPacketAvailable	;wreg free
  4904  002378  0900               	iorlw	0
  4905  00237A  B4D8               	btfsc	status,2,c
  4906  00237C  D013               	goto	l513
  4907                           
  4908                           ;backgroundTasks.c: 31: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4909  00237E  C184  F174         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4910  002382  C185  F175         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4911  002386  ECCF  F002         	call	_ethernet_rxGetNewFrame	;wreg free
  4912  00238A  0101               	movlb	1	; () banked
  4913  00238C  EE20 F00F          	lfsr	2,15
  4914  002390  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4915  002392  26D9               	addwf	fsr2l,f,c
  4916  002394  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4917  002396  22DA               	addwfc	fsr2h,f,c
  4918  002398  C174  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4919  00239C  C175  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4920  0023A0  C176  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4921  0023A4                     l513:
  4922                           
  4923                           ;backgroundTasks.c: 32: }
  4924                           ;backgroundTasks.c: 33: }
  4925                           ;backgroundTasks.c: 35: if (stack->background.fPacketPending) {
  4926                           
  4927                           ; BSR set to: 1
  4928                           
  4929                           ; BSR set to: 1
  4930  0023A4  0101               	movlb	1	; () banked
  4931  0023A6  EE20 F014          	lfsr	2,20
  4932  0023AA  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4933  0023AC  26D9               	addwf	fsr2l,f,c
  4934  0023AE  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4935  0023B0  22DA               	addwfc	fsr2h,f,c
  4936  0023B2  A0DF               	btfss	indf2,0,c
  4937  0023B4  D06B               	goto	l516
  4938                           
  4939                           ; BSR set to: 1
  4940                           ;backgroundTasks.c: 37: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  4941  0023B6  EE20 F033          	lfsr	2,51
  4942  0023BA  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4943  0023BC  26D9               	addwf	fsr2l,f,c
  4944  0023BE  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4945  0023C0  22DA               	addwfc	fsr2h,f,c
  4946  0023C2  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  4947  0023C6  0E3D               	movlw	61
  4948  0023C8                     u10801:
  4949  0023C8  CFDB FFEB          	movff	plusw2,plusw0
  4950  0023CC  06E8               	decf	wreg,f,c
  4951  0023CE  E2FC               	bc	u10801
  4952  0023D0  ECD8  F00F         	call	_ipv4_sendFrame	;wreg free
  4953  0023D4  0101               	movlb	1	; () banked
  4954  0023D6  EE20 F00F          	lfsr	2,15
  4955  0023DA  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4956  0023DC  26D9               	addwf	fsr2l,f,c
  4957  0023DE  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4958  0023E0  22DA               	addwfc	fsr2h,f,c
  4959  0023E2  C134  FFDE         	movff	?_ipv4_sendFrame,postinc2
  4960  0023E6  C135  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  4961  0023EA  C136  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  4962                           
  4963                           ; BSR set to: 1
  4964                           ;backgroundTasks.c: 38: if (stack->background.err.module == ERROR_MODULE_ARP &&
  4965                           ;backgroundTasks.c: 39: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  4966  0023EE  EE20 F00F          	lfsr	2,15
  4967  0023F2  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4968  0023F4  26D9               	addwf	fsr2l,f,c
  4969  0023F6  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4970  0023F8  22DA               	addwfc	fsr2h,f,c
  4971  0023FA  0E03               	movlw	3
  4972  0023FC  18DE               	xorwf	postinc2,w,c
  4973  0023FE  A4D8               	btfss	status,2,c
  4974  002400  D02A               	goto	l515
  4975                           
  4976                           ; BSR set to: 1
  4977  002402  EE20 F010          	lfsr	2,16
  4978  002406  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4979  002408  26D9               	addwf	fsr2l,f,c
  4980  00240A  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4981  00240C  22DA               	addwfc	fsr2h,f,c
  4982  00240E  0E92               	movlw	146
  4983  002410  18DE               	xorwf	postinc2,w,c
  4984  002412  E121               	bnz	l8493
  4985  002414  04DE               	decf	postinc2,w,c
  4986  002416  A4D8               	btfss	status,2,c
  4987  002418  D01E               	goto	l515
  4988                           
  4989                           ; BSR set to: 1
  4990                           ;backgroundTasks.c: 40: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  4991  00241A  EE20 F046          	lfsr	2,70
  4992  00241E  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4993  002420  26D9               	addwf	fsr2l,f,c
  4994  002422  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4995  002424  22DA               	addwfc	fsr2h,f,c
  4996  002426  CFDE F067          	movff	postinc2,ipAdressToString@ip
  4997  00242A  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  4998  00242E  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  4999  002432  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  5000  002436  ECE1  F00E         	call	_ipAdressToString	;wreg free
  5001  00243A  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5002  00243E  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5003  002442  EC31  F01F         	call	_UARTTransmitText	;wreg free
  5004                           
  5005                           ;backgroundTasks.c: 41: stack->background.fPacketPending = 0;
  5006  002446  0101               	movlb	1	; () banked
  5007  002448  EE20 F014          	lfsr	2,20
  5008  00244C  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5009  00244E  26D9               	addwf	fsr2l,f,c
  5010  002450  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5011  002452  22DA               	addwfc	fsr2h,f,c
  5012  002454  90DF               	bcf	indf2,0,c
  5013  002456                     l515:
  5014  002456                     l8493:
  5015                           
  5016                           ; BSR set to: 1
  5017                           ;backgroundTasks.c: 42: }
  5018                           ;backgroundTasks.c: 43: if (stack->background.err.module == ERROR_MODULE_ARP &&
  5019                           ;backgroundTasks.c: 44: stack->background.err.code == (uint16_t)0) {
  5020  002456  EE20 F00F          	lfsr	2,15
  5021  00245A  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5022  00245C  26D9               	addwf	fsr2l,f,c
  5023  00245E  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5024  002460  22DA               	addwfc	fsr2h,f,c
  5025  002462  0E03               	movlw	3
  5026  002464  18DE               	xorwf	postinc2,w,c
  5027  002466  A4D8               	btfss	status,2,c
  5028  002468  D011               	goto	l516
  5029                           
  5030                           ; BSR set to: 1
  5031  00246A  EE20 F010          	lfsr	2,16
  5032  00246E  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5033  002470  26D9               	addwf	fsr2l,f,c
  5034  002472  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5035  002474  22DA               	addwfc	fsr2h,f,c
  5036  002476  50DE               	movf	postinc2,w,c
  5037  002478  10DE               	iorwf	postinc2,w,c
  5038  00247A  A4D8               	btfss	status,2,c
  5039  00247C  D007               	goto	l516
  5040                           
  5041                           ; BSR set to: 1
  5042                           ;backgroundTasks.c: 46: stack->background.fPacketPending = 0;
  5043  00247E  EE20 F014          	lfsr	2,20
  5044  002482  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5045  002484  26D9               	addwf	fsr2l,f,c
  5046  002486  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5047  002488  22DA               	addwfc	fsr2h,f,c
  5048  00248A  90DF               	bcf	indf2,0,c
  5049  00248C                     l516:
  5050                           
  5051                           ; BSR set to: 1
  5052                           ;backgroundTasks.c: 47: }
  5053                           ;backgroundTasks.c: 48: }
  5054                           ;backgroundTasks.c: 49: if (stack->background.interruptFlags.LINKIF) {
  5055                           
  5056                           ; BSR set to: 1
  5057  00248C  EE20 F012          	lfsr	2,18
  5058  002490  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5059  002492  26D9               	addwf	fsr2l,f,c
  5060  002494  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5061  002496  22DA               	addwfc	fsr2h,f,c
  5062  002498  A6DF               	btfss	indf2,3,c
  5063  00249A  0012               	return	
  5064                           
  5065                           ; BSR set to: 1
  5066                           ;backgroundTasks.c: 50: ethernetController_updateLinkStatus(&(stack->ethernet));
  5067  00249C  C184  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  5068  0024A0  C185  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  5069  0024A4  EC82  F01B         	call	_ethernetController_updateLinkStatus	;wreg free
  5070                           
  5071                           ;backgroundTasks.c: 52: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5072  0024A8  C184  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  5073  0024AC  C185  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  5074  0024B0  04DE               	decf	postinc2,w,c
  5075  0024B2  A4D8               	btfss	status,2,c
  5076  0024B4  D00D               	goto	l518
  5077                           
  5078                           ;backgroundTasks.c: 53: ethernetController_setLEDConfig(LEDA, LED_ON);
  5079  0024B6  0E00               	movlw	0
  5080  0024B8  0100               	movlb	0	; () banked
  5081  0024BA  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5082  0024BC  0E00               	movlw	0
  5083  0024BE  EC3B  F01B         	call	_ethernetController_setLEDConfig
  5084                           
  5085                           ;backgroundTasks.c: 54: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5086  0024C2  0E02               	movlw	2
  5087  0024C4  0100               	movlb	0	; () banked
  5088  0024C6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5089  0024C8  0E01               	movlw	1
  5090  0024CA  EC3B  F01B         	call	_ethernetController_setLEDConfig
  5091                           
  5092                           ;backgroundTasks.c: 55: } else {
  5093  0024CE  D00C               	goto	l519
  5094  0024D0                     l518:
  5095                           
  5096                           ;backgroundTasks.c: 56: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5097  0024D0  0E01               	movlw	1
  5098  0024D2  0100               	movlb	0	; () banked
  5099  0024D4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5100  0024D6  0E00               	movlw	0
  5101  0024D8  EC3B  F01B         	call	_ethernetController_setLEDConfig
  5102                           
  5103                           ;backgroundTasks.c: 57: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5104  0024DC  0E01               	movlw	1
  5105  0024DE  0100               	movlb	0	; () banked
  5106  0024E0  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5107  0024E2  0E01               	movlw	1
  5108  0024E4  EC3B  F01B         	call	_ethernetController_setLEDConfig
  5109  0024E8                     l519:
  5110                           
  5111                           ;backgroundTasks.c: 58: }
  5112                           ;backgroundTasks.c: 59: ethernetController_clearInterruptFlag(LINKIF);
  5113  0024E8  0E0B               	movlw	11
  5114  0024EA  EC6E  F023         	call	_ethernetController_clearInterruptFlag
  5115  0024EE  0012               	return	
  5116  0024F0                     __end_of_handleStackBackgroundTasks:
  5117                           	opt stack 0
  5118                           tblptru	equ	0xFF8
  5119                           tblptrh	equ	0xFF7
  5120                           tblptrl	equ	0xFF6
  5121                           tablat	equ	0xFF5
  5122                           prodh	equ	0xFF4
  5123                           prodl	equ	0xFF3
  5124                           intcon	equ	0xFF2
  5125                           intcon3	equ	0xFF0
  5126                           postinc0	equ	0xFEE
  5127                           plusw0	equ	0xFEB
  5128                           fsr0h	equ	0xFEA
  5129                           fsr0l	equ	0xFE9
  5130                           wreg	equ	0xFE8
  5131                           indf1	equ	0xFE7
  5132                           postinc1	equ	0xFE6
  5133                           postdec1	equ	0xFE5
  5134                           plusw1	equ	0xFE3
  5135                           fsr1h	equ	0xFE2
  5136                           fsr1l	equ	0xFE1
  5137                           indf2	equ	0xFDF
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _ipv4_sendFrame *****************
  5146 ;; Defined at:
  5147 ;;		line 42 in file "src/stack/protocols/ipv4.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  ipPacket       62   52[BANK1 ] struct ipv4_packet
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  err             3  129[BANK1 ] struct error
  5152 ;;  index           1  128[BANK1 ] unsigned char 
  5153 ;;  requestTimeo    1  127[BANK1 ] const unsigned char 
  5154 ;;  numberOfRequ    1  126[BANK1 ] const unsigned char 
  5155 ;; Return value:  Size  Location     Type
  5156 ;;                  3   52[BANK1 ] struct error
  5157 ;; Registers used:
  5158 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5159 ;; Tracked objects:
  5160 ;;		On entry : 0/0
  5161 ;;		On exit  : 0/0
  5162 ;;		Unchanged: 0/0
  5163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5164 ;;      Params:         0       0      62       0       0       0       0       0       0
  5165 ;;      Locals:         0       0       6       0       0       0       0       0       0
  5166 ;;      Temps:          0       0      12       0       0       0       0       0       0
  5167 ;;      Totals:         0       0      80       0       0       0       0       0       0
  5168 ;;Total ram usage:       80 bytes
  5169 ;; Hardware stack levels used:    1
  5170 ;; Hardware stack levels required when called:   11
  5171 ;; This function calls:
  5172 ;;		_ARP_checkForEntry
  5173 ;;		_ARP_getEntryFromTable
  5174 ;;		_ARP_sendRequest
  5175 ;;		_UARTTransmitText
  5176 ;;		_ethernetController_getMacAddress
  5177 ;;		_ethernetController_sendPacket
  5178 ;;		_ethernetController_writeDestinationMACAddress
  5179 ;;		_getSeconds
  5180 ;;		_ipAdressToString
  5181 ;;		_macToString
  5182 ;; This function is called by:
  5183 ;;		_handleStackBackgroundTasks
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text9
  5188  001FB0                     __ptext9:
  5189                           	opt stack 0
  5190  001FB0                     _ipv4_sendFrame:
  5191                           	opt stack 18
  5192                           
  5193                           ;ipv4.c: 43: error_t err;
  5194                           ;ipv4.c: 44: err.module = ERROR_MODULE_ARP;
  5195                           
  5196                           ;incstack = 0
  5197  001FB0  0E03               	movlw	3
  5198  001FB2  0101               	movlb	1	; () banked
  5199  001FB4  6F81               	movwf	ipv4_sendFrame@err& (0+255),b
  5200                           
  5201                           ;ipv4.c: 45: uint8_t index;
  5202                           ;ipv4.c: 46: uint8_t static requestCounter = 0;
  5203                           ;ipv4.c: 47: uint8_t const numberOfRequests = 3;
  5204  001FB6  0E03               	movlw	3
  5205  001FB8  6F7E               	movwf	ipv4_sendFrame@numberOfRequests& (0+255),b
  5206                           
  5207                           ;ipv4.c: 48: uint8_t const requestTimeout = 2;
  5208  001FBA  0E02               	movlw	2
  5209  001FBC  6F7F               	movwf	ipv4_sendFrame@requestTimeout& (0+255),b
  5210                           
  5211                           ; BSR set to: 1
  5212                           ;ipv4.c: 49: uint32_t static oldTime = 0;
  5213                           ;ipv4.c: 52: if (ARP_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  5214  001FBE  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ARP_checkForEntry@ip
  5215  001FC2  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ARP_checkForEntry@ip+1
  5216  001FC6  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ARP_checkForEntry@ip+2
  5217  001FCA  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ARP_checkForEntry@ip+3
  5218  001FCE  0E80               	movlw	low ipv4_sendFrame@index
  5219  001FD0  0100               	movlb	0	; () banked
  5220  001FD2  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  5221  001FD4  0E01               	movlw	high ipv4_sendFrame@index
  5222  001FD6  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  5223  001FD8  ECFE  F018         	call	_ARP_checkForEntry	;wreg free
  5224  001FDC  0900               	iorlw	0
  5225  001FDE  B4D8               	btfsc	status,2,c
  5226  001FE0  D06E               	goto	l989
  5227                           
  5228                           ;ipv4.c: 54: ipPacket.ethernet.destination = ARP_getEntryFromTable(index);
  5229  001FE2  0101               	movlb	1	; () banked
  5230  001FE4  5180               	movf	ipv4_sendFrame@index& (0+255),w,b
  5231  001FE6  ECC1  F021         	call	_ARP_getEntryFromTable
  5232  001FEA  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5233  001FEE  0E05               	movlw	5
  5234  001FF0                     u10661:
  5235  001FF0  CFEB FFDB          	movff	plusw0,plusw2
  5236  001FF4  06E8               	decf	wreg,f,c
  5237  001FF6  E2FC               	bc	u10661
  5238                           
  5239                           ;ipv4.c: 55: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  5240  001FF8  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  5241  001FFC  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  5242  002000  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  5243  002004  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  5244  002008  ECE1  F00E         	call	_ipAdressToString	;wreg free
  5245  00200C  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5246  002010  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5247  002014  EC31  F01F         	call	_UARTTransmitText	;wreg free
  5248                           
  5249                           ;ipv4.c: 56: UARTTransmitText(" is at ");
  5250  002018  0EBD               	movlw	low STR_67
  5251  00201A  0100               	movlb	0	; () banked
  5252  00201C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5253  00201E  0E7F               	movlw	high STR_67
  5254  002020  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5255  002022  EC31  F01F         	call	_UARTTransmitText	;wreg free
  5256                           
  5257                           ;ipv4.c: 57: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  5258  002026  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5259  00202A  EE00  F07A         	lfsr	0,macToString@addr
  5260  00202E  0E05               	movlw	5
  5261  002030                     u10671:
  5262  002030  CFDB FFEB          	movff	plusw2,plusw0
  5263  002034  06E8               	decf	wreg,f,c
  5264  002036  E2FC               	bc	u10671
  5265  002038  ECAC  F016         	call	_macToString	;wreg free
  5266  00203C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5267  002040  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5268  002044  EC31  F01F         	call	_UARTTransmitText	;wreg free
  5269                           
  5270                           ;ipv4.c: 58: UARTTransmitText(".\n\r");
  5271  002048  0EE5               	movlw	low (STR_51+1)
  5272  00204A  0100               	movlb	0	; () banked
  5273  00204C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5274  00204E  0E7F               	movlw	high (STR_51+1)
  5275  002050  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5276  002052  EC31  F01F         	call	_UARTTransmitText	;wreg free
  5277                           
  5278                           ;ipv4.c: 60: ipPacket.ethernet.source = ethernetController_getMacAddress();
  5279  002056  EC80  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5280  00205A  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  5281  00205E  0E05               	movlw	5
  5282  002060                     u10681:
  5283  002060  CFEB FFDB          	movff	plusw0,plusw2
  5284  002064  06E8               	decf	wreg,f,c
  5285  002066  E2FC               	bc	u10681
  5286                           
  5287                           ;ipv4.c: 62: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  5288  002068  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5289  00206C  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  5290  002070  0E05               	movlw	5
  5291  002072                     u10691:
  5292  002072  CFDB FFEB          	movff	plusw2,plusw0
  5293  002076  06E8               	decf	wreg,f,c
  5294  002078  E2FC               	bc	u10691
  5295  00207A  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5296  00207E  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  5297  002082  0E08               	movlw	8
  5298  002084                     u10701:
  5299  002084  CFDB FFEB          	movff	plusw2,plusw0
  5300  002088  06E8               	decf	wreg,f,c
  5301  00208A  E2FC               	bc	u10701
  5302  00208C  EC4E  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  5303                           
  5304                           ;ipv4.c: 63: ethernetController_sendPacket(ipPacket.ethernet.memory);
  5305  002090  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5306  002094  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  5307  002098  0E08               	movlw	8
  5308  00209A                     u10711:
  5309  00209A  CFDB FFEB          	movff	plusw2,plusw0
  5310  00209E  06E8               	decf	wreg,f,c
  5311  0020A0  E2FC               	bc	u10711
  5312  0020A2  EC40  F022         	call	_ethernetController_sendPacket	;wreg free
  5313                           
  5314                           ;ipv4.c: 64: err.code = (uint16_t)0;
  5315  0020A6  0E00               	movlw	0
  5316  0020A8  0101               	movlb	1	; () banked
  5317  0020AA  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5318  0020AC  0E00               	movlw	0
  5319  0020AE  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5320                           
  5321                           ; BSR set to: 1
  5322                           ;ipv4.c: 65: return err;
  5323  0020B0  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5324  0020B4  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5325  0020B8  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5326                           
  5327                           ; BSR set to: 1
  5328  0020BC  0012               	return	
  5329  0020BE                     l989:
  5330                           
  5331                           ;ipv4.c: 68: if (getSeconds() - oldTime >= requestTimeout) {
  5332                           
  5333                           ; BSR set to: 1
  5334  0020BE  C17F  F172         	movff	ipv4_sendFrame@requestTimeout,??_ipv4_sendFrame
  5335  0020C2  0101               	movlb	1	; () banked
  5336  0020C4  6B73               	clrf	(??_ipv4_sendFrame+1)& (0+255),b
  5337  0020C6  6B74               	clrf	(??_ipv4_sendFrame+2)& (0+255),b
  5338  0020C8  6B75               	clrf	(??_ipv4_sendFrame+3)& (0+255),b
  5339  0020CA  C19A  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame+4
  5340  0020CE  C19B  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+5
  5341  0020D2  C19C  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+6
  5342  0020D6  C19D  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+7
  5343  0020DA  1F76               	comf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5344  0020DC  1F77               	comf	(??_ipv4_sendFrame+5)& (0+255),f,b
  5345  0020DE  1F78               	comf	(??_ipv4_sendFrame+6)& (0+255),f,b
  5346  0020E0  1F79               	comf	(??_ipv4_sendFrame+7)& (0+255),f,b
  5347  0020E2  2B76               	incf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5348  0020E4  0E00               	movlw	0
  5349  0020E6  2377               	addwfc	(??_ipv4_sendFrame+5)& (0+255),f,b
  5350  0020E8  2378               	addwfc	(??_ipv4_sendFrame+6)& (0+255),f,b
  5351  0020EA  2379               	addwfc	(??_ipv4_sendFrame+7)& (0+255),f,b
  5352  0020EC  EC4D  F023         	call	_getSeconds	;wreg free
  5353  0020F0  0101               	movlb	1	; () banked
  5354  0020F2  5176               	movf	(??_ipv4_sendFrame+4)& (0+255),w,b
  5355  0020F4  0100               	movlb	0	; () banked
  5356  0020F6  2560               	addwf	?_getSeconds& (0+255),w,b
  5357  0020F8  0101               	movlb	1	; () banked
  5358  0020FA  6F7A               	movwf	(??_ipv4_sendFrame+8)& (0+255),b
  5359  0020FC  5177               	movf	(??_ipv4_sendFrame+5)& (0+255),w,b
  5360  0020FE  0100               	movlb	0	; () banked
  5361  002100  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5362  002102  0101               	movlb	1	; () banked
  5363  002104  6F7B               	movwf	(??_ipv4_sendFrame+9)& (0+255),b
  5364  002106  5178               	movf	(??_ipv4_sendFrame+6)& (0+255),w,b
  5365  002108  0100               	movlb	0	; () banked
  5366  00210A  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5367  00210C  0101               	movlb	1	; () banked
  5368  00210E  6F7C               	movwf	(??_ipv4_sendFrame+10)& (0+255),b
  5369  002110  5179               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  5370  002112  0100               	movlb	0	; () banked
  5371  002114  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5372  002116  0101               	movlb	1	; () banked
  5373  002118  6F7D               	movwf	(??_ipv4_sendFrame+11)& (0+255),b
  5374  00211A  5172               	movf	??_ipv4_sendFrame& (0+255),w,b
  5375  00211C  5D7A               	subwf	(??_ipv4_sendFrame+8)& (0+255),w,b
  5376  00211E  5173               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  5377  002120  597B               	subwfb	(??_ipv4_sendFrame+9)& (0+255),w,b
  5378  002122  5174               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  5379  002124  597C               	subwfb	(??_ipv4_sendFrame+10)& (0+255),w,b
  5380  002126  5175               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  5381  002128  597D               	subwfb	(??_ipv4_sendFrame+11)& (0+255),w,b
  5382  00212A  A0D8               	btfss	status,0,c
  5383  00212C  D029               	goto	l994
  5384                           
  5385                           ; BSR set to: 1
  5386                           ;ipv4.c: 69: oldTime = getSeconds();
  5387  00212E  EC4D  F023         	call	_getSeconds	;wreg free
  5388  002132  C060  F19A         	movff	?_getSeconds,ipv4_sendFrame@oldTime
  5389  002136  C061  F19B         	movff	?_getSeconds+1,ipv4_sendFrame@oldTime+1
  5390  00213A  C062  F19C         	movff	?_getSeconds+2,ipv4_sendFrame@oldTime+2
  5391  00213E  C063  F19D         	movff	?_getSeconds+3,ipv4_sendFrame@oldTime+3
  5392                           
  5393                           ;ipv4.c: 70: if (requestCounter < numberOfRequests) {
  5394  002142  0101               	movlb	1	; () banked
  5395  002144  517E               	movf	ipv4_sendFrame@numberOfRequests& (0+255),w,b
  5396  002146  5DA2               	subwf	ipv4_sendFrame@requestCounter& (0+255),w,b
  5397  002148  B0D8               	btfsc	status,0,c
  5398  00214A  D00C               	goto	l993
  5399                           
  5400                           ; BSR set to: 1
  5401                           ;ipv4.c: 71: requestCounter++;
  5402  00214C  2BA2               	incf	ipv4_sendFrame@requestCounter& (0+255),f,b
  5403                           
  5404                           ; BSR set to: 1
  5405                           ;ipv4.c: 72: ARP_sendRequest(ipPacket.ipv4Header.destination);
  5406  00214E  C147  F0F8         	movff	ipv4_sendFrame@ipPacket+19,ARP_sendRequest@ip
  5407  002152  C148  F0F9         	movff	ipv4_sendFrame@ipPacket+20,ARP_sendRequest@ip+1
  5408  002156  C149  F0FA         	movff	ipv4_sendFrame@ipPacket+21,ARP_sendRequest@ip+2
  5409  00215A  C14A  F0FB         	movff	ipv4_sendFrame@ipPacket+22,ARP_sendRequest@ip+3
  5410  00215E  ECB0  F019         	call	_ARP_sendRequest	;wreg free
  5411                           
  5412                           ;ipv4.c: 73: } else {
  5413  002162  D00E               	goto	l994
  5414  002164                     l993:
  5415                           
  5416                           ;ipv4.c: 75: requestCounter = 0;
  5417  002164  0E00               	movlw	0
  5418  002166  0101               	movlb	1	; () banked
  5419  002168  6FA2               	movwf	ipv4_sendFrame@requestCounter& (0+255),b
  5420                           
  5421                           ;ipv4.c: 76: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  5422  00216A  0E01               	movlw	1
  5423  00216C  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5424  00216E  0E92               	movlw	146
  5425  002170  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5426                           
  5427                           ; BSR set to: 1
  5428                           ;ipv4.c: 77: return err;
  5429  002172  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5430  002176  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5431  00217A  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5432                           
  5433                           ; BSR set to: 1
  5434  00217E  0012               	return	
  5435  002180                     l994:
  5436                           
  5437                           ;ipv4.c: 78: }
  5438                           ;ipv4.c: 79: }
  5439                           ;ipv4.c: 80: }
  5440                           ;ipv4.c: 81: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  5441                           
  5442                           ; BSR set to: 1
  5443                           
  5444                           ; BSR set to: 1
  5445                           
  5446                           ; BSR set to: 1
  5447  002180  0E01               	movlw	1
  5448  002182  0101               	movlb	1	; () banked
  5449  002184  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5450  002186  0E91               	movlw	145
  5451  002188  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5452                           
  5453                           ; BSR set to: 1
  5454                           ;ipv4.c: 82: return err;
  5455  00218A  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5456  00218E  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5457  002192  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5458  002196  0012               	return	
  5459  002198                     __end_of_ipv4_sendFrame:
  5460                           	opt stack 0
  5461                           tblptru	equ	0xFF8
  5462                           tblptrh	equ	0xFF7
  5463                           tblptrl	equ	0xFF6
  5464                           tablat	equ	0xFF5
  5465                           prodh	equ	0xFF4
  5466                           prodl	equ	0xFF3
  5467                           intcon	equ	0xFF2
  5468                           intcon3	equ	0xFF0
  5469                           postinc0	equ	0xFEE
  5470                           plusw0	equ	0xFEB
  5471                           fsr0h	equ	0xFEA
  5472                           fsr0l	equ	0xFE9
  5473                           wreg	equ	0xFE8
  5474                           indf1	equ	0xFE7
  5475                           postinc1	equ	0xFE6
  5476                           postdec1	equ	0xFE5
  5477                           plusw1	equ	0xFE3
  5478                           fsr1h	equ	0xFE2
  5479                           fsr1l	equ	0xFE1
  5480                           indf2	equ	0xFDF
  5481                           postinc2	equ	0xFDE
  5482                           postdec2	equ	0xFDD
  5483                           plusw2	equ	0xFDB
  5484                           fsr2h	equ	0xFDA
  5485                           fsr2l	equ	0xFD9
  5486                           status	equ	0xFD8
  5487                           
  5488 ;; *************** function _ARP_sendRequest *****************
  5489 ;; Defined at:
  5490 ;;		line 209 in file "src/stack/protocols/arp.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;  ip              4  152[BANK0 ] struct ipv4_address
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;  request        32   20[BANK1 ] struct ARP_message
  5495 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  5496 ;;  senderMAC       6    4[BANK1 ] struct macaddress
  5497 ;;  targetIP        4   10[BANK1 ] struct ipv4_address
  5498 ;;  senderIP        4    0[BANK1 ] struct ipv4_address
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      void 
  5501 ;; Registers used:
  5502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5508 ;;      Params:         0       4       0       0       0       0       0       0       0
  5509 ;;      Locals:         0       0      52       0       0       0       0       0       0
  5510 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5511 ;;      Totals:         0       4      52       0       0       0       0       0       0
  5512 ;;Total ram usage:       56 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:   10
  5515 ;; This function calls:
  5516 ;;		_ARP_send
  5517 ;;		_ethernetController_getMacAddress
  5518 ;;		_mac_setToBroadcast
  5519 ;; This function is called by:
  5520 ;;		_ipv4_sendFrame
  5521 ;; This function uses a non-reentrant model
  5522 ;;
  5523                           
  5524                           	psect	text10
  5525  003360                     __ptext10:
  5526                           	opt stack 0
  5527  003360                     _ARP_sendRequest:
  5528                           	opt stack 18
  5529                           
  5530                           ;arp.c: 210: ARP_message_t request;
  5531                           ;arp.c: 211: ipv4_address_t senderIP;
  5532                           ;arp.c: 212: ipv4_address_t targetIP;
  5533                           ;arp.c: 213: macaddress_t senderMAC;
  5534                           ;arp.c: 214: macaddress_t targetMAC;
  5535                           ;arp.c: 216: senderMAC = ethernetController_getMacAddress();
  5536                           
  5537                           ; BSR set to: 1
  5538                           ;incstack = 0
  5539  003360  EC80  F01D         	call	_ethernetController_getMacAddress	;wreg free
  5540  003364  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5541  003368  0E05               	movlw	5
  5542  00336A                     u10131:
  5543  00336A  CFEB FFDB          	movff	plusw0,plusw2
  5544  00336E  06E8               	decf	wreg,f,c
  5545  003370  E2FC               	bc	u10131
  5546                           
  5547                           ;arp.c: 217: mac_setToBroadcast(&targetMAC);
  5548  003372  0E0E               	movlw	low ARP_sendRequest@targetMAC
  5549  003374  0100               	movlb	0	; () banked
  5550  003376  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
  5551  003378  0E01               	movlw	high ARP_sendRequest@targetMAC
  5552  00337A  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
  5553  00337C  EC68  F022         	call	_mac_setToBroadcast	;wreg free
  5554                           
  5555                           ;arp.c: 222: targetIP = ip;
  5556  003380  C0F8  F10A         	movff	ARP_sendRequest@ip,ARP_sendRequest@targetIP
  5557  003384  C0F9  F10B         	movff	ARP_sendRequest@ip+1,ARP_sendRequest@targetIP+1
  5558  003388  C0FA  F10C         	movff	ARP_sendRequest@ip+2,ARP_sendRequest@targetIP+2
  5559  00338C  C0FB  F10D         	movff	ARP_sendRequest@ip+3,ARP_sendRequest@targetIP+3
  5560                           
  5561                           ;arp.c: 224: request.hlen = 6;
  5562  003390  0E06               	movlw	6
  5563  003392  0101               	movlb	1	; () banked
  5564  003394  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  5565                           
  5566                           ; BSR set to: 1
  5567                           ;arp.c: 225: request.plen = 4;
  5568  003396  0E04               	movlw	4
  5569  003398  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  5570                           
  5571                           ; BSR set to: 1
  5572                           ;arp.c: 226: request.htype = ARP_HTYPE_ETHERNET;
  5573  00339A  0E00               	movlw	0
  5574  00339C  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  5575  00339E  0E01               	movlw	1
  5576  0033A0  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  5577                           
  5578                           ; BSR set to: 1
  5579                           ;arp.c: 227: request.ptype = ARP_PTYPE_IPv4;
  5580  0033A2  0E08               	movlw	8
  5581  0033A4  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  5582  0033A6  0E00               	movlw	0
  5583  0033A8  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;arp.c: 228: request.operation = ARP_REQUEST;
  5587  0033AA  0E00               	movlw	0
  5588  0033AC  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  5589  0033AE  0E01               	movlw	1
  5590  0033B0  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  5591                           
  5592                           ; BSR set to: 1
  5593                           ;arp.c: 229: request.senderIPAddress = senderIP;
  5594  0033B2  C100  F122         	movff	ARP_sendRequest@senderIP,ARP_sendRequest@request+14
  5595  0033B6  C101  F123         	movff	ARP_sendRequest@senderIP+1,ARP_sendRequest@request+15
  5596  0033BA  C102  F124         	movff	ARP_sendRequest@senderIP+2,ARP_sendRequest@request+16
  5597  0033BE  C103  F125         	movff	ARP_sendRequest@senderIP+3,ARP_sendRequest@request+17
  5598                           
  5599                           ; BSR set to: 1
  5600                           ;arp.c: 230: request.senderMACAddress = senderMAC;
  5601  0033C2  EE21  F004         	lfsr	2,ARP_sendRequest@senderMAC
  5602  0033C6  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  5603  0033CA  0E05               	movlw	5
  5604  0033CC                     u10141:
  5605  0033CC  CFDB FFE3          	movff	plusw2,plusw1
  5606  0033D0  06E8               	decf	wreg,f,c
  5607  0033D2  E2FC               	bc	u10141
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;arp.c: 231: request.targetIPAddress = targetIP;
  5611  0033D4  C10A  F12C         	movff	ARP_sendRequest@targetIP,ARP_sendRequest@request+24
  5612  0033D8  C10B  F12D         	movff	ARP_sendRequest@targetIP+1,ARP_sendRequest@request+25
  5613  0033DC  C10C  F12E         	movff	ARP_sendRequest@targetIP+2,ARP_sendRequest@request+26
  5614  0033E0  C10D  F12F         	movff	ARP_sendRequest@targetIP+3,ARP_sendRequest@request+27
  5615                           
  5616                           ; BSR set to: 1
  5617                           ;arp.c: 232: request.targetMACAddress = targetMAC;
  5618  0033E4  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  5619  0033E8  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  5620  0033EC  0E05               	movlw	5
  5621  0033EE                     u10151:
  5622  0033EE  CFDB FFE3          	movff	plusw2,plusw1
  5623  0033F2  06E8               	decf	wreg,f,c
  5624  0033F4  E2FC               	bc	u10151
  5625                           
  5626                           ; BSR set to: 1
  5627                           ;arp.c: 234: ARP_send(request);
  5628  0033F6  EE21  F014         	lfsr	2,ARP_sendRequest@request
  5629  0033FA  EE00  F0A7         	lfsr	0,ARP_send@arp
  5630  0033FE  0E1F               	movlw	31
  5631  003400                     u10161:
  5632  003400  CFDB FFEB          	movff	plusw2,plusw0
  5633  003404  06E8               	decf	wreg,f,c
  5634  003406  E2FC               	bc	u10161
  5635  003408  ECA5  F00D         	call	_ARP_send	;wreg free
  5636  00340C  0012               	return		;funcret
  5637  00340E                     __end_of_ARP_sendRequest:
  5638                           	opt stack 0
  5639                           tblptru	equ	0xFF8
  5640                           tblptrh	equ	0xFF7
  5641                           tblptrl	equ	0xFF6
  5642                           tablat	equ	0xFF5
  5643                           prodh	equ	0xFF4
  5644                           prodl	equ	0xFF3
  5645                           intcon	equ	0xFF2
  5646                           intcon3	equ	0xFF0
  5647                           postinc0	equ	0xFEE
  5648                           plusw0	equ	0xFEB
  5649                           fsr0h	equ	0xFEA
  5650                           fsr0l	equ	0xFE9
  5651                           wreg	equ	0xFE8
  5652                           indf1	equ	0xFE7
  5653                           postinc1	equ	0xFE6
  5654                           postdec1	equ	0xFE5
  5655                           plusw1	equ	0xFE3
  5656                           fsr1h	equ	0xFE2
  5657                           fsr1l	equ	0xFE1
  5658                           indf2	equ	0xFDF
  5659                           postinc2	equ	0xFDE
  5660                           postdec2	equ	0xFDD
  5661                           plusw2	equ	0xFDB
  5662                           fsr2h	equ	0xFDA
  5663                           fsr2l	equ	0xFD9
  5664                           status	equ	0xFD8
  5665                           
  5666 ;; *************** function _ARP_getEntryFromTable *****************
  5667 ;; Defined at:
  5668 ;;		line 250 in file "src/stack/protocols/arp.c"
  5669 ;; Parameters:    Size  Location     Type
  5670 ;;  index           1    wreg     unsigned char 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  index           1    7[BANK0 ] unsigned char 
  5673 ;; Return value:  Size  Location     Type
  5674 ;;                  6    0[BANK0 ] struct macaddress
  5675 ;; Registers used:
  5676 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5677 ;; Tracked objects:
  5678 ;;		On entry : 0/0
  5679 ;;		On exit  : 0/0
  5680 ;;		Unchanged: 0/0
  5681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5682 ;;      Params:         0       7       0       0       0       0       0       0       0
  5683 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5684 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5685 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5686 ;;Total ram usage:        8 bytes
  5687 ;; Hardware stack levels used:    1
  5688 ;; Hardware stack levels required when called:    4
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		_ipv4_sendFrame
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text11
  5697  004382                     __ptext11:
  5698                           	opt stack 0
  5699  004382                     _ARP_getEntryFromTable:
  5700                           	opt stack 24
  5701                           
  5702                           ;incstack = 0
  5703                           ;ARP_getEntryFromTable@index stored from wreg
  5704  004382  0100               	movlb	0	; () banked
  5705  004384  6F67               	movwf	ARP_getEntryFromTable@index& (0+255),b
  5706                           
  5707                           ;arp.c: 251: return ARP_table[index].mac;
  5708  004386  0100               	movlb	0	; () banked
  5709  004388  5167               	movf	ARP_getEntryFromTable@index& (0+255),w,b
  5710  00438A  0D0E               	mullw	14
  5711  00438C  0E04               	movlw	4
  5712  00438E  26F3               	addwf	prodl,f,c
  5713  004390  0E00               	movlw	0
  5714  004392  22F4               	addwfc	prodh,f,c
  5715  004394  0E00               	movlw	low _ARP_table
  5716  004396  24F3               	addwf	prodl,w,c
  5717  004398  6ED9               	movwf	fsr2l,c
  5718  00439A  0E03               	movlw	high _ARP_table
  5719  00439C  20F4               	addwfc	prodh,w,c
  5720  00439E  6EDA               	movwf	fsr2h,c
  5721  0043A0  EE00  F060         	lfsr	0,?_ARP_getEntryFromTable
  5722  0043A4  0E05               	movlw	5
  5723  0043A6                     u10211:
  5724  0043A6  CFDB FFEB          	movff	plusw2,plusw0
  5725  0043AA  06E8               	decf	wreg,f,c
  5726  0043AC  E2FC               	bc	u10211
  5727  0043AE  0012               	return	
  5728  0043B0                     __end_of_ARP_getEntryFromTable:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           intcon3	equ	0xFF0
  5738                           postinc0	equ	0xFEE
  5739                           plusw0	equ	0xFEB
  5740                           fsr0h	equ	0xFEA
  5741                           fsr0l	equ	0xFE9
  5742                           wreg	equ	0xFE8
  5743                           indf1	equ	0xFE7
  5744                           postinc1	equ	0xFE6
  5745                           postdec1	equ	0xFE5
  5746                           plusw1	equ	0xFE3
  5747                           fsr1h	equ	0xFE2
  5748                           fsr1l	equ	0xFE1
  5749                           indf2	equ	0xFDF
  5750                           postinc2	equ	0xFDE
  5751                           postdec2	equ	0xFDD
  5752                           plusw2	equ	0xFDB
  5753                           fsr2h	equ	0xFDA
  5754                           fsr2l	equ	0xFD9
  5755                           status	equ	0xFD8
  5756                           
  5757 ;; *************** function _ARP_checkForEntry *****************
  5758 ;; Defined at:
  5759 ;;		line 237 in file "src/stack/protocols/arp.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;  ip              4    7[BANK0 ] struct ipv4_address
  5762 ;;  index           2   11[BANK0 ] PTR unsigned char 
  5763 ;;		 -> ipv4_sendFrame@index(1), 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  i               1   21[BANK0 ] unsigned char 
  5766 ;; Return value:  Size  Location     Type
  5767 ;;                  1    wreg      unsigned char 
  5768 ;; Registers used:
  5769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5775 ;;      Params:         0       6       0       0       0       0       0       0       0
  5776 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5777 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5778 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5779 ;;Total ram usage:       15 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    5
  5782 ;; This function calls:
  5783 ;;		_getSeconds
  5784 ;;		_ipv4_cmp
  5785 ;; This function is called by:
  5786 ;;		_ipv4_sendFrame
  5787 ;; This function uses a non-reentrant model
  5788 ;;
  5789                           
  5790                           	psect	text12
  5791  0031FC                     __ptext12:
  5792                           	opt stack 0
  5793  0031FC                     _ARP_checkForEntry:
  5794                           	opt stack 23
  5795                           
  5796                           ;arp.c: 238: for (uint8_t i = 0; i < 8; i++) {
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;incstack = 0
  5800  0031FC  0E00               	movlw	0
  5801  0031FE  0100               	movlb	0	; () banked
  5802  003200  6F75               	movwf	ARP_checkForEntry@i& (0+255),b
  5803  003202                     l8057:
  5804                           
  5805                           ; BSR set to: 0
  5806  003202  0E07               	movlw	7
  5807  003204  6575               	cpfsgt	ARP_checkForEntry@i& (0+255),b
  5808  003206  D001               	goto	l928
  5809  003208  D050               	goto	u10200
  5810  00320A                     l928:
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;arp.c: 239: if (ipv4_cmp(&ARP_table[i].ip, &ip)) {
  5814                           
  5815                           ; BSR set to: 0
  5816  00320A  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5817  00320C  0D0E               	mullw	14
  5818  00320E  0E00               	movlw	low _ARP_table
  5819  003210  24F3               	addwf	prodl,w,c
  5820  003212  6F60               	movwf	ipv4_cmp@a& (0+255),b
  5821  003214  0E03               	movlw	high _ARP_table
  5822  003216  20F4               	addwfc	prodh,w,c
  5823  003218  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  5824  00321A  0E67               	movlw	low ARP_checkForEntry@ip
  5825  00321C  6F62               	movwf	ipv4_cmp@b& (0+255),b
  5826  00321E  0E00               	movlw	high ARP_checkForEntry@ip
  5827  003220  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  5828  003222  EC88  F020         	call	_ipv4_cmp	;wreg free
  5829  003226  0100               	movlb	0	; () banked
  5830  003228  A0D8               	btfss	status,0,c
  5831  00322A  D03D               	goto	l931
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;arp.c: 240: if (getSeconds() - ARP_table[i].secondsCreated < 300) {
  5835  00322C  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5836  00322E  0D0E               	mullw	14
  5837  003230  0E0A               	movlw	10
  5838  003232  26F3               	addwf	prodl,f,c
  5839  003234  0E00               	movlw	0
  5840  003236  22F4               	addwfc	prodh,f,c
  5841  003238  0E00               	movlw	low _ARP_table
  5842  00323A  24F3               	addwf	prodl,w,c
  5843  00323C  6ED9               	movwf	fsr2l,c
  5844  00323E  0E03               	movlw	high _ARP_table
  5845  003240  20F4               	addwfc	prodh,w,c
  5846  003242  6EDA               	movwf	fsr2h,c
  5847  003244  CFDE F06D          	movff	postinc2,??_ARP_checkForEntry
  5848  003248  CFDE F06E          	movff	postinc2,??_ARP_checkForEntry+1
  5849  00324C  CFDE F06F          	movff	postinc2,??_ARP_checkForEntry+2
  5850  003250  CFDE F070          	movff	postinc2,??_ARP_checkForEntry+3
  5851  003254  1F6D               	comf	??_ARP_checkForEntry& (0+255),f,b
  5852  003256  1F6E               	comf	(??_ARP_checkForEntry+1)& (0+255),f,b
  5853  003258  1F6F               	comf	(??_ARP_checkForEntry+2)& (0+255),f,b
  5854  00325A  1F70               	comf	(??_ARP_checkForEntry+3)& (0+255),f,b
  5855  00325C  2B6D               	incf	??_ARP_checkForEntry& (0+255),f,b
  5856  00325E  0E00               	movlw	0
  5857  003260  236E               	addwfc	(??_ARP_checkForEntry+1)& (0+255),f,b
  5858  003262  236F               	addwfc	(??_ARP_checkForEntry+2)& (0+255),f,b
  5859  003264  2370               	addwfc	(??_ARP_checkForEntry+3)& (0+255),f,b
  5860  003266  EC4D  F023         	call	_getSeconds	;wreg free
  5861  00326A  0100               	movlb	0	; () banked
  5862  00326C  516D               	movf	??_ARP_checkForEntry& (0+255),w,b
  5863  00326E  2560               	addwf	?_getSeconds& (0+255),w,b
  5864  003270  6F71               	movwf	(??_ARP_checkForEntry+4)& (0+255),b
  5865  003272  516E               	movf	(??_ARP_checkForEntry+1)& (0+255),w,b
  5866  003274  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5867  003276  6F72               	movwf	(??_ARP_checkForEntry+5)& (0+255),b
  5868  003278  516F               	movf	(??_ARP_checkForEntry+2)& (0+255),w,b
  5869  00327A  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5870  00327C  6F73               	movwf	(??_ARP_checkForEntry+6)& (0+255),b
  5871  00327E  5170               	movf	(??_ARP_checkForEntry+3)& (0+255),w,b
  5872  003280  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5873  003282  6F74               	movwf	(??_ARP_checkForEntry+7)& (0+255),b
  5874  003284  5174               	movf	(??_ARP_checkForEntry+7)& (0+255),w,b
  5875  003286  1173               	iorwf	(??_ARP_checkForEntry+6)& (0+255),w,b
  5876  003288  E10E               	bnz	l8071
  5877  00328A  0E2C               	movlw	44
  5878  00328C  5D71               	subwf	(??_ARP_checkForEntry+4)& (0+255),w,b
  5879  00328E  0E01               	movlw	1
  5880  003290  5972               	subwfb	(??_ARP_checkForEntry+5)& (0+255),w,b
  5881  003292  B0D8               	btfsc	status,0,c
  5882  003294  D008               	goto	l931
  5883                           
  5884                           ; BSR set to: 0
  5885                           ;arp.c: 242: *index = i;
  5886  003296  C06B  FFD9         	movff	ARP_checkForEntry@index,fsr2l
  5887  00329A  C06C  FFDA         	movff	ARP_checkForEntry@index+1,fsr2h
  5888  00329E  C075  FFDF         	movff	ARP_checkForEntry@i,indf2
  5889                           
  5890                           ; BSR set to: 0
  5891                           ;arp.c: 243: return 1;
  5892  0032A2  0E01               	movlw	1
  5893                           
  5894                           ; BSR set to: 0
  5895  0032A4  0012               	return	
  5896  0032A6                     l931:
  5897  0032A6                     l8071:
  5898                           
  5899                           ; BSR set to: 0
  5900  0032A6  2B75               	incf	ARP_checkForEntry@i& (0+255),f,b
  5901  0032A8  D7AC               	goto	l8057
  5902  0032AA                     u10200:
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;arp.c: 244: }
  5906                           ;arp.c: 245: }
  5907                           ;arp.c: 246: }
  5908                           ;arp.c: 247: return 0;
  5909                           
  5910                           ; BSR set to: 0
  5911  0032AA  0E00               	movlw	0
  5912  0032AC  0012               	return	
  5913  0032AE                     __end_of_ARP_checkForEntry:
  5914                           	opt stack 0
  5915                           tblptru	equ	0xFF8
  5916                           tblptrh	equ	0xFF7
  5917                           tblptrl	equ	0xFF6
  5918                           tablat	equ	0xFF5
  5919                           prodh	equ	0xFF4
  5920                           prodl	equ	0xFF3
  5921                           intcon	equ	0xFF2
  5922                           intcon3	equ	0xFF0
  5923                           postinc0	equ	0xFEE
  5924                           plusw0	equ	0xFEB
  5925                           fsr0h	equ	0xFEA
  5926                           fsr0l	equ	0xFE9
  5927                           wreg	equ	0xFE8
  5928                           indf1	equ	0xFE7
  5929                           postinc1	equ	0xFE6
  5930                           postdec1	equ	0xFE5
  5931                           plusw1	equ	0xFE3
  5932                           fsr1h	equ	0xFE2
  5933                           fsr1l	equ	0xFE1
  5934                           indf2	equ	0xFDF
  5935                           postinc2	equ	0xFDE
  5936                           postdec2	equ	0xFDD
  5937                           plusw2	equ	0xFDB
  5938                           fsr2h	equ	0xFDA
  5939                           fsr2l	equ	0xFD9
  5940                           status	equ	0xFD8
  5941                           
  5942 ;; *************** function _ethernet_rxGetNewFrame *****************
  5943 ;; Defined at:
  5944 ;;		line 53 in file "src/eth/ethernet.c"
  5945 ;; Parameters:    Size  Location     Type
  5946 ;;  frame           2  116[BANK1 ] PTR struct ethernetFrame
  5947 ;;		 -> stack.ethernet(15), stack(113), 
  5948 ;; Auto vars:     Size  Location     Type
  5949 ;;  err             3  156[BANK0 ] struct error
  5950 ;; Return value:  Size  Location     Type
  5951 ;;                  3  116[BANK1 ] struct error
  5952 ;; Registers used:
  5953 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5954 ;; Tracked objects:
  5955 ;;		On entry : 0/0
  5956 ;;		On exit  : 0/0
  5957 ;;		Unchanged: 0/0
  5958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5959 ;;      Params:         0       0       3       0       0       0       0       0       0
  5960 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5961 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5962 ;;      Totals:         0       3      11       0       0       0       0       0       0
  5963 ;;Total ram usage:       14 bytes
  5964 ;; Hardware stack levels used:    1
  5965 ;; Hardware stack levels required when called:   12
  5966 ;; This function calls:
  5967 ;;		_ARP_handleNewPacket
  5968 ;;		_UARTTransmitInt
  5969 ;;		_UARTTransmitText
  5970 ;;		_etherTypeToString
  5971 ;;		_ethernetController_dropPacket
  5972 ;;		_ethernetController_getEtherTypeField
  5973 ;;		_ethernetController_getNextPacketPointer
  5974 ;;		_ethernetController_getRSV
  5975 ;;		_ethernetController_updateNextPacketPointer
  5976 ;;		_intToString
  5977 ;;		_ipv4_handleNewPacket
  5978 ;;		_macToString
  5979 ;; This function is called by:
  5980 ;;		_handleStackBackgroundTasks
  5981 ;; This function uses a non-reentrant model
  5982 ;;
  5983                           
  5984                           	psect	text13
  5985  00059E                     __ptext13:
  5986                           	opt stack 0
  5987  00059E                     _ethernet_rxGetNewFrame:
  5988                           	opt stack 17
  5989                           
  5990                           ;ethernet.c: 54: uint32_t static counter = 0;
  5991                           ;ethernet.c: 55: error_t err;
  5992                           ;ethernet.c: 56: err.module = ERROR_MODULE_ETHERNET;
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;incstack = 0
  5996  00059E  0E02               	movlw	2
  5997  0005A0  0100               	movlb	0	; () banked
  5998  0005A2  6FFC               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5999                           
  6000                           ;ethernet.c: 57: err.code = (uint16_t)0;
  6001  0005A4  0E00               	movlw	0
  6002  0005A6  6FFE               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6003  0005A8  0E00               	movlw	0
  6004  0005AA  6FFD               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6005                           
  6006                           ; BSR set to: 0
  6007                           ;ethernet.c: 58: frame->memory.start = ethernetController_getNextPacketPointer();
  6008  0005AC  EC67  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  6009  0005B0  0101               	movlb	1	; () banked
  6010  0005B2  EE20 F010          	lfsr	2,16
  6011  0005B6  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6012  0005B8  26D9               	addwf	fsr2l,f,c
  6013  0005BA  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6014  0005BC  22DA               	addwfc	fsr2h,f,c
  6015  0005BE  0100               	movlb	0	; () banked
  6016  0005C0  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6017  0005C4  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;ethernet.c: 60: ethernetController_updateNextPacketPointer();
  6021  0005C8  ECCD  F01C         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6022                           
  6023                           ;ethernet.c: 63: frame->memory.fIsAssigned = 1;
  6024  0005CC  0101               	movlb	1	; () banked
  6025  0005CE  EE20 F016          	lfsr	2,22
  6026  0005D2  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6027  0005D4  26D9               	addwf	fsr2l,f,c
  6028  0005D6  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6029  0005D8  22DA               	addwfc	fsr2h,f,c
  6030  0005DA  0E01               	movlw	1
  6031  0005DC  6EDF               	movwf	indf2,c
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;ethernet.c: 64: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6035  0005DE  EE20 F010          	lfsr	2,16
  6036  0005E2  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6037  0005E4  26D9               	addwf	fsr2l,f,c
  6038  0005E6  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6039  0005E8  22DA               	addwfc	fsr2h,f,c
  6040  0005EA  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6041  0005EE  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6042  0005F2  EC46  F01D         	call	_ethernetController_getRSV	;wreg free
  6043  0005F6  0101               	movlb	1	; () banked
  6044  0005F8  EE20 F019          	lfsr	2,25
  6045  0005FC  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6046  0005FE  26D9               	addwf	fsr2l,f,c
  6047  000600  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6048  000602  22DA               	addwfc	fsr2h,f,c
  6049  000604  0E04               	movlw	4
  6050  000606                     u10551:
  6051  000606  CFEB FFDB          	movff	plusw0,plusw2
  6052  00060A  06E8               	decf	wreg,f,c
  6053  00060C  E2FC               	bc	u10551
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;ethernet.c: 65: frame->memory.length = frame->receiveStatusVector.length;
  6057  00060E  EE20 F019          	lfsr	2,25
  6058  000612  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6059  000614  26D9               	addwf	fsr2l,f,c
  6060  000616  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6061  000618  22DA               	addwfc	fsr2h,f,c
  6062  00061A  EE10 F014          	lfsr	1,20
  6063  00061E  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6064  000620  26E1               	addwf	fsr1l,f,c
  6065  000622  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6066  000624  22E2               	addwfc	fsr1h,f,c
  6067  000626  CFDE FFE6          	movff	postinc2,postinc1
  6068  00062A  CFDD FFE5          	movff	postdec2,postdec1
  6069                           
  6070                           ; BSR set to: 1
  6071                           ;ethernet.c: 68: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6072  00062E  EE20 F014          	lfsr	2,20
  6073  000632  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6074  000634  26D9               	addwf	fsr2l,f,c
  6075  000636  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6076  000638  22DA               	addwfc	fsr2h,f,c
  6077  00063A  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6078  00063E  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6079  000642  EE20 F010          	lfsr	2,16
  6080  000646  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6081  000648  26D9               	addwf	fsr2l,f,c
  6082  00064A  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6083  00064C  22DA               	addwfc	fsr2h,f,c
  6084  00064E  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6085  000652  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6086  000656  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6087  000658  2779               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6088  00065A  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6089  00065C  237A               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6090  00065E  0E60               	movlw	96
  6091  000660  5D7A               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6092  000662  A0D8               	btfss	status,0,c
  6093  000664  D03B               	goto	l362
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;ethernet.c: 70: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6097  000666  0E00               	movlw	0
  6098  000668  6F77               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6099  00066A  0E30               	movlw	48
  6100  00066C  6F78               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6101  00066E  EE20 F014          	lfsr	2,20
  6102  000672  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6103  000674  26D9               	addwf	fsr2l,f,c
  6104  000676  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6105  000678  22DA               	addwfc	fsr2h,f,c
  6106  00067A  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6107  00067E  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6108  000682  0EFF               	movlw	255
  6109  000684  6F7B               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6110  000686  0E2F               	movlw	47
  6111  000688  6F7C               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6112  00068A  EE20 F010          	lfsr	2,16
  6113  00068E  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6114  000690  26D9               	addwf	fsr2l,f,c
  6115  000692  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6116  000694  22DA               	addwfc	fsr2h,f,c
  6117  000696  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6118  00069A  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6119  00069E  1F7D               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6120  0006A0  1F7E               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6121  0006A2  4B7D               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6122  0006A4  2B7E               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6123  0006A6  517B               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6124  0006A8  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6125  0006AA  517C               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6126  0006AC  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6127  0006AE  1F7D               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6128  0006B0  1F7E               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6129  0006B2  4B7D               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6130  0006B4  2B7E               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6131  0006B6  5179               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6132  0006B8  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6133  0006BA  517A               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6134  0006BC  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6135  0006BE  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6136  0006C0  277D               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6137  0006C2  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6138  0006C4  237E               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6139  0006C6  EE20 F012          	lfsr	2,18
  6140  0006CA  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6141  0006CC  26D9               	addwf	fsr2l,f,c
  6142  0006CE  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6143  0006D0  22DA               	addwfc	fsr2h,f,c
  6144  0006D2  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6145  0006D6  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6146                           
  6147                           ;ethernet.c: 71: } else {
  6148  0006DA  D022               	goto	l363
  6149  0006DC                     l362:
  6150                           
  6151                           ; BSR set to: 1
  6152                           ;ethernet.c: 72: frame->memory.end = frame->memory.start + frame->memory.length;
  6153                           
  6154                           ; BSR set to: 1
  6155  0006DC  EE20 F014          	lfsr	2,20
  6156  0006E0  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6157  0006E2  26D9               	addwf	fsr2l,f,c
  6158  0006E4  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6159  0006E6  22DA               	addwfc	fsr2h,f,c
  6160  0006E8  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6161  0006EC  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6162  0006F0  EE20 F010          	lfsr	2,16
  6163  0006F4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6164  0006F6  26D9               	addwf	fsr2l,f,c
  6165  0006F8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6166  0006FA  22DA               	addwfc	fsr2h,f,c
  6167  0006FC  CFDE F179          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6168  000700  CFDD F17A          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6169  000704  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6170  000706  2779               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6171  000708  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6172  00070A  237A               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6173  00070C  EE20 F012          	lfsr	2,18
  6174  000710  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6175  000712  26D9               	addwf	fsr2l,f,c
  6176  000714  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6177  000716  22DA               	addwfc	fsr2h,f,c
  6178  000718  C179  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6179  00071C  C17A  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6180  000720                     l363:
  6181                           
  6182                           ; BSR set to: 1
  6183                           ;ethernet.c: 73: }
  6184                           ;ethernet.c: 74: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  6185                           
  6186                           ; BSR set to: 1
  6187  000720  EE20 F010          	lfsr	2,16
  6188  000724  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6189  000726  26D9               	addwf	fsr2l,f,c
  6190  000728  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6191  00072A  22DA               	addwfc	fsr2h,f,c
  6192  00072C  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  6193  000730  0E08               	movlw	8
  6194  000732                     u10571:
  6195  000732  CFDB FFEB          	movff	plusw2,plusw0
  6196  000736  06E8               	decf	wreg,f,c
  6197  000738  E2FC               	bc	u10571
  6198  00073A  ECF3  F01D         	call	_ethernetController_getEtherTypeField	;wreg free
  6199  00073E  0101               	movlb	1	; () banked
  6200  000740  EE20 F00E          	lfsr	2,14
  6201  000744  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6202  000746  26D9               	addwf	fsr2l,f,c
  6203  000748  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6204  00074A  22DA               	addwfc	fsr2h,f,c
  6205  00074C  0100               	movlb	0	; () banked
  6206  00074E  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  6207  000752  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  6208                           
  6209                           ; BSR set to: 0
  6210                           ;ethernet.c: 76: UARTTransmitText("[");
  6211  000756  0EDD               	movlw	low (STR_58+3)
  6212  000758  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6213  00075A  0E7F               	movlw	high (STR_58+3)
  6214  00075C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6215  00075E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6216                           
  6217                           ;ethernet.c: 77: UARTTransmitText(intToString(counter++));
  6218  000762  C19E  F073         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  6219  000766  C19F  F074         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  6220  00076A  C1A0  F075         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  6221  00076E  C1A1  F076         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  6222  000772  EC42  F00C         	call	_intToString	;wreg free
  6223  000776  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6224  00077A  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6225  00077E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6226  000782  0E01               	movlw	1
  6227  000784  0101               	movlb	1	; () banked
  6228  000786  279E               	addwf	ethernet_rxGetNewFrame@counter& (0+255),f,b
  6229  000788  0E00               	movlw	0
  6230  00078A  239F               	addwfc	(ethernet_rxGetNewFrame@counter+1)& (0+255),f,b
  6231  00078C  23A0               	addwfc	(ethernet_rxGetNewFrame@counter+2)& (0+255),f,b
  6232  00078E  23A1               	addwfc	(ethernet_rxGetNewFrame@counter+3)& (0+255),f,b
  6233                           
  6234                           ; BSR set to: 1
  6235                           ;ethernet.c: 78: UARTTransmitText("]");
  6236  000790  0EFC               	movlw	low (STR_20+1)
  6237  000792  0100               	movlb	0	; () banked
  6238  000794  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6239  000796  0E7F               	movlw	high (STR_20+1)
  6240  000798  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6241  00079A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6242                           
  6243                           ;ethernet.c: 80: if (frame->receiveStatusVector.broadcast)
  6244  00079E  0101               	movlb	1	; () banked
  6245  0007A0  EE20 F01B          	lfsr	2,27
  6246  0007A4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6247  0007A6  26D9               	addwf	fsr2l,f,c
  6248  0007A8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6249  0007AA  22DA               	addwfc	fsr2h,f,c
  6250  0007AC  AEDF               	btfss	indf2,7,c
  6251  0007AE  D007               	goto	l364
  6252                           
  6253                           ; BSR set to: 1
  6254                           ;ethernet.c: 81: UARTTransmitText("[Broadcast]");
  6255  0007B0  0E8B               	movlw	low STR_7
  6256  0007B2  0100               	movlb	0	; () banked
  6257  0007B4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6258  0007B6  0E7F               	movlw	high STR_7
  6259  0007B8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6260  0007BA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6261  0007BE                     l364:
  6262                           
  6263                           ;ethernet.c: 82: if (frame->receiveStatusVector.unicast)
  6264  0007BE  0101               	movlb	1	; () banked
  6265  0007C0  EE20 F01D          	lfsr	2,29
  6266  0007C4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6267  0007C6  26D9               	addwf	fsr2l,f,c
  6268  0007C8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6269  0007CA  22DA               	addwfc	fsr2h,f,c
  6270  0007CC  A4DF               	btfss	indf2,2,c
  6271  0007CE  D007               	goto	l365
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;ethernet.c: 83: UARTTransmitText("[Unicast]");
  6275  0007D0  0EA1               	movlw	low STR_8
  6276  0007D2  0100               	movlb	0	; () banked
  6277  0007D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6278  0007D6  0E7F               	movlw	high STR_8
  6279  0007D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6280  0007DA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6281  0007DE                     l365:
  6282                           
  6283                           ;ethernet.c: 84: if (!frame->receiveStatusVector.receivedOk)
  6284  0007DE  0101               	movlb	1	; () banked
  6285  0007E0  EE20 F01B          	lfsr	2,27
  6286  0007E4  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6287  0007E6  26D9               	addwf	fsr2l,f,c
  6288  0007E8  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6289  0007EA  22DA               	addwfc	fsr2h,f,c
  6290  0007EC  BADF               	btfsc	indf2,5,c
  6291  0007EE  D09E               	goto	l367
  6292                           
  6293                           ; BSR set to: 1
  6294                           ;ethernet.c: 85: UARTTransmitText("[Symbol Errors]");
  6295  0007F0  0E1A               	movlw	low STR_9
  6296  0007F2  0100               	movlb	0	; () banked
  6297  0007F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6298  0007F6  0E7F               	movlw	high STR_9
  6299  0007F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6300  0007FA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6301                           
  6302                           ;ethernet.c: 87: switch (frame->ethertype) {
  6303  0007FE  D096               	goto	l367
  6304  000800                     
  6305                           ;ethernet.c: 89: UARTTransmitText("[ARP]");
  6306  000800  0ED4               	movlw	low STR_10
  6307  000802  0100               	movlb	0	; () banked
  6308  000804  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6309  000806  0E7F               	movlw	high STR_10
  6310  000808  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6311  00080A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6312                           
  6313                           ;ethernet.c: 90: ARP_handleNewPacket(frame);
  6314  00080E  C174  F0F8         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  6315  000812  C175  F0F9         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  6316  000816  ECCC  F010         	call	_ARP_handleNewPacket	;wreg free
  6317                           
  6318                           ;ethernet.c: 93: break;
  6319                           
  6320                           ;ethernet.c: 92: case ETHERTYPE_FLOW_CONTROL:
  6321                           
  6322                           ;ethernet.c: 91: break;
  6323  00081A  D0AA               	goto	l369
  6324  00081C                     
  6325                           ;ethernet.c: 95: UARTTransmitText("[IPv4]");
  6326  00081C  0ECD               	movlw	low STR_11
  6327  00081E  0100               	movlb	0	; () banked
  6328  000820  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6329  000822  0E7F               	movlw	high STR_11
  6330  000824  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6331  000826  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6332                           
  6333                           ;ethernet.c: 96: ipv4_handleNewPacket(frame);
  6334  00082A  C174  F09A         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  6335  00082E  C175  F09B         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  6336  000832  EC02  F023         	call	_ipv4_handleNewPacket	;wreg free
  6337                           
  6338                           ;ethernet.c: 99: break;
  6339                           
  6340                           ;ethernet.c: 98: case ETHERTYPE_WOL:
  6341                           
  6342                           ;ethernet.c: 97: break;
  6343  000836  D09C               	goto	l369
  6344  000838                     
  6345                           ;ethernet.c: 101: UARTTransmitText("[");
  6346  000838  0EDD               	movlw	low (STR_58+3)
  6347  00083A  0100               	movlb	0	; () banked
  6348  00083C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6349  00083E  0E7F               	movlw	high (STR_58+3)
  6350  000840  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6351  000842  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6352                           
  6353                           ;ethernet.c: 102: UARTTransmitText(macToString(frame->source));
  6354  000846  0101               	movlb	1	; () banked
  6355  000848  EE20 F002          	lfsr	2,2
  6356  00084C  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6357  00084E  26D9               	addwf	fsr2l,f,c
  6358  000850  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6359  000852  22DA               	addwfc	fsr2h,f,c
  6360  000854  EE00  F07A         	lfsr	0,macToString@addr
  6361  000858  0E05               	movlw	5
  6362  00085A                     u10611:
  6363  00085A  CFDB FFEB          	movff	plusw2,plusw0
  6364  00085E  06E8               	decf	wreg,f,c
  6365  000860  E2FC               	bc	u10611
  6366  000862  ECAC  F016         	call	_macToString	;wreg free
  6367  000866  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6368  00086A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6369  00086E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6370                           
  6371                           ;ethernet.c: 103: UARTTransmitText("->");
  6372  000872  0EF5               	movlw	low STR_13
  6373  000874  0100               	movlb	0	; () banked
  6374  000876  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6375  000878  0E7F               	movlw	high STR_13
  6376  00087A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6377  00087C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6378                           
  6379                           ;ethernet.c: 104: UARTTransmitText(macToString(frame->destination));
  6380  000880  0101               	movlb	1	; () banked
  6381  000882  EE20 F008          	lfsr	2,8
  6382  000886  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6383  000888  26D9               	addwf	fsr2l,f,c
  6384  00088A  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6385  00088C  22DA               	addwfc	fsr2h,f,c
  6386  00088E  EE00  F07A         	lfsr	0,macToString@addr
  6387  000892  0E05               	movlw	5
  6388  000894                     u10621:
  6389  000894  CFDB FFEB          	movff	plusw2,plusw0
  6390  000898  06E8               	decf	wreg,f,c
  6391  00089A  E2FC               	bc	u10621
  6392  00089C  ECAC  F016         	call	_macToString	;wreg free
  6393  0008A0  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6394  0008A4  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6395  0008A8  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6396                           
  6397                           ;ethernet.c: 105: UARTTransmitText("][");
  6398  0008AC  0EF8               	movlw	low STR_14
  6399  0008AE  0100               	movlb	0	; () banked
  6400  0008B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6401  0008B2  0E7F               	movlw	high STR_14
  6402  0008B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6403  0008B6  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6404                           
  6405                           ;ethernet.c: 106: UARTTransmitText(etherTypeToString(frame->ethertype));
  6406  0008BA  0101               	movlb	1	; () banked
  6407  0008BC  EE20 F00E          	lfsr	2,14
  6408  0008C0  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6409  0008C2  26D9               	addwf	fsr2l,f,c
  6410  0008C4  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6411  0008C6  22DA               	addwfc	fsr2h,f,c
  6412  0008C8  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  6413  0008CC  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  6414  0008D0  EC23  F020         	call	_etherTypeToString	;wreg free
  6415  0008D4  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  6416  0008D8  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  6417  0008DC  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6418                           
  6419                           ;ethernet.c: 107: UARTTransmitText("][L=");
  6420  0008E0  0EE9               	movlw	low STR_15
  6421  0008E2  0100               	movlb	0	; () banked
  6422  0008E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6423  0008E6  0E7F               	movlw	high STR_15
  6424  0008E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6425  0008EA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6426                           
  6427                           ;ethernet.c: 108: UARTTransmitInt(frame->length);
  6428  0008EE  C174  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  6429  0008F2  C175  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  6430  0008F6  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6431  0008FA  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6432  0008FE  C177  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  6433  000902  C178  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  6434  000906  0100               	movlb	0	; () banked
  6435  000908  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  6436  00090A  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  6437  00090C  ECC5  F022         	call	_UARTTransmitInt	;wreg free
  6438                           
  6439                           ;ethernet.c: 109: UARTTransmitText("]");
  6440  000910  0EFC               	movlw	low (STR_20+1)
  6441  000912  0100               	movlb	0	; () banked
  6442  000914  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6443  000916  0E7F               	movlw	high (STR_20+1)
  6444  000918  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6445  00091A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6446                           
  6447                           ;ethernet.c: 110: ethernetController_dropPacket(frame);
  6448  00091E  C174  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  6449  000922  C175  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  6450  000926  ECC9  F020         	call	_ethernetController_dropPacket	;wreg free
  6451                           
  6452                           ;ethernet.c: 111: break;
  6453  00092A  D022               	goto	l369
  6454  00092C                     l367:
  6455  00092C  0101               	movlb	1	; () banked
  6456  00092E  EE20 F00E          	lfsr	2,14
  6457  000932  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6458  000934  26D9               	addwf	fsr2l,f,c
  6459  000936  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6460  000938  22DA               	addwfc	fsr2h,f,c
  6461  00093A  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6462  00093E  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6463                           
  6464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6465                           ; Switch size 1, requested type "space"
  6466                           ; Number of cases is 2, Range of values is 8 to 136
  6467                           ; switch strategies available:
  6468                           ; Name         Instructions Cycles
  6469                           ; simple_byte            7     4 (average)
  6470                           ;	Chosen strategy is simple_byte
  6471  000942  5178               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6472  000944  0A08               	xorlw	8	; case 8
  6473  000946  B4D8               	btfsc	status,2,c
  6474  000948  D004               	goto	l9053
  6475  00094A  0A80               	xorlw	128	; case 136
  6476  00094C  B4D8               	btfsc	status,2,c
  6477  00094E  D00C               	goto	l9055
  6478  000950  D773               	goto	l373
  6479  000952                     l9053:
  6480                           
  6481                           ; BSR set to: 1
  6482                           ; Switch size 1, requested type "space"
  6483                           ; Number of cases is 3, Range of values is 0 to 66
  6484                           ; switch strategies available:
  6485                           ; Name         Instructions Cycles
  6486                           ; simple_byte           10     6 (average)
  6487                           ;	Chosen strategy is simple_byte
  6488  000952  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6489  000954  0A00               	xorlw	0	; case 0
  6490  000956  B4D8               	btfsc	status,2,c
  6491  000958  D761               	goto	l371
  6492  00095A  0A06               	xorlw	6	; case 6
  6493  00095C  B4D8               	btfsc	status,2,c
  6494  00095E  D750               	goto	l368
  6495  000960  0A44               	xorlw	68	; case 66
  6496  000962  B4D8               	btfsc	status,2,c
  6497  000964  D005               	goto	l369
  6498  000966  D768               	goto	l373
  6499  000968                     l9055:
  6500                           
  6501                           ; BSR set to: 1
  6502                           ; Switch size 1, requested type "space"
  6503                           ; Number of cases is 1, Range of values is 8 to 8
  6504                           ; switch strategies available:
  6505                           ; Name         Instructions Cycles
  6506                           ; simple_byte            4     3 (average)
  6507                           ;	Chosen strategy is simple_byte
  6508  000968  5177               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6509  00096A  0A08               	xorlw	8	; case 8
  6510  00096C  A4D8               	btfss	status,2,c
  6511  00096E  D764               	goto	l373
  6512  000970                     l369:
  6513                           
  6514                           ;ethernet.c: 115: UARTTransmitText("[");
  6515                           
  6516                           ; BSR set to: 1
  6517  000970  0EDD               	movlw	low (STR_58+3)
  6518  000972  0100               	movlb	0	; () banked
  6519  000974  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6520  000976  0E7F               	movlw	high (STR_58+3)
  6521  000978  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6522  00097A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6523                           
  6524                           ;ethernet.c: 116: UARTTransmitText(intToString(frame->memory.start));
  6525  00097E  0101               	movlb	1	; () banked
  6526  000980  EE20 F010          	lfsr	2,16
  6527  000984  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6528  000986  26D9               	addwf	fsr2l,f,c
  6529  000988  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6530  00098A  22DA               	addwfc	fsr2h,f,c
  6531  00098C  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6532  000990  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6533  000994  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6534  000998  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6535  00099C  0100               	movlb	0	; () banked
  6536  00099E  6B75               	clrf	(intToString@val+2)& (0+255),b
  6537  0009A0  6B76               	clrf	(intToString@val+3)& (0+255),b
  6538  0009A2  EC42  F00C         	call	_intToString	;wreg free
  6539  0009A6  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6540  0009AA  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6541  0009AE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6542                           
  6543                           ;ethernet.c: 117: UARTTransmitText(" to ");
  6544  0009B2  0E15               	movlw	low (STR_63+11)
  6545  0009B4  0100               	movlb	0	; () banked
  6546  0009B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6547  0009B8  0E7F               	movlw	high (STR_63+11)
  6548  0009BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6549  0009BC  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6550                           
  6551                           ;ethernet.c: 118: UARTTransmitText(intToString(frame->memory.end));
  6552  0009C0  0101               	movlb	1	; () banked
  6553  0009C2  EE20 F012          	lfsr	2,18
  6554  0009C6  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6555  0009C8  26D9               	addwf	fsr2l,f,c
  6556  0009CA  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6557  0009CC  22DA               	addwfc	fsr2h,f,c
  6558  0009CE  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6559  0009D2  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6560  0009D6  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6561  0009DA  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6562  0009DE  0100               	movlb	0	; () banked
  6563  0009E0  6B75               	clrf	(intToString@val+2)& (0+255),b
  6564  0009E2  6B76               	clrf	(intToString@val+3)& (0+255),b
  6565  0009E4  EC42  F00C         	call	_intToString	;wreg free
  6566  0009E8  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6567  0009EC  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6568  0009F0  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6569                           
  6570                           ;ethernet.c: 119: UARTTransmitText(" (");
  6571  0009F4  0EF2               	movlw	low STR_19
  6572  0009F6  0100               	movlb	0	; () banked
  6573  0009F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6574  0009FA  0E7F               	movlw	high STR_19
  6575  0009FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6576  0009FE  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6577                           
  6578                           ;ethernet.c: 120: UARTTransmitText(intToString(frame->memory.length));
  6579  000A02  0101               	movlb	1	; () banked
  6580  000A04  EE20 F014          	lfsr	2,20
  6581  000A08  5174               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6582  000A0A  26D9               	addwf	fsr2l,f,c
  6583  000A0C  5175               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6584  000A0E  22DA               	addwfc	fsr2h,f,c
  6585  000A10  CFDE F177          	movff	postinc2,??_ethernet_rxGetNewFrame
  6586  000A14  CFDD F178          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6587  000A18  C177  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6588  000A1C  C178  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6589  000A20  0100               	movlb	0	; () banked
  6590  000A22  6B75               	clrf	(intToString@val+2)& (0+255),b
  6591  000A24  6B76               	clrf	(intToString@val+3)& (0+255),b
  6592  000A26  EC42  F00C         	call	_intToString	;wreg free
  6593  000A2A  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6594  000A2E  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6595  000A32  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6596                           
  6597                           ;ethernet.c: 121: UARTTransmitText(")]");
  6598  000A36  0EFB               	movlw	low STR_20
  6599  000A38  0100               	movlb	0	; () banked
  6600  000A3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6601  000A3C  0E7F               	movlw	high STR_20
  6602  000A3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6603  000A40  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6604                           
  6605                           ;ethernet.c: 124: UARTTransmitText("\n\r");
  6606  000A44  0EF7               	movlw	low (STR_34+48)
  6607  000A46  0100               	movlb	0	; () banked
  6608  000A48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6609  000A4A  0E7C               	movlw	high (STR_34+48)
  6610  000A4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6611  000A4E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6612  000A52  0012               	return		;funcret
  6613  000A54                     __end_of_ethernet_rxGetNewFrame:
  6614                           	opt stack 0
  6615                           tblptru	equ	0xFF8
  6616                           tblptrh	equ	0xFF7
  6617                           tblptrl	equ	0xFF6
  6618                           tablat	equ	0xFF5
  6619                           prodh	equ	0xFF4
  6620                           prodl	equ	0xFF3
  6621                           intcon	equ	0xFF2
  6622                           intcon3	equ	0xFF0
  6623                           postinc0	equ	0xFEE
  6624                           plusw0	equ	0xFEB
  6625                           fsr0h	equ	0xFEA
  6626                           fsr0l	equ	0xFE9
  6627                           wreg	equ	0xFE8
  6628                           indf1	equ	0xFE7
  6629                           postinc1	equ	0xFE6
  6630                           postdec1	equ	0xFE5
  6631                           plusw1	equ	0xFE3
  6632                           fsr1h	equ	0xFE2
  6633                           fsr1l	equ	0xFE1
  6634                           indf2	equ	0xFDF
  6635                           postinc2	equ	0xFDE
  6636                           postdec2	equ	0xFDD
  6637                           plusw2	equ	0xFDB
  6638                           fsr2h	equ	0xFDA
  6639                           fsr2l	equ	0xFD9
  6640                           status	equ	0xFD8
  6641                           
  6642 ;; *************** function _ipv4_handleNewPacket *****************
  6643 ;; Defined at:
  6644 ;;		line 149 in file "src/stack/protocols/ipv4.c"
  6645 ;; Parameters:    Size  Location     Type
  6646 ;;  frame           2   58[BANK0 ] PTR struct ethernetFrame
  6647 ;;		 -> stack.ethernet(15), stack(113), 
  6648 ;; Auto vars:     Size  Location     Type
  6649 ;;		None
  6650 ;; Return value:  Size  Location     Type
  6651 ;;                  1    wreg      void 
  6652 ;; Registers used:
  6653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6654 ;; Tracked objects:
  6655 ;;		On entry : 0/0
  6656 ;;		On exit  : 0/0
  6657 ;;		Unchanged: 0/0
  6658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6659 ;;      Params:         0       2       0       0       0       0       0       0       0
  6660 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6662 ;;      Totals:         0       2       0       0       0       0       0       0       0
  6663 ;;Total ram usage:        2 bytes
  6664 ;; Hardware stack levels used:    1
  6665 ;; Hardware stack levels required when called:    9
  6666 ;; This function calls:
  6667 ;;		_UARTTransmitText
  6668 ;;		_ethernetController_dropPacket
  6669 ;; This function is called by:
  6670 ;;		_ethernet_rxGetNewFrame
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text14
  6675  004604                     __ptext14:
  6676                           	opt stack 0
  6677  004604                     _ipv4_handleNewPacket:
  6678                           	opt stack 19
  6679                           
  6680                           ;ipv4.c: 150: UARTTransmitText("[PACKET DROPPED]");
  6681                           
  6682                           ;incstack = 0
  6683  004604  0ED7               	movlw	low STR_69
  6684  004606  0100               	movlb	0	; () banked
  6685  004608  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6686  00460A  0E7E               	movlw	high STR_69
  6687  00460C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6688  00460E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  6689                           
  6690                           ;ipv4.c: 151: ethernetController_dropPacket(frame);
  6691  004612  C09A  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6692  004616  C09B  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6693  00461A  ECC9  F020         	call	_ethernetController_dropPacket	;wreg free
  6694  00461E  0012               	return		;funcret
  6695  004620                     __end_of_ipv4_handleNewPacket:
  6696                           	opt stack 0
  6697                           tblptru	equ	0xFF8
  6698                           tblptrh	equ	0xFF7
  6699                           tblptrl	equ	0xFF6
  6700                           tablat	equ	0xFF5
  6701                           prodh	equ	0xFF4
  6702                           prodl	equ	0xFF3
  6703                           intcon	equ	0xFF2
  6704                           intcon3	equ	0xFF0
  6705                           postinc0	equ	0xFEE
  6706                           plusw0	equ	0xFEB
  6707                           fsr0h	equ	0xFEA
  6708                           fsr0l	equ	0xFE9
  6709                           wreg	equ	0xFE8
  6710                           indf1	equ	0xFE7
  6711                           postinc1	equ	0xFE6
  6712                           postdec1	equ	0xFE5
  6713                           plusw1	equ	0xFE3
  6714                           fsr1h	equ	0xFE2
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           plusw2	equ	0xFDB
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  6725 ;; Defined at:
  6726 ;;		line 337 in file "src/enc424j600/ENC424J600.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;		None
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  6731 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  6732 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  6733 ;;  opcode          1   23[BANK0 ] unsigned char 
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0
  6744 ;;      Locals:         0       5       0       0       0       0       0       0       0
  6745 ;;      Temps:          0       6       0       0       0       0       0       0       0
  6746 ;;      Totals:         0      11       0       0       0       0       0       0       0
  6747 ;;Total ram usage:       11 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    7
  6750 ;; This function calls:
  6751 ;;		_ENC424J600_getNextPacketPointer
  6752 ;;		_ENC424J600_readSPI
  6753 ;;		_ENC424J600_setERXDATAReadPointer
  6754 ;;		_ENC424J600_setNextPacketPointer
  6755 ;;		_ENC424J600_writeSPI
  6756 ;; This function is called by:
  6757 ;;		_ethernet_rxGetNewFrame
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           	psect	text15
  6762  00399A                     __ptext15:
  6763                           	opt stack 0
  6764  00399A                     _ethernetController_updateNextPacketPointer:
  6765                           	opt stack 21
  6766                           
  6767                           ;ENC424J600.c: 338: uint16_t nextPktPointer;
  6768                           ;ENC424J600.c: 339: uint8_t opcode;
  6769                           ;ENC424J600.c: 340: uint8_t newPointerL, newPointerH;
  6770                           ;ENC424J600.c: 341: nextPktPointer = ENC424J600_getNextPacketPointer();
  6771                           
  6772                           ;incstack = 0
  6773  00399A  EC75  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
  6774  00399E  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  6775  0039A2  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  6776                           
  6777                           ;ENC424J600.c: 342: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  6778  0039A6  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,ENC424J600_setERXDATARe
      +                          adPointer@addr
  6779  0039AA  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,ENC424J600_setERXDATA
      +                          ReadPointer@addr+1
  6780  0039AE  EC05  F021         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  6781                           
  6782                           ;ENC424J600.c: 343: opcode = 0x2C;
  6783  0039B2  0E2C               	movlw	44
  6784  0039B4  0100               	movlb	0	; () banked
  6785  0039B6  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  6786                           
  6787                           ; BSR set to: 0
  6788                           ;ENC424J600.c: 344: PORTBbits.RB4=0;
  6789  0039B8  9881               	bcf	3969,4,c	;volatile
  6790                           
  6791                           ; BSR set to: 0
  6792                           ;ENC424J600.c: 345: ENC424J600_writeSPI(&opcode);
  6793  0039BA  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  6794  0039BC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  6795  0039BE  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  6796  0039C0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  6797  0039C2  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
  6798                           
  6799                           ;ENC424J600.c: 346: ENC424J600_readSPI(&newPointerL);
  6800  0039C6  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  6801  0039C8  0100               	movlb	0	; () banked
  6802  0039CA  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6803  0039CC  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  6804  0039CE  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6805  0039D0  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
  6806                           
  6807                           ;ENC424J600.c: 347: ENC424J600_readSPI(&newPointerH);
  6808  0039D4  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  6809  0039D6  0100               	movlb	0	; () banked
  6810  0039D8  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6811  0039DA  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  6812  0039DC  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6813  0039DE  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
  6814                           
  6815                           ;ENC424J600.c: 348: PORTBbits.RB4=1;
  6816  0039E2  8881               	bsf	3969,4,c	;volatile
  6817                           
  6818                           ;ENC424J600.c: 350: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  6819  0039E4  0E00               	movlw	0
  6820  0039E6  0100               	movlb	0	; () banked
  6821  0039E8  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  6822  0039EA  0EFF               	movlw	255
  6823  0039EC  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  6824  0039EE  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  6825  0039F0  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  6826  0039F2  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  6827  0039F4  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  6828  0039F6  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  6829  0039F8  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  6830  0039FA  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  6831  0039FC  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  6832  0039FE  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  6833  003A00  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  6834  003A02  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  6835  003A04  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  6836  003A06  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  6837  003A08  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  6838  003A0A  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  6839  003A0C  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  6840  003A0E  EC7A  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
  6841  003A12  0012               	return		;funcret
  6842  003A14                     __end_of_ethernetController_updateNextPacketPointer:
  6843                           	opt stack 0
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon3	equ	0xFF0
  6852                           postinc0	equ	0xFEE
  6853                           plusw0	equ	0xFEB
  6854                           fsr0h	equ	0xFEA
  6855                           fsr0l	equ	0xFE9
  6856                           wreg	equ	0xFE8
  6857                           indf1	equ	0xFE7
  6858                           postinc1	equ	0xFE6
  6859                           postdec1	equ	0xFE5
  6860                           plusw1	equ	0xFE3
  6861                           fsr1h	equ	0xFE2
  6862                           fsr1l	equ	0xFE1
  6863                           indf2	equ	0xFDF
  6864                           postinc2	equ	0xFDE
  6865                           postdec2	equ	0xFDD
  6866                           plusw2	equ	0xFDB
  6867                           fsr2h	equ	0xFDA
  6868                           fsr2l	equ	0xFD9
  6869                           status	equ	0xFD8
  6870                           
  6871 ;; *************** function _ethernetController_getRSV *****************
  6872 ;; Defined at:
  6873 ;;		line 302 in file "src/enc424j600/ENC424J600.c"
  6874 ;; Parameters:    Size  Location     Type
  6875 ;;  address         2   17[BANK0 ] unsigned int 
  6876 ;; Auto vars:     Size  Location     Type
  6877 ;;  i               1   23[BANK0 ] unsigned char 
  6878 ;;  opcode          1   22[BANK0 ] unsigned char 
  6879 ;; Return value:  Size  Location     Type
  6880 ;;                  5   17[BANK0 ] struct RSV
  6881 ;; Registers used:
  6882 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6883 ;; Tracked objects:
  6884 ;;		On entry : 0/0
  6885 ;;		On exit  : 0/0
  6886 ;;		Unchanged: 0/0
  6887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6888 ;;      Params:         0       5       0       0       0       0       0       0       0
  6889 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6890 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6891 ;;      Totals:         0       7       0       0       0       0       0       0       0
  6892 ;;Total ram usage:        7 bytes
  6893 ;; Hardware stack levels used:    1
  6894 ;; Hardware stack levels required when called:    7
  6895 ;; This function calls:
  6896 ;;		_ENC424J600_readSPI
  6897 ;;		_ENC424J600_setERXDATAReadPointer
  6898 ;;		_ENC424J600_updateReceiveStatusVector
  6899 ;;		_ENC424J600_writeSPI
  6900 ;; This function is called by:
  6901 ;;		_ethernet_rxGetNewFrame
  6902 ;; This function uses a non-reentrant model
  6903 ;;
  6904                           
  6905                           	psect	text16
  6906  003A8C                     __ptext16:
  6907                           	opt stack 0
  6908  003A8C                     _ethernetController_getRSV:
  6909                           	opt stack 21
  6910                           
  6911                           ;ENC424J600.c: 303: uint8_t static temp[6];
  6912                           ;ENC424J600.c: 304: ENC424J600_setERXDATAReadPointer(address + 2);
  6913                           
  6914                           ;incstack = 0
  6915  003A8C  0E02               	movlw	2
  6916  003A8E  0100               	movlb	0	; () banked
  6917  003A90  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  6918  003A92  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  6919  003A94  0E00               	movlw	0
  6920  003A96  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  6921  003A98  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  6922  003A9A  EC05  F021         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  6923                           
  6924                           ;ENC424J600.c: 305: uint8_t opcode = 0x2C;
  6925  003A9E  0E2C               	movlw	44
  6926  003AA0  0100               	movlb	0	; () banked
  6927  003AA2  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;ENC424J600.c: 306: PORTBbits.RB4=0;
  6931  003AA4  9881               	bcf	3969,4,c	;volatile
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;ENC424J600.c: 307: ENC424J600_writeSPI(&opcode);
  6935  003AA6  0E76               	movlw	low ethernetController_getRSV@opcode
  6936  003AA8  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  6937  003AAA  0E00               	movlw	high ethernetController_getRSV@opcode
  6938  003AAC  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  6939  003AAE  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
  6940                           
  6941                           ;ENC424J600.c: 308: for (uint8_t i = 0; i < 6; i++) {
  6942  003AB2  0E00               	movlw	0
  6943  003AB4  0100               	movlb	0	; () banked
  6944  003AB6  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  6945  003AB8                     l7859:
  6946                           
  6947                           ; BSR set to: 0
  6948  003AB8  0E05               	movlw	5
  6949  003ABA  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  6950  003ABC  D001               	goto	l163
  6951  003ABE  D00D               	goto	u9960
  6952  003AC0                     l163:
  6953                           
  6954                           ; BSR set to: 0
  6955                           ;ENC424J600.c: 309: ENC424J600_readSPI(&temp[i]);
  6956                           
  6957                           ; BSR set to: 0
  6958  003AC0  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  6959  003AC2  0D01               	mullw	1
  6960  003AC4  0EB7               	movlw	low ethernetController_getRSV@temp
  6961  003AC6  24F3               	addwf	prodl,w,c
  6962  003AC8  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  6963  003ACA  0E01               	movlw	high ethernetController_getRSV@temp
  6964  003ACC  20F4               	addwfc	prodh,w,c
  6965  003ACE  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  6966  003AD0  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
  6967  003AD4  0100               	movlb	0	; () banked
  6968  003AD6  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  6969  003AD8  D7EF               	goto	l7859
  6970  003ADA                     u9960:
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;ENC424J600.c: 310: }
  6974                           ;ENC424J600.c: 311: PORTBbits.RB4=1;
  6975  003ADA  8881               	bsf	3969,4,c	;volatile
  6976                           
  6977                           ; BSR set to: 0
  6978                           ;ENC424J600.c: 312: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  6979  003ADC  0EB7               	movlw	low ethernetController_getRSV@temp
  6980  003ADE  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  6981  003AE0  0E01               	movlw	high ethernetController_getRSV@temp
  6982  003AE2  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  6983  003AE4  ECB4  F00A         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  6984  003AE8  CFE9 FFD9          	movff	fsr0l,fsr2l
  6985  003AEC  CFEA FFDA          	movff	fsr0h,fsr2h
  6986  003AF0  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  6987  003AF4  0E04               	movlw	4
  6988  003AF6                     u9971:
  6989  003AF6  CFDB FFEB          	movff	plusw2,plusw0
  6990  003AFA  06E8               	decf	wreg,f,c
  6991  003AFC  E2FC               	bc	u9971
  6992  003AFE  0012               	return	
  6993  003B00                     __end_of_ethernetController_getRSV:
  6994                           	opt stack 0
  6995                           tblptru	equ	0xFF8
  6996                           tblptrh	equ	0xFF7
  6997                           tblptrl	equ	0xFF6
  6998                           tablat	equ	0xFF5
  6999                           prodh	equ	0xFF4
  7000                           prodl	equ	0xFF3
  7001                           intcon	equ	0xFF2
  7002                           intcon3	equ	0xFF0
  7003                           postinc0	equ	0xFEE
  7004                           plusw0	equ	0xFEB
  7005                           fsr0h	equ	0xFEA
  7006                           fsr0l	equ	0xFE9
  7007                           wreg	equ	0xFE8
  7008                           indf1	equ	0xFE7
  7009                           postinc1	equ	0xFE6
  7010                           postdec1	equ	0xFE5
  7011                           plusw1	equ	0xFE3
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           indf2	equ	0xFDF
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           plusw2	equ	0xFDB
  7018                           fsr2h	equ	0xFDA
  7019                           fsr2l	equ	0xFD9
  7020                           status	equ	0xFD8
  7021                           
  7022 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  7023 ;; Defined at:
  7024 ;;		line 758 in file "src/enc424j600/ENC424J600.c"
  7025 ;; Parameters:    Size  Location     Type
  7026 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  7027 ;;		 -> ethernetController_getRSV@temp(6), 
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  5    0[BANK0 ] struct RSV
  7032 ;; Registers used:
  7033 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7039 ;;      Params:         0       5       0       0       0       0       0       0       0
  7040 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7041 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7042 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7043 ;;Total ram usage:       17 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:    4
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_ethernetController_getRSV
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text17
  7054  001568                     __ptext17:
  7055                           	opt stack 0
  7056  001568                     _ENC424J600_updateReceiveStatusVector:
  7057                           	opt stack 23
  7058                           
  7059                           ;ENC424J600.c: 759: RSV_t receiveStatusVector;
  7060                           ;ENC424J600.c: 762: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  7061                           
  7062                           ;incstack = 0
  7063  001568  0E00               	movlw	0
  7064  00156A  0100               	movlb	0	; () banked
  7065  00156C  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7066  00156E  0EFF               	movlw	255
  7067  001570  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  7068  001572  EE20 F001          	lfsr	2,1
  7069  001576  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7070  001578  26D9               	addwf	fsr2l,f,c
  7071  00157A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7072  00157C  22DA               	addwfc	fsr2h,f,c
  7073  00157E  50DF               	movf	indf2,w,c
  7074  001580  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  7075  001582  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  7076  001584  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  7077  001586  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  7078  001588  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7079  00158A  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  7080  00158C  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  7081  00158E  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  7082  001590  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  7083  001594  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  7084  001598  50DF               	movf	indf2,w,c
  7085  00159A  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  7086  00159C  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  7087  00159E  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  7088  0015A0  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  7089  0015A2  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  7090  0015A4  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  7091  0015A6  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  7092  0015A8  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  7093                           
  7094                           ;ENC424J600.c: 764: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  7095  0015AA  EE20 F002          	lfsr	2,2
  7096  0015AE  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7097  0015B0  26D9               	addwf	fsr2l,f,c
  7098  0015B2  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7099  0015B4  22DA               	addwfc	fsr2h,f,c
  7100  0015B6  A0DF               	btfss	indf2,0,c
  7101  0015B8  D003               	goto	u9250
  7102  0015BA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7103  0015BC  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7104  0015BE  D002               	goto	u9268
  7105  0015C0                     u9250:
  7106  0015C0  0100               	movlb	0	; () banked
  7107  0015C2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7108  0015C4                     u9268:
  7109  0015C4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7110  0015C6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7111  0015C8  0BFE               	andlw	-2
  7112  0015CA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7113  0015CC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7114                           
  7115                           ;ENC424J600.c: 765: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  7116  0015CE  EE20 F002          	lfsr	2,2
  7117  0015D2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7118  0015D4  26D9               	addwf	fsr2l,f,c
  7119  0015D6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7120  0015D8  22DA               	addwfc	fsr2h,f,c
  7121  0015DA  A4DF               	btfss	indf2,2,c
  7122  0015DC  D003               	goto	u9270
  7123  0015DE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7124  0015E0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7125  0015E2  D002               	goto	u9288
  7126  0015E4                     u9270:
  7127  0015E4  0100               	movlb	0	; () banked
  7128  0015E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7129  0015E8                     u9288:
  7130  0015E8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7131  0015EA  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7132  0015EC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7133  0015EE  0BFD               	andlw	-3
  7134  0015F0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7135  0015F2  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7136                           
  7137                           ;ENC424J600.c: 766: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  7138  0015F4  EE20 F002          	lfsr	2,2
  7139  0015F8  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7140  0015FA  26D9               	addwf	fsr2l,f,c
  7141  0015FC  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7142  0015FE  22DA               	addwfc	fsr2h,f,c
  7143  001600  A8DF               	btfss	indf2,4,c
  7144  001602  D003               	goto	u9290
  7145  001604  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7146  001606  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7147  001608  D002               	goto	u9308
  7148  00160A                     u9290:
  7149  00160A  0100               	movlb	0	; () banked
  7150  00160C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7151  00160E                     u9308:
  7152  00160E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7153  001610  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7154  001612  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7155  001614  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7156  001616  0BFB               	andlw	-5
  7157  001618  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7158  00161A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7159                           
  7160                           ;ENC424J600.c: 767: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  7161  00161C  EE20 F002          	lfsr	2,2
  7162  001620  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7163  001622  26D9               	addwf	fsr2l,f,c
  7164  001624  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7165  001626  22DA               	addwfc	fsr2h,f,c
  7166  001628  AADF               	btfss	indf2,5,c
  7167  00162A  D003               	goto	u9310
  7168  00162C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7169  00162E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7170  001630  D002               	goto	u9328
  7171  001632                     u9310:
  7172  001632  0100               	movlb	0	; () banked
  7173  001634  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7174  001636                     u9328:
  7175  001636  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7176  001638  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7177  00163A  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7178  00163C  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7179  00163E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7180  001640  0BF7               	andlw	-9
  7181  001642  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7182  001644  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7183                           
  7184                           ;ENC424J600.c: 768: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  7185  001646  EE20 F002          	lfsr	2,2
  7186  00164A  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7187  00164C  26D9               	addwf	fsr2l,f,c
  7188  00164E  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7189  001650  22DA               	addwfc	fsr2h,f,c
  7190  001652  ACDF               	btfss	indf2,6,c
  7191  001654  D003               	goto	u9330
  7192  001656  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7193  001658  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7194  00165A  D002               	goto	u9348
  7195  00165C                     u9330:
  7196  00165C  0100               	movlb	0	; () banked
  7197  00165E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7198  001660                     u9348:
  7199  001660  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7200  001662  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7201  001664  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7202  001666  0BEF               	andlw	-17
  7203  001668  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7204  00166A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7205                           
  7206                           ;ENC424J600.c: 769: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7207  00166C  EE20 F002          	lfsr	2,2
  7208  001670  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7209  001672  26D9               	addwf	fsr2l,f,c
  7210  001674  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7211  001676  22DA               	addwfc	fsr2h,f,c
  7212  001678  AEDF               	btfss	indf2,7,c
  7213  00167A  D003               	goto	u9350
  7214  00167C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7215  00167E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7216  001680  D002               	goto	u9368
  7217  001682                     u9350:
  7218  001682  0100               	movlb	0	; () banked
  7219  001684  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7220  001686                     u9368:
  7221  001686  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7222  001688  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7223  00168A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7224  00168C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7225  00168E  0BDF               	andlw	-33
  7226  001690  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7227  001692  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7228                           
  7229                           ;ENC424J600.c: 771: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  7230  001694  EE20 F003          	lfsr	2,3
  7231  001698  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7232  00169A  26D9               	addwf	fsr2l,f,c
  7233  00169C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7234  00169E  22DA               	addwfc	fsr2h,f,c
  7235  0016A0  A0DF               	btfss	indf2,0,c
  7236  0016A2  D003               	goto	u9370
  7237  0016A4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7238  0016A6  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7239  0016A8  D002               	goto	u9388
  7240  0016AA                     u9370:
  7241  0016AA  0100               	movlb	0	; () banked
  7242  0016AC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7243  0016AE                     u9388:
  7244  0016AE  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7245  0016B0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7246  0016B2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7247  0016B4  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7248  0016B6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7249  0016B8  0BBF               	andlw	-65
  7250  0016BA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7251  0016BC  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7252                           
  7253                           ;ENC424J600.c: 772: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  7254  0016BE  EE20 F003          	lfsr	2,3
  7255  0016C2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7256  0016C4  26D9               	addwf	fsr2l,f,c
  7257  0016C6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7258  0016C8  22DA               	addwfc	fsr2h,f,c
  7259  0016CA  A2DF               	btfss	indf2,1,c
  7260  0016CC  D003               	goto	u9390
  7261  0016CE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7262  0016D0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7263  0016D2  D002               	goto	u9408
  7264  0016D4                     u9390:
  7265  0016D4  0100               	movlb	0	; () banked
  7266  0016D6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7267  0016D8                     u9408:
  7268  0016D8  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7269  0016DA  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7270  0016DC  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7271  0016DE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7272  0016E0  0B7F               	andlw	-129
  7273  0016E2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7274  0016E4  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7275                           
  7276                           ;ENC424J600.c: 773: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7277  0016E6  EE20 F003          	lfsr	2,3
  7278  0016EA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7279  0016EC  26D9               	addwf	fsr2l,f,c
  7280  0016EE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7281  0016F0  22DA               	addwfc	fsr2h,f,c
  7282  0016F2  A6DF               	btfss	indf2,3,c
  7283  0016F4  D003               	goto	u9410
  7284  0016F6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7285  0016F8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7286  0016FA  D002               	goto	u9428
  7287  0016FC                     u9410:
  7288  0016FC  0100               	movlb	0	; () banked
  7289  0016FE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7290  001700                     u9428:
  7291  001700  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7292  001702  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7293  001704  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7294  001706  0BFD               	andlw	-3
  7295  001708  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7296  00170A  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7297                           
  7298                           ;ENC424J600.c: 774: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  7299  00170C  EE20 F003          	lfsr	2,3
  7300  001710  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7301  001712  26D9               	addwf	fsr2l,f,c
  7302  001714  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7303  001716  22DA               	addwfc	fsr2h,f,c
  7304  001718  A8DF               	btfss	indf2,4,c
  7305  00171A  D003               	goto	u9430
  7306  00171C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7307  00171E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7308  001720  D002               	goto	u9448
  7309  001722                     u9430:
  7310  001722  0100               	movlb	0	; () banked
  7311  001724  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7312  001726                     u9448:
  7313  001726  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7314  001728  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7315  00172A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7316  00172C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7317  00172E  0BFB               	andlw	-5
  7318  001730  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7319  001732  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7320                           
  7321                           ;ENC424J600.c: 775: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  7322  001734  EE20 F003          	lfsr	2,3
  7323  001738  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7324  00173A  26D9               	addwf	fsr2l,f,c
  7325  00173C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7326  00173E  22DA               	addwfc	fsr2h,f,c
  7327  001740  AADF               	btfss	indf2,5,c
  7328  001742  D003               	goto	u9450
  7329  001744  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7330  001746  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7331  001748  D002               	goto	u9468
  7332  00174A                     u9450:
  7333  00174A  0100               	movlb	0	; () banked
  7334  00174C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7335  00174E                     u9468:
  7336  00174E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7337  001750  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7338  001752  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7339  001754  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7340  001756  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7341  001758  0BF7               	andlw	-9
  7342  00175A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7343  00175C  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7344                           
  7345                           ;ENC424J600.c: 776: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  7346  00175E  EE20 F003          	lfsr	2,3
  7347  001762  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7348  001764  26D9               	addwf	fsr2l,f,c
  7349  001766  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7350  001768  22DA               	addwfc	fsr2h,f,c
  7351  00176A  ACDF               	btfss	indf2,6,c
  7352  00176C  D003               	goto	u9470
  7353  00176E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7354  001770  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7355  001772  D002               	goto	u9488
  7356  001774                     u9470:
  7357  001774  0100               	movlb	0	; () banked
  7358  001776  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7359  001778                     u9488:
  7360  001778  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7361  00177A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7362  00177C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7363  00177E  0BEF               	andlw	-17
  7364  001780  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7365  001782  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7366                           
  7367                           ;ENC424J600.c: 777: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  7368  001784  EE20 F003          	lfsr	2,3
  7369  001788  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7370  00178A  26D9               	addwf	fsr2l,f,c
  7371  00178C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7372  00178E  22DA               	addwfc	fsr2h,f,c
  7373  001790  AEDF               	btfss	indf2,7,c
  7374  001792  D003               	goto	u9490
  7375  001794  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7376  001796  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7377  001798  D002               	goto	u9508
  7378  00179A                     u9490:
  7379  00179A  0100               	movlb	0	; () banked
  7380  00179C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7381  00179E                     u9508:
  7382  00179E  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7383  0017A0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7384  0017A2  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7385  0017A4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7386  0017A6  0BDF               	andlw	-33
  7387  0017A8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7388  0017AA  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7389                           
  7390                           ;ENC424J600.c: 779: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  7391  0017AC  EE20 F004          	lfsr	2,4
  7392  0017B0  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7393  0017B2  26D9               	addwf	fsr2l,f,c
  7394  0017B4  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7395  0017B6  22DA               	addwfc	fsr2h,f,c
  7396  0017B8  A0DF               	btfss	indf2,0,c
  7397  0017BA  D003               	goto	u9510
  7398  0017BC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7399  0017BE  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7400  0017C0  D002               	goto	u9528
  7401  0017C2                     u9510:
  7402  0017C2  0100               	movlb	0	; () banked
  7403  0017C4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7404  0017C6                     u9528:
  7405  0017C6  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7406  0017C8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7407  0017CA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7408  0017CC  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7409  0017CE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7410  0017D0  0BBF               	andlw	-65
  7411  0017D2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7412  0017D4  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7413                           
  7414                           ;ENC424J600.c: 780: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  7415  0017D6  EE20 F004          	lfsr	2,4
  7416  0017DA  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7417  0017DC  26D9               	addwf	fsr2l,f,c
  7418  0017DE  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7419  0017E0  22DA               	addwfc	fsr2h,f,c
  7420  0017E2  A2DF               	btfss	indf2,1,c
  7421  0017E4  D003               	goto	u9530
  7422  0017E6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7423  0017E8  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7424  0017EA  D002               	goto	u9548
  7425  0017EC                     u9530:
  7426  0017EC  0100               	movlb	0	; () banked
  7427  0017EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7428  0017F0                     u9548:
  7429  0017F0  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7430  0017F2  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7431  0017F4  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  7432  0017F6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7433  0017F8  0B7F               	andlw	-129
  7434  0017FA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7435  0017FC  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  7436                           
  7437                           ;ENC424J600.c: 781: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  7438  0017FE  EE20 F004          	lfsr	2,4
  7439  001802  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7440  001804  26D9               	addwf	fsr2l,f,c
  7441  001806  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7442  001808  22DA               	addwfc	fsr2h,f,c
  7443  00180A  A4DF               	btfss	indf2,2,c
  7444  00180C  D003               	goto	u9550
  7445  00180E  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7446  001810  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7447  001812  D002               	goto	u9568
  7448  001814                     u9550:
  7449  001814  0100               	movlb	0	; () banked
  7450  001816  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7451  001818                     u9568:
  7452  001818  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7453  00181A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7454  00181C  0BFE               	andlw	-2
  7455  00181E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7456  001820  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7457                           
  7458                           ;ENC424J600.c: 782: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  7459  001822  EE20 F004          	lfsr	2,4
  7460  001826  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7461  001828  26D9               	addwf	fsr2l,f,c
  7462  00182A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7463  00182C  22DA               	addwfc	fsr2h,f,c
  7464  00182E  A6DF               	btfss	indf2,3,c
  7465  001830  D003               	goto	u9570
  7466  001832  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7467  001834  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7468  001836  D002               	goto	u9588
  7469  001838                     u9570:
  7470  001838  0100               	movlb	0	; () banked
  7471  00183A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7472  00183C                     u9588:
  7473  00183C  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7474  00183E  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7475  001840  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7476  001842  0BFD               	andlw	-3
  7477  001844  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7478  001846  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7479                           
  7480                           ;ENC424J600.c: 783: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  7481  001848  EE20 F004          	lfsr	2,4
  7482  00184C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  7483  00184E  26D9               	addwf	fsr2l,f,c
  7484  001850  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7485  001852  22DA               	addwfc	fsr2h,f,c
  7486  001854  A8DF               	btfss	indf2,4,c
  7487  001856  D003               	goto	u9590
  7488  001858  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7489  00185A  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7490  00185C  D002               	goto	u9608
  7491  00185E                     u9590:
  7492  00185E  0100               	movlb	0	; () banked
  7493  001860  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  7494  001862                     u9608:
  7495  001862  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7496  001864  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  7497  001866  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  7498  001868  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7499  00186A  0BFB               	andlw	-5
  7500  00186C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  7501  00186E  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;ENC424J600.c: 785: return receiveStatusVector;
  7505  001870  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  7506  001874  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  7507  001878  0E04               	movlw	4
  7508  00187A                     u9611:
  7509  00187A  CFDB FFEB          	movff	plusw2,plusw0
  7510  00187E  06E8               	decf	wreg,f,c
  7511  001880  E2FC               	bc	u9611
  7512  001882  0012               	return	
  7513  001884                     __end_of_ENC424J600_updateReceiveStatusVector:
  7514                           	opt stack 0
  7515                           tblptru	equ	0xFF8
  7516                           tblptrh	equ	0xFF7
  7517                           tblptrl	equ	0xFF6
  7518                           tablat	equ	0xFF5
  7519                           prodh	equ	0xFF4
  7520                           prodl	equ	0xFF3
  7521                           intcon	equ	0xFF2
  7522                           intcon3	equ	0xFF0
  7523                           postinc0	equ	0xFEE
  7524                           plusw0	equ	0xFEB
  7525                           fsr0h	equ	0xFEA
  7526                           fsr0l	equ	0xFE9
  7527                           wreg	equ	0xFE8
  7528                           indf1	equ	0xFE7
  7529                           postinc1	equ	0xFE6
  7530                           postdec1	equ	0xFE5
  7531                           plusw1	equ	0xFE3
  7532                           fsr1h	equ	0xFE2
  7533                           fsr1l	equ	0xFE1
  7534                           indf2	equ	0xFDF
  7535                           postinc2	equ	0xFDE
  7536                           postdec2	equ	0xFDD
  7537                           plusw2	equ	0xFDB
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _ethernetController_getEtherTypeField *****************
  7543 ;; Defined at:
  7544 ;;		line 286 in file "src/enc424j600/ENC424J600.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;  field           9   15[BANK0 ] struct memoryField
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  ethertype       2   28[BANK0 ] enum E5498
  7549 ;;  highByte        1   32[BANK0 ] unsigned char 
  7550 ;;  lowByte         1   31[BANK0 ] unsigned char 
  7551 ;;  opcode          1   30[BANK0 ] unsigned char 
  7552 ;; Return value:  Size  Location     Type
  7553 ;;                  2   15[BANK0 ] enum E5498
  7554 ;; Registers used:
  7555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7556 ;; Tracked objects:
  7557 ;;		On entry : 0/0
  7558 ;;		On exit  : 0/0
  7559 ;;		Unchanged: 0/0
  7560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7561 ;;      Params:         0       9       0       0       0       0       0       0       0
  7562 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7563 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7564 ;;      Totals:         0      18       0       0       0       0       0       0       0
  7565 ;;Total ram usage:       18 bytes
  7566 ;; Hardware stack levels used:    1
  7567 ;; Hardware stack levels required when called:    7
  7568 ;; This function calls:
  7569 ;;		_ENC424J600_readSPI
  7570 ;;		_ENC424J600_setERXDATAReadPointer
  7571 ;;		_ENC424J600_writeSPI
  7572 ;; This function is called by:
  7573 ;;		_ethernet_rxGetNewFrame
  7574 ;; This function uses a non-reentrant model
  7575 ;;
  7576                           
  7577                           	psect	text18
  7578  003BE6                     __ptext18:
  7579                           	opt stack 0
  7580  003BE6                     _ethernetController_getEtherTypeField:
  7581                           	opt stack 21
  7582                           
  7583                           ;ENC424J600.c: 287: etherType_t ethertype = 0x0000;
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;incstack = 0
  7587  003BE6  0E00               	movlw	0
  7588  003BE8  0100               	movlb	0	; () banked
  7589  003BEA  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7590  003BEC  0E00               	movlw	0
  7591  003BEE  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7592                           
  7593                           ; BSR set to: 0
  7594                           ;ENC424J600.c: 288: ENC424J600_setERXDATAReadPointer(field.start + 20);
  7595  003BF0  0E14               	movlw	20
  7596  003BF2  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  7597  003BF4  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  7598  003BF6  0E00               	movlw	0
  7599  003BF8  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  7600  003BFA  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  7601  003BFC  EC05  F021         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  7602                           
  7603                           ;ENC424J600.c: 289: uint8_t opcode = 0x2C;
  7604  003C00  0E2C               	movlw	44
  7605  003C02  0100               	movlb	0	; () banked
  7606  003C04  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;ENC424J600.c: 290: PORTBbits.RB4=0;
  7610  003C06  9881               	bcf	3969,4,c	;volatile
  7611                           
  7612                           ;ENC424J600.c: 291: ENC424J600_writeSPI(&opcode);
  7613  003C08  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  7614  003C0A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  7615  003C0C  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  7616  003C0E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  7617  003C10  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
  7618                           
  7619                           ;ENC424J600.c: 293: uint8_t lowByte;
  7620                           ;ENC424J600.c: 294: uint8_t highByte;
  7621                           ;ENC424J600.c: 295: ENC424J600_readSPI(&highByte);
  7622  003C14  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  7623  003C16  0100               	movlb	0	; () banked
  7624  003C18  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7625  003C1A  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  7626  003C1C  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7627  003C1E  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
  7628                           
  7629                           ;ENC424J600.c: 296: ENC424J600_readSPI(&lowByte);
  7630  003C22  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  7631  003C24  0100               	movlb	0	; () banked
  7632  003C26  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  7633  003C28  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  7634  003C2A  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  7635  003C2C  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
  7636                           
  7637                           ;ENC424J600.c: 297: ethertype = (uint16_t) (lowByte | (highByte << 8));
  7638  003C30  0100               	movlb	0	; () banked
  7639  003C32  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  7640  003C34  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  7641  003C36  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  7642  003C38  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  7643  003C3A  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  7644  003C3C  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  7645  003C3E  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  7646  003C40  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  7647  003C42  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  7648  003C44  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  7649  003C46  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  7650  003C48  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  7651                           
  7652                           ; BSR set to: 0
  7653                           ;ENC424J600.c: 298: PORTBbits.RB4=1;
  7654  003C4A  8881               	bsf	3969,4,c	;volatile
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;ENC424J600.c: 299: return ethertype;
  7658  003C4C  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  7659  003C50  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  7660  003C54  0012               	return	
  7661  003C56                     __end_of_ethernetController_getEtherTypeField:
  7662                           	opt stack 0
  7663                           tblptru	equ	0xFF8
  7664                           tblptrh	equ	0xFF7
  7665                           tblptrl	equ	0xFF6
  7666                           tablat	equ	0xFF5
  7667                           prodh	equ	0xFF4
  7668                           prodl	equ	0xFF3
  7669                           intcon	equ	0xFF2
  7670                           intcon3	equ	0xFF0
  7671                           postinc0	equ	0xFEE
  7672                           plusw0	equ	0xFEB
  7673                           fsr0h	equ	0xFEA
  7674                           fsr0l	equ	0xFE9
  7675                           wreg	equ	0xFE8
  7676                           indf1	equ	0xFE7
  7677                           postinc1	equ	0xFE6
  7678                           postdec1	equ	0xFE5
  7679                           plusw1	equ	0xFE3
  7680                           fsr1h	equ	0xFE2
  7681                           fsr1l	equ	0xFE1
  7682                           indf2	equ	0xFDF
  7683                           postinc2	equ	0xFDE
  7684                           postdec2	equ	0xFDD
  7685                           plusw2	equ	0xFDB
  7686                           fsr2h	equ	0xFDA
  7687                           fsr2l	equ	0xFD9
  7688                           status	equ	0xFD8
  7689                           
  7690 ;; *************** function _etherTypeToString *****************
  7691 ;; Defined at:
  7692 ;;		line 178 in file "src/system/uart.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;  ethertype       2    0[BANK0 ] enum E5467
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  2    0[BANK0 ] PTR unsigned char 
  7699 ;; Registers used:
  7700 ;;		wreg, status,2, status,0
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7706 ;;      Params:         0       2       0       0       0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7708 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7709 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7710 ;;Total ram usage:        4 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    4
  7713 ;; This function calls:
  7714 ;;		Nothing
  7715 ;; This function is called by:
  7716 ;;		_ethernet_rxGetNewFrame
  7717 ;; This function uses a non-reentrant model
  7718 ;;
  7719                           
  7720                           	psect	text19
  7721  004046                     __ptext19:
  7722                           	opt stack 0
  7723  004046                     _etherTypeToString:
  7724                           	opt stack 24
  7725                           
  7726                           ;uart.c: 179: switch (ethertype) {
  7727                           
  7728                           ; BSR set to: 0
  7729                           ;incstack = 0
  7730  004046  D010               	goto	l791
  7731  004048                     
  7732                           ;uart.c: 181: return "IPv4";
  7733  004048  0EDF               	movlw	low STR_52
  7734  00404A  0100               	movlb	0	; () banked
  7735  00404C  6F60               	movwf	?_etherTypeToString& (0+255),b
  7736  00404E  0E7F               	movlw	high STR_52
  7737  004050  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7738                           
  7739                           ; BSR set to: 0
  7740  004052  0012               	return	
  7741  004054                     
  7742                           ; BSR set to: 0
  7743                           ;uart.c: 183: return "ARP";
  7744                           
  7745                           ; BSR set to: 0
  7746  004054  0EEE               	movlw	low STR_53
  7747  004056  6F60               	movwf	?_etherTypeToString& (0+255),b
  7748  004058  0E7F               	movlw	high STR_53
  7749  00405A  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7750                           
  7751                           ; BSR set to: 0
  7752  00405C  0012               	return	
  7753  00405E                     
  7754                           ; BSR set to: 0
  7755                           ;uart.c: 185: return "Unknown EtherType";
  7756                           
  7757                           ; BSR set to: 0
  7758  00405E  0EC5               	movlw	low STR_54
  7759  004060  6F60               	movwf	?_etherTypeToString& (0+255),b
  7760  004062  0E7E               	movlw	high STR_54
  7761  004064  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  7762                           
  7763                           ; BSR set to: 0
  7764                           ;uart.c: 186: }
  7765                           
  7766                           ; BSR set to: 0
  7767  004066  0012               	return	
  7768  004068                     l791:
  7769                           
  7770                           ; BSR set to: 0
  7771  004068  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  7772  00406C  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  7773                           
  7774                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7775                           ; Switch size 1, requested type "space"
  7776                           ; Number of cases is 1, Range of values is 8 to 8
  7777                           ; switch strategies available:
  7778                           ; Name         Instructions Cycles
  7779                           ; simple_byte            4     3 (average)
  7780                           ;	Chosen strategy is simple_byte
  7781  004070  0100               	movlb	0	; () banked
  7782  004072  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  7783  004074  0A08               	xorlw	8	; case 8
  7784  004076  A4D8               	btfss	status,2,c
  7785  004078  D7F2               	goto	l795
  7786                           
  7787                           ; BSR set to: 0
  7788                           ; Switch size 1, requested type "space"
  7789                           ; Number of cases is 2, Range of values is 0 to 6
  7790                           ; switch strategies available:
  7791                           ; Name         Instructions Cycles
  7792                           ; simple_byte            7     4 (average)
  7793                           ;	Chosen strategy is simple_byte
  7794  00407A  5162               	movf	??_etherTypeToString& (0+255),w,b
  7795  00407C  0A00               	xorlw	0	; case 0
  7796  00407E  B4D8               	btfsc	status,2,c
  7797  004080  D7E3               	goto	l792
  7798  004082  0A06               	xorlw	6	; case 6
  7799  004084  B4D8               	btfsc	status,2,c
  7800  004086  D7E6               	goto	l794
  7801  004088  D7EA               	goto	l795
  7802  00408A                     __end_of_etherTypeToString:
  7803                           	opt stack 0
  7804                           tblptru	equ	0xFF8
  7805                           tblptrh	equ	0xFF7
  7806                           tblptrl	equ	0xFF6
  7807                           tablat	equ	0xFF5
  7808                           prodh	equ	0xFF4
  7809                           prodl	equ	0xFF3
  7810                           intcon	equ	0xFF2
  7811                           intcon3	equ	0xFF0
  7812                           postinc0	equ	0xFEE
  7813                           plusw0	equ	0xFEB
  7814                           fsr0h	equ	0xFEA
  7815                           fsr0l	equ	0xFE9
  7816                           wreg	equ	0xFE8
  7817                           indf1	equ	0xFE7
  7818                           postinc1	equ	0xFE6
  7819                           postdec1	equ	0xFE5
  7820                           plusw1	equ	0xFE3
  7821                           fsr1h	equ	0xFE2
  7822                           fsr1l	equ	0xFE1
  7823                           indf2	equ	0xFDF
  7824                           postinc2	equ	0xFDE
  7825                           postdec2	equ	0xFDD
  7826                           plusw2	equ	0xFDB
  7827                           fsr2h	equ	0xFDA
  7828                           fsr2l	equ	0xFD9
  7829                           status	equ	0xFD8
  7830                           
  7831 ;; *************** function _UARTTransmitInt *****************
  7832 ;; Defined at:
  7833 ;;		line 60 in file "src/system/uart.c"
  7834 ;; Parameters:    Size  Location     Type
  7835 ;;  val             4   58[BANK0 ] unsigned long 
  7836 ;; Auto vars:     Size  Location     Type
  7837 ;;		None
  7838 ;; Return value:  Size  Location     Type
  7839 ;;                  1    wreg      void 
  7840 ;; Registers used:
  7841 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7842 ;; Tracked objects:
  7843 ;;		On entry : 0/0
  7844 ;;		On exit  : 0/0
  7845 ;;		Unchanged: 0/0
  7846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7847 ;;      Params:         0       4       0       0       0       0       0       0       0
  7848 ;;      Locals:         0       0       0       0       0       0       0       0       0
  7849 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7850 ;;      Totals:         0       4       0       0       0       0       0       0       0
  7851 ;;Total ram usage:        4 bytes
  7852 ;; Hardware stack levels used:    1
  7853 ;; Hardware stack levels required when called:    6
  7854 ;; This function calls:
  7855 ;;		_UARTTransmitText
  7856 ;;		_intToString
  7857 ;; This function is called by:
  7858 ;;		_ethernet_rxGetNewFrame
  7859 ;;		_main
  7860 ;; This function uses a non-reentrant model
  7861 ;;
  7862                           
  7863                           	psect	text20
  7864  00458A                     __ptext20:
  7865                           	opt stack 0
  7866  00458A                     _UARTTransmitInt:
  7867                           	opt stack 22
  7868                           
  7869                           ;uart.c: 61: UARTTransmitText(intToString(val));
  7870                           
  7871                           ; BSR set to: 0
  7872                           ;incstack = 0
  7873  00458A  C09A  F073         	movff	UARTTransmitInt@val,intToString@val
  7874  00458E  C09B  F074         	movff	UARTTransmitInt@val+1,intToString@val+1
  7875  004592  C09C  F075         	movff	UARTTransmitInt@val+2,intToString@val+2
  7876  004596  C09D  F076         	movff	UARTTransmitInt@val+3,intToString@val+3
  7877  00459A  EC42  F00C         	call	_intToString	;wreg free
  7878  00459E  C073  F098         	movff	?_intToString,UARTTransmitText@str
  7879  0045A2  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7880  0045A6  EC31  F01F         	call	_UARTTransmitText	;wreg free
  7881  0045AA  0012               	return		;funcret
  7882  0045AC                     __end_of_UARTTransmitInt:
  7883                           	opt stack 0
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           intcon	equ	0xFF2
  7891                           intcon3	equ	0xFF0
  7892                           postinc0	equ	0xFEE
  7893                           plusw0	equ	0xFEB
  7894                           fsr0h	equ	0xFEA
  7895                           fsr0l	equ	0xFE9
  7896                           wreg	equ	0xFE8
  7897                           indf1	equ	0xFE7
  7898                           postinc1	equ	0xFE6
  7899                           postdec1	equ	0xFE5
  7900                           plusw1	equ	0xFE3
  7901                           fsr1h	equ	0xFE2
  7902                           fsr1l	equ	0xFE1
  7903                           indf2	equ	0xFDF
  7904                           postinc2	equ	0xFDE
  7905                           postdec2	equ	0xFDD
  7906                           plusw2	equ	0xFDB
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _intToString *****************
  7912 ;; Defined at:
  7913 ;;		line 92 in file "src/system/uart.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  val             4   19[BANK0 ] unsigned long 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  pointer         1   38[BANK0 ] unsigned char 
  7918 ;;  tenthousands    1   37[BANK0 ] unsigned char 
  7919 ;;  thousands       1   36[BANK0 ] unsigned char 
  7920 ;;  hundreds        1   35[BANK0 ] unsigned char 
  7921 ;;  ones            1   34[BANK0 ] unsigned char 
  7922 ;;  tens            1   33[BANK0 ] unsigned char 
  7923 ;; Return value:  Size  Location     Type
  7924 ;;                  2   19[BANK0 ] PTR unsigned char 
  7925 ;; Registers used:
  7926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7927 ;; Tracked objects:
  7928 ;;		On entry : 0/0
  7929 ;;		On exit  : 0/0
  7930 ;;		Unchanged: 0/0
  7931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7932 ;;      Params:         0       4       0       0       0       0       0       0       0
  7933 ;;      Locals:         0       6       0       0       0       0       0       0       0
  7934 ;;      Temps:          0      10       0       0       0       0       0       0       0
  7935 ;;      Totals:         0      20       0       0       0       0       0       0       0
  7936 ;;Total ram usage:       20 bytes
  7937 ;; Hardware stack levels used:    1
  7938 ;; Hardware stack levels required when called:    5
  7939 ;; This function calls:
  7940 ;;		___lldiv
  7941 ;;		___llmod
  7942 ;;		___wmul
  7943 ;; This function is called by:
  7944 ;;		_ethernet_rxGetNewFrame
  7945 ;;		_printErrorMessage
  7946 ;;		_UARTTransmitInt
  7947 ;;		_arpEntryToString
  7948 ;; This function uses a non-reentrant model
  7949 ;;
  7950                           
  7951                           	psect	text21
  7952  001884                     __ptext21:
  7953                           	opt stack 0
  7954  001884                     _intToString:
  7955                           	opt stack 24
  7956                           
  7957                           ;uart.c: 93: char static number [10];
  7958                           ;uart.c: 94: uint8_t pointer = 0;
  7959                           
  7960                           ;incstack = 0
  7961  001884  0E00               	movlw	0
  7962  001886  0100               	movlb	0	; () banked
  7963  001888  6F86               	movwf	intToString@pointer& (0+255),b
  7964                           
  7965                           ; BSR set to: 0
  7966                           ;uart.c: 96: uint8_t tenthousands = val / 10000u;
  7967  00188A  C073  F066         	movff	intToString@val,___lldiv@dividend
  7968  00188E  C074  F067         	movff	intToString@val+1,___lldiv@dividend+1
  7969  001892  C075  F068         	movff	intToString@val+2,___lldiv@dividend+2
  7970  001896  C076  F069         	movff	intToString@val+3,___lldiv@dividend+3
  7971  00189A  0E10               	movlw	16
  7972  00189C  6F6A               	movwf	___lldiv@divisor& (0+255),b
  7973  00189E  0E27               	movlw	39
  7974  0018A0  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  7975  0018A2  0E00               	movlw	0
  7976  0018A4  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  7977  0018A6  0E00               	movlw	0
  7978  0018A8  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  7979  0018AA  EC0C  F01C         	call	___lldiv	;wreg free
  7980  0018AE  0100               	movlb	0	; () banked
  7981  0018B0  5166               	movf	?___lldiv& (0+255),w,b
  7982  0018B2  6F85               	movwf	intToString@tenthousands& (0+255),b
  7983                           
  7984                           ; BSR set to: 0
  7985                           ;uart.c: 97: uint8_t thousands = (val - tenthousands * 10000u) / 1000u;
  7986  0018B4  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  7987  0018B8  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  7988  0018BA  0E27               	movlw	39
  7989  0018BC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7990  0018BE  0E10               	movlw	16
  7991  0018C0  6F62               	movwf	___wmul@multiplicand& (0+255),b
  7992  0018C2  EC2C  F022         	call	___wmul	;wreg free
  7993  0018C6  0100               	movlb	0	; () banked
  7994  0018C8  5160               	movf	?___wmul& (0+255),w,b
  7995  0018CA  6F77               	movwf	??_intToString& (0+255),b
  7996  0018CC  5161               	movf	(?___wmul+1)& (0+255),w,b
  7997  0018CE  6F78               	movwf	(??_intToString+1)& (0+255),b
  7998  0018D0  6B79               	clrf	(??_intToString+2)& (0+255),b
  7999  0018D2  6B7A               	clrf	(??_intToString+3)& (0+255),b
  8000  0018D4  1F77               	comf	??_intToString& (0+255),f,b
  8001  0018D6  1F78               	comf	(??_intToString+1)& (0+255),f,b
  8002  0018D8  1F79               	comf	(??_intToString+2)& (0+255),f,b
  8003  0018DA  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  8004  0018DC  2B77               	incf	??_intToString& (0+255),f,b
  8005  0018DE  0E00               	movlw	0
  8006  0018E0  2378               	addwfc	(??_intToString+1)& (0+255),f,b
  8007  0018E2  2379               	addwfc	(??_intToString+2)& (0+255),f,b
  8008  0018E4  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  8009  0018E6  5173               	movf	intToString@val& (0+255),w,b
  8010  0018E8  2577               	addwf	??_intToString& (0+255),w,b
  8011  0018EA  6F66               	movwf	___lldiv@dividend& (0+255),b
  8012  0018EC  5174               	movf	(intToString@val+1)& (0+255),w,b
  8013  0018EE  2178               	addwfc	(??_intToString+1)& (0+255),w,b
  8014  0018F0  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8015  0018F2  5175               	movf	(intToString@val+2)& (0+255),w,b
  8016  0018F4  2179               	addwfc	(??_intToString+2)& (0+255),w,b
  8017  0018F6  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8018  0018F8  5176               	movf	(intToString@val+3)& (0+255),w,b
  8019  0018FA  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8020  0018FC  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8021  0018FE  0EE8               	movlw	232
  8022  001900  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8023  001902  0E03               	movlw	3
  8024  001904  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8025  001906  0E00               	movlw	0
  8026  001908  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8027  00190A  0E00               	movlw	0
  8028  00190C  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8029  00190E  EC0C  F01C         	call	___lldiv	;wreg free
  8030  001912  0100               	movlb	0	; () banked
  8031  001914  5166               	movf	?___lldiv& (0+255),w,b
  8032  001916  6F84               	movwf	intToString@thousands& (0+255),b
  8033                           
  8034                           ; BSR set to: 0
  8035                           ;uart.c: 98: uint8_t hundreds = (val - tenthousands * 10000u - thousands * 1000u) / 100u
      +                          ;
  8036  001918  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8037  00191C  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8038  00191E  0E27               	movlw	39
  8039  001920  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8040  001922  0E10               	movlw	16
  8041  001924  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8042  001926  EC2C  F022         	call	___wmul	;wreg free
  8043  00192A  C060  F077         	movff	?___wmul,??_intToString
  8044  00192E  C061  F078         	movff	?___wmul+1,??_intToString+1
  8045  001932  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  8046  001936  0100               	movlb	0	; () banked
  8047  001938  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8048  00193A  0E03               	movlw	3
  8049  00193C  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8050  00193E  0EE8               	movlw	232
  8051  001940  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8052  001942  EC2C  F022         	call	___wmul	;wreg free
  8053  001946  0100               	movlb	0	; () banked
  8054  001948  5177               	movf	??_intToString& (0+255),w,b
  8055  00194A  2560               	addwf	?___wmul& (0+255),w,b
  8056  00194C  6F79               	movwf	(??_intToString+2)& (0+255),b
  8057  00194E  5178               	movf	(??_intToString+1)& (0+255),w,b
  8058  001950  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8059  001952  6F7A               	movwf	(??_intToString+3)& (0+255),b
  8060  001954  6B7B               	clrf	(??_intToString+4)& (0+255),b
  8061  001956  B0D8               	btfsc	status,0,c
  8062  001958  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  8063  00195A  6B7C               	clrf	(??_intToString+5)& (0+255),b
  8064  00195C  1F79               	comf	(??_intToString+2)& (0+255),f,b
  8065  00195E  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  8066  001960  1F7B               	comf	(??_intToString+4)& (0+255),f,b
  8067  001962  1F7C               	comf	(??_intToString+5)& (0+255),f,b
  8068  001964  2B79               	incf	(??_intToString+2)& (0+255),f,b
  8069  001966  0E00               	movlw	0
  8070  001968  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  8071  00196A  237B               	addwfc	(??_intToString+4)& (0+255),f,b
  8072  00196C  237C               	addwfc	(??_intToString+5)& (0+255),f,b
  8073  00196E  5173               	movf	intToString@val& (0+255),w,b
  8074  001970  2579               	addwf	(??_intToString+2)& (0+255),w,b
  8075  001972  6F66               	movwf	___lldiv@dividend& (0+255),b
  8076  001974  5174               	movf	(intToString@val+1)& (0+255),w,b
  8077  001976  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8078  001978  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8079  00197A  5175               	movf	(intToString@val+2)& (0+255),w,b
  8080  00197C  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8081  00197E  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8082  001980  5176               	movf	(intToString@val+3)& (0+255),w,b
  8083  001982  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8084  001984  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8085  001986  0E64               	movlw	100
  8086  001988  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8087  00198A  0E00               	movlw	0
  8088  00198C  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8089  00198E  0E00               	movlw	0
  8090  001990  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8091  001992  0E00               	movlw	0
  8092  001994  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8093  001996  EC0C  F01C         	call	___lldiv	;wreg free
  8094  00199A  0100               	movlb	0	; () banked
  8095  00199C  5166               	movf	?___lldiv& (0+255),w,b
  8096  00199E  6F83               	movwf	intToString@hundreds& (0+255),b
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;uart.c: 99: uint8_t tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds 
      +                          * 100u) / 10u;
  8100  0019A0  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  8101  0019A4  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8102  0019A6  0E27               	movlw	39
  8103  0019A8  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8104  0019AA  0E10               	movlw	16
  8105  0019AC  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8106  0019AE  EC2C  F022         	call	___wmul	;wreg free
  8107  0019B2  C060  F077         	movff	?___wmul,??_intToString
  8108  0019B6  C061  F078         	movff	?___wmul+1,??_intToString+1
  8109  0019BA  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  8110  0019BE  0100               	movlb	0	; () banked
  8111  0019C0  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  8112  0019C2  0E03               	movlw	3
  8113  0019C4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8114  0019C6  0EE8               	movlw	232
  8115  0019C8  6F62               	movwf	___wmul@multiplicand& (0+255),b
  8116  0019CA  EC2C  F022         	call	___wmul	;wreg free
  8117  0019CE  0100               	movlb	0	; () banked
  8118  0019D0  5177               	movf	??_intToString& (0+255),w,b
  8119  0019D2  2560               	addwf	?___wmul& (0+255),w,b
  8120  0019D4  6F79               	movwf	(??_intToString+2)& (0+255),b
  8121  0019D6  5178               	movf	(??_intToString+1)& (0+255),w,b
  8122  0019D8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  8123  0019DA  6F7A               	movwf	(??_intToString+3)& (0+255),b
  8124  0019DC  6B7B               	clrf	(??_intToString+4)& (0+255),b
  8125  0019DE  B0D8               	btfsc	status,0,c
  8126  0019E0  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  8127  0019E2  6B7C               	clrf	(??_intToString+5)& (0+255),b
  8128  0019E4  5183               	movf	intToString@hundreds& (0+255),w,b
  8129  0019E6  0D64               	mullw	100
  8130  0019E8  50F3               	movf	prodl,w,c
  8131  0019EA  2579               	addwf	(??_intToString+2)& (0+255),w,b
  8132  0019EC  6F7D               	movwf	(??_intToString+6)& (0+255),b
  8133  0019EE  50F4               	movf	prodh,w,c
  8134  0019F0  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  8135  0019F2  6F7E               	movwf	(??_intToString+7)& (0+255),b
  8136  0019F4  0E00               	movlw	0
  8137  0019F6  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  8138  0019F8  6F7F               	movwf	(??_intToString+8)& (0+255),b
  8139  0019FA  0E00               	movlw	0
  8140  0019FC  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  8141  0019FE  6F80               	movwf	(??_intToString+9)& (0+255),b
  8142  001A00  1F7D               	comf	(??_intToString+6)& (0+255),f,b
  8143  001A02  1F7E               	comf	(??_intToString+7)& (0+255),f,b
  8144  001A04  1F7F               	comf	(??_intToString+8)& (0+255),f,b
  8145  001A06  1F80               	comf	(??_intToString+9)& (0+255),f,b
  8146  001A08  2B7D               	incf	(??_intToString+6)& (0+255),f,b
  8147  001A0A  0E00               	movlw	0
  8148  001A0C  237E               	addwfc	(??_intToString+7)& (0+255),f,b
  8149  001A0E  237F               	addwfc	(??_intToString+8)& (0+255),f,b
  8150  001A10  2380               	addwfc	(??_intToString+9)& (0+255),f,b
  8151  001A12  5173               	movf	intToString@val& (0+255),w,b
  8152  001A14  257D               	addwf	(??_intToString+6)& (0+255),w,b
  8153  001A16  6F66               	movwf	___lldiv@dividend& (0+255),b
  8154  001A18  5174               	movf	(intToString@val+1)& (0+255),w,b
  8155  001A1A  217E               	addwfc	(??_intToString+7)& (0+255),w,b
  8156  001A1C  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  8157  001A1E  5175               	movf	(intToString@val+2)& (0+255),w,b
  8158  001A20  217F               	addwfc	(??_intToString+8)& (0+255),w,b
  8159  001A22  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  8160  001A24  5176               	movf	(intToString@val+3)& (0+255),w,b
  8161  001A26  2180               	addwfc	(??_intToString+9)& (0+255),w,b
  8162  001A28  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  8163  001A2A  0E0A               	movlw	10
  8164  001A2C  6F6A               	movwf	___lldiv@divisor& (0+255),b
  8165  001A2E  0E00               	movlw	0
  8166  001A30  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  8167  001A32  0E00               	movlw	0
  8168  001A34  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  8169  001A36  0E00               	movlw	0
  8170  001A38  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  8171  001A3A  EC0C  F01C         	call	___lldiv	;wreg free
  8172  001A3E  0100               	movlb	0	; () banked
  8173  001A40  5166               	movf	?___lldiv& (0+255),w,b
  8174  001A42  6F81               	movwf	intToString@tens& (0+255),b
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;uart.c: 100: uint8_t ones = val % 10u;
  8178  001A44  C073  F060         	movff	intToString@val,___llmod@dividend
  8179  001A48  C074  F061         	movff	intToString@val+1,___llmod@dividend+1
  8180  001A4C  C075  F062         	movff	intToString@val+2,___llmod@dividend+2
  8181  001A50  C076  F063         	movff	intToString@val+3,___llmod@dividend+3
  8182  001A54  0E0A               	movlw	10
  8183  001A56  6F64               	movwf	___llmod@divisor& (0+255),b
  8184  001A58  0E00               	movlw	0
  8185  001A5A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  8186  001A5C  0E00               	movlw	0
  8187  001A5E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  8188  001A60  0E00               	movlw	0
  8189  001A62  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  8190  001A64  EC98  F01E         	call	___llmod	;wreg free
  8191  001A68  0100               	movlb	0	; () banked
  8192  001A6A  5160               	movf	?___llmod& (0+255),w,b
  8193  001A6C  6F82               	movwf	intToString@ones& (0+255),b
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;uart.c: 102: if (val > 9999) {
  8197  001A6E  5176               	movf	(intToString@val+3)& (0+255),w,b
  8198  001A70  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8199  001A72  E106               	bnz	u9630
  8200  001A74  0E10               	movlw	16
  8201  001A76  5D73               	subwf	intToString@val& (0+255),w,b
  8202  001A78  0E27               	movlw	39
  8203  001A7A  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8204  001A7C  A0D8               	btfss	status,0,c
  8205  001A7E  D00C               	goto	l760
  8206  001A80                     u9630:
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;uart.c: 103: number[pointer++] = tenthousands + 0x30u;
  8210  001A80  5186               	movf	intToString@pointer& (0+255),w,b
  8211  001A82  0D01               	mullw	1
  8212  001A84  0EAD               	movlw	low intToString@number
  8213  001A86  24F3               	addwf	prodl,w,c
  8214  001A88  6ED9               	movwf	fsr2l,c
  8215  001A8A  0E01               	movlw	high intToString@number
  8216  001A8C  20F4               	addwfc	prodh,w,c
  8217  001A8E  6EDA               	movwf	fsr2h,c
  8218  001A90  5185               	movf	intToString@tenthousands& (0+255),w,b
  8219  001A92  0F30               	addlw	48
  8220  001A94  6EDF               	movwf	indf2,c
  8221                           
  8222                           ; BSR set to: 0
  8223  001A96  2B86               	incf	intToString@pointer& (0+255),f,b
  8224  001A98                     l760:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;uart.c: 104: }
  8228                           ;uart.c: 106: if (val > 999) {
  8229                           
  8230                           ; BSR set to: 0
  8231  001A98  5176               	movf	(intToString@val+3)& (0+255),w,b
  8232  001A9A  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8233  001A9C  E106               	bnz	u9640
  8234  001A9E  0EE8               	movlw	232
  8235  001AA0  5D73               	subwf	intToString@val& (0+255),w,b
  8236  001AA2  0E03               	movlw	3
  8237  001AA4  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  8238  001AA6  A0D8               	btfss	status,0,c
  8239  001AA8  D00C               	goto	l761
  8240  001AAA                     u9640:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;uart.c: 107: number[pointer++] = thousands + 0x30u;
  8244  001AAA  5186               	movf	intToString@pointer& (0+255),w,b
  8245  001AAC  0D01               	mullw	1
  8246  001AAE  0EAD               	movlw	low intToString@number
  8247  001AB0  24F3               	addwf	prodl,w,c
  8248  001AB2  6ED9               	movwf	fsr2l,c
  8249  001AB4  0E01               	movlw	high intToString@number
  8250  001AB6  20F4               	addwfc	prodh,w,c
  8251  001AB8  6EDA               	movwf	fsr2h,c
  8252  001ABA  5184               	movf	intToString@thousands& (0+255),w,b
  8253  001ABC  0F30               	addlw	48
  8254  001ABE  6EDF               	movwf	indf2,c
  8255                           
  8256                           ; BSR set to: 0
  8257  001AC0  2B86               	incf	intToString@pointer& (0+255),f,b
  8258  001AC2                     l761:
  8259                           
  8260                           ; BSR set to: 0
  8261                           ;uart.c: 108: }
  8262                           ;uart.c: 110: if (val > 99) {
  8263                           
  8264                           ; BSR set to: 0
  8265  001AC2  5176               	movf	(intToString@val+3)& (0+255),w,b
  8266  001AC4  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8267  001AC6  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8268  001AC8  E104               	bnz	u9650
  8269  001ACA  0E64               	movlw	100
  8270  001ACC  5D73               	subwf	intToString@val& (0+255),w,b
  8271  001ACE  A0D8               	btfss	status,0,c
  8272  001AD0  D00C               	goto	l762
  8273  001AD2                     u9650:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;uart.c: 111: number[pointer++] = hundreds + 0x30u;
  8277  001AD2  5186               	movf	intToString@pointer& (0+255),w,b
  8278  001AD4  0D01               	mullw	1
  8279  001AD6  0EAD               	movlw	low intToString@number
  8280  001AD8  24F3               	addwf	prodl,w,c
  8281  001ADA  6ED9               	movwf	fsr2l,c
  8282  001ADC  0E01               	movlw	high intToString@number
  8283  001ADE  20F4               	addwfc	prodh,w,c
  8284  001AE0  6EDA               	movwf	fsr2h,c
  8285  001AE2  5183               	movf	intToString@hundreds& (0+255),w,b
  8286  001AE4  0F30               	addlw	48
  8287  001AE6  6EDF               	movwf	indf2,c
  8288                           
  8289                           ; BSR set to: 0
  8290  001AE8  2B86               	incf	intToString@pointer& (0+255),f,b
  8291  001AEA                     l762:
  8292                           
  8293                           ; BSR set to: 0
  8294                           ;uart.c: 112: }
  8295                           ;uart.c: 114: if (val > 9) {
  8296                           
  8297                           ; BSR set to: 0
  8298  001AEA  5176               	movf	(intToString@val+3)& (0+255),w,b
  8299  001AEC  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  8300  001AEE  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  8301  001AF0  E104               	bnz	u9660
  8302  001AF2  0E0A               	movlw	10
  8303  001AF4  5D73               	subwf	intToString@val& (0+255),w,b
  8304  001AF6  A0D8               	btfss	status,0,c
  8305  001AF8  D00C               	goto	l763
  8306  001AFA                     u9660:
  8307                           
  8308                           ; BSR set to: 0
  8309                           ;uart.c: 115: number[pointer++] = tens + 0x30u;
  8310  001AFA  5186               	movf	intToString@pointer& (0+255),w,b
  8311  001AFC  0D01               	mullw	1
  8312  001AFE  0EAD               	movlw	low intToString@number
  8313  001B00  24F3               	addwf	prodl,w,c
  8314  001B02  6ED9               	movwf	fsr2l,c
  8315  001B04  0E01               	movlw	high intToString@number
  8316  001B06  20F4               	addwfc	prodh,w,c
  8317  001B08  6EDA               	movwf	fsr2h,c
  8318  001B0A  5181               	movf	intToString@tens& (0+255),w,b
  8319  001B0C  0F30               	addlw	48
  8320  001B0E  6EDF               	movwf	indf2,c
  8321                           
  8322                           ; BSR set to: 0
  8323  001B10  2B86               	incf	intToString@pointer& (0+255),f,b
  8324  001B12                     l763:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;uart.c: 116: }
  8328                           ;uart.c: 118: number[pointer++] = ones + 0x30u;
  8329                           
  8330                           ; BSR set to: 0
  8331  001B12  5186               	movf	intToString@pointer& (0+255),w,b
  8332  001B14  0D01               	mullw	1
  8333  001B16  0EAD               	movlw	low intToString@number
  8334  001B18  24F3               	addwf	prodl,w,c
  8335  001B1A  6ED9               	movwf	fsr2l,c
  8336  001B1C  0E01               	movlw	high intToString@number
  8337  001B1E  20F4               	addwfc	prodh,w,c
  8338  001B20  6EDA               	movwf	fsr2h,c
  8339  001B22  5182               	movf	intToString@ones& (0+255),w,b
  8340  001B24  0F30               	addlw	48
  8341  001B26  6EDF               	movwf	indf2,c
  8342  001B28  2B86               	incf	intToString@pointer& (0+255),f,b
  8343                           
  8344                           ; BSR set to: 0
  8345                           ;uart.c: 119: number[pointer++] = '\0';
  8346  001B2A  5186               	movf	intToString@pointer& (0+255),w,b
  8347  001B2C  0D01               	mullw	1
  8348  001B2E  0EAD               	movlw	low intToString@number
  8349  001B30  24F3               	addwf	prodl,w,c
  8350  001B32  6ED9               	movwf	fsr2l,c
  8351  001B34  0E01               	movlw	high intToString@number
  8352  001B36  20F4               	addwfc	prodh,w,c
  8353  001B38  6EDA               	movwf	fsr2h,c
  8354  001B3A  0E00               	movlw	0
  8355  001B3C  6EDF               	movwf	indf2,c
  8356                           
  8357                           ; BSR set to: 0
  8358  001B3E  2B86               	incf	intToString@pointer& (0+255),f,b
  8359                           
  8360                           ; BSR set to: 0
  8361                           ;uart.c: 121: return number;
  8362  001B40  0EAD               	movlw	low intToString@number
  8363  001B42  6F73               	movwf	?_intToString& (0+255),b
  8364  001B44  0E01               	movlw	high intToString@number
  8365  001B46  6F74               	movwf	(?_intToString+1)& (0+255),b
  8366  001B48  0012               	return	
  8367  001B4A                     __end_of_intToString:
  8368                           	opt stack 0
  8369                           tblptru	equ	0xFF8
  8370                           tblptrh	equ	0xFF7
  8371                           tblptrl	equ	0xFF6
  8372                           tablat	equ	0xFF5
  8373                           prodh	equ	0xFF4
  8374                           prodl	equ	0xFF3
  8375                           intcon	equ	0xFF2
  8376                           intcon3	equ	0xFF0
  8377                           postinc0	equ	0xFEE
  8378                           plusw0	equ	0xFEB
  8379                           fsr0h	equ	0xFEA
  8380                           fsr0l	equ	0xFE9
  8381                           wreg	equ	0xFE8
  8382                           indf1	equ	0xFE7
  8383                           postinc1	equ	0xFE6
  8384                           postdec1	equ	0xFE5
  8385                           plusw1	equ	0xFE3
  8386                           fsr1h	equ	0xFE2
  8387                           fsr1l	equ	0xFE1
  8388                           indf2	equ	0xFDF
  8389                           postinc2	equ	0xFDE
  8390                           postdec2	equ	0xFDD
  8391                           plusw2	equ	0xFDB
  8392                           fsr2h	equ	0xFDA
  8393                           fsr2l	equ	0xFD9
  8394                           status	equ	0xFD8
  8395                           
  8396 ;; *************** function ___llmod *****************
  8397 ;; Defined at:
  8398 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  8399 ;; Parameters:    Size  Location     Type
  8400 ;;  dividend        4    0[BANK0 ] unsigned long 
  8401 ;;  divisor         4    4[BANK0 ] unsigned long 
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;  counter         1    8[BANK0 ] unsigned char 
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  4    0[BANK0 ] unsigned long 
  8406 ;; Registers used:
  8407 ;;		wreg, status,2, status,0
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8413 ;;      Params:         0       8       0       0       0       0       0       0       0
  8414 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8416 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8417 ;;Total ram usage:        9 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    4
  8420 ;; This function calls:
  8421 ;;		Nothing
  8422 ;; This function is called by:
  8423 ;;		_intToString
  8424 ;;		_arpEntryToString
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           	psect	text22
  8429  003D30                     __ptext22:
  8430                           	opt stack 0
  8431  003D30                     ___llmod:
  8432                           	opt stack 24
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;incstack = 0
  8436  003D30  0100               	movlb	0	; () banked
  8437  003D32  5164               	movf	___llmod@divisor& (0+255),w,b
  8438  003D34  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  8439  003D36  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  8440  003D38  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  8441  003D3A  B4D8               	btfsc	status,2,c
  8442  003D3C  D024               	goto	l1393
  8443                           
  8444                           ; BSR set to: 0
  8445  003D3E  0E01               	movlw	1
  8446  003D40  6F68               	movwf	___llmod@counter& (0+255),b
  8447  003D42  D006               	goto	l1388
  8448  003D44                     
  8449                           ; BSR set to: 0
  8450                           
  8451                           ; BSR set to: 0
  8452  003D44  90D8               	bcf	status,0,c
  8453  003D46  3764               	rlcf	___llmod@divisor& (0+255),f,b
  8454  003D48  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  8455  003D4A  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  8456  003D4C  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  8457  003D4E  2B68               	incf	___llmod@counter& (0+255),f,b
  8458  003D50                     l1388:
  8459                           
  8460                           ; BSR set to: 0
  8461                           
  8462                           ; BSR set to: 0
  8463  003D50  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  8464  003D52  D7F8               	goto	l1389
  8465  003D54                     u9230:
  8466                           
  8467                           ; BSR set to: 0
  8468                           
  8469                           ; BSR set to: 0
  8470                           
  8471                           ; BSR set to: 0
  8472  003D54  5164               	movf	___llmod@divisor& (0+255),w,b
  8473  003D56  5D60               	subwf	___llmod@dividend& (0+255),w,b
  8474  003D58  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8475  003D5A  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  8476  003D5C  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8477  003D5E  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  8478  003D60  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8479  003D62  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  8480  003D64  A0D8               	btfss	status,0,c
  8481  003D66  D008               	goto	l1392
  8482                           
  8483                           ; BSR set to: 0
  8484  003D68  5164               	movf	___llmod@divisor& (0+255),w,b
  8485  003D6A  5F60               	subwf	___llmod@dividend& (0+255),f,b
  8486  003D6C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  8487  003D6E  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  8488  003D70  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  8489  003D72  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  8490  003D74  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  8491  003D76  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  8492  003D78                     l1392:
  8493                           
  8494                           ; BSR set to: 0
  8495                           
  8496                           ; BSR set to: 0
  8497  003D78  90D8               	bcf	status,0,c
  8498  003D7A  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  8499  003D7C  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  8500  003D7E  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  8501  003D80  3364               	rrcf	___llmod@divisor& (0+255),f,b
  8502                           
  8503                           ; BSR set to: 0
  8504  003D82  2F68               	decfsz	___llmod@counter& (0+255),f,b
  8505  003D84  D7E7               	goto	u9230
  8506  003D86                     l1393:
  8507                           
  8508                           ; BSR set to: 0
  8509                           
  8510                           ; BSR set to: 0
  8511  003D86  C060  F060         	movff	___llmod@dividend,?___llmod
  8512  003D8A  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  8513  003D8E  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  8514  003D92  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  8515                           
  8516                           ; BSR set to: 0
  8517  003D96  0012               	return		;funcret
  8518  003D98                     __end_of___llmod:
  8519                           	opt stack 0
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           intcon	equ	0xFF2
  8527                           intcon3	equ	0xFF0
  8528                           postinc0	equ	0xFEE
  8529                           plusw0	equ	0xFEB
  8530                           fsr0h	equ	0xFEA
  8531                           fsr0l	equ	0xFE9
  8532                           wreg	equ	0xFE8
  8533                           indf1	equ	0xFE7
  8534                           postinc1	equ	0xFE6
  8535                           postdec1	equ	0xFE5
  8536                           plusw1	equ	0xFE3
  8537                           fsr1h	equ	0xFE2
  8538                           fsr1l	equ	0xFE1
  8539                           indf2	equ	0xFDF
  8540                           postinc2	equ	0xFDE
  8541                           postdec2	equ	0xFDD
  8542                           plusw2	equ	0xFDB
  8543                           fsr2h	equ	0xFDA
  8544                           fsr2l	equ	0xFD9
  8545                           status	equ	0xFD8
  8546                           
  8547 ;; *************** function ___lldiv *****************
  8548 ;; Defined at:
  8549 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  dividend        4    6[BANK0 ] unsigned long 
  8552 ;;  divisor         4   10[BANK0 ] unsigned long 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  quotient        4   14[BANK0 ] unsigned long 
  8555 ;;  counter         1   18[BANK0 ] unsigned char 
  8556 ;; Return value:  Size  Location     Type
  8557 ;;                  4    6[BANK0 ] unsigned long 
  8558 ;; Registers used:
  8559 ;;		wreg, status,2, status,0
  8560 ;; Tracked objects:
  8561 ;;		On entry : 0/0
  8562 ;;		On exit  : 0/0
  8563 ;;		Unchanged: 0/0
  8564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8565 ;;      Params:         0       8       0       0       0       0       0       0       0
  8566 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8567 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8568 ;;      Totals:         0      13       0       0       0       0       0       0       0
  8569 ;;Total ram usage:       13 bytes
  8570 ;; Hardware stack levels used:    1
  8571 ;; Hardware stack levels required when called:    4
  8572 ;; This function calls:
  8573 ;;		Nothing
  8574 ;; This function is called by:
  8575 ;;		_intToString
  8576 ;; This function uses a non-reentrant model
  8577 ;;
  8578                           
  8579                           	psect	text23
  8580  003818                     __ptext23:
  8581                           	opt stack 0
  8582  003818                     ___lldiv:
  8583                           	opt stack 24
  8584                           
  8585                           ; BSR set to: 0
  8586                           ;incstack = 0
  8587  003818  0E00               	movlw	0
  8588  00381A  0100               	movlb	0	; () banked
  8589  00381C  6F6E               	movwf	___lldiv@quotient& (0+255),b
  8590  00381E  0E00               	movlw	0
  8591  003820  6F6F               	movwf	(___lldiv@quotient+1)& (0+255),b
  8592  003822  0E00               	movlw	0
  8593  003824  6F70               	movwf	(___lldiv@quotient+2)& (0+255),b
  8594  003826  0E00               	movlw	0
  8595  003828  6F71               	movwf	(___lldiv@quotient+3)& (0+255),b
  8596                           
  8597                           ; BSR set to: 0
  8598  00382A  516A               	movf	___lldiv@divisor& (0+255),w,b
  8599  00382C  116B               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8600  00382E  116C               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8601  003830  116D               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8602  003832  B4D8               	btfsc	status,2,c
  8603  003834  D02A               	goto	l1383
  8604                           
  8605                           ; BSR set to: 0
  8606  003836  0E01               	movlw	1
  8607  003838  6F72               	movwf	___lldiv@counter& (0+255),b
  8608  00383A  D006               	goto	l1378
  8609  00383C                     
  8610                           ; BSR set to: 0
  8611                           
  8612                           ; BSR set to: 0
  8613  00383C  90D8               	bcf	status,0,c
  8614  00383E  376A               	rlcf	___lldiv@divisor& (0+255),f,b
  8615  003840  376B               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8616  003842  376C               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8617  003844  376D               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8618  003846  2B72               	incf	___lldiv@counter& (0+255),f,b
  8619  003848                     l1378:
  8620                           
  8621                           ; BSR set to: 0
  8622                           
  8623                           ; BSR set to: 0
  8624  003848  AF6D               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8625  00384A  D7F8               	goto	l1379
  8626  00384C                     u9200:
  8627                           
  8628                           ; BSR set to: 0
  8629                           
  8630                           ; BSR set to: 0
  8631                           
  8632                           ; BSR set to: 0
  8633  00384C  90D8               	bcf	status,0,c
  8634  00384E  376E               	rlcf	___lldiv@quotient& (0+255),f,b
  8635  003850  376F               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8636  003852  3770               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8637  003854  3771               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8638                           
  8639                           ; BSR set to: 0
  8640  003856  516A               	movf	___lldiv@divisor& (0+255),w,b
  8641  003858  5D66               	subwf	___lldiv@dividend& (0+255),w,b
  8642  00385A  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8643  00385C  5967               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8644  00385E  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8645  003860  5968               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8646  003862  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8647  003864  5969               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8648  003866  A0D8               	btfss	status,0,c
  8649  003868  D009               	goto	l1382
  8650                           
  8651                           ; BSR set to: 0
  8652  00386A  516A               	movf	___lldiv@divisor& (0+255),w,b
  8653  00386C  5F66               	subwf	___lldiv@dividend& (0+255),f,b
  8654  00386E  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8655  003870  5B67               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8656  003872  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8657  003874  5B68               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8658  003876  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8659  003878  5B69               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8660                           
  8661                           ; BSR set to: 0
  8662  00387A  816E               	bsf	___lldiv@quotient& (0+255),0,b
  8663  00387C                     l1382:
  8664                           
  8665                           ; BSR set to: 0
  8666                           
  8667                           ; BSR set to: 0
  8668  00387C  90D8               	bcf	status,0,c
  8669  00387E  336D               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8670  003880  336C               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8671  003882  336B               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8672  003884  336A               	rrcf	___lldiv@divisor& (0+255),f,b
  8673                           
  8674                           ; BSR set to: 0
  8675  003886  2F72               	decfsz	___lldiv@counter& (0+255),f,b
  8676  003888  D7E1               	goto	u9200
  8677  00388A                     l1383:
  8678                           
  8679                           ; BSR set to: 0
  8680                           
  8681                           ; BSR set to: 0
  8682  00388A  C06E  F066         	movff	___lldiv@quotient,?___lldiv
  8683  00388E  C06F  F067         	movff	___lldiv@quotient+1,?___lldiv+1
  8684  003892  C070  F068         	movff	___lldiv@quotient+2,?___lldiv+2
  8685  003896  C071  F069         	movff	___lldiv@quotient+3,?___lldiv+3
  8686                           
  8687                           ; BSR set to: 0
  8688  00389A  0012               	return		;funcret
  8689  00389C                     __end_of___lldiv:
  8690                           	opt stack 0
  8691                           tblptru	equ	0xFF8
  8692                           tblptrh	equ	0xFF7
  8693                           tblptrl	equ	0xFF6
  8694                           tablat	equ	0xFF5
  8695                           prodh	equ	0xFF4
  8696                           prodl	equ	0xFF3
  8697                           intcon	equ	0xFF2
  8698                           intcon3	equ	0xFF0
  8699                           postinc0	equ	0xFEE
  8700                           plusw0	equ	0xFEB
  8701                           fsr0h	equ	0xFEA
  8702                           fsr0l	equ	0xFE9
  8703                           wreg	equ	0xFE8
  8704                           indf1	equ	0xFE7
  8705                           postinc1	equ	0xFE6
  8706                           postdec1	equ	0xFE5
  8707                           plusw1	equ	0xFE3
  8708                           fsr1h	equ	0xFE2
  8709                           fsr1l	equ	0xFE1
  8710                           indf2	equ	0xFDF
  8711                           postinc2	equ	0xFDE
  8712                           postdec2	equ	0xFDD
  8713                           plusw2	equ	0xFDB
  8714                           fsr2h	equ	0xFDA
  8715                           fsr2l	equ	0xFD9
  8716                           status	equ	0xFD8
  8717                           
  8718 ;; *************** function _ARP_handleNewPacket *****************
  8719 ;; Defined at:
  8720 ;;		line 28 in file "src/stack/protocols/arp.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;  frame           2  152[BANK0 ] PTR struct ethernetFrame
  8723 ;;		 -> stack.ethernet(15), stack(113), 
  8724 ;; Auto vars:     Size  Location     Type
  8725 ;;  arp            32   84[BANK1 ] struct ARP_message
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  1    wreg      void 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8735 ;;      Params:         0       2       0       0       0       0       0       0       0
  8736 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8737 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8738 ;;      Totals:         0       4      32       0       0       0       0       0       0
  8739 ;;Total ram usage:       36 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:   11
  8742 ;; This function calls:
  8743 ;;		_ARP_parseFromRXBuffer
  8744 ;;		_ARP_replyIfNeeded
  8745 ;;		_ARP_setNewEntry
  8746 ;;		_UARTTransmitText
  8747 ;;		_ethernetController_dropPacket
  8748 ;;		_getSeconds
  8749 ;;		_ipAdressToString
  8750 ;;		_macToString
  8751 ;; This function is called by:
  8752 ;;		_ethernet_rxGetNewFrame
  8753 ;; This function uses a non-reentrant model
  8754 ;;
  8755                           
  8756                           	psect	text24
  8757  002198                     __ptext24:
  8758                           	opt stack 0
  8759  002198                     _ARP_handleNewPacket:
  8760                           	opt stack 17
  8761                           
  8762                           ;arp.c: 29: ARP_message_t arp;
  8763                           ;arp.c: 30: if (frame->ethertype != ETHERTYPE_ARP) {
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;incstack = 0
  8767  002198  0100               	movlb	0	; () banked
  8768  00219A  EE20 F00E          	lfsr	2,14
  8769  00219E  51F8               	movf	ARP_handleNewPacket@frame& (0+255),w,b
  8770  0021A0  26D9               	addwf	fsr2l,f,c
  8771  0021A2  51F9               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
  8772  0021A4  22DA               	addwfc	fsr2h,f,c
  8773  0021A6  0E06               	movlw	6
  8774  0021A8  18DE               	xorwf	postinc2,w,c
  8775  0021AA  E104               	bnz	u10040
  8776  0021AC  0E08               	movlw	8
  8777  0021AE  18DE               	xorwf	postinc2,w,c
  8778  0021B0  B4D8               	btfsc	status,2,c
  8779  0021B2  D007               	goto	l873
  8780  0021B4                     u10040:
  8781                           
  8782                           ; BSR set to: 0
  8783                           ;arp.c: 31: ethernetController_dropPacket(frame);
  8784  0021B4  C0F8  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  8785  0021B8  C0F9  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8786  0021BC  ECC9  F020         	call	_ethernetController_dropPacket	;wreg free
  8787                           
  8788                           ;arp.c: 32: return;
  8789  0021C0  0012               	return	
  8790  0021C2                     l873:
  8791                           
  8792                           ;arp.c: 33: }
  8793                           ;arp.c: 35: arp = ARP_parseFromRXBuffer(frame);
  8794  0021C2  C0F8  F077         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
  8795  0021C6  C0F9  F078         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
  8796  0021CA  EC2A  F005         	call	_ARP_parseFromRXBuffer	;wreg free
  8797  0021CE  EE21  F054         	lfsr	2,ARP_handleNewPacket@arp
  8798  0021D2  0E1F               	movlw	31
  8799  0021D4                     u10051:
  8800  0021D4  CFEB FFDB          	movff	plusw0,plusw2
  8801  0021D8  06E8               	decf	wreg,f,c
  8802  0021DA  E2FC               	bc	u10051
  8803                           
  8804                           ;arp.c: 36: if (arp.err.code != (uint16_t)0) {
  8805  0021DC  0101               	movlb	1	; () banked
  8806  0021DE  5172               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
  8807  0021E0  1173               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
  8808  0021E2  B4D8               	btfsc	status,2,c
  8809  0021E4  D00E               	goto	l875
  8810                           
  8811                           ; BSR set to: 1
  8812                           ;arp.c: 37: ethernetController_dropPacket(frame);
  8813  0021E6  C0F8  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
  8814  0021EA  C0F9  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8815  0021EE  ECC9  F020         	call	_ethernetController_dropPacket	;wreg free
  8816                           
  8817                           ;arp.c: 38: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8818  0021F2  0EFA               	movlw	low STR_55
  8819  0021F4  0100               	movlb	0	; () banked
  8820  0021F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8821  0021F8  0E7C               	movlw	high STR_55
  8822  0021FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8823  0021FC  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8824                           
  8825                           ;arp.c: 39: return;
  8826  002200  0012               	return	
  8827  002202                     l875:
  8828                           
  8829                           ;arp.c: 40: }
  8830                           ;arp.c: 41: UARTTransmitText("[");
  8831  002202  0EDD               	movlw	low (STR_58+3)
  8832  002204  0100               	movlb	0	; () banked
  8833  002206  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8834  002208  0E7F               	movlw	high (STR_58+3)
  8835  00220A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8836  00220C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8837                           
  8838                           ;arp.c: 42: UARTTransmitText(macToString(arp.senderMACAddress));
  8839  002210  EE21  F05C         	lfsr	2,ARP_handleNewPacket@arp+8
  8840  002214  EE00  F07A         	lfsr	0,macToString@addr
  8841  002218  0E05               	movlw	5
  8842  00221A                     u10071:
  8843  00221A  CFDB FFEB          	movff	plusw2,plusw0
  8844  00221E  06E8               	decf	wreg,f,c
  8845  002220  E2FC               	bc	u10071
  8846  002222  ECAC  F016         	call	_macToString	;wreg free
  8847  002226  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8848  00222A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8849  00222E  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8850                           
  8851                           ;arp.c: 43: UARTTransmitText(", ");
  8852  002232  0E89               	movlw	low (STR_38+17)
  8853  002234  0100               	movlb	0	; () banked
  8854  002236  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8855  002238  0E7E               	movlw	high (STR_38+17)
  8856  00223A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8857  00223C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8858                           
  8859                           ;arp.c: 44: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8860  002240  C162  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
  8861  002244  C163  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
  8862  002248  C164  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
  8863  00224C  C165  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
  8864  002250  ECE1  F00E         	call	_ipAdressToString	;wreg free
  8865  002254  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8866  002258  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8867  00225C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8868                           
  8869                           ;arp.c: 45: UARTTransmitText("]->[");
  8870  002260  0EDA               	movlw	low STR_58
  8871  002262  0100               	movlb	0	; () banked
  8872  002264  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8873  002266  0E7F               	movlw	high STR_58
  8874  002268  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8875  00226A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8876                           
  8877                           ;arp.c: 46: UARTTransmitText(macToString(arp.targetMACAddress));
  8878  00226E  EE21  F066         	lfsr	2,ARP_handleNewPacket@arp+18
  8879  002272  EE00  F07A         	lfsr	0,macToString@addr
  8880  002276  0E05               	movlw	5
  8881  002278                     u10081:
  8882  002278  CFDB FFEB          	movff	plusw2,plusw0
  8883  00227C  06E8               	decf	wreg,f,c
  8884  00227E  E2FC               	bc	u10081
  8885  002280  ECAC  F016         	call	_macToString	;wreg free
  8886  002284  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8887  002288  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8888  00228C  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8889                           
  8890                           ;arp.c: 47: UARTTransmitText(", ");
  8891  002290  0E89               	movlw	low (STR_38+17)
  8892  002292  0100               	movlb	0	; () banked
  8893  002294  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8894  002296  0E7E               	movlw	high (STR_38+17)
  8895  002298  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8896  00229A  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8897                           
  8898                           ;arp.c: 48: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  8899  00229E  C16C  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
  8900  0022A2  C16D  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
  8901  0022A6  C16E  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
  8902  0022AA  C16F  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
  8903  0022AE  ECE1  F00E         	call	_ipAdressToString	;wreg free
  8904  0022B2  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8905  0022B6  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8906  0022BA  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8907                           
  8908                           ;arp.c: 49: UARTTransmitText("]");
  8909  0022BE  0EFC               	movlw	low (STR_20+1)
  8910  0022C0  0100               	movlb	0	; () banked
  8911  0022C2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8912  0022C4  0E7F               	movlw	high (STR_20+1)
  8913  0022C6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8914  0022C8  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8915                           
  8916                           ;arp.c: 50: if (arp.fIsProbe)
  8917  0022CC  0101               	movlb	1	; () banked
  8918  0022CE  A370               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
  8919  0022D0  D007               	goto	l876
  8920                           
  8921                           ; BSR set to: 1
  8922                           ;arp.c: 51: UARTTransmitText("[IsProbe]");
  8923  0022D2  0E97               	movlw	low STR_61
  8924  0022D4  0100               	movlb	0	; () banked
  8925  0022D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8926  0022D8  0E7F               	movlw	high STR_61
  8927  0022DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8928  0022DC  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8929  0022E0                     l876:
  8930                           
  8931                           ;arp.c: 52: if (arp.fIsGratuitous)
  8932  0022E0  0101               	movlb	1	; () banked
  8933  0022E2  A170               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
  8934  0022E4  D007               	goto	l877
  8935                           
  8936                           ; BSR set to: 1
  8937                           ;arp.c: 53: UARTTransmitText("[IsGratuitous]");
  8938  0022E6  0E3A               	movlw	low STR_62
  8939  0022E8  0100               	movlb	0	; () banked
  8940  0022EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8941  0022EC  0E7F               	movlw	high STR_62
  8942  0022EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8943  0022F0  EC31  F01F         	call	_UARTTransmitText	;wreg free
  8944  0022F4                     l877:
  8945                           
  8946                           ;arp.c: 55: ARP_replyIfNeeded(arp);
  8947  0022F4  EE21  F054         	lfsr	2,ARP_handleNewPacket@arp
  8948  0022F8  EE01  F000         	lfsr	0,ARP_replyIfNeeded@request
  8949  0022FC  0E1F               	movlw	31
  8950  0022FE                     u10111:
  8951  0022FE  CFDB FFEB          	movff	plusw2,plusw0
  8952  002302  06E8               	decf	wreg,f,c
  8953  002304  E2FC               	bc	u10111
  8954  002306  EC69  F014         	call	_ARP_replyIfNeeded	;wreg free
  8955                           
  8956                           ;arp.c: 56: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getSeconds());
  8957  00230A  EE21  F05C         	lfsr	2,ARP_handleNewPacket@arp+8
  8958  00230E  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
  8959  002312  0E05               	movlw	5
  8960  002314                     u10121:
  8961  002314  CFDB FFEB          	movff	plusw2,plusw0
  8962  002318  06E8               	decf	wreg,f,c
  8963  00231A  E2FC               	bc	u10121
  8964  00231C  C162  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
  8965  002320  C163  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
  8966  002324  C164  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
  8967  002328  C165  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
  8968  00232C  EC4D  F023         	call	_getSeconds	;wreg free
  8969  002330  C060  F06E         	movff	?_getSeconds,ARP_setNewEntry@timestamp
  8970  002334  C061  F06F         	movff	?_getSeconds+1,ARP_setNewEntry@timestamp+1
  8971  002338  C062  F070         	movff	?_getSeconds+2,ARP_setNewEntry@timestamp+2
  8972  00233C  C063  F071         	movff	?_getSeconds+3,ARP_setNewEntry@timestamp+3
  8973  002340  ECB4  F017         	call	_ARP_setNewEntry	;wreg free
  8974  002344  0012               	return		;funcret
  8975  002346                     __end_of_ARP_handleNewPacket:
  8976                           	opt stack 0
  8977                           tblptru	equ	0xFF8
  8978                           tblptrh	equ	0xFF7
  8979                           tblptrl	equ	0xFF6
  8980                           tablat	equ	0xFF5
  8981                           prodh	equ	0xFF4
  8982                           prodl	equ	0xFF3
  8983                           intcon	equ	0xFF2
  8984                           intcon3	equ	0xFF0
  8985                           postinc0	equ	0xFEE
  8986                           plusw0	equ	0xFEB
  8987                           fsr0h	equ	0xFEA
  8988                           fsr0l	equ	0xFE9
  8989                           wreg	equ	0xFE8
  8990                           indf1	equ	0xFE7
  8991                           postinc1	equ	0xFE6
  8992                           postdec1	equ	0xFE5
  8993                           plusw1	equ	0xFE3
  8994                           fsr1h	equ	0xFE2
  8995                           fsr1l	equ	0xFE1
  8996                           indf2	equ	0xFDF
  8997                           postinc2	equ	0xFDE
  8998                           postdec2	equ	0xFDD
  8999                           plusw2	equ	0xFDB
  9000                           fsr2h	equ	0xFDA
  9001                           fsr2l	equ	0xFD9
  9002                           status	equ	0xFD8
  9003                           
  9004 ;; *************** function _getSeconds *****************
  9005 ;; Defined at:
  9006 ;;		line 41 in file "src/stack/stack.c"
  9007 ;; Parameters:    Size  Location     Type
  9008 ;;		None
  9009 ;; Auto vars:     Size  Location     Type
  9010 ;;		None
  9011 ;; Return value:  Size  Location     Type
  9012 ;;                  4    0[BANK0 ] unsigned long 
  9013 ;; Registers used:
  9014 ;;		None
  9015 ;; Tracked objects:
  9016 ;;		On entry : 0/0
  9017 ;;		On exit  : 0/0
  9018 ;;		Unchanged: 0/0
  9019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9020 ;;      Params:         0       4       0       0       0       0       0       0       0
  9021 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9022 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9023 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9024 ;;Total ram usage:        4 bytes
  9025 ;; Hardware stack levels used:    1
  9026 ;; Hardware stack levels required when called:    4
  9027 ;; This function calls:
  9028 ;;		Nothing
  9029 ;; This function is called by:
  9030 ;;		_ARP_handleNewPacket
  9031 ;;		_ARP_checkForEntry
  9032 ;;		_ipv4_sendFrame
  9033 ;; This function uses a non-reentrant model
  9034 ;;
  9035                           
  9036                           	psect	text25
  9037  00469A                     __ptext25:
  9038                           	opt stack 0
  9039  00469A                     _getSeconds:
  9040                           	opt stack 24
  9041                           
  9042                           ;stack.c: 42: return seconds;
  9043                           
  9044                           ;incstack = 0
  9045  00469A  C038  F060         	movff	_seconds,?_getSeconds
  9046  00469E  C039  F061         	movff	_seconds+1,?_getSeconds+1
  9047  0046A2  C03A  F062         	movff	_seconds+2,?_getSeconds+2
  9048  0046A6  C03B  F063         	movff	_seconds+3,?_getSeconds+3
  9049  0046AA  0012               	return		;funcret
  9050  0046AC                     __end_of_getSeconds:
  9051                           	opt stack 0
  9052                           tblptru	equ	0xFF8
  9053                           tblptrh	equ	0xFF7
  9054                           tblptrl	equ	0xFF6
  9055                           tablat	equ	0xFF5
  9056                           prodh	equ	0xFF4
  9057                           prodl	equ	0xFF3
  9058                           intcon	equ	0xFF2
  9059                           intcon3	equ	0xFF0
  9060                           postinc0	equ	0xFEE
  9061                           plusw0	equ	0xFEB
  9062                           fsr0h	equ	0xFEA
  9063                           fsr0l	equ	0xFE9
  9064                           wreg	equ	0xFE8
  9065                           indf1	equ	0xFE7
  9066                           postinc1	equ	0xFE6
  9067                           postdec1	equ	0xFE5
  9068                           plusw1	equ	0xFE3
  9069                           fsr1h	equ	0xFE2
  9070                           fsr1l	equ	0xFE1
  9071                           indf2	equ	0xFDF
  9072                           postinc2	equ	0xFDE
  9073                           postdec2	equ	0xFDD
  9074                           plusw2	equ	0xFDB
  9075                           fsr2h	equ	0xFDA
  9076                           fsr2l	equ	0xFD9
  9077                           status	equ	0xFD8
  9078                           
  9079 ;; *************** function _ethernetController_dropPacket *****************
  9080 ;; Defined at:
  9081 ;;		line 382 in file "src/enc424j600/ENC424J600.c"
  9082 ;; Parameters:    Size  Location     Type
  9083 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9084 ;;		 -> stack.ethernet(15), stack(113), 
  9085 ;; Auto vars:     Size  Location     Type
  9086 ;;		None
  9087 ;; Return value:  Size  Location     Type
  9088 ;;                  1    wreg      void 
  9089 ;; Registers used:
  9090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9091 ;; Tracked objects:
  9092 ;;		On entry : 0/0
  9093 ;;		On exit  : 0/0
  9094 ;;		Unchanged: 0/0
  9095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9096 ;;      Params:         0       2       0       0       0       0       0       0       0
  9097 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9098 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9099 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9100 ;;Total ram usage:        2 bytes
  9101 ;; Hardware stack levels used:    1
  9102 ;; Hardware stack levels required when called:    8
  9103 ;; This function calls:
  9104 ;;		_ENC424J600_setRXTailPointer
  9105 ;;		_ENC424J600_writeSingleByte
  9106 ;;		_ethernetController_getNextPacketPointer
  9107 ;; This function is called by:
  9108 ;;		_ethernet_rxGetNewFrame
  9109 ;;		_ARP_handleNewPacket
  9110 ;;		_ipv4_handleNewPacket
  9111 ;; This function uses a non-reentrant model
  9112 ;;
  9113                           
  9114                           	psect	text26
  9115  004192                     __ptext26:
  9116                           	opt stack 0
  9117  004192                     _ethernetController_dropPacket:
  9118                           	opt stack 19
  9119                           
  9120                           ;ENC424J600.c: 397: if (ethernetController_getNextPacketPointer() == 0x3000) {
  9121                           
  9122                           ;incstack = 0
  9123  004192  EC67  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  9124  004196  0E30               	movlw	48
  9125  004198  0100               	movlb	0	; () banked
  9126  00419A  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9127  00419C  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9128  00419E  A4D8               	btfss	status,2,c
  9129  0041A0  D007               	goto	l187
  9130                           
  9131                           ; BSR set to: 0
  9132                           ;ENC424J600.c: 398: ENC424J600_setRXTailPointer(0x5FFF - 1);
  9133  0041A2  0E5F               	movlw	95
  9134  0041A4  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9135  0041A6  0EFE               	movlw	254
  9136  0041A8  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9137  0041AA  EC02  F022         	call	_ENC424J600_setRXTailPointer	;wreg free
  9138                           
  9139                           ;ENC424J600.c: 399: } else {
  9140  0041AE  D00B               	goto	l188
  9141  0041B0                     l187:
  9142                           
  9143                           ;ENC424J600.c: 400: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
  9144  0041B0  EC67  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
  9145  0041B4  0EFE               	movlw	254
  9146  0041B6  0100               	movlb	0	; () banked
  9147  0041B8  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9148  0041BA  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
  9149  0041BC  0EFF               	movlw	255
  9150  0041BE  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9151  0041C0  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
  9152  0041C2  EC02  F022         	call	_ENC424J600_setRXTailPointer	;wreg free
  9153  0041C6                     l188:
  9154                           
  9155                           ;ENC424J600.c: 401: }
  9156                           ;ENC424J600.c: 403: ENC424J600_writeSingleByte(0b11001100);
  9157  0041C6  0ECC               	movlw	204
  9158  0041C8  EC38  F023         	call	_ENC424J600_writeSingleByte
  9159  0041CC  0012               	return		;funcret
  9160  0041CE                     __end_of_ethernetController_dropPacket:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon3	equ	0xFF0
  9170                           postinc0	equ	0xFEE
  9171                           plusw0	equ	0xFEB
  9172                           fsr0h	equ	0xFEA
  9173                           fsr0l	equ	0xFE9
  9174                           wreg	equ	0xFE8
  9175                           indf1	equ	0xFE7
  9176                           postinc1	equ	0xFE6
  9177                           postdec1	equ	0xFE5
  9178                           plusw1	equ	0xFE3
  9179                           fsr1h	equ	0xFE2
  9180                           fsr1l	equ	0xFE1
  9181                           indf2	equ	0xFDF
  9182                           postinc2	equ	0xFDE
  9183                           postdec2	equ	0xFDD
  9184                           plusw2	equ	0xFDB
  9185                           fsr2h	equ	0xFDA
  9186                           fsr2l	equ	0xFD9
  9187                           status	equ	0xFD8
  9188                           
  9189 ;; *************** function _ARP_replyIfNeeded *****************
  9190 ;; Defined at:
  9191 ;;		line 129 in file "src/stack/protocols/arp.c"
  9192 ;; Parameters:    Size  Location     Type
  9193 ;;  request        32    0[BANK1 ] struct ARP_message
  9194 ;; Auto vars:     Size  Location     Type
  9195 ;;  reply          32   52[BANK1 ] struct ARP_message
  9196 ;;  targetMAC       6   42[BANK1 ] struct macaddress
  9197 ;;  senderMAC       6   36[BANK1 ] struct macaddress
  9198 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9199 ;;  senderIP        4   32[BANK1 ] struct ipv4_address
  9200 ;; Return value:  Size  Location     Type
  9201 ;;                  1    wreg      void 
  9202 ;; Registers used:
  9203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9204 ;; Tracked objects:
  9205 ;;		On entry : 0/0
  9206 ;;		On exit  : 0/0
  9207 ;;		Unchanged: 0/0
  9208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9209 ;;      Params:         0       0      32       0       0       0       0       0       0
  9210 ;;      Locals:         0       0      52       0       0       0       0       0       0
  9211 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9212 ;;      Totals:         0       0      84       0       0       0       0       0       0
  9213 ;;Total ram usage:       84 bytes
  9214 ;; Hardware stack levels used:    1
  9215 ;; Hardware stack levels required when called:   10
  9216 ;; This function calls:
  9217 ;;		_ARP_send
  9218 ;;		_UARTTransmitText
  9219 ;;		_ethernetController_getMacAddress
  9220 ;;		_ipAdressToString
  9221 ;;		_macToString
  9222 ;; This function is called by:
  9223 ;;		_ARP_handleNewPacket
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           	psect	text27
  9228  0028D2                     __ptext27:
  9229                           	opt stack 0
  9230  0028D2                     _ARP_replyIfNeeded:
  9231                           	opt stack 17
  9232                           
  9233                           ;arp.c: 130: if (request.operation != ARP_REQUEST)
  9234                           
  9235                           ;incstack = 0
  9236  0028D2  0101               	movlb	1	; () banked
  9237  0028D4  0506               	decf	(ARP_replyIfNeeded@request+6)& (0+255),w,b
  9238  0028D6  1107               	iorwf	(ARP_replyIfNeeded@request+7)& (0+255),w,b
  9239  0028D8  A4D8               	btfss	status,2,c
  9240  0028DA  0012               	return	
  9241                           
  9242                           ; BSR set to: 1
  9243                           ;arp.c: 136: ARP_message_t reply;
  9244                           ;arp.c: 137: ipv4_address_t senderIP;
  9245                           ;arp.c: 138: ipv4_address_t targetIP;
  9246                           ;arp.c: 139: macaddress_t senderMAC;
  9247                           ;arp.c: 140: macaddress_t targetMAC;
  9248                           ;arp.c: 142: senderMAC = ethernetController_getMacAddress();
  9249                           
  9250                           ; BSR set to: 1
  9251                           
  9252                           ; BSR set to: 1
  9253                           ;arp.c: 131: return;
  9254  0028DC  EC80  F01D         	call	_ethernetController_getMacAddress	;wreg free
  9255  0028E0  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9256  0028E4  0E05               	movlw	5
  9257  0028E6                     u9851:
  9258  0028E6  CFEB FFDB          	movff	plusw0,plusw2
  9259  0028EA  06E8               	decf	wreg,f,c
  9260  0028EC  E2FC               	bc	u9851
  9261                           
  9262                           ;arp.c: 143: targetMAC = request.senderMACAddress;
  9263  0028EE  EE21  F008         	lfsr	2,ARP_replyIfNeeded@request+8
  9264  0028F2  EE11  F02A         	lfsr	1,ARP_replyIfNeeded@targetMAC
  9265  0028F6  0E05               	movlw	5
  9266  0028F8                     u9861:
  9267  0028F8  CFDB FFE3          	movff	plusw2,plusw1
  9268  0028FC  06E8               	decf	wreg,f,c
  9269  0028FE  E2FC               	bc	u9861
  9270                           
  9271                           ;arp.c: 145: targetIP = request.senderIPAddress;
  9272  002900  C10E  F130         	movff	ARP_replyIfNeeded@request+14,ARP_replyIfNeeded@targetIP
  9273  002904  C10F  F131         	movff	ARP_replyIfNeeded@request+15,ARP_replyIfNeeded@targetIP+1
  9274  002908  C110  F132         	movff	ARP_replyIfNeeded@request+16,ARP_replyIfNeeded@targetIP+2
  9275  00290C  C111  F133         	movff	ARP_replyIfNeeded@request+17,ARP_replyIfNeeded@targetIP+3
  9276                           
  9277                           ;arp.c: 147: reply.hlen = 6;
  9278  002910  0E06               	movlw	6
  9279  002912  0101               	movlb	1	; () banked
  9280  002914  6F38               	movwf	(ARP_replyIfNeeded@reply+4)& (0+255),b
  9281                           
  9282                           ; BSR set to: 1
  9283                           ;arp.c: 148: reply.plen = 4;
  9284  002916  0E04               	movlw	4
  9285  002918  6F39               	movwf	(ARP_replyIfNeeded@reply+5)& (0+255),b
  9286                           
  9287                           ; BSR set to: 1
  9288                           ;arp.c: 149: reply.htype = ARP_HTYPE_ETHERNET;
  9289  00291A  0E00               	movlw	0
  9290  00291C  6F35               	movwf	(ARP_replyIfNeeded@reply+1)& (0+255),b
  9291  00291E  0E01               	movlw	1
  9292  002920  6F34               	movwf	ARP_replyIfNeeded@reply& (0+255),b
  9293                           
  9294                           ; BSR set to: 1
  9295                           ;arp.c: 150: reply.ptype = ARP_PTYPE_IPv4;
  9296  002922  0E08               	movlw	8
  9297  002924  6F37               	movwf	(ARP_replyIfNeeded@reply+3)& (0+255),b
  9298  002926  0E00               	movlw	0
  9299  002928  6F36               	movwf	(ARP_replyIfNeeded@reply+2)& (0+255),b
  9300                           
  9301                           ; BSR set to: 1
  9302                           ;arp.c: 151: reply.operation = ARP_REPLY;
  9303  00292A  0E00               	movlw	0
  9304  00292C  6F3B               	movwf	(ARP_replyIfNeeded@reply+7)& (0+255),b
  9305  00292E  0E02               	movlw	2
  9306  002930  6F3A               	movwf	(ARP_replyIfNeeded@reply+6)& (0+255),b
  9307                           
  9308                           ; BSR set to: 1
  9309                           ;arp.c: 152: reply.senderIPAddress = senderIP;
  9310  002932  C120  F142         	movff	ARP_replyIfNeeded@senderIP,ARP_replyIfNeeded@reply+14
  9311  002936  C121  F143         	movff	ARP_replyIfNeeded@senderIP+1,ARP_replyIfNeeded@reply+15
  9312  00293A  C122  F144         	movff	ARP_replyIfNeeded@senderIP+2,ARP_replyIfNeeded@reply+16
  9313  00293E  C123  F145         	movff	ARP_replyIfNeeded@senderIP+3,ARP_replyIfNeeded@reply+17
  9314                           
  9315                           ; BSR set to: 1
  9316                           ;arp.c: 153: reply.senderMACAddress = senderMAC;
  9317  002942  EE21  F024         	lfsr	2,ARP_replyIfNeeded@senderMAC
  9318  002946  EE11  F03C         	lfsr	1,ARP_replyIfNeeded@reply+8
  9319  00294A  0E05               	movlw	5
  9320  00294C                     u9871:
  9321  00294C  CFDB FFE3          	movff	plusw2,plusw1
  9322  002950  06E8               	decf	wreg,f,c
  9323  002952  E2FC               	bc	u9871
  9324                           
  9325                           ; BSR set to: 1
  9326                           ;arp.c: 154: reply.targetIPAddress = targetIP;
  9327  002954  C130  F14C         	movff	ARP_replyIfNeeded@targetIP,ARP_replyIfNeeded@reply+24
  9328  002958  C131  F14D         	movff	ARP_replyIfNeeded@targetIP+1,ARP_replyIfNeeded@reply+25
  9329  00295C  C132  F14E         	movff	ARP_replyIfNeeded@targetIP+2,ARP_replyIfNeeded@reply+26
  9330  002960  C133  F14F         	movff	ARP_replyIfNeeded@targetIP+3,ARP_replyIfNeeded@reply+27
  9331                           
  9332                           ; BSR set to: 1
  9333                           ;arp.c: 155: reply.targetMACAddress = targetMAC;
  9334  002964  EE21  F02A         	lfsr	2,ARP_replyIfNeeded@targetMAC
  9335  002968  EE11  F046         	lfsr	1,ARP_replyIfNeeded@reply+18
  9336  00296C  0E05               	movlw	5
  9337  00296E                     u9881:
  9338  00296E  CFDB FFE3          	movff	plusw2,plusw1
  9339  002972  06E8               	decf	wreg,f,c
  9340  002974  E2FC               	bc	u9881
  9341                           
  9342                           ; BSR set to: 1
  9343                           ;arp.c: 157: ARP_send(reply);
  9344  002976  EE21  F034         	lfsr	2,ARP_replyIfNeeded@reply
  9345  00297A  EE00  F0A7         	lfsr	0,ARP_send@arp
  9346  00297E  0E1F               	movlw	31
  9347  002980                     u9891:
  9348  002980  CFDB FFEB          	movff	plusw2,plusw0
  9349  002984  06E8               	decf	wreg,f,c
  9350  002986  E2FC               	bc	u9891
  9351  002988  ECA5  F00D         	call	_ARP_send	;wreg free
  9352                           
  9353                           ;arp.c: 159: UARTTransmitText("[Reply sent to ");
  9354  00298C  0E0A               	movlw	low STR_63
  9355  00298E  0100               	movlb	0	; () banked
  9356  002990  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9357  002992  0E7F               	movlw	high STR_63
  9358  002994  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9359  002996  EC31  F01F         	call	_UARTTransmitText	;wreg free
  9360                           
  9361                           ;arp.c: 160: UARTTransmitText(macToString(reply.targetMACAddress));
  9362  00299A  EE21  F046         	lfsr	2,ARP_replyIfNeeded@reply+18
  9363  00299E  EE00  F07A         	lfsr	0,macToString@addr
  9364  0029A2  0E05               	movlw	5
  9365  0029A4                     u9901:
  9366  0029A4  CFDB FFEB          	movff	plusw2,plusw0
  9367  0029A8  06E8               	decf	wreg,f,c
  9368  0029AA  E2FC               	bc	u9901
  9369  0029AC  ECAC  F016         	call	_macToString	;wreg free
  9370  0029B0  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9371  0029B4  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9372  0029B8  EC31  F01F         	call	_UARTTransmitText	;wreg free
  9373                           
  9374                           ;arp.c: 161: UARTTransmitText(", ");
  9375  0029BC  0E89               	movlw	low (STR_38+17)
  9376  0029BE  0100               	movlb	0	; () banked
  9377  0029C0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9378  0029C2  0E7E               	movlw	high (STR_38+17)
  9379  0029C4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9380  0029C6  EC31  F01F         	call	_UARTTransmitText	;wreg free
  9381                           
  9382                           ;arp.c: 162: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9383  0029CA  C14C  F067         	movff	ARP_replyIfNeeded@reply+24,ipAdressToString@ip
  9384  0029CE  C14D  F068         	movff	ARP_replyIfNeeded@reply+25,ipAdressToString@ip+1
  9385  0029D2  C14E  F069         	movff	ARP_replyIfNeeded@reply+26,ipAdressToString@ip+2
  9386  0029D6  C14F  F06A         	movff	ARP_replyIfNeeded@reply+27,ipAdressToString@ip+3
  9387  0029DA  ECE1  F00E         	call	_ipAdressToString	;wreg free
  9388  0029DE  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9389  0029E2  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9390  0029E6  EC31  F01F         	call	_UARTTransmitText	;wreg free
  9391                           
  9392                           ;arp.c: 163: UARTTransmitText("]");
  9393  0029EA  0EFC               	movlw	low (STR_20+1)
  9394  0029EC  0100               	movlb	0	; () banked
  9395  0029EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9396  0029F0  0E7F               	movlw	high (STR_20+1)
  9397  0029F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9398  0029F4  EC31  F01F         	call	_UARTTransmitText	;wreg free
  9399  0029F8  0012               	return		;funcret
  9400  0029FA                     __end_of_ARP_replyIfNeeded:
  9401                           	opt stack 0
  9402                           tblptru	equ	0xFF8
  9403                           tblptrh	equ	0xFF7
  9404                           tblptrl	equ	0xFF6
  9405                           tablat	equ	0xFF5
  9406                           prodh	equ	0xFF4
  9407                           prodl	equ	0xFF3
  9408                           intcon	equ	0xFF2
  9409                           intcon3	equ	0xFF0
  9410                           postinc0	equ	0xFEE
  9411                           plusw0	equ	0xFEB
  9412                           fsr0h	equ	0xFEA
  9413                           fsr0l	equ	0xFE9
  9414                           wreg	equ	0xFE8
  9415                           indf1	equ	0xFE7
  9416                           postinc1	equ	0xFE6
  9417                           postdec1	equ	0xFE5
  9418                           plusw1	equ	0xFE3
  9419                           fsr1h	equ	0xFE2
  9420                           fsr1l	equ	0xFE1
  9421                           indf2	equ	0xFDF
  9422                           postinc2	equ	0xFDE
  9423                           postdec2	equ	0xFDD
  9424                           plusw2	equ	0xFDB
  9425                           fsr2h	equ	0xFDA
  9426                           fsr2l	equ	0xFD9
  9427                           status	equ	0xFD8
  9428                           
  9429 ;; *************** function _macToString *****************
  9430 ;; Defined at:
  9431 ;;		line 147 in file "src/system/uart.c"
  9432 ;; Parameters:    Size  Location     Type
  9433 ;;  addr            6   26[BANK0 ] struct macaddress
  9434 ;; Auto vars:     Size  Location     Type
  9435 ;;  i               2   53[BANK0 ] int 
  9436 ;;  address        18   33[BANK0 ] unsigned char [18]
  9437 ;;  j               1   55[BANK0 ] unsigned char 
  9438 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9439 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9440 ;; Return value:  Size  Location     Type
  9441 ;;                  2   26[BANK0 ] PTR unsigned char 
  9442 ;; Registers used:
  9443 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9444 ;; Tracked objects:
  9445 ;;		On entry : 0/0
  9446 ;;		On exit  : 0/0
  9447 ;;		Unchanged: 0/0
  9448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9449 ;;      Params:         0       6       0       0       0       0       0       0       0
  9450 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9451 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9452 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9453 ;;Total ram usage:       30 bytes
  9454 ;; Hardware stack levels used:    1
  9455 ;; Hardware stack levels required when called:    4
  9456 ;; This function calls:
  9457 ;;		Nothing
  9458 ;; This function is called by:
  9459 ;;		_ethernet_rxGetNewFrame
  9460 ;;		_main
  9461 ;;		_ARP_handleNewPacket
  9462 ;;		_ARP_replyIfNeeded
  9463 ;;		_ipv4_sendFrame
  9464 ;;		_arpEntryToString
  9465 ;; This function uses a non-reentrant model
  9466 ;;
  9467                           
  9468                           	psect	text28
  9469  002D58                     __ptext28:
  9470                           	opt stack 0
  9471  002D58                     _macToString:
  9472                           	opt stack 26
  9473                           
  9474                           ;uart.c: 148: char address[] = "??:??:??:??:??:??";
  9475                           
  9476                           ;incstack = 0
  9477  002D58  EE22  F0EB         	lfsr	2,macToString@F5791
  9478  002D5C  EE10  F081         	lfsr	1,macToString@address
  9479  002D60  0E11               	movlw	17
  9480  002D62                     u8741:
  9481  002D62  CFDB FFE3          	movff	plusw2,plusw1
  9482  002D66  06E8               	decf	wreg,f,c
  9483  002D68  E2FC               	bc	u8741
  9484                           
  9485                           ;uart.c: 149: uint8_t j = 0;
  9486  002D6A  0E00               	movlw	0
  9487  002D6C  0100               	movlb	0	; () banked
  9488  002D6E  6F97               	movwf	macToString@j& (0+255),b
  9489                           
  9490                           ; BSR set to: 0
  9491                           ;uart.c: 150: uint8_t firstDigit;
  9492                           ;uart.c: 151: uint8_t secondDigit;
  9493                           ;uart.c: 153: for (int i = 0; i < 6; i++) {
  9494  002D70  0E00               	movlw	0
  9495  002D72  6F96               	movwf	(macToString@i+1)& (0+255),b
  9496  002D74  0E00               	movlw	0
  9497  002D76  6F95               	movwf	macToString@i& (0+255),b
  9498                           
  9499                           ; BSR set to: 0
  9500  002D78  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9501  002D7A  D006               	goto	l781
  9502  002D7C  5196               	movf	(macToString@i+1)& (0+255),w,b
  9503  002D7E  E16B               	bnz	l782
  9504  002D80  0E06               	movlw	6
  9505  002D82  5D95               	subwf	macToString@i& (0+255),w,b
  9506  002D84  B0D8               	btfsc	status,0,c
  9507  002D86  D067               	goto	u8790
  9508  002D88                     l781:
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;uart.c: 154: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9512                           
  9513                           ; BSR set to: 0
  9514  002D88  0E7A               	movlw	low macToString@addr
  9515  002D8A  2595               	addwf	macToString@i& (0+255),w,b
  9516  002D8C  6ED9               	movwf	fsr2l,c
  9517  002D8E  0E00               	movlw	high macToString@addr
  9518  002D90  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9519  002D92  6EDA               	movwf	fsr2h,c
  9520  002D94  50DF               	movf	indf2,w,c
  9521  002D96  6F80               	movwf	??_macToString& (0+255),b
  9522  002D98  3980               	swapf	??_macToString& (0+255),w,b
  9523  002D9A  0B0F               	andlw	15
  9524  002D9C  0B0F               	andlw	15
  9525  002D9E  6F93               	movwf	macToString@firstDigit& (0+255),b
  9526                           
  9527                           ;uart.c: 155: secondDigit = addr.address[i] & 0x0F;
  9528  002DA0  0E7A               	movlw	low macToString@addr
  9529  002DA2  2595               	addwf	macToString@i& (0+255),w,b
  9530  002DA4  6ED9               	movwf	fsr2l,c
  9531  002DA6  0E00               	movlw	high macToString@addr
  9532  002DA8  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9533  002DAA  6EDA               	movwf	fsr2h,c
  9534  002DAC  50DF               	movf	indf2,w,c
  9535  002DAE  0B0F               	andlw	15
  9536  002DB0  6F94               	movwf	macToString@secondDigit& (0+255),b
  9537                           
  9538                           ; BSR set to: 0
  9539                           ;uart.c: 157: firstDigit += 0x30;
  9540  002DB2  0E30               	movlw	48
  9541  002DB4  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9542                           
  9543                           ; BSR set to: 0
  9544                           ;uart.c: 158: secondDigit += 0x30;
  9545  002DB6  0E30               	movlw	48
  9546  002DB8  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;uart.c: 160: if (firstDigit > '9') {
  9550  002DBA  0E39               	movlw	57
  9551  002DBC  6593               	cpfsgt	macToString@firstDigit& (0+255),b
  9552  002DBE  D00C               	goto	l783
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;uart.c: 161: address[j++] = firstDigit + 7;
  9556  002DC0  5197               	movf	macToString@j& (0+255),w,b
  9557  002DC2  0D01               	mullw	1
  9558  002DC4  0E81               	movlw	low macToString@address
  9559  002DC6  24F3               	addwf	prodl,w,c
  9560  002DC8  6ED9               	movwf	fsr2l,c
  9561  002DCA  0E00               	movlw	high macToString@address
  9562  002DCC  20F4               	addwfc	prodh,w,c
  9563  002DCE  6EDA               	movwf	fsr2h,c
  9564  002DD0  5193               	movf	macToString@firstDigit& (0+255),w,b
  9565  002DD2  0F07               	addlw	7
  9566  002DD4  6EDF               	movwf	indf2,c
  9567  002DD6  D00A               	goto	l7363
  9568  002DD8                     l783:
  9569                           
  9570                           ; BSR set to: 0
  9571                           ;uart.c: 163: address[j++] = firstDigit;
  9572                           
  9573                           ; BSR set to: 0
  9574  002DD8  5197               	movf	macToString@j& (0+255),w,b
  9575  002DDA  0D01               	mullw	1
  9576  002DDC  0E81               	movlw	low macToString@address
  9577  002DDE  24F3               	addwf	prodl,w,c
  9578  002DE0  6ED9               	movwf	fsr2l,c
  9579  002DE2  0E00               	movlw	high macToString@address
  9580  002DE4  20F4               	addwfc	prodh,w,c
  9581  002DE6  6EDA               	movwf	fsr2h,c
  9582  002DE8  C093  FFDF         	movff	macToString@firstDigit,indf2
  9583  002DEC                     l7363:
  9584                           
  9585                           ; BSR set to: 0
  9586  002DEC  2B97               	incf	macToString@j& (0+255),f,b
  9587                           
  9588                           ; BSR set to: 0
  9589                           ;uart.c: 164: }
  9590                           ;uart.c: 165: if (secondDigit > '9') {
  9591                           
  9592                           ; BSR set to: 0
  9593  002DEE  0E39               	movlw	57
  9594  002DF0  6594               	cpfsgt	macToString@secondDigit& (0+255),b
  9595  002DF2  D00C               	goto	l785
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;uart.c: 166: address[j++] = secondDigit + 7;
  9599  002DF4  5197               	movf	macToString@j& (0+255),w,b
  9600  002DF6  0D01               	mullw	1
  9601  002DF8  0E81               	movlw	low macToString@address
  9602  002DFA  24F3               	addwf	prodl,w,c
  9603  002DFC  6ED9               	movwf	fsr2l,c
  9604  002DFE  0E00               	movlw	high macToString@address
  9605  002E00  20F4               	addwfc	prodh,w,c
  9606  002E02  6EDA               	movwf	fsr2h,c
  9607  002E04  5194               	movf	macToString@secondDigit& (0+255),w,b
  9608  002E06  0F07               	addlw	7
  9609  002E08  6EDF               	movwf	indf2,c
  9610  002E0A  D00A               	goto	l7373
  9611  002E0C                     l785:
  9612                           
  9613                           ; BSR set to: 0
  9614                           ;uart.c: 168: address[j++] = secondDigit;
  9615                           
  9616                           ; BSR set to: 0
  9617  002E0C  5197               	movf	macToString@j& (0+255),w,b
  9618  002E0E  0D01               	mullw	1
  9619  002E10  0E81               	movlw	low macToString@address
  9620  002E12  24F3               	addwf	prodl,w,c
  9621  002E14  6ED9               	movwf	fsr2l,c
  9622  002E16  0E00               	movlw	high macToString@address
  9623  002E18  20F4               	addwfc	prodh,w,c
  9624  002E1A  6EDA               	movwf	fsr2h,c
  9625  002E1C  C094  FFDF         	movff	macToString@secondDigit,indf2
  9626  002E20                     l7373:
  9627                           
  9628                           ; BSR set to: 0
  9629  002E20  2B97               	incf	macToString@j& (0+255),f,b
  9630                           
  9631                           ; BSR set to: 0
  9632                           ;uart.c: 169: }
  9633                           ;uart.c: 171: if (i < 5) {
  9634                           
  9635                           ; BSR set to: 0
  9636  002E22  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9637  002E24  D006               	goto	u8780
  9638  002E26  5196               	movf	(macToString@i+1)& (0+255),w,b
  9639  002E28  E10F               	bnz	l7381
  9640  002E2A  0E05               	movlw	5
  9641  002E2C  5D95               	subwf	macToString@i& (0+255),w,b
  9642  002E2E  B0D8               	btfsc	status,0,c
  9643  002E30  D00B               	goto	l787
  9644  002E32                     u8780:
  9645                           
  9646                           ; BSR set to: 0
  9647                           ;uart.c: 172: address[j++] = ':';
  9648  002E32  5197               	movf	macToString@j& (0+255),w,b
  9649  002E34  0D01               	mullw	1
  9650  002E36  0E81               	movlw	low macToString@address
  9651  002E38  24F3               	addwf	prodl,w,c
  9652  002E3A  6ED9               	movwf	fsr2l,c
  9653  002E3C  0E00               	movlw	high macToString@address
  9654  002E3E  20F4               	addwfc	prodh,w,c
  9655  002E40  6EDA               	movwf	fsr2h,c
  9656  002E42  0E3A               	movlw	58
  9657  002E44  6EDF               	movwf	indf2,c
  9658                           
  9659                           ; BSR set to: 0
  9660  002E46  2B97               	incf	macToString@j& (0+255),f,b
  9661  002E48                     l787:
  9662  002E48                     l7381:
  9663                           
  9664                           ; BSR set to: 0
  9665  002E48  4B95               	infsnz	macToString@i& (0+255),f,b
  9666  002E4A  2B96               	incf	(macToString@i+1)& (0+255),f,b
  9667                           
  9668                           ; BSR set to: 0
  9669  002E4C  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9670  002E4E  D79C               	goto	l781
  9671  002E50  5196               	movf	(macToString@i+1)& (0+255),w,b
  9672  002E52  E101               	bnz	l7385
  9673  002E54  D795               	goto	L1
  9674  002E56                     u8790:
  9675  002E56                     l782:
  9676  002E56                     l7385:
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;uart.c: 173: }
  9680                           ;uart.c: 174: }
  9681                           ;uart.c: 175: return &address;
  9682  002E56  0E81               	movlw	low macToString@address
  9683  002E58  6F7A               	movwf	?_macToString& (0+255),b
  9684  002E5A  0E00               	movlw	high macToString@address
  9685  002E5C  6F7B               	movwf	(?_macToString+1)& (0+255),b
  9686  002E5E  0012               	return	
  9687  002E60                     __end_of_macToString:
  9688                           	opt stack 0
  9689                           tblptru	equ	0xFF8
  9690                           tblptrh	equ	0xFF7
  9691                           tblptrl	equ	0xFF6
  9692                           tablat	equ	0xFF5
  9693                           prodh	equ	0xFF4
  9694                           prodl	equ	0xFF3
  9695                           intcon	equ	0xFF2
  9696                           intcon3	equ	0xFF0
  9697                           postinc0	equ	0xFEE
  9698                           plusw0	equ	0xFEB
  9699                           fsr0h	equ	0xFEA
  9700                           fsr0l	equ	0xFE9
  9701                           wreg	equ	0xFE8
  9702                           indf1	equ	0xFE7
  9703                           postinc1	equ	0xFE6
  9704                           postdec1	equ	0xFE5
  9705                           plusw1	equ	0xFE3
  9706                           fsr1h	equ	0xFE2
  9707                           fsr1l	equ	0xFE1
  9708                           indf2	equ	0xFDF
  9709                           postinc2	equ	0xFDE
  9710                           postdec2	equ	0xFDD
  9711                           plusw2	equ	0xFDB
  9712                           fsr2h	equ	0xFDA
  9713                           fsr2l	equ	0xFD9
  9714                           status	equ	0xFD8
  9715                           
  9716 ;; *************** function _ipAdressToString *****************
  9717 ;; Defined at:
  9718 ;;		line 189 in file "src/system/uart.c"
  9719 ;; Parameters:    Size  Location     Type
  9720 ;;  ip              4    7[BANK0 ] struct ipv4_address
  9721 ;; Auto vars:     Size  Location     Type
  9722 ;;  i               1   28[BANK0 ] unsigned char 
  9723 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
  9724 ;;  tens            4   19[BANK0 ] unsigned char [4]
  9725 ;;  ones            4   15[BANK0 ] unsigned char [4]
  9726 ;;  pointer         1   27[BANK0 ] unsigned char 
  9727 ;; Return value:  Size  Location     Type
  9728 ;;                  2    7[BANK0 ] PTR unsigned char 
  9729 ;; Registers used:
  9730 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9731 ;; Tracked objects:
  9732 ;;		On entry : 0/0
  9733 ;;		On exit  : 0/0
  9734 ;;		Unchanged: 0/0
  9735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9736 ;;      Params:         0       4       0       0       0       0       0       0       0
  9737 ;;      Locals:         0      14       0       0       0       0       0       0       0
  9738 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9739 ;;      Totals:         0      22       0       0       0       0       0       0       0
  9740 ;;Total ram usage:       22 bytes
  9741 ;; Hardware stack levels used:    1
  9742 ;; Hardware stack levels required when called:    5
  9743 ;; This function calls:
  9744 ;;		___lwdiv
  9745 ;;		___lwmod
  9746 ;; This function is called by:
  9747 ;;		_handleStackBackgroundTasks
  9748 ;;		_ARP_handleNewPacket
  9749 ;;		_ARP_replyIfNeeded
  9750 ;;		_ipv4_sendFrame
  9751 ;;		_arpEntryToString
  9752 ;; This function uses a non-reentrant model
  9753 ;;
  9754                           
  9755                           	psect	text29
  9756  001DC2                     __ptext29:
  9757                           	opt stack 0
  9758  001DC2                     _ipAdressToString:
  9759                           	opt stack 23
  9760                           
  9761                           ;uart.c: 190: char static address [] = "???.???.???.???";
  9762                           ;uart.c: 191: uint8_t hundreds[4];
  9763                           ;uart.c: 192: uint8_t tens[4];
  9764                           ;uart.c: 193: uint8_t ones[4];
  9765                           ;uart.c: 194: uint8_t pointer = 0;
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;incstack = 0
  9769  001DC2  0E00               	movlw	0
  9770  001DC4  0100               	movlb	0	; () banked
  9771  001DC6  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
  9772                           
  9773                           ;uart.c: 196: for (uint8_t i = 0; i < 4; i++) {
  9774  001DC8  0E00               	movlw	0
  9775  001DCA  6F7C               	movwf	ipAdressToString@i& (0+255),b
  9776  001DCC                     l7431:
  9777                           
  9778                           ; BSR set to: 0
  9779  001DCC  0E03               	movlw	3
  9780  001DCE  657C               	cpfsgt	ipAdressToString@i& (0+255),b
  9781  001DD0  D001               	goto	l801
  9782  001DD2  D0DF               	goto	u8910
  9783  001DD4                     l801:
  9784                           
  9785                           ; BSR set to: 0
  9786                           ;uart.c: 198: hundreds[i] = ip.address[i] / 100u;
  9787                           
  9788                           ; BSR set to: 0
  9789  001DD4  517C               	movf	ipAdressToString@i& (0+255),w,b
  9790  001DD6  0D01               	mullw	1
  9791  001DD8  0E77               	movlw	low ipAdressToString@hundreds
  9792  001DDA  24F3               	addwf	prodl,w,c
  9793  001DDC  6ED9               	movwf	fsr2l,c
  9794  001DDE  0E00               	movlw	high ipAdressToString@hundreds
  9795  001DE0  20F4               	addwfc	prodh,w,c
  9796  001DE2  6EDA               	movwf	fsr2h,c
  9797  001DE4  517C               	movf	ipAdressToString@i& (0+255),w,b
  9798  001DE6  0D01               	mullw	1
  9799  001DE8  0E67               	movlw	low ipAdressToString@ip
  9800  001DEA  24F3               	addwf	prodl,w,c
  9801  001DEC  6EE1               	movwf	fsr1l,c
  9802  001DEE  0E00               	movlw	high ipAdressToString@ip
  9803  001DF0  20F4               	addwfc	prodh,w,c
  9804  001DF2  6EE2               	movwf	fsr1h,c
  9805  001DF4  50E7               	movf	indf1,w,c
  9806  001DF6  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9807  001DF8  516B               	movf	??_ipAdressToString& (0+255),w,b
  9808  001DFA  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9809  001DFC  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
  9810  001DFE  0E00               	movlw	0
  9811  001E00  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9812  001E02  0E64               	movlw	100
  9813  001E04  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9814  001E06  EC5C  F01F         	call	___lwdiv	;wreg free
  9815  001E0A  0100               	movlb	0	; () banked
  9816  001E0C  5160               	movf	?___lwdiv& (0+255),w,b
  9817  001E0E  6EDF               	movwf	indf2,c
  9818                           
  9819                           ;uart.c: 199: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
  9820  001E10  517C               	movf	ipAdressToString@i& (0+255),w,b
  9821  001E12  0D01               	mullw	1
  9822  001E14  0E73               	movlw	low ipAdressToString@tens
  9823  001E16  24F3               	addwf	prodl,w,c
  9824  001E18  6ED9               	movwf	fsr2l,c
  9825  001E1A  0E00               	movlw	high ipAdressToString@tens
  9826  001E1C  20F4               	addwfc	prodh,w,c
  9827  001E1E  6EDA               	movwf	fsr2h,c
  9828  001E20  517C               	movf	ipAdressToString@i& (0+255),w,b
  9829  001E22  0D01               	mullw	1
  9830  001E24  0E77               	movlw	low ipAdressToString@hundreds
  9831  001E26  24F3               	addwf	prodl,w,c
  9832  001E28  6EE1               	movwf	fsr1l,c
  9833  001E2A  0E00               	movlw	high ipAdressToString@hundreds
  9834  001E2C  20F4               	addwfc	prodh,w,c
  9835  001E2E  6EE2               	movwf	fsr1h,c
  9836  001E30  50E7               	movf	indf1,w,c
  9837  001E32  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9838  001E34  516B               	movf	??_ipAdressToString& (0+255),w,b
  9839  001E36  0D64               	mullw	100
  9840  001E38  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
  9841  001E3C  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
  9842  001E40  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
  9843  001E42  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
  9844  001E44  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
  9845  001E46  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
  9846  001E48  517C               	movf	ipAdressToString@i& (0+255),w,b
  9847  001E4A  0D01               	mullw	1
  9848  001E4C  0E67               	movlw	low ipAdressToString@ip
  9849  001E4E  24F3               	addwf	prodl,w,c
  9850  001E50  6EE1               	movwf	fsr1l,c
  9851  001E52  0E00               	movlw	high ipAdressToString@ip
  9852  001E54  20F4               	addwfc	prodh,w,c
  9853  001E56  6EE2               	movwf	fsr1h,c
  9854  001E58  50E7               	movf	indf1,w,c
  9855  001E5A  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
  9856  001E5C  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
  9857  001E5E  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
  9858  001E60  6F60               	movwf	___lwdiv@dividend& (0+255),b
  9859  001E62  0E00               	movlw	0
  9860  001E64  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
  9861  001E66  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
  9862  001E68  0E00               	movlw	0
  9863  001E6A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9864  001E6C  0E0A               	movlw	10
  9865  001E6E  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9866  001E70  EC5C  F01F         	call	___lwdiv	;wreg free
  9867  001E74  0100               	movlb	0	; () banked
  9868  001E76  5160               	movf	?___lwdiv& (0+255),w,b
  9869  001E78  6EDF               	movwf	indf2,c
  9870                           
  9871                           ;uart.c: 200: ones[i] = ip.address[i] % 10u;
  9872  001E7A  517C               	movf	ipAdressToString@i& (0+255),w,b
  9873  001E7C  0D01               	mullw	1
  9874  001E7E  0E6F               	movlw	low ipAdressToString@ones
  9875  001E80  24F3               	addwf	prodl,w,c
  9876  001E82  6ED9               	movwf	fsr2l,c
  9877  001E84  0E00               	movlw	high ipAdressToString@ones
  9878  001E86  20F4               	addwfc	prodh,w,c
  9879  001E88  6EDA               	movwf	fsr2h,c
  9880  001E8A  517C               	movf	ipAdressToString@i& (0+255),w,b
  9881  001E8C  0D01               	mullw	1
  9882  001E8E  0E67               	movlw	low ipAdressToString@ip
  9883  001E90  24F3               	addwf	prodl,w,c
  9884  001E92  6EE1               	movwf	fsr1l,c
  9885  001E94  0E00               	movlw	high ipAdressToString@ip
  9886  001E96  20F4               	addwfc	prodh,w,c
  9887  001E98  6EE2               	movwf	fsr1h,c
  9888  001E9A  50E7               	movf	indf1,w,c
  9889  001E9C  6F6B               	movwf	??_ipAdressToString& (0+255),b
  9890  001E9E  516B               	movf	??_ipAdressToString& (0+255),w,b
  9891  001EA0  6F60               	movwf	___lwmod@dividend& (0+255),b
  9892  001EA2  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
  9893  001EA4  0E00               	movlw	0
  9894  001EA6  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  9895  001EA8  0E0A               	movlw	10
  9896  001EAA  6F62               	movwf	___lwmod@divisor& (0+255),b
  9897  001EAC  EC45  F020         	call	___lwmod	;wreg free
  9898  001EB0  0100               	movlb	0	; () banked
  9899  001EB2  5160               	movf	?___lwmod& (0+255),w,b
  9900  001EB4  6EDF               	movwf	indf2,c
  9901                           
  9902                           ; BSR set to: 0
  9903                           ;uart.c: 202: if (hundreds[i] > 0)
  9904  001EB6  517C               	movf	ipAdressToString@i& (0+255),w,b
  9905  001EB8  0D01               	mullw	1
  9906  001EBA  0E77               	movlw	low ipAdressToString@hundreds
  9907  001EBC  24F3               	addwf	prodl,w,c
  9908  001EBE  6ED9               	movwf	fsr2l,c
  9909  001EC0  0E00               	movlw	high ipAdressToString@hundreds
  9910  001EC2  20F4               	addwfc	prodh,w,c
  9911  001EC4  6EDA               	movwf	fsr2h,c
  9912  001EC6  50DF               	movf	indf2,w,c
  9913  001EC8  B4D8               	btfsc	status,2,c
  9914  001ECA  D014               	goto	l803
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;uart.c: 203: address[pointer++] = hundreds[i] + 0x30;
  9918  001ECC  517B               	movf	ipAdressToString@pointer& (0+255),w,b
  9919  001ECE  0D01               	mullw	1
  9920  001ED0  0ECA               	movlw	low ipAdressToString@address
  9921  001ED2  24F3               	addwf	prodl,w,c
  9922  001ED4  6ED9               	movwf	fsr2l,c
  9923  001ED6  0E01               	movlw	high ipAdressToString@address
  9924  001ED8  20F4               	addwfc	prodh,w,c
  9925  001EDA  6EDA               	movwf	fsr2h,c
  9926  001EDC  517C               	movf	ipAdressToString@i& (0+255),w,b
  9927  001EDE  0D01               	mullw	1
  9928  001EE0  0E77               	movlw	low ipAdressToString@hundreds
  9929  001EE2  24F3               	addwf	prodl,w,c
  9930  001EE4  6EE1               	movwf	fsr1l,c
  9931  001EE6  0E00               	movlw	high ipAdressToString@hundreds
  9932  001EE8  20F4               	addwfc	prodh,w,c
  9933  001EEA  6EE2               	movwf	fsr1h,c
  9934  001EEC  50E7               	movf	indf1,w,c
  9935  001EEE  0F30               	addlw	48
  9936  001EF0  6EDF               	movwf	indf2,c
  9937                           
  9938                           ; BSR set to: 0
  9939  001EF2  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
  9940  001EF4                     l803:
  9941                           
  9942                           ; BSR set to: 0
  9943                           ;uart.c: 204: if ((tens[i] > 0) || hundreds[i] > 0)
  9944                           
  9945                           ; BSR set to: 0
  9946  001EF4  517C               	movf	ipAdressToString@i& (0+255),w,b
  9947  001EF6  0D01               	mullw	1
  9948  001EF8  0E73               	movlw	low ipAdressToString@tens
  9949  001EFA  24F3               	addwf	prodl,w,c
  9950  001EFC  6ED9               	movwf	fsr2l,c
  9951  001EFE  0E00               	movlw	high ipAdressToString@tens
  9952  001F00  20F4               	addwfc	prodh,w,c
  9953  001F02  6EDA               	movwf	fsr2h,c
  9954  001F04  50DF               	movf	indf2,w,c
  9955  001F06  A4D8               	btfss	status,2,c
  9956  001F08  D00B               	goto	u8890
  9957                           
  9958                           ; BSR set to: 0
  9959  001F0A  517C               	movf	ipAdressToString@i& (0+255),w,b
  9960  001F0C  0D01               	mullw	1
  9961  001F0E  0E77               	movlw	low ipAdressToString@hundreds
  9962  001F10  24F3               	addwf	prodl,w,c
  9963  001F12  6ED9               	movwf	fsr2l,c
  9964  001F14  0E00               	movlw	high ipAdressToString@hundreds
  9965  001F16  20F4               	addwfc	prodh,w,c
  9966  001F18  6EDA               	movwf	fsr2h,c
  9967  001F1A  50DF               	movf	indf2,w,c
  9968  001F1C  B4D8               	btfsc	status,2,c
  9969  001F1E  D014               	goto	l804
  9970  001F20                     u8890:
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;uart.c: 205: address[pointer++] = tens[i] + 0x30;
  9974                           
  9975                           ; BSR set to: 0
  9976  001F20  517B               	movf	ipAdressToString@pointer& (0+255),w,b
  9977  001F22  0D01               	mullw	1
  9978  001F24  0ECA               	movlw	low ipAdressToString@address
  9979  001F26  24F3               	addwf	prodl,w,c
  9980  001F28  6ED9               	movwf	fsr2l,c
  9981  001F2A  0E01               	movlw	high ipAdressToString@address
  9982  001F2C  20F4               	addwfc	prodh,w,c
  9983  001F2E  6EDA               	movwf	fsr2h,c
  9984  001F30  517C               	movf	ipAdressToString@i& (0+255),w,b
  9985  001F32  0D01               	mullw	1
  9986  001F34  0E73               	movlw	low ipAdressToString@tens
  9987  001F36  24F3               	addwf	prodl,w,c
  9988  001F38  6EE1               	movwf	fsr1l,c
  9989  001F3A  0E00               	movlw	high ipAdressToString@tens
  9990  001F3C  20F4               	addwfc	prodh,w,c
  9991  001F3E  6EE2               	movwf	fsr1h,c
  9992  001F40  50E7               	movf	indf1,w,c
  9993  001F42  0F30               	addlw	48
  9994  001F44  6EDF               	movwf	indf2,c
  9995                           
  9996                           ; BSR set to: 0
  9997  001F46  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
  9998  001F48                     l804:
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;uart.c: 206: address[pointer++] = ones[i] + 0x30;
 10002                           
 10003                           ; BSR set to: 0
 10004  001F48  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10005  001F4A  0D01               	mullw	1
 10006  001F4C  0ECA               	movlw	low ipAdressToString@address
 10007  001F4E  24F3               	addwf	prodl,w,c
 10008  001F50  6ED9               	movwf	fsr2l,c
 10009  001F52  0E01               	movlw	high ipAdressToString@address
 10010  001F54  20F4               	addwfc	prodh,w,c
 10011  001F56  6EDA               	movwf	fsr2h,c
 10012  001F58  517C               	movf	ipAdressToString@i& (0+255),w,b
 10013  001F5A  0D01               	mullw	1
 10014  001F5C  0E6F               	movlw	low ipAdressToString@ones
 10015  001F5E  24F3               	addwf	prodl,w,c
 10016  001F60  6EE1               	movwf	fsr1l,c
 10017  001F62  0E00               	movlw	high ipAdressToString@ones
 10018  001F64  20F4               	addwfc	prodh,w,c
 10019  001F66  6EE2               	movwf	fsr1h,c
 10020  001F68  50E7               	movf	indf1,w,c
 10021  001F6A  0F30               	addlw	48
 10022  001F6C  6EDF               	movwf	indf2,c
 10023  001F6E  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;uart.c: 207: if (i != 3)
 10027  001F70  0E03               	movlw	3
 10028  001F72  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 10029  001F74  B4D8               	btfsc	status,2,c
 10030  001F76  D00B               	goto	l807
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;uart.c: 208: address[pointer++] = '.';
 10034  001F78  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10035  001F7A  0D01               	mullw	1
 10036  001F7C  0ECA               	movlw	low ipAdressToString@address
 10037  001F7E  24F3               	addwf	prodl,w,c
 10038  001F80  6ED9               	movwf	fsr2l,c
 10039  001F82  0E01               	movlw	high ipAdressToString@address
 10040  001F84  20F4               	addwfc	prodh,w,c
 10041  001F86  6EDA               	movwf	fsr2h,c
 10042  001F88  0E2E               	movlw	46
 10043  001F8A  6EDF               	movwf	indf2,c
 10044                           
 10045                           ; BSR set to: 0
 10046  001F8C  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 10047  001F8E                     l807:
 10048                           
 10049                           ; BSR set to: 0
 10050                           
 10051                           ; BSR set to: 0
 10052  001F8E  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 10053  001F90  D71D               	goto	l7431
 10054  001F92                     u8910:
 10055                           
 10056                           ; BSR set to: 0
 10057                           ;uart.c: 209: }
 10058                           ;uart.c: 210: address[pointer] = '\0';
 10059                           
 10060                           ; BSR set to: 0
 10061  001F92  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 10062  001F94  0D01               	mullw	1
 10063  001F96  0ECA               	movlw	low ipAdressToString@address
 10064  001F98  24F3               	addwf	prodl,w,c
 10065  001F9A  6ED9               	movwf	fsr2l,c
 10066  001F9C  0E01               	movlw	high ipAdressToString@address
 10067  001F9E  20F4               	addwfc	prodh,w,c
 10068  001FA0  6EDA               	movwf	fsr2h,c
 10069  001FA2  0E00               	movlw	0
 10070  001FA4  6EDF               	movwf	indf2,c
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;uart.c: 211: return address;
 10074  001FA6  0ECA               	movlw	low ipAdressToString@address
 10075  001FA8  6F67               	movwf	?_ipAdressToString& (0+255),b
 10076  001FAA  0E01               	movlw	high ipAdressToString@address
 10077  001FAC  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 10078  001FAE  0012               	return	
 10079  001FB0                     __end_of_ipAdressToString:
 10080                           	opt stack 0
 10081                           tblptru	equ	0xFF8
 10082                           tblptrh	equ	0xFF7
 10083                           tblptrl	equ	0xFF6
 10084                           tablat	equ	0xFF5
 10085                           prodh	equ	0xFF4
 10086                           prodl	equ	0xFF3
 10087                           intcon	equ	0xFF2
 10088                           intcon3	equ	0xFF0
 10089                           postinc0	equ	0xFEE
 10090                           plusw0	equ	0xFEB
 10091                           fsr0h	equ	0xFEA
 10092                           fsr0l	equ	0xFE9
 10093                           wreg	equ	0xFE8
 10094                           indf1	equ	0xFE7
 10095                           postinc1	equ	0xFE6
 10096                           postdec1	equ	0xFE5
 10097                           plusw1	equ	0xFE3
 10098                           fsr1h	equ	0xFE2
 10099                           fsr1l	equ	0xFE1
 10100                           indf2	equ	0xFDF
 10101                           postinc2	equ	0xFDE
 10102                           postdec2	equ	0xFDD
 10103                           plusw2	equ	0xFDB
 10104                           fsr2h	equ	0xFDA
 10105                           fsr2l	equ	0xFD9
 10106                           status	equ	0xFD8
 10107                           
 10108 ;; *************** function ___lwmod *****************
 10109 ;; Defined at:
 10110 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;  dividend        2    0[BANK0 ] unsigned int 
 10113 ;;  divisor         2    2[BANK0 ] unsigned int 
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;  counter         1    4[BANK0 ] unsigned char 
 10116 ;; Return value:  Size  Location     Type
 10117 ;;                  2    0[BANK0 ] unsigned int 
 10118 ;; Registers used:
 10119 ;;		wreg, status,2, status,0
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10125 ;;      Params:         0       4       0       0       0       0       0       0       0
 10126 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10127 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10128 ;;      Totals:         0       5       0       0       0       0       0       0       0
 10129 ;;Total ram usage:        5 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    4
 10132 ;; This function calls:
 10133 ;;		Nothing
 10134 ;; This function is called by:
 10135 ;;		_ipAdressToString
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           	psect	text30
 10140  00408A                     __ptext30:
 10141                           	opt stack 0
 10142  00408A                     ___lwmod:
 10143                           	opt stack 23
 10144                           
 10145                           ; BSR set to: 0
 10146                           ;incstack = 0
 10147  00408A  0100               	movlb	0	; () banked
 10148  00408C  5162               	movf	___lwmod@divisor& (0+255),w,b
 10149  00408E  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10150  004090  B4D8               	btfsc	status,2,c
 10151  004092  D018               	goto	l1446
 10152                           
 10153                           ; BSR set to: 0
 10154  004094  0E01               	movlw	1
 10155  004096  6F64               	movwf	___lwmod@counter& (0+255),b
 10156  004098  D004               	goto	l1441
 10157  00409A                     
 10158                           ; BSR set to: 0
 10159                           
 10160                           ; BSR set to: 0
 10161  00409A  90D8               	bcf	status,0,c
 10162  00409C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 10163  00409E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10164  0040A0  2B64               	incf	___lwmod@counter& (0+255),f,b
 10165  0040A2                     l1441:
 10166                           
 10167                           ; BSR set to: 0
 10168                           
 10169                           ; BSR set to: 0
 10170  0040A2  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10171  0040A4  D7FA               	goto	l1442
 10172  0040A6                     u8660:
 10173                           
 10174                           ; BSR set to: 0
 10175                           
 10176                           ; BSR set to: 0
 10177                           
 10178                           ; BSR set to: 0
 10179  0040A6  5162               	movf	___lwmod@divisor& (0+255),w,b
 10180  0040A8  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 10181  0040AA  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10182  0040AC  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10183  0040AE  A0D8               	btfss	status,0,c
 10184  0040B0  D004               	goto	l1445
 10185                           
 10186                           ; BSR set to: 0
 10187  0040B2  5162               	movf	___lwmod@divisor& (0+255),w,b
 10188  0040B4  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 10189  0040B6  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10190  0040B8  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10191  0040BA                     l1445:
 10192                           
 10193                           ; BSR set to: 0
 10194                           
 10195                           ; BSR set to: 0
 10196  0040BA  90D8               	bcf	status,0,c
 10197  0040BC  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10198  0040BE  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 10199                           
 10200                           ; BSR set to: 0
 10201  0040C0  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 10202  0040C2  D7F1               	goto	u8660
 10203  0040C4                     l1446:
 10204                           
 10205                           ; BSR set to: 0
 10206                           
 10207                           ; BSR set to: 0
 10208  0040C4  C060  F060         	movff	___lwmod@dividend,?___lwmod
 10209  0040C8  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 10210                           
 10211                           ; BSR set to: 0
 10212  0040CC  0012               	return		;funcret
 10213  0040CE                     __end_of___lwmod:
 10214                           	opt stack 0
 10215                           tblptru	equ	0xFF8
 10216                           tblptrh	equ	0xFF7
 10217                           tblptrl	equ	0xFF6
 10218                           tablat	equ	0xFF5
 10219                           prodh	equ	0xFF4
 10220                           prodl	equ	0xFF3
 10221                           intcon	equ	0xFF2
 10222                           intcon3	equ	0xFF0
 10223                           postinc0	equ	0xFEE
 10224                           plusw0	equ	0xFEB
 10225                           fsr0h	equ	0xFEA
 10226                           fsr0l	equ	0xFE9
 10227                           wreg	equ	0xFE8
 10228                           indf1	equ	0xFE7
 10229                           postinc1	equ	0xFE6
 10230                           postdec1	equ	0xFE5
 10231                           plusw1	equ	0xFE3
 10232                           fsr1h	equ	0xFE2
 10233                           fsr1l	equ	0xFE1
 10234                           indf2	equ	0xFDF
 10235                           postinc2	equ	0xFDE
 10236                           postdec2	equ	0xFDD
 10237                           plusw2	equ	0xFDB
 10238                           fsr2h	equ	0xFDA
 10239                           fsr2l	equ	0xFD9
 10240                           status	equ	0xFD8
 10241                           
 10242 ;; *************** function ___lwdiv *****************
 10243 ;; Defined at:
 10244 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;  dividend        2    0[BANK0 ] unsigned int 
 10247 ;;  divisor         2    2[BANK0 ] unsigned int 
 10248 ;; Auto vars:     Size  Location     Type
 10249 ;;  quotient        2    5[BANK0 ] unsigned int 
 10250 ;;  counter         1    4[BANK0 ] unsigned char 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  2    0[BANK0 ] unsigned int 
 10253 ;; Registers used:
 10254 ;;		wreg, status,2, status,0
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10260 ;;      Params:         0       4       0       0       0       0       0       0       0
 10261 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10262 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10263 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10264 ;;Total ram usage:        7 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    4
 10267 ;; This function calls:
 10268 ;;		Nothing
 10269 ;; This function is called by:
 10270 ;;		_ipAdressToString
 10271 ;; This function uses a non-reentrant model
 10272 ;;
 10273                           
 10274                           	psect	text31
 10275  003EB8                     __ptext31:
 10276                           	opt stack 0
 10277  003EB8                     ___lwdiv:
 10278                           	opt stack 23
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;incstack = 0
 10282  003EB8  0E00               	movlw	0
 10283  003EBA  0100               	movlb	0	; () banked
 10284  003EBC  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10285  003EBE  0E00               	movlw	0
 10286  003EC0  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10287                           
 10288                           ; BSR set to: 0
 10289  003EC2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10290  003EC4  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10291  003EC6  B4D8               	btfsc	status,2,c
 10292  003EC8  D01C               	goto	l1436
 10293                           
 10294                           ; BSR set to: 0
 10295  003ECA  0E01               	movlw	1
 10296  003ECC  6F64               	movwf	___lwdiv@counter& (0+255),b
 10297  003ECE  D004               	goto	l1431
 10298  003ED0                     
 10299                           ; BSR set to: 0
 10300                           
 10301                           ; BSR set to: 0
 10302  003ED0  90D8               	bcf	status,0,c
 10303  003ED2  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10304  003ED4  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10305  003ED6  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10306  003ED8                     l1431:
 10307                           
 10308                           ; BSR set to: 0
 10309                           
 10310                           ; BSR set to: 0
 10311  003ED8  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10312  003EDA  D7FA               	goto	l1432
 10313  003EDC                     u8630:
 10314                           
 10315                           ; BSR set to: 0
 10316                           
 10317                           ; BSR set to: 0
 10318                           
 10319                           ; BSR set to: 0
 10320  003EDC  90D8               	bcf	status,0,c
 10321  003EDE  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10322  003EE0  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10323                           
 10324                           ; BSR set to: 0
 10325  003EE2  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10326  003EE4  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10327  003EE6  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10328  003EE8  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10329  003EEA  A0D8               	btfss	status,0,c
 10330  003EEC  D005               	goto	l1435
 10331                           
 10332                           ; BSR set to: 0
 10333  003EEE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10334  003EF0  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10335  003EF2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10336  003EF4  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10337                           
 10338                           ; BSR set to: 0
 10339  003EF6  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10340  003EF8                     l1435:
 10341                           
 10342                           ; BSR set to: 0
 10343                           
 10344                           ; BSR set to: 0
 10345  003EF8  90D8               	bcf	status,0,c
 10346  003EFA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10347  003EFC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10348                           
 10349                           ; BSR set to: 0
 10350  003EFE  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10351  003F00  D7ED               	goto	u8630
 10352  003F02                     l1436:
 10353                           
 10354                           ; BSR set to: 0
 10355                           
 10356                           ; BSR set to: 0
 10357  003F02  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10358  003F06  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10359                           
 10360                           ; BSR set to: 0
 10361  003F0A  0012               	return		;funcret
 10362  003F0C                     __end_of___lwdiv:
 10363                           	opt stack 0
 10364                           tblptru	equ	0xFF8
 10365                           tblptrh	equ	0xFF7
 10366                           tblptrl	equ	0xFF6
 10367                           tablat	equ	0xFF5
 10368                           prodh	equ	0xFF4
 10369                           prodl	equ	0xFF3
 10370                           intcon	equ	0xFF2
 10371                           intcon3	equ	0xFF0
 10372                           postinc0	equ	0xFEE
 10373                           plusw0	equ	0xFEB
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           indf1	equ	0xFE7
 10378                           postinc1	equ	0xFE6
 10379                           postdec1	equ	0xFE5
 10380                           plusw1	equ	0xFE3
 10381                           fsr1h	equ	0xFE2
 10382                           fsr1l	equ	0xFE1
 10383                           indf2	equ	0xFDF
 10384                           postinc2	equ	0xFDE
 10385                           postdec2	equ	0xFDD
 10386                           plusw2	equ	0xFDB
 10387                           fsr2h	equ	0xFDA
 10388                           fsr2l	equ	0xFD9
 10389                           status	equ	0xFD8
 10390                           
 10391 ;; *************** function _ethernetController_getMacAddress *****************
 10392 ;; Defined at:
 10393 ;;		line 160 in file "src/enc424j600/ENC424J600.c"
 10394 ;; Parameters:    Size  Location     Type
 10395 ;;		None
 10396 ;; Auto vars:     Size  Location     Type
 10397 ;;  mac             6   20[BANK0 ] struct macaddress
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  6   14[BANK0 ] struct macaddress
 10400 ;; Registers used:
 10401 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10407 ;;      Params:         0       6       0       0       0       0       0       0       0
 10408 ;;      Locals:         0       6       0       0       0       0       0       0       0
 10409 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10410 ;;      Totals:         0      12       0       0       0       0       0       0       0
 10411 ;;Total ram usage:       12 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    7
 10414 ;; This function calls:
 10415 ;;		_ENC424J600_readControlRegisterUnbanked
 10416 ;; This function is called by:
 10417 ;;		_main
 10418 ;;		_ARP_replyIfNeeded
 10419 ;;		_ARP_sendRequest
 10420 ;;		_ipv4_sendFrame
 10421 ;; This function uses a non-reentrant model
 10422 ;;
 10423                           
 10424                           	psect	text32
 10425  003B00                     __ptext32:
 10426                           	opt stack 0
 10427  003B00                     _ethernetController_getMacAddress:
 10428                           	opt stack 21
 10429                           
 10430                           ;ENC424J600.c: 161: macaddress_t mac;
 10431                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 10432                           
 10433                           ; BSR set to: 0
 10434                           ;incstack = 0
 10435  003B00  0E74               	movlw	low ethernetController_getMacAddress@mac
 10436  003B02  0100               	movlb	0	; () banked
 10437  003B04  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10438  003B06  0E00               	movlw	high ethernetController_getMacAddress@mac
 10439  003B08  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10440  003B0A  0E64               	movlw	100
 10441  003B0C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10442                           
 10443                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 10444  003B10  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 10445  003B12  0100               	movlb	0	; () banked
 10446  003B14  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10447  003B16  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 10448  003B18  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10449  003B1A  0E65               	movlw	101
 10450  003B1C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10451                           
 10452                           ;ENC424J600.c: 164: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 10453  003B20  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 10454  003B22  0100               	movlb	0	; () banked
 10455  003B24  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10456  003B26  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 10457  003B28  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10458  003B2A  0E62               	movlw	98
 10459  003B2C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10460                           
 10461                           ;ENC424J600.c: 165: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 10462  003B30  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 10463  003B32  0100               	movlb	0	; () banked
 10464  003B34  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10465  003B36  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 10466  003B38  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10467  003B3A  0E63               	movlw	99
 10468  003B3C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10469                           
 10470                           ;ENC424J600.c: 166: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 10471  003B40  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 10472  003B42  0100               	movlb	0	; () banked
 10473  003B44  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10474  003B46  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 10475  003B48  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10476  003B4A  0E60               	movlw	96
 10477  003B4C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10478                           
 10479                           ;ENC424J600.c: 167: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 10480  003B50  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 10481  003B52  0100               	movlb	0	; () banked
 10482  003B54  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 10483  003B56  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 10484  003B58  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 10485  003B5A  0E61               	movlw	97
 10486  003B5C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 10487                           
 10488                           ;ENC424J600.c: 168: return mac;
 10489  003B60  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 10490  003B64  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 10491  003B68  0E05               	movlw	5
 10492  003B6A                     u8721:
 10493  003B6A  CFDB FFEB          	movff	plusw2,plusw0
 10494  003B6E  06E8               	decf	wreg,f,c
 10495  003B70  E2FC               	bc	u8721
 10496  003B72  0012               	return	
 10497  003B74                     __end_of_ethernetController_getMacAddress:
 10498                           	opt stack 0
 10499                           tblptru	equ	0xFF8
 10500                           tblptrh	equ	0xFF7
 10501                           tblptrl	equ	0xFF6
 10502                           tablat	equ	0xFF5
 10503                           prodh	equ	0xFF4
 10504                           prodl	equ	0xFF3
 10505                           intcon	equ	0xFF2
 10506                           intcon3	equ	0xFF0
 10507                           postinc0	equ	0xFEE
 10508                           plusw0	equ	0xFEB
 10509                           fsr0h	equ	0xFEA
 10510                           fsr0l	equ	0xFE9
 10511                           wreg	equ	0xFE8
 10512                           indf1	equ	0xFE7
 10513                           postinc1	equ	0xFE6
 10514                           postdec1	equ	0xFE5
 10515                           plusw1	equ	0xFE3
 10516                           fsr1h	equ	0xFE2
 10517                           fsr1l	equ	0xFE1
 10518                           indf2	equ	0xFDF
 10519                           postinc2	equ	0xFDE
 10520                           postdec2	equ	0xFDD
 10521                           plusw2	equ	0xFDB
 10522                           fsr2h	equ	0xFDA
 10523                           fsr2l	equ	0xFD9
 10524                           status	equ	0xFD8
 10525                           
 10526 ;; *************** function _ARP_send *****************
 10527 ;; Defined at:
 10528 ;;		line 166 in file "src/stack/protocols/arp.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;  arp            32   71[BANK0 ] struct ARP_message
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;  i               1  112[BANK0 ] unsigned char 
 10533 ;;  i               1  111[BANK0 ] unsigned char 
 10534 ;;  i               1  110[BANK0 ] unsigned char 
 10535 ;;  i               1  109[BANK0 ] unsigned char 
 10536 ;;  ethFrame       30  113[BANK0 ] struct ethernetFrame
 10537 ;;  field           9  143[BANK0 ] struct memoryField
 10538 ;;  destination     6  103[BANK0 ] struct macaddress
 10539 ;; Return value:  Size  Location     Type
 10540 ;;                  1    wreg      void 
 10541 ;; Registers used:
 10542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10543 ;; Tracked objects:
 10544 ;;		On entry : 0/0
 10545 ;;		On exit  : 0/0
 10546 ;;		Unchanged: 0/0
 10547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10548 ;;      Params:         0      32       0       0       0       0       0       0       0
 10549 ;;      Locals:         0      49       0       0       0       0       0       0       0
 10550 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10551 ;;      Totals:         0      81       0       0       0       0       0       0       0
 10552 ;;Total ram usage:       81 bytes
 10553 ;; Hardware stack levels used:    1
 10554 ;; Hardware stack levels required when called:    9
 10555 ;; This function calls:
 10556 ;;		_ethernetController_getSourceMACAddress
 10557 ;;		_ethernetController_sendPacket
 10558 ;;		_ethernetController_streamToTransmitBuffer
 10559 ;;		_ethernet_txFrameRequest
 10560 ;;		_mac_setToBroadcast
 10561 ;; This function is called by:
 10562 ;;		_ARP_replyIfNeeded
 10563 ;;		_ARP_sendRequest
 10564 ;; This function uses a non-reentrant model
 10565 ;;
 10566                           
 10567                           	psect	text33
 10568  001B4A                     __ptext33:
 10569                           	opt stack 0
 10570  001B4A                     _ARP_send:
 10571                           	opt stack 18
 10572                           
 10573                           ;arp.c: 167: memoryField_t field;
 10574                           ;arp.c: 168: macaddress_t destination;
 10575                           ;arp.c: 169: ethernetFrame_t ethFrame;
 10576                           ;arp.c: 170: mac_setToBroadcast(&destination);
 10577                           
 10578                           ;incstack = 0
 10579  001B4A  0EC7               	movlw	low ARP_send@destination
 10580  001B4C  0100               	movlb	0	; () banked
 10581  001B4E  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 10582  001B50  0E00               	movlw	high ARP_send@destination
 10583  001B52  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 10584  001B54  EC68  F022         	call	_mac_setToBroadcast	;wreg free
 10585                           
 10586                           ;arp.c: 172: ethFrame.length = 36;
 10587  001B58  0E00               	movlw	0
 10588  001B5A  0100               	movlb	0	; () banked
 10589  001B5C  6FD2               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 10590  001B5E  0E24               	movlw	36
 10591  001B60  6FD1               	movwf	ARP_send@ethFrame& (0+255),b
 10592                           
 10593                           ; BSR set to: 0
 10594                           ;arp.c: 173: ethFrame.destination = arp.targetMACAddress;
 10595  001B62  EE20  F0B9         	lfsr	2,ARP_send@arp+18
 10596  001B66  EE10  F0D9         	lfsr	1,ARP_send@ethFrame+8
 10597  001B6A  0E05               	movlw	5
 10598  001B6C                     u8981:
 10599  001B6C  CFDB FFE3          	movff	plusw2,plusw1
 10600  001B70  06E8               	decf	wreg,f,c
 10601  001B72  E2FC               	bc	u8981
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;arp.c: 174: ethFrame.source = ethernetController_getSourceMACAddress(field);
 10605  001B74  EE20  F0EF         	lfsr	2,ARP_send@field
 10606  001B78  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 10607  001B7C  0E08               	movlw	8
 10608  001B7E                     u8991:
 10609  001B7E  CFDB FFEB          	movff	plusw2,plusw0
 10610  001B82  06E8               	decf	wreg,f,c
 10611  001B84  E2FC               	bc	u8991
 10612  001B86  EC2B  F01E         	call	_ethernetController_getSourceMACAddress	;wreg free
 10613  001B8A  EE20  F0D3         	lfsr	2,ARP_send@ethFrame+2
 10614  001B8E  0E05               	movlw	5
 10615  001B90                     u9001:
 10616  001B90  CFEB FFDB          	movff	plusw0,plusw2
 10617  001B94  06E8               	decf	wreg,f,c
 10618  001B96  E2FC               	bc	u9001
 10619                           
 10620                           ;arp.c: 175: ethFrame.ethertype = ETHERTYPE_ARP;
 10621  001B98  0E08               	movlw	8
 10622  001B9A  0100               	movlb	0	; () banked
 10623  001B9C  6FE0               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 10624  001B9E  0E06               	movlw	6
 10625  001BA0  6FDF               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;arp.c: 177: ethernet_txFrameRequest(&ethFrame);
 10629  001BA2  0ED1               	movlw	low ARP_send@ethFrame
 10630  001BA4  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 10631  001BA6  0E00               	movlw	high ARP_send@ethFrame
 10632  001BA8  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 10633  001BAA  EC2B  F018         	call	_ethernet_txFrameRequest	;wreg free
 10634                           
 10635                           ;arp.c: 179: if (ethFrame.memory.fOutOfMemory) {
 10636  001BAE  0100               	movlb	0	; () banked
 10637  001BB0  51E8               	movf	(ARP_send@ethFrame+23)& (0+255),w,b
 10638  001BB2  A4D8               	btfss	status,2,c
 10639  001BB4  0012               	return	
 10640                           
 10641                           ; BSR set to: 0
 10642                           ;arp.c: 181: }
 10643                           ;arp.c: 183: field.start = ethFrame.memory.start + 8;
 10644                           
 10645                           ; BSR set to: 0
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;arp.c: 180: return;
 10649  001BB6  0E08               	movlw	8
 10650  001BB8  25E1               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 10651  001BBA  6FEF               	movwf	ARP_send@field& (0+255),b
 10652  001BBC  0E00               	movlw	0
 10653  001BBE  21E2               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 10654  001BC0  6FF0               	movwf	(ARP_send@field+1)& (0+255),b
 10655                           
 10656                           ; BSR set to: 0
 10657                           ;arp.c: 184: field.end = ethFrame.memory.end;
 10658  001BC2  C0E3  F0F1         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 10659  001BC6  C0E4  F0F2         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 10660                           
 10661                           ; BSR set to: 0
 10662                           ;arp.c: 185: field.length = 28;
 10663  001BCA  0E00               	movlw	0
 10664  001BCC  6FF4               	movwf	(ARP_send@field+5)& (0+255),b
 10665  001BCE  0E1C               	movlw	28
 10666  001BD0  6FF3               	movwf	(ARP_send@field+4)& (0+255),b
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;arp.c: 188: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 10670  001BD2  EE20  F0EF         	lfsr	2,ARP_send@field
 10671  001BD6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10672  001BDA  0E08               	movlw	8
 10673  001BDC                     u9021:
 10674  001BDC  CFDB FFEB          	movff	plusw2,plusw0
 10675  001BE0  06E8               	decf	wreg,f,c
 10676  001BE2  E2FC               	bc	u9021
 10677  001BE4  51A8               	movf	(ARP_send@arp+1)& (0+255),w,b
 10678  001BE6  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10679                           
 10680                           ;arp.c: 189: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 10681  001BEA  EE20  F0EF         	lfsr	2,ARP_send@field
 10682  001BEE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10683  001BF2  0E08               	movlw	8
 10684  001BF4                     u9031:
 10685  001BF4  CFDB FFEB          	movff	plusw2,plusw0
 10686  001BF8  06E8               	decf	wreg,f,c
 10687  001BFA  E2FC               	bc	u9031
 10688  001BFC  0100               	movlb	0	; () banked
 10689  001BFE  51A7               	movf	ARP_send@arp& (0+255),w,b
 10690  001C00  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10691                           
 10692                           ;arp.c: 190: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 10693  001C04  EE20  F0EF         	lfsr	2,ARP_send@field
 10694  001C08  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10695  001C0C  0E08               	movlw	8
 10696  001C0E                     u9041:
 10697  001C0E  CFDB FFEB          	movff	plusw2,plusw0
 10698  001C12  06E8               	decf	wreg,f,c
 10699  001C14  E2FC               	bc	u9041
 10700  001C16  0100               	movlb	0	; () banked
 10701  001C18  51AA               	movf	(ARP_send@arp+3)& (0+255),w,b
 10702  001C1A  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10703                           
 10704                           ;arp.c: 191: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 10705  001C1E  EE20  F0EF         	lfsr	2,ARP_send@field
 10706  001C22  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10707  001C26  0E08               	movlw	8
 10708  001C28                     u9051:
 10709  001C28  CFDB FFEB          	movff	plusw2,plusw0
 10710  001C2C  06E8               	decf	wreg,f,c
 10711  001C2E  E2FC               	bc	u9051
 10712  001C30  0100               	movlb	0	; () banked
 10713  001C32  51A9               	movf	(ARP_send@arp+2)& (0+255),w,b
 10714  001C34  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10715                           
 10716                           ;arp.c: 192: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 10717  001C38  EE20  F0EF         	lfsr	2,ARP_send@field
 10718  001C3C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10719  001C40  0E08               	movlw	8
 10720  001C42                     u9061:
 10721  001C42  CFDB FFEB          	movff	plusw2,plusw0
 10722  001C46  06E8               	decf	wreg,f,c
 10723  001C48  E2FC               	bc	u9061
 10724  001C4A  0100               	movlb	0	; () banked
 10725  001C4C  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10726  001C4E  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10727                           
 10728                           ;arp.c: 193: ethernetController_streamToTransmitBuffer(arp.plen, field);
 10729  001C52  EE20  F0EF         	lfsr	2,ARP_send@field
 10730  001C56  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10731  001C5A  0E08               	movlw	8
 10732  001C5C                     u9071:
 10733  001C5C  CFDB FFEB          	movff	plusw2,plusw0
 10734  001C60  06E8               	decf	wreg,f,c
 10735  001C62  E2FC               	bc	u9071
 10736  001C64  0100               	movlb	0	; () banked
 10737  001C66  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10738  001C68  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10739                           
 10740                           ;arp.c: 194: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 10741  001C6C  EE20  F0EF         	lfsr	2,ARP_send@field
 10742  001C70  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10743  001C74  0E08               	movlw	8
 10744  001C76                     u9081:
 10745  001C76  CFDB FFEB          	movff	plusw2,plusw0
 10746  001C7A  06E8               	decf	wreg,f,c
 10747  001C7C  E2FC               	bc	u9081
 10748  001C7E  0100               	movlb	0	; () banked
 10749  001C80  51AE               	movf	(ARP_send@arp+7)& (0+255),w,b
 10750  001C82  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10751                           
 10752                           ;arp.c: 195: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 10753  001C86  EE20  F0EF         	lfsr	2,ARP_send@field
 10754  001C8A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10755  001C8E  0E08               	movlw	8
 10756  001C90                     u9091:
 10757  001C90  CFDB FFEB          	movff	plusw2,plusw0
 10758  001C94  06E8               	decf	wreg,f,c
 10759  001C96  E2FC               	bc	u9091
 10760  001C98  0100               	movlb	0	; () banked
 10761  001C9A  51AD               	movf	(ARP_send@arp+6)& (0+255),w,b
 10762  001C9C  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10763                           
 10764                           ;arp.c: 196: for (uint8_t i = 0; i < arp.hlen; i++)
 10765  001CA0  0E00               	movlw	0
 10766  001CA2  0100               	movlb	0	; () banked
 10767  001CA4  6FCD               	movwf	ARP_send@i& (0+255),b
 10768  001CA6  D01A               	goto	l911
 10769  001CA8                     
 10770                           ; BSR set to: 0
 10771                           ;arp.c: 197: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 10772                           
 10773                           ; BSR set to: 0
 10774  001CA8  EE20  F0EF         	lfsr	2,ARP_send@field
 10775  001CAC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10776  001CB0  0E08               	movlw	8
 10777  001CB2                     u9101:
 10778  001CB2  CFDB FFEB          	movff	plusw2,plusw0
 10779  001CB6  06E8               	decf	wreg,f,c
 10780  001CB8  E2FC               	bc	u9101
 10781  001CBA  51CD               	movf	ARP_send@i& (0+255),w,b
 10782  001CBC  0D01               	mullw	1
 10783  001CBE  0E08               	movlw	8
 10784  001CC0  26F3               	addwf	prodl,f,c
 10785  001CC2  0E00               	movlw	0
 10786  001CC4  22F4               	addwfc	prodh,f,c
 10787  001CC6  0EA7               	movlw	low ARP_send@arp
 10788  001CC8  24F3               	addwf	prodl,w,c
 10789  001CCA  6ED9               	movwf	fsr2l,c
 10790  001CCC  0E00               	movlw	high ARP_send@arp
 10791  001CCE  20F4               	addwfc	prodh,w,c
 10792  001CD0  6EDA               	movwf	fsr2h,c
 10793  001CD2  50DF               	movf	indf2,w,c
 10794  001CD4  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10795  001CD8  0100               	movlb	0	; () banked
 10796  001CDA  2BCD               	incf	ARP_send@i& (0+255),f,b
 10797  001CDC                     l911:
 10798                           
 10799                           ; BSR set to: 0
 10800                           
 10801                           ; BSR set to: 0
 10802  001CDC  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10803  001CDE  5DCD               	subwf	ARP_send@i& (0+255),w,b
 10804  001CE0  A0D8               	btfss	status,0,c
 10805  001CE2  D7E2               	goto	l912
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;arp.c: 198: for (uint8_t i = 0; i < arp.plen; i++)
 10809                           
 10810                           ; BSR set to: 0
 10811  001CE4  0E00               	movlw	0
 10812  001CE6  6FCE               	movwf	ARP_send@i_2693& (0+255),b
 10813  001CE8  D01A               	goto	l914
 10814  001CEA                     
 10815                           ; BSR set to: 0
 10816                           ;arp.c: 199: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 10817                           
 10818                           ; BSR set to: 0
 10819  001CEA  EE20  F0EF         	lfsr	2,ARP_send@field
 10820  001CEE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10821  001CF2  0E08               	movlw	8
 10822  001CF4                     u9121:
 10823  001CF4  CFDB FFEB          	movff	plusw2,plusw0
 10824  001CF8  06E8               	decf	wreg,f,c
 10825  001CFA  E2FC               	bc	u9121
 10826  001CFC  51CE               	movf	ARP_send@i_2693& (0+255),w,b
 10827  001CFE  0D01               	mullw	1
 10828  001D00  0E0E               	movlw	14
 10829  001D02  26F3               	addwf	prodl,f,c
 10830  001D04  0E00               	movlw	0
 10831  001D06  22F4               	addwfc	prodh,f,c
 10832  001D08  0EA7               	movlw	low ARP_send@arp
 10833  001D0A  24F3               	addwf	prodl,w,c
 10834  001D0C  6ED9               	movwf	fsr2l,c
 10835  001D0E  0E00               	movlw	high ARP_send@arp
 10836  001D10  20F4               	addwfc	prodh,w,c
 10837  001D12  6EDA               	movwf	fsr2h,c
 10838  001D14  50DF               	movf	indf2,w,c
 10839  001D16  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10840  001D1A  0100               	movlb	0	; () banked
 10841  001D1C  2BCE               	incf	ARP_send@i_2693& (0+255),f,b
 10842  001D1E                     l914:
 10843                           
 10844                           ; BSR set to: 0
 10845                           
 10846                           ; BSR set to: 0
 10847  001D1E  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10848  001D20  5DCE               	subwf	ARP_send@i_2693& (0+255),w,b
 10849  001D22  A0D8               	btfss	status,0,c
 10850  001D24  D7E2               	goto	l915
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;arp.c: 200: for (uint8_t i = 0; i < arp.hlen; i++)
 10854                           
 10855                           ; BSR set to: 0
 10856  001D26  0E00               	movlw	0
 10857  001D28  6FCF               	movwf	ARP_send@i_2694& (0+255),b
 10858  001D2A  D01A               	goto	l917
 10859  001D2C                     
 10860                           ; BSR set to: 0
 10861                           ;arp.c: 201: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 10862                           
 10863                           ; BSR set to: 0
 10864  001D2C  EE20  F0EF         	lfsr	2,ARP_send@field
 10865  001D30  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10866  001D34  0E08               	movlw	8
 10867  001D36                     u9141:
 10868  001D36  CFDB FFEB          	movff	plusw2,plusw0
 10869  001D3A  06E8               	decf	wreg,f,c
 10870  001D3C  E2FC               	bc	u9141
 10871  001D3E  51CF               	movf	ARP_send@i_2694& (0+255),w,b
 10872  001D40  0D01               	mullw	1
 10873  001D42  0E12               	movlw	18
 10874  001D44  26F3               	addwf	prodl,f,c
 10875  001D46  0E00               	movlw	0
 10876  001D48  22F4               	addwfc	prodh,f,c
 10877  001D4A  0EA7               	movlw	low ARP_send@arp
 10878  001D4C  24F3               	addwf	prodl,w,c
 10879  001D4E  6ED9               	movwf	fsr2l,c
 10880  001D50  0E00               	movlw	high ARP_send@arp
 10881  001D52  20F4               	addwfc	prodh,w,c
 10882  001D54  6EDA               	movwf	fsr2h,c
 10883  001D56  50DF               	movf	indf2,w,c
 10884  001D58  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10885  001D5C  0100               	movlb	0	; () banked
 10886  001D5E  2BCF               	incf	ARP_send@i_2694& (0+255),f,b
 10887  001D60                     l917:
 10888                           
 10889                           ; BSR set to: 0
 10890                           
 10891                           ; BSR set to: 0
 10892  001D60  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 10893  001D62  5DCF               	subwf	ARP_send@i_2694& (0+255),w,b
 10894  001D64  A0D8               	btfss	status,0,c
 10895  001D66  D7E2               	goto	l918
 10896                           
 10897                           ; BSR set to: 0
 10898                           ;arp.c: 203: for (uint8_t i = 0; i < arp.plen; i++)
 10899                           
 10900                           ; BSR set to: 0
 10901  001D68  0E00               	movlw	0
 10902  001D6A  6FD0               	movwf	ARP_send@i_2695& (0+255),b
 10903  001D6C  D01A               	goto	l920
 10904  001D6E                     
 10905                           ; BSR set to: 0
 10906                           ;arp.c: 204: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 10907                           
 10908                           ; BSR set to: 0
 10909  001D6E  EE20  F0EF         	lfsr	2,ARP_send@field
 10910  001D72  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10911  001D76  0E08               	movlw	8
 10912  001D78                     u9161:
 10913  001D78  CFDB FFEB          	movff	plusw2,plusw0
 10914  001D7C  06E8               	decf	wreg,f,c
 10915  001D7E  E2FC               	bc	u9161
 10916  001D80  51D0               	movf	ARP_send@i_2695& (0+255),w,b
 10917  001D82  0D01               	mullw	1
 10918  001D84  0E18               	movlw	24
 10919  001D86  26F3               	addwf	prodl,f,c
 10920  001D88  0E00               	movlw	0
 10921  001D8A  22F4               	addwfc	prodh,f,c
 10922  001D8C  0EA7               	movlw	low ARP_send@arp
 10923  001D8E  24F3               	addwf	prodl,w,c
 10924  001D90  6ED9               	movwf	fsr2l,c
 10925  001D92  0E00               	movlw	high ARP_send@arp
 10926  001D94  20F4               	addwfc	prodh,w,c
 10927  001D96  6EDA               	movwf	fsr2h,c
 10928  001D98  50DF               	movf	indf2,w,c
 10929  001D9A  EC0A  F01D         	call	_ethernetController_streamToTransmitBuffer
 10930  001D9E  0100               	movlb	0	; () banked
 10931  001DA0  2BD0               	incf	ARP_send@i_2695& (0+255),f,b
 10932  001DA2                     l920:
 10933                           
 10934                           ; BSR set to: 0
 10935                           
 10936                           ; BSR set to: 0
 10937  001DA2  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 10938  001DA4  5DD0               	subwf	ARP_send@i_2695& (0+255),w,b
 10939  001DA6  A0D8               	btfss	status,0,c
 10940  001DA8  D7E2               	goto	l921
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;arp.c: 206: ethernetController_sendPacket(ethFrame.memory);
 10944                           
 10945                           ; BSR set to: 0
 10946  001DAA  EE20  F0E1         	lfsr	2,ARP_send@ethFrame+16
 10947  001DAE  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 10948  001DB2  0E08               	movlw	8
 10949  001DB4                     u9181:
 10950  001DB4  CFDB FFEB          	movff	plusw2,plusw0
 10951  001DB8  06E8               	decf	wreg,f,c
 10952  001DBA  E2FC               	bc	u9181
 10953  001DBC  EC40  F022         	call	_ethernetController_sendPacket	;wreg free
 10954  001DC0  0012               	return		;funcret
 10955  001DC2                     __end_of_ARP_send:
 10956                           	opt stack 0
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           intcon3	equ	0xFF0
 10965                           postinc0	equ	0xFEE
 10966                           plusw0	equ	0xFEB
 10967                           fsr0h	equ	0xFEA
 10968                           fsr0l	equ	0xFE9
 10969                           wreg	equ	0xFE8
 10970                           indf1	equ	0xFE7
 10971                           postinc1	equ	0xFE6
 10972                           postdec1	equ	0xFE5
 10973                           plusw1	equ	0xFE3
 10974                           fsr1h	equ	0xFE2
 10975                           fsr1l	equ	0xFE1
 10976                           indf2	equ	0xFDF
 10977                           postinc2	equ	0xFDE
 10978                           postdec2	equ	0xFDD
 10979                           plusw2	equ	0xFDB
 10980                           fsr2h	equ	0xFDA
 10981                           fsr2l	equ	0xFD9
 10982                           status	equ	0xFD8
 10983                           
 10984 ;; *************** function _mac_setToBroadcast *****************
 10985 ;; Defined at:
 10986 ;;		line 26 in file "src/eth/mac.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 10989 ;;		 -> ARP_sendRequest@targetMAC(6), ARP_send@destination(6), 
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  i               1    2[BANK0 ] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  1    wreg      void 
 10994 ;; Registers used:
 10995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11001 ;;      Params:         0       2       0       0       0       0       0       0       0
 11002 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11003 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11004 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11005 ;;Total ram usage:        3 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    4
 11008 ;; This function calls:
 11009 ;;		Nothing
 11010 ;; This function is called by:
 11011 ;;		_ARP_send
 11012 ;;		_ARP_sendRequest
 11013 ;; This function uses a non-reentrant model
 11014 ;;
 11015                           
 11016                           	psect	text34
 11017  0044D0                     __ptext34:
 11018                           	opt stack 0
 11019  0044D0                     _mac_setToBroadcast:
 11020                           	opt stack 23
 11021                           
 11022                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 11023                           
 11024                           ;incstack = 0
 11025  0044D0  0E00               	movlw	0
 11026  0044D2  0100               	movlb	0	; () banked
 11027  0044D4  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 11028  0044D6                     l7239:
 11029                           
 11030                           ; BSR set to: 0
 11031  0044D6  0E05               	movlw	5
 11032  0044D8  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 11033  0044DA  D001               	goto	l377
 11034  0044DC  0012               	return	
 11035  0044DE                     l377:
 11036                           
 11037                           ; BSR set to: 0
 11038                           ;mac.c: 28: mac->address[i] = 0xff;
 11039                           
 11040                           ; BSR set to: 0
 11041  0044DE  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 11042  0044E0  0D01               	mullw	1
 11043  0044E2  50F3               	movf	prodl,w,c
 11044  0044E4  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 11045  0044E6  6ED9               	movwf	fsr2l,c
 11046  0044E8  50F4               	movf	prodh,w,c
 11047  0044EA  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 11048  0044EC  6EDA               	movwf	fsr2h,c
 11049  0044EE  0EFF               	movlw	255
 11050  0044F0  6EDF               	movwf	indf2,c
 11051                           
 11052                           ; BSR set to: 0
 11053  0044F2  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 11054  0044F4  D7F0               	goto	l7239
 11055  0044F6                     __end_of_mac_setToBroadcast:
 11056                           	opt stack 0
 11057                           tblptru	equ	0xFF8
 11058                           tblptrh	equ	0xFF7
 11059                           tblptrl	equ	0xFF6
 11060                           tablat	equ	0xFF5
 11061                           prodh	equ	0xFF4
 11062                           prodl	equ	0xFF3
 11063                           intcon	equ	0xFF2
 11064                           intcon3	equ	0xFF0
 11065                           postinc0	equ	0xFEE
 11066                           plusw0	equ	0xFEB
 11067                           fsr0h	equ	0xFEA
 11068                           fsr0l	equ	0xFE9
 11069                           wreg	equ	0xFE8
 11070                           indf1	equ	0xFE7
 11071                           postinc1	equ	0xFE6
 11072                           postdec1	equ	0xFE5
 11073                           plusw1	equ	0xFE3
 11074                           fsr1h	equ	0xFE2
 11075                           fsr1l	equ	0xFE1
 11076                           indf2	equ	0xFDF
 11077                           postinc2	equ	0xFDE
 11078                           postdec2	equ	0xFDD
 11079                           plusw2	equ	0xFDB
 11080                           fsr2h	equ	0xFDA
 11081                           fsr2l	equ	0xFD9
 11082                           status	equ	0xFD8
 11083                           
 11084 ;; *************** function _ethernet_txFrameRequest *****************
 11085 ;; Defined at:
 11086 ;;		line 28 in file "src/eth/ethernet.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 11089 ;;		 -> ARP_send@ethFrame(30), stack(113), 
 11090 ;; Auto vars:     Size  Location     Type
 11091 ;;  err             3   68[BANK0 ] struct error
 11092 ;; Return value:  Size  Location     Type
 11093 ;;                  3   66[BANK0 ] struct error
 11094 ;; Registers used:
 11095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11096 ;; Tracked objects:
 11097 ;;		On entry : 0/0
 11098 ;;		On exit  : 0/0
 11099 ;;		Unchanged: 0/0
 11100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11101 ;;      Params:         0       2       0       0       0       0       0       0       0
 11102 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11103 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11104 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11105 ;;Total ram usage:        5 bytes
 11106 ;; Hardware stack levels used:    1
 11107 ;; Hardware stack levels required when called:    8
 11108 ;; This function calls:
 11109 ;;		_ethernetController_writeDestinationMACAddress
 11110 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 11111 ;;		_memory_txFrameRequest
 11112 ;; This function is called by:
 11113 ;;		_ARP_send
 11114 ;;		_ipv4_txFrameRequest
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           	psect	text35
 11119  003056                     __ptext35:
 11120                           	opt stack 0
 11121  003056                     _ethernet_txFrameRequest:
 11122                           	opt stack 21
 11123                           
 11124                           ;ethernet.c: 30: error_t err;
 11125                           ;ethernet.c: 31: err.module = ERROR_MODULE_ETHERNET;
 11126                           
 11127                           ; BSR set to: 0
 11128                           ;incstack = 0
 11129  003056  0E02               	movlw	2
 11130  003058  0100               	movlb	0	; () banked
 11131  00305A  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11132                           
 11133                           ;ethernet.c: 32: err.code = (uint16_t)0;
 11134  00305C  0E00               	movlw	0
 11135  00305E  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11136  003060  0E00               	movlw	0
 11137  003062  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11138                           
 11139                           ; BSR set to: 0
 11140                           ;ethernet.c: 33: frame->memory = memory_txFrameRequest(frame->length);
 11141  003064  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 11142  003068  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 11143  00306C  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 11144  003070  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 11145  003074  EC64  F000         	call	_memory_txFrameRequest	;wreg free
 11146  003078  0100               	movlb	0	; () banked
 11147  00307A  EE20 F010          	lfsr	2,16
 11148  00307E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11149  003080  26D9               	addwf	fsr2l,f,c
 11150  003082  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11151  003084  22DA               	addwfc	fsr2h,f,c
 11152  003086  0E08               	movlw	8
 11153  003088                     u8541:
 11154  003088  CFEB FFDB          	movff	plusw0,plusw2
 11155  00308C  06E8               	decf	wreg,f,c
 11156  00308E  E2FC               	bc	u8541
 11157                           
 11158                           ; BSR set to: 0
 11159                           ;ethernet.c: 35: if (frame->memory.fOutOfMemory) {
 11160  003090  EE20 F017          	lfsr	2,23
 11161  003094  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11162  003096  26D9               	addwf	fsr2l,f,c
 11163  003098  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11164  00309A  22DA               	addwfc	fsr2h,f,c
 11165  00309C  50DF               	movf	indf2,w,c
 11166  00309E  B4D8               	btfsc	status,2,c
 11167  0030A0  D007               	goto	l355
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;ethernet.c: 37: err.module = ERROR_MODULE_MEMORY;
 11171  0030A2  0E00               	movlw	0
 11172  0030A4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11173                           
 11174                           ;ethernet.c: 38: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 11175  0030A6  0E00               	movlw	0
 11176  0030A8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11177  0030AA  0E65               	movlw	101
 11178  0030AC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;ethernet.c: 39: return err;
 11182                           ;	Return value of _ethernet_txFrameRequest is never used
 11183  0030AE  0012               	return	
 11184  0030B0                     l355:
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;ethernet.c: 40: }
 11188                           ;ethernet.c: 41: if (!frame->memory.fIsAssigned) {
 11189                           
 11190                           ; BSR set to: 0
 11191  0030B0  EE20 F016          	lfsr	2,22
 11192  0030B4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11193  0030B6  26D9               	addwf	fsr2l,f,c
 11194  0030B8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11195  0030BA  22DA               	addwfc	fsr2h,f,c
 11196  0030BC  50DF               	movf	indf2,w,c
 11197  0030BE  A4D8               	btfss	status,2,c
 11198  0030C0  D007               	goto	l357
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;ethernet.c: 43: err.module = ERROR_MODULE_MEMORY;
 11202  0030C2  0E00               	movlw	0
 11203  0030C4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 11204                           
 11205                           ;ethernet.c: 44: err.code = ERROR_MEMORY_UNKNOWN;
 11206  0030C6  0E00               	movlw	0
 11207  0030C8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 11208  0030CA  0EC7               	movlw	199
 11209  0030CC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 11210                           
 11211                           ; BSR set to: 0
 11212                           ;ethernet.c: 45: return err;
 11213                           ;	Return value of _ethernet_txFrameRequest is never used
 11214  0030CE  0012               	return	
 11215  0030D0                     l357:
 11216                           
 11217                           ; BSR set to: 0
 11218                           ;ethernet.c: 46: }
 11219                           ;ethernet.c: 48: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 11220                           
 11221                           ; BSR set to: 0
 11222  0030D0  EE20 F008          	lfsr	2,8
 11223  0030D4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11224  0030D6  26D9               	addwf	fsr2l,f,c
 11225  0030D8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11226  0030DA  22DA               	addwfc	fsr2h,f,c
 11227  0030DC  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 11228  0030E0  0E05               	movlw	5
 11229  0030E2                     u8571:
 11230  0030E2  CFDB FFEB          	movff	plusw2,plusw0
 11231  0030E6  06E8               	decf	wreg,f,c
 11232  0030E8  E2FC               	bc	u8571
 11233  0030EA  EE20 F010          	lfsr	2,16
 11234  0030EE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11235  0030F0  26D9               	addwf	fsr2l,f,c
 11236  0030F2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11237  0030F4  22DA               	addwfc	fsr2h,f,c
 11238  0030F6  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 11239  0030FA  0E08               	movlw	8
 11240  0030FC                     u8581:
 11241  0030FC  CFDB FFEB          	movff	plusw2,plusw0
 11242  003100  06E8               	decf	wreg,f,c
 11243  003102  E2FC               	bc	u8581
 11244  003104  EC4E  F01C         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 11245                           
 11246                           ;ethernet.c: 49: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 11247  003108  0100               	movlb	0	; () banked
 11248  00310A  EE20 F00E          	lfsr	2,14
 11249  00310E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11250  003110  26D9               	addwf	fsr2l,f,c
 11251  003112  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11252  003114  22DA               	addwfc	fsr2h,f,c
 11253  003116  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 11254  00311A  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 11255  00311E  EE20 F010          	lfsr	2,16
 11256  003122  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 11257  003124  26D9               	addwf	fsr2l,f,c
 11258  003126  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 11259  003128  22DA               	addwfc	fsr2h,f,c
 11260  00312A  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 11261  00312E  0E08               	movlw	8
 11262  003130                     u8591:
 11263  003130  CFDB FFEB          	movff	plusw2,plusw0
 11264  003134  06E8               	decf	wreg,f,c
 11265  003136  E2FC               	bc	u8591
 11266  003138  ECAF  F01F         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 11267  00313C  0012               	return	
 11268  00313E                     __end_of_ethernet_txFrameRequest:
 11269                           	opt stack 0
 11270                           tblptru	equ	0xFF8
 11271                           tblptrh	equ	0xFF7
 11272                           tblptrl	equ	0xFF6
 11273                           tablat	equ	0xFF5
 11274                           prodh	equ	0xFF4
 11275                           prodl	equ	0xFF3
 11276                           intcon	equ	0xFF2
 11277                           intcon3	equ	0xFF0
 11278                           postinc0	equ	0xFEE
 11279                           plusw0	equ	0xFEB
 11280                           fsr0h	equ	0xFEA
 11281                           fsr0l	equ	0xFE9
 11282                           wreg	equ	0xFE8
 11283                           indf1	equ	0xFE7
 11284                           postinc1	equ	0xFE6
 11285                           postdec1	equ	0xFE5
 11286                           plusw1	equ	0xFE3
 11287                           fsr1h	equ	0xFE2
 11288                           fsr1l	equ	0xFE1
 11289                           indf2	equ	0xFDF
 11290                           postinc2	equ	0xFDE
 11291                           postdec2	equ	0xFDD
 11292                           plusw2	equ	0xFDB
 11293                           fsr2h	equ	0xFDA
 11294                           fsr2l	equ	0xFD9
 11295                           status	equ	0xFD8
 11296                           
 11297 ;; *************** function _memory_txFrameRequest *****************
 11298 ;; Defined at:
 11299 ;;		line 136 in file "src/mem/memoryController.c"
 11300 ;; Parameters:    Size  Location     Type
 11301 ;;  length          2   36[BANK0 ] unsigned int 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;  i               1   54[BANK0 ] unsigned char 
 11304 ;;  i               1   55[BANK0 ] unsigned char 
 11305 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 11306 ;;  field           9   56[BANK0 ] struct memoryField
 11307 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  9   36[BANK0 ] struct memoryField
 11310 ;; Registers used:
 11311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11317 ;;      Params:         0       9       0       0       0       0       0       0       0
 11318 ;;      Locals:         0      15       0       0       0       0       0       0       0
 11319 ;;      Temps:          0       6       0       0       0       0       0       0       0
 11320 ;;      Totals:         0      30       0       0       0       0       0       0       0
 11321 ;;Total ram usage:       30 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    6
 11324 ;; This function calls:
 11325 ;;		___wmul
 11326 ;;		_checkForOverlap
 11327 ;;		_entireMemoryEmpty
 11328 ;;		_entireMemoryFull
 11329 ;; This function is called by:
 11330 ;;		_ethernet_txFrameRequest
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text36
 11335  0000C8                     __ptext36:
 11336                           	opt stack 0
 11337  0000C8                     _memory_txFrameRequest:
 11338                           	opt stack 22
 11339                           
 11340                           ;memoryController.c: 137: memoryField_t field;
 11341                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 11342                           
 11343                           ;incstack = 0
 11344  0000C8  0E00               	movlw	0
 11345  0000CA  0100               	movlb	0	; () banked
 11346  0000CC  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 11347                           
 11348                           ; BSR set to: 0
 11349                           ;memoryController.c: 140: if (length == 0) {
 11350  0000CE  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11351  0000D0  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11352  0000D2  A4D8               	btfss	status,2,c
 11353  0000D4  D00C               	goto	l460
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 11357  0000D6  0E01               	movlw	1
 11358  0000D8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;memoryController.c: 142: return field;
 11362  0000DA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11363  0000DE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11364  0000E2  0E08               	movlw	8
 11365  0000E4                     u8161:
 11366  0000E4  CFDB FFEB          	movff	plusw2,plusw0
 11367  0000E8  06E8               	decf	wreg,f,c
 11368  0000EA  E2FC               	bc	u8161
 11369                           
 11370                           ; BSR set to: 0
 11371  0000EC  0012               	return	
 11372  0000EE                     l460:
 11373                           
 11374                           ; BSR set to: 0
 11375                           ;memoryController.c: 143: }
 11376                           ;memoryController.c: 145: if (entireMemoryFull()) {
 11377                           
 11378                           ; BSR set to: 0
 11379  0000EE  EC23  F021         	call	_entireMemoryFull	;wreg free
 11380  0000F2  0900               	iorlw	0
 11381  0000F4  B4D8               	btfsc	status,2,c
 11382  0000F6  D00D               	goto	l462
 11383                           
 11384                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 11385  0000F8  0E01               	movlw	1
 11386  0000FA  0100               	movlb	0	; () banked
 11387  0000FC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11388                           
 11389                           ; BSR set to: 0
 11390                           ;memoryController.c: 147: return field;
 11391  0000FE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11392  000102  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11393  000106  0E08               	movlw	8
 11394  000108                     u8181:
 11395  000108  CFDB FFEB          	movff	plusw2,plusw0
 11396  00010C  06E8               	decf	wreg,f,c
 11397  00010E  E2FC               	bc	u8181
 11398                           
 11399                           ; BSR set to: 0
 11400  000110  0012               	return	
 11401  000112                     l462:
 11402                           
 11403                           ;memoryController.c: 148: }
 11404                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 11405                           
 11406                           ; BSR set to: 0
 11407  000112  EC3F  F021         	call	_entireMemoryEmpty	;wreg free
 11408  000116  0900               	iorlw	0
 11409  000118  B4D8               	btfsc	status,2,c
 11410  00011A  D23C               	goto	l487
 11411                           
 11412                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 11413  00011C  0E30               	movlw	48
 11414  00011E  0100               	movlb	0	; () banked
 11415  000120  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11416  000122  A0D8               	btfss	status,0,c
 11417  000124  D00C               	goto	l464
 11418                           
 11419                           ; BSR set to: 0
 11420                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 11421  000126  0E01               	movlw	1
 11422  000128  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;memoryController.c: 153: return field;
 11426  00012A  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11427  00012E  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11428  000132  0E08               	movlw	8
 11429  000134                     u8211:
 11430  000134  CFDB FFEB          	movff	plusw2,plusw0
 11431  000138  06E8               	decf	wreg,f,c
 11432  00013A  E2FC               	bc	u8211
 11433                           
 11434                           ; BSR set to: 0
 11435  00013C  0012               	return	
 11436  00013E                     l464:
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;memoryController.c: 155: else {
 11440                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 11441                           
 11442                           ; BSR set to: 0
 11443  00013E  0E00               	movlw	0
 11444  000140  0102               	movlb	2	; () banked
 11445  000142  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 11446  000144  0E00               	movlw	0
 11447  000146  6F00               	movwf	_occupiedMemory& (0+255),b
 11448                           
 11449                           ; BSR set to: 2
 11450                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 11451  000148  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 11452  00014C  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 11453                           
 11454                           ; BSR set to: 2
 11455                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 11456  000150  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 11457  000154  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 11458                           
 11459                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 11460  000158  0E01               	movlw	1
 11461  00015A  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 11462                           
 11463                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 11464  00015C  0E00               	movlw	0
 11465  00015E  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 11466                           
 11467                           ; BSR set to: 2
 11468                           ;memoryController.c: 161: return occupiedMemory[0];
 11469  000160  EE22  F000         	lfsr	2,_occupiedMemory
 11470  000164  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11471  000168  0E08               	movlw	8
 11472  00016A                     u8221:
 11473  00016A  CFDB FFEB          	movff	plusw2,plusw0
 11474  00016E  06E8               	decf	wreg,f,c
 11475  000170  E2FC               	bc	u8221
 11476                           
 11477                           ; BSR set to: 2
 11478  000172  0012               	return	
 11479  000174                     
 11480                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 11481                           
 11482                           ; BSR set to: 2
 11483  000174  0100               	movlb	0	; () banked
 11484  000176  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11485  000178  0D09               	mullw	9
 11486  00017A  0E06               	movlw	6
 11487  00017C  26F3               	addwf	prodl,f,c
 11488  00017E  0E00               	movlw	0
 11489  000180  22F4               	addwfc	prodh,f,c
 11490  000182  0E00               	movlw	low _occupiedMemory
 11491  000184  24F3               	addwf	prodl,w,c
 11492  000186  6ED9               	movwf	fsr2l,c
 11493  000188  0E02               	movlw	high _occupiedMemory
 11494  00018A  20F4               	addwfc	prodh,w,c
 11495  00018C  6EDA               	movwf	fsr2h,c
 11496  00018E  50DF               	movf	indf2,w,c
 11497  000190  A4D8               	btfss	status,2,c
 11498  000192  D1EF               	goto	l486
 11499                           
 11500                           ; BSR set to: 0
 11501                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 11502  000194  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11503  000196  B4D8               	btfsc	status,2,c
 11504  000198  D007               	goto	l470
 11505                           
 11506                           ; BSR set to: 0
 11507  00019A  0EFF               	movlw	255
 11508  00019C  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11509  00019E  6F93               	movwf	_memory_txFrameRequest$1158& (0+255),b
 11510  0001A0  6B94               	clrf	(_memory_txFrameRequest$1158+1)& (0+255),b
 11511  0001A2  0EFF               	movlw	255
 11512  0001A4  2394               	addwfc	(_memory_txFrameRequest$1158+1)& (0+255),f,b
 11513  0001A6  D004               	goto	l472
 11514  0001A8                     l470:
 11515                           
 11516                           ; BSR set to: 0
 11517                           
 11518                           ; BSR set to: 0
 11519  0001A8  0E00               	movlw	0
 11520  0001AA  6F94               	movwf	(_memory_txFrameRequest$1158+1)& (0+255),b
 11521  0001AC  0E07               	movlw	7
 11522  0001AE  6F93               	movwf	_memory_txFrameRequest$1158& (0+255),b
 11523  0001B0                     l472:
 11524                           
 11525                           ; BSR set to: 0
 11526                           
 11527                           ; BSR set to: 0
 11528  0001B0  C093  F060         	movff	_memory_txFrameRequest$1158,___wmul@multiplier
 11529  0001B4  C094  F061         	movff	_memory_txFrameRequest$1158+1,___wmul@multiplier+1
 11530  0001B8  0E00               	movlw	0
 11531  0001BA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11532  0001BC  0E09               	movlw	9
 11533  0001BE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 11534  0001C0  EC2C  F022         	call	___wmul	;wreg free
 11535  0001C4  0E02               	movlw	2
 11536  0001C6  0100               	movlb	0	; () banked
 11537  0001C8  2760               	addwf	?___wmul& (0+255),f,b
 11538  0001CA  0E00               	movlw	0
 11539  0001CC  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 11540  0001CE  0E00               	movlw	low _occupiedMemory
 11541  0001D0  2560               	addwf	?___wmul& (0+255),w,b
 11542  0001D2  6ED9               	movwf	fsr2l,c
 11543  0001D4  0E02               	movlw	high _occupiedMemory
 11544  0001D6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 11545  0001D8  6EDA               	movwf	fsr2h,c
 11546  0001DA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11547  0001DE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11548  0001E2  0E01               	movlw	1
 11549  0001E4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11550  0001E6  0E00               	movlw	0
 11551  0001E8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11552  0001EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11553  0001EC  0D09               	mullw	9
 11554  0001EE  0E00               	movlw	low _occupiedMemory
 11555  0001F0  24F3               	addwf	prodl,w,c
 11556  0001F2  6ED9               	movwf	fsr2l,c
 11557  0001F4  0E02               	movlw	high _occupiedMemory
 11558  0001F6  20F4               	addwfc	prodh,w,c
 11559  0001F8  6EDA               	movwf	fsr2h,c
 11560  0001FA  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11561  0001FE  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 11562                           
 11563                           ; BSR set to: 0
 11564                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 11565  000202  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11566  000204  0D09               	mullw	9
 11567  000206  0E00               	movlw	low _occupiedMemory
 11568  000208  24F3               	addwf	prodl,w,c
 11569  00020A  6ED9               	movwf	fsr2l,c
 11570  00020C  0E02               	movlw	high _occupiedMemory
 11571  00020E  20F4               	addwfc	prodh,w,c
 11572  000210  6EDA               	movwf	fsr2h,c
 11573  000212  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11574  000216  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11575  00021A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11576  00021C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11577  00021E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11578  000220  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11579  000222  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 11580  000224  0E30               	movlw	48
 11581  000226  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 11582  000228  A0D8               	btfss	status,0,c
 11583  00022A  D0D1               	goto	l474
 11584                           
 11585                           ; BSR set to: 0
 11586                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 11587  00022C  0E07               	movlw	7
 11588  00022E  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11589  000230  A4D8               	btfss	status,2,c
 11590  000232  D0CD               	goto	l474
 11591                           
 11592                           ; BSR set to: 0
 11593  000234  0102               	movlb	2	; () banked
 11594  000236  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 11595  000238  A4D8               	btfss	status,2,c
 11596  00023A  D0C9               	goto	l474
 11597                           
 11598                           ; BSR set to: 2
 11599                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 11600  00023C  0100               	movlb	0	; () banked
 11601  00023E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11602  000240  0D09               	mullw	9
 11603  000242  0E04               	movlw	4
 11604  000244  26F3               	addwf	prodl,f,c
 11605  000246  0E00               	movlw	0
 11606  000248  22F4               	addwfc	prodh,f,c
 11607  00024A  0E00               	movlw	low _occupiedMemory
 11608  00024C  24F3               	addwf	prodl,w,c
 11609  00024E  6ED9               	movwf	fsr2l,c
 11610  000250  0E02               	movlw	high _occupiedMemory
 11611  000252  20F4               	addwfc	prodh,w,c
 11612  000254  6EDA               	movwf	fsr2h,c
 11613  000256  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 11614  00025A  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 11615                           
 11616                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 11617  00025E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11618  000260  0D09               	mullw	9
 11619  000262  0E04               	movlw	4
 11620  000264  26F3               	addwf	prodl,f,c
 11621  000266  0E00               	movlw	0
 11622  000268  22F4               	addwfc	prodh,f,c
 11623  00026A  0E00               	movlw	low _occupiedMemory
 11624  00026C  24F3               	addwf	prodl,w,c
 11625  00026E  6ED9               	movwf	fsr2l,c
 11626  000270  0E02               	movlw	high _occupiedMemory
 11627  000272  20F4               	addwfc	prodh,w,c
 11628  000274  6EDA               	movwf	fsr2h,c
 11629  000276  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11630  00027A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11631  00027E  0EFF               	movlw	255
 11632  000280  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 11633  000282  0E2F               	movlw	47
 11634  000284  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 11635  000286  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11636  000288  0D09               	mullw	9
 11637  00028A  0E00               	movlw	low _occupiedMemory
 11638  00028C  24F3               	addwf	prodl,w,c
 11639  00028E  6ED9               	movwf	fsr2l,c
 11640  000290  0E02               	movlw	high _occupiedMemory
 11641  000292  20F4               	addwfc	prodh,w,c
 11642  000294  6EDA               	movwf	fsr2h,c
 11643  000296  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 11644  00029A  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 11645  00029E  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11646  0002A0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11647  0002A2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11648  0002A4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11649  0002A6  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 11650  0002A8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11651  0002AA  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 11652  0002AC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11653  0002AE  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11654  0002B0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11655  0002B2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 11656  0002B4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 11657  0002B6  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 11658  0002B8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 11659  0002BA  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 11660  0002BC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 11661  0002BE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11662  0002C0  0D09               	mullw	9
 11663  0002C2  0E02               	movlw	2
 11664  0002C4  26F3               	addwf	prodl,f,c
 11665  0002C6  0E00               	movlw	0
 11666  0002C8  22F4               	addwfc	prodh,f,c
 11667  0002CA  0E00               	movlw	low _occupiedMemory
 11668  0002CC  24F3               	addwf	prodl,w,c
 11669  0002CE  6ED9               	movwf	fsr2l,c
 11670  0002D0  0E02               	movlw	high _occupiedMemory
 11671  0002D2  20F4               	addwfc	prodh,w,c
 11672  0002D4  6EDA               	movwf	fsr2h,c
 11673  0002D6  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 11674  0002DA  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 11678  0002DE  0E00               	movlw	0
 11679  0002E0  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 11680  0002E2                     l7069:
 11681                           
 11682                           ; BSR set to: 0
 11683  0002E2  0E07               	movlw	7
 11684  0002E4  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 11685  0002E6  D001               	goto	l475
 11686  0002E8  D046               	goto	u8350
 11687  0002EA                     l475:
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;memoryController.c: 177: if (i == freeIndex)
 11691                           
 11692                           ; BSR set to: 0
 11693  0002EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11694  0002EC  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 11695  0002EE  B4D8               	btfsc	status,2,c
 11696  0002F0  D03F               	goto	l479
 11697                           
 11698                           ; BSR set to: 0
 11699                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 11700                           
 11701                           ; BSR set to: 0
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;memoryController.c: 178: continue;
 11705  0002F2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11706  0002F4  0D09               	mullw	9
 11707  0002F6  0E00               	movlw	low _occupiedMemory
 11708  0002F8  24F3               	addwf	prodl,w,c
 11709  0002FA  6ED9               	movwf	fsr2l,c
 11710  0002FC  0E02               	movlw	high _occupiedMemory
 11711  0002FE  20F4               	addwfc	prodh,w,c
 11712  000300  6EDA               	movwf	fsr2h,c
 11713  000302  EE00  F072         	lfsr	0,checkForOverlap@a
 11714  000306  0E08               	movlw	8
 11715  000308                     u8301:
 11716  000308  CFDB FFEB          	movff	plusw2,plusw0
 11717  00030C  06E8               	decf	wreg,f,c
 11718  00030E  E2FC               	bc	u8301
 11719  000310  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 11720  000312  0D09               	mullw	9
 11721  000314  0E00               	movlw	low _occupiedMemory
 11722  000316  24F3               	addwf	prodl,w,c
 11723  000318  6ED9               	movwf	fsr2l,c
 11724  00031A  0E02               	movlw	high _occupiedMemory
 11725  00031C  20F4               	addwfc	prodh,w,c
 11726  00031E  6EDA               	movwf	fsr2h,c
 11727  000320  EE00  F07B         	lfsr	0,checkForOverlap@b
 11728  000324  0E08               	movlw	8
 11729  000326                     u8311:
 11730  000326  CFDB FFEB          	movff	plusw2,plusw0
 11731  00032A  06E8               	decf	wreg,f,c
 11732  00032C  E2FC               	bc	u8311
 11733  00032E  EC30  F017         	call	_checkForOverlap	;wreg free
 11734  000332  0900               	iorlw	0
 11735  000334  B4D8               	btfsc	status,2,c
 11736  000336  D01C               	goto	l479
 11737  000338  0100               	movlb	0	; () banked
 11738  00033A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 11739  00033C  0D09               	mullw	9
 11740  00033E  0E06               	movlw	6
 11741  000340  26F3               	addwf	prodl,f,c
 11742  000342  0E00               	movlw	0
 11743  000344  22F4               	addwfc	prodh,f,c
 11744  000346  0E00               	movlw	low _occupiedMemory
 11745  000348  24F3               	addwf	prodl,w,c
 11746  00034A  6ED9               	movwf	fsr2l,c
 11747  00034C  0E02               	movlw	high _occupiedMemory
 11748  00034E  20F4               	addwfc	prodh,w,c
 11749  000350  6EDA               	movwf	fsr2h,c
 11750  000352  50DF               	movf	indf2,w,c
 11751  000354  B4D8               	btfsc	status,2,c
 11752  000356  D00C               	goto	l479
 11753                           
 11754                           ; BSR set to: 0
 11755                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 11756  000358  0E01               	movlw	1
 11757  00035A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 11758                           
 11759                           ; BSR set to: 0
 11760                           ;memoryController.c: 182: return field;
 11761  00035C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 11762  000360  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11763  000364  0E08               	movlw	8
 11764  000366                     u8341:
 11765  000366  CFDB FFEB          	movff	plusw2,plusw0
 11766  00036A  06E8               	decf	wreg,f,c
 11767  00036C  E2FC               	bc	u8341
 11768                           
 11769                           ; BSR set to: 0
 11770  00036E  0012               	return	
 11771  000370                     l479:
 11772                           
 11773                           ; BSR set to: 0
 11774                           
 11775                           ; BSR set to: 0
 11776  000370  0100               	movlb	0	; () banked
 11777  000372  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 11778  000374  D7B6               	goto	l7069
 11779  000376                     u8350:
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;memoryController.c: 183: }
 11783                           ;memoryController.c: 184: }
 11784                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 11785                           
 11786                           ; BSR set to: 0
 11787  000376  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11788  000378  0D09               	mullw	9
 11789  00037A  0E06               	movlw	6
 11790  00037C  26F3               	addwf	prodl,f,c
 11791  00037E  0E00               	movlw	0
 11792  000380  22F4               	addwfc	prodh,f,c
 11793  000382  0E00               	movlw	low _occupiedMemory
 11794  000384  24F3               	addwf	prodl,w,c
 11795  000386  6ED9               	movwf	fsr2l,c
 11796  000388  0E02               	movlw	high _occupiedMemory
 11797  00038A  20F4               	addwfc	prodh,w,c
 11798  00038C  6EDA               	movwf	fsr2h,c
 11799  00038E  0E01               	movlw	1
 11800  000390  6EDF               	movwf	indf2,c
 11801                           
 11802                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 11803  000392  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11804  000394  0D09               	mullw	9
 11805  000396  0E08               	movlw	8
 11806  000398  26F3               	addwf	prodl,f,c
 11807  00039A  0E00               	movlw	0
 11808  00039C  22F4               	addwfc	prodh,f,c
 11809  00039E  0E00               	movlw	low _occupiedMemory
 11810  0003A0  24F3               	addwf	prodl,w,c
 11811  0003A2  6ED9               	movwf	fsr2l,c
 11812  0003A4  0E02               	movlw	high _occupiedMemory
 11813  0003A6  20F4               	addwfc	prodh,w,c
 11814  0003A8  6EDA               	movwf	fsr2h,c
 11815  0003AA  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 11816                           
 11817                           ; BSR set to: 0
 11818                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 11819  0003AE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11820  0003B0  0D09               	mullw	9
 11821  0003B2  0E00               	movlw	low _occupiedMemory
 11822  0003B4  24F3               	addwf	prodl,w,c
 11823  0003B6  6ED9               	movwf	fsr2l,c
 11824  0003B8  0E02               	movlw	high _occupiedMemory
 11825  0003BA  20F4               	addwfc	prodh,w,c
 11826  0003BC  6EDA               	movwf	fsr2h,c
 11827  0003BE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 11828  0003C2  0E08               	movlw	8
 11829  0003C4                     u8361:
 11830  0003C4  CFDB FFEB          	movff	plusw2,plusw0
 11831  0003C8  06E8               	decf	wreg,f,c
 11832  0003CA  E2FC               	bc	u8361
 11833                           
 11834                           ; BSR set to: 0
 11835  0003CC  0012               	return	
 11836  0003CE                     l474:
 11837                           
 11838                           ;memoryController.c: 188: }
 11839                           ;memoryController.c: 189: }
 11840                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 11841                           
 11842                           ; BSR set to: 0
 11843                           
 11844                           ; BSR set to: 0
 11845  0003CE  0E01               	movlw	1
 11846  0003D0  0100               	movlb	0	; () banked
 11847  0003D2  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11848                           
 11849                           ; BSR set to: 0
 11850                           ;memoryController.c: 192: uint8_t i;
 11851                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 11852  0003D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11853  0003D6  0D09               	mullw	9
 11854  0003D8  0E00               	movlw	low _occupiedMemory
 11855  0003DA  24F3               	addwf	prodl,w,c
 11856  0003DC  6ED9               	movwf	fsr2l,c
 11857  0003DE  0E02               	movlw	high _occupiedMemory
 11858  0003E0  20F4               	addwfc	prodh,w,c
 11859  0003E2  6EDA               	movwf	fsr2h,c
 11860  0003E4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 11861  0003E8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 11862  0003EC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 11863  0003EE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 11864  0003F0  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 11865  0003F2  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 11866  0003F4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11867  0003F6  0D09               	mullw	9
 11868  0003F8  0E02               	movlw	2
 11869  0003FA  26F3               	addwf	prodl,f,c
 11870  0003FC  0E00               	movlw	0
 11871  0003FE  22F4               	addwfc	prodh,f,c
 11872  000400  0E00               	movlw	low _occupiedMemory
 11873  000402  24F3               	addwf	prodl,w,c
 11874  000404  6ED9               	movwf	fsr2l,c
 11875  000406  0E02               	movlw	high _occupiedMemory
 11876  000408  20F4               	addwfc	prodh,w,c
 11877  00040A  6EDA               	movwf	fsr2h,c
 11878  00040C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 11879  000410  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 11880                           
 11881                           ; BSR set to: 0
 11882                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 11883  000414  0E00               	movlw	0
 11884  000416  6F97               	movwf	memory_txFrameRequest@i_1162& (0+255),b
 11885  000418                     l7103:
 11886                           
 11887                           ; BSR set to: 0
 11888  000418  0E07               	movlw	7
 11889  00041A  6597               	cpfsgt	memory_txFrameRequest@i_1162& (0+255),b
 11890  00041C  D001               	goto	l480
 11891  00041E  D03C               	goto	u8430
 11892  000420                     l480:
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;memoryController.c: 195: if (i == freeIndex)
 11896                           
 11897                           ; BSR set to: 0
 11898  000420  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11899  000422  1997               	xorwf	memory_txFrameRequest@i_1162& (0+255),w,b
 11900  000424  B4D8               	btfsc	status,2,c
 11901  000426  D035               	goto	l485
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 11905                           
 11906                           ; BSR set to: 0
 11907                           
 11908                           ; BSR set to: 0
 11909                           ;memoryController.c: 196: continue;
 11910  000428  5197               	movf	memory_txFrameRequest@i_1162& (0+255),w,b
 11911  00042A  0D09               	mullw	9
 11912  00042C  0E06               	movlw	6
 11913  00042E  26F3               	addwf	prodl,f,c
 11914  000430  0E00               	movlw	0
 11915  000432  22F4               	addwfc	prodh,f,c
 11916  000434  0E00               	movlw	low _occupiedMemory
 11917  000436  24F3               	addwf	prodl,w,c
 11918  000438  6ED9               	movwf	fsr2l,c
 11919  00043A  0E02               	movlw	high _occupiedMemory
 11920  00043C  20F4               	addwfc	prodh,w,c
 11921  00043E  6EDA               	movwf	fsr2h,c
 11922  000440  50DF               	movf	indf2,w,c
 11923  000442  B4D8               	btfsc	status,2,c
 11924  000444  D026               	goto	l485
 11925                           
 11926                           ; BSR set to: 0
 11927                           ;memoryController.c: 200: }
 11928                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 11929                           
 11930                           ; BSR set to: 0
 11931                           
 11932                           ; BSR set to: 0
 11933                           ;memoryController.c: 198: continue;
 11934  000446  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11935  000448  0D09               	mullw	9
 11936  00044A  0E00               	movlw	low _occupiedMemory
 11937  00044C  24F3               	addwf	prodl,w,c
 11938  00044E  6ED9               	movwf	fsr2l,c
 11939  000450  0E02               	movlw	high _occupiedMemory
 11940  000452  20F4               	addwfc	prodh,w,c
 11941  000454  6EDA               	movwf	fsr2h,c
 11942  000456  EE00  F072         	lfsr	0,checkForOverlap@a
 11943  00045A  0E08               	movlw	8
 11944  00045C                     u8401:
 11945  00045C  CFDB FFEB          	movff	plusw2,plusw0
 11946  000460  06E8               	decf	wreg,f,c
 11947  000462  E2FC               	bc	u8401
 11948  000464  5197               	movf	memory_txFrameRequest@i_1162& (0+255),w,b
 11949  000466  0D09               	mullw	9
 11950  000468  0E00               	movlw	low _occupiedMemory
 11951  00046A  24F3               	addwf	prodl,w,c
 11952  00046C  6ED9               	movwf	fsr2l,c
 11953  00046E  0E02               	movlw	high _occupiedMemory
 11954  000470  20F4               	addwfc	prodh,w,c
 11955  000472  6EDA               	movwf	fsr2h,c
 11956  000474  EE00  F07B         	lfsr	0,checkForOverlap@b
 11957  000478  0E08               	movlw	8
 11958  00047A                     u8411:
 11959  00047A  CFDB FFEB          	movff	plusw2,plusw0
 11960  00047E  06E8               	decf	wreg,f,c
 11961  000480  E2FC               	bc	u8411
 11962  000482  EC30  F017         	call	_checkForOverlap	;wreg free
 11963  000486  0900               	iorlw	0
 11964  000488  B4D8               	btfsc	status,2,c
 11965  00048A  D003               	goto	l485
 11966                           
 11967                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 11968  00048C  0E00               	movlw	0
 11969  00048E  0100               	movlb	0	; () banked
 11970  000490  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 11971  000492                     l485:
 11972                           
 11973                           ; BSR set to: 0
 11974                           
 11975                           ; BSR set to: 0
 11976  000492  0100               	movlb	0	; () banked
 11977  000494  2B97               	incf	memory_txFrameRequest@i_1162& (0+255),f,b
 11978  000496  D7C0               	goto	l7103
 11979  000498                     u8430:
 11980                           
 11981                           ; BSR set to: 0
 11982                           ;memoryController.c: 205: }
 11983                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 11984                           
 11985                           ; BSR set to: 0
 11986  000498  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 11987  00049A  B4D8               	btfsc	status,2,c
 11988  00049C  D06A               	goto	l486
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 11992  00049E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 11993  0004A0  0D09               	mullw	9
 11994  0004A2  0E06               	movlw	6
 11995  0004A4  26F3               	addwf	prodl,f,c
 11996  0004A6  0E00               	movlw	0
 11997  0004A8  22F4               	addwfc	prodh,f,c
 11998  0004AA  0E00               	movlw	low _occupiedMemory
 11999  0004AC  24F3               	addwf	prodl,w,c
 12000  0004AE  6ED9               	movwf	fsr2l,c
 12001  0004B0  0E02               	movlw	high _occupiedMemory
 12002  0004B2  20F4               	addwfc	prodh,w,c
 12003  0004B4  6EDA               	movwf	fsr2h,c
 12004  0004B6  0E01               	movlw	1
 12005  0004B8  6EDF               	movwf	indf2,c
 12006                           
 12007                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 12008  0004BA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12009  0004BC  0D09               	mullw	9
 12010  0004BE  0E00               	movlw	low _occupiedMemory
 12011  0004C0  24F3               	addwf	prodl,w,c
 12012  0004C2  6ED9               	movwf	fsr2l,c
 12013  0004C4  0E02               	movlw	high _occupiedMemory
 12014  0004C6  20F4               	addwfc	prodh,w,c
 12015  0004C8  6EDA               	movwf	fsr2h,c
 12016  0004CA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 12017  0004CE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 12018  0004D2  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 12019  0004D4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 12020  0004D6  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12021  0004D8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 12022  0004DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12023  0004DC  0D09               	mullw	9
 12024  0004DE  0E02               	movlw	2
 12025  0004E0  26F3               	addwf	prodl,f,c
 12026  0004E2  0E00               	movlw	0
 12027  0004E4  22F4               	addwfc	prodh,f,c
 12028  0004E6  0E00               	movlw	low _occupiedMemory
 12029  0004E8  24F3               	addwf	prodl,w,c
 12030  0004EA  6ED9               	movwf	fsr2l,c
 12031  0004EC  0E02               	movlw	high _occupiedMemory
 12032  0004EE  20F4               	addwfc	prodh,w,c
 12033  0004F0  6EDA               	movwf	fsr2h,c
 12034  0004F2  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 12035  0004F6  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 12036                           
 12037                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 12038  0004FA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12039  0004FC  0D09               	mullw	9
 12040  0004FE  0E07               	movlw	7
 12041  000500  26F3               	addwf	prodl,f,c
 12042  000502  0E00               	movlw	0
 12043  000504  22F4               	addwfc	prodh,f,c
 12044  000506  0E00               	movlw	low _occupiedMemory
 12045  000508  24F3               	addwf	prodl,w,c
 12046  00050A  6ED9               	movwf	fsr2l,c
 12047  00050C  0E02               	movlw	high _occupiedMemory
 12048  00050E  20F4               	addwfc	prodh,w,c
 12049  000510  6EDA               	movwf	fsr2h,c
 12050  000512  0E00               	movlw	0
 12051  000514  6EDF               	movwf	indf2,c
 12052                           
 12053                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 12054  000516  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12055  000518  0D09               	mullw	9
 12056  00051A  0E04               	movlw	4
 12057  00051C  26F3               	addwf	prodl,f,c
 12058  00051E  0E00               	movlw	0
 12059  000520  22F4               	addwfc	prodh,f,c
 12060  000522  0E00               	movlw	low _occupiedMemory
 12061  000524  24F3               	addwf	prodl,w,c
 12062  000526  6ED9               	movwf	fsr2l,c
 12063  000528  0E02               	movlw	high _occupiedMemory
 12064  00052A  20F4               	addwfc	prodh,w,c
 12065  00052C  6EDA               	movwf	fsr2h,c
 12066  00052E  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 12067  000532  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 12068                           
 12069                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 12070  000536  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12071  000538  0D09               	mullw	9
 12072  00053A  0E08               	movlw	8
 12073  00053C  26F3               	addwf	prodl,f,c
 12074  00053E  0E00               	movlw	0
 12075  000540  22F4               	addwfc	prodh,f,c
 12076  000542  0E00               	movlw	low _occupiedMemory
 12077  000544  24F3               	addwf	prodl,w,c
 12078  000546  6ED9               	movwf	fsr2l,c
 12079  000548  0E02               	movlw	high _occupiedMemory
 12080  00054A  20F4               	addwfc	prodh,w,c
 12081  00054C  6EDA               	movwf	fsr2h,c
 12082  00054E  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 12083                           
 12084                           ; BSR set to: 0
 12085                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 12086  000552  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12087  000554  0D09               	mullw	9
 12088  000556  0E00               	movlw	low _occupiedMemory
 12089  000558  24F3               	addwf	prodl,w,c
 12090  00055A  6ED9               	movwf	fsr2l,c
 12091  00055C  0E02               	movlw	high _occupiedMemory
 12092  00055E  20F4               	addwfc	prodh,w,c
 12093  000560  6EDA               	movwf	fsr2h,c
 12094  000562  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12095  000566  0E08               	movlw	8
 12096  000568                     u8451:
 12097  000568  CFDB FFEB          	movff	plusw2,plusw0
 12098  00056C  06E8               	decf	wreg,f,c
 12099  00056E  E2FC               	bc	u8451
 12100                           
 12101                           ; BSR set to: 0
 12102  000570  0012               	return	
 12103  000572                     l486:
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;memoryController.c: 213: }
 12107                           ;memoryController.c: 214: }
 12108                           ;memoryController.c: 215: freeIndex++;
 12109                           
 12110                           ; BSR set to: 0
 12111                           
 12112                           ; BSR set to: 0
 12113  000572  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;memoryController.c: 216: if (freeIndex == 8) {
 12117  000574  0E08               	movlw	8
 12118  000576  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 12119  000578  A4D8               	btfss	status,2,c
 12120  00057A  D00C               	goto	l487
 12121                           
 12122                           ; BSR set to: 0
 12123                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 12124  00057C  0E01               	movlw	1
 12125  00057E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;memoryController.c: 219: return field;
 12129  000580  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12130  000584  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12131  000588  0E08               	movlw	8
 12132  00058A                     u8471:
 12133  00058A  CFDB FFEB          	movff	plusw2,plusw0
 12134  00058E  06E8               	decf	wreg,f,c
 12135  000590  E2FC               	bc	u8471
 12136                           
 12137                           ; BSR set to: 0
 12138  000592  0012               	return	
 12139  000594                     l487:
 12140                           
 12141                           ; BSR set to: 0
 12142                           
 12143                           ; BSR set to: 0
 12144  000594  0E08               	movlw	8
 12145  000596  0100               	movlb	0	; () banked
 12146  000598  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 12147  00059A  D5EC               	goto	l467
 12148  00059C  0012               	return	
 12149  00059E                     __end_of_memory_txFrameRequest:
 12150                           	opt stack 0
 12151                           tblptru	equ	0xFF8
 12152                           tblptrh	equ	0xFF7
 12153                           tblptrl	equ	0xFF6
 12154                           tablat	equ	0xFF5
 12155                           prodh	equ	0xFF4
 12156                           prodl	equ	0xFF3
 12157                           intcon	equ	0xFF2
 12158                           intcon3	equ	0xFF0
 12159                           postinc0	equ	0xFEE
 12160                           plusw0	equ	0xFEB
 12161                           fsr0h	equ	0xFEA
 12162                           fsr0l	equ	0xFE9
 12163                           wreg	equ	0xFE8
 12164                           indf1	equ	0xFE7
 12165                           postinc1	equ	0xFE6
 12166                           postdec1	equ	0xFE5
 12167                           plusw1	equ	0xFE3
 12168                           fsr1h	equ	0xFE2
 12169                           fsr1l	equ	0xFE1
 12170                           indf2	equ	0xFDF
 12171                           postinc2	equ	0xFDE
 12172                           postdec2	equ	0xFDD
 12173                           plusw2	equ	0xFDB
 12174                           fsr2h	equ	0xFDA
 12175                           fsr2l	equ	0xFD9
 12176                           status	equ	0xFD8
 12177                           
 12178 ;; *************** function _entireMemoryFull *****************
 12179 ;; Defined at:
 12180 ;;		line 44 in file "src/mem/memoryController.c"
 12181 ;; Parameters:    Size  Location     Type
 12182 ;;		None
 12183 ;; Auto vars:     Size  Location     Type
 12184 ;;  i               1    0[BANK0 ] unsigned char 
 12185 ;; Return value:  Size  Location     Type
 12186 ;;                  1    wreg      unsigned char 
 12187 ;; Registers used:
 12188 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12189 ;; Tracked objects:
 12190 ;;		On entry : 0/0
 12191 ;;		On exit  : 0/0
 12192 ;;		Unchanged: 0/0
 12193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12194 ;;      Params:         0       0       0       0       0       0       0       0       0
 12195 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12196 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12197 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12198 ;;Total ram usage:        1 bytes
 12199 ;; Hardware stack levels used:    1
 12200 ;; Hardware stack levels required when called:    4
 12201 ;; This function calls:
 12202 ;;		Nothing
 12203 ;; This function is called by:
 12204 ;;		_memory_txFrameRequest
 12205 ;; This function uses a non-reentrant model
 12206 ;;
 12207                           
 12208                           	psect	text37
 12209  004246                     __ptext37:
 12210                           	opt stack 0
 12211  004246                     _entireMemoryFull:
 12212                           	opt stack 23
 12213                           
 12214                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 12215                           
 12216                           ;incstack = 0
 12217  004246  0E00               	movlw	0
 12218  004248  0100               	movlb	0	; () banked
 12219  00424A  6F60               	movwf	entireMemoryFull@i& (0+255),b
 12220  00424C                     l6829:
 12221                           
 12222                           ; BSR set to: 0
 12223  00424C  0E07               	movlw	7
 12224  00424E  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 12225  004250  D001               	goto	l416
 12226  004252  D013               	goto	u7900
 12227  004254                     l416:
 12228                           
 12229                           ; BSR set to: 0
 12230                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 12231                           
 12232                           ; BSR set to: 0
 12233  004254  5160               	movf	entireMemoryFull@i& (0+255),w,b
 12234  004256  0D09               	mullw	9
 12235  004258  0E06               	movlw	6
 12236  00425A  26F3               	addwf	prodl,f,c
 12237  00425C  0E00               	movlw	0
 12238  00425E  22F4               	addwfc	prodh,f,c
 12239  004260  0E00               	movlw	low _occupiedMemory
 12240  004262  24F3               	addwf	prodl,w,c
 12241  004264  6ED9               	movwf	fsr2l,c
 12242  004266  0E02               	movlw	high _occupiedMemory
 12243  004268  20F4               	addwfc	prodh,w,c
 12244  00426A  6EDA               	movwf	fsr2h,c
 12245  00426C  50DF               	movf	indf2,w,c
 12246  00426E  A4D8               	btfss	status,2,c
 12247  004270  D002               	goto	l418
 12248                           
 12249                           ; BSR set to: 0
 12250                           ;memoryController.c: 47: return 0;
 12251  004272  0E00               	movlw	0
 12252                           
 12253                           ; BSR set to: 0
 12254  004274  0012               	return	
 12255  004276                     l418:
 12256                           
 12257                           ; BSR set to: 0
 12258                           
 12259                           ; BSR set to: 0
 12260  004276  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 12261  004278  D7E9               	goto	l6829
 12262  00427A                     u7900:
 12263                           
 12264                           ; BSR set to: 0
 12265                           ;memoryController.c: 48: }
 12266                           ;memoryController.c: 49: return 1;
 12267                           
 12268                           ; BSR set to: 0
 12269  00427A  0E01               	movlw	1
 12270  00427C  0012               	return	
 12271  00427E                     __end_of_entireMemoryFull:
 12272                           	opt stack 0
 12273                           tblptru	equ	0xFF8
 12274                           tblptrh	equ	0xFF7
 12275                           tblptrl	equ	0xFF6
 12276                           tablat	equ	0xFF5
 12277                           prodh	equ	0xFF4
 12278                           prodl	equ	0xFF3
 12279                           intcon	equ	0xFF2
 12280                           intcon3	equ	0xFF0
 12281                           postinc0	equ	0xFEE
 12282                           plusw0	equ	0xFEB
 12283                           fsr0h	equ	0xFEA
 12284                           fsr0l	equ	0xFE9
 12285                           wreg	equ	0xFE8
 12286                           indf1	equ	0xFE7
 12287                           postinc1	equ	0xFE6
 12288                           postdec1	equ	0xFE5
 12289                           plusw1	equ	0xFE3
 12290                           fsr1h	equ	0xFE2
 12291                           fsr1l	equ	0xFE1
 12292                           indf2	equ	0xFDF
 12293                           postinc2	equ	0xFDE
 12294                           postdec2	equ	0xFDD
 12295                           plusw2	equ	0xFDB
 12296                           fsr2h	equ	0xFDA
 12297                           fsr2l	equ	0xFD9
 12298                           status	equ	0xFD8
 12299                           
 12300 ;; *************** function _entireMemoryEmpty *****************
 12301 ;; Defined at:
 12302 ;;		line 36 in file "src/mem/memoryController.c"
 12303 ;; Parameters:    Size  Location     Type
 12304 ;;		None
 12305 ;; Auto vars:     Size  Location     Type
 12306 ;;  i               1    0[BANK0 ] unsigned char 
 12307 ;; Return value:  Size  Location     Type
 12308 ;;                  1    wreg      unsigned char 
 12309 ;; Registers used:
 12310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12311 ;; Tracked objects:
 12312 ;;		On entry : 0/0
 12313 ;;		On exit  : 0/0
 12314 ;;		Unchanged: 0/0
 12315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12316 ;;      Params:         0       0       0       0       0       0       0       0       0
 12317 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12318 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12319 ;;      Totals:         0       1       0       0       0       0       0       0       0
 12320 ;;Total ram usage:        1 bytes
 12321 ;; Hardware stack levels used:    1
 12322 ;; Hardware stack levels required when called:    4
 12323 ;; This function calls:
 12324 ;;		Nothing
 12325 ;; This function is called by:
 12326 ;;		_memory_txFrameRequest
 12327 ;; This function uses a non-reentrant model
 12328 ;;
 12329                           
 12330                           	psect	text38
 12331  00427E                     __ptext38:
 12332                           	opt stack 0
 12333  00427E                     _entireMemoryEmpty:
 12334                           	opt stack 23
 12335                           
 12336                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 12337                           
 12338                           ; BSR set to: 0
 12339                           ;incstack = 0
 12340  00427E  0E00               	movlw	0
 12341  004280  0100               	movlb	0	; () banked
 12342  004282  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 12343  004284                     l6809:
 12344                           
 12345                           ; BSR set to: 0
 12346  004284  0E07               	movlw	7
 12347  004286  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 12348  004288  D001               	goto	l410
 12349  00428A  D013               	goto	u7870
 12350  00428C                     l410:
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 12354                           
 12355                           ; BSR set to: 0
 12356  00428C  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 12357  00428E  0D09               	mullw	9
 12358  004290  0E06               	movlw	6
 12359  004292  26F3               	addwf	prodl,f,c
 12360  004294  0E00               	movlw	0
 12361  004296  22F4               	addwfc	prodh,f,c
 12362  004298  0E00               	movlw	low _occupiedMemory
 12363  00429A  24F3               	addwf	prodl,w,c
 12364  00429C  6ED9               	movwf	fsr2l,c
 12365  00429E  0E02               	movlw	high _occupiedMemory
 12366  0042A0  20F4               	addwfc	prodh,w,c
 12367  0042A2  6EDA               	movwf	fsr2h,c
 12368  0042A4  50DF               	movf	indf2,w,c
 12369  0042A6  B4D8               	btfsc	status,2,c
 12370  0042A8  D002               	goto	l412
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;memoryController.c: 39: return 0;
 12374  0042AA  0E00               	movlw	0
 12375                           
 12376                           ; BSR set to: 0
 12377  0042AC  0012               	return	
 12378  0042AE                     l412:
 12379                           
 12380                           ; BSR set to: 0
 12381                           
 12382                           ; BSR set to: 0
 12383  0042AE  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 12384  0042B0  D7E9               	goto	l6809
 12385  0042B2                     u7870:
 12386                           
 12387                           ; BSR set to: 0
 12388                           ;memoryController.c: 40: }
 12389                           ;memoryController.c: 41: return 1;
 12390                           
 12391                           ; BSR set to: 0
 12392  0042B2  0E01               	movlw	1
 12393  0042B4  0012               	return	
 12394  0042B6                     __end_of_entireMemoryEmpty:
 12395                           	opt stack 0
 12396                           tblptru	equ	0xFF8
 12397                           tblptrh	equ	0xFF7
 12398                           tblptrl	equ	0xFF6
 12399                           tablat	equ	0xFF5
 12400                           prodh	equ	0xFF4
 12401                           prodl	equ	0xFF3
 12402                           intcon	equ	0xFF2
 12403                           intcon3	equ	0xFF0
 12404                           postinc0	equ	0xFEE
 12405                           plusw0	equ	0xFEB
 12406                           fsr0h	equ	0xFEA
 12407                           fsr0l	equ	0xFE9
 12408                           wreg	equ	0xFE8
 12409                           indf1	equ	0xFE7
 12410                           postinc1	equ	0xFE6
 12411                           postdec1	equ	0xFE5
 12412                           plusw1	equ	0xFE3
 12413                           fsr1h	equ	0xFE2
 12414                           fsr1l	equ	0xFE1
 12415                           indf2	equ	0xFDF
 12416                           postinc2	equ	0xFDE
 12417                           postdec2	equ	0xFDD
 12418                           plusw2	equ	0xFDB
 12419                           fsr2h	equ	0xFDA
 12420                           fsr2l	equ	0xFD9
 12421                           status	equ	0xFD8
 12422                           
 12423 ;; *************** function _checkForOverlap *****************
 12424 ;; Defined at:
 12425 ;;		line 62 in file "src/mem/memoryController.c"
 12426 ;; Parameters:    Size  Location     Type
 12427 ;;  a               9   18[BANK0 ] struct memoryField
 12428 ;;  b               9   27[BANK0 ] struct memoryField
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;		None
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      unsigned char 
 12433 ;; Registers used:
 12434 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12440 ;;      Params:         0      18       0       0       0       0       0       0       0
 12441 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12443 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12444 ;;Total ram usage:       18 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    5
 12447 ;; This function calls:
 12448 ;;		_checkForOverlapSwitched
 12449 ;; This function is called by:
 12450 ;;		_memory_txFrameRequest
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text39
 12455  002E60                     __ptext39:
 12456                           	opt stack 0
 12457  002E60                     _checkForOverlap:
 12458                           	opt stack 22
 12459                           
 12460                           ;memoryController.c: 63: if ((a.start == b.start) ||
 12461                           ;memoryController.c: 64: (a.end == b.end) ||
 12462                           ;memoryController.c: 65: (a.start == b.end) ||
 12463                           ;memoryController.c: 66: (a.end == b.start) ||
 12464                           ;memoryController.c: 67: (a.end > 0x3000) ||
 12465                           ;memoryController.c: 68: (a.start > 0x3000) ||
 12466                           ;memoryController.c: 69: (b.end > 0x3000) ||
 12467                           ;memoryController.c: 70: (b.start > 0x3000))
 12468                           
 12469                           ; BSR set to: 0
 12470                           ;incstack = 0
 12471  002E60  0100               	movlb	0	; () banked
 12472  002E62  517B               	movf	checkForOverlap@b& (0+255),w,b
 12473  002E64  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 12474  002E66  E104               	bnz	u7910
 12475  002E68  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12476  002E6A  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 12477  002E6C  B4D8               	btfsc	status,2,c
 12478  002E6E  D029               	goto	u7980
 12479  002E70                     u7910:
 12480                           
 12481                           ; BSR set to: 0
 12482  002E70  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12483  002E72  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12484  002E74  E104               	bnz	u7920
 12485  002E76  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12486  002E78  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12487  002E7A  B4D8               	btfsc	status,2,c
 12488  002E7C  D022               	goto	u7980
 12489  002E7E                     u7920:
 12490                           
 12491                           ; BSR set to: 0
 12492  002E7E  5172               	movf	checkForOverlap@a& (0+255),w,b
 12493  002E80  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 12494  002E82  E104               	bnz	u7930
 12495  002E84  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12496  002E86  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 12497  002E88  B4D8               	btfsc	status,2,c
 12498  002E8A  D01B               	goto	u7980
 12499  002E8C                     u7930:
 12500                           
 12501                           ; BSR set to: 0
 12502  002E8C  517B               	movf	checkForOverlap@b& (0+255),w,b
 12503  002E8E  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 12504  002E90  E104               	bnz	u7940
 12505  002E92  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12506  002E94  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 12507  002E96  B4D8               	btfsc	status,2,c
 12508  002E98  D014               	goto	u7980
 12509  002E9A                     u7940:
 12510                           
 12511                           ; BSR set to: 0
 12512  002E9A  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 12513  002E9C  0E30               	movlw	48
 12514  002E9E  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 12515  002EA0  B0D8               	btfsc	status,0,c
 12516  002EA2  D00F               	goto	u7980
 12517                           
 12518                           ; BSR set to: 0
 12519  002EA4  0572               	decf	checkForOverlap@a& (0+255),w,b
 12520  002EA6  0E30               	movlw	48
 12521  002EA8  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12522  002EAA  B0D8               	btfsc	status,0,c
 12523  002EAC  D00A               	goto	u7980
 12524                           
 12525                           ; BSR set to: 0
 12526  002EAE  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 12527  002EB0  0E30               	movlw	48
 12528  002EB2  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12529  002EB4  B0D8               	btfsc	status,0,c
 12530  002EB6  D005               	goto	u7980
 12531                           
 12532                           ; BSR set to: 0
 12533  002EB8  057B               	decf	checkForOverlap@b& (0+255),w,b
 12534  002EBA  0E30               	movlw	48
 12535  002EBC  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12536  002EBE  A0D8               	btfss	status,0,c
 12537  002EC0  D002               	goto	l430
 12538  002EC2                     u7980:
 12539                           
 12540                           ; BSR set to: 0
 12541                           ;memoryController.c: 71: return 1;
 12542                           
 12543                           ; BSR set to: 0
 12544  002EC2  0E01               	movlw	1
 12545                           
 12546                           ; BSR set to: 0
 12547  002EC4  0012               	return	
 12548  002EC6                     l430:
 12549                           
 12550                           ; BSR set to: 0
 12551                           ;memoryController.c: 74: if (a.start < a.end) {
 12552                           
 12553                           ; BSR set to: 0
 12554  002EC6  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12555  002EC8  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 12556  002ECA  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12557  002ECC  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12558  002ECE  B0D8               	btfsc	status,0,c
 12559  002ED0  D036               	goto	l434
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;memoryController.c: 75: if (b.start < b.end) {
 12563  002ED2  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 12564  002ED4  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 12565  002ED6  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 12566  002ED8  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12567  002EDA  B0D8               	btfsc	status,0,c
 12568  002EDC  D025               	goto	l435
 12569                           
 12570                           ; BSR set to: 0
 12571                           ;memoryController.c: 77: if (a.start < b.start) {
 12572  002EDE  517B               	movf	checkForOverlap@b& (0+255),w,b
 12573  002EE0  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 12574  002EE2  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 12575  002EE4  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 12576  002EE6  B0D8               	btfsc	status,0,c
 12577  002EE8  D00A               	goto	l436
 12578                           
 12579                           ; BSR set to: 0
 12580                           ;memoryController.c: 78: if (a.end > b.start) {
 12581  002EEA  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 12582  002EEC  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 12583  002EEE  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 12584  002EF0  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 12585  002EF2  B0D8               	btfsc	status,0,c
 12586  002EF4  D002               	goto	l437
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;memoryController.c: 79: return 1;
 12590  002EF6  0E01               	movlw	1
 12591                           
 12592                           ; BSR set to: 0
 12593                           ;memoryController.c: 80: }
 12594                           
 12595                           ; BSR set to: 0
 12596  002EF8  0012               	return	
 12597  002EFA                     l437:
 12598                           
 12599                           ; BSR set to: 0
 12600                           ;memoryController.c: 81: else {
 12601                           ;memoryController.c: 82: return 0;
 12602                           
 12603                           ; BSR set to: 0
 12604  002EFA  0E00               	movlw	0
 12605                           
 12606                           ; BSR set to: 0
 12607                           ;memoryController.c: 83: }
 12608                           ;memoryController.c: 84: }
 12609                           
 12610                           ; BSR set to: 0
 12611  002EFC  0012               	return	
 12612  002EFE                     l436:
 12613                           
 12614                           ; BSR set to: 0
 12615                           ;memoryController.c: 85: else {
 12616                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 12617                           
 12618                           ; BSR set to: 0
 12619  002EFE  EE20  F07B         	lfsr	2,checkForOverlap@b
 12620  002F02  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12621  002F06  0E08               	movlw	8
 12622  002F08                     u8031:
 12623  002F08  CFDB FFEB          	movff	plusw2,plusw0
 12624  002F0C  06E8               	decf	wreg,f,c
 12625  002F0E  E2FC               	bc	u8031
 12626  002F10  EE20  F072         	lfsr	2,checkForOverlap@a
 12627  002F14  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 12628  002F18  0E08               	movlw	8
 12629  002F1A                     u8041:
 12630  002F1A  CFDB FFEB          	movff	plusw2,plusw0
 12631  002F1E  06E8               	decf	wreg,f,c
 12632  002F20  E2FC               	bc	u8041
 12633  002F22  EC57  F019         	call	_checkForOverlapSwitched	;wreg free
 12634                           
 12635                           ;memoryController.c: 87: }
 12636                           ;memoryController.c: 88: }
 12637  002F26  0012               	return	
 12638  002F28                     l435:
 12639                           
 12640                           ;memoryController.c: 89: else {
 12641                           ;memoryController.c: 90: if (b.end < a.start)
 12642  002F28  0100               	movlb	0	; () banked
 12643  002F2A  5172               	movf	checkForOverlap@a& (0+255),w,b
 12644  002F2C  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 12645  002F2E  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 12646  002F30  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 12647  002F32  B0D8               	btfsc	status,0,c
 12648  002F34  D002               	goto	l441
 12649                           
 12650                           ; BSR set to: 0
 12651                           ;memoryController.c: 91: return 0;
 12652  002F36  0E00               	movlw	0
 12653                           
 12654                           ; BSR set to: 0
 12655                           
 12656                           ; BSR set to: 0
 12657  002F38  0012               	return	
 12658  002F3A                     l441:
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;memoryController.c: 92: else
 12662                           ;memoryController.c: 93: return 1;
 12663                           
 12664                           ; BSR set to: 0
 12665  002F3A  0E01               	movlw	1
 12666                           
 12667                           ; BSR set to: 0
 12668                           ;memoryController.c: 94: }
 12669                           ;memoryController.c: 95: }
 12670                           
 12671                           ; BSR set to: 0
 12672                           
 12673                           ; BSR set to: 0
 12674  002F3C  0012               	return	
 12675  002F3E                     l434:
 12676                           
 12677                           ; BSR set to: 0
 12678                           ;memoryController.c: 96: else {
 12679                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 12680                           
 12681                           ; BSR set to: 0
 12682  002F3E  EE20  F07B         	lfsr	2,checkForOverlap@b
 12683  002F42  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 12684  002F46  0E08               	movlw	8
 12685  002F48                     u8061:
 12686  002F48  CFDB FFEB          	movff	plusw2,plusw0
 12687  002F4C  06E8               	decf	wreg,f,c
 12688  002F4E  E2FC               	bc	u8061
 12689  002F50  EE20  F072         	lfsr	2,checkForOverlap@a
 12690  002F54  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 12691  002F58  0E08               	movlw	8
 12692  002F5A                     u8071:
 12693  002F5A  CFDB FFEB          	movff	plusw2,plusw0
 12694  002F5E  06E8               	decf	wreg,f,c
 12695  002F60  E2FC               	bc	u8071
 12696  002F62  EC57  F019         	call	_checkForOverlapSwitched	;wreg free
 12697  002F66  0012               	return	
 12698  002F68                     __end_of_checkForOverlap:
 12699                           	opt stack 0
 12700                           tblptru	equ	0xFF8
 12701                           tblptrh	equ	0xFF7
 12702                           tblptrl	equ	0xFF6
 12703                           tablat	equ	0xFF5
 12704                           prodh	equ	0xFF4
 12705                           prodl	equ	0xFF3
 12706                           intcon	equ	0xFF2
 12707                           intcon3	equ	0xFF0
 12708                           postinc0	equ	0xFEE
 12709                           plusw0	equ	0xFEB
 12710                           fsr0h	equ	0xFEA
 12711                           fsr0l	equ	0xFE9
 12712                           wreg	equ	0xFE8
 12713                           indf1	equ	0xFE7
 12714                           postinc1	equ	0xFE6
 12715                           postdec1	equ	0xFE5
 12716                           plusw1	equ	0xFE3
 12717                           fsr1h	equ	0xFE2
 12718                           fsr1l	equ	0xFE1
 12719                           indf2	equ	0xFDF
 12720                           postinc2	equ	0xFDE
 12721                           postdec2	equ	0xFDD
 12722                           plusw2	equ	0xFDB
 12723                           fsr2h	equ	0xFDA
 12724                           fsr2l	equ	0xFD9
 12725                           status	equ	0xFD8
 12726                           
 12727 ;; *************** function _checkForOverlapSwitched *****************
 12728 ;; Defined at:
 12729 ;;		line 101 in file "src/mem/memoryController.c"
 12730 ;; Parameters:    Size  Location     Type
 12731 ;;  a               9    0[BANK0 ] struct memoryField
 12732 ;;  b               9    9[BANK0 ] struct memoryField
 12733 ;; Auto vars:     Size  Location     Type
 12734 ;;		None
 12735 ;; Return value:  Size  Location     Type
 12736 ;;                  1    wreg      unsigned char 
 12737 ;; Registers used:
 12738 ;;		wreg, status,2, status,0
 12739 ;; Tracked objects:
 12740 ;;		On entry : 0/0
 12741 ;;		On exit  : 0/0
 12742 ;;		Unchanged: 0/0
 12743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12744 ;;      Params:         0      18       0       0       0       0       0       0       0
 12745 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12746 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12747 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12748 ;;Total ram usage:       18 bytes
 12749 ;; Hardware stack levels used:    1
 12750 ;; Hardware stack levels required when called:    4
 12751 ;; This function calls:
 12752 ;;		Nothing
 12753 ;; This function is called by:
 12754 ;;		_checkForOverlap
 12755 ;; This function uses a non-reentrant model
 12756 ;;
 12757                           
 12758                           	psect	text40
 12759  0032AE                     __ptext40:
 12760                           	opt stack 0
 12761  0032AE                     _checkForOverlapSwitched:
 12762                           	opt stack 22
 12763                           
 12764                           ;memoryController.c: 104: if ((a.start == b.start) ||
 12765                           ;memoryController.c: 105: (a.end == b.end) ||
 12766                           ;memoryController.c: 106: (a.start == b.end) ||
 12767                           ;memoryController.c: 107: (a.end == b.start) ||
 12768                           ;memoryController.c: 108: (a.end > 0x3000) ||
 12769                           ;memoryController.c: 109: (a.start > 0x3000) ||
 12770                           ;memoryController.c: 110: (b.end > 0x3000) ||
 12771                           ;memoryController.c: 111: (b.start > 0x3000))
 12772                           
 12773                           ;incstack = 0
 12774  0032AE  0100               	movlb	0	; () banked
 12775  0032B0  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12776  0032B2  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 12777  0032B4  E104               	bnz	u7720
 12778  0032B6  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12779  0032B8  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12780  0032BA  B4D8               	btfsc	status,2,c
 12781  0032BC  D029               	goto	u7790
 12782  0032BE                     u7720:
 12783                           
 12784                           ; BSR set to: 0
 12785  0032BE  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12786  0032C0  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12787  0032C2  E104               	bnz	u7730
 12788  0032C4  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12789  0032C6  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12790  0032C8  B4D8               	btfsc	status,2,c
 12791  0032CA  D022               	goto	u7790
 12792  0032CC                     u7730:
 12793                           
 12794                           ; BSR set to: 0
 12795  0032CC  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12796  0032CE  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12797  0032D0  E104               	bnz	u7740
 12798  0032D2  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12799  0032D4  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12800  0032D6  B4D8               	btfsc	status,2,c
 12801  0032D8  D01B               	goto	u7790
 12802  0032DA                     u7740:
 12803                           
 12804                           ; BSR set to: 0
 12805  0032DA  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12806  0032DC  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12807  0032DE  E104               	bnz	u7750
 12808  0032E0  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12809  0032E2  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12810  0032E4  B4D8               	btfsc	status,2,c
 12811  0032E6  D014               	goto	u7790
 12812  0032E8                     u7750:
 12813                           
 12814                           ; BSR set to: 0
 12815  0032E8  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12816  0032EA  0E30               	movlw	48
 12817  0032EC  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12818  0032EE  B0D8               	btfsc	status,0,c
 12819  0032F0  D00F               	goto	u7790
 12820                           
 12821                           ; BSR set to: 0
 12822  0032F2  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 12823  0032F4  0E30               	movlw	48
 12824  0032F6  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12825  0032F8  B0D8               	btfsc	status,0,c
 12826  0032FA  D00A               	goto	u7790
 12827                           
 12828                           ; BSR set to: 0
 12829  0032FC  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12830  0032FE  0E30               	movlw	48
 12831  003300  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12832  003302  B0D8               	btfsc	status,0,c
 12833  003304  D005               	goto	u7790
 12834                           
 12835                           ; BSR set to: 0
 12836  003306  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 12837  003308  0E30               	movlw	48
 12838  00330A  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12839  00330C  A0D8               	btfss	status,0,c
 12840  00330E  D002               	goto	l446
 12841  003310                     u7790:
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;memoryController.c: 112: return 1;
 12845                           
 12846                           ; BSR set to: 0
 12847  003310  0E01               	movlw	1
 12848                           
 12849                           ; BSR set to: 0
 12850  003312  0012               	return	
 12851  003314                     l446:
 12852                           
 12853                           ; BSR set to: 0
 12854                           ;memoryController.c: 115: if (a.start < a.end) {
 12855                           
 12856                           ; BSR set to: 0
 12857  003314  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12858  003316  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12859  003318  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12860  00331A  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12861  00331C  B0D8               	btfsc	status,0,c
 12862  00331E  0012               	return	
 12863                           
 12864                           ; BSR set to: 0
 12865                           ;memoryController.c: 116: if (b.start < b.end) {
 12866  003320  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12867  003322  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12868  003324  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12869  003326  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12870  003328  B0D8               	btfsc	status,0,c
 12871  00332A  D010               	goto	l451
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;memoryController.c: 118: if (a.start < b.start) {
 12875  00332C  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 12876  00332E  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 12877  003330  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12878  003332  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12879  003334  B0D8               	btfsc	status,0,c
 12880  003336  0012               	return	
 12881                           
 12882                           ; BSR set to: 0
 12883                           ;memoryController.c: 119: if (a.end > b.start) {
 12884  003338  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 12885  00333A  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 12886  00333C  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 12887  00333E  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 12888  003340  B0D8               	btfsc	status,0,c
 12889  003342  D002               	goto	l453
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;memoryController.c: 120: return 1;
 12893  003344  0E01               	movlw	1
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;memoryController.c: 121: }
 12897                           
 12898                           ; BSR set to: 0
 12899  003346  0012               	return	
 12900  003348                     l453:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;memoryController.c: 122: else {
 12904                           ;memoryController.c: 123: return 0;
 12905                           
 12906                           ; BSR set to: 0
 12907  003348  0E00               	movlw	0
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;memoryController.c: 124: }
 12911                           ;memoryController.c: 125: }
 12912                           ;memoryController.c: 126: }
 12913                           
 12914                           ; BSR set to: 0
 12915                           
 12916                           ; BSR set to: 0
 12917  00334A  0012               	return	
 12918  00334C                     l451:
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;memoryController.c: 127: else {
 12922                           ;memoryController.c: 128: if (b.end < a.start)
 12923                           
 12924                           ; BSR set to: 0
 12925  00334C  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 12926  00334E  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 12927  003350  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 12928  003352  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 12929  003354  B0D8               	btfsc	status,0,c
 12930  003356  D002               	goto	l456
 12931                           
 12932                           ; BSR set to: 0
 12933                           ;memoryController.c: 129: return 0;
 12934  003358  0E00               	movlw	0
 12935                           
 12936                           ; BSR set to: 0
 12937                           
 12938                           ; BSR set to: 0
 12939  00335A  0012               	return	
 12940  00335C                     l456:
 12941                           
 12942                           ; BSR set to: 0
 12943                           ;memoryController.c: 130: else
 12944                           ;memoryController.c: 131: return 1;
 12945                           
 12946                           ; BSR set to: 0
 12947  00335C  0E01               	movlw	1
 12948                           
 12949                           ; BSR set to: 0
 12950                           
 12951                           ; BSR set to: 0
 12952                           
 12953                           ; BSR set to: 0
 12954  00335E  0012               	return	
 12955  003360                     __end_of_checkForOverlapSwitched:
 12956                           	opt stack 0
 12957                           tblptru	equ	0xFF8
 12958                           tblptrh	equ	0xFF7
 12959                           tblptrl	equ	0xFF6
 12960                           tablat	equ	0xFF5
 12961                           prodh	equ	0xFF4
 12962                           prodl	equ	0xFF3
 12963                           intcon	equ	0xFF2
 12964                           intcon3	equ	0xFF0
 12965                           postinc0	equ	0xFEE
 12966                           plusw0	equ	0xFEB
 12967                           fsr0h	equ	0xFEA
 12968                           fsr0l	equ	0xFE9
 12969                           wreg	equ	0xFE8
 12970                           indf1	equ	0xFE7
 12971                           postinc1	equ	0xFE6
 12972                           postdec1	equ	0xFE5
 12973                           plusw1	equ	0xFE3
 12974                           fsr1h	equ	0xFE2
 12975                           fsr1l	equ	0xFE1
 12976                           indf2	equ	0xFDF
 12977                           postinc2	equ	0xFDE
 12978                           postdec2	equ	0xFDD
 12979                           plusw2	equ	0xFDB
 12980                           fsr2h	equ	0xFDA
 12981                           fsr2l	equ	0xFD9
 12982                           status	equ	0xFD8
 12983                           
 12984 ;; *************** function ___wmul *****************
 12985 ;; Defined at:
 12986 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;  multiplier      2    0[BANK0 ] unsigned int 
 12989 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 12990 ;; Auto vars:     Size  Location     Type
 12991 ;;  product         2    4[BANK0 ] unsigned int 
 12992 ;; Return value:  Size  Location     Type
 12993 ;;                  2    0[BANK0 ] unsigned int 
 12994 ;; Registers used:
 12995 ;;		wreg, status,2, status,0, prodl, prodh
 12996 ;; Tracked objects:
 12997 ;;		On entry : 0/0
 12998 ;;		On exit  : 0/0
 12999 ;;		Unchanged: 0/0
 13000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13001 ;;      Params:         0       4       0       0       0       0       0       0       0
 13002 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13003 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13004 ;;      Totals:         0       6       0       0       0       0       0       0       0
 13005 ;;Total ram usage:        6 bytes
 13006 ;; Hardware stack levels used:    1
 13007 ;; Hardware stack levels required when called:    4
 13008 ;; This function calls:
 13009 ;;		Nothing
 13010 ;; This function is called by:
 13011 ;;		_memory_txFrameRequest
 13012 ;;		_intToString
 13013 ;; This function uses a non-reentrant model
 13014 ;;
 13015                           
 13016                           	psect	text41
 13017  004458                     __ptext41:
 13018                           	opt stack 0
 13019  004458                     ___wmul:
 13020                           	opt stack 24
 13021                           
 13022                           ; BSR set to: 0
 13023                           ;incstack = 0
 13024  004458  0100               	movlb	0	; () banked
 13025  00445A  5160               	movf	___wmul@multiplier& (0+255),w,b
 13026  00445C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 13027  00445E  CFF3 F064          	movff	prodl,___wmul@product
 13028  004462  CFF4 F065          	movff	prodh,___wmul@product+1
 13029  004466  5160               	movf	___wmul@multiplier& (0+255),w,b
 13030  004468  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 13031  00446A  50F3               	movf	prodl,w,c
 13032  00446C  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 13033  00446E  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 13034  004470  0362               	mulwf	___wmul@multiplicand& (0+255),b
 13035  004472  50F3               	movf	prodl,w,c
 13036  004474  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 13037                           
 13038                           ; BSR set to: 0
 13039  004476  C064  F060         	movff	___wmul@product,?___wmul
 13040  00447A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 13041  00447E  0012               	return	
 13042  004480                     __end_of___wmul:
 13043                           	opt stack 0
 13044                           tblptru	equ	0xFF8
 13045                           tblptrh	equ	0xFF7
 13046                           tblptrl	equ	0xFF6
 13047                           tablat	equ	0xFF5
 13048                           prodh	equ	0xFF4
 13049                           prodl	equ	0xFF3
 13050                           intcon	equ	0xFF2
 13051                           intcon3	equ	0xFF0
 13052                           postinc0	equ	0xFEE
 13053                           plusw0	equ	0xFEB
 13054                           fsr0h	equ	0xFEA
 13055                           fsr0l	equ	0xFE9
 13056                           wreg	equ	0xFE8
 13057                           indf1	equ	0xFE7
 13058                           postinc1	equ	0xFE6
 13059                           postdec1	equ	0xFE5
 13060                           plusw1	equ	0xFE3
 13061                           fsr1h	equ	0xFE2
 13062                           fsr1l	equ	0xFE1
 13063                           indf2	equ	0xFDF
 13064                           postinc2	equ	0xFDE
 13065                           postdec2	equ	0xFDD
 13066                           plusw2	equ	0xFDB
 13067                           fsr2h	equ	0xFDA
 13068                           fsr2l	equ	0xFD9
 13069                           status	equ	0xFD8
 13070                           
 13071 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 13072 ;; Defined at:
 13073 ;;		line 244 in file "src/enc424j600/ENC424J600.c"
 13074 ;; Parameters:    Size  Location     Type
 13075 ;;  ethtype         2   15[BANK0 ] enum E5498
 13076 ;;  field           9   17[BANK0 ] struct memoryField
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  opcode          1   28[BANK0 ] unsigned char 
 13079 ;;  highByte        1   27[BANK0 ] unsigned char 
 13080 ;;  lowByte         1   26[BANK0 ] unsigned char 
 13081 ;; Return value:  Size  Location     Type
 13082 ;;                  1    wreg      void 
 13083 ;; Registers used:
 13084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13085 ;; Tracked objects:
 13086 ;;		On entry : 0/0
 13087 ;;		On exit  : 0/0
 13088 ;;		Unchanged: 0/0
 13089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13090 ;;      Params:         0      11       0       0       0       0       0       0       0
 13091 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13092 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13093 ;;      Totals:         0      14       0       0       0       0       0       0       0
 13094 ;;Total ram usage:       14 bytes
 13095 ;; Hardware stack levels used:    1
 13096 ;; Hardware stack levels required when called:    7
 13097 ;; This function calls:
 13098 ;;		_ENC424J600_setGPDATAWritePointer
 13099 ;;		_ENC424J600_writeSPI
 13100 ;; This function is called by:
 13101 ;;		_ethernet_txFrameRequest
 13102 ;; This function uses a non-reentrant model
 13103 ;;
 13104                           
 13105                           	psect	text42
 13106  003F5E                     __ptext42:
 13107                           	opt stack 0
 13108  003F5E                     _ethernetController_writeEtherTypeFieldToBuffer:
 13109                           	opt stack 21
 13110                           
 13111                           ;ENC424J600.c: 245: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 13112                           
 13113                           ; BSR set to: 0
 13114                           ;incstack = 0
 13115  003F5E  0E06               	movlw	6
 13116  003F60  0100               	movlb	0	; () banked
 13117  003F62  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 13118  003F64  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 13119  003F66  0E00               	movlw	0
 13120  003F68  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 13121  003F6A  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 13122  003F6C  ECE7  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13123                           
 13124                           ;ENC424J600.c: 246: uint8_t lowByte = ethtype & 0x00ff;
 13125  003F70  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 13126                           
 13127                           ;ENC424J600.c: 247: uint8_t highByte = (ethtype & 0xff00) >> 8;
 13128  003F74  0100               	movlb	0	; () banked
 13129  003F76  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 13130  003F78  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 13131                           
 13132                           ; BSR set to: 0
 13133                           ;ENC424J600.c: 248: uint8_t opcode = 0x2A;
 13134  003F7A  0E2A               	movlw	42
 13135  003F7C  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 13136                           
 13137                           ; BSR set to: 0
 13138                           ;ENC424J600.c: 249: PORTBbits.RB4=0;
 13139  003F7E  9881               	bcf	3969,4,c	;volatile
 13140                           
 13141                           ;ENC424J600.c: 250: ENC424J600_writeSPI(&opcode);
 13142  003F80  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 13143  003F82  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13144  003F84  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 13145  003F86  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13146  003F88  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13147                           
 13148                           ;ENC424J600.c: 251: ENC424J600_writeSPI(&highByte);
 13149  003F8C  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 13150  003F8E  0100               	movlb	0	; () banked
 13151  003F90  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13152  003F92  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 13153  003F94  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13154  003F96  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13155                           
 13156                           ;ENC424J600.c: 252: ENC424J600_writeSPI(&lowByte);
 13157  003F9A  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13158  003F9C  0100               	movlb	0	; () banked
 13159  003F9E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13160  003FA0  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 13161  003FA2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13162  003FA4  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13163                           
 13164                           ;ENC424J600.c: 253: PORTBbits.RB4=1;
 13165  003FA8  8881               	bsf	3969,4,c	;volatile
 13166  003FAA  0012               	return		;funcret
 13167  003FAC                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 13168                           	opt stack 0
 13169                           tblptru	equ	0xFF8
 13170                           tblptrh	equ	0xFF7
 13171                           tblptrl	equ	0xFF6
 13172                           tablat	equ	0xFF5
 13173                           prodh	equ	0xFF4
 13174                           prodl	equ	0xFF3
 13175                           intcon	equ	0xFF2
 13176                           intcon3	equ	0xFF0
 13177                           postinc0	equ	0xFEE
 13178                           plusw0	equ	0xFEB
 13179                           fsr0h	equ	0xFEA
 13180                           fsr0l	equ	0xFE9
 13181                           wreg	equ	0xFE8
 13182                           indf1	equ	0xFE7
 13183                           postinc1	equ	0xFE6
 13184                           postdec1	equ	0xFE5
 13185                           plusw1	equ	0xFE3
 13186                           fsr1h	equ	0xFE2
 13187                           fsr1l	equ	0xFE1
 13188                           indf2	equ	0xFDF
 13189                           postinc2	equ	0xFDE
 13190                           postdec2	equ	0xFDD
 13191                           plusw2	equ	0xFDB
 13192                           fsr2h	equ	0xFDA
 13193                           fsr2l	equ	0xFD9
 13194                           status	equ	0xFD8
 13195                           
 13196 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 13197 ;; Defined at:
 13198 ;;		line 231 in file "src/enc424j600/ENC424J600.c"
 13199 ;; Parameters:    Size  Location     Type
 13200 ;;  addr            6   15[BANK0 ] struct macaddress
 13201 ;;  field           9   21[BANK0 ] struct memoryField
 13202 ;; Auto vars:     Size  Location     Type
 13203 ;;  i               1   37[BANK0 ] unsigned char 
 13204 ;;  i               1   38[BANK0 ] unsigned char 
 13205 ;;  data            6   30[BANK0 ] unsigned char [6]
 13206 ;;  opcode          1   36[BANK0 ] unsigned char 
 13207 ;; Return value:  Size  Location     Type
 13208 ;;                  1    wreg      void 
 13209 ;; Registers used:
 13210 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13211 ;; Tracked objects:
 13212 ;;		On entry : 0/0
 13213 ;;		On exit  : 0/0
 13214 ;;		Unchanged: 0/0
 13215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13216 ;;      Params:         0      15       0       0       0       0       0       0       0
 13217 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13218 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13219 ;;      Totals:         0      24       0       0       0       0       0       0       0
 13220 ;;Total ram usage:       24 bytes
 13221 ;; Hardware stack levels used:    1
 13222 ;; Hardware stack levels required when called:    7
 13223 ;; This function calls:
 13224 ;;		_ENC424J600_setGPDATAWritePointer
 13225 ;;		_ENC424J600_writeSPI
 13226 ;; This function is called by:
 13227 ;;		_ethernet_txFrameRequest
 13228 ;;		_ipv4_sendFrame
 13229 ;; This function uses a non-reentrant model
 13230 ;;
 13231                           
 13232                           	psect	text43
 13233  00389C                     __ptext43:
 13234                           	opt stack 0
 13235  00389C                     _ethernetController_writeDestinationMACAddress:
 13236                           	opt stack 21
 13237                           
 13238                           ;ENC424J600.c: 232: ENC424J600_setGPDATAWritePointer(field.start);
 13239                           
 13240                           ;incstack = 0
 13241  00389C  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 13242  0038A0  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 13243  0038A4  ECE7  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13244                           
 13245                           ;ENC424J600.c: 233: uint8_t data[6];
 13246                           ;ENC424J600.c: 234: for (uint8_t i = 0; i < 6; i++)
 13247  0038A8  0E00               	movlw	0
 13248  0038AA  0100               	movlb	0	; () banked
 13249  0038AC  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13250  0038AE                     l6939:
 13251                           
 13252                           ; BSR set to: 0
 13253  0038AE  0E05               	movlw	5
 13254  0038B0  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 13255  0038B2  D001               	goto	l138
 13256  0038B4  D014               	goto	u8090
 13257  0038B6                     l138:
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;ENC424J600.c: 235: data[i] = addr.address[i];
 13261                           
 13262                           ; BSR set to: 0
 13263  0038B6  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13264  0038B8  0D01               	mullw	1
 13265  0038BA  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 13266  0038BC  24F3               	addwf	prodl,w,c
 13267  0038BE  6ED9               	movwf	fsr2l,c
 13268  0038C0  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 13269  0038C2  20F4               	addwfc	prodh,w,c
 13270  0038C4  6EDA               	movwf	fsr2h,c
 13271  0038C6  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 13272  0038C8  0D01               	mullw	1
 13273  0038CA  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 13274  0038CC  24F3               	addwf	prodl,w,c
 13275  0038CE  6EE1               	movwf	fsr1l,c
 13276  0038D0  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13277  0038D2  20F4               	addwfc	prodh,w,c
 13278  0038D4  6EE2               	movwf	fsr1h,c
 13279  0038D6  CFDF FFE7          	movff	indf2,indf1
 13280                           
 13281                           ; BSR set to: 0
 13282  0038DA  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 13283  0038DC  D7E8               	goto	l6939
 13284  0038DE                     u8090:
 13285                           
 13286                           ; BSR set to: 0
 13287                           ;ENC424J600.c: 236: uint8_t opcode = 0x2A;
 13288                           
 13289                           ; BSR set to: 0
 13290  0038DE  0E2A               	movlw	42
 13291  0038E0  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 13292                           
 13293                           ; BSR set to: 0
 13294                           ;ENC424J600.c: 237: PORTBbits.RB4=0;
 13295  0038E2  9881               	bcf	3969,4,c	;volatile
 13296                           
 13297                           ; BSR set to: 0
 13298                           ;ENC424J600.c: 238: ENC424J600_writeSPI(&opcode);
 13299  0038E4  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 13300  0038E6  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13301  0038E8  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 13302  0038EA  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13303  0038EC  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13304                           
 13305                           ;ENC424J600.c: 239: for (uint8_t i = 0; i < 6; i++)
 13306  0038F0  0E00               	movlw	0
 13307  0038F2  0100               	movlb	0	; () banked
 13308  0038F4  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 13309  0038F6                     l6957:
 13310                           
 13311                           ; BSR set to: 0
 13312  0038F6  0E05               	movlw	5
 13313  0038F8  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 13314  0038FA  D001               	goto	l140
 13315  0038FC  D00D               	goto	u8110
 13316  0038FE                     l140:
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;ENC424J600.c: 240: ENC424J600_writeSPI(&data[i]);
 13320                           
 13321                           ; BSR set to: 0
 13322  0038FE  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 13323  003900  0D01               	mullw	1
 13324  003902  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 13325  003904  24F3               	addwf	prodl,w,c
 13326  003906  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13327  003908  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 13328  00390A  20F4               	addwfc	prodh,w,c
 13329  00390C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13330  00390E  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13331  003912  0100               	movlb	0	; () banked
 13332  003914  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 13333  003916  D7EF               	goto	l6957
 13334  003918                     u8110:
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;ENC424J600.c: 241: PORTBbits.RB4=1;
 13338  003918  8881               	bsf	3969,4,c	;volatile
 13339                           
 13340                           ; BSR set to: 0
 13341  00391A  0012               	return		;funcret
 13342  00391C                     __end_of_ethernetController_writeDestinationMACAddress:
 13343                           	opt stack 0
 13344                           tblptru	equ	0xFF8
 13345                           tblptrh	equ	0xFF7
 13346                           tblptrl	equ	0xFF6
 13347                           tablat	equ	0xFF5
 13348                           prodh	equ	0xFF4
 13349                           prodl	equ	0xFF3
 13350                           intcon	equ	0xFF2
 13351                           intcon3	equ	0xFF0
 13352                           postinc0	equ	0xFEE
 13353                           plusw0	equ	0xFEB
 13354                           fsr0h	equ	0xFEA
 13355                           fsr0l	equ	0xFE9
 13356                           wreg	equ	0xFE8
 13357                           indf1	equ	0xFE7
 13358                           postinc1	equ	0xFE6
 13359                           postdec1	equ	0xFE5
 13360                           plusw1	equ	0xFE3
 13361                           fsr1h	equ	0xFE2
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           postdec2	equ	0xFDD
 13366                           plusw2	equ	0xFDB
 13367                           fsr2h	equ	0xFDA
 13368                           fsr2l	equ	0xFD9
 13369                           status	equ	0xFD8
 13370                           
 13371 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 13372 ;; Defined at:
 13373 ;;		line 211 in file "src/enc424j600/ENC424J600.c"
 13374 ;; Parameters:    Size  Location     Type
 13375 ;;  data            1    wreg     unsigned char 
 13376 ;;  field           9   15[BANK0 ] struct memoryField
 13377 ;; Auto vars:     Size  Location     Type
 13378 ;;  data            1   28[BANK0 ] unsigned char 
 13379 ;;  opcode          1   29[BANK0 ] unsigned char 
 13380 ;; Return value:  Size  Location     Type
 13381 ;;                  1    wreg      void 
 13382 ;; Registers used:
 13383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13384 ;; Tracked objects:
 13385 ;;		On entry : 0/0
 13386 ;;		On exit  : 0/0
 13387 ;;		Unchanged: 0/0
 13388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13389 ;;      Params:         0       9       0       0       0       0       0       0       0
 13390 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13391 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13392 ;;      Totals:         0      15       0       0       0       0       0       0       0
 13393 ;;Total ram usage:       15 bytes
 13394 ;; Hardware stack levels used:    1
 13395 ;; Hardware stack levels required when called:    7
 13396 ;; This function calls:
 13397 ;;		_ENC424J600_setGPDATAWritePointer
 13398 ;;		_ENC424J600_writeSPI
 13399 ;; This function is called by:
 13400 ;;		_ARP_send
 13401 ;; This function uses a non-reentrant model
 13402 ;;
 13403                           
 13404                           	psect	text44
 13405  003A14                     __ptext44:
 13406                           	opt stack 0
 13407  003A14                     _ethernetController_streamToTransmitBuffer:
 13408                           	opt stack 19
 13409                           
 13410                           ; BSR set to: 0
 13411                           ;incstack = 0
 13412                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 13413  003A14  0100               	movlb	0	; () banked
 13414  003A16  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 13415                           
 13416                           ;ENC424J600.c: 212: uint8_t opcode;
 13417                           ;ENC424J600.c: 213: uint16_t static pointer = 0;
 13418                           ;ENC424J600.c: 214: if (pointer == 0) {
 13419  003A18  5043               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13420  003A1A  1044               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13421  003A1C  A4D8               	btfss	status,2,c
 13422  003A1E  D010               	goto	l132
 13423                           
 13424                           ;ENC424J600.c: 215: ENC424J600_setGPDATAWritePointer(field.start);
 13425  003A20  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,ENC424J600_setGPDATAWritePointer@
      +                          addr
 13426  003A24  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,ENC424J600_setGPDATAWritePointe
      +                          r@addr+1
 13427  003A28  ECE7  F020         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 13428                           
 13429                           ;ENC424J600.c: 216: opcode = 0x2A;
 13430  003A2C  0E2A               	movlw	42
 13431  003A2E  0100               	movlb	0	; () banked
 13432  003A30  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;ENC424J600.c: 217: PORTBbits.RB4=0;
 13436  003A32  9881               	bcf	3969,4,c	;volatile
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;ENC424J600.c: 218: ENC424J600_writeSPI(&opcode);
 13440  003A34  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 13441  003A36  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13442  003A38  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 13443  003A3A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13444  003A3C  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13445  003A40                     l132:
 13446                           
 13447                           ;ENC424J600.c: 219: }
 13448                           ;ENC424J600.c: 221: ENC424J600_writeSPI(&data);
 13449  003A40  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 13450  003A42  0100               	movlb	0	; () banked
 13451  003A44  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13452  003A46  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 13453  003A48  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13454  003A4A  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13455                           
 13456                           ;ENC424J600.c: 223: if (pointer == field.length - 1) {
 13457  003A4E  0EFF               	movlw	255
 13458  003A50  0100               	movlb	0	; () banked
 13459  003A52  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 13460  003A54  0EFF               	movlw	255
 13461  003A56  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 13462  003A58  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 13463  003A5C  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 13464  003A60  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 13465  003A64  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 13466  003A66  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 13467  003A68  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 13468  003A6A  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 13469  003A6C  5043               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 13470  003A6E  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 13471  003A70  E10A               	bnz	l7185
 13472  003A72  5044               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 13473  003A74  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 13474  003A76  A4D8               	btfss	status,2,c
 13475  003A78  D006               	goto	l133
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;ENC424J600.c: 224: PORTBbits.RB4=1;
 13479  003A7A  8881               	bsf	3969,4,c	;volatile
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;ENC424J600.c: 225: pointer = 0;
 13483  003A7C  0E00               	movlw	0
 13484  003A7E  6E44               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 13485  003A80  0E00               	movlw	0
 13486  003A82  6E43               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 13487                           
 13488                           ;ENC424J600.c: 226: } else {
 13489  003A84  0012               	return	
 13490  003A86                     l133:
 13491  003A86                     l7185:
 13492                           
 13493                           ; BSR set to: 0
 13494                           ;ENC424J600.c: 227: pointer++;
 13495  003A86  4A43               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 13496  003A88  2A44               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 13497  003A8A  0012               	return	
 13498  003A8C                     __end_of_ethernetController_streamToTransmitBuffer:
 13499                           	opt stack 0
 13500                           tblptru	equ	0xFF8
 13501                           tblptrh	equ	0xFF7
 13502                           tblptrl	equ	0xFF6
 13503                           tablat	equ	0xFF5
 13504                           prodh	equ	0xFF4
 13505                           prodl	equ	0xFF3
 13506                           intcon	equ	0xFF2
 13507                           intcon3	equ	0xFF0
 13508                           postinc0	equ	0xFEE
 13509                           plusw0	equ	0xFEB
 13510                           fsr0h	equ	0xFEA
 13511                           fsr0l	equ	0xFE9
 13512                           wreg	equ	0xFE8
 13513                           indf1	equ	0xFE7
 13514                           postinc1	equ	0xFE6
 13515                           postdec1	equ	0xFE5
 13516                           plusw1	equ	0xFE3
 13517                           fsr1h	equ	0xFE2
 13518                           fsr1l	equ	0xFE1
 13519                           indf2	equ	0xFDF
 13520                           postinc2	equ	0xFDE
 13521                           postdec2	equ	0xFDD
 13522                           plusw2	equ	0xFDB
 13523                           fsr2h	equ	0xFDA
 13524                           fsr2l	equ	0xFD9
 13525                           status	equ	0xFD8
 13526                           
 13527 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 13528 ;; Defined at:
 13529 ;;		line 648 in file "src/enc424j600/ENC424J600.c"
 13530 ;; Parameters:    Size  Location     Type
 13531 ;;  addr            2   10[BANK0 ] unsigned int 
 13532 ;; Auto vars:     Size  Location     Type
 13533 ;;  highByte        1   14[BANK0 ] unsigned char 
 13534 ;;  lowByte         1   13[BANK0 ] unsigned char 
 13535 ;;  opcode          1   12[BANK0 ] unsigned char 
 13536 ;; Return value:  Size  Location     Type
 13537 ;;                  1    wreg      void 
 13538 ;; Registers used:
 13539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13540 ;; Tracked objects:
 13541 ;;		On entry : 0/0
 13542 ;;		On exit  : 0/0
 13543 ;;		Unchanged: 0/0
 13544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13545 ;;      Params:         0       2       0       0       0       0       0       0       0
 13546 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13547 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13548 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13549 ;;Total ram usage:        5 bytes
 13550 ;; Hardware stack levels used:    1
 13551 ;; Hardware stack levels required when called:    6
 13552 ;; This function calls:
 13553 ;;		_ENC424J600_writeSPI
 13554 ;; This function is called by:
 13555 ;;		_ethernetController_streamToTransmitBuffer
 13556 ;;		_ethernetController_writeDestinationMACAddress
 13557 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 13558 ;; This function uses a non-reentrant model
 13559 ;;
 13560                           
 13561                           	psect	text45
 13562  0041CE                     __ptext45:
 13563                           	opt stack 0
 13564  0041CE                     _ENC424J600_setGPDATAWritePointer:
 13565                           	opt stack 21
 13566                           
 13567                           ;ENC424J600.c: 649: uint8_t opcode = 0x6C;
 13568                           
 13569                           ; BSR set to: 0
 13570                           ;incstack = 0
 13571  0041CE  0E6C               	movlw	108
 13572  0041D0  0100               	movlb	0	; () banked
 13573  0041D2  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 13574                           
 13575                           ; BSR set to: 0
 13576                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 13577  0041D4  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 13578                           
 13579                           ;ENC424J600.c: 651: uint8_t highByte = (addr & 0xff00) >> 8;
 13580  0041D8  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 13581  0041DA  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 13582                           
 13583                           ; BSR set to: 0
 13584                           ;ENC424J600.c: 652: PORTBbits.RB4=0;
 13585  0041DC  9881               	bcf	3969,4,c	;volatile
 13586                           
 13587                           ; BSR set to: 0
 13588                           ;ENC424J600.c: 653: ENC424J600_writeSPI(&opcode);
 13589  0041DE  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 13590  0041E0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13591  0041E2  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 13592  0041E4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13593  0041E6  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13594                           
 13595                           ;ENC424J600.c: 654: ENC424J600_writeSPI(&lowByte);
 13596  0041EA  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 13597  0041EC  0100               	movlb	0	; () banked
 13598  0041EE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13599  0041F0  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 13600  0041F2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13601  0041F4  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13602                           
 13603                           ;ENC424J600.c: 655: ENC424J600_writeSPI(&highByte);
 13604  0041F8  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 13605  0041FA  0100               	movlb	0	; () banked
 13606  0041FC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 13607  0041FE  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 13608  004200  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 13609  004202  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 13610                           
 13611                           ;ENC424J600.c: 656: PORTBbits.RB4=1;
 13612  004206  8881               	bsf	3969,4,c	;volatile
 13613  004208  0012               	return		;funcret
 13614  00420A                     __end_of_ENC424J600_setGPDATAWritePointer:
 13615                           	opt stack 0
 13616                           tblptru	equ	0xFF8
 13617                           tblptrh	equ	0xFF7
 13618                           tblptrl	equ	0xFF6
 13619                           tablat	equ	0xFF5
 13620                           prodh	equ	0xFF4
 13621                           prodl	equ	0xFF3
 13622                           intcon	equ	0xFF2
 13623                           intcon3	equ	0xFF0
 13624                           postinc0	equ	0xFEE
 13625                           plusw0	equ	0xFEB
 13626                           fsr0h	equ	0xFEA
 13627                           fsr0l	equ	0xFE9
 13628                           wreg	equ	0xFE8
 13629                           indf1	equ	0xFE7
 13630                           postinc1	equ	0xFE6
 13631                           postdec1	equ	0xFE5
 13632                           plusw1	equ	0xFE3
 13633                           fsr1h	equ	0xFE2
 13634                           fsr1l	equ	0xFE1
 13635                           indf2	equ	0xFDF
 13636                           postinc2	equ	0xFDE
 13637                           postdec2	equ	0xFDD
 13638                           plusw2	equ	0xFDB
 13639                           fsr2h	equ	0xFDA
 13640                           fsr2l	equ	0xFD9
 13641                           status	equ	0xFD8
 13642                           
 13643 ;; *************** function _ethernetController_sendPacket *****************
 13644 ;; Defined at:
 13645 ;;		line 204 in file "src/enc424j600/ENC424J600.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  field           9   18[BANK0 ] struct memoryField
 13648 ;; Auto vars:     Size  Location     Type
 13649 ;;		None
 13650 ;; Return value:  Size  Location     Type
 13651 ;;                  1    wreg      void 
 13652 ;; Registers used:
 13653 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13654 ;; Tracked objects:
 13655 ;;		On entry : 0/0
 13656 ;;		On exit  : 0/0
 13657 ;;		Unchanged: 0/0
 13658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13659 ;;      Params:         0       9       0       0       0       0       0       0       0
 13660 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13661 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13662 ;;      Totals:         0       9       0       0       0       0       0       0       0
 13663 ;;Total ram usage:        9 bytes
 13664 ;; Hardware stack levels used:    1
 13665 ;; Hardware stack levels required when called:    8
 13666 ;; This function calls:
 13667 ;;		_ENC424J600_setTXLength
 13668 ;;		_ENC424J600_setTXStartAddress
 13669 ;;		_ENC424J600_writeSingleByte
 13670 ;;		_memory_txFrameClear
 13671 ;; This function is called by:
 13672 ;;		_ARP_send
 13673 ;;		_ipv4_sendFrame
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text46
 13678  004480                     __ptext46:
 13679                           	opt stack 0
 13680  004480                     _ethernetController_sendPacket:
 13681                           	opt stack 20
 13682                           
 13683                           ;ENC424J600.c: 205: ENC424J600_setTXStartAddress(field.start);
 13684                           
 13685                           ;incstack = 0
 13686  004480  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 13687  004484  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 13688  004488  ECD8  F021         	call	_ENC424J600_setTXStartAddress	;wreg free
 13689                           
 13690                           ;ENC424J600.c: 206: ENC424J600_setTXLength(field.length);
 13691  00448C  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 13692  004490  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 13693  004494  ECED  F021         	call	_ENC424J600_setTXLength	;wreg free
 13694                           
 13695                           ;ENC424J600.c: 207: ENC424J600_writeSingleByte(0b11010100);
 13696  004498  0ED4               	movlw	212
 13697  00449A  EC38  F023         	call	_ENC424J600_writeSingleByte
 13698                           
 13699                           ;ENC424J600.c: 208: memory_txFrameClear(field.index);
 13700  00449E  0100               	movlb	0	; () banked
 13701  0044A0  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 13702  0044A2  ECA1  F022         	call	_memory_txFrameClear
 13703  0044A6  0012               	return		;funcret
 13704  0044A8                     __end_of_ethernetController_sendPacket:
 13705                           	opt stack 0
 13706                           tblptru	equ	0xFF8
 13707                           tblptrh	equ	0xFF7
 13708                           tblptrl	equ	0xFF6
 13709                           tablat	equ	0xFF5
 13710                           prodh	equ	0xFF4
 13711                           prodl	equ	0xFF3
 13712                           intcon	equ	0xFF2
 13713                           intcon3	equ	0xFF0
 13714                           postinc0	equ	0xFEE
 13715                           plusw0	equ	0xFEB
 13716                           fsr0h	equ	0xFEA
 13717                           fsr0l	equ	0xFE9
 13718                           wreg	equ	0xFE8
 13719                           indf1	equ	0xFE7
 13720                           postinc1	equ	0xFE6
 13721                           postdec1	equ	0xFE5
 13722                           plusw1	equ	0xFE3
 13723                           fsr1h	equ	0xFE2
 13724                           fsr1l	equ	0xFE1
 13725                           indf2	equ	0xFDF
 13726                           postinc2	equ	0xFDE
 13727                           postdec2	equ	0xFDD
 13728                           plusw2	equ	0xFDB
 13729                           fsr2h	equ	0xFDA
 13730                           fsr2l	equ	0xFD9
 13731                           status	equ	0xFD8
 13732                           
 13733 ;; *************** function _memory_txFrameClear *****************
 13734 ;; Defined at:
 13735 ;;		line 224 in file "src/mem/memoryController.c"
 13736 ;; Parameters:    Size  Location     Type
 13737 ;;  index           1    wreg     unsigned char 
 13738 ;; Auto vars:     Size  Location     Type
 13739 ;;  index           1    0[BANK0 ] unsigned char 
 13740 ;; Return value:  Size  Location     Type
 13741 ;;                  1    wreg      void 
 13742 ;; Registers used:
 13743 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13744 ;; Tracked objects:
 13745 ;;		On entry : 0/0
 13746 ;;		On exit  : 0/0
 13747 ;;		Unchanged: 0/0
 13748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13749 ;;      Params:         0       0       0       0       0       0       0       0       0
 13750 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13751 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13752 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13753 ;;Total ram usage:        1 bytes
 13754 ;; Hardware stack levels used:    1
 13755 ;; Hardware stack levels required when called:    4
 13756 ;; This function calls:
 13757 ;;		Nothing
 13758 ;; This function is called by:
 13759 ;;		_ethernetController_sendPacket
 13760 ;; This function uses a non-reentrant model
 13761 ;;
 13762                           
 13763                           	psect	text47
 13764  004542                     __ptext47:
 13765                           	opt stack 0
 13766  004542                     _memory_txFrameClear:
 13767                           	opt stack 23
 13768                           
 13769                           ;incstack = 0
 13770                           ;memory_txFrameClear@index stored from wreg
 13771  004542  0100               	movlb	0	; () banked
 13772  004544  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 13773                           
 13774                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 13775  004546  0100               	movlb	0	; () banked
 13776  004548  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 13777  00454A  0D09               	mullw	9
 13778  00454C  0E06               	movlw	6
 13779  00454E  26F3               	addwf	prodl,f,c
 13780  004550  0E00               	movlw	0
 13781  004552  22F4               	addwfc	prodh,f,c
 13782  004554  0E00               	movlw	low _occupiedMemory
 13783  004556  24F3               	addwf	prodl,w,c
 13784  004558  6ED9               	movwf	fsr2l,c
 13785  00455A  0E02               	movlw	high _occupiedMemory
 13786  00455C  20F4               	addwfc	prodh,w,c
 13787  00455E  6EDA               	movwf	fsr2h,c
 13788  004560  0E00               	movlw	0
 13789  004562  6EDF               	movwf	indf2,c
 13790                           
 13791                           ; BSR set to: 0
 13792  004564  0012               	return		;funcret
 13793  004566                     __end_of_memory_txFrameClear:
 13794                           	opt stack 0
 13795                           tblptru	equ	0xFF8
 13796                           tblptrh	equ	0xFF7
 13797                           tblptrl	equ	0xFF6
 13798                           tablat	equ	0xFF5
 13799                           prodh	equ	0xFF4
 13800                           prodl	equ	0xFF3
 13801                           intcon	equ	0xFF2
 13802                           intcon3	equ	0xFF0
 13803                           postinc0	equ	0xFEE
 13804                           plusw0	equ	0xFEB
 13805                           fsr0h	equ	0xFEA
 13806                           fsr0l	equ	0xFE9
 13807                           wreg	equ	0xFE8
 13808                           indf1	equ	0xFE7
 13809                           postinc1	equ	0xFE6
 13810                           postdec1	equ	0xFE5
 13811                           plusw1	equ	0xFE3
 13812                           fsr1h	equ	0xFE2
 13813                           fsr1l	equ	0xFE1
 13814                           indf2	equ	0xFDF
 13815                           postinc2	equ	0xFDE
 13816                           postdec2	equ	0xFDD
 13817                           plusw2	equ	0xFDB
 13818                           fsr2h	equ	0xFDA
 13819                           fsr2l	equ	0xFD9
 13820                           status	equ	0xFD8
 13821                           
 13822 ;; *************** function _ENC424J600_setTXStartAddress *****************
 13823 ;; Defined at:
 13824 ;;		line 641 in file "src/enc424j600/ENC424J600.c"
 13825 ;; Parameters:    Size  Location     Type
 13826 ;;  addr            2   14[BANK0 ] unsigned int 
 13827 ;; Auto vars:     Size  Location     Type
 13828 ;;  highByte        1   17[BANK0 ] unsigned char 
 13829 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13830 ;; Return value:  Size  Location     Type
 13831 ;;                  1    wreg      void 
 13832 ;; Registers used:
 13833 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13834 ;; Tracked objects:
 13835 ;;		On entry : 0/0
 13836 ;;		On exit  : 0/0
 13837 ;;		Unchanged: 0/0
 13838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13839 ;;      Params:         0       2       0       0       0       0       0       0       0
 13840 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13841 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13842 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13843 ;;Total ram usage:        4 bytes
 13844 ;; Hardware stack levels used:    1
 13845 ;; Hardware stack levels required when called:    7
 13846 ;; This function calls:
 13847 ;;		_ENC424J600_writeControlRegisterUnbanked
 13848 ;; This function is called by:
 13849 ;;		_ethernetController_sendPacket
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           	psect	text48
 13854  0043B0                     __ptext48:
 13855                           	opt stack 0
 13856  0043B0                     _ENC424J600_setTXStartAddress:
 13857                           	opt stack 20
 13858                           
 13859                           ;ENC424J600.c: 642: uint8_t lowByte = addr & 0xff;
 13860                           
 13861                           ; BSR set to: 0
 13862                           ;incstack = 0
 13863  0043B0  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 13864                           
 13865                           ;ENC424J600.c: 643: uint8_t highByte = (addr & 0xff00) >> 8;
 13866  0043B4  0100               	movlb	0	; () banked
 13867  0043B6  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 13868  0043B8  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 13869                           
 13870                           ; BSR set to: 0
 13871                           ;ENC424J600.c: 644: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 13872  0043BA  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 13873  0043BC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13874  0043BE  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 13875  0043C0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13876  0043C2  0E00               	movlw	0
 13877  0043C4  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13878                           
 13879                           ;ENC424J600.c: 645: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 13880  0043C8  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 13881  0043CA  0100               	movlb	0	; () banked
 13882  0043CC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13883  0043CE  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 13884  0043D0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13885  0043D2  0E01               	movlw	1
 13886  0043D4  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13887  0043D8  0012               	return		;funcret
 13888  0043DA                     __end_of_ENC424J600_setTXStartAddress:
 13889                           	opt stack 0
 13890                           tblptru	equ	0xFF8
 13891                           tblptrh	equ	0xFF7
 13892                           tblptrl	equ	0xFF6
 13893                           tablat	equ	0xFF5
 13894                           prodh	equ	0xFF4
 13895                           prodl	equ	0xFF3
 13896                           intcon	equ	0xFF2
 13897                           intcon3	equ	0xFF0
 13898                           postinc0	equ	0xFEE
 13899                           plusw0	equ	0xFEB
 13900                           fsr0h	equ	0xFEA
 13901                           fsr0l	equ	0xFE9
 13902                           wreg	equ	0xFE8
 13903                           indf1	equ	0xFE7
 13904                           postinc1	equ	0xFE6
 13905                           postdec1	equ	0xFE5
 13906                           plusw1	equ	0xFE3
 13907                           fsr1h	equ	0xFE2
 13908                           fsr1l	equ	0xFE1
 13909                           indf2	equ	0xFDF
 13910                           postinc2	equ	0xFDE
 13911                           postdec2	equ	0xFDD
 13912                           plusw2	equ	0xFDB
 13913                           fsr2h	equ	0xFDA
 13914                           fsr2l	equ	0xFD9
 13915                           status	equ	0xFD8
 13916                           
 13917 ;; *************** function _ENC424J600_setTXLength *****************
 13918 ;; Defined at:
 13919 ;;		line 616 in file "src/enc424j600/ENC424J600.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;  len             2   14[BANK0 ] unsigned int 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  highByte        1   17[BANK0 ] unsigned char 
 13924 ;;  lowByte         1   16[BANK0 ] unsigned char 
 13925 ;; Return value:  Size  Location     Type
 13926 ;;                  1    wreg      void 
 13927 ;; Registers used:
 13928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13929 ;; Tracked objects:
 13930 ;;		On entry : 0/0
 13931 ;;		On exit  : 0/0
 13932 ;;		Unchanged: 0/0
 13933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13934 ;;      Params:         0       2       0       0       0       0       0       0       0
 13935 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13936 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13937 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13938 ;;Total ram usage:        4 bytes
 13939 ;; Hardware stack levels used:    1
 13940 ;; Hardware stack levels required when called:    7
 13941 ;; This function calls:
 13942 ;;		_ENC424J600_writeControlRegisterUnbanked
 13943 ;; This function is called by:
 13944 ;;		_ethernetController_sendPacket
 13945 ;; This function uses a non-reentrant model
 13946 ;;
 13947                           
 13948                           	psect	text49
 13949  0043DA                     __ptext49:
 13950                           	opt stack 0
 13951  0043DA                     _ENC424J600_setTXLength:
 13952                           	opt stack 20
 13953                           
 13954                           ;ENC424J600.c: 617: uint8_t lowByte = len & 0x00ff;
 13955                           
 13956                           ;incstack = 0
 13957  0043DA  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 13958                           
 13959                           ;ENC424J600.c: 618: uint8_t highByte = len >> 8;
 13960  0043DE  0100               	movlb	0	; () banked
 13961  0043E0  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 13962  0043E2  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;ENC424J600.c: 619: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 13966  0043E4  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 13967  0043E6  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13968  0043E8  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 13969  0043EA  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13970  0043EC  0E02               	movlw	2
 13971  0043EE  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13972                           
 13973                           ;ENC424J600.c: 620: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 13974  0043F2  0E71               	movlw	low ENC424J600_setTXLength@highByte
 13975  0043F4  0100               	movlb	0	; () banked
 13976  0043F6  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 13977  0043F8  0E00               	movlw	high ENC424J600_setTXLength@highByte
 13978  0043FA  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13979  0043FC  0E03               	movlw	3
 13980  0043FE  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 13981  004402  0012               	return		;funcret
 13982  004404                     __end_of_ENC424J600_setTXLength:
 13983                           	opt stack 0
 13984                           tblptru	equ	0xFF8
 13985                           tblptrh	equ	0xFF7
 13986                           tblptrl	equ	0xFF6
 13987                           tablat	equ	0xFF5
 13988                           prodh	equ	0xFF4
 13989                           prodl	equ	0xFF3
 13990                           intcon	equ	0xFF2
 13991                           intcon3	equ	0xFF0
 13992                           postinc0	equ	0xFEE
 13993                           plusw0	equ	0xFEB
 13994                           fsr0h	equ	0xFEA
 13995                           fsr0l	equ	0xFE9
 13996                           wreg	equ	0xFE8
 13997                           indf1	equ	0xFE7
 13998                           postinc1	equ	0xFE6
 13999                           postdec1	equ	0xFE5
 14000                           plusw1	equ	0xFE3
 14001                           fsr1h	equ	0xFE2
 14002                           fsr1l	equ	0xFE1
 14003                           indf2	equ	0xFDF
 14004                           postinc2	equ	0xFDE
 14005                           postdec2	equ	0xFDD
 14006                           plusw2	equ	0xFDB
 14007                           fsr2h	equ	0xFDA
 14008                           fsr2l	equ	0xFD9
 14009                           status	equ	0xFD8
 14010                           
 14011 ;; *************** function _ethernetController_getSourceMACAddress *****************
 14012 ;; Defined at:
 14013 ;;		line 271 in file "src/enc424j600/ENC424J600.c"
 14014 ;; Parameters:    Size  Location     Type
 14015 ;;  field           9   15[BANK0 ] struct memoryField
 14016 ;; Auto vars:     Size  Location     Type
 14017 ;;  temp            1   31[BANK0 ] unsigned char 
 14018 ;;  i               1   32[BANK0 ] unsigned char 
 14019 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 14020 ;;  opcode          1   24[BANK0 ] unsigned char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  6   15[BANK0 ] struct macaddress
 14023 ;; Registers used:
 14024 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14030 ;;      Params:         0       9       0       0       0       0       0       0       0
 14031 ;;      Locals:         0       9       0       0       0       0       0       0       0
 14032 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14033 ;;      Totals:         0      18       0       0       0       0       0       0       0
 14034 ;;Total ram usage:       18 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:    7
 14037 ;; This function calls:
 14038 ;;		_ENC424J600_readSPI
 14039 ;;		_ENC424J600_setERXDATAReadPointer
 14040 ;;		_ENC424J600_writeSPI
 14041 ;; This function is called by:
 14042 ;;		_ARP_send
 14043 ;; This function uses a non-reentrant model
 14044 ;;
 14045                           
 14046                           	psect	text50
 14047  003C56                     __ptext50:
 14048                           	opt stack 0
 14049  003C56                     _ethernetController_getSourceMACAddress:
 14050                           	opt stack 19
 14051                           
 14052                           ;ENC424J600.c: 272: macaddress_t sourceAddress;
 14053                           ;ENC424J600.c: 273: ENC424J600_setERXDATAReadPointer(field.start + 14);
 14054                           
 14055                           ;incstack = 0
 14056  003C56  0E0E               	movlw	14
 14057  003C58  0100               	movlb	0	; () banked
 14058  003C5A  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 14059  003C5C  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 14060  003C5E  0E00               	movlw	0
 14061  003C60  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 14062  003C62  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 14063  003C64  EC05  F021         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 14064                           
 14065                           ;ENC424J600.c: 274: uint8_t opcode = 0x2C;
 14066  003C68  0E2C               	movlw	44
 14067  003C6A  0100               	movlb	0	; () banked
 14068  003C6C  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 14069                           
 14070                           ; BSR set to: 0
 14071                           ;ENC424J600.c: 275: PORTBbits.RB4=0;
 14072  003C6E  9881               	bcf	3969,4,c	;volatile
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;ENC424J600.c: 276: ENC424J600_writeSPI(&opcode);
 14076  003C70  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 14077  003C72  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14078  003C74  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 14079  003C76  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14080  003C78  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 14081                           
 14082                           ;ENC424J600.c: 277: for (uint8_t i = 0; i < 6; i++) {
 14083  003C7C  0E00               	movlw	0
 14084  003C7E  0100               	movlb	0	; () banked
 14085  003C80  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 14086  003C82                     l7195:
 14087                           
 14088                           ; BSR set to: 0
 14089  003C82  0E05               	movlw	5
 14090  003C84  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 14091  003C86  D001               	goto	l153
 14092  003C88  D013               	goto	u8520
 14093  003C8A                     l153:
 14094                           
 14095                           ; BSR set to: 0
 14096                           ;ENC424J600.c: 278: uint8_t temp;
 14097                           ;ENC424J600.c: 279: ENC424J600_readSPI(&temp);
 14098                           
 14099                           ; BSR set to: 0
 14100  003C8A  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 14101  003C8C  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 14102  003C8E  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 14103  003C90  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 14104  003C92  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
 14105                           
 14106                           ;ENC424J600.c: 280: sourceAddress.address[i] = temp;
 14107  003C96  0100               	movlb	0	; () banked
 14108  003C98  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 14109  003C9A  0D01               	mullw	1
 14110  003C9C  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 14111  003C9E  24F3               	addwf	prodl,w,c
 14112  003CA0  6ED9               	movwf	fsr2l,c
 14113  003CA2  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 14114  003CA4  20F4               	addwfc	prodh,w,c
 14115  003CA6  6EDA               	movwf	fsr2h,c
 14116  003CA8  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 14117                           
 14118                           ; BSR set to: 0
 14119  003CAC  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 14120  003CAE  D7E9               	goto	l7195
 14121  003CB0                     u8520:
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;ENC424J600.c: 281: }
 14125                           ;ENC424J600.c: 282: PORTBbits.RB4=1;
 14126  003CB0  8881               	bsf	3969,4,c	;volatile
 14127                           
 14128                           ; BSR set to: 0
 14129                           ;ENC424J600.c: 283: return sourceAddress;
 14130  003CB2  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 14131  003CB6  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 14132  003CBA  0E05               	movlw	5
 14133  003CBC                     u8531:
 14134  003CBC  CFDB FFEB          	movff	plusw2,plusw0
 14135  003CC0  06E8               	decf	wreg,f,c
 14136  003CC2  E2FC               	bc	u8531
 14137  003CC4  0012               	return	
 14138  003CC6                     __end_of_ethernetController_getSourceMACAddress:
 14139                           	opt stack 0
 14140                           tblptru	equ	0xFF8
 14141                           tblptrh	equ	0xFF7
 14142                           tblptrl	equ	0xFF6
 14143                           tablat	equ	0xFF5
 14144                           prodh	equ	0xFF4
 14145                           prodl	equ	0xFF3
 14146                           intcon	equ	0xFF2
 14147                           intcon3	equ	0xFF0
 14148                           postinc0	equ	0xFEE
 14149                           plusw0	equ	0xFEB
 14150                           fsr0h	equ	0xFEA
 14151                           fsr0l	equ	0xFE9
 14152                           wreg	equ	0xFE8
 14153                           indf1	equ	0xFE7
 14154                           postinc1	equ	0xFE6
 14155                           postdec1	equ	0xFE5
 14156                           plusw1	equ	0xFE3
 14157                           fsr1h	equ	0xFE2
 14158                           fsr1l	equ	0xFE1
 14159                           indf2	equ	0xFDF
 14160                           postinc2	equ	0xFDE
 14161                           postdec2	equ	0xFDD
 14162                           plusw2	equ	0xFDB
 14163                           fsr2h	equ	0xFDA
 14164                           fsr2l	equ	0xFD9
 14165                           status	equ	0xFD8
 14166                           
 14167 ;; *************** function _ARP_parseFromRXBuffer *****************
 14168 ;; Defined at:
 14169 ;;		line 59 in file "src/stack/protocols/arp.c"
 14170 ;; Parameters:    Size  Location     Type
 14171 ;;  frame           2   23[BANK0 ] PTR struct ethernetFrame
 14172 ;;		 -> stack.ethernet(15), stack(113), 
 14173 ;; Auto vars:     Size  Location     Type
 14174 ;;  i               1   61[BANK0 ] unsigned char 
 14175 ;;  i               1   60[BANK0 ] unsigned char 
 14176 ;;  i               1   59[BANK0 ] unsigned char 
 14177 ;;  i               1   58[BANK0 ] unsigned char 
 14178 ;;  arp            32   64[BANK0 ] struct ARP_message
 14179 ;;  offset          2   62[BANK0 ] const unsigned int 
 14180 ;; Return value:  Size  Location     Type
 14181 ;;                  32   23[BANK0 ] struct ARP_message
 14182 ;; Registers used:
 14183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14184 ;; Tracked objects:
 14185 ;;		On entry : 0/0
 14186 ;;		On exit  : 0/0
 14187 ;;		Unchanged: 0/0
 14188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14189 ;;      Params:         0      32       0       0       0       0       0       0       0
 14190 ;;      Locals:         0      38       0       0       0       0       0       0       0
 14191 ;;      Temps:          0       3       0       0       0       0       0       0       0
 14192 ;;      Totals:         0      73       0       0       0       0       0       0       0
 14193 ;;Total ram usage:       73 bytes
 14194 ;; Hardware stack levels used:    1
 14195 ;; Hardware stack levels required when called:    9
 14196 ;; This function calls:
 14197 ;;		_ethernetController_streamFromRXBuffer
 14198 ;;		_ipv4_cmp
 14199 ;;		_ipv4_isAllZero
 14200 ;;		_mac_cmp
 14201 ;;		_mac_isAllZero
 14202 ;; This function is called by:
 14203 ;;		_ARP_handleNewPacket
 14204 ;; This function uses a non-reentrant model
 14205 ;;
 14206                           
 14207                           	psect	text51
 14208  000A54                     __ptext51:
 14209                           	opt stack 0
 14210  000A54                     _ARP_parseFromRXBuffer:
 14211                           	opt stack 18
 14212                           
 14213                           ;arp.c: 60: ARP_message_t arp;
 14214                           ;arp.c: 61: uint16_t const offset = 22;
 14215                           
 14216                           ; BSR set to: 0
 14217                           ;incstack = 0
 14218  000A54  0E00               	movlw	0
 14219  000A56  0100               	movlb	0	; () banked
 14220  000A58  6F9F               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 14221  000A5A  0E16               	movlw	22
 14222  000A5C  6F9E               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 14223                           
 14224                           ; BSR set to: 0
 14225                           ;arp.c: 63: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 14226  000A5E  EE20 F010          	lfsr	2,16
 14227  000A62  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14228  000A64  26D9               	addwf	fsr2l,f,c
 14229  000A66  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14230  000A68  22DA               	addwfc	fsr2h,f,c
 14231  000A6A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14232  000A6E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14233  000A72  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14234  000A74  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14235  000A76  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14236  000A78  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14237  000A7A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14238  000A7C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14239  000A7E  0E00               	movlw	0
 14240  000A80  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14241                           
 14242                           ;arp.c: 66: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14243  000A84  0100               	movlb	0	; () banked
 14244  000A86  EE20 F010          	lfsr	2,16
 14245  000A8A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14246  000A8C  26D9               	addwf	fsr2l,f,c
 14247  000A8E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14248  000A90  22DA               	addwfc	fsr2h,f,c
 14249  000A92  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14250  000A96  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14251  000A9A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14252  000A9C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14253  000A9E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14254  000AA0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14255  000AA2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14256  000AA4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14257  000AA6  0E01               	movlw	1
 14258  000AA8  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14259  000AAC  0100               	movlb	0	; () banked
 14260  000AAE  6FA1               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 14261  000AB0  6BA0               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;arp.c: 67: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14265  000AB2  EE20 F010          	lfsr	2,16
 14266  000AB6  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14267  000AB8  26D9               	addwf	fsr2l,f,c
 14268  000ABA  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14269  000ABC  22DA               	addwfc	fsr2h,f,c
 14270  000ABE  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14271  000AC2  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14272  000AC6  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14273  000AC8  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14274  000ACA  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14275  000ACC  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14276  000ACE  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14277  000AD0  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14278  000AD2  0E01               	movlw	1
 14279  000AD4  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14280  000AD8  0100               	movlb	0	; () banked
 14281  000ADA  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14282  000ADC  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14283  000ADE  13A0               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 14284                           
 14285                           ; BSR set to: 0
 14286                           ;arp.c: 69: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14287  000AE0  EE20 F010          	lfsr	2,16
 14288  000AE4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14289  000AE6  26D9               	addwf	fsr2l,f,c
 14290  000AE8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14291  000AEA  22DA               	addwfc	fsr2h,f,c
 14292  000AEC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14293  000AF0  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14294  000AF4  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14295  000AF6  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14296  000AF8  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14297  000AFA  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14298  000AFC  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14299  000AFE  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14300  000B00  0E01               	movlw	1
 14301  000B02  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14302  000B06  0100               	movlb	0	; () banked
 14303  000B08  6FA3               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 14304  000B0A  6BA2               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 14305                           
 14306                           ; BSR set to: 0
 14307                           ;arp.c: 70: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14308  000B0C  EE20 F010          	lfsr	2,16
 14309  000B10  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14310  000B12  26D9               	addwf	fsr2l,f,c
 14311  000B14  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14312  000B16  22DA               	addwfc	fsr2h,f,c
 14313  000B18  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14314  000B1C  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14315  000B20  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14316  000B22  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14317  000B24  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14318  000B26  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14319  000B28  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14320  000B2A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14321  000B2C  0E01               	movlw	1
 14322  000B2E  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14323  000B32  0100               	movlb	0	; () banked
 14324  000B34  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14325  000B36  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14326  000B38  13A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 14327                           
 14328                           ; BSR set to: 0
 14329                           ;arp.c: 72: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14330  000B3A  EE20 F010          	lfsr	2,16
 14331  000B3E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14332  000B40  26D9               	addwf	fsr2l,f,c
 14333  000B42  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14334  000B44  22DA               	addwfc	fsr2h,f,c
 14335  000B46  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14336  000B4A  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14337  000B4E  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14338  000B50  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14339  000B52  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14340  000B54  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14341  000B56  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14342  000B58  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14343  000B5A  0E01               	movlw	1
 14344  000B5C  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14345  000B60  0100               	movlb	0	; () banked
 14346  000B62  6FA4               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 14347                           
 14348                           ; BSR set to: 0
 14349                           ;arp.c: 73: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14350  000B64  EE20 F010          	lfsr	2,16
 14351  000B68  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14352  000B6A  26D9               	addwf	fsr2l,f,c
 14353  000B6C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14354  000B6E  22DA               	addwfc	fsr2h,f,c
 14355  000B70  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14356  000B74  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14357  000B78  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14358  000B7A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14359  000B7C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14360  000B7E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14361  000B80  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14362  000B82  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14363  000B84  0E01               	movlw	1
 14364  000B86  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14365  000B8A  0100               	movlb	0	; () banked
 14366  000B8C  6FA5               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 14367                           
 14368                           ; BSR set to: 0
 14369                           ;arp.c: 75: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 14370  000B8E  EE20 F010          	lfsr	2,16
 14371  000B92  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14372  000B94  26D9               	addwf	fsr2l,f,c
 14373  000B96  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14374  000B98  22DA               	addwfc	fsr2h,f,c
 14375  000B9A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14376  000B9E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14377  000BA2  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14378  000BA4  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14379  000BA6  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14380  000BA8  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14381  000BAA  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14382  000BAC  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14383  000BAE  0E01               	movlw	1
 14384  000BB0  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14385  000BB4  0100               	movlb	0	; () banked
 14386  000BB6  6FA7               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 14387  000BB8  6BA6               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 14388                           
 14389                           ; BSR set to: 0
 14390                           ;arp.c: 76: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 14391  000BBA  EE20 F010          	lfsr	2,16
 14392  000BBE  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14393  000BC0  26D9               	addwf	fsr2l,f,c
 14394  000BC2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14395  000BC4  22DA               	addwfc	fsr2h,f,c
 14396  000BC6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14397  000BCA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14398  000BCE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14399  000BD0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14400  000BD2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14401  000BD4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14402  000BD6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14403  000BD8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14404  000BDA  0E01               	movlw	1
 14405  000BDC  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14406  000BE0  0100               	movlb	0	; () banked
 14407  000BE2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14408  000BE4  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 14409  000BE6  13A6               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 14410                           
 14411                           ; BSR set to: 0
 14412                           ;arp.c: 79: for (uint8_t i = 0; i < arp.hlen; i++)
 14413  000BE8  0E00               	movlw	0
 14414  000BEA  6F9A               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 14415  000BEC  D024               	goto	l880
 14416  000BEE                     
 14417                           ; BSR set to: 0
 14418                           ;arp.c: 80: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14419                           
 14420                           ; BSR set to: 0
 14421  000BEE  EE20 F010          	lfsr	2,16
 14422  000BF2  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14423  000BF4  26D9               	addwf	fsr2l,f,c
 14424  000BF6  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14425  000BF8  22DA               	addwfc	fsr2h,f,c
 14426  000BFA  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14427  000BFE  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14428  000C02  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14429  000C04  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14430  000C06  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14431  000C08  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14432  000C0A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14433  000C0C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14434  000C0E  0E01               	movlw	1
 14435  000C10  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14436  000C14  0100               	movlb	0	; () banked
 14437  000C16  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14438  000C18  519A               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14439  000C1A  0D01               	mullw	1
 14440  000C1C  0E08               	movlw	8
 14441  000C1E  26F3               	addwf	prodl,f,c
 14442  000C20  0E00               	movlw	0
 14443  000C22  22F4               	addwfc	prodh,f,c
 14444  000C24  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14445  000C26  24F3               	addwf	prodl,w,c
 14446  000C28  6ED9               	movwf	fsr2l,c
 14447  000C2A  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14448  000C2C  20F4               	addwfc	prodh,w,c
 14449  000C2E  6EDA               	movwf	fsr2h,c
 14450  000C30  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14451                           
 14452                           ; BSR set to: 0
 14453  000C34  2B9A               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 14454  000C36                     l880:
 14455                           
 14456                           ; BSR set to: 0
 14457                           
 14458                           ; BSR set to: 0
 14459  000C36  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14460  000C38  5D9A               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 14461  000C3A  A0D8               	btfss	status,0,c
 14462  000C3C  D7D8               	goto	l881
 14463                           
 14464                           ; BSR set to: 0
 14465                           ;arp.c: 81: for (uint8_t i = 0; i < arp.plen; i++)
 14466                           
 14467                           ; BSR set to: 0
 14468  000C3E  0E00               	movlw	0
 14469  000C40  6F9B               	movwf	ARP_parseFromRXBuffer@i_2569& (0+255),b
 14470  000C42  D024               	goto	l883
 14471  000C44                     
 14472                           ; BSR set to: 0
 14473                           ;arp.c: 82: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 14474                           
 14475                           ; BSR set to: 0
 14476  000C44  EE20 F010          	lfsr	2,16
 14477  000C48  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14478  000C4A  26D9               	addwf	fsr2l,f,c
 14479  000C4C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14480  000C4E  22DA               	addwfc	fsr2h,f,c
 14481  000C50  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14482  000C54  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14483  000C58  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14484  000C5A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14485  000C5C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14486  000C5E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14487  000C60  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14488  000C62  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14489  000C64  0E01               	movlw	1
 14490  000C66  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14491  000C6A  0100               	movlb	0	; () banked
 14492  000C6C  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14493  000C6E  519B               	movf	ARP_parseFromRXBuffer@i_2569& (0+255),w,b
 14494  000C70  0D01               	mullw	1
 14495  000C72  0E0E               	movlw	14
 14496  000C74  26F3               	addwf	prodl,f,c
 14497  000C76  0E00               	movlw	0
 14498  000C78  22F4               	addwfc	prodh,f,c
 14499  000C7A  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14500  000C7C  24F3               	addwf	prodl,w,c
 14501  000C7E  6ED9               	movwf	fsr2l,c
 14502  000C80  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14503  000C82  20F4               	addwfc	prodh,w,c
 14504  000C84  6EDA               	movwf	fsr2h,c
 14505  000C86  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14506                           
 14507                           ; BSR set to: 0
 14508  000C8A  2B9B               	incf	ARP_parseFromRXBuffer@i_2569& (0+255),f,b
 14509  000C8C                     l883:
 14510                           
 14511                           ; BSR set to: 0
 14512                           
 14513                           ; BSR set to: 0
 14514  000C8C  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14515  000C8E  5D9B               	subwf	ARP_parseFromRXBuffer@i_2569& (0+255),w,b
 14516  000C90  A0D8               	btfss	status,0,c
 14517  000C92  D7D8               	goto	l884
 14518                           
 14519                           ; BSR set to: 0
 14520                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 14521                           
 14522                           ; BSR set to: 0
 14523  000C94  0E00               	movlw	0
 14524  000C96  6F9C               	movwf	ARP_parseFromRXBuffer@i_2570& (0+255),b
 14525  000C98  D024               	goto	l886
 14526  000C9A                     
 14527                           ; BSR set to: 0
 14528                           ;arp.c: 85: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14529                           
 14530                           ; BSR set to: 0
 14531  000C9A  EE20 F010          	lfsr	2,16
 14532  000C9E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14533  000CA0  26D9               	addwf	fsr2l,f,c
 14534  000CA2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14535  000CA4  22DA               	addwfc	fsr2h,f,c
 14536  000CA6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14537  000CAA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14538  000CAE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14539  000CB0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14540  000CB2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14541  000CB4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14542  000CB6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14543  000CB8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14544  000CBA  0E01               	movlw	1
 14545  000CBC  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14546  000CC0  0100               	movlb	0	; () banked
 14547  000CC2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14548  000CC4  519C               	movf	ARP_parseFromRXBuffer@i_2570& (0+255),w,b
 14549  000CC6  0D01               	mullw	1
 14550  000CC8  0E12               	movlw	18
 14551  000CCA  26F3               	addwf	prodl,f,c
 14552  000CCC  0E00               	movlw	0
 14553  000CCE  22F4               	addwfc	prodh,f,c
 14554  000CD0  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14555  000CD2  24F3               	addwf	prodl,w,c
 14556  000CD4  6ED9               	movwf	fsr2l,c
 14557  000CD6  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14558  000CD8  20F4               	addwfc	prodh,w,c
 14559  000CDA  6EDA               	movwf	fsr2h,c
 14560  000CDC  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14561                           
 14562                           ; BSR set to: 0
 14563  000CE0  2B9C               	incf	ARP_parseFromRXBuffer@i_2570& (0+255),f,b
 14564  000CE2                     l886:
 14565                           
 14566                           ; BSR set to: 0
 14567                           
 14568                           ; BSR set to: 0
 14569  000CE2  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14570  000CE4  5D9C               	subwf	ARP_parseFromRXBuffer@i_2570& (0+255),w,b
 14571  000CE6  A0D8               	btfss	status,0,c
 14572  000CE8  D7D8               	goto	l887
 14573                           
 14574                           ; BSR set to: 0
 14575                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 14576                           
 14577                           ; BSR set to: 0
 14578  000CEA  0E00               	movlw	0
 14579  000CEC  6F9D               	movwf	ARP_parseFromRXBuffer@i_2571& (0+255),b
 14580  000CEE  D024               	goto	l889
 14581  000CF0                     
 14582                           ; BSR set to: 0
 14583                           ;arp.c: 87: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 14584                           
 14585                           ; BSR set to: 0
 14586  000CF0  EE20 F010          	lfsr	2,16
 14587  000CF4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14588  000CF6  26D9               	addwf	fsr2l,f,c
 14589  000CF8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14590  000CFA  22DA               	addwfc	fsr2h,f,c
 14591  000CFC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14592  000D00  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14593  000D04  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14594  000D06  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14595  000D08  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14596  000D0A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14597  000D0C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14598  000D0E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14599  000D10  0E01               	movlw	1
 14600  000D12  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14601  000D16  0100               	movlb	0	; () banked
 14602  000D18  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 14603  000D1A  519D               	movf	ARP_parseFromRXBuffer@i_2571& (0+255),w,b
 14604  000D1C  0D01               	mullw	1
 14605  000D1E  0E18               	movlw	24
 14606  000D20  26F3               	addwf	prodl,f,c
 14607  000D22  0E00               	movlw	0
 14608  000D24  22F4               	addwfc	prodh,f,c
 14609  000D26  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 14610  000D28  24F3               	addwf	prodl,w,c
 14611  000D2A  6ED9               	movwf	fsr2l,c
 14612  000D2C  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 14613  000D2E  20F4               	addwfc	prodh,w,c
 14614  000D30  6EDA               	movwf	fsr2h,c
 14615  000D32  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 14616                           
 14617                           ; BSR set to: 0
 14618  000D36  2B9D               	incf	ARP_parseFromRXBuffer@i_2571& (0+255),f,b
 14619  000D38                     l889:
 14620                           
 14621                           ; BSR set to: 0
 14622                           
 14623                           ; BSR set to: 0
 14624  000D38  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14625  000D3A  5D9D               	subwf	ARP_parseFromRXBuffer@i_2571& (0+255),w,b
 14626  000D3C  A0D8               	btfss	status,0,c
 14627  000D3E  D7D8               	goto	l890
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;arp.c: 89: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 14631                           
 14632                           ; BSR set to: 0
 14633  000D40  EE20 F010          	lfsr	2,16
 14634  000D44  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 14635  000D46  26D9               	addwf	fsr2l,f,c
 14636  000D48  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 14637  000D4A  22DA               	addwfc	fsr2h,f,c
 14638  000D4C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 14639  000D50  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 14640  000D54  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 14641  000D56  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 14642  000D58  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14643  000D5A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 14644  000D5C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 14645  000D5E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14646  000D60  0E02               	movlw	2
 14647  000D62  EC58  F01A         	call	_ethernetController_streamFromRXBuffer
 14648                           
 14649                           ;arp.c: 91: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 14650  000D66  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14651  000D68  0100               	movlb	0	; () banked
 14652  000D6A  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14653  000D6C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14654  000D6E  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14655  000D70  ECA9  F021         	call	_ipv4_isAllZero	;wreg free
 14656  000D74  0100               	movlb	0	; () banked
 14657  000D76  A0D8               	btfss	status,0,c
 14658  000D78  D002               	goto	l892
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;arp.c: 92: arp.fIsProbe = 1;
 14662  000D7A  83BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14663  000D7C  D03C               	goto	l896
 14664  000D7E                     l892:
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;arp.c: 95: arp.fIsProbe = 0;
 14668  000D7E  93BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;arp.c: 97: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14672                           ;arp.c: 98: mac_isAllZero(&arp.targetMACAddress) &&
 14673                           ;arp.c: 99: arp.operation == ARP_REQUEST) {
 14674  000D80  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14675  000D82  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14676  000D84  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14677  000D86  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14678  000D88  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14679  000D8A  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14680  000D8C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14681  000D8E  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14682  000D90  EC88  F020         	call	_ipv4_cmp	;wreg free
 14683  000D94  0100               	movlb	0	; () banked
 14684  000D96  A0D8               	btfss	status,0,c
 14685  000D98  D00D               	goto	l894
 14686                           
 14687                           ; BSR set to: 0
 14688  000D9A  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14689  000D9C  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14690  000D9E  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14691  000DA0  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14692  000DA2  EC91  F021         	call	_mac_isAllZero	;wreg free
 14693  000DA6  0100               	movlb	0	; () banked
 14694  000DA8  A0D8               	btfss	status,0,c
 14695  000DAA  D004               	goto	l894
 14696                           
 14697                           ; BSR set to: 0
 14698  000DAC  05A6               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14699  000DAE  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14700  000DB0  B4D8               	btfsc	status,2,c
 14701  000DB2  D01F               	goto	u9770
 14702  000DB4                     l894:
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;arp.c: 103: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14706                           ;arp.c: 104: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 14707                           ;arp.c: 105: arp.operation == ARP_REPLY) {
 14708                           
 14709                           ; BSR set to: 0
 14710  000DB4  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 14711  000DB6  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14712  000DB8  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 14713  000DBA  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14714  000DBC  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 14715  000DBE  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14716  000DC0  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 14717  000DC2  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14718  000DC4  EC88  F020         	call	_ipv4_cmp	;wreg free
 14719  000DC8  0100               	movlb	0	; () banked
 14720  000DCA  A0D8               	btfss	status,0,c
 14721  000DCC  D014               	goto	l896
 14722                           
 14723                           ; BSR set to: 0
 14724  000DCE  0EA8               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 14725  000DD0  6F60               	movwf	mac_cmp@a& (0+255),b
 14726  000DD2  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 14727  000DD4  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 14728  000DD6  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 14729  000DD8  6F62               	movwf	mac_cmp@b& (0+255),b
 14730  000DDA  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 14731  000DDC  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 14732  000DDE  EC67  F020         	call	_mac_cmp	;wreg free
 14733  000DE2  0100               	movlb	0	; () banked
 14734  000DE4  A0D8               	btfss	status,0,c
 14735  000DE6  D007               	goto	l896
 14736                           
 14737                           ; BSR set to: 0
 14738  000DE8  0E02               	movlw	2
 14739  000DEA  19A6               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14740  000DEC  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14741  000DEE  A4D8               	btfss	status,2,c
 14742  000DF0  D002               	goto	l896
 14743  000DF2                     u9770:
 14744                           
 14745                           ; BSR set to: 0
 14746                           ;arp.c: 106: arp.fIsGratuitous = 1;
 14747  000DF2  81BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14748                           
 14749                           ;arp.c: 107: } else {
 14750  000DF4  D001               	goto	l897
 14751  000DF6                     l896:
 14752                           
 14753                           ; BSR set to: 0
 14754                           ;arp.c: 108: arp.fIsGratuitous = 0;
 14755  000DF6  91BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 14756  000DF8                     l897:
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;arp.c: 109: }
 14760                           ;arp.c: 110: }
 14761                           ;arp.c: 111: }
 14762                           ;arp.c: 114: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 14763                           ;arp.c: 115: (arp.ptype != ARP_PTYPE_IPv4) ||
 14764                           ;arp.c: 116: (arp.operation > 2) ||
 14765                           ;arp.c: 117: (arp.hlen != 6) ||
 14766                           ;arp.c: 118: (arp.plen != 4)) {
 14767                           
 14768                           ; BSR set to: 0
 14769                           
 14770                           ; BSR set to: 0
 14771                           
 14772                           ; BSR set to: 0
 14773  000DF8  05A0               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 14774  000DFA  11A1               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 14775  000DFC  A4D8               	btfss	status,2,c
 14776  000DFE  D013               	goto	u9820
 14777                           
 14778                           ; BSR set to: 0
 14779  000E00  0E08               	movlw	8
 14780  000E02  19A3               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 14781  000E04  11A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 14782  000E06  A4D8               	btfss	status,2,c
 14783  000E08  D00E               	goto	u9820
 14784                           
 14785                           ; BSR set to: 0
 14786  000E0A  51A7               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 14787  000E0C  E10C               	bnz	l7765
 14788  000E0E  0E03               	movlw	3
 14789  000E10  5DA6               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 14790  000E12  B0D8               	btfsc	status,0,c
 14791  000E14  D008               	goto	u9820
 14792                           
 14793                           ; BSR set to: 0
 14794  000E16  0E06               	movlw	6
 14795  000E18  19A4               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 14796  000E1A  A4D8               	btfss	status,2,c
 14797  000E1C  D004               	goto	u9820
 14798                           
 14799                           ; BSR set to: 0
 14800  000E1E  0E04               	movlw	4
 14801  000E20  19A5               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 14802  000E22  B4D8               	btfsc	status,2,c
 14803  000E24  D004               	goto	l898
 14804  000E26                     u9820:
 14805  000E26                     l7765:
 14806                           
 14807                           ; BSR set to: 0
 14808                           ;arp.c: 119: arp.err.code = ERROR_ARP_INVALID_VALUES;
 14809  000E26  0E01               	movlw	1
 14810  000E28  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14811  000E2A  0E93               	movlw	147
 14812  000E2C  D003               	goto	L2
 14813  000E2E                     l898:
 14814                           
 14815                           ; BSR set to: 0
 14816                           ;arp.c: 122: arp.err.code = (uint16_t)0;
 14817                           
 14818                           ; BSR set to: 0
 14819  000E2E  0E00               	movlw	0
 14820  000E30  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 14821  000E32  0E00               	movlw	0
 14822  000E34                     L2:
 14823  000E34  6FBE               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 14824                           
 14825                           ;arp.c: 123: arp.err.module = ERROR_MODULE_ARP;
 14826  000E36  0E03               	movlw	3
 14827  000E38  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 14828                           
 14829                           ; BSR set to: 0
 14830                           ;arp.c: 124: }
 14831                           ;arp.c: 126: return arp;
 14832                           
 14833                           ; BSR set to: 0
 14834  000E3A  EE20  F0A0         	lfsr	2,ARP_parseFromRXBuffer@arp
 14835  000E3E  EE00  F077         	lfsr	0,?_ARP_parseFromRXBuffer
 14836  000E42  0E1F               	movlw	31
 14837  000E44                     u9831:
 14838  000E44  CFDB FFEB          	movff	plusw2,plusw0
 14839  000E48  06E8               	decf	wreg,f,c
 14840  000E4A  E2FC               	bc	u9831
 14841  000E4C  0012               	return	
 14842  000E4E                     __end_of_ARP_parseFromRXBuffer:
 14843                           	opt stack 0
 14844                           tblptru	equ	0xFF8
 14845                           tblptrh	equ	0xFF7
 14846                           tblptrl	equ	0xFF6
 14847                           tablat	equ	0xFF5
 14848                           prodh	equ	0xFF4
 14849                           prodl	equ	0xFF3
 14850                           intcon	equ	0xFF2
 14851                           intcon3	equ	0xFF0
 14852                           postinc0	equ	0xFEE
 14853                           plusw0	equ	0xFEB
 14854                           fsr0h	equ	0xFEA
 14855                           fsr0l	equ	0xFE9
 14856                           wreg	equ	0xFE8
 14857                           indf1	equ	0xFE7
 14858                           postinc1	equ	0xFE6
 14859                           postdec1	equ	0xFE5
 14860                           plusw1	equ	0xFE3
 14861                           fsr1h	equ	0xFE2
 14862                           fsr1l	equ	0xFE1
 14863                           indf2	equ	0xFDF
 14864                           postinc2	equ	0xFDE
 14865                           postdec2	equ	0xFDD
 14866                           plusw2	equ	0xFDB
 14867                           fsr2h	equ	0xFDA
 14868                           fsr2l	equ	0xFD9
 14869                           status	equ	0xFD8
 14870                           
 14871 ;; *************** function _mac_isAllZero *****************
 14872 ;; Defined at:
 14873 ;;		line 31 in file "src/eth/mac.c"
 14874 ;; Parameters:    Size  Location     Type
 14875 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 14876 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14877 ;; Auto vars:     Size  Location     Type
 14878 ;;  i               1    2[BANK0 ] unsigned char 
 14879 ;; Return value:  Size  Location     Type
 14880 ;;		None               void
 14881 ;; Registers used:
 14882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14883 ;; Tracked objects:
 14884 ;;		On entry : 0/0
 14885 ;;		On exit  : 0/0
 14886 ;;		Unchanged: 0/0
 14887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14888 ;;      Params:         0       2       0       0       0       0       0       0       0
 14889 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14890 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14891 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14892 ;;Total ram usage:        3 bytes
 14893 ;; Hardware stack levels used:    1
 14894 ;; Hardware stack levels required when called:    4
 14895 ;; This function calls:
 14896 ;;		Nothing
 14897 ;; This function is called by:
 14898 ;;		_ARP_parseFromRXBuffer
 14899 ;; This function uses a non-reentrant model
 14900 ;;
 14901                           
 14902                           	psect	text52
 14903  004322                     __ptext52:
 14904                           	opt stack 0
 14905  004322                     _mac_isAllZero:
 14906                           	opt stack 22
 14907                           
 14908                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;incstack = 0
 14912  004322  0E00               	movlw	0
 14913  004324  0100               	movlb	0	; () banked
 14914  004326  6F62               	movwf	mac_isAllZero@i& (0+255),b
 14915  004328                     l7391:
 14916                           
 14917                           ; BSR set to: 0
 14918  004328  0E05               	movlw	5
 14919  00432A  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 14920  00432C  D001               	goto	l382
 14921  00432E  D00F               	goto	u8820
 14922  004330                     l382:
 14923                           
 14924                           ; BSR set to: 0
 14925                           ;mac.c: 33: if (mac->address[i] != 0x00)
 14926                           
 14927                           ; BSR set to: 0
 14928  004330  5162               	movf	mac_isAllZero@i& (0+255),w,b
 14929  004332  0D01               	mullw	1
 14930  004334  50F3               	movf	prodl,w,c
 14931  004336  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 14932  004338  6ED9               	movwf	fsr2l,c
 14933  00433A  50F4               	movf	prodh,w,c
 14934  00433C  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 14935  00433E  6EDA               	movwf	fsr2h,c
 14936  004340  50DF               	movf	indf2,w,c
 14937  004342  B4D8               	btfsc	status,2,c
 14938  004344  D002               	goto	l384
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;mac.c: 34: return 0;
 14942  004346  90D8               	bcf	status,0,c
 14943                           
 14944                           ; BSR set to: 0
 14945  004348  0012               	return	
 14946  00434A                     l384:
 14947                           
 14948                           ; BSR set to: 0
 14949                           
 14950                           ; BSR set to: 0
 14951  00434A  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 14952  00434C  D7ED               	goto	l7391
 14953  00434E                     u8820:
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;mac.c: 35: }
 14957                           ;mac.c: 36: return 1;
 14958                           
 14959                           ; BSR set to: 0
 14960  00434E  80D8               	bsf	status,0,c
 14961  004350  0012               	return	
 14962  004352                     __end_of_mac_isAllZero:
 14963                           	opt stack 0
 14964                           tblptru	equ	0xFF8
 14965                           tblptrh	equ	0xFF7
 14966                           tblptrl	equ	0xFF6
 14967                           tablat	equ	0xFF5
 14968                           prodh	equ	0xFF4
 14969                           prodl	equ	0xFF3
 14970                           intcon	equ	0xFF2
 14971                           intcon3	equ	0xFF0
 14972                           postinc0	equ	0xFEE
 14973                           plusw0	equ	0xFEB
 14974                           fsr0h	equ	0xFEA
 14975                           fsr0l	equ	0xFE9
 14976                           wreg	equ	0xFE8
 14977                           indf1	equ	0xFE7
 14978                           postinc1	equ	0xFE6
 14979                           postdec1	equ	0xFE5
 14980                           plusw1	equ	0xFE3
 14981                           fsr1h	equ	0xFE2
 14982                           fsr1l	equ	0xFE1
 14983                           indf2	equ	0xFDF
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           plusw2	equ	0xFDB
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function _mac_cmp *****************
 14992 ;; Defined at:
 14993 ;;		line 39 in file "src/eth/mac.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;  a               2    0[BANK0 ] PTR struct macaddress
 14996 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14997 ;;  b               2    2[BANK0 ] PTR struct macaddress
 14998 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 14999 ;; Auto vars:     Size  Location     Type
 15000 ;;  i               1    6[BANK0 ] unsigned char 
 15001 ;; Return value:  Size  Location     Type
 15002 ;;		None               void
 15003 ;; Registers used:
 15004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15005 ;; Tracked objects:
 15006 ;;		On entry : 0/0
 15007 ;;		On exit  : 0/0
 15008 ;;		Unchanged: 0/0
 15009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15010 ;;      Params:         0       4       0       0       0       0       0       0       0
 15011 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15012 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15013 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15014 ;;Total ram usage:        7 bytes
 15015 ;; Hardware stack levels used:    1
 15016 ;; Hardware stack levels required when called:    4
 15017 ;; This function calls:
 15018 ;;		Nothing
 15019 ;; This function is called by:
 15020 ;;		_ARP_parseFromRXBuffer
 15021 ;; This function uses a non-reentrant model
 15022 ;;
 15023                           
 15024                           	psect	text53
 15025  0040CE                     __ptext53:
 15026                           	opt stack 0
 15027  0040CE                     _mac_cmp:
 15028                           	opt stack 22
 15029                           
 15030                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 15031                           
 15032                           ; BSR set to: 0
 15033                           ;incstack = 0
 15034  0040CE  0E00               	movlw	0
 15035  0040D0  0100               	movlb	0	; () banked
 15036  0040D2  6F66               	movwf	mac_cmp@i& (0+255),b
 15037  0040D4                     l7411:
 15038                           
 15039                           ; BSR set to: 0
 15040  0040D4  0E05               	movlw	5
 15041  0040D6  6566               	cpfsgt	mac_cmp@i& (0+255),b
 15042  0040D8  D001               	goto	l388
 15043  0040DA  D018               	goto	u8850
 15044  0040DC                     l388:
 15045                           
 15046                           ; BSR set to: 0
 15047                           ;mac.c: 41: if (a->address[i] != b->address[i])
 15048                           
 15049                           ; BSR set to: 0
 15050  0040DC  5166               	movf	mac_cmp@i& (0+255),w,b
 15051  0040DE  0D01               	mullw	1
 15052  0040E0  50F3               	movf	prodl,w,c
 15053  0040E2  2562               	addwf	mac_cmp@b& (0+255),w,b
 15054  0040E4  6ED9               	movwf	fsr2l,c
 15055  0040E6  50F4               	movf	prodh,w,c
 15056  0040E8  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 15057  0040EA  6EDA               	movwf	fsr2h,c
 15058  0040EC  5166               	movf	mac_cmp@i& (0+255),w,b
 15059  0040EE  0D01               	mullw	1
 15060  0040F0  50F3               	movf	prodl,w,c
 15061  0040F2  2560               	addwf	mac_cmp@a& (0+255),w,b
 15062  0040F4  6EE1               	movwf	fsr1l,c
 15063  0040F6  50F4               	movf	prodh,w,c
 15064  0040F8  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 15065  0040FA  6EE2               	movwf	fsr1h,c
 15066  0040FC  50DE               	movf	postinc2,w,c
 15067  0040FE  18E6               	xorwf	postinc1,w,c
 15068  004100  B4D8               	btfsc	status,2,c
 15069  004102  D002               	goto	l390
 15070                           
 15071                           ; BSR set to: 0
 15072                           ;mac.c: 42: return 0;
 15073  004104  90D8               	bcf	status,0,c
 15074                           
 15075                           ; BSR set to: 0
 15076  004106  0012               	return	
 15077  004108                     l390:
 15078                           
 15079                           ; BSR set to: 0
 15080                           
 15081                           ; BSR set to: 0
 15082  004108  2B66               	incf	mac_cmp@i& (0+255),f,b
 15083  00410A  D7E4               	goto	l7411
 15084  00410C                     u8850:
 15085                           
 15086                           ; BSR set to: 0
 15087                           ;mac.c: 43: }
 15088                           ;mac.c: 44: return 1;
 15089                           
 15090                           ; BSR set to: 0
 15091  00410C  80D8               	bsf	status,0,c
 15092  00410E  0012               	return	
 15093  004110                     __end_of_mac_cmp:
 15094                           	opt stack 0
 15095                           tblptru	equ	0xFF8
 15096                           tblptrh	equ	0xFF7
 15097                           tblptrl	equ	0xFF6
 15098                           tablat	equ	0xFF5
 15099                           prodh	equ	0xFF4
 15100                           prodl	equ	0xFF3
 15101                           intcon	equ	0xFF2
 15102                           intcon3	equ	0xFF0
 15103                           postinc0	equ	0xFEE
 15104                           plusw0	equ	0xFEB
 15105                           fsr0h	equ	0xFEA
 15106                           fsr0l	equ	0xFE9
 15107                           wreg	equ	0xFE8
 15108                           indf1	equ	0xFE7
 15109                           postinc1	equ	0xFE6
 15110                           postdec1	equ	0xFE5
 15111                           plusw1	equ	0xFE3
 15112                           fsr1h	equ	0xFE2
 15113                           fsr1l	equ	0xFE1
 15114                           indf2	equ	0xFDF
 15115                           postinc2	equ	0xFDE
 15116                           postdec2	equ	0xFDD
 15117                           plusw2	equ	0xFDB
 15118                           fsr2h	equ	0xFDA
 15119                           fsr2l	equ	0xFD9
 15120                           status	equ	0xFD8
 15121                           
 15122 ;; *************** function _ipv4_isAllZero *****************
 15123 ;; Defined at:
 15124 ;;		line 178 in file "src/stack/protocols/ipv4.c"
 15125 ;; Parameters:    Size  Location     Type
 15126 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15127 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 15128 ;; Auto vars:     Size  Location     Type
 15129 ;;  i               1    2[BANK0 ] unsigned char 
 15130 ;; Return value:  Size  Location     Type
 15131 ;;		None               void
 15132 ;; Registers used:
 15133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15134 ;; Tracked objects:
 15135 ;;		On entry : 0/0
 15136 ;;		On exit  : 0/0
 15137 ;;		Unchanged: 0/0
 15138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15139 ;;      Params:         0       2       0       0       0       0       0       0       0
 15140 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15141 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15142 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15143 ;;Total ram usage:        3 bytes
 15144 ;; Hardware stack levels used:    1
 15145 ;; Hardware stack levels required when called:    4
 15146 ;; This function calls:
 15147 ;;		Nothing
 15148 ;; This function is called by:
 15149 ;;		_ARP_parseFromRXBuffer
 15150 ;; This function uses a non-reentrant model
 15151 ;;
 15152                           
 15153                           	psect	text54
 15154  004352                     __ptext54:
 15155                           	opt stack 0
 15156  004352                     _ipv4_isAllZero:
 15157                           	opt stack 22
 15158                           
 15159                           ;ipv4.c: 179: for (uint8_t i = 0; i < 4; i++) {
 15160                           
 15161                           ; BSR set to: 0
 15162                           ;incstack = 0
 15163  004352  0E00               	movlw	0
 15164  004354  0100               	movlb	0	; () banked
 15165  004356  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15166  004358                     l7471:
 15167                           
 15168                           ; BSR set to: 0
 15169  004358  0E03               	movlw	3
 15170  00435A  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15171  00435C  D001               	goto	l1019
 15172  00435E  D00F               	goto	u8940
 15173  004360                     l1019:
 15174                           
 15175                           ; BSR set to: 0
 15176                           ;ipv4.c: 180: if (ip->address[i] != 0x00)
 15177                           
 15178                           ; BSR set to: 0
 15179  004360  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15180  004362  0D01               	mullw	1
 15181  004364  50F3               	movf	prodl,w,c
 15182  004366  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15183  004368  6ED9               	movwf	fsr2l,c
 15184  00436A  50F4               	movf	prodh,w,c
 15185  00436C  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15186  00436E  6EDA               	movwf	fsr2h,c
 15187  004370  50DF               	movf	indf2,w,c
 15188  004372  B4D8               	btfsc	status,2,c
 15189  004374  D002               	goto	l1021
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;ipv4.c: 181: return 0;
 15193  004376  90D8               	bcf	status,0,c
 15194                           
 15195                           ; BSR set to: 0
 15196  004378  0012               	return	
 15197  00437A                     l1021:
 15198                           
 15199                           ; BSR set to: 0
 15200                           
 15201                           ; BSR set to: 0
 15202  00437A  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15203  00437C  D7ED               	goto	l7471
 15204  00437E                     u8940:
 15205                           
 15206                           ; BSR set to: 0
 15207                           ;ipv4.c: 182: }
 15208                           ;ipv4.c: 183: return 1;
 15209                           
 15210                           ; BSR set to: 0
 15211  00437E  80D8               	bsf	status,0,c
 15212  004380  0012               	return	
 15213  004382                     __end_of_ipv4_isAllZero:
 15214                           	opt stack 0
 15215                           tblptru	equ	0xFF8
 15216                           tblptrh	equ	0xFF7
 15217                           tblptrl	equ	0xFF6
 15218                           tablat	equ	0xFF5
 15219                           prodh	equ	0xFF4
 15220                           prodl	equ	0xFF3
 15221                           intcon	equ	0xFF2
 15222                           intcon3	equ	0xFF0
 15223                           postinc0	equ	0xFEE
 15224                           plusw0	equ	0xFEB
 15225                           fsr0h	equ	0xFEA
 15226                           fsr0l	equ	0xFE9
 15227                           wreg	equ	0xFE8
 15228                           indf1	equ	0xFE7
 15229                           postinc1	equ	0xFE6
 15230                           postdec1	equ	0xFE5
 15231                           plusw1	equ	0xFE3
 15232                           fsr1h	equ	0xFE2
 15233                           fsr1l	equ	0xFE1
 15234                           indf2	equ	0xFDF
 15235                           postinc2	equ	0xFDE
 15236                           postdec2	equ	0xFDD
 15237                           plusw2	equ	0xFDB
 15238                           fsr2h	equ	0xFDA
 15239                           fsr2l	equ	0xFD9
 15240                           status	equ	0xFD8
 15241                           
 15242 ;; *************** function _ipv4_cmp *****************
 15243 ;; Defined at:
 15244 ;;		line 170 in file "src/stack/protocols/ipv4.c"
 15245 ;; Parameters:    Size  Location     Type
 15246 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 15247 ;;		 -> ARP_table(112), ARP_parseFromRXBuffer@arp(32), 
 15248 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 15249 ;;		 -> ARP_checkForEntry@ip(4), ARP_parseFromRXBuffer@arp(32), 
 15250 ;; Auto vars:     Size  Location     Type
 15251 ;;  i               1    6[BANK0 ] unsigned char 
 15252 ;; Return value:  Size  Location     Type
 15253 ;;		None               void
 15254 ;; Registers used:
 15255 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15256 ;; Tracked objects:
 15257 ;;		On entry : 0/0
 15258 ;;		On exit  : 0/0
 15259 ;;		Unchanged: 0/0
 15260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15261 ;;      Params:         0       4       0       0       0       0       0       0       0
 15262 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15263 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15264 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15265 ;;Total ram usage:        7 bytes
 15266 ;; Hardware stack levels used:    1
 15267 ;; Hardware stack levels required when called:    4
 15268 ;; This function calls:
 15269 ;;		Nothing
 15270 ;; This function is called by:
 15271 ;;		_ARP_parseFromRXBuffer
 15272 ;;		_ARP_checkForEntry
 15273 ;; This function uses a non-reentrant model
 15274 ;;
 15275                           
 15276                           	psect	text55
 15277  004110                     __ptext55:
 15278                           	opt stack 0
 15279  004110                     _ipv4_cmp:
 15280                           	opt stack 23
 15281                           
 15282                           ;ipv4.c: 171: for (uint8_t i = 0; i < 4; i++) {
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;incstack = 0
 15286  004110  0E00               	movlw	0
 15287  004112  0100               	movlb	0	; () banked
 15288  004114  6F66               	movwf	ipv4_cmp@i& (0+255),b
 15289  004116                     l7491:
 15290                           
 15291                           ; BSR set to: 0
 15292  004116  0E03               	movlw	3
 15293  004118  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 15294  00411A  D001               	goto	l1013
 15295  00411C  D018               	goto	u8970
 15296  00411E                     l1013:
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;ipv4.c: 172: if (a->address[i] != b->address[i])
 15300                           
 15301                           ; BSR set to: 0
 15302  00411E  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15303  004120  0D01               	mullw	1
 15304  004122  50F3               	movf	prodl,w,c
 15305  004124  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 15306  004126  6ED9               	movwf	fsr2l,c
 15307  004128  50F4               	movf	prodh,w,c
 15308  00412A  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 15309  00412C  6EDA               	movwf	fsr2h,c
 15310  00412E  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15311  004130  0D01               	mullw	1
 15312  004132  50F3               	movf	prodl,w,c
 15313  004134  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 15314  004136  6EE1               	movwf	fsr1l,c
 15315  004138  50F4               	movf	prodh,w,c
 15316  00413A  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 15317  00413C  6EE2               	movwf	fsr1h,c
 15318  00413E  50DE               	movf	postinc2,w,c
 15319  004140  18E6               	xorwf	postinc1,w,c
 15320  004142  B4D8               	btfsc	status,2,c
 15321  004144  D002               	goto	l1015
 15322                           
 15323                           ; BSR set to: 0
 15324                           ;ipv4.c: 173: return 0;
 15325  004146  90D8               	bcf	status,0,c
 15326                           
 15327                           ; BSR set to: 0
 15328  004148  0012               	return	
 15329  00414A                     l1015:
 15330                           
 15331                           ; BSR set to: 0
 15332                           
 15333                           ; BSR set to: 0
 15334  00414A  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 15335  00414C  D7E4               	goto	l7491
 15336  00414E                     u8970:
 15337                           
 15338                           ; BSR set to: 0
 15339                           ;ipv4.c: 174: }
 15340                           ;ipv4.c: 175: return 1;
 15341                           
 15342                           ; BSR set to: 0
 15343  00414E  80D8               	bsf	status,0,c
 15344  004150  0012               	return	
 15345  004152                     __end_of_ipv4_cmp:
 15346                           	opt stack 0
 15347                           tblptru	equ	0xFF8
 15348                           tblptrh	equ	0xFF7
 15349                           tblptrl	equ	0xFF6
 15350                           tablat	equ	0xFF5
 15351                           prodh	equ	0xFF4
 15352                           prodl	equ	0xFF3
 15353                           intcon	equ	0xFF2
 15354                           intcon3	equ	0xFF0
 15355                           postinc0	equ	0xFEE
 15356                           plusw0	equ	0xFEB
 15357                           fsr0h	equ	0xFEA
 15358                           fsr0l	equ	0xFE9
 15359                           wreg	equ	0xFE8
 15360                           indf1	equ	0xFE7
 15361                           postinc1	equ	0xFE6
 15362                           postdec1	equ	0xFE5
 15363                           plusw1	equ	0xFE3
 15364                           fsr1h	equ	0xFE2
 15365                           fsr1l	equ	0xFE1
 15366                           indf2	equ	0xFDF
 15367                           postinc2	equ	0xFDE
 15368                           postdec2	equ	0xFDD
 15369                           plusw2	equ	0xFDB
 15370                           fsr2h	equ	0xFDA
 15371                           fsr2l	equ	0xFD9
 15372                           status	equ	0xFD8
 15373                           
 15374 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 15375 ;; Defined at:
 15376 ;;		line 353 in file "src/enc424j600/ENC424J600.c"
 15377 ;; Parameters:    Size  Location     Type
 15378 ;;  startEnd        1    wreg     unsigned char 
 15379 ;;  startAddress    2   18[BANK0 ] unsigned int 
 15380 ;; Auto vars:     Size  Location     Type
 15381 ;;  startEnd        1   20[BANK0 ] unsigned char 
 15382 ;;  temp            1   22[BANK0 ] unsigned char 
 15383 ;;  opcode          1   21[BANK0 ] unsigned char 
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  1    wreg      unsigned char 
 15386 ;; Registers used:
 15387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15393 ;;      Params:         0       2       0       0       0       0       0       0       0
 15394 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15395 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15396 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15397 ;;Total ram usage:        5 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; Hardware stack levels required when called:    8
 15400 ;; This function calls:
 15401 ;;		_ENC424J600_readSPI
 15402 ;;		_ENC424J600_setERXDATAReadPointer
 15403 ;;		_ENC424J600_setRXTailPointer
 15404 ;;		_ENC424J600_writeSPI
 15405 ;;		_ENC424J600_writeSingleByte
 15406 ;;		_ethernetController_getNextPacketPointer
 15407 ;; This function is called by:
 15408 ;;		_ARP_parseFromRXBuffer
 15409 ;; This function uses a non-reentrant model
 15410 ;;
 15411                           
 15412                           	psect	text56
 15413  0034B0                     __ptext56:
 15414                           	opt stack 0
 15415  0034B0                     _ethernetController_streamFromRXBuffer:
 15416                           	opt stack 18
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;incstack = 0
 15420                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 15421  0034B0  0100               	movlb	0	; () banked
 15422  0034B2  6F74               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 15423                           
 15424                           ;ENC424J600.c: 354: uint8_t temp;
 15425                           ;ENC424J600.c: 355: uint8_t opcode;
 15426                           ;ENC424J600.c: 356: switch (startEnd) {
 15427  0034B4  D03C               	goto	l177
 15428  0034B6                     
 15429                           ;ENC424J600.c: 358: ENC424J600_setERXDATAReadPointer(startAddress);
 15430  0034B6  C072  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,ENC424J600_setERXDATAReadPoint
      +                          er@addr
 15431  0034BA  C073  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,ENC424J600_setERXDATAReadPoi
      +                          nter@addr+1
 15432  0034BE  EC05  F021         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 15433                           
 15434                           ;ENC424J600.c: 359: opcode = 0x2C;
 15435  0034C2  0E2C               	movlw	44
 15436  0034C4  0100               	movlb	0	; () banked
 15437  0034C6  6F75               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;ENC424J600.c: 360: PORTBbits.RB4=0;
 15441  0034C8  9881               	bcf	3969,4,c	;volatile
 15442                           
 15443                           ; BSR set to: 0
 15444                           ;ENC424J600.c: 361: ENC424J600_writeSPI(&opcode);
 15445  0034CA  0E75               	movlw	low ethernetController_streamFromRXBuffer@opcode
 15446  0034CC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15447  0034CE  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 15448  0034D0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15449  0034D2  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15450                           
 15451                           ;ENC424J600.c: 362: return 0;
 15452  0034D6  0E00               	movlw	0
 15453  0034D8  0012               	return	
 15454  0034DA                     
 15455                           ;ENC424J600.c: 364: ENC424J600_readSPI(&temp);
 15456  0034DA  0E76               	movlw	low ethernetController_streamFromRXBuffer@temp
 15457  0034DC  0100               	movlb	0	; () banked
 15458  0034DE  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15459  0034E0  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 15460  0034E2  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15461  0034E4  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
 15462                           
 15463                           ;ENC424J600.c: 365: return temp;
 15464  0034E8  0100               	movlb	0	; () banked
 15465  0034EA  5176               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 15466                           
 15467                           ; BSR set to: 0
 15468  0034EC  0012               	return	
 15469  0034EE                     l181:
 15470                           
 15471                           ; BSR set to: 0
 15472                           ;ENC424J600.c: 367: PORTBbits.RB4=1;
 15473  0034EE  8881               	bsf	3969,4,c	;volatile
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;ENC424J600.c: 369: if (ethernetController_getNextPacketPointer() == 0x3000) {
 15477  0034F0  EC67  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
 15478  0034F4  0E30               	movlw	48
 15479  0034F6  0100               	movlb	0	; () banked
 15480  0034F8  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 15481  0034FA  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 15482  0034FC  A4D8               	btfss	status,2,c
 15483  0034FE  D007               	goto	l182
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;ENC424J600.c: 370: ENC424J600_setRXTailPointer(0x55FE);
 15487  003500  0E55               	movlw	85
 15488  003502  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15489  003504  0EFE               	movlw	254
 15490  003506  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15491  003508  EC02  F022         	call	_ENC424J600_setRXTailPointer	;wreg free
 15492                           
 15493                           ;ENC424J600.c: 371: } else {
 15494  00350C  D00B               	goto	l183
 15495  00350E                     l182:
 15496                           
 15497                           ;ENC424J600.c: 372: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 15498  00350E  EC67  F023         	call	_ethernetController_getNextPacketPointer	;wreg free
 15499  003512  0EFE               	movlw	254
 15500  003514  0100               	movlb	0	; () banked
 15501  003516  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 15502  003518  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 15503  00351A  0EFF               	movlw	255
 15504  00351C  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 15505  00351E  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 15506  003520  EC02  F022         	call	_ENC424J600_setRXTailPointer	;wreg free
 15507  003524                     l183:
 15508                           
 15509                           ;ENC424J600.c: 373: }
 15510                           ;ENC424J600.c: 376: ENC424J600_writeSingleByte(0b11001100);
 15511  003524  0ECC               	movlw	204
 15512  003526  EC38  F023         	call	_ENC424J600_writeSingleByte
 15513                           
 15514                           ;ENC424J600.c: 377: return 0;
 15515  00352A  0E00               	movlw	0
 15516  00352C  0012               	return	
 15517  00352E                     l177:
 15518  00352E  0100               	movlb	0	; () banked
 15519  003530  5174               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15520                           
 15521                           ; Switch size 1, requested type "space"
 15522                           ; Number of cases is 3, Range of values is 0 to 2
 15523                           ; switch strategies available:
 15524                           ; Name         Instructions Cycles
 15525                           ; simple_byte           10     6 (average)
 15526                           ;	Chosen strategy is simple_byte
 15527  003532  0A00               	xorlw	0	; case 0
 15528  003534  B4D8               	btfsc	status,2,c
 15529  003536  D7BF               	goto	l178
 15530  003538  0A01               	xorlw	1	; case 1
 15531  00353A  B4D8               	btfsc	status,2,c
 15532  00353C  D7CE               	goto	l180
 15533  00353E  0A03               	xorlw	3	; case 2
 15534  003540  B4D8               	btfsc	status,2,c
 15535  003542  D7D5               	goto	l181
 15536                           
 15537                           ;ENC424J600.c: 379: return 0;
 15538                           
 15539                           ; BSR set to: 0
 15540  003544  0E00               	movlw	0
 15541  003546  0012               	return	
 15542  003548                     __end_of_ethernetController_streamFromRXBuffer:
 15543                           	opt stack 0
 15544                           tblptru	equ	0xFF8
 15545                           tblptrh	equ	0xFF7
 15546                           tblptrl	equ	0xFF6
 15547                           tablat	equ	0xFF5
 15548                           prodh	equ	0xFF4
 15549                           prodl	equ	0xFF3
 15550                           intcon	equ	0xFF2
 15551                           intcon3	equ	0xFF0
 15552                           postinc0	equ	0xFEE
 15553                           plusw0	equ	0xFEB
 15554                           fsr0h	equ	0xFEA
 15555                           fsr0l	equ	0xFE9
 15556                           wreg	equ	0xFE8
 15557                           indf1	equ	0xFE7
 15558                           postinc1	equ	0xFE6
 15559                           postdec1	equ	0xFE5
 15560                           plusw1	equ	0xFE3
 15561                           fsr1h	equ	0xFE2
 15562                           fsr1l	equ	0xFE1
 15563                           indf2	equ	0xFDF
 15564                           postinc2	equ	0xFDE
 15565                           postdec2	equ	0xFDD
 15566                           plusw2	equ	0xFDB
 15567                           fsr2h	equ	0xFDA
 15568                           fsr2l	equ	0xFD9
 15569                           status	equ	0xFD8
 15570                           
 15571 ;; *************** function _ethernetController_getNextPacketPointer *****************
 15572 ;; Defined at:
 15573 ;;		line 501 in file "src/enc424j600/ENC424J600.c"
 15574 ;; Parameters:    Size  Location     Type
 15575 ;;		None
 15576 ;; Auto vars:     Size  Location     Type
 15577 ;;		None
 15578 ;; Return value:  Size  Location     Type
 15579 ;;                  2    2[BANK0 ] unsigned int 
 15580 ;; Registers used:
 15581 ;;		cstack
 15582 ;; Tracked objects:
 15583 ;;		On entry : 0/0
 15584 ;;		On exit  : 0/0
 15585 ;;		Unchanged: 0/0
 15586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15587 ;;      Params:         0       2       0       0       0       0       0       0       0
 15588 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15589 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15590 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15591 ;;Total ram usage:        2 bytes
 15592 ;; Hardware stack levels used:    1
 15593 ;; Hardware stack levels required when called:    5
 15594 ;; This function calls:
 15595 ;;		_ENC424J600_getNextPacketPointer
 15596 ;; This function is called by:
 15597 ;;		_ethernetController_streamFromRXBuffer
 15598 ;;		_ethernetController_dropPacket
 15599 ;;		_ethernet_rxGetNewFrame
 15600 ;; This function uses a non-reentrant model
 15601 ;;
 15602                           
 15603                           	psect	text57
 15604  0046CE                     __ptext57:
 15605                           	opt stack 0
 15606  0046CE                     _ethernetController_getNextPacketPointer:
 15607                           	opt stack 21
 15608                           
 15609                           ;ENC424J600.c: 502: return ENC424J600_getNextPacketPointer();
 15610                           
 15611                           ;incstack = 0
 15612  0046CE  EC75  F023         	call	_ENC424J600_getNextPacketPointer	;wreg free
 15613  0046D2  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 15614  0046D6  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 15615  0046DA  0012               	return	
 15616  0046DC                     __end_of_ethernetController_getNextPacketPointer:
 15617                           	opt stack 0
 15618                           tblptru	equ	0xFF8
 15619                           tblptrh	equ	0xFF7
 15620                           tblptrl	equ	0xFF6
 15621                           tablat	equ	0xFF5
 15622                           prodh	equ	0xFF4
 15623                           prodl	equ	0xFF3
 15624                           intcon	equ	0xFF2
 15625                           intcon3	equ	0xFF0
 15626                           postinc0	equ	0xFEE
 15627                           plusw0	equ	0xFEB
 15628                           fsr0h	equ	0xFEA
 15629                           fsr0l	equ	0xFE9
 15630                           wreg	equ	0xFE8
 15631                           indf1	equ	0xFE7
 15632                           postinc1	equ	0xFE6
 15633                           postdec1	equ	0xFE5
 15634                           plusw1	equ	0xFE3
 15635                           fsr1h	equ	0xFE2
 15636                           fsr1l	equ	0xFE1
 15637                           indf2	equ	0xFDF
 15638                           postinc2	equ	0xFDE
 15639                           postdec2	equ	0xFDD
 15640                           plusw2	equ	0xFDB
 15641                           fsr2h	equ	0xFDA
 15642                           fsr2l	equ	0xFD9
 15643                           status	equ	0xFD8
 15644                           
 15645 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 15646 ;; Defined at:
 15647 ;;		line 629 in file "src/enc424j600/ENC424J600.c"
 15648 ;; Parameters:    Size  Location     Type
 15649 ;;		None
 15650 ;; Auto vars:     Size  Location     Type
 15651 ;;		None
 15652 ;; Return value:  Size  Location     Type
 15653 ;;                  2    0[BANK0 ] unsigned int 
 15654 ;; Registers used:
 15655 ;;		None
 15656 ;; Tracked objects:
 15657 ;;		On entry : 0/0
 15658 ;;		On exit  : 0/0
 15659 ;;		Unchanged: 0/0
 15660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15661 ;;      Params:         0       2       0       0       0       0       0       0       0
 15662 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15663 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15664 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15665 ;;Total ram usage:        2 bytes
 15666 ;; Hardware stack levels used:    1
 15667 ;; Hardware stack levels required when called:    4
 15668 ;; This function calls:
 15669 ;;		Nothing
 15670 ;; This function is called by:
 15671 ;;		_ethernetController_updateNextPacketPointer
 15672 ;;		_ethernetController_getNextPacketPointer
 15673 ;; This function uses a non-reentrant model
 15674 ;;
 15675                           
 15676                           	psect	text58
 15677  0046EA                     __ptext58:
 15678                           	opt stack 0
 15679  0046EA                     _ENC424J600_getNextPacketPointer:
 15680                           	opt stack 21
 15681                           
 15682                           ;ENC424J600.c: 630: return nextPacketPointer;
 15683                           
 15684                           ;incstack = 0
 15685  0046EA  C047  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 15686  0046EE  C048  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 15687  0046F2  0012               	return		;funcret
 15688  0046F4                     __end_of_ENC424J600_getNextPacketPointer:
 15689                           	opt stack 0
 15690                           tblptru	equ	0xFF8
 15691                           tblptrh	equ	0xFF7
 15692                           tblptrl	equ	0xFF6
 15693                           tablat	equ	0xFF5
 15694                           prodh	equ	0xFF4
 15695                           prodl	equ	0xFF3
 15696                           intcon	equ	0xFF2
 15697                           intcon3	equ	0xFF0
 15698                           postinc0	equ	0xFEE
 15699                           plusw0	equ	0xFEB
 15700                           fsr0h	equ	0xFEA
 15701                           fsr0l	equ	0xFE9
 15702                           wreg	equ	0xFE8
 15703                           indf1	equ	0xFE7
 15704                           postinc1	equ	0xFE6
 15705                           postdec1	equ	0xFE5
 15706                           plusw1	equ	0xFE3
 15707                           fsr1h	equ	0xFE2
 15708                           fsr1l	equ	0xFE1
 15709                           indf2	equ	0xFDF
 15710                           postinc2	equ	0xFDE
 15711                           postdec2	equ	0xFDD
 15712                           plusw2	equ	0xFDB
 15713                           fsr2h	equ	0xFDA
 15714                           fsr2l	equ	0xFD9
 15715                           status	equ	0xFD8
 15716                           
 15717 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 15718 ;; Defined at:
 15719 ;;		line 670 in file "src/enc424j600/ENC424J600.c"
 15720 ;; Parameters:    Size  Location     Type
 15721 ;;  addr            2   10[BANK0 ] unsigned int 
 15722 ;; Auto vars:     Size  Location     Type
 15723 ;;  highByte        1   14[BANK0 ] unsigned char 
 15724 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15725 ;;  opcode          1   12[BANK0 ] unsigned char 
 15726 ;; Return value:  Size  Location     Type
 15727 ;;                  1    wreg      void 
 15728 ;; Registers used:
 15729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15730 ;; Tracked objects:
 15731 ;;		On entry : 0/0
 15732 ;;		On exit  : 0/0
 15733 ;;		Unchanged: 0/0
 15734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15735 ;;      Params:         0       2       0       0       0       0       0       0       0
 15736 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15737 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15738 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15739 ;;Total ram usage:        5 bytes
 15740 ;; Hardware stack levels used:    1
 15741 ;; Hardware stack levels required when called:    6
 15742 ;; This function calls:
 15743 ;;		_ENC424J600_writeSPI
 15744 ;; This function is called by:
 15745 ;;		_ethernetController_getSourceMACAddress
 15746 ;;		_ethernetController_getEtherTypeField
 15747 ;;		_ethernetController_getRSV
 15748 ;;		_ethernetController_updateNextPacketPointer
 15749 ;;		_ethernetController_streamFromRXBuffer
 15750 ;;		_ethernetController_getDestinationMACAddress
 15751 ;; This function uses a non-reentrant model
 15752 ;;
 15753                           
 15754                           	psect	text59
 15755  00420A                     __ptext59:
 15756                           	opt stack 0
 15757  00420A                     _ENC424J600_setERXDATAReadPointer:
 15758                           	opt stack 19
 15759                           
 15760                           ;ENC424J600.c: 671: uint8_t opcode = 0x64;
 15761                           
 15762                           ;incstack = 0
 15763  00420A  0E64               	movlw	100
 15764  00420C  0100               	movlb	0	; () banked
 15765  00420E  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 15766                           
 15767                           ; BSR set to: 0
 15768                           ;ENC424J600.c: 672: uint8_t lowByte = addr & 0x00ff;
 15769  004210  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 15770                           
 15771                           ;ENC424J600.c: 673: uint8_t highByte = (addr >> 8) & 0xff;
 15772  004214  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 15773  004216  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 15774                           
 15775                           ; BSR set to: 0
 15776                           ;ENC424J600.c: 674: PORTBbits.RB4=0;
 15777  004218  9881               	bcf	3969,4,c	;volatile
 15778                           
 15779                           ; BSR set to: 0
 15780                           ;ENC424J600.c: 675: ENC424J600_writeSPI(&opcode);
 15781  00421A  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 15782  00421C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15783  00421E  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 15784  004220  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15785  004222  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15786                           
 15787                           ;ENC424J600.c: 676: ENC424J600_writeSPI(&lowByte);
 15788  004226  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 15789  004228  0100               	movlb	0	; () banked
 15790  00422A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15791  00422C  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 15792  00422E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15793  004230  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15794                           
 15795                           ;ENC424J600.c: 677: ENC424J600_writeSPI(&highByte);
 15796  004234  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 15797  004236  0100               	movlb	0	; () banked
 15798  004238  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15799  00423A  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 15800  00423C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15801  00423E  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 15802                           
 15803                           ;ENC424J600.c: 678: PORTBbits.RB4=1;
 15804  004242  8881               	bsf	3969,4,c	;volatile
 15805  004244  0012               	return		;funcret
 15806  004246                     __end_of_ENC424J600_setERXDATAReadPointer:
 15807                           	opt stack 0
 15808                           tblptru	equ	0xFF8
 15809                           tblptrh	equ	0xFF7
 15810                           tblptrl	equ	0xFF6
 15811                           tablat	equ	0xFF5
 15812                           prodh	equ	0xFF4
 15813                           prodl	equ	0xFF3
 15814                           intcon	equ	0xFF2
 15815                           intcon3	equ	0xFF0
 15816                           postinc0	equ	0xFEE
 15817                           plusw0	equ	0xFEB
 15818                           fsr0h	equ	0xFEA
 15819                           fsr0l	equ	0xFE9
 15820                           wreg	equ	0xFE8
 15821                           indf1	equ	0xFE7
 15822                           postinc1	equ	0xFE6
 15823                           postdec1	equ	0xFE5
 15824                           plusw1	equ	0xFE3
 15825                           fsr1h	equ	0xFE2
 15826                           fsr1l	equ	0xFE1
 15827                           indf2	equ	0xFDF
 15828                           postinc2	equ	0xFDE
 15829                           postdec2	equ	0xFDD
 15830                           plusw2	equ	0xFDB
 15831                           fsr2h	equ	0xFDA
 15832                           fsr2l	equ	0xFD9
 15833                           status	equ	0xFD8
 15834                           
 15835 ;; *************** function _ethernetController_updateLinkStatus *****************
 15836 ;; Defined at:
 15837 ;;		line 410 in file "src/enc424j600/ENC424J600.c"
 15838 ;; Parameters:    Size  Location     Type
 15839 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 15840 ;;		 -> stack(113), 
 15841 ;; Auto vars:     Size  Location     Type
 15842 ;;  temp16          1   35[BANK0 ] unsigned char 
 15843 ;;  temp            1   34[BANK0 ] unsigned char 
 15844 ;; Return value:  Size  Location     Type
 15845 ;;                  1    wreg      void 
 15846 ;; Registers used:
 15847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15848 ;; Tracked objects:
 15849 ;;		On entry : 0/0
 15850 ;;		On exit  : 0/0
 15851 ;;		Unchanged: 0/0
 15852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15853 ;;      Params:         0       2       0       0       0       0       0       0       0
 15854 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15855 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15856 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15857 ;;Total ram usage:        4 bytes
 15858 ;; Hardware stack levels used:    1
 15859 ;; Hardware stack levels required when called:    8
 15860 ;; This function calls:
 15861 ;;		_ENC424J600_readControlRegisterUnbanked
 15862 ;;		_ENC424J600_readPHYRegister
 15863 ;; This function is called by:
 15864 ;;		_handleStackBackgroundTasks
 15865 ;; This function uses a non-reentrant model
 15866 ;;
 15867                           
 15868                           	psect	text60
 15869  003704                     __ptext60:
 15870                           	opt stack 0
 15871  003704                     _ethernetController_updateLinkStatus:
 15872                           	opt stack 21
 15873                           
 15874                           ;ENC424J600.c: 411: uint8_t temp, temp16;
 15875                           ;ENC424J600.c: 412: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 15876                           
 15877                           ;incstack = 0
 15878  003704  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 15879  003706  0100               	movlb	0	; () banked
 15880  003708  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 15881  00370A  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 15882  00370C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 15883  00370E  0E1B               	movlw	27
 15884  003710  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 15885                           
 15886                           ;ENC424J600.c: 413: if (temp & 0x01) {
 15887  003714  0100               	movlb	0	; () banked
 15888  003716  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 15889  003718  D006               	goto	l195
 15890                           
 15891                           ; BSR set to: 0
 15892                           ;ENC424J600.c: 414: state->link = LINK_ESTABLISHED;
 15893  00371A  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15894  00371E  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15895  003722  0E01               	movlw	1
 15896  003724  D005               	goto	L3
 15897  003726                     l195:
 15898                           
 15899                           ; BSR set to: 0
 15900                           ;ENC424J600.c: 416: state->link = NO_LINK;
 15901                           
 15902                           ; BSR set to: 0
 15903  003726  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15904  00372A  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15905  00372E  0E00               	movlw	0
 15906  003730                     L3:
 15907  003730  6EDF               	movwf	indf2,c
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;ENC424J600.c: 417: }
 15911                           ;ENC424J600.c: 419: ENC424J600_readPHYRegister(0x1F, &temp16);
 15912                           
 15913                           ; BSR set to: 0
 15914  003732  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 15915  003734  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 15916  003736  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 15917  003738  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 15918  00373A  0E1F               	movlw	31
 15919  00373C  EC90  F015         	call	_ENC424J600_readPHYRegister
 15920                           
 15921                           ;ENC424J600.c: 421: if (temp16 & (1 << 3)) {
 15922  003740  0100               	movlb	0	; () banked
 15923  003742  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 15924  003744  D008               	goto	l197
 15925                           
 15926                           ; BSR set to: 0
 15927                           ;ENC424J600.c: 422: state->speed = HUNDRED_MBIT;
 15928  003746  EE20 F001          	lfsr	2,1
 15929  00374A  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15930  00374C  26D9               	addwf	fsr2l,f,c
 15931  00374E  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15932  003750  22DA               	addwfc	fsr2h,f,c
 15933  003752  0E01               	movlw	1
 15934  003754  D007               	goto	L4
 15935  003756                     l197:
 15936                           
 15937                           ; BSR set to: 0
 15938                           ;ENC424J600.c: 424: state->speed = TEN_MBIT;
 15939                           
 15940                           ; BSR set to: 0
 15941  003756  EE20 F001          	lfsr	2,1
 15942  00375A  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15943  00375C  26D9               	addwf	fsr2l,f,c
 15944  00375E  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15945  003760  22DA               	addwfc	fsr2h,f,c
 15946  003762  0E00               	movlw	0
 15947  003764                     L4:
 15948  003764  6EDF               	movwf	indf2,c
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;ENC424J600.c: 425: }
 15952                           ;ENC424J600.c: 427: if (temp16 & (1 << 4)) {
 15953                           
 15954                           ; BSR set to: 0
 15955  003766  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 15956  003768  D009               	goto	l199
 15957                           
 15958                           ; BSR set to: 0
 15959                           ;ENC424J600.c: 428: state->duplex = FULL_DUPLEX;
 15960  00376A  EE20 F002          	lfsr	2,2
 15961  00376E  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15962  003770  26D9               	addwf	fsr2l,f,c
 15963  003772  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15964  003774  22DA               	addwfc	fsr2h,f,c
 15965  003776  0E01               	movlw	1
 15966  003778  6EDF               	movwf	indf2,c
 15967                           
 15968                           ;ENC424J600.c: 429: } else {
 15969  00377A  0012               	return	
 15970  00377C                     l199:
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;ENC424J600.c: 430: state->duplex = HALF_DUPLEX;
 15974                           
 15975                           ; BSR set to: 0
 15976  00377C  EE20 F002          	lfsr	2,2
 15977  003780  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15978  003782  26D9               	addwf	fsr2l,f,c
 15979  003784  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15980  003786  22DA               	addwfc	fsr2h,f,c
 15981  003788  0E00               	movlw	0
 15982  00378A  6EDF               	movwf	indf2,c
 15983  00378C  0012               	return	
 15984  00378E                     __end_of_ethernetController_updateLinkStatus:
 15985                           	opt stack 0
 15986                           tblptru	equ	0xFF8
 15987                           tblptrh	equ	0xFF7
 15988                           tblptrl	equ	0xFF6
 15989                           tablat	equ	0xFF5
 15990                           prodh	equ	0xFF4
 15991                           prodl	equ	0xFF3
 15992                           intcon	equ	0xFF2
 15993                           intcon3	equ	0xFF0
 15994                           postinc0	equ	0xFEE
 15995                           plusw0	equ	0xFEB
 15996                           fsr0h	equ	0xFEA
 15997                           fsr0l	equ	0xFE9
 15998                           wreg	equ	0xFE8
 15999                           indf1	equ	0xFE7
 16000                           postinc1	equ	0xFE6
 16001                           postdec1	equ	0xFE5
 16002                           plusw1	equ	0xFE3
 16003                           fsr1h	equ	0xFE2
 16004                           fsr1l	equ	0xFE1
 16005                           indf2	equ	0xFDF
 16006                           postinc2	equ	0xFDE
 16007                           postdec2	equ	0xFDD
 16008                           plusw2	equ	0xFDB
 16009                           fsr2h	equ	0xFDA
 16010                           fsr2l	equ	0xFD9
 16011                           status	equ	0xFD8
 16012                           
 16013 ;; *************** function _ENC424J600_readPHYRegister *****************
 16014 ;; Defined at:
 16015 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 16016 ;; Parameters:    Size  Location     Type
 16017 ;;  addr            1    wreg     unsigned char 
 16018 ;;  data            2   14[BANK0 ] PTR unsigned int 
 16019 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;  addr            1   22[BANK0 ] unsigned char 
 16022 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 16023 ;;  temp            1   31[BANK0 ] unsigned char 
 16024 ;;  highByte        1   30[BANK0 ] unsigned char 
 16025 ;;  lowByte         1   29[BANK0 ] unsigned char 
 16026 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 16027 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;                  1    wreg      void 
 16030 ;; Registers used:
 16031 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16037 ;;      Params:         0       2       0       0       0       0       0       0       0
 16038 ;;      Locals:         0      10       0       0       0       0       0       0       0
 16039 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16040 ;;      Totals:         0      18       0       0       0       0       0       0       0
 16041 ;;Total ram usage:       18 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    7
 16044 ;; This function calls:
 16045 ;;		_ENC424J600_readControlRegisterUnbanked
 16046 ;;		_ENC424J600_writeControlRegisterUnbanked
 16047 ;; This function is called by:
 16048 ;;		_ethernetController_updateLinkStatus
 16049 ;; This function uses a non-reentrant model
 16050 ;;
 16051                           
 16052                           	psect	text61
 16053  002B20                     __ptext61:
 16054                           	opt stack 0
 16055  002B20                     _ENC424J600_readPHYRegister:
 16056                           	opt stack 21
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;incstack = 0
 16060                           ;ENC424J600_readPHYRegister@addr stored from wreg
 16061  002B20  0100               	movlb	0	; () banked
 16062  002B22  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 16063                           
 16064                           ;ENC424J600.c: 579: uint8_t PHYaddress = addr & 0x1F;
 16065  002B24  0100               	movlb	0	; () banked
 16066  002B26  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 16067  002B28  0B1F               	andlw	31
 16068  002B2A  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 16069                           
 16070                           ; BSR set to: 0
 16071                           ;ENC424J600.c: 580: uint8_t unusedBits = 0x01;
 16072  002B2C  0E01               	movlw	1
 16073  002B2E  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;ENC424J600.c: 581: uint8_t temp;
 16077                           ;ENC424J600.c: 582: uint8_t lowByte;
 16078                           ;ENC424J600.c: 583: uint8_t highByte;
 16079                           ;ENC424J600.c: 584: uint32_t timeoutCounter = 0;
 16080  002B30  0E00               	movlw	0
 16081  002B32  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 16082  002B34  0E00               	movlw	0
 16083  002B36  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 16084  002B38  0E00               	movlw	0
 16085  002B3A  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 16086  002B3C  0E00               	movlw	0
 16087  002B3E  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 16088                           
 16089                           ; BSR set to: 0
 16090                           ;ENC424J600.c: 586: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 16091  002B40  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 16092  002B42  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16093  002B44  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 16094  002B46  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16095  002B48  0E54               	movlw	84
 16096  002B4A  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16097                           
 16098                           ;ENC424J600.c: 587: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 16099  002B4E  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 16100  002B50  0100               	movlb	0	; () banked
 16101  002B52  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16102  002B54  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 16103  002B56  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16104  002B58  0E55               	movlw	85
 16105  002B5A  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16106                           
 16107                           ;ENC424J600.c: 590: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16108  002B5E  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16109  002B60  0100               	movlb	0	; () banked
 16110  002B62  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16111  002B64  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16112  002B66  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16113  002B68  0E52               	movlw	82
 16114  002B6A  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16115                           
 16116                           ;ENC424J600.c: 591: temp |= 0x01;
 16117  002B6E  0100               	movlb	0	; () banked
 16118  002B70  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16119                           
 16120                           ; BSR set to: 0
 16121                           ;ENC424J600.c: 592: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16122  002B72  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16123  002B74  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16124  002B76  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16125  002B78  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16126  002B7A  0E52               	movlw	82
 16127  002B7C  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16128                           
 16129                           ;ENC424J600.c: 594: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 16130  002B80  0E45               	movlw	69
 16131  002B82                     u11267:
 16132  002B82  2EE8               	decfsz	wreg,f,c
 16133  002B84  D7FE               	bra	u11267
 16134  002B86  F000               	nop	
 16135  002B88                     
 16136                           ;ENC424J600.c: 597: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 16137  002B88  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16138  002B8A  0100               	movlb	0	; () banked
 16139  002B8C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16140  002B8E  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16141  002B90  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16142  002B92  0E6A               	movlw	106
 16143  002B94  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16144                           
 16145                           ;ENC424J600.c: 598: timeoutCounter++;
 16146  002B98  0E01               	movlw	1
 16147  002B9A  0100               	movlb	0	; () banked
 16148  002B9C  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 16149  002B9E  0E00               	movlw	0
 16150  002BA0  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 16151  002BA2  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 16152  002BA4  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;ENC424J600.c: 599: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 16156  002BA6  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16157  002BA8  D008               	goto	u10020
 16158                           
 16159                           ; BSR set to: 0
 16160  002BAA  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16161  002BAC  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16162  002BAE  E105               	bnz	l7943
 16163  002BB0  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16164  002BB2  0E0F               	movlw	15
 16165  002BB4  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16166  002BB6  A0D8               	btfss	status,0,c
 16167  002BB8  D7E7               	goto	l258
 16168  002BBA                     u10020:
 16169  002BBA                     l7943:
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;ENC424J600.c: 600: if (timeoutCounter >= 0xfff)
 16173  002BBA  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16174  002BBC  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16175  002BBE  E140               	bnz	l263
 16176  002BC0  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 16177  002BC2  0E0F               	movlw	15
 16178  002BC4  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16179  002BC6  B0D8               	btfsc	status,0,c
 16180  002BC8  0012               	return	
 16181                           
 16182                           ; BSR set to: 0
 16183                           ;ENC424J600.c: 604: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16184                           
 16185                           ; BSR set to: 0
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;ENC424J600.c: 601: return;
 16189  002BCA  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16190  002BCC  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16191  002BCE  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16192  002BD0  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16193  002BD2  0E52               	movlw	82
 16194  002BD4  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16195                           
 16196                           ;ENC424J600.c: 605: temp &= ~0x01;
 16197  002BD8  0100               	movlb	0	; () banked
 16198  002BDA  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 16199                           
 16200                           ; BSR set to: 0
 16201                           ;ENC424J600.c: 606: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16202  002BDC  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 16203  002BDE  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16204  002BE0  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 16205  002BE2  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16206  002BE4  0E52               	movlw	82
 16207  002BE6  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16208                           
 16209                           ;ENC424J600.c: 609: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 16210  002BEA  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 16211  002BEC  0100               	movlb	0	; () banked
 16212  002BEE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16213  002BF0  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 16214  002BF2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16215  002BF4  0E68               	movlw	104
 16216  002BF6  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16217                           
 16218                           ;ENC424J600.c: 610: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 16219  002BFA  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 16220  002BFC  0100               	movlb	0	; () banked
 16221  002BFE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16222  002C00  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 16223  002C02  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16224  002C04  0E69               	movlw	105
 16225  002C06  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16226                           
 16227                           ;ENC424J600.c: 611: *data = (lowByte | ((highByte << 8)&0xff00));
 16228  002C0A  0E00               	movlw	0
 16229  002C0C  0100               	movlb	0	; () banked
 16230  002C0E  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 16231  002C10  0EFF               	movlw	255
 16232  002C12  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 16233  002C14  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 16234  002C16  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 16235  002C18  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 16236  002C1A  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 16237  002C1C  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 16238  002C1E  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 16239  002C20  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 16240  002C22  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 16241  002C24  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 16242  002C26  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 16243  002C28  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 16244  002C2A  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 16245  002C2C  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 16246  002C2E  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 16247  002C30  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 16248  002C34  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 16249  002C38  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 16250  002C3C  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 16251  002C40                     l263:
 16252                           
 16253                           ; BSR set to: 0
 16254  002C40  0012               	return		;funcret
 16255  002C42                     __end_of_ENC424J600_readPHYRegister:
 16256                           	opt stack 0
 16257                           tblptru	equ	0xFF8
 16258                           tblptrh	equ	0xFF7
 16259                           tblptrl	equ	0xFF6
 16260                           tablat	equ	0xFF5
 16261                           prodh	equ	0xFF4
 16262                           prodl	equ	0xFF3
 16263                           intcon	equ	0xFF2
 16264                           intcon3	equ	0xFF0
 16265                           postinc0	equ	0xFEE
 16266                           plusw0	equ	0xFEB
 16267                           fsr0h	equ	0xFEA
 16268                           fsr0l	equ	0xFE9
 16269                           wreg	equ	0xFE8
 16270                           indf1	equ	0xFE7
 16271                           postinc1	equ	0xFE6
 16272                           postdec1	equ	0xFE5
 16273                           plusw1	equ	0xFE3
 16274                           fsr1h	equ	0xFE2
 16275                           fsr1l	equ	0xFE1
 16276                           indf2	equ	0xFDF
 16277                           postinc2	equ	0xFDE
 16278                           postdec2	equ	0xFDD
 16279                           plusw2	equ	0xFDB
 16280                           fsr2h	equ	0xFDA
 16281                           fsr2l	equ	0xFD9
 16282                           status	equ	0xFD8
 16283                           
 16284 ;; *************** function _ethernetController_setLEDConfig *****************
 16285 ;; Defined at:
 16286 ;;		line 459 in file "src/enc424j600/ENC424J600.c"
 16287 ;; Parameters:    Size  Location     Type
 16288 ;;  LED             1    wreg     enum E5558
 16289 ;;  conf            1   14[BANK0 ] enum E5562
 16290 ;; Auto vars:     Size  Location     Type
 16291 ;;  LED             1   15[BANK0 ] enum E5558
 16292 ;;  data            1   16[BANK0 ] unsigned char 
 16293 ;; Return value:  Size  Location     Type
 16294 ;;                  1    wreg      void 
 16295 ;; Registers used:
 16296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16297 ;; Tracked objects:
 16298 ;;		On entry : 0/0
 16299 ;;		On exit  : 0/0
 16300 ;;		Unchanged: 0/0
 16301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16302 ;;      Params:         0       1       0       0       0       0       0       0       0
 16303 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16304 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16305 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16306 ;;Total ram usage:        3 bytes
 16307 ;; Hardware stack levels used:    1
 16308 ;; Hardware stack levels required when called:    7
 16309 ;; This function calls:
 16310 ;;		_ENC424J600_readControlRegisterUnbanked
 16311 ;;		_ENC424J600_writeControlRegisterUnbanked
 16312 ;; This function is called by:
 16313 ;;		_handleStackBackgroundTasks
 16314 ;;		_main
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text62
 16319  003676                     __ptext62:
 16320                           	opt stack 0
 16321  003676                     _ethernetController_setLEDConfig:
 16322                           	opt stack 22
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;incstack = 0
 16326                           ;ethernetController_setLEDConfig@LED stored from wreg
 16327  003676  0100               	movlb	0	; () banked
 16328  003678  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 16329                           
 16330                           ;ENC424J600.c: 460: uint8_t data;
 16331                           ;ENC424J600.c: 461: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16332  00367A  0E70               	movlw	low ethernetController_setLEDConfig@data
 16333  00367C  0100               	movlb	0	; () banked
 16334  00367E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16335  003680  0E00               	movlw	high ethernetController_setLEDConfig@data
 16336  003682  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16337  003684  0E75               	movlw	117
 16338  003686  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16339                           
 16340                           ;ENC424J600.c: 462: if (LED == LEDB) {
 16341  00368A  0100               	movlb	0	; () banked
 16342  00368C  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 16343  00368E  B4D8               	btfsc	status,2,c
 16344  003690  D00B               	goto	l205
 16345  003692  D015               	goto	l204
 16346  003694                     
 16347                           ; BSR set to: 0
 16348                           ;ENC424J600.c: 467: data &= ~0x0f;
 16349                           
 16350                           ; BSR set to: 0
 16351                           
 16352                           ;ENC424J600.c: 466: case LED_OFF:
 16353                           
 16354                           ; BSR set to: 0
 16355  003694  0EF0               	movlw	240
 16356  003696  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16357                           
 16358                           ; BSR set to: 0
 16359                           ;ENC424J600.c: 468: data |= 0x01;
 16360  003698  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 16361                           
 16362                           ;ENC424J600.c: 469: break;
 16363  00369A  D02C               	goto	l216
 16364  00369C                     
 16365                           ; BSR set to: 0
 16366                           ;ENC424J600.c: 471: data &= ~0x0f;
 16367                           
 16368                           ; BSR set to: 0
 16369  00369C  0EF0               	movlw	240
 16370  00369E  D018               	goto	L5
 16371  0036A0                     
 16372                           ; BSR set to: 0
 16373                           ;ENC424J600.c: 474: data &= ~0x0f;
 16374                           
 16375                           ; BSR set to: 0
 16376  0036A0  0EF0               	movlw	240
 16377  0036A2  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16378                           
 16379                           ;ENC424J600.c: 475: data |= 0x06;
 16380  0036A4  0E06               	movlw	6
 16381  0036A6  D019               	goto	L6
 16382  0036A8                     l205:
 16383                           
 16384                           ; BSR set to: 0
 16385                           
 16386                           ; BSR set to: 0
 16387  0036A8  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 16388                           
 16389                           ; Switch size 1, requested type "space"
 16390                           ; Number of cases is 3, Range of values is 0 to 2
 16391                           ; switch strategies available:
 16392                           ; Name         Instructions Cycles
 16393                           ; simple_byte           10     6 (average)
 16394                           ;	Chosen strategy is simple_byte
 16395  0036AA  0A00               	xorlw	0	; case 0
 16396  0036AC  B4D8               	btfsc	status,2,c
 16397  0036AE  D7F6               	goto	l209
 16398  0036B0  0A01               	xorlw	1	; case 1
 16399  0036B2  B4D8               	btfsc	status,2,c
 16400  0036B4  D7EF               	goto	l206
 16401  0036B6  0A03               	xorlw	3	; case 2
 16402  0036B8  B4D8               	btfsc	status,2,c
 16403  0036BA  D7F2               	goto	l210
 16404  0036BC  D7EB               	goto	l206
 16405  0036BE                     l204:
 16406                           
 16407                           ; BSR set to: 0
 16408                           
 16409                           ; BSR set to: 0
 16410  0036BE  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 16411  0036C0  B4D8               	btfsc	status,2,c
 16412  0036C2  D00D               	goto	l213
 16413  0036C4  D017               	goto	l216
 16414  0036C6                     
 16415                           ; BSR set to: 0
 16416                           ;ENC424J600.c: 482: data &= ~(0x0f << 4);
 16417                           
 16418                           ; BSR set to: 0
 16419                           
 16420                           ;ENC424J600.c: 481: case LED_OFF:
 16421                           
 16422                           ; BSR set to: 0
 16423  0036C6  0E0F               	movlw	15
 16424  0036C8  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;ENC424J600.c: 483: data |= (0x01 << 4);
 16428  0036CA  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 16429                           
 16430                           ;ENC424J600.c: 484: break;
 16431  0036CC  D013               	goto	l216
 16432  0036CE                     
 16433                           ; BSR set to: 0
 16434                           ;ENC424J600.c: 486: data &= ~(0x0f << 4);
 16435                           
 16436                           ; BSR set to: 0
 16437  0036CE  0E0F               	movlw	15
 16438  0036D0                     L5:
 16439  0036D0  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16440                           
 16441                           ;ENC424J600.c: 487: break;
 16442  0036D2  D010               	goto	l216
 16443  0036D4                     
 16444                           ; BSR set to: 0
 16445                           ;ENC424J600.c: 489: data &= ~(0x0f << 4);
 16446                           
 16447                           ; BSR set to: 0
 16448  0036D4  0E0F               	movlw	15
 16449  0036D6  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16450                           
 16451                           ;ENC424J600.c: 490: data |= (0x06 << 4);
 16452  0036D8  0E60               	movlw	96
 16453  0036DA                     L6:
 16454  0036DA  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16455                           
 16456                           ; BSR set to: 0
 16457                           ;ENC424J600.c: 492: }
 16458                           
 16459                           ;ENC424J600.c: 491: break;
 16460  0036DC  D00B               	goto	l216
 16461  0036DE                     l213:
 16462                           
 16463                           ; BSR set to: 0
 16464                           
 16465                           ; BSR set to: 0
 16466  0036DE  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 16467                           
 16468                           ; Switch size 1, requested type "space"
 16469                           ; Number of cases is 3, Range of values is 0 to 2
 16470                           ; switch strategies available:
 16471                           ; Name         Instructions Cycles
 16472                           ; simple_byte           10     6 (average)
 16473                           ;	Chosen strategy is simple_byte
 16474  0036E0  0A00               	xorlw	0	; case 0
 16475  0036E2  B4D8               	btfsc	status,2,c
 16476  0036E4  D7F4               	goto	l217
 16477  0036E6  0A01               	xorlw	1	; case 1
 16478  0036E8  B4D8               	btfsc	status,2,c
 16479  0036EA  D7ED               	goto	l214
 16480  0036EC  0A03               	xorlw	3	; case 2
 16481  0036EE  B4D8               	btfsc	status,2,c
 16482  0036F0  D7F1               	goto	l218
 16483  0036F2  D7E9               	goto	l214
 16484  0036F4                     l216:
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;ENC424J600.c: 493: }
 16488                           ;ENC424J600.c: 494: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16489                           
 16490                           ; BSR set to: 0
 16491                           
 16492                           ; BSR set to: 0
 16493                           
 16494                           ; BSR set to: 0
 16495  0036F4  0E70               	movlw	low ethernetController_setLEDConfig@data
 16496  0036F6  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 16497  0036F8  0E00               	movlw	high ethernetController_setLEDConfig@data
 16498  0036FA  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16499  0036FC  0E75               	movlw	117
 16500  0036FE  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 16501  003702  0012               	return		;funcret
 16502  003704                     __end_of_ethernetController_setLEDConfig:
 16503                           	opt stack 0
 16504                           tblptru	equ	0xFF8
 16505                           tblptrh	equ	0xFF7
 16506                           tblptrl	equ	0xFF6
 16507                           tablat	equ	0xFF5
 16508                           prodh	equ	0xFF4
 16509                           prodl	equ	0xFF3
 16510                           intcon	equ	0xFF2
 16511                           intcon3	equ	0xFF0
 16512                           postinc0	equ	0xFEE
 16513                           plusw0	equ	0xFEB
 16514                           fsr0h	equ	0xFEA
 16515                           fsr0l	equ	0xFE9
 16516                           wreg	equ	0xFE8
 16517                           indf1	equ	0xFE7
 16518                           postinc1	equ	0xFE6
 16519                           postdec1	equ	0xFE5
 16520                           plusw1	equ	0xFE3
 16521                           fsr1h	equ	0xFE2
 16522                           fsr1l	equ	0xFE1
 16523                           indf2	equ	0xFDF
 16524                           postinc2	equ	0xFDE
 16525                           postdec2	equ	0xFDD
 16526                           plusw2	equ	0xFDB
 16527                           fsr2h	equ	0xFDA
 16528                           fsr2l	equ	0xFD9
 16529                           status	equ	0xFD8
 16530                           
 16531 ;; *************** function _ethernetController_pollInterruptFlags *****************
 16532 ;; Defined at:
 16533 ;;		line 315 in file "src/enc424j600/ENC424J600.c"
 16534 ;; Parameters:    Size  Location     Type
 16535 ;;		None
 16536 ;; Auto vars:     Size  Location     Type
 16537 ;;  reg             2   29[BANK0 ] unsigned int 
 16538 ;;  flags           2   27[BANK0 ] struct interruptFlags
 16539 ;; Return value:  Size  Location     Type
 16540 ;;                  2   24[BANK0 ] struct interruptFlags
 16541 ;; Registers used:
 16542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16543 ;; Tracked objects:
 16544 ;;		On entry : 0/0
 16545 ;;		On exit  : 0/0
 16546 ;;		Unchanged: 0/0
 16547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16548 ;;      Params:         0       2       0       0       0       0       0       0       0
 16549 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16550 ;;      Temps:          0       1       0       0       0       0       0       0       0
 16551 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16552 ;;Total ram usage:        7 bytes
 16553 ;; Hardware stack levels used:    1
 16554 ;; Hardware stack levels required when called:    8
 16555 ;; This function calls:
 16556 ;;		_ENC424J600_getInterruptFlags
 16557 ;; This function is called by:
 16558 ;;		_handleStackBackgroundTasks
 16559 ;; This function uses a non-reentrant model
 16560 ;;
 16561                           
 16562                           	psect	text63
 16563  0029FA                     __ptext63:
 16564                           	opt stack 0
 16565  0029FA                     _ethernetController_pollInterruptFlags:
 16566                           	opt stack 21
 16567                           
 16568                           ;ENC424J600.c: 316: interruptFlags_t flags;
 16569                           ;ENC424J600.c: 317: uint16_t reg = ENC424J600_getInterruptFlags();
 16570                           
 16571                           ;incstack = 0
 16572  0029FA  ECFD  F01F         	call	_ENC424J600_getInterruptFlags	;wreg free
 16573  0029FE  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 16574  002A02  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 16575                           
 16576                           ;ENC424J600.c: 318: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 16577  002A06  0100               	movlb	0	; () banked
 16578  002A08  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 16579  002A0A  D003               	goto	u10280
 16580  002A0C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16581  002A0E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16582  002A10  D002               	goto	u10298
 16583  002A12                     u10280:
 16584  002A12  0100               	movlb	0	; () banked
 16585  002A14  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16586  002A16                     u10298:
 16587  002A16  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16588  002A18  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16589  002A1A  0BFE               	andlw	-2
 16590  002A1C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16591  002A1E  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16592                           
 16593                           ; BSR set to: 0
 16594                           ;ENC424J600.c: 319: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 16595  002A20  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 16596  002A22  D003               	goto	u10300
 16597  002A24  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16598  002A26  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16599  002A28  D002               	goto	u10318
 16600  002A2A                     u10300:
 16601  002A2A  0100               	movlb	0	; () banked
 16602  002A2C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16603  002A2E                     u10318:
 16604  002A2E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16605  002A30  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16606  002A32  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16607  002A34  0BFD               	andlw	-3
 16608  002A36  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16609  002A38  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;ENC424J600.c: 320: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 16613  002A3A  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 16614  002A3C  D003               	goto	u10320
 16615  002A3E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16616  002A40  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16617  002A42  D002               	goto	u10338
 16618  002A44                     u10320:
 16619  002A44  0100               	movlb	0	; () banked
 16620  002A46  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16621  002A48                     u10338:
 16622  002A48  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16623  002A4A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16624  002A4C  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16625  002A4E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16626  002A50  0BFB               	andlw	-5
 16627  002A52  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16628  002A54  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;ENC424J600.c: 321: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 16632  002A56  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 16633  002A58  D003               	goto	u10340
 16634  002A5A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16635  002A5C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16636  002A5E  D002               	goto	u10358
 16637  002A60                     u10340:
 16638  002A60  0100               	movlb	0	; () banked
 16639  002A62  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16640  002A64                     u10358:
 16641  002A64  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16642  002A66  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16643  002A68  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16644  002A6A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16645  002A6C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16646  002A6E  0BF7               	andlw	-9
 16647  002A70  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16648  002A72  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16649                           
 16650                           ; BSR set to: 0
 16651                           ;ENC424J600.c: 323: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 16652  002A74  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 16653  002A76  D003               	goto	u10360
 16654  002A78  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16655  002A7A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16656  002A7C  D002               	goto	u10378
 16657  002A7E                     u10360:
 16658  002A7E  0100               	movlb	0	; () banked
 16659  002A80  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16660  002A82                     u10378:
 16661  002A82  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16662  002A84  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16663  002A86  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16664  002A88  0BEF               	andlw	-17
 16665  002A8A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16666  002A8C  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16667                           
 16668                           ; BSR set to: 0
 16669                           ;ENC424J600.c: 324: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 16670  002A8E  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 16671  002A90  D003               	goto	u10380
 16672  002A92  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16673  002A94  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16674  002A96  D002               	goto	u10398
 16675  002A98                     u10380:
 16676  002A98  0100               	movlb	0	; () banked
 16677  002A9A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16678  002A9C                     u10398:
 16679  002A9C  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16680  002A9E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16681  002AA0  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16682  002AA2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16683  002AA4  0BDF               	andlw	-33
 16684  002AA6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16685  002AA8  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;ENC424J600.c: 326: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 16689  002AAA  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 16690  002AAC  D003               	goto	u10400
 16691  002AAE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16692  002AB0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16693  002AB2  D002               	goto	u10418
 16694  002AB4                     u10400:
 16695  002AB4  0100               	movlb	0	; () banked
 16696  002AB6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16697  002AB8                     u10418:
 16698  002AB8  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16699  002ABA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16700  002ABC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16701  002ABE  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16702  002AC0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16703  002AC2  0BBF               	andlw	-65
 16704  002AC4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16705  002AC6  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16706                           
 16707                           ; BSR set to: 0
 16708                           ;ENC424J600.c: 327: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 16709  002AC8  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 16710  002ACA  D003               	goto	u10420
 16711  002ACC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16712  002ACE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16713  002AD0  D002               	goto	u10438
 16714  002AD2                     u10420:
 16715  002AD2  0100               	movlb	0	; () banked
 16716  002AD4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16717  002AD6                     u10438:
 16718  002AD6  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16719  002AD8  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16720  002ADA  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16721  002ADC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16722  002ADE  0B7F               	andlw	-129
 16723  002AE0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16724  002AE2  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;ENC424J600.c: 328: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 16728  002AE4  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 16729  002AE6  D003               	goto	u10440
 16730  002AE8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16731  002AEA  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16732  002AEC  D002               	goto	u10458
 16733  002AEE                     u10440:
 16734  002AEE  0100               	movlb	0	; () banked
 16735  002AF0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16736  002AF2                     u10458:
 16737  002AF2  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16738  002AF4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16739  002AF6  0BFE               	andlw	-2
 16740  002AF8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16741  002AFA  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16742                           
 16743                           ; BSR set to: 0
 16744                           ;ENC424J600.c: 329: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 16745  002AFC  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 16746  002AFE  D003               	goto	u10460
 16747  002B00  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16748  002B02  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16749  002B04  D002               	goto	u10478
 16750  002B06                     u10460:
 16751  002B06  0100               	movlb	0	; () banked
 16752  002B08  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16753  002B0A                     u10478:
 16754  002B0A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16755  002B0C  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16756  002B0E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16757  002B10  0BFD               	andlw	-3
 16758  002B12  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16759  002B14  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16760                           
 16761                           ; BSR set to: 0
 16762                           ;ENC424J600.c: 330: return flags;
 16763  002B16  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 16764  002B1A  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 16765  002B1E  0012               	return	
 16766  002B20                     __end_of_ethernetController_pollInterruptFlags:
 16767                           	opt stack 0
 16768                           tblptru	equ	0xFF8
 16769                           tblptrh	equ	0xFF7
 16770                           tblptrl	equ	0xFF6
 16771                           tablat	equ	0xFF5
 16772                           prodh	equ	0xFF4
 16773                           prodl	equ	0xFF3
 16774                           intcon	equ	0xFF2
 16775                           intcon3	equ	0xFF0
 16776                           postinc0	equ	0xFEE
 16777                           plusw0	equ	0xFEB
 16778                           fsr0h	equ	0xFEA
 16779                           fsr0l	equ	0xFE9
 16780                           wreg	equ	0xFE8
 16781                           indf1	equ	0xFE7
 16782                           postinc1	equ	0xFE6
 16783                           postdec1	equ	0xFE5
 16784                           plusw1	equ	0xFE3
 16785                           fsr1h	equ	0xFE2
 16786                           fsr1l	equ	0xFE1
 16787                           indf2	equ	0xFDF
 16788                           postinc2	equ	0xFDE
 16789                           postdec2	equ	0xFDD
 16790                           plusw2	equ	0xFDB
 16791                           fsr2h	equ	0xFDA
 16792                           fsr2l	equ	0xFD9
 16793                           status	equ	0xFD8
 16794                           
 16795 ;; *************** function _ENC424J600_getInterruptFlags *****************
 16796 ;; Defined at:
 16797 ;;		line 735 in file "src/enc424j600/ENC424J600.c"
 16798 ;; Parameters:    Size  Location     Type
 16799 ;;		None
 16800 ;; Auto vars:     Size  Location     Type
 16801 ;;  high            1   23[BANK0 ] unsigned char 
 16802 ;;  low             1   22[BANK0 ] unsigned char 
 16803 ;; Return value:  Size  Location     Type
 16804 ;;                  2   14[BANK0 ] unsigned int 
 16805 ;; Registers used:
 16806 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16807 ;; Tracked objects:
 16808 ;;		On entry : 0/0
 16809 ;;		On exit  : 0/0
 16810 ;;		Unchanged: 0/0
 16811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16812 ;;      Params:         0       2       0       0       0       0       0       0       0
 16813 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16814 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16815 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16816 ;;Total ram usage:       10 bytes
 16817 ;; Hardware stack levels used:    1
 16818 ;; Hardware stack levels required when called:    7
 16819 ;; This function calls:
 16820 ;;		_ENC424J600_readControlRegisterUnbanked
 16821 ;; This function is called by:
 16822 ;;		_ethernetController_pollInterruptFlags
 16823 ;; This function uses a non-reentrant model
 16824 ;;
 16825                           
 16826                           	psect	text64
 16827  003FFA                     __ptext64:
 16828                           	opt stack 0
 16829  003FFA                     _ENC424J600_getInterruptFlags:
 16830                           	opt stack 21
 16831                           
 16832                           ;ENC424J600.c: 736: uint8_t low, high;
 16833                           ;ENC424J600.c: 737: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 16834                           
 16835                           ; BSR set to: 0
 16836                           ;incstack = 0
 16837  003FFA  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 16838  003FFC  0100               	movlb	0	; () banked
 16839  003FFE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16840  004000  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 16841  004002  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16842  004004  0E1D               	movlw	29
 16843  004006  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16844                           
 16845                           ;ENC424J600.c: 738: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 16846  00400A  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 16847  00400C  0100               	movlb	0	; () banked
 16848  00400E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 16849  004010  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 16850  004012  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 16851  004014  0E1C               	movlw	28
 16852  004016  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 16853                           
 16854                           ;ENC424J600.c: 739: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 16855  00401A  0E00               	movlw	0
 16856  00401C  0100               	movlb	0	; () banked
 16857  00401E  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 16858  004020  0EFF               	movlw	255
 16859  004022  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 16860  004024  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 16861  004026  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 16862  004028  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 16863  00402A  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 16864  00402C  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 16865  00402E  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 16866  004030  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 16867  004032  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 16868  004034  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 16869  004036  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 16870  004038  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 16871  00403A  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 16872  00403C  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 16873  00403E  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 16874  004040  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 16875  004042  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 16876  004044  0012               	return	
 16877  004046                     __end_of_ENC424J600_getInterruptFlags:
 16878                           	opt stack 0
 16879                           tblptru	equ	0xFF8
 16880                           tblptrh	equ	0xFF7
 16881                           tblptrl	equ	0xFF6
 16882                           tablat	equ	0xFF5
 16883                           prodh	equ	0xFF4
 16884                           prodl	equ	0xFF3
 16885                           intcon	equ	0xFF2
 16886                           intcon3	equ	0xFF0
 16887                           postinc0	equ	0xFEE
 16888                           plusw0	equ	0xFEB
 16889                           fsr0h	equ	0xFEA
 16890                           fsr0l	equ	0xFE9
 16891                           wreg	equ	0xFE8
 16892                           indf1	equ	0xFE7
 16893                           postinc1	equ	0xFE6
 16894                           postdec1	equ	0xFE5
 16895                           plusw1	equ	0xFE3
 16896                           fsr1h	equ	0xFE2
 16897                           fsr1l	equ	0xFE1
 16898                           indf2	equ	0xFDF
 16899                           postinc2	equ	0xFDE
 16900                           postdec2	equ	0xFDD
 16901                           plusw2	equ	0xFDB
 16902                           fsr2h	equ	0xFDA
 16903                           fsr2l	equ	0xFD9
 16904                           status	equ	0xFD8
 16905                           
 16906 ;; *************** function _ethernetController_newPacketAvailable *****************
 16907 ;; Defined at:
 16908 ;;		line 406 in file "src/enc424j600/ENC424J600.c"
 16909 ;; Parameters:    Size  Location     Type
 16910 ;;		None
 16911 ;; Auto vars:     Size  Location     Type
 16912 ;;		None
 16913 ;; Return value:  Size  Location     Type
 16914 ;;                  1    wreg      unsigned char 
 16915 ;; Registers used:
 16916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16917 ;; Tracked objects:
 16918 ;;		On entry : 0/0
 16919 ;;		On exit  : 0/0
 16920 ;;		Unchanged: 0/0
 16921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16922 ;;      Params:         0       0       0       0       0       0       0       0       0
 16923 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16924 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16925 ;;      Totals:         0       0       0       0       0       0       0       0       0
 16926 ;;Total ram usage:        0 bytes
 16927 ;; Hardware stack levels used:    1
 16928 ;; Hardware stack levels required when called:    8
 16929 ;; This function calls:
 16930 ;;		_ENC424J600_getPacketCount
 16931 ;; This function is called by:
 16932 ;;		_handleStackBackgroundTasks
 16933 ;; This function uses a non-reentrant model
 16934 ;;
 16935                           
 16936                           	psect	text65
 16937  0046AC                     __ptext65:
 16938                           	opt stack 0
 16939  0046AC                     _ethernetController_newPacketAvailable:
 16940                           	opt stack 21
 16941                           
 16942                           ;ENC424J600.c: 407: return (unsigned) (ENC424J600_getPacketCount() != 0);
 16943                           
 16944                           ; BSR set to: 0
 16945                           ;incstack = 0
 16946  0046AC  EC2B  F023         	call	_ENC424J600_getPacketCount	;wreg free
 16947  0046B0  0900               	iorlw	0
 16948  0046B2  B4D8               	btfsc	status,2,c
 16949  0046B4  D002               	goto	u10480
 16950  0046B6  0E01               	movlw	1
 16951  0046B8  0012               	return	
 16952  0046BA                     u10480:
 16953  0046BA  0E00               	movlw	0
 16954  0046BC  0012               	return	
 16955  0046BE                     __end_of_ethernetController_newPacketAvailable:
 16956                           	opt stack 0
 16957                           tblptru	equ	0xFF8
 16958                           tblptrh	equ	0xFF7
 16959                           tblptrl	equ	0xFF6
 16960                           tablat	equ	0xFF5
 16961                           prodh	equ	0xFF4
 16962                           prodl	equ	0xFF3
 16963                           intcon	equ	0xFF2
 16964                           intcon3	equ	0xFF0
 16965                           postinc0	equ	0xFEE
 16966                           plusw0	equ	0xFEB
 16967                           fsr0h	equ	0xFEA
 16968                           fsr0l	equ	0xFE9
 16969                           wreg	equ	0xFE8
 16970                           indf1	equ	0xFE7
 16971                           postinc1	equ	0xFE6
 16972                           postdec1	equ	0xFE5
 16973                           plusw1	equ	0xFE3
 16974                           fsr1h	equ	0xFE2
 16975                           fsr1l	equ	0xFE1
 16976                           indf2	equ	0xFDF
 16977                           postinc2	equ	0xFDE
 16978                           postdec2	equ	0xFDD
 16979                           plusw2	equ	0xFDB
 16980                           fsr2h	equ	0xFDA
 16981                           fsr2l	equ	0xFD9
 16982                           status	equ	0xFD8
 16983                           
 16984 ;; *************** function _ethernetController_clearInterruptFlag *****************
 16985 ;; Defined at:
 16986 ;;		line 333 in file "src/enc424j600/ENC424J600.c"
 16987 ;; Parameters:    Size  Location     Type
 16988 ;;  flag            1    wreg     unsigned char 
 16989 ;; Auto vars:     Size  Location     Type
 16990 ;;  flag            1   18[BANK0 ] unsigned char 
 16991 ;; Return value:  Size  Location     Type
 16992 ;;                  1    wreg      void 
 16993 ;; Registers used:
 16994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16995 ;; Tracked objects:
 16996 ;;		On entry : 0/0
 16997 ;;		On exit  : 0/0
 16998 ;;		Unchanged: 0/0
 16999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17000 ;;      Params:         0       0       0       0       0       0       0       0       0
 17001 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17002 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17003 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17004 ;;Total ram usage:        1 bytes
 17005 ;; Hardware stack levels used:    1
 17006 ;; Hardware stack levels required when called:    8
 17007 ;; This function calls:
 17008 ;;		_ENC424J600_clearInterruptFlag
 17009 ;; This function is called by:
 17010 ;;		_handleStackBackgroundTasks
 17011 ;; This function uses a non-reentrant model
 17012 ;;
 17013                           
 17014                           	psect	text66
 17015  0046DC                     __ptext66:
 17016                           	opt stack 0
 17017  0046DC                     _ethernetController_clearInterruptFlag:
 17018                           	opt stack 21
 17019                           
 17020                           ;incstack = 0
 17021                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 17022  0046DC  0100               	movlb	0	; () banked
 17023  0046DE  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 17024                           
 17025                           ;ENC424J600.c: 334: ENC424J600_clearInterruptFlag(flag);
 17026  0046E0  0100               	movlb	0	; () banked
 17027  0046E2  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 17028  0046E4  ECC7  F01B         	call	_ENC424J600_clearInterruptFlag
 17029  0046E8  0012               	return		;funcret
 17030  0046EA                     __end_of_ethernetController_clearInterruptFlag:
 17031                           	opt stack 0
 17032                           tblptru	equ	0xFF8
 17033                           tblptrh	equ	0xFF7
 17034                           tblptrl	equ	0xFF6
 17035                           tablat	equ	0xFF5
 17036                           prodh	equ	0xFF4
 17037                           prodl	equ	0xFF3
 17038                           intcon	equ	0xFF2
 17039                           intcon3	equ	0xFF0
 17040                           postinc0	equ	0xFEE
 17041                           plusw0	equ	0xFEB
 17042                           fsr0h	equ	0xFEA
 17043                           fsr0l	equ	0xFE9
 17044                           wreg	equ	0xFE8
 17045                           indf1	equ	0xFE7
 17046                           postinc1	equ	0xFE6
 17047                           postdec1	equ	0xFE5
 17048                           plusw1	equ	0xFE3
 17049                           fsr1h	equ	0xFE2
 17050                           fsr1l	equ	0xFE1
 17051                           indf2	equ	0xFDF
 17052                           postinc2	equ	0xFDE
 17053                           postdec2	equ	0xFDD
 17054                           plusw2	equ	0xFDB
 17055                           fsr2h	equ	0xFDA
 17056                           fsr2l	equ	0xFD9
 17057                           status	equ	0xFD8
 17058                           
 17059 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 17060 ;; Defined at:
 17061 ;;		line 742 in file "src/enc424j600/ENC424J600.c"
 17062 ;; Parameters:    Size  Location     Type
 17063 ;;  flag            1    wreg     unsigned char 
 17064 ;; Auto vars:     Size  Location     Type
 17065 ;;  flag            1   16[BANK0 ] unsigned char 
 17066 ;;  temp            1   17[BANK0 ] unsigned char 
 17067 ;; Return value:  Size  Location     Type
 17068 ;;                  1    wreg      void 
 17069 ;; Registers used:
 17070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17071 ;; Tracked objects:
 17072 ;;		On entry : 0/0
 17073 ;;		On exit  : 0/0
 17074 ;;		Unchanged: 0/0
 17075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17076 ;;      Params:         0       0       0       0       0       0       0       0       0
 17077 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17078 ;;      Temps:          0       2       0       0       0       0       0       0       0
 17079 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17080 ;;Total ram usage:        4 bytes
 17081 ;; Hardware stack levels used:    1
 17082 ;; Hardware stack levels required when called:    7
 17083 ;; This function calls:
 17084 ;;		_ENC424J600_readControlRegisterUnbanked
 17085 ;;		_ENC424J600_writeControlRegisterUnbanked
 17086 ;; This function is called by:
 17087 ;;		_ethernetController_clearInterruptFlag
 17088 ;; This function uses a non-reentrant model
 17089 ;;
 17090                           
 17091                           	psect	text67
 17092  00378E                     __ptext67:
 17093                           	opt stack 0
 17094  00378E                     _ENC424J600_clearInterruptFlag:
 17095                           	opt stack 21
 17096                           
 17097                           ;incstack = 0
 17098                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 17099  00378E  0100               	movlb	0	; () banked
 17100  003790  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17101                           
 17102                           ;ENC424J600.c: 743: uint8_t temp;
 17103                           ;ENC424J600.c: 744: if (flag < 8) {
 17104  003792  0E08               	movlw	8
 17105  003794  0100               	movlb	0	; () banked
 17106  003796  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 17107  003798  D01E               	goto	l317
 17108                           
 17109                           ; BSR set to: 0
 17110                           ;ENC424J600.c: 745: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 17111  00379A  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17112  00379C  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17113  00379E  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17114  0037A0  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17115  0037A2  0E1C               	movlw	28
 17116  0037A4  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17117                           
 17118                           ;ENC424J600.c: 746: temp &= ~(1 << flag);
 17119  0037A8  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17120  0037AC  0E01               	movlw	1
 17121  0037AE  0100               	movlb	0	; () banked
 17122  0037B0  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17123  0037B2  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17124  0037B4  D002               	goto	u9994
 17125  0037B6                     u9995:
 17126  0037B6  90D8               	bcf	status,0,c
 17127  0037B8  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17128  0037BA                     u9994:
 17129  0037BA  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17130  0037BC  D7FC               	goto	u9995
 17131  0037BE  0100               	movlb	0	; () banked
 17132  0037C0  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17133  0037C2  0AFF               	xorlw	255
 17134  0037C4  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;ENC424J600.c: 747: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 17138  0037C6  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17139  0037C8  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17140  0037CA  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17141  0037CC  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17142  0037CE  0E1C               	movlw	28
 17143  0037D0  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17144                           
 17145                           ;ENC424J600.c: 748: } else {
 17146  0037D4  0012               	return	
 17147  0037D6                     l317:
 17148                           
 17149                           ;ENC424J600.c: 749: flag -= 8;
 17150  0037D6  0E08               	movlw	8
 17151  0037D8  0100               	movlb	0	; () banked
 17152  0037DA  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 17153                           
 17154                           ; BSR set to: 0
 17155                           ;ENC424J600.c: 750: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 17156  0037DC  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17157  0037DE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17158  0037E0  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17159  0037E2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17160  0037E4  0E1D               	movlw	29
 17161  0037E6  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17162                           
 17163                           ;ENC424J600.c: 751: temp &= ~(1 << flag);
 17164  0037EA  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 17165  0037EE  0E01               	movlw	1
 17166  0037F0  0100               	movlb	0	; () banked
 17167  0037F2  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 17168  0037F4  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17169  0037F6  D002               	goto	u10004
 17170  0037F8                     u10005:
 17171  0037F8  90D8               	bcf	status,0,c
 17172  0037FA  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 17173  0037FC                     u10004:
 17174  0037FC  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 17175  0037FE  D7FC               	goto	u10005
 17176  003800  0100               	movlb	0	; () banked
 17177  003802  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 17178  003804  0AFF               	xorlw	255
 17179  003806  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 17180                           
 17181                           ;ENC424J600.c: 752: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 17182  003808  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 17183  00380A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17184  00380C  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 17185  00380E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17186  003810  0E1D               	movlw	29
 17187  003812  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17188  003816  0012               	return	
 17189  003818                     __end_of_ENC424J600_clearInterruptFlag:
 17190                           	opt stack 0
 17191                           tblptru	equ	0xFF8
 17192                           tblptrh	equ	0xFF7
 17193                           tblptrl	equ	0xFF6
 17194                           tablat	equ	0xFF5
 17195                           prodh	equ	0xFF4
 17196                           prodl	equ	0xFF3
 17197                           intcon	equ	0xFF2
 17198                           intcon3	equ	0xFF0
 17199                           postinc0	equ	0xFEE
 17200                           plusw0	equ	0xFEB
 17201                           fsr0h	equ	0xFEA
 17202                           fsr0l	equ	0xFE9
 17203                           wreg	equ	0xFE8
 17204                           indf1	equ	0xFE7
 17205                           postinc1	equ	0xFE6
 17206                           postdec1	equ	0xFE5
 17207                           plusw1	equ	0xFE3
 17208                           fsr1h	equ	0xFE2
 17209                           fsr1l	equ	0xFE1
 17210                           indf2	equ	0xFDF
 17211                           postinc2	equ	0xFDE
 17212                           postdec2	equ	0xFDD
 17213                           plusw2	equ	0xFDB
 17214                           fsr2h	equ	0xFDA
 17215                           fsr2l	equ	0xFD9
 17216                           status	equ	0xFD8
 17217                           
 17218 ;; *************** function _ethernetController_init *****************
 17219 ;; Defined at:
 17220 ;;		line 33 in file "src/enc424j600/ENC424J600.c"
 17221 ;; Parameters:    Size  Location     Type
 17222 ;;		None
 17223 ;; Auto vars:     Size  Location     Type
 17224 ;;  err             3   73[BANK0 ] struct error
 17225 ;; Return value:  Size  Location     Type
 17226 ;;                  3   70[BANK0 ] struct error
 17227 ;; Registers used:
 17228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17229 ;; Tracked objects:
 17230 ;;		On entry : 0/0
 17231 ;;		On exit  : 0/0
 17232 ;;		Unchanged: 0/0
 17233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17234 ;;      Params:         0       3       0       0       0       0       0       0       0
 17235 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17236 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17237 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17238 ;;Total ram usage:        6 bytes
 17239 ;; Hardware stack levels used:    1
 17240 ;; Hardware stack levels required when called:    8
 17241 ;; This function calls:
 17242 ;;		_ENC424J600_enableAutoMACInsertion
 17243 ;;		_ENC424J600_enableReception
 17244 ;;		_ENC424J600_initSPI
 17245 ;;		_ENC424J600_setNextPacketPointer
 17246 ;;		_ENC424J600_setRXBufferStartAddress
 17247 ;;		_ENC424J600_setRXTailPointer
 17248 ;;		_ethernetController_checkDeviceId
 17249 ;;		_ethernetController_softReset
 17250 ;; This function is called by:
 17251 ;;		_main
 17252 ;; This function uses a non-reentrant model
 17253 ;;
 17254                           
 17255                           	psect	text68
 17256  003B74                     __ptext68:
 17257                           	opt stack 0
 17258  003B74                     _ethernetController_init:
 17259                           	opt stack 22
 17260                           
 17261                           ;ENC424J600.c: 34: error_t err;
 17262                           ;ENC424J600.c: 35: ENC424J600_initSPI();
 17263                           
 17264                           ;incstack = 0
 17265  003B74  EC10  F023         	call	_ENC424J600_initSPI	;wreg free
 17266                           
 17267                           ;ENC424J600.c: 36: err = ethernetController_softReset();
 17268  003B78  EC2F  F013         	call	_ethernetController_softReset	;wreg free
 17269  003B7C  C09A  F0A9         	movff	?_ethernetController_softReset,ethernetController_init@err
 17270  003B80  C09B  F0AA         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 17271  003B84  C09C  F0AB         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 17272                           
 17273                           ;ENC424J600.c: 39: }
 17274                           ;ENC424J600.c: 40: err = ethernetController_checkDeviceId();
 17275  003B88  ECD6  F01F         	call	_ethernetController_checkDeviceId	;wreg free
 17276  003B8C  C06E  F0A9         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 17277  003B90  C06F  F0AA         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 17278  003B94  C070  F0AB         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 17279                           
 17280                           ;ENC424J600.c: 43: }
 17281                           ;ENC424J600.c: 62: ENC424J600_setRXBufferStartAddress(0x3000);
 17282  003B98  0E30               	movlw	48
 17283  003B9A  0100               	movlb	0	; () banked
 17284  003B9C  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 17285  003B9E  0E00               	movlw	0
 17286  003BA0  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 17287  003BA2  EC17  F022         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 17288                           
 17289                           ;ENC424J600.c: 63: ENC424J600_setNextPacketPointer(0x3000);
 17290  003BA6  0E30               	movlw	48
 17291  003BA8  0100               	movlb	0	; () banked
 17292  003BAA  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 17293  003BAC  0E00               	movlw	0
 17294  003BAE  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 17295  003BB0  EC7A  F023         	call	_ENC424J600_setNextPacketPointer	;wreg free
 17296                           
 17297                           ;ENC424J600.c: 64: ENC424J600_setRXTailPointer(0x5FFE);
 17298  003BB4  0E5F               	movlw	95
 17299  003BB6  0100               	movlb	0	; () banked
 17300  003BB8  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17301  003BBA  0EFE               	movlw	254
 17302  003BBC  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17303  003BBE  EC02  F022         	call	_ENC424J600_setRXTailPointer	;wreg free
 17304                           
 17305                           ;ENC424J600.c: 66: ENC424J600_enableReception();
 17306  003BC2  EC7F  F023         	call	_ENC424J600_enableReception	;wreg free
 17307                           
 17308                           ;ENC424J600.c: 67: ENC424J600_enableAutoMACInsertion();
 17309  003BC6  EC54  F022         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 17310                           
 17311                           ;ENC424J600.c: 69: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17312  003BCA  0E01               	movlw	1
 17313  003BCC  0100               	movlb	0	; () banked
 17314  003BCE  6FA9               	movwf	ethernetController_init@err& (0+255),b
 17315                           
 17316                           ; BSR set to: 0
 17317                           ;ENC424J600.c: 70: err.code = (uint16_t)0;
 17318  003BD0  0E00               	movlw	0
 17319  003BD2  6FAB               	movwf	(ethernetController_init@err+2)& (0+255),b
 17320  003BD4  0E00               	movlw	0
 17321  003BD6  6FAA               	movwf	(ethernetController_init@err+1)& (0+255),b
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;ENC424J600.c: 71: return err;
 17325  003BD8  C0A9  F0A6         	movff	ethernetController_init@err,?_ethernetController_init
 17326  003BDC  C0AA  F0A7         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17327  003BE0  C0AB  F0A8         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17328  003BE4  0012               	return	
 17329  003BE6                     __end_of_ethernetController_init:
 17330                           	opt stack 0
 17331                           tblptru	equ	0xFF8
 17332                           tblptrh	equ	0xFF7
 17333                           tblptrl	equ	0xFF6
 17334                           tablat	equ	0xFF5
 17335                           prodh	equ	0xFF4
 17336                           prodl	equ	0xFF3
 17337                           intcon	equ	0xFF2
 17338                           intcon3	equ	0xFF0
 17339                           postinc0	equ	0xFEE
 17340                           plusw0	equ	0xFEB
 17341                           fsr0h	equ	0xFEA
 17342                           fsr0l	equ	0xFE9
 17343                           wreg	equ	0xFE8
 17344                           indf1	equ	0xFE7
 17345                           postinc1	equ	0xFE6
 17346                           postdec1	equ	0xFE5
 17347                           plusw1	equ	0xFE3
 17348                           fsr1h	equ	0xFE2
 17349                           fsr1l	equ	0xFE1
 17350                           indf2	equ	0xFDF
 17351                           postinc2	equ	0xFDE
 17352                           postdec2	equ	0xFDD
 17353                           plusw2	equ	0xFDB
 17354                           fsr2h	equ	0xFDA
 17355                           fsr2l	equ	0xFD9
 17356                           status	equ	0xFD8
 17357                           
 17358 ;; *************** function _ethernetController_softReset *****************
 17359 ;; Defined at:
 17360 ;;		line 74 in file "src/enc424j600/ENC424J600.c"
 17361 ;; Parameters:    Size  Location     Type
 17362 ;;		None
 17363 ;; Auto vars:     Size  Location     Type
 17364 ;;  err             3   67[BANK0 ] struct error
 17365 ;;  receivedData    2   65[BANK0 ] unsigned char [2]
 17366 ;;  dataToSend      2   63[BANK0 ] unsigned char [2]
 17367 ;;  comFailCount    1   62[BANK0 ] unsigned char 
 17368 ;; Return value:  Size  Location     Type
 17369 ;;                  3   58[BANK0 ] struct error
 17370 ;; Registers used:
 17371 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17372 ;; Tracked objects:
 17373 ;;		On entry : 0/0
 17374 ;;		On exit  : 0/0
 17375 ;;		Unchanged: 0/0
 17376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17377 ;;      Params:         0       3       0       0       0       0       0       0       0
 17378 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17379 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17380 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17381 ;;Total ram usage:       12 bytes
 17382 ;; Hardware stack levels used:    1
 17383 ;; Hardware stack levels required when called:    7
 17384 ;; This function calls:
 17385 ;;		_ENC424J600_readControlRegisterUnbanked
 17386 ;;		_ENC424J600_writeControlRegisterUnbanked
 17387 ;;		_ENC424J600_writeSingleByte
 17388 ;;		_UARTTransmitText
 17389 ;; This function is called by:
 17390 ;;		_ethernetController_init
 17391 ;; This function uses a non-reentrant model
 17392 ;;
 17393                           
 17394                           	psect	text69
 17395  00265E                     __ptext69:
 17396                           	opt stack 0
 17397  00265E                     _ethernetController_softReset:
 17398                           	opt stack 22
 17399                           
 17400                           ;ENC424J600.c: 92: uint8_t comFailCount = 0;
 17401                           
 17402                           ; BSR set to: 0
 17403                           ;incstack = 0
 17404  00265E  0E00               	movlw	0
 17405  002660  0100               	movlb	0	; () banked
 17406  002662  6F9E               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;ENC424J600.c: 93: uint8_t dataToSend[2] = {0x12, 0x34};
 17410  002664  C04D  F09F         	movff	ethernetController_softReset@F5826,ethernetController_softReset@dataToSend
 17411  002668  C04E  F0A0         	movff	ethernetController_softReset@F5826+1,ethernetController_softReset@dataToSend+1
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;ENC424J600.c: 94: uint8_t receivedData[2] = {0, 0};
 17415  00266C  C045  F0A1         	movff	ethernetController_softReset@F5828,ethernetController_softReset@receivedData
 17416  002670  C046  F0A2         	movff	ethernetController_softReset@F5828+1,ethernetController_softReset@receivedData+1
 17417                           
 17418                           ;ENC424J600.c: 95: error_t err;
 17419                           ;ENC424J600.c: 96: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17420  002674  0E01               	movlw	1
 17421  002676  6FA3               	movwf	ethernetController_softReset@err& (0+255),b
 17422                           
 17423                           ;ENC424J600.c: 97: err.code = (uint16_t)0;
 17424  002678  0E00               	movlw	0
 17425  00267A  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17426  00267C  0E00               	movlw	0
 17427  00267E  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;ENC424J600.c: 98: if (comFailCount < 5) {
 17431  002680  0E05               	movlw	5
 17432  002682  619E               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 17433  002684  D072               	goto	l82
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;ENC424J600.c: 100: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 17437  002686  0E9F               	movlw	low ethernetController_softReset@dataToSend
 17438  002688  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17439  00268A  0E00               	movlw	high ethernetController_softReset@dataToSend
 17440  00268C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17441  00268E  0E16               	movlw	22
 17442  002690  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17443                           
 17444                           ;ENC424J600.c: 101: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 17445  002694  0EA0               	movlw	low (ethernetController_softReset@dataToSend+1)
 17446  002696  0100               	movlb	0	; () banked
 17447  002698  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17448  00269A  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 17449  00269C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17450  00269E  0E17               	movlw	23
 17451  0026A0  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17452                           
 17453                           ;ENC424J600.c: 103: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17454  0026A4  0EA1               	movlw	low ethernetController_softReset@receivedData
 17455  0026A6  0100               	movlb	0	; () banked
 17456  0026A8  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17457  0026AA  0E00               	movlw	high ethernetController_softReset@receivedData
 17458  0026AC  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17459  0026AE  0E16               	movlw	22
 17460  0026B0  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17461                           
 17462                           ;ENC424J600.c: 104: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17463  0026B4  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17464  0026B6  0100               	movlb	0	; () banked
 17465  0026B8  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17466  0026BA  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17467  0026BC  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17468  0026BE  0E17               	movlw	23
 17469  0026C0  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17470                           
 17471                           ;ENC424J600.c: 106: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 17472  0026C4  0100               	movlb	0	; () banked
 17473  0026C6  519F               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 17474  0026C8  19A1               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 17475  0026CA  A4D8               	btfss	status,2,c
 17476  0026CC  D04B               	goto	l86
 17477                           
 17478                           ; BSR set to: 0
 17479  0026CE  51A0               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 17480  0026D0  19A2               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17481  0026D2  A4D8               	btfss	status,2,c
 17482  0026D4  D047               	goto	l86
 17483                           
 17484                           ; BSR set to: 0
 17485                           ;ENC424J600.c: 108: UARTTransmitText("Writing 0x1234 successful.\n\r");
 17486  0026D6  0EE2               	movlw	low STR_1
 17487  0026D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17488  0026DA  0E7D               	movlw	high STR_1
 17489  0026DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17490  0026DE  EC31  F01F         	call	_UARTTransmitText	;wreg free
 17491                           
 17492                           ;ENC424J600.c: 109: ENC424J600_writeSingleByte(0b11001010);
 17493  0026E2  0ECA               	movlw	202
 17494  0026E4  EC38  F023         	call	_ENC424J600_writeSingleByte
 17495                           
 17496                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 17497  0026E8  0E42               	movlw	66
 17498  0026EA                     u11277:
 17499  0026EA  2EE8               	decfsz	wreg,f,c
 17500  0026EC  D7FE               	bra	u11277
 17501  0026EE  D000               	nop2	
 17502                           
 17503                           ;ENC424J600.c: 112: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17504  0026F0  0EA1               	movlw	low ethernetController_softReset@receivedData
 17505  0026F2  0100               	movlb	0	; () banked
 17506  0026F4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17507  0026F6  0E00               	movlw	high ethernetController_softReset@receivedData
 17508  0026F8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17509  0026FA  0E16               	movlw	22
 17510  0026FC  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17511                           
 17512                           ;ENC424J600.c: 113: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17513  002700  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 17514  002702  0100               	movlb	0	; () banked
 17515  002704  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17516  002706  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17517  002708  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17518  00270A  0E17               	movlw	23
 17519  00270C  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17520                           
 17521                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 17522  002710  0100               	movlb	0	; () banked
 17523  002712  51A1               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 17524  002714  A4D8               	btfss	status,2,c
 17525  002716  D013               	goto	l84
 17526                           
 17527                           ; BSR set to: 0
 17528  002718  51A2               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17529  00271A  A4D8               	btfss	status,2,c
 17530  00271C  D010               	goto	l84
 17531                           
 17532                           ; BSR set to: 0
 17533                           ;ENC424J600.c: 116: UARTTransmitText("Reset success.\n\r");
 17534  00271E  0EF9               	movlw	low STR_2
 17535  002720  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17536  002722  0E7E               	movlw	high STR_2
 17537  002724  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17538  002726  EC31  F01F         	call	_UARTTransmitText	;wreg free
 17539                           
 17540                           ;ENC424J600.c: 118: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 17541  00272A  0E03               	movlw	3
 17542  00272C  0100               	movlb	0	; () banked
 17543  00272E  6F9D               	movwf	??_ethernetController_softReset& (0+255),b
 17544  002730  0EA7               	movlw	167
 17545  002732                     u11287:
 17546  002732  2EE8               	decfsz	wreg,f,c
 17547  002734  D7FE               	bra	u11287
 17548  002736  2F9D               	decfsz	??_ethernetController_softReset& (0+255),f,b
 17549  002738  D7FC               	bra	u11287
 17550  00273A  D000               	nop2	
 17551  00273C  D00C               	goto	l8125
 17552  00273E                     l84:
 17553                           
 17554                           ;ENC424J600.c: 121: UARTTransmitText("Reset failed.\n\r");
 17555  00273E  0E2A               	movlw	low STR_3
 17556  002740  0100               	movlb	0	; () banked
 17557  002742  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17558  002744  0E7F               	movlw	high STR_3
 17559  002746  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17560  002748  EC31  F01F         	call	_UARTTransmitText	;wreg free
 17561                           
 17562                           ;ENC424J600.c: 122: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17563  00274C  0E01               	movlw	1
 17564  00274E  0100               	movlb	0	; () banked
 17565  002750  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17566  002752  0E2E               	movlw	46
 17567  002754  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17568  002756                     l8125:
 17569                           
 17570                           ; BSR set to: 0
 17571                           ;ENC424J600.c: 123: return err;
 17572  002756  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17573  00275A  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17574  00275E  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17575                           
 17576                           ; BSR set to: 0
 17577  002762  0012               	return	
 17578  002764                     l86:
 17579                           
 17580                           ;ENC424J600.c: 124: }
 17581                           ;ENC424J600.c: 125: }
 17582                           ;ENC424J600.c: 126: comFailCount++;
 17583                           
 17584                           ; BSR set to: 0
 17585                           
 17586                           ; BSR set to: 0
 17587  002764  0100               	movlb	0	; () banked
 17588  002766  2B9E               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 17589                           
 17590                           ;ENC424J600.c: 127: } else {
 17591  002768  D012               	goto	l87
 17592  00276A                     l82:
 17593                           
 17594                           ; BSR set to: 0
 17595                           ;ENC424J600.c: 128: UARTTransmitText("Writing 0x1234 failed.\n\r");
 17596                           
 17597                           ; BSR set to: 0
 17598  00276A  0E1B               	movlw	low STR_4
 17599  00276C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17600  00276E  0E7E               	movlw	high STR_4
 17601  002770  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17602  002772  EC31  F01F         	call	_UARTTransmitText	;wreg free
 17603                           
 17604                           ;ENC424J600.c: 129: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17605  002776  0E01               	movlw	1
 17606  002778  0100               	movlb	0	; () banked
 17607  00277A  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17608  00277C  0E2E               	movlw	46
 17609  00277E  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;ENC424J600.c: 130: return err;
 17613  002780  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17614  002784  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17615  002788  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17616                           
 17617                           ; BSR set to: 0
 17618  00278C  0012               	return	
 17619  00278E                     l87:
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;ENC424J600.c: 131: }
 17623                           ;ENC424J600.c: 132: return err;
 17624  00278E  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17625  002792  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17626  002796  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17627  00279A  0012               	return		;funcret
 17628  00279C                     __end_of_ethernetController_softReset:
 17629                           	opt stack 0
 17630                           tblptru	equ	0xFF8
 17631                           tblptrh	equ	0xFF7
 17632                           tblptrl	equ	0xFF6
 17633                           tablat	equ	0xFF5
 17634                           prodh	equ	0xFF4
 17635                           prodl	equ	0xFF3
 17636                           intcon	equ	0xFF2
 17637                           intcon3	equ	0xFF0
 17638                           postinc0	equ	0xFEE
 17639                           plusw0	equ	0xFEB
 17640                           fsr0h	equ	0xFEA
 17641                           fsr0l	equ	0xFE9
 17642                           wreg	equ	0xFE8
 17643                           indf1	equ	0xFE7
 17644                           postinc1	equ	0xFE6
 17645                           postdec1	equ	0xFE5
 17646                           plusw1	equ	0xFE3
 17647                           fsr1h	equ	0xFE2
 17648                           fsr1l	equ	0xFE1
 17649                           indf2	equ	0xFDF
 17650                           postinc2	equ	0xFDE
 17651                           postdec2	equ	0xFDD
 17652                           plusw2	equ	0xFDB
 17653                           fsr2h	equ	0xFDA
 17654                           fsr2l	equ	0xFD9
 17655                           status	equ	0xFD8
 17656                           
 17657 ;; *************** function _UARTTransmitText *****************
 17658 ;; Defined at:
 17659 ;;		line 53 in file "src/system/uart.c"
 17660 ;; Parameters:    Size  Location     Type
 17661 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 17662 ;;		 -> STR_69(17), STR_68(4), STR_67(8), STR_66(3), 
 17663 ;;		 -> STR_65(2), STR_64(3), STR_63(16), STR_62(15), 
 17664 ;;		 -> STR_61(10), STR_60(2), STR_59(3), STR_58(5), 
 17665 ;;		 -> STR_57(3), STR_56(2), STR_55(39), arpEntryToString@string(50), 
 17666 ;;		 -> ipAdressToString@address(16), STR_54(18), STR_53(4), STR_52(5), 
 17667 ;;		 -> macToString@address(18), intToString@number(10), STR_51(5), STR_50(9), 
 17668 ;;		 -> STR_49(30), STR_48(55), STR_47(37), STR_46(15), 
 17669 ;;		 -> STR_45(14), STR_44(19), STR_43(30), STR_42(17), 
 17670 ;;		 -> STR_41(8), STR_40(29), STR_39(29), STR_38(20), 
 17671 ;;		 -> STR_37(19), STR_36(19), STR_35(13), STR_34(51), 
 17672 ;;		 -> STR_33(28), STR_32(4), STR_31(23), STR_30(4), 
 17673 ;;		 -> STR_29(21), STR_28(12), STR_27(38), STR_26(3), 
 17674 ;;		 -> STR_25(9), STR_24(2), STR_23(12), STR_22(24), 
 17675 ;;		 -> STR_21(3), STR_20(3), STR_19(3), STR_18(5), 
 17676 ;;		 -> STR_17(2), STR_16(2), STR_15(5), STR_14(3), 
 17677 ;;		 -> STR_13(3), STR_12(2), STR_11(7), STR_10(6), 
 17678 ;;		 -> STR_9(16), STR_8(10), STR_7(12), STR_6(2), 
 17679 ;;		 -> STR_5(2), ethernetController_getDeviceName@string(11), STR_4(25), STR_3(16), 
 17680 ;;		 -> STR_2(17), STR_1(29), 
 17681 ;; Auto vars:     Size  Location     Type
 17682 ;;		None
 17683 ;; Return value:  Size  Location     Type
 17684 ;;                  1    wreg      void 
 17685 ;; Registers used:
 17686 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 17687 ;; Tracked objects:
 17688 ;;		On entry : 0/0
 17689 ;;		On exit  : 0/0
 17690 ;;		Unchanged: 0/0
 17691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17692 ;;      Params:         0       2       0       0       0       0       0       0       0
 17693 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17694 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17695 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17696 ;;Total ram usage:        2 bytes
 17697 ;; Hardware stack levels used:    1
 17698 ;; Hardware stack levels required when called:    4
 17699 ;; This function calls:
 17700 ;;		Nothing
 17701 ;; This function is called by:
 17702 ;;		_ethernetController_softReset
 17703 ;;		_ethernet_rxGetNewFrame
 17704 ;;		_handleStackBackgroundTasks
 17705 ;;		_main
 17706 ;;		_printEthernetState
 17707 ;;		_printErrorMessage
 17708 ;;		_UARTTransmitInt
 17709 ;;		_ARP_handleNewPacket
 17710 ;;		_ARP_replyIfNeeded
 17711 ;;		_ipv4_sendFrame
 17712 ;;		_ipv4_handleNewPacket
 17713 ;;		_printArpTable
 17714 ;; This function uses a non-reentrant model
 17715 ;;
 17716                           
 17717                           	psect	text70
 17718  003E62                     __ptext70:
 17719                           	opt stack 0
 17720  003E62                     _UARTTransmitText:
 17721                           	opt stack 25
 17722                           
 17723                           ;uart.c: 54: while (*str) {
 17724                           
 17725                           ;incstack = 0
 17726  003E62  D016               	goto	u8690
 17727  003E64                     
 17728                           ;uart.c: 55: TXREG1 = *str++;
 17729  003E64  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17730  003E68  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17731  003E6C  6AF8               	clrf	tblptru,c
 17732  003E6E  0E07               	movlw	(high __ramtop+-1)
 17733  003E70  64F7               	cpfsgt	tblptrh,c
 17734  003E72  D003               	bra	u8687
 17735  003E74  0008               	tblrd		*
 17736  003E76  50F5               	movf	tablat,w,c
 17737  003E78  D005               	bra	u8680
 17738  003E7A                     u8687:
 17739  003E7A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17740  003E7E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17741  003E82  50EF               	movf	indf0,w,c
 17742  003E84                     u8680:
 17743  003E84  6EAD               	movwf	4013,c	;volatile
 17744  003E86  0100               	movlb	0	; () banked
 17745  003E88  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 17746  003E8A  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 17747  003E8C                     
 17748                           ; BSR set to: 0
 17749  003E8C  A2AC               	btfss	4012,1,c	;volatile
 17750  003E8E  D7FE               	goto	l749
 17751  003E90                     u8690:
 17752  003E90  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 17753  003E94  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 17754  003E98  6AF8               	clrf	tblptru,c
 17755  003E9A  0E07               	movlw	(high __ramtop+-1)
 17756  003E9C  64F7               	cpfsgt	tblptrh,c
 17757  003E9E  D003               	bra	u8707
 17758  003EA0  0008               	tblrd		*
 17759  003EA2  50F5               	movf	tablat,w,c
 17760  003EA4  D005               	bra	u8700
 17761  003EA6                     u8707:
 17762  003EA6  CFF6 FFE9          	movff	tblptrl,fsr0l
 17763  003EAA  CFF7 FFEA          	movff	tblptrh,fsr0h
 17764  003EAE  50EF               	movf	indf0,w,c
 17765  003EB0                     u8700:
 17766  003EB0  0900               	iorlw	0
 17767  003EB2  B4D8               	btfsc	status,2,c
 17768  003EB4  0012               	return	
 17769  003EB6  D7D6               	goto	l747
 17770  003EB8                     __end_of_UARTTransmitText:
 17771                           	opt stack 0
 17772                           tblptru	equ	0xFF8
 17773                           tblptrh	equ	0xFF7
 17774                           tblptrl	equ	0xFF6
 17775                           tablat	equ	0xFF5
 17776                           prodh	equ	0xFF4
 17777                           prodl	equ	0xFF3
 17778                           intcon	equ	0xFF2
 17779                           intcon3	equ	0xFF0
 17780                           indf0	equ	0xFEF
 17781                           postinc0	equ	0xFEE
 17782                           plusw0	equ	0xFEB
 17783                           fsr0h	equ	0xFEA
 17784                           fsr0l	equ	0xFE9
 17785                           wreg	equ	0xFE8
 17786                           indf1	equ	0xFE7
 17787                           postinc1	equ	0xFE6
 17788                           postdec1	equ	0xFE5
 17789                           plusw1	equ	0xFE3
 17790                           fsr1h	equ	0xFE2
 17791                           fsr1l	equ	0xFE1
 17792                           indf2	equ	0xFDF
 17793                           postinc2	equ	0xFDE
 17794                           postdec2	equ	0xFDD
 17795                           plusw2	equ	0xFDB
 17796                           fsr2h	equ	0xFDA
 17797                           fsr2l	equ	0xFD9
 17798                           status	equ	0xFD8
 17799                           
 17800 ;; *************** function _ethernetController_checkDeviceId *****************
 17801 ;; Defined at:
 17802 ;;		line 135 in file "src/enc424j600/ENC424J600.c"
 17803 ;; Parameters:    Size  Location     Type
 17804 ;;		None
 17805 ;; Auto vars:     Size  Location     Type
 17806 ;;  err             3   18[BANK0 ] struct error
 17807 ;;  data            1   17[BANK0 ] unsigned char 
 17808 ;; Return value:  Size  Location     Type
 17809 ;;                  3   14[BANK0 ] struct error
 17810 ;; Registers used:
 17811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17817 ;;      Params:         0       3       0       0       0       0       0       0       0
 17818 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17819 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17820 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17821 ;;Total ram usage:        7 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; Hardware stack levels required when called:    7
 17824 ;; This function calls:
 17825 ;;		_ENC424J600_readControlRegisterUnbanked
 17826 ;; This function is called by:
 17827 ;;		_ethernetController_init
 17828 ;;		_main
 17829 ;; This function uses a non-reentrant model
 17830 ;;
 17831                           
 17832                           	psect	text71
 17833  003FAC                     __ptext71:
 17834                           	opt stack 0
 17835  003FAC                     _ethernetController_checkDeviceId:
 17836                           	opt stack 22
 17837                           
 17838                           ;ENC424J600.c: 136: error_t err;
 17839                           ;ENC424J600.c: 137: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17840                           
 17841                           ;incstack = 0
 17842  003FAC  0E01               	movlw	1
 17843  003FAE  0100               	movlb	0	; () banked
 17844  003FB0  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 17845                           
 17846                           ;ENC424J600.c: 138: err.code = (uint16_t)0;
 17847  003FB2  0E00               	movlw	0
 17848  003FB4  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17849  003FB6  0E00               	movlw	0
 17850  003FB8  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17851                           
 17852                           ;ENC424J600.c: 139: uint8_t data = 0;
 17853  003FBA  0E00               	movlw	0
 17854  003FBC  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 17855                           
 17856                           ; BSR set to: 0
 17857                           ;ENC424J600.c: 140: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 17858  003FBE  0E71               	movlw	low ethernetController_checkDeviceId@data
 17859  003FC0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17860  003FC2  0E00               	movlw	high ethernetController_checkDeviceId@data
 17861  003FC4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17862  003FC6  0E74               	movlw	116
 17863  003FC8  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 17864                           
 17865                           ;ENC424J600.c: 141: if (((data >> 5)&0x07) == 0b001)
 17866  003FCC  0100               	movlb	0	; () banked
 17867  003FCE  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 17868  003FD0  42E8               	rrncf	wreg,f,c
 17869  003FD2  0B07               	andlw	7
 17870  003FD4  0B07               	andlw	7
 17871  003FD6  06E8               	decf	wreg,f,c
 17872  003FD8  A4D8               	btfss	status,2,c
 17873  003FDA  D004               	goto	l90
 17874                           
 17875                           ; BSR set to: 0
 17876                           ;ENC424J600.c: 142: err.code = (uint16_t)0;
 17877  003FDC  0E00               	movlw	0
 17878  003FDE  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17879  003FE0  0E00               	movlw	0
 17880  003FE2  D003               	goto	L7
 17881  003FE4                     l90:
 17882                           
 17883                           ; BSR set to: 0
 17884                           ;ENC424J600.c: 143: else
 17885                           ;ENC424J600.c: 144: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 17886                           
 17887                           ; BSR set to: 0
 17888  003FE4  0E01               	movlw	1
 17889  003FE6  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17890  003FE8  0E2D               	movlw	45
 17891  003FEA                     L7:
 17892  003FEA  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;ENC424J600.c: 145: return err;
 17896                           
 17897                           ; BSR set to: 0
 17898  003FEC  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 17899  003FF0  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 17900  003FF4  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 17901  003FF8  0012               	return	
 17902  003FFA                     __end_of_ethernetController_checkDeviceId:
 17903                           	opt stack 0
 17904                           tblptru	equ	0xFF8
 17905                           tblptrh	equ	0xFF7
 17906                           tblptrl	equ	0xFF6
 17907                           tablat	equ	0xFF5
 17908                           prodh	equ	0xFF4
 17909                           prodl	equ	0xFF3
 17910                           intcon	equ	0xFF2
 17911                           intcon3	equ	0xFF0
 17912                           indf0	equ	0xFEF
 17913                           postinc0	equ	0xFEE
 17914                           plusw0	equ	0xFEB
 17915                           fsr0h	equ	0xFEA
 17916                           fsr0l	equ	0xFE9
 17917                           wreg	equ	0xFE8
 17918                           indf1	equ	0xFE7
 17919                           postinc1	equ	0xFE6
 17920                           postdec1	equ	0xFE5
 17921                           plusw1	equ	0xFE3
 17922                           fsr1h	equ	0xFE2
 17923                           fsr1l	equ	0xFE1
 17924                           indf2	equ	0xFDF
 17925                           postinc2	equ	0xFDE
 17926                           postdec2	equ	0xFDD
 17927                           plusw2	equ	0xFDB
 17928                           fsr2h	equ	0xFDA
 17929                           fsr2l	equ	0xFD9
 17930                           status	equ	0xFD8
 17931                           
 17932 ;; *************** function _ENC424J600_setRXTailPointer *****************
 17933 ;; Defined at:
 17934 ;;		line 688 in file "src/enc424j600/ENC424J600.c"
 17935 ;; Parameters:    Size  Location     Type
 17936 ;;  addr            2   14[BANK0 ] unsigned int 
 17937 ;; Auto vars:     Size  Location     Type
 17938 ;;  highByte        1   17[BANK0 ] unsigned char 
 17939 ;;  lowByte         1   16[BANK0 ] unsigned char 
 17940 ;; Return value:  Size  Location     Type
 17941 ;;                  1    wreg      void 
 17942 ;; Registers used:
 17943 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17944 ;; Tracked objects:
 17945 ;;		On entry : 0/0
 17946 ;;		On exit  : 0/0
 17947 ;;		Unchanged: 0/0
 17948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17949 ;;      Params:         0       2       0       0       0       0       0       0       0
 17950 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17951 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17952 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17953 ;;Total ram usage:        4 bytes
 17954 ;; Hardware stack levels used:    1
 17955 ;; Hardware stack levels required when called:    7
 17956 ;; This function calls:
 17957 ;;		_ENC424J600_writeControlRegisterUnbanked
 17958 ;; This function is called by:
 17959 ;;		_ethernetController_init
 17960 ;;		_ethernetController_streamFromRXBuffer
 17961 ;;		_ethernetController_dropPacket
 17962 ;; This function uses a non-reentrant model
 17963 ;;
 17964                           
 17965                           	psect	text72
 17966  004404                     __ptext72:
 17967                           	opt stack 0
 17968  004404                     _ENC424J600_setRXTailPointer:
 17969                           	opt stack 19
 17970                           
 17971                           ;ENC424J600.c: 689: uint8_t lowByte = addr & 0x00ff;
 17972                           
 17973                           ; BSR set to: 0
 17974                           ;incstack = 0
 17975  004404  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 17976                           
 17977                           ;ENC424J600.c: 690: uint8_t highByte = (addr >> 8) & 0xff;
 17978  004408  0100               	movlb	0	; () banked
 17979  00440A  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 17980  00440C  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 17981                           
 17982                           ; BSR set to: 0
 17983                           ;ENC424J600.c: 691: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 17984  00440E  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 17985  004410  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17986  004412  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 17987  004414  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17988  004416  0E06               	movlw	6
 17989  004418  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17990                           
 17991                           ;ENC424J600.c: 692: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 17992  00441C  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 17993  00441E  0100               	movlb	0	; () banked
 17994  004420  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17995  004422  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 17996  004424  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17997  004426  0E07               	movlw	7
 17998  004428  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 17999  00442C  0012               	return		;funcret
 18000  00442E                     __end_of_ENC424J600_setRXTailPointer:
 18001                           	opt stack 0
 18002                           tblptru	equ	0xFF8
 18003                           tblptrh	equ	0xFF7
 18004                           tblptrl	equ	0xFF6
 18005                           tablat	equ	0xFF5
 18006                           prodh	equ	0xFF4
 18007                           prodl	equ	0xFF3
 18008                           intcon	equ	0xFF2
 18009                           intcon3	equ	0xFF0
 18010                           indf0	equ	0xFEF
 18011                           postinc0	equ	0xFEE
 18012                           plusw0	equ	0xFEB
 18013                           fsr0h	equ	0xFEA
 18014                           fsr0l	equ	0xFE9
 18015                           wreg	equ	0xFE8
 18016                           indf1	equ	0xFE7
 18017                           postinc1	equ	0xFE6
 18018                           postdec1	equ	0xFE5
 18019                           plusw1	equ	0xFE3
 18020                           fsr1h	equ	0xFE2
 18021                           fsr1l	equ	0xFE1
 18022                           indf2	equ	0xFDF
 18023                           postinc2	equ	0xFDE
 18024                           postdec2	equ	0xFDD
 18025                           plusw2	equ	0xFDB
 18026                           fsr2h	equ	0xFDA
 18027                           fsr2l	equ	0xFD9
 18028                           status	equ	0xFD8
 18029                           
 18030 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 18031 ;; Defined at:
 18032 ;;		line 681 in file "src/enc424j600/ENC424J600.c"
 18033 ;; Parameters:    Size  Location     Type
 18034 ;;  addr            2   14[BANK0 ] unsigned int 
 18035 ;; Auto vars:     Size  Location     Type
 18036 ;;  highByte        1   17[BANK0 ] unsigned char 
 18037 ;;  lowByte         1   16[BANK0 ] unsigned char 
 18038 ;; Return value:  Size  Location     Type
 18039 ;;                  1    wreg      void 
 18040 ;; Registers used:
 18041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18042 ;; Tracked objects:
 18043 ;;		On entry : 0/0
 18044 ;;		On exit  : 0/0
 18045 ;;		Unchanged: 0/0
 18046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18047 ;;      Params:         0       2       0       0       0       0       0       0       0
 18048 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18049 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18050 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18051 ;;Total ram usage:        4 bytes
 18052 ;; Hardware stack levels used:    1
 18053 ;; Hardware stack levels required when called:    7
 18054 ;; This function calls:
 18055 ;;		_ENC424J600_writeControlRegisterUnbanked
 18056 ;; This function is called by:
 18057 ;;		_ethernetController_init
 18058 ;; This function uses a non-reentrant model
 18059 ;;
 18060                           
 18061                           	psect	text73
 18062  00442E                     __ptext73:
 18063                           	opt stack 0
 18064  00442E                     _ENC424J600_setRXBufferStartAddress:
 18065                           	opt stack 22
 18066                           
 18067                           ;ENC424J600.c: 682: uint8_t lowByte = addr & 0x00ff;
 18068                           
 18069                           ;incstack = 0
 18070  00442E  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 18071                           
 18072                           ;ENC424J600.c: 683: uint8_t highByte = (addr >> 8) & 0xff;
 18073  004432  0100               	movlb	0	; () banked
 18074  004434  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 18075  004436  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 18076                           
 18077                           ; BSR set to: 0
 18078                           ;ENC424J600.c: 684: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 18079  004438  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 18080  00443A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18081  00443C  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 18082  00443E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18083  004440  0E04               	movlw	4
 18084  004442  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18085                           
 18086                           ;ENC424J600.c: 685: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 18087  004446  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 18088  004448  0100               	movlb	0	; () banked
 18089  00444A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18090  00444C  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 18091  00444E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18092  004450  0E05               	movlw	5
 18093  004452  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18094  004456  0012               	return		;funcret
 18095  004458                     __end_of_ENC424J600_setRXBufferStartAddress:
 18096                           	opt stack 0
 18097                           tblptru	equ	0xFF8
 18098                           tblptrh	equ	0xFF7
 18099                           tblptrl	equ	0xFF6
 18100                           tablat	equ	0xFF5
 18101                           prodh	equ	0xFF4
 18102                           prodl	equ	0xFF3
 18103                           intcon	equ	0xFF2
 18104                           intcon3	equ	0xFF0
 18105                           indf0	equ	0xFEF
 18106                           postinc0	equ	0xFEE
 18107                           plusw0	equ	0xFEB
 18108                           fsr0h	equ	0xFEA
 18109                           fsr0l	equ	0xFE9
 18110                           wreg	equ	0xFE8
 18111                           indf1	equ	0xFE7
 18112                           postinc1	equ	0xFE6
 18113                           postdec1	equ	0xFE5
 18114                           plusw1	equ	0xFE3
 18115                           fsr1h	equ	0xFE2
 18116                           fsr1l	equ	0xFE1
 18117                           indf2	equ	0xFDF
 18118                           postinc2	equ	0xFDE
 18119                           postdec2	equ	0xFDD
 18120                           plusw2	equ	0xFDB
 18121                           fsr2h	equ	0xFDA
 18122                           fsr2l	equ	0xFD9
 18123                           status	equ	0xFD8
 18124                           
 18125 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 18126 ;; Defined at:
 18127 ;;		line 625 in file "src/enc424j600/ENC424J600.c"
 18128 ;; Parameters:    Size  Location     Type
 18129 ;;  ptr             2    0[BANK0 ] unsigned int 
 18130 ;; Auto vars:     Size  Location     Type
 18131 ;;		None
 18132 ;; Return value:  Size  Location     Type
 18133 ;;                  1    wreg      void 
 18134 ;; Registers used:
 18135 ;;		None
 18136 ;; Tracked objects:
 18137 ;;		On entry : 0/0
 18138 ;;		On exit  : 0/0
 18139 ;;		Unchanged: 0/0
 18140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18141 ;;      Params:         0       2       0       0       0       0       0       0       0
 18142 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18144 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18145 ;;Total ram usage:        2 bytes
 18146 ;; Hardware stack levels used:    1
 18147 ;; Hardware stack levels required when called:    4
 18148 ;; This function calls:
 18149 ;;		Nothing
 18150 ;; This function is called by:
 18151 ;;		_ethernetController_init
 18152 ;;		_ethernetController_updateNextPacketPointer
 18153 ;; This function uses a non-reentrant model
 18154 ;;
 18155                           
 18156                           	psect	text74
 18157  0046F4                     __ptext74:
 18158                           	opt stack 0
 18159  0046F4                     _ENC424J600_setNextPacketPointer:
 18160                           	opt stack 23
 18161                           
 18162                           ;ENC424J600.c: 626: nextPacketPointer = ptr;
 18163                           
 18164                           ;incstack = 0
 18165  0046F4  C060  F047         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 18166  0046F8  C061  F048         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 18167  0046FC  0012               	return		;funcret
 18168  0046FE                     __end_of_ENC424J600_setNextPacketPointer:
 18169                           	opt stack 0
 18170                           tblptru	equ	0xFF8
 18171                           tblptrh	equ	0xFF7
 18172                           tblptrl	equ	0xFF6
 18173                           tablat	equ	0xFF5
 18174                           prodh	equ	0xFF4
 18175                           prodl	equ	0xFF3
 18176                           intcon	equ	0xFF2
 18177                           intcon3	equ	0xFF0
 18178                           indf0	equ	0xFEF
 18179                           postinc0	equ	0xFEE
 18180                           plusw0	equ	0xFEB
 18181                           fsr0h	equ	0xFEA
 18182                           fsr0l	equ	0xFE9
 18183                           wreg	equ	0xFE8
 18184                           indf1	equ	0xFE7
 18185                           postinc1	equ	0xFE6
 18186                           postdec1	equ	0xFE5
 18187                           plusw1	equ	0xFE3
 18188                           fsr1h	equ	0xFE2
 18189                           fsr1l	equ	0xFE1
 18190                           indf2	equ	0xFDF
 18191                           postinc2	equ	0xFDE
 18192                           postdec2	equ	0xFDD
 18193                           plusw2	equ	0xFDB
 18194                           fsr2h	equ	0xFDA
 18195                           fsr2l	equ	0xFD9
 18196                           status	equ	0xFD8
 18197                           
 18198 ;; *************** function _ENC424J600_enableReception *****************
 18199 ;; Defined at:
 18200 ;;		line 711 in file "src/enc424j600/ENC424J600.c"
 18201 ;; Parameters:    Size  Location     Type
 18202 ;;		None
 18203 ;; Auto vars:     Size  Location     Type
 18204 ;;		None
 18205 ;; Return value:  Size  Location     Type
 18206 ;;                  1    wreg      void 
 18207 ;; Registers used:
 18208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18209 ;; Tracked objects:
 18210 ;;		On entry : 0/0
 18211 ;;		On exit  : 0/0
 18212 ;;		Unchanged: 0/0
 18213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18214 ;;      Params:         0       0       0       0       0       0       0       0       0
 18215 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18217 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18218 ;;Total ram usage:        0 bytes
 18219 ;; Hardware stack levels used:    1
 18220 ;; Hardware stack levels required when called:    7
 18221 ;; This function calls:
 18222 ;;		_ENC424J600_writeSingleByte
 18223 ;; This function is called by:
 18224 ;;		_ethernetController_init
 18225 ;;		_ethernetController_enableReception
 18226 ;; This function uses a non-reentrant model
 18227 ;;
 18228                           
 18229                           	psect	text75
 18230  0046FE                     __ptext75:
 18231                           	opt stack 0
 18232  0046FE                     _ENC424J600_enableReception:
 18233                           	opt stack 22
 18234                           
 18235                           ;ENC424J600.c: 712: ENC424J600_writeSingleByte(0b11101010);
 18236                           
 18237                           ;incstack = 0
 18238  0046FE  0EEA               	movlw	234
 18239  004700  EC38  F023         	call	_ENC424J600_writeSingleByte
 18240  004704  0012               	return		;funcret
 18241  004706                     __end_of_ENC424J600_enableReception:
 18242                           	opt stack 0
 18243                           tblptru	equ	0xFF8
 18244                           tblptrh	equ	0xFF7
 18245                           tblptrl	equ	0xFF6
 18246                           tablat	equ	0xFF5
 18247                           prodh	equ	0xFF4
 18248                           prodl	equ	0xFF3
 18249                           intcon	equ	0xFF2
 18250                           intcon3	equ	0xFF0
 18251                           indf0	equ	0xFEF
 18252                           postinc0	equ	0xFEE
 18253                           plusw0	equ	0xFEB
 18254                           fsr0h	equ	0xFEA
 18255                           fsr0l	equ	0xFE9
 18256                           wreg	equ	0xFE8
 18257                           indf1	equ	0xFE7
 18258                           postinc1	equ	0xFE6
 18259                           postdec1	equ	0xFE5
 18260                           plusw1	equ	0xFE3
 18261                           fsr1h	equ	0xFE2
 18262                           fsr1l	equ	0xFE1
 18263                           indf2	equ	0xFDF
 18264                           postinc2	equ	0xFDE
 18265                           postdec2	equ	0xFDD
 18266                           plusw2	equ	0xFDB
 18267                           fsr2h	equ	0xFDA
 18268                           fsr2l	equ	0xFD9
 18269                           status	equ	0xFD8
 18270                           
 18271 ;; *************** function _ENC424J600_writeSingleByte *****************
 18272 ;; Defined at:
 18273 ;;		line 551 in file "src/enc424j600/ENC424J600.c"
 18274 ;; Parameters:    Size  Location     Type
 18275 ;;  opcode          1    wreg     unsigned char 
 18276 ;; Auto vars:     Size  Location     Type
 18277 ;;  opcode          1   10[BANK0 ] unsigned char 
 18278 ;; Return value:  Size  Location     Type
 18279 ;;                  1    wreg      void 
 18280 ;; Registers used:
 18281 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18282 ;; Tracked objects:
 18283 ;;		On entry : 0/0
 18284 ;;		On exit  : 0/0
 18285 ;;		Unchanged: 0/0
 18286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18287 ;;      Params:         0       0       0       0       0       0       0       0       0
 18288 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18289 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18290 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18291 ;;Total ram usage:        1 bytes
 18292 ;; Hardware stack levels used:    1
 18293 ;; Hardware stack levels required when called:    6
 18294 ;; This function calls:
 18295 ;;		_ENC424J600_writeSPI
 18296 ;; This function is called by:
 18297 ;;		_ethernetController_softReset
 18298 ;;		_ethernetController_sendPacket
 18299 ;;		_ethernetController_streamFromRXBuffer
 18300 ;;		_ethernetController_dropPacket
 18301 ;;		_ENC424J600_enableReception
 18302 ;;		_ENC424J600_disableReception
 18303 ;; This function uses a non-reentrant model
 18304 ;;
 18305                           
 18306                           	psect	text76
 18307  004670                     __ptext76:
 18308                           	opt stack 0
 18309  004670                     _ENC424J600_writeSingleByte:
 18310                           	opt stack 21
 18311                           
 18312                           ;incstack = 0
 18313                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 18314  004670  0100               	movlb	0	; () banked
 18315  004672  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 18316                           
 18317                           ;ENC424J600.c: 552: PORTBbits.RB4=0;
 18318  004674  9881               	bcf	3969,4,c	;volatile
 18319                           
 18320                           ;ENC424J600.c: 553: ENC424J600_writeSPI(&opcode);
 18321  004676  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 18322  004678  0100               	movlb	0	; () banked
 18323  00467A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18324  00467C  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 18325  00467E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18326  004680  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18327                           
 18328                           ;ENC424J600.c: 554: PORTBbits.RB4=1;
 18329  004684  8881               	bsf	3969,4,c	;volatile
 18330  004686  0012               	return		;funcret
 18331  004688                     __end_of_ENC424J600_writeSingleByte:
 18332                           	opt stack 0
 18333                           tblptru	equ	0xFF8
 18334                           tblptrh	equ	0xFF7
 18335                           tblptrl	equ	0xFF6
 18336                           tablat	equ	0xFF5
 18337                           prodh	equ	0xFF4
 18338                           prodl	equ	0xFF3
 18339                           intcon	equ	0xFF2
 18340                           intcon3	equ	0xFF0
 18341                           indf0	equ	0xFEF
 18342                           postinc0	equ	0xFEE
 18343                           plusw0	equ	0xFEB
 18344                           fsr0h	equ	0xFEA
 18345                           fsr0l	equ	0xFE9
 18346                           wreg	equ	0xFE8
 18347                           indf1	equ	0xFE7
 18348                           postinc1	equ	0xFE6
 18349                           postdec1	equ	0xFE5
 18350                           plusw1	equ	0xFE3
 18351                           fsr1h	equ	0xFE2
 18352                           fsr1l	equ	0xFE1
 18353                           indf2	equ	0xFDF
 18354                           postinc2	equ	0xFDE
 18355                           postdec2	equ	0xFDD
 18356                           plusw2	equ	0xFDB
 18357                           fsr2h	equ	0xFDA
 18358                           fsr2l	equ	0xFD9
 18359                           status	equ	0xFD8
 18360                           
 18361 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 18362 ;; Defined at:
 18363 ;;		line 697 in file "src/enc424j600/ENC424J600.c"
 18364 ;; Parameters:    Size  Location     Type
 18365 ;;		None
 18366 ;; Auto vars:     Size  Location     Type
 18367 ;;  temp            1   14[BANK0 ] unsigned char 
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  1    wreg      void 
 18370 ;; Registers used:
 18371 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18377 ;;      Params:         0       0       0       0       0       0       0       0       0
 18378 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18379 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18380 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18381 ;;Total ram usage:        1 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    7
 18384 ;; This function calls:
 18385 ;;		_ENC424J600_readControlRegisterUnbanked
 18386 ;;		_ENC424J600_writeControlRegisterUnbanked
 18387 ;; This function is called by:
 18388 ;;		_ethernetController_init
 18389 ;; This function uses a non-reentrant model
 18390 ;;
 18391                           
 18392                           	psect	text77
 18393  0044A8                     __ptext77:
 18394                           	opt stack 0
 18395  0044A8                     _ENC424J600_enableAutoMACInsertion:
 18396                           	opt stack 22
 18397                           
 18398                           ;ENC424J600.c: 698: uint8_t temp = 0;
 18399                           
 18400                           ;incstack = 0
 18401  0044A8  0E00               	movlw	0
 18402  0044AA  0100               	movlb	0	; () banked
 18403  0044AC  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 18404                           
 18405                           ; BSR set to: 0
 18406                           ;ENC424J600.c: 699: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 18407  0044AE  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18408  0044B0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18409  0044B2  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18410  0044B4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18411  0044B6  0E6F               	movlw	111
 18412  0044B8  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18413                           
 18414                           ;ENC424J600.c: 700: temp |= (1 << 5);
 18415  0044BC  0100               	movlb	0	; () banked
 18416  0044BE  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;ENC424J600.c: 701: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 18420  0044C0  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 18421  0044C2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18422  0044C4  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 18423  0044C6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18424  0044C8  0E6F               	movlw	111
 18425  0044CA  EC5B  F021         	call	_ENC424J600_writeControlRegisterUnbanked
 18426  0044CE  0012               	return		;funcret
 18427  0044D0                     __end_of_ENC424J600_enableAutoMACInsertion:
 18428                           	opt stack 0
 18429                           tblptru	equ	0xFF8
 18430                           tblptrh	equ	0xFF7
 18431                           tblptrl	equ	0xFF6
 18432                           tablat	equ	0xFF5
 18433                           prodh	equ	0xFF4
 18434                           prodl	equ	0xFF3
 18435                           intcon	equ	0xFF2
 18436                           intcon3	equ	0xFF0
 18437                           indf0	equ	0xFEF
 18438                           postinc0	equ	0xFEE
 18439                           plusw0	equ	0xFEB
 18440                           fsr0h	equ	0xFEA
 18441                           fsr0l	equ	0xFE9
 18442                           wreg	equ	0xFE8
 18443                           indf1	equ	0xFE7
 18444                           postinc1	equ	0xFE6
 18445                           postdec1	equ	0xFE5
 18446                           plusw1	equ	0xFE3
 18447                           fsr1h	equ	0xFE2
 18448                           fsr1l	equ	0xFE1
 18449                           indf2	equ	0xFDF
 18450                           postinc2	equ	0xFDE
 18451                           postdec2	equ	0xFDD
 18452                           plusw2	equ	0xFDB
 18453                           fsr2h	equ	0xFDA
 18454                           fsr2l	equ	0xFD9
 18455                           status	equ	0xFD8
 18456                           
 18457 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 18458 ;; Defined at:
 18459 ;;		line 557 in file "src/enc424j600/ENC424J600.c"
 18460 ;; Parameters:    Size  Location     Type
 18461 ;;  addr            1    wreg     unsigned char 
 18462 ;;  data            2   10[BANK0 ] PTR unsigned char 
 18463 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 18464 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 18465 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAd
      +dress@lowByte(1), ENC424J600_setTXLength@highByte(1), 
 18466 ;;		 -> ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits(1),
      + ENC424J600_readPHYRegister@PHYaddress(1), 
 18467 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 18468 ;; Auto vars:     Size  Location     Type
 18469 ;;  addr            1   12[BANK0 ] unsigned char 
 18470 ;;  opcode          1   13[BANK0 ] unsigned char 
 18471 ;; Return value:  Size  Location     Type
 18472 ;;                  1    wreg      void 
 18473 ;; Registers used:
 18474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18475 ;; Tracked objects:
 18476 ;;		On entry : 0/0
 18477 ;;		On exit  : 0/0
 18478 ;;		Unchanged: 0/0
 18479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18480 ;;      Params:         0       2       0       0       0       0       0       0       0
 18481 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18482 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18483 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18484 ;;Total ram usage:        4 bytes
 18485 ;; Hardware stack levels used:    1
 18486 ;; Hardware stack levels required when called:    6
 18487 ;; This function calls:
 18488 ;;		_ENC424J600_writeSPI
 18489 ;; This function is called by:
 18490 ;;		_ethernetController_softReset
 18491 ;;		_ethernetController_setLEDConfig
 18492 ;;		_ENC424J600_readPHYRegister
 18493 ;;		_ENC424J600_setTXLength
 18494 ;;		_ENC424J600_setTXStartAddress
 18495 ;;		_ENC424J600_setRXBufferStartAddress
 18496 ;;		_ENC424J600_setRXTailPointer
 18497 ;;		_ENC424J600_enableAutoMACInsertion
 18498 ;;		_ENC424J600_clearInterruptFlag
 18499 ;;		_ethernetController_setMacAddress
 18500 ;;		_ENC424J600_disableAutoMACInsertion
 18501 ;;		_ENC424J600_enable
 18502 ;;		_ENC424J600_disable
 18503 ;; This function uses a non-reentrant model
 18504 ;;
 18505                           
 18506                           	psect	text78
 18507  0042B6                     __ptext78:
 18508                           	opt stack 0
 18509  0042B6                     _ENC424J600_writeControlRegisterUnbanked:
 18510                           	opt stack 20
 18511                           
 18512                           ;incstack = 0
 18513                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 18514  0042B6  0100               	movlb	0	; () banked
 18515  0042B8  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 18516                           
 18517                           ;ENC424J600.c: 558: uint8_t opcode = 0x22;
 18518  0042BA  0E22               	movlw	34
 18519  0042BC  0100               	movlb	0	; () banked
 18520  0042BE  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 18521                           
 18522                           ; BSR set to: 0
 18523                           ;ENC424J600.c: 559: PORTBbits.RB4=0;
 18524  0042C0  9881               	bcf	3969,4,c	;volatile
 18525                           
 18526                           ; BSR set to: 0
 18527                           ;ENC424J600.c: 560: ENC424J600_writeSPI(&opcode);
 18528  0042C2  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 18529  0042C4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18530  0042C6  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 18531  0042C8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18532  0042CA  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18533                           
 18534                           ;ENC424J600.c: 561: ENC424J600_writeSPI(&addr);
 18535  0042CE  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 18536  0042D0  0100               	movlb	0	; () banked
 18537  0042D2  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18538  0042D4  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 18539  0042D6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 18540  0042D8  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18541                           
 18542                           ;ENC424J600.c: 562: ENC424J600_writeSPI(data);
 18543  0042DC  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 18544  0042E0  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 18545  0042E4  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 18546                           
 18547                           ;ENC424J600.c: 563: PORTBbits.RB4=1;
 18548  0042E8  8881               	bsf	3969,4,c	;volatile
 18549  0042EA  0012               	return		;funcret
 18550  0042EC                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 18551                           	opt stack 0
 18552                           tblptru	equ	0xFF8
 18553                           tblptrh	equ	0xFF7
 18554                           tblptrl	equ	0xFF6
 18555                           tablat	equ	0xFF5
 18556                           prodh	equ	0xFF4
 18557                           prodl	equ	0xFF3
 18558                           intcon	equ	0xFF2
 18559                           intcon3	equ	0xFF0
 18560                           indf0	equ	0xFEF
 18561                           postinc0	equ	0xFEE
 18562                           plusw0	equ	0xFEB
 18563                           fsr0h	equ	0xFEA
 18564                           fsr0l	equ	0xFE9
 18565                           wreg	equ	0xFE8
 18566                           indf1	equ	0xFE7
 18567                           postinc1	equ	0xFE6
 18568                           postdec1	equ	0xFE5
 18569                           plusw1	equ	0xFE3
 18570                           fsr1h	equ	0xFE2
 18571                           fsr1l	equ	0xFE1
 18572                           indf2	equ	0xFDF
 18573                           postinc2	equ	0xFDE
 18574                           postdec2	equ	0xFDD
 18575                           plusw2	equ	0xFDB
 18576                           fsr2h	equ	0xFDA
 18577                           fsr2l	equ	0xFD9
 18578                           status	equ	0xFD8
 18579                           
 18580 ;; *************** function _ethernetController_getSiliconRevision *****************
 18581 ;; Defined at:
 18582 ;;		line 153 in file "src/enc424j600/ENC424J600.c"
 18583 ;; Parameters:    Size  Location     Type
 18584 ;;		None
 18585 ;; Auto vars:     Size  Location     Type
 18586 ;;  data            1   14[BANK0 ] unsigned char 
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  1    wreg      unsigned char 
 18589 ;; Registers used:
 18590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18596 ;;      Params:         0       0       0       0       0       0       0       0       0
 18597 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18599 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18600 ;;Total ram usage:        1 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:    7
 18603 ;; This function calls:
 18604 ;;		_ENC424J600_readControlRegisterUnbanked
 18605 ;; This function is called by:
 18606 ;;		_main
 18607 ;; This function uses a non-reentrant model
 18608 ;;
 18609                           
 18610                           	psect	text79
 18611  0045AC                     __ptext79:
 18612                           	opt stack 0
 18613  0045AC                     _ethernetController_getSiliconRevision:
 18614                           	opt stack 23
 18615                           
 18616                           ;ENC424J600.c: 154: uint8_t data = 0;
 18617                           
 18618                           ;incstack = 0
 18619  0045AC  0E00               	movlw	0
 18620  0045AE  0100               	movlb	0	; () banked
 18621  0045B0  6F6E               	movwf	ethernetController_getSiliconRevision@data& (0+255),b
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;ENC424J600.c: 155: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 18625  0045B2  0E6E               	movlw	low ethernetController_getSiliconRevision@data
 18626  0045B4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18627  0045B6  0E00               	movlw	high ethernetController_getSiliconRevision@data
 18628  0045B8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18629  0045BA  0E74               	movlw	116
 18630  0045BC  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18631                           
 18632                           ;ENC424J600.c: 156: data &= 0x1F;
 18633  0045C0  0E1F               	movlw	31
 18634  0045C2  0100               	movlb	0	; () banked
 18635  0045C4  176E               	andwf	ethernetController_getSiliconRevision@data& (0+255),f,b
 18636                           
 18637                           ; BSR set to: 0
 18638                           ;ENC424J600.c: 157: return data;
 18639  0045C6  516E               	movf	ethernetController_getSiliconRevision@data& (0+255),w,b
 18640  0045C8  0012               	return	
 18641  0045CA                     __end_of_ethernetController_getSiliconRevision:
 18642                           	opt stack 0
 18643                           tblptru	equ	0xFF8
 18644                           tblptrh	equ	0xFF7
 18645                           tblptrl	equ	0xFF6
 18646                           tablat	equ	0xFF5
 18647                           prodh	equ	0xFF4
 18648                           prodl	equ	0xFF3
 18649                           intcon	equ	0xFF2
 18650                           intcon3	equ	0xFF0
 18651                           indf0	equ	0xFEF
 18652                           postinc0	equ	0xFEE
 18653                           plusw0	equ	0xFEB
 18654                           fsr0h	equ	0xFEA
 18655                           fsr0l	equ	0xFE9
 18656                           wreg	equ	0xFE8
 18657                           indf1	equ	0xFE7
 18658                           postinc1	equ	0xFE6
 18659                           postdec1	equ	0xFE5
 18660                           plusw1	equ	0xFE3
 18661                           fsr1h	equ	0xFE2
 18662                           fsr1l	equ	0xFE1
 18663                           indf2	equ	0xFDF
 18664                           postinc2	equ	0xFDE
 18665                           postdec2	equ	0xFDD
 18666                           plusw2	equ	0xFDB
 18667                           fsr2h	equ	0xFDA
 18668                           fsr2l	equ	0xFD9
 18669                           status	equ	0xFD8
 18670                           
 18671 ;; *************** function _ethernetController_getDeviceName *****************
 18672 ;; Defined at:
 18673 ;;		line 148 in file "src/enc424j600/ENC424J600.c"
 18674 ;; Parameters:    Size  Location     Type
 18675 ;;		None
 18676 ;; Auto vars:     Size  Location     Type
 18677 ;;  string         11    2[BANK0 ] const unsigned char [11]
 18678 ;; Return value:  Size  Location     Type
 18679 ;;                  2    0[BANK0 ] PTR unsigned char 
 18680 ;; Registers used:
 18681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 18682 ;; Tracked objects:
 18683 ;;		On entry : 0/0
 18684 ;;		On exit  : 0/0
 18685 ;;		Unchanged: 0/0
 18686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18687 ;;      Params:         0       2       0       0       0       0       0       0       0
 18688 ;;      Locals:         0      11       0       0       0       0       0       0       0
 18689 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18690 ;;      Totals:         0      13       0       0       0       0       0       0       0
 18691 ;;Total ram usage:       13 bytes
 18692 ;; Hardware stack levels used:    1
 18693 ;; Hardware stack levels required when called:    4
 18694 ;; This function calls:
 18695 ;;		Nothing
 18696 ;; This function is called by:
 18697 ;;		_main
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           	psect	text80
 18702  004566                     __ptext80:
 18703                           	opt stack 0
 18704  004566                     _ethernetController_getDeviceName:
 18705                           	opt stack 26
 18706                           
 18707                           ;ENC424J600.c: 149: const char string [] = "ENC424J600";
 18708                           
 18709                           ; BSR set to: 0
 18710                           ;incstack = 0
 18711  004566  0E85               	movlw	low ethernetController_getDeviceName@F5838
 18712  004568  6EF6               	movwf	tblptrl,c
 18713  00456A                     	if	1	;There is more than 1 active tblptr byte
 18714  00456A  0E7C               	movlw	high ethernetController_getDeviceName@F5838
 18715  00456C  6EF7               	movwf	tblptrh,c
 18716  00456E                     	endif
 18717  00456E                     	if	0	;There are less than 3 active tblptr bytes
 18718  00456E                     	endif
 18719  00456E  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 18720  004572  0E0A               	movlw	10
 18721  004574                     u10760:
 18722  004574  0009               	tblrd		*+
 18723  004576  CFF5 FFDE          	movff	tablat,postinc2
 18724  00457A  06E8               	decf	wreg,f,c
 18725  00457C  E2FB               	bc	u10760
 18726                           
 18727                           ;ENC424J600.c: 150: return string;
 18728  00457E  0E62               	movlw	low ethernetController_getDeviceName@string
 18729  004580  0100               	movlb	0	; () banked
 18730  004582  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 18731  004584  0E00               	movlw	high ethernetController_getDeviceName@string
 18732  004586  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 18733  004588  0012               	return	
 18734  00458A                     __end_of_ethernetController_getDeviceName:
 18735                           	opt stack 0
 18736                           tblptru	equ	0xFF8
 18737                           tblptrh	equ	0xFF7
 18738                           tblptrl	equ	0xFF6
 18739                           tablat	equ	0xFF5
 18740                           prodh	equ	0xFF4
 18741                           prodl	equ	0xFF3
 18742                           intcon	equ	0xFF2
 18743                           intcon3	equ	0xFF0
 18744                           indf0	equ	0xFEF
 18745                           postinc0	equ	0xFEE
 18746                           plusw0	equ	0xFEB
 18747                           fsr0h	equ	0xFEA
 18748                           fsr0l	equ	0xFE9
 18749                           wreg	equ	0xFE8
 18750                           indf1	equ	0xFE7
 18751                           postinc1	equ	0xFE6
 18752                           postdec1	equ	0xFE5
 18753                           plusw1	equ	0xFE3
 18754                           fsr1h	equ	0xFE2
 18755                           fsr1l	equ	0xFE1
 18756                           indf2	equ	0xFDF
 18757                           postinc2	equ	0xFDE
 18758                           postdec2	equ	0xFDD
 18759                           plusw2	equ	0xFDB
 18760                           fsr2h	equ	0xFDA
 18761                           fsr2l	equ	0xFD9
 18762                           status	equ	0xFD8
 18763                           
 18764 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 18765 ;; Defined at:
 18766 ;;		line 497 in file "src/enc424j600/ENC424J600.c"
 18767 ;; Parameters:    Size  Location     Type
 18768 ;;		None
 18769 ;; Auto vars:     Size  Location     Type
 18770 ;;		None
 18771 ;; Return value:  Size  Location     Type
 18772 ;;                  1    wreg      unsigned char 
 18773 ;; Registers used:
 18774 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18775 ;; Tracked objects:
 18776 ;;		On entry : 0/0
 18777 ;;		On exit  : 0/0
 18778 ;;		Unchanged: 0/0
 18779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18780 ;;      Params:         0       0       0       0       0       0       0       0       0
 18781 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18782 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18783 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18784 ;;Total ram usage:        0 bytes
 18785 ;; Hardware stack levels used:    1
 18786 ;; Hardware stack levels required when called:    8
 18787 ;; This function calls:
 18788 ;;		_ENC424J600_getPacketCount
 18789 ;; This function is called by:
 18790 ;;		_main
 18791 ;; This function uses a non-reentrant model
 18792 ;;
 18793                           
 18794                           	psect	text81
 18795  004706                     __ptext81:
 18796                           	opt stack 0
 18797  004706                     _ethernetController_getCurrentPacketCount:
 18798                           	opt stack 22
 18799                           
 18800                           ;ENC424J600.c: 498: return ENC424J600_getPacketCount();
 18801                           
 18802                           ; BSR set to: 0
 18803                           ;incstack = 0
 18804  004706  EC2B  F023         	call	_ENC424J600_getPacketCount	;wreg free
 18805  00470A  0012               	return	
 18806  00470C                     __end_of_ethernetController_getCurrentPacketCount:
 18807                           	opt stack 0
 18808                           tblptru	equ	0xFF8
 18809                           tblptrh	equ	0xFF7
 18810                           tblptrl	equ	0xFF6
 18811                           tablat	equ	0xFF5
 18812                           prodh	equ	0xFF4
 18813                           prodl	equ	0xFF3
 18814                           intcon	equ	0xFF2
 18815                           intcon3	equ	0xFF0
 18816                           indf0	equ	0xFEF
 18817                           postinc0	equ	0xFEE
 18818                           plusw0	equ	0xFEB
 18819                           fsr0h	equ	0xFEA
 18820                           fsr0l	equ	0xFE9
 18821                           wreg	equ	0xFE8
 18822                           indf1	equ	0xFE7
 18823                           postinc1	equ	0xFE6
 18824                           postdec1	equ	0xFE5
 18825                           plusw1	equ	0xFE3
 18826                           fsr1h	equ	0xFE2
 18827                           fsr1l	equ	0xFE1
 18828                           indf2	equ	0xFDF
 18829                           postinc2	equ	0xFDE
 18830                           postdec2	equ	0xFDD
 18831                           plusw2	equ	0xFDB
 18832                           fsr2h	equ	0xFDA
 18833                           fsr2l	equ	0xFD9
 18834                           status	equ	0xFD8
 18835                           
 18836 ;; *************** function _ENC424J600_getPacketCount *****************
 18837 ;; Defined at:
 18838 ;;		line 633 in file "src/enc424j600/ENC424J600.c"
 18839 ;; Parameters:    Size  Location     Type
 18840 ;;		None
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;  lowByte         1   14[BANK0 ] unsigned char 
 18843 ;; Return value:  Size  Location     Type
 18844 ;;                  1    wreg      unsigned char 
 18845 ;; Registers used:
 18846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18847 ;; Tracked objects:
 18848 ;;		On entry : 0/0
 18849 ;;		On exit  : 0/0
 18850 ;;		Unchanged: 0/0
 18851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18852 ;;      Params:         0       0       0       0       0       0       0       0       0
 18853 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18854 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18855 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18856 ;;Total ram usage:        1 bytes
 18857 ;; Hardware stack levels used:    1
 18858 ;; Hardware stack levels required when called:    7
 18859 ;; This function calls:
 18860 ;;		_ENC424J600_readControlRegisterUnbanked
 18861 ;; This function is called by:
 18862 ;;		_ethernetController_newPacketAvailable
 18863 ;;		_ethernetController_getCurrentPacketCount
 18864 ;; This function uses a non-reentrant model
 18865 ;;
 18866                           
 18867                           	psect	text82
 18868  004656                     __ptext82:
 18869                           	opt stack 0
 18870  004656                     _ENC424J600_getPacketCount:
 18871                           	opt stack 21
 18872                           
 18873                           ;ENC424J600.c: 634: uint8_t lowByte = 0;
 18874                           
 18875                           ;incstack = 0
 18876  004656  0E00               	movlw	0
 18877  004658  0100               	movlb	0	; () banked
 18878  00465A  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 18879                           
 18880                           ; BSR set to: 0
 18881                           ;ENC424J600.c: 635: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 18882  00465C  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 18883  00465E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18884  004660  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 18885  004662  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18886  004664  0E1A               	movlw	26
 18887  004666  EC76  F021         	call	_ENC424J600_readControlRegisterUnbanked
 18888                           
 18889                           ;ENC424J600.c: 636: return (uint32_t) lowByte;
 18890  00466A  0100               	movlb	0	; () banked
 18891  00466C  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 18892  00466E  0012               	return	
 18893  004670                     __end_of_ENC424J600_getPacketCount:
 18894                           	opt stack 0
 18895                           tblptru	equ	0xFF8
 18896                           tblptrh	equ	0xFF7
 18897                           tblptrl	equ	0xFF6
 18898                           tablat	equ	0xFF5
 18899                           prodh	equ	0xFF4
 18900                           prodl	equ	0xFF3
 18901                           intcon	equ	0xFF2
 18902                           intcon3	equ	0xFF0
 18903                           indf0	equ	0xFEF
 18904                           postinc0	equ	0xFEE
 18905                           plusw0	equ	0xFEB
 18906                           fsr0h	equ	0xFEA
 18907                           fsr0l	equ	0xFE9
 18908                           wreg	equ	0xFE8
 18909                           indf1	equ	0xFE7
 18910                           postinc1	equ	0xFE6
 18911                           postdec1	equ	0xFE5
 18912                           plusw1	equ	0xFE3
 18913                           fsr1h	equ	0xFE2
 18914                           fsr1l	equ	0xFE1
 18915                           indf2	equ	0xFDF
 18916                           postinc2	equ	0xFDE
 18917                           postdec2	equ	0xFDD
 18918                           plusw2	equ	0xFDB
 18919                           fsr2h	equ	0xFDA
 18920                           fsr2l	equ	0xFD9
 18921                           status	equ	0xFD8
 18922                           
 18923 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 18924 ;; Defined at:
 18925 ;;		line 566 in file "src/enc424j600/ENC424J600.c"
 18926 ;; Parameters:    Size  Location     Type
 18927 ;;  addr            1    wreg     unsigned char 
 18928 ;;  data            2   10[BANK0 ] PTR unsigned char 
 18929 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 18930 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 18931 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 18932 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 18933 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 18934 ;; Auto vars:     Size  Location     Type
 18935 ;;  addr            1   12[BANK0 ] unsigned char 
 18936 ;;  opcode          1   13[BANK0 ] unsigned char 
 18937 ;; Return value:  Size  Location     Type
 18938 ;;                  1    wreg      void 
 18939 ;; Registers used:
 18940 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18941 ;; Tracked objects:
 18942 ;;		On entry : 0/0
 18943 ;;		On exit  : 0/0
 18944 ;;		Unchanged: 0/0
 18945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18946 ;;      Params:         0       2       0       0       0       0       0       0       0
 18947 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18948 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18949 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18950 ;;Total ram usage:        4 bytes
 18951 ;; Hardware stack levels used:    1
 18952 ;; Hardware stack levels required when called:    6
 18953 ;; This function calls:
 18954 ;;		_ENC424J600_readSPI
 18955 ;;		_ENC424J600_writeSPI
 18956 ;; This function is called by:
 18957 ;;		_ethernetController_softReset
 18958 ;;		_ethernetController_checkDeviceId
 18959 ;;		_ethernetController_getSiliconRevision
 18960 ;;		_ethernetController_getMacAddress
 18961 ;;		_ethernetController_updateLinkStatus
 18962 ;;		_ethernetController_setLEDConfig
 18963 ;;		_ENC424J600_readPHYRegister
 18964 ;;		_ENC424J600_getPacketCount
 18965 ;;		_ENC424J600_enableAutoMACInsertion
 18966 ;;		_ENC424J600_getInterruptFlags
 18967 ;;		_ENC424J600_clearInterruptFlag
 18968 ;;		_ENC424J600_disableAutoMACInsertion
 18969 ;;		_ENC424J600_enable
 18970 ;;		_ENC424J600_disable
 18971 ;; This function uses a non-reentrant model
 18972 ;;
 18973                           
 18974                           	psect	text83
 18975  0042EC                     __ptext83:
 18976                           	opt stack 0
 18977  0042EC                     _ENC424J600_readControlRegisterUnbanked:
 18978                           	opt stack 21
 18979                           
 18980                           ; BSR set to: 0
 18981                           ;incstack = 0
 18982                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 18983  0042EC  0100               	movlb	0	; () banked
 18984  0042EE  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 18985                           
 18986                           ;ENC424J600.c: 567: uint8_t opcode = 0x20;
 18987  0042F0  0E20               	movlw	32
 18988  0042F2  0100               	movlb	0	; () banked
 18989  0042F4  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;ENC424J600.c: 568: PORTBbits.RB4=0;
 18993  0042F6  9881               	bcf	3969,4,c	;volatile
 18994                           
 18995                           ; BSR set to: 0
 18996                           ;ENC424J600.c: 569: ENC424J600_writeSPI(&opcode);
 18997  0042F8  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 18998  0042FA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 18999  0042FC  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 19000  0042FE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19001  004300  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19002                           
 19003                           ;ENC424J600.c: 570: ENC424J600_writeSPI(&addr);
 19004  004304  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 19005  004306  0100               	movlb	0	; () banked
 19006  004308  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19007  00430A  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 19008  00430C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19009  00430E  ECFF  F01E         	call	_ENC424J600_writeSPI	;wreg free
 19010                           
 19011                           ;ENC424J600.c: 571: ENC424J600_readSPI(data);
 19012  004312  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 19013  004316  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 19014  00431A  EC63  F01E         	call	_ENC424J600_readSPI	;wreg free
 19015                           
 19016                           ;ENC424J600.c: 572: PORTBbits.RB4=1;
 19017  00431E  8881               	bsf	3969,4,c	;volatile
 19018  004320  0012               	return		;funcret
 19019  004322                     __end_of_ENC424J600_readControlRegisterUnbanked:
 19020                           	opt stack 0
 19021                           tblptru	equ	0xFF8
 19022                           tblptrh	equ	0xFF7
 19023                           tblptrl	equ	0xFF6
 19024                           tablat	equ	0xFF5
 19025                           prodh	equ	0xFF4
 19026                           prodl	equ	0xFF3
 19027                           intcon	equ	0xFF2
 19028                           intcon3	equ	0xFF0
 19029                           indf0	equ	0xFEF
 19030                           postinc0	equ	0xFEE
 19031                           plusw0	equ	0xFEB
 19032                           fsr0h	equ	0xFEA
 19033                           fsr0l	equ	0xFE9
 19034                           wreg	equ	0xFE8
 19035                           indf1	equ	0xFE7
 19036                           postinc1	equ	0xFE6
 19037                           postdec1	equ	0xFE5
 19038                           plusw1	equ	0xFE3
 19039                           fsr1h	equ	0xFE2
 19040                           fsr1l	equ	0xFE1
 19041                           indf2	equ	0xFDF
 19042                           postinc2	equ	0xFDE
 19043                           postdec2	equ	0xFDD
 19044                           plusw2	equ	0xFDB
 19045                           fsr2h	equ	0xFDA
 19046                           fsr2l	equ	0xFD9
 19047                           status	equ	0xFD8
 19048                           
 19049 ;; *************** function _ENC424J600_writeSPI *****************
 19050 ;; Defined at:
 19051 ;;		line 526 in file "src/enc424j600/ENC424J600.c"
 19052 ;; Parameters:    Size  Location     Type
 19053 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19054 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 19055 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 19056 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), ENC424J600_setERXDA
      +TAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), 
 19057 ;;		 -> ENC424J600_setGPDATAReadPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), ENC424J600_setGPDATARea
      +dPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), 
 19058 ;;		 -> ENC424J600_setGPDATAWritePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), ENC424J600_setTXStartAd
      +dress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 19059 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC42
      +4J600_readPHYRegister@unusedBits(1), 
 19060 ;;		 -> ENC424J600_readPHYRegister@PHYaddress(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControl
      +RegisterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 19061 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 19062 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 19063 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 19064 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 19065 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 19066 ;; Auto vars:     Size  Location     Type
 19067 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19068 ;; Return value:  Size  Location     Type
 19069 ;;                  1    wreg      void 
 19070 ;; Registers used:
 19071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19072 ;; Tracked objects:
 19073 ;;		On entry : 0/0
 19074 ;;		On exit  : 0/0
 19075 ;;		Unchanged: 0/0
 19076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19077 ;;      Params:         0       2       0       0       0       0       0       0       0
 19078 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19079 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19080 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19081 ;;Total ram usage:       10 bytes
 19082 ;; Hardware stack levels used:    1
 19083 ;; Hardware stack levels required when called:    5
 19084 ;; This function calls:
 19085 ;;		_ENC424J600_initSPI
 19086 ;; This function is called by:
 19087 ;;		_ethernetController_streamToTransmitBuffer
 19088 ;;		_ethernetController_writeDestinationMACAddress
 19089 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19090 ;;		_ethernetController_getSourceMACAddress
 19091 ;;		_ethernetController_getEtherTypeField
 19092 ;;		_ethernetController_getRSV
 19093 ;;		_ethernetController_updateNextPacketPointer
 19094 ;;		_ethernetController_streamFromRXBuffer
 19095 ;;		_ENC424J600_writeSingleByte
 19096 ;;		_ENC424J600_writeControlRegisterUnbanked
 19097 ;;		_ENC424J600_readControlRegisterUnbanked
 19098 ;;		_ENC424J600_setGPDATAWritePointer
 19099 ;;		_ENC424J600_setERXDATAReadPointer
 19100 ;;		_ethernetController_getDestinationMACAddress
 19101 ;;		_ENC424J600_setGPDATAReadPointer
 19102 ;; This function uses a non-reentrant model
 19103 ;;
 19104                           
 19105                           	psect	text84
 19106  003DFE                     __ptext84:
 19107                           	opt stack 0
 19108  003DFE                     _ENC424J600_writeSPI:
 19109                           	opt stack 22
 19110                           
 19111                           ;ENC424J600.c: 528: uint32_t timeoutCounter = 0;
 19112                           
 19113                           ;incstack = 0
 19114  003DFE  0E00               	movlw	0
 19115  003E00  0100               	movlb	0	; () banked
 19116  003E02  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 19117  003E04  0E00               	movlw	0
 19118  003E06  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 19119  003E08  0E00               	movlw	0
 19120  003E0A  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 19121  003E0C  0E00               	movlw	0
 19122  003E0E  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 19123                           
 19124                           ; BSR set to: 0
 19125                           ;ENC424J600.c: 529: SSP1BUF = *data;
 19126  003E10  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 19127  003E14  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 19128  003E18  50DF               	movf	indf2,w,c
 19129  003E1A  6EC9               	movwf	4041,c	;volatile
 19130  003E1C                     
 19131                           ; BSR set to: 0
 19132                           
 19133                           ; BSR set to: 0
 19134  003E1C  B0C7               	btfsc	4039,0,c	;volatile
 19135  003E1E  D015               	goto	u7700
 19136                           
 19137                           ; BSR set to: 0
 19138  003E20  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 19139  003E24  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 19140  003E28  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 19141  003E2C  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 19142  003E30  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 19143  003E32  0E00               	movlw	0
 19144  003E34  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 19145  003E36  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 19146  003E38  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 19147  003E3A  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 19148  003E3C  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 19149  003E3E  E105               	bnz	l6723
 19150  003E40  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 19151  003E42  0E0F               	movlw	15
 19152  003E44  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 19153  003E46  A0D8               	btfss	status,0,c
 19154  003E48  D7E9               	goto	l232
 19155  003E4A                     u7700:
 19156  003E4A                     l6723:
 19157                           
 19158                           ; BSR set to: 0
 19159                           ;ENC424J600.c: 531: if (timeoutCounter >= 0xfff) {
 19160  003E4A  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 19161  003E4C  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 19162  003E4E  E105               	bnz	u7710
 19163  003E50  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 19164  003E52  0E0F               	movlw	15
 19165  003E54  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 19166  003E56  A0D8               	btfss	status,0,c
 19167  003E58  0012               	return	
 19168  003E5A                     u7710:
 19169                           
 19170                           ; BSR set to: 0
 19171                           ;ENC424J600.c: 532: PORTBbits.RB4=1;
 19172  003E5A  8881               	bsf	3969,4,c	;volatile
 19173                           
 19174                           ; BSR set to: 0
 19175                           ;ENC424J600.c: 533: ENC424J600_initSPI();
 19176  003E5C  EC10  F023         	call	_ENC424J600_initSPI	;wreg free
 19177                           
 19178                           ;ENC424J600.c: 534: return;
 19179  003E60  0012               	return	
 19180  003E62                     __end_of_ENC424J600_writeSPI:
 19181                           	opt stack 0
 19182                           tblptru	equ	0xFF8
 19183                           tblptrh	equ	0xFF7
 19184                           tblptrl	equ	0xFF6
 19185                           tablat	equ	0xFF5
 19186                           prodh	equ	0xFF4
 19187                           prodl	equ	0xFF3
 19188                           intcon	equ	0xFF2
 19189                           intcon3	equ	0xFF0
 19190                           indf0	equ	0xFEF
 19191                           postinc0	equ	0xFEE
 19192                           plusw0	equ	0xFEB
 19193                           fsr0h	equ	0xFEA
 19194                           fsr0l	equ	0xFE9
 19195                           wreg	equ	0xFE8
 19196                           indf1	equ	0xFE7
 19197                           postinc1	equ	0xFE6
 19198                           postdec1	equ	0xFE5
 19199                           plusw1	equ	0xFE3
 19200                           fsr1h	equ	0xFE2
 19201                           fsr1l	equ	0xFE1
 19202                           indf2	equ	0xFDF
 19203                           postinc2	equ	0xFDE
 19204                           postdec2	equ	0xFDD
 19205                           plusw2	equ	0xFDB
 19206                           fsr2h	equ	0xFDA
 19207                           fsr2l	equ	0xFD9
 19208                           status	equ	0xFD8
 19209                           
 19210 ;; *************** function _ENC424J600_readSPI *****************
 19211 ;; Defined at:
 19212 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 19213 ;; Parameters:    Size  Location     Type
 19214 ;;  data            2    0[BANK0 ] PTR unsigned char 
 19215 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 19216 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 19217 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 19218 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 19219 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 19220 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 19221 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 19222 ;; Auto vars:     Size  Location     Type
 19223 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 19224 ;; Return value:  Size  Location     Type
 19225 ;;                  1    wreg      void 
 19226 ;; Registers used:
 19227 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19228 ;; Tracked objects:
 19229 ;;		On entry : 0/0
 19230 ;;		On exit  : 0/0
 19231 ;;		Unchanged: 0/0
 19232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19233 ;;      Params:         0       2       0       0       0       0       0       0       0
 19234 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19235 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19236 ;;      Totals:         0      10       0       0       0       0       0       0       0
 19237 ;;Total ram usage:       10 bytes
 19238 ;; Hardware stack levels used:    1
 19239 ;; Hardware stack levels required when called:    5
 19240 ;; This function calls:
 19241 ;;		_ENC424J600_initSPI
 19242 ;; This function is called by:
 19243 ;;		_ethernetController_getSourceMACAddress
 19244 ;;		_ethernetController_getEtherTypeField
 19245 ;;		_ethernetController_getRSV
 19246 ;;		_ethernetController_updateNextPacketPointer
 19247 ;;		_ethernetController_streamFromRXBuffer
 19248 ;;		_ENC424J600_readControlRegisterUnbanked
 19249 ;;		_ethernetController_getDestinationMACAddress
 19250 ;; This function uses a non-reentrant model
 19251 ;;
 19252                           
 19253                           	psect	text85
 19254  003CC6                     __ptext85:
 19255                           	opt stack 0
 19256  003CC6                     _ENC424J600_readSPI:
 19257                           	opt stack 21
 19258                           
 19259                           ;ENC424J600.c: 540: uint32_t timeoutCounter = 0;
 19260                           
 19261                           ;incstack = 0
 19262  003CC6  0E00               	movlw	0
 19263  003CC8  0100               	movlb	0	; () banked
 19264  003CCA  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 19265  003CCC  0E00               	movlw	0
 19266  003CCE  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 19267  003CD0  0E00               	movlw	0
 19268  003CD2  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 19269  003CD4  0E00               	movlw	0
 19270  003CD6  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 19271                           
 19272                           ;ENC424J600.c: 541: SSP1BUF = 0x00;
 19273  003CD8  0E00               	movlw	0
 19274  003CDA  6EC9               	movwf	4041,c	;volatile
 19275  003CDC                     
 19276                           ; BSR set to: 0
 19277                           
 19278                           ; BSR set to: 0
 19279  003CDC  B0C7               	btfsc	4039,0,c	;volatile
 19280  003CDE  D015               	goto	u8130
 19281                           
 19282                           ; BSR set to: 0
 19283  003CE0  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 19284  003CE4  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 19285  003CE8  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 19286  003CEC  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 19287  003CF0  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 19288  003CF2  0E00               	movlw	0
 19289  003CF4  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 19290  003CF6  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 19291  003CF8  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 19292  003CFA  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 19293  003CFC  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 19294  003CFE  E105               	bnz	l6997
 19295  003D00  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 19296  003D02  0E0F               	movlw	15
 19297  003D04  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 19298  003D06  A0D8               	btfss	status,0,c
 19299  003D08  D7E9               	goto	l241
 19300  003D0A                     u8130:
 19301  003D0A                     l6997:
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;ENC424J600.c: 543: if (timeoutCounter >= 0xfff) {
 19305  003D0A  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 19306  003D0C  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 19307  003D0E  E105               	bnz	u8140
 19308  003D10  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 19309  003D12  0E0F               	movlw	15
 19310  003D14  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 19311  003D16  A0D8               	btfss	status,0,c
 19312  003D18  D004               	goto	l245
 19313  003D1A                     u8140:
 19314                           
 19315                           ; BSR set to: 0
 19316                           ;ENC424J600.c: 544: PORTBbits.RB4=1;
 19317  003D1A  8881               	bsf	3969,4,c	;volatile
 19318                           
 19319                           ; BSR set to: 0
 19320                           ;ENC424J600.c: 545: ENC424J600_initSPI();
 19321  003D1C  EC10  F023         	call	_ENC424J600_initSPI	;wreg free
 19322                           
 19323                           ;ENC424J600.c: 546: return;
 19324  003D20  0012               	return	
 19325  003D22                     l245:
 19326                           
 19327                           ;ENC424J600.c: 547: }
 19328                           ;ENC424J600.c: 548: *data = SSP1BUF;
 19329  003D22  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 19330  003D26  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 19331  003D2A  CFC9 FFDF          	movff	4041,indf2	;volatile
 19332  003D2E  0012               	return		;funcret
 19333  003D30                     __end_of_ENC424J600_readSPI:
 19334                           	opt stack 0
 19335                           tblptru	equ	0xFF8
 19336                           tblptrh	equ	0xFF7
 19337                           tblptrl	equ	0xFF6
 19338                           tablat	equ	0xFF5
 19339                           prodh	equ	0xFF4
 19340                           prodl	equ	0xFF3
 19341                           intcon	equ	0xFF2
 19342                           intcon3	equ	0xFF0
 19343                           indf0	equ	0xFEF
 19344                           postinc0	equ	0xFEE
 19345                           plusw0	equ	0xFEB
 19346                           fsr0h	equ	0xFEA
 19347                           fsr0l	equ	0xFE9
 19348                           wreg	equ	0xFE8
 19349                           indf1	equ	0xFE7
 19350                           postinc1	equ	0xFE6
 19351                           postdec1	equ	0xFE5
 19352                           plusw1	equ	0xFE3
 19353                           fsr1h	equ	0xFE2
 19354                           fsr1l	equ	0xFE1
 19355                           indf2	equ	0xFDF
 19356                           postinc2	equ	0xFDE
 19357                           postdec2	equ	0xFDD
 19358                           plusw2	equ	0xFDB
 19359                           fsr2h	equ	0xFDA
 19360                           fsr2l	equ	0xFD9
 19361                           status	equ	0xFD8
 19362                           
 19363 ;; *************** function _ENC424J600_initSPI *****************
 19364 ;; Defined at:
 19365 ;;		line 508 in file "src/enc424j600/ENC424J600.c"
 19366 ;; Parameters:    Size  Location     Type
 19367 ;;		None
 19368 ;; Auto vars:     Size  Location     Type
 19369 ;;		None
 19370 ;; Return value:  Size  Location     Type
 19371 ;;                  1    wreg      void 
 19372 ;; Registers used:
 19373 ;;		None
 19374 ;; Tracked objects:
 19375 ;;		On entry : 0/0
 19376 ;;		On exit  : 0/0
 19377 ;;		Unchanged: 0/0
 19378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19379 ;;      Params:         0       0       0       0       0       0       0       0       0
 19380 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19381 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19382 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19383 ;;Total ram usage:        0 bytes
 19384 ;; Hardware stack levels used:    1
 19385 ;; Hardware stack levels required when called:    4
 19386 ;; This function calls:
 19387 ;;		Nothing
 19388 ;; This function is called by:
 19389 ;;		_ethernetController_init
 19390 ;;		_ENC424J600_writeSPI
 19391 ;;		_ENC424J600_readSPI
 19392 ;; This function uses a non-reentrant model
 19393 ;;
 19394                           
 19395                           	psect	text86
 19396  004620                     __ptext86:
 19397                           	opt stack 0
 19398  004620                     _ENC424J600_initSPI:
 19399                           	opt stack 22
 19400                           
 19401                           ;ENC424J600.c: 509: SSP1CON1bits.SSPEN = 0;
 19402                           
 19403                           ;incstack = 0
 19404  004620  9AC6               	bcf	4038,5,c	;volatile
 19405                           
 19406                           ;ENC424J600.c: 510: SSP1STATbits.CKE = 1;
 19407  004622  8CC7               	bsf	4039,6,c	;volatile
 19408                           
 19409                           ;ENC424J600.c: 512: TRISBbits.TRISB0 = 1;
 19410  004624  8093               	bsf	3987,0,c	;volatile
 19411                           
 19412                           ;ENC424J600.c: 513: ANSELBbits.ANSB0 = 0;
 19413  004626  010F               	movlb	15	; () banked
 19414  004628  915C               	bcf	92,0,b	;volatile
 19415                           
 19416                           ;ENC424J600.c: 514: TRISBbits.TRISB1 = 0;
 19417  00462A  9293               	bcf	3987,1,c	;volatile
 19418                           
 19419                           ;ENC424J600.c: 515: ANSELBbits.ANSB1 = 0;
 19420  00462C  935C               	bcf	92,1,b	;volatile
 19421                           
 19422                           ;ENC424J600.c: 516: TRISBbits.TRISB3 = 0;
 19423  00462E  9693               	bcf	3987,3,c	;volatile
 19424                           
 19425                           ;ENC424J600.c: 517: ANSELBbits.ANSB3 = 0;
 19426  004630  975C               	bcf	92,3,b	;volatile
 19427                           
 19428                           ;ENC424J600.c: 518: TRISBbits.TRISB4 = 0;
 19429  004632  9893               	bcf	3987,4,c	;volatile
 19430                           
 19431                           ;ENC424J600.c: 519: ANSELBbits.ANSB4 = 0;
 19432  004634  995C               	bcf	92,4,b	;volatile
 19433                           
 19434                           ;ENC424J600.c: 520: PORTBbits.RB4=1;
 19435  004636  8881               	bsf	3969,4,c	;volatile
 19436                           
 19437                           ;ENC424J600.c: 521: SSP1CON1bits.SSPEN = 1;
 19438  004638  8AC6               	bsf	4038,5,c	;volatile
 19439                           
 19440                           ; BSR set to: 15
 19441  00463A  0012               	return		;funcret
 19442  00463C                     __end_of_ENC424J600_initSPI:
 19443                           	opt stack 0
 19444                           tblptru	equ	0xFF8
 19445                           tblptrh	equ	0xFF7
 19446                           tblptrl	equ	0xFF6
 19447                           tablat	equ	0xFF5
 19448                           prodh	equ	0xFF4
 19449                           prodl	equ	0xFF3
 19450                           intcon	equ	0xFF2
 19451                           intcon3	equ	0xFF0
 19452                           indf0	equ	0xFEF
 19453                           postinc0	equ	0xFEE
 19454                           plusw0	equ	0xFEB
 19455                           fsr0h	equ	0xFEA
 19456                           fsr0l	equ	0xFE9
 19457                           wreg	equ	0xFE8
 19458                           indf1	equ	0xFE7
 19459                           postinc1	equ	0xFE6
 19460                           postdec1	equ	0xFE5
 19461                           plusw1	equ	0xFE3
 19462                           fsr1h	equ	0xFE2
 19463                           fsr1l	equ	0xFE1
 19464                           indf2	equ	0xFDF
 19465                           postinc2	equ	0xFDE
 19466                           postdec2	equ	0xFDD
 19467                           plusw2	equ	0xFDB
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function _UARTInit *****************
 19473 ;; Defined at:
 19474 ;;		line 26 in file "src/system/uart.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;		None
 19477 ;; Auto vars:     Size  Location     Type
 19478 ;;		None
 19479 ;; Return value:  Size  Location     Type
 19480 ;;                  1    wreg      void 
 19481 ;; Registers used:
 19482 ;;		wreg, status,2
 19483 ;; Tracked objects:
 19484 ;;		On entry : 0/0
 19485 ;;		On exit  : 0/0
 19486 ;;		Unchanged: 0/0
 19487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19488 ;;      Params:         0       0       0       0       0       0       0       0       0
 19489 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19490 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19491 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19492 ;;Total ram usage:        0 bytes
 19493 ;; Hardware stack levels used:    1
 19494 ;; Hardware stack levels required when called:    4
 19495 ;; This function calls:
 19496 ;;		Nothing
 19497 ;; This function is called by:
 19498 ;;		_main
 19499 ;; This function uses a non-reentrant model
 19500 ;;
 19501                           
 19502                           	psect	text87
 19503  0046BE                     __ptext87:
 19504                           	opt stack 0
 19505  0046BE                     _UARTInit:
 19506                           	opt stack 26
 19507                           
 19508                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 19509                           
 19510                           ; BSR set to: 15
 19511                           ;incstack = 0
 19512  0046BE  8AAC               	bsf	4012,5,c	;volatile
 19513                           
 19514                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 19515  0046C0  98AC               	bcf	4012,4,c	;volatile
 19516                           
 19517                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 19518  0046C2  8EAB               	bsf	4011,7,c	;volatile
 19519                           
 19520                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 19521  0046C4  8CAC               	bsf	4012,6,c	;volatile
 19522                           
 19523                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 19524  0046C6  80AC               	bsf	4012,0,c	;volatile
 19525                           
 19526                           ;uart.c: 32: SPBRG = 3;
 19527  0046C8  0E03               	movlw	3
 19528  0046CA  6EAF               	movwf	4015,c	;volatile
 19529  0046CC  0012               	return		;funcret
 19530  0046CE                     __end_of_UARTInit:
 19531                           	opt stack 0
 19532                           tblptru	equ	0xFF8
 19533                           tblptrh	equ	0xFF7
 19534                           tblptrl	equ	0xFF6
 19535                           tablat	equ	0xFF5
 19536                           prodh	equ	0xFF4
 19537                           prodl	equ	0xFF3
 19538                           intcon	equ	0xFF2
 19539                           intcon3	equ	0xFF0
 19540                           indf0	equ	0xFEF
 19541                           postinc0	equ	0xFEE
 19542                           plusw0	equ	0xFEB
 19543                           fsr0h	equ	0xFEA
 19544                           fsr0l	equ	0xFE9
 19545                           wreg	equ	0xFE8
 19546                           indf1	equ	0xFE7
 19547                           postinc1	equ	0xFE6
 19548                           postdec1	equ	0xFE5
 19549                           plusw1	equ	0xFE3
 19550                           fsr1h	equ	0xFE2
 19551                           fsr1l	equ	0xFE1
 19552                           indf2	equ	0xFDF
 19553                           postinc2	equ	0xFDE
 19554                           postdec2	equ	0xFDD
 19555                           plusw2	equ	0xFDB
 19556                           fsr2h	equ	0xFDA
 19557                           fsr2l	equ	0xFD9
 19558                           status	equ	0xFD8
 19559                           
 19560 ;; *************** function _ARP_initTable *****************
 19561 ;; Defined at:
 19562 ;;		line 270 in file "src/stack/protocols/arp.c"
 19563 ;; Parameters:    Size  Location     Type
 19564 ;;		None
 19565 ;; Auto vars:     Size  Location     Type
 19566 ;;  i               1   38[BANK0 ] unsigned char 
 19567 ;;  mac             6   28[BANK0 ] struct macaddress
 19568 ;;  ip              4   34[BANK0 ] struct ipv4_address
 19569 ;; Return value:  Size  Location     Type
 19570 ;;                  1    wreg      void 
 19571 ;; Registers used:
 19572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19573 ;; Tracked objects:
 19574 ;;		On entry : 0/0
 19575 ;;		On exit  : 0/0
 19576 ;;		Unchanged: 0/0
 19577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19578 ;;      Params:         0       0       0       0       0       0       0       0       0
 19579 ;;      Locals:         0      11       0       0       0       0       0       0       0
 19580 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19581 ;;      Totals:         0      11       0       0       0       0       0       0       0
 19582 ;;Total ram usage:       11 bytes
 19583 ;; Hardware stack levels used:    1
 19584 ;; Hardware stack levels required when called:    5
 19585 ;; This function calls:
 19586 ;;		_ARP_setNewEntry
 19587 ;;		_ipv4_setToAllZero
 19588 ;;		_mac_setAllZero
 19589 ;; This function is called by:
 19590 ;;		_main
 19591 ;; This function uses a non-reentrant model
 19592 ;;
 19593                           
 19594                           	psect	text88
 19595  003D98                     __ptext88:
 19596                           	opt stack 0
 19597  003D98                     _ARP_initTable:
 19598                           	opt stack 25
 19599                           
 19600                           ;arp.c: 271: macaddress_t mac;
 19601                           ;arp.c: 272: ipv4_address_t ip;
 19602                           ;arp.c: 273: mac_setAllZero(&mac);
 19603                           
 19604                           ;incstack = 0
 19605  003D98  0E7C               	movlw	low ARP_initTable@mac
 19606  003D9A  0100               	movlb	0	; () banked
 19607  003D9C  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 19608  003D9E  0E00               	movlw	high ARP_initTable@mac
 19609  003DA0  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 19610  003DA2  EC7B  F022         	call	_mac_setAllZero	;wreg free
 19611                           
 19612                           ;arp.c: 274: ipv4_setToAllZero(&ip);
 19613  003DA6  0E82               	movlw	low ARP_initTable@ip
 19614  003DA8  0100               	movlb	0	; () banked
 19615  003DAA  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 19616  003DAC  0E00               	movlw	high ARP_initTable@ip
 19617  003DAE  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 19618  003DB0  ECE5  F022         	call	_ipv4_setToAllZero	;wreg free
 19619                           
 19620                           ;arp.c: 275: for (uint8_t i = 0; i < 8; i++)
 19621  003DB4  0E00               	movlw	0
 19622  003DB6  0100               	movlb	0	; () banked
 19623  003DB8  6F86               	movwf	ARP_initTable@i& (0+255),b
 19624  003DBA                     l8561:
 19625                           
 19626                           ; BSR set to: 0
 19627  003DBA  0E07               	movlw	7
 19628  003DBC  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 19629  003DBE  D001               	goto	l944
 19630  003DC0  0012               	return	
 19631  003DC2                     l944:
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;arp.c: 276: ARP_setNewEntry(mac, ip, 0xffffffff);
 19635                           
 19636                           ; BSR set to: 0
 19637  003DC2  EE20  F07C         	lfsr	2,ARP_initTable@mac
 19638  003DC6  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 19639  003DCA  0E05               	movlw	5
 19640  003DCC                     u10881:
 19641  003DCC  CFDB FFEB          	movff	plusw2,plusw0
 19642  003DD0  06E8               	decf	wreg,f,c
 19643  003DD2  E2FC               	bc	u10881
 19644  003DD4  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 19645  003DD8  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 19646  003DDC  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 19647  003DE0  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 19648  003DE4  0EFF               	movlw	255
 19649  003DE6  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 19650  003DE8  0EFF               	movlw	255
 19651  003DEA  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 19652  003DEC  0EFF               	movlw	255
 19653  003DEE  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 19654  003DF0  0EFF               	movlw	255
 19655  003DF2  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 19656  003DF4  ECB4  F017         	call	_ARP_setNewEntry	;wreg free
 19657  003DF8  0100               	movlb	0	; () banked
 19658  003DFA  2B86               	incf	ARP_initTable@i& (0+255),f,b
 19659  003DFC  D7DE               	goto	l8561
 19660  003DFE                     __end_of_ARP_initTable:
 19661                           	opt stack 0
 19662                           tblptru	equ	0xFF8
 19663                           tblptrh	equ	0xFF7
 19664                           tblptrl	equ	0xFF6
 19665                           tablat	equ	0xFF5
 19666                           prodh	equ	0xFF4
 19667                           prodl	equ	0xFF3
 19668                           intcon	equ	0xFF2
 19669                           intcon3	equ	0xFF0
 19670                           indf0	equ	0xFEF
 19671                           postinc0	equ	0xFEE
 19672                           plusw0	equ	0xFEB
 19673                           fsr0h	equ	0xFEA
 19674                           fsr0l	equ	0xFE9
 19675                           wreg	equ	0xFE8
 19676                           indf1	equ	0xFE7
 19677                           postinc1	equ	0xFE6
 19678                           postdec1	equ	0xFE5
 19679                           plusw1	equ	0xFE3
 19680                           fsr1h	equ	0xFE2
 19681                           fsr1l	equ	0xFE1
 19682                           indf2	equ	0xFDF
 19683                           postinc2	equ	0xFDE
 19684                           postdec2	equ	0xFDD
 19685                           plusw2	equ	0xFDB
 19686                           fsr2h	equ	0xFDA
 19687                           fsr2l	equ	0xFD9
 19688                           status	equ	0xFD8
 19689                           
 19690 ;; *************** function _mac_setAllZero *****************
 19691 ;; Defined at:
 19692 ;;		line 47 in file "src/eth/mac.c"
 19693 ;; Parameters:    Size  Location     Type
 19694 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 19695 ;;		 -> ARP_initTable@mac(6), 
 19696 ;; Auto vars:     Size  Location     Type
 19697 ;;  i               1    2[BANK0 ] unsigned char 
 19698 ;; Return value:  Size  Location     Type
 19699 ;;                  1    wreg      void 
 19700 ;; Registers used:
 19701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19702 ;; Tracked objects:
 19703 ;;		On entry : 0/0
 19704 ;;		On exit  : 0/0
 19705 ;;		Unchanged: 0/0
 19706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19707 ;;      Params:         0       2       0       0       0       0       0       0       0
 19708 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19709 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19710 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19711 ;;Total ram usage:        3 bytes
 19712 ;; Hardware stack levels used:    1
 19713 ;; Hardware stack levels required when called:    4
 19714 ;; This function calls:
 19715 ;;		Nothing
 19716 ;; This function is called by:
 19717 ;;		_ARP_initTable
 19718 ;; This function uses a non-reentrant model
 19719 ;;
 19720                           
 19721                           	psect	text89
 19722  0044F6                     __ptext89:
 19723                           	opt stack 0
 19724  0044F6                     _mac_setAllZero:
 19725                           	opt stack 25
 19726                           
 19727                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 19728                           
 19729                           ; BSR set to: 0
 19730                           ;incstack = 0
 19731  0044F6  0E00               	movlw	0
 19732  0044F8  0100               	movlb	0	; () banked
 19733  0044FA  6F62               	movwf	mac_setAllZero@i& (0+255),b
 19734  0044FC                     l8353:
 19735                           
 19736                           ; BSR set to: 0
 19737  0044FC  0E05               	movlw	5
 19738  0044FE  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 19739  004500  D001               	goto	l394
 19740  004502  0012               	return	
 19741  004504                     l394:
 19742                           
 19743                           ; BSR set to: 0
 19744                           ;mac.c: 49: mac->address[i] = 0x00;
 19745                           
 19746                           ; BSR set to: 0
 19747  004504  5162               	movf	mac_setAllZero@i& (0+255),w,b
 19748  004506  0D01               	mullw	1
 19749  004508  50F3               	movf	prodl,w,c
 19750  00450A  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 19751  00450C  6ED9               	movwf	fsr2l,c
 19752  00450E  50F4               	movf	prodh,w,c
 19753  004510  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 19754  004512  6EDA               	movwf	fsr2h,c
 19755  004514  0E00               	movlw	0
 19756  004516  6EDF               	movwf	indf2,c
 19757                           
 19758                           ; BSR set to: 0
 19759  004518  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 19760  00451A  D7F0               	goto	l8353
 19761  00451C                     __end_of_mac_setAllZero:
 19762                           	opt stack 0
 19763                           tblptru	equ	0xFF8
 19764                           tblptrh	equ	0xFF7
 19765                           tblptrl	equ	0xFF6
 19766                           tablat	equ	0xFF5
 19767                           prodh	equ	0xFF4
 19768                           prodl	equ	0xFF3
 19769                           intcon	equ	0xFF2
 19770                           intcon3	equ	0xFF0
 19771                           indf0	equ	0xFEF
 19772                           postinc0	equ	0xFEE
 19773                           plusw0	equ	0xFEB
 19774                           fsr0h	equ	0xFEA
 19775                           fsr0l	equ	0xFE9
 19776                           wreg	equ	0xFE8
 19777                           indf1	equ	0xFE7
 19778                           postinc1	equ	0xFE6
 19779                           postdec1	equ	0xFE5
 19780                           plusw1	equ	0xFE3
 19781                           fsr1h	equ	0xFE2
 19782                           fsr1l	equ	0xFE1
 19783                           indf2	equ	0xFDF
 19784                           postinc2	equ	0xFDE
 19785                           postdec2	equ	0xFDD
 19786                           plusw2	equ	0xFDB
 19787                           fsr2h	equ	0xFDA
 19788                           fsr2l	equ	0xFD9
 19789                           status	equ	0xFD8
 19790                           
 19791 ;; *************** function _ipv4_setToAllZero *****************
 19792 ;; Defined at:
 19793 ;;		line 186 in file "src/stack/protocols/ipv4.c"
 19794 ;; Parameters:    Size  Location     Type
 19795 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 19796 ;;		 -> ARP_initTable@ip(4), 
 19797 ;; Auto vars:     Size  Location     Type
 19798 ;;  i               1    2[BANK0 ] unsigned char 
 19799 ;; Return value:  Size  Location     Type
 19800 ;;                  1    wreg      void 
 19801 ;; Registers used:
 19802 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19803 ;; Tracked objects:
 19804 ;;		On entry : 0/0
 19805 ;;		On exit  : 0/0
 19806 ;;		Unchanged: 0/0
 19807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19808 ;;      Params:         0       2       0       0       0       0       0       0       0
 19809 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19811 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19812 ;;Total ram usage:        3 bytes
 19813 ;; Hardware stack levels used:    1
 19814 ;; Hardware stack levels required when called:    4
 19815 ;; This function calls:
 19816 ;;		Nothing
 19817 ;; This function is called by:
 19818 ;;		_ARP_initTable
 19819 ;; This function uses a non-reentrant model
 19820 ;;
 19821                           
 19822                           	psect	text90
 19823  0045CA                     __ptext90:
 19824                           	opt stack 0
 19825  0045CA                     _ipv4_setToAllZero:
 19826                           	opt stack 25
 19827                           
 19828                           ;ipv4.c: 187: for (uint8_t i = 0; i < 4; i++) {
 19829                           
 19830                           ; BSR set to: 0
 19831                           ;incstack = 0
 19832  0045CA  0E00               	movlw	0
 19833  0045CC  0100               	movlb	0	; () banked
 19834  0045CE  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 19835  0045D0                     l8415:
 19836                           
 19837                           ; BSR set to: 0
 19838  0045D0  0E03               	movlw	3
 19839  0045D2  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 19840  0045D4  D001               	goto	l1025
 19841  0045D6  0012               	return	
 19842  0045D8                     l1025:
 19843                           
 19844                           ; BSR set to: 0
 19845                           ;ipv4.c: 188: ip->address[0] = 0x00;
 19846                           
 19847                           ; BSR set to: 0
 19848  0045D8  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 19849  0045DC  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 19850  0045E0  0E00               	movlw	0
 19851  0045E2  6EDF               	movwf	indf2,c
 19852                           
 19853                           ; BSR set to: 0
 19854  0045E4  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 19855  0045E6  D7F4               	goto	l8415
 19856  0045E8                     __end_of_ipv4_setToAllZero:
 19857                           	opt stack 0
 19858                           tblptru	equ	0xFF8
 19859                           tblptrh	equ	0xFF7
 19860                           tblptrl	equ	0xFF6
 19861                           tablat	equ	0xFF5
 19862                           prodh	equ	0xFF4
 19863                           prodl	equ	0xFF3
 19864                           intcon	equ	0xFF2
 19865                           intcon3	equ	0xFF0
 19866                           indf0	equ	0xFEF
 19867                           postinc0	equ	0xFEE
 19868                           plusw0	equ	0xFEB
 19869                           fsr0h	equ	0xFEA
 19870                           fsr0l	equ	0xFE9
 19871                           wreg	equ	0xFE8
 19872                           indf1	equ	0xFE7
 19873                           postinc1	equ	0xFE6
 19874                           postdec1	equ	0xFE5
 19875                           plusw1	equ	0xFE3
 19876                           fsr1h	equ	0xFE2
 19877                           fsr1l	equ	0xFE1
 19878                           indf2	equ	0xFDF
 19879                           postinc2	equ	0xFDE
 19880                           postdec2	equ	0xFDD
 19881                           plusw2	equ	0xFDB
 19882                           fsr2h	equ	0xFDA
 19883                           fsr2l	equ	0xFD9
 19884                           status	equ	0xFD8
 19885                           
 19886 ;; *************** function _ARP_setNewEntry *****************
 19887 ;; Defined at:
 19888 ;;		line 254 in file "src/stack/protocols/arp.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;  mac             6    4[BANK0 ] struct macaddress
 19891 ;;  ip              4   10[BANK0 ] struct ipv4_address
 19892 ;;  timestamp       4   14[BANK0 ] unsigned long 
 19893 ;; Auto vars:     Size  Location     Type
 19894 ;;  i               1   27[BANK0 ] unsigned char 
 19895 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 19896 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 19897 ;; Return value:  Size  Location     Type
 19898 ;;                  1    wreg      void 
 19899 ;; Registers used:
 19900 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19901 ;; Tracked objects:
 19902 ;;		On entry : 0/0
 19903 ;;		On exit  : 0/0
 19904 ;;		Unchanged: 0/0
 19905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19906 ;;      Params:         0      14       0       0       0       0       0       0       0
 19907 ;;      Locals:         0       6       0       0       0       0       0       0       0
 19908 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19909 ;;      Totals:         0      24       0       0       0       0       0       0       0
 19910 ;;Total ram usage:       24 bytes
 19911 ;; Hardware stack levels used:    1
 19912 ;; Hardware stack levels required when called:    4
 19913 ;; This function calls:
 19914 ;;		Nothing
 19915 ;; This function is called by:
 19916 ;;		_ARP_handleNewPacket
 19917 ;;		_ARP_initTable
 19918 ;; This function uses a non-reentrant model
 19919 ;;
 19920                           
 19921                           	psect	text91
 19922  002F68                     __ptext91:
 19923                           	opt stack 0
 19924  002F68                     _ARP_setNewEntry:
 19925                           	opt stack 23
 19926                           
 19927                           ;arp.c: 255: uint32_t maxSeconds = 0;
 19928                           
 19929                           ; BSR set to: 0
 19930                           ;incstack = 0
 19931  002F68  0E00               	movlw	0
 19932  002F6A  0100               	movlb	0	; () banked
 19933  002F6C  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 19934  002F6E  0E00               	movlw	0
 19935  002F70  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 19936  002F72  0E00               	movlw	0
 19937  002F74  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 19938  002F76  0E00               	movlw	0
 19939  002F78  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 19940                           
 19941                           ;arp.c: 256: uint8_t oldestIndex = 0;
 19942  002F7A  0E00               	movlw	0
 19943  002F7C  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 19944                           
 19945                           ;arp.c: 258: for (uint8_t i = 0; i < 8; i++) {
 19946  002F7E  0E00               	movlw	0
 19947  002F80  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 19948  002F82                     l7815:
 19949                           
 19950                           ; BSR set to: 0
 19951  002F82  0E07               	movlw	7
 19952  002F84  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 19953  002F86  D001               	goto	l938
 19954  002F88  D02E               	goto	u9930
 19955  002F8A                     l938:
 19956                           
 19957                           ; BSR set to: 0
 19958                           ;arp.c: 259: if (ARP_table[i].secondsCreated > maxSeconds) {
 19959                           
 19960                           ; BSR set to: 0
 19961  002F8A  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 19962  002F8C  0D0E               	mullw	14
 19963  002F8E  0E0A               	movlw	10
 19964  002F90  26F3               	addwf	prodl,f,c
 19965  002F92  0E00               	movlw	0
 19966  002F94  22F4               	addwfc	prodh,f,c
 19967  002F96  0E00               	movlw	low _ARP_table
 19968  002F98  24F3               	addwf	prodl,w,c
 19969  002F9A  6ED9               	movwf	fsr2l,c
 19970  002F9C  0E03               	movlw	high _ARP_table
 19971  002F9E  20F4               	addwfc	prodh,w,c
 19972  002FA0  6EDA               	movwf	fsr2h,c
 19973  002FA2  50DE               	movf	postinc2,w,c
 19974  002FA4  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 19975  002FA6  50DE               	movf	postinc2,w,c
 19976  002FA8  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 19977  002FAA  50DE               	movf	postinc2,w,c
 19978  002FAC  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 19979  002FAE  50DE               	movf	postinc2,w,c
 19980  002FB0  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 19981  002FB2  B0D8               	btfsc	status,0,c
 19982  002FB4  D016               	goto	l940
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;arp.c: 260: maxSeconds = ARP_table[i].secondsCreated;
 19986  002FB6  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 19987  002FB8  0D0E               	mullw	14
 19988  002FBA  0E0A               	movlw	10
 19989  002FBC  26F3               	addwf	prodl,f,c
 19990  002FBE  0E00               	movlw	0
 19991  002FC0  22F4               	addwfc	prodh,f,c
 19992  002FC2  0E00               	movlw	low _ARP_table
 19993  002FC4  24F3               	addwf	prodl,w,c
 19994  002FC6  6ED9               	movwf	fsr2l,c
 19995  002FC8  0E03               	movlw	high _ARP_table
 19996  002FCA  20F4               	addwfc	prodh,w,c
 19997  002FCC  6EDA               	movwf	fsr2h,c
 19998  002FCE  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 19999  002FD2  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 20000  002FD6  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 20001  002FDA  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;arp.c: 261: oldestIndex = i;
 20005  002FDE  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 20006  002FE2                     l940:
 20007                           
 20008                           ; BSR set to: 0
 20009                           
 20010                           ; BSR set to: 0
 20011  002FE2  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 20012  002FE4  D7CE               	goto	l7815
 20013  002FE6                     u9930:
 20014                           
 20015                           ; BSR set to: 0
 20016                           ;arp.c: 262: }
 20017                           ;arp.c: 263: }
 20018                           ;arp.c: 265: ARP_table[oldestIndex].ip = ip;
 20019                           
 20020                           ; BSR set to: 0
 20021  002FE6  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20022  002FE8  0D0E               	mullw	14
 20023  002FEA  0E00               	movlw	low _ARP_table
 20024  002FEC  24F3               	addwf	prodl,w,c
 20025  002FEE  6ED9               	movwf	fsr2l,c
 20026  002FF0  0E03               	movlw	high _ARP_table
 20027  002FF2  20F4               	addwfc	prodh,w,c
 20028  002FF4  6EDA               	movwf	fsr2h,c
 20029  002FF6  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 20030  002FFA  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 20031  002FFE  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 20032  003002  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 20033                           
 20034                           ; BSR set to: 0
 20035                           ;arp.c: 266: ARP_table[oldestIndex].mac = mac;
 20036  003006  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 20037  00300A  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20038  00300C  0D0E               	mullw	14
 20039  00300E  0E04               	movlw	4
 20040  003010  26F3               	addwf	prodl,f,c
 20041  003012  0E00               	movlw	0
 20042  003014  22F4               	addwfc	prodh,f,c
 20043  003016  0E00               	movlw	low _ARP_table
 20044  003018  24F3               	addwf	prodl,w,c
 20045  00301A  6EE1               	movwf	fsr1l,c
 20046  00301C  0E03               	movlw	high _ARP_table
 20047  00301E  20F4               	addwfc	prodh,w,c
 20048  003020  6EE2               	movwf	fsr1h,c
 20049  003022  0E05               	movlw	5
 20050  003024                     u9941:
 20051  003024  CFDB FFE3          	movff	plusw2,plusw1
 20052  003028  06E8               	decf	wreg,f,c
 20053  00302A  E2FC               	bc	u9941
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;arp.c: 267: ARP_table[oldestIndex].secondsCreated = timestamp;
 20057  00302C  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 20058  00302E  0D0E               	mullw	14
 20059  003030  0E0A               	movlw	10
 20060  003032  26F3               	addwf	prodl,f,c
 20061  003034  0E00               	movlw	0
 20062  003036  22F4               	addwfc	prodh,f,c
 20063  003038  0E00               	movlw	low _ARP_table
 20064  00303A  24F3               	addwf	prodl,w,c
 20065  00303C  6ED9               	movwf	fsr2l,c
 20066  00303E  0E03               	movlw	high _ARP_table
 20067  003040  20F4               	addwfc	prodh,w,c
 20068  003042  6EDA               	movwf	fsr2h,c
 20069  003044  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 20070  003048  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 20071  00304C  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 20072  003050  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 20073                           
 20074                           ; BSR set to: 0
 20075  003054  0012               	return		;funcret
 20076  003056                     __end_of_ARP_setNewEntry:
 20077                           	opt stack 0
 20078                           tblptru	equ	0xFF8
 20079                           tblptrh	equ	0xFF7
 20080                           tblptrl	equ	0xFF6
 20081                           tablat	equ	0xFF5
 20082                           prodh	equ	0xFF4
 20083                           prodl	equ	0xFF3
 20084                           intcon	equ	0xFF2
 20085                           intcon3	equ	0xFF0
 20086                           indf0	equ	0xFEF
 20087                           postinc0	equ	0xFEE
 20088                           plusw0	equ	0xFEB
 20089                           fsr0h	equ	0xFEA
 20090                           fsr0l	equ	0xFE9
 20091                           wreg	equ	0xFE8
 20092                           indf1	equ	0xFE7
 20093                           postinc1	equ	0xFE6
 20094                           postdec1	equ	0xFE5
 20095                           plusw1	equ	0xFE3
 20096                           fsr1h	equ	0xFE2
 20097                           fsr1l	equ	0xFE1
 20098                           indf2	equ	0xFDF
 20099                           postinc2	equ	0xFDE
 20100                           postdec2	equ	0xFDD
 20101                           plusw2	equ	0xFDB
 20102                           fsr2h	equ	0xFDA
 20103                           fsr2l	equ	0xFD9
 20104                           status	equ	0xFD8
 20105                           
 20106 ;; *************** function _ISR *****************
 20107 ;; Defined at:
 20108 ;;		line 265 in file "src/system/main.c"
 20109 ;; Parameters:    Size  Location     Type
 20110 ;;		None
 20111 ;; Auto vars:     Size  Location     Type
 20112 ;;		None
 20113 ;; Return value:  Size  Location     Type
 20114 ;;                  1    wreg      void 
 20115 ;; Registers used:
 20116 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20117 ;; Tracked objects:
 20118 ;;		On entry : 0/0
 20119 ;;		On exit  : 0/0
 20120 ;;		Unchanged: 0/0
 20121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20122 ;;      Params:         0       0       0       0       0       0       0       0       0
 20123 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20124 ;;      Temps:         18       0       0       0       0       0       0       0       0
 20125 ;;      Totals:        18       0       0       0       0       0       0       0       0
 20126 ;;Total ram usage:       18 bytes
 20127 ;; Hardware stack levels used:    1
 20128 ;; Hardware stack levels required when called:    3
 20129 ;; This function calls:
 20130 ;;		_buttonHandler
 20131 ;;		_sevenSegmentUpdate
 20132 ;;		_updateSeconds
 20133 ;; This function is called by:
 20134 ;;		Interrupt level 2
 20135 ;; This function uses a non-reentrant model
 20136 ;;
 20137                           
 20138                           	psect	intcode
 20139  000008                     __pintcode:
 20140                           	opt stack 0
 20141  000008                     _ISR:
 20142                           	opt stack 17
 20143                           
 20144                           ; BSR set to: 0
 20145                           ;incstack = 0
 20146  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20147  00000A  CFFA F016          	movff	pclath,??_ISR
 20148  00000E  CFFB F017          	movff	pclatu,??_ISR+1
 20149  000012  CFE9 F018          	movff	fsr0l,??_ISR+2
 20150  000016  CFEA F019          	movff	fsr0h,??_ISR+3
 20151  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+4
 20152  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+5
 20153  000022  CFD9 F01C          	movff	fsr2l,??_ISR+6
 20154  000026  CFDA F01D          	movff	fsr2h,??_ISR+7
 20155  00002A  CFF3 F01E          	movff	prodl,??_ISR+8
 20156  00002E  CFF4 F01F          	movff	prodh,??_ISR+9
 20157  000032  CFF6 F020          	movff	tblptrl,??_ISR+10
 20158  000036  CFF7 F021          	movff	tblptrh,??_ISR+11
 20159  00003A  CFF8 F022          	movff	tblptru,??_ISR+12
 20160  00003E  CFF5 F023          	movff	tablat,??_ISR+13
 20161  000042  C04F  F024         	movff	btemp,??_ISR+14
 20162  000046  C050  F025         	movff	btemp+1,??_ISR+15
 20163  00004A  C051  F026         	movff	btemp+2,??_ISR+16
 20164  00004E  C052  F027         	movff	btemp+3,??_ISR+17
 20165                           
 20166                           ;main.c: 266: if (INTCONbits.TMR0IF) {
 20167  000052  A4F2               	btfss	intcon,2,c	;volatile
 20168  000054  D00F               	goto	i2l683
 20169                           
 20170                           ;main.c: 267: INTCONbits.TMR0IF = 0;
 20171  000056  94F2               	bcf	intcon,2,c	;volatile
 20172                           
 20173                           ;main.c: 268: updateSeconds();
 20174  000058  EC8E  F022         	call	_updateSeconds	;wreg free
 20175                           
 20176                           ;main.c: 269: sevenSegmentUpdate(numberToDisplay);
 20177  00005C  C034  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 20178  000060  C035  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 20179  000064  EC9F  F018         	call	_sevenSegmentUpdate	;wreg free
 20180                           
 20181                           ;main.c: 270: buttonHandler(&buttonState);
 20182  000068  0EBD               	movlw	low _buttonState
 20183  00006A  6E01               	movwf	buttonHandler@state,c
 20184  00006C  0E01               	movlw	high _buttonState
 20185  00006E  6E02               	movwf	buttonHandler@state+1,c
 20186  000070  ECA4  F01A         	call	_buttonHandler	;wreg free
 20187  000074                     i2l683:
 20188                           
 20189                           ;main.c: 271: }
 20190                           ;main.c: 272: if (INTCON3bits.INT2IF) {
 20191  000074  B2F0               	btfsc	intcon3,1,c	;volatile
 20192                           
 20193                           ;main.c: 273: INTCON3bits.INT2IF = 0;
 20194  000076  92F0               	bcf	intcon3,1,c	;volatile
 20195                           
 20196                           ;main.c: 280: }
 20197                           ;main.c: 281: if (RCIF) {
 20198  000078  C027  F052         	movff	??_ISR+17,btemp+3
 20199  00007C  C026  F051         	movff	??_ISR+16,btemp+2
 20200  000080  C025  F050         	movff	??_ISR+15,btemp+1
 20201  000084  C024  F04F         	movff	??_ISR+14,btemp
 20202  000088  C023  FFF5         	movff	??_ISR+13,tablat
 20203  00008C  C022  FFF8         	movff	??_ISR+12,tblptru
 20204  000090  C021  FFF7         	movff	??_ISR+11,tblptrh
 20205  000094  C020  FFF6         	movff	??_ISR+10,tblptrl
 20206  000098  C01F  FFF4         	movff	??_ISR+9,prodh
 20207  00009C  C01E  FFF3         	movff	??_ISR+8,prodl
 20208  0000A0  C01D  FFDA         	movff	??_ISR+7,fsr2h
 20209  0000A4  C01C  FFD9         	movff	??_ISR+6,fsr2l
 20210  0000A8  C01B  FFE2         	movff	??_ISR+5,fsr1h
 20211  0000AC  C01A  FFE1         	movff	??_ISR+4,fsr1l
 20212  0000B0  C019  FFEA         	movff	??_ISR+3,fsr0h
 20213  0000B4  C018  FFE9         	movff	??_ISR+2,fsr0l
 20214  0000B8  C017  FFFB         	movff	??_ISR+1,pclatu
 20215  0000BC  C016  FFFA         	movff	??_ISR,pclath
 20216  0000C0  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20217  0000C2  0011               	retfie		f
 20218  0000C4                     __end_of_ISR:
 20219                           	opt stack 0
 20220                           pclatu	equ	0xFFB
 20221                           pclath	equ	0xFFA
 20222                           tblptru	equ	0xFF8
 20223                           tblptrh	equ	0xFF7
 20224                           tblptrl	equ	0xFF6
 20225                           tablat	equ	0xFF5
 20226                           prodh	equ	0xFF4
 20227                           prodl	equ	0xFF3
 20228                           intcon	equ	0xFF2
 20229                           intcon3	equ	0xFF0
 20230                           indf0	equ	0xFEF
 20231                           postinc0	equ	0xFEE
 20232                           plusw0	equ	0xFEB
 20233                           fsr0h	equ	0xFEA
 20234                           fsr0l	equ	0xFE9
 20235                           wreg	equ	0xFE8
 20236                           indf1	equ	0xFE7
 20237                           postinc1	equ	0xFE6
 20238                           postdec1	equ	0xFE5
 20239                           plusw1	equ	0xFE3
 20240                           fsr1h	equ	0xFE2
 20241                           fsr1l	equ	0xFE1
 20242                           indf2	equ	0xFDF
 20243                           postinc2	equ	0xFDE
 20244                           postdec2	equ	0xFDD
 20245                           plusw2	equ	0xFDB
 20246                           fsr2h	equ	0xFDA
 20247                           fsr2l	equ	0xFD9
 20248                           status	equ	0xFD8
 20249                           
 20250 ;; *************** function _updateSeconds *****************
 20251 ;; Defined at:
 20252 ;;		line 28 in file "src/stack/stack.c"
 20253 ;; Parameters:    Size  Location     Type
 20254 ;;		None
 20255 ;; Auto vars:     Size  Location     Type
 20256 ;;		None
 20257 ;; Return value:  Size  Location     Type
 20258 ;;                  1    wreg      void 
 20259 ;; Registers used:
 20260 ;;		wreg, status,2, status,0
 20261 ;; Tracked objects:
 20262 ;;		On entry : 0/0
 20263 ;;		On exit  : 0/0
 20264 ;;		Unchanged: 0/0
 20265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20266 ;;      Params:         0       0       0       0       0       0       0       0       0
 20267 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20268 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20269 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20270 ;;Total ram usage:        0 bytes
 20271 ;; Hardware stack levels used:    1
 20272 ;; This function calls:
 20273 ;;		Nothing
 20274 ;; This function is called by:
 20275 ;;		_ISR
 20276 ;; This function uses a non-reentrant model
 20277 ;;
 20278                           
 20279                           	psect	text93
 20280  00451C                     __ptext93:
 20281                           	opt stack 0
 20282  00451C                     _updateSeconds:
 20283                           	opt stack 19
 20284                           
 20285                           ;stack.c: 29: uint16_t static prescaler_ms = 0;
 20286                           ;stack.c: 33: if (prescaler_ms == 243) {
 20287                           
 20288                           ;incstack = 0
 20289  00451C  0EF3               	movlw	243
 20290  00451E  1841               	xorwf	updateSeconds@prescaler_ms,w,c
 20291  004520  1042               	iorwf	updateSeconds@prescaler_ms+1,w,c
 20292  004522  A4D8               	btfss	status,2,c
 20293  004524  D00B               	goto	i2l527
 20294                           
 20295                           ;stack.c: 34: prescaler_ms = 0;
 20296  004526  0E00               	movlw	0
 20297  004528  6E42               	movwf	updateSeconds@prescaler_ms+1,c
 20298  00452A  0E00               	movlw	0
 20299  00452C  6E41               	movwf	updateSeconds@prescaler_ms,c
 20300                           
 20301                           ;stack.c: 35: seconds++;
 20302  00452E  0E01               	movlw	1
 20303  004530  2638               	addwf	_seconds,f,c
 20304  004532  0E00               	movlw	0
 20305  004534  2239               	addwfc	_seconds+1,f,c
 20306  004536  223A               	addwfc	_seconds+2,f,c
 20307  004538  223B               	addwfc	_seconds+3,f,c
 20308                           
 20309                           ;stack.c: 36: } else {
 20310  00453A  0012               	return	
 20311  00453C                     i2l527:
 20312                           
 20313                           ;stack.c: 37: prescaler_ms++;
 20314  00453C  4A41               	infsnz	updateSeconds@prescaler_ms,f,c
 20315  00453E  2A42               	incf	updateSeconds@prescaler_ms+1,f,c
 20316  004540  0012               	return	
 20317  004542                     __end_of_updateSeconds:
 20318                           	opt stack 0
 20319                           pclatu	equ	0xFFB
 20320                           pclath	equ	0xFFA
 20321                           tblptru	equ	0xFF8
 20322                           tblptrh	equ	0xFF7
 20323                           tblptrl	equ	0xFF6
 20324                           tablat	equ	0xFF5
 20325                           prodh	equ	0xFF4
 20326                           prodl	equ	0xFF3
 20327                           intcon	equ	0xFF2
 20328                           intcon3	equ	0xFF0
 20329                           indf0	equ	0xFEF
 20330                           postinc0	equ	0xFEE
 20331                           plusw0	equ	0xFEB
 20332                           fsr0h	equ	0xFEA
 20333                           fsr0l	equ	0xFE9
 20334                           wreg	equ	0xFE8
 20335                           indf1	equ	0xFE7
 20336                           postinc1	equ	0xFE6
 20337                           postdec1	equ	0xFE5
 20338                           plusw1	equ	0xFE3
 20339                           fsr1h	equ	0xFE2
 20340                           fsr1l	equ	0xFE1
 20341                           indf2	equ	0xFDF
 20342                           postinc2	equ	0xFDE
 20343                           postdec2	equ	0xFDD
 20344                           plusw2	equ	0xFDB
 20345                           fsr2h	equ	0xFDA
 20346                           fsr2l	equ	0xFD9
 20347                           status	equ	0xFD8
 20348                           
 20349 ;; *************** function _sevenSegmentUpdate *****************
 20350 ;; Defined at:
 20351 ;;		line 41 in file "src/system/sevenseg.c"
 20352 ;; Parameters:    Size  Location     Type
 20353 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 20354 ;; Auto vars:     Size  Location     Type
 20355 ;;  i               1   20[COMRAM] unsigned char 
 20356 ;; Return value:  Size  Location     Type
 20357 ;;                  1    wreg      void 
 20358 ;; Registers used:
 20359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20360 ;; Tracked objects:
 20361 ;;		On entry : 0/0
 20362 ;;		On exit  : 0/0
 20363 ;;		Unchanged: 0/0
 20364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20365 ;;      Params:         2       0       0       0       0       0       0       0       0
 20366 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20367 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20368 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20369 ;;Total ram usage:        7 bytes
 20370 ;; Hardware stack levels used:    1
 20371 ;; Hardware stack levels required when called:    2
 20372 ;; This function calls:
 20373 ;;		_parseNumber
 20374 ;; This function is called by:
 20375 ;;		_ISR
 20376 ;; This function uses a non-reentrant model
 20377 ;;
 20378                           
 20379                           	psect	text94
 20380  00313E                     __ptext94:
 20381                           	opt stack 0
 20382  00313E                     _sevenSegmentUpdate:
 20383                           	opt stack 17
 20384                           
 20385                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 20386                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 20387                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 20388                           
 20389                           ;incstack = 0
 20390  00313E  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20391  003142  0E01               	movlw	1
 20392  003144  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20393  003146  2A11               	incf	??_sevenSegmentUpdate,f,c
 20394  003148  D002               	goto	i2u729_44
 20395  00314A                     i2u729_45:
 20396  00314A  90D8               	bcf	status,0,c
 20397  00314C  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20398  00314E                     i2u729_44:
 20399  00314E  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20400  003150  D7FC               	goto	i2u729_45
 20401  003152  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20402  003154  0AFF               	xorlw	255
 20403  003156  1682               	andwf	3970,f,c	;volatile
 20404                           
 20405                           ;sevenseg.c: 46: PORTA = 0x00;
 20406  003158  0E00               	movlw	0
 20407  00315A  6E80               	movwf	3968,c	;volatile
 20408                           
 20409                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 20410  00315C  0E02               	movlw	2
 20411  00315E  6049               	cpfslt	sevenSegmentUpdate@digitPointer,c
 20412  003160  D007               	goto	i2l713
 20413  003162  0E01               	movlw	1
 20414  003164  2449               	addwf	sevenSegmentUpdate@digitPointer,w,c
 20415  003166  6E13               	movwf	_sevenSegmentUpdate$2071,c
 20416  003168  6A14               	clrf	_sevenSegmentUpdate$2071+1,c
 20417  00316A  0E00               	movlw	0
 20418  00316C  2214               	addwfc	_sevenSegmentUpdate$2071+1,f,c
 20419  00316E  D004               	goto	i2l715
 20420  003170                     i2l713:
 20421  003170  0E00               	movlw	0
 20422  003172  6E14               	movwf	_sevenSegmentUpdate$2071+1,c
 20423  003174  0E00               	movlw	0
 20424  003176  6E13               	movwf	_sevenSegmentUpdate$2071,c
 20425  003178                     i2l715:
 20426  003178  C013  F049         	movff	_sevenSegmentUpdate$2071,sevenSegmentUpdate@digitPointer
 20427                           
 20428                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 20429  00317C  0EE8               	movlw	232
 20430  00317E  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 20431  003180  0E03               	movlw	3
 20432  003182  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 20433  003184  B0D8               	btfsc	status,0,c
 20434  003186  0012               	return	
 20435                           
 20436                           ;sevenseg.c: 51: }
 20437                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 20438                           
 20439                           ;sevenseg.c: 50: return;
 20440  003188  0E00               	movlw	0
 20441  00318A  6E15               	movwf	sevenSegmentUpdate@i,c
 20442  00318C                     i2l6249:
 20443  00318C  0E02               	movlw	2
 20444  00318E  6415               	cpfsgt	sevenSegmentUpdate@i,c
 20445  003190  D001               	goto	i2l718
 20446  003192  D013               	goto	i2u733_40
 20447  003194                     i2l718:
 20448                           
 20449                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 20450  003194  5015               	movf	sevenSegmentUpdate@i,w,c
 20451  003196  0D01               	mullw	1
 20452  003198  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20453  00319A  24F3               	addwf	prodl,w,c
 20454  00319C  6ED9               	movwf	fsr2l,c
 20455  00319E  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20456  0031A0  20F4               	addwfc	prodh,w,c
 20457  0031A2  6EDA               	movwf	fsr2h,c
 20458  0031A4  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 20459  0031A8  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 20460  0031AC  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 20461  0031B0  EC8E  F01C         	call	_parseNumber	;wreg free
 20462  0031B4  6EDF               	movwf	indf2,c
 20463  0031B6  2A15               	incf	sevenSegmentUpdate@i,f,c
 20464  0031B8  D7E9               	goto	i2l6249
 20465  0031BA                     i2u733_40:
 20466                           
 20467                           ;sevenseg.c: 54: }
 20468                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 20469  0031BA  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 20470  0031BE  0E01               	movlw	1
 20471  0031C0  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 20472  0031C2  2A11               	incf	??_sevenSegmentUpdate,f,c
 20473  0031C4  D002               	goto	i2u734_44
 20474  0031C6                     i2u734_45:
 20475  0031C6  90D8               	bcf	status,0,c
 20476  0031C8  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 20477  0031CA                     i2u734_44:
 20478  0031CA  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 20479  0031CC  D7FC               	goto	i2u734_45
 20480  0031CE  5012               	movf	??_sevenSegmentUpdate+1,w,c
 20481  0031D0  1282               	iorwf	3970,f,c	;volatile
 20482                           
 20483                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 20484  0031D2  5049               	movf	sevenSegmentUpdate@digitPointer,w,c
 20485  0031D4  0D01               	mullw	1
 20486  0031D6  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 20487  0031D8  24F3               	addwf	prodl,w,c
 20488  0031DA  6ED9               	movwf	fsr2l,c
 20489  0031DC  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 20490  0031DE  20F4               	addwfc	prodh,w,c
 20491  0031E0  6EDA               	movwf	fsr2h,c
 20492  0031E2  50DF               	movf	indf2,w,c
 20493  0031E4  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 20494  0031E6  5011               	movf	??_sevenSegmentUpdate,w,c
 20495  0031E8  0D01               	mullw	1
 20496  0031EA  0EBE               	movlw	low _sevenSegCharacters
 20497  0031EC  24F3               	addwf	prodl,w,c
 20498  0031EE  6ED9               	movwf	fsr2l,c
 20499  0031F0  0E01               	movlw	high _sevenSegCharacters
 20500  0031F2  20F4               	addwfc	prodh,w,c
 20501  0031F4  6EDA               	movwf	fsr2h,c
 20502  0031F6  50DF               	movf	indf2,w,c
 20503  0031F8  6E80               	movwf	3968,c	;volatile
 20504  0031FA  0012               	return		;funcret
 20505  0031FC                     __end_of_sevenSegmentUpdate:
 20506                           	opt stack 0
 20507                           pclatu	equ	0xFFB
 20508                           pclath	equ	0xFFA
 20509                           tblptru	equ	0xFF8
 20510                           tblptrh	equ	0xFF7
 20511                           tblptrl	equ	0xFF6
 20512                           tablat	equ	0xFF5
 20513                           prodh	equ	0xFF4
 20514                           prodl	equ	0xFF3
 20515                           intcon	equ	0xFF2
 20516                           intcon3	equ	0xFF0
 20517                           indf0	equ	0xFEF
 20518                           postinc0	equ	0xFEE
 20519                           plusw0	equ	0xFEB
 20520                           fsr0h	equ	0xFEA
 20521                           fsr0l	equ	0xFE9
 20522                           wreg	equ	0xFE8
 20523                           indf1	equ	0xFE7
 20524                           postinc1	equ	0xFE6
 20525                           postdec1	equ	0xFE5
 20526                           plusw1	equ	0xFE3
 20527                           fsr1h	equ	0xFE2
 20528                           fsr1l	equ	0xFE1
 20529                           indf2	equ	0xFDF
 20530                           postinc2	equ	0xFDE
 20531                           postdec2	equ	0xFDD
 20532                           plusw2	equ	0xFDB
 20533                           fsr2h	equ	0xFDA
 20534                           fsr2l	equ	0xFD9
 20535                           status	equ	0xFD8
 20536                           
 20537 ;; *************** function _parseNumber *****************
 20538 ;; Defined at:
 20539 ;;		line 59 in file "src/system/sevenseg.c"
 20540 ;; Parameters:    Size  Location     Type
 20541 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 20542 ;;  digit           1    9[COMRAM] unsigned char 
 20543 ;; Auto vars:     Size  Location     Type
 20544 ;;  hundreds        1   13[COMRAM] unsigned char 
 20545 ;;  tens            1   12[COMRAM] unsigned char 
 20546 ;;  ones            1   11[COMRAM] unsigned char 
 20547 ;; Return value:  Size  Location     Type
 20548 ;;                  1    wreg      unsigned char 
 20549 ;; Registers used:
 20550 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 20551 ;; Tracked objects:
 20552 ;;		On entry : 0/0
 20553 ;;		On exit  : 0/0
 20554 ;;		Unchanged: 0/0
 20555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20556 ;;      Params:         3       0       0       0       0       0       0       0       0
 20557 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20558 ;;      Temps:          1       0       0       0       0       0       0       0       0
 20559 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20560 ;;Total ram usage:        7 bytes
 20561 ;; Hardware stack levels used:    1
 20562 ;; Hardware stack levels required when called:    1
 20563 ;; This function calls:
 20564 ;;		i2___lwdiv
 20565 ;; This function is called by:
 20566 ;;		_sevenSegmentUpdate
 20567 ;; This function uses a non-reentrant model
 20568 ;;
 20569                           
 20570                           	psect	text95
 20571  00391C                     __ptext95:
 20572                           	opt stack 0
 20573  00391C                     _parseNumber:
 20574                           	opt stack 17
 20575                           
 20576                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 20577                           
 20578                           ;incstack = 0
 20579  00391C  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 20580  003920  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 20581  003924  0E00               	movlw	0
 20582  003926  6E04               	movwf	i2___lwdiv@divisor+1,c
 20583  003928  0E64               	movlw	100
 20584  00392A  6E03               	movwf	i2___lwdiv@divisor,c
 20585  00392C  EC86  F01F         	call	i2___lwdiv	;wreg free
 20586  003930  5001               	movf	?i2___lwdiv,w,c
 20587  003932  6E0E               	movwf	parseNumber@hundreds,c
 20588                           
 20589                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 20590  003934  500E               	movf	parseNumber@hundreds,w,c
 20591  003936  0D64               	mullw	100
 20592  003938  1EF3               	comf	prodl,f,c
 20593  00393A  1EF4               	comf	prodh,f,c
 20594  00393C  4AF3               	infsnz	prodl,f,c
 20595  00393E  2AF4               	incf	prodh,f,c
 20596  003940  5008               	movf	parseNumber@numberToDisplay,w,c
 20597  003942  24F3               	addwf	prodl,w,c
 20598  003944  6E01               	movwf	i2___lwdiv@dividend,c
 20599  003946  5009               	movf	parseNumber@numberToDisplay+1,w,c
 20600  003948  20F4               	addwfc	prodh,w,c
 20601  00394A  6E02               	movwf	i2___lwdiv@dividend+1,c
 20602  00394C  0E00               	movlw	0
 20603  00394E  6E04               	movwf	i2___lwdiv@divisor+1,c
 20604  003950  0E0A               	movlw	10
 20605  003952  6E03               	movwf	i2___lwdiv@divisor,c
 20606  003954  EC86  F01F         	call	i2___lwdiv	;wreg free
 20607  003958  5001               	movf	?i2___lwdiv,w,c
 20608  00395A  6E0D               	movwf	parseNumber@tens,c
 20609                           
 20610                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 20611  00395C  500D               	movf	parseNumber@tens,w,c
 20612  00395E  0D0A               	mullw	10
 20613  003960  CFF3 F00B          	movff	prodl,??_parseNumber
 20614  003964  500E               	movf	parseNumber@hundreds,w,c
 20615  003966  0D64               	mullw	100
 20616  003968  50F3               	movf	prodl,w,c
 20617  00396A  240B               	addwf	??_parseNumber,w,c
 20618  00396C  0800               	sublw	0
 20619  00396E  2408               	addwf	parseNumber@numberToDisplay,w,c
 20620  003970  6E0C               	movwf	parseNumber@ones,c
 20621                           
 20622                           ;sevenseg.c: 64: switch (digit) {
 20623  003972  D008               	goto	i2l722
 20624  003974                     
 20625                           ;sevenseg.c: 66: return ones;
 20626  003974  500C               	movf	parseNumber@ones,w,c
 20627  003976  0012               	return	
 20628  003978                     
 20629                           ;sevenseg.c: 68: return tens;
 20630  003978  500D               	movf	parseNumber@tens,w,c
 20631  00397A  0012               	return	
 20632  00397C                     
 20633                           ;sevenseg.c: 70: return hundreds;
 20634  00397C  500E               	movf	parseNumber@hundreds,w,c
 20635  00397E  0012               	return	
 20636  003980  0E00               	movlw	0
 20637                           
 20638                           ;sevenseg.c: 72: }
 20639  003982  0012               	return	
 20640  003984                     i2l722:
 20641  003984  500A               	movf	parseNumber@digit,w,c
 20642                           
 20643                           ; Switch size 1, requested type "space"
 20644                           ; Number of cases is 3, Range of values is 0 to 2
 20645                           ; switch strategies available:
 20646                           ; Name         Instructions Cycles
 20647                           ; simple_byte           10     6 (average)
 20648                           ;	Chosen strategy is simple_byte
 20649  003986  0A00               	xorlw	0	; case 0
 20650  003988  B4D8               	btfsc	status,2,c
 20651  00398A  D7F8               	goto	i2l726
 20652  00398C  0A01               	xorlw	1	; case 1
 20653  00398E  B4D8               	btfsc	status,2,c
 20654  003990  D7F3               	goto	i2l725
 20655  003992  0A03               	xorlw	3	; case 2
 20656  003994  B4D8               	btfsc	status,2,c
 20657  003996  D7EE               	goto	i2l723
 20658  003998  D7F3               	goto	i2l727
 20659  00399A                     __end_of_parseNumber:
 20660                           	opt stack 0
 20661                           pclatu	equ	0xFFB
 20662                           pclath	equ	0xFFA
 20663                           tblptru	equ	0xFF8
 20664                           tblptrh	equ	0xFF7
 20665                           tblptrl	equ	0xFF6
 20666                           tablat	equ	0xFF5
 20667                           prodh	equ	0xFF4
 20668                           prodl	equ	0xFF3
 20669                           intcon	equ	0xFF2
 20670                           intcon3	equ	0xFF0
 20671                           indf0	equ	0xFEF
 20672                           postinc0	equ	0xFEE
 20673                           plusw0	equ	0xFEB
 20674                           fsr0h	equ	0xFEA
 20675                           fsr0l	equ	0xFE9
 20676                           wreg	equ	0xFE8
 20677                           indf1	equ	0xFE7
 20678                           postinc1	equ	0xFE6
 20679                           postdec1	equ	0xFE5
 20680                           plusw1	equ	0xFE3
 20681                           fsr1h	equ	0xFE2
 20682                           fsr1l	equ	0xFE1
 20683                           indf2	equ	0xFDF
 20684                           postinc2	equ	0xFDE
 20685                           postdec2	equ	0xFDD
 20686                           plusw2	equ	0xFDB
 20687                           fsr2h	equ	0xFDA
 20688                           fsr2l	equ	0xFD9
 20689                           status	equ	0xFD8
 20690                           
 20691 ;; *************** function i2___lwdiv *****************
 20692 ;; Defined at:
 20693 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 20694 ;; Parameters:    Size  Location     Type
 20695 ;;  dividend        2    0[COMRAM] unsigned int 
 20696 ;;  divisor         2    2[COMRAM] unsigned int 
 20697 ;; Auto vars:     Size  Location     Type
 20698 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 20699 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 20700 ;; Return value:  Size  Location     Type
 20701 ;;                  2    0[COMRAM] unsigned int 
 20702 ;; Registers used:
 20703 ;;		wreg, status,2, status,0
 20704 ;; Tracked objects:
 20705 ;;		On entry : 0/0
 20706 ;;		On exit  : 0/0
 20707 ;;		Unchanged: 0/0
 20708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20709 ;;      Params:         4       0       0       0       0       0       0       0       0
 20710 ;;      Locals:         3       0       0       0       0       0       0       0       0
 20711 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20712 ;;      Totals:         7       0       0       0       0       0       0       0       0
 20713 ;;Total ram usage:        7 bytes
 20714 ;; Hardware stack levels used:    1
 20715 ;; This function calls:
 20716 ;;		Nothing
 20717 ;; This function is called by:
 20718 ;;		_parseNumber
 20719 ;; This function uses a non-reentrant model
 20720 ;;
 20721                           
 20722                           	psect	text96
 20723  003F0C                     __ptext96:
 20724                           	opt stack 0
 20725  003F0C                     i2___lwdiv:
 20726                           	opt stack 17
 20727                           
 20728                           ;incstack = 0
 20729  003F0C  0E00               	movlw	0
 20730  003F0E  6E06               	movwf	i2___lwdiv@quotient+1,c
 20731  003F10  0E00               	movlw	0
 20732  003F12  6E05               	movwf	i2___lwdiv@quotient,c
 20733  003F14  5003               	movf	i2___lwdiv@divisor,w,c
 20734  003F16  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 20735  003F18  B4D8               	btfsc	status,2,c
 20736  003F1A  D01C               	goto	i2l1436
 20737  003F1C  0E01               	movlw	1
 20738  003F1E  6E07               	movwf	i2___lwdiv@counter,c
 20739  003F20  D004               	goto	i2l1431
 20740  003F22  90D8               	bcf	status,0,c
 20741  003F24  3603               	rlcf	i2___lwdiv@divisor,f,c
 20742  003F26  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 20743  003F28  2A07               	incf	i2___lwdiv@counter,f,c
 20744  003F2A                     i2l1431:
 20745  003F2A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 20746  003F2C  D7FA               	goto	i2l1432
 20747  003F2E                     i2u639_40:
 20748  003F2E  90D8               	bcf	status,0,c
 20749  003F30  3605               	rlcf	i2___lwdiv@quotient,f,c
 20750  003F32  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 20751  003F34  5003               	movf	i2___lwdiv@divisor,w,c
 20752  003F36  5C01               	subwf	i2___lwdiv@dividend,w,c
 20753  003F38  5004               	movf	i2___lwdiv@divisor+1,w,c
 20754  003F3A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 20755  003F3C  A0D8               	btfss	status,0,c
 20756  003F3E  D005               	goto	i2l1435
 20757  003F40  5003               	movf	i2___lwdiv@divisor,w,c
 20758  003F42  5E01               	subwf	i2___lwdiv@dividend,f,c
 20759  003F44  5004               	movf	i2___lwdiv@divisor+1,w,c
 20760  003F46  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 20761  003F48  8005               	bsf	i2___lwdiv@quotient,0,c
 20762  003F4A                     i2l1435:
 20763  003F4A  90D8               	bcf	status,0,c
 20764  003F4C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 20765  003F4E  3203               	rrcf	i2___lwdiv@divisor,f,c
 20766  003F50  2E07               	decfsz	i2___lwdiv@counter,f,c
 20767  003F52  D7ED               	goto	i2u639_40
 20768  003F54                     i2l1436:
 20769  003F54  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 20770  003F58  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 20771  003F5C  0012               	return		;funcret
 20772  003F5E                     __end_ofi2___lwdiv:
 20773                           	opt stack 0
 20774                           pclatu	equ	0xFFB
 20775                           pclath	equ	0xFFA
 20776                           tblptru	equ	0xFF8
 20777                           tblptrh	equ	0xFF7
 20778                           tblptrl	equ	0xFF6
 20779                           tablat	equ	0xFF5
 20780                           prodh	equ	0xFF4
 20781                           prodl	equ	0xFF3
 20782                           intcon	equ	0xFF2
 20783                           intcon3	equ	0xFF0
 20784                           indf0	equ	0xFEF
 20785                           postinc0	equ	0xFEE
 20786                           plusw0	equ	0xFEB
 20787                           fsr0h	equ	0xFEA
 20788                           fsr0l	equ	0xFE9
 20789                           wreg	equ	0xFE8
 20790                           indf1	equ	0xFE7
 20791                           postinc1	equ	0xFE6
 20792                           postdec1	equ	0xFE5
 20793                           plusw1	equ	0xFE3
 20794                           fsr1h	equ	0xFE2
 20795                           fsr1l	equ	0xFE1
 20796                           indf2	equ	0xFDF
 20797                           postinc2	equ	0xFDE
 20798                           postdec2	equ	0xFDD
 20799                           plusw2	equ	0xFDB
 20800                           fsr2h	equ	0xFDA
 20801                           fsr2l	equ	0xFD9
 20802                           status	equ	0xFD8
 20803                           
 20804 ;; *************** function _buttonHandler *****************
 20805 ;; Defined at:
 20806 ;;		line 244 in file "src/system/main.c"
 20807 ;; Parameters:    Size  Location     Type
 20808 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 20809 ;;		 -> buttonState(1), 
 20810 ;; Auto vars:     Size  Location     Type
 20811 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 20812 ;; Return value:  Size  Location     Type
 20813 ;;                  1    wreg      void 
 20814 ;; Registers used:
 20815 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20816 ;; Tracked objects:
 20817 ;;		On entry : 0/0
 20818 ;;		On exit  : 0/0
 20819 ;;		Unchanged: 0/0
 20820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20821 ;;      Params:         2       0       0       0       0       0       0       0       0
 20822 ;;      Locals:         4       0       0       0       0       0       0       0       0
 20823 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20824 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20825 ;;Total ram usage:        6 bytes
 20826 ;; Hardware stack levels used:    1
 20827 ;; This function calls:
 20828 ;;		Nothing
 20829 ;; This function is called by:
 20830 ;;		_ISR
 20831 ;; This function uses a non-reentrant model
 20832 ;;
 20833                           
 20834                           	psect	text97
 20835  003548                     __ptext97:
 20836                           	opt stack 0
 20837  003548                     _buttonHandler:
 20838                           	opt stack 19
 20839                           
 20840                           ;main.c: 245: uint8_t static oldState = 0;
 20841                           ;main.c: 246: uint8_t static newState = 0;
 20842                           ;main.c: 247: uint32_t static debounceCounter = 0;
 20843                           ;main.c: 248: const uint32_t debounceValue = 0x1f;
 20844                           
 20845                           ;incstack = 0
 20846  003548  0E1F               	movlw	31
 20847  00354A  6E03               	movwf	buttonHandler@debounceValue,c
 20848  00354C  0E00               	movlw	0
 20849  00354E  6E04               	movwf	buttonHandler@debounceValue+1,c
 20850  003550  0E00               	movlw	0
 20851  003552  6E05               	movwf	buttonHandler@debounceValue+2,c
 20852  003554  0E00               	movlw	0
 20853  003556  6E06               	movwf	buttonHandler@debounceValue+3,c
 20854                           
 20855                           ;main.c: 249: if ((unsigned)(!(PORTB & (1<<5)))) {
 20856  003558  BA81               	btfsc	3969,5,c	;volatile
 20857  00355A  D00F               	goto	i2l673
 20858                           
 20859                           ;main.c: 250: if (debounceCounter < 0xffff)
 20860  00355C  5033               	movf	buttonHandler@debounceCounter+3,w,c
 20861  00355E  1032               	iorwf	buttonHandler@debounceCounter+2,w,c
 20862  003560  E114               	bnz	i2l6217
 20863  003562  2830               	incf	buttonHandler@debounceCounter,w,c
 20864  003564  0EFF               	movlw	255
 20865  003566  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 20866  003568  B0D8               	btfsc	status,0,c
 20867  00356A  D00F               	goto	i2l675
 20868                           
 20869                           ;main.c: 251: debounceCounter++;
 20870  00356C  0E01               	movlw	1
 20871  00356E  2630               	addwf	buttonHandler@debounceCounter,f,c
 20872  003570  0E00               	movlw	0
 20873  003572  2231               	addwfc	buttonHandler@debounceCounter+1,f,c
 20874  003574  2232               	addwfc	buttonHandler@debounceCounter+2,f,c
 20875  003576  2233               	addwfc	buttonHandler@debounceCounter+3,f,c
 20876                           
 20877                           ;main.c: 252: } else {
 20878  003578  D008               	goto	i2l675
 20879  00357A                     i2l673:
 20880                           
 20881                           ;main.c: 253: debounceCounter = 0;
 20882  00357A  0E00               	movlw	0
 20883  00357C  6E30               	movwf	buttonHandler@debounceCounter,c
 20884  00357E  0E00               	movlw	0
 20885  003580  6E31               	movwf	buttonHandler@debounceCounter+1,c
 20886  003582  0E00               	movlw	0
 20887  003584  6E32               	movwf	buttonHandler@debounceCounter+2,c
 20888  003586  0E00               	movlw	0
 20889  003588  6E33               	movwf	buttonHandler@debounceCounter+3,c
 20890  00358A                     i2l675:
 20891  00358A                     i2l6217:
 20892                           
 20893                           ;main.c: 254: }
 20894                           ;main.c: 255: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 20895  00358A  5003               	movf	buttonHandler@debounceValue,w,c
 20896  00358C  5C30               	subwf	buttonHandler@debounceCounter,w,c
 20897  00358E  5004               	movf	buttonHandler@debounceValue+1,w,c
 20898  003590  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 20899  003592  5005               	movf	buttonHandler@debounceValue+2,w,c
 20900  003594  5832               	subwfb	buttonHandler@debounceCounter+2,w,c
 20901  003596  5006               	movf	buttonHandler@debounceValue+3,w,c
 20902  003598  5833               	subwfb	buttonHandler@debounceCounter+3,w,c
 20903  00359A  A0D8               	btfss	status,0,c
 20904  00359C  D002               	goto	i2u725_40
 20905  00359E  0E01               	movlw	1
 20906  0035A0  D001               	goto	i2u726_40
 20907  0035A2                     i2u725_40:
 20908  0035A2  0E00               	movlw	0
 20909  0035A4                     i2u726_40:
 20910  0035A4  6E4A               	movwf	buttonHandler@newState,c
 20911                           
 20912                           ;main.c: 256: if (newState && !oldState) {
 20913  0035A6  504A               	movf	buttonHandler@newState,w,c
 20914  0035A8  B4D8               	btfsc	status,2,c
 20915  0035AA  D011               	goto	i2l676
 20916  0035AC  504B               	movf	buttonHandler@oldState,w,c
 20917  0035AE  A4D8               	btfss	status,2,c
 20918  0035B0  D00E               	goto	i2l676
 20919                           
 20920                           ;main.c: 257: debounceCounter = debounceValue;
 20921  0035B2  C003  F030         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 20922  0035B6  C004  F031         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 20923  0035BA  C005  F032         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 20924  0035BE  C006  F033         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 20925                           
 20926                           ;main.c: 258: *state = 1;
 20927  0035C2  C001  FFD9         	movff	buttonHandler@state,fsr2l
 20928  0035C6  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 20929  0035CA  0E01               	movlw	1
 20930  0035CC  D005               	goto	L8
 20931  0035CE                     i2l676:
 20932                           
 20933                           ;main.c: 260: *state = 0;
 20934  0035CE  C001  FFD9         	movff	buttonHandler@state,fsr2l
 20935  0035D2  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 20936  0035D6  0E00               	movlw	0
 20937  0035D8                     L8:
 20938  0035D8  6EDF               	movwf	indf2,c
 20939                           
 20940                           ;main.c: 261: }
 20941                           ;main.c: 262: oldState = newState;
 20942  0035DA  C04A  F04B         	movff	buttonHandler@newState,buttonHandler@oldState
 20943  0035DE  0012               	return		;funcret
 20944  0035E0                     __end_of_buttonHandler:
 20945                           	opt stack 0
 20946                           pclatu	equ	0xFFB
 20947                           pclath	equ	0xFFA
 20948                           tblptru	equ	0xFF8
 20949                           tblptrh	equ	0xFF7
 20950                           tblptrl	equ	0xFF6
 20951                           tablat	equ	0xFF5
 20952                           prodh	equ	0xFF4
 20953                           prodl	equ	0xFF3
 20954                           intcon	equ	0xFF2
 20955                           intcon3	equ	0xFF0
 20956                           indf0	equ	0xFEF
 20957                           postinc0	equ	0xFEE
 20958                           plusw0	equ	0xFEB
 20959                           fsr0h	equ	0xFEA
 20960                           fsr0l	equ	0xFE9
 20961                           wreg	equ	0xFE8
 20962                           indf1	equ	0xFE7
 20963                           postinc1	equ	0xFE6
 20964                           postdec1	equ	0xFE5
 20965                           plusw1	equ	0xFE3
 20966                           fsr1h	equ	0xFE2
 20967                           fsr1l	equ	0xFE1
 20968                           indf2	equ	0xFDF
 20969                           postinc2	equ	0xFDE
 20970                           postdec2	equ	0xFDD
 20971                           plusw2	equ	0xFDB
 20972                           fsr2h	equ	0xFDA
 20973                           fsr2l	equ	0xFD9
 20974                           status	equ	0xFD8
 20975                           pclatu	equ	0xFFB
 20976                           pclath	equ	0xFFA
 20977                           tblptru	equ	0xFF8
 20978                           tblptrh	equ	0xFF7
 20979                           tblptrl	equ	0xFF6
 20980                           tablat	equ	0xFF5
 20981                           prodh	equ	0xFF4
 20982                           prodl	equ	0xFF3
 20983                           intcon	equ	0xFF2
 20984                           intcon3	equ	0xFF0
 20985                           indf0	equ	0xFEF
 20986                           postinc0	equ	0xFEE
 20987                           plusw0	equ	0xFEB
 20988                           fsr0h	equ	0xFEA
 20989                           fsr0l	equ	0xFE9
 20990                           wreg	equ	0xFE8
 20991                           indf1	equ	0xFE7
 20992                           postinc1	equ	0xFE6
 20993                           postdec1	equ	0xFE5
 20994                           plusw1	equ	0xFE3
 20995                           fsr1h	equ	0xFE2
 20996                           fsr1l	equ	0xFE1
 20997                           indf2	equ	0xFDF
 20998                           postinc2	equ	0xFDE
 20999                           postdec2	equ	0xFDD
 21000                           plusw2	equ	0xFDB
 21001                           fsr2h	equ	0xFDA
 21002                           fsr2l	equ	0xFD9
 21003                           status	equ	0xFD8
 21004                           
 21005                           	psect	rparam
 21006  0000                     pclatu	equ	0xFFB
 21007                           pclath	equ	0xFFA
 21008                           tblptru	equ	0xFF8
 21009                           tblptrh	equ	0xFF7
 21010                           tblptrl	equ	0xFF6
 21011                           tablat	equ	0xFF5
 21012                           prodh	equ	0xFF4
 21013                           prodl	equ	0xFF3
 21014                           intcon	equ	0xFF2
 21015                           intcon3	equ	0xFF0
 21016                           indf0	equ	0xFEF
 21017                           postinc0	equ	0xFEE
 21018                           plusw0	equ	0xFEB
 21019                           fsr0h	equ	0xFEA
 21020                           fsr0l	equ	0xFE9
 21021                           wreg	equ	0xFE8
 21022                           indf1	equ	0xFE7
 21023                           postinc1	equ	0xFE6
 21024                           postdec1	equ	0xFE5
 21025                           plusw1	equ	0xFE3
 21026                           fsr1h	equ	0xFE2
 21027                           fsr1l	equ	0xFE1
 21028                           indf2	equ	0xFDF
 21029                           postinc2	equ	0xFDE
 21030                           postdec2	equ	0xFDD
 21031                           plusw2	equ	0xFDB
 21032                           fsr2h	equ	0xFDA
 21033                           fsr2l	equ	0xFD9
 21034                           status	equ	0xFD8
 21035                           
 21036                           	psect	temp
 21037  00004F                     btemp:
 21038                           	opt stack 0
 21039  00004F                     	ds	1
 21040  0000                     int$flags	set	btemp
 21041  0000                     wtemp6	set	btemp+1
 21042                           pclatu	equ	0xFFB
 21043                           pclath	equ	0xFFA
 21044                           tblptru	equ	0xFF8
 21045                           tblptrh	equ	0xFF7
 21046                           tblptrl	equ	0xFF6
 21047                           tablat	equ	0xFF5
 21048                           prodh	equ	0xFF4
 21049                           prodl	equ	0xFF3
 21050                           intcon	equ	0xFF2
 21051                           intcon3	equ	0xFF0
 21052                           indf0	equ	0xFEF
 21053                           postinc0	equ	0xFEE
 21054                           plusw0	equ	0xFEB
 21055                           fsr0h	equ	0xFEA
 21056                           fsr0l	equ	0xFE9
 21057                           wreg	equ	0xFE8
 21058                           indf1	equ	0xFE7
 21059                           postinc1	equ	0xFE6
 21060                           postdec1	equ	0xFE5
 21061                           plusw1	equ	0xFE3
 21062                           fsr1h	equ	0xFE2
 21063                           fsr1l	equ	0xFE1
 21064                           indf2	equ	0xFDF
 21065                           postinc2	equ	0xFDE
 21066                           postdec2	equ	0xFDD
 21067                           plusw2	equ	0xFDB
 21068                           fsr2h	equ	0xFDA
 21069                           fsr2l	equ	0xFD9
 21070                           status	equ	0xFD8


Data Sizes:
    Strings     878
    Constant    11
    Data        48
    BSS         435
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      78
    BANK0           160    159     159
    BANK1           256    139     218
    BANK2           256      0     253
    BANK3           256     50     162
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(BANK0[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK3[112]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 113
		 -> stack.pendingPacketToSend(BANK2[62]), stack(BANK2[113]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    ARP_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK1[1]), 

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_69(CODE[17]), STR_68(CODE[4]), STR_67(CODE[8]), STR_66(CODE[3]), 
		 -> STR_65(CODE[2]), STR_64(CODE[3]), STR_63(CODE[16]), STR_62(CODE[15]), 
		 -> STR_61(CODE[10]), STR_60(CODE[2]), STR_59(CODE[3]), STR_58(CODE[5]), 
		 -> STR_57(CODE[3]), STR_56(CODE[2]), STR_55(CODE[39]), arpEntryToString@string(BANK2[50]), 
		 -> ipAdressToString@address(BANK1[16]), STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 
		 -> macToString@address(BANK0[18]), intToString@number(BANK1[10]), STR_51(CODE[5]), STR_50(CODE[9]), 
		 -> STR_49(CODE[30]), STR_48(CODE[55]), STR_47(CODE[37]), STR_46(CODE[15]), 
		 -> STR_45(CODE[14]), STR_44(CODE[19]), STR_43(CODE[30]), STR_42(CODE[17]), 
		 -> STR_41(CODE[8]), STR_40(CODE[29]), STR_39(CODE[29]), STR_38(CODE[20]), 
		 -> STR_37(CODE[19]), STR_36(CODE[19]), STR_35(CODE[13]), STR_34(CODE[51]), 
		 -> STR_33(CODE[28]), STR_32(CODE[4]), STR_31(CODE[23]), STR_30(CODE[4]), 
		 -> STR_29(CODE[21]), STR_28(CODE[12]), STR_27(CODE[38]), STR_26(CODE[3]), 
		 -> STR_25(CODE[9]), STR_24(CODE[2]), STR_23(CODE[12]), STR_22(CODE[24]), 
		 -> STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[5]), 
		 -> STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[5]), STR_14(CODE[3]), 
		 -> STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[7]), STR_10(CODE[6]), 
		 -> STR_9(CODE[16]), STR_8(CODE[10]), STR_7(CODE[12]), STR_6(CODE[2]), 
		 -> STR_5(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), STR_4(CODE[25]), STR_3(CODE[16]), 
		 -> STR_2(CODE[17]), STR_1(CODE[29]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK1[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_sendRequest@targetMAC(BANK1[6]), ARP_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> ARP_send@ethFrame(BANK0[30]), stack(BANK2[113]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ARP_sendRequest->_ARP_send
    _ARP_checkForEntry->_ipv4_cmp
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_UARTTransmitText
    _ethernetController_updateNextPacketPointer->_ENC424J600_setERXDATAReadPointer
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___wmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_replyIfNeeded->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_UARTTransmitText
    _UARTTransmitText->_macToString
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getSiliconRevision->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getSeconds

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_replyIfNeeded

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  510182
                                            136 BANK1      3     3      0
                                              0 BANK3     50    50      0
                      _ARP_initTable
                           _UARTInit
                    _UARTTransmitInt
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
_ethernetController_getSiliconRevisi
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
       _ipv4_calculateHeaderChecksum
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15    8276
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   12424
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1579
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   19470
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     9     62     248
                                              0 BANK0     68     6     62
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2    1025
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  351212
                                            132 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      80    18     62   96955
                                             52 BANK1     80    18     62
                  _ARP_checkForEntry
              _ARP_getEntryFromTable
                    _ARP_sendRequest
                   _UARTTransmitText
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ARP_sendRequest                                     56    52      4   56175
                                            152 BANK0      4     0      4
                                              0 BANK1     52    52      0
                           _ARP_send
   _ethernetController_getMacAddress
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (3) _ARP_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _ARP_checkForEntry                                   15     9      6    1138
                                              7 BANK0     15     9      6
                         _getSeconds
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  187613
                                            156 BANK0      3     3      0
                                            116 BANK1     11     8      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                 2     0      2   16760
                                             58 BANK0      2     0      2
                   _UARTTransmitText
      _ethernetController_dropPacket
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   12443
                                             58 BANK0      4     0      4
                   _UARTTransmitText
_ethernetController_getSiliconRevisi (ARG)
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         20    16      4    4337
                                             19 BANK0     20    16      4
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                              6 BANK0     13     5      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  111744
                                            152 BANK0      4     2      2
                                             84 BANK1     32    32      0
              _ARP_parseFromRXBuffer
                  _ARP_replyIfNeeded
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _getSeconds                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8744
                                             18 BANK0      2     0      2
        _ENC424J600_setRXTailPointer
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (4) _ARP_replyIfNeeded                                   84    52     32   68327
                                              0 BANK1     84    52     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1563
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (3) _ipAdressToString                                    22    18      4    2896
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ARP_send                                            81    49     32   48883
                                             71 BANK0     81    49     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (4) _mac_setToBroadcast                                   3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   18884
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5819
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    6437
                                             15 BANK0     24     9     15
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamToTransmitBuffer           15     6      9    6891
                                             15 BANK0     15     6      9
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   13708
                                             18 BANK0      9     0      9
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               73    41     32   20835
                                             23 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4     732
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   16662
                                             18 BANK0      5     3      2
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18510
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6716
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   54351
                                             70 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   22508
                                             58 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2    7895
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_setRXTailPointer                          4     2      2    5734
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getSiliconRevision                1     1      0    6218
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1540
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _mac_setAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_setToAllZero                                    3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                         _getSeconds (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                18    18      0    1040
                                             21 COMRAM    18    18      0
                      _buttonHandler
                 _sevenSegmentUpdate
                      _updateSeconds
 ---------------------------------------------------------------------------------
 (12) _updateSeconds                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     165
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getSeconds (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitInt
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_getSiliconRevision (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getSiliconRevision
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _ENC424J600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
   _ethernetController_setLEDConfig
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfig
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_replyIfNeeded
           _ARP_send
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getSeconds (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _getSeconds
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_getSiliconRevision (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _ENC424J600_getNextPacketPointer
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ethernetController_getNextPacketPointer
           _ENC424J600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_updateNextPacketPointer
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _intToString
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
       _ARP_checkForEntry
         _getSeconds
         _ipv4_cmp
       _ARP_getEntryFromTable
       _ARP_sendRequest
         _ARP_send
           _ethernetController_getSourceMACAddress
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_sendPacket
             _ENC424J600_setTXLength
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_setTXStartAddress
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _ENC424J600_setGPDATAWritePointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _mac_setToBroadcast
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _ethernetController_getMacAddress
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_sendPacket
         _ENC424J600_setTXLength
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_setTXStartAddress
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getSeconds
       _ipAdressToString
         ___lwdiv
         ___lwmod
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _ipv4_calculateHeaderChecksum
   _ipv4_streamToTransmissionBuffer
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateSeconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     32      A2      12       63.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      FD      10       98.8%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8B      DA       8       85.2%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      4E       1       83.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     366       6        0.0%
DATA                 0      0     366       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 01 16:31:12 2019

                                            main@IPsource 039A  
                __end_of_ethernetController_getMacAddress 3B74  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3B00  
                                                      l90 3FE4  
                                                      l82 276A  
                                                      l84 273E  
                                                      l86 2764  
                                                      l87 278E  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 36A0  
                                                     l204 36BE  
                                                     l132 3A40  
                                                     l140 38FE  
                                                     l213 36DE  
                                                     l205 36A8  
                                                     l133 3A86  
                                                     l214 36C6  
                                                     l206 3694  
                                                     l232 3E1C  
                                                     l216 36F4  
                                                     l241 3CDC  
                                                     l217 36CE  
                                                     l209 369C  
                                                     l153 3C8A  
                                                     l218 36D4  
                                                     l138 38B6  
                                                     l410 428C  
                                                     l163 3AC0  
                                                     l180 34DA  
                                                     l412 42AE  
                                                     l245 3D22  
                                                     l317 37D6  
                                                     l181 34EE  
                                                     l182 350E  
                                                     l430 2EC6  
                                                     l263 2C40  
                                                     l183 3524  
                                                     l416 4254  
                                                     l177 352E  
                                                     l441 2F3A  
                                                     l513 23A4  
                                                     l258 2B88  
                                                     l178 34B6  
                                                     l434 2F3E  
                                                     l418 4276  
                                                     l362 06DC  
                                                     l195 3726  
                                                     l451 334C  
                                                     l435 2F28  
                                                     l355 30B0  
                                                     l187 41B0  
                                                     l371 081C  
                                                     l363 0720  
                                                     l515 2456  
                                                     l436 2EFE  
                                                     l460 00EE  
                                                     l188 41C6  
                                                     l364 07BE  
                                                     l516 248C  
                                                     l197 3756  
                                                     l453 3348  
                                                     l437 2EFA  
                                                     l357 30D0  
                                                     l373 0838  
                                                     l365 07DE  
                                                     l621 10CE  
                                                     l390 4108  
                                                     l382 4330  
                                                     l446 3314  
                                                     l470 01A8  
                                                     l462 0112  
                                                     l518 24D0  
                                                     l199 377C  
                                                     l367 092C  
                                                     l519 24E8  
                                                     l615 0F10  
                                                     l384 434A  
                                                     l456 335C  
                                                     l480 0420  
                                                     l472 01B0  
                                                     l464 013E  
                                                     l368 0800  
                                                     l624 11D2  
                                                     l616 0F48  
                                                     l377 44DE  
                                                     l801 1DD4  
                                                     l369 0970  
                                                     l641 345E  
                                                     l625 1166  
                                                     l617 1084  
                                                     l394 4504  
                                                     l474 03CE  
                                                     l650 2CA2  
                                                     l626 11B6  
                                                     l475 02EA  
                                                     l467 0174  
                                                     l803 1EF4  
                                                     l651 2C52  
                                                     l643 3472  
                                                     l627 11CE  
                                                     l619 10C4  
                                                     l388 40DC  
                                                     l804 1F48  
                                                     l660 2D1C  
                                                     l644 3488  
                                                     l485 0492  
                                                     l661 2CD4  
                                                     l653 2C62  
                                                     l637 342E  
                                                     l486 0572  
                                                     l662 2CE4  
                                                     l654 2C72  
                                                     l646 349C  
                                                     l487 0594  
                                                     l479 0370  
                                                     l911 1CDC  
                                                     l807 1F8E  
                                                     l655 2C82  
                                                     l639 3442  
                                                     l920 1DA2  
                                                     l912 1CA8  
                                                     l760 1A98  
                                                     l656 2C92  
                                                     l921 1D6E  
                                                     l761 1AC2  
                                                     l914 1D1E  
                                                     l762 1AEA  
                                                     l658 2CF4  
                                                     l747 3E64  
                                                     l915 1CEA  
                                                     l763 1B12  
                                                     l931 32A6  
                                                     l659 2CC6  
                                                     l940 2FE2  
                                                     l749 3E8C  
                                                     l917 1D60  
                                                     l781 2D88  
                                                     l918 1D2C  
                                                     l782 2E56  
                                                     l783 2DD8  
                                                     l791 4068  
                                                     l944 3DC2  
                                                     l880 0C36  
                                                     l792 4048  
                                                     l928 320A  
                                                     l881 0BEE  
                                                     l785 2E0C  
                                                     l873 21C2  
                                                     l938 2F8A  
                                                     l890 0CF0  
                                                     l794 4054  
                                                     l883 0C8C  
                                                     l787 2E48  
                                                     l875 2202  
                                                     l795 405E  
                                                     l892 0D7E  
                                                     l884 0C44  
                                                     l876 22E0  
                                                     l877 22F4  
                                                     l894 0DB4  
                                                     l886 0CE2  
                                                     l887 0C9A  
                                                     l896 0DF6  
                                                     l897 0DF8  
                                                     l889 0D38  
                                                     l993 2164  
                                                     l898 0E2E  
                                                     l994 2180  
                                                     l989 20BE  
                                                     l999 418C  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 28D2  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                __end_of_ethernetController_getDeviceName 458A  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                                       _ARP_replyIfNeeded 28D2  
                        _ethernetController_getDeviceName 4566  
                                memory_txFrameClear@index 0060  
                    ENC424J600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                            ??_ENC424J600_enableReception 006B  
                                                     prod 000FF3  
           ethernetController_streamFromRXBuffer@startEnd 0074  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 313E  
                                      ?_ARP_replyIfNeeded 0100  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004C  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 01A2  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1013 411E  
                                                    l1021 437A  
                                                    l1015 414A  
                                                    l1025 45D8  
                                                    l1019 4360  
                                                    l1431 3ED8  
                                                    l1432 3ED0  
                                                    l1441 40A2  
                                                    l1442 409A  
                                                    l1435 3EF8  
                                                    l1436 3F02  
                                                    l1445 40BA  
                                                    l1446 40C4  
                                                    l1382 387C  
                                                    l1383 388A  
                                                    l1392 3D78  
                                                    l1393 3D86  
                                                    l1378 3848  
                                                    l1379 383C  
                                                    l1388 3D50  
                                                    l1389 3D44  
                                                    l7103 0418  
                                                    l7411 40D4  
                                                    l8125 2756  
                                                    l7069 02E2  
                                                    l7239 44D6  
                                                    l7431 1DCC  
                                                    l8071 32A6  
                                                    l7185 3A86  
                                                    l8057 3202  
                                                    l6723 3E4A  
                                                    l7195 3C82  
                                                    l7363 2DEC  
                                                    l7381 2E48  
                                                    l7373 2E20  
                                                    l9053 0952  
                                                    l8415 45D0  
                                                    l7471 4358  
                                                    l7391 4328  
                                                    l9055 0968  
                                                    l8353 44FC  
                                                    l6809 4284  
                                                    l7385 2E56  
                                                    l7491 4116  
                                                    l6829 424C  
                                                    l7815 2F82  
                                                    l8561 3DBA  
                                                    l6939 38AE  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l7765 0E26  
                                                    l6957 38F6  
                                                    l8493 2456  
                                                    l7943 2BBA  
                                                    l8681 418C  
                                                    l7859 3AB8  
                                                    l6997 3D0A  
                                                    STR_1 7DE2  
                                                    STR_2 7EF9  
                                                    STR_3 7F2A  
                                                    STR_4 7E1B  
                                                    STR_5 7FDD  
                           ?_ethernetController_softReset 009A  
                                                    STR_6 7FFC  
                                                    STR_7 7F8B  
                                                    STR_8 7FA1  
                                                    STR_9 7F1A  
               ethernetController_clearInterruptFlag@flag 0072  
               ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u8110 3918  
                                                    u8031 2F08  
                                                    u8041 2F1A  
                                                    u9001 1B90  
                                                    u8130 3D0A  
                                                    u8211 0134  
                                                    u8140 3D1A  
                                                    u8061 2F48  
                                                    u8301 0308  
                                                    u8221 016A  
                                                    u9101 1CB2  
                                                    u9021 1BDC  
                                                    _RCIP 007CFD  
                                                    u8071 2F5A  
                                                    u8311 0326  
                                                    u9031 1BF4  
                                                    u9200 384C  
                                                    u8401 045C  
                                                    u8161 00E4  
                                                    u9121 1CF4  
                                                    u9041 1C0E  
                                                    u8090 38DE  
                                                    u8411 047A  
                                                    u9051 1C28  
                                                    u7700 3E4A  
                                                    u8341 0366  
                                                    u8181 0108  
                                                    u9141 1D36  
                                                    u9061 1C42  
                                                    u7710 3E5A  
                                                    u8430 0498  
                                                    u8350 0376  
                                                    u9230 3D54  
                                                    u9310 1632  
                                                    u9071 1C5C  
                                                    u8520 3CB0  
                                                    u7720 32BE  
                                                    u8361 03C4  
                                                    u9161 1D78  
                                                    u9081 1C76  
                                                    u7730 32CC  
                                                    u9410 16FC  
                                                    u9330 165C  
                                                    u9250 15C0  
                                                    u8531 3CBC  
                                                    u8451 0568  
                                                    u9091 1C90  
                                                    u8700 3EB0  
                                                    u7740 32DA  
                                                    u7900 427A  
                                                    u9308 160E  
                                                    u8541 3088  
                                                    u9181 1DB4  
                                                    u7750 32E8  
                                                    u7910 2E70  
                                                    u8630 3EDC  
                                                    u9510 17C2  
                                                    u9430 1722  
                                                    u9350 1682  
                                                    u9270 15E4  
                                                    u8471 058A  
                                                    u7920 2E7E  
                                                    u9408 16D8  
                                                    u9328 1636  
                                                    u8721 3B6A  
                                                    u7930 2E8C  
                                                    u9530 17EC  
                                                    u9450 174A  
                                                    u9370 16AA  
                                                    u9290 160A  
                                                    u8707 3EA6  
                                                    u8571 30E2  
                                                    u9611 187A  
                                                    u8820 434E  
                                                    u7940 2E9A  
                                                    u8660 40A6  
                                                    u9508 179E  
                                                    u9428 1700  
                                                    u9348 1660  
                                                    u9268 15C4  
                                                    u8581 30FC  
                                                    u8741 2D62  
                                                    u7790 3310  
                                                    u7870 42B2  
                                                    u8910 1F92  
                                                    u9630 1A80  
                                                    u9550 1814  
                                                    u9470 1774  
                                                    u9390 16D4  
                                                    u8591 3130  
                                                    u8680 3E84  
                                                    u9640 1AAA  
                                                    u9608 1862  
                                                    u9528 17C6  
                                                    u9448 1726  
                                                    u9368 1686  
                                                    u9288 15E8  
                                                    u8690 3E90  
                                                    u8850 410C  
                                                    u9650 1AD2  
                                                    u9570 1838  
                                                    u9490 179A  
                                                    u8940 437E  
                                                    u9820 0E26  
                                                    u7980 2EC2  
                                                    u8780 2E32  
                                                    u9660 1AFA  
                                                    u9548 17F0  
                                                    u9468 174E  
                                                    u9388 16AE  
                                                    u9901 29A4  
                                                    u8790 2E56  
                                                    u9590 185E  
                                                    u8687 3E7A  
                                                    u9831 0E44  
                                                    u9568 1818  
                                                    u9488 1778  
                                                    u9930 2FE6  
                                                    u8970 414E  
                                                    u9770 0DF2  
                                                    u8890 1F20  
                                                    u9851 28E6  
                                                    u9588 183C  
                                                    u9941 3024  
                                                    u8981 1B6C  
                                                    u9861 28F8  
                                                    u8991 1B7E  
                                                    u9871 294C  
                                                    u9960 3ADA  
                                                    u9881 296E  
                                                    u9891 2980  
                                                    u9971 3AF6  
                                                    u9994 37BA  
                                                    u9995 37B6  
                                                    _TRMT 007D61  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                     ??_ARP_replyIfNeeded 00F8  
                            ipv4_sendFrame@requestTimeout 017F  
                                       _ipv4_setToAllZero 45CA  
                                                    _main 0E4E  
                                 printEthernetState@state 009A  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004F  
                                           __CFG_BORV$190 000000  
                                      intToString@pointer 0086  
                                          ?_updateSeconds 0001  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 3B74  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 01AA  
                                                    start 00C4  
          __end_of_ethernetController_getSourceMACAddress 3CC6  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 3C56  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 45AC  
                               _ENC424J600_getPacketCount 4656  
                             __end_of_ENC424J600_writeSPI 3E62  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 019E  
                                        ARP_setNewEntry@i 007B  
                                 _checkForOverlapSwitched 32AE  
              ENC424J600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 3C56  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 3BE6  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                     __size_of_ENC424J600_enableReception 0008  
                                          _ipv4_isAllZero 4352  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0073  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 470C  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4706  
                                __size_of_ARP_setNewEntry 00EE  
                                        __end_of_ARP_send 1DC2  
                               __end_of_ARP_replyIfNeeded 29FA  
                                       _nextPacketPointer 0047  
                                __size_of_ARP_sendRequest 00AE  
                                                   ?_main 0001  
                                                   STR_10 7FD4  
                                                   STR_11 7FCD  
                                                   STR_12 7FDD  
                                                   STR_20 7FFB  
                                                   STR_21 7CF7  
                                                   STR_13 7FF5  
                                                   STR_30 7FE5  
                                                   STR_14 7FF8  
                                                   STR_22 7E34  
                                                   STR_15 7FE9  
                                                   STR_23 7F7F  
                                                   STR_31 7E4C  
                                                   STR_32 7FE5  
                                                   STR_24 7E8A  
                                                   STR_16 7FFC  
                                                   STR_40 7DC5  
                                                   STR_17 7FDD  
                                                   STR_41 7FC5  
                                                   STR_25 7FB4  
                                                   STR_33 7DFF  
                                                   STR_26 7CF7  
                                                   STR_18 7F15  
                                                   STR_50 7FAB  
                                                   STR_42 7EE8  
                                                   STR_34 7CC7  
                                                   STR_19 7FF2  
                                                   STR_51 7FE4  
                                                   STR_35 7F66  
                                                   STR_43 7D6C  
                                                   STR_27 7D21  
                                                   STR_60 7FFC  
                                                   STR_52 7FDF  
                                                   STR_28 7F73  
                                                   STR_44 7EB2  
                                                   STR_36 7E9F  
                                                   STR_53 7FEE  
                                                   STR_61 7F97  
                                                   STR_45 7F58  
                                                   STR_37 7E8C  
                                                   STR_29 7E63  
                                                   STR_46 7F49  
                                                   STR_62 7F3A  
                                                   STR_54 7EC5  
                                                   STR_38 7E78  
                                                   STR_63 7F0A  
                                                   STR_39 7DA8  
                                                   STR_47 7D47  
                                                   STR_55 7CFA  
                                                   STR_64 7E89  
                                                   STR_56 7FDD  
                                                   STR_48 7C90  
                                                   STR_57 7E89  
                                                   STR_65 7FFC  
                                                   STR_49 7D8A  
                                                   STR_58 7FDA  
                                                   STR_59 7E89  
                                                   STR_67 7FBD  
                                                   STR_68 7FE5  
                                                   STR_69 7ED7  
                                         __end_of___lldiv 389C  
                                                   u10004 37FC  
                                                   u10020 2BBA  
                                                   u10005 37F8  
                                                   u10111 22FE  
                                                   u10040 21B4  
                                                   u10200 32AA  
                                                   u10121 2314  
                                                   u11010 14DE  
                                                   u10051 21D4  
                                                   u10211 43A6  
                                                   u10131 336A  
                                                   u10300 2A2A  
                                                   u10141 33CC  
                                                   u11005 1360  
                                                   u10071 221A  
                                                   u10151 33EE  
                                                   u11015 14D4  
                                                   u11111 0F9C  
                                                   u10400 2AB4  
                                                   u10320 2A44  
                                                   u10081 2278  
                                                   u10161 3400  
                                                   u11121 109E  
                                                   u10420 2AD2  
                                                   u10340 2A60  
                                                   u10318 2A2E  
                                                   u10440 2AEE  
                                                   u10360 2A7E  
                                                   u10280 2A12  
                                                   u11161 113A  
                                                   u10418 2AB8  
                                                   u10338 2A48  
                                                   u10611 085A  
                                                   u10460 2B06  
                                                   u10380 2A98  
                                                   u10621 0894  
                                                   u10701 2084  
                                                   u11181 1194  
                                                   u10438 2AD6  
                                                   u10358 2A64  
                                                   u10551 0606  
                                                   u10711 209A  
                                                   u11191 11C0  
                                                   u11247 0E88  
                                                   u10480 46BA  
                                         __end_of___llmod 3D98  
                                                   u10801 23C8  
                                                   u11257 1006  
                                                   u10458 2AF2  
                                                   u10378 2A82  
                                                   u10298 2A16  
                                                   u11267 2B82  
                                                   u10571 0732  
                                                   u11277 26EA  
                                                   u10661 1FF0  
                                                   u10478 2B0A  
                                                   u10398 2A9C  
                                                   u11287 2732  
                                                   u10671 2030  
                                                   u10760 4574  
                                                   u10681 2060  
                                                   u10691 2072  
                                                   u10881 3DCC  
                                                   u10981 34A6  
                                                   u10995 12B2  
                                         __end_of___lwdiv 3F0C  
                              __end_of_printEthernetState 34B0  
                                         __end_of___lwmod 40CE  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l527 453C  
                                                   i2l713 3170  
                                                   i2l722 3984  
        ethernetController_streamToTransmitBuffer@pointer 0043  
                                                   i2l723 3974  
                                                   i2l715 3178  
                                                   i2l725 3978  
                                                   i2l726 397C  
                                                   i2l718 3194  
                                                   i2l727 3980  
                                                   i2l673 357A  
                                                   i2l675 358A  
                                                   i2l683 0074  
                                                   i2l676 35CE  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                        ENC424J600_setTXStartAddress@addr 006E  
         __end_of_ENC424J600_writeControlRegisterUnbanked 42EC  
        __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
               ??_ENC424J600_writeControlRegisterUnbanked 006C  
                ?_ENC424J600_writeControlRegisterUnbanked 006A  
                 _ENC424J600_writeControlRegisterUnbanked 42B6  
                                ARP_parseFromRXBuffer@arp 00A0  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                           __CFG_WRT3$OFF 000000  
                                           _ARP_initTable 3D98  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 4110  
                                        __end_of_UARTInit 46CE  
                                     intToString@hundreds 0083  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                __end_of_ENC424J600_setGPDATAWritePointer 420A  
               __size_of_ENC424J600_setGPDATAWritePointer 003C  
                      ??_ENC424J600_setGPDATAWritePointer 006C  
                       ?_ENC424J600_setGPDATAWritePointer 006A  
                        _ENC424J600_setGPDATAWritePointer 41CE  
                               __end_of_ipv4_setToAllZero 45E8  
                                                   _stack 0248  
                                                   main@i 0396  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 3B00  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                             ARP_parseFromRXBuffer@i_2570 009C  
                             ARP_parseFromRXBuffer@i_2571 009D  
                             ARP_parseFromRXBuffer@i_2569 009B  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                  ENC424J600_readSPI@data 0060  
                             memory_txFrameRequest@i_1162 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0050  
                       ENC424J600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       ENC424J600_clearInterruptFlag@temp 0071  
                                __end_of_UARTTransmitText 3EB8  
                                             ARP_send@arp 00A7  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 1FB0  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                         intToString@ones 0082  
                                        _ipAdressToString 1DC2  
                                         intToString@tens 0081  
                             ARP_parseFromRXBuffer@offset 009E  
                             ?_ENC424J600_readPHYRegister 006E  
                                         __initialization 35E0  
                       ethernetController_softReset@F5826 004D  
                       ethernetController_softReset@F5828 0045  
                             memory_txFrameRequest@length 0084  
                                       ARP_setNewEntry@ip 006A  
                          __size_of_ARP_getEntryFromTable 002E  
                                            __end_of_main 11F4  
                                  __end_of_ipv4_isAllZero 4382  
                           __end_of_ARP_getEntryFromTable 43B0  
                                  arpEntryToString@string 02B9  
                                    _ipv4_handleNewPacket 4604  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1158 0093  
                                           main@headerBuf 0374  
                                                  ??_main 0188  
                               __size_of_entireMemoryFull 0038  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 265E  
                              _ipv4_writeHeaderIntoBuffer 24F0  
                                          ?_ARP_initTable 0001  
                                       ARP_sendRequest@ip 00F8  
                         handleStackBackgroundTasks@stack 0184  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 007D  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                              printEthernetState@oldState 018B  
                                                  i2l1431 3F2A  
                                                  i2l1432 3F22  
                                                  i2l1435 3F4A  
                                                  i2l1436 3F54  
                                  ARP_sendRequest@request 0114  
                                                  i2l6217 358A  
                                                  i2l6249 318C  
                               ??_ethernetController_init 00A9  
                                         ??_updateSeconds 0001  
       __end_of_ethernetController_streamToTransmitBuffer 3A8C  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3A14  
                            __size_of_ARP_handleNewPacket 01AE  
                                  __end_of_ipv4_sendFrame 2198  
                                                  _TXREG1 000FAD  
                             __size_of_ENC424J600_initSPI 001C  
                             __size_of_ENC424J600_readSPI 006A  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 009D  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 00A9  
                                  __size_of_buttonHandler 0098  
                                 ?_ethernet_rxGetNewFrame 0174  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_ipv4_cmp 4152  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4458  
                                   ?_ipv4_handleNewPacket 009A  
                      __end_of_handleStackBackgroundTasks 24F0  
                              _handleStackBackgroundTasks 2346  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 004B  
                                               ??___lldiv 006E  
             ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 004A  
             ENC424J600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0064  
                            buttonHandler@debounceCounter 0030  
                                                  clear_0 363E  
                                                  clear_1 364A  
                                                  clear_2 3656  
                                                  clear_3 3662  
                              parseNumber@numberToDisplay 0008  
                          __size_of_ARP_parseFromRXBuffer 03FA  
                              __size_of_ARP_replyIfNeeded 0128  
                           __end_of_ARP_parseFromRXBuffer 0E4E  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 3FAC  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 3F5E  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0370  
                      __end_of_ENC424J600_enableReception 4706  
                              _ENC424J600_enableReception 46FE  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_ENC424J600_readControlRegisterUnbanked 4322  
         __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                ??_ENC424J600_readControlRegisterUnbanked 006C  
                 ?_ENC424J600_readControlRegisterUnbanked 006A  
                  _ENC424J600_readControlRegisterUnbanked 42EC  
                                            __pdataCOMRAM 004D  
                ethernetController_softReset@comFailCount 009E  
                                       __end_ofi2___lwdiv 3F5E  
                    __end_of_ENC424J600_setTXStartAddress 43DA  
                   __size_of_ENC424J600_setTXStartAddress 002A  
                            _ENC424J600_setTXStartAddress 43B0  
                                            __mediumconst 7C84  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                       ??_ARP_setNewEntry 0072  
                          ipv4_sendFrame@numberOfRequests 017E  
           __end_of_ethernetController_clearInterruptFlag 46EA  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 46DC  
                                       ??_ARP_sendRequest 00FC  
                                    intToString@thousands 0084  
                                     mac_setToBroadcast@i 0062  
                              __size_of_ipv4_setToAllZero 001E  
                         ethernetController_softReset@err 00A3  
                                         _numberToDisplay 0034  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                 ipAdressToString@address 01CA  
      __end_of_ethernetController_updateNextPacketPointer 3A14  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 399A  
                       sevenSegmentUpdate@digitsToDisplay 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 3668  
                                       _printErrorMessage 2C42  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                 ?_ENC424J600_setTXLength 006E  
                                               ?_ARP_send 00A7  
                          __end_of_ethernet_rxGetNewFrame 0A54  
                                        _sevenSegmentInit 463C  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
               ethernetController_getSiliconRevision@data 006E  
              ethernetController_pollInterruptFlags@flags 007B  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 007B  
 ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 45E8  
                                            __pidataBANK2 4688  
                                               ?_UARTInit 0001  
                                      ARP_setNewEntry@mac 0064  
                                     ??_printErrorMessage 009D  
                         __end_of_ethernetController_init 3BE6  
                         ??_ethernetController_dropPacket 0074  
                                               ARP_send@i 00CD  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                                         ??_ARP_initTable 007C  
                                 _ethernet_txFrameRequest 3056  
                    __end_of_ENC424J600_getInterruptFlags 4046  
                   __size_of_ENC424J600_getInterruptFlags 004C  
                            _ENC424J600_getInterruptFlags 3FFA  
                                    __size_of_intToString 02C6  
                         __end_of_checkForOverlapSwitched 3360  
                                           _buttonHandler 3548  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04D6  
                           __end_of_memory_txFrameRequest 059E  
                           ?_ENC424J600_setTXStartAddress 006E  
                               __end_of_printErrorMessage 2D58  
                                              __pbssBANK1 018B  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                          __end_of_ENC424J600_setTXLength 4404  
                             __end_of_memory_txFrameClear 4566  
                                              ??_ARP_send 00C7  
                                       _etherTypeToString 4046  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 009C  
           __end_of_ethernetController_getSiliconRevision 45CA  
          __size_of_ethernetController_getSiliconRevision 001E  
                  ?_ethernetController_getSiliconRevision 0001  
                 ??_ethernetController_getSiliconRevision 006E  
                   _ethernetController_getSiliconRevision 45AC  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
                                              _getSeconds 469A  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        _entireMemoryFull 4246  
                                 ARP_sendRequest@senderIP 0100  
                                 ARP_sendRequest@targetIP 010A  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                               updateSeconds@prescaler_ms 0041  
                 ENC424J600_updateReceiveStatusVector@rsv 0060  
                           ?_ENC424J600_getInterruptFlags 006E  
                       ENC424J600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 1FB0  
                ENC424J600_setERXDATAReadPointer@highByte 006E  
                                 ENC424J600_writeSPI@data 0060  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 0181  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                            __size_of_ipv4_txFrameRequest 0136  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 340E  
                            ?_ENC424J600_setRXTailPointer 006E  
                               __end_of_etherTypeToString 408A  
                  ENC424J600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 3548  
          __size_of_ethernetController_streamFromRXBuffer 0098  
                 ??_ethernetController_streamFromRXBuffer 0074  
                  ?_ethernetController_streamFromRXBuffer 0072  
                   _ethernetController_streamFromRXBuffer 34B0  
                          sevenSegmentUpdate@digitPointer 0049  
                                       ?_UARTTransmitText 0098  
                                                 __Hparam 0000  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                      buttonHandler@state 0001  
                                   __end_of_mac_isAllZero 4352  
                                                 ___lldiv 3818  
                                         __size_of___wmul 0028  
                                                 ___llmod 3D30  
                                                 ___lwdiv 3EB8  
                                                 ___lwmod 408A  
                    ENC424J600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                     sevenSegmentUpdate@i 0015  
              ipv4_streamToTransmissionBuffer@dataPointer 003F  
                                                 __pcinit 35E0  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                            __size_of_ENC424J600_writeSPI 0064  
                                     _ARP_handleNewPacket 2198  
                                                 __ptext0 0E4E  
                                                 __ptext1 463C  
                                                 __ptext2 340E  
                                                 __ptext3 2C42  
                                                 __ptext4 24F0  
                                                 __ptext5 279C  
                                                 __ptext6 4152  
                                                 __ptext7 11F4  
                                                 __ptext8 2346  
                                                 __ptext9 1FB0  
                                                 _mac_cmp 40CE  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0186  
                                            __size_of_ISR 00BC  
                  ENC424J600_setGPDATAWritePointer@opcode 006C  
                      ENC424J600_setRXTailPointer@lowByte 0070  
              __end_of_ENC424J600_setRXBufferStartAddress 4458  
             __size_of_ENC424J600_setRXBufferStartAddress 002A  
                    ??_ENC424J600_setRXBufferStartAddress 0070  
                     ?_ENC424J600_setRXBufferStartAddress 006E  
                      _ENC424J600_setRXBufferStartAddress 442E  
                         ENC424J600_setRXTailPointer@addr 006E  
                   __end_of_ethernetController_dropPacket 41CE  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 4192  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                    ??_printEthernetState 00A9  
                                                 _seconds 0038  
           __end_of_ethernetController_pollInterruptFlags 2B20  
          __size_of_ethernetController_pollInterruptFlags 0126  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 29FA  
                 ENC424J600_setGPDATAWritePointer@lowByte 006D  
                                                 main@err 0397  
                            ??_ENC424J600_writeSingleByte 006A  
                                    end_of_initialization 3668  
                              __size_of_printErrorMessage 0116  
                                               _ARP_table 0300  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 44F6  
                                    ?_ARP_handleNewPacket 00F8  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7C84  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0075  
                                         ___lldiv@divisor 006A  
                              ARP_getEntryFromTable@index 0067  
                                         ___lldiv@counter 0072  
                                      entireMemoryEmpty@i 0060  
                              ARP_setNewEntry@oldestIndex 007A  
                                __size_of_checkForOverlap 0108  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                             ?_handleStackBackgroundTasks 0184  
                                         _ARP_setNewEntry 2F68  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    ENC424J600_readPHYRegister@PHYaddress 0077  
                                         _ARP_sendRequest 3360  
                                   _ARP_getEntryFromTable 4382  
                          ENC424J600_setTXLength@highByte 0071  
                                             ?_getSeconds 0060  
                                         ??_buttonHandler 0003  
                   __end_of_ethernetController_sendPacket 44A8  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4480  
                                               _PORTBbits 000F81  
                                     ipv4_sendFrame@index 0180  
                     __size_of_ENC424J600_writeSingleByte 0018  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4656  
                 __end_of_ipv4_streamToTransmissionBuffer 4192  
                __size_of_ipv4_streamToTransmissionBuffer 0040  
                       ??_ipv4_streamToTransmissionBuffer 009E  
                        ?_ipv4_streamToTransmissionBuffer 0060  
                         _ipv4_streamToTransmissionBuffer 4152  
                             ?_ENC424J600_enableReception 0001  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 009F  
                                           ARP_send@field 00EF  
                                               _TRISBbits 000F93  
         __end_of_ethernetController_getNextPacketPointer 46DC  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 46CE  
                                        ??_ipv4_sendFrame 0172  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 313E  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 3F0C  
                                       i2___lwdiv@counter 0007  
                                   ??_ARP_handleNewPacket 00FA  
                              __end_of_ENC424J600_initSPI 463C  
                              __end_of_ENC424J600_readSPI 3D30  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                    __end_of_ipv4_calculateHeaderChecksum 1568  
                   __size_of_ipv4_calculateHeaderChecksum 0374  
                            _ipv4_calculateHeaderChecksum 11F4  
                    ENC424J600_setTXStartAddress@highByte 0071  
                                   __end_of_updateSeconds 4542  
                                  ARP_parseFromRXBuffer@i 009A  
                                       intToString@number 01AD  
                                ipAdressToString@hundreds 0077  
                                       __size_of_ARP_send 0278  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4480  
                                           __pidataCOMRAM 470C  
                                        parseNumber@digit 000A  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                    __size_of_ENC424J600_setRXTailPointer 002A  
                  ENC424J600_setERXDATAReadPointer@opcode 006C  
                                   _ARP_parseFromRXBuffer 0A54  
             __end_of_ethernetController_updateLinkStatus 378E  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3704  
                                     start_initialization 35E0  
                              ARP_parseFromRXBuffer@frame 0077  
                                             __end_of_ISR 00C4  
                                          intToString@val 0073  
                                ?_ethernetController_init 00A6  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 2E60  
                                         __CFG_nLPBOR$OFF 000000  
                                     __size_of_getSeconds 0012  
                                __end_of_entireMemoryFull 427E  
   __end_of_ethernetController_writeDestinationMACAddress 391C  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 389C  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                         ??_ENC424J600_clearInterruptFlag 006E  
                                 __end_of_ARP_setNewEntry 3056  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01B7  
                                 __end_of_ARP_sendRequest 340E  
                                ARP_setNewEntry@timestamp 006E  
                                    printErrorMessage@err 009A  
                                          _occupiedMemory 0200  
                                         _sourceIPAddress 002C  
                                                ??___wmul 0064  
                        ENC424J600_getPacketCount@lowByte 006E  
                                     _ipv4_txFrameRequest 279C  
                                  ?_ARP_getEntryFromTable 0060  
                  ethernetController_getDeviceName@string 0062  
                                    _destinationIPAddress 0028  
                                             __pdataBANK1 01BE  
                                             __pdataBANK2 02EB  
                                           ??_intToString 0077  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                                       ??_checkForOverlap 0084  
                                   __end_of_ARP_initTable 3DFE  
                                             __pbssCOMRAM 0028  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 0370  
                                       ?_ipAdressToString 0067  
                      __end_of_ENC424J600_writeSingleByte 4688  
                              _ENC424J600_writeSingleByte 4670  
                                   _memory_txFrameRequest 00C8  
           __end_of_ethernetController_newPacketAvailable 46BE  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 46AC  
                                ARP_replyIfNeeded@request 0100  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 00A1  
                                      ??_ipAdressToString 006B  
                                 __size_of_mac_setAllZero 0026  
                                     _ENC424J600_writeSPI 3DFE  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0003  
                                           ??_parseNumber 000B  
                                               _main$1997 0394  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01BE  
              ethernetController_getEtherTypeField@opcode 007E  
                                               __pintcode 0008  
                            ??_ENC424J600_readPHYRegister 0070  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C84  
                                                ?___lldiv 0066  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 001C  
                                                ?___lwdiv 0060  
                                                ?___lwmod 0060  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                    ?_ENC424J600_writeSPI 0060  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               ARP_setNewEntry@maxSeconds 0076  
                                  ?_ARP_parseFromRXBuffer 0077  
                               __size_of_UARTTransmitText 0056  
              ethernetController_getSourceMACAddress@temp 007F  
                    ENC424J600_setERXDATAReadPointer@addr 006A  
                      __size_of_ENC424J600_getPacketCount 001A  
                 ENC424J600_setERXDATAReadPointer@lowByte 006D  
               __end_of_ENC424J600_enableAutoMACInsertion 44D0  
              __size_of_ENC424J600_enableAutoMACInsertion 0028  
                      ?_ENC424J600_enableAutoMACInsertion 0001  
                     ??_ENC424J600_enableAutoMACInsertion 006E  
                       _ENC424J600_enableAutoMACInsertion 44A8  
                                      ipAdressToString@ip 0067  
                                     __end_of_intToString 1B4A  
                              ?_ENC424J600_getPacketCount 0001  
                                             _macToString 2D58  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                       _entireMemoryEmpty 427E  
                                ??_ethernet_rxGetNewFrame 0177  
                                             ??i2___lwdiv 0005  
                                ARP_sendRequest@senderMAC 0104  
                                ARP_sendRequest@targetMAC 010E  
                      ENC424J600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                     __size_of_ENC424J600_readPHYRegister 0122  
                     ipv4_streamToTransmissionBuffer@data 0001  
                             ??_ethernetController_getRSV 0076  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0174  
                                                _ARP_send 1B4A  
                              ARP_replyIfNeeded@senderMAC 0124  
                       ENC424J600_writeSPI@timeoutCounter 0066  
                              ARP_replyIfNeeded@targetMAC 012A  
                                        ?_ARP_setNewEntry 0064  
                                     ??_entireMemoryEmpty 0060  
                                        ARP_initTable@mac 007C  
                                        ?_ARP_sendRequest 00F8  
                                       entireMemoryFull@i 0060  
                                                i2u725_40 35A2  
                                                i2u733_40 31BA  
                                                i2u726_40 35A4  
                                                i2u734_44 31CA  
                                                i2u734_45 31C6  
                                                i2u639_40 3F2E  
                                                i2u729_44 314E  
                                                i2u729_45 314A  
                                     ARP_checkForEntry@ip 0067  
                                        __CFG_WDTPS$32768 000000  
                                      _mac_setToBroadcast 44D0  
                              __end_of_sevenSegmentUpdate 31FC  
                   __end_of_ENC424J600_clearInterruptFlag 3818  
                  __size_of_ENC424J600_clearInterruptFlag 008A  
                           _ENC424J600_clearInterruptFlag 378E  
                                                _UARTInit 46BE  
                          ??_ipv4_calculateHeaderChecksum 0062  
                                   ??_ENC424J600_writeSPI 0062  
                                      UARTTransmitInt@val 009A  
                                            ??_getSeconds 0064  
                                     __end_of_parseNumber 399A  
                           ENC424J600_setTXLength@lowByte 0070  
                                       main@IPdestination 039E  
                                       ___wmul@multiplier 0060  
                                     ?_mac_setToBroadcast 0060  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                       ?_sevenSegmentInit 0001  
                               __end_of_entireMemoryEmpty 42B6  
                                  ?_memory_txFrameRequest 0084  
                                ??_ENC424J600_setTXLength 0070  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                       __end_of_ENC424J600_getPacketCount 4670  
                                      ??_sevenSegmentInit 0060  
                     ENC424J600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                             _INTCON3bits 000FF0  
                                               copy_data0 35F4  
                                               copy_data1 3614  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01A3  
                                  __size_of_mac_isAllZero 0030  
                                      macToString@address 0081  
                                    ipAdressToString@ones 006F  
                                    ipAdressToString@tens 0073  
                                    ??_mac_setToBroadcast 0062  
                                      __end_of_getSeconds 46AC  
                __end_of_ethernetController_checkDeviceId 3FFA  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 3FAC  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                       _ARP_checkForEntry 31FC  
                                      _ENC424J600_initSPI 4620  
                                      _ENC424J600_readSPI 3CC6  
                                  macToString@secondDigit 0094  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 1884  
                                        __size_of___lwdiv 0054  
                                      ?_ARP_checkForEntry 0067  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                               _ethernetController_getRSV 3A8C  
                 __end_of_ethernetController_setLEDConfig 3704  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 3676  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                               ENC424J600_setTXLength@len 006E  
                                   __end_of_buttonHandler 35E0  
                                     ?_ENC424J600_initSPI 0001  
                                     ?_ENC424J600_readSPI 0060  
                                        __size_of_mac_cmp 0042  
                                 intToString@tenthousands 0085  
       ethernetController_streamFromRXBuffer@startAddress 0072  
                                             _buttonState 01BD  
                     ENC424J600_setRXTailPointer@highByte 0071  
                                     ??_ARP_checkForEntry 006D  
                                  memory_txFrameRequest@i 0096  
                             __end_of_ARP_handleNewPacket 2346  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                                __ptext10 3360  
                                                __ptext11 4382  
                                                __ptext20 458A  
                                                __ptext12 31FC  
                                                __ptext21 1884  
                                                __ptext13 059E  
                                                __ptext30 408A  
                                                __ptext22 3D30  
                                                __ptext14 4604  
                                                __ptext31 3EB8  
                                                __ptext23 3818  
                                                __ptext15 399A  
                                                __ptext40 32AE  
                                                __ptext32 3B00  
                                                __ptext24 2198  
                                                __ptext16 3A8C  
                                                __ptext41 4458  
                                                __ptext33 1B4A  
                                                __ptext25 469A  
                                                __ptext17 1568  
                                                __ptext50 3C56  
                                                __ptext42 3F5E  
                                                __ptext34 44D0  
                                                __ptext26 4192  
                                                __ptext18 3BE6  
                                                __ptext51 0A54  
                                                __ptext43 389C  
                                                __ptext35 3056  
                                                __ptext27 28D2  
                                                __ptext19 4046  
                                                __ptext60 3704  
                                                __ptext52 4322  
                                                __ptext44 3A14  
                                                __ptext36 00C8  
                                                __ptext28 2D58  
                                                __ptext61 2B20  
                                                __ptext53 40CE  
                                                __ptext45 41CE  
                                                __ptext37 4246  
                                                __ptext29 1DC2  
                                                __ptext70 3E62  
                                                __ptext62 3676  
                                                __ptext54 4352  
                                                __ptext46 4480  
                                                __ptext38 427E  
                                                __ptext71 3FAC  
                                                __ptext63 29FA  
                                                __ptext55 4110  
                                                __ptext47 4542  
                                                __ptext39 2E60  
                                                __ptext80 4566  
                                                __ptext72 4404  
                                                __ptext64 3FFA  
                                                __ptext56 34B0  
                                                __ptext48 43B0  
                                                __ptext81 4706  
                                                __ptext73 442E  
                                                __ptext65 46AC  
                                                __ptext57 46CE  
                                                __ptext49 43DA  
                                                __ptext90 45CA  
                                                __ptext82 4656  
                                                __ptext74 46F4  
                                                __ptext66 46DC  
                                                __ptext58 46EA  
                                                __ptext91 2F68  
                                                __ptext83 42EC  
                                                __ptext75 46FE  
                                                __ptext67 378E  
                                                __ptext59 420A  
                                                __ptext84 3DFE  
                                                __ptext76 4670  
                                                __ptext68 3B74  
                                                __ptext93 451C  
                                                __ptext85 3CC6  
                                                __ptext77 44A8  
                                                __ptext69 265E  
                                                __ptext94 313E  
                                                __ptext86 4620  
                                                __ptext78 42B6  
                                                __ptext95 391C  
                                                __ptext87 46BE  
                                                __ptext79 45AC  
                                                __ptext96 3F0C  
                                                __ptext88 3D98  
                                                __ptext97 3548  
                                                __ptext89 44F6  
                                            _SSP1CON1bits 000FC6  
                   ENC424J600_enableAutoMACInsertion@temp 006E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 04B6  
                                          _mac_setAllZero 44F6  
                                                _ipv4_cmp 4110  
                     __end_of_ENC424J600_setRXTailPointer 442E  
                             _ENC424J600_setRXTailPointer 4404  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 007C  
                ENC424J600_setGPDATAWritePointer@highByte 006E  
                                           __size_of_main 03A6  
                                    ??_ENC424J600_initSPI 0060  
                                    ??_ENC424J600_readSPI 0062  
                                ARP_handleNewPacket@frame 00F8  
                                       ?_entireMemoryFull 0001  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                          ??_ENC424J600_setTXStartAddress 0070  
                               ARP_replyIfNeeded@senderIP 0120  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 2E60  
                               ARP_replyIfNeeded@targetIP 0130  
                                 ??_ARP_getEntryFromTable 0067  
                      __end_of_ENC424J600_readPHYRegister 2C42  
                              _ENC424J600_readPHYRegister 2B20  
                                      ??_entireMemoryFull 0060  
                               __end_of_ARP_checkForEntry 32AE  
                                             _parseNumber 391C  
                                         ARP_initTable@ip 0082  
                           ??_ENC424J600_setRXTailPointer 0070  
                                      ARP_checkForEntry@i 0075  
                                                int$flags 004F  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4322  
                   ipv4_streamToTransmissionBuffer@packet 0060  
                                            _SSP1STATbits 000FC7  
                              ethernet_txFrameRequest@err 00A4  
                                 __size_of_ipv4_isAllZero 0030  
                               ethernet_rxGetNewFrame@err 00FC  
                          ?_ENC424J600_clearInterruptFlag 0001  
                                        _UARTTransmitText 3E62  
                                              _INTCONbits 000FF2  
                                  __size_of_updateSeconds 0026  
                                  ARP_checkForEntry@index 006B  
                                  ipv4_sendFrame@ipPacket 0134  
                __end_of_ENC424J600_setERXDATAReadPointer 4246  
               __size_of_ENC424J600_setERXDATAReadPointer 003C  
                      ??_ENC424J600_setERXDATAReadPointer 006C  
                       ?_ENC424J600_setERXDATAReadPointer 006A  
                        _ENC424J600_setERXDATAReadPointer 420A  
                              __size_of_entireMemoryEmpty 0038  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                         __size_of_ENC424J600_setTXLength 002A  
                                  __end_of_mac_setAllZero 451C  
                             ?_ENC424J600_writeSingleByte 0001  
                                     _memory_txFrameClear 4542  
                                  ARP_replyIfNeeded@reply 0134  
                        ENC424J600_readSPI@timeoutCounter 0066  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00A2  
                                                intlevel2 0000  
                                        ___lwmod@dividend 0060  
                          ??_ENC424J600_getInterruptFlags 0070  
                                        ___lldiv@dividend 0066  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0076  
                        ENC424J600_writeSingleByte@opcode 006A  
                                              _RCSTA1bits 000FAB  
                                        macToString@F5791 02EB  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 01E8  
                 __end_of_ENC424J600_getNextPacketPointer 46F4  
                __size_of_ENC424J600_getNextPacketPointer 000A  
                       ??_ENC424J600_getNextPacketPointer 0062  
                        ?_ENC424J600_getNextPacketPointer 0060  
                         _ENC424J600_getNextPacketPointer 46EA  
                               __size_of_ipAdressToString 01EE  
                                          ARP_initTable@i 0086  
                                            macToString@i 0095  
                                            macToString@j 0097  
                ENC424J600_readPHYRegister@timeoutCounter 0079  
                 __end_of_ENC424J600_setNextPacketPointer 46FE  
                __size_of_ENC424J600_setNextPacketPointer 000A  
                       ??_ENC424J600_setNextPacketPointer 0062  
                        ?_ENC424J600_setNextPacketPointer 0060  
                         _ENC424J600_setNextPacketPointer 46F4  
                                    ?_memory_txFrameClear 0001  
                                     ARP_send@destination 00C7  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 059E  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                        ENC424J600_getInterruptFlags@high 0077  
                                 ??_ARP_parseFromRXBuffer 0097  
                                         _UARTTransmitInt 458A  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_ENC424J600_updateReceiveStatusVector 1884  
           __size_of_ENC424J600_updateReceiveStatusVector 031C  
                  ??_ENC424J600_updateReceiveStatusVector 0065  
                   ?_ENC424J600_updateReceiveStatusVector 0060  
                    _ENC424J600_updateReceiveStatusVector 1568  
                                   mac_setToBroadcast@mac 0060  
                               ipv4_handleNewPacket@frame 009A  
                                   ipv4_sendFrame@oldTime 019A  
                                        ___lldiv@quotient 006E  
                                         ___lwmod@divisor 0062  
                      ENC424J600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0064  
                                  ARP_handleNewPacket@arp 0154  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
                             ??_ENC424J600_getPacketCount 006E  
              ENC424J600_readControlRegisterUnbanked@addr 006C  
              ENC424J600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 279C  
                   __size_of_ethernetController_softReset 013E  
                            _ethernetController_softReset 265E  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 4620  
             ethernetController_getSourceMACAddress@field 006F  
                         ENC424J600_getInterruptFlags@low 0076  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 __end_of_checkForOverlap 2F68  
           __end_ofethernetController_getDeviceName@F5838 7C90  
                   ethernetController_getDeviceName@F5838 7C85  
                                          ARP_send@i_2693 00CE  
                                          ARP_send@i_2694 00CF  
                                          ARP_send@i_2695 00D0  
                          ?_ethernetController_dropPacket 0072  
                                        ARP_send@ethFrame 00D1  
                                           _updateSeconds 451C  
                                 _sevenSegmentUpdate$2071 0013  
                              __size_of_ARP_checkForEntry 00B2  
                          ENC424J600_readPHYRegister@addr 0076  
                          ENC424J600_readPHYRegister@data 006E  
                                  _ENC424J600_setTXLength 43DA  
                                  __size_of_ARP_initTable 0066  
                                   ??_memory_txFrameClear 0060  
                          ENC424J600_readPHYRegister@temp 007F  
