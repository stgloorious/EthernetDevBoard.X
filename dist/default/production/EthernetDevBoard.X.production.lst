

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 31 20:45:44 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1,group=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1,group=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   140                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   141                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   142  0000                     
   143                           ; Version 1.45
   144                           ; Generated 16/11/2017 GMT
   145                           ; 
   146                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   147                           ; All rights reserved.
   148                           ; 
   149                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   150                           ; 
   151                           ; Redistribution and use in source and binary forms, with or without modification, are
   152                           ; permitted provided that the following conditions are met:
   153                           ; 
   154                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   155                           ;        conditions and the following disclaimer.
   156                           ; 
   157                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   158                           ;        of conditions and the following disclaimer in the documentation and/or other
   159                           ;        materials provided with the distribution.
   160                           ; 
   161                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   162                           ;        software without specific prior written permission.
   163                           ; 
   164                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   165                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   166                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   167                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   168                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   169                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   170                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   171                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   172                           ; 
   173                           ; 
   174                           ; Code-generator required, PIC18F25K50 Definitions
   175                           ; 
   176                           ; SFR Addresses
   177  0000                     
   178                           	psect	idataCOMRAM
   179  0057A2                     __pidataCOMRAM:
   180                           	opt stack 0
   181                           
   182                           ;initializer for _randx
   183  0057A2  0001               	dw	1
   184  0057A4  0000               	dw	0
   185                           
   186                           ;initializer for ethernetController_softReset@F5986
   187  0057A6  12                 	db	18
   188  0057A7  34                 	db	52
   189                           
   190                           	psect	idataBANK1
   191  005770                     __pidataBANK1:
   192                           	opt stack 0
   193                           
   194                           ;initializer for _sevenSegCharacters
   195  005770  3F                 	db	63
   196  005771  06                 	db	6
   197  005772  5B                 	db	91
   198  005773  4F                 	db	79
   199  005774  66                 	db	102
   200  005775  6D                 	db	109
   201  005776  7D                 	db	125
   202  005777  07                 	db	7
   203  005778  7F                 	db	127
   204  005779  6F                 	db	111
   205  00577A  00                 	db	0
   206  00577B  40                 	db	64
   207                           
   208                           	psect	idataBANK2
   209  0055EA                     __pidataBANK2:
   210                           	opt stack 0
   211                           
   212                           ;initializer for macToString@F5946
   213  0055EA  3F                 	db	63
   214  0055EB  3F                 	db	63
   215  0055EC  3A                 	db	58
   216  0055ED  3F                 	db	63
   217  0055EE  3F                 	db	63
   218  0055EF  3A                 	db	58
   219  0055F0  3F                 	db	63
   220  0055F1  3F                 	db	63
   221  0055F2  3A                 	db	58
   222  0055F3  3F                 	db	63
   223  0055F4  3F                 	db	63
   224  0055F5  3A                 	db	58
   225  0055F6  3F                 	db	63
   226  0055F7  3F                 	db	63
   227  0055F8  3A                 	db	58
   228  0055F9  3F                 	db	63
   229  0055FA  3F                 	db	63
   230  0055FB  00                 	db	0
   231                           
   232                           ;initializer for ipAdressToString@address
   233  0055FC  3F                 	db	63
   234  0055FD  3F                 	db	63
   235  0055FE  3F                 	db	63
   236  0055FF  2E                 	db	46
   237  005600  3F                 	db	63
   238  005601  3F                 	db	63
   239  005602  3F                 	db	63
   240  005603  2E                 	db	46
   241  005604  3F                 	db	63
   242  005605  3F                 	db	63
   243  005606  3F                 	db	63
   244  005607  2E                 	db	46
   245  005608  3F                 	db	63
   246  005609  3F                 	db	63
   247  00560A  3F                 	db	63
   248  00560B  00                 	db	0
   249                           
   250                           	psect	mediumconst
   251  007A08                     __pmediumconst:
   252                           	opt stack 0
   253  007A08  00                 	db	0
   254  007A09                     ethernetController_getDeviceName@F5998:
   255                           	opt stack 0
   256  007A09  45                 	db	69
   257  007A0A  4E                 	db	78
   258  007A0B  43                 	db	67
   259  007A0C  34                 	db	52
   260  007A0D  32                 	db	50
   261  007A0E  34                 	db	52
   262  007A0F  4A                 	db	74
   263  007A10  36                 	db	54
   264  007A11  30                 	db	48
   265  007A12  30                 	db	48
   266  007A13  00                 	db	0
   267  007A14                     __end_ofethernetController_getDeviceName@F5998:
   268                           	opt stack 0
   269  0000                     _ANSELC	set	3933
   270  0000                     _ANSELA	set	3931
   271  0000                     _ANSELB	set	3932
   272  0000                     _ANSELBbits	set	3932
   273  0000                     _CCPR1	set	4030
   274  0000                     _TXREG1	set	4013
   275  0000                     _SPBRG	set	4015
   276  0000                     _RCSTA1bits	set	4011
   277  0000                     _TXSTA1bits	set	4012
   278  0000                     _PORTA	set	3968
   279  0000                     _TRISA	set	3986
   280  0000                     _TRISC	set	3988
   281  0000                     _PORTC	set	3970
   282  0000                     _PIR1bits	set	3998
   283  0000                     _PORTB	set	3969
   284  0000                     _TRISB	set	3987
   285  0000                     _RCONbits	set	4048
   286  0000                     _PIE1bits	set	3997
   287  0000                     _CCP1CONbits	set	4029
   288  0000                     _T1CONbits	set	4045
   289  0000                     _T0CONbits	set	4053
   290  0000                     _INTCON3bits	set	4080
   291  0000                     _INTCONbits	set	4082
   292  0000                     _OSCCON2bits	set	4050
   293  0000                     _OSCCONbits	set	4051
   294  0000                     _SSP1BUF	set	4041
   295  0000                     _TRISBbits	set	3987
   296  0000                     _SSP1STATbits	set	4039
   297  0000                     _SSP1CON1bits	set	4038
   298  0000                     _PORTBbits	set	3969
   299  0000                     _TRMT	set	32097
   300  0000                     _RCIF	set	31989
   301  0000                     _RCIE	set	31981
   302  0000                     _RCIP	set	31997
   303  0000                     _TXIF	set	31988
   304  007A14                     STR_87:
   305  007A14  5B                 	db	91	;'['
   306  007A15  41                 	db	65	;'A'
   307  007A16  52                 	db	82	;'R'
   308  007A17  50                 	db	80	;'P'
   309  007A18  5D                 	db	93	;']'
   310  007A19  3A                 	db	58	;':'
   311  007A1A  20                 	db	32
   312  007A1B  4F                 	db	79	;'O'
   313  007A1C  70                 	db	112	;'p'
   314  007A1D  65                 	db	101	;'e'
   315  007A1E  72                 	db	114	;'r'
   316  007A1F  61                 	db	97	;'a'
   317  007A20  74                 	db	116	;'t'
   318  007A21  69                 	db	105	;'i'
   319  007A22  6F                 	db	111	;'o'
   320  007A23  6E                 	db	110	;'n'
   321  007A24  20                 	db	32
   322  007A25  77                 	db	119	;'w'
   323  007A26  61                 	db	97	;'a'
   324  007A27  73                 	db	115	;'s'
   325  007A28  20                 	db	32
   326  007A29  69                 	db	105	;'i'
   327  007A2A  6E                 	db	110	;'n'
   328  007A2B  74                 	db	116	;'t'
   329  007A2C  65                 	db	101	;'e'
   330  007A2D  72                 	db	114	;'r'
   331  007A2E  72                 	db	114	;'r'
   332  007A2F  75                 	db	117	;'u'
   333  007A30  70                 	db	112	;'p'
   334  007A31  74                 	db	116	;'t'
   335  007A32  65                 	db	101	;'e'
   336  007A33  64                 	db	100	;'d'
   337  007A34  20                 	db	32
   338  007A35  62                 	db	98	;'b'
   339  007A36  65                 	db	101	;'e'
   340  007A37  63                 	db	99	;'c'
   341  007A38  61                 	db	97	;'a'
   342  007A39  75                 	db	117	;'u'
   343  007A3A  73                 	db	115	;'s'
   344  007A3B  65                 	db	101	;'e'
   345  007A3C  20                 	db	32
   346  007A3D  6C                 	db	108	;'l'
   347  007A3E  69                 	db	105	;'i'
   348  007A3F  6E                 	db	110	;'n'
   349  007A40  6B                 	db	107	;'k'
   350  007A41  20                 	db	32
   351  007A42  77                 	db	119	;'w'
   352  007A43  61                 	db	97	;'a'
   353  007A44  73                 	db	115	;'s'
   354  007A45  20                 	db	32
   355  007A46  6C                 	db	108	;'l'
   356  007A47  6F                 	db	111	;'o'
   357  007A48  73                 	db	115	;'s'
   358  007A49  74                 	db	116	;'t'
   359  007A4A  2E                 	db	46
   360  007A4B  0A                 	db	10
   361  007A4C  0D                 	db	13
   362  007A4D  00                 	db	0
   363  007A4E                     STR_57:
   364  007A4E  45                 	db	69	;'E'
   365  007A4F  74                 	db	116	;'t'
   366  007A50  68                 	db	104	;'h'
   367  007A51  65                 	db	101	;'e'
   368  007A52  72                 	db	114	;'r'
   369  007A53  6E                 	db	110	;'n'
   370  007A54  65                 	db	101	;'e'
   371  007A55  74                 	db	116	;'t'
   372  007A56  20                 	db	32
   373  007A57  63                 	db	99	;'c'
   374  007A58  6F                 	db	111	;'o'
   375  007A59  6E                 	db	110	;'n'
   376  007A5A  74                 	db	116	;'t'
   377  007A5B  72                 	db	114	;'r'
   378  007A5C  6F                 	db	111	;'o'
   379  007A5D  6C                 	db	108	;'l'
   380  007A5E  6C                 	db	108	;'l'
   381  007A5F  65                 	db	101	;'e'
   382  007A60  72                 	db	114	;'r'
   383  007A61  20                 	db	32
   384  007A62  68                 	db	104	;'h'
   385  007A63  61                 	db	97	;'a'
   386  007A64  73                 	db	115	;'s'
   387  007A65  20                 	db	32
   388  007A66  72                 	db	114	;'r'
   389  007A67  65                 	db	101	;'e'
   390  007A68  74                 	db	116	;'t'
   391  007A69  75                 	db	117	;'u'
   392  007A6A  72                 	db	114	;'r'
   393  007A6B  6E                 	db	110	;'n'
   394  007A6C  65                 	db	101	;'e'
   395  007A6D  64                 	db	100	;'d'
   396  007A6E  20                 	db	32
   397  007A6F  61                 	db	97	;'a'
   398  007A70  6E                 	db	110	;'n'
   399  007A71  20                 	db	32
   400  007A72  75                 	db	117	;'u'
   401  007A73  6E                 	db	110	;'n'
   402  007A74  6B                 	db	107	;'k'
   403  007A75  6E                 	db	110	;'n'
   404  007A76  6F                 	db	111	;'o'
   405  007A77  77                 	db	119	;'w'
   406  007A78  6E                 	db	110	;'n'
   407  007A79  20                 	db	32
   408  007A7A  64                 	db	100	;'d'
   409  007A7B  65                 	db	101	;'e'
   410  007A7C  76                 	db	118	;'v'
   411  007A7D  69                 	db	105	;'i'
   412  007A7E  63                 	db	99	;'c'
   413  007A7F  65                 	db	101	;'e'
   414  007A80  20                 	db	32
   415  007A81  49                 	db	73	;'I'
   416  007A82  44                 	db	68	;'D'
   417  007A83  2E                 	db	46
   418  007A84  00                 	db	0
   419  007A85                     STR_27:
   420  007A85  2D                 	db	45
   421  007A86  2D                 	db	45
   422  007A87  2D                 	db	45
   423  007A88  2D                 	db	45
   424  007A89  2D                 	db	45
   425  007A8A  2D                 	db	45
   426  007A8B  2D                 	db	45
   427  007A8C  2D                 	db	45
   428  007A8D  2D                 	db	45
   429  007A8E  2D                 	db	45
   430  007A8F  2D                 	db	45
   431  007A90  2D                 	db	45
   432  007A91  2D                 	db	45
   433  007A92  2D                 	db	45
   434  007A93  2D                 	db	45
   435  007A94  2D                 	db	45
   436  007A95  2D                 	db	45
   437  007A96  2D                 	db	45
   438  007A97  2D                 	db	45
   439  007A98  2D                 	db	45
   440  007A99  2D                 	db	45
   441  007A9A  2D                 	db	45
   442  007A9B  2D                 	db	45
   443  007A9C  2D                 	db	45
   444  007A9D  2D                 	db	45
   445  007A9E  2D                 	db	45
   446  007A9F  2D                 	db	45
   447  007AA0  2D                 	db	45
   448  007AA1  2D                 	db	45
   449  007AA2  2D                 	db	45
   450  007AA3  2D                 	db	45
   451  007AA4  2D                 	db	45
   452  007AA5  2D                 	db	45
   453  007AA6  2D                 	db	45
   454  007AA7  2D                 	db	45
   455  007AA8  2D                 	db	45
   456  007AA9  2D                 	db	45
   457  007AAA  2D                 	db	45
   458  007AAB  2D                 	db	45
   459  007AAC  2D                 	db	45
   460  007AAD  2D                 	db	45
   461  007AAE  2D                 	db	45
   462  007AAF  2D                 	db	45
   463  007AB0  2D                 	db	45
   464  007AB1  2D                 	db	45
   465  007AB2  2D                 	db	45
   466  007AB3  2D                 	db	45
   467  007AB4  2D                 	db	45
   468  007AB5  0A                 	db	10
   469  007AB6  0D                 	db	13
   470  007AB7  00                 	db	0
   471  007AB8                     STR_28:
   472  007AB8  07                 	db	7
   473  007AB9  2A                 	db	42
   474  007ABA  2A                 	db	42
   475  007ABB  2A                 	db	42
   476  007ABC  20                 	db	32
   477  007ABD  43                 	db	67	;'C'
   478  007ABE  52                 	db	82	;'R'
   479  007ABF  49                 	db	73	;'I'
   480  007AC0  54                 	db	84	;'T'
   481  007AC1  49                 	db	73	;'I'
   482  007AC2  43                 	db	67	;'C'
   483  007AC3  41                 	db	65	;'A'
   484  007AC4  4C                 	db	76	;'L'
   485  007AC5  20                 	db	32
   486  007AC6  45                 	db	69	;'E'
   487  007AC7  52                 	db	82	;'R'
   488  007AC8  52                 	db	82	;'R'
   489  007AC9  4F                 	db	79	;'O'
   490  007ACA  52                 	db	82	;'R'
   491  007ACB  3A                 	db	58	;':'
   492  007ACC  20                 	db	32
   493  007ACD  57                 	db	87	;'W'
   494  007ACE  41                 	db	65	;'A'
   495  007ACF  54                 	db	84	;'T'
   496  007AD0  43                 	db	67	;'C'
   497  007AD1  48                 	db	72	;'H'
   498  007AD2  44                 	db	68	;'D'
   499  007AD3  4F                 	db	79	;'O'
   500  007AD4  47                 	db	71	;'G'
   501  007AD5  20                 	db	32
   502  007AD6  43                 	db	67	;'C'
   503  007AD7  41                 	db	65	;'A'
   504  007AD8  55                 	db	85	;'U'
   505  007AD9  53                 	db	83	;'S'
   506  007ADA  45                 	db	69	;'E'
   507  007ADB  44                 	db	68	;'D'
   508  007ADC  20                 	db	32
   509  007ADD  52                 	db	82	;'R'
   510  007ADE  45                 	db	69	;'E'
   511  007ADF  53                 	db	83	;'S'
   512  007AE0  45                 	db	69	;'E'
   513  007AE1  54                 	db	84	;'T'
   514  007AE2  20                 	db	32
   515  007AE3  2A                 	db	42
   516  007AE4  2A                 	db	42
   517  007AE5  2A                 	db	42
   518  007AE6  0A                 	db	10
   519  007AE7  0D                 	db	13
   520  007AE8  00                 	db	0
   521  007AE9                     STR_83:
   522  007AE9  5B                 	db	91	;'['
   523  007AEA  41                 	db	65	;'A'
   524  007AEB  52                 	db	82	;'R'
   525  007AEC  50                 	db	80	;'P'
   526  007AED  5D                 	db	93	;']'
   527  007AEE  3A                 	db	58	;':'
   528  007AEF  20                 	db	32
   529  007AF0  53                 	db	83	;'S'
   530  007AF1  65                 	db	101	;'e'
   531  007AF2  6E                 	db	110	;'n'
   532  007AF3  64                 	db	100	;'d'
   533  007AF4  69                 	db	105	;'i'
   534  007AF5  6E                 	db	110	;'n'
   535  007AF6  67                 	db	103	;'g'
   536  007AF7  20                 	db	32
   537  007AF8  47                 	db	71	;'G'
   538  007AF9  72                 	db	114	;'r'
   539  007AFA  61                 	db	97	;'a'
   540  007AFB  74                 	db	116	;'t'
   541  007AFC  75                 	db	117	;'u'
   542  007AFD  69                 	db	105	;'i'
   543  007AFE  74                 	db	116	;'t'
   544  007AFF  6F                 	db	111	;'o'
   545  007B00  75                 	db	117	;'u'
   546  007B01  73                 	db	115	;'s'
   547  007B02  20                 	db	32
   548  007B03  41                 	db	65	;'A'
   549  007B04  52                 	db	82	;'R'
   550  007B05  50                 	db	80	;'P'
   551  007B06  20                 	db	32
   552  007B07  72                 	db	114	;'r'
   553  007B08  65                 	db	101	;'e'
   554  007B09  71                 	db	113	;'q'
   555  007B0A  75                 	db	117	;'u'
   556  007B0B  65                 	db	101	;'e'
   557  007B0C  73                 	db	115	;'s'
   558  007B0D  74                 	db	116	;'t'
   559  007B0E  20                 	db	32
   560  007B0F  66                 	db	102	;'f'
   561  007B10  6F                 	db	111	;'o'
   562  007B11  72                 	db	114	;'r'
   563  007B12  20                 	db	32
   564  007B13  00                 	db	0
   565  007B14                     STR_22:
   566  007B14  5B                 	db	91	;'['
   567  007B15  49                 	db	73	;'I'
   568  007B16  50                 	db	80	;'P'
   569  007B17  76                 	db	118	;'v'
   570  007B18  34                 	db	52	;'4'
   571  007B19  5D                 	db	93	;']'
   572  007B1A  3A                 	db	58	;':'
   573  007B1B  20                 	db	32
   574  007B1C  50                 	db	80	;'P'
   575  007B1D  61                 	db	97	;'a'
   576  007B1E  63                 	db	99	;'c'
   577  007B1F  6B                 	db	107	;'k'
   578  007B20  65                 	db	101	;'e'
   579  007B21  74                 	db	116	;'t'
   580  007B22  20                 	db	32
   581  007B23  77                 	db	119	;'w'
   582  007B24  61                 	db	97	;'a'
   583  007B25  73                 	db	115	;'s'
   584  007B26  20                 	db	32
   585  007B27  73                 	db	115	;'s'
   586  007B28  65                 	db	101	;'e'
   587  007B29  6E                 	db	110	;'n'
   588  007B2A  74                 	db	116	;'t'
   589  007B2B  20                 	db	32
   590  007B2C  73                 	db	115	;'s'
   591  007B2D  75                 	db	117	;'u'
   592  007B2E  63                 	db	99	;'c'
   593  007B2F  63                 	db	99	;'c'
   594  007B30  65                 	db	101	;'e'
   595  007B31  73                 	db	115	;'s'
   596  007B32  73                 	db	115	;'s'
   597  007B33  66                 	db	102	;'f'
   598  007B34  75                 	db	117	;'u'
   599  007B35  6C                 	db	108	;'l'
   600  007B36  6C                 	db	108	;'l'
   601  007B37  79                 	db	121	;'y'
   602  007B38  2E                 	db	46
   603  007B39  0A                 	db	10
   604  007B3A  0D                 	db	13
   605  007B3B  00                 	db	0
   606  007B3C                     STR_69:
   607  007B3C  5B                 	db	91	;'['
   608  007B3D  49                 	db	73	;'I'
   609  007B3E  6E                 	db	110	;'n'
   610  007B3F  76                 	db	118	;'v'
   611  007B40  61                 	db	97	;'a'
   612  007B41  6C                 	db	108	;'l'
   613  007B42  69                 	db	105	;'i'
   614  007B43  64                 	db	100	;'d'
   615  007B44  20                 	db	32
   616  007B45  41                 	db	65	;'A'
   617  007B46  52                 	db	82	;'R'
   618  007B47  50                 	db	80	;'P'
   619  007B48  20                 	db	32
   620  007B49  4D                 	db	77	;'M'
   621  007B4A  65                 	db	101	;'e'
   622  007B4B  73                 	db	115	;'s'
   623  007B4C  73                 	db	115	;'s'
   624  007B4D  61                 	db	97	;'a'
   625  007B4E  67                 	db	103	;'g'
   626  007B4F  65                 	db	101	;'e'
   627  007B50  20                 	db	32
   628  007B51  77                 	db	119	;'w'
   629  007B52  61                 	db	97	;'a'
   630  007B53  73                 	db	115	;'s'
   631  007B54  20                 	db	32
   632  007B55  64                 	db	100	;'d'
   633  007B56  69                 	db	105	;'i'
   634  007B57  73                 	db	115	;'s'
   635  007B58  63                 	db	99	;'c'
   636  007B59  61                 	db	97	;'a'
   637  007B5A  72                 	db	114	;'r'
   638  007B5B  64                 	db	100	;'d'
   639  007B5C  65                 	db	101	;'e'
   640  007B5D  64                 	db	100	;'d'
   641  007B5E  2E                 	db	46
   642  007B5F  5D                 	db	93	;']'
   643  007B60  0D                 	db	13
   644  007B61  0A                 	db	10
   645  007B62  00                 	db	0
   646  007B63                     STR_89:
   647  007B63  5B                 	db	91	;'['
   648  007B64  41                 	db	65	;'A'
   649  007B65  52                 	db	82	;'R'
   650  007B66  50                 	db	80	;'P'
   651  007B67  5D                 	db	93	;']'
   652  007B68  3A                 	db	58	;':'
   653  007B69  20                 	db	32
   654  007B6A  43                 	db	67	;'C'
   655  007B6B  6F                 	db	111	;'o'
   656  007B6C  6E                 	db	110	;'n'
   657  007B6D  66                 	db	102	;'f'
   658  007B6E  6C                 	db	108	;'l'
   659  007B6F  69                 	db	105	;'i'
   660  007B70  63                 	db	99	;'c'
   661  007B71  74                 	db	116	;'t'
   662  007B72  20                 	db	32
   663  007B73  64                 	db	100	;'d'
   664  007B74  75                 	db	117	;'u'
   665  007B75  72                 	db	114	;'r'
   666  007B76  69                 	db	105	;'i'
   667  007B77  6E                 	db	110	;'n'
   668  007B78  67                 	db	103	;'g'
   669  007B79  20                 	db	32
   670  007B7A  61                 	db	97	;'a'
   671  007B7B  6E                 	db	110	;'n'
   672  007B7C  6E                 	db	110	;'n'
   673  007B7D  6F                 	db	111	;'o'
   674  007B7E  75                 	db	117	;'u'
   675  007B7F  6E                 	db	110	;'n'
   676  007B80  63                 	db	99	;'c'
   677  007B81  65                 	db	101	;'e'
   678  007B82  6D                 	db	109	;'m'
   679  007B83  65                 	db	101	;'e'
   680  007B84  6E                 	db	110	;'n'
   681  007B85  74                 	db	116	;'t'
   682  007B86  2E                 	db	46
   683  007B87  0A                 	db	10
   684  007B88  0D                 	db	13
   685  007B89  00                 	db	0
   686  007B8A                     STR_94:
   687  007B8A  5B                 	db	91	;'['
   688  007B8B  41                 	db	65	;'A'
   689  007B8C  52                 	db	82	;'R'
   690  007B8D  50                 	db	80	;'P'
   691  007B8E  5D                 	db	93	;']'
   692  007B8F  3A                 	db	58	;':'
   693  007B90  20                 	db	32
   694  007B91  54                 	db	84	;'T'
   695  007B92  61                 	db	97	;'a'
   696  007B93  62                 	db	98	;'b'
   697  007B94  6C                 	db	108	;'l'
   698  007B95  65                 	db	101	;'e'
   699  007B96  20                 	db	32
   700  007B97  77                 	db	119	;'w'
   701  007B98  61                 	db	97	;'a'
   702  007B99  73                 	db	115	;'s'
   703  007B9A  20                 	db	32
   704  007B9B  72                 	db	114	;'r'
   705  007B9C  65                 	db	101	;'e'
   706  007B9D  73                 	db	115	;'s'
   707  007B9E  65                 	db	101	;'e'
   708  007B9F  74                 	db	116	;'t'
   709  007BA0  20                 	db	32
   710  007BA1  73                 	db	115	;'s'
   711  007BA2  75                 	db	117	;'u'
   712  007BA3  63                 	db	99	;'c'
   713  007BA4  63                 	db	99	;'c'
   714  007BA5  65                 	db	101	;'e'
   715  007BA6  73                 	db	115	;'s'
   716  007BA7  73                 	db	115	;'s'
   717  007BA8  66                 	db	102	;'f'
   718  007BA9  75                 	db	117	;'u'
   719  007BAA  6C                 	db	108	;'l'
   720  007BAB  6C                 	db	108	;'l'
   721  007BAC  79                 	db	121	;'y'
   722  007BAD  2E                 	db	46
   723  007BAE  0A                 	db	10
   724  007BAF  0D                 	db	13
   725  007BB0  00                 	db	0
   726  007BB1                     STR_23:
   727  007BB1  5B                 	db	91	;'['
   728  007BB2  49                 	db	73	;'I'
   729  007BB3  50                 	db	80	;'P'
   730  007BB4  76                 	db	118	;'v'
   731  007BB5  34                 	db	52	;'4'
   732  007BB6  5D                 	db	93	;']'
   733  007BB7  3A                 	db	58	;':'
   734  007BB8  20                 	db	32
   735  007BB9  41                 	db	65	;'A'
   736  007BBA  64                 	db	100	;'d'
   737  007BBB  64                 	db	100	;'d'
   738  007BBC  72                 	db	114	;'r'
   739  007BBD  65                 	db	101	;'e'
   740  007BBE  73                 	db	115	;'s'
   741  007BBF  73                 	db	115	;'s'
   742  007BC0  20                 	db	32
   743  007BC1  63                 	db	99	;'c'
   744  007BC2  6F                 	db	111	;'o'
   745  007BC3  6E                 	db	110	;'n'
   746  007BC4  66                 	db	102	;'f'
   747  007BC5  6C                 	db	108	;'l'
   748  007BC6  69                 	db	105	;'i'
   749  007BC7  63                 	db	99	;'c'
   750  007BC8  74                 	db	116	;'t'
   751  007BC9  20                 	db	32
   752  007BCA  64                 	db	100	;'d'
   753  007BCB  65                 	db	101	;'e'
   754  007BCC  74                 	db	116	;'t'
   755  007BCD  65                 	db	101	;'e'
   756  007BCE  63                 	db	99	;'c'
   757  007BCF  74                 	db	116	;'t'
   758  007BD0  65                 	db	101	;'e'
   759  007BD1  64                 	db	100	;'d'
   760  007BD2  2E                 	db	46
   761  007BD3  20                 	db	32
   762  007BD4  0A                 	db	10
   763  007BD5  0D                 	db	13
   764  007BD6  00                 	db	0
   765  007BD7                     STR_56:
   766  007BD7  45                 	db	69	;'E'
   767  007BD8  74                 	db	116	;'t'
   768  007BD9  68                 	db	104	;'h'
   769  007BDA  65                 	db	101	;'e'
   770  007BDB  72                 	db	114	;'r'
   771  007BDC  6E                 	db	110	;'n'
   772  007BDD  65                 	db	101	;'e'
   773  007BDE  74                 	db	116	;'t'
   774  007BDF  20                 	db	32
   775  007BE0  63                 	db	99	;'c'
   776  007BE1  6F                 	db	111	;'o'
   777  007BE2  6E                 	db	110	;'n'
   778  007BE3  74                 	db	116	;'t'
   779  007BE4  72                 	db	114	;'r'
   780  007BE5  6F                 	db	111	;'o'
   781  007BE6  6C                 	db	108	;'l'
   782  007BE7  6C                 	db	108	;'l'
   783  007BE8  65                 	db	101	;'e'
   784  007BE9  72                 	db	114	;'r'
   785  007BEA  20                 	db	32
   786  007BEB  69                 	db	105	;'i'
   787  007BEC  73                 	db	115	;'s'
   788  007BED  20                 	db	32
   789  007BEE  75                 	db	117	;'u'
   790  007BEF  6E                 	db	110	;'n'
   791  007BF0  72                 	db	114	;'r'
   792  007BF1  65                 	db	101	;'e'
   793  007BF2  73                 	db	115	;'s'
   794  007BF3  70                 	db	112	;'p'
   795  007BF4  6F                 	db	111	;'o'
   796  007BF5  6E                 	db	110	;'n'
   797  007BF6  73                 	db	115	;'s'
   798  007BF7  69                 	db	105	;'i'
   799  007BF8  76                 	db	118	;'v'
   800  007BF9  65                 	db	101	;'e'
   801  007BFA  2E                 	db	46
   802  007BFB  00                 	db	0
   803  007BFC                     STR_24:
   804  007BFC  5B                 	db	91	;'['
   805  007BFD  49                 	db	73	;'I'
   806  007BFE  50                 	db	80	;'P'
   807  007BFF  76                 	db	118	;'v'
   808  007C00  34                 	db	52	;'4'
   809  007C01  5D                 	db	93	;']'
   810  007C02  3A                 	db	58	;':'
   811  007C03  20                 	db	32
   812  007C04  53                 	db	83	;'S'
   813  007C05  65                 	db	101	;'e'
   814  007C06  74                 	db	116	;'t'
   815  007C07  74                 	db	116	;'t'
   816  007C08  69                 	db	105	;'i'
   817  007C09  6E                 	db	110	;'n'
   818  007C0A  67                 	db	103	;'g'
   819  007C0B  20                 	db	32
   820  007C0C  49                 	db	73	;'I'
   821  007C0D  50                 	db	80	;'P'
   822  007C0E  76                 	db	118	;'v'
   823  007C0F  34                 	db	52	;'4'
   824  007C10  20                 	db	32
   825  007C11  53                 	db	83	;'S'
   826  007C12  72                 	db	114	;'r'
   827  007C13  63                 	db	99	;'c'
   828  007C14  20                 	db	32
   829  007C15  41                 	db	65	;'A'
   830  007C16  64                 	db	100	;'d'
   831  007C17  64                 	db	100	;'d'
   832  007C18  72                 	db	114	;'r'
   833  007C19  65                 	db	101	;'e'
   834  007C1A  73                 	db	115	;'s'
   835  007C1B  73                 	db	115	;'s'
   836  007C1C  20                 	db	32
   837  007C1D  74                 	db	116	;'t'
   838  007C1E  6F                 	db	111	;'o'
   839  007C1F  20                 	db	32
   840  007C20  00                 	db	0
   841  007C21                     STR_86:
   842  007C21  5B                 	db	91	;'['
   843  007C22  41                 	db	65	;'A'
   844  007C23  52                 	db	82	;'R'
   845  007C24  50                 	db	80	;'P'
   846  007C25  5D                 	db	93	;']'
   847  007C26  3A                 	db	58	;':'
   848  007C27  20                 	db	32
   849  007C28  4E                 	db	78	;'N'
   850  007C29  6F                 	db	111	;'o'
   851  007C2A  62                 	db	98	;'b'
   852  007C2B  6F                 	db	111	;'o'
   853  007C2C  64                 	db	100	;'d'
   854  007C2D  79                 	db	121	;'y'
   855  007C2E  20                 	db	32
   856  007C2F  61                 	db	97	;'a'
   857  007C30  6E                 	db	110	;'n'
   858  007C31  73                 	db	115	;'s'
   859  007C32  77                 	db	119	;'w'
   860  007C33  65                 	db	101	;'e'
   861  007C34  72                 	db	114	;'r'
   862  007C35  65                 	db	101	;'e'
   863  007C36  64                 	db	100	;'d'
   864  007C37  20                 	db	32
   865  007C38  74                 	db	116	;'t'
   866  007C39  6F                 	db	111	;'o'
   867  007C3A  20                 	db	32
   868  007C3B  70                 	db	112	;'p'
   869  007C3C  72                 	db	114	;'r'
   870  007C3D  6F                 	db	111	;'o'
   871  007C3E  62                 	db	98	;'b'
   872  007C3F  65                 	db	101	;'e'
   873  007C40  73                 	db	115	;'s'
   874  007C41  2E                 	db	46
   875  007C42  0A                 	db	10
   876  007C43  0D                 	db	13
   877  007C44  00                 	db	0
   878  007C45                     STR_88:
   879  007C45  5B                 	db	91	;'['
   880  007C46  41                 	db	65	;'A'
   881  007C47  52                 	db	82	;'R'
   882  007C48  50                 	db	80	;'P'
   883  007C49  5D                 	db	93	;']'
   884  007C4A  3A                 	db	58	;':'
   885  007C4B  20                 	db	32
   886  007C4C  41                 	db	65	;'A'
   887  007C4D  6E                 	db	110	;'n'
   888  007C4E  20                 	db	32
   889  007C4F  75                 	db	117	;'u'
   890  007C50  6E                 	db	110	;'n'
   891  007C51  6B                 	db	107	;'k'
   892  007C52  6E                 	db	110	;'n'
   893  007C53  6F                 	db	111	;'o'
   894  007C54  77                 	db	119	;'w'
   895  007C55  6E                 	db	110	;'n'
   896  007C56  20                 	db	32
   897  007C57  65                 	db	101	;'e'
   898  007C58  72                 	db	114	;'r'
   899  007C59  72                 	db	114	;'r'
   900  007C5A  6F                 	db	111	;'o'
   901  007C5B  72                 	db	114	;'r'
   902  007C5C  20                 	db	32
   903  007C5D  6F                 	db	111	;'o'
   904  007C5E  63                 	db	99	;'c'
   905  007C5F  63                 	db	99	;'c'
   906  007C60  75                 	db	117	;'u'
   907  007C61  72                 	db	114	;'r'
   908  007C62  65                 	db	101	;'e'
   909  007C63  64                 	db	100	;'d'
   910  007C64  2E                 	db	46
   911  007C65  0A                 	db	10
   912  007C66  0D                 	db	13
   913  007C67  00                 	db	0
   914  007C68                     STR_85:
   915  007C68  5B                 	db	91	;'['
   916  007C69  41                 	db	65	;'A'
   917  007C6A  52                 	db	82	;'R'
   918  007C6B  50                 	db	80	;'P'
   919  007C6C  5D                 	db	93	;']'
   920  007C6D  3A                 	db	58	;':'
   921  007C6E  20                 	db	32
   922  007C6F  43                 	db	67	;'C'
   923  007C70  6F                 	db	111	;'o'
   924  007C71  6E                 	db	110	;'n'
   925  007C72  66                 	db	102	;'f'
   926  007C73  6C                 	db	108	;'l'
   927  007C74  69                 	db	105	;'i'
   928  007C75  63                 	db	99	;'c'
   929  007C76  74                 	db	116	;'t'
   930  007C77  20                 	db	32
   931  007C78  64                 	db	100	;'d'
   932  007C79  75                 	db	117	;'u'
   933  007C7A  72                 	db	114	;'r'
   934  007C7B  69                 	db	105	;'i'
   935  007C7C  6E                 	db	110	;'n'
   936  007C7D  67                 	db	103	;'g'
   937  007C7E  20                 	db	32
   938  007C7F  70                 	db	112	;'p'
   939  007C80  72                 	db	114	;'r'
   940  007C81  6F                 	db	111	;'o'
   941  007C82  62                 	db	98	;'b'
   942  007C83  69                 	db	105	;'i'
   943  007C84  6E                 	db	110	;'n'
   944  007C85  67                 	db	103	;'g'
   945  007C86  2E                 	db	46
   946  007C87  0A                 	db	10
   947  007C88  0D                 	db	13
   948  007C89  00                 	db	0
   949  007C8A                     STR_58:
   950  007C8A  49                 	db	73	;'I'
   951  007C8B  50                 	db	80	;'P'
   952  007C8C  20                 	db	32
   953  007C8D  61                 	db	97	;'a'
   954  007C8E  64                 	db	100	;'d'
   955  007C8F  64                 	db	100	;'d'
   956  007C90  72                 	db	114	;'r'
   957  007C91  65                 	db	101	;'e'
   958  007C92  73                 	db	115	;'s'
   959  007C93  73                 	db	115	;'s'
   960  007C94  20                 	db	32
   961  007C95  63                 	db	99	;'c'
   962  007C96  6F                 	db	111	;'o'
   963  007C97  75                 	db	117	;'u'
   964  007C98  6C                 	db	108	;'l'
   965  007C99  64                 	db	100	;'d'
   966  007C9A  20                 	db	32
   967  007C9B  6E                 	db	110	;'n'
   968  007C9C  6F                 	db	111	;'o'
   969  007C9D  74                 	db	116	;'t'
   970  007C9E  20                 	db	32
   971  007C9F  62                 	db	98	;'b'
   972  007CA0  65                 	db	101	;'e'
   973  007CA1  20                 	db	32
   974  007CA2  72                 	db	114	;'r'
   975  007CA3  65                 	db	101	;'e'
   976  007CA4  73                 	db	115	;'s'
   977  007CA5  6F                 	db	111	;'o'
   978  007CA6  6C                 	db	108	;'l'
   979  007CA7  76                 	db	118	;'v'
   980  007CA8  65                 	db	101	;'e'
   981  007CA9  64                 	db	100	;'d'
   982  007CAA  2E                 	db	46
   983  007CAB  00                 	db	0
   984  007CAC                     STR_112:
   985  007CAC  5B                 	db	91	;'['
   986  007CAD  49                 	db	73	;'I'
   987  007CAE  50                 	db	80	;'P'
   988  007CAF  76                 	db	118	;'v'
   989  007CB0  34                 	db	52	;'4'
   990  007CB1  5D                 	db	93	;']'
   991  007CB2  3A                 	db	58	;':'
   992  007CB3  20                 	db	32
   993  007CB4  41                 	db	65	;'A'
   994  007CB5  52                 	db	82	;'R'
   995  007CB6  50                 	db	80	;'P'
   996  007CB7  20                 	db	32
   997  007CB8  70                 	db	112	;'p'
   998  007CB9  72                 	db	114	;'r'
   999  007CBA  6F                 	db	111	;'o'
  1000  007CBB  63                 	db	99	;'c'
  1001  007CBC  65                 	db	101	;'e'
  1002  007CBD  73                 	db	115	;'s'
  1003  007CBE  73                 	db	115	;'s'
  1004  007CBF  20                 	db	32
  1005  007CC0  63                 	db	99	;'c'
  1006  007CC1  6F                 	db	111	;'o'
  1007  007CC2  6D                 	db	109	;'m'
  1008  007CC3  70                 	db	112	;'p'
  1009  007CC4  6C                 	db	108	;'l'
  1010  007CC5  65                 	db	101	;'e'
  1011  007CC6  74                 	db	116	;'t'
  1012  007CC7  65                 	db	101	;'e'
  1013  007CC8  64                 	db	100	;'d'
  1014  007CC9  2E                 	db	46
  1015  007CCA  0A                 	db	10
  1016  007CCB  0D                 	db	13
  1017  007CCC  00                 	db	0
  1018  007CCD                     STR_90:
  1019  007CCD  5B                 	db	91	;'['
  1020  007CCE  41                 	db	65	;'A'
  1021  007CCF  52                 	db	82	;'R'
  1022  007CD0  50                 	db	80	;'P'
  1023  007CD1  5D                 	db	93	;']'
  1024  007CD2  3A                 	db	58	;':'
  1025  007CD3  20                 	db	32
  1026  007CD4  41                 	db	65	;'A'
  1027  007CD5  6C                 	db	108	;'l'
  1028  007CD6  6C                 	db	108	;'l'
  1029  007CD7  20                 	db	32
  1030  007CD8  61                 	db	97	;'a'
  1031  007CD9  6E                 	db	110	;'n'
  1032  007CDA  6E                 	db	110	;'n'
  1033  007CDB  6F                 	db	111	;'o'
  1034  007CDC  75                 	db	117	;'u'
  1035  007CDD  6E                 	db	110	;'n'
  1036  007CDE  63                 	db	99	;'c'
  1037  007CDF  65                 	db	101	;'e'
  1038  007CE0  6D                 	db	109	;'m'
  1039  007CE1  65                 	db	101	;'e'
  1040  007CE2  6E                 	db	110	;'n'
  1041  007CE3  74                 	db	116	;'t'
  1042  007CE4  73                 	db	115	;'s'
  1043  007CE5  20                 	db	32
  1044  007CE6  73                 	db	115	;'s'
  1045  007CE7  65                 	db	101	;'e'
  1046  007CE8  6E                 	db	110	;'n'
  1047  007CE9  74                 	db	116	;'t'
  1048  007CEA  2E                 	db	46
  1049  007CEB  0A                 	db	10
  1050  007CEC  0D                 	db	13
  1051  007CED  00                 	db	0
  1052  007CEE                     STR_41:
  1053  007CEE  5B                 	db	91	;'['
  1054  007CEF  49                 	db	73	;'I'
  1055  007CF0  50                 	db	80	;'P'
  1056  007CF1  76                 	db	118	;'v'
  1057  007CF2  34                 	db	52	;'4'
  1058  007CF3  5D                 	db	93	;']'
  1059  007CF4  3A                 	db	58	;':'
  1060  007CF5  20                 	db	32
  1061  007CF6  41                 	db	65	;'A'
  1062  007CF7  20                 	db	32
  1063  007CF8  70                 	db	112	;'p'
  1064  007CF9  61                 	db	97	;'a'
  1065  007CFA  63                 	db	99	;'c'
  1066  007CFB  6B                 	db	107	;'k'
  1067  007CFC  65                 	db	101	;'e'
  1068  007CFD  74                 	db	116	;'t'
  1069  007CFE  20                 	db	32
  1070  007CFF  77                 	db	119	;'w'
  1071  007D00  61                 	db	97	;'a'
  1072  007D01  73                 	db	115	;'s'
  1073  007D02  20                 	db	32
  1074  007D03  70                 	db	112	;'p'
  1075  007D04  72                 	db	114	;'r'
  1076  007D05  65                 	db	101	;'e'
  1077  007D06  70                 	db	112	;'p'
  1078  007D07  61                 	db	97	;'a'
  1079  007D08  72                 	db	114	;'r'
  1080  007D09  65                 	db	101	;'e'
  1081  007D0A  64                 	db	100	;'d'
  1082  007D0B  20                 	db	32
  1083  007D0C  28                 	db	40
  1084  007D0D  00                 	db	0
  1085  007D0E                     STR_91:
  1086  007D0E  5B                 	db	91	;'['
  1087  007D0F  41                 	db	65	;'A'
  1088  007D10  52                 	db	82	;'R'
  1089  007D11  50                 	db	80	;'P'
  1090  007D12  5D                 	db	93	;']'
  1091  007D13  3A                 	db	58	;':'
  1092  007D14  20                 	db	32
  1093  007D15  4E                 	db	78	;'N'
  1094  007D16  65                 	db	101	;'e'
  1095  007D17  77                 	db	119	;'w'
  1096  007D18  20                 	db	32
  1097  007D19  65                 	db	101	;'e'
  1098  007D1A  6E                 	db	110	;'n'
  1099  007D1B  74                 	db	116	;'t'
  1100  007D1C  72                 	db	114	;'r'
  1101  007D1D  79                 	db	121	;'y'
  1102  007D1E  20                 	db	32
  1103  007D1F  63                 	db	99	;'c'
  1104  007D20  72                 	db	114	;'r'
  1105  007D21  65                 	db	101	;'e'
  1106  007D22  61                 	db	97	;'a'
  1107  007D23  74                 	db	116	;'t'
  1108  007D24  65                 	db	101	;'e'
  1109  007D25  64                 	db	100	;'d'
  1110  007D26  20                 	db	32
  1111  007D27  66                 	db	102	;'f'
  1112  007D28  6F                 	db	111	;'o'
  1113  007D29  72                 	db	114	;'r'
  1114  007D2A  20                 	db	32
  1115  007D2B  00                 	db	0
  1116  007D2C                     STR_52:
  1117  007D2C  20                 	db	32
  1118  007D2D  45                 	db	69	;'E'
  1119  007D2E  54                 	db	84	;'T'
  1120  007D2F  48                 	db	72	;'H'
  1121  007D30  45                 	db	69	;'E'
  1122  007D31  52                 	db	82	;'R'
  1123  007D32  4E                 	db	78	;'N'
  1124  007D33  45                 	db	69	;'E'
  1125  007D34  54                 	db	84	;'T'
  1126  007D35  20                 	db	32
  1127  007D36  43                 	db	67	;'C'
  1128  007D37  4F                 	db	79	;'O'
  1129  007D38  4E                 	db	78	;'N'
  1130  007D39  54                 	db	84	;'T'
  1131  007D3A  52                 	db	82	;'R'
  1132  007D3B  4F                 	db	79	;'O'
  1133  007D3C  4C                 	db	76	;'L'
  1134  007D3D  4C                 	db	76	;'L'
  1135  007D3E  45                 	db	69	;'E'
  1136  007D3F  52                 	db	82	;'R'
  1137  007D40  20                 	db	32
  1138  007D41  4D                 	db	77	;'M'
  1139  007D42  4F                 	db	79	;'O'
  1140  007D43  44                 	db	68	;'D'
  1141  007D44  55                 	db	85	;'U'
  1142  007D45  4C                 	db	76	;'L'
  1143  007D46  45                 	db	69	;'E'
  1144  007D47  3A                 	db	58	;':'
  1145  007D48  20                 	db	32
  1146  007D49  00                 	db	0
  1147  007D4A                     STR_59:
  1148  007D4A  41                 	db	65	;'A'
  1149  007D4B  6E                 	db	110	;'n'
  1150  007D4C  20                 	db	32
  1151  007D4D  75                 	db	117	;'u'
  1152  007D4E  6E                 	db	110	;'n'
  1153  007D4F  6B                 	db	107	;'k'
  1154  007D50  6E                 	db	110	;'n'
  1155  007D51  6F                 	db	111	;'o'
  1156  007D52  77                 	db	119	;'w'
  1157  007D53  6E                 	db	110	;'n'
  1158  007D54  20                 	db	32
  1159  007D55  65                 	db	101	;'e'
  1160  007D56  72                 	db	114	;'r'
  1161  007D57  72                 	db	114	;'r'
  1162  007D58  6F                 	db	111	;'o'
  1163  007D59  72                 	db	114	;'r'
  1164  007D5A  20                 	db	32
  1165  007D5B  68                 	db	104	;'h'
  1166  007D5C  61                 	db	97	;'a'
  1167  007D5D  73                 	db	115	;'s'
  1168  007D5E  20                 	db	32
  1169  007D5F  6F                 	db	111	;'o'
  1170  007D60  63                 	db	99	;'c'
  1171  007D61  63                 	db	99	;'c'
  1172  007D62  75                 	db	117	;'u'
  1173  007D63  72                 	db	114	;'r'
  1174  007D64  65                 	db	101	;'e'
  1175  007D65  64                 	db	100	;'d'
  1176  007D66  2E                 	db	46
  1177  007D67  00                 	db	0
  1178  007D68                     STR_48:
  1179  007D68  63                 	db	99	;'c'
  1180  007D69  6F                 	db	111	;'o'
  1181  007D6A  6E                 	db	110	;'n'
  1182  007D6B  6E                 	db	110	;'n'
  1183  007D6C  65                 	db	101	;'e'
  1184  007D6D  63                 	db	99	;'c'
  1185  007D6E  74                 	db	116	;'t'
  1186  007D6F  69                 	db	105	;'i'
  1187  007D70  6F                 	db	111	;'o'
  1188  007D71  6E                 	db	110	;'n'
  1189  007D72  20                 	db	32
  1190  007D73  69                 	db	105	;'i'
  1191  007D74  73                 	db	115	;'s'
  1192  007D75  20                 	db	32
  1193  007D76  48                 	db	72	;'H'
  1194  007D77  61                 	db	97	;'a'
  1195  007D78  6C                 	db	108	;'l'
  1196  007D79  66                 	db	102	;'f'
  1197  007D7A  20                 	db	32
  1198  007D7B  44                 	db	68	;'D'
  1199  007D7C  75                 	db	117	;'u'
  1200  007D7D  70                 	db	112	;'p'
  1201  007D7E  6C                 	db	108	;'l'
  1202  007D7F  65                 	db	101	;'e'
  1203  007D80  78                 	db	120	;'x'
  1204  007D81  2E                 	db	46
  1205  007D82  0A                 	db	10
  1206  007D83  0D                 	db	13
  1207  007D84  00                 	db	0
  1208  007D85                     STR_49:
  1209  007D85  63                 	db	99	;'c'
  1210  007D86  6F                 	db	111	;'o'
  1211  007D87  6E                 	db	110	;'n'
  1212  007D88  6E                 	db	110	;'n'
  1213  007D89  65                 	db	101	;'e'
  1214  007D8A  63                 	db	99	;'c'
  1215  007D8B  74                 	db	116	;'t'
  1216  007D8C  69                 	db	105	;'i'
  1217  007D8D  6F                 	db	111	;'o'
  1218  007D8E  6E                 	db	110	;'n'
  1219  007D8F  20                 	db	32
  1220  007D90  69                 	db	105	;'i'
  1221  007D91  73                 	db	115	;'s'
  1222  007D92  20                 	db	32
  1223  007D93  46                 	db	70	;'F'
  1224  007D94  75                 	db	117	;'u'
  1225  007D95  6C                 	db	108	;'l'
  1226  007D96  6C                 	db	108	;'l'
  1227  007D97  20                 	db	32
  1228  007D98  44                 	db	68	;'D'
  1229  007D99  75                 	db	117	;'u'
  1230  007D9A  70                 	db	112	;'p'
  1231  007D9B  6C                 	db	108	;'l'
  1232  007D9C  65                 	db	101	;'e'
  1233  007D9D  78                 	db	120	;'x'
  1234  007D9E  2E                 	db	46
  1235  007D9F  0A                 	db	10
  1236  007DA0  0D                 	db	13
  1237  007DA1  00                 	db	0
  1238  007DA2                     STR_113:
  1239  007DA2  5B                 	db	91	;'['
  1240  007DA3  49                 	db	73	;'I'
  1241  007DA4  50                 	db	80	;'P'
  1242  007DA5  76                 	db	118	;'v'
  1243  007DA6  34                 	db	52	;'4'
  1244  007DA7  5D                 	db	93	;']'
  1245  007DA8  3A                 	db	58	;':'
  1246  007DA9  20                 	db	32
  1247  007DAA  41                 	db	65	;'A'
  1248  007DAB  64                 	db	100	;'d'
  1249  007DAC  64                 	db	100	;'d'
  1250  007DAD  72                 	db	114	;'r'
  1251  007DAE  65                 	db	101	;'e'
  1252  007DAF  73                 	db	115	;'s'
  1253  007DB0  73                 	db	115	;'s'
  1254  007DB1  20                 	db	32
  1255  007DB2  63                 	db	99	;'c'
  1256  007DB3  6F                 	db	111	;'o'
  1257  007DB4  6E                 	db	110	;'n'
  1258  007DB5  66                 	db	102	;'f'
  1259  007DB6  6C                 	db	108	;'l'
  1260  007DB7  69                 	db	105	;'i'
  1261  007DB8  63                 	db	99	;'c'
  1262  007DB9  74                 	db	116	;'t'
  1263  007DBA  0A                 	db	10
  1264  007DBB  0D                 	db	13
  1265  007DBC  00                 	db	0
  1266  007DBD                     STR_99:
  1267  007DBD  5B                 	db	91	;'['
  1268  007DBE  49                 	db	73	;'I'
  1269  007DBF  50                 	db	80	;'P'
  1270  007DC0  76                 	db	118	;'v'
  1271  007DC1  34                 	db	52	;'4'
  1272  007DC2  5D                 	db	93	;']'
  1273  007DC3  3A                 	db	58	;':'
  1274  007DC4  20                 	db	32
  1275  007DC5  54                 	db	84	;'T'
  1276  007DC6  72                 	db	114	;'r'
  1277  007DC7  79                 	db	121	;'y'
  1278  007DC8  69                 	db	105	;'i'
  1279  007DC9  6E                 	db	110	;'n'
  1280  007DCA  67                 	db	103	;'g'
  1281  007DCB  20                 	db	32
  1282  007DCC  74                 	db	116	;'t'
  1283  007DCD  6F                 	db	111	;'o'
  1284  007DCE  20                 	db	32
  1285  007DCF  72                 	db	114	;'r'
  1286  007DD0  65                 	db	101	;'e'
  1287  007DD1  73                 	db	115	;'s'
  1288  007DD2  6F                 	db	111	;'o'
  1289  007DD3  6C                 	db	108	;'l'
  1290  007DD4  76                 	db	118	;'v'
  1291  007DD5  65                 	db	101	;'e'
  1292  007DD6  20                 	db	32
  1293  007DD7  00                 	db	0
  1294  007DD8                     STR_80:
  1295  007DD8  5B                 	db	91	;'['
  1296  007DD9  41                 	db	65	;'A'
  1297  007DDA  52                 	db	82	;'R'
  1298  007DDB  50                 	db	80	;'P'
  1299  007DDC  5D                 	db	93	;']'
  1300  007DDD  3A                 	db	58	;':'
  1301  007DDE  20                 	db	32
  1302  007DDF  53                 	db	83	;'S'
  1303  007DE0  65                 	db	101	;'e'
  1304  007DE1  6E                 	db	110	;'n'
  1305  007DE2  64                 	db	100	;'d'
  1306  007DE3  69                 	db	105	;'i'
  1307  007DE4  6E                 	db	110	;'n'
  1308  007DE5  67                 	db	103	;'g'
  1309  007DE6  20                 	db	32
  1310  007DE7  50                 	db	80	;'P'
  1311  007DE8  72                 	db	114	;'r'
  1312  007DE9  6F                 	db	111	;'o'
  1313  007DEA  62                 	db	98	;'b'
  1314  007DEB  65                 	db	101	;'e'
  1315  007DEC  20                 	db	32
  1316  007DED  66                 	db	102	;'f'
  1317  007DEE  6F                 	db	111	;'o'
  1318  007DEF  72                 	db	114	;'r'
  1319  007DF0  20                 	db	32
  1320  007DF1  00                 	db	0
  1321  007DF2                     STR_30:
  1322  007DF2  46                 	db	70	;'F'
  1323  007DF3  49                 	db	73	;'I'
  1324  007DF4  52                 	db	82	;'R'
  1325  007DF5  4D                 	db	77	;'M'
  1326  007DF6  57                 	db	87	;'W'
  1327  007DF7  41                 	db	65	;'A'
  1328  007DF8  52                 	db	82	;'R'
  1329  007DF9  45                 	db	69	;'E'
  1330  007DFA  20                 	db	32
  1331  007DFB  42                 	db	66	;'B'
  1332  007DFC  55                 	db	85	;'U'
  1333  007DFD  49                 	db	73	;'I'
  1334  007DFE  4C                 	db	76	;'L'
  1335  007DFF  44                 	db	68	;'D'
  1336  007E00  20                 	db	32
  1337  007E01  44                 	db	68	;'D'
  1338  007E02  41                 	db	65	;'A'
  1339  007E03  54                 	db	84	;'T'
  1340  007E04  45                 	db	69	;'E'
  1341  007E05  20                 	db	32
  1342  007E06  49                 	db	73	;'I'
  1343  007E07  53                 	db	83	;'S'
  1344  007E08  20                 	db	32
  1345  007E09  00                 	db	0
  1346  007E0A                     STR_36:
  1347  007E0A  53                 	db	83	;'S'
  1348  007E0B  6F                 	db	111	;'o'
  1349  007E0C  75                 	db	117	;'u'
  1350  007E0D  72                 	db	114	;'r'
  1351  007E0E  63                 	db	99	;'c'
  1352  007E0F  65                 	db	101	;'e'
  1353  007E10  20                 	db	32
  1354  007E11  4D                 	db	77	;'M'
  1355  007E12  41                 	db	65	;'A'
  1356  007E13  43                 	db	67	;'C'
  1357  007E14  20                 	db	32
  1358  007E15  61                 	db	97	;'a'
  1359  007E16  64                 	db	100	;'d'
  1360  007E17  64                 	db	100	;'d'
  1361  007E18  72                 	db	114	;'r'
  1362  007E19  65                 	db	101	;'e'
  1363  007E1A  73                 	db	115	;'s'
  1364  007E1B  73                 	db	115	;'s'
  1365  007E1C  20                 	db	32
  1366  007E1D  69                 	db	105	;'i'
  1367  007E1E  73                 	db	115	;'s'
  1368  007E1F  20                 	db	32
  1369  007E20  00                 	db	0
  1370  007E21                     STR_47:
  1371  007E21  53                 	db	83	;'S'
  1372  007E22  70                 	db	112	;'p'
  1373  007E23  65                 	db	101	;'e'
  1374  007E24  65                 	db	101	;'e'
  1375  007E25  64                 	db	100	;'d'
  1376  007E26  20                 	db	32
  1377  007E27  69                 	db	105	;'i'
  1378  007E28  73                 	db	115	;'s'
  1379  007E29  20                 	db	32
  1380  007E2A  31                 	db	49	;'1'
  1381  007E2B  30                 	db	48	;'0'
  1382  007E2C  30                 	db	48	;'0'
  1383  007E2D  20                 	db	32
  1384  007E2E  4D                 	db	77	;'M'
  1385  007E2F  62                 	db	98	;'b'
  1386  007E30  70                 	db	112	;'p'
  1387  007E31  73                 	db	115	;'s'
  1388  007E32  2C                 	db	44
  1389  007E33  20                 	db	32
  1390  007E34  00                 	db	0
  1391  007E35                     STR_10:
  1392  007E35  5B                 	db	91	;'['
  1393  007E36  55                 	db	85	;'U'
  1394  007E37  6E                 	db	110	;'n'
  1395  007E38  6B                 	db	107	;'k'
  1396  007E39  6E                 	db	110	;'n'
  1397  007E3A  6F                 	db	111	;'o'
  1398  007E3B  77                 	db	119	;'w'
  1399  007E3C  6E                 	db	110	;'n'
  1400  007E3D  20                 	db	32
  1401  007E3E  45                 	db	69	;'E'
  1402  007E3F  74                 	db	116	;'t'
  1403  007E40  68                 	db	104	;'h'
  1404  007E41  65                 	db	101	;'e'
  1405  007E42  72                 	db	114	;'r'
  1406  007E43  54                 	db	84	;'T'
  1407  007E44  79                 	db	121	;'y'
  1408  007E45  70                 	db	112	;'p'
  1409  007E46  65                 	db	101	;'e'
  1410  007E47  5D                 	db	93	;']'
  1411  007E48  00                 	db	0
  1412  007E49                     STR_111:
  1413  007E49  5B                 	db	91	;'['
  1414  007E4A  49                 	db	73	;'I'
  1415  007E4B  4E                 	db	78	;'N'
  1416  007E4C  56                 	db	86	;'V'
  1417  007E4D  41                 	db	65	;'A'
  1418  007E4E  4C                 	db	76	;'L'
  1419  007E4F  49                 	db	73	;'I'
  1420  007E50  44                 	db	68	;'D'
  1421  007E51  20                 	db	32
  1422  007E52  43                 	db	67	;'C'
  1423  007E53  48                 	db	72	;'H'
  1424  007E54  45                 	db	69	;'E'
  1425  007E55  43                 	db	67	;'C'
  1426  007E56  4B                 	db	75	;'K'
  1427  007E57  53                 	db	83	;'S'
  1428  007E58  55                 	db	85	;'U'
  1429  007E59  4D                 	db	77	;'M'
  1430  007E5A  5D                 	db	93	;']'
  1431  007E5B  00                 	db	0
  1432  007E5C                     STR_46:
  1433  007E5C  53                 	db	83	;'S'
  1434  007E5D  70                 	db	112	;'p'
  1435  007E5E  65                 	db	101	;'e'
  1436  007E5F  65                 	db	101	;'e'
  1437  007E60  64                 	db	100	;'d'
  1438  007E61  20                 	db	32
  1439  007E62  69                 	db	105	;'i'
  1440  007E63  73                 	db	115	;'s'
  1441  007E64  20                 	db	32
  1442  007E65  31                 	db	49	;'1'
  1443  007E66  30                 	db	48	;'0'
  1444  007E67  20                 	db	32
  1445  007E68  4D                 	db	77	;'M'
  1446  007E69  62                 	db	98	;'b'
  1447  007E6A  70                 	db	112	;'p'
  1448  007E6B  73                 	db	115	;'s'
  1449  007E6C  2C                 	db	44
  1450  007E6D  20                 	db	32
  1451  007E6E  00                 	db	0
  1452  007E6F                     STR_45:
  1453  007E6F  4C                 	db	76	;'L'
  1454  007E70  69                 	db	105	;'i'
  1455  007E71  6E                 	db	110	;'n'
  1456  007E72  6B                 	db	107	;'k'
  1457  007E73  20                 	db	32
  1458  007E74  65                 	db	101	;'e'
  1459  007E75  73                 	db	115	;'s'
  1460  007E76  74                 	db	116	;'t'
  1461  007E77  61                 	db	97	;'a'
  1462  007E78  62                 	db	98	;'b'
  1463  007E79  6C                 	db	108	;'l'
  1464  007E7A  69                 	db	105	;'i'
  1465  007E7B  73                 	db	115	;'s'
  1466  007E7C  68                 	db	104	;'h'
  1467  007E7D  65                 	db	101	;'e'
  1468  007E7E  64                 	db	100	;'d'
  1469  007E7F  2E                 	db	46
  1470  007E80  20                 	db	32
  1471  007E81  00                 	db	0
  1472  007E82                     STR_53:
  1473  007E82  20                 	db	32
  1474  007E83  45                 	db	69	;'E'
  1475  007E84  54                 	db	84	;'T'
  1476  007E85  48                 	db	72	;'H'
  1477  007E86  45                 	db	69	;'E'
  1478  007E87  52                 	db	82	;'R'
  1479  007E88  4E                 	db	78	;'N'
  1480  007E89  45                 	db	69	;'E'
  1481  007E8A  54                 	db	84	;'T'
  1482  007E8B  20                 	db	32
  1483  007E8C  4D                 	db	77	;'M'
  1484  007E8D  4F                 	db	79	;'O'
  1485  007E8E  44                 	db	68	;'D'
  1486  007E8F  55                 	db	85	;'U'
  1487  007E90  4C                 	db	76	;'L'
  1488  007E91  45                 	db	69	;'E'
  1489  007E92  3A                 	db	58	;':'
  1490  007E93  20                 	db	32
  1491  007E94  00                 	db	0
  1492  007E95                     STR_64:
  1493  007E95  55                 	db	85	;'U'
  1494  007E96  6E                 	db	110	;'n'
  1495  007E97  6B                 	db	107	;'k'
  1496  007E98  6E                 	db	110	;'n'
  1497  007E99  6F                 	db	111	;'o'
  1498  007E9A  77                 	db	119	;'w'
  1499  007E9B  6E                 	db	110	;'n'
  1500  007E9C  20                 	db	32
  1501  007E9D  45                 	db	69	;'E'
  1502  007E9E  74                 	db	116	;'t'
  1503  007E9F  68                 	db	104	;'h'
  1504  007EA0  65                 	db	101	;'e'
  1505  007EA1  72                 	db	114	;'r'
  1506  007EA2  54                 	db	84	;'T'
  1507  007EA3  79                 	db	121	;'y'
  1508  007EA4  70                 	db	112	;'p'
  1509  007EA5  65                 	db	101	;'e'
  1510  007EA6  00                 	db	0
  1511  007EA7                     STR_68:
  1512  007EA7  55                 	db	85	;'U'
  1513  007EA8  6E                 	db	110	;'n'
  1514  007EA9  6B                 	db	107	;'k'
  1515  007EAA  6E                 	db	110	;'n'
  1516  007EAB  6F                 	db	111	;'o'
  1517  007EAC  77                 	db	119	;'w'
  1518  007EAD  6E                 	db	110	;'n'
  1519  007EAE  20                 	db	32
  1520  007EAF  50                 	db	80	;'P'
  1521  007EB0  72                 	db	114	;'r'
  1522  007EB1  6F                 	db	111	;'o'
  1523  007EB2  74                 	db	116	;'t'
  1524  007EB3  6F                 	db	111	;'o'
  1525  007EB4  63                 	db	99	;'c'
  1526  007EB5  6F                 	db	111	;'o'
  1527  007EB6  6C                 	db	108	;'l'
  1528  007EB7  00                 	db	0
  1529  007EB8                     STR_51:
  1530  007EB8  20                 	db	32
  1531  007EB9  4D                 	db	77	;'M'
  1532  007EBA  45                 	db	69	;'E'
  1533  007EBB  4D                 	db	77	;'M'
  1534  007EBC  4F                 	db	79	;'O'
  1535  007EBD  52                 	db	82	;'R'
  1536  007EBE  59                 	db	89	;'Y'
  1537  007EBF  20                 	db	32
  1538  007EC0  4D                 	db	77	;'M'
  1539  007EC1  4F                 	db	79	;'O'
  1540  007EC2  44                 	db	68	;'D'
  1541  007EC3  55                 	db	85	;'U'
  1542  007EC4  4C                 	db	76	;'L'
  1543  007EC5  45                 	db	69	;'E'
  1544  007EC6  3A                 	db	58	;':'
  1545  007EC7  20                 	db	32
  1546  007EC8  00                 	db	0
  1547  007EC9                     STR_77:
  1548  007EC9  5B                 	db	91	;'['
  1549  007ECA  52                 	db	82	;'R'
  1550  007ECB  65                 	db	101	;'e'
  1551  007ECC  70                 	db	112	;'p'
  1552  007ECD  6C                 	db	108	;'l'
  1553  007ECE  79                 	db	121	;'y'
  1554  007ECF  20                 	db	32
  1555  007ED0  73                 	db	115	;'s'
  1556  007ED1  65                 	db	101	;'e'
  1557  007ED2  6E                 	db	110	;'n'
  1558  007ED3  74                 	db	116	;'t'
  1559  007ED4  20                 	db	32
  1560  007ED5  74                 	db	116	;'t'
  1561  007ED6  6F                 	db	111	;'o'
  1562  007ED7  20                 	db	32
  1563  007ED8  00                 	db	0
  1564  007ED9                     STR_5:
  1565  007ED9  5B                 	db	91	;'['
  1566  007EDA  53                 	db	83	;'S'
  1567  007EDB  79                 	db	121	;'y'
  1568  007EDC  6D                 	db	109	;'m'
  1569  007EDD  62                 	db	98	;'b'
  1570  007EDE  6F                 	db	111	;'o'
  1571  007EDF  6C                 	db	108	;'l'
  1572  007EE0  20                 	db	32
  1573  007EE1  45                 	db	69	;'E'
  1574  007EE2  72                 	db	114	;'r'
  1575  007EE3  72                 	db	114	;'r'
  1576  007EE4  6F                 	db	111	;'o'
  1577  007EE5  72                 	db	114	;'r'
  1578  007EE6  73                 	db	115	;'s'
  1579  007EE7  5D                 	db	93	;']'
  1580  007EE8  00                 	db	0
  1581  007EE9                     STR_76:
  1582  007EE9  5B                 	db	91	;'['
  1583  007EEA  49                 	db	73	;'I'
  1584  007EEB  73                 	db	115	;'s'
  1585  007EEC  47                 	db	71	;'G'
  1586  007EED  72                 	db	114	;'r'
  1587  007EEE  61                 	db	97	;'a'
  1588  007EEF  74                 	db	116	;'t'
  1589  007EF0  75                 	db	117	;'u'
  1590  007EF1  69                 	db	105	;'i'
  1591  007EF2  74                 	db	116	;'t'
  1592  007EF3  6F                 	db	111	;'o'
  1593  007EF4  75                 	db	117	;'u'
  1594  007EF5  73                 	db	115	;'s'
  1595  007EF6  5D                 	db	93	;']'
  1596  007EF7  00                 	db	0
  1597  007EF8                     STR_55:
  1598  007EF8  20                 	db	32
  1599  007EF9  49                 	db	73	;'I'
  1600  007EFA  50                 	db	80	;'P'
  1601  007EFB  76                 	db	118	;'v'
  1602  007EFC  34                 	db	52	;'4'
  1603  007EFD  20                 	db	32
  1604  007EFE  4D                 	db	77	;'M'
  1605  007EFF  4F                 	db	79	;'O'
  1606  007F00  44                 	db	68	;'D'
  1607  007F01  55                 	db	85	;'U'
  1608  007F02  4C                 	db	76	;'L'
  1609  007F03  45                 	db	69	;'E'
  1610  007F04  3A                 	db	58	;':'
  1611  007F05  20                 	db	32
  1612  007F06  00                 	db	0
  1613  007F07                     STR_39:
  1614  007F07  4D                 	db	77	;'M'
  1615  007F08  79                 	db	121	;'y'
  1616  007F09  20                 	db	32
  1617  007F0A  41                 	db	65	;'A'
  1618  007F0B  64                 	db	100	;'d'
  1619  007F0C  64                 	db	100	;'d'
  1620  007F0D  72                 	db	114	;'r'
  1621  007F0E  65                 	db	101	;'e'
  1622  007F0F  73                 	db	115	;'s'
  1623  007F10  73                 	db	115	;'s'
  1624  007F11  20                 	db	32
  1625  007F12  69                 	db	105	;'i'
  1626  007F13  73                 	db	115	;'s'
  1627  007F14  20                 	db	32
  1628  007F15  00                 	db	0
  1629  007F16                     STR_54:
  1630  007F16  20                 	db	32
  1631  007F17  41                 	db	65	;'A'
  1632  007F18  52                 	db	82	;'R'
  1633  007F19  50                 	db	80	;'P'
  1634  007F1A  20                 	db	32
  1635  007F1B  4D                 	db	77	;'M'
  1636  007F1C  4F                 	db	79	;'O'
  1637  007F1D  44                 	db	68	;'D'
  1638  007F1E  55                 	db	85	;'U'
  1639  007F1F  4C                 	db	76	;'L'
  1640  007F20  45                 	db	69	;'E'
  1641  007F21  3A                 	db	58	;':'
  1642  007F22  20                 	db	32
  1643  007F23  00                 	db	0
  1644  007F24                     STR_44:
  1645  007F24  4C                 	db	76	;'L'
  1646  007F25  69                 	db	105	;'i'
  1647  007F26  6E                 	db	110	;'n'
  1648  007F27  6B                 	db	107	;'k'
  1649  007F28  20                 	db	32
  1650  007F29  6C                 	db	108	;'l'
  1651  007F2A  6F                 	db	111	;'o'
  1652  007F2B  73                 	db	115	;'s'
  1653  007F2C  74                 	db	116	;'t'
  1654  007F2D  2E                 	db	46
  1655  007F2E  0A                 	db	10
  1656  007F2F  0D                 	db	13
  1657  007F30  00                 	db	0
  1658  007F31                     STR_81:
  1659  007F31  20                 	db	32
  1660  007F32  28                 	db	40
  1661  007F33  72                 	db	114	;'r'
  1662  007F34  65                 	db	101	;'e'
  1663  007F35  70                 	db	112	;'p'
  1664  007F36  6C                 	db	108	;'l'
  1665  007F37  79                 	db	121	;'y'
  1666  007F38  20                 	db	32
  1667  007F39  74                 	db	116	;'t'
  1668  007F3A  6F                 	db	111	;'o'
  1669  007F3B  20                 	db	32
  1670  007F3C  00                 	db	0
  1671  007F3D                     STR_35:
  1672  007F3D  20                 	db	32
  1673  007F3E  64                 	db	100	;'d'
  1674  007F3F  65                 	db	101	;'e'
  1675  007F40  74                 	db	116	;'t'
  1676  007F41  65                 	db	101	;'e'
  1677  007F42  63                 	db	99	;'c'
  1678  007F43  74                 	db	116	;'t'
  1679  007F44  65                 	db	101	;'e'
  1680  007F45  64                 	db	100	;'d'
  1681  007F46  2E                 	db	46
  1682  007F47  20                 	db	32
  1683  007F48  00                 	db	0
  1684  007F49                     STR_31:
  1685  007F49  4D                 	db	77	;'M'
  1686  007F4A  61                 	db	97	;'a'
  1687  007F4B  72                 	db	114	;'r'
  1688  007F4C  20                 	db	32
  1689  007F4D  33                 	db	51	;'3'
  1690  007F4E  31                 	db	49	;'1'
  1691  007F4F  20                 	db	32
  1692  007F50  32                 	db	50	;'2'
  1693  007F51  30                 	db	48	;'0'
  1694  007F52  31                 	db	49	;'1'
  1695  007F53  39                 	db	57	;'9'
  1696  007F54  00                 	db	0
  1697  007F55                     STR_3:
  1698  007F55  5B                 	db	91	;'['
  1699  007F56  42                 	db	66	;'B'
  1700  007F57  72                 	db	114	;'r'
  1701  007F58  6F                 	db	111	;'o'
  1702  007F59  61                 	db	97	;'a'
  1703  007F5A  64                 	db	100	;'d'
  1704  007F5B  63                 	db	99	;'c'
  1705  007F5C  61                 	db	97	;'a'
  1706  007F5D  73                 	db	115	;'s'
  1707  007F5E  74                 	db	116	;'t'
  1708  007F5F  5D                 	db	93	;']'
  1709  007F60  00                 	db	0
  1710  007F61                     STR_101:
  1711  007F61  5B                 	db	91	;'['
  1712  007F62  45                 	db	69	;'E'
  1713  007F63  78                 	db	120	;'x'
  1714  007F64  70                 	db	112	;'p'
  1715  007F65  65                 	db	101	;'e'
  1716  007F66  63                 	db	99	;'c'
  1717  007F67  74                 	db	116	;'t'
  1718  007F68  65                 	db	101	;'e'
  1719  007F69  64                 	db	100	;'d'
  1720  007F6A  20                 	db	32
  1721  007F6B  00                 	db	0
  1722  007F6C                     STR_75:
  1723  007F6C  5B                 	db	91	;'['
  1724  007F6D  49                 	db	73	;'I'
  1725  007F6E  73                 	db	115	;'s'
  1726  007F6F  50                 	db	80	;'P'
  1727  007F70  72                 	db	114	;'r'
  1728  007F71  6F                 	db	111	;'o'
  1729  007F72  62                 	db	98	;'b'
  1730  007F73  65                 	db	101	;'e'
  1731  007F74  5D                 	db	93	;']'
  1732  007F75  00                 	db	0
  1733  007F76                     STR_4:
  1734  007F76  5B                 	db	91	;'['
  1735  007F77  55                 	db	85	;'U'
  1736  007F78  6E                 	db	110	;'n'
  1737  007F79  69                 	db	105	;'i'
  1738  007F7A  63                 	db	99	;'c'
  1739  007F7B  61                 	db	97	;'a'
  1740  007F7C  73                 	db	115	;'s'
  1741  007F7D  74                 	db	116	;'t'
  1742  007F7E  5D                 	db	93	;']'
  1743  007F7F  00                 	db	0
  1744  007F80                     STR_96:
  1745  007F80  5B                 	db	91	;'['
  1746  007F81  49                 	db	73	;'I'
  1747  007F82  50                 	db	80	;'P'
  1748  007F83  76                 	db	118	;'v'
  1749  007F84  34                 	db	52	;'4'
  1750  007F85  5D                 	db	93	;']'
  1751  007F86  3A                 	db	58	;':'
  1752  007F87  20                 	db	32
  1753  007F88  00                 	db	0
  1754  007F89                     STR_60:
  1755  007F89  20                 	db	32
  1756  007F8A  28                 	db	40
  1757  007F8B  43                 	db	67	;'C'
  1758  007F8C  6F                 	db	111	;'o'
  1759  007F8D  64                 	db	100	;'d'
  1760  007F8E  65                 	db	101	;'e'
  1761  007F8F  3A                 	db	58	;':'
  1762  007F90  20                 	db	32
  1763  007F91  00                 	db	0
  1764  007F92                     STR_33:
  1765  007F92  32                 	db	50	;'2'
  1766  007F93  30                 	db	48	;'0'
  1767  007F94  3A                 	db	58	;':'
  1768  007F95  34                 	db	52	;'4'
  1769  007F96  35                 	db	53	;'5'
  1770  007F97  3A                 	db	58	;':'
  1771  007F98  33                 	db	51	;'3'
  1772  007F99  37                 	db	55	;'7'
  1773  007F9A  00                 	db	0
  1774  007F9B                     STR_97:
  1775  007F9B  20                 	db	32
  1776  007F9C  69                 	db	105	;'i'
  1777  007F9D  73                 	db	115	;'s'
  1778  007F9E  20                 	db	32
  1779  007F9F  61                 	db	97	;'a'
  1780  007FA0  74                 	db	116	;'t'
  1781  007FA1  20                 	db	32
  1782  007FA2  00                 	db	0
  1783  007FA3                     STR_50:
  1784  007FA3  5B                 	db	91	;'['
  1785  007FA4  45                 	db	69	;'E'
  1786  007FA5  52                 	db	82	;'R'
  1787  007FA6  52                 	db	82	;'R'
  1788  007FA7  4F                 	db	79	;'O'
  1789  007FA8  52                 	db	82	;'R'
  1790  007FA9  5D                 	db	93	;']'
  1791  007FAA  00                 	db	0
  1792  007FAB                     STR_102:
  1793  007FAB  2C                 	db	44
  1794  007FAC  20                 	db	32
  1795  007FAD  67                 	db	103	;'g'
  1796  007FAE  6F                 	db	111	;'o'
  1797  007FAF  74                 	db	116	;'t'
  1798  007FB0  20                 	db	32
  1799  007FB1  00                 	db	0
  1800  007FB2                     STR_9:
  1801  007FB2  5B                 	db	91	;'['
  1802  007FB3  49                 	db	73	;'I'
  1803  007FB4  50                 	db	80	;'P'
  1804  007FB5  76                 	db	118	;'v'
  1805  007FB6  34                 	db	52	;'4'
  1806  007FB7  5D                 	db	93	;']'
  1807  007FB8  00                 	db	0
  1808  007FB9                     STR_8:
  1809  007FB9  5B                 	db	91	;'['
  1810  007FBA  41                 	db	65	;'A'
  1811  007FBB  52                 	db	82	;'R'
  1812  007FBC  50                 	db	80	;'P'
  1813  007FBD  5D                 	db	93	;']'
  1814  007FBE  00                 	db	0
  1815  007FBF                     STR_72:
  1816  007FBF  5D                 	db	93	;']'
  1817  007FC0  2D                 	db	45
  1818  007FC1  3E                 	db	62	;'>'
  1819  007FC2  5B                 	db	91	;'['
  1820  007FC3  00                 	db	0
  1821  007FC4                     STR_62:
  1822  007FC4  49                 	db	73	;'I'
  1823  007FC5  50                 	db	80	;'P'
  1824  007FC6  76                 	db	118	;'v'
  1825  007FC7  34                 	db	52	;'4'
  1826  007FC8  00                 	db	0
  1827  007FC9                     STR_65:
  1828  007FC9  49                 	db	73	;'I'
  1829  007FCA  43                 	db	67	;'C'
  1830  007FCB  4D                 	db	77	;'M'
  1831  007FCC  50                 	db	80	;'P'
  1832  007FCD  00                 	db	0
  1833  007FCE                     STR_61:
  1834  007FCE  29                 	db	41
  1835  007FCF  2E                 	db	46
  1836  007FD0  0A                 	db	10
  1837  007FD1  0D                 	db	13
  1838  007FD2  00                 	db	0
  1839  007FD3                     STR_42:
  1840  007FD3  20                 	db	32
  1841  007FD4  2D                 	db	45
  1842  007FD5  3E                 	db	62	;'>'
  1843  007FD6  20                 	db	32
  1844  007FD7  00                 	db	0
  1845  007FD8                     STR_14:
  1846  007FD8  5D                 	db	93	;']'
  1847  007FD9  5B                 	db	91	;'['
  1848  007FDA  4C                 	db	76	;'L'
  1849  007FDB  3D                 	db	61	;'='
  1850  007FDC  00                 	db	0
  1851  007FDD                     STR_66:
  1852  007FDD  54                 	db	84	;'T'
  1853  007FDE  43                 	db	67	;'C'
  1854  007FDF  50                 	db	80	;'P'
  1855  007FE0  00                 	db	0
  1856  007FE1                     STR_67:
  1857  007FE1  55                 	db	85	;'U'
  1858  007FE2  44                 	db	68	;'D'
  1859  007FE3  50                 	db	80	;'P'
  1860  007FE4  00                 	db	0
  1861  007FE5                     STR_63:
  1862  007FE5  41                 	db	65	;'A'
  1863  007FE6  52                 	db	82	;'R'
  1864  007FE7  50                 	db	80	;'P'
  1865  007FE8  00                 	db	0
  1866  007FE9                     STR_43:
  1867  007FE9  29                 	db	41
  1868  007FEA  0A                 	db	10
  1869  007FEB  0D                 	db	13
  1870  007FEC  00                 	db	0
  1871  007FED                     STR_93:
  1872  007FED  29                 	db	41
  1873  007FEE  20                 	db	32
  1874  007FEF  00                 	db	0
  1875  007FF0                     STR_15:
  1876  007FF0  5D                 	db	93	;']'
  1877  007FF1  20                 	db	32
  1878  007FF2  00                 	db	0
  1879  007FF3                     STR_12:
  1880  007FF3  2D                 	db	45
  1881  007FF4  3E                 	db	62	;'>'
  1882  007FF5  00                 	db	0
  1883  007FF6                     STR_13:
  1884  007FF6  5D                 	db	93	;']'
  1885  007FF7  5B                 	db	91	;'['
  1886  007FF8  00                 	db	0
  1887  007FF9                     STR_19:
  1888  007FF9  29                 	db	41
  1889  007FFA  5D                 	db	93	;']'
  1890  007FFB  00                 	db	0
  1891  007FFC                     STR_26:
  1892  007FFC  12                 	db	18
  1893  007FFD  00                 	db	0
  1894  0000                     
  1895                           ; #config settings
  1896  007FFE  00                 	db	0	; dummy byte at the end
  1897  0000                     
  1898                           	psect	cinit
  1899  004328                     __pcinit:
  1900                           	opt stack 0
  1901  004328                     start_initialization:
  1902                           	opt stack 0
  1903  004328                     __initialization:
  1904                           	opt stack 0
  1905                           
  1906                           ; Initialize objects allocated to BANK2 (34 bytes)
  1907                           ; load TBLPTR registers with __pidataBANK2
  1908  004328  0EEA               	movlw	low __pidataBANK2
  1909  00432A  6EF6               	movwf	tblptrl,c
  1910  00432C  0E55               	movlw	high __pidataBANK2
  1911  00432E  6EF7               	movwf	tblptrh,c
  1912  004330  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1913  004332  6EF8               	movwf	tblptru,c
  1914  004334  EE02  F0D2         	lfsr	0,__pdataBANK2
  1915  004338  EE10 F022          	lfsr	1,34
  1916  00433C                     copy_data0:
  1917  00433C  0009               	tblrd		*+
  1918  00433E  CFF5 FFEE          	movff	tablat,postinc0
  1919  004342  50E5               	movf	postdec1,w,c
  1920  004344  50E1               	movf	fsr1l,w,c
  1921  004346  E1FA               	bnz	copy_data0
  1922                           
  1923                           ; Initialize objects allocated to BANK1 (12 bytes)
  1924                           ; load TBLPTR registers with __pidataBANK1
  1925  004348  0E70               	movlw	low __pidataBANK1
  1926  00434A  6EF6               	movwf	tblptrl,c
  1927  00434C  0E57               	movlw	high __pidataBANK1
  1928  00434E  6EF7               	movwf	tblptrh,c
  1929  004350  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1930  004352  6EF8               	movwf	tblptru,c
  1931  004354  EE01  F0CB         	lfsr	0,__pdataBANK1
  1932  004358  EE10 F00C          	lfsr	1,12
  1933  00435C                     copy_data1:
  1934  00435C  0009               	tblrd		*+
  1935  00435E  CFF5 FFEE          	movff	tablat,postinc0
  1936  004362  50E5               	movf	postdec1,w,c
  1937  004364  50E1               	movf	fsr1l,w,c
  1938  004366  E1FA               	bnz	copy_data1
  1939                           
  1940                           ; Initialize objects allocated to COMRAM (6 bytes)
  1941                           ; load TBLPTR registers with __pidataCOMRAM
  1942  004368  0EA2               	movlw	low __pidataCOMRAM
  1943  00436A  6EF6               	movwf	tblptrl,c
  1944  00436C  0E57               	movlw	high __pidataCOMRAM
  1945  00436E  6EF7               	movwf	tblptrh,c
  1946  004370  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1947  004372  6EF8               	movwf	tblptru,c
  1948  004374  EE00  F049         	lfsr	0,__pdataCOMRAM
  1949  004378  EE10 F006          	lfsr	1,6
  1950  00437C                     copy_data2:
  1951  00437C  0009               	tblrd		*+
  1952  00437E  CFF5 FFEE          	movff	tablat,postinc0
  1953  004382  50E5               	movf	postdec1,w,c
  1954  004384  50E1               	movf	fsr1l,w,c
  1955  004386  E1FA               	bnz	copy_data2
  1956                           
  1957                           ; Clear objects allocated to BANK3 (162 bytes)
  1958  004388  EE03  F000         	lfsr	0,__pbssBANK3
  1959  00438C  0EA2               	movlw	162
  1960  00438E                     clear_0:
  1961  00438E  6AEE               	clrf	postinc0,c
  1962  004390  06E8               	decf	wreg,f,c
  1963  004392  E1FD               	bnz	clear_0
  1964                           
  1965                           ; Clear objects allocated to BANK2 (210 bytes)
  1966  004394  EE02  F000         	lfsr	0,__pbssBANK2
  1967  004398  0ED2               	movlw	210
  1968  00439A                     clear_1:
  1969  00439A  6AEE               	clrf	postinc0,c
  1970  00439C  06E8               	decf	wreg,f,c
  1971  00439E  E1FD               	bnz	clear_1
  1972                           
  1973                           ; Clear objects allocated to BANK1 (55 bytes)
  1974  0043A0  EE01  F094         	lfsr	0,__pbssBANK1
  1975  0043A4  0E37               	movlw	55
  1976  0043A6                     clear_2:
  1977  0043A6  6AEE               	clrf	postinc0,c
  1978  0043A8  06E8               	decf	wreg,f,c
  1979  0043AA  E1FD               	bnz	clear_2
  1980                           
  1981                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1982  0043AC  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1983                           
  1984                           ; Clear objects allocated to COMRAM (32 bytes)
  1985  0043AE  EE00  F029         	lfsr	0,__pbssCOMRAM
  1986  0043B2  0E20               	movlw	32
  1987  0043B4                     clear_3:
  1988  0043B4  6AEE               	clrf	postinc0,c
  1989  0043B6  06E8               	decf	wreg,f,c
  1990  0043B8  E1FD               	bnz	clear_3
  1991  0043BA                     end_of_initialization:
  1992                           	opt stack 0
  1993  0043BA                     __end_of__initialization:
  1994                           	opt stack 0
  1995  0043BA  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1996  0043BC  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1997  0043BE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1998  0043C0  6EF8               	movwf	tblptru,c
  1999  0043C2  0100               	movlb	0
  2000  0043C4  EF6D  F005         	goto	_main	;jump to C main() function
  2001                           tblptru	equ	0xFF8
  2002                           tblptrh	equ	0xFF7
  2003                           tblptrl	equ	0xFF6
  2004                           tablat	equ	0xFF5
  2005                           postinc0	equ	0xFEE
  2006                           wreg	equ	0xFE8
  2007                           postdec1	equ	0xFE5
  2008                           fsr1l	equ	0xFE1
  2009                           
  2010                           	psect	bitbssCOMRAM
  2011  000278                     __pbitbssCOMRAM:
  2012                           	opt stack 0
  2013  000278                     _fSrcAddrChanged:
  2014                           	opt stack 0
  2015  000278                     	ds	1
  2016  000279                     	ds	1
  2017                           tblptru	equ	0xFF8
  2018                           tblptrh	equ	0xFF7
  2019                           tblptrl	equ	0xFF6
  2020                           tablat	equ	0xFF5
  2021                           postinc0	equ	0xFEE
  2022                           wreg	equ	0xFE8
  2023                           postdec1	equ	0xFE5
  2024                           fsr1l	equ	0xFE1
  2025                           
  2026                           	psect	bssCOMRAM
  2027  000029                     __pbssCOMRAM:
  2028                           	opt stack 0
  2029  000029                     _time:
  2030                           	opt stack 0
  2031  000029                     	ds	4
  2032  00002D                     buttonHandler@debounceCounter:
  2033                           	opt stack 0
  2034  00002D                     	ds	4
  2035  000031                     _numberToDisplay:
  2036                           	opt stack 0
  2037  000031                     	ds	4
  2038  000035                     ethernet_rxGetNewFrame@counter:
  2039                           	opt stack 0
  2040  000035                     	ds	4
  2041  000039                     sevenSegmentUpdate@digitsToDisplay:
  2042                           	opt stack 0
  2043  000039                     	ds	3
  2044  00003C                     _arpStatus:
  2045                           	opt stack 0
  2046  00003C                     	ds	2
  2047  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  2048                           	opt stack 0
  2049  00003E                     	ds	2
  2050  000040                     ethernetController_softReset@F5988:
  2051                           	opt stack 0
  2052  000040                     	ds	2
  2053  000042                     _nextPacketPointer:
  2054                           	opt stack 0
  2055  000042                     	ds	2
  2056  000044                     	ds	1
  2057  000045                     sevenSegmentUpdate@digitPointer:
  2058                           	opt stack 0
  2059  000045                     	ds	1
  2060  000046                     buttonHandler@newState:
  2061                           	opt stack 0
  2062  000046                     	ds	1
  2063  000047                     buttonHandler@oldState:
  2064                           	opt stack 0
  2065  000047                     	ds	1
  2066  000048                     	ds	1
  2067                           tblptru	equ	0xFF8
  2068                           tblptrh	equ	0xFF7
  2069                           tblptrl	equ	0xFF6
  2070                           tablat	equ	0xFF5
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postdec1	equ	0xFE5
  2074                           fsr1l	equ	0xFE1
  2075                           
  2076                           	psect	dataCOMRAM
  2077  000049                     __pdataCOMRAM:
  2078                           	opt stack 0
  2079  000049                     _randx:
  2080                           	opt stack 0
  2081  000049                     	ds	4
  2082  00004D                     ethernetController_softReset@F5986:
  2083                           	opt stack 0
  2084  00004D                     	ds	2
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1l	equ	0xFE1
  2093                           
  2094                           	psect	bssBANK1
  2095  000194                     __pbssBANK1:
  2096                           	opt stack 0
  2097  000194                     ipv4_sendFrame@oldTime:
  2098                           	opt stack 0
  2099  000194                     	ds	4
  2100  000198                     _ipPreliminarySource:
  2101                           	opt stack 0
  2102  000198                     	ds	4
  2103  00019C                     arp_background@ipPreliminary:
  2104                           	opt stack 0
  2105  00019C                     	ds	4
  2106  0001A0                     arp_gratuitous@timeStart:
  2107                           	opt stack 0
  2108  0001A0                     	ds	4
  2109  0001A4                     _ipSource:
  2110                           	opt stack 0
  2111  0001A4                     	ds	4
  2112  0001A8                     arp_background@state:
  2113                           	opt stack 0
  2114  0001A8                     	ds	1
  2115  0001A9                     arp_gratuitous@state:
  2116                           	opt stack 0
  2117  0001A9                     	ds	1
  2118  0001AA                     arp_gratuitous@announceCounter:
  2119                           	opt stack 0
  2120  0001AA                     	ds	1
  2121  0001AB                     arp_probe@state:
  2122                           	opt stack 0
  2123  0001AB                     	ds	1
  2124  0001AC                     arp_probe@probeCounter:
  2125                           	opt stack 0
  2126  0001AC                     	ds	1
  2127  0001AD                     hexToString@number:
  2128                           	opt stack 0
  2129  0001AD                     	ds	10
  2130  0001B7                     intToString@number:
  2131                           	opt stack 0
  2132  0001B7                     	ds	10
  2133  0001C1                     ethernetController_getRSV@temp:
  2134                           	opt stack 0
  2135  0001C1                     	ds	6
  2136  0001C7                     arp_background@err:
  2137                           	opt stack 0
  2138  0001C7                     	ds	3
  2139  0001CA                     _buttonState:
  2140                           	opt stack 0
  2141  0001CA                     	ds	1
  2142                           tblptru	equ	0xFF8
  2143                           tblptrh	equ	0xFF7
  2144                           tblptrl	equ	0xFF6
  2145                           tablat	equ	0xFF5
  2146                           postinc0	equ	0xFEE
  2147                           wreg	equ	0xFE8
  2148                           postdec1	equ	0xFE5
  2149                           fsr1l	equ	0xFE1
  2150                           
  2151                           	psect	dataBANK1
  2152  0001CB                     __pdataBANK1:
  2153                           	opt stack 0
  2154  0001CB                     _sevenSegCharacters:
  2155                           	opt stack 0
  2156  0001CB                     	ds	12
  2157                           tblptru	equ	0xFF8
  2158                           tblptrh	equ	0xFF7
  2159                           tblptrl	equ	0xFF6
  2160                           tablat	equ	0xFF5
  2161                           postinc0	equ	0xFEE
  2162                           wreg	equ	0xFE8
  2163                           postdec1	equ	0xFE5
  2164                           fsr1l	equ	0xFE1
  2165                           
  2166                           	psect	bssBANK2
  2167  000200                     __pbssBANK2:
  2168                           	opt stack 0
  2169  000200                     _occupiedMemory:
  2170                           	opt stack 0
  2171  000200                     	ds	72
  2172  000248                     printEthernetState@oldState:
  2173                           	opt stack 0
  2174  000248                     	ds	15
  2175  000257                     _stack:
  2176                           	opt stack 0
  2177  000257                     	ds	123
  2178                           tblptru	equ	0xFF8
  2179                           tblptrh	equ	0xFF7
  2180                           tblptrl	equ	0xFF6
  2181                           tablat	equ	0xFF5
  2182                           postinc0	equ	0xFEE
  2183                           wreg	equ	0xFE8
  2184                           postdec1	equ	0xFE5
  2185                           fsr1l	equ	0xFE1
  2186                           
  2187                           	psect	dataBANK2
  2188  0002D2                     __pdataBANK2:
  2189                           	opt stack 0
  2190  0002D2                     macToString@F5946:
  2191                           	opt stack 0
  2192  0002D2                     	ds	18
  2193  0002E4                     ipAdressToString@address:
  2194                           	opt stack 0
  2195  0002E4                     	ds	16
  2196                           tblptru	equ	0xFF8
  2197                           tblptrh	equ	0xFF7
  2198                           tblptrl	equ	0xFF6
  2199                           tablat	equ	0xFF5
  2200                           postinc0	equ	0xFEE
  2201                           wreg	equ	0xFE8
  2202                           postdec1	equ	0xFE5
  2203                           fsr1l	equ	0xFE1
  2204                           
  2205                           	psect	bssBANK3
  2206  000300                     __pbssBANK3:
  2207                           	opt stack 0
  2208  000300                     _arp_table:
  2209                           	opt stack 0
  2210  000300                     	ds	112
  2211  000370                     arpEntryToString@string:
  2212                           	opt stack 0
  2213  000370                     	ds	50
  2214                           tblptru	equ	0xFF8
  2215                           tblptrh	equ	0xFF7
  2216                           tblptrl	equ	0xFF6
  2217                           tablat	equ	0xFF5
  2218                           postinc0	equ	0xFEE
  2219                           wreg	equ	0xFE8
  2220                           postdec1	equ	0xFE5
  2221                           fsr1l	equ	0xFE1
  2222                           
  2223                           	psect	cstackBANK3
  2224  0003A2                     __pcstackBANK3:
  2225                           	opt stack 0
  2226  0003A2                     main@prescaler:
  2227                           	opt stack 0
  2228                           
  2229                           ; 4 bytes @ 0x0
  2230  0003A2                     	ds	4
  2231  0003A6                     main@headerBuf:
  2232                           	opt stack 0
  2233                           
  2234                           ; 32 bytes @ 0x4
  2235  0003A6                     	ds	32
  2236  0003C6                     _main$2400:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x24
  2240  0003C6                     	ds	2
  2241  0003C8                     main@i:
  2242                           	opt stack 0
  2243                           
  2244                           ; 1 bytes @ 0x26
  2245  0003C8                     	ds	1
  2246  0003C9                     main@err:
  2247                           	opt stack 0
  2248                           
  2249                           ; 3 bytes @ 0x27
  2250  0003C9                     	ds	3
  2251  0003CC                     main@ipDst:
  2252                           	opt stack 0
  2253                           
  2254                           ; 4 bytes @ 0x2A
  2255  0003CC                     	ds	4
  2256                           tblptru	equ	0xFF8
  2257                           tblptrh	equ	0xFF7
  2258                           tblptrl	equ	0xFF6
  2259                           tablat	equ	0xFF5
  2260                           postinc0	equ	0xFEE
  2261                           wreg	equ	0xFE8
  2262                           postdec1	equ	0xFE5
  2263                           fsr1l	equ	0xFE1
  2264                           
  2265                           	psect	cstackBANK1
  2266  000100                     __pcstackBANK1:
  2267                           	opt stack 0
  2268  000100                     arp_sendRequest@ipSender:
  2269                           	opt stack 0
  2270  000100                     arp_sendReply@request:
  2271                           	opt stack 0
  2272                           
  2273                           ; 32 bytes @ 0x0
  2274  000100                     	ds	4
  2275  000104                     arp_sendRequest@ipTarget:
  2276                           	opt stack 0
  2277                           
  2278                           ; 4 bytes @ 0x4
  2279  000104                     	ds	4
  2280  000108                     arp_sendRequest@senderMAC:
  2281                           	opt stack 0
  2282                           
  2283                           ; 6 bytes @ 0x8
  2284  000108                     	ds	6
  2285  00010E                     arp_sendRequest@targetMAC:
  2286                           	opt stack 0
  2287                           
  2288                           ; 6 bytes @ 0xE
  2289  00010E                     	ds	6
  2290  000114                     arp_sendRequest@request:
  2291                           	opt stack 0
  2292                           
  2293                           ; 32 bytes @ 0x14
  2294  000114                     	ds	12
  2295  000120                     arp_sendReply@senderMAC:
  2296                           	opt stack 0
  2297                           
  2298                           ; 6 bytes @ 0x20
  2299  000120                     	ds	6
  2300  000126                     arp_sendReply@targetMAC:
  2301                           	opt stack 0
  2302                           
  2303                           ; 6 bytes @ 0x26
  2304  000126                     	ds	6
  2305  00012C                     arp_sendReply@senderIP:
  2306                           	opt stack 0
  2307                           
  2308                           ; 4 bytes @ 0x2C
  2309  00012C                     	ds	4
  2310  000130                     arp_sendReply@targetIP:
  2311                           	opt stack 0
  2312                           
  2313                           ; 4 bytes @ 0x30
  2314  000130                     	ds	4
  2315  000134                     ?_ipv4_sendFrame:
  2316                           	opt stack 0
  2317  000134                     ?_arp_probe:
  2318                           	opt stack 0
  2319  000134                     ?_arp_gratuitous:
  2320                           	opt stack 0
  2321  000134                     arp_sendReply@myIP:
  2322                           	opt stack 0
  2323  000134                     arp_probe@ipTarget:
  2324                           	opt stack 0
  2325  000134                     arp_gratuitous@ip:
  2326                           	opt stack 0
  2327  000134                     ipv4_sendFrame@ipPacket:
  2328                           	opt stack 0
  2329                           
  2330                           ; 66 bytes @ 0x34
  2331  000134                     	ds	4
  2332  000138                     arp_probe@link:
  2333                           	opt stack 0
  2334  000138                     arp_gratuitous@link:
  2335                           	opt stack 0
  2336  000138                     arp_sendReply@reply:
  2337                           	opt stack 0
  2338                           
  2339                           ; 32 bytes @ 0x38
  2340  000138                     	ds	1
  2341  000139                     ??_arp_probe:
  2342  000139                     ??_arp_gratuitous:
  2343                           
  2344                           ; 1 bytes @ 0x39
  2345  000139                     	ds	8
  2346  000141                     arp_probe@index:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x41
  2350  000141                     	ds	1
  2351  000142                     arp_probe@timeStart:
  2352                           	opt stack 0
  2353                           
  2354                           ; 4 bytes @ 0x42
  2355  000142                     	ds	4
  2356  000146                     arp_probe@waitingTime:
  2357                           	opt stack 0
  2358                           
  2359                           ; 4 bytes @ 0x46
  2360  000146                     	ds	4
  2361  00014A                     arp_probe@ipSender:
  2362                           	opt stack 0
  2363                           
  2364                           ; 4 bytes @ 0x4A
  2365  00014A                     	ds	4
  2366  00014E                     arp_probe@err:
  2367                           	opt stack 0
  2368                           
  2369                           ; 3 bytes @ 0x4E
  2370  00014E                     	ds	3
  2371  000151                     ?_arp_background:
  2372                           	opt stack 0
  2373                           
  2374                           ; 3 bytes @ 0x51
  2375  000151                     	ds	3
  2376  000154                     ??_arp_background:
  2377                           
  2378                           ; 1 bytes @ 0x54
  2379  000154                     	ds	2
  2380  000156                     arp_background@link:
  2381                           	opt stack 0
  2382                           
  2383                           ; 1 bytes @ 0x56
  2384  000156                     	ds	1
  2385  000157                     arp_background@errAnnounce:
  2386                           	opt stack 0
  2387                           
  2388                           ; 3 bytes @ 0x57
  2389  000157                     	ds	1
  2390  000158                     arp_handleNewPacket@arp:
  2391                           	opt stack 0
  2392                           
  2393                           ; 32 bytes @ 0x58
  2394  000158                     	ds	2
  2395  00015A                     arp_background@errProbe:
  2396                           	opt stack 0
  2397                           
  2398                           ; 3 bytes @ 0x5A
  2399  00015A                     	ds	28
  2400  000176                     ??_ipv4_sendFrame:
  2401                           
  2402                           ; 1 bytes @ 0x76
  2403  000176                     	ds	2
  2404  000178                     ethernet_rxGetNewFrame@frame:
  2405                           	opt stack 0
  2406                           
  2407                           ; 2 bytes @ 0x78
  2408  000178                     	ds	2
  2409  00017A                     ??_ethernet_rxGetNewFrame:
  2410                           
  2411                           ; 1 bytes @ 0x7A
  2412  00017A                     	ds	8
  2413  000182                     ethernet_rxGetNewFrame@err:
  2414                           	opt stack 0
  2415                           
  2416                           ; 3 bytes @ 0x82
  2417  000182                     	ds	3
  2418  000185                     handleStackBackgroundTasks@stack:
  2419                           	opt stack 0
  2420                           
  2421                           ; 2 bytes @ 0x85
  2422  000185                     	ds	2
  2423  000187                     
  2424                           ; 1 bytes @ 0x87
  2425  000187                     	ds	2
  2426  000189                     handleStackBackgroundTasks@errArp:
  2427                           	opt stack 0
  2428                           
  2429                           ; 3 bytes @ 0x89
  2430  000189                     	ds	3
  2431  00018C                     handleStackBackgroundTasks@intf:
  2432                           	opt stack 0
  2433                           
  2434                           ; 2 bytes @ 0x8C
  2435  00018C                     	ds	2
  2436  00018E                     handleStackBackgroundTasks@errIPv4:
  2437                           	opt stack 0
  2438                           
  2439                           ; 3 bytes @ 0x8E
  2440  00018E                     	ds	3
  2441  000191                     ??_main:
  2442                           
  2443                           ; 1 bytes @ 0x91
  2444  000191                     	ds	3
  2445                           tblptru	equ	0xFF8
  2446                           tblptrh	equ	0xFF7
  2447                           tblptrl	equ	0xFF6
  2448                           tablat	equ	0xFF5
  2449                           postinc0	equ	0xFEE
  2450                           wreg	equ	0xFE8
  2451                           postdec1	equ	0xFE5
  2452                           fsr1l	equ	0xFE1
  2453                           
  2454                           	psect	cstackBANK0
  2455  000060                     __pcstackBANK0:
  2456                           	opt stack 0
  2457  000060                     ?_enc424j600_getNextPacketPointer:
  2458                           	opt stack 0
  2459  000060                     ?_ethernetController_getDeviceName:
  2460                           	opt stack 0
  2461  000060                     ?_etherTypeToString:
  2462                           	opt stack 0
  2463  000060                     ?_ipProtocolToString:
  2464                           	opt stack 0
  2465  000060                     ?___wmul:
  2466                           	opt stack 0
  2467  000060                     ?___lwdiv:
  2468                           	opt stack 0
  2469  000060                     ?_getMillis:
  2470                           	opt stack 0
  2471  000060                     ?_ipv4_getIPSourceAddress:
  2472                           	opt stack 0
  2473  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2474                           	opt stack 0
  2475  000060                     ?___lmul:
  2476                           	opt stack 0
  2477  000060                     ?___lldiv:
  2478                           	opt stack 0
  2479  000060                     ?___llmod:
  2480                           	opt stack 0
  2481  000060                     ?_enc424j600_updateReceiveStatusVector:
  2482                           	opt stack 0
  2483  000060                     ?_arp_getEntryFromTable:
  2484                           	opt stack 0
  2485  000060                     entireMemoryEmpty@i:
  2486                           	opt stack 0
  2487  000060                     entireMemoryFull@i:
  2488                           	opt stack 0
  2489  000060                     memory_txFrameClear@index:
  2490                           	opt stack 0
  2491  000060                     hexToChar@val:
  2492                           	opt stack 0
  2493  000060                     enc424j600_writeSPI@data:
  2494                           	opt stack 0
  2495  000060                     enc424j600_readSPI@data:
  2496                           	opt stack 0
  2497  000060                     enc424j600_setNextPacketPointer@ptr:
  2498                           	opt stack 0
  2499  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2500                           	opt stack 0
  2501  000060                     mac_setToBroadcast@mac:
  2502                           	opt stack 0
  2503  000060                     mac_isAllZero@mac:
  2504                           	opt stack 0
  2505  000060                     mac_cmp@a:
  2506                           	opt stack 0
  2507  000060                     mac_setAllZero@mac:
  2508                           	opt stack 0
  2509  000060                     etherTypeToString@ethertype:
  2510                           	opt stack 0
  2511  000060                     ipv4_calculateHeaderChecksum@header:
  2512                           	opt stack 0
  2513  000060                     ipv4_SrcAddrChanged@err:
  2514                           	opt stack 0
  2515  000060                     ipv4_cmp@a:
  2516                           	opt stack 0
  2517  000060                     ipv4_isAllZero@ip:
  2518                           	opt stack 0
  2519  000060                     ipv4_setToAllZero@ip:
  2520                           	opt stack 0
  2521  000060                     ___wmul@multiplier:
  2522                           	opt stack 0
  2523  000060                     ___lwdiv@dividend:
  2524                           	opt stack 0
  2525  000060                     ipv4_setIPSourceAddress@ip:
  2526                           	opt stack 0
  2527  000060                     ___lmul@multiplier:
  2528                           	opt stack 0
  2529  000060                     ___lldiv@dividend:
  2530                           	opt stack 0
  2531  000060                     ___llmod@dividend:
  2532                           	opt stack 0
  2533  000060                     checkForOverlapSwitched@a:
  2534                           	opt stack 0
  2535  000060                     ipv4_writeHeaderIntoBuffer@header:
  2536                           	opt stack 0
  2537                           
  2538                           ; 23 bytes @ 0x0
  2539  000060                     	ds	1
  2540  000061                     ?_hexToString:
  2541                           	opt stack 0
  2542  000061                     hexToString@val:
  2543                           	opt stack 0
  2544                           
  2545                           ; 4 bytes @ 0x1
  2546  000061                     	ds	1
  2547  000062                     ??_enc424j600_writeSPI:
  2548  000062                     ??_enc424j600_readSPI:
  2549  000062                     ??_etherTypeToString:
  2550  000062                     ??_ipv4_calculateHeaderChecksum:
  2551  000062                     ?_ethernetController_getNextPacketPointer:
  2552                           	opt stack 0
  2553  000062                     mac_setToBroadcast@i:
  2554                           	opt stack 0
  2555  000062                     mac_isAllZero@i:
  2556                           	opt stack 0
  2557  000062                     mac_setAllZero@i:
  2558                           	opt stack 0
  2559  000062                     ipProtocolToString@protocol:
  2560                           	opt stack 0
  2561  000062                     ipv4_isAllZero@i:
  2562                           	opt stack 0
  2563  000062                     ipv4_setToAllZero@i:
  2564                           	opt stack 0
  2565  000062                     mac_cmp@b:
  2566                           	opt stack 0
  2567  000062                     ipv4_cmp@b:
  2568                           	opt stack 0
  2569  000062                     ___wmul@multiplicand:
  2570                           	opt stack 0
  2571  000062                     ___lwdiv@divisor:
  2572                           	opt stack 0
  2573  000062                     ethernetController_getDeviceName@string:
  2574                           	opt stack 0
  2575                           
  2576                           ; 11 bytes @ 0x2
  2577  000062                     	ds	2
  2578  000064                     ___lwdiv@counter:
  2579                           	opt stack 0
  2580  000064                     ___wmul@product:
  2581                           	opt stack 0
  2582  000064                     ___lmul@multiplicand:
  2583                           	opt stack 0
  2584  000064                     ___lldiv@divisor:
  2585                           	opt stack 0
  2586  000064                     ___llmod@divisor:
  2587                           	opt stack 0
  2588                           
  2589                           ; 4 bytes @ 0x4
  2590  000064                     	ds	1
  2591  000065                     ??_enc424j600_updateReceiveStatusVector:
  2592  000065                     ??_hexToString:
  2593  000065                     ___lwdiv@quotient:
  2594                           	opt stack 0
  2595                           
  2596                           ; 2 bytes @ 0x5
  2597  000065                     	ds	1
  2598  000066                     mac_cmp@i:
  2599                           	opt stack 0
  2600  000066                     ipv4_cmp@i:
  2601                           	opt stack 0
  2602  000066                     enc424j600_writeSPI@timeoutCounter:
  2603                           	opt stack 0
  2604  000066                     enc424j600_readSPI@timeoutCounter:
  2605                           	opt stack 0
  2606                           
  2607                           ; 4 bytes @ 0x6
  2608  000066                     	ds	1
  2609  000067                     arp_getEntryFromTable@index:
  2610                           	opt stack 0
  2611  000067                     arp_checkForEntry@ip:
  2612                           	opt stack 0
  2613                           
  2614                           ; 4 bytes @ 0x7
  2615  000067                     	ds	1
  2616  000068                     ___llmod@counter:
  2617                           	opt stack 0
  2618  000068                     ___lmul@product:
  2619                           	opt stack 0
  2620  000068                     ___lldiv@quotient:
  2621                           	opt stack 0
  2622                           
  2623                           ; 4 bytes @ 0x8
  2624  000068                     	ds	1
  2625  000069                     hexToString@pointer:
  2626                           	opt stack 0
  2627  000069                     checkForOverlapSwitched@b:
  2628                           	opt stack 0
  2629                           
  2630                           ; 9 bytes @ 0x9
  2631  000069                     	ds	1
  2632  00006A                     enc424j600_writeSingleByte@opcode:
  2633                           	opt stack 0
  2634  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2635                           	opt stack 0
  2636  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2637                           	opt stack 0
  2638  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2639                           	opt stack 0
  2640  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2641                           	opt stack 0
  2642                           
  2643                           ; 2 bytes @ 0xA
  2644  00006A                     	ds	1
  2645  00006B                     arp_checkForEntry@index:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0xB
  2649  00006B                     	ds	1
  2650  00006C                     ?_rand:
  2651                           	opt stack 0
  2652  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2653                           	opt stack 0
  2654  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2655                           	opt stack 0
  2656  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2657                           	opt stack 0
  2658  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2659                           	opt stack 0
  2660  00006C                     ___lldiv@counter:
  2661                           	opt stack 0
  2662  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2663                           	opt stack 0
  2664                           
  2665                           ; 5 bytes @ 0xC
  2666  00006C                     	ds	1
  2667  00006D                     ??_arp_checkForEntry:
  2668  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2669                           	opt stack 0
  2670  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2671                           	opt stack 0
  2672  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2673                           	opt stack 0
  2674  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2675                           	opt stack 0
  2676  00006D                     ultoa@buf:
  2677                           	opt stack 0
  2678                           
  2679                           ; 2 bytes @ 0xD
  2680  00006D                     	ds	1
  2681  00006E                     ??_enc424j600_clearInterruptFlag:
  2682  00006E                     ?_enc424j600_getInterruptFlags:
  2683                           	opt stack 0
  2684  00006E                     ?___awmod:
  2685                           	opt stack 0
  2686  00006E                     ?___lwmod:
  2687                           	opt stack 0
  2688  00006E                     ?_ethernetController_softReset:
  2689                           	opt stack 0
  2690  00006E                     ?_ethernetController_checkDeviceId:
  2691                           	opt stack 0
  2692  00006E                     ?_ethernetController_getMacAddress:
  2693                           	opt stack 0
  2694  00006E                     ethernetController_setLEDConfig@conf:
  2695                           	opt stack 0
  2696  00006E                     enc424j600_getPacketCount@lowByte:
  2697                           	opt stack 0
  2698  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2699                           	opt stack 0
  2700  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2701                           	opt stack 0
  2702  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2703                           	opt stack 0
  2704  00006E                     enc424j600_readPHYRegister@data:
  2705                           	opt stack 0
  2706  00006E                     enc424j600_setTXLength@len:
  2707                           	opt stack 0
  2708  00006E                     enc424j600_setTXStartAddress@addr:
  2709                           	opt stack 0
  2710  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2711                           	opt stack 0
  2712  00006E                     enc424j600_setRXTailPointer@addr:
  2713                           	opt stack 0
  2714  00006E                     ___awmod@dividend:
  2715                           	opt stack 0
  2716  00006E                     ___lwmod@dividend:
  2717                           	opt stack 0
  2718  00006E                     ipv4_calculateHeaderChecksum@sum:
  2719                           	opt stack 0
  2720                           
  2721                           ; 4 bytes @ 0xE
  2722  00006E                     	ds	1
  2723  00006F                     ??_ethernetController_updateNextPacketPointer:
  2724  00006F                     ?_ethernetController_getEtherTypeField:
  2725                           	opt stack 0
  2726  00006F                     ?_ethernetController_getSourceMACAddress:
  2727                           	opt stack 0
  2728  00006F                     ethernetController_setLEDConfig@LED:
  2729                           	opt stack 0
  2730  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2731                           	opt stack 0
  2732  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2733                           	opt stack 0
  2734  00006F                     ultoa@val:
  2735                           	opt stack 0
  2736  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2737                           	opt stack 0
  2738  00006F                     ethernetController_streamToTransmitBuffer@field:
  2739                           	opt stack 0
  2740  00006F                     ethernetController_getSourceMACAddress@field:
  2741                           	opt stack 0
  2742  00006F                     ethernetController_getEtherTypeField@field:
  2743                           	opt stack 0
  2744                           
  2745                           ; 9 bytes @ 0xF
  2746  00006F                     	ds	1
  2747  000070                     ??_enc424j600_getInterruptFlags:
  2748  000070                     ??_enc424j600_readPHYRegister:
  2749  000070                     ethernetController_setLEDConfig@data:
  2750                           	opt stack 0
  2751  000070                     enc424j600_setTXLength@lowByte:
  2752                           	opt stack 0
  2753  000070                     enc424j600_setTXStartAddress@lowByte:
  2754                           	opt stack 0
  2755  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2756                           	opt stack 0
  2757  000070                     enc424j600_setRXTailPointer@lowByte:
  2758                           	opt stack 0
  2759  000070                     enc424j600_clearInterruptFlag@flag:
  2760                           	opt stack 0
  2761  000070                     ___awmod@divisor:
  2762                           	opt stack 0
  2763  000070                     ___lwmod@divisor:
  2764                           	opt stack 0
  2765                           
  2766                           ; 2 bytes @ 0x10
  2767  000070                     	ds	1
  2768  000071                     ??_ethernetController_softReset:
  2769  000071                     ?_ethernetController_getRSV:
  2770                           	opt stack 0
  2771  000071                     ethernetController_checkDeviceId@data:
  2772                           	opt stack 0
  2773  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2774                           	opt stack 0
  2775  000071                     enc424j600_setTXLength@highByte:
  2776                           	opt stack 0
  2777  000071                     enc424j600_setTXStartAddress@highByte:
  2778                           	opt stack 0
  2779  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2780                           	opt stack 0
  2781  000071                     enc424j600_setRXTailPointer@highByte:
  2782                           	opt stack 0
  2783  000071                     enc424j600_clearInterruptFlag@temp:
  2784                           	opt stack 0
  2785  000071                     ethernetController_getRSV@address:
  2786                           	opt stack 0
  2787  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2788                           	opt stack 0
  2789                           
  2790                           ; 9 bytes @ 0x11
  2791  000071                     	ds	1
  2792  000072                     ?_ethernetController_dropPacket:
  2793                           	opt stack 0
  2794  000072                     ethernetController_softReset@comFailCount:
  2795                           	opt stack 0
  2796  000072                     ethernetController_clearInterruptFlag@flag:
  2797                           	opt stack 0
  2798  000072                     ethernetController_streamFromRXBuffer@opcode:
  2799                           	opt stack 0
  2800  000072                     ___awmod@counter:
  2801                           	opt stack 0
  2802  000072                     ___lwmod@counter:
  2803                           	opt stack 0
  2804  000072                     ethernetController_checkDeviceId@err:
  2805                           	opt stack 0
  2806  000072                     ethernetController_sendPacket@field:
  2807                           	opt stack 0
  2808  000072                     checkForOverlap@a:
  2809                           	opt stack 0
  2810                           
  2811                           ; 9 bytes @ 0x12
  2812  000072                     	ds	1
  2813  000073                     ?_ipAdressToString:
  2814                           	opt stack 0
  2815  000073                     ethernetController_streamFromRXBuffer@temp:
  2816                           	opt stack 0
  2817  000073                     ___awmod@sign:
  2818                           	opt stack 0
  2819  000073                     ethernetController_softReset@dataToSend:
  2820                           	opt stack 0
  2821  000073                     ultoa@base:
  2822                           	opt stack 0
  2823  000073                     ipAdressToString@ip:
  2824                           	opt stack 0
  2825                           
  2826                           ; 4 bytes @ 0x13
  2827  000073                     	ds	1
  2828  000074                     ?_ipv4_parseHeader:
  2829                           	opt stack 0
  2830  000074                     ?_arp_parseFromRXBuffer:
  2831                           	opt stack 0
  2832  000074                     arp_parseFromRXBuffer@frame:
  2833                           	opt stack 0
  2834  000074                     ipv4_parseHeader@field:
  2835                           	opt stack 0
  2836  000074                     ethernetController_getMacAddress@mac:
  2837                           	opt stack 0
  2838                           
  2839                           ; 6 bytes @ 0x14
  2840  000074                     	ds	1
  2841  000075                     arp_checkForEntry@i:
  2842                           	opt stack 0
  2843  000075                     ethernetController_softReset@receivedData:
  2844                           	opt stack 0
  2845  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2846                           	opt stack 0
  2847  000075                     ultoa@v:
  2848                           	opt stack 0
  2849  000075                     ethernetController_writeDestinationMACAddress@field:
  2850                           	opt stack 0
  2851                           
  2852                           ; 9 bytes @ 0x15
  2853  000075                     	ds	1
  2854  000076                     ethernetController_getRSV@opcode:
  2855                           	opt stack 0
  2856  000076                     enc424j600_readPHYRegister@addr:
  2857                           	opt stack 0
  2858  000076                     enc424j600_getInterruptFlags@low:
  2859                           	opt stack 0
  2860                           
  2861                           ; 1 bytes @ 0x16
  2862  000076                     	ds	1
  2863  000077                     ??_ipAdressToString:
  2864  000077                     ethernetController_getRSV@i:
  2865                           	opt stack 0
  2866  000077                     ethernetController_updateNextPacketPointer@opcode:
  2867                           	opt stack 0
  2868  000077                     enc424j600_readPHYRegister@PHYaddress:
  2869                           	opt stack 0
  2870  000077                     enc424j600_getInterruptFlags@high:
  2871                           	opt stack 0
  2872  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2873                           	opt stack 0
  2874  000077                     ethernetController_softReset@err:
  2875                           	opt stack 0
  2876                           
  2877                           ; 3 bytes @ 0x17
  2878  000077                     	ds	1
  2879  000078                     ??_ethernetController_streamToTransmitBuffer:
  2880  000078                     ??_ethernetController_getEtherTypeField:
  2881  000078                     ?_ethernetController_pollInterruptFlags:
  2882                           	opt stack 0
  2883  000078                     ethernetController_getSourceMACAddress@opcode:
  2884                           	opt stack 0
  2885  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2886                           	opt stack 0
  2887  000078                     enc424j600_readPHYRegister@unusedBits:
  2888                           	opt stack 0
  2889                           
  2890                           ; 1 bytes @ 0x18
  2891  000078                     	ds	1
  2892  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2893  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2894                           	opt stack 0
  2895  000079                     ultoa@c:
  2896                           	opt stack 0
  2897  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2898                           	opt stack 0
  2899  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2900                           	opt stack 0
  2901                           
  2902                           ; 6 bytes @ 0x19
  2903  000079                     	ds	1
  2904  00007A                     ??_ethernetController_pollInterruptFlags:
  2905  00007A                     ?_macToString:
  2906                           	opt stack 0
  2907  00007A                     ?_ethernetController_init:
  2908                           	opt stack 0
  2909  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2910                           	opt stack 0
  2911  00007A                     ltoa@buf:
  2912                           	opt stack 0
  2913  00007A                     srand@x:
  2914                           	opt stack 0
  2915  00007A                     macToString@addr:
  2916                           	opt stack 0
  2917                           
  2918                           ; 6 bytes @ 0x1A
  2919  00007A                     	ds	1
  2920  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2921                           	opt stack 0
  2922  00007B                     ipAdressToString@ones:
  2923                           	opt stack 0
  2924  00007B                     checkForOverlap@b:
  2925                           	opt stack 0
  2926                           
  2927                           ; 9 bytes @ 0x1B
  2928  00007B                     	ds	1
  2929  00007C                     ethernetController_streamToTransmitBuffer@data:
  2930                           	opt stack 0
  2931  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2932                           	opt stack 0
  2933  00007C                     ethernetController_getEtherTypeField@ethertype:
  2934                           	opt stack 0
  2935  00007C                     ltoa@val:
  2936                           	opt stack 0
  2937                           
  2938                           ; 4 bytes @ 0x1C
  2939  00007C                     	ds	1
  2940  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2941                           	opt stack 0
  2942  00007D                     enc424j600_readPHYRegister@lowByte:
  2943                           	opt stack 0
  2944  00007D                     ethernetController_init@err:
  2945                           	opt stack 0
  2946                           
  2947                           ; 3 bytes @ 0x1D
  2948  00007D                     	ds	1
  2949  00007E                     ethernetController_getEtherTypeField@opcode:
  2950                           	opt stack 0
  2951  00007E                     enc424j600_readPHYRegister@highByte:
  2952                           	opt stack 0
  2953  00007E                     ethernetController_pollInterruptFlags@flags:
  2954                           	opt stack 0
  2955  00007E                     ethernetController_writeDestinationMACAddress@data:
  2956                           	opt stack 0
  2957  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2958                           	opt stack 0
  2959                           
  2960                           ; 66 bytes @ 0x1E
  2961  00007E                     	ds	1
  2962  00007F                     ethernetController_getSourceMACAddress@temp:
  2963                           	opt stack 0
  2964  00007F                     ethernetController_getEtherTypeField@lowByte:
  2965                           	opt stack 0
  2966  00007F                     enc424j600_readPHYRegister@temp:
  2967                           	opt stack 0
  2968  00007F                     ipAdressToString@tens:
  2969                           	opt stack 0
  2970                           
  2971                           ; 4 bytes @ 0x1F
  2972  00007F                     	ds	1
  2973  000080                     ??_macToString:
  2974  000080                     ethernetController_getSourceMACAddress@i:
  2975                           	opt stack 0
  2976  000080                     ethernetController_getEtherTypeField@highByte:
  2977                           	opt stack 0
  2978  000080                     ethernetController_pollInterruptFlags@reg:
  2979                           	opt stack 0
  2980  000080                     ethernetController_updateLinkStatus@state:
  2981                           	opt stack 0
  2982  000080                     ltoa@base:
  2983                           	opt stack 0
  2984                           
  2985                           ; 2 bytes @ 0x20
  2986  000080                     	ds	1
  2987  000081                     macToString@address:
  2988                           	opt stack 0
  2989                           
  2990                           ; 18 bytes @ 0x21
  2991  000081                     	ds	1
  2992  000082                     ethernetController_updateLinkStatus@temp:
  2993                           	opt stack 0
  2994  000082                     ltoa@cp:
  2995                           	opt stack 0
  2996                           
  2997                           ; 2 bytes @ 0x22
  2998  000082                     	ds	1
  2999  000083                     ethernetController_updateLinkStatus@temp16:
  3000                           	opt stack 0
  3001  000083                     ipAdressToString@hundreds:
  3002                           	opt stack 0
  3003                           
  3004                           ; 4 bytes @ 0x23
  3005  000083                     	ds	1
  3006  000084                     ?_intToString:
  3007                           	opt stack 0
  3008  000084                     ?_memory_txFrameRequest:
  3009                           	opt stack 0
  3010  000084                     ethernetController_writeDestinationMACAddress@opcode:
  3011                           	opt stack 0
  3012  000084                     memory_txFrameRequest@length:
  3013                           	opt stack 0
  3014  000084                     intToString@val:
  3015                           	opt stack 0
  3016                           
  3017                           ; 4 bytes @ 0x24
  3018  000084                     	ds	1
  3019  000085                     ethernetController_writeDestinationMACAddress@i_638:
  3020                           	opt stack 0
  3021                           
  3022                           ; 1 bytes @ 0x25
  3023  000085                     	ds	1
  3024  000086                     ethernetController_writeDestinationMACAddress@i:
  3025                           	opt stack 0
  3026                           
  3027                           ; 1 bytes @ 0x26
  3028  000086                     	ds	1
  3029  000087                     ipAdressToString@pointer:
  3030                           	opt stack 0
  3031                           
  3032                           ; 1 bytes @ 0x27
  3033  000087                     	ds	1
  3034  000088                     ipAdressToString@i:
  3035                           	opt stack 0
  3036                           
  3037                           ; 1 bytes @ 0x28
  3038  000088                     	ds	3
  3039  00008B                     ??_ipv4_parseHeader:
  3040                           
  3041                           ; 1 bytes @ 0x2B
  3042  00008B                     	ds	1
  3043  00008C                     ipv4_parseHeader@i:
  3044                           	opt stack 0
  3045                           
  3046                           ; 1 bytes @ 0x2C
  3047  00008C                     	ds	1
  3048  00008D                     ??_memory_txFrameRequest:
  3049  00008D                     ipv4_parseHeader@i_3657:
  3050                           	opt stack 0
  3051                           
  3052                           ; 1 bytes @ 0x2D
  3053  00008D                     	ds	1
  3054  00008E                     ipv4_parseHeader@temp:
  3055                           	opt stack 0
  3056                           
  3057                           ; 1 bytes @ 0x2E
  3058  00008E                     	ds	1
  3059  00008F                     ipv4_parseHeader@ip:
  3060                           	opt stack 0
  3061                           
  3062                           ; 23 bytes @ 0x2F
  3063  00008F                     	ds	4
  3064  000093                     macToString@firstDigit:
  3065                           	opt stack 0
  3066  000093                     _memory_txFrameRequest$1174:
  3067                           	opt stack 0
  3068                           
  3069                           ; 2 bytes @ 0x33
  3070  000093                     	ds	1
  3071  000094                     ??_arp_parseFromRXBuffer:
  3072  000094                     macToString@secondDigit:
  3073                           	opt stack 0
  3074                           
  3075                           ; 1 bytes @ 0x34
  3076  000094                     	ds	1
  3077  000095                     memory_txFrameRequest@fNoOverlapMarker:
  3078                           	opt stack 0
  3079  000095                     macToString@i:
  3080                           	opt stack 0
  3081                           
  3082                           ; 2 bytes @ 0x35
  3083  000095                     	ds	1
  3084  000096                     memory_txFrameRequest@i:
  3085                           	opt stack 0
  3086                           
  3087                           ; 1 bytes @ 0x36
  3088  000096                     	ds	1
  3089  000097                     memory_txFrameRequest@i_1178:
  3090                           	opt stack 0
  3091  000097                     macToString@j:
  3092                           	opt stack 0
  3093  000097                     arp_parseFromRXBuffer@i:
  3094                           	opt stack 0
  3095                           
  3096                           ; 1 bytes @ 0x37
  3097  000097                     	ds	1
  3098  000098                     arp_parseFromRXBuffer@i_3025:
  3099                           	opt stack 0
  3100  000098                     UARTTransmitText@str:
  3101                           	opt stack 0
  3102  000098                     memory_txFrameRequest@field:
  3103                           	opt stack 0
  3104                           
  3105                           ; 9 bytes @ 0x38
  3106  000098                     	ds	1
  3107  000099                     arp_parseFromRXBuffer@i_3026:
  3108                           	opt stack 0
  3109                           
  3110                           ; 1 bytes @ 0x39
  3111  000099                     	ds	1
  3112  00009A                     ?_ipv4_background:
  3113                           	opt stack 0
  3114  00009A                     arp_parseFromRXBuffer@i_3027:
  3115                           	opt stack 0
  3116  00009A                     ipv4_checkHeaderChecksum@header:
  3117                           	opt stack 0
  3118  00009A                     printErrorMessage@err:
  3119                           	opt stack 0
  3120  00009A                     UARTTransmitInt@val:
  3121                           	opt stack 0
  3122  00009A                     arp_setNewEntry@mac:
  3123                           	opt stack 0
  3124  00009A                     printEthernetState@state:
  3125                           	opt stack 0
  3126                           
  3127                           ; 15 bytes @ 0x3A
  3128  00009A                     	ds	1
  3129  00009B                     arp_parseFromRXBuffer@offset:
  3130                           	opt stack 0
  3131                           
  3132                           ; 2 bytes @ 0x3B
  3133  00009B                     	ds	1
  3134  00009C                     ??_ipv4_checkHeaderChecksum:
  3135                           
  3136                           ; 1 bytes @ 0x3C
  3137  00009C                     	ds	1
  3138  00009D                     ??_ipv4_background:
  3139  00009D                     ??_printErrorMessage:
  3140  00009D                     arp_parseFromRXBuffer@arp:
  3141                           	opt stack 0
  3142                           
  3143                           ; 32 bytes @ 0x3D
  3144  00009D                     	ds	1
  3145  00009E                     ipv4_checkHeaderChecksum@testHeader:
  3146                           	opt stack 0
  3147                           
  3148                           ; 23 bytes @ 0x3E
  3149  00009E                     	ds	1
  3150  00009F                     ipv4_background@err:
  3151                           	opt stack 0
  3152                           
  3153                           ; 3 bytes @ 0x3F
  3154  00009F                     	ds	1
  3155  0000A0                     arp_setNewEntry@ip:
  3156                           	opt stack 0
  3157                           
  3158                           ; 4 bytes @ 0x40
  3159  0000A0                     	ds	1
  3160  0000A1                     memory_txFrameRequest@freeIndex:
  3161                           	opt stack 0
  3162                           
  3163                           ; 1 bytes @ 0x41
  3164  0000A1                     	ds	1
  3165  0000A2                     ethernet_txFrameRequest@frame:
  3166                           	opt stack 0
  3167                           
  3168                           ; 2 bytes @ 0x42
  3169  0000A2                     	ds	2
  3170  0000A4                     ethernet_txFrameRequest@err:
  3171                           	opt stack 0
  3172  0000A4                     arp_setNewEntry@timestamp:
  3173                           	opt stack 0
  3174                           
  3175                           ; 4 bytes @ 0x44
  3176  0000A4                     	ds	3
  3177  0000A7                     ipv4_txFrameRequest@packet:
  3178                           	opt stack 0
  3179  0000A7                     arp_send@arp:
  3180                           	opt stack 0
  3181                           
  3182                           ; 32 bytes @ 0x47
  3183  0000A7                     	ds	1
  3184  0000A8                     
  3185                           ; 1 bytes @ 0x48
  3186  0000A8                     	ds	1
  3187  0000A9                     ??_ipv4_txFrameRequest:
  3188                           
  3189                           ; 1 bytes @ 0x49
  3190  0000A9                     	ds	3
  3191  0000AC                     arp_setNewEntry@maxSeconds:
  3192                           	opt stack 0
  3193                           
  3194                           ; 4 bytes @ 0x4C
  3195  0000AC                     	ds	4
  3196  0000B0                     arp_setNewEntry@oldestIndex:
  3197                           	opt stack 0
  3198                           
  3199                           ; 1 bytes @ 0x50
  3200  0000B0                     	ds	1
  3201  0000B1                     arp_setNewEntry@i:
  3202                           	opt stack 0
  3203                           
  3204                           ; 1 bytes @ 0x51
  3205  0000B1                     	ds	1
  3206  0000B2                     arp_init@mac:
  3207                           	opt stack 0
  3208                           
  3209                           ; 6 bytes @ 0x52
  3210  0000B2                     	ds	3
  3211  0000B5                     ipv4_handleNewPacket@frame:
  3212                           	opt stack 0
  3213                           
  3214                           ; 2 bytes @ 0x55
  3215  0000B5                     	ds	2
  3216  0000B7                     ??_ipv4_handleNewPacket:
  3217                           
  3218                           ; 1 bytes @ 0x57
  3219  0000B7                     	ds	1
  3220  0000B8                     arp_init@ip:
  3221                           	opt stack 0
  3222                           
  3223                           ; 4 bytes @ 0x58
  3224  0000B8                     	ds	1
  3225  0000B9                     ipv4_handleNewPacket@headerField:
  3226                           	opt stack 0
  3227                           
  3228                           ; 9 bytes @ 0x59
  3229  0000B9                     	ds	3
  3230  0000BC                     arp_init@i:
  3231                           	opt stack 0
  3232                           
  3233                           ; 1 bytes @ 0x5C
  3234  0000BC                     	ds	1
  3235  0000BD                     
  3236                           ; 1 bytes @ 0x5D
  3237  0000BD                     	ds	3
  3238  0000C0                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  3239                           	opt stack 0
  3240                           
  3241                           ; 2 bytes @ 0x60
  3242  0000C0                     	ds	2
  3243  0000C2                     ipv4_streamToTransmissionBuffer@data:
  3244                           	opt stack 0
  3245  0000C2                     ipv4_handleNewPacket@ip:
  3246                           	opt stack 0
  3247                           
  3248                           ; 23 bytes @ 0x62
  3249  0000C2                     	ds	5
  3250  0000C7                     arp_send@destination:
  3251                           	opt stack 0
  3252                           
  3253                           ; 6 bytes @ 0x67
  3254  0000C7                     	ds	6
  3255  0000CD                     arp_send@i:
  3256                           	opt stack 0
  3257                           
  3258                           ; 1 bytes @ 0x6D
  3259  0000CD                     	ds	1
  3260  0000CE                     arp_send@i_3100:
  3261                           	opt stack 0
  3262                           
  3263                           ; 1 bytes @ 0x6E
  3264  0000CE                     	ds	1
  3265  0000CF                     arp_send@i_3101:
  3266                           	opt stack 0
  3267                           
  3268                           ; 1 bytes @ 0x6F
  3269  0000CF                     	ds	1
  3270  0000D0                     arp_send@i_3102:
  3271                           	opt stack 0
  3272                           
  3273                           ; 1 bytes @ 0x70
  3274  0000D0                     	ds	1
  3275  0000D1                     arp_send@ethFrame:
  3276                           	opt stack 0
  3277                           
  3278                           ; 34 bytes @ 0x71
  3279  0000D1                     	ds	34
  3280  0000F3                     arp_send@field:
  3281                           	opt stack 0
  3282                           
  3283                           ; 9 bytes @ 0x93
  3284  0000F3                     	ds	9
  3285  0000FC                     arp_gratuitous@index:
  3286                           	opt stack 0
  3287  0000FC                     ipv4_sendFrame@index:
  3288                           	opt stack 0
  3289  0000FC                     arp_handleNewPacket@frame:
  3290                           	opt stack 0
  3291                           
  3292                           ; 2 bytes @ 0x9C
  3293  0000FC                     	ds	1
  3294  0000FD                     arp_gratuitous@err:
  3295                           	opt stack 0
  3296  0000FD                     ipv4_sendFrame@err:
  3297                           	opt stack 0
  3298                           
  3299                           ; 3 bytes @ 0x9D
  3300  0000FD                     	ds	1
  3301  0000FE                     
  3302                           ; 1 bytes @ 0x9E
  3303  0000FE                     	ds	2
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           postinc0	equ	0xFEE
  3309                           wreg	equ	0xFE8
  3310                           postdec1	equ	0xFE5
  3311                           fsr1l	equ	0xFE1
  3312                           
  3313                           	psect	cstackCOMRAM
  3314  000001                     __pcstackCOMRAM:
  3315                           	opt stack 0
  3316  000001                     ?i2___lwdiv:
  3317                           	opt stack 0
  3318  000001                     buttonHandler@state:
  3319                           	opt stack 0
  3320  000001                     i2___lwdiv@dividend:
  3321                           	opt stack 0
  3322                           
  3323                           ; 2 bytes @ 0x0
  3324  000001                     	ds	2
  3325  000003                     i2___lwdiv@divisor:
  3326                           	opt stack 0
  3327  000003                     buttonHandler@resetValue:
  3328                           	opt stack 0
  3329                           
  3330                           ; 4 bytes @ 0x2
  3331  000003                     	ds	2
  3332  000005                     i2___lwdiv@quotient:
  3333                           	opt stack 0
  3334                           
  3335                           ; 2 bytes @ 0x4
  3336  000005                     	ds	2
  3337  000007                     i2___lwdiv@counter:
  3338                           	opt stack 0
  3339  000007                     buttonHandler@debounceValue:
  3340                           	opt stack 0
  3341                           
  3342                           ; 4 bytes @ 0x6
  3343  000007                     	ds	1
  3344  000008                     parseNumber@numberToDisplay:
  3345                           	opt stack 0
  3346                           
  3347                           ; 2 bytes @ 0x7
  3348  000008                     	ds	2
  3349  00000A                     parseNumber@digit:
  3350                           	opt stack 0
  3351                           
  3352                           ; 1 bytes @ 0x9
  3353  00000A                     	ds	1
  3354  00000B                     ??_parseNumber:
  3355                           
  3356                           ; 1 bytes @ 0xA
  3357  00000B                     	ds	1
  3358  00000C                     parseNumber@ones:
  3359                           	opt stack 0
  3360                           
  3361                           ; 1 bytes @ 0xB
  3362  00000C                     	ds	1
  3363  00000D                     parseNumber@tens:
  3364                           	opt stack 0
  3365                           
  3366                           ; 1 bytes @ 0xC
  3367  00000D                     	ds	1
  3368  00000E                     parseNumber@hundreds:
  3369                           	opt stack 0
  3370                           
  3371                           ; 1 bytes @ 0xD
  3372  00000E                     	ds	1
  3373  00000F                     sevenSegmentUpdate@numberToDisplay:
  3374                           	opt stack 0
  3375                           
  3376                           ; 2 bytes @ 0xE
  3377  00000F                     	ds	2
  3378  000011                     ??_sevenSegmentUpdate:
  3379                           
  3380                           ; 1 bytes @ 0x10
  3381  000011                     	ds	2
  3382  000013                     _sevenSegmentUpdate$2491:
  3383                           	opt stack 0
  3384                           
  3385                           ; 2 bytes @ 0x12
  3386  000013                     	ds	2
  3387  000015                     sevenSegmentUpdate@i:
  3388                           	opt stack 0
  3389                           
  3390                           ; 1 bytes @ 0x14
  3391  000015                     	ds	1
  3392  000016                     ??_ISR:
  3393                           
  3394                           ; 1 bytes @ 0x15
  3395  000016                     	ds	19
  3396                           tblptru	equ	0xFF8
  3397                           tblptrh	equ	0xFF7
  3398                           tblptrl	equ	0xFF6
  3399                           tablat	equ	0xFF5
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           
  3405 ;;
  3406 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  3407 ;;
  3408 ;; *************** function _main *****************
  3409 ;; Defined at:
  3410 ;;		line 33 in file "src/system/main.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;		None
  3413 ;; Auto vars:     Size  Location     Type
  3414 ;;  i               1   38[BANK3 ] unsigned char 
  3415 ;;  headerBuf      32    4[BANK3 ] unsigned char [32]
  3416 ;;  ipDst           4   42[BANK3 ] struct ipv4_address
  3417 ;;  prescaler       4    0[BANK3 ] unsigned long 
  3418 ;;  err             3   39[BANK3 ] struct error
  3419 ;;  oldState        1    0        unsigned char 
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0      46       0       0       0       0
  3431 ;;      Temps:          0       0       3       0       0       0       0       0       0
  3432 ;;      Totals:         0       0       3       0      46       0       0       0       0
  3433 ;;Total ram usage:       49 bytes
  3434 ;; Hardware stack levels required when called:   14
  3435 ;; This function calls:
  3436 ;;		_UARTInit
  3437 ;;		_UARTTransmitText
  3438 ;;		___awmod
  3439 ;;		_ethernetController_checkDeviceId
  3440 ;;		_ethernetController_getDeviceName
  3441 ;;		_ethernetController_getMacAddress
  3442 ;;		_ethernetController_init
  3443 ;;		_ethernetController_setLEDConfig
  3444 ;;		_handleStackBackgroundTasks
  3445 ;;		_intToString
  3446 ;;		_ipAdressToString
  3447 ;;		_ipv4_calculateHeaderChecksum
  3448 ;;		_ipv4_getIPSourceAddress
  3449 ;;		_ipv4_streamToTransmissionBuffer
  3450 ;;		_ipv4_txFrameRequest
  3451 ;;		_ipv4_writeHeaderIntoBuffer
  3452 ;;		_macToString
  3453 ;;		_printErrorMessage
  3454 ;;		_printEthernetState
  3455 ;;		_rand
  3456 ;;		_sevenSegmentInit
  3457 ;;		_srand
  3458 ;;		_stack_init
  3459 ;; This function is called by:
  3460 ;;		Startup code after reset
  3461 ;; This function uses a non-reentrant model
  3462 ;;
  3463                           
  3464                           	psect	text0
  3465  000ADA                     __ptext0:
  3466                           	opt stack 0
  3467  000ADA                     _main:
  3468                           	opt stack 17
  3469                           
  3470                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3471                           
  3472                           ;incstack = 0
  3473  000ADA  0EFC               	movlw	-4
  3474  000ADC  16D3               	andwf	4051,f,c	;volatile
  3475                           
  3476                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3477  000ADE  50D3               	movf	4051,w,c	;volatile
  3478  000AE0  0B8F               	andlw	-113
  3479  000AE2  0960               	iorlw	96
  3480  000AE4  6ED3               	movwf	4051,c	;volatile
  3481                           
  3482                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3483  000AE6  88D2               	bsf	4050,4,c	;volatile
  3484                           
  3485                           ;main.c: 41: INTCONbits.GIE = 0;
  3486  000AE8  9EF2               	bcf	intcon,7,c	;volatile
  3487                           
  3488                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3489  000AEA  8AF2               	bsf	intcon,5,c	;volatile
  3490                           
  3491                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3492  000AEC  88F0               	bsf	intcon3,4,c	;volatile
  3493                           
  3494                           ;main.c: 44: RCIP = 0;
  3495  000AEE  9A9F               	bcf	3999,5,c	;volatile
  3496                           
  3497                           ;main.c: 45: RCIE = 1;
  3498  000AF0  8A9D               	bsf	3997,5,c	;volatile
  3499                           
  3500                           ;main.c: 46: INTCONbits.PEIE = 1;
  3501  000AF2  8CF2               	bsf	intcon,6,c	;volatile
  3502                           
  3503                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3504  000AF4  8ED5               	bsf	4053,7,c	;volatile
  3505                           
  3506                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3507  000AF6  8CD5               	bsf	4053,6,c	;volatile
  3508                           
  3509                           ;main.c: 52: T0CONbits.T0CS = 0;
  3510  000AF8  9AD5               	bcf	4053,5,c	;volatile
  3511                           
  3512                           ;main.c: 53: T0CONbits.PSA = 0;
  3513  000AFA  96D5               	bcf	4053,3,c	;volatile
  3514                           
  3515                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3516  000AFC  50D5               	movf	4053,w,c	;volatile
  3517  000AFE  0BF8               	andlw	-8
  3518  000B00  0905               	iorlw	5
  3519  000B02  6ED5               	movwf	4053,c	;volatile
  3520                           
  3521                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3522  000B04  80CD               	bsf	4045,0,c	;volatile
  3523                           
  3524                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3525  000B06  50BD               	movf	4029,w,c	;volatile
  3526  000B08  0BF0               	andlw	-16
  3527  000B0A  090B               	iorlw	11
  3528  000B0C  6EBD               	movwf	4029,c	;volatile
  3529                           
  3530                           ;main.c: 60: CCPR1 = 8000;
  3531  000B0E  0E1F               	movlw	31
  3532  000B10  6EBF               	movwf	4031,c	;volatile
  3533  000B12  0E40               	movlw	64
  3534  000B14  6EBE               	movwf	4030,c	;volatile
  3535                           
  3536                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3537  000B16  849D               	bsf	3997,2,c	;volatile
  3538                           
  3539                           ;main.c: 62: INTCONbits.PEIE = 1;
  3540  000B18  8CF2               	bsf	intcon,6,c	;volatile
  3541                           
  3542                           ;main.c: 64: TRISBbits.RB6 = 0;
  3543  000B1A  9C93               	bcf	3987,6,c	;volatile
  3544                           
  3545                           ;main.c: 67: UARTInit();
  3546  000B1C  EC94  F02B         	call	_UARTInit	;wreg free
  3547                           
  3548                           ;main.c: 68: sevenSegmentInit();
  3549  000B20  EC36  F02B         	call	_sevenSegmentInit	;wreg free
  3550                           
  3551                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3552  000B24  0E68               	movlw	104
  3553  000B26  0101               	movlb	1	; () banked
  3554  000B28  6F91               	movwf	??_main& (0+255),b
  3555  000B2A  0EE4               	movlw	228
  3556  000B2C                     u12817:
  3557  000B2C  2EE8               	decfsz	wreg,f,c
  3558  000B2E  D7FE               	bra	u12817
  3559  000B30  2F91               	decfsz	??_main& (0+255),f,b
  3560  000B32  D7FC               	bra	u12817
  3561  000B34  F000               	nop	
  3562                           
  3563                           ;main.c: 70: UARTTransmitText("\x12");
  3564  000B36  0EFC               	movlw	low STR_26
  3565  000B38  0100               	movlb	0	; () banked
  3566  000B3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3567  000B3C  0E7F               	movlw	high STR_26
  3568  000B3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3569  000B40  EC06  F027         	call	_UARTTransmitText	;wreg free
  3570                           
  3571                           ;main.c: 71: if (!RCONbits.TO) {
  3572  000B44  B6D0               	btfsc	4048,3,c	;volatile
  3573  000B46  D015               	goto	l644
  3574                           
  3575                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3576  000B48  0E85               	movlw	low STR_27
  3577  000B4A  0100               	movlb	0	; () banked
  3578  000B4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3579  000B4E  0E7A               	movlw	high STR_27
  3580  000B50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3581  000B52  EC06  F027         	call	_UARTTransmitText	;wreg free
  3582                           
  3583                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3584  000B56  0EB8               	movlw	low STR_28
  3585  000B58  0100               	movlb	0	; () banked
  3586  000B5A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3587  000B5C  0E7A               	movlw	high STR_28
  3588  000B5E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3589  000B60  EC06  F027         	call	_UARTTransmitText	;wreg free
  3590                           
  3591                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3592  000B64  0E85               	movlw	low STR_27
  3593  000B66  0100               	movlb	0	; () banked
  3594  000B68  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3595  000B6A  0E7A               	movlw	high STR_27
  3596  000B6C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3597  000B6E  EC06  F027         	call	_UARTTransmitText	;wreg free
  3598  000B72                     l644:
  3599                           
  3600                           ;main.c: 75: }
  3601                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3602  000B72  0EF2               	movlw	low STR_30
  3603  000B74  0100               	movlb	0	; () banked
  3604  000B76  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3605  000B78  0E7D               	movlw	high STR_30
  3606  000B7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3607  000B7C  EC06  F027         	call	_UARTTransmitText	;wreg free
  3608                           
  3609                           ;main.c: 77: UARTTransmitText("Mar 31 2019");
  3610  000B80  0E49               	movlw	low STR_31
  3611  000B82  0100               	movlb	0	; () banked
  3612  000B84  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3613  000B86  0E7F               	movlw	high STR_31
  3614  000B88  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3615  000B8A  EC06  F027         	call	_UARTTransmitText	;wreg free
  3616                           
  3617                           ;main.c: 78: UARTTransmitText(" ");
  3618  000B8E  0EEE               	movlw	low (STR_93+1)
  3619  000B90  0100               	movlb	0	; () banked
  3620  000B92  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3621  000B94  0E7F               	movlw	high (STR_93+1)
  3622  000B96  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3623  000B98  EC06  F027         	call	_UARTTransmitText	;wreg free
  3624                           
  3625                           ;main.c: 79: UARTTransmitText("20:45:37");
  3626  000B9C  0E92               	movlw	low STR_33
  3627  000B9E  0100               	movlb	0	; () banked
  3628  000BA0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3629  000BA2  0E7F               	movlw	high STR_33
  3630  000BA4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3631  000BA6  EC06  F027         	call	_UARTTransmitText	;wreg free
  3632                           
  3633                           ;main.c: 80: UARTTransmitText(".\n\r");
  3634  000BAA  0ECF               	movlw	low (STR_61+1)
  3635  000BAC  0100               	movlb	0	; () banked
  3636  000BAE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3637  000BB0  0E7F               	movlw	high (STR_61+1)
  3638  000BB2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3639  000BB4  EC06  F027         	call	_UARTTransmitText	;wreg free
  3640                           
  3641                           ;main.c: 81: error_t err;
  3642                           ;main.c: 82: err = ethernetController_init();
  3643  000BB8  ECE4  F021         	call	_ethernetController_init	;wreg free
  3644  000BBC  C07A  F3C9         	movff	?_ethernetController_init,main@err
  3645  000BC0  C07B  F3CA         	movff	?_ethernetController_init+1,main@err+1
  3646  000BC4  C07C  F3CB         	movff	?_ethernetController_init+2,main@err+2
  3647                           
  3648                           ;main.c: 83: if (err.code != (uint16_t)0)
  3649  000BC8  0103               	movlb	3	; () banked
  3650  000BCA  51CA               	movf	(main@err+1)& (0+255),w,b
  3651  000BCC  11CB               	iorwf	(main@err+2)& (0+255),w,b
  3652  000BCE  B4D8               	btfsc	status,2,c
  3653  000BD0  D008               	goto	l645
  3654                           
  3655                           ; BSR set to: 3
  3656                           ;main.c: 84: printErrorMessage(err);
  3657  000BD2  C3C9  F09A         	movff	main@err,printErrorMessage@err
  3658  000BD6  C3CA  F09B         	movff	main@err+1,printErrorMessage@err+1
  3659  000BDA  C3CB  F09C         	movff	main@err+2,printErrorMessage@err+2
  3660  000BDE  EC4E  F01B         	call	_printErrorMessage	;wreg free
  3661  000BE2                     l645:
  3662                           
  3663                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3664  000BE2  ECD5  F027         	call	_ethernetController_checkDeviceId	;wreg free
  3665  000BE6  C06E  F3C9         	movff	?_ethernetController_checkDeviceId,main@err
  3666  000BEA  C06F  F3CA         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3667  000BEE  C070  F3CB         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3668                           
  3669                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3670  000BF2  0103               	movlb	3	; () banked
  3671  000BF4  51CA               	movf	(main@err+1)& (0+255),w,b
  3672  000BF6  11CB               	iorwf	(main@err+2)& (0+255),w,b
  3673  000BF8  A4D8               	btfss	status,2,c
  3674  000BFA  D00F               	goto	l646
  3675                           
  3676                           ; BSR set to: 3
  3677                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3678  000BFC  ECE3  F02A         	call	_ethernetController_getDeviceName	;wreg free
  3679  000C00  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3680  000C04  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3681  000C08  EC06  F027         	call	_UARTTransmitText	;wreg free
  3682                           
  3683                           ;main.c: 88: UARTTransmitText(" detected. ");
  3684  000C0C  0E3D               	movlw	low STR_35
  3685  000C0E  0100               	movlb	0	; () banked
  3686  000C10  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3687  000C12  0E7F               	movlw	high STR_35
  3688  000C14  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3689  000C16  EC06  F027         	call	_UARTTransmitText	;wreg free
  3690  000C1A                     l646:
  3691                           
  3692                           ;main.c: 89: }
  3693                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3694  000C1A  0E0A               	movlw	low STR_36
  3695  000C1C  0100               	movlb	0	; () banked
  3696  000C1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3697  000C20  0E7E               	movlw	high STR_36
  3698  000C22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3699  000C24  EC06  F027         	call	_UARTTransmitText	;wreg free
  3700                           
  3701                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3702  000C28  EC02  F025         	call	_ethernetController_getMacAddress	;wreg free
  3703  000C2C  CFE9 FFD9          	movff	fsr0l,fsr2l
  3704  000C30  CFEA FFDA          	movff	fsr0h,fsr2h
  3705  000C34  EE00  F07A         	lfsr	0,macToString@addr
  3706  000C38  0E05               	movlw	5
  3707  000C3A                     u12681:
  3708  000C3A  CFDB FFEB          	movff	plusw2,plusw0
  3709  000C3E  06E8               	decf	wreg,f,c
  3710  000C40  E2FC               	bc	u12681
  3711  000C42  EC8A  F01D         	call	_macToString	;wreg free
  3712  000C46  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3713  000C4A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3714  000C4E  EC06  F027         	call	_UARTTransmitText	;wreg free
  3715                           
  3716                           ;main.c: 92: UARTTransmitText(".\n\r");
  3717  000C52  0ECF               	movlw	low (STR_61+1)
  3718  000C54  0100               	movlb	0	; () banked
  3719  000C56  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3720  000C58  0E7F               	movlw	high (STR_61+1)
  3721  000C5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3722  000C5C  EC06  F027         	call	_UARTTransmitText	;wreg free
  3723                           
  3724                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3725  000C60  0E85               	movlw	low STR_27
  3726  000C62  0100               	movlb	0	; () banked
  3727  000C64  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3728  000C66  0E7A               	movlw	high STR_27
  3729  000C68  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3730  000C6A  EC06  F027         	call	_UARTTransmitText	;wreg free
  3731                           
  3732                           ;main.c: 95: stack_init();
  3733  000C6E  ECBE  F02B         	call	_stack_init	;wreg free
  3734                           
  3735                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3736  000C72  0E00               	movlw	0
  3737  000C74  0100               	movlb	0	; () banked
  3738  000C76  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3739  000C78  0E00               	movlw	0
  3740  000C7A  EC83  F022         	call	_ethernetController_setLEDConfig
  3741                           
  3742                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3743  000C7E  0E00               	movlw	0
  3744  000C80  0100               	movlb	0	; () banked
  3745  000C82  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3746  000C84  0E00               	movlw	0
  3747  000C86  EC83  F022         	call	_ethernetController_setLEDConfig
  3748                           
  3749                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3750  000C8A  0E15               	movlw	21
  3751  000C8C  0101               	movlb	1	; () banked
  3752  000C8E  6F92               	movwf	(??_main+1)& (0+255),b
  3753  000C90  0E4B               	movlw	75
  3754  000C92  6F91               	movwf	??_main& (0+255),b
  3755  000C94  0EBE               	movlw	190
  3756  000C96                     u12827:
  3757  000C96  2EE8               	decfsz	wreg,f,c
  3758  000C98  D7FE               	bra	u12827
  3759  000C9A  2F91               	decfsz	??_main& (0+255),f,b
  3760  000C9C  D7FC               	bra	u12827
  3761  000C9E  2F92               	decfsz	(??_main+1)& (0+255),f,b
  3762  000CA0  D7FA               	bra	u12827
  3763  000CA2  F000               	nop	
  3764                           
  3765                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3766  000CA4  0E01               	movlw	1
  3767  000CA6  0100               	movlb	0	; () banked
  3768  000CA8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3769  000CAA  0E00               	movlw	0
  3770  000CAC  EC83  F022         	call	_ethernetController_setLEDConfig
  3771                           
  3772                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3773  000CB0  0E01               	movlw	1
  3774  000CB2  0100               	movlb	0	; () banked
  3775  000CB4  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3776  000CB6  0E00               	movlw	0
  3777  000CB8  EC83  F022         	call	_ethernetController_setLEDConfig
  3778                           
  3779                           ;main.c: 105: uint32_t prescaler = 0;
  3780  000CBC  0E00               	movlw	0
  3781  000CBE  0103               	movlb	3	; () banked
  3782  000CC0  6FA2               	movwf	main@prescaler& (0+255),b
  3783  000CC2  0E00               	movlw	0
  3784  000CC4  6FA3               	movwf	(main@prescaler+1)& (0+255),b
  3785  000CC6  0E00               	movlw	0
  3786  000CC8  6FA4               	movwf	(main@prescaler+2)& (0+255),b
  3787  000CCA  0E00               	movlw	0
  3788  000CCC  6FA5               	movwf	(main@prescaler+3)& (0+255),b
  3789                           
  3790                           ; BSR set to: 3
  3791                           ;main.c: 107: ANSELB &= ~(1<<5);
  3792  000CCE  010F               	movlb	15	; () banked
  3793  000CD0  9B5C               	bcf	92,5,b	;volatile
  3794                           
  3795                           ; BSR set to: 15
  3796                           ;main.c: 108: TRISB |= (1<<5);
  3797  000CD2  8A93               	bsf	3987,5,c	;volatile
  3798                           
  3799                           ; BSR set to: 15
  3800                           ;main.c: 110: uint8_t oldState;
  3801                           ;main.c: 112: stack.source.address[0] = 192;
  3802  000CD4  0EC0               	movlw	192
  3803  000CD6  0102               	movlb	2	; () banked
  3804  000CD8  6FCE               	movwf	(_stack+119)& (0+255),b
  3805                           
  3806                           ; BSR set to: 2
  3807                           ;main.c: 113: stack.source.address[1] = 168;
  3808  000CDA  0EA8               	movlw	168
  3809  000CDC  6FCF               	movwf	(_stack+120)& (0+255),b
  3810                           
  3811                           ; BSR set to: 2
  3812                           ;main.c: 114: stack.source.address[2] = 0;
  3813  000CDE  0E00               	movlw	0
  3814  000CE0  6FD0               	movwf	(_stack+121)& (0+255),b
  3815                           
  3816                           ; BSR set to: 2
  3817                           ;main.c: 115: stack.source.address[3] = 1;
  3818  000CE2  0E01               	movlw	1
  3819  000CE4  6FD1               	movwf	(_stack+122)& (0+255),b
  3820                           
  3821                           ; BSR set to: 2
  3822                           ;main.c: 117: ipv4_address_t ipDst;
  3823                           ;main.c: 118: ipDst.address[0] = 192;
  3824  000CE6  0EC0               	movlw	192
  3825  000CE8  0103               	movlb	3	; () banked
  3826  000CEA  6FCC               	movwf	main@ipDst& (0+255),b
  3827                           
  3828                           ; BSR set to: 3
  3829                           ;main.c: 119: ipDst.address[1] = 168;
  3830  000CEC  0EA8               	movlw	168
  3831  000CEE  6FCD               	movwf	(main@ipDst+1)& (0+255),b
  3832                           
  3833                           ; BSR set to: 3
  3834                           ;main.c: 120: ipDst.address[2] = 0;
  3835  000CF0  0E00               	movlw	0
  3836  000CF2  6FCE               	movwf	(main@ipDst+2)& (0+255),b
  3837                           
  3838                           ; BSR set to: 3
  3839                           ;main.c: 121: ipDst.address[3] = 10;
  3840  000CF4  0E0A               	movlw	10
  3841  000CF6  6FCF               	movwf	(main@ipDst+3)& (0+255),b
  3842                           
  3843                           ; BSR set to: 3
  3844                           ;main.c: 124: INTCONbits.GIE = 1;
  3845  000CF8  8EF2               	bsf	intcon,7,c	;volatile
  3846                           
  3847                           ; BSR set to: 3
  3848                           ;main.c: 125: INTCONbits.PEIE = 1;
  3849  000CFA  8CF2               	bsf	intcon,6,c	;volatile
  3850                           
  3851                           ; BSR set to: 3
  3852                           ;main.c: 127: srand(ethernetController_getMacAddress().address[5]);
  3853  000CFC  EC02  F025         	call	_ethernetController_getMacAddress	;wreg free
  3854  000D00  0E05               	movlw	5
  3855  000D02  26E9               	addwf	fsr0l,f,c
  3856  000D04  0E00               	movlw	0
  3857  000D06  22EA               	addwfc	fsr0h,f,c
  3858  000D08  50EF               	movf	indf0,w,c
  3859  000D0A  0101               	movlb	1	; () banked
  3860  000D0C  6F91               	movwf	??_main& (0+255),b
  3861  000D0E  5191               	movf	??_main& (0+255),w,b
  3862  000D10  0100               	movlb	0	; () banked
  3863  000D12  6F7A               	movwf	srand@x& (0+255),b
  3864  000D14  6B7B               	clrf	(srand@x+1)& (0+255),b
  3865  000D16  EC9C  F02B         	call	_srand	;wreg free
  3866                           
  3867                           ;main.c: 128: UARTTransmitText(intToString(rand() % 100));
  3868  000D1A  ECDB  F026         	call	_rand	;wreg free
  3869  000D1E  C06C  F06E         	movff	?_rand,___awmod@dividend
  3870  000D22  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  3871  000D26  0E00               	movlw	0
  3872  000D28  0100               	movlb	0	; () banked
  3873  000D2A  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  3874  000D2C  0E64               	movlw	100
  3875  000D2E  6F70               	movwf	___awmod@divisor& (0+255),b
  3876  000D30  EC3C  F025         	call	___awmod	;wreg free
  3877  000D34  0100               	movlb	0	; () banked
  3878  000D36  C06E  F084         	movff	?___awmod,intToString@val
  3879  000D3A  C06F  F085         	movff	?___awmod+1,intToString@val+1
  3880  000D3E  0E00               	movlw	0
  3881  000D40  BF85               	btfsc	(intToString@val+1)& (0+255),7,b
  3882  000D42  0EFF               	movlw	-1
  3883  000D44  6F86               	movwf	(intToString@val+2)& (0+255),b
  3884  000D46  6F87               	movwf	(intToString@val+3)& (0+255),b
  3885  000D48  EC94  F029         	call	_intToString	;wreg free
  3886  000D4C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  3887  000D50  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3888  000D54  EC06  F027         	call	_UARTTransmitText	;wreg free
  3889  000D58                     l647:
  3890  000D58  0004               	clrwdt		;# 
  3891                           
  3892                           ;main.c: 133: handleStackBackgroundTasks(&stack);
  3893  000D5A  0E57               	movlw	low _stack
  3894  000D5C  0101               	movlb	1	; () banked
  3895  000D5E  6F85               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3896  000D60  0E02               	movlw	high _stack
  3897  000D62  6F86               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3898  000D64  ECB3  F011         	call	_handleStackBackgroundTasks	;wreg free
  3899                           
  3900                           ;main.c: 135: printEthernetState(stack.ethernet);
  3901  000D68  EE22  F079         	lfsr	2,_stack+34
  3902  000D6C  EE00  F09A         	lfsr	0,printEthernetState@state
  3903  000D70  0E0E               	movlw	14
  3904  000D72                     u12691:
  3905  000D72  CFDB FFEB          	movff	plusw2,plusw0
  3906  000D76  06E8               	decf	wreg,f,c
  3907  000D78  E2FC               	bc	u12691
  3908  000D7A  EC43  F021         	call	_printEthernetState	;wreg free
  3909                           
  3910                           ;main.c: 137: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : stack.source.a
      +                          ddress[3];
  3911  000D7E  0102               	movlb	2	; () banked
  3912  000D80  5179               	movf	(_stack+34)& (0+255),w,b
  3913  000D82  B4D8               	btfsc	status,2,c
  3914  000D84  D005               	goto	l649
  3915                           
  3916                           ; BSR set to: 2
  3917  000D86  C2D1  F3C6         	movff	_stack+122,_main$2400
  3918  000D8A  0103               	movlb	3	; () banked
  3919  000D8C  6BC7               	clrf	(_main$2400+1)& (0+255),b
  3920  000D8E  D005               	goto	l651
  3921  000D90                     l649:
  3922                           
  3923                           ; BSR set to: 3
  3924  000D90  0E03               	movlw	3
  3925  000D92  0103               	movlb	3	; () banked
  3926  000D94  6FC7               	movwf	(_main$2400+1)& (0+255),b
  3927  000D96  0EE8               	movlw	232
  3928  000D98  6FC6               	movwf	_main$2400& (0+255),b
  3929  000D9A                     l651:
  3930                           
  3931                           ; BSR set to: 3
  3932                           
  3933                           ; BSR set to: 3
  3934  000D9A  C3C6  F031         	movff	_main$2400,_numberToDisplay	;volatile
  3935  000D9E  C3C7  F032         	movff	_main$2400+1,_numberToDisplay+1	;volatile
  3936  000DA2  0E00               	movlw	0
  3937  000DA4  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3938  000DA6  0EFF               	movlw	-1
  3939  000DA8  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3940  000DAA  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3941                           
  3942                           ; BSR set to: 3
  3943                           ;main.c: 139: if (buttonState) {
  3944  000DAC  0101               	movlb	1	; () banked
  3945  000DAE  51CA               	movf	_buttonState& (0+255),w,b	;volatile
  3946  000DB0  B4D8               	btfsc	status,2,c
  3947  000DB2  D7D2               	goto	l647
  3948                           
  3949                           ; BSR set to: 1
  3950                           ;main.c: 140: buttonState = 0;
  3951  000DB4  0E00               	movlw	0
  3952  000DB6  6FCA               	movwf	_buttonState& (0+255),b	;volatile
  3953                           
  3954                           ; BSR set to: 1
  3955                           ;main.c: 142: UARTTransmitText("My Address is ");
  3956  000DB8  0E07               	movlw	low STR_39
  3957  000DBA  0100               	movlb	0	; () banked
  3958  000DBC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3959  000DBE  0E7F               	movlw	high STR_39
  3960  000DC0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3961  000DC2  EC06  F027         	call	_UARTTransmitText	;wreg free
  3962                           
  3963                           ;main.c: 143: UARTTransmitText(ipAdressToString(ipv4_getIPSourceAddress()));
  3964  000DC6  EC70  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3965  000DCA  C060  F073         	movff	?_ipv4_getIPSourceAddress,ipAdressToString@ip
  3966  000DCE  C061  F074         	movff	?_ipv4_getIPSourceAddress+1,ipAdressToString@ip+1
  3967  000DD2  C062  F075         	movff	?_ipv4_getIPSourceAddress+2,ipAdressToString@ip+2
  3968  000DD6  C063  F076         	movff	?_ipv4_getIPSourceAddress+3,ipAdressToString@ip+3
  3969  000DDA  ECC6  F013         	call	_ipAdressToString	;wreg free
  3970  000DDE  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  3971  000DE2  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  3972  000DE6  EC06  F027         	call	_UARTTransmitText	;wreg free
  3973                           
  3974                           ;main.c: 144: UARTTransmitText("\n\r");
  3975  000DEA  0ED4               	movlw	low (STR_23+35)
  3976  000DEC  0100               	movlb	0	; () banked
  3977  000DEE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3978  000DF0  0E7B               	movlw	high (STR_23+35)
  3979  000DF2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3980  000DF4  EC06  F027         	call	_UARTTransmitText	;wreg free
  3981                           
  3982                           ;main.c: 147: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3983  000DF8  0102               	movlb	2	; () banked
  3984  000DFA  0579               	decf	(_stack+34)& (0+255),w,b
  3985  000DFC  A4D8               	btfss	status,2,c
  3986  000DFE  D7AC               	goto	l647
  3987                           
  3988                           ; BSR set to: 2
  3989                           ;main.c: 150: uint8_t headerBuf[32];
  3990                           ;main.c: 151: stack.pendingPacketToSend.ipv4Header.destination = ipDst;
  3991  000E00  C3CC  F29F         	movff	main@ipDst,_stack+72
  3992  000E04  C3CD  F2A0         	movff	main@ipDst+1,_stack+73
  3993  000E08  C3CE  F2A1         	movff	main@ipDst+2,_stack+74
  3994  000E0C  C3CF  F2A2         	movff	main@ipDst+3,_stack+75
  3995                           
  3996                           ; BSR set to: 2
  3997                           ;main.c: 152: stack.pendingPacketToSend.ipv4Header.source = ipv4_getIPSourceAddress();
  3998  000E10  EC70  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
  3999  000E14  C060  F29B         	movff	?_ipv4_getIPSourceAddress,_stack+68
  4000  000E18  C061  F29C         	movff	?_ipv4_getIPSourceAddress+1,_stack+69
  4001  000E1C  C062  F29D         	movff	?_ipv4_getIPSourceAddress+2,_stack+70
  4002  000E20  C063  F29E         	movff	?_ipv4_getIPSourceAddress+3,_stack+71
  4003                           
  4004                           ;main.c: 153: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  4005  000E24  0E00               	movlw	0
  4006  000E26  0102               	movlb	2	; () banked
  4007  000E28  6F91               	movwf	(_stack+58)& (0+255),b
  4008  000E2A  0E78               	movlw	120
  4009  000E2C  6F90               	movwf	(_stack+57)& (0+255),b
  4010                           
  4011                           ; BSR set to: 2
  4012                           ;main.c: 154: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  4013  000E2E  6997               	setf	(_stack+64)& (0+255),b
  4014                           
  4015                           ; BSR set to: 2
  4016                           ;main.c: 155: stack.pendingPacketToSend.ipv4Header.version = 4;
  4017  000E30  0E04               	movlw	4
  4018  000E32  6F8C               	movwf	(_stack+53)& (0+255),b
  4019                           
  4020                           ; BSR set to: 2
  4021                           ;main.c: 156: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  4022  000E34  0E8C               	movlw	low (_stack+53)
  4023  000E36  0100               	movlb	0	; () banked
  4024  000E38  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  4025  000E3A  0E02               	movlw	high (_stack+53)
  4026  000E3C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  4027  000E3E  EC44  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  4028                           
  4029                           ;main.c: 157: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  4030  000E42  EE22  F08C         	lfsr	2,_stack+53
  4031  000E46  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  4032  000E4A  0E16               	movlw	22
  4033  000E4C                     u12731:
  4034  000E4C  CFDB FFEB          	movff	plusw2,plusw0
  4035  000E50  06E8               	decf	wreg,f,c
  4036  000E52  E2FC               	bc	u12731
  4037  000E54  0EA6               	movlw	low main@headerBuf
  4038  000E56  0100               	movlb	0	; () banked
  4039  000E58  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  4040  000E5A  0E03               	movlw	high main@headerBuf
  4041  000E5C  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  4042  000E5E  ECE8  F017         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  4043                           
  4044                           ;main.c: 159: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  4045  000E62  0E8C               	movlw	low (_stack+53)
  4046  000E64  0100               	movlb	0	; () banked
  4047  000E66  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  4048  000E68  0E02               	movlw	high (_stack+53)
  4049  000E6A  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  4050  000E6C  ECB3  F01A         	call	_ipv4_txFrameRequest	;wreg free
  4051                           
  4052                           ;main.c: 161: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  4053  000E70  0E00               	movlw	0
  4054  000E72  0103               	movlb	3	; () banked
  4055  000E74  6FC8               	movwf	main@i& (0+255),b
  4056  000E76  D036               	goto	l654
  4057  000E78                     
  4058                           ;main.c: 162: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  4059                           
  4060                           ; BSR set to: 3
  4061  000E78  0102               	movlb	2	; () banked
  4062  000E7A  518D               	movf	(_stack+54)& (0+255),w,b
  4063  000E7C  0D04               	mullw	4
  4064  000E7E  0103               	movlb	3	; () banked
  4065  000E80  51C8               	movf	main@i& (0+255),w,b
  4066  000E82  0101               	movlb	1	; () banked
  4067  000E84  6F91               	movwf	??_main& (0+255),b
  4068  000E86  6B92               	clrf	(??_main+1)& (0+255),b
  4069  000E88  50F3               	movf	prodl,w,c
  4070  000E8A  5D91               	subwf	??_main& (0+255),w,b
  4071  000E8C  5192               	movf	(??_main+1)& (0+255),w,b
  4072  000E8E  0A80               	xorlw	128
  4073  000E90  6F93               	movwf	(??_main+2)& (0+255),b
  4074  000E92  50F4               	movf	prodh,w,c
  4075  000E94  0A80               	xorlw	128
  4076  000E96  5993               	subwfb	(??_main+2)& (0+255),w,b
  4077  000E98  B0D8               	btfsc	status,0,c
  4078  000E9A  D016               	goto	l656
  4079                           
  4080                           ; BSR set to: 1
  4081                           ;main.c: 163: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  4082  000E9C  EE22  F08C         	lfsr	2,_stack+53
  4083  000EA0  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4084  000EA4  0E41               	movlw	65
  4085  000EA6                     u12751:
  4086  000EA6  CFDB FFEB          	movff	plusw2,plusw0
  4087  000EAA  06E8               	decf	wreg,f,c
  4088  000EAC  E2FC               	bc	u12751
  4089  000EAE  0103               	movlb	3	; () banked
  4090  000EB0  51C8               	movf	main@i& (0+255),w,b
  4091  000EB2  0D01               	mullw	1
  4092  000EB4  0EA6               	movlw	low main@headerBuf
  4093  000EB6  24F3               	addwf	prodl,w,c
  4094  000EB8  6ED9               	movwf	fsr2l,c
  4095  000EBA  0E03               	movlw	high main@headerBuf
  4096  000EBC  20F4               	addwfc	prodh,w,c
  4097  000EBE  6EDA               	movwf	fsr2h,c
  4098  000EC0  50DF               	movf	indf2,w,c
  4099  000EC2  EC48  F02A         	call	_ipv4_streamToTransmissionBuffer
  4100                           
  4101                           ;main.c: 164: } else
  4102  000EC6  D00C               	goto	l657
  4103  000EC8                     l656:
  4104                           
  4105                           ;main.c: 165: ipv4_streamToTransmissionBuffer(0, stack.pendingPacketToSend);
  4106  000EC8  EE22  F08C         	lfsr	2,_stack+53
  4107  000ECC  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4108  000ED0  0E41               	movlw	65
  4109  000ED2                     u12761:
  4110  000ED2  CFDB FFEB          	movff	plusw2,plusw0
  4111  000ED6  06E8               	decf	wreg,f,c
  4112  000ED8  E2FC               	bc	u12761
  4113  000EDA  0E00               	movlw	0
  4114  000EDC  EC48  F02A         	call	_ipv4_streamToTransmissionBuffer
  4115  000EE0                     l657:
  4116  000EE0  0103               	movlb	3	; () banked
  4117  000EE2  2BC8               	incf	main@i& (0+255),f,b
  4118  000EE4                     l654:
  4119                           
  4120                           ; BSR set to: 3
  4121                           
  4122                           ; BSR set to: 3
  4123  000EE4  51C8               	movf	main@i& (0+255),w,b
  4124  000EE6  0101               	movlb	1	; () banked
  4125  000EE8  6F91               	movwf	??_main& (0+255),b
  4126  000EEA  6B92               	clrf	(??_main+1)& (0+255),b
  4127  000EEC  0102               	movlb	2	; () banked
  4128  000EEE  5190               	movf	(_stack+57)& (0+255),w,b
  4129  000EF0  0101               	movlb	1	; () banked
  4130  000EF2  5D91               	subwf	??_main& (0+255),w,b
  4131  000EF4  0102               	movlb	2	; () banked
  4132  000EF6  5191               	movf	(_stack+58)& (0+255),w,b
  4133  000EF8  0101               	movlb	1	; () banked
  4134  000EFA  5992               	subwfb	(??_main+1)& (0+255),w,b
  4135  000EFC  A0D8               	btfss	status,0,c
  4136  000EFE  D7BC               	goto	l655
  4137                           
  4138                           ; BSR set to: 1
  4139                           ;main.c: 166: }
  4140                           ;main.c: 167: UARTTransmitText("[IPv4]: A packet was prepared (");
  4141                           
  4142                           ; BSR set to: 1
  4143  000F00  0EEE               	movlw	low STR_41
  4144  000F02  0100               	movlb	0	; () banked
  4145  000F04  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4146  000F06  0E7C               	movlw	high STR_41
  4147  000F08  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4148  000F0A  EC06  F027         	call	_UARTTransmitText	;wreg free
  4149                           
  4150                           ;main.c: 168: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.sou
      +                          rce));
  4151  000F0E  C29B  F073         	movff	_stack+68,ipAdressToString@ip
  4152  000F12  C29C  F074         	movff	_stack+69,ipAdressToString@ip+1
  4153  000F16  C29D  F075         	movff	_stack+70,ipAdressToString@ip+2
  4154  000F1A  C29E  F076         	movff	_stack+71,ipAdressToString@ip+3
  4155  000F1E  ECC6  F013         	call	_ipAdressToString	;wreg free
  4156  000F22  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4157  000F26  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4158  000F2A  EC06  F027         	call	_UARTTransmitText	;wreg free
  4159                           
  4160                           ;main.c: 169: UARTTransmitText(" -> ");
  4161  000F2E  0ED3               	movlw	low STR_42
  4162  000F30  0100               	movlb	0	; () banked
  4163  000F32  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4164  000F34  0E7F               	movlw	high STR_42
  4165  000F36  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4166  000F38  EC06  F027         	call	_UARTTransmitText	;wreg free
  4167                           
  4168                           ;main.c: 170: UARTTransmitText(ipAdressToString(stack.pendingPacketToSend.ipv4Header.des
      +                          tination));
  4169  000F3C  C29F  F073         	movff	_stack+72,ipAdressToString@ip
  4170  000F40  C2A0  F074         	movff	_stack+73,ipAdressToString@ip+1
  4171  000F44  C2A1  F075         	movff	_stack+74,ipAdressToString@ip+2
  4172  000F48  C2A2  F076         	movff	_stack+75,ipAdressToString@ip+3
  4173  000F4C  ECC6  F013         	call	_ipAdressToString	;wreg free
  4174  000F50  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4175  000F54  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4176  000F58  EC06  F027         	call	_UARTTransmitText	;wreg free
  4177                           
  4178                           ;main.c: 171: UARTTransmitText(")\n\r");
  4179  000F5C  0EE9               	movlw	low STR_43
  4180  000F5E  0100               	movlb	0	; () banked
  4181  000F60  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4182  000F62  0E7F               	movlw	high STR_43
  4183  000F64  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4184  000F66  EC06  F027         	call	_UARTTransmitText	;wreg free
  4185                           
  4186                           ;main.c: 173: stack.background.fPacketPending = 1;
  4187  000F6A  0E01               	movlw	1
  4188  000F6C  0102               	movlb	2	; () banked
  4189  000F6E  6F8B               	movwf	(_stack+52)& (0+255),b
  4190                           
  4191                           ; BSR set to: 2
  4192                           
  4193                           ; BSR set to: 2
  4194                           
  4195                           ; BSR set to: 2
  4196  000F70  D6F3               	goto	l647
  4197  000F72                     __end_of_main:
  4198                           	opt stack 0
  4199                           tblptru	equ	0xFF8
  4200                           tblptrh	equ	0xFF7
  4201                           tblptrl	equ	0xFF6
  4202                           tablat	equ	0xFF5
  4203                           prodh	equ	0xFF4
  4204                           prodl	equ	0xFF3
  4205                           intcon	equ	0xFF2
  4206                           intcon3	equ	0xFF0
  4207                           indf0	equ	0xFEF
  4208                           postinc0	equ	0xFEE
  4209                           plusw0	equ	0xFEB
  4210                           fsr0h	equ	0xFEA
  4211                           fsr0l	equ	0xFE9
  4212                           wreg	equ	0xFE8
  4213                           postdec1	equ	0xFE5
  4214                           fsr1l	equ	0xFE1
  4215                           indf2	equ	0xFDF
  4216                           plusw2	equ	0xFDB
  4217                           fsr2h	equ	0xFDA
  4218                           fsr2l	equ	0xFD9
  4219                           status	equ	0xFD8
  4220                           
  4221 ;; *************** function _stack_init *****************
  4222 ;; Defined at:
  4223 ;;		line 27 in file "src/stack/stack.c"
  4224 ;; Parameters:    Size  Location     Type
  4225 ;;		None
  4226 ;; Auto vars:     Size  Location     Type
  4227 ;;		None
  4228 ;; Return value:  Size  Location     Type
  4229 ;;                  3  540[None  ] struct error
  4230 ;; Registers used:
  4231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4232 ;; Tracked objects:
  4233 ;;		On entry : 0/0
  4234 ;;		On exit  : 0/0
  4235 ;;		Unchanged: 0/0
  4236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4237 ;;      Params:         0       0       0       0       0       0       0       0       0
  4238 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4239 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4240 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4241 ;;Total ram usage:        0 bytes
  4242 ;; Hardware stack levels used:    1
  4243 ;; Hardware stack levels required when called:    8
  4244 ;; This function calls:
  4245 ;;		_arp_init
  4246 ;;		_ipv4_init
  4247 ;; This function is called by:
  4248 ;;		_main
  4249 ;; This function uses a non-reentrant model
  4250 ;;
  4251                           
  4252                           	psect	text1
  4253  00577C                     __ptext1:
  4254                           	opt stack 0
  4255  00577C                     _stack_init:
  4256                           	opt stack 22
  4257                           
  4258                           ;stack.c: 28: arp_init();
  4259                           
  4260                           ; BSR set to: 2
  4261                           ;incstack = 0
  4262  00577C  ECC8  F024         	call	_arp_init	;wreg free
  4263                           
  4264                           ;stack.c: 29: ipv4_init();
  4265  005780  ECD4  F02B         	call	_ipv4_init	;wreg free
  4266  005784  0012               	return		;funcret
  4267  005786                     __end_of_stack_init:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           intcon	equ	0xFF2
  4276                           intcon3	equ	0xFF0
  4277                           indf0	equ	0xFEF
  4278                           postinc0	equ	0xFEE
  4279                           plusw0	equ	0xFEB
  4280                           fsr0h	equ	0xFEA
  4281                           fsr0l	equ	0xFE9
  4282                           wreg	equ	0xFE8
  4283                           postdec1	equ	0xFE5
  4284                           fsr1l	equ	0xFE1
  4285                           indf2	equ	0xFDF
  4286                           plusw2	equ	0xFDB
  4287                           fsr2h	equ	0xFDA
  4288                           fsr2l	equ	0xFD9
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _ipv4_init *****************
  4292 ;; Defined at:
  4293 ;;		line 311 in file "src/stack/protocols/ipv4.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;		None
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;		None
  4298 ;; Return value:  Size  Location     Type
  4299 ;;                  1    wreg      void 
  4300 ;; Registers used:
  4301 ;;		None
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4307 ;;      Params:         0       0       0       0       0       0       0       0       0
  4308 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4310 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4311 ;;Total ram usage:        0 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_stack_init
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text2
  4322  0057A8                     __ptext2:
  4323                           	opt stack 0
  4324  0057A8                     _ipv4_init:
  4325                           	opt stack 25
  4326                           
  4327                           ;ipv4.c: 312: fSrcAddrChanged = 0;
  4328                           
  4329                           ;incstack = 0
  4330  0057A8  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4331  0057AA  0012               	return		;funcret
  4332  0057AC                     __end_of_ipv4_init:
  4333                           	opt stack 0
  4334                           tblptru	equ	0xFF8
  4335                           tblptrh	equ	0xFF7
  4336                           tblptrl	equ	0xFF6
  4337                           tablat	equ	0xFF5
  4338                           prodh	equ	0xFF4
  4339                           prodl	equ	0xFF3
  4340                           intcon	equ	0xFF2
  4341                           intcon3	equ	0xFF0
  4342                           indf0	equ	0xFEF
  4343                           postinc0	equ	0xFEE
  4344                           plusw0	equ	0xFEB
  4345                           fsr0h	equ	0xFEA
  4346                           fsr0l	equ	0xFE9
  4347                           wreg	equ	0xFE8
  4348                           postdec1	equ	0xFE5
  4349                           fsr1l	equ	0xFE1
  4350                           indf2	equ	0xFDF
  4351                           plusw2	equ	0xFDB
  4352                           fsr2h	equ	0xFDA
  4353                           fsr2l	equ	0xFD9
  4354                           status	equ	0xFD8
  4355                           
  4356 ;; *************** function _srand *****************
  4357 ;; Defined at:
  4358 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4359 ;; Parameters:    Size  Location     Type
  4360 ;;  x               2   26[BANK0 ] unsigned int 
  4361 ;; Auto vars:     Size  Location     Type
  4362 ;;		None
  4363 ;; Return value:  Size  Location     Type
  4364 ;;                  1    wreg      void 
  4365 ;; Registers used:
  4366 ;;		status,2
  4367 ;; Tracked objects:
  4368 ;;		On entry : 0/0
  4369 ;;		On exit  : 0/0
  4370 ;;		Unchanged: 0/0
  4371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4372 ;;      Params:         0       2       0       0       0       0       0       0       0
  4373 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4374 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4375 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4376 ;;Total ram usage:        2 bytes
  4377 ;; Hardware stack levels used:    1
  4378 ;; Hardware stack levels required when called:    4
  4379 ;; This function calls:
  4380 ;;		Nothing
  4381 ;; This function is called by:
  4382 ;;		_main
  4383 ;; This function uses a non-reentrant model
  4384 ;;
  4385                           
  4386                           	psect	text3
  4387  005738                     __ptext3:
  4388                           	opt stack 0
  4389  005738                     _srand:
  4390                           	opt stack 26
  4391                           
  4392                           ;incstack = 0
  4393  005738  C07A  F049         	movff	srand@x,_randx
  4394  00573C  C07B  F04A         	movff	srand@x+1,_randx+1
  4395  005740  6A4B               	clrf	_randx+2,c
  4396  005742  6A4C               	clrf	_randx+3,c
  4397  005744  0012               	return		;funcret
  4398  005746                     __end_of_srand:
  4399                           	opt stack 0
  4400                           tblptru	equ	0xFF8
  4401                           tblptrh	equ	0xFF7
  4402                           tblptrl	equ	0xFF6
  4403                           tablat	equ	0xFF5
  4404                           prodh	equ	0xFF4
  4405                           prodl	equ	0xFF3
  4406                           intcon	equ	0xFF2
  4407                           intcon3	equ	0xFF0
  4408                           indf0	equ	0xFEF
  4409                           postinc0	equ	0xFEE
  4410                           plusw0	equ	0xFEB
  4411                           fsr0h	equ	0xFEA
  4412                           fsr0l	equ	0xFE9
  4413                           wreg	equ	0xFE8
  4414                           postdec1	equ	0xFE5
  4415                           fsr1l	equ	0xFE1
  4416                           indf2	equ	0xFDF
  4417                           plusw2	equ	0xFDB
  4418                           fsr2h	equ	0xFDA
  4419                           fsr2l	equ	0xFD9
  4420                           status	equ	0xFD8
  4421                           
  4422 ;; *************** function _sevenSegmentInit *****************
  4423 ;; Defined at:
  4424 ;;		line 28 in file "src/system/sevenseg.c"
  4425 ;; Parameters:    Size  Location     Type
  4426 ;;		None
  4427 ;; Auto vars:     Size  Location     Type
  4428 ;;		None
  4429 ;; Return value:  Size  Location     Type
  4430 ;;                  1    wreg      void 
  4431 ;; Registers used:
  4432 ;;		wreg, status,2, status,0
  4433 ;; Tracked objects:
  4434 ;;		On entry : 0/0
  4435 ;;		On exit  : 0/0
  4436 ;;		Unchanged: 0/0
  4437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4438 ;;      Params:         0       0       0       0       0       0       0       0       0
  4439 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4440 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4441 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4442 ;;Total ram usage:        0 bytes
  4443 ;; Hardware stack levels used:    1
  4444 ;; Hardware stack levels required when called:    4
  4445 ;; This function calls:
  4446 ;;		Nothing
  4447 ;; This function is called by:
  4448 ;;		_main
  4449 ;; This function uses a non-reentrant model
  4450 ;;
  4451                           
  4452                           	psect	text4
  4453  00566C                     __ptext4:
  4454                           	opt stack 0
  4455  00566C                     _sevenSegmentInit:
  4456                           	opt stack 26
  4457                           
  4458                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4459                           
  4460                           ;incstack = 0
  4461  00566C  0EF8               	movlw	248
  4462  00566E  1682               	andwf	3970,f,c	;volatile
  4463                           
  4464                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4465  005670  0EF8               	movlw	248
  4466  005672  1694               	andwf	3988,f,c	;volatile
  4467                           
  4468                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4469  005674  0E00               	movlw	0
  4470  005676  6E92               	movwf	3986,c	;volatile
  4471                           
  4472                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4473  005678  0E00               	movlw	0
  4474  00567A  010F               	movlb	15	; () banked
  4475  00567C  6F5B               	movwf	91,b	;volatile
  4476                           
  4477                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4478  00567E  0EF8               	movlw	248
  4479  005680  175D               	andwf	93,f,b	;volatile
  4480                           
  4481                           ; BSR set to: 15
  4482                           ;sevenseg.c: 38: PORTA = 0xff;
  4483  005682  6880               	setf	3968,c	;volatile
  4484                           
  4485                           ; BSR set to: 15
  4486  005684  0012               	return		;funcret
  4487  005686                     __end_of_sevenSegmentInit:
  4488                           	opt stack 0
  4489                           tblptru	equ	0xFF8
  4490                           tblptrh	equ	0xFF7
  4491                           tblptrl	equ	0xFF6
  4492                           tablat	equ	0xFF5
  4493                           prodh	equ	0xFF4
  4494                           prodl	equ	0xFF3
  4495                           intcon	equ	0xFF2
  4496                           intcon3	equ	0xFF0
  4497                           indf0	equ	0xFEF
  4498                           postinc0	equ	0xFEE
  4499                           plusw0	equ	0xFEB
  4500                           fsr0h	equ	0xFEA
  4501                           fsr0l	equ	0xFE9
  4502                           wreg	equ	0xFE8
  4503                           postdec1	equ	0xFE5
  4504                           fsr1l	equ	0xFE1
  4505                           indf2	equ	0xFDF
  4506                           plusw2	equ	0xFDB
  4507                           fsr2h	equ	0xFDA
  4508                           fsr2l	equ	0xFD9
  4509                           status	equ	0xFD8
  4510                           
  4511 ;; *************** function _printEthernetState *****************
  4512 ;; Defined at:
  4513 ;;		line 179 in file "src/system/main.c"
  4514 ;; Parameters:    Size  Location     Type
  4515 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4516 ;; Auto vars:     Size  Location     Type
  4517 ;;		None
  4518 ;; Return value:  Size  Location     Type
  4519 ;;                  1    wreg      void 
  4520 ;; Registers used:
  4521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4522 ;; Tracked objects:
  4523 ;;		On entry : 0/0
  4524 ;;		On exit  : 0/0
  4525 ;;		Unchanged: 0/0
  4526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4527 ;;      Params:         0      15       0       0       0       0       0       0       0
  4528 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4530 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4531 ;;Total ram usage:       15 bytes
  4532 ;; Hardware stack levels used:    1
  4533 ;; Hardware stack levels required when called:    5
  4534 ;; This function calls:
  4535 ;;		_UARTTransmitText
  4536 ;; This function is called by:
  4537 ;;		_main
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text5
  4542  004286                     __ptext5:
  4543                           	opt stack 0
  4544  004286                     _printEthernetState:
  4545                           	opt stack 25
  4546                           
  4547                           ;main.c: 180: static ethernetConnection_t oldState;
  4548                           ;main.c: 181: if (state.link != oldState.link) {
  4549                           
  4550                           ; BSR set to: 15
  4551                           ;incstack = 0
  4552  004286  0102               	movlb	2	; () banked
  4553  004288  5148               	movf	printEthernetState@oldState& (0+255),w,b
  4554  00428A  0100               	movlb	0	; () banked
  4555  00428C  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4556  00428E  B4D8               	btfsc	status,2,c
  4557  004290  D041               	goto	l676
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 182: if (state.link == NO_LINK) {
  4561  004292  519A               	movf	printEthernetState@state& (0+255),w,b
  4562  004294  A4D8               	btfss	status,2,c
  4563  004296  D007               	goto	l667
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  4567  004298  0E24               	movlw	low STR_44
  4568  00429A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4569  00429C  0E7F               	movlw	high STR_44
  4570  00429E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4571  0042A0  EC06  F027         	call	_UARTTransmitText	;wreg free
  4572                           
  4573                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  4574  0042A4  D00A               	goto	l669
  4575  0042A6                     l667:
  4576  0042A6  0100               	movlb	0	; () banked
  4577  0042A8  059A               	decf	printEthernetState@state& (0+255),w,b
  4578  0042AA  A4D8               	btfss	status,2,c
  4579  0042AC  D006               	goto	l669
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;main.c: 185: UARTTransmitText("Link established. ");
  4583  0042AE  0E6F               	movlw	low STR_45
  4584  0042B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4585  0042B2  0E7E               	movlw	high STR_45
  4586  0042B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4587  0042B6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4588  0042BA                     l669:
  4589                           
  4590                           ;main.c: 186: }
  4591                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  4592  0042BA  0100               	movlb	0	; () banked
  4593  0042BC  059A               	decf	printEthernetState@state& (0+255),w,b
  4594  0042BE  A4D8               	btfss	status,2,c
  4595  0042C0  D029               	goto	l676
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  4599  0042C2  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4600  0042C4  A4D8               	btfss	status,2,c
  4601  0042C6  D007               	goto	l671
  4602                           
  4603                           ; BSR set to: 0
  4604                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  4605  0042C8  0E5C               	movlw	low STR_46
  4606  0042CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4607  0042CC  0E7E               	movlw	high STR_46
  4608  0042CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4609  0042D0  EC06  F027         	call	_UARTTransmitText	;wreg free
  4610                           
  4611                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  4612  0042D4  D00A               	goto	l673
  4613  0042D6                     l671:
  4614  0042D6  0100               	movlb	0	; () banked
  4615  0042D8  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4616  0042DA  A4D8               	btfss	status,2,c
  4617  0042DC  D006               	goto	l673
  4618                           
  4619                           ; BSR set to: 0
  4620                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  4621  0042DE  0E21               	movlw	low STR_47
  4622  0042E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4623  0042E2  0E7E               	movlw	high STR_47
  4624  0042E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4625  0042E6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4626  0042EA                     l673:
  4627                           
  4628                           ;main.c: 193: }
  4629                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  4630  0042EA  0100               	movlb	0	; () banked
  4631  0042EC  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4632  0042EE  A4D8               	btfss	status,2,c
  4633  0042F0  D007               	goto	l674
  4634                           
  4635                           ; BSR set to: 0
  4636                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  4637  0042F2  0E68               	movlw	low STR_48
  4638  0042F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4639  0042F6  0E7D               	movlw	high STR_48
  4640  0042F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4641  0042FA  EC06  F027         	call	_UARTTransmitText	;wreg free
  4642                           
  4643                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  4644  0042FE  D00A               	goto	l676
  4645  004300                     l674:
  4646  004300  0100               	movlb	0	; () banked
  4647  004302  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4648  004304  A4D8               	btfss	status,2,c
  4649  004306  D006               	goto	l676
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  4653  004308  0E85               	movlw	low STR_49
  4654  00430A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4655  00430C  0E7D               	movlw	high STR_49
  4656  00430E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4657  004310  EC06  F027         	call	_UARTTransmitText	;wreg free
  4658  004314                     l676:
  4659                           
  4660                           ;main.c: 199: }
  4661                           ;main.c: 200: }
  4662                           ;main.c: 201: }
  4663                           ;main.c: 202: oldState = state;
  4664  004314  EE20  F09A         	lfsr	2,printEthernetState@state
  4665  004318  EE12  F048         	lfsr	1,printEthernetState@oldState
  4666  00431C  0E0E               	movlw	14
  4667  00431E                     u12511:
  4668  00431E  CFDB FFE3          	movff	plusw2,plusw1
  4669  004322  06E8               	decf	wreg,f,c
  4670  004324  E2FC               	bc	u12511
  4671  004326  0012               	return		;funcret
  4672  004328                     __end_of_printEthernetState:
  4673                           	opt stack 0
  4674                           tblptru	equ	0xFF8
  4675                           tblptrh	equ	0xFF7
  4676                           tblptrl	equ	0xFF6
  4677                           tablat	equ	0xFF5
  4678                           prodh	equ	0xFF4
  4679                           prodl	equ	0xFF3
  4680                           intcon	equ	0xFF2
  4681                           intcon3	equ	0xFF0
  4682                           indf0	equ	0xFEF
  4683                           postinc0	equ	0xFEE
  4684                           plusw0	equ	0xFEB
  4685                           fsr0h	equ	0xFEA
  4686                           fsr0l	equ	0xFE9
  4687                           wreg	equ	0xFE8
  4688                           postdec1	equ	0xFE5
  4689                           plusw1	equ	0xFE3
  4690                           fsr1l	equ	0xFE1
  4691                           indf2	equ	0xFDF
  4692                           plusw2	equ	0xFDB
  4693                           fsr2h	equ	0xFDA
  4694                           fsr2l	equ	0xFD9
  4695                           status	equ	0xFD8
  4696                           
  4697 ;; *************** function _printErrorMessage *****************
  4698 ;; Defined at:
  4699 ;;		line 205 in file "src/system/main.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  err             3   58[BANK0 ] struct error
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;		None
  4704 ;; Return value:  Size  Location     Type
  4705 ;;                  1    wreg      void 
  4706 ;; Registers used:
  4707 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4708 ;; Tracked objects:
  4709 ;;		On entry : 0/0
  4710 ;;		On exit  : 0/0
  4711 ;;		Unchanged: 0/0
  4712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4713 ;;      Params:         0       3       0       0       0       0       0       0       0
  4714 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4715 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4716 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4717 ;;Total ram usage:        5 bytes
  4718 ;; Hardware stack levels used:    1
  4719 ;; Hardware stack levels required when called:    8
  4720 ;; This function calls:
  4721 ;;		_UARTTransmitText
  4722 ;;		_intToString
  4723 ;; This function is called by:
  4724 ;;		_main
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text6
  4729  00369C                     __ptext6:
  4730                           	opt stack 0
  4731  00369C                     _printErrorMessage:
  4732                           	opt stack 22
  4733                           
  4734                           ;main.c: 206: UARTTransmitText("[ERROR]");
  4735                           
  4736                           ;incstack = 0
  4737  00369C  0EA3               	movlw	low STR_50
  4738  00369E  0100               	movlb	0	; () banked
  4739  0036A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4740  0036A2  0E7F               	movlw	high STR_50
  4741  0036A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4742  0036A6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4743                           
  4744                           ;main.c: 207: switch (err.module) {
  4745  0036AA  D028               	goto	l680
  4746  0036AC                     
  4747                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  4748  0036AC  0EB8               	movlw	low STR_51
  4749  0036AE  0100               	movlb	0	; () banked
  4750  0036B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4751  0036B2  0E7E               	movlw	high STR_51
  4752  0036B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4753  0036B6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4754                           
  4755                           ;main.c: 210: break;
  4756  0036BA  D050               	goto	l688
  4757  0036BC                     
  4758                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4759  0036BC  0E2C               	movlw	low STR_52
  4760  0036BE  0100               	movlb	0	; () banked
  4761  0036C0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4762  0036C2  0E7D               	movlw	high STR_52
  4763  0036C4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4764  0036C6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4765                           
  4766                           ;main.c: 213: break;
  4767  0036CA  D048               	goto	l688
  4768  0036CC                     
  4769                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  4770  0036CC  0E82               	movlw	low STR_53
  4771  0036CE  0100               	movlb	0	; () banked
  4772  0036D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4773  0036D2  0E7E               	movlw	high STR_53
  4774  0036D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4775  0036D6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4776                           
  4777                           ;main.c: 216: break;
  4778  0036DA  D040               	goto	l688
  4779  0036DC                     
  4780                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  4781  0036DC  0E16               	movlw	low STR_54
  4782  0036DE  0100               	movlb	0	; () banked
  4783  0036E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4784  0036E2  0E7F               	movlw	high STR_54
  4785  0036E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4786  0036E6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4787                           
  4788                           ;main.c: 219: break;
  4789  0036EA  D038               	goto	l688
  4790  0036EC                     
  4791                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  4792  0036EC  0EF8               	movlw	low STR_55
  4793  0036EE  0100               	movlb	0	; () banked
  4794  0036F0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4795  0036F2  0E7E               	movlw	high STR_55
  4796  0036F4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4797  0036F6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4798                           
  4799                           ;main.c: 224: }
  4800                           
  4801                           ;main.c: 223: break;
  4802                           
  4803                           ;main.c: 222: default:
  4804  0036FA  D030               	goto	l688
  4805  0036FC                     l680:
  4806  0036FC  0100               	movlb	0	; () banked
  4807  0036FE  519A               	movf	printErrorMessage@err& (0+255),w,b
  4808                           
  4809                           ; Switch size 1, requested type "space"
  4810                           ; Number of cases is 5, Range of values is 0 to 4
  4811                           ; switch strategies available:
  4812                           ; Name         Instructions Cycles
  4813                           ; simple_byte           16     9 (average)
  4814                           ;	Chosen strategy is simple_byte
  4815  003700  0A00               	xorlw	0	; case 0
  4816  003702  B4D8               	btfsc	status,2,c
  4817  003704  D7D3               	goto	l681
  4818  003706  0A01               	xorlw	1	; case 1
  4819  003708  B4D8               	btfsc	status,2,c
  4820  00370A  D7D8               	goto	l683
  4821  00370C  0A03               	xorlw	3	; case 2
  4822  00370E  B4D8               	btfsc	status,2,c
  4823  003710  D7DD               	goto	l684
  4824  003712  0A01               	xorlw	1	; case 3
  4825  003714  B4D8               	btfsc	status,2,c
  4826  003716  D7E2               	goto	l685
  4827  003718  0A07               	xorlw	7	; case 4
  4828  00371A  B4D8               	btfsc	status,2,c
  4829  00371C  D7E7               	goto	l686
  4830                           
  4831                           ; BSR set to: 0
  4832                           ;main.c: 225: switch (err.code) {
  4833  00371E  D01E               	goto	l688
  4834  003720                     
  4835                           ; BSR set to: 0
  4836                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  4837                           
  4838                           ; BSR set to: 0
  4839  003720  0ED7               	movlw	low STR_56
  4840  003722  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4841  003724  0E7B               	movlw	high STR_56
  4842  003726  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4843  003728  EC06  F027         	call	_UARTTransmitText	;wreg free
  4844                           
  4845                           ;main.c: 228: break;
  4846  00372C  D030               	goto	l690
  4847  00372E                     
  4848                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4849  00372E  0E4E               	movlw	low STR_57
  4850  003730  0100               	movlb	0	; () banked
  4851  003732  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4852  003734  0E7A               	movlw	high STR_57
  4853  003736  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4854  003738  EC06  F027         	call	_UARTTransmitText	;wreg free
  4855                           
  4856                           ;main.c: 231: break;
  4857  00373C  D028               	goto	l690
  4858  00373E                     
  4859                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  4860  00373E  0E8A               	movlw	low STR_58
  4861  003740  0100               	movlb	0	; () banked
  4862  003742  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4863  003744  0E7C               	movlw	high STR_58
  4864  003746  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4865  003748  EC06  F027         	call	_UARTTransmitText	;wreg free
  4866  00374C                     
  4867                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  4868                           
  4869                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4870  00374C  0E4A               	movlw	low STR_59
  4871  00374E  0100               	movlb	0	; () banked
  4872  003750  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4873  003752  0E7D               	movlw	high STR_59
  4874  003754  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4875  003756  EC06  F027         	call	_UARTTransmitText	;wreg free
  4876                           
  4877                           ;main.c: 238: }
  4878                           
  4879                           ;main.c: 237: break;
  4880  00375A  D019               	goto	l690
  4881  00375C                     l688:
  4882  00375C  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4883  003760  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4884  003764  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4885                           
  4886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4887                           ; Switch size 1, requested type "space"
  4888                           ; Number of cases is 1, Range of values is 1 to 1
  4889                           ; switch strategies available:
  4890                           ; Name         Instructions Cycles
  4891                           ; simple_byte            4     3 (average)
  4892                           ;	Chosen strategy is simple_byte
  4893  003768  0100               	movlb	0	; () banked
  4894  00376A  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4895  00376C  0A01               	xorlw	1	; case 1
  4896  00376E  A4D8               	btfss	status,2,c
  4897  003770  D7ED               	goto	l693
  4898                           
  4899                           ; BSR set to: 0
  4900                           ; Switch size 1, requested type "space"
  4901                           ; Number of cases is 4, Range of values is 45 to 147
  4902                           ; switch strategies available:
  4903                           ; Name         Instructions Cycles
  4904                           ; simple_byte           13     7 (average)
  4905                           ;	Chosen strategy is simple_byte
  4906  003772  519D               	movf	??_printErrorMessage& (0+255),w,b
  4907  003774  0A2D               	xorlw	45	; case 45
  4908  003776  B4D8               	btfsc	status,2,c
  4909  003778  D7DA               	goto	l691
  4910  00377A  0A03               	xorlw	3	; case 46
  4911  00377C  B4D8               	btfsc	status,2,c
  4912  00377E  D7D0               	goto	l689
  4913  003780  0AA1               	xorlw	161	; case 143
  4914  003782  B4D8               	btfsc	status,2,c
  4915  003784  D7E3               	goto	l693
  4916  003786  0A1C               	xorlw	28	; case 147
  4917  003788  B4D8               	btfsc	status,2,c
  4918  00378A  D7D9               	goto	l692
  4919  00378C  D7DF               	goto	l693
  4920  00378E                     l690:
  4921                           
  4922                           ;main.c: 240: UARTTransmitText(" (Code: ");
  4923                           
  4924                           ; BSR set to: 0
  4925  00378E  0E89               	movlw	low STR_60
  4926  003790  0100               	movlb	0	; () banked
  4927  003792  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4928  003794  0E7F               	movlw	high STR_60
  4929  003796  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4930  003798  EC06  F027         	call	_UARTTransmitText	;wreg free
  4931                           
  4932                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  4933  00379C  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4934  0037A0  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4935  0037A4  0100               	movlb	0	; () banked
  4936  0037A6  6B86               	clrf	(intToString@val+2)& (0+255),b
  4937  0037A8  6B87               	clrf	(intToString@val+3)& (0+255),b
  4938  0037AA  EC94  F029         	call	_intToString	;wreg free
  4939  0037AE  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4940  0037B2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4941  0037B6  EC06  F027         	call	_UARTTransmitText	;wreg free
  4942                           
  4943                           ;main.c: 242: UARTTransmitText(").\n\r");
  4944  0037BA  0ECE               	movlw	low STR_61
  4945  0037BC  0100               	movlb	0	; () banked
  4946  0037BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4947  0037C0  0E7F               	movlw	high STR_61
  4948  0037C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4949  0037C4  EC06  F027         	call	_UARTTransmitText	;wreg free
  4950  0037C8  0012               	return		;funcret
  4951  0037CA                     __end_of_printErrorMessage:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon3	equ	0xFF0
  4961                           indf0	equ	0xFEF
  4962                           postinc0	equ	0xFEE
  4963                           plusw0	equ	0xFEB
  4964                           fsr0h	equ	0xFEA
  4965                           fsr0l	equ	0xFE9
  4966                           wreg	equ	0xFE8
  4967                           postdec1	equ	0xFE5
  4968                           plusw1	equ	0xFE3
  4969                           fsr1l	equ	0xFE1
  4970                           indf2	equ	0xFDF
  4971                           postinc2	equ	0xFDE
  4972                           postdec2	equ	0xFDD
  4973                           plusw2	equ	0xFDB
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  4979 ;; Defined at:
  4980 ;;		line 94 in file "src/stack/protocols/ipv4.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;  header         23    0[BANK0 ] struct ipv4_header
  4983 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  4984 ;;		 -> main@headerBuf(32), 
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;		None
  4987 ;; Return value:  Size  Location     Type
  4988 ;;                  1    wreg      void 
  4989 ;; Registers used:
  4990 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4996 ;;      Params:         0      25       0       0       0       0       0       0       0
  4997 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4998 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4999 ;;      Totals:         0      27       0       0       0       0       0       0       0
  5000 ;;Total ram usage:       27 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:    4
  5003 ;; This function calls:
  5004 ;;		Nothing
  5005 ;; This function is called by:
  5006 ;;		_main
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text7
  5011  002FD0                     __ptext7:
  5012                           	opt stack 0
  5013  002FD0                     _ipv4_writeHeaderIntoBuffer:
  5014                           	opt stack 26
  5015                           
  5016                           ;ipv4.c: 95: *ptr = (header.version << 4) | (header.headerLength);
  5017                           
  5018                           ;incstack = 0
  5019  002FD0  0100               	movlb	0	; () banked
  5020  002FD2  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  5021  002FD4  0BF0               	andlw	240
  5022  002FD6  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  5023  002FD8  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  5024  002FDC  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  5025  002FE0  6EDF               	movwf	indf2,c
  5026                           
  5027                           ;ipv4.c: 96: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  5028  002FE2  EE20 F001          	lfsr	2,1
  5029  002FE6  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5030  002FE8  26D9               	addwf	fsr2l,f,c
  5031  002FEA  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5032  002FEC  22DA               	addwfc	fsr2h,f,c
  5033  002FEE  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  5034  002FF2  0E03               	movlw	3
  5035  002FF4  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  5036  002FF6  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  5037  002FF8  46E8               	rlncf	wreg,f,c
  5038  002FFA  0BFC               	andlw	252
  5039  002FFC  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  5040  002FFE  6EDF               	movwf	indf2,c
  5041                           
  5042                           ;ipv4.c: 97: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  5043  003000  EE20 F002          	lfsr	2,2
  5044  003004  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5045  003006  26D9               	addwf	fsr2l,f,c
  5046  003008  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5047  00300A  22DA               	addwfc	fsr2h,f,c
  5048  00300C  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  5049  00300E  6EDF               	movwf	indf2,c
  5050                           
  5051                           ;ipv4.c: 98: *(ptr + 3) = header.totalLength & 0x00ff;
  5052  003010  EE20 F003          	lfsr	2,3
  5053  003014  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5054  003016  26D9               	addwf	fsr2l,f,c
  5055  003018  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5056  00301A  22DA               	addwfc	fsr2h,f,c
  5057  00301C  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  5058                           
  5059                           ;ipv4.c: 99: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  5060  003020  EE20 F004          	lfsr	2,4
  5061  003024  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5062  003026  26D9               	addwf	fsr2l,f,c
  5063  003028  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5064  00302A  22DA               	addwfc	fsr2h,f,c
  5065  00302C  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  5066  00302E  6EDF               	movwf	indf2,c
  5067                           
  5068                           ;ipv4.c: 100: *(ptr + 5) = header.identification & 0x00ff;
  5069  003030  EE20 F005          	lfsr	2,5
  5070  003034  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5071  003036  26D9               	addwf	fsr2l,f,c
  5072  003038  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5073  00303A  22DA               	addwfc	fsr2h,f,c
  5074  00303C  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  5075                           
  5076                           ; BSR set to: 0
  5077                           ;ipv4.c: 101: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  5078  003040  EE20 F006          	lfsr	2,6
  5079  003044  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5080  003046  26D9               	addwf	fsr2l,f,c
  5081  003048  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5082  00304A  22DA               	addwfc	fsr2h,f,c
  5083  00304C  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  5084  003050  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  5085  003054  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  5086  003058  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  5087  00305C  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  5088  00305E  0E1F               	movlw	31
  5089  003060  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  5090  003062  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  5091  003064  46E8               	rlncf	wreg,f,c
  5092  003066  0BE0               	andlw	224
  5093  003068  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  5094  00306A  6EDF               	movwf	indf2,c
  5095                           
  5096                           ; BSR set to: 0
  5097                           ;ipv4.c: 102: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  5098  00306C  EE20 F007          	lfsr	2,7
  5099  003070  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5100  003072  26D9               	addwf	fsr2l,f,c
  5101  003074  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5102  003076  22DA               	addwfc	fsr2h,f,c
  5103  003078  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  5104                           
  5105                           ; BSR set to: 0
  5106                           ;ipv4.c: 103: *(ptr + 8) = (header.timeToLive);
  5107  00307C  EE20 F008          	lfsr	2,8
  5108  003080  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5109  003082  26D9               	addwf	fsr2l,f,c
  5110  003084  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5111  003086  22DA               	addwfc	fsr2h,f,c
  5112  003088  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;ipv4.c: 104: *(ptr + 9) = (header.protocol);
  5116  00308C  EE20 F009          	lfsr	2,9
  5117  003090  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5118  003092  26D9               	addwf	fsr2l,f,c
  5119  003094  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5120  003096  22DA               	addwfc	fsr2h,f,c
  5121  003098  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  5122                           
  5123                           ; BSR set to: 0
  5124                           ;ipv4.c: 105: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  5125  00309C  EE20 F00A          	lfsr	2,10
  5126  0030A0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5127  0030A2  26D9               	addwf	fsr2l,f,c
  5128  0030A4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5129  0030A6  22DA               	addwfc	fsr2h,f,c
  5130  0030A8  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  5131  0030AA  6EDF               	movwf	indf2,c
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;ipv4.c: 106: *(ptr + 11) = (header.checksum & 0x00ff);
  5135  0030AC  EE20 F00B          	lfsr	2,11
  5136  0030B0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5137  0030B2  26D9               	addwf	fsr2l,f,c
  5138  0030B4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5139  0030B6  22DA               	addwfc	fsr2h,f,c
  5140  0030B8  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  5141                           
  5142                           ; BSR set to: 0
  5143                           ;ipv4.c: 107: *(ptr + 12) = (header.source.address[0]);
  5144  0030BC  EE20 F00C          	lfsr	2,12
  5145  0030C0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5146  0030C2  26D9               	addwf	fsr2l,f,c
  5147  0030C4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5148  0030C6  22DA               	addwfc	fsr2h,f,c
  5149  0030C8  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  5150                           
  5151                           ; BSR set to: 0
  5152                           ;ipv4.c: 108: *(ptr + 13) = (header.source.address[1]);
  5153  0030CC  EE20 F00D          	lfsr	2,13
  5154  0030D0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5155  0030D2  26D9               	addwf	fsr2l,f,c
  5156  0030D4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5157  0030D6  22DA               	addwfc	fsr2h,f,c
  5158  0030D8  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;ipv4.c: 109: *(ptr + 14) = (header.source.address[2]);
  5162  0030DC  EE20 F00E          	lfsr	2,14
  5163  0030E0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5164  0030E2  26D9               	addwf	fsr2l,f,c
  5165  0030E4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5166  0030E6  22DA               	addwfc	fsr2h,f,c
  5167  0030E8  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;ipv4.c: 110: *(ptr + 15) = (header.source.address[3]);
  5171  0030EC  EE20 F00F          	lfsr	2,15
  5172  0030F0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5173  0030F2  26D9               	addwf	fsr2l,f,c
  5174  0030F4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5175  0030F6  22DA               	addwfc	fsr2h,f,c
  5176  0030F8  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  5177                           
  5178                           ; BSR set to: 0
  5179                           ;ipv4.c: 111: *(ptr + 16) = (header.destination.address[0]);
  5180  0030FC  EE20 F010          	lfsr	2,16
  5181  003100  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5182  003102  26D9               	addwf	fsr2l,f,c
  5183  003104  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5184  003106  22DA               	addwfc	fsr2h,f,c
  5185  003108  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;ipv4.c: 112: *(ptr + 17) = (header.destination.address[1]);
  5189  00310C  EE20 F011          	lfsr	2,17
  5190  003110  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5191  003112  26D9               	addwf	fsr2l,f,c
  5192  003114  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5193  003116  22DA               	addwfc	fsr2h,f,c
  5194  003118  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;ipv4.c: 113: *(ptr + 18) = (header.destination.address[2]);
  5198  00311C  EE20 F012          	lfsr	2,18
  5199  003120  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5200  003122  26D9               	addwf	fsr2l,f,c
  5201  003124  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5202  003126  22DA               	addwfc	fsr2h,f,c
  5203  003128  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;ipv4.c: 114: *(ptr + 19) = (header.destination.address[3]);
  5207  00312C  EE20 F013          	lfsr	2,19
  5208  003130  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  5209  003132  26D9               	addwf	fsr2l,f,c
  5210  003134  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  5211  003136  22DA               	addwfc	fsr2h,f,c
  5212  003138  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  5213                           
  5214                           ; BSR set to: 0
  5215  00313C  0012               	return		;funcret
  5216  00313E                     __end_of_ipv4_writeHeaderIntoBuffer:
  5217                           	opt stack 0
  5218                           tblptru	equ	0xFF8
  5219                           tblptrh	equ	0xFF7
  5220                           tblptrl	equ	0xFF6
  5221                           tablat	equ	0xFF5
  5222                           prodh	equ	0xFF4
  5223                           prodl	equ	0xFF3
  5224                           intcon	equ	0xFF2
  5225                           intcon3	equ	0xFF0
  5226                           indf0	equ	0xFEF
  5227                           postinc0	equ	0xFEE
  5228                           plusw0	equ	0xFEB
  5229                           fsr0h	equ	0xFEA
  5230                           fsr0l	equ	0xFE9
  5231                           wreg	equ	0xFE8
  5232                           postinc1	equ	0xFE6
  5233                           postdec1	equ	0xFE5
  5234                           plusw1	equ	0xFE3
  5235                           fsr1l	equ	0xFE1
  5236                           indf2	equ	0xFDF
  5237                           postinc2	equ	0xFDE
  5238                           postdec2	equ	0xFDD
  5239                           plusw2	equ	0xFDB
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _ipv4_txFrameRequest *****************
  5245 ;; Defined at:
  5246 ;;		line 36 in file "src/stack/protocols/ipv4.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  5249 ;;		 -> stack(123), 
  5250 ;; Auto vars:     Size  Location     Type
  5251 ;;		None
  5252 ;; Return value:  Size  Location     Type
  5253 ;;                  1    wreg      void 
  5254 ;; Registers used:
  5255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5256 ;; Tracked objects:
  5257 ;;		On entry : 0/0
  5258 ;;		On exit  : 0/0
  5259 ;;		Unchanged: 0/0
  5260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5261 ;;      Params:         0       2       0       0       0       0       0       0       0
  5262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5263 ;;      Temps:          0       4       0       0       0       0       0       0       0
  5264 ;;      Totals:         0       6       0       0       0       0       0       0       0
  5265 ;;Total ram usage:        6 bytes
  5266 ;; Hardware stack levels used:    1
  5267 ;; Hardware stack levels required when called:    9
  5268 ;; This function calls:
  5269 ;;		_ethernet_txFrameRequest
  5270 ;; This function is called by:
  5271 ;;		_main
  5272 ;; This function uses a non-reentrant model
  5273 ;;
  5274                           
  5275                           	psect	text8
  5276  003566                     __ptext8:
  5277                           	opt stack 0
  5278  003566                     _ipv4_txFrameRequest:
  5279                           	opt stack 21
  5280                           
  5281                           ;ipv4.c: 37: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;incstack = 0
  5285  003566  0100               	movlb	0	; () banked
  5286  003568  EE20 F004          	lfsr	2,4
  5287  00356C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5288  00356E  26D9               	addwf	fsr2l,f,c
  5289  003570  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5290  003572  22DA               	addwfc	fsr2h,f,c
  5291  003574  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5292  003578  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5293  00357C  0E08               	movlw	8
  5294  00357E  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5295  003580  0E00               	movlw	0
  5296  003582  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5297  003584  EE20 F020          	lfsr	2,32
  5298  003588  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5299  00358A  26D9               	addwf	fsr2l,f,c
  5300  00358C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5301  00358E  22DA               	addwfc	fsr2h,f,c
  5302  003590  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5303  003594  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5304                           
  5305                           ;ipv4.c: 38: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  5306  003598  EE20 F02E          	lfsr	2,46
  5307  00359C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5308  00359E  26D9               	addwf	fsr2l,f,c
  5309  0035A0  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5310  0035A2  22DA               	addwfc	fsr2h,f,c
  5311  0035A4  0E00               	movlw	0
  5312  0035A6  6EDE               	movwf	postinc2,c
  5313  0035A8  0E08               	movlw	8
  5314  0035AA  6EDD               	movwf	postdec2,c
  5315                           
  5316                           ; BSR set to: 0
  5317                           ;ipv4.c: 39: ethernet_txFrameRequest(&packet->ethernet);
  5318  0035AC  0E20               	movlw	32
  5319  0035AE  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  5320  0035B0  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  5321  0035B2  0E00               	movlw	0
  5322  0035B4  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5323  0035B6  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  5324  0035B8  EC04  F01F         	call	_ethernet_txFrameRequest	;wreg free
  5325                           
  5326                           ;ipv4.c: 41: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  5327  0035BC  0100               	movlb	0	; () banked
  5328  0035BE  EE20 F036          	lfsr	2,54
  5329  0035C2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5330  0035C4  26D9               	addwf	fsr2l,f,c
  5331  0035C6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5332  0035C8  22DA               	addwfc	fsr2h,f,c
  5333  0035CA  EE10 F01D          	lfsr	1,29
  5334  0035CE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5335  0035D0  26E1               	addwf	fsr1l,f,c
  5336  0035D2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5337  0035D4  22E2               	addwfc	fsr1h,f,c
  5338  0035D6  CFDF FFE7          	movff	indf2,indf1
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;ipv4.c: 42: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  5342  0035DA  EE20 F037          	lfsr	2,55
  5343  0035DE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5344  0035E0  26D9               	addwf	fsr2l,f,c
  5345  0035E2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5346  0035E4  22DA               	addwfc	fsr2h,f,c
  5347  0035E6  EE10 F01E          	lfsr	1,30
  5348  0035EA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5349  0035EC  26E1               	addwf	fsr1l,f,c
  5350  0035EE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5351  0035F0  22E2               	addwfc	fsr1h,f,c
  5352  0035F2  CFDF FFE7          	movff	indf2,indf1
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;ipv4.c: 43: packet->memory.index = packet->ethernet.memory.index;
  5356  0035F6  EE20 F038          	lfsr	2,56
  5357  0035FA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5358  0035FC  26D9               	addwf	fsr2l,f,c
  5359  0035FE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5360  003600  22DA               	addwfc	fsr2h,f,c
  5361  003602  EE10 F01F          	lfsr	1,31
  5362  003606  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5363  003608  26E1               	addwf	fsr1l,f,c
  5364  00360A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5365  00360C  22E2               	addwfc	fsr1h,f,c
  5366  00360E  CFDF FFE7          	movff	indf2,indf1
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;ipv4.c: 44: packet->memory.start = packet->ethernet.memory.start + 8;
  5370  003612  EE20 F030          	lfsr	2,48
  5371  003616  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5372  003618  26D9               	addwf	fsr2l,f,c
  5373  00361A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5374  00361C  22DA               	addwfc	fsr2h,f,c
  5375  00361E  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  5376  003622  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  5377  003626  0E08               	movlw	8
  5378  003628  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  5379  00362A  0E00               	movlw	0
  5380  00362C  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  5381  00362E  EE20 F017          	lfsr	2,23
  5382  003632  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5383  003634  26D9               	addwf	fsr2l,f,c
  5384  003636  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5385  003638  22DA               	addwfc	fsr2h,f,c
  5386  00363A  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  5387  00363E  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  5388                           
  5389                           ; BSR set to: 0
  5390                           ;ipv4.c: 45: packet->memory.end = packet->ethernet.memory.end;
  5391  003642  EE20 F032          	lfsr	2,50
  5392  003646  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5393  003648  26D9               	addwf	fsr2l,f,c
  5394  00364A  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5395  00364C  22DA               	addwfc	fsr2h,f,c
  5396  00364E  EE10 F019          	lfsr	1,25
  5397  003652  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5398  003654  26E1               	addwf	fsr1l,f,c
  5399  003656  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5400  003658  22E2               	addwfc	fsr1h,f,c
  5401  00365A  CFDE FFE6          	movff	postinc2,postinc1
  5402  00365E  CFDD FFE5          	movff	postdec2,postdec1
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;ipv4.c: 46: packet->memory.length = packet->ethernet.memory.length - 8;
  5406  003662  0EF8               	movlw	248
  5407  003664  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  5408  003666  0EFF               	movlw	255
  5409  003668  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  5410  00366A  EE20 F034          	lfsr	2,52
  5411  00366E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5412  003670  26D9               	addwf	fsr2l,f,c
  5413  003672  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5414  003674  22DA               	addwfc	fsr2h,f,c
  5415  003676  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  5416  00367A  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  5417  00367E  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  5418  003680  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  5419  003682  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  5420  003684  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  5421  003686  EE20 F01B          	lfsr	2,27
  5422  00368A  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  5423  00368C  26D9               	addwf	fsr2l,f,c
  5424  00368E  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  5425  003690  22DA               	addwfc	fsr2h,f,c
  5426  003692  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  5427  003696  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  5428                           
  5429                           ; BSR set to: 0
  5430  00369A  0012               	return		;funcret
  5431  00369C                     __end_of_ipv4_txFrameRequest:
  5432                           	opt stack 0
  5433                           tblptru	equ	0xFF8
  5434                           tblptrh	equ	0xFF7
  5435                           tblptrl	equ	0xFF6
  5436                           tablat	equ	0xFF5
  5437                           prodh	equ	0xFF4
  5438                           prodl	equ	0xFF3
  5439                           intcon	equ	0xFF2
  5440                           intcon3	equ	0xFF0
  5441                           indf0	equ	0xFEF
  5442                           postinc0	equ	0xFEE
  5443                           plusw0	equ	0xFEB
  5444                           fsr0h	equ	0xFEA
  5445                           fsr0l	equ	0xFE9
  5446                           wreg	equ	0xFE8
  5447                           indf1	equ	0xFE7
  5448                           postinc1	equ	0xFE6
  5449                           postdec1	equ	0xFE5
  5450                           plusw1	equ	0xFE3
  5451                           fsr1h	equ	0xFE2
  5452                           fsr1l	equ	0xFE1
  5453                           indf2	equ	0xFDF
  5454                           postinc2	equ	0xFDE
  5455                           postdec2	equ	0xFDD
  5456                           plusw2	equ	0xFDB
  5457                           fsr2h	equ	0xFDA
  5458                           fsr2l	equ	0xFD9
  5459                           status	equ	0xFD8
  5460                           
  5461 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  5462 ;; Defined at:
  5463 ;;		line 83 in file "src/stack/protocols/ipv4.c"
  5464 ;; Parameters:    Size  Location     Type
  5465 ;;  data            1    wreg     unsigned char 
  5466 ;;  packet         66   30[BANK0 ] struct ipv4_packet
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;  data            1   98[BANK0 ] unsigned char 
  5469 ;;  ethernetPack    2   96[BANK0 ] unsigned int 
  5470 ;;  remainingLen    2    0        unsigned int 
  5471 ;; Return value:  Size  Location     Type
  5472 ;;                  1    wreg      void 
  5473 ;; Registers used:
  5474 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5480 ;;      Params:         0      66       0       0       0       0       0       0       0
  5481 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5483 ;;      Totals:         0      69       0       0       0       0       0       0       0
  5484 ;;Total ram usage:       69 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    8
  5487 ;; This function calls:
  5488 ;;		_ethernetController_streamToTransmitBuffer
  5489 ;; This function is called by:
  5490 ;;		_main
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           	psect	text9
  5495  005490                     __ptext9:
  5496                           	opt stack 0
  5497  005490                     _ipv4_streamToTransmissionBuffer:
  5498                           	opt stack 22
  5499                           
  5500                           ; BSR set to: 0
  5501                           ;incstack = 0
  5502                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  5503  005490  0100               	movlb	0	; () banked
  5504  005492  6FC2               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  5505                           
  5506                           ;ipv4.c: 84: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  5507  005494  C082  F0C0         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  5508  005498  C083  F0C1         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  5509                           
  5510                           ;ipv4.c: 85: uint16_t remainingLength;
  5511                           ;ipv4.c: 89: ethernetController_streamToTransmitBuffer(data, packet.memory);
  5512  00549C  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
  5513  0054A0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
  5514  0054A4  0E08               	movlw	8
  5515  0054A6                     u12521:
  5516  0054A6  CFDB FFEB          	movff	plusw2,plusw0
  5517  0054AA  06E8               	decf	wreg,f,c
  5518  0054AC  E2FC               	bc	u12521
  5519  0054AE  0100               	movlb	0	; () banked
  5520  0054B0  51C2               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  5521  0054B2  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
  5522  0054B6  0012               	return		;funcret
  5523  0054B8                     __end_of_ipv4_streamToTransmissionBuffer:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon3	equ	0xFF0
  5533                           indf0	equ	0xFEF
  5534                           postinc0	equ	0xFEE
  5535                           plusw0	equ	0xFEB
  5536                           fsr0h	equ	0xFEA
  5537                           fsr0l	equ	0xFE9
  5538                           wreg	equ	0xFE8
  5539                           indf1	equ	0xFE7
  5540                           postinc1	equ	0xFE6
  5541                           postdec1	equ	0xFE5
  5542                           plusw1	equ	0xFE3
  5543                           fsr1h	equ	0xFE2
  5544                           fsr1l	equ	0xFE1
  5545                           indf2	equ	0xFDF
  5546                           postinc2	equ	0xFDE
  5547                           postdec2	equ	0xFDD
  5548                           plusw2	equ	0xFDB
  5549                           fsr2h	equ	0xFDA
  5550                           fsr2l	equ	0xFD9
  5551                           status	equ	0xFD8
  5552                           
  5553 ;; *************** function _handleStackBackgroundTasks *****************
  5554 ;; Defined at:
  5555 ;;		line 36 in file "src/stack/backgroundTasks.c"
  5556 ;; Parameters:    Size  Location     Type
  5557 ;;  stack           2  133[BANK1 ] PTR struct stack
  5558 ;;		 -> stack(123), 
  5559 ;; Auto vars:     Size  Location     Type
  5560 ;;  foo            10    0        unsigned char [10]
  5561 ;;  errIPv4         3  142[BANK1 ] struct error
  5562 ;;  errArp          3  137[BANK1 ] struct error
  5563 ;;  intf            2  140[BANK1 ] struct interruptFlags
  5564 ;; Return value:  Size  Location     Type
  5565 ;;                  1    wreg      void 
  5566 ;; Registers used:
  5567 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5568 ;; Tracked objects:
  5569 ;;		On entry : 0/0
  5570 ;;		On exit  : 0/0
  5571 ;;		Unchanged: 0/0
  5572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5573 ;;      Params:         0       0       2       0       0       0       0       0       0
  5574 ;;      Locals:         0       0       8       0       0       0       0       0       0
  5575 ;;      Temps:          0       0       2       0       0       0       0       0       0
  5576 ;;      Totals:         0       0      12       0       0       0       0       0       0
  5577 ;;Total ram usage:       12 bytes
  5578 ;; Hardware stack levels used:    1
  5579 ;; Hardware stack levels required when called:   13
  5580 ;; This function calls:
  5581 ;;		_UARTTransmitText
  5582 ;;		_arp_background
  5583 ;;		_arp_init
  5584 ;;		_ethernetController_clearInterruptFlag
  5585 ;;		_ethernetController_newPacketAvailable
  5586 ;;		_ethernetController_pollInterruptFlags
  5587 ;;		_ethernetController_setLEDConfig
  5588 ;;		_ethernetController_updateLinkStatus
  5589 ;;		_ethernet_rxGetNewFrame
  5590 ;;		_ipAdressToString
  5591 ;;		_ipv4_background
  5592 ;;		_ipv4_sendFrame
  5593 ;;		_ipv4_setIPSourceAddress
  5594 ;; This function is called by:
  5595 ;;		_main
  5596 ;; This function uses a non-reentrant model
  5597 ;;
  5598                           
  5599                           	psect	text10
  5600  002366                     __ptext10:
  5601                           	opt stack 0
  5602  002366                     _handleStackBackgroundTasks:
  5603                           	opt stack 17
  5604                           
  5605                           ;backgroundTasks.c: 37: unsigned char foo[10];
  5606                           ;backgroundTasks.c: 38: error_t errArp;
  5607                           ;backgroundTasks.c: 39: error_t errIPv4;
  5608                           ;backgroundTasks.c: 40: interruptFlags_t intf;
  5609                           ;backgroundTasks.c: 42: intf = ethernetController_pollInterruptFlags();
  5610                           
  5611                           ;incstack = 0
  5612  002366  EC07  F01A         	call	_ethernetController_pollInterruptFlags	;wreg free
  5613  00236A  C078  F18C         	movff	?_ethernetController_pollInterruptFlags,handleStackBackgroundTasks@intf
  5614  00236E  C079  F18D         	movff	?_ethernetController_pollInterruptFlags+1,handleStackBackgroundTasks@intf+1
  5615                           
  5616                           ;backgroundTasks.c: 43: if (intf.LINKIF) {
  5617  002372  0101               	movlb	1	; () banked
  5618  002374  A78C               	btfss	handleStackBackgroundTasks@intf& (0+255),3,b
  5619  002376  D044               	goto	l524
  5620                           
  5621                           ; BSR set to: 1
  5622                           ;backgroundTasks.c: 45: ethernetController_updateLinkStatus(&(stack->ethernet));
  5623  002378  0E22               	movlw	34
  5624  00237A  2585               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5625  00237C  0100               	movlb	0	; () banked
  5626  00237E  6F80               	movwf	ethernetController_updateLinkStatus@state& (0+255),b
  5627  002380  0E00               	movlw	0
  5628  002382  0101               	movlb	1	; () banked
  5629  002384  2186               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5630  002386  0100               	movlb	0	; () banked
  5631  002388  6F81               	movwf	(ethernetController_updateLinkStatus@state+1)& (0+255),b
  5632  00238A  ECCA  F022         	call	_ethernetController_updateLinkStatus	;wreg free
  5633                           
  5634                           ;backgroundTasks.c: 47: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5635  00238E  0101               	movlb	1	; () banked
  5636  002390  EE20 F022          	lfsr	2,34
  5637  002394  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5638  002396  26D9               	addwf	fsr2l,f,c
  5639  002398  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5640  00239A  22DA               	addwfc	fsr2h,f,c
  5641  00239C  04DE               	decf	postinc2,w,c
  5642  00239E  A4D8               	btfss	status,2,c
  5643  0023A0  D01E               	goto	l525
  5644                           
  5645                           ; BSR set to: 1
  5646                           ;backgroundTasks.c: 48: ethernetController_setLEDConfig(LEDA, LED_ON);
  5647  0023A2  0E00               	movlw	0
  5648  0023A4  0100               	movlb	0	; () banked
  5649  0023A6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5650  0023A8  0E00               	movlw	0
  5651  0023AA  EC83  F022         	call	_ethernetController_setLEDConfig
  5652                           
  5653                           ;backgroundTasks.c: 49: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5654  0023AE  0E02               	movlw	2
  5655  0023B0  0100               	movlb	0	; () banked
  5656  0023B2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5657  0023B4  0E01               	movlw	1
  5658  0023B6  EC83  F022         	call	_ethernetController_setLEDConfig
  5659                           
  5660                           ;backgroundTasks.c: 50: ipv4_setIPSourceAddress(stack->source);
  5661  0023BA  0101               	movlb	1	; () banked
  5662  0023BC  EE20 F077          	lfsr	2,119
  5663  0023C0  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5664  0023C2  26D9               	addwf	fsr2l,f,c
  5665  0023C4  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5666  0023C6  22DA               	addwfc	fsr2h,f,c
  5667  0023C8  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5668  0023CC  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5669  0023D0  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5670  0023D4  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5671  0023D8  EC5C  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5672                           
  5673                           ;backgroundTasks.c: 51: } else {
  5674  0023DC  D00E               	goto	l526
  5675  0023DE                     l525:
  5676                           
  5677                           ;backgroundTasks.c: 52: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5678  0023DE  0E01               	movlw	1
  5679  0023E0  0100               	movlb	0	; () banked
  5680  0023E2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5681  0023E4  0E00               	movlw	0
  5682  0023E6  EC83  F022         	call	_ethernetController_setLEDConfig
  5683                           
  5684                           ;backgroundTasks.c: 53: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5685  0023EA  0E01               	movlw	1
  5686  0023EC  0100               	movlb	0	; () banked
  5687  0023EE  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5688  0023F0  0E01               	movlw	1
  5689  0023F2  EC83  F022         	call	_ethernetController_setLEDConfig
  5690                           
  5691                           ;backgroundTasks.c: 54: arp_init();
  5692  0023F6  ECC8  F024         	call	_arp_init	;wreg free
  5693  0023FA                     l526:
  5694                           
  5695                           ;backgroundTasks.c: 55: }
  5696                           ;backgroundTasks.c: 56: ethernetController_clearInterruptFlag(LINKIF);
  5697  0023FA  0E0B               	movlw	11
  5698  0023FC  ECAA  F02B         	call	_ethernetController_clearInterruptFlag
  5699  002400                     l524:
  5700                           
  5701                           ;backgroundTasks.c: 57: }
  5702                           ;backgroundTasks.c: 58: if (intf.PKTIF) {
  5703  002400  0101               	movlb	1	; () banked
  5704  002402  A98C               	btfss	handleStackBackgroundTasks@intf& (0+255),4,b
  5705  002404  D00B               	goto	l528
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;backgroundTasks.c: 60: if (ethernetController_newPacketAvailable()) {
  5709  002406  EC79  F02B         	call	_ethernetController_newPacketAvailable	;wreg free
  5710  00240A  0900               	iorlw	0
  5711  00240C  B4D8               	btfsc	status,2,c
  5712  00240E  D006               	goto	l528
  5713                           
  5714                           ;backgroundTasks.c: 62: ethernet_rxGetNewFrame(&stack->newReceivedFrame);
  5715  002410  C185  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  5716  002414  C186  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  5717  002418  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  5718  00241C                     l528:
  5719                           
  5720                           ;backgroundTasks.c: 63: }
  5721                           ;backgroundTasks.c: 64: }
  5722                           ;backgroundTasks.c: 71: if (stack->background.fPacketPending == 1) {
  5723  00241C  0101               	movlb	1	; () banked
  5724  00241E  EE20 F034          	lfsr	2,52
  5725  002422  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5726  002424  26D9               	addwf	fsr2l,f,c
  5727  002426  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5728  002428  22DA               	addwfc	fsr2h,f,c
  5729  00242A  04DE               	decf	postinc2,w,c
  5730  00242C  A4D8               	btfss	status,2,c
  5731  00242E  D033               	goto	l530
  5732                           
  5733                           ; BSR set to: 1
  5734                           ;backgroundTasks.c: 74: UARTTransmitText(".");
  5735  002430  0E83               	movlw	low (STR_57+53)
  5736  002432  0100               	movlb	0	; () banked
  5737  002434  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5738  002436  0E7A               	movlw	high (STR_57+53)
  5739  002438  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5740  00243A  EC06  F027         	call	_UARTTransmitText	;wreg free
  5741                           
  5742                           ;backgroundTasks.c: 75: if (ipv4_sendFrame(stack->pendingPacketToSend).code == (uint16_t
      +                          )0) {
  5743  00243E  0101               	movlb	1	; () banked
  5744  002440  EE20 F035          	lfsr	2,53
  5745  002444  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5746  002446  26D9               	addwf	fsr2l,f,c
  5747  002448  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5748  00244A  22DA               	addwfc	fsr2h,f,c
  5749  00244C  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  5750  002450  0E41               	movlw	65
  5751  002452                     u12391:
  5752  002452  CFDB FFEB          	movff	plusw2,plusw0
  5753  002456  06E8               	decf	wreg,f,c
  5754  002458  E2FC               	bc	u12391
  5755  00245A  ECBD  F012         	call	_ipv4_sendFrame	;wreg free
  5756  00245E  0E34               	movlw	low ?_ipv4_sendFrame
  5757  002460  6ED9               	movwf	fsr2l,c
  5758  002462  0E01               	movlw	high ?_ipv4_sendFrame
  5759  002464  6EDA               	movwf	fsr2h,c
  5760  002466  0E01               	movlw	1
  5761  002468  26D9               	addwf	fsr2l,f,c
  5762  00246A  0E00               	movlw	0
  5763  00246C  22DA               	addwfc	fsr2h,f,c
  5764  00246E  50DE               	movf	postinc2,w,c
  5765  002470  10DE               	iorwf	postinc2,w,c
  5766  002472  A4D8               	btfss	status,2,c
  5767  002474  D010               	goto	l530
  5768                           
  5769                           ;backgroundTasks.c: 76: UARTTransmitText("[IPv4]: Packet was sent successfully.\n\r");
  5770  002476  0E14               	movlw	low STR_22
  5771  002478  0100               	movlb	0	; () banked
  5772  00247A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5773  00247C  0E7B               	movlw	high STR_22
  5774  00247E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5775  002480  EC06  F027         	call	_UARTTransmitText	;wreg free
  5776                           
  5777                           ;backgroundTasks.c: 77: stack->background.fPacketPending=0;
  5778  002484  0101               	movlb	1	; () banked
  5779  002486  EE20 F034          	lfsr	2,52
  5780  00248A  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5781  00248C  26D9               	addwf	fsr2l,f,c
  5782  00248E  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5783  002490  22DA               	addwfc	fsr2h,f,c
  5784  002492  0E00               	movlw	0
  5785  002494  6EDF               	movwf	indf2,c
  5786  002496                     l530:
  5787                           
  5788                           ;backgroundTasks.c: 78: }
  5789                           ;backgroundTasks.c: 79: }
  5790                           ;backgroundTasks.c: 82: errArp = arp_background(stack->ethernet.link);
  5791                           
  5792                           ; BSR set to: 1
  5793                           
  5794                           ; BSR set to: 1
  5795  002496  0101               	movlb	1	; () banked
  5796  002498  EE20 F022          	lfsr	2,34
  5797  00249C  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5798  00249E  26D9               	addwf	fsr2l,f,c
  5799  0024A0  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5800  0024A2  22DA               	addwfc	fsr2h,f,c
  5801  0024A4  50DF               	movf	indf2,w,c
  5802  0024A6  EC6A  F016         	call	_arp_background
  5803  0024AA  C151  F189         	movff	?_arp_background,handleStackBackgroundTasks@errArp
  5804  0024AE  C152  F18A         	movff	?_arp_background+1,handleStackBackgroundTasks@errArp+1
  5805  0024B2  C153  F18B         	movff	?_arp_background+2,handleStackBackgroundTasks@errArp+2
  5806                           
  5807                           ;backgroundTasks.c: 83: errIPv4 = ipv4_background(stack->ethernet.link);
  5808  0024B6  0101               	movlb	1	; () banked
  5809  0024B8  EE20 F022          	lfsr	2,34
  5810  0024BC  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5811  0024BE  26D9               	addwf	fsr2l,f,c
  5812  0024C0  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5813  0024C2  22DA               	addwfc	fsr2h,f,c
  5814  0024C4  50DF               	movf	indf2,w,c
  5815  0024C6  EC55  F019         	call	_ipv4_background
  5816  0024CA  C09A  F18E         	movff	?_ipv4_background,handleStackBackgroundTasks@errIPv4
  5817  0024CE  C09B  F18F         	movff	?_ipv4_background+1,handleStackBackgroundTasks@errIPv4+1
  5818  0024D2  C09C  F190         	movff	?_ipv4_background+2,handleStackBackgroundTasks@errIPv4+2
  5819                           
  5820                           ;backgroundTasks.c: 85: if (errIPv4.module == ERROR_MODULE_IPv4 &&
  5821                           ;backgroundTasks.c: 86: errIPv4.code == ERROR_IPv4_ADDRESS_ALREADY_IN_USE) {
  5822  0024D6  0E04               	movlw	4
  5823  0024D8  0101               	movlb	1	; () banked
  5824  0024DA  198E               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5825  0024DC  A4D8               	btfss	status,2,c
  5826  0024DE  0012               	return	
  5827                           
  5828                           ; BSR set to: 1
  5829  0024E0  0EF5               	movlw	245
  5830  0024E2  198F               	xorwf	(handleStackBackgroundTasks@errIPv4+1)& (0+255),w,b
  5831  0024E4  E149               	bnz	l532
  5832  0024E6  0590               	decf	(handleStackBackgroundTasks@errIPv4+2)& (0+255),w,b
  5833  0024E8  A4D8               	btfss	status,2,c
  5834  0024EA  0012               	return	
  5835                           
  5836                           ; BSR set to: 1
  5837                           ;backgroundTasks.c: 87: UARTTransmitText("[IPv4]: Address conflict detected. \n\r");
  5838  0024EC  0EB1               	movlw	low STR_23
  5839  0024EE  0100               	movlb	0	; () banked
  5840  0024F0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5841  0024F2  0E7B               	movlw	high STR_23
  5842  0024F4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5843  0024F6  EC06  F027         	call	_UARTTransmitText	;wreg free
  5844                           
  5845                           ;backgroundTasks.c: 88: stack->source.address[3]++;
  5846  0024FA  0101               	movlb	1	; () banked
  5847  0024FC  EE20 F07A          	lfsr	2,122
  5848  002500  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5849  002502  26D9               	addwf	fsr2l,f,c
  5850  002504  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5851  002506  22DA               	addwfc	fsr2h,f,c
  5852  002508  2ADF               	incf	indf2,f,c
  5853                           
  5854                           ; BSR set to: 1
  5855                           ;backgroundTasks.c: 89: UARTTransmitText("[IPv4]: Setting IPv4 Src Address to ");
  5856  00250A  0EFC               	movlw	low STR_24
  5857  00250C  0100               	movlb	0	; () banked
  5858  00250E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5859  002510  0E7B               	movlw	high STR_24
  5860  002512  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5861  002514  EC06  F027         	call	_UARTTransmitText	;wreg free
  5862                           
  5863                           ;backgroundTasks.c: 90: UARTTransmitText(ipAdressToString(stack->source));
  5864  002518  0101               	movlb	1	; () banked
  5865  00251A  EE20 F077          	lfsr	2,119
  5866  00251E  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5867  002520  26D9               	addwf	fsr2l,f,c
  5868  002522  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5869  002524  22DA               	addwfc	fsr2h,f,c
  5870  002526  CFDE F073          	movff	postinc2,ipAdressToString@ip
  5871  00252A  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  5872  00252E  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  5873  002532  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  5874  002536  ECC6  F013         	call	_ipAdressToString	;wreg free
  5875  00253A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5876  00253E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5877  002542  EC06  F027         	call	_UARTTransmitText	;wreg free
  5878                           
  5879                           ;backgroundTasks.c: 91: UARTTransmitText("\n\r");
  5880  002546  0ED4               	movlw	low (STR_23+35)
  5881  002548  0100               	movlb	0	; () banked
  5882  00254A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5883  00254C  0E7B               	movlw	high (STR_23+35)
  5884  00254E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5885  002550  EC06  F027         	call	_UARTTransmitText	;wreg free
  5886                           
  5887                           ;backgroundTasks.c: 92: ipv4_setIPSourceAddress(stack->source);
  5888  002554  0101               	movlb	1	; () banked
  5889  002556  EE20 F077          	lfsr	2,119
  5890  00255A  5185               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5891  00255C  26D9               	addwf	fsr2l,f,c
  5892  00255E  5186               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5893  002560  22DA               	addwfc	fsr2h,f,c
  5894  002562  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5895  002566  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5896  00256A  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5897  00256E  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5898  002572  EC5C  F02B         	call	_ipv4_setIPSourceAddress	;wreg free
  5899  002576  0012               	return	
  5900  002578                     l532:
  5901  002578  0012               	return		;funcret
  5902  00257A                     __end_of_handleStackBackgroundTasks:
  5903                           	opt stack 0
  5904                           tblptru	equ	0xFF8
  5905                           tblptrh	equ	0xFF7
  5906                           tblptrl	equ	0xFF6
  5907                           tablat	equ	0xFF5
  5908                           prodh	equ	0xFF4
  5909                           prodl	equ	0xFF3
  5910                           intcon	equ	0xFF2
  5911                           intcon3	equ	0xFF0
  5912                           indf0	equ	0xFEF
  5913                           postinc0	equ	0xFEE
  5914                           plusw0	equ	0xFEB
  5915                           fsr0h	equ	0xFEA
  5916                           fsr0l	equ	0xFE9
  5917                           wreg	equ	0xFE8
  5918                           indf1	equ	0xFE7
  5919                           postinc1	equ	0xFE6
  5920                           postdec1	equ	0xFE5
  5921                           plusw1	equ	0xFE3
  5922                           fsr1h	equ	0xFE2
  5923                           fsr1l	equ	0xFE1
  5924                           indf2	equ	0xFDF
  5925                           postinc2	equ	0xFDE
  5926                           postdec2	equ	0xFDD
  5927                           plusw2	equ	0xFDB
  5928                           fsr2h	equ	0xFDA
  5929                           fsr2l	equ	0xFD9
  5930                           status	equ	0xFD8
  5931                           
  5932 ;; *************** function _ipv4_setIPSourceAddress *****************
  5933 ;; Defined at:
  5934 ;;		line 235 in file "src/stack/protocols/ipv4.c"
  5935 ;; Parameters:    Size  Location     Type
  5936 ;;  ip              4    0[BANK0 ] struct ipv4_address
  5937 ;; Auto vars:     Size  Location     Type
  5938 ;;		None
  5939 ;; Return value:  Size  Location     Type
  5940 ;;                  1    wreg      void 
  5941 ;; Registers used:
  5942 ;;		None
  5943 ;; Tracked objects:
  5944 ;;		On entry : 0/0
  5945 ;;		On exit  : 0/0
  5946 ;;		Unchanged: 0/0
  5947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5948 ;;      Params:         0       4       0       0       0       0       0       0       0
  5949 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5950 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5951 ;;      Totals:         0       4       0       0       0       0       0       0       0
  5952 ;;Total ram usage:        4 bytes
  5953 ;; Hardware stack levels used:    1
  5954 ;; Hardware stack levels required when called:    4
  5955 ;; This function calls:
  5956 ;;		Nothing
  5957 ;; This function is called by:
  5958 ;;		_handleStackBackgroundTasks
  5959 ;; This function uses a non-reentrant model
  5960 ;;
  5961                           
  5962                           	psect	text11
  5963  0056B8                     __ptext11:
  5964                           	opt stack 0
  5965  0056B8                     _ipv4_setIPSourceAddress:
  5966                           	opt stack 25
  5967                           
  5968                           ;ipv4.c: 236: ipPreliminarySource = ip;
  5969                           
  5970                           ;incstack = 0
  5971  0056B8  C060  F198         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  5972  0056BC  C061  F199         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  5973  0056C0  C062  F19A         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  5974  0056C4  C063  F19B         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  5975                           
  5976                           ;ipv4.c: 237: fSrcAddrChanged = 1;
  5977  0056C8  804F               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  5978  0056CA  0012               	return		;funcret
  5979  0056CC                     __end_of_ipv4_setIPSourceAddress:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           intcon	equ	0xFF2
  5988                           intcon3	equ	0xFF0
  5989                           indf0	equ	0xFEF
  5990                           postinc0	equ	0xFEE
  5991                           plusw0	equ	0xFEB
  5992                           fsr0h	equ	0xFEA
  5993                           fsr0l	equ	0xFE9
  5994                           wreg	equ	0xFE8
  5995                           indf1	equ	0xFE7
  5996                           postinc1	equ	0xFE6
  5997                           postdec1	equ	0xFE5
  5998                           plusw1	equ	0xFE3
  5999                           fsr1h	equ	0xFE2
  6000                           fsr1l	equ	0xFE1
  6001                           indf2	equ	0xFDF
  6002                           postinc2	equ	0xFDE
  6003                           postdec2	equ	0xFDD
  6004                           plusw2	equ	0xFDB
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _ipv4_sendFrame *****************
  6010 ;; Defined at:
  6011 ;;		line 49 in file "src/stack/protocols/ipv4.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  err             3  157[BANK0 ] struct error
  6016 ;;  index           1  156[BANK0 ] unsigned char 
  6017 ;; Return value:  Size  Location     Type
  6018 ;;                  3   52[BANK1 ] struct error
  6019 ;; Registers used:
  6020 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6021 ;; Tracked objects:
  6022 ;;		On entry : 0/0
  6023 ;;		On exit  : 0/0
  6024 ;;		Unchanged: 0/0
  6025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6026 ;;      Params:         0       0      66       0       0       0       0       0       0
  6027 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6028 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6029 ;;      Totals:         0       4      74       0       0       0       0       0       0
  6030 ;;Total ram usage:       78 bytes
  6031 ;; Hardware stack levels used:    1
  6032 ;; Hardware stack levels required when called:   11
  6033 ;; This function calls:
  6034 ;;		_UARTTransmitText
  6035 ;;		_arp_checkForEntry
  6036 ;;		_arp_getEntryFromTable
  6037 ;;		_arp_sendRequest
  6038 ;;		_ethernetController_getMacAddress
  6039 ;;		_ethernetController_sendPacket
  6040 ;;		_ethernetController_writeDestinationMACAddress
  6041 ;;		_getMillis
  6042 ;;		_ipAdressToString
  6043 ;;		_macToString
  6044 ;; This function is called by:
  6045 ;;		_handleStackBackgroundTasks
  6046 ;; This function uses a non-reentrant model
  6047 ;;
  6048                           
  6049                           	psect	text12
  6050  00257A                     __ptext12:
  6051                           	opt stack 0
  6052  00257A                     _ipv4_sendFrame:
  6053                           	opt stack 18
  6054                           
  6055                           ;ipv4.c: 50: error_t err;
  6056                           ;ipv4.c: 51: err.module = ERROR_MODULE_ARP;
  6057                           
  6058                           ;incstack = 0
  6059  00257A  0E03               	movlw	3
  6060  00257C  0100               	movlb	0	; () banked
  6061  00257E  6FFD               	movwf	ipv4_sendFrame@err& (0+255),b
  6062                           
  6063                           ;ipv4.c: 52: err.code = ERROR_ARP_WAITING;
  6064  002580  0E01               	movlw	1
  6065  002582  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6066  002584  0E91               	movlw	145
  6067  002586  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6068                           
  6069                           ; BSR set to: 0
  6070                           ;ipv4.c: 53: uint8_t index;
  6071                           ;ipv4.c: 54: uint8_t static requestCounter = 0;
  6072                           ;ipv4.c: 55: time_t static oldTime = 0;
  6073                           ;ipv4.c: 58: if (arp_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  6074  002588  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,arp_checkForEntry@ip
  6075  00258C  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,arp_checkForEntry@ip+1
  6076  002590  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,arp_checkForEntry@ip+2
  6077  002594  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,arp_checkForEntry@ip+3
  6078  002598  0EFC               	movlw	low ipv4_sendFrame@index
  6079  00259A  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
  6080  00259C  0E00               	movlw	high ipv4_sendFrame@index
  6081  00259E  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
  6082  0025A0  EC94  F020         	call	_arp_checkForEntry	;wreg free
  6083  0025A4  0900               	iorlw	0
  6084  0025A6  B4D8               	btfsc	status,2,c
  6085  0025A8  D078               	goto	l1129
  6086                           
  6087                           ;ipv4.c: 60: ipPacket.ethernet.destination = arp_getEntryFromTable(index);
  6088  0025AA  0100               	movlb	0	; () banked
  6089  0025AC  51FC               	movf	ipv4_sendFrame@index& (0+255),w,b
  6090  0025AE  ECDD  F029         	call	_arp_getEntryFromTable
  6091  0025B2  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6092  0025B6  0E05               	movlw	5
  6093  0025B8                     u12171:
  6094  0025B8  CFEB FFDB          	movff	plusw0,plusw2
  6095  0025BC  06E8               	decf	wreg,f,c
  6096  0025BE  E2FC               	bc	u12171
  6097                           
  6098                           ;ipv4.c: 61: UARTTransmitText("[IPv4]: ");
  6099  0025C0  0E80               	movlw	low STR_96
  6100  0025C2  0100               	movlb	0	; () banked
  6101  0025C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6102  0025C6  0E7F               	movlw	high STR_96
  6103  0025C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6104  0025CA  EC06  F027         	call	_UARTTransmitText	;wreg free
  6105                           
  6106                           ;ipv4.c: 62: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6107  0025CE  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6108  0025D2  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6109  0025D6  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6110  0025DA  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6111  0025DE  ECC6  F013         	call	_ipAdressToString	;wreg free
  6112  0025E2  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6113  0025E6  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6114  0025EA  EC06  F027         	call	_UARTTransmitText	;wreg free
  6115                           
  6116                           ;ipv4.c: 63: UARTTransmitText(" is at ");
  6117  0025EE  0E9B               	movlw	low STR_97
  6118  0025F0  0100               	movlb	0	; () banked
  6119  0025F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6120  0025F4  0E7F               	movlw	high STR_97
  6121  0025F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6122  0025F8  EC06  F027         	call	_UARTTransmitText	;wreg free
  6123                           
  6124                           ;ipv4.c: 64: UARTTransmitText(macToString(ipPacket.ethernet.destination));
  6125  0025FC  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6126  002600  EE00  F07A         	lfsr	0,macToString@addr
  6127  002604  0E05               	movlw	5
  6128  002606                     u12181:
  6129  002606  CFDB FFEB          	movff	plusw2,plusw0
  6130  00260A  06E8               	decf	wreg,f,c
  6131  00260C  E2FC               	bc	u12181
  6132  00260E  EC8A  F01D         	call	_macToString	;wreg free
  6133  002612  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6134  002616  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6135  00261A  EC06  F027         	call	_UARTTransmitText	;wreg free
  6136                           
  6137                           ;ipv4.c: 65: UARTTransmitText("\n\r");
  6138  00261E  0ED4               	movlw	low (STR_23+35)
  6139  002620  0100               	movlb	0	; () banked
  6140  002622  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6141  002624  0E7B               	movlw	high (STR_23+35)
  6142  002626  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6143  002628  EC06  F027         	call	_UARTTransmitText	;wreg free
  6144                           
  6145                           ;ipv4.c: 67: ipPacket.ethernet.source = ethernetController_getMacAddress();
  6146  00262C  EC02  F025         	call	_ethernetController_getMacAddress	;wreg free
  6147  002630  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  6148  002634  0E05               	movlw	5
  6149  002636                     u12191:
  6150  002636  CFEB FFDB          	movff	plusw0,plusw2
  6151  00263A  06E8               	decf	wreg,f,c
  6152  00263C  E2FC               	bc	u12191
  6153                           
  6154                           ;ipv4.c: 69: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  6155  00263E  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6156  002642  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  6157  002646  0E05               	movlw	5
  6158  002648                     u12201:
  6159  002648  CFDB FFEB          	movff	plusw2,plusw0
  6160  00264C  06E8               	decf	wreg,f,c
  6161  00264E  E2FC               	bc	u12201
  6162  002650  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6163  002654  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  6164  002658  0E08               	movlw	8
  6165  00265A                     u12211:
  6166  00265A  CFDB FFEB          	movff	plusw2,plusw0
  6167  00265E  06E8               	decf	wreg,f,c
  6168  002660  E2FC               	bc	u12211
  6169  002662  EC96  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  6170                           
  6171                           ;ipv4.c: 70: ethernetController_sendPacket(ipPacket.ethernet.memory);
  6172  002666  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6173  00266A  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  6174  00266E  0E08               	movlw	8
  6175  002670                     u12221:
  6176  002670  CFDB FFEB          	movff	plusw2,plusw0
  6177  002674  06E8               	decf	wreg,f,c
  6178  002676  E2FC               	bc	u12221
  6179  002678  EC70  F02A         	call	_ethernetController_sendPacket	;wreg free
  6180                           
  6181                           ;ipv4.c: 71: err.code = (uint16_t)0;
  6182  00267C  0E00               	movlw	0
  6183  00267E  0100               	movlb	0	; () banked
  6184  002680  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6185  002682  0E00               	movlw	0
  6186  002684  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6187                           
  6188                           ; BSR set to: 0
  6189                           ;ipv4.c: 72: oldTime = 0;
  6190  002686  0E00               	movlw	0
  6191  002688  0101               	movlb	1	; () banked
  6192  00268A  6F94               	movwf	ipv4_sendFrame@oldTime& (0+255),b
  6193  00268C  0E00               	movlw	0
  6194  00268E  6F95               	movwf	(ipv4_sendFrame@oldTime+1)& (0+255),b
  6195  002690  0E00               	movlw	0
  6196  002692  6F96               	movwf	(ipv4_sendFrame@oldTime+2)& (0+255),b
  6197  002694  0E00               	movlw	0
  6198  002696  6F97               	movwf	(ipv4_sendFrame@oldTime+3)& (0+255),b
  6199                           
  6200                           ;ipv4.c: 73: } else if ((getMillis() - oldTime) > 1000u || oldTime == 0) {
  6201  002698  D072               	goto	l1131
  6202  00269A                     l1129:
  6203                           
  6204                           ; BSR set to: 1
  6205  00269A  C194  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  6206  00269E  C195  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  6207  0026A2  C196  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  6208  0026A6  C197  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  6209  0026AA  0101               	movlb	1	; () banked
  6210  0026AC  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  6211  0026AE  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  6212  0026B0  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  6213  0026B2  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  6214  0026B4  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  6215  0026B6  0E00               	movlw	0
  6216  0026B8  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  6217  0026BA  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  6218  0026BC  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  6219  0026BE  EC8B  F02B         	call	_getMillis	;wreg free
  6220  0026C2  0101               	movlb	1	; () banked
  6221  0026C4  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  6222  0026C6  0100               	movlb	0	; () banked
  6223  0026C8  2560               	addwf	?_getMillis& (0+255),w,b
  6224  0026CA  0101               	movlb	1	; () banked
  6225  0026CC  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  6226  0026CE  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  6227  0026D0  0100               	movlb	0	; () banked
  6228  0026D2  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  6229  0026D4  0101               	movlb	1	; () banked
  6230  0026D6  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  6231  0026D8  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  6232  0026DA  0100               	movlb	0	; () banked
  6233  0026DC  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  6234  0026DE  0101               	movlb	1	; () banked
  6235  0026E0  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  6236  0026E2  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  6237  0026E4  0100               	movlb	0	; () banked
  6238  0026E6  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  6239  0026E8  0101               	movlb	1	; () banked
  6240  0026EA  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  6241  0026EC  517D               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  6242  0026EE  117C               	iorwf	(??_ipv4_sendFrame+6)& (0+255),w,b
  6243  0026F0  E10C               	bnz	l10207
  6244  0026F2  0EE9               	movlw	233
  6245  0026F4  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  6246  0026F6  0E03               	movlw	3
  6247  0026F8  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  6248  0026FA  B0D8               	btfsc	status,0,c
  6249  0026FC  D006               	goto	u12240
  6250                           
  6251                           ; BSR set to: 1
  6252  0026FE  5194               	movf	ipv4_sendFrame@oldTime& (0+255),w,b
  6253  002700  1195               	iorwf	(ipv4_sendFrame@oldTime+1)& (0+255),w,b
  6254  002702  1196               	iorwf	(ipv4_sendFrame@oldTime+2)& (0+255),w,b
  6255  002704  1197               	iorwf	(ipv4_sendFrame@oldTime+3)& (0+255),w,b
  6256  002706  A4D8               	btfss	status,2,c
  6257  002708  D03A               	goto	l1131
  6258  00270A                     u12240:
  6259  00270A                     l10207:
  6260                           
  6261                           ; BSR set to: 1
  6262                           ;ipv4.c: 74: UARTTransmitText("[IPv4]: Trying to resolve ");
  6263  00270A  0EBD               	movlw	low STR_99
  6264  00270C  0100               	movlb	0	; () banked
  6265  00270E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6266  002710  0E7D               	movlw	high STR_99
  6267  002712  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6268  002714  EC06  F027         	call	_UARTTransmitText	;wreg free
  6269                           
  6270                           ;ipv4.c: 75: UARTTransmitText(ipAdressToString(ipPacket.ipv4Header.destination));
  6271  002718  C147  F073         	movff	ipv4_sendFrame@ipPacket+19,ipAdressToString@ip
  6272  00271C  C148  F074         	movff	ipv4_sendFrame@ipPacket+20,ipAdressToString@ip+1
  6273  002720  C149  F075         	movff	ipv4_sendFrame@ipPacket+21,ipAdressToString@ip+2
  6274  002724  C14A  F076         	movff	ipv4_sendFrame@ipPacket+22,ipAdressToString@ip+3
  6275  002728  ECC6  F013         	call	_ipAdressToString	;wreg free
  6276  00272C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6277  002730  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6278  002734  EC06  F027         	call	_UARTTransmitText	;wreg free
  6279                           
  6280                           ;ipv4.c: 76: UARTTransmitText("\n\r");
  6281  002738  0ED4               	movlw	low (STR_23+35)
  6282  00273A  0100               	movlb	0	; () banked
  6283  00273C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6284  00273E  0E7B               	movlw	high (STR_23+35)
  6285  002740  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6286  002742  EC06  F027         	call	_UARTTransmitText	;wreg free
  6287                           
  6288                           ;ipv4.c: 77: oldTime = getMillis();
  6289  002746  EC8B  F02B         	call	_getMillis	;wreg free
  6290  00274A  C060  F194         	movff	?_getMillis,ipv4_sendFrame@oldTime
  6291  00274E  C061  F195         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  6292  002752  C062  F196         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  6293  002756  C063  F197         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  6294                           
  6295                           ;ipv4.c: 78: arp_sendRequest(ipPacket.ipv4Header.destination, ipPacket.ipv4Header.destin
      +                          ation);
  6296  00275A  C147  F100         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipSender
  6297  00275E  C148  F101         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipSender+1
  6298  002762  C149  F102         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipSender+2
  6299  002766  C14A  F103         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipSender+3
  6300  00276A  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipTarget
  6301  00276E  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipTarget+1
  6302  002772  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipTarget+2
  6303  002776  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipTarget+3
  6304  00277A  EC34  F022         	call	_arp_sendRequest	;wreg free
  6305  00277E                     l1131:
  6306                           
  6307                           ;ipv4.c: 79: }
  6308                           ;ipv4.c: 80: return err;
  6309  00277E  C0FD  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  6310  002782  C0FE  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  6311  002786  C0FF  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  6312  00278A  0012               	return	
  6313  00278C                     __end_of_ipv4_sendFrame:
  6314                           	opt stack 0
  6315                           tblptru	equ	0xFF8
  6316                           tblptrh	equ	0xFF7
  6317                           tblptrl	equ	0xFF6
  6318                           tablat	equ	0xFF5
  6319                           prodh	equ	0xFF4
  6320                           prodl	equ	0xFF3
  6321                           intcon	equ	0xFF2
  6322                           intcon3	equ	0xFF0
  6323                           indf0	equ	0xFEF
  6324                           postinc0	equ	0xFEE
  6325                           plusw0	equ	0xFEB
  6326                           fsr0h	equ	0xFEA
  6327                           fsr0l	equ	0xFE9
  6328                           wreg	equ	0xFE8
  6329                           indf1	equ	0xFE7
  6330                           postinc1	equ	0xFE6
  6331                           postdec1	equ	0xFE5
  6332                           plusw1	equ	0xFE3
  6333                           fsr1h	equ	0xFE2
  6334                           fsr1l	equ	0xFE1
  6335                           indf2	equ	0xFDF
  6336                           postinc2	equ	0xFDE
  6337                           postdec2	equ	0xFDD
  6338                           plusw2	equ	0xFDB
  6339                           fsr2h	equ	0xFDA
  6340                           fsr2l	equ	0xFD9
  6341                           status	equ	0xFD8
  6342                           
  6343 ;; *************** function _arp_getEntryFromTable *****************
  6344 ;; Defined at:
  6345 ;;		line 466 in file "src/stack/protocols/arp.c"
  6346 ;; Parameters:    Size  Location     Type
  6347 ;;  index           1    wreg     unsigned char 
  6348 ;; Auto vars:     Size  Location     Type
  6349 ;;  index           1    7[BANK0 ] unsigned char 
  6350 ;; Return value:  Size  Location     Type
  6351 ;;                  6    0[BANK0 ] struct macaddress
  6352 ;; Registers used:
  6353 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6354 ;; Tracked objects:
  6355 ;;		On entry : 0/0
  6356 ;;		On exit  : 0/0
  6357 ;;		Unchanged: 0/0
  6358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6359 ;;      Params:         0       7       0       0       0       0       0       0       0
  6360 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6361 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6362 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6363 ;;Total ram usage:        8 bytes
  6364 ;; Hardware stack levels used:    1
  6365 ;; Hardware stack levels required when called:    4
  6366 ;; This function calls:
  6367 ;;		Nothing
  6368 ;; This function is called by:
  6369 ;;		_ipv4_sendFrame
  6370 ;; This function uses a non-reentrant model
  6371 ;;
  6372                           
  6373                           	psect	text13
  6374  0053BA                     __ptext13:
  6375                           	opt stack 0
  6376  0053BA                     _arp_getEntryFromTable:
  6377                           	opt stack 24
  6378                           
  6379                           ;incstack = 0
  6380                           ;arp_getEntryFromTable@index stored from wreg
  6381  0053BA  0100               	movlb	0	; () banked
  6382  0053BC  6F67               	movwf	arp_getEntryFromTable@index& (0+255),b
  6383                           
  6384                           ;arp.c: 467: return arp_table[index].mac;
  6385  0053BE  0100               	movlb	0	; () banked
  6386  0053C0  5167               	movf	arp_getEntryFromTable@index& (0+255),w,b
  6387  0053C2  0D0E               	mullw	14
  6388  0053C4  0E04               	movlw	4
  6389  0053C6  26F3               	addwf	prodl,f,c
  6390  0053C8  0E00               	movlw	0
  6391  0053CA  22F4               	addwfc	prodh,f,c
  6392  0053CC  0E00               	movlw	low _arp_table
  6393  0053CE  24F3               	addwf	prodl,w,c
  6394  0053D0  6ED9               	movwf	fsr2l,c
  6395  0053D2  0E03               	movlw	high _arp_table
  6396  0053D4  20F4               	addwfc	prodh,w,c
  6397  0053D6  6EDA               	movwf	fsr2h,c
  6398  0053D8  EE00  F060         	lfsr	0,?_arp_getEntryFromTable
  6399  0053DC  0E05               	movlw	5
  6400  0053DE                     u11681:
  6401  0053DE  CFDB FFEB          	movff	plusw2,plusw0
  6402  0053E2  06E8               	decf	wreg,f,c
  6403  0053E4  E2FC               	bc	u11681
  6404  0053E6  0012               	return	
  6405  0053E8                     __end_of_arp_getEntryFromTable:
  6406                           	opt stack 0
  6407                           tblptru	equ	0xFF8
  6408                           tblptrh	equ	0xFF7
  6409                           tblptrl	equ	0xFF6
  6410                           tablat	equ	0xFF5
  6411                           prodh	equ	0xFF4
  6412                           prodl	equ	0xFF3
  6413                           intcon	equ	0xFF2
  6414                           intcon3	equ	0xFF0
  6415                           indf0	equ	0xFEF
  6416                           postinc0	equ	0xFEE
  6417                           plusw0	equ	0xFEB
  6418                           fsr0h	equ	0xFEA
  6419                           fsr0l	equ	0xFE9
  6420                           wreg	equ	0xFE8
  6421                           indf1	equ	0xFE7
  6422                           postinc1	equ	0xFE6
  6423                           postdec1	equ	0xFE5
  6424                           plusw1	equ	0xFE3
  6425                           fsr1h	equ	0xFE2
  6426                           fsr1l	equ	0xFE1
  6427                           indf2	equ	0xFDF
  6428                           postinc2	equ	0xFDE
  6429                           postdec2	equ	0xFDD
  6430                           plusw2	equ	0xFDB
  6431                           fsr2h	equ	0xFDA
  6432                           fsr2l	equ	0xFD9
  6433                           status	equ	0xFD8
  6434                           
  6435 ;; *************** function _ipv4_background *****************
  6436 ;; Defined at:
  6437 ;;		line 242 in file "src/stack/protocols/ipv4.c"
  6438 ;; Parameters:    Size  Location     Type
  6439 ;;  link            1    wreg     enum E72
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;  link            1    0[COMRAM] enum E72
  6442 ;;  err             3   63[BANK0 ] struct error
  6443 ;; Return value:  Size  Location     Type
  6444 ;;                  3   58[BANK0 ] struct error
  6445 ;; Registers used:
  6446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6452 ;;      Params:         0       3       0       0       0       0       0       0       0
  6453 ;;      Locals:         0       3       0       0       0       0       0       0       0
  6454 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6455 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6456 ;;Total ram usage:        8 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    5
  6459 ;; This function calls:
  6460 ;;		_UARTTransmitText
  6461 ;; This function is called by:
  6462 ;;		_handleStackBackgroundTasks
  6463 ;; This function uses a non-reentrant model
  6464 ;;
  6465                           
  6466                           	psect	text14
  6467  0032AA                     __ptext14:
  6468                           	opt stack 0
  6469  0032AA                     _ipv4_background:
  6470                           	opt stack 24
  6471                           
  6472                           ;ipv4.c: 243: error_t err;
  6473                           ;ipv4.c: 244: err.module = ERROR_MODULE_IPv4;
  6474                           
  6475                           ; BSR set to: 0
  6476                           ;incstack = 0
  6477  0032AA  0E04               	movlw	4
  6478  0032AC  0100               	movlb	0	; () banked
  6479  0032AE  6F9F               	movwf	ipv4_background@err& (0+255),b
  6480                           
  6481                           ;ipv4.c: 245: err.code = (uint16_t)0;
  6482  0032B0  0E00               	movlw	0
  6483  0032B2  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6484  0032B4  0E00               	movlw	0
  6485  0032B6  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;ipv4.c: 246: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  6489  0032B8  C03C  FFD9         	movff	_arpStatus,fsr2l
  6490  0032BC  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6491  0032C0  0E03               	movlw	3
  6492  0032C2  18DE               	xorwf	postinc2,w,c
  6493  0032C4  A4D8               	btfss	status,2,c
  6494  0032C6  D098               	goto	l1171
  6495                           
  6496                           ; BSR set to: 0
  6497  0032C8  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6498  0032CA  D070               	goto	l1172
  6499  0032CC  D095               	goto	l1171
  6500  0032CE                     
  6501                           ; BSR set to: 0
  6502                           ;ipv4.c: 249: err = (*arpStatus);
  6503                           
  6504                           ; BSR set to: 0
  6505  0032CE  C03C  FFD9         	movff	_arpStatus,fsr2l
  6506  0032D2  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6507  0032D6  CFDE F09F          	movff	postinc2,ipv4_background@err
  6508  0032DA  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6509  0032DE  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;ipv4.c: 250: UARTTransmitText("[IPv4]: ARP process completed.\n\r");
  6513  0032E2  0EAC               	movlw	low STR_112
  6514  0032E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6515  0032E6  0E7C               	movlw	high STR_112
  6516  0032E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6517  0032EA  EC06  F027         	call	_UARTTransmitText	;wreg free
  6518                           
  6519                           ;ipv4.c: 251: ipSource = ipPreliminarySource;
  6520  0032EE  C198  F1A4         	movff	_ipPreliminarySource,_ipSource
  6521  0032F2  C199  F1A5         	movff	_ipPreliminarySource+1,_ipSource+1
  6522  0032F6  C19A  F1A6         	movff	_ipPreliminarySource+2,_ipSource+2
  6523  0032FA  C19B  F1A7         	movff	_ipPreliminarySource+3,_ipSource+3
  6524                           
  6525                           ;ipv4.c: 252: fSrcAddrChanged = 0;
  6526  0032FE  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6527                           
  6528                           ;ipv4.c: 253: return err;
  6529  003300  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6530  003304  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6531  003308  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6532  00330C  0012               	return	
  6533  00330E                     
  6534                           ;ipv4.c: 255: err = (*arpStatus);
  6535  00330E  C03C  FFD9         	movff	_arpStatus,fsr2l
  6536  003312  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6537  003316  CFDE F09F          	movff	postinc2,ipv4_background@err
  6538  00331A  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6539  00331E  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6540                           
  6541                           ;ipv4.c: 256: return err;
  6542  003322  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6543  003326  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6544  00332A  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6545  00332E  0012               	return	
  6546  003330                     
  6547                           ;ipv4.c: 258: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  6548  003330  0E01               	movlw	1
  6549  003332  0100               	movlb	0	; () banked
  6550  003334  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6551  003336  0EF5               	movlw	245
  6552  003338  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;ipv4.c: 259: UARTTransmitText("[IPv4]: Address conflict\n\r");
  6556  00333A  0EA2               	movlw	low STR_113
  6557  00333C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6558  00333E  0E7D               	movlw	high STR_113
  6559  003340  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6560  003342  EC06  F027         	call	_UARTTransmitText	;wreg free
  6561                           
  6562                           ;ipv4.c: 260: fSrcAddrChanged = 0;
  6563  003346  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6564                           
  6565                           ;ipv4.c: 261: return err;
  6566  003348  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6567  00334C  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6568  003350  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6569  003354  0012               	return	
  6570  003356                     l1177:
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;ipv4.c: 265: return err;
  6574  003356  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6575  00335A  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6576  00335E  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6577  003362  0012               	return	
  6578  003364                     
  6579                           ; BSR set to: 0
  6580                           ;ipv4.c: 267: err = (*arpStatus);
  6581                           
  6582                           ; BSR set to: 0
  6583  003364  C03C  FFD9         	movff	_arpStatus,fsr2l
  6584  003368  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6585  00336C  CFDE F09F          	movff	postinc2,ipv4_background@err
  6586  003370  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6587  003374  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6588                           
  6589                           ; BSR set to: 0
  6590                           ;ipv4.c: 268: fSrcAddrChanged = 0;
  6591  003378  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;ipv4.c: 269: return err;
  6595  00337A  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6596  00337E  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6597  003382  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6598                           
  6599                           ; BSR set to: 0
  6600  003386  0012               	return	
  6601  003388                     
  6602                           ; BSR set to: 0
  6603                           ;ipv4.c: 272: fSrcAddrChanged = 0;
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;ipv4.c: 271: case ERROR_ARP_UNKNOWN:
  6607  003388  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6608                           
  6609                           ; BSR set to: 0
  6610                           ;ipv4.c: 273: err = (*arpStatus);
  6611  00338A  C03C  FFD9         	movff	_arpStatus,fsr2l
  6612  00338E  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  6613  003392  CFDE F09F          	movff	postinc2,ipv4_background@err
  6614  003396  CFDE F0A0          	movff	postinc2,ipv4_background@err+1
  6615  00339A  CFDD F0A1          	movff	postdec2,ipv4_background@err+2
  6616                           
  6617                           ; BSR set to: 0
  6618                           ;ipv4.c: 274: return err;
  6619  00339E  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6620  0033A2  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6621  0033A6  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6622                           
  6623                           ; BSR set to: 0
  6624  0033AA  0012               	return	
  6625  0033AC                     l1172:
  6626                           
  6627                           ; BSR set to: 0
  6628                           
  6629                           ; BSR set to: 0
  6630  0033AC  EE20 F001          	lfsr	2,1
  6631  0033B0  503C               	movf	_arpStatus,w,c
  6632  0033B2  26D9               	addwf	fsr2l,f,c
  6633  0033B4  503D               	movf	_arpStatus+1,w,c
  6634  0033B6  22DA               	addwfc	fsr2h,f,c
  6635  0033B8  CFDE F09D          	movff	postinc2,??_ipv4_background
  6636  0033BC  CFDD F09E          	movff	postdec2,??_ipv4_background+1
  6637                           
  6638                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6639                           ; Switch size 1, requested type "space"
  6640                           ; Number of cases is 2, Range of values is 0 to 1
  6641                           ; switch strategies available:
  6642                           ; Name         Instructions Cycles
  6643                           ; simple_byte            7     4 (average)
  6644                           ;	Chosen strategy is simple_byte
  6645  0033C0  519E               	movf	(??_ipv4_background+1)& (0+255),w,b
  6646  0033C2  0A00               	xorlw	0	; case 0
  6647  0033C4  B4D8               	btfsc	status,2,c
  6648  0033C6  D004               	goto	l11049
  6649  0033C8  0A01               	xorlw	1	; case 1
  6650  0033CA  B4D8               	btfsc	status,2,c
  6651  0033CC  D006               	goto	l11051
  6652  0033CE  D7DC               	goto	l1179
  6653  0033D0                     l11049:
  6654                           
  6655                           ; BSR set to: 0
  6656                           ; Switch size 1, requested type "space"
  6657                           ; Number of cases is 1, Range of values is 0 to 0
  6658                           ; switch strategies available:
  6659                           ; Name         Instructions Cycles
  6660                           ; simple_byte            4     3 (average)
  6661                           ;	Chosen strategy is simple_byte
  6662  0033D0  519D               	movf	??_ipv4_background& (0+255),w,b
  6663  0033D2  0A00               	xorlw	0	; case 0
  6664  0033D4  B4D8               	btfsc	status,2,c
  6665  0033D6  D77B               	goto	l1173
  6666  0033D8  D7D7               	goto	l1179
  6667  0033DA                     l11051:
  6668                           
  6669                           ; BSR set to: 0
  6670                           ; Switch size 1, requested type "space"
  6671                           ; Number of cases is 5, Range of values is 145 to 243
  6672                           ; switch strategies available:
  6673                           ; Name         Instructions Cycles
  6674                           ; simple_byte           16     9 (average)
  6675                           ;	Chosen strategy is simple_byte
  6676  0033DA  519D               	movf	??_ipv4_background& (0+255),w,b
  6677  0033DC  0A91               	xorlw	145	; case 145
  6678  0033DE  B4D8               	btfsc	status,2,c
  6679  0033E0  D796               	goto	l1175
  6680  0033E2  0A02               	xorlw	2	; case 147
  6681  0033E4  B4D8               	btfsc	status,2,c
  6682  0033E6  D7B7               	goto	l1177
  6683  0033E8  0A06               	xorlw	6	; case 149
  6684  0033EA  B4D8               	btfsc	status,2,c
  6685  0033EC  D7A1               	goto	l1176
  6686  0033EE  0A03               	xorlw	3	; case 150
  6687  0033F0  B4D8               	btfsc	status,2,c
  6688  0033F2  D7B8               	goto	l1178
  6689  0033F4  0A65               	xorlw	101	; case 243
  6690  0033F6  D7C8               	goto	l1179
  6691  0033F8                     l1171:
  6692                           
  6693                           ; BSR set to: 0
  6694                           ;ipv4.c: 277: err.code = ERROR_IPv4_UNKNOWN;
  6695                           
  6696                           ; BSR set to: 0
  6697  0033F8  0E02               	movlw	2
  6698  0033FA  6FA1               	movwf	(ipv4_background@err+2)& (0+255),b
  6699  0033FC  0E57               	movlw	87
  6700  0033FE  6FA0               	movwf	(ipv4_background@err+1)& (0+255),b
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;ipv4.c: 278: return err;
  6704                           
  6705                           ; BSR set to: 0
  6706  003400  C09F  F09A         	movff	ipv4_background@err,?_ipv4_background
  6707  003404  C0A0  F09B         	movff	ipv4_background@err+1,?_ipv4_background+1
  6708  003408  C0A1  F09C         	movff	ipv4_background@err+2,?_ipv4_background+2
  6709  00340C  0012               	return	
  6710  00340E                     __end_of_ipv4_background:
  6711                           	opt stack 0
  6712                           tblptru	equ	0xFF8
  6713                           tblptrh	equ	0xFF7
  6714                           tblptrl	equ	0xFF6
  6715                           tablat	equ	0xFF5
  6716                           prodh	equ	0xFF4
  6717                           prodl	equ	0xFF3
  6718                           intcon	equ	0xFF2
  6719                           intcon3	equ	0xFF0
  6720                           indf0	equ	0xFEF
  6721                           postinc0	equ	0xFEE
  6722                           plusw0	equ	0xFEB
  6723                           fsr0h	equ	0xFEA
  6724                           fsr0l	equ	0xFE9
  6725                           wreg	equ	0xFE8
  6726                           indf1	equ	0xFE7
  6727                           postinc1	equ	0xFE6
  6728                           postdec1	equ	0xFE5
  6729                           plusw1	equ	0xFE3
  6730                           fsr1h	equ	0xFE2
  6731                           fsr1l	equ	0xFE1
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           plusw2	equ	0xFDB
  6736                           fsr2h	equ	0xFDA
  6737                           fsr2l	equ	0xFD9
  6738                           status	equ	0xFD8
  6739                           
  6740 ;; *************** function _ethernet_rxGetNewFrame *****************
  6741 ;; Defined at:
  6742 ;;		line 55 in file "src/eth/ethernet.c"
  6743 ;; Parameters:    Size  Location     Type
  6744 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  6745 ;;		 -> stack(123), 
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;  err             3  130[BANK1 ] struct error
  6748 ;; Return value:  Size  Location     Type
  6749 ;;                  3  120[BANK1 ] struct error
  6750 ;; Registers used:
  6751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6752 ;; Tracked objects:
  6753 ;;		On entry : 0/0
  6754 ;;		On exit  : 0/0
  6755 ;;		Unchanged: 0/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6757 ;;      Params:         0       0       2       0       0       0       0       0       0
  6758 ;;      Locals:         0       0       3       0       0       0       0       0       0
  6759 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6760 ;;      Totals:         0       0      13       0       0       0       0       0       0
  6761 ;;Total ram usage:       13 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:   12
  6764 ;; This function calls:
  6765 ;;		_UARTTransmitInt
  6766 ;;		_UARTTransmitText
  6767 ;;		_arp_handleNewPacket
  6768 ;;		_etherTypeToString
  6769 ;;		_ethernetController_dropPacket
  6770 ;;		_ethernetController_getEtherTypeField
  6771 ;;		_ethernetController_getNextPacketPointer
  6772 ;;		_ethernetController_getRSV
  6773 ;;		_ethernetController_updateNextPacketPointer
  6774 ;;		_getMillis
  6775 ;;		_intToString
  6776 ;;		_ipv4_handleNewPacket
  6777 ;;		_macToString
  6778 ;; This function is called by:
  6779 ;;		_handleStackBackgroundTasks
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           	psect	text15
  6784  0000EC                     __ptext15:
  6785                           	opt stack 0
  6786  0000EC                     _ethernet_rxGetNewFrame:
  6787                           	opt stack 17
  6788                           
  6789                           ;ethernet.c: 56: uint32_t static counter = 0;
  6790                           ;ethernet.c: 57: error_t err;
  6791                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  6792                           
  6793                           ;incstack = 0
  6794  0000EC  0E02               	movlw	2
  6795  0000EE  0101               	movlb	1	; () banked
  6796  0000F0  6F82               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  6797                           
  6798                           ;ethernet.c: 59: err.code = (uint16_t)0;
  6799  0000F2  0E00               	movlw	0
  6800  0000F4  6F84               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  6801  0000F6  0E00               	movlw	0
  6802  0000F8  6F83               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  6803                           
  6804                           ; BSR set to: 1
  6805                           ;ethernet.c: 62: frame->tReceived = getMillis();
  6806  0000FA  EC8B  F02B         	call	_getMillis	;wreg free
  6807  0000FE  0101               	movlb	1	; () banked
  6808  000100  EE20 F01E          	lfsr	2,30
  6809  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6810  000106  26D9               	addwf	fsr2l,f,c
  6811  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6812  00010A  22DA               	addwfc	fsr2h,f,c
  6813  00010C  0100               	movlb	0	; () banked
  6814  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  6815  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  6816  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  6817  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  6818                           
  6819                           ; BSR set to: 0
  6820                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  6821  00011E  ECA3  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
  6822  000122  0101               	movlb	1	; () banked
  6823  000124  EE20 F010          	lfsr	2,16
  6824  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6825  00012A  26D9               	addwf	fsr2l,f,c
  6826  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6827  00012E  22DA               	addwfc	fsr2h,f,c
  6828  000130  0100               	movlb	0	; () banked
  6829  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  6830  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  6831                           
  6832                           ; BSR set to: 0
  6833                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  6834  00013A  EC15  F024         	call	_ethernetController_updateNextPacketPointer	;wreg free
  6835                           
  6836                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  6837  00013E  0101               	movlb	1	; () banked
  6838  000140  EE20 F016          	lfsr	2,22
  6839  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6840  000146  26D9               	addwf	fsr2l,f,c
  6841  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6842  00014A  22DA               	addwfc	fsr2h,f,c
  6843  00014C  0E01               	movlw	1
  6844  00014E  6EDF               	movwf	indf2,c
  6845                           
  6846                           ; BSR set to: 1
  6847                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  6848  000150  EE20 F010          	lfsr	2,16
  6849  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6850  000156  26D9               	addwf	fsr2l,f,c
  6851  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6852  00015A  22DA               	addwfc	fsr2h,f,c
  6853  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  6854  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  6855  000164  EC8E  F024         	call	_ethernetController_getRSV	;wreg free
  6856  000168  0101               	movlb	1	; () banked
  6857  00016A  EE20 F019          	lfsr	2,25
  6858  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6859  000170  26D9               	addwf	fsr2l,f,c
  6860  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6861  000174  22DA               	addwfc	fsr2h,f,c
  6862  000176  0E04               	movlw	4
  6863  000178                     u12051:
  6864  000178  CFEB FFDB          	movff	plusw0,plusw2
  6865  00017C  06E8               	decf	wreg,f,c
  6866  00017E  E2FC               	bc	u12051
  6867                           
  6868                           ; BSR set to: 1
  6869                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  6870  000180  EE20 F019          	lfsr	2,25
  6871  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6872  000186  26D9               	addwf	fsr2l,f,c
  6873  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6874  00018A  22DA               	addwfc	fsr2h,f,c
  6875  00018C  EE10 F014          	lfsr	1,20
  6876  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6877  000192  26E1               	addwf	fsr1l,f,c
  6878  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6879  000196  22E2               	addwfc	fsr1h,f,c
  6880  000198  CFDE FFE6          	movff	postinc2,postinc1
  6881  00019C  CFDD FFE5          	movff	postdec2,postdec1
  6882                           
  6883                           ; BSR set to: 1
  6884                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  6885  0001A0  EE20 F014          	lfsr	2,20
  6886  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6887  0001A6  26D9               	addwf	fsr2l,f,c
  6888  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6889  0001AA  22DA               	addwfc	fsr2h,f,c
  6890  0001AC  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  6891  0001B0  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6892  0001B4  EE20 F010          	lfsr	2,16
  6893  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6894  0001BA  26D9               	addwf	fsr2l,f,c
  6895  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6896  0001BE  22DA               	addwfc	fsr2h,f,c
  6897  0001C0  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6898  0001C4  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6899  0001C8  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6900  0001CA  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6901  0001CC  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6902  0001CE  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6903  0001D0  0E60               	movlw	96
  6904  0001D2  5D7D               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6905  0001D4  A0D8               	btfss	status,0,c
  6906  0001D6  D03B               	goto	l366
  6907                           
  6908                           ; BSR set to: 1
  6909                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  6910  0001D8  0E00               	movlw	0
  6911  0001DA  6F7A               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  6912  0001DC  0E30               	movlw	48
  6913  0001DE  6F7B               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  6914  0001E0  EE20 F014          	lfsr	2,20
  6915  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6916  0001E6  26D9               	addwf	fsr2l,f,c
  6917  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6918  0001EA  22DA               	addwfc	fsr2h,f,c
  6919  0001EC  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6920  0001F0  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6921  0001F4  0EFF               	movlw	255
  6922  0001F6  6F7E               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  6923  0001F8  0E2F               	movlw	47
  6924  0001FA  6F7F               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  6925  0001FC  EE20 F010          	lfsr	2,16
  6926  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6927  000202  26D9               	addwf	fsr2l,f,c
  6928  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6929  000206  22DA               	addwfc	fsr2h,f,c
  6930  000208  CFDE F180          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  6931  00020C  CFDD F181          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  6932  000210  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6933  000212  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6934  000214  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6935  000216  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6936  000218  517E               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  6937  00021A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6938  00021C  517F               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  6939  00021E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6940  000220  1F80               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6941  000222  1F81               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6942  000224  4B80               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6943  000226  2B81               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6944  000228  517C               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  6945  00022A  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6946  00022C  517D               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  6947  00022E  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6948  000230  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6949  000232  2780               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  6950  000234  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6951  000236  2381               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  6952  000238  EE20 F012          	lfsr	2,18
  6953  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6954  00023E  26D9               	addwf	fsr2l,f,c
  6955  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6956  000242  22DA               	addwfc	fsr2h,f,c
  6957  000244  C180  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  6958  000248  C181  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  6959                           
  6960                           ;ethernet.c: 74: } else {
  6961  00024C  D022               	goto	l367
  6962  00024E                     l366:
  6963                           
  6964                           ; BSR set to: 1
  6965                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  6966                           
  6967                           ; BSR set to: 1
  6968  00024E  EE20 F014          	lfsr	2,20
  6969  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6970  000254  26D9               	addwf	fsr2l,f,c
  6971  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6972  000258  22DA               	addwfc	fsr2h,f,c
  6973  00025A  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  6974  00025E  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6975  000262  EE20 F010          	lfsr	2,16
  6976  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6977  000268  26D9               	addwf	fsr2l,f,c
  6978  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6979  00026C  22DA               	addwfc	fsr2h,f,c
  6980  00026E  CFDE F17C          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  6981  000272  CFDD F17D          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  6982  000276  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6983  000278  277C               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  6984  00027A  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6985  00027C  237D               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  6986  00027E  EE20 F012          	lfsr	2,18
  6987  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6988  000284  26D9               	addwf	fsr2l,f,c
  6989  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6990  000288  22DA               	addwfc	fsr2h,f,c
  6991  00028A  C17C  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  6992  00028E  C17D  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  6993  000292                     l367:
  6994                           
  6995                           ; BSR set to: 1
  6996                           ;ethernet.c: 76: }
  6997                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  6998                           
  6999                           ; BSR set to: 1
  7000  000292  EE20 F010          	lfsr	2,16
  7001  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7002  000298  26D9               	addwf	fsr2l,f,c
  7003  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7004  00029C  22DA               	addwfc	fsr2h,f,c
  7005  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  7006  0002A2  0E08               	movlw	8
  7007  0002A4                     u12071:
  7008  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  7009  0002A8  06E8               	decf	wreg,f,c
  7010  0002AA  E2FC               	bc	u12071
  7011  0002AC  EC75  F025         	call	_ethernetController_getEtherTypeField	;wreg free
  7012  0002B0  0101               	movlb	1	; () banked
  7013  0002B2  EE20 F00E          	lfsr	2,14
  7014  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7015  0002B8  26D9               	addwf	fsr2l,f,c
  7016  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7017  0002BC  22DA               	addwfc	fsr2h,f,c
  7018  0002BE  0100               	movlb	0	; () banked
  7019  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  7020  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  7021                           
  7022                           ; BSR set to: 0
  7023                           ;ethernet.c: 79: UARTTransmitText("[");
  7024  0002C8  0EC2               	movlw	low (STR_72+3)
  7025  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7026  0002CC  0E7F               	movlw	high (STR_72+3)
  7027  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7028  0002D0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7029                           
  7030                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  7031  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  7032  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  7033  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  7034  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  7035  0002E4  EC94  F029         	call	_intToString	;wreg free
  7036  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7037  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7038  0002F0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7039  0002F4  0E01               	movlw	1
  7040  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  7041  0002F8  0E00               	movlw	0
  7042  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  7043  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  7044  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  7045                           
  7046                           ;ethernet.c: 81: UARTTransmitText("]");
  7047  000300  0EFA               	movlw	low (STR_19+1)
  7048  000302  0100               	movlb	0	; () banked
  7049  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7050  000306  0E7F               	movlw	high (STR_19+1)
  7051  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7052  00030A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7053                           
  7054                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  7055  00030E  0101               	movlb	1	; () banked
  7056  000310  EE20 F01B          	lfsr	2,27
  7057  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7058  000316  26D9               	addwf	fsr2l,f,c
  7059  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7060  00031A  22DA               	addwfc	fsr2h,f,c
  7061  00031C  AEDF               	btfss	indf2,7,c
  7062  00031E  D007               	goto	l368
  7063                           
  7064                           ; BSR set to: 1
  7065                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  7066  000320  0E55               	movlw	low STR_3
  7067  000322  0100               	movlb	0	; () banked
  7068  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7069  000326  0E7F               	movlw	high STR_3
  7070  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7071  00032A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7072  00032E                     l368:
  7073                           
  7074                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  7075  00032E  0101               	movlb	1	; () banked
  7076  000330  EE20 F01D          	lfsr	2,29
  7077  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7078  000336  26D9               	addwf	fsr2l,f,c
  7079  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7080  00033A  22DA               	addwfc	fsr2h,f,c
  7081  00033C  A4DF               	btfss	indf2,2,c
  7082  00033E  D007               	goto	l369
  7083                           
  7084                           ; BSR set to: 1
  7085                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  7086  000340  0E76               	movlw	low STR_4
  7087  000342  0100               	movlb	0	; () banked
  7088  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7089  000346  0E7F               	movlw	high STR_4
  7090  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7091  00034A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7092  00034E                     l369:
  7093                           
  7094                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  7095  00034E  0101               	movlb	1	; () banked
  7096  000350  EE20 F01B          	lfsr	2,27
  7097  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7098  000356  26D9               	addwf	fsr2l,f,c
  7099  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7100  00035A  22DA               	addwfc	fsr2h,f,c
  7101  00035C  BADF               	btfsc	indf2,5,c
  7102  00035E  D007               	goto	l370
  7103                           
  7104                           ; BSR set to: 1
  7105                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  7106  000360  0ED9               	movlw	low STR_5
  7107  000362  0100               	movlb	0	; () banked
  7108  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7109  000366  0E7E               	movlw	high STR_5
  7110  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7111  00036A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7112  00036E                     l370:
  7113                           
  7114                           ;ethernet.c: 91: UARTTransmitText("[");
  7115  00036E  0EC2               	movlw	low (STR_72+3)
  7116  000370  0100               	movlb	0	; () banked
  7117  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7118  000374  0E7F               	movlw	high (STR_72+3)
  7119  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7120  000378  EC06  F027         	call	_UARTTransmitText	;wreg free
  7121                           
  7122                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  7123  00037C  0101               	movlb	1	; () banked
  7124  00037E  EE20 F01E          	lfsr	2,30
  7125  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7126  000384  26D9               	addwf	fsr2l,f,c
  7127  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7128  000388  22DA               	addwfc	fsr2h,f,c
  7129  00038A  CFDE F084          	movff	postinc2,intToString@val
  7130  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  7131  000392  CFDE F086          	movff	postinc2,intToString@val+2
  7132  000396  CFDE F087          	movff	postinc2,intToString@val+3
  7133  00039A  EC94  F029         	call	_intToString	;wreg free
  7134  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7135  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7136  0003A6  EC06  F027         	call	_UARTTransmitText	;wreg free
  7137                           
  7138                           ;ethernet.c: 93: UARTTransmitText("]");
  7139  0003AA  0EFA               	movlw	low (STR_19+1)
  7140  0003AC  0100               	movlb	0	; () banked
  7141  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7142  0003B0  0E7F               	movlw	high (STR_19+1)
  7143  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7144  0003B4  EC06  F027         	call	_UARTTransmitText	;wreg free
  7145                           
  7146                           ;ethernet.c: 99: switch (frame->ethertype) {
  7147  0003B8  D097               	goto	l371
  7148  0003BA                     
  7149                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  7150  0003BA  0EB9               	movlw	low STR_8
  7151  0003BC  0100               	movlb	0	; () banked
  7152  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7153  0003C0  0E7F               	movlw	high STR_8
  7154  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7155  0003C4  EC06  F027         	call	_UARTTransmitText	;wreg free
  7156                           
  7157                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  7158  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  7159  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  7160  0003D0  ECBD  F014         	call	_arp_handleNewPacket	;wreg free
  7161                           
  7162                           ;ethernet.c: 103: break;
  7163  0003D4  D0A0               	goto	l373
  7164  0003D6                     
  7165                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  7166  0003D6  0EB2               	movlw	low STR_9
  7167  0003D8  0100               	movlb	0	; () banked
  7168  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7169  0003DC  0E7F               	movlw	high STR_9
  7170  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7171  0003E0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7172                           
  7173                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  7174  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  7175  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  7176  0003EC  EC94  F015         	call	_ipv4_handleNewPacket	;wreg free
  7177                           
  7178                           ;ethernet.c: 107: break;
  7179  0003F0  D092               	goto	l373
  7180  0003F2                     
  7181                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  7182  0003F2  0E35               	movlw	low STR_10
  7183  0003F4  0100               	movlb	0	; () banked
  7184  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7185  0003F8  0E7E               	movlw	high STR_10
  7186  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7187  0003FC  EC06  F027         	call	_UARTTransmitText	;wreg free
  7188                           
  7189                           ;ethernet.c: 110: UARTTransmitText("[");
  7190  000400  0EC2               	movlw	low (STR_72+3)
  7191  000402  0100               	movlb	0	; () banked
  7192  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7193  000406  0E7F               	movlw	high (STR_72+3)
  7194  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7195  00040A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7196                           
  7197                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  7198  00040E  0101               	movlb	1	; () banked
  7199  000410  EE20 F002          	lfsr	2,2
  7200  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7201  000416  26D9               	addwf	fsr2l,f,c
  7202  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7203  00041A  22DA               	addwfc	fsr2h,f,c
  7204  00041C  EE00  F07A         	lfsr	0,macToString@addr
  7205  000420  0E05               	movlw	5
  7206  000422                     u12111:
  7207  000422  CFDB FFEB          	movff	plusw2,plusw0
  7208  000426  06E8               	decf	wreg,f,c
  7209  000428  E2FC               	bc	u12111
  7210  00042A  EC8A  F01D         	call	_macToString	;wreg free
  7211  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7212  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7213  000436  EC06  F027         	call	_UARTTransmitText	;wreg free
  7214                           
  7215                           ;ethernet.c: 112: UARTTransmitText("->");
  7216  00043A  0EF3               	movlw	low STR_12
  7217  00043C  0100               	movlb	0	; () banked
  7218  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7219  000440  0E7F               	movlw	high STR_12
  7220  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7221  000444  EC06  F027         	call	_UARTTransmitText	;wreg free
  7222                           
  7223                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  7224  000448  0101               	movlb	1	; () banked
  7225  00044A  EE20 F008          	lfsr	2,8
  7226  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7227  000450  26D9               	addwf	fsr2l,f,c
  7228  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7229  000454  22DA               	addwfc	fsr2h,f,c
  7230  000456  EE00  F07A         	lfsr	0,macToString@addr
  7231  00045A  0E05               	movlw	5
  7232  00045C                     u12121:
  7233  00045C  CFDB FFEB          	movff	plusw2,plusw0
  7234  000460  06E8               	decf	wreg,f,c
  7235  000462  E2FC               	bc	u12121
  7236  000464  EC8A  F01D         	call	_macToString	;wreg free
  7237  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7238  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7239  000470  EC06  F027         	call	_UARTTransmitText	;wreg free
  7240                           
  7241                           ;ethernet.c: 114: UARTTransmitText("][");
  7242  000474  0EF6               	movlw	low STR_13
  7243  000476  0100               	movlb	0	; () banked
  7244  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7245  00047A  0E7F               	movlw	high STR_13
  7246  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7247  00047E  EC06  F027         	call	_UARTTransmitText	;wreg free
  7248                           
  7249                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  7250  000482  0101               	movlb	1	; () banked
  7251  000484  EE20 F00E          	lfsr	2,14
  7252  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7253  00048A  26D9               	addwf	fsr2l,f,c
  7254  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7255  00048E  22DA               	addwfc	fsr2h,f,c
  7256  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  7257  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  7258  000498  EC46  F028         	call	_etherTypeToString	;wreg free
  7259  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  7260  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7261  0004A4  EC06  F027         	call	_UARTTransmitText	;wreg free
  7262                           
  7263                           ;ethernet.c: 116: UARTTransmitText("][L=");
  7264  0004A8  0ED8               	movlw	low STR_14
  7265  0004AA  0100               	movlb	0	; () banked
  7266  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7267  0004AE  0E7F               	movlw	high STR_14
  7268  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7269  0004B2  EC06  F027         	call	_UARTTransmitText	;wreg free
  7270                           
  7271                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  7272  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  7273  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  7274  0004BE  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7275  0004C2  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7276  0004C6  C17A  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  7277  0004CA  C17B  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  7278  0004CE  0100               	movlb	0	; () banked
  7279  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  7280  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  7281  0004D4  EC17  F02B         	call	_UARTTransmitInt	;wreg free
  7282                           
  7283                           ;ethernet.c: 118: UARTTransmitText("] ");
  7284  0004D8  0EF0               	movlw	low STR_15
  7285  0004DA  0100               	movlb	0	; () banked
  7286  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7287  0004DE  0E7F               	movlw	high STR_15
  7288  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7289  0004E2  EC06  F027         	call	_UARTTransmitText	;wreg free
  7290                           
  7291                           ;ethernet.c: 120: }
  7292                           
  7293                           ;ethernet.c: 119: break;
  7294  0004E6  D017               	goto	l373
  7295  0004E8                     l371:
  7296  0004E8  0101               	movlb	1	; () banked
  7297  0004EA  EE20 F00E          	lfsr	2,14
  7298  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7299  0004F0  26D9               	addwf	fsr2l,f,c
  7300  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7301  0004F4  22DA               	addwfc	fsr2h,f,c
  7302  0004F6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7303  0004FA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7304                           
  7305                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7306                           ; Switch size 1, requested type "space"
  7307                           ; Number of cases is 1, Range of values is 8 to 8
  7308                           ; switch strategies available:
  7309                           ; Name         Instructions Cycles
  7310                           ; simple_byte            4     3 (average)
  7311                           ;	Chosen strategy is simple_byte
  7312  0004FE  517B               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7313  000500  0A08               	xorlw	8	; case 8
  7314  000502  A4D8               	btfss	status,2,c
  7315  000504  D776               	goto	l375
  7316                           
  7317                           ; BSR set to: 1
  7318                           ; Switch size 1, requested type "space"
  7319                           ; Number of cases is 2, Range of values is 0 to 6
  7320                           ; switch strategies available:
  7321                           ; Name         Instructions Cycles
  7322                           ; simple_byte            7     4 (average)
  7323                           ;	Chosen strategy is simple_byte
  7324  000506  517A               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7325  000508  0A00               	xorlw	0	; case 0
  7326  00050A  B4D8               	btfsc	status,2,c
  7327  00050C  D764               	goto	l374
  7328  00050E  0A06               	xorlw	6	; case 6
  7329  000510  B4D8               	btfsc	status,2,c
  7330  000512  D753               	goto	l372
  7331  000514  D76E               	goto	l375
  7332  000516                     l373:
  7333                           
  7334                           ;ethernet.c: 123: UARTTransmitText("[");
  7335                           
  7336                           ; BSR set to: 1
  7337  000516  0EC2               	movlw	low (STR_72+3)
  7338  000518  0100               	movlb	0	; () banked
  7339  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7340  00051C  0E7F               	movlw	high (STR_72+3)
  7341  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7342  000520  EC06  F027         	call	_UARTTransmitText	;wreg free
  7343                           
  7344                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  7345  000524  0101               	movlb	1	; () banked
  7346  000526  EE20 F010          	lfsr	2,16
  7347  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7348  00052C  26D9               	addwf	fsr2l,f,c
  7349  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7350  000530  22DA               	addwfc	fsr2h,f,c
  7351  000532  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7352  000536  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7353  00053A  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7354  00053E  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7355  000542  0100               	movlb	0	; () banked
  7356  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  7357  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  7358  000548  EC94  F029         	call	_intToString	;wreg free
  7359  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7360  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7361  000554  EC06  F027         	call	_UARTTransmitText	;wreg free
  7362                           
  7363                           ;ethernet.c: 125: UARTTransmitText(" to ");
  7364  000558  0E1C               	movlw	low (STR_24+32)
  7365  00055A  0100               	movlb	0	; () banked
  7366  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7367  00055E  0E7C               	movlw	high (STR_24+32)
  7368  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7369  000562  EC06  F027         	call	_UARTTransmitText	;wreg free
  7370                           
  7371                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  7372  000566  0101               	movlb	1	; () banked
  7373  000568  EE20 F012          	lfsr	2,18
  7374  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7375  00056E  26D9               	addwf	fsr2l,f,c
  7376  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7377  000572  22DA               	addwfc	fsr2h,f,c
  7378  000574  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7379  000578  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7380  00057C  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7381  000580  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7382  000584  0100               	movlb	0	; () banked
  7383  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  7384  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  7385  00058A  EC94  F029         	call	_intToString	;wreg free
  7386  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7387  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7388  000596  EC06  F027         	call	_UARTTransmitText	;wreg free
  7389                           
  7390                           ;ethernet.c: 127: UARTTransmitText(" (");
  7391  00059A  0E0B               	movlw	low (STR_41+29)
  7392  00059C  0100               	movlb	0	; () banked
  7393  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7394  0005A0  0E7D               	movlw	high (STR_41+29)
  7395  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7396  0005A4  EC06  F027         	call	_UARTTransmitText	;wreg free
  7397                           
  7398                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  7399  0005A8  0101               	movlb	1	; () banked
  7400  0005AA  EE20 F014          	lfsr	2,20
  7401  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7402  0005B0  26D9               	addwf	fsr2l,f,c
  7403  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7404  0005B4  22DA               	addwfc	fsr2h,f,c
  7405  0005B6  CFDE F17A          	movff	postinc2,??_ethernet_rxGetNewFrame
  7406  0005BA  CFDD F17B          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7407  0005BE  C17A  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  7408  0005C2  C17B  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  7409  0005C6  0100               	movlb	0	; () banked
  7410  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  7411  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  7412  0005CC  EC94  F029         	call	_intToString	;wreg free
  7413  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7414  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7415  0005D8  EC06  F027         	call	_UARTTransmitText	;wreg free
  7416                           
  7417                           ;ethernet.c: 129: UARTTransmitText(")]");
  7418  0005DC  0EF9               	movlw	low STR_19
  7419  0005DE  0100               	movlb	0	; () banked
  7420  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7421  0005E2  0E7F               	movlw	high STR_19
  7422  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7423  0005E6  EC06  F027         	call	_UARTTransmitText	;wreg free
  7424                           
  7425                           ;ethernet.c: 131: ethernetController_dropPacket();
  7426  0005EA  ECCC  F028         	call	_ethernetController_dropPacket	;wreg free
  7427                           
  7428                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  7429  0005EE  0ED4               	movlw	low (STR_23+35)
  7430  0005F0  0100               	movlb	0	; () banked
  7431  0005F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7432  0005F4  0E7B               	movlw	high (STR_23+35)
  7433  0005F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7434  0005F8  EC06  F027         	call	_UARTTransmitText	;wreg free
  7435  0005FC  0012               	return	
  7436  0005FE                     __end_of_ethernet_rxGetNewFrame:
  7437                           	opt stack 0
  7438                           tblptru	equ	0xFF8
  7439                           tblptrh	equ	0xFF7
  7440                           tblptrl	equ	0xFF6
  7441                           tablat	equ	0xFF5
  7442                           prodh	equ	0xFF4
  7443                           prodl	equ	0xFF3
  7444                           intcon	equ	0xFF2
  7445                           intcon3	equ	0xFF0
  7446                           indf0	equ	0xFEF
  7447                           postinc0	equ	0xFEE
  7448                           plusw0	equ	0xFEB
  7449                           fsr0h	equ	0xFEA
  7450                           fsr0l	equ	0xFE9
  7451                           wreg	equ	0xFE8
  7452                           indf1	equ	0xFE7
  7453                           postinc1	equ	0xFE6
  7454                           postdec1	equ	0xFE5
  7455                           plusw1	equ	0xFE3
  7456                           fsr1h	equ	0xFE2
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           plusw2	equ	0xFDB
  7462                           fsr2h	equ	0xFDA
  7463                           fsr2l	equ	0xFD9
  7464                           status	equ	0xFD8
  7465                           
  7466 ;; *************** function _ipv4_handleNewPacket *****************
  7467 ;; Defined at:
  7468 ;;		line 199 in file "src/stack/protocols/ipv4.c"
  7469 ;; Parameters:    Size  Location     Type
  7470 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  7471 ;;		 -> stack(123), 
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;  ip             23   98[BANK0 ] struct ipv4_header
  7474 ;;  headerField     9   89[BANK0 ] struct memoryField
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7484 ;;      Params:         0       2       0       0       0       0       0       0       0
  7485 ;;      Locals:         0      32       0       0       0       0       0       0       0
  7486 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7487 ;;      Totals:         0      36       0       0       0       0       0       0       0
  7488 ;;Total ram usage:       36 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:    9
  7491 ;; This function calls:
  7492 ;;		_UARTTransmitText
  7493 ;;		_ethernetController_dropPacket
  7494 ;;		_intToString
  7495 ;;		_ipAdressToString
  7496 ;;		_ipProtocolToString
  7497 ;;		_ipv4_checkHeaderChecksum
  7498 ;;		_ipv4_parseHeader
  7499 ;; This function is called by:
  7500 ;;		_ethernet_rxGetNewFrame
  7501 ;; This function uses a non-reentrant model
  7502 ;;
  7503                           
  7504                           	psect	text16
  7505  002B28                     __ptext16:
  7506                           	opt stack 0
  7507  002B28                     _ipv4_handleNewPacket:
  7508                           	opt stack 19
  7509                           
  7510                           ;ipv4.c: 200: ipv4_header_t ip;
  7511                           ;ipv4.c: 201: memoryField_t headerField;
  7512                           ;ipv4.c: 202: if (frame->ethertype != ETHERTYPE_IPv4) {
  7513                           
  7514                           ;incstack = 0
  7515  002B28  0100               	movlb	0	; () banked
  7516  002B2A  EE20 F00E          	lfsr	2,14
  7517  002B2E  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7518  002B30  26D9               	addwf	fsr2l,f,c
  7519  002B32  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7520  002B34  22DA               	addwfc	fsr2h,f,c
  7521  002B36  50DE               	movf	postinc2,w,c
  7522  002B38  E104               	bnz	u11500
  7523  002B3A  0E08               	movlw	8
  7524  002B3C  18DE               	xorwf	postinc2,w,c
  7525  002B3E  B4D8               	btfsc	status,2,c
  7526  002B40  D007               	goto	l1157
  7527  002B42                     u11500:
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;ipv4.c: 203: ethernetController_dropPacket(frame);
  7531  002B42  C0B5  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  7532  002B46  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  7533  002B4A  ECCC  F028         	call	_ethernetController_dropPacket	;wreg free
  7534                           
  7535                           ;ipv4.c: 204: return;
  7536  002B4E  0012               	return	
  7537  002B50                     l1157:
  7538                           
  7539                           ;ipv4.c: 205: }
  7540                           ;ipv4.c: 206: headerField = frame->memory;
  7541  002B50  0100               	movlb	0	; () banked
  7542  002B52  EE20 F010          	lfsr	2,16
  7543  002B56  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7544  002B58  26D9               	addwf	fsr2l,f,c
  7545  002B5A  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7546  002B5C  22DA               	addwfc	fsr2h,f,c
  7547  002B5E  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  7548  002B62  0E08               	movlw	8
  7549  002B64                     u11511:
  7550  002B64  CFDB FFE3          	movff	plusw2,plusw1
  7551  002B68  06E8               	decf	wreg,f,c
  7552  002B6A  E2FC               	bc	u11511
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;ipv4.c: 207: headerField.start = frame->memory.start + 22;
  7556  002B6C  EE20 F010          	lfsr	2,16
  7557  002B70  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  7558  002B72  26D9               	addwf	fsr2l,f,c
  7559  002B74  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  7560  002B76  22DA               	addwfc	fsr2h,f,c
  7561  002B78  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  7562  002B7C  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  7563  002B80  0E16               	movlw	22
  7564  002B82  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  7565  002B84  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  7566  002B86  0E00               	movlw	0
  7567  002B88  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  7568  002B8A  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;ipv4.c: 209: ip = ipv4_parseHeader(&headerField);
  7572  002B8C  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  7573  002B8E  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  7574  002B90  0E00               	movlw	high ipv4_handleNewPacket@headerField
  7575  002B92  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  7576  002B94  EC6C  F00F         	call	_ipv4_parseHeader	;wreg free
  7577  002B98  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  7578  002B9C  0E16               	movlw	22
  7579  002B9E                     u11521:
  7580  002B9E  CFEB FFDB          	movff	plusw0,plusw2
  7581  002BA2  06E8               	decf	wreg,f,c
  7582  002BA4  E2FC               	bc	u11521
  7583                           
  7584                           ;ipv4.c: 210: UARTTransmitText("[");
  7585  002BA6  0EC2               	movlw	low (STR_72+3)
  7586  002BA8  0100               	movlb	0	; () banked
  7587  002BAA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7588  002BAC  0E7F               	movlw	high (STR_72+3)
  7589  002BAE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7590  002BB0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7591                           
  7592                           ;ipv4.c: 211: UARTTransmitText(ipAdressToString(ip.source));
  7593  002BB4  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  7594  002BB8  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  7595  002BBC  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  7596  002BC0  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  7597  002BC4  ECC6  F013         	call	_ipAdressToString	;wreg free
  7598  002BC8  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7599  002BCC  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7600  002BD0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7601                           
  7602                           ;ipv4.c: 212: UARTTransmitText(" -> ");
  7603  002BD4  0ED3               	movlw	low STR_42
  7604  002BD6  0100               	movlb	0	; () banked
  7605  002BD8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7606  002BDA  0E7F               	movlw	high STR_42
  7607  002BDC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7608  002BDE  EC06  F027         	call	_UARTTransmitText	;wreg free
  7609                           
  7610                           ;ipv4.c: 213: UARTTransmitText(ipAdressToString(ip.destination));
  7611  002BE2  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  7612  002BE6  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  7613  002BEA  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  7614  002BEE  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  7615  002BF2  ECC6  F013         	call	_ipAdressToString	;wreg free
  7616  002BF6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  7617  002BFA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  7618  002BFE  EC06  F027         	call	_UARTTransmitText	;wreg free
  7619                           
  7620                           ;ipv4.c: 214: UARTTransmitText("][");
  7621  002C02  0EF6               	movlw	low STR_13
  7622  002C04  0100               	movlb	0	; () banked
  7623  002C06  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7624  002C08  0E7F               	movlw	high STR_13
  7625  002C0A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7626  002C0C  EC06  F027         	call	_UARTTransmitText	;wreg free
  7627                           
  7628                           ;ipv4.c: 215: UARTTransmitText((ipProtocolToString(ip.protocol)));
  7629  002C10  0100               	movlb	0	; () banked
  7630  002C12  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  7631  002C14  EC22  F028         	call	_ipProtocolToString
  7632  002C18  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  7633  002C1C  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  7634  002C20  EC06  F027         	call	_UARTTransmitText	;wreg free
  7635                           
  7636                           ;ipv4.c: 216: UARTTransmitText("][");
  7637  002C24  0EF6               	movlw	low STR_13
  7638  002C26  0100               	movlb	0	; () banked
  7639  002C28  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7640  002C2A  0E7F               	movlw	high STR_13
  7641  002C2C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7642  002C2E  EC06  F027         	call	_UARTTransmitText	;wreg free
  7643                           
  7644                           ;ipv4.c: 217: UARTTransmitText(intToString(ip.totalLength));
  7645  002C32  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  7646  002C36  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  7647  002C3A  0100               	movlb	0	; () banked
  7648  002C3C  6B86               	clrf	(intToString@val+2)& (0+255),b
  7649  002C3E  6B87               	clrf	(intToString@val+3)& (0+255),b
  7650  002C40  EC94  F029         	call	_intToString	;wreg free
  7651  002C44  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7652  002C48  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7653  002C4C  EC06  F027         	call	_UARTTransmitText	;wreg free
  7654                           
  7655                           ;ipv4.c: 218: UARTTransmitText("][");
  7656  002C50  0EF6               	movlw	low STR_13
  7657  002C52  0100               	movlb	0	; () banked
  7658  002C54  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7659  002C56  0E7F               	movlw	high STR_13
  7660  002C58  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7661  002C5A  EC06  F027         	call	_UARTTransmitText	;wreg free
  7662                           
  7663                           ;ipv4.c: 219: UARTTransmitText(intToString(ip.version));
  7664  002C5E  0100               	movlb	0	; () banked
  7665  002C60  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  7666  002C62  6F84               	movwf	intToString@val& (0+255),b
  7667  002C64  6B85               	clrf	(intToString@val+1)& (0+255),b
  7668  002C66  6B86               	clrf	(intToString@val+2)& (0+255),b
  7669  002C68  6B87               	clrf	(intToString@val+3)& (0+255),b
  7670  002C6A  EC94  F029         	call	_intToString	;wreg free
  7671  002C6E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7672  002C72  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7673  002C76  EC06  F027         	call	_UARTTransmitText	;wreg free
  7674                           
  7675                           ;ipv4.c: 220: UARTTransmitText(", ");
  7676  002C7A  0E32               	movlw	low (STR_47+17)
  7677  002C7C  0100               	movlb	0	; () banked
  7678  002C7E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7679  002C80  0E7E               	movlw	high (STR_47+17)
  7680  002C82  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7681  002C84  EC06  F027         	call	_UARTTransmitText	;wreg free
  7682                           
  7683                           ;ipv4.c: 221: UARTTransmitText(intToString(ip.headerLength));
  7684  002C88  0100               	movlb	0	; () banked
  7685  002C8A  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  7686  002C8C  6F84               	movwf	intToString@val& (0+255),b
  7687  002C8E  6B85               	clrf	(intToString@val+1)& (0+255),b
  7688  002C90  6B86               	clrf	(intToString@val+2)& (0+255),b
  7689  002C92  6B87               	clrf	(intToString@val+3)& (0+255),b
  7690  002C94  EC94  F029         	call	_intToString	;wreg free
  7691  002C98  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7692  002C9C  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7693  002CA0  EC06  F027         	call	_UARTTransmitText	;wreg free
  7694                           
  7695                           ;ipv4.c: 222: UARTTransmitText("]");
  7696  002CA4  0EFA               	movlw	low (STR_19+1)
  7697  002CA6  0100               	movlb	0	; () banked
  7698  002CA8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7699  002CAA  0E7F               	movlw	high (STR_19+1)
  7700  002CAC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7701  002CAE  EC06  F027         	call	_UARTTransmitText	;wreg free
  7702                           
  7703                           ;ipv4.c: 223: if (!ipv4_checkHeaderChecksum(&ip))
  7704  002CB2  0EC2               	movlw	low ipv4_handleNewPacket@ip
  7705  002CB4  0100               	movlb	0	; () banked
  7706  002CB6  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  7707  002CB8  0E00               	movlw	high ipv4_handleNewPacket@ip
  7708  002CBA  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  7709  002CBC  EC78  F01F         	call	_ipv4_checkHeaderChecksum	;wreg free
  7710  002CC0  0100               	movlb	0	; () banked
  7711  002CC2  B0D8               	btfsc	status,0,c
  7712  002CC4  0012               	return	
  7713                           
  7714                           ; BSR set to: 0
  7715                           ;ipv4.c: 224: UARTTransmitText("[INVALID CHECKSUM]");
  7716  002CC6  0E49               	movlw	low STR_111
  7717  002CC8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7718  002CCA  0E7E               	movlw	high STR_111
  7719  002CCC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7720  002CCE  EC06  F027         	call	_UARTTransmitText	;wreg free
  7721  002CD2  0012               	return	
  7722  002CD4                     __end_of_ipv4_handleNewPacket:
  7723                           	opt stack 0
  7724                           tblptru	equ	0xFF8
  7725                           tblptrh	equ	0xFF7
  7726                           tblptrl	equ	0xFF6
  7727                           tablat	equ	0xFF5
  7728                           prodh	equ	0xFF4
  7729                           prodl	equ	0xFF3
  7730                           intcon	equ	0xFF2
  7731                           intcon3	equ	0xFF0
  7732                           indf0	equ	0xFEF
  7733                           postinc0	equ	0xFEE
  7734                           plusw0	equ	0xFEB
  7735                           fsr0h	equ	0xFEA
  7736                           fsr0l	equ	0xFE9
  7737                           wreg	equ	0xFE8
  7738                           indf1	equ	0xFE7
  7739                           postinc1	equ	0xFE6
  7740                           postdec1	equ	0xFE5
  7741                           plusw1	equ	0xFE3
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           plusw2	equ	0xFDB
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function _ipv4_parseHeader *****************
  7753 ;; Defined at:
  7754 ;;		line 137 in file "src/stack/protocols/ipv4.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  field           2   20[BANK0 ] PTR struct memoryField
  7757 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  7758 ;; Auto vars:     Size  Location     Type
  7759 ;;  i               1   45[BANK0 ] unsigned char 
  7760 ;;  i               1   44[BANK0 ] unsigned char 
  7761 ;;  ip             23   47[BANK0 ] struct ipv4_header
  7762 ;;  temp            1   46[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  23   20[BANK0 ] struct ipv4_header
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7772 ;;      Params:         0      23       0       0       0       0       0       0       0
  7773 ;;      Locals:         0      26       0       0       0       0       0       0       0
  7774 ;;      Temps:          0       1       0       0       0       0       0       0       0
  7775 ;;      Totals:         0      50       0       0       0       0       0       0       0
  7776 ;;Total ram usage:       50 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    8
  7779 ;; This function calls:
  7780 ;;		_ethernetController_streamFromRXBuffer
  7781 ;; This function is called by:
  7782 ;;		_ipv4_handleNewPacket
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text17
  7787  001ED8                     __ptext17:
  7788                           	opt stack 0
  7789  001ED8                     _ipv4_parseHeader:
  7790                           	opt stack 19
  7791                           
  7792                           ;ipv4.c: 138: ipv4_header_t ip;
  7793                           ;ipv4.c: 139: uint8_t temp;
  7794                           ;ipv4.c: 141: ethernetController_streamFromRXBuffer(0, field->start);
  7795                           
  7796                           ;incstack = 0
  7797  001ED8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7798  001EDC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7799  001EE0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7800  001EE4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7801  001EE8  0E00               	movlw	0
  7802  001EEA  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7803                           
  7804                           ;ipv4.c: 143: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7805  001EEE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7806  001EF2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7807  001EF6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7808  001EFA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7809  001EFE  0E01               	movlw	1
  7810  001F00  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7811  001F04  0100               	movlb	0	; () banked
  7812  001F06  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7813                           
  7814                           ; BSR set to: 0
  7815                           ;ipv4.c: 144: ip.version = (temp & 0xf0) >> 4;
  7816  001F08  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  7817  001F0A  0B0F               	andlw	15
  7818  001F0C  0B0F               	andlw	15
  7819  001F0E  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;ipv4.c: 145: ip.headerLength = temp & 0x0f;
  7823  001F10  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7824  001F12  0B0F               	andlw	15
  7825  001F14  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  7826                           
  7827                           ;ipv4.c: 147: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7828  001F16  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7829  001F1A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7830  001F1E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7831  001F22  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7832  001F26  0E01               	movlw	1
  7833  001F28  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7834  001F2C  0100               	movlb	0	; () banked
  7835  001F2E  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;ipv4.c: 148: ip.dscp = (temp & 0x1f);
  7839  001F30  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7840  001F32  0B1F               	andlw	31
  7841  001F34  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;ipv4.c: 149: ip.ecn = (temp & 0xC0) >> 6;
  7845  001F36  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7846  001F38  46E8               	rlncf	wreg,f,c
  7847  001F3A  0B03               	andlw	3
  7848  001F3C  0B03               	andlw	3
  7849  001F3E  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  7850                           
  7851                           ;ipv4.c: 151: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  7852  001F40  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7853  001F44  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7854  001F48  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7855  001F4C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7856  001F50  0E01               	movlw	1
  7857  001F52  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7858  001F56  0100               	movlb	0	; () banked
  7859  001F58  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  7860  001F5A  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  7861                           
  7862                           ;ipv4.c: 152: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  7863  001F5C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7864  001F60  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7865  001F64  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7866  001F68  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7867  001F6C  0E01               	movlw	1
  7868  001F6E  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7869  001F72  0100               	movlb	0	; () banked
  7870  001F74  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7871  001F76  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7872  001F78  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  7873                           
  7874                           ;ipv4.c: 154: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  7875  001F7A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7876  001F7E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7877  001F82  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7878  001F86  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7879  001F8A  0E01               	movlw	1
  7880  001F8C  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7881  001F90  0100               	movlb	0	; () banked
  7882  001F92  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  7883  001F94  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  7884                           
  7885                           ;ipv4.c: 155: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7886  001F96  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7887  001F9A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7888  001F9E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7889  001FA2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7890  001FA6  0E01               	movlw	1
  7891  001FA8  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7892  001FAC  0100               	movlb	0	; () banked
  7893  001FAE  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7894  001FB0  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7895  001FB2  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  7896                           
  7897                           ;ipv4.c: 157: temp = ethernetController_streamFromRXBuffer(1, field->start);
  7898  001FB4  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7899  001FB8  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7900  001FBC  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7901  001FC0  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7902  001FC4  0E01               	movlw	1
  7903  001FC6  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7904  001FCA  0100               	movlb	0	; () banked
  7905  001FCC  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;ipv4.c: 158: ip.flags = ((temp & 0xC0) >> 6);
  7909  001FCE  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  7910  001FD0  46E8               	rlncf	wreg,f,c
  7911  001FD2  0B03               	andlw	3
  7912  001FD4  0B03               	andlw	3
  7913  001FD6  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;ipv4.c: 159: ip.fragmentOffset = ((temp & 0x1f) << 8);
  7917  001FD8  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  7918  001FDA  0B1F               	andlw	31
  7919  001FDC  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  7920  001FDE  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  7921                           
  7922                           ;ipv4.c: 161: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  7923  001FE0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7924  001FE4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7925  001FE8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7926  001FEC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7927  001FF0  0E01               	movlw	1
  7928  001FF2  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7929  001FF6  0100               	movlb	0	; () banked
  7930  001FF8  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7931  001FFA  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7932  001FFC  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  7933                           
  7934                           ;ipv4.c: 163: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  7935  001FFE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7936  002002  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7937  002006  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7938  00200A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7939  00200E  0E01               	movlw	1
  7940  002010  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7941  002014  0100               	movlb	0	; () banked
  7942  002016  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  7943                           
  7944                           ;ipv4.c: 165: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  7945  002018  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7946  00201C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7947  002020  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7948  002024  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7949  002028  0E01               	movlw	1
  7950  00202A  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7951  00202E  0100               	movlb	0	; () banked
  7952  002030  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  7953                           
  7954                           ;ipv4.c: 167: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  7955  002032  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7956  002036  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7957  00203A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7958  00203E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7959  002042  0E01               	movlw	1
  7960  002044  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7961  002048  0100               	movlb	0	; () banked
  7962  00204A  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  7963  00204C  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  7964                           
  7965                           ;ipv4.c: 168: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  7966  00204E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7967  002052  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7968  002056  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7969  00205A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7970  00205E  0E01               	movlw	1
  7971  002060  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  7972  002064  0100               	movlb	0	; () banked
  7973  002066  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  7974  002068  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  7975  00206A  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  7976                           
  7977                           ; BSR set to: 0
  7978                           ;ipv4.c: 170: for (uint8_t i = 0; i < 4; i++)
  7979  00206C  0E00               	movlw	0
  7980  00206E  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  7981  002070                     l9485:
  7982                           
  7983                           ; BSR set to: 0
  7984  002070  0E03               	movlw	3
  7985  002072  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  7986  002074  D001               	goto	l1146
  7987  002076  D01D               	goto	u11260
  7988  002078                     l1146:
  7989                           
  7990                           ; BSR set to: 0
  7991                           ;ipv4.c: 171: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  7992                           
  7993                           ; BSR set to: 0
  7994  002078  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  7995  00207C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  7996  002080  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  7997  002084  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  7998  002088  0E01               	movlw	1
  7999  00208A  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  8000  00208E  0100               	movlb	0	; () banked
  8001  002090  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8002  002092  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  8003  002094  0D01               	mullw	1
  8004  002096  0E0F               	movlw	15
  8005  002098  26F3               	addwf	prodl,f,c
  8006  00209A  0E00               	movlw	0
  8007  00209C  22F4               	addwfc	prodh,f,c
  8008  00209E  0E8F               	movlw	low ipv4_parseHeader@ip
  8009  0020A0  24F3               	addwf	prodl,w,c
  8010  0020A2  6ED9               	movwf	fsr2l,c
  8011  0020A4  0E00               	movlw	high ipv4_parseHeader@ip
  8012  0020A6  20F4               	addwfc	prodh,w,c
  8013  0020A8  6EDA               	movwf	fsr2h,c
  8014  0020AA  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8015                           
  8016                           ; BSR set to: 0
  8017  0020AE  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  8018  0020B0  D7DF               	goto	l9485
  8019  0020B2                     u11260:
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;ipv4.c: 173: for (uint8_t i = 0; i < 4; i++)
  8023                           
  8024                           ; BSR set to: 0
  8025  0020B2  0E00               	movlw	0
  8026  0020B4  6F8D               	movwf	ipv4_parseHeader@i_3657& (0+255),b
  8027  0020B6                     l9497:
  8028                           
  8029                           ; BSR set to: 0
  8030  0020B6  0E03               	movlw	3
  8031  0020B8  658D               	cpfsgt	ipv4_parseHeader@i_3657& (0+255),b
  8032  0020BA  D001               	goto	l1148
  8033  0020BC  D01D               	goto	u11280
  8034  0020BE                     l1148:
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;ipv4.c: 174: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  8038                           
  8039                           ; BSR set to: 0
  8040  0020BE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8041  0020C2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8042  0020C6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8043  0020CA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8044  0020CE  0E01               	movlw	1
  8045  0020D0  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  8046  0020D4  0100               	movlb	0	; () banked
  8047  0020D6  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8048  0020D8  518D               	movf	ipv4_parseHeader@i_3657& (0+255),w,b
  8049  0020DA  0D01               	mullw	1
  8050  0020DC  0E13               	movlw	19
  8051  0020DE  26F3               	addwf	prodl,f,c
  8052  0020E0  0E00               	movlw	0
  8053  0020E2  22F4               	addwfc	prodh,f,c
  8054  0020E4  0E8F               	movlw	low ipv4_parseHeader@ip
  8055  0020E6  24F3               	addwf	prodl,w,c
  8056  0020E8  6ED9               	movwf	fsr2l,c
  8057  0020EA  0E00               	movlw	high ipv4_parseHeader@ip
  8058  0020EC  20F4               	addwfc	prodh,w,c
  8059  0020EE  6EDA               	movwf	fsr2h,c
  8060  0020F0  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8061                           
  8062                           ; BSR set to: 0
  8063  0020F4  2B8D               	incf	ipv4_parseHeader@i_3657& (0+255),f,b
  8064  0020F6  D7DF               	goto	l9497
  8065  0020F8                     u11280:
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;ipv4.c: 176: ethernetController_streamFromRXBuffer(2, field->start);
  8069                           
  8070                           ; BSR set to: 0
  8071  0020F8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8072  0020FC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8073  002100  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8074  002104  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8075  002108  0E02               	movlw	2
  8076  00210A  EC80  F026         	call	_ethernetController_streamFromRXBuffer
  8077                           
  8078                           ;ipv4.c: 178: return ip;
  8079  00210E  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  8080  002112  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  8081  002116  0E16               	movlw	22
  8082  002118                     u11291:
  8083  002118  CFDB FFEB          	movff	plusw2,plusw0
  8084  00211C  06E8               	decf	wreg,f,c
  8085  00211E  E2FC               	bc	u11291
  8086  002120  0012               	return	
  8087  002122                     __end_of_ipv4_parseHeader:
  8088                           	opt stack 0
  8089                           tblptru	equ	0xFF8
  8090                           tblptrh	equ	0xFF7
  8091                           tblptrl	equ	0xFF6
  8092                           tablat	equ	0xFF5
  8093                           prodh	equ	0xFF4
  8094                           prodl	equ	0xFF3
  8095                           intcon	equ	0xFF2
  8096                           intcon3	equ	0xFF0
  8097                           indf0	equ	0xFEF
  8098                           postinc0	equ	0xFEE
  8099                           plusw0	equ	0xFEB
  8100                           fsr0h	equ	0xFEA
  8101                           fsr0l	equ	0xFE9
  8102                           wreg	equ	0xFE8
  8103                           indf1	equ	0xFE7
  8104                           postinc1	equ	0xFE6
  8105                           postdec1	equ	0xFE5
  8106                           plusw1	equ	0xFE3
  8107                           fsr1h	equ	0xFE2
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           plusw2	equ	0xFDB
  8113                           fsr2h	equ	0xFDA
  8114                           fsr2l	equ	0xFD9
  8115                           status	equ	0xFD8
  8116                           
  8117 ;; *************** function _ipv4_checkHeaderChecksum *****************
  8118 ;; Defined at:
  8119 ;;		line 181 in file "src/stack/protocols/ipv4.c"
  8120 ;; Parameters:    Size  Location     Type
  8121 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  8122 ;;		 -> ipv4_handleNewPacket@ip(23), 
  8123 ;; Auto vars:     Size  Location     Type
  8124 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  8125 ;; Return value:  Size  Location     Type
  8126 ;;		None               void
  8127 ;; Registers used:
  8128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8129 ;; Tracked objects:
  8130 ;;		On entry : 0/0
  8131 ;;		On exit  : 0/0
  8132 ;;		Unchanged: 0/0
  8133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8134 ;;      Params:         0       2       0       0       0       0       0       0       0
  8135 ;;      Locals:         0      23       0       0       0       0       0       0       0
  8136 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8137 ;;      Totals:         0      27       0       0       0       0       0       0       0
  8138 ;;Total ram usage:       27 bytes
  8139 ;; Hardware stack levels used:    1
  8140 ;; Hardware stack levels required when called:    6
  8141 ;; This function calls:
  8142 ;;		_UARTTransmitText
  8143 ;;		_hexToString
  8144 ;;		_ipv4_calculateHeaderChecksum
  8145 ;; This function is called by:
  8146 ;;		_ipv4_handleNewPacket
  8147 ;; This function uses a non-reentrant model
  8148 ;;
  8149                           
  8150                           	psect	text18
  8151  003EF0                     __ptext18:
  8152                           	opt stack 0
  8153  003EF0                     _ipv4_checkHeaderChecksum:
  8154                           	opt stack 21
  8155                           
  8156                           ;ipv4.c: 182: ipv4_header_t testHeader;
  8157                           ;ipv4.c: 183: testHeader = *header;
  8158                           
  8159                           ;incstack = 0
  8160  003EF0  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  8161  003EF4  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  8162  003EF8  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  8163  003EFC  0E16               	movlw	22
  8164  003EFE                     u11301:
  8165  003EFE  CFDB FFE3          	movff	plusw2,plusw1
  8166  003F02  06E8               	decf	wreg,f,c
  8167  003F04  E2FC               	bc	u11301
  8168                           
  8169                           ;ipv4.c: 184: testHeader.checksum = 0x0000;
  8170  003F06  0E00               	movlw	0
  8171  003F08  0100               	movlb	0	; () banked
  8172  003F0A  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  8173  003F0C  0E00               	movlw	0
  8174  003F0E  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  8175                           
  8176                           ; BSR set to: 0
  8177                           ;ipv4.c: 185: ipv4_calculateHeaderChecksum(&testHeader);
  8178  003F10  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  8179  003F12  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  8180  003F14  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  8181  003F16  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  8182  003F18  EC44  F00B         	call	_ipv4_calculateHeaderChecksum	;wreg free
  8183                           
  8184                           ;ipv4.c: 186: if (testHeader.checksum == header->checksum) {
  8185  003F1C  0100               	movlb	0	; () banked
  8186  003F1E  EE20 F00D          	lfsr	2,13
  8187  003F22  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8188  003F24  26D9               	addwf	fsr2l,f,c
  8189  003F26  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8190  003F28  22DA               	addwfc	fsr2h,f,c
  8191  003F2A  50DE               	movf	postinc2,w,c
  8192  003F2C  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  8193  003F2E  E106               	bnz	l9525
  8194  003F30  50DE               	movf	postinc2,w,c
  8195  003F32  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  8196  003F34  A4D8               	btfss	status,2,c
  8197  003F36  D002               	goto	l1153
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;ipv4.c: 187: return 1;
  8201  003F38  80D8               	bsf	status,0,c
  8202                           
  8203                           ; BSR set to: 0
  8204  003F3A  0012               	return	
  8205  003F3C                     l1153:
  8206  003F3C                     l9525:
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;ipv4.c: 188: }
  8210                           ;ipv4.c: 189: UARTTransmitText("[Expected ");
  8211  003F3C  0E61               	movlw	low STR_101
  8212  003F3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8213  003F40  0E7F               	movlw	high STR_101
  8214  003F42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8215  003F44  EC06  F027         	call	_UARTTransmitText	;wreg free
  8216                           
  8217                           ;ipv4.c: 190: UARTTransmitText(hexToString(testHeader.checksum));
  8218  003F48  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  8219  003F4C  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  8220  003F50  0100               	movlb	0	; () banked
  8221  003F52  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8222  003F54  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8223  003F56  EC8D  F01E         	call	_hexToString	;wreg free
  8224  003F5A  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8225  003F5E  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8226  003F62  EC06  F027         	call	_UARTTransmitText	;wreg free
  8227                           
  8228                           ;ipv4.c: 191: UARTTransmitText(", got ");
  8229  003F66  0EAB               	movlw	low STR_102
  8230  003F68  0100               	movlb	0	; () banked
  8231  003F6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8232  003F6C  0E7F               	movlw	high STR_102
  8233  003F6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8234  003F70  EC06  F027         	call	_UARTTransmitText	;wreg free
  8235                           
  8236                           ;ipv4.c: 192: UARTTransmitText(hexToString(header->checksum));
  8237  003F74  0100               	movlb	0	; () banked
  8238  003F76  EE20 F00D          	lfsr	2,13
  8239  003F7A  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8240  003F7C  26D9               	addwf	fsr2l,f,c
  8241  003F7E  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8242  003F80  22DA               	addwfc	fsr2h,f,c
  8243  003F82  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  8244  003F86  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  8245  003F8A  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  8246  003F8E  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  8247  003F92  6B63               	clrf	(hexToString@val+2)& (0+255),b
  8248  003F94  6B64               	clrf	(hexToString@val+3)& (0+255),b
  8249  003F96  EC8D  F01E         	call	_hexToString	;wreg free
  8250  003F9A  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  8251  003F9E  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  8252  003FA2  EC06  F027         	call	_UARTTransmitText	;wreg free
  8253                           
  8254                           ;ipv4.c: 193: UARTTransmitText("]");
  8255  003FA6  0EFA               	movlw	low (STR_19+1)
  8256  003FA8  0100               	movlb	0	; () banked
  8257  003FAA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8258  003FAC  0E7F               	movlw	high (STR_19+1)
  8259  003FAE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8260  003FB0  EC06  F027         	call	_UARTTransmitText	;wreg free
  8261                           
  8262                           ;ipv4.c: 194: return 0;
  8263  003FB4  90D8               	bcf	status,0,c
  8264  003FB6  0012               	return	
  8265  003FB8                     __end_of_ipv4_checkHeaderChecksum:
  8266                           	opt stack 0
  8267                           tblptru	equ	0xFF8
  8268                           tblptrh	equ	0xFF7
  8269                           tblptrl	equ	0xFF6
  8270                           tablat	equ	0xFF5
  8271                           prodh	equ	0xFF4
  8272                           prodl	equ	0xFF3
  8273                           intcon	equ	0xFF2
  8274                           intcon3	equ	0xFF0
  8275                           indf0	equ	0xFEF
  8276                           postinc0	equ	0xFEE
  8277                           plusw0	equ	0xFEB
  8278                           fsr0h	equ	0xFEA
  8279                           fsr0l	equ	0xFE9
  8280                           wreg	equ	0xFE8
  8281                           indf1	equ	0xFE7
  8282                           postinc1	equ	0xFE6
  8283                           postdec1	equ	0xFE5
  8284                           plusw1	equ	0xFE3
  8285                           fsr1h	equ	0xFE2
  8286                           fsr1l	equ	0xFE1
  8287                           indf2	equ	0xFDF
  8288                           postinc2	equ	0xFDE
  8289                           postdec2	equ	0xFDD
  8290                           plusw2	equ	0xFDB
  8291                           fsr2h	equ	0xFDA
  8292                           fsr2l	equ	0xFD9
  8293                           status	equ	0xFD8
  8294                           
  8295 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  8296 ;; Defined at:
  8297 ;;		line 117 in file "src/stack/protocols/ipv4.c"
  8298 ;; Parameters:    Size  Location     Type
  8299 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  8300 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(66), stack(123), 
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  sum             4   14[BANK0 ] unsigned long 
  8303 ;; Return value:  Size  Location     Type
  8304 ;;                  1    wreg      void 
  8305 ;; Registers used:
  8306 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8307 ;; Tracked objects:
  8308 ;;		On entry : 0/0
  8309 ;;		On exit  : 0/0
  8310 ;;		Unchanged: 0/0
  8311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8312 ;;      Params:         0       2       0       0       0       0       0       0       0
  8313 ;;      Locals:         0       4       0       0       0       0       0       0       0
  8314 ;;      Temps:          0      12       0       0       0       0       0       0       0
  8315 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8316 ;;Total ram usage:       18 bytes
  8317 ;; Hardware stack levels used:    1
  8318 ;; Hardware stack levels required when called:    4
  8319 ;; This function calls:
  8320 ;;		Nothing
  8321 ;; This function is called by:
  8322 ;;		_main
  8323 ;;		_ipv4_checkHeaderChecksum
  8324 ;; This function uses a non-reentrant model
  8325 ;;
  8326                           
  8327                           	psect	text19
  8328  001688                     __ptext19:
  8329                           	opt stack 0
  8330  001688                     _ipv4_calculateHeaderChecksum:
  8331                           	opt stack 26
  8332                           
  8333                           ;ipv4.c: 119: uint32_t sum = 0;
  8334                           
  8335                           ;incstack = 0
  8336  001688  0E00               	movlw	0
  8337  00168A  0100               	movlb	0	; () banked
  8338  00168C  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8339  00168E  0E00               	movlw	0
  8340  001690  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8341  001692  0E00               	movlw	0
  8342  001694  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8343  001696  0E00               	movlw	0
  8344  001698  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8345                           
  8346                           ; BSR set to: 0
  8347                           ;ipv4.c: 120: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  8348  00169A  EE20 F002          	lfsr	2,2
  8349  00169E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8350  0016A0  26D9               	addwf	fsr2l,f,c
  8351  0016A2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8352  0016A4  22DA               	addwfc	fsr2h,f,c
  8353  0016A6  50DF               	movf	indf2,w,c
  8354  0016A8  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8355  0016AA  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8356  0016AC  90D8               	bcf	status,0,c
  8357  0016AE  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8358  0016B0  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8359  0016B2  90D8               	bcf	status,0,c
  8360  0016B4  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8361  0016B6  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8362  0016B8  EE20 F001          	lfsr	2,1
  8363  0016BC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8364  0016BE  26D9               	addwf	fsr2l,f,c
  8365  0016C0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8366  0016C2  22DA               	addwfc	fsr2h,f,c
  8367  0016C4  50DF               	movf	indf2,w,c
  8368  0016C6  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8369  0016C8  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8370  0016CA  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8371  0016CC  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8372  0016CE  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  8373  0016D2  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  8374  0016D6  50DF               	movf	indf2,w,c
  8375  0016D8  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8376  0016DA  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8377  0016DC  0E0C               	movlw	12
  8378  0016DE                     u10095:
  8379  0016DE  90D8               	bcf	status,0,c
  8380  0016E0  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8381  0016E2  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8382  0016E4  2EE8               	decfsz	wreg,f,c
  8383  0016E6  D7FB               	goto	u10095
  8384  0016E8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8385  0016EA  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8386  0016EC  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8387  0016EE  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8388  0016F0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8389  0016F2  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8390  0016F4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8391  0016F6  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8392  0016F8  EE20 F003          	lfsr	2,3
  8393  0016FC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8394  0016FE  26D9               	addwf	fsr2l,f,c
  8395  001700  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8396  001702  22DA               	addwfc	fsr2h,f,c
  8397  001704  50DF               	movf	indf2,w,c
  8398  001706  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8399  001708  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8400  00170A  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  8401  00170C  0E00               	movlw	0
  8402  00170E  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  8403  001710  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  8404  001714  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  8405  001718  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8406  00171A  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8407                           
  8408                           ; BSR set to: 0
  8409                           ;ipv4.c: 121: sum += header->totalLength;
  8410  00171C  EE20 F004          	lfsr	2,4
  8411  001720  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8412  001722  26D9               	addwf	fsr2l,f,c
  8413  001724  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8414  001726  22DA               	addwfc	fsr2h,f,c
  8415  001728  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8416  00172C  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8417  001730  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8418  001732  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8419  001734  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8420  001736  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8421  001738  0E00               	movlw	0
  8422  00173A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8423  00173C  0E00               	movlw	0
  8424  00173E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8425                           
  8426                           ; BSR set to: 0
  8427                           ;ipv4.c: 122: sum += header->identification;
  8428  001740  EE20 F006          	lfsr	2,6
  8429  001744  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8430  001746  26D9               	addwf	fsr2l,f,c
  8431  001748  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8432  00174A  22DA               	addwfc	fsr2h,f,c
  8433  00174C  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8434  001750  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8435  001754  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8436  001756  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8437  001758  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8438  00175A  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8439  00175C  0E00               	movlw	0
  8440  00175E  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8441  001760  0E00               	movlw	0
  8442  001762  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;ipv4.c: 123: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  8446  001764  EE20 F009          	lfsr	2,9
  8447  001768  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8448  00176A  26D9               	addwf	fsr2l,f,c
  8449  00176C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8450  00176E  22DA               	addwfc	fsr2h,f,c
  8451  001770  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  8452  001774  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  8453  001778  EE20 F008          	lfsr	2,8
  8454  00177C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8455  00177E  26D9               	addwf	fsr2l,f,c
  8456  001780  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8457  001782  22DA               	addwfc	fsr2h,f,c
  8458  001784  50DF               	movf	indf2,w,c
  8459  001786  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8460  001788  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8461  00178A  0E0D               	movlw	13
  8462  00178C                     u10105:
  8463  00178C  90D8               	bcf	status,0,c
  8464  00178E  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8465  001790  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8466  001792  2EE8               	decfsz	wreg,f,c
  8467  001794  D7FB               	goto	u10105
  8468  001796  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8469  001798  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8470  00179A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8471  00179C  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8472  00179E  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8473  0017A0  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8474  0017A2  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8475  0017A4  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8476  0017A6  0E00               	movlw	0
  8477  0017A8  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8478  0017AA  0E00               	movlw	0
  8479  0017AC  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;ipv4.c: 124: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  8483  0017AE  EE20 F00B          	lfsr	2,11
  8484  0017B2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8485  0017B4  26D9               	addwf	fsr2l,f,c
  8486  0017B6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8487  0017B8  22DA               	addwfc	fsr2h,f,c
  8488  0017BA  50DF               	movf	indf2,w,c
  8489  0017BC  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8490  0017BE  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8491  0017C0  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8492  0017C2  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8493  0017C4  EE20 F00C          	lfsr	2,12
  8494  0017C8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8495  0017CA  26D9               	addwf	fsr2l,f,c
  8496  0017CC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8497  0017CE  22DA               	addwfc	fsr2h,f,c
  8498  0017D0  50DF               	movf	indf2,w,c
  8499  0017D2  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8500  0017D4  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8501  0017D6  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8502  0017D8  0E00               	movlw	0
  8503  0017DA  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8504  0017DC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8505  0017DE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8506  0017E0  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8507  0017E2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8508  0017E4  0E00               	movlw	0
  8509  0017E6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8510  0017E8  0E00               	movlw	0
  8511  0017EA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;ipv4.c: 126: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  8515  0017EC  EE20 F00F          	lfsr	2,15
  8516  0017F0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8517  0017F2  26D9               	addwf	fsr2l,f,c
  8518  0017F4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8519  0017F6  22DA               	addwfc	fsr2h,f,c
  8520  0017F8  50DF               	movf	indf2,w,c
  8521  0017FA  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8522  0017FC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8523  0017FE  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8524  001800  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8525  001802  EE20 F010          	lfsr	2,16
  8526  001806  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8527  001808  26D9               	addwf	fsr2l,f,c
  8528  00180A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8529  00180C  22DA               	addwfc	fsr2h,f,c
  8530  00180E  50DF               	movf	indf2,w,c
  8531  001810  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8532  001812  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8533  001814  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8534  001816  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8535  001818  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8536  00181A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8537  00181C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8538  00181E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8539  001820  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8540  001822  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8541  001824  0E00               	movlw	0
  8542  001826  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8543  001828  0E00               	movlw	0
  8544  00182A  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;ipv4.c: 127: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  8548  00182C  EE20 F011          	lfsr	2,17
  8549  001830  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8550  001832  26D9               	addwf	fsr2l,f,c
  8551  001834  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8552  001836  22DA               	addwfc	fsr2h,f,c
  8553  001838  50DF               	movf	indf2,w,c
  8554  00183A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8555  00183C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8556  00183E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8557  001840  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8558  001842  EE20 F012          	lfsr	2,18
  8559  001846  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8560  001848  26D9               	addwf	fsr2l,f,c
  8561  00184A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8562  00184C  22DA               	addwfc	fsr2h,f,c
  8563  00184E  50DF               	movf	indf2,w,c
  8564  001850  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8565  001852  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8566  001854  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8567  001856  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8568  001858  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8569  00185A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8570  00185C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8571  00185E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8572  001860  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8573  001862  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8574  001864  0E00               	movlw	0
  8575  001866  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8576  001868  0E00               	movlw	0
  8577  00186A  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;ipv4.c: 128: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  8581  00186C  EE20 F013          	lfsr	2,19
  8582  001870  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8583  001872  26D9               	addwf	fsr2l,f,c
  8584  001874  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8585  001876  22DA               	addwfc	fsr2h,f,c
  8586  001878  50DF               	movf	indf2,w,c
  8587  00187A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8588  00187C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8589  00187E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8590  001880  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8591  001882  EE20 F014          	lfsr	2,20
  8592  001886  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8593  001888  26D9               	addwf	fsr2l,f,c
  8594  00188A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8595  00188C  22DA               	addwfc	fsr2h,f,c
  8596  00188E  50DF               	movf	indf2,w,c
  8597  001890  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8598  001892  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8599  001894  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8600  001896  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8601  001898  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8602  00189A  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8603  00189C  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8604  00189E  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8605  0018A0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8606  0018A2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8607  0018A4  0E00               	movlw	0
  8608  0018A6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8609  0018A8  0E00               	movlw	0
  8610  0018AA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8611                           
  8612                           ; BSR set to: 0
  8613                           ;ipv4.c: 129: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  8614  0018AC  EE20 F015          	lfsr	2,21
  8615  0018B0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8616  0018B2  26D9               	addwf	fsr2l,f,c
  8617  0018B4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8618  0018B6  22DA               	addwfc	fsr2h,f,c
  8619  0018B8  50DF               	movf	indf2,w,c
  8620  0018BA  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  8621  0018BC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8622  0018BE  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  8623  0018C0  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  8624  0018C2  EE20 F016          	lfsr	2,22
  8625  0018C6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8626  0018C8  26D9               	addwf	fsr2l,f,c
  8627  0018CA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8628  0018CC  22DA               	addwfc	fsr2h,f,c
  8629  0018CE  50DF               	movf	indf2,w,c
  8630  0018D0  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  8631  0018D2  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8632  0018D4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8633  0018D6  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8634  0018D8  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8635  0018DA  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  8636  0018DC  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8637  0018DE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  8638  0018E0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8639  0018E2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  8640  0018E4  0E00               	movlw	0
  8641  0018E6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  8642  0018E8  0E00               	movlw	0
  8643  0018EA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;ipv4.c: 131: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  8647  0018EC  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8648  0018F0  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8649  0018F4  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8650  0018F8  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8651  0018FC  0E11               	movlw	17
  8652  0018FE  D005               	goto	u10110
  8653  001900                     u10115:
  8654  001900  90D8               	bcf	status,0,c
  8655  001902  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8656  001904  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8657  001906  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8658  001908  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8659  00190A                     u10110:
  8660  00190A  2EE8               	decfsz	wreg,f,c
  8661  00190C  D7F9               	goto	u10115
  8662  00190E  0E0F               	movlw	15
  8663  001910  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  8664  001912  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  8665  001914  0E00               	movlw	0
  8666  001916  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  8667  001918  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  8668  00191A  0E00               	movlw	0
  8669  00191C  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  8670  00191E  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  8671  001920  0E00               	movlw	0
  8672  001922  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  8673  001924  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  8674  001926  0EFF               	movlw	255
  8675  001928  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  8676  00192A  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  8677  00192C  0EFF               	movlw	255
  8678  00192E  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  8679  001930  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  8680  001932  0E00               	movlw	0
  8681  001934  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  8682  001936  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  8683  001938  0E00               	movlw	0
  8684  00193A  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  8685  00193C  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  8686  00193E  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  8687  001940  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  8688  001942  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  8689  001944  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  8690  001946  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  8691  001948  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  8692  00194A  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  8693  00194C  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  8694  00194E  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  8695  001950  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  8696  001952  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  8697  001954  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  8698                           
  8699                           ; BSR set to: 0
  8700                           ;ipv4.c: 132: sum = ~sum;
  8701  001956  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  8702  00195A  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  8703  00195E  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  8704  001962  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  8705  001966  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  8706  001968  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  8707  00196A  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  8708  00196C  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  8709  00196E  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  8710  001972  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  8711  001976  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  8712  00197A  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;ipv4.c: 134: header->checksum = sum;
  8716  00197E  EE20 F00D          	lfsr	2,13
  8717  001982  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  8718  001984  26D9               	addwf	fsr2l,f,c
  8719  001986  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  8720  001988  22DA               	addwfc	fsr2h,f,c
  8721  00198A  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  8722  00198E  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  8723                           
  8724                           ; BSR set to: 0
  8725  001992  0012               	return		;funcret
  8726  001994                     __end_of_ipv4_calculateHeaderChecksum:
  8727                           	opt stack 0
  8728                           tblptru	equ	0xFF8
  8729                           tblptrh	equ	0xFF7
  8730                           tblptrl	equ	0xFF6
  8731                           tablat	equ	0xFF5
  8732                           prodh	equ	0xFF4
  8733                           prodl	equ	0xFF3
  8734                           intcon	equ	0xFF2
  8735                           intcon3	equ	0xFF0
  8736                           indf0	equ	0xFEF
  8737                           postinc0	equ	0xFEE
  8738                           plusw0	equ	0xFEB
  8739                           fsr0h	equ	0xFEA
  8740                           fsr0l	equ	0xFE9
  8741                           wreg	equ	0xFE8
  8742                           indf1	equ	0xFE7
  8743                           postinc1	equ	0xFE6
  8744                           postdec1	equ	0xFE5
  8745                           plusw1	equ	0xFE3
  8746                           fsr1h	equ	0xFE2
  8747                           fsr1l	equ	0xFE1
  8748                           indf2	equ	0xFDF
  8749                           postinc2	equ	0xFDE
  8750                           postdec2	equ	0xFDD
  8751                           plusw2	equ	0xFDB
  8752                           fsr2h	equ	0xFDA
  8753                           fsr2l	equ	0xFD9
  8754                           status	equ	0xFD8
  8755                           
  8756 ;; *************** function _hexToString *****************
  8757 ;; Defined at:
  8758 ;;		line 93 in file "src/system/uart.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;  val             4    1[BANK0 ] unsigned long 
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;  pointer         1    9[BANK0 ] unsigned char 
  8763 ;; Return value:  Size  Location     Type
  8764 ;;                  2    1[BANK0 ] PTR unsigned char 
  8765 ;; Registers used:
  8766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8772 ;;      Params:         0       4       0       0       0       0       0       0       0
  8773 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8774 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8775 ;;      Totals:         0       9       0       0       0       0       0       0       0
  8776 ;;Total ram usage:        9 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    5
  8779 ;; This function calls:
  8780 ;;		_hexToChar
  8781 ;; This function is called by:
  8782 ;;		_ipv4_checkHeaderChecksum
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           	psect	text20
  8787  003D1A                     __ptext20:
  8788                           	opt stack 0
  8789  003D1A                     _hexToString:
  8790                           	opt stack 21
  8791                           
  8792                           ;uart.c: 94: char static number [10];
  8793                           ;uart.c: 95: uint8_t pointer = 0;
  8794                           
  8795                           ; BSR set to: 0
  8796                           ;incstack = 0
  8797  003D1A  0E00               	movlw	0
  8798  003D1C  0100               	movlb	0	; () banked
  8799  003D1E  6F69               	movwf	hexToString@pointer& (0+255),b
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;uart.c: 96: if (val > 0xff) {
  8803  003D20  5164               	movf	(hexToString@val+3)& (0+255),w,b
  8804  003D22  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  8805  003D24  E103               	bnz	u10130
  8806  003D26  0562               	decf	(hexToString@val+1)& (0+255),w,b
  8807  003D28  A0D8               	btfss	status,0,c
  8808  003D2A  D02F               	goto	l809
  8809  003D2C                     u10130:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  8813  003D2C  5169               	movf	hexToString@pointer& (0+255),w,b
  8814  003D2E  0D01               	mullw	1
  8815  003D30  0EAD               	movlw	low hexToString@number
  8816  003D32  24F3               	addwf	prodl,w,c
  8817  003D34  6ED9               	movwf	fsr2l,c
  8818  003D36  0E01               	movlw	high hexToString@number
  8819  003D38  20F4               	addwfc	prodh,w,c
  8820  003D3A  6EDA               	movwf	fsr2h,c
  8821  003D3C  C061  F065         	movff	hexToString@val,??_hexToString
  8822  003D40  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8823  003D44  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8824  003D48  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8825  003D4C  0E0D               	movlw	13
  8826  003D4E  D005               	goto	u10140
  8827  003D50                     u10145:
  8828  003D50  90D8               	bcf	status,0,c
  8829  003D52  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8830  003D54  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8831  003D56  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8832  003D58  3365               	rrcf	??_hexToString& (0+255),f,b
  8833  003D5A                     u10140:
  8834  003D5A  2EE8               	decfsz	wreg,f,c
  8835  003D5C  D7F9               	goto	u10145
  8836  003D5E  5165               	movf	??_hexToString& (0+255),w,b
  8837  003D60  0B0F               	andlw	15
  8838  003D62  EC06  F02B         	call	_hexToChar
  8839  003D66  6EDF               	movwf	indf2,c
  8840  003D68  0100               	movlb	0	; () banked
  8841  003D6A  2B69               	incf	hexToString@pointer& (0+255),f,b
  8842                           
  8843                           ; BSR set to: 0
  8844                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  8845  003D6C  5169               	movf	hexToString@pointer& (0+255),w,b
  8846  003D6E  0D01               	mullw	1
  8847  003D70  0EAD               	movlw	low hexToString@number
  8848  003D72  24F3               	addwf	prodl,w,c
  8849  003D74  6ED9               	movwf	fsr2l,c
  8850  003D76  0E01               	movlw	high hexToString@number
  8851  003D78  20F4               	addwfc	prodh,w,c
  8852  003D7A  6EDA               	movwf	fsr2h,c
  8853  003D7C  5162               	movf	(hexToString@val+1)& (0+255),w,b
  8854  003D7E  0B0F               	andlw	15
  8855  003D80  EC06  F02B         	call	_hexToChar
  8856  003D84  6EDF               	movwf	indf2,c
  8857  003D86  0100               	movlb	0	; () banked
  8858  003D88  2B69               	incf	hexToString@pointer& (0+255),f,b
  8859  003D8A                     l809:
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;uart.c: 99: }
  8863                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  8864                           
  8865                           ; BSR set to: 0
  8866  003D8A  5169               	movf	hexToString@pointer& (0+255),w,b
  8867  003D8C  0D01               	mullw	1
  8868  003D8E  0EAD               	movlw	low hexToString@number
  8869  003D90  24F3               	addwf	prodl,w,c
  8870  003D92  6ED9               	movwf	fsr2l,c
  8871  003D94  0E01               	movlw	high hexToString@number
  8872  003D96  20F4               	addwfc	prodh,w,c
  8873  003D98  6EDA               	movwf	fsr2h,c
  8874  003D9A  C061  F065         	movff	hexToString@val,??_hexToString
  8875  003D9E  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  8876  003DA2  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  8877  003DA6  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  8878  003DAA  0E05               	movlw	5
  8879  003DAC  D005               	goto	u10150
  8880  003DAE                     u10155:
  8881  003DAE  90D8               	bcf	status,0,c
  8882  003DB0  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  8883  003DB2  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  8884  003DB4  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  8885  003DB6  3365               	rrcf	??_hexToString& (0+255),f,b
  8886  003DB8                     u10150:
  8887  003DB8  2EE8               	decfsz	wreg,f,c
  8888  003DBA  D7F9               	goto	u10155
  8889  003DBC  5165               	movf	??_hexToString& (0+255),w,b
  8890  003DBE  0B0F               	andlw	15
  8891  003DC0  EC06  F02B         	call	_hexToChar
  8892  003DC4  6EDF               	movwf	indf2,c
  8893  003DC6  0100               	movlb	0	; () banked
  8894  003DC8  2B69               	incf	hexToString@pointer& (0+255),f,b
  8895                           
  8896                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  8897  003DCA  5169               	movf	hexToString@pointer& (0+255),w,b
  8898  003DCC  0D01               	mullw	1
  8899  003DCE  0EAD               	movlw	low hexToString@number
  8900  003DD0  24F3               	addwf	prodl,w,c
  8901  003DD2  6ED9               	movwf	fsr2l,c
  8902  003DD4  0E01               	movlw	high hexToString@number
  8903  003DD6  20F4               	addwfc	prodh,w,c
  8904  003DD8  6EDA               	movwf	fsr2h,c
  8905  003DDA  5161               	movf	hexToString@val& (0+255),w,b
  8906  003DDC  0B0F               	andlw	15
  8907  003DDE  EC06  F02B         	call	_hexToChar
  8908  003DE2  6EDF               	movwf	indf2,c
  8909  003DE4  0100               	movlb	0	; () banked
  8910  003DE6  2B69               	incf	hexToString@pointer& (0+255),f,b
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;uart.c: 103: number[pointer++] = '\0';
  8914  003DE8  5169               	movf	hexToString@pointer& (0+255),w,b
  8915  003DEA  0D01               	mullw	1
  8916  003DEC  0EAD               	movlw	low hexToString@number
  8917  003DEE  24F3               	addwf	prodl,w,c
  8918  003DF0  6ED9               	movwf	fsr2l,c
  8919  003DF2  0E01               	movlw	high hexToString@number
  8920  003DF4  20F4               	addwfc	prodh,w,c
  8921  003DF6  6EDA               	movwf	fsr2h,c
  8922  003DF8  0E00               	movlw	0
  8923  003DFA  6EDF               	movwf	indf2,c
  8924                           
  8925                           ; BSR set to: 0
  8926  003DFC  2B69               	incf	hexToString@pointer& (0+255),f,b
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;uart.c: 104: return number;
  8930  003DFE  0EAD               	movlw	low hexToString@number
  8931  003E00  6F61               	movwf	?_hexToString& (0+255),b
  8932  003E02  0E01               	movlw	high hexToString@number
  8933  003E04  6F62               	movwf	(?_hexToString+1)& (0+255),b
  8934  003E06  0012               	return	
  8935  003E08                     __end_of_hexToString:
  8936                           	opt stack 0
  8937                           tblptru	equ	0xFF8
  8938                           tblptrh	equ	0xFF7
  8939                           tblptrl	equ	0xFF6
  8940                           tablat	equ	0xFF5
  8941                           prodh	equ	0xFF4
  8942                           prodl	equ	0xFF3
  8943                           intcon	equ	0xFF2
  8944                           intcon3	equ	0xFF0
  8945                           indf0	equ	0xFEF
  8946                           postinc0	equ	0xFEE
  8947                           plusw0	equ	0xFEB
  8948                           fsr0h	equ	0xFEA
  8949                           fsr0l	equ	0xFE9
  8950                           wreg	equ	0xFE8
  8951                           indf1	equ	0xFE7
  8952                           postinc1	equ	0xFE6
  8953                           postdec1	equ	0xFE5
  8954                           plusw1	equ	0xFE3
  8955                           fsr1h	equ	0xFE2
  8956                           fsr1l	equ	0xFE1
  8957                           indf2	equ	0xFDF
  8958                           postinc2	equ	0xFDE
  8959                           postdec2	equ	0xFDD
  8960                           plusw2	equ	0xFDB
  8961                           fsr2h	equ	0xFDA
  8962                           fsr2l	equ	0xFD9
  8963                           status	equ	0xFD8
  8964                           
  8965 ;; *************** function _hexToChar *****************
  8966 ;; Defined at:
  8967 ;;		line 84 in file "src/system/uart.c"
  8968 ;; Parameters:    Size  Location     Type
  8969 ;;  val             1    wreg     unsigned char 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  val             1    0[BANK0 ] unsigned char 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  1    wreg      unsigned char 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2, status,0
  8976 ;; Tracked objects:
  8977 ;;		On entry : 0/0
  8978 ;;		On exit  : 0/0
  8979 ;;		Unchanged: 0/0
  8980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8981 ;;      Params:         0       0       0       0       0       0       0       0       0
  8982 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8984 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8985 ;;Total ram usage:        1 bytes
  8986 ;; Hardware stack levels used:    1
  8987 ;; Hardware stack levels required when called:    4
  8988 ;; This function calls:
  8989 ;;		Nothing
  8990 ;; This function is called by:
  8991 ;;		_hexToString
  8992 ;; This function uses a non-reentrant model
  8993 ;;
  8994                           
  8995                           	psect	text21
  8996  00560C                     __ptext21:
  8997                           	opt stack 0
  8998  00560C                     _hexToChar:
  8999                           	opt stack 21
  9000                           
  9001                           ; BSR set to: 0
  9002                           ;incstack = 0
  9003                           ;hexToChar@val stored from wreg
  9004  00560C  0100               	movlb	0	; () banked
  9005  00560E  6F60               	movwf	hexToChar@val& (0+255),b
  9006                           
  9007                           ;uart.c: 85: if (val < 10) {
  9008  005610  0E0A               	movlw	10
  9009  005612  0100               	movlb	0	; () banked
  9010  005614  6160               	cpfslt	hexToChar@val& (0+255),b
  9011  005616  D003               	goto	l801
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;uart.c: 86: return val + 0x30u;
  9015  005618  5160               	movf	hexToChar@val& (0+255),w,b
  9016  00561A  0F30               	addlw	48
  9017                           
  9018                           ; BSR set to: 0
  9019  00561C  0012               	return	
  9020  00561E                     l801:
  9021                           
  9022                           ; BSR set to: 0
  9023                           
  9024                           ; BSR set to: 0
  9025  00561E  0E10               	movlw	16
  9026  005620  6160               	cpfslt	hexToChar@val& (0+255),b
  9027  005622  D003               	goto	l804
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;uart.c: 88: return val + 0x41u - 10;
  9031  005624  5160               	movf	hexToChar@val& (0+255),w,b
  9032  005626  0F37               	addlw	55
  9033                           
  9034                           ; BSR set to: 0
  9035  005628  0012               	return	
  9036  00562A                     l804:
  9037                           
  9038                           ; BSR set to: 0
  9039                           ;uart.c: 89: }
  9040                           ;uart.c: 90: return 0;
  9041                           
  9042                           ; BSR set to: 0
  9043                           
  9044                           ; BSR set to: 0
  9045  00562A  0E00               	movlw	0
  9046  00562C  0012               	return	
  9047  00562E                     __end_of_hexToChar:
  9048                           	opt stack 0
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           intcon	equ	0xFF2
  9056                           intcon3	equ	0xFF0
  9057                           indf0	equ	0xFEF
  9058                           postinc0	equ	0xFEE
  9059                           plusw0	equ	0xFEB
  9060                           fsr0h	equ	0xFEA
  9061                           fsr0l	equ	0xFE9
  9062                           wreg	equ	0xFE8
  9063                           indf1	equ	0xFE7
  9064                           postinc1	equ	0xFE6
  9065                           postdec1	equ	0xFE5
  9066                           plusw1	equ	0xFE3
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           plusw2	equ	0xFDB
  9073                           fsr2h	equ	0xFDA
  9074                           fsr2l	equ	0xFD9
  9075                           status	equ	0xFD8
  9076                           
  9077 ;; *************** function _ipProtocolToString *****************
  9078 ;; Defined at:
  9079 ;;		line 149 in file "src/system/uart.c"
  9080 ;; Parameters:    Size  Location     Type
  9081 ;;  protocol        1    wreg     enum E5627
  9082 ;; Auto vars:     Size  Location     Type
  9083 ;;  protocol        1    2[BANK0 ] enum E5627
  9084 ;; Return value:  Size  Location     Type
  9085 ;;                  2    0[BANK0 ] PTR unsigned char 
  9086 ;; Registers used:
  9087 ;;		wreg, status,2, status,0
  9088 ;; Tracked objects:
  9089 ;;		On entry : 0/0
  9090 ;;		On exit  : 0/0
  9091 ;;		Unchanged: 0/0
  9092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9093 ;;      Params:         0       2       0       0       0       0       0       0       0
  9094 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9095 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9096 ;;      Totals:         0       3       0       0       0       0       0       0       0
  9097 ;;Total ram usage:        3 bytes
  9098 ;; Hardware stack levels used:    1
  9099 ;; Hardware stack levels required when called:    4
  9100 ;; This function calls:
  9101 ;;		Nothing
  9102 ;; This function is called by:
  9103 ;;		_ipv4_handleNewPacket
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text22
  9108  005044                     __ptext22:
  9109                           	opt stack 0
  9110  005044                     _ipProtocolToString:
  9111                           	opt stack 23
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;incstack = 0
  9115                           ;ipProtocolToString@protocol stored from wreg
  9116  005044  0100               	movlb	0	; () banked
  9117  005046  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  9118                           
  9119                           ;uart.c: 150: switch (protocol) {
  9120  005048  D015               	goto	l833
  9121  00504A                     
  9122                           ;uart.c: 152: return "ICMP";
  9123  00504A  0EC9               	movlw	low STR_65
  9124  00504C  0100               	movlb	0	; () banked
  9125  00504E  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9126  005050  0E7F               	movlw	high STR_65
  9127  005052  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9128                           
  9129                           ; BSR set to: 0
  9130  005054  0012               	return	
  9131  005056                     
  9132                           ; BSR set to: 0
  9133                           ;uart.c: 154: return "TCP";
  9134                           
  9135                           ; BSR set to: 0
  9136  005056  0EDD               	movlw	low STR_66
  9137  005058  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9138  00505A  0E7F               	movlw	high STR_66
  9139  00505C  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9140                           
  9141                           ; BSR set to: 0
  9142  00505E  0012               	return	
  9143  005060                     
  9144                           ; BSR set to: 0
  9145                           ;uart.c: 156: return "UDP";
  9146                           
  9147                           ; BSR set to: 0
  9148  005060  0EE1               	movlw	low STR_67
  9149  005062  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9150  005064  0E7F               	movlw	high STR_67
  9151  005066  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9152                           
  9153                           ; BSR set to: 0
  9154  005068  0012               	return	
  9155  00506A                     
  9156                           ; BSR set to: 0
  9157                           ;uart.c: 158: return "Unknown Protocol";
  9158                           
  9159                           ; BSR set to: 0
  9160  00506A  0EA7               	movlw	low STR_68
  9161  00506C  6F60               	movwf	?_ipProtocolToString& (0+255),b
  9162  00506E  0E7E               	movlw	high STR_68
  9163  005070  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;uart.c: 159: }
  9167                           
  9168                           ; BSR set to: 0
  9169  005072  0012               	return	
  9170  005074                     l833:
  9171                           
  9172                           ; BSR set to: 0
  9173  005074  0100               	movlb	0	; () banked
  9174  005076  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  9175                           
  9176                           ; Switch size 1, requested type "space"
  9177                           ; Number of cases is 3, Range of values is 1 to 17
  9178                           ; switch strategies available:
  9179                           ; Name         Instructions Cycles
  9180                           ; simple_byte           10     6 (average)
  9181                           ;	Chosen strategy is simple_byte
  9182  005078  0A01               	xorlw	1	; case 1
  9183  00507A  B4D8               	btfsc	status,2,c
  9184  00507C  D7E6               	goto	l834
  9185  00507E  0A07               	xorlw	7	; case 6
  9186  005080  B4D8               	btfsc	status,2,c
  9187  005082  D7E9               	goto	l836
  9188  005084  0A17               	xorlw	23	; case 17
  9189  005086  B4D8               	btfsc	status,2,c
  9190  005088  D7EB               	goto	l837
  9191  00508A  D7EF               	goto	l838
  9192  00508C                     __end_of_ipProtocolToString:
  9193                           	opt stack 0
  9194                           tblptru	equ	0xFF8
  9195                           tblptrh	equ	0xFF7
  9196                           tblptrl	equ	0xFF6
  9197                           tablat	equ	0xFF5
  9198                           prodh	equ	0xFF4
  9199                           prodl	equ	0xFF3
  9200                           intcon	equ	0xFF2
  9201                           intcon3	equ	0xFF0
  9202                           indf0	equ	0xFEF
  9203                           postinc0	equ	0xFEE
  9204                           plusw0	equ	0xFEB
  9205                           fsr0h	equ	0xFEA
  9206                           fsr0l	equ	0xFE9
  9207                           wreg	equ	0xFE8
  9208                           indf1	equ	0xFE7
  9209                           postinc1	equ	0xFE6
  9210                           postdec1	equ	0xFE5
  9211                           plusw1	equ	0xFE3
  9212                           fsr1h	equ	0xFE2
  9213                           fsr1l	equ	0xFE1
  9214                           indf2	equ	0xFDF
  9215                           postinc2	equ	0xFDE
  9216                           postdec2	equ	0xFDD
  9217                           plusw2	equ	0xFDB
  9218                           fsr2h	equ	0xFDA
  9219                           fsr2l	equ	0xFD9
  9220                           status	equ	0xFD8
  9221                           
  9222 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  9223 ;; Defined at:
  9224 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  9225 ;; Parameters:    Size  Location     Type
  9226 ;;		None
  9227 ;; Auto vars:     Size  Location     Type
  9228 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  9229 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  9230 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  9231 ;;  opcode          1   23[BANK0 ] unsigned char 
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  1    wreg      void 
  9234 ;; Registers used:
  9235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9241 ;;      Params:         0       0       0       0       0       0       0       0       0
  9242 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9243 ;;      Temps:          0       6       0       0       0       0       0       0       0
  9244 ;;      Totals:         0      11       0       0       0       0       0       0       0
  9245 ;;Total ram usage:       11 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    7
  9248 ;; This function calls:
  9249 ;;		_enc424j600_getNextPacketPointer
  9250 ;;		_enc424j600_readSPI
  9251 ;;		_enc424j600_setERXDATAReadPointer
  9252 ;;		_enc424j600_setNextPacketPointer
  9253 ;;		_enc424j600_writeSPI
  9254 ;; This function is called by:
  9255 ;;		_ethernet_rxGetNewFrame
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text23
  9260  00482A                     __ptext23:
  9261                           	opt stack 0
  9262  00482A                     _ethernetController_updateNextPacketPointer:
  9263                           	opt stack 21
  9264                           
  9265                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  9266                           ;ENC424J600.c: 336: uint8_t opcode;
  9267                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  9268                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  9269                           
  9270                           ; BSR set to: 0
  9271                           ;incstack = 0
  9272  00482A  ECC3  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
  9273  00482E  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  9274  004832  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  9275                           
  9276                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  9277  004836  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  9278  00483A  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  9279  00483E  EC08  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9280                           
  9281                           ;ENC424J600.c: 340: opcode = 0x2C;
  9282  004842  0E2C               	movlw	44
  9283  004844  0100               	movlb	0	; () banked
  9284  004846  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  9285                           
  9286                           ; BSR set to: 0
  9287                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  9288  004848  9881               	bcf	3969,4,c	;volatile
  9289                           
  9290                           ; BSR set to: 0
  9291                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  9292  00484A  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  9293  00484C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9294  00484E  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  9295  004850  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9296  004852  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
  9297                           
  9298                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  9299  004856  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  9300  004858  0100               	movlb	0	; () banked
  9301  00485A  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9302  00485C  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  9303  00485E  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9304  004860  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
  9305                           
  9306                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  9307  004864  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  9308  004866  0100               	movlb	0	; () banked
  9309  004868  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9310  00486A  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  9311  00486C  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9312  00486E  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
  9313                           
  9314                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  9315  004872  8881               	bsf	3969,4,c	;volatile
  9316                           
  9317                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  9318  004874  0E00               	movlw	0
  9319  004876  0100               	movlb	0	; () banked
  9320  004878  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  9321  00487A  0EFF               	movlw	255
  9322  00487C  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  9323  00487E  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  9324  004880  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  9325  004882  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  9326  004884  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  9327  004886  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  9328  004888  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  9329  00488A  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  9330  00488C  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  9331  00488E  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  9332  004890  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  9333  004892  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  9334  004894  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  9335  004896  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  9336  004898  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  9337  00489A  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  9338  00489C  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  9339  00489E  ECC8  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
  9340  0048A2  0012               	return		;funcret
  9341  0048A4                     __end_of_ethernetController_updateNextPacketPointer:
  9342                           	opt stack 0
  9343                           tblptru	equ	0xFF8
  9344                           tblptrh	equ	0xFF7
  9345                           tblptrl	equ	0xFF6
  9346                           tablat	equ	0xFF5
  9347                           prodh	equ	0xFF4
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           intcon3	equ	0xFF0
  9351                           indf0	equ	0xFEF
  9352                           postinc0	equ	0xFEE
  9353                           plusw0	equ	0xFEB
  9354                           fsr0h	equ	0xFEA
  9355                           fsr0l	equ	0xFE9
  9356                           wreg	equ	0xFE8
  9357                           indf1	equ	0xFE7
  9358                           postinc1	equ	0xFE6
  9359                           postdec1	equ	0xFE5
  9360                           plusw1	equ	0xFE3
  9361                           fsr1h	equ	0xFE2
  9362                           fsr1l	equ	0xFE1
  9363                           indf2	equ	0xFDF
  9364                           postinc2	equ	0xFDE
  9365                           postdec2	equ	0xFDD
  9366                           plusw2	equ	0xFDB
  9367                           fsr2h	equ	0xFDA
  9368                           fsr2l	equ	0xFD9
  9369                           status	equ	0xFD8
  9370                           
  9371 ;; *************** function _ethernetController_getRSV *****************
  9372 ;; Defined at:
  9373 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  9374 ;; Parameters:    Size  Location     Type
  9375 ;;  address         2   17[BANK0 ] unsigned int 
  9376 ;; Auto vars:     Size  Location     Type
  9377 ;;  i               1   23[BANK0 ] unsigned char 
  9378 ;;  opcode          1   22[BANK0 ] unsigned char 
  9379 ;; Return value:  Size  Location     Type
  9380 ;;                  5   17[BANK0 ] struct RSV
  9381 ;; Registers used:
  9382 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9383 ;; Tracked objects:
  9384 ;;		On entry : 0/0
  9385 ;;		On exit  : 0/0
  9386 ;;		Unchanged: 0/0
  9387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9388 ;;      Params:         0       5       0       0       0       0       0       0       0
  9389 ;;      Locals:         0       2       0       0       0       0       0       0       0
  9390 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9391 ;;      Totals:         0       7       0       0       0       0       0       0       0
  9392 ;;Total ram usage:        7 bytes
  9393 ;; Hardware stack levels used:    1
  9394 ;; Hardware stack levels required when called:    7
  9395 ;; This function calls:
  9396 ;;		_enc424j600_readSPI
  9397 ;;		_enc424j600_setERXDATAReadPointer
  9398 ;;		_enc424j600_updateReceiveStatusVector
  9399 ;;		_enc424j600_writeSPI
  9400 ;; This function is called by:
  9401 ;;		_ethernet_rxGetNewFrame
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text24
  9406  00491C                     __ptext24:
  9407                           	opt stack 0
  9408  00491C                     _ethernetController_getRSV:
  9409                           	opt stack 21
  9410                           
  9411                           ;ENC424J600.c: 300: uint8_t static temp[6];
  9412                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  9413                           
  9414                           ;incstack = 0
  9415  00491C  0E02               	movlw	2
  9416  00491E  0100               	movlb	0	; () banked
  9417  004920  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  9418  004922  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  9419  004924  0E00               	movlw	0
  9420  004926  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  9421  004928  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  9422  00492A  EC08  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  9423                           
  9424                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  9425  00492E  0E2C               	movlw	44
  9426  004930  0100               	movlb	0	; () banked
  9427  004932  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  9431  004934  9881               	bcf	3969,4,c	;volatile
  9432                           
  9433                           ; BSR set to: 0
  9434                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  9435  004936  0E76               	movlw	low ethernetController_getRSV@opcode
  9436  004938  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  9437  00493A  0E00               	movlw	high ethernetController_getRSV@opcode
  9438  00493C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  9439  00493E  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
  9440                           
  9441                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  9442  004942  0E00               	movlw	0
  9443  004944  0100               	movlb	0	; () banked
  9444  004946  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  9445  004948                     l9561:
  9446                           
  9447                           ; BSR set to: 0
  9448  004948  0E05               	movlw	5
  9449  00494A  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  9450  00494C  D001               	goto	l165
  9451  00494E  D00D               	goto	u11330
  9452  004950                     l165:
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  9456                           
  9457                           ; BSR set to: 0
  9458  004950  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  9459  004952  0D01               	mullw	1
  9460  004954  0EC1               	movlw	low ethernetController_getRSV@temp
  9461  004956  24F3               	addwf	prodl,w,c
  9462  004958  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  9463  00495A  0E01               	movlw	high ethernetController_getRSV@temp
  9464  00495C  20F4               	addwfc	prodh,w,c
  9465  00495E  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  9466  004960  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
  9467  004964  0100               	movlb	0	; () banked
  9468  004966  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  9469  004968  D7EF               	goto	l9561
  9470  00496A                     u11330:
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;ENC424J600.c: 307: }
  9474                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  9475  00496A  8881               	bsf	3969,4,c	;volatile
  9476                           
  9477                           ; BSR set to: 0
  9478                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  9479  00496C  0EC1               	movlw	low ethernetController_getRSV@temp
  9480  00496E  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  9481  004970  0E01               	movlw	high ethernetController_getRSV@temp
  9482  004972  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  9483  004974  ECB6  F009         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  9484  004978  CFE9 FFD9          	movff	fsr0l,fsr2l
  9485  00497C  CFEA FFDA          	movff	fsr0h,fsr2h
  9486  004980  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  9487  004984  0E04               	movlw	4
  9488  004986                     u11341:
  9489  004986  CFDB FFEB          	movff	plusw2,plusw0
  9490  00498A  06E8               	decf	wreg,f,c
  9491  00498C  E2FC               	bc	u11341
  9492  00498E  0012               	return	
  9493  004990                     __end_of_ethernetController_getRSV:
  9494                           	opt stack 0
  9495                           tblptru	equ	0xFF8
  9496                           tblptrh	equ	0xFF7
  9497                           tblptrl	equ	0xFF6
  9498                           tablat	equ	0xFF5
  9499                           prodh	equ	0xFF4
  9500                           prodl	equ	0xFF3
  9501                           intcon	equ	0xFF2
  9502                           intcon3	equ	0xFF0
  9503                           indf0	equ	0xFEF
  9504                           postinc0	equ	0xFEE
  9505                           plusw0	equ	0xFEB
  9506                           fsr0h	equ	0xFEA
  9507                           fsr0l	equ	0xFE9
  9508                           wreg	equ	0xFE8
  9509                           indf1	equ	0xFE7
  9510                           postinc1	equ	0xFE6
  9511                           postdec1	equ	0xFE5
  9512                           plusw1	equ	0xFE3
  9513                           fsr1h	equ	0xFE2
  9514                           fsr1l	equ	0xFE1
  9515                           indf2	equ	0xFDF
  9516                           postinc2	equ	0xFDE
  9517                           postdec2	equ	0xFDD
  9518                           plusw2	equ	0xFDB
  9519                           fsr2h	equ	0xFDA
  9520                           fsr2l	equ	0xFD9
  9521                           status	equ	0xFD8
  9522                           
  9523 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  9524 ;; Defined at:
  9525 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  9526 ;; Parameters:    Size  Location     Type
  9527 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  9528 ;;		 -> ethernetController_getRSV@temp(6), 
  9529 ;; Auto vars:     Size  Location     Type
  9530 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  9531 ;; Return value:  Size  Location     Type
  9532 ;;                  5    0[BANK0 ] struct RSV
  9533 ;; Registers used:
  9534 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  9535 ;; Tracked objects:
  9536 ;;		On entry : 0/0
  9537 ;;		On exit  : 0/0
  9538 ;;		Unchanged: 0/0
  9539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9540 ;;      Params:         0       5       0       0       0       0       0       0       0
  9541 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9542 ;;      Temps:          0       7       0       0       0       0       0       0       0
  9543 ;;      Totals:         0      17       0       0       0       0       0       0       0
  9544 ;;Total ram usage:       17 bytes
  9545 ;; Hardware stack levels used:    1
  9546 ;; Hardware stack levels required when called:    4
  9547 ;; This function calls:
  9548 ;;		Nothing
  9549 ;; This function is called by:
  9550 ;;		_ethernetController_getRSV
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           	psect	text25
  9555  00136C                     __ptext25:
  9556                           	opt stack 0
  9557  00136C                     _enc424j600_updateReceiveStatusVector:
  9558                           	opt stack 23
  9559                           
  9560                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  9561                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  9562                           
  9563                           ;incstack = 0
  9564  00136C  0E00               	movlw	0
  9565  00136E  0100               	movlb	0	; () banked
  9566  001370  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9567  001372  0EFF               	movlw	255
  9568  001374  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  9569  001376  EE20 F001          	lfsr	2,1
  9570  00137A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9571  00137C  26D9               	addwf	fsr2l,f,c
  9572  00137E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9573  001380  22DA               	addwfc	fsr2h,f,c
  9574  001382  50DF               	movf	indf2,w,c
  9575  001384  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  9576  001386  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  9577  001388  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  9578  00138A  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  9579  00138C  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9580  00138E  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  9581  001390  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  9582  001392  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  9583  001394  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  9584  001398  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  9585  00139C  50DF               	movf	indf2,w,c
  9586  00139E  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  9587  0013A0  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  9588  0013A2  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  9589  0013A4  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  9590  0013A6  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  9591  0013A8  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  9592  0013AA  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  9593  0013AC  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  9594                           
  9595                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  9596  0013AE  EE20 F002          	lfsr	2,2
  9597  0013B2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9598  0013B4  26D9               	addwf	fsr2l,f,c
  9599  0013B6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9600  0013B8  22DA               	addwfc	fsr2h,f,c
  9601  0013BA  A0DF               	btfss	indf2,0,c
  9602  0013BC  D003               	goto	u10450
  9603  0013BE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9604  0013C0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9605  0013C2  D002               	goto	u10468
  9606  0013C4                     u10450:
  9607  0013C4  0100               	movlb	0	; () banked
  9608  0013C6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9609  0013C8                     u10468:
  9610  0013C8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9611  0013CA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9612  0013CC  0BFE               	andlw	-2
  9613  0013CE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9614  0013D0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9615                           
  9616                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  9617  0013D2  EE20 F002          	lfsr	2,2
  9618  0013D6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9619  0013D8  26D9               	addwf	fsr2l,f,c
  9620  0013DA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9621  0013DC  22DA               	addwfc	fsr2h,f,c
  9622  0013DE  A4DF               	btfss	indf2,2,c
  9623  0013E0  D003               	goto	u10470
  9624  0013E2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9625  0013E4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9626  0013E6  D002               	goto	u10488
  9627  0013E8                     u10470:
  9628  0013E8  0100               	movlb	0	; () banked
  9629  0013EA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9630  0013EC                     u10488:
  9631  0013EC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9632  0013EE  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9633  0013F0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9634  0013F2  0BFD               	andlw	-3
  9635  0013F4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9636  0013F6  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9637                           
  9638                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  9639  0013F8  EE20 F002          	lfsr	2,2
  9640  0013FC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9641  0013FE  26D9               	addwf	fsr2l,f,c
  9642  001400  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9643  001402  22DA               	addwfc	fsr2h,f,c
  9644  001404  A8DF               	btfss	indf2,4,c
  9645  001406  D003               	goto	u10490
  9646  001408  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9647  00140A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9648  00140C  D002               	goto	u10508
  9649  00140E                     u10490:
  9650  00140E  0100               	movlb	0	; () banked
  9651  001410  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9652  001412                     u10508:
  9653  001412  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9654  001414  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9655  001416  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9656  001418  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9657  00141A  0BFB               	andlw	-5
  9658  00141C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9659  00141E  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9660                           
  9661                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  9662  001420  EE20 F002          	lfsr	2,2
  9663  001424  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9664  001426  26D9               	addwf	fsr2l,f,c
  9665  001428  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9666  00142A  22DA               	addwfc	fsr2h,f,c
  9667  00142C  AADF               	btfss	indf2,5,c
  9668  00142E  D003               	goto	u10510
  9669  001430  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9670  001432  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9671  001434  D002               	goto	u10528
  9672  001436                     u10510:
  9673  001436  0100               	movlb	0	; () banked
  9674  001438  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9675  00143A                     u10528:
  9676  00143A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9677  00143C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9678  00143E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9679  001440  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9680  001442  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9681  001444  0BF7               	andlw	-9
  9682  001446  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9683  001448  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9684                           
  9685                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  9686  00144A  EE20 F002          	lfsr	2,2
  9687  00144E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9688  001450  26D9               	addwf	fsr2l,f,c
  9689  001452  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9690  001454  22DA               	addwfc	fsr2h,f,c
  9691  001456  ACDF               	btfss	indf2,6,c
  9692  001458  D003               	goto	u10530
  9693  00145A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9694  00145C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9695  00145E  D002               	goto	u10548
  9696  001460                     u10530:
  9697  001460  0100               	movlb	0	; () banked
  9698  001462  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9699  001464                     u10548:
  9700  001464  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9701  001466  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9702  001468  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9703  00146A  0BEF               	andlw	-17
  9704  00146C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9705  00146E  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9706                           
  9707                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9708  001470  EE20 F002          	lfsr	2,2
  9709  001474  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9710  001476  26D9               	addwf	fsr2l,f,c
  9711  001478  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9712  00147A  22DA               	addwfc	fsr2h,f,c
  9713  00147C  AEDF               	btfss	indf2,7,c
  9714  00147E  D003               	goto	u10550
  9715  001480  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9716  001482  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9717  001484  D002               	goto	u10568
  9718  001486                     u10550:
  9719  001486  0100               	movlb	0	; () banked
  9720  001488  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9721  00148A                     u10568:
  9722  00148A  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9723  00148C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9724  00148E  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9725  001490  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9726  001492  0BDF               	andlw	-33
  9727  001494  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9728  001496  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9729                           
  9730                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  9731  001498  EE20 F003          	lfsr	2,3
  9732  00149C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9733  00149E  26D9               	addwf	fsr2l,f,c
  9734  0014A0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9735  0014A2  22DA               	addwfc	fsr2h,f,c
  9736  0014A4  A0DF               	btfss	indf2,0,c
  9737  0014A6  D003               	goto	u10570
  9738  0014A8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9739  0014AA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9740  0014AC  D002               	goto	u10588
  9741  0014AE                     u10570:
  9742  0014AE  0100               	movlb	0	; () banked
  9743  0014B0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9744  0014B2                     u10588:
  9745  0014B2  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9746  0014B4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9747  0014B6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9748  0014B8  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9749  0014BA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9750  0014BC  0BBF               	andlw	-65
  9751  0014BE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9752  0014C0  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9753                           
  9754                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  9755  0014C2  EE20 F003          	lfsr	2,3
  9756  0014C6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9757  0014C8  26D9               	addwf	fsr2l,f,c
  9758  0014CA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9759  0014CC  22DA               	addwfc	fsr2h,f,c
  9760  0014CE  A2DF               	btfss	indf2,1,c
  9761  0014D0  D003               	goto	u10590
  9762  0014D2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9763  0014D4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9764  0014D6  D002               	goto	u10608
  9765  0014D8                     u10590:
  9766  0014D8  0100               	movlb	0	; () banked
  9767  0014DA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9768  0014DC                     u10608:
  9769  0014DC  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9770  0014DE  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9771  0014E0  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  9772  0014E2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9773  0014E4  0B7F               	andlw	-129
  9774  0014E6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9775  0014E8  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  9776                           
  9777                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9778  0014EA  EE20 F003          	lfsr	2,3
  9779  0014EE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9780  0014F0  26D9               	addwf	fsr2l,f,c
  9781  0014F2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9782  0014F4  22DA               	addwfc	fsr2h,f,c
  9783  0014F6  A6DF               	btfss	indf2,3,c
  9784  0014F8  D003               	goto	u10610
  9785  0014FA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9786  0014FC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9787  0014FE  D002               	goto	u10628
  9788  001500                     u10610:
  9789  001500  0100               	movlb	0	; () banked
  9790  001502  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9791  001504                     u10628:
  9792  001504  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9793  001506  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9794  001508  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9795  00150A  0BFD               	andlw	-3
  9796  00150C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9797  00150E  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9798                           
  9799                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  9800  001510  EE20 F003          	lfsr	2,3
  9801  001514  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9802  001516  26D9               	addwf	fsr2l,f,c
  9803  001518  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9804  00151A  22DA               	addwfc	fsr2h,f,c
  9805  00151C  A8DF               	btfss	indf2,4,c
  9806  00151E  D003               	goto	u10630
  9807  001520  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9808  001522  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9809  001524  D002               	goto	u10648
  9810  001526                     u10630:
  9811  001526  0100               	movlb	0	; () banked
  9812  001528  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9813  00152A                     u10648:
  9814  00152A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9815  00152C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9816  00152E  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9817  001530  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9818  001532  0BFB               	andlw	-5
  9819  001534  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9820  001536  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9821                           
  9822                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  9823  001538  EE20 F003          	lfsr	2,3
  9824  00153C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9825  00153E  26D9               	addwf	fsr2l,f,c
  9826  001540  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9827  001542  22DA               	addwfc	fsr2h,f,c
  9828  001544  AADF               	btfss	indf2,5,c
  9829  001546  D003               	goto	u10650
  9830  001548  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9831  00154A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9832  00154C  D002               	goto	u10668
  9833  00154E                     u10650:
  9834  00154E  0100               	movlb	0	; () banked
  9835  001550  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9836  001552                     u10668:
  9837  001552  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9838  001554  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9839  001556  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9840  001558  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9841  00155A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9842  00155C  0BF7               	andlw	-9
  9843  00155E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9844  001560  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9845                           
  9846                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  9847  001562  EE20 F003          	lfsr	2,3
  9848  001566  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9849  001568  26D9               	addwf	fsr2l,f,c
  9850  00156A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9851  00156C  22DA               	addwfc	fsr2h,f,c
  9852  00156E  ACDF               	btfss	indf2,6,c
  9853  001570  D003               	goto	u10670
  9854  001572  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9855  001574  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9856  001576  D002               	goto	u10688
  9857  001578                     u10670:
  9858  001578  0100               	movlb	0	; () banked
  9859  00157A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9860  00157C                     u10688:
  9861  00157C  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9862  00157E  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9863  001580  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9864  001582  0BEF               	andlw	-17
  9865  001584  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9866  001586  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9867                           
  9868                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  9869  001588  EE20 F003          	lfsr	2,3
  9870  00158C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9871  00158E  26D9               	addwf	fsr2l,f,c
  9872  001590  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9873  001592  22DA               	addwfc	fsr2h,f,c
  9874  001594  AEDF               	btfss	indf2,7,c
  9875  001596  D003               	goto	u10690
  9876  001598  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9877  00159A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9878  00159C  D002               	goto	u10708
  9879  00159E                     u10690:
  9880  00159E  0100               	movlb	0	; () banked
  9881  0015A0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9882  0015A2                     u10708:
  9883  0015A2  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9884  0015A4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9885  0015A6  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9886  0015A8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9887  0015AA  0BDF               	andlw	-33
  9888  0015AC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9889  0015AE  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9890                           
  9891                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  9892  0015B0  EE20 F004          	lfsr	2,4
  9893  0015B4  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9894  0015B6  26D9               	addwf	fsr2l,f,c
  9895  0015B8  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9896  0015BA  22DA               	addwfc	fsr2h,f,c
  9897  0015BC  A0DF               	btfss	indf2,0,c
  9898  0015BE  D003               	goto	u10710
  9899  0015C0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9900  0015C2  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9901  0015C4  D002               	goto	u10728
  9902  0015C6                     u10710:
  9903  0015C6  0100               	movlb	0	; () banked
  9904  0015C8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9905  0015CA                     u10728:
  9906  0015CA  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9907  0015CC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9908  0015CE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9909  0015D0  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9910  0015D2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9911  0015D4  0BBF               	andlw	-65
  9912  0015D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9913  0015D8  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9914                           
  9915                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  9916  0015DA  EE20 F004          	lfsr	2,4
  9917  0015DE  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9918  0015E0  26D9               	addwf	fsr2l,f,c
  9919  0015E2  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9920  0015E4  22DA               	addwfc	fsr2h,f,c
  9921  0015E6  A2DF               	btfss	indf2,1,c
  9922  0015E8  D003               	goto	u10730
  9923  0015EA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9924  0015EC  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9925  0015EE  D002               	goto	u10748
  9926  0015F0                     u10730:
  9927  0015F0  0100               	movlb	0	; () banked
  9928  0015F2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9929  0015F4                     u10748:
  9930  0015F4  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9931  0015F6  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9932  0015F8  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  9933  0015FA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9934  0015FC  0B7F               	andlw	-129
  9935  0015FE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9936  001600  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  9937                           
  9938                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  9939  001602  EE20 F004          	lfsr	2,4
  9940  001606  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9941  001608  26D9               	addwf	fsr2l,f,c
  9942  00160A  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9943  00160C  22DA               	addwfc	fsr2h,f,c
  9944  00160E  A4DF               	btfss	indf2,2,c
  9945  001610  D003               	goto	u10750
  9946  001612  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9947  001614  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9948  001616  D002               	goto	u10768
  9949  001618                     u10750:
  9950  001618  0100               	movlb	0	; () banked
  9951  00161A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9952  00161C                     u10768:
  9953  00161C  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9954  00161E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9955  001620  0BFE               	andlw	-2
  9956  001622  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9957  001624  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  9958                           
  9959                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  9960  001626  EE20 F004          	lfsr	2,4
  9961  00162A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9962  00162C  26D9               	addwf	fsr2l,f,c
  9963  00162E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9964  001630  22DA               	addwfc	fsr2h,f,c
  9965  001632  A6DF               	btfss	indf2,3,c
  9966  001634  D003               	goto	u10770
  9967  001636  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9968  001638  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9969  00163A  D002               	goto	u10788
  9970  00163C                     u10770:
  9971  00163C  0100               	movlb	0	; () banked
  9972  00163E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9973  001640                     u10788:
  9974  001640  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9975  001642  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9976  001644  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9977  001646  0BFD               	andlw	-3
  9978  001648  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  9979  00164A  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  9980                           
  9981                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  9982  00164C  EE20 F004          	lfsr	2,4
  9983  001650  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  9984  001652  26D9               	addwf	fsr2l,f,c
  9985  001654  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  9986  001656  22DA               	addwfc	fsr2h,f,c
  9987  001658  A8DF               	btfss	indf2,4,c
  9988  00165A  D003               	goto	u10790
  9989  00165C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9990  00165E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9991  001660  D002               	goto	u10808
  9992  001662                     u10790:
  9993  001662  0100               	movlb	0	; () banked
  9994  001664  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  9995  001666                     u10808:
  9996  001666  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9997  001668  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  9998  00166A  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  9999  00166C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10000  00166E  0BFB               	andlw	-5
 10001  001670  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 10002  001672  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;ENC424J600.c: 746: return receiveStatusVector;
 10006  001674  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
 10007  001678  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
 10008  00167C  0E04               	movlw	4
 10009  00167E                     u10811:
 10010  00167E  CFDB FFEB          	movff	plusw2,plusw0
 10011  001682  06E8               	decf	wreg,f,c
 10012  001684  E2FC               	bc	u10811
 10013  001686  0012               	return	
 10014  001688                     __end_of_enc424j600_updateReceiveStatusVector:
 10015                           	opt stack 0
 10016                           tblptru	equ	0xFF8
 10017                           tblptrh	equ	0xFF7
 10018                           tblptrl	equ	0xFF6
 10019                           tablat	equ	0xFF5
 10020                           prodh	equ	0xFF4
 10021                           prodl	equ	0xFF3
 10022                           intcon	equ	0xFF2
 10023                           intcon3	equ	0xFF0
 10024                           indf0	equ	0xFEF
 10025                           postinc0	equ	0xFEE
 10026                           plusw0	equ	0xFEB
 10027                           fsr0h	equ	0xFEA
 10028                           fsr0l	equ	0xFE9
 10029                           wreg	equ	0xFE8
 10030                           indf1	equ	0xFE7
 10031                           postinc1	equ	0xFE6
 10032                           postdec1	equ	0xFE5
 10033                           plusw1	equ	0xFE3
 10034                           fsr1h	equ	0xFE2
 10035                           fsr1l	equ	0xFE1
 10036                           indf2	equ	0xFDF
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           plusw2	equ	0xFDB
 10040                           fsr2h	equ	0xFDA
 10041                           fsr2l	equ	0xFD9
 10042                           status	equ	0xFD8
 10043                           
 10044 ;; *************** function _ethernetController_getEtherTypeField *****************
 10045 ;; Defined at:
 10046 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
 10047 ;; Parameters:    Size  Location     Type
 10048 ;;  field           9   15[BANK0 ] struct memoryField
 10049 ;; Auto vars:     Size  Location     Type
 10050 ;;  ethertype       2   28[BANK0 ] enum E5508
 10051 ;;  highByte        1   32[BANK0 ] unsigned char 
 10052 ;;  lowByte         1   31[BANK0 ] unsigned char 
 10053 ;;  opcode          1   30[BANK0 ] unsigned char 
 10054 ;; Return value:  Size  Location     Type
 10055 ;;                  2   15[BANK0 ] enum E5508
 10056 ;; Registers used:
 10057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10058 ;; Tracked objects:
 10059 ;;		On entry : 0/0
 10060 ;;		On exit  : 0/0
 10061 ;;		Unchanged: 0/0
 10062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10063 ;;      Params:         0       9       0       0       0       0       0       0       0
 10064 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10065 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10066 ;;      Totals:         0      18       0       0       0       0       0       0       0
 10067 ;;Total ram usage:       18 bytes
 10068 ;; Hardware stack levels used:    1
 10069 ;; Hardware stack levels required when called:    7
 10070 ;; This function calls:
 10071 ;;		_enc424j600_readSPI
 10072 ;;		_enc424j600_setERXDATAReadPointer
 10073 ;;		_enc424j600_writeSPI
 10074 ;; This function is called by:
 10075 ;;		_ethernet_rxGetNewFrame
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           	psect	text26
 10080  004AEA                     __ptext26:
 10081                           	opt stack 0
 10082  004AEA                     _ethernetController_getEtherTypeField:
 10083                           	opt stack 21
 10084                           
 10085                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
 10086                           
 10087                           ; BSR set to: 0
 10088                           ;incstack = 0
 10089  004AEA  0E00               	movlw	0
 10090  004AEC  0100               	movlb	0	; () banked
 10091  004AEE  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10092  004AF0  0E00               	movlw	0
 10093  004AF2  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10094                           
 10095                           ; BSR set to: 0
 10096                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
 10097  004AF4  0E14               	movlw	20
 10098  004AF6  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
 10099  004AF8  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 10100  004AFA  0E00               	movlw	0
 10101  004AFC  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
 10102  004AFE  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 10103  004B00  EC08  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 10104                           
 10105                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
 10106  004B04  0E2C               	movlw	44
 10107  004B06  0100               	movlb	0	; () banked
 10108  004B08  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
 10109                           
 10110                           ; BSR set to: 0
 10111                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
 10112  004B0A  9881               	bcf	3969,4,c	;volatile
 10113                           
 10114                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
 10115  004B0C  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
 10116  004B0E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 10117  004B10  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
 10118  004B12  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 10119  004B14  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 10120                           
 10121                           ;ENC424J600.c: 290: uint8_t lowByte;
 10122                           ;ENC424J600.c: 291: uint8_t highByte;
 10123                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
 10124  004B18  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
 10125  004B1A  0100               	movlb	0	; () banked
 10126  004B1C  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10127  004B1E  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
 10128  004B20  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10129  004B22  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
 10130                           
 10131                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
 10132  004B26  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
 10133  004B28  0100               	movlb	0	; () banked
 10134  004B2A  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 10135  004B2C  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
 10136  004B2E  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 10137  004B30  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
 10138                           
 10139                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
 10140  004B34  0100               	movlb	0	; () banked
 10141  004B36  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
 10142  004B38  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
 10143  004B3A  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
 10144  004B3C  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
 10145  004B3E  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
 10146  004B40  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
 10147  004B42  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
 10148  004B44  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
 10149  004B46  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 10150  004B48  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
 10151  004B4A  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
 10152  004B4C  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 10153                           
 10154                           ; BSR set to: 0
 10155                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
 10156  004B4E  8881               	bsf	3969,4,c	;volatile
 10157                           
 10158                           ; BSR set to: 0
 10159                           ;ENC424J600.c: 296: return ethertype;
 10160  004B50  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
 10161  004B54  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
 10162  004B58  0012               	return	
 10163  004B5A                     __end_of_ethernetController_getEtherTypeField:
 10164                           	opt stack 0
 10165                           tblptru	equ	0xFF8
 10166                           tblptrh	equ	0xFF7
 10167                           tblptrl	equ	0xFF6
 10168                           tablat	equ	0xFF5
 10169                           prodh	equ	0xFF4
 10170                           prodl	equ	0xFF3
 10171                           intcon	equ	0xFF2
 10172                           intcon3	equ	0xFF0
 10173                           indf0	equ	0xFEF
 10174                           postinc0	equ	0xFEE
 10175                           plusw0	equ	0xFEB
 10176                           fsr0h	equ	0xFEA
 10177                           fsr0l	equ	0xFE9
 10178                           wreg	equ	0xFE8
 10179                           indf1	equ	0xFE7
 10180                           postinc1	equ	0xFE6
 10181                           postdec1	equ	0xFE5
 10182                           plusw1	equ	0xFE3
 10183                           fsr1h	equ	0xFE2
 10184                           fsr1l	equ	0xFE1
 10185                           indf2	equ	0xFDF
 10186                           postinc2	equ	0xFDE
 10187                           postdec2	equ	0xFDD
 10188                           plusw2	equ	0xFDB
 10189                           fsr2h	equ	0xFDA
 10190                           fsr2l	equ	0xFD9
 10191                           status	equ	0xFD8
 10192                           
 10193 ;; *************** function _etherTypeToString *****************
 10194 ;; Defined at:
 10195 ;;		line 138 in file "src/system/uart.c"
 10196 ;; Parameters:    Size  Location     Type
 10197 ;;  ethertype       2    0[BANK0 ] enum E5590
 10198 ;; Auto vars:     Size  Location     Type
 10199 ;;		None
 10200 ;; Return value:  Size  Location     Type
 10201 ;;                  2    0[BANK0 ] PTR unsigned char 
 10202 ;; Registers used:
 10203 ;;		wreg, status,2, status,0
 10204 ;; Tracked objects:
 10205 ;;		On entry : 0/0
 10206 ;;		On exit  : 0/0
 10207 ;;		Unchanged: 0/0
 10208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10209 ;;      Params:         0       2       0       0       0       0       0       0       0
 10210 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10211 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10212 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10213 ;;Total ram usage:        4 bytes
 10214 ;; Hardware stack levels used:    1
 10215 ;; Hardware stack levels required when called:    4
 10216 ;; This function calls:
 10217 ;;		Nothing
 10218 ;; This function is called by:
 10219 ;;		_ethernet_rxGetNewFrame
 10220 ;; This function uses a non-reentrant model
 10221 ;;
 10222                           
 10223                           	psect	text27
 10224  00508C                     __ptext27:
 10225                           	opt stack 0
 10226  00508C                     _etherTypeToString:
 10227                           	opt stack 24
 10228                           
 10229                           ;uart.c: 139: switch (ethertype) {
 10230                           
 10231                           ; BSR set to: 0
 10232                           ;incstack = 0
 10233  00508C  D010               	goto	l825
 10234  00508E                     
 10235                           ;uart.c: 141: return "IPv4";
 10236  00508E  0EC4               	movlw	low STR_62
 10237  005090  0100               	movlb	0	; () banked
 10238  005092  6F60               	movwf	?_etherTypeToString& (0+255),b
 10239  005094  0E7F               	movlw	high STR_62
 10240  005096  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10241                           
 10242                           ; BSR set to: 0
 10243  005098  0012               	return	
 10244  00509A                     
 10245                           ; BSR set to: 0
 10246                           ;uart.c: 143: return "ARP";
 10247                           
 10248                           ; BSR set to: 0
 10249  00509A  0EE5               	movlw	low STR_63
 10250  00509C  6F60               	movwf	?_etherTypeToString& (0+255),b
 10251  00509E  0E7F               	movlw	high STR_63
 10252  0050A0  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10253                           
 10254                           ; BSR set to: 0
 10255  0050A2  0012               	return	
 10256  0050A4                     
 10257                           ; BSR set to: 0
 10258                           ;uart.c: 145: return "Unknown EtherType";
 10259                           
 10260                           ; BSR set to: 0
 10261  0050A4  0E95               	movlw	low STR_64
 10262  0050A6  6F60               	movwf	?_etherTypeToString& (0+255),b
 10263  0050A8  0E7E               	movlw	high STR_64
 10264  0050AA  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 10265                           
 10266                           ; BSR set to: 0
 10267                           ;uart.c: 146: }
 10268                           
 10269                           ; BSR set to: 0
 10270  0050AC  0012               	return	
 10271  0050AE                     l825:
 10272                           
 10273                           ; BSR set to: 0
 10274  0050AE  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
 10275  0050B2  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
 10276                           
 10277                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10278                           ; Switch size 1, requested type "space"
 10279                           ; Number of cases is 1, Range of values is 8 to 8
 10280                           ; switch strategies available:
 10281                           ; Name         Instructions Cycles
 10282                           ; simple_byte            4     3 (average)
 10283                           ;	Chosen strategy is simple_byte
 10284  0050B6  0100               	movlb	0	; () banked
 10285  0050B8  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
 10286  0050BA  0A08               	xorlw	8	; case 8
 10287  0050BC  A4D8               	btfss	status,2,c
 10288  0050BE  D7F2               	goto	l829
 10289                           
 10290                           ; BSR set to: 0
 10291                           ; Switch size 1, requested type "space"
 10292                           ; Number of cases is 2, Range of values is 0 to 6
 10293                           ; switch strategies available:
 10294                           ; Name         Instructions Cycles
 10295                           ; simple_byte            7     4 (average)
 10296                           ;	Chosen strategy is simple_byte
 10297  0050C0  5162               	movf	??_etherTypeToString& (0+255),w,b
 10298  0050C2  0A00               	xorlw	0	; case 0
 10299  0050C4  B4D8               	btfsc	status,2,c
 10300  0050C6  D7E3               	goto	l826
 10301  0050C8  0A06               	xorlw	6	; case 6
 10302  0050CA  B4D8               	btfsc	status,2,c
 10303  0050CC  D7E6               	goto	l828
 10304  0050CE  D7EA               	goto	l829
 10305  0050D0                     __end_of_etherTypeToString:
 10306                           	opt stack 0
 10307                           tblptru	equ	0xFF8
 10308                           tblptrh	equ	0xFF7
 10309                           tblptrl	equ	0xFF6
 10310                           tablat	equ	0xFF5
 10311                           prodh	equ	0xFF4
 10312                           prodl	equ	0xFF3
 10313                           intcon	equ	0xFF2
 10314                           intcon3	equ	0xFF0
 10315                           indf0	equ	0xFEF
 10316                           postinc0	equ	0xFEE
 10317                           plusw0	equ	0xFEB
 10318                           fsr0h	equ	0xFEA
 10319                           fsr0l	equ	0xFE9
 10320                           wreg	equ	0xFE8
 10321                           indf1	equ	0xFE7
 10322                           postinc1	equ	0xFE6
 10323                           postdec1	equ	0xFE5
 10324                           plusw1	equ	0xFE3
 10325                           fsr1h	equ	0xFE2
 10326                           fsr1l	equ	0xFE1
 10327                           indf2	equ	0xFDF
 10328                           postinc2	equ	0xFDE
 10329                           postdec2	equ	0xFDD
 10330                           plusw2	equ	0xFDB
 10331                           fsr2h	equ	0xFDA
 10332                           fsr2l	equ	0xFD9
 10333                           status	equ	0xFD8
 10334                           
 10335 ;; *************** function _arp_handleNewPacket *****************
 10336 ;; Defined at:
 10337 ;;		line 33 in file "src/stack/protocols/arp.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 10340 ;;		 -> stack(123), 
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;  arp            32   88[BANK1 ] struct arp_message
 10343 ;; Return value:  Size  Location     Type
 10344 ;;                  1    wreg      void 
 10345 ;; Registers used:
 10346 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10347 ;; Tracked objects:
 10348 ;;		On entry : 0/0
 10349 ;;		On exit  : 0/0
 10350 ;;		Unchanged: 0/0
 10351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10352 ;;      Params:         0       2       0       0       0       0       0       0       0
 10353 ;;      Locals:         0       0      32       0       0       0       0       0       0
 10354 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10355 ;;      Totals:         0       4      32       0       0       0       0       0       0
 10356 ;;Total ram usage:       36 bytes
 10357 ;; Hardware stack levels used:    1
 10358 ;; Hardware stack levels required when called:   11
 10359 ;; This function calls:
 10360 ;;		_UARTTransmitText
 10361 ;;		_arp_parseFromRXBuffer
 10362 ;;		_arp_sendReply
 10363 ;;		_arp_setNewEntry
 10364 ;;		_ethernetController_dropPacket
 10365 ;;		_getMillis
 10366 ;;		_ipAdressToString
 10367 ;;		_macToString
 10368 ;; This function is called by:
 10369 ;;		_ethernet_rxGetNewFrame
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text28
 10374  00297A                     __ptext28:
 10375                           	opt stack 0
 10376  00297A                     _arp_handleNewPacket:
 10377                           	opt stack 17
 10378                           
 10379                           ;arp.c: 34: arp_message_t arp;
 10380                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
 10381                           
 10382                           ; BSR set to: 0
 10383                           ;incstack = 0
 10384  00297A  0100               	movlb	0	; () banked
 10385  00297C  EE20 F00E          	lfsr	2,14
 10386  002980  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
 10387  002982  26D9               	addwf	fsr2l,f,c
 10388  002984  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
 10389  002986  22DA               	addwfc	fsr2h,f,c
 10390  002988  0E06               	movlw	6
 10391  00298A  18DE               	xorwf	postinc2,w,c
 10392  00298C  E104               	bnz	u11410
 10393  00298E  0E08               	movlw	8
 10394  002990  18DE               	xorwf	postinc2,w,c
 10395  002992  B4D8               	btfsc	status,2,c
 10396  002994  D007               	goto	l926
 10397  002996                     u11410:
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;arp.c: 36: ethernetController_dropPacket(frame);
 10401  002996  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10402  00299A  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10403  00299E  ECCC  F028         	call	_ethernetController_dropPacket	;wreg free
 10404                           
 10405                           ;arp.c: 37: return;
 10406  0029A2  0012               	return	
 10407  0029A4                     l926:
 10408                           
 10409                           ;arp.c: 38: }
 10410                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
 10411  0029A4  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
 10412  0029A8  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
 10413  0029AC  ECB9  F007         	call	_arp_parseFromRXBuffer	;wreg free
 10414  0029B0  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10415  0029B4  0E1F               	movlw	31
 10416  0029B6                     u11421:
 10417  0029B6  CFEB FFDB          	movff	plusw0,plusw2
 10418  0029BA  06E8               	decf	wreg,f,c
 10419  0029BC  E2FC               	bc	u11421
 10420                           
 10421                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
 10422  0029BE  0101               	movlb	1	; () banked
 10423  0029C0  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
 10424  0029C2  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
 10425  0029C4  B4D8               	btfsc	status,2,c
 10426  0029C6  D00E               	goto	l928
 10427                           
 10428                           ; BSR set to: 1
 10429                           ;arp.c: 42: ethernetController_dropPacket(frame);
 10430  0029C8  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 10431  0029CC  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 10432  0029D0  ECCC  F028         	call	_ethernetController_dropPacket	;wreg free
 10433                           
 10434                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 10435  0029D4  0E3C               	movlw	low STR_69
 10436  0029D6  0100               	movlb	0	; () banked
 10437  0029D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10438  0029DA  0E7B               	movlw	high STR_69
 10439  0029DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10440  0029DE  EC06  F027         	call	_UARTTransmitText	;wreg free
 10441                           
 10442                           ;arp.c: 44: return;
 10443  0029E2  0012               	return	
 10444  0029E4                     l928:
 10445                           
 10446                           ;arp.c: 45: }
 10447                           ;arp.c: 46: UARTTransmitText("[");
 10448  0029E4  0EC2               	movlw	low (STR_72+3)
 10449  0029E6  0100               	movlb	0	; () banked
 10450  0029E8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10451  0029EA  0E7F               	movlw	high (STR_72+3)
 10452  0029EC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10453  0029EE  EC06  F027         	call	_UARTTransmitText	;wreg free
 10454                           
 10455                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
 10456  0029F2  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10457  0029F6  EE00  F07A         	lfsr	0,macToString@addr
 10458  0029FA  0E05               	movlw	5
 10459  0029FC                     u11441:
 10460  0029FC  CFDB FFEB          	movff	plusw2,plusw0
 10461  002A00  06E8               	decf	wreg,f,c
 10462  002A02  E2FC               	bc	u11441
 10463  002A04  EC8A  F01D         	call	_macToString	;wreg free
 10464  002A08  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10465  002A0C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10466  002A10  EC06  F027         	call	_UARTTransmitText	;wreg free
 10467                           
 10468                           ;arp.c: 48: UARTTransmitText(", ");
 10469  002A14  0E32               	movlw	low (STR_47+17)
 10470  002A16  0100               	movlb	0	; () banked
 10471  002A18  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10472  002A1A  0E7E               	movlw	high (STR_47+17)
 10473  002A1C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10474  002A1E  EC06  F027         	call	_UARTTransmitText	;wreg free
 10475                           
 10476                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 10477  002A22  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
 10478  002A26  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
 10479  002A2A  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
 10480  002A2E  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
 10481  002A32  ECC6  F013         	call	_ipAdressToString	;wreg free
 10482  002A36  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10483  002A3A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10484  002A3E  EC06  F027         	call	_UARTTransmitText	;wreg free
 10485                           
 10486                           ;arp.c: 50: UARTTransmitText("]->[");
 10487  002A42  0EBF               	movlw	low STR_72
 10488  002A44  0100               	movlb	0	; () banked
 10489  002A46  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10490  002A48  0E7F               	movlw	high STR_72
 10491  002A4A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10492  002A4C  EC06  F027         	call	_UARTTransmitText	;wreg free
 10493                           
 10494                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
 10495  002A50  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
 10496  002A54  EE00  F07A         	lfsr	0,macToString@addr
 10497  002A58  0E05               	movlw	5
 10498  002A5A                     u11451:
 10499  002A5A  CFDB FFEB          	movff	plusw2,plusw0
 10500  002A5E  06E8               	decf	wreg,f,c
 10501  002A60  E2FC               	bc	u11451
 10502  002A62  EC8A  F01D         	call	_macToString	;wreg free
 10503  002A66  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10504  002A6A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10505  002A6E  EC06  F027         	call	_UARTTransmitText	;wreg free
 10506                           
 10507                           ;arp.c: 52: UARTTransmitText(", ");
 10508  002A72  0E32               	movlw	low (STR_47+17)
 10509  002A74  0100               	movlb	0	; () banked
 10510  002A76  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10511  002A78  0E7E               	movlw	high (STR_47+17)
 10512  002A7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10513  002A7C  EC06  F027         	call	_UARTTransmitText	;wreg free
 10514                           
 10515                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 10516  002A80  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
 10517  002A84  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
 10518  002A88  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
 10519  002A8C  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
 10520  002A90  ECC6  F013         	call	_ipAdressToString	;wreg free
 10521  002A94  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10522  002A98  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10523  002A9C  EC06  F027         	call	_UARTTransmitText	;wreg free
 10524                           
 10525                           ;arp.c: 54: UARTTransmitText("]");
 10526  002AA0  0EFA               	movlw	low (STR_19+1)
 10527  002AA2  0100               	movlb	0	; () banked
 10528  002AA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10529  002AA6  0E7F               	movlw	high (STR_19+1)
 10530  002AA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10531  002AAA  EC06  F027         	call	_UARTTransmitText	;wreg free
 10532                           
 10533                           ;arp.c: 55: if (arp.fIsProbe)
 10534  002AAE  0101               	movlb	1	; () banked
 10535  002AB0  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
 10536  002AB2  D007               	goto	l929
 10537                           
 10538                           ; BSR set to: 1
 10539                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
 10540  002AB4  0E6C               	movlw	low STR_75
 10541  002AB6  0100               	movlb	0	; () banked
 10542  002AB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10543  002ABA  0E7F               	movlw	high STR_75
 10544  002ABC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10545  002ABE  EC06  F027         	call	_UARTTransmitText	;wreg free
 10546  002AC2                     l929:
 10547                           
 10548                           ;arp.c: 57: if (arp.fIsGratuitous)
 10549  002AC2  0101               	movlb	1	; () banked
 10550  002AC4  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
 10551  002AC6  D007               	goto	l930
 10552                           
 10553                           ; BSR set to: 1
 10554                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
 10555  002AC8  0EE9               	movlw	low STR_76
 10556  002ACA  0100               	movlb	0	; () banked
 10557  002ACC  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10558  002ACE  0E7E               	movlw	high STR_76
 10559  002AD0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10560  002AD2  EC06  F027         	call	_UARTTransmitText	;wreg free
 10561  002AD6                     l930:
 10562                           
 10563                           ;arp.c: 60: arp_sendReply(arp);
 10564  002AD6  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 10565  002ADA  EE01  F000         	lfsr	0,arp_sendReply@request
 10566  002ADE  0E1F               	movlw	31
 10567  002AE0                     u11481:
 10568  002AE0  CFDB FFEB          	movff	plusw2,plusw0
 10569  002AE4  06E8               	decf	wreg,f,c
 10570  002AE6  E2FC               	bc	u11481
 10571  002AE8  EC9F  F018         	call	_arp_sendReply	;wreg free
 10572                           
 10573                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 10574  002AEC  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 10575  002AF0  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 10576  002AF4  0E05               	movlw	5
 10577  002AF6                     u11491:
 10578  002AF6  CFDB FFEB          	movff	plusw2,plusw0
 10579  002AFA  06E8               	decf	wreg,f,c
 10580  002AFC  E2FC               	bc	u11491
 10581  002AFE  C166  F0A0         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
 10582  002B02  C167  F0A1         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
 10583  002B06  C168  F0A2         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
 10584  002B0A  C169  F0A3         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
 10585  002B0E  EC8B  F02B         	call	_getMillis	;wreg free
 10586  002B12  C060  F0A4         	movff	?_getMillis,arp_setNewEntry@timestamp
 10587  002B16  C061  F0A5         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
 10588  002B1A  C062  F0A6         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
 10589  002B1E  C063  F0A7         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
 10590  002B22  EC2A  F017         	call	_arp_setNewEntry	;wreg free
 10591  002B26  0012               	return		;funcret
 10592  002B28                     __end_of_arp_handleNewPacket:
 10593                           	opt stack 0
 10594                           tblptru	equ	0xFF8
 10595                           tblptrh	equ	0xFF7
 10596                           tblptrl	equ	0xFF6
 10597                           tablat	equ	0xFF5
 10598                           prodh	equ	0xFF4
 10599                           prodl	equ	0xFF3
 10600                           intcon	equ	0xFF2
 10601                           intcon3	equ	0xFF0
 10602                           indf0	equ	0xFEF
 10603                           postinc0	equ	0xFEE
 10604                           plusw0	equ	0xFEB
 10605                           fsr0h	equ	0xFEA
 10606                           fsr0l	equ	0xFE9
 10607                           wreg	equ	0xFE8
 10608                           indf1	equ	0xFE7
 10609                           postinc1	equ	0xFE6
 10610                           postdec1	equ	0xFE5
 10611                           plusw1	equ	0xFE3
 10612                           fsr1h	equ	0xFE2
 10613                           fsr1l	equ	0xFE1
 10614                           indf2	equ	0xFDF
 10615                           postinc2	equ	0xFDE
 10616                           postdec2	equ	0xFDD
 10617                           plusw2	equ	0xFDB
 10618                           fsr2h	equ	0xFDA
 10619                           fsr2l	equ	0xFD9
 10620                           status	equ	0xFD8
 10621                           
 10622 ;; *************** function _ethernetController_dropPacket *****************
 10623 ;; Defined at:
 10624 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
 10625 ;; Parameters:    Size  Location     Type
 10626 ;;		None
 10627 ;; Auto vars:     Size  Location     Type
 10628 ;;		None
 10629 ;; Return value:  Size  Location     Type
 10630 ;;                  1    wreg      void 
 10631 ;; Registers used:
 10632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10633 ;; Tracked objects:
 10634 ;;		On entry : 0/0
 10635 ;;		On exit  : 0/0
 10636 ;;		Unchanged: 0/0
 10637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10638 ;;      Params:         0       2       0       0       0       0       0       0       0
 10639 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10640 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10641 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10642 ;;Total ram usage:        2 bytes
 10643 ;; Hardware stack levels used:    1
 10644 ;; Hardware stack levels required when called:    8
 10645 ;; This function calls:
 10646 ;;		_enc424j600_setRXTailPointer
 10647 ;;		_enc424j600_writeSingleByte
 10648 ;;		_ethernetController_getNextPacketPointer
 10649 ;; This function is called by:
 10650 ;;		_ethernet_rxGetNewFrame
 10651 ;;		_arp_handleNewPacket
 10652 ;;		_ipv4_handleNewPacket
 10653 ;; This function uses a non-reentrant model
 10654 ;;
 10655                           
 10656                           	psect	text29
 10657  005198                     __ptext29:
 10658                           	opt stack 0
 10659  005198                     _ethernetController_dropPacket:
 10660                           	opt stack 19
 10661                           
 10662                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10663                           
 10664                           ;incstack = 0
 10665  005198  ECA3  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10666  00519C  0E30               	movlw	48
 10667  00519E  0100               	movlb	0	; () banked
 10668  0051A0  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10669  0051A2  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10670  0051A4  A4D8               	btfss	status,2,c
 10671  0051A6  D007               	goto	l187
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
 10675  0051A8  0E5F               	movlw	95
 10676  0051AA  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10677  0051AC  0EFE               	movlw	254
 10678  0051AE  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10679  0051B0  EC1E  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10680                           
 10681                           ;ENC424J600.c: 383: } else {
 10682  0051B4  D00B               	goto	l188
 10683  0051B6                     l187:
 10684                           
 10685                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10686  0051B6  ECA3  F02B         	call	_ethernetController_getNextPacketPointer	;wreg free
 10687  0051BA  0EFE               	movlw	254
 10688  0051BC  0100               	movlb	0	; () banked
 10689  0051BE  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10690  0051C0  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 10691  0051C2  0EFF               	movlw	255
 10692  0051C4  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10693  0051C6  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 10694  0051C8  EC1E  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 10695  0051CC                     l188:
 10696                           
 10697                           ;ENC424J600.c: 385: }
 10698                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
 10699  0051CC  0ECC               	movlw	204
 10700  0051CE  EC50  F02B         	call	_enc424j600_writeSingleByte
 10701  0051D2  0012               	return		;funcret
 10702  0051D4                     __end_of_ethernetController_dropPacket:
 10703                           	opt stack 0
 10704                           tblptru	equ	0xFF8
 10705                           tblptrh	equ	0xFF7
 10706                           tblptrl	equ	0xFF6
 10707                           tablat	equ	0xFF5
 10708                           prodh	equ	0xFF4
 10709                           prodl	equ	0xFF3
 10710                           intcon	equ	0xFF2
 10711                           intcon3	equ	0xFF0
 10712                           indf0	equ	0xFEF
 10713                           postinc0	equ	0xFEE
 10714                           plusw0	equ	0xFEB
 10715                           fsr0h	equ	0xFEA
 10716                           fsr0l	equ	0xFE9
 10717                           wreg	equ	0xFE8
 10718                           indf1	equ	0xFE7
 10719                           postinc1	equ	0xFE6
 10720                           postdec1	equ	0xFE5
 10721                           plusw1	equ	0xFE3
 10722                           fsr1h	equ	0xFE2
 10723                           fsr1l	equ	0xFE1
 10724                           indf2	equ	0xFDF
 10725                           postinc2	equ	0xFDE
 10726                           postdec2	equ	0xFDD
 10727                           plusw2	equ	0xFDB
 10728                           fsr2h	equ	0xFDA
 10729                           fsr2l	equ	0xFD9
 10730                           status	equ	0xFD8
 10731                           
 10732 ;; *************** function _ethernetController_getNextPacketPointer *****************
 10733 ;; Defined at:
 10734 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  2    2[BANK0 ] unsigned int 
 10741 ;; Registers used:
 10742 ;;		cstack
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10748 ;;      Params:         0       2       0       0       0       0       0       0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10751 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10752 ;;Total ram usage:        2 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    5
 10755 ;; This function calls:
 10756 ;;		_enc424j600_getNextPacketPointer
 10757 ;; This function is called by:
 10758 ;;		_ethernetController_dropPacket
 10759 ;;		_ethernet_rxGetNewFrame
 10760 ;; This function uses a non-reentrant model
 10761 ;;
 10762                           
 10763                           	psect	text30
 10764  005746                     __ptext30:
 10765                           	opt stack 0
 10766  005746                     _ethernetController_getNextPacketPointer:
 10767                           	opt stack 21
 10768                           
 10769                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
 10770                           
 10771                           ;incstack = 0
 10772  005746  ECC3  F02B         	call	_enc424j600_getNextPacketPointer	;wreg free
 10773  00574A  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 10774  00574E  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 10775  005752  0012               	return	
 10776  005754                     __end_of_ethernetController_getNextPacketPointer:
 10777                           	opt stack 0
 10778                           tblptru	equ	0xFF8
 10779                           tblptrh	equ	0xFF7
 10780                           tblptrl	equ	0xFF6
 10781                           tablat	equ	0xFF5
 10782                           prodh	equ	0xFF4
 10783                           prodl	equ	0xFF3
 10784                           intcon	equ	0xFF2
 10785                           intcon3	equ	0xFF0
 10786                           indf0	equ	0xFEF
 10787                           postinc0	equ	0xFEE
 10788                           plusw0	equ	0xFEB
 10789                           fsr0h	equ	0xFEA
 10790                           fsr0l	equ	0xFE9
 10791                           wreg	equ	0xFE8
 10792                           indf1	equ	0xFE7
 10793                           postinc1	equ	0xFE6
 10794                           postdec1	equ	0xFE5
 10795                           plusw1	equ	0xFE3
 10796                           fsr1h	equ	0xFE2
 10797                           fsr1l	equ	0xFE1
 10798                           indf2	equ	0xFDF
 10799                           postinc2	equ	0xFDE
 10800                           postdec2	equ	0xFDD
 10801                           plusw2	equ	0xFDB
 10802                           fsr2h	equ	0xFDA
 10803                           fsr2l	equ	0xFD9
 10804                           status	equ	0xFD8
 10805                           
 10806 ;; *************** function _enc424j600_getNextPacketPointer *****************
 10807 ;; Defined at:
 10808 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 10809 ;; Parameters:    Size  Location     Type
 10810 ;;		None
 10811 ;; Auto vars:     Size  Location     Type
 10812 ;;		None
 10813 ;; Return value:  Size  Location     Type
 10814 ;;                  2    0[BANK0 ] unsigned int 
 10815 ;; Registers used:
 10816 ;;		None
 10817 ;; Tracked objects:
 10818 ;;		On entry : 0/0
 10819 ;;		On exit  : 0/0
 10820 ;;		Unchanged: 0/0
 10821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10822 ;;      Params:         0       2       0       0       0       0       0       0       0
 10823 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10824 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10825 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10826 ;;Total ram usage:        2 bytes
 10827 ;; Hardware stack levels used:    1
 10828 ;; Hardware stack levels required when called:    4
 10829 ;; This function calls:
 10830 ;;		Nothing
 10831 ;; This function is called by:
 10832 ;;		_ethernetController_updateNextPacketPointer
 10833 ;;		_ethernetController_getNextPacketPointer
 10834 ;; This function uses a non-reentrant model
 10835 ;;
 10836                           
 10837                           	psect	text31
 10838  005786                     __ptext31:
 10839                           	opt stack 0
 10840  005786                     _enc424j600_getNextPacketPointer:
 10841                           	opt stack 21
 10842                           
 10843                           ;ENC424J600.c: 591: return nextPacketPointer;
 10844                           
 10845                           ;incstack = 0
 10846  005786  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
 10847  00578A  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
 10848  00578E  0012               	return		;funcret
 10849  005790                     __end_of_enc424j600_getNextPacketPointer:
 10850                           	opt stack 0
 10851                           tblptru	equ	0xFF8
 10852                           tblptrh	equ	0xFF7
 10853                           tblptrl	equ	0xFF6
 10854                           tablat	equ	0xFF5
 10855                           prodh	equ	0xFF4
 10856                           prodl	equ	0xFF3
 10857                           intcon	equ	0xFF2
 10858                           intcon3	equ	0xFF0
 10859                           indf0	equ	0xFEF
 10860                           postinc0	equ	0xFEE
 10861                           plusw0	equ	0xFEB
 10862                           fsr0h	equ	0xFEA
 10863                           fsr0l	equ	0xFE9
 10864                           wreg	equ	0xFE8
 10865                           indf1	equ	0xFE7
 10866                           postinc1	equ	0xFE6
 10867                           postdec1	equ	0xFE5
 10868                           plusw1	equ	0xFE3
 10869                           fsr1h	equ	0xFE2
 10870                           fsr1l	equ	0xFE1
 10871                           indf2	equ	0xFDF
 10872                           postinc2	equ	0xFDE
 10873                           postdec2	equ	0xFDD
 10874                           plusw2	equ	0xFDB
 10875                           fsr2h	equ	0xFDA
 10876                           fsr2l	equ	0xFD9
 10877                           status	equ	0xFD8
 10878                           
 10879 ;; *************** function _arp_sendReply *****************
 10880 ;; Defined at:
 10881 ;;		line 203 in file "src/stack/protocols/arp.c"
 10882 ;; Parameters:    Size  Location     Type
 10883 ;;  request        32    0[BANK1 ] struct arp_message
 10884 ;; Auto vars:     Size  Location     Type
 10885 ;;  reply          32   56[BANK1 ] struct arp_message
 10886 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10887 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10888 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10889 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10890 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10891 ;; Return value:  Size  Location     Type
 10892 ;;                  1    wreg      void 
 10893 ;; Registers used:
 10894 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10895 ;; Tracked objects:
 10896 ;;		On entry : 0/0
 10897 ;;		On exit  : 0/0
 10898 ;;		Unchanged: 0/0
 10899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10900 ;;      Params:         0       0      32       0       0       0       0       0       0
 10901 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10902 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10903 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10904 ;;Total ram usage:       88 bytes
 10905 ;; Hardware stack levels used:    1
 10906 ;; Hardware stack levels required when called:   10
 10907 ;; This function calls:
 10908 ;;		_UARTTransmitText
 10909 ;;		_arp_send
 10910 ;;		_ethernetController_getMacAddress
 10911 ;;		_ipAdressToString
 10912 ;;		_ipv4_cmp
 10913 ;;		_ipv4_getIPSourceAddress
 10914 ;;		_macToString
 10915 ;; This function is called by:
 10916 ;;		_arp_handleNewPacket
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text32
 10921  00313E                     __ptext32:
 10922                           	opt stack 0
 10923  00313E                     _arp_sendReply:
 10924                           	opt stack 17
 10925                           
 10926                           ;arp.c: 204: if (request.operation != ARP_REQUEST)
 10927                           
 10928                           ;incstack = 0
 10929  00313E  0101               	movlb	1	; () banked
 10930  003140  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
 10931  003142  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
 10932  003144  A4D8               	btfss	status,2,c
 10933  003146  0012               	return	
 10934                           
 10935                           ; BSR set to: 1
 10936                           ;arp.c: 207: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10937                           
 10938                           ; BSR set to: 1
 10939                           
 10940                           ; BSR set to: 1
 10941                           ;arp.c: 205: return;
 10942  003148  EC70  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 10943  00314C  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
 10944  003150  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
 10945  003154  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
 10946  003158  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
 10947                           
 10948                           ;arp.c: 208: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10949  00315C  0E18               	movlw	low (arp_sendReply@request+24)
 10950  00315E  0100               	movlb	0	; () banked
 10951  003160  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10952  003162  0E01               	movlw	high (arp_sendReply@request+24)
 10953  003164  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10954  003166  0E34               	movlw	low arp_sendReply@myIP
 10955  003168  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10956  00316A  0E01               	movlw	high arp_sendReply@myIP
 10957  00316C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10958  00316E  ECAB  F028         	call	_ipv4_cmp	;wreg free
 10959  003172  0100               	movlb	0	; () banked
 10960  003174  A0D8               	btfss	status,0,c
 10961  003176  0012               	return	
 10962                           
 10963                           ; BSR set to: 0
 10964                           ;arp.c: 211: arp_message_t reply;
 10965                           ;arp.c: 212: ipv4_address_t senderIP;
 10966                           ;arp.c: 213: ipv4_address_t targetIP;
 10967                           ;arp.c: 214: macaddress_t senderMAC;
 10968                           ;arp.c: 215: macaddress_t targetMAC;
 10969                           ;arp.c: 217: senderMAC = ethernetController_getMacAddress();
 10970                           
 10971                           ; BSR set to: 0
 10972                           
 10973                           ; BSR set to: 0
 10974                           ;arp.c: 209: return;
 10975  003178  EC02  F025         	call	_ethernetController_getMacAddress	;wreg free
 10976  00317C  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 10977  003180  0E05               	movlw	5
 10978  003182                     u11021:
 10979  003182  CFEB FFDB          	movff	plusw0,plusw2
 10980  003186  06E8               	decf	wreg,f,c
 10981  003188  E2FC               	bc	u11021
 10982                           
 10983                           ;arp.c: 218: targetMAC = request.senderMACAddress;
 10984  00318A  EE21  F008         	lfsr	2,arp_sendReply@request+8
 10985  00318E  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
 10986  003192  0E05               	movlw	5
 10987  003194                     u11031:
 10988  003194  CFDB FFE3          	movff	plusw2,plusw1
 10989  003198  06E8               	decf	wreg,f,c
 10990  00319A  E2FC               	bc	u11031
 10991                           
 10992                           ;arp.c: 219: senderIP = ipv4_getIPSourceAddress();
 10993  00319C  EC70  F02B         	call	_ipv4_getIPSourceAddress	;wreg free
 10994  0031A0  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
 10995  0031A4  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
 10996  0031A8  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
 10997  0031AC  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
 10998                           
 10999                           ;arp.c: 220: targetIP = request.senderIPAddress;
 11000  0031B0  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
 11001  0031B4  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
 11002  0031B8  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
 11003  0031BC  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
 11004                           
 11005                           ;arp.c: 222: reply.hlen = 6u;
 11006  0031C0  0E06               	movlw	6
 11007  0031C2  0101               	movlb	1	; () banked
 11008  0031C4  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
 11009                           
 11010                           ; BSR set to: 1
 11011                           ;arp.c: 223: reply.plen = 4u;
 11012  0031C6  0E04               	movlw	4
 11013  0031C8  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
 11014                           
 11015                           ; BSR set to: 1
 11016                           ;arp.c: 224: reply.htype = ARP_HTYPE_ETHERNET;
 11017  0031CA  0E00               	movlw	0
 11018  0031CC  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
 11019  0031CE  0E01               	movlw	1
 11020  0031D0  6F38               	movwf	arp_sendReply@reply& (0+255),b
 11021                           
 11022                           ; BSR set to: 1
 11023                           ;arp.c: 225: reply.ptype = ARP_PTYPE_IPv4;
 11024  0031D2  0E08               	movlw	8
 11025  0031D4  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
 11026  0031D6  0E00               	movlw	0
 11027  0031D8  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
 11028                           
 11029                           ; BSR set to: 1
 11030                           ;arp.c: 226: reply.operation = ARP_REPLY;
 11031  0031DA  0E00               	movlw	0
 11032  0031DC  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
 11033  0031DE  0E02               	movlw	2
 11034  0031E0  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
 11035                           
 11036                           ; BSR set to: 1
 11037                           ;arp.c: 227: reply.senderIPAddress = senderIP;
 11038  0031E2  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
 11039  0031E6  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
 11040  0031EA  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
 11041  0031EE  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
 11042                           
 11043                           ; BSR set to: 1
 11044                           ;arp.c: 228: reply.senderMACAddress = senderMAC;
 11045  0031F2  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 11046  0031F6  EE11  F040         	lfsr	1,arp_sendReply@reply+8
 11047  0031FA  0E05               	movlw	5
 11048  0031FC                     u11041:
 11049  0031FC  CFDB FFE3          	movff	plusw2,plusw1
 11050  003200  06E8               	decf	wreg,f,c
 11051  003202  E2FC               	bc	u11041
 11052                           
 11053                           ; BSR set to: 1
 11054                           ;arp.c: 229: reply.targetIPAddress = targetIP;
 11055  003204  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
 11056  003208  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
 11057  00320C  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
 11058  003210  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
 11059                           
 11060                           ; BSR set to: 1
 11061                           ;arp.c: 230: reply.targetMACAddress = targetMAC;
 11062  003214  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
 11063  003218  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
 11064  00321C  0E05               	movlw	5
 11065  00321E                     u11051:
 11066  00321E  CFDB FFE3          	movff	plusw2,plusw1
 11067  003222  06E8               	decf	wreg,f,c
 11068  003224  E2FC               	bc	u11051
 11069                           
 11070                           ; BSR set to: 1
 11071                           ;arp.c: 232: arp_send(reply);
 11072  003226  EE21  F038         	lfsr	2,arp_sendReply@reply
 11073  00322A  EE00  F0A7         	lfsr	0,arp_send@arp
 11074  00322E  0E1F               	movlw	31
 11075  003230                     u11061:
 11076  003230  CFDB FFEB          	movff	plusw2,plusw0
 11077  003234  06E8               	decf	wreg,f,c
 11078  003236  E2FC               	bc	u11061
 11079  003238  EC30  F00E         	call	_arp_send	;wreg free
 11080                           
 11081                           ;arp.c: 234: UARTTransmitText("[Reply sent to ");
 11082  00323C  0EC9               	movlw	low STR_77
 11083  00323E  0100               	movlb	0	; () banked
 11084  003240  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11085  003242  0E7E               	movlw	high STR_77
 11086  003244  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11087  003246  EC06  F027         	call	_UARTTransmitText	;wreg free
 11088                           
 11089                           ;arp.c: 235: UARTTransmitText(macToString(reply.targetMACAddress));
 11090  00324A  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
 11091  00324E  EE00  F07A         	lfsr	0,macToString@addr
 11092  003252  0E05               	movlw	5
 11093  003254                     u11071:
 11094  003254  CFDB FFEB          	movff	plusw2,plusw0
 11095  003258  06E8               	decf	wreg,f,c
 11096  00325A  E2FC               	bc	u11071
 11097  00325C  EC8A  F01D         	call	_macToString	;wreg free
 11098  003260  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 11099  003264  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 11100  003268  EC06  F027         	call	_UARTTransmitText	;wreg free
 11101                           
 11102                           ;arp.c: 236: UARTTransmitText(", ");
 11103  00326C  0E32               	movlw	low (STR_47+17)
 11104  00326E  0100               	movlb	0	; () banked
 11105  003270  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11106  003272  0E7E               	movlw	high (STR_47+17)
 11107  003274  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11108  003276  EC06  F027         	call	_UARTTransmitText	;wreg free
 11109                           
 11110                           ;arp.c: 237: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 11111  00327A  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
 11112  00327E  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
 11113  003282  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
 11114  003286  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
 11115  00328A  ECC6  F013         	call	_ipAdressToString	;wreg free
 11116  00328E  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 11117  003292  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 11118  003296  EC06  F027         	call	_UARTTransmitText	;wreg free
 11119                           
 11120                           ;arp.c: 238: UARTTransmitText("]");
 11121  00329A  0EFA               	movlw	low (STR_19+1)
 11122  00329C  0100               	movlb	0	; () banked
 11123  00329E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 11124  0032A0  0E7F               	movlw	high (STR_19+1)
 11125  0032A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 11126  0032A4  EC06  F027         	call	_UARTTransmitText	;wreg free
 11127  0032A8  0012               	return		;funcret
 11128  0032AA                     __end_of_arp_sendReply:
 11129                           	opt stack 0
 11130                           tblptru	equ	0xFF8
 11131                           tblptrh	equ	0xFF7
 11132                           tblptrl	equ	0xFF6
 11133                           tablat	equ	0xFF5
 11134                           prodh	equ	0xFF4
 11135                           prodl	equ	0xFF3
 11136                           intcon	equ	0xFF2
 11137                           intcon3	equ	0xFF0
 11138                           indf0	equ	0xFEF
 11139                           postinc0	equ	0xFEE
 11140                           plusw0	equ	0xFEB
 11141                           fsr0h	equ	0xFEA
 11142                           fsr0l	equ	0xFE9
 11143                           wreg	equ	0xFE8
 11144                           indf1	equ	0xFE7
 11145                           postinc1	equ	0xFE6
 11146                           postdec1	equ	0xFE5
 11147                           plusw1	equ	0xFE3
 11148                           fsr1h	equ	0xFE2
 11149                           fsr1l	equ	0xFE1
 11150                           indf2	equ	0xFDF
 11151                           postinc2	equ	0xFDE
 11152                           postdec2	equ	0xFDD
 11153                           plusw2	equ	0xFDB
 11154                           fsr2h	equ	0xFDA
 11155                           fsr2l	equ	0xFD9
 11156                           status	equ	0xFD8
 11157                           
 11158 ;; *************** function _ipv4_getIPSourceAddress *****************
 11159 ;; Defined at:
 11160 ;;		line 227 in file "src/stack/protocols/ipv4.c"
 11161 ;; Parameters:    Size  Location     Type
 11162 ;;		None
 11163 ;; Auto vars:     Size  Location     Type
 11164 ;;		None
 11165 ;; Return value:  Size  Location     Type
 11166 ;;                  4    0[BANK0 ] struct ipv4_address
 11167 ;; Registers used:
 11168 ;;		None
 11169 ;; Tracked objects:
 11170 ;;		On entry : 0/0
 11171 ;;		On exit  : 0/0
 11172 ;;		Unchanged: 0/0
 11173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11174 ;;      Params:         0       4       0       0       0       0       0       0       0
 11175 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11176 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11177 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11178 ;;Total ram usage:        4 bytes
 11179 ;; Hardware stack levels used:    1
 11180 ;; Hardware stack levels required when called:    4
 11181 ;; This function calls:
 11182 ;;		Nothing
 11183 ;; This function is called by:
 11184 ;;		_main
 11185 ;;		_arp_sendReply
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text33
 11190  0056E0                     __ptext33:
 11191                           	opt stack 0
 11192  0056E0                     _ipv4_getIPSourceAddress:
 11193                           	opt stack 26
 11194                           
 11195                           ;ipv4.c: 228: return ipSource;
 11196                           
 11197                           ;incstack = 0
 11198  0056E0  C1A4  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 11199  0056E4  C1A5  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 11200  0056E8  C1A6  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 11201  0056EC  C1A7  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 11202  0056F0  0012               	return		;funcret
 11203  0056F2                     __end_of_ipv4_getIPSourceAddress:
 11204                           	opt stack 0
 11205                           tblptru	equ	0xFF8
 11206                           tblptrh	equ	0xFF7
 11207                           tblptrl	equ	0xFF6
 11208                           tablat	equ	0xFF5
 11209                           prodh	equ	0xFF4
 11210                           prodl	equ	0xFF3
 11211                           intcon	equ	0xFF2
 11212                           intcon3	equ	0xFF0
 11213                           indf0	equ	0xFEF
 11214                           postinc0	equ	0xFEE
 11215                           plusw0	equ	0xFEB
 11216                           fsr0h	equ	0xFEA
 11217                           fsr0l	equ	0xFE9
 11218                           wreg	equ	0xFE8
 11219                           indf1	equ	0xFE7
 11220                           postinc1	equ	0xFE6
 11221                           postdec1	equ	0xFE5
 11222                           plusw1	equ	0xFE3
 11223                           fsr1h	equ	0xFE2
 11224                           fsr1l	equ	0xFE1
 11225                           indf2	equ	0xFDF
 11226                           postinc2	equ	0xFDE
 11227                           postdec2	equ	0xFDD
 11228                           plusw2	equ	0xFDB
 11229                           fsr2h	equ	0xFDA
 11230                           fsr2l	equ	0xFD9
 11231                           status	equ	0xFD8
 11232                           
 11233 ;; *************** function _arp_parseFromRXBuffer *****************
 11234 ;; Defined at:
 11235 ;;		line 64 in file "src/stack/protocols/arp.c"
 11236 ;; Parameters:    Size  Location     Type
 11237 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 11238 ;;		 -> stack(123), 
 11239 ;; Auto vars:     Size  Location     Type
 11240 ;;  i               1   58[BANK0 ] unsigned char 
 11241 ;;  i               1   57[BANK0 ] unsigned char 
 11242 ;;  i               1   56[BANK0 ] unsigned char 
 11243 ;;  i               1   55[BANK0 ] unsigned char 
 11244 ;;  arp            32   61[BANK0 ] struct arp_message
 11245 ;;  offset          2   59[BANK0 ] const unsigned int 
 11246 ;; Return value:  Size  Location     Type
 11247 ;;                  32   20[BANK0 ] struct arp_message
 11248 ;; Registers used:
 11249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11250 ;; Tracked objects:
 11251 ;;		On entry : 0/0
 11252 ;;		On exit  : 0/0
 11253 ;;		Unchanged: 0/0
 11254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11255 ;;      Params:         0      32       0       0       0       0       0       0       0
 11256 ;;      Locals:         0      38       0       0       0       0       0       0       0
 11257 ;;      Temps:          0       3       0       0       0       0       0       0       0
 11258 ;;      Totals:         0      73       0       0       0       0       0       0       0
 11259 ;;Total ram usage:       73 bytes
 11260 ;; Hardware stack levels used:    1
 11261 ;; Hardware stack levels required when called:    8
 11262 ;; This function calls:
 11263 ;;		_ethernetController_streamFromRXBuffer
 11264 ;;		_ipv4_cmp
 11265 ;;		_ipv4_isAllZero
 11266 ;;		_mac_cmp
 11267 ;;		_mac_isAllZero
 11268 ;; This function is called by:
 11269 ;;		_arp_handleNewPacket
 11270 ;; This function uses a non-reentrant model
 11271 ;;
 11272                           
 11273                           	psect	text34
 11274  000F72                     __ptext34:
 11275                           	opt stack 0
 11276  000F72                     _arp_parseFromRXBuffer:
 11277                           	opt stack 19
 11278                           
 11279                           ;arp.c: 65: arp_message_t arp;
 11280                           ;arp.c: 66: uint16_t const offset = 22;
 11281                           
 11282                           ;incstack = 0
 11283  000F72  0E00               	movlw	0
 11284  000F74  0100               	movlb	0	; () banked
 11285  000F76  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 11286  000F78  0E16               	movlw	22
 11287  000F7A  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 11288                           
 11289                           ; BSR set to: 0
 11290                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 11291  000F7C  EE20 F010          	lfsr	2,16
 11292  000F80  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11293  000F82  26D9               	addwf	fsr2l,f,c
 11294  000F84  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11295  000F86  22DA               	addwfc	fsr2h,f,c
 11296  000F88  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11297  000F8C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11298  000F90  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11299  000F92  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11300  000F94  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11301  000F96  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11302  000F98  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11303  000F9A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11304  000F9C  0E00               	movlw	0
 11305  000F9E  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11306                           
 11307                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11308  000FA2  0100               	movlb	0	; () banked
 11309  000FA4  EE20 F010          	lfsr	2,16
 11310  000FA8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11311  000FAA  26D9               	addwf	fsr2l,f,c
 11312  000FAC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11313  000FAE  22DA               	addwfc	fsr2h,f,c
 11314  000FB0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11315  000FB4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11316  000FB8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11317  000FBA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11318  000FBC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11319  000FBE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11320  000FC0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11321  000FC2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11322  000FC4  0E01               	movlw	1
 11323  000FC6  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11324  000FCA  0100               	movlb	0	; () banked
 11325  000FCC  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 11326  000FCE  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11330  000FD0  EE20 F010          	lfsr	2,16
 11331  000FD4  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11332  000FD6  26D9               	addwf	fsr2l,f,c
 11333  000FD8  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11334  000FDA  22DA               	addwfc	fsr2h,f,c
 11335  000FDC  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11336  000FE0  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11337  000FE4  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11338  000FE6  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11339  000FE8  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11340  000FEA  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11341  000FEC  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11342  000FEE  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11343  000FF0  0E01               	movlw	1
 11344  000FF2  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11345  000FF6  0100               	movlb	0	; () banked
 11346  000FF8  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11347  000FFA  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11348  000FFC  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 11349                           
 11350                           ; BSR set to: 0
 11351                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 11352  000FFE  EE20 F010          	lfsr	2,16
 11353  001002  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11354  001004  26D9               	addwf	fsr2l,f,c
 11355  001006  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11356  001008  22DA               	addwfc	fsr2h,f,c
 11357  00100A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11358  00100E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11359  001012  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11360  001014  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11361  001016  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11362  001018  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11363  00101A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11364  00101C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11365  00101E  0E01               	movlw	1
 11366  001020  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11367  001024  0100               	movlb	0	; () banked
 11368  001026  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 11369  001028  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 11373  00102A  EE20 F010          	lfsr	2,16
 11374  00102E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11375  001030  26D9               	addwf	fsr2l,f,c
 11376  001032  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11377  001034  22DA               	addwfc	fsr2h,f,c
 11378  001036  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11379  00103A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11380  00103E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11381  001040  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11382  001042  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11383  001044  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11384  001046  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11385  001048  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11386  00104A  0E01               	movlw	1
 11387  00104C  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11388  001050  0100               	movlb	0	; () banked
 11389  001052  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11390  001054  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11391  001056  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11395  001058  EE20 F010          	lfsr	2,16
 11396  00105C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11397  00105E  26D9               	addwf	fsr2l,f,c
 11398  001060  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11399  001062  22DA               	addwfc	fsr2h,f,c
 11400  001064  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11401  001068  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11402  00106C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11403  00106E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11404  001070  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11405  001072  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11406  001074  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11407  001076  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11408  001078  0E01               	movlw	1
 11409  00107A  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11410  00107E  0100               	movlb	0	; () banked
 11411  001080  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 11412                           
 11413                           ; BSR set to: 0
 11414                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 11415  001082  EE20 F010          	lfsr	2,16
 11416  001086  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11417  001088  26D9               	addwf	fsr2l,f,c
 11418  00108A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11419  00108C  22DA               	addwfc	fsr2h,f,c
 11420  00108E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11421  001092  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11422  001096  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11423  001098  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11424  00109A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11425  00109C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11426  00109E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11427  0010A0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11428  0010A2  0E01               	movlw	1
 11429  0010A4  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11430  0010A8  0100               	movlb	0	; () banked
 11431  0010AA  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 11432                           
 11433                           ; BSR set to: 0
 11434                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 11435  0010AC  EE20 F010          	lfsr	2,16
 11436  0010B0  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11437  0010B2  26D9               	addwf	fsr2l,f,c
 11438  0010B4  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11439  0010B6  22DA               	addwfc	fsr2h,f,c
 11440  0010B8  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11441  0010BC  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11442  0010C0  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11443  0010C2  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11444  0010C4  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11445  0010C6  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11446  0010C8  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11447  0010CA  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11448  0010CC  0E01               	movlw	1
 11449  0010CE  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11450  0010D2  0100               	movlb	0	; () banked
 11451  0010D4  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 11452  0010D6  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 11453                           
 11454                           ; BSR set to: 0
 11455                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 11456  0010D8  EE20 F010          	lfsr	2,16
 11457  0010DC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11458  0010DE  26D9               	addwf	fsr2l,f,c
 11459  0010E0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11460  0010E2  22DA               	addwfc	fsr2h,f,c
 11461  0010E4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11462  0010E8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11463  0010EC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11464  0010EE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11465  0010F0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11466  0010F2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11467  0010F4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11468  0010F6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11469  0010F8  0E01               	movlw	1
 11470  0010FA  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11471  0010FE  0100               	movlb	0	; () banked
 11472  001100  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11473  001102  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 11474  001104  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 11478  001106  0E00               	movlw	0
 11479  001108  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 11480  00110A  D024               	goto	l933
 11481  00110C                     
 11482                           ; BSR set to: 0
 11483                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11484                           
 11485                           ; BSR set to: 0
 11486  00110C  EE20 F010          	lfsr	2,16
 11487  001110  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11488  001112  26D9               	addwf	fsr2l,f,c
 11489  001114  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11490  001116  22DA               	addwfc	fsr2h,f,c
 11491  001118  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11492  00111C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11493  001120  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11494  001122  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11495  001124  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11496  001126  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11497  001128  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11498  00112A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11499  00112C  0E01               	movlw	1
 11500  00112E  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11501  001132  0100               	movlb	0	; () banked
 11502  001134  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11503  001136  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 11504  001138  0D01               	mullw	1
 11505  00113A  0E08               	movlw	8
 11506  00113C  26F3               	addwf	prodl,f,c
 11507  00113E  0E00               	movlw	0
 11508  001140  22F4               	addwfc	prodh,f,c
 11509  001142  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11510  001144  24F3               	addwf	prodl,w,c
 11511  001146  6ED9               	movwf	fsr2l,c
 11512  001148  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11513  00114A  20F4               	addwfc	prodh,w,c
 11514  00114C  6EDA               	movwf	fsr2h,c
 11515  00114E  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11516                           
 11517                           ; BSR set to: 0
 11518  001152  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 11519  001154                     l933:
 11520                           
 11521                           ; BSR set to: 0
 11522                           
 11523                           ; BSR set to: 0
 11524  001154  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11525  001156  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 11526  001158  A0D8               	btfss	status,0,c
 11527  00115A  D7D8               	goto	l934
 11528                           
 11529                           ; BSR set to: 0
 11530                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 11531                           
 11532                           ; BSR set to: 0
 11533  00115C  0E00               	movlw	0
 11534  00115E  6F98               	movwf	arp_parseFromRXBuffer@i_3025& (0+255),b
 11535  001160  D024               	goto	l936
 11536  001162                     
 11537                           ; BSR set to: 0
 11538                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11539                           
 11540                           ; BSR set to: 0
 11541  001162  EE20 F010          	lfsr	2,16
 11542  001166  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11543  001168  26D9               	addwf	fsr2l,f,c
 11544  00116A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11545  00116C  22DA               	addwfc	fsr2h,f,c
 11546  00116E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11547  001172  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11548  001176  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11549  001178  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11550  00117A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11551  00117C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11552  00117E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11553  001180  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11554  001182  0E01               	movlw	1
 11555  001184  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11556  001188  0100               	movlb	0	; () banked
 11557  00118A  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11558  00118C  5198               	movf	arp_parseFromRXBuffer@i_3025& (0+255),w,b
 11559  00118E  0D01               	mullw	1
 11560  001190  0E0E               	movlw	14
 11561  001192  26F3               	addwf	prodl,f,c
 11562  001194  0E00               	movlw	0
 11563  001196  22F4               	addwfc	prodh,f,c
 11564  001198  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11565  00119A  24F3               	addwf	prodl,w,c
 11566  00119C  6ED9               	movwf	fsr2l,c
 11567  00119E  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11568  0011A0  20F4               	addwfc	prodh,w,c
 11569  0011A2  6EDA               	movwf	fsr2h,c
 11570  0011A4  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11571                           
 11572                           ; BSR set to: 0
 11573  0011A8  2B98               	incf	arp_parseFromRXBuffer@i_3025& (0+255),f,b
 11574  0011AA                     l936:
 11575                           
 11576                           ; BSR set to: 0
 11577                           
 11578                           ; BSR set to: 0
 11579  0011AA  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11580  0011AC  5D98               	subwf	arp_parseFromRXBuffer@i_3025& (0+255),w,b
 11581  0011AE  A0D8               	btfss	status,0,c
 11582  0011B0  D7D8               	goto	l937
 11583                           
 11584                           ; BSR set to: 0
 11585                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 11586                           
 11587                           ; BSR set to: 0
 11588  0011B2  0E00               	movlw	0
 11589  0011B4  6F99               	movwf	arp_parseFromRXBuffer@i_3026& (0+255),b
 11590  0011B6  D024               	goto	l939
 11591  0011B8                     
 11592                           ; BSR set to: 0
 11593                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 11594                           
 11595                           ; BSR set to: 0
 11596  0011B8  EE20 F010          	lfsr	2,16
 11597  0011BC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11598  0011BE  26D9               	addwf	fsr2l,f,c
 11599  0011C0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11600  0011C2  22DA               	addwfc	fsr2h,f,c
 11601  0011C4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11602  0011C8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11603  0011CC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11604  0011CE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11605  0011D0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11606  0011D2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11607  0011D4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11608  0011D6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11609  0011D8  0E01               	movlw	1
 11610  0011DA  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11611  0011DE  0100               	movlb	0	; () banked
 11612  0011E0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11613  0011E2  5199               	movf	arp_parseFromRXBuffer@i_3026& (0+255),w,b
 11614  0011E4  0D01               	mullw	1
 11615  0011E6  0E12               	movlw	18
 11616  0011E8  26F3               	addwf	prodl,f,c
 11617  0011EA  0E00               	movlw	0
 11618  0011EC  22F4               	addwfc	prodh,f,c
 11619  0011EE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11620  0011F0  24F3               	addwf	prodl,w,c
 11621  0011F2  6ED9               	movwf	fsr2l,c
 11622  0011F4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11623  0011F6  20F4               	addwfc	prodh,w,c
 11624  0011F8  6EDA               	movwf	fsr2h,c
 11625  0011FA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11626                           
 11627                           ; BSR set to: 0
 11628  0011FE  2B99               	incf	arp_parseFromRXBuffer@i_3026& (0+255),f,b
 11629  001200                     l939:
 11630                           
 11631                           ; BSR set to: 0
 11632                           
 11633                           ; BSR set to: 0
 11634  001200  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11635  001202  5D99               	subwf	arp_parseFromRXBuffer@i_3026& (0+255),w,b
 11636  001204  A0D8               	btfss	status,0,c
 11637  001206  D7D8               	goto	l940
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 11641                           
 11642                           ; BSR set to: 0
 11643  001208  0E00               	movlw	0
 11644  00120A  6F9A               	movwf	arp_parseFromRXBuffer@i_3027& (0+255),b
 11645  00120C  D024               	goto	l942
 11646  00120E                     
 11647                           ; BSR set to: 0
 11648                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 11649                           
 11650                           ; BSR set to: 0
 11651  00120E  EE20 F010          	lfsr	2,16
 11652  001212  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11653  001214  26D9               	addwf	fsr2l,f,c
 11654  001216  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11655  001218  22DA               	addwfc	fsr2h,f,c
 11656  00121A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11657  00121E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11658  001222  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11659  001224  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11660  001226  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11661  001228  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11662  00122A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11663  00122C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11664  00122E  0E01               	movlw	1
 11665  001230  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11666  001234  0100               	movlb	0	; () banked
 11667  001236  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11668  001238  519A               	movf	arp_parseFromRXBuffer@i_3027& (0+255),w,b
 11669  00123A  0D01               	mullw	1
 11670  00123C  0E18               	movlw	24
 11671  00123E  26F3               	addwf	prodl,f,c
 11672  001240  0E00               	movlw	0
 11673  001242  22F4               	addwfc	prodh,f,c
 11674  001244  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11675  001246  24F3               	addwf	prodl,w,c
 11676  001248  6ED9               	movwf	fsr2l,c
 11677  00124A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11678  00124C  20F4               	addwfc	prodh,w,c
 11679  00124E  6EDA               	movwf	fsr2h,c
 11680  001250  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11681                           
 11682                           ; BSR set to: 0
 11683  001254  2B9A               	incf	arp_parseFromRXBuffer@i_3027& (0+255),f,b
 11684  001256                     l942:
 11685                           
 11686                           ; BSR set to: 0
 11687                           
 11688                           ; BSR set to: 0
 11689  001256  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11690  001258  5D9A               	subwf	arp_parseFromRXBuffer@i_3027& (0+255),w,b
 11691  00125A  A0D8               	btfss	status,0,c
 11692  00125C  D7D8               	goto	l943
 11693                           
 11694                           ; BSR set to: 0
 11695                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 11696                           
 11697                           ; BSR set to: 0
 11698  00125E  EE20 F010          	lfsr	2,16
 11699  001262  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11700  001264  26D9               	addwf	fsr2l,f,c
 11701  001266  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11702  001268  22DA               	addwfc	fsr2h,f,c
 11703  00126A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11704  00126E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11705  001272  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11706  001274  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11707  001276  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11708  001278  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11709  00127A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11710  00127C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11711  00127E  0E02               	movlw	2
 11712  001280  EC80  F026         	call	_ethernetController_streamFromRXBuffer
 11713                           
 11714                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 11715  001284  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11716  001286  0100               	movlb	0	; () banked
 11717  001288  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 11718  00128A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11719  00128C  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 11720  00128E  ECC5  F029         	call	_ipv4_isAllZero	;wreg free
 11721  001292  0100               	movlb	0	; () banked
 11722  001294  A0D8               	btfss	status,0,c
 11723  001296  D002               	goto	l945
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;arp.c: 97: arp.fIsProbe = 1;
 11727  001298  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11728  00129A  D03C               	goto	l949
 11729  00129C                     l945:
 11730                           
 11731                           ; BSR set to: 0
 11732                           ;arp.c: 100: arp.fIsProbe = 0;
 11733  00129C  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11737                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 11738                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 11739  00129E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11740  0012A0  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11741  0012A2  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11742  0012A4  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11743  0012A6  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11744  0012A8  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11745  0012AA  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11746  0012AC  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11747  0012AE  ECAB  F028         	call	_ipv4_cmp	;wreg free
 11748  0012B2  0100               	movlb	0	; () banked
 11749  0012B4  A0D8               	btfss	status,0,c
 11750  0012B6  D00D               	goto	l947
 11751                           
 11752                           ; BSR set to: 0
 11753  0012B8  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11754  0012BA  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 11755  0012BC  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11756  0012BE  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 11757  0012C0  ECAD  F029         	call	_mac_isAllZero	;wreg free
 11758  0012C4  0100               	movlb	0	; () banked
 11759  0012C6  A0D8               	btfss	status,0,c
 11760  0012C8  D004               	goto	l947
 11761                           
 11762                           ; BSR set to: 0
 11763  0012CA  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11764  0012CC  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11765  0012CE  B4D8               	btfsc	status,2,c
 11766  0012D0  D01F               	goto	u10930
 11767  0012D2                     l947:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11771                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 11772                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 11773                           
 11774                           ; BSR set to: 0
 11775  0012D2  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11776  0012D4  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11777  0012D6  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11778  0012D8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11779  0012DA  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11780  0012DC  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11781  0012DE  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11782  0012E0  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11783  0012E2  ECAB  F028         	call	_ipv4_cmp	;wreg free
 11784  0012E6  0100               	movlb	0	; () banked
 11785  0012E8  A0D8               	btfss	status,0,c
 11786  0012EA  D014               	goto	l949
 11787                           
 11788                           ; BSR set to: 0
 11789  0012EC  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 11790  0012EE  6F60               	movwf	mac_cmp@a& (0+255),b
 11791  0012F0  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 11792  0012F2  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 11793  0012F4  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11794  0012F6  6F62               	movwf	mac_cmp@b& (0+255),b
 11795  0012F8  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11796  0012FA  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 11797  0012FC  EC8A  F028         	call	_mac_cmp	;wreg free
 11798  001300  0100               	movlb	0	; () banked
 11799  001302  A0D8               	btfss	status,0,c
 11800  001304  D007               	goto	l949
 11801                           
 11802                           ; BSR set to: 0
 11803  001306  0E02               	movlw	2
 11804  001308  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11805  00130A  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11806  00130C  A4D8               	btfss	status,2,c
 11807  00130E  D002               	goto	l949
 11808  001310                     u10930:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;arp.c: 111: arp.fIsGratuitous = 1;
 11812  001310  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11813                           
 11814                           ;arp.c: 112: } else {
 11815  001312  D001               	goto	l950
 11816  001314                     l949:
 11817                           
 11818                           ; BSR set to: 0
 11819                           ;arp.c: 113: arp.fIsGratuitous = 0;
 11820  001314  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11821  001316                     l950:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;arp.c: 114: }
 11825                           ;arp.c: 115: }
 11826                           ;arp.c: 116: }
 11827                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 11828                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 11829                           ;arp.c: 121: (arp.operation > 2) ||
 11830                           ;arp.c: 122: (arp.hlen != 6u) ||
 11831                           ;arp.c: 123: (arp.plen != 4u)) {
 11832                           
 11833                           ; BSR set to: 0
 11834                           
 11835                           ; BSR set to: 0
 11836                           
 11837                           ; BSR set to: 0
 11838  001316  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 11839  001318  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 11840  00131A  A4D8               	btfss	status,2,c
 11841  00131C  D013               	goto	u10980
 11842                           
 11843                           ; BSR set to: 0
 11844  00131E  0E08               	movlw	8
 11845  001320  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 11846  001322  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 11847  001324  A4D8               	btfss	status,2,c
 11848  001326  D00E               	goto	u10980
 11849                           
 11850                           ; BSR set to: 0
 11851  001328  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11852  00132A  E10C               	bnz	l9319
 11853  00132C  0E03               	movlw	3
 11854  00132E  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11855  001330  B0D8               	btfsc	status,0,c
 11856  001332  D008               	goto	u10980
 11857                           
 11858                           ; BSR set to: 0
 11859  001334  0E06               	movlw	6
 11860  001336  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11861  001338  A4D8               	btfss	status,2,c
 11862  00133A  D004               	goto	u10980
 11863                           
 11864                           ; BSR set to: 0
 11865  00133C  0E04               	movlw	4
 11866  00133E  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11867  001340  B4D8               	btfsc	status,2,c
 11868  001342  D004               	goto	l951
 11869  001344                     u10980:
 11870  001344                     l9319:
 11871                           
 11872                           ; BSR set to: 0
 11873                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 11874  001344  0E01               	movlw	1
 11875  001346  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11876  001348  0E94               	movlw	148
 11877  00134A  D003               	goto	L1
 11878  00134C                     l951:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 11882                           
 11883                           ; BSR set to: 0
 11884  00134C  0E00               	movlw	0
 11885  00134E  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11886  001350  0E00               	movlw	0
 11887  001352                     L1:
 11888  001352  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 11889                           
 11890                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 11891  001354  0E03               	movlw	3
 11892  001356  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 11893                           
 11894                           ; BSR set to: 0
 11895                           ;arp.c: 129: }
 11896                           ;arp.c: 131: return arp;
 11897                           
 11898                           ; BSR set to: 0
 11899  001358  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 11900  00135C  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 11901  001360  0E1F               	movlw	31
 11902  001362                     u10991:
 11903  001362  CFDB FFEB          	movff	plusw2,plusw0
 11904  001366  06E8               	decf	wreg,f,c
 11905  001368  E2FC               	bc	u10991
 11906  00136A  0012               	return	
 11907  00136C                     __end_of_arp_parseFromRXBuffer:
 11908                           	opt stack 0
 11909                           tblptru	equ	0xFF8
 11910                           tblptrh	equ	0xFF7
 11911                           tblptrl	equ	0xFF6
 11912                           tablat	equ	0xFF5
 11913                           prodh	equ	0xFF4
 11914                           prodl	equ	0xFF3
 11915                           intcon	equ	0xFF2
 11916                           intcon3	equ	0xFF0
 11917                           indf0	equ	0xFEF
 11918                           postinc0	equ	0xFEE
 11919                           plusw0	equ	0xFEB
 11920                           fsr0h	equ	0xFEA
 11921                           fsr0l	equ	0xFE9
 11922                           wreg	equ	0xFE8
 11923                           indf1	equ	0xFE7
 11924                           postinc1	equ	0xFE6
 11925                           postdec1	equ	0xFE5
 11926                           plusw1	equ	0xFE3
 11927                           fsr1h	equ	0xFE2
 11928                           fsr1l	equ	0xFE1
 11929                           indf2	equ	0xFDF
 11930                           postinc2	equ	0xFDE
 11931                           postdec2	equ	0xFDD
 11932                           plusw2	equ	0xFDB
 11933                           fsr2h	equ	0xFDA
 11934                           fsr2l	equ	0xFD9
 11935                           status	equ	0xFD8
 11936                           
 11937 ;; *************** function _mac_cmp *****************
 11938 ;; Defined at:
 11939 ;;		line 39 in file "src/eth/mac.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;  a               2    0[BANK0 ] PTR struct macaddress
 11942 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11943 ;;  b               2    2[BANK0 ] PTR struct macaddress
 11944 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;  i               1    6[BANK0 ] unsigned char 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;		None               void
 11949 ;; Registers used:
 11950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11956 ;;      Params:         0       4       0       0       0       0       0       0       0
 11957 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11958 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11959 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11960 ;;Total ram usage:        7 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    4
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_arp_parseFromRXBuffer
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           	psect	text35
 11971  005114                     __ptext35:
 11972                           	opt stack 0
 11973  005114                     _mac_cmp:
 11974                           	opt stack 22
 11975                           
 11976                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 11977                           
 11978                           ; BSR set to: 0
 11979                           ;incstack = 0
 11980  005114  0E00               	movlw	0
 11981  005116  0100               	movlb	0	; () banked
 11982  005118  6F66               	movwf	mac_cmp@i& (0+255),b
 11983  00511A                     l8929:
 11984                           
 11985                           ; BSR set to: 0
 11986  00511A  0E05               	movlw	5
 11987  00511C  6566               	cpfsgt	mac_cmp@i& (0+255),b
 11988  00511E  D001               	goto	l390
 11989  005120  D018               	goto	u10000
 11990  005122                     l390:
 11991                           
 11992                           ; BSR set to: 0
 11993                           ;mac.c: 41: if (a->address[i] != b->address[i])
 11994                           
 11995                           ; BSR set to: 0
 11996  005122  5166               	movf	mac_cmp@i& (0+255),w,b
 11997  005124  0D01               	mullw	1
 11998  005126  50F3               	movf	prodl,w,c
 11999  005128  2562               	addwf	mac_cmp@b& (0+255),w,b
 12000  00512A  6ED9               	movwf	fsr2l,c
 12001  00512C  50F4               	movf	prodh,w,c
 12002  00512E  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 12003  005130  6EDA               	movwf	fsr2h,c
 12004  005132  5166               	movf	mac_cmp@i& (0+255),w,b
 12005  005134  0D01               	mullw	1
 12006  005136  50F3               	movf	prodl,w,c
 12007  005138  2560               	addwf	mac_cmp@a& (0+255),w,b
 12008  00513A  6EE1               	movwf	fsr1l,c
 12009  00513C  50F4               	movf	prodh,w,c
 12010  00513E  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 12011  005140  6EE2               	movwf	fsr1h,c
 12012  005142  50DE               	movf	postinc2,w,c
 12013  005144  18E6               	xorwf	postinc1,w,c
 12014  005146  B4D8               	btfsc	status,2,c
 12015  005148  D002               	goto	l392
 12016                           
 12017                           ; BSR set to: 0
 12018                           ;mac.c: 42: return 0;
 12019  00514A  90D8               	bcf	status,0,c
 12020                           
 12021                           ; BSR set to: 0
 12022  00514C  0012               	return	
 12023  00514E                     l392:
 12024                           
 12025                           ; BSR set to: 0
 12026                           
 12027                           ; BSR set to: 0
 12028  00514E  2B66               	incf	mac_cmp@i& (0+255),f,b
 12029  005150  D7E4               	goto	l8929
 12030  005152                     u10000:
 12031                           
 12032                           ; BSR set to: 0
 12033                           ;mac.c: 43: }
 12034                           ;mac.c: 44: return 1;
 12035                           
 12036                           ; BSR set to: 0
 12037  005152  80D8               	bsf	status,0,c
 12038  005154  0012               	return	
 12039  005156                     __end_of_mac_cmp:
 12040                           	opt stack 0
 12041                           tblptru	equ	0xFF8
 12042                           tblptrh	equ	0xFF7
 12043                           tblptrl	equ	0xFF6
 12044                           tablat	equ	0xFF5
 12045                           prodh	equ	0xFF4
 12046                           prodl	equ	0xFF3
 12047                           intcon	equ	0xFF2
 12048                           intcon3	equ	0xFF0
 12049                           indf0	equ	0xFEF
 12050                           postinc0	equ	0xFEE
 12051                           plusw0	equ	0xFEB
 12052                           fsr0h	equ	0xFEA
 12053                           fsr0l	equ	0xFE9
 12054                           wreg	equ	0xFE8
 12055                           indf1	equ	0xFE7
 12056                           postinc1	equ	0xFE6
 12057                           postdec1	equ	0xFE5
 12058                           plusw1	equ	0xFE3
 12059                           fsr1h	equ	0xFE2
 12060                           fsr1l	equ	0xFE1
 12061                           indf2	equ	0xFDF
 12062                           postinc2	equ	0xFDE
 12063                           postdec2	equ	0xFDD
 12064                           plusw2	equ	0xFDB
 12065                           fsr2h	equ	0xFDA
 12066                           fsr2l	equ	0xFD9
 12067                           status	equ	0xFD8
 12068                           
 12069 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 12070 ;; Defined at:
 12071 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 12072 ;; Parameters:    Size  Location     Type
 12073 ;;  startEnd        1    wreg     unsigned char 
 12074 ;;  startAddress    2   15[BANK0 ] unsigned int 
 12075 ;; Auto vars:     Size  Location     Type
 12076 ;;  startEnd        1   17[BANK0 ] unsigned char 
 12077 ;;  temp            1   19[BANK0 ] unsigned char 
 12078 ;;  opcode          1   18[BANK0 ] unsigned char 
 12079 ;; Return value:  Size  Location     Type
 12080 ;;                  1    wreg      unsigned char 
 12081 ;; Registers used:
 12082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12083 ;; Tracked objects:
 12084 ;;		On entry : 0/0
 12085 ;;		On exit  : 0/0
 12086 ;;		Unchanged: 0/0
 12087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12088 ;;      Params:         0       2       0       0       0       0       0       0       0
 12089 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12090 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12091 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12092 ;;Total ram usage:        5 bytes
 12093 ;; Hardware stack levels used:    1
 12094 ;; Hardware stack levels required when called:    7
 12095 ;; This function calls:
 12096 ;;		_enc424j600_readSPI
 12097 ;;		_enc424j600_setERXDATAReadPointer
 12098 ;;		_enc424j600_writeSPI
 12099 ;; This function is called by:
 12100 ;;		_arp_parseFromRXBuffer
 12101 ;;		_ipv4_parseHeader
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           	psect	text36
 12106  004D00                     __ptext36:
 12107                           	opt stack 0
 12108  004D00                     _ethernetController_streamFromRXBuffer:
 12109                           	opt stack 19
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;incstack = 0
 12113                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 12114  004D00  0100               	movlb	0	; () banked
 12115  004D02  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 12116                           
 12117                           ;ENC424J600.c: 351: uint8_t temp;
 12118                           ;ENC424J600.c: 352: uint8_t opcode;
 12119                           ;ENC424J600.c: 353: switch (startEnd) {
 12120  004D04  D01F               	goto	l179
 12121  004D06                     
 12122                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 12123  004D06  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 12124  004D0A  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 12125  004D0E  EC08  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12126                           
 12127                           ;ENC424J600.c: 356: opcode = 0x2C;
 12128  004D12  0E2C               	movlw	44
 12129  004D14  0100               	movlb	0	; () banked
 12130  004D16  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 12131                           
 12132                           ; BSR set to: 0
 12133                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 12134  004D18  9881               	bcf	3969,4,c	;volatile
 12135                           
 12136                           ; BSR set to: 0
 12137                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 12138  004D1A  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 12139  004D1C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12140  004D1E  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 12141  004D20  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12142  004D22  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 12143                           
 12144                           ;ENC424J600.c: 359: return 0;
 12145  004D26  0E00               	movlw	0
 12146  004D28  0012               	return	
 12147  004D2A                     
 12148                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 12149  004D2A  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 12150  004D2C  0100               	movlb	0	; () banked
 12151  004D2E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12152  004D30  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 12153  004D32  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12154  004D34  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
 12155                           
 12156                           ;ENC424J600.c: 362: return temp;
 12157  004D38  0100               	movlb	0	; () banked
 12158  004D3A  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 12159                           
 12160                           ; BSR set to: 0
 12161  004D3C  0012               	return	
 12162  004D3E                     l183:
 12163                           
 12164                           ; BSR set to: 0
 12165                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 12166  004D3E  8881               	bsf	3969,4,c	;volatile
 12167                           
 12168                           ; BSR set to: 0
 12169                           ;ENC424J600.c: 374: return 0;
 12170  004D40  0E00               	movlw	0
 12171                           
 12172                           ; BSR set to: 0
 12173  004D42  0012               	return	
 12174  004D44                     l179:
 12175                           
 12176                           ; BSR set to: 0
 12177  004D44  0100               	movlb	0	; () banked
 12178  004D46  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 12179                           
 12180                           ; Switch size 1, requested type "space"
 12181                           ; Number of cases is 3, Range of values is 0 to 2
 12182                           ; switch strategies available:
 12183                           ; Name         Instructions Cycles
 12184                           ; simple_byte           10     6 (average)
 12185                           ;	Chosen strategy is simple_byte
 12186  004D48  0A00               	xorlw	0	; case 0
 12187  004D4A  B4D8               	btfsc	status,2,c
 12188  004D4C  D7DC               	goto	l180
 12189  004D4E  0A01               	xorlw	1	; case 1
 12190  004D50  B4D8               	btfsc	status,2,c
 12191  004D52  D7EB               	goto	l182
 12192  004D54  0A03               	xorlw	3	; case 2
 12193  004D56  B4D8               	btfsc	status,2,c
 12194  004D58  D7F2               	goto	l183
 12195                           
 12196                           ; BSR set to: 0
 12197                           ;ENC424J600.c: 376: return 0;
 12198                           
 12199                           ; BSR set to: 0
 12200  004D5A  0E00               	movlw	0
 12201  004D5C  0012               	return	
 12202  004D5E                     __end_of_ethernetController_streamFromRXBuffer:
 12203                           	opt stack 0
 12204                           tblptru	equ	0xFF8
 12205                           tblptrh	equ	0xFF7
 12206                           tblptrl	equ	0xFF6
 12207                           tablat	equ	0xFF5
 12208                           prodh	equ	0xFF4
 12209                           prodl	equ	0xFF3
 12210                           intcon	equ	0xFF2
 12211                           intcon3	equ	0xFF0
 12212                           indf0	equ	0xFEF
 12213                           postinc0	equ	0xFEE
 12214                           plusw0	equ	0xFEB
 12215                           fsr0h	equ	0xFEA
 12216                           fsr0l	equ	0xFE9
 12217                           wreg	equ	0xFE8
 12218                           indf1	equ	0xFE7
 12219                           postinc1	equ	0xFE6
 12220                           postdec1	equ	0xFE5
 12221                           plusw1	equ	0xFE3
 12222                           fsr1h	equ	0xFE2
 12223                           fsr1l	equ	0xFE1
 12224                           indf2	equ	0xFDF
 12225                           postinc2	equ	0xFDE
 12226                           postdec2	equ	0xFDD
 12227                           plusw2	equ	0xFDB
 12228                           fsr2h	equ	0xFDA
 12229                           fsr2l	equ	0xFD9
 12230                           status	equ	0xFD8
 12231                           
 12232 ;; *************** function _UARTTransmitInt *****************
 12233 ;; Defined at:
 12234 ;;		line 43 in file "src/system/uart.c"
 12235 ;; Parameters:    Size  Location     Type
 12236 ;;  val             4   58[BANK0 ] unsigned long 
 12237 ;; Auto vars:     Size  Location     Type
 12238 ;;		None
 12239 ;; Return value:  Size  Location     Type
 12240 ;;                  1    wreg      void 
 12241 ;; Registers used:
 12242 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12243 ;; Tracked objects:
 12244 ;;		On entry : 0/0
 12245 ;;		On exit  : 0/0
 12246 ;;		Unchanged: 0/0
 12247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12248 ;;      Params:         0       4       0       0       0       0       0       0       0
 12249 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12250 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12251 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12252 ;;Total ram usage:        4 bytes
 12253 ;; Hardware stack levels used:    1
 12254 ;; Hardware stack levels required when called:    8
 12255 ;; This function calls:
 12256 ;;		_UARTTransmitText
 12257 ;;		_intToString
 12258 ;; This function is called by:
 12259 ;;		_ethernet_rxGetNewFrame
 12260 ;; This function uses a non-reentrant model
 12261 ;;
 12262                           
 12263                           	psect	text37
 12264  00562E                     __ptext37:
 12265                           	opt stack 0
 12266  00562E                     _UARTTransmitInt:
 12267                           	opt stack 20
 12268                           
 12269                           ;uart.c: 44: UARTTransmitText(intToString(val));
 12270                           
 12271                           ;incstack = 0
 12272  00562E  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 12273  005632  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 12274  005636  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 12275  00563A  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 12276  00563E  EC94  F029         	call	_intToString	;wreg free
 12277  005642  C084  F098         	movff	?_intToString,UARTTransmitText@str
 12278  005646  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 12279  00564A  EC06  F027         	call	_UARTTransmitText	;wreg free
 12280  00564E  0012               	return		;funcret
 12281  005650                     __end_of_UARTTransmitInt:
 12282                           	opt stack 0
 12283                           tblptru	equ	0xFF8
 12284                           tblptrh	equ	0xFF7
 12285                           tblptrl	equ	0xFF6
 12286                           tablat	equ	0xFF5
 12287                           prodh	equ	0xFF4
 12288                           prodl	equ	0xFF3
 12289                           intcon	equ	0xFF2
 12290                           intcon3	equ	0xFF0
 12291                           indf0	equ	0xFEF
 12292                           postinc0	equ	0xFEE
 12293                           plusw0	equ	0xFEB
 12294                           fsr0h	equ	0xFEA
 12295                           fsr0l	equ	0xFE9
 12296                           wreg	equ	0xFE8
 12297                           indf1	equ	0xFE7
 12298                           postinc1	equ	0xFE6
 12299                           postdec1	equ	0xFE5
 12300                           plusw1	equ	0xFE3
 12301                           fsr1h	equ	0xFE2
 12302                           fsr1l	equ	0xFE1
 12303                           indf2	equ	0xFDF
 12304                           postinc2	equ	0xFDE
 12305                           postdec2	equ	0xFDD
 12306                           plusw2	equ	0xFDB
 12307                           fsr2h	equ	0xFDA
 12308                           fsr2l	equ	0xFD9
 12309                           status	equ	0xFD8
 12310                           
 12311 ;; *************** function _intToString *****************
 12312 ;; Defined at:
 12313 ;;		line 75 in file "src/system/uart.c"
 12314 ;; Parameters:    Size  Location     Type
 12315 ;;  val             4   36[BANK0 ] unsigned long 
 12316 ;; Auto vars:     Size  Location     Type
 12317 ;;		None
 12318 ;; Return value:  Size  Location     Type
 12319 ;;                  2   36[BANK0 ] PTR unsigned char 
 12320 ;; Registers used:
 12321 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12322 ;; Tracked objects:
 12323 ;;		On entry : 0/0
 12324 ;;		On exit  : 0/0
 12325 ;;		Unchanged: 0/0
 12326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12327 ;;      Params:         0       4       0       0       0       0       0       0       0
 12328 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12329 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12330 ;;      Totals:         0       4       0       0       0       0       0       0       0
 12331 ;;Total ram usage:        4 bytes
 12332 ;; Hardware stack levels used:    1
 12333 ;; Hardware stack levels required when called:    7
 12334 ;; This function calls:
 12335 ;;		_ltoa
 12336 ;; This function is called by:
 12337 ;;		_ethernet_rxGetNewFrame
 12338 ;;		_main
 12339 ;;		_printErrorMessage
 12340 ;;		_UARTTransmitInt
 12341 ;;		_ipv4_handleNewPacket
 12342 ;;		_arpEntryToString
 12343 ;; This function uses a non-reentrant model
 12344 ;;
 12345                           
 12346                           	psect	text38
 12347  005328                     __ptext38:
 12348                           	opt stack 0
 12349  005328                     _intToString:
 12350                           	opt stack 22
 12351                           
 12352                           ;uart.c: 76: char static number [10];
 12353                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 12354                           
 12355                           ;incstack = 0
 12356  005328  0EB7               	movlw	low intToString@number
 12357  00532A  0100               	movlb	0	; () banked
 12358  00532C  6F7A               	movwf	ltoa@buf& (0+255),b
 12359  00532E  0E01               	movlw	high intToString@number
 12360  005330  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 12361  005332  C084  F07C         	movff	intToString@val,ltoa@val
 12362  005336  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 12363  00533A  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 12364  00533E  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 12365  005342  0E00               	movlw	0
 12366  005344  6F81               	movwf	(ltoa@base+1)& (0+255),b
 12367  005346  0E0A               	movlw	10
 12368  005348  6F80               	movwf	ltoa@base& (0+255),b
 12369  00534A  EC31  F027         	call	_ltoa	;wreg free
 12370                           
 12371                           ;uart.c: 81: return number;
 12372  00534E  0EB7               	movlw	low intToString@number
 12373  005350  0100               	movlb	0	; () banked
 12374  005352  6F84               	movwf	?_intToString& (0+255),b
 12375  005354  0E01               	movlw	high intToString@number
 12376  005356  6F85               	movwf	(?_intToString+1)& (0+255),b
 12377  005358  0012               	return	
 12378  00535A                     __end_of_intToString:
 12379                           	opt stack 0
 12380                           tblptru	equ	0xFF8
 12381                           tblptrh	equ	0xFF7
 12382                           tblptrl	equ	0xFF6
 12383                           tablat	equ	0xFF5
 12384                           prodh	equ	0xFF4
 12385                           prodl	equ	0xFF3
 12386                           intcon	equ	0xFF2
 12387                           intcon3	equ	0xFF0
 12388                           indf0	equ	0xFEF
 12389                           postinc0	equ	0xFEE
 12390                           plusw0	equ	0xFEB
 12391                           fsr0h	equ	0xFEA
 12392                           fsr0l	equ	0xFE9
 12393                           wreg	equ	0xFE8
 12394                           indf1	equ	0xFE7
 12395                           postinc1	equ	0xFE6
 12396                           postdec1	equ	0xFE5
 12397                           plusw1	equ	0xFE3
 12398                           fsr1h	equ	0xFE2
 12399                           fsr1l	equ	0xFE1
 12400                           indf2	equ	0xFDF
 12401                           postinc2	equ	0xFDE
 12402                           postdec2	equ	0xFDD
 12403                           plusw2	equ	0xFDB
 12404                           fsr2h	equ	0xFDA
 12405                           fsr2l	equ	0xFD9
 12406                           status	equ	0xFD8
 12407                           
 12408 ;; *************** function _ltoa *****************
 12409 ;; Defined at:
 12410 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12411 ;; Parameters:    Size  Location     Type
 12412 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 12413 ;;		 -> intToString@number(10), 
 12414 ;;  val             4   28[BANK0 ] long 
 12415 ;;  base            2   32[BANK0 ] int 
 12416 ;; Auto vars:     Size  Location     Type
 12417 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 12418 ;;		 -> intToString@number(10), 
 12419 ;; Return value:  Size  Location     Type
 12420 ;;                  2   26[BANK0 ] PTR unsigned char 
 12421 ;; Registers used:
 12422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12423 ;; Tracked objects:
 12424 ;;		On entry : 0/0
 12425 ;;		On exit  : 0/0
 12426 ;;		Unchanged: 0/0
 12427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12428 ;;      Params:         0       8       0       0       0       0       0       0       0
 12429 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12430 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12431 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12432 ;;Total ram usage:       10 bytes
 12433 ;; Hardware stack levels used:    1
 12434 ;; Hardware stack levels required when called:    6
 12435 ;; This function calls:
 12436 ;;		_ultoa
 12437 ;; This function is called by:
 12438 ;;		_intToString
 12439 ;; This function uses a non-reentrant model
 12440 ;;
 12441                           
 12442                           	psect	text39
 12443  004E62                     __ptext39:
 12444                           	opt stack 0
 12445  004E62                     _ltoa:
 12446                           	opt stack 22
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;incstack = 0
 12450  004E62  C07A  F082         	movff	ltoa@buf,ltoa@cp
 12451  004E66  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 12452  004E6A  0100               	movlb	0	; () banked
 12453  004E6C  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 12454  004E6E  D010               	goto	l1613
 12455                           
 12456                           ; BSR set to: 0
 12457  004E70  C07A  FFD9         	movff	ltoa@buf,fsr2l
 12458  004E74  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 12459  004E78  0E2D               	movlw	45
 12460  004E7A  6EDF               	movwf	indf2,c
 12461                           
 12462                           ; BSR set to: 0
 12463  004E7C  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 12464  004E7E  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 12465                           
 12466                           ; BSR set to: 0
 12467  004E80  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 12468  004E82  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 12469  004E84  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 12470  004E86  6D7C               	negf	ltoa@val& (0+255),b
 12471  004E88  0E00               	movlw	0
 12472  004E8A  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 12473  004E8C  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 12474  004E8E  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 12475  004E90                     l1613:
 12476                           
 12477                           ; BSR set to: 0
 12478                           
 12479                           ; BSR set to: 0
 12480  004E90  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 12481  004E94  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 12482  004E98  C07C  F06F         	movff	ltoa@val,ultoa@val
 12483  004E9C  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 12484  004EA0  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 12485  004EA4  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 12486  004EA8  C080  F073         	movff	ltoa@base,ultoa@base
 12487  004EAC  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 12488  004EB0  EC0E  F01E         	call	_ultoa	;wreg free
 12489  004EB4  0012               	return	
 12490  004EB6                     __end_of_ltoa:
 12491                           	opt stack 0
 12492                           tblptru	equ	0xFF8
 12493                           tblptrh	equ	0xFF7
 12494                           tblptrl	equ	0xFF6
 12495                           tablat	equ	0xFF5
 12496                           prodh	equ	0xFF4
 12497                           prodl	equ	0xFF3
 12498                           intcon	equ	0xFF2
 12499                           intcon3	equ	0xFF0
 12500                           indf0	equ	0xFEF
 12501                           postinc0	equ	0xFEE
 12502                           plusw0	equ	0xFEB
 12503                           fsr0h	equ	0xFEA
 12504                           fsr0l	equ	0xFE9
 12505                           wreg	equ	0xFE8
 12506                           indf1	equ	0xFE7
 12507                           postinc1	equ	0xFE6
 12508                           postdec1	equ	0xFE5
 12509                           plusw1	equ	0xFE3
 12510                           fsr1h	equ	0xFE2
 12511                           fsr1l	equ	0xFE1
 12512                           indf2	equ	0xFDF
 12513                           postinc2	equ	0xFDE
 12514                           postdec2	equ	0xFDD
 12515                           plusw2	equ	0xFDB
 12516                           fsr2h	equ	0xFDA
 12517                           fsr2l	equ	0xFD9
 12518                           status	equ	0xFD8
 12519                           
 12520 ;; *************** function _ultoa *****************
 12521 ;; Defined at:
 12522 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12523 ;; Parameters:    Size  Location     Type
 12524 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 12525 ;;		 -> intToString@number(10), 
 12526 ;;  val             4   15[BANK0 ] unsigned long 
 12527 ;;  base            2   19[BANK0 ] int 
 12528 ;; Auto vars:     Size  Location     Type
 12529 ;;  v               4   21[BANK0 ] unsigned long 
 12530 ;;  c               1   25[BANK0 ] unsigned char 
 12531 ;; Return value:  Size  Location     Type
 12532 ;;                  2   13[BANK0 ] PTR unsigned char 
 12533 ;; Registers used:
 12534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12535 ;; Tracked objects:
 12536 ;;		On entry : 0/0
 12537 ;;		On exit  : 0/0
 12538 ;;		Unchanged: 0/0
 12539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12540 ;;      Params:         0       8       0       0       0       0       0       0       0
 12541 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12542 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12543 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12544 ;;Total ram usage:       13 bytes
 12545 ;; Hardware stack levels used:    1
 12546 ;; Hardware stack levels required when called:    5
 12547 ;; This function calls:
 12548 ;;		___lldiv
 12549 ;;		___llmod
 12550 ;; This function is called by:
 12551 ;;		_ltoa
 12552 ;; This function uses a non-reentrant model
 12553 ;;
 12554                           
 12555                           	psect	text40
 12556  003C1C                     __ptext40:
 12557                           	opt stack 0
 12558  003C1C                     _ultoa:
 12559                           	opt stack 22
 12560                           
 12561                           ;incstack = 0
 12562  003C1C  C06F  F075         	movff	ultoa@val,ultoa@v
 12563  003C20  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 12564  003C24  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 12565  003C28  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 12566  003C2C  C075  F060         	movff	ultoa@v,___lldiv@dividend
 12567  003C30  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 12568  003C34  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 12569  003C38  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 12570  003C3C  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12571  003C40  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12572  003C44  0100               	movlb	0	; () banked
 12573  003C46  0E00               	movlw	0
 12574  003C48  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12575  003C4A  0EFF               	movlw	-1
 12576  003C4C  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12577  003C4E  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12578  003C50  EC54  F023         	call	___lldiv	;wreg free
 12579  003C54  C060  F075         	movff	?___lldiv,ultoa@v
 12580  003C58  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 12581  003C5C  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 12582  003C60  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 12583  003C64  0100               	movlb	0	; () banked
 12584  003C66  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 12585  003C68  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 12586                           
 12587                           ; BSR set to: 0
 12588  003C6A  5175               	movf	ultoa@v& (0+255),w,b
 12589  003C6C  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 12590  003C6E  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 12591  003C70  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 12592  003C72  A4D8               	btfss	status,2,c
 12593  003C74  D7DB               	goto	l1617
 12594                           
 12595                           ; BSR set to: 0
 12596                           
 12597                           ; BSR set to: 0
 12598  003C76  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12599  003C7A  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12600  003C7E  0E00               	movlw	0
 12601  003C80  6EDF               	movwf	indf2,c
 12602                           
 12603                           ; BSR set to: 0
 12604  003C82  076D               	decf	ultoa@buf& (0+255),f,b
 12605  003C84  A0D8               	btfss	status,0,c
 12606  003C86  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12607  003C88                     
 12608                           ; BSR set to: 0
 12609                           
 12610                           ; BSR set to: 0
 12611  003C88  C06F  F060         	movff	ultoa@val,___llmod@dividend
 12612  003C8C  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 12613  003C90  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 12614  003C94  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 12615  003C98  C073  F064         	movff	ultoa@base,___llmod@divisor
 12616  003C9C  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 12617  003CA0  0E00               	movlw	0
 12618  003CA2  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 12619  003CA4  0EFF               	movlw	-1
 12620  003CA6  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12621  003CA8  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12622  003CAA  EC1A  F026         	call	___llmod	;wreg free
 12623  003CAE  0100               	movlb	0	; () banked
 12624  003CB0  5160               	movf	?___llmod& (0+255),w,b
 12625  003CB2  6F79               	movwf	ultoa@c& (0+255),b
 12626                           
 12627                           ; BSR set to: 0
 12628  003CB4  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 12629  003CB8  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 12630  003CBC  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 12631  003CC0  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 12632  003CC4  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12633  003CC8  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12634  003CCC  0E00               	movlw	0
 12635  003CCE  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12636  003CD0  0EFF               	movlw	-1
 12637  003CD2  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12638  003CD4  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12639  003CD6  EC54  F023         	call	___lldiv	;wreg free
 12640  003CDA  C060  F06F         	movff	?___lldiv,ultoa@val
 12641  003CDE  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 12642  003CE2  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 12643  003CE6  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 12644  003CEA  0E09               	movlw	9
 12645  003CEC  0100               	movlb	0	; () banked
 12646  003CEE  6579               	cpfsgt	ultoa@c& (0+255),b
 12647  003CF0  D002               	goto	l1620
 12648                           
 12649                           ; BSR set to: 0
 12650  003CF2  0E07               	movlw	7
 12651  003CF4  2779               	addwf	ultoa@c& (0+255),f,b
 12652  003CF6                     l1620:
 12653                           
 12654                           ; BSR set to: 0
 12655  003CF6  0E30               	movlw	48
 12656  003CF8  2779               	addwf	ultoa@c& (0+255),f,b
 12657                           
 12658                           ; BSR set to: 0
 12659  003CFA  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12660  003CFE  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12661  003D02  C079  FFDF         	movff	ultoa@c,indf2
 12662                           
 12663                           ; BSR set to: 0
 12664  003D06  076D               	decf	ultoa@buf& (0+255),f,b
 12665  003D08  A0D8               	btfss	status,0,c
 12666  003D0A  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12667                           
 12668                           ; BSR set to: 0
 12669  003D0C  516F               	movf	ultoa@val& (0+255),w,b
 12670  003D0E  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 12671  003D10  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 12672  003D12  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 12673  003D14  B4D8               	btfsc	status,2,c
 12674  003D16  0012               	return	
 12675  003D18  D7B7               	goto	l1619
 12676  003D1A                     __end_of_ultoa:
 12677                           	opt stack 0
 12678                           tblptru	equ	0xFF8
 12679                           tblptrh	equ	0xFF7
 12680                           tblptrl	equ	0xFF6
 12681                           tablat	equ	0xFF5
 12682                           prodh	equ	0xFF4
 12683                           prodl	equ	0xFF3
 12684                           intcon	equ	0xFF2
 12685                           intcon3	equ	0xFF0
 12686                           indf0	equ	0xFEF
 12687                           postinc0	equ	0xFEE
 12688                           plusw0	equ	0xFEB
 12689                           fsr0h	equ	0xFEA
 12690                           fsr0l	equ	0xFE9
 12691                           wreg	equ	0xFE8
 12692                           indf1	equ	0xFE7
 12693                           postinc1	equ	0xFE6
 12694                           postdec1	equ	0xFE5
 12695                           plusw1	equ	0xFE3
 12696                           fsr1h	equ	0xFE2
 12697                           fsr1l	equ	0xFE1
 12698                           indf2	equ	0xFDF
 12699                           postinc2	equ	0xFDE
 12700                           postdec2	equ	0xFDD
 12701                           plusw2	equ	0xFDB
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function ___llmod *****************
 12707 ;; Defined at:
 12708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;  dividend        4    0[BANK0 ] unsigned long 
 12711 ;;  divisor         4    4[BANK0 ] unsigned long 
 12712 ;; Auto vars:     Size  Location     Type
 12713 ;;  counter         1    8[BANK0 ] unsigned char 
 12714 ;; Return value:  Size  Location     Type
 12715 ;;                  4    0[BANK0 ] unsigned long 
 12716 ;; Registers used:
 12717 ;;		wreg, status,2, status,0
 12718 ;; Tracked objects:
 12719 ;;		On entry : 0/0
 12720 ;;		On exit  : 0/0
 12721 ;;		Unchanged: 0/0
 12722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12723 ;;      Params:         0       8       0       0       0       0       0       0       0
 12724 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12725 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12726 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12727 ;;Total ram usage:        9 bytes
 12728 ;; Hardware stack levels used:    1
 12729 ;; Hardware stack levels required when called:    4
 12730 ;; This function calls:
 12731 ;;		Nothing
 12732 ;; This function is called by:
 12733 ;;		_ultoa
 12734 ;;		_arpEntryToString
 12735 ;; This function uses a non-reentrant model
 12736 ;;
 12737                           
 12738                           	psect	text41
 12739  004C34                     __ptext41:
 12740                           	opt stack 0
 12741  004C34                     ___llmod:
 12742                           	opt stack 22
 12743                           
 12744                           ; BSR set to: 0
 12745                           ;incstack = 0
 12746  004C34  0100               	movlb	0	; () banked
 12747  004C36  5164               	movf	___llmod@divisor& (0+255),w,b
 12748  004C38  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12749  004C3A  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12750  004C3C  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12751  004C3E  B4D8               	btfsc	status,2,c
 12752  004C40  D024               	goto	l1579
 12753                           
 12754                           ; BSR set to: 0
 12755  004C42  0E01               	movlw	1
 12756  004C44  6F68               	movwf	___llmod@counter& (0+255),b
 12757  004C46  D006               	goto	l1574
 12758  004C48                     
 12759                           ; BSR set to: 0
 12760                           
 12761                           ; BSR set to: 0
 12762  004C48  90D8               	bcf	status,0,c
 12763  004C4A  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12764  004C4C  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12765  004C4E  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12766  004C50  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12767  004C52  2B68               	incf	___llmod@counter& (0+255),f,b
 12768  004C54                     l1574:
 12769                           
 12770                           ; BSR set to: 0
 12771                           
 12772                           ; BSR set to: 0
 12773  004C54  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12774  004C56  D7F8               	goto	l1575
 12775  004C58                     u9580:
 12776                           
 12777                           ; BSR set to: 0
 12778                           
 12779                           ; BSR set to: 0
 12780                           
 12781                           ; BSR set to: 0
 12782  004C58  5164               	movf	___llmod@divisor& (0+255),w,b
 12783  004C5A  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12784  004C5C  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12785  004C5E  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12786  004C60  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12787  004C62  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12788  004C64  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12789  004C66  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12790  004C68  A0D8               	btfss	status,0,c
 12791  004C6A  D008               	goto	l1578
 12792                           
 12793                           ; BSR set to: 0
 12794  004C6C  5164               	movf	___llmod@divisor& (0+255),w,b
 12795  004C6E  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12796  004C70  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12797  004C72  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12798  004C74  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12799  004C76  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12800  004C78  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12801  004C7A  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12802  004C7C                     l1578:
 12803                           
 12804                           ; BSR set to: 0
 12805                           
 12806                           ; BSR set to: 0
 12807  004C7C  90D8               	bcf	status,0,c
 12808  004C7E  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12809  004C80  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12810  004C82  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12811  004C84  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12812                           
 12813                           ; BSR set to: 0
 12814  004C86  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12815  004C88  D7E7               	goto	u9580
 12816  004C8A                     l1579:
 12817                           
 12818                           ; BSR set to: 0
 12819                           
 12820                           ; BSR set to: 0
 12821  004C8A  C060  F060         	movff	___llmod@dividend,?___llmod
 12822  004C8E  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12823  004C92  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12824  004C96  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12825                           
 12826                           ; BSR set to: 0
 12827  004C9A  0012               	return		;funcret
 12828  004C9C                     __end_of___llmod:
 12829                           	opt stack 0
 12830                           tblptru	equ	0xFF8
 12831                           tblptrh	equ	0xFF7
 12832                           tblptrl	equ	0xFF6
 12833                           tablat	equ	0xFF5
 12834                           prodh	equ	0xFF4
 12835                           prodl	equ	0xFF3
 12836                           intcon	equ	0xFF2
 12837                           intcon3	equ	0xFF0
 12838                           indf0	equ	0xFEF
 12839                           postinc0	equ	0xFEE
 12840                           plusw0	equ	0xFEB
 12841                           fsr0h	equ	0xFEA
 12842                           fsr0l	equ	0xFE9
 12843                           wreg	equ	0xFE8
 12844                           indf1	equ	0xFE7
 12845                           postinc1	equ	0xFE6
 12846                           postdec1	equ	0xFE5
 12847                           plusw1	equ	0xFE3
 12848                           fsr1h	equ	0xFE2
 12849                           fsr1l	equ	0xFE1
 12850                           indf2	equ	0xFDF
 12851                           postinc2	equ	0xFDE
 12852                           postdec2	equ	0xFDD
 12853                           plusw2	equ	0xFDB
 12854                           fsr2h	equ	0xFDA
 12855                           fsr2l	equ	0xFD9
 12856                           status	equ	0xFD8
 12857                           
 12858 ;; *************** function ___lldiv *****************
 12859 ;; Defined at:
 12860 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12861 ;; Parameters:    Size  Location     Type
 12862 ;;  dividend        4    0[BANK0 ] unsigned long 
 12863 ;;  divisor         4    4[BANK0 ] unsigned long 
 12864 ;; Auto vars:     Size  Location     Type
 12865 ;;  quotient        4    8[BANK0 ] unsigned long 
 12866 ;;  counter         1   12[BANK0 ] unsigned char 
 12867 ;; Return value:  Size  Location     Type
 12868 ;;                  4    0[BANK0 ] unsigned long 
 12869 ;; Registers used:
 12870 ;;		wreg, status,2, status,0
 12871 ;; Tracked objects:
 12872 ;;		On entry : 0/0
 12873 ;;		On exit  : 0/0
 12874 ;;		Unchanged: 0/0
 12875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12876 ;;      Params:         0       8       0       0       0       0       0       0       0
 12877 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12879 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12880 ;;Total ram usage:       13 bytes
 12881 ;; Hardware stack levels used:    1
 12882 ;; Hardware stack levels required when called:    4
 12883 ;; This function calls:
 12884 ;;		Nothing
 12885 ;; This function is called by:
 12886 ;;		_ultoa
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890                           	psect	text42
 12891  0046A8                     __ptext42:
 12892                           	opt stack 0
 12893  0046A8                     ___lldiv:
 12894                           	opt stack 22
 12895                           
 12896                           ; BSR set to: 0
 12897                           ;incstack = 0
 12898  0046A8  0E00               	movlw	0
 12899  0046AA  0100               	movlb	0	; () banked
 12900  0046AC  6F68               	movwf	___lldiv@quotient& (0+255),b
 12901  0046AE  0E00               	movlw	0
 12902  0046B0  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 12903  0046B2  0E00               	movlw	0
 12904  0046B4  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12905  0046B6  0E00               	movlw	0
 12906  0046B8  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12907                           
 12908                           ; BSR set to: 0
 12909  0046BA  5164               	movf	___lldiv@divisor& (0+255),w,b
 12910  0046BC  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12911  0046BE  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12912  0046C0  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12913  0046C2  B4D8               	btfsc	status,2,c
 12914  0046C4  D02A               	goto	l1569
 12915                           
 12916                           ; BSR set to: 0
 12917  0046C6  0E01               	movlw	1
 12918  0046C8  6F6C               	movwf	___lldiv@counter& (0+255),b
 12919  0046CA  D006               	goto	l1564
 12920  0046CC                     
 12921                           ; BSR set to: 0
 12922                           
 12923                           ; BSR set to: 0
 12924  0046CC  90D8               	bcf	status,0,c
 12925  0046CE  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 12926  0046D0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12927  0046D2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12928  0046D4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12929  0046D6  2B6C               	incf	___lldiv@counter& (0+255),f,b
 12930  0046D8                     l1564:
 12931                           
 12932                           ; BSR set to: 0
 12933                           
 12934                           ; BSR set to: 0
 12935  0046D8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12936  0046DA  D7F8               	goto	l1565
 12937  0046DC                     u9550:
 12938                           
 12939                           ; BSR set to: 0
 12940                           
 12941                           ; BSR set to: 0
 12942                           
 12943                           ; BSR set to: 0
 12944  0046DC  90D8               	bcf	status,0,c
 12945  0046DE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 12946  0046E0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12947  0046E2  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12948  0046E4  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12949                           
 12950                           ; BSR set to: 0
 12951  0046E6  5164               	movf	___lldiv@divisor& (0+255),w,b
 12952  0046E8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 12953  0046EA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12954  0046EC  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12955  0046EE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12956  0046F0  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12957  0046F2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12958  0046F4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12959  0046F6  A0D8               	btfss	status,0,c
 12960  0046F8  D009               	goto	l1568
 12961                           
 12962                           ; BSR set to: 0
 12963  0046FA  5164               	movf	___lldiv@divisor& (0+255),w,b
 12964  0046FC  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 12965  0046FE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12966  004700  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12967  004702  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12968  004704  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12969  004706  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12970  004708  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12971                           
 12972                           ; BSR set to: 0
 12973  00470A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 12974  00470C                     l1568:
 12975                           
 12976                           ; BSR set to: 0
 12977                           
 12978                           ; BSR set to: 0
 12979  00470C  90D8               	bcf	status,0,c
 12980  00470E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12981  004710  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12982  004712  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12983  004714  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 12984                           
 12985                           ; BSR set to: 0
 12986  004716  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 12987  004718  D7E1               	goto	u9550
 12988  00471A                     l1569:
 12989                           
 12990                           ; BSR set to: 0
 12991                           
 12992                           ; BSR set to: 0
 12993  00471A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 12994  00471E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 12995  004722  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 12996  004726  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 12997                           
 12998                           ; BSR set to: 0
 12999  00472A  0012               	return		;funcret
 13000  00472C                     __end_of___lldiv:
 13001                           	opt stack 0
 13002                           tblptru	equ	0xFF8
 13003                           tblptrh	equ	0xFF7
 13004                           tblptrl	equ	0xFF6
 13005                           tablat	equ	0xFF5
 13006                           prodh	equ	0xFF4
 13007                           prodl	equ	0xFF3
 13008                           intcon	equ	0xFF2
 13009                           intcon3	equ	0xFF0
 13010                           indf0	equ	0xFEF
 13011                           postinc0	equ	0xFEE
 13012                           plusw0	equ	0xFEB
 13013                           fsr0h	equ	0xFEA
 13014                           fsr0l	equ	0xFE9
 13015                           wreg	equ	0xFE8
 13016                           indf1	equ	0xFE7
 13017                           postinc1	equ	0xFE6
 13018                           postdec1	equ	0xFE5
 13019                           plusw1	equ	0xFE3
 13020                           fsr1h	equ	0xFE2
 13021                           fsr1l	equ	0xFE1
 13022                           indf2	equ	0xFDF
 13023                           postinc2	equ	0xFDE
 13024                           postdec2	equ	0xFDD
 13025                           plusw2	equ	0xFDB
 13026                           fsr2h	equ	0xFDA
 13027                           fsr2l	equ	0xFD9
 13028                           status	equ	0xFD8
 13029                           
 13030 ;; *************** function _ethernetController_updateLinkStatus *****************
 13031 ;; Defined at:
 13032 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 13035 ;;		 -> stack(123), 
 13036 ;; Auto vars:     Size  Location     Type
 13037 ;;  temp16          2   35[BANK0 ] unsigned int 
 13038 ;;  temp            1   34[BANK0 ] unsigned char 
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      void 
 13041 ;; Registers used:
 13042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13048 ;;      Params:         0       2       0       0       0       0       0       0       0
 13049 ;;      Locals:         0       3       0       0       0       0       0       0       0
 13050 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13051 ;;      Totals:         0       5       0       0       0       0       0       0       0
 13052 ;;Total ram usage:        5 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    8
 13055 ;; This function calls:
 13056 ;;		_enc424j600_readControlRegisterUnbanked
 13057 ;;		_enc424j600_readPHYRegister
 13058 ;; This function is called by:
 13059 ;;		_handleStackBackgroundTasks
 13060 ;; This function uses a non-reentrant model
 13061 ;;
 13062                           
 13063                           	psect	text43
 13064  004594                     __ptext43:
 13065                           	opt stack 0
 13066  004594                     _ethernetController_updateLinkStatus:
 13067                           	opt stack 21
 13068                           
 13069                           ;ENC424J600.c: 395: uint8_t temp;
 13070                           ;ENC424J600.c: 396: uint16_t temp16;
 13071                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 13072                           
 13073                           ; BSR set to: 0
 13074                           ;incstack = 0
 13075  004594  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 13076  004596  0100               	movlb	0	; () banked
 13077  004598  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13078  00459A  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 13079  00459C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13080  00459E  0E1B               	movlw	27
 13081  0045A0  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13082                           
 13083                           ;ENC424J600.c: 398: if (temp & 0x01) {
 13084  0045A4  0100               	movlb	0	; () banked
 13085  0045A6  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 13086  0045A8  D006               	goto	l195
 13087                           
 13088                           ; BSR set to: 0
 13089                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 13090  0045AA  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13091  0045AE  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13092  0045B2  0E01               	movlw	1
 13093  0045B4  D005               	goto	L2
 13094  0045B6                     l195:
 13095                           
 13096                           ; BSR set to: 0
 13097                           ;ENC424J600.c: 401: state->link = NO_LINK;
 13098                           
 13099                           ; BSR set to: 0
 13100  0045B6  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 13101  0045BA  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 13102  0045BE  0E00               	movlw	0
 13103  0045C0                     L2:
 13104  0045C0  6EDF               	movwf	indf2,c
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;ENC424J600.c: 402: }
 13108                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 13109                           
 13110                           ; BSR set to: 0
 13111  0045C2  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 13112  0045C4  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 13113  0045C6  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 13114  0045C8  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 13115  0045CA  0E1F               	movlw	31
 13116  0045CC  ECE5  F01B         	call	_enc424j600_readPHYRegister
 13117                           
 13118                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 13119  0045D0  0100               	movlb	0	; () banked
 13120  0045D2  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 13121  0045D4  D008               	goto	l197
 13122                           
 13123                           ; BSR set to: 0
 13124                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 13125  0045D6  EE20 F001          	lfsr	2,1
 13126  0045DA  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13127  0045DC  26D9               	addwf	fsr2l,f,c
 13128  0045DE  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13129  0045E0  22DA               	addwfc	fsr2h,f,c
 13130  0045E2  0E01               	movlw	1
 13131  0045E4  D007               	goto	L3
 13132  0045E6                     l197:
 13133                           
 13134                           ; BSR set to: 0
 13135                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 13136                           
 13137                           ; BSR set to: 0
 13138  0045E6  EE20 F001          	lfsr	2,1
 13139  0045EA  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13140  0045EC  26D9               	addwf	fsr2l,f,c
 13141  0045EE  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13142  0045F0  22DA               	addwfc	fsr2h,f,c
 13143  0045F2  0E00               	movlw	0
 13144  0045F4                     L3:
 13145  0045F4  6EDF               	movwf	indf2,c
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;ENC424J600.c: 410: }
 13149                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 13150                           
 13151                           ; BSR set to: 0
 13152  0045F6  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 13153  0045F8  D009               	goto	l199
 13154                           
 13155                           ; BSR set to: 0
 13156                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 13157  0045FA  EE20 F002          	lfsr	2,2
 13158  0045FE  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13159  004600  26D9               	addwf	fsr2l,f,c
 13160  004602  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13161  004604  22DA               	addwfc	fsr2h,f,c
 13162  004606  0E01               	movlw	1
 13163  004608  6EDF               	movwf	indf2,c
 13164                           
 13165                           ;ENC424J600.c: 414: } else {
 13166  00460A  0012               	return	
 13167  00460C                     l199:
 13168                           
 13169                           ; BSR set to: 0
 13170                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 13171                           
 13172                           ; BSR set to: 0
 13173  00460C  EE20 F002          	lfsr	2,2
 13174  004610  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 13175  004612  26D9               	addwf	fsr2l,f,c
 13176  004614  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 13177  004616  22DA               	addwfc	fsr2h,f,c
 13178  004618  0E00               	movlw	0
 13179  00461A  6EDF               	movwf	indf2,c
 13180  00461C  0012               	return	
 13181  00461E                     __end_of_ethernetController_updateLinkStatus:
 13182                           	opt stack 0
 13183                           tblptru	equ	0xFF8
 13184                           tblptrh	equ	0xFF7
 13185                           tblptrl	equ	0xFF6
 13186                           tablat	equ	0xFF5
 13187                           prodh	equ	0xFF4
 13188                           prodl	equ	0xFF3
 13189                           intcon	equ	0xFF2
 13190                           intcon3	equ	0xFF0
 13191                           indf0	equ	0xFEF
 13192                           postinc0	equ	0xFEE
 13193                           plusw0	equ	0xFEB
 13194                           fsr0h	equ	0xFEA
 13195                           fsr0l	equ	0xFE9
 13196                           wreg	equ	0xFE8
 13197                           indf1	equ	0xFE7
 13198                           postinc1	equ	0xFE6
 13199                           postdec1	equ	0xFE5
 13200                           plusw1	equ	0xFE3
 13201                           fsr1h	equ	0xFE2
 13202                           fsr1l	equ	0xFE1
 13203                           indf2	equ	0xFDF
 13204                           postinc2	equ	0xFDE
 13205                           postdec2	equ	0xFDD
 13206                           plusw2	equ	0xFDB
 13207                           fsr2h	equ	0xFDA
 13208                           fsr2l	equ	0xFD9
 13209                           status	equ	0xFD8
 13210                           
 13211 ;; *************** function _enc424j600_readPHYRegister *****************
 13212 ;; Defined at:
 13213 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 13214 ;; Parameters:    Size  Location     Type
 13215 ;;  addr            1    wreg     unsigned char 
 13216 ;;  data            2   14[BANK0 ] PTR unsigned int 
 13217 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 13218 ;; Auto vars:     Size  Location     Type
 13219 ;;  addr            1   22[BANK0 ] unsigned char 
 13220 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 13221 ;;  temp            1   31[BANK0 ] unsigned char 
 13222 ;;  highByte        1   30[BANK0 ] unsigned char 
 13223 ;;  lowByte         1   29[BANK0 ] unsigned char 
 13224 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 13225 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 13226 ;; Return value:  Size  Location     Type
 13227 ;;                  1    wreg      void 
 13228 ;; Registers used:
 13229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13230 ;; Tracked objects:
 13231 ;;		On entry : 0/0
 13232 ;;		On exit  : 0/0
 13233 ;;		Unchanged: 0/0
 13234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13235 ;;      Params:         0       2       0       0       0       0       0       0       0
 13236 ;;      Locals:         0      10       0       0       0       0       0       0       0
 13237 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13238 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13239 ;;Total ram usage:       18 bytes
 13240 ;; Hardware stack levels used:    1
 13241 ;; Hardware stack levels required when called:    7
 13242 ;; This function calls:
 13243 ;;		_enc424j600_readControlRegisterUnbanked
 13244 ;;		_enc424j600_writeControlRegisterUnbanked
 13245 ;; This function is called by:
 13246 ;;		_ethernetController_updateLinkStatus
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250                           	psect	text44
 13251  0037CA                     __ptext44:
 13252                           	opt stack 0
 13253  0037CA                     _enc424j600_readPHYRegister:
 13254                           	opt stack 21
 13255                           
 13256                           ; BSR set to: 0
 13257                           ;incstack = 0
 13258                           ;enc424j600_readPHYRegister@addr stored from wreg
 13259  0037CA  0100               	movlb	0	; () banked
 13260  0037CC  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 13261                           
 13262                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 13263  0037CE  0100               	movlb	0	; () banked
 13264  0037D0  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 13265  0037D2  0B1F               	andlw	31
 13266  0037D4  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 13270  0037D6  0E01               	movlw	1
 13271  0037D8  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 13272                           
 13273                           ; BSR set to: 0
 13274                           ;ENC424J600.c: 542: uint8_t temp;
 13275                           ;ENC424J600.c: 543: uint8_t lowByte;
 13276                           ;ENC424J600.c: 544: uint8_t highByte;
 13277                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 13278  0037DA  0E00               	movlw	0
 13279  0037DC  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 13280  0037DE  0E00               	movlw	0
 13281  0037E0  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 13282  0037E2  0E00               	movlw	0
 13283  0037E4  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 13284  0037E6  0E00               	movlw	0
 13285  0037E8  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 13286                           
 13287                           ; BSR set to: 0
 13288                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 13289  0037EA  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 13290  0037EC  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13291  0037EE  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 13292  0037F0  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13293  0037F2  0E54               	movlw	84
 13294  0037F4  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13295                           
 13296                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 13297  0037F8  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 13298  0037FA  0100               	movlb	0	; () banked
 13299  0037FC  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13300  0037FE  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 13301  003800  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13302  003802  0E55               	movlw	85
 13303  003804  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13304                           
 13305                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13306  003808  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13307  00380A  0100               	movlb	0	; () banked
 13308  00380C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13309  00380E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13310  003810  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13311  003812  0E52               	movlw	82
 13312  003814  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13313                           
 13314                           ;ENC424J600.c: 552: temp |= 0x01;
 13315  003818  0100               	movlb	0	; () banked
 13316  00381A  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13317                           
 13318                           ; BSR set to: 0
 13319                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13320  00381C  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13321  00381E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13322  003820  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13323  003822  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13324  003824  0E52               	movlw	82
 13325  003826  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13326                           
 13327                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 13328  00382A  0E45               	movlw	69
 13329  00382C                     u12837:
 13330  00382C  2EE8               	decfsz	wreg,f,c
 13331  00382E  D7FE               	bra	u12837
 13332  003830  F000               	nop	
 13333  003832                     
 13334                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 13335  003832  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13336  003834  0100               	movlb	0	; () banked
 13337  003836  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13338  003838  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13339  00383A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13340  00383C  0E6A               	movlw	106
 13341  00383E  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13342                           
 13343                           ;ENC424J600.c: 559: timeoutCounter++;
 13344  003842  0E01               	movlw	1
 13345  003844  0100               	movlb	0	; () banked
 13346  003846  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 13347  003848  0E00               	movlw	0
 13348  00384A  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 13349  00384C  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 13350  00384E  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 13351                           
 13352                           ; BSR set to: 0
 13353                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 13354  003850  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 13355  003852  D008               	goto	u11390
 13356                           
 13357                           ; BSR set to: 0
 13358  003854  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13359  003856  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13360  003858  E105               	bnz	l9645
 13361  00385A  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13362  00385C  0E0F               	movlw	15
 13363  00385E  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13364  003860  A0D8               	btfss	status,0,c
 13365  003862  D7E7               	goto	l258
 13366  003864                     u11390:
 13367  003864                     l9645:
 13368                           
 13369                           ; BSR set to: 0
 13370                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 13371  003864  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 13372  003866  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 13373  003868  E140               	bnz	l263
 13374  00386A  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 13375  00386C  0E0F               	movlw	15
 13376  00386E  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 13377  003870  B0D8               	btfsc	status,0,c
 13378  003872  0012               	return	
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 13382                           
 13383                           ; BSR set to: 0
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;ENC424J600.c: 562: return;
 13387  003874  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13388  003876  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13389  003878  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13390  00387A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13391  00387C  0E52               	movlw	82
 13392  00387E  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13393                           
 13394                           ;ENC424J600.c: 566: temp &= ~0x01;
 13395  003882  0100               	movlb	0	; () banked
 13396  003884  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 13400  003886  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 13401  003888  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13402  00388A  0E00               	movlw	high enc424j600_readPHYRegister@temp
 13403  00388C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13404  00388E  0E52               	movlw	82
 13405  003890  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13406                           
 13407                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 13408  003894  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 13409  003896  0100               	movlb	0	; () banked
 13410  003898  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13411  00389A  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 13412  00389C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13413  00389E  0E68               	movlw	104
 13414  0038A0  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13415                           
 13416                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 13417  0038A4  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 13418  0038A6  0100               	movlb	0	; () banked
 13419  0038A8  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13420  0038AA  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 13421  0038AC  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13422  0038AE  0E69               	movlw	105
 13423  0038B0  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13424                           
 13425                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 13426  0038B4  0E00               	movlw	0
 13427  0038B6  0100               	movlb	0	; () banked
 13428  0038B8  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 13429  0038BA  0EFF               	movlw	255
 13430  0038BC  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 13431  0038BE  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 13432  0038C0  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 13433  0038C2  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 13434  0038C4  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 13435  0038C6  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 13436  0038C8  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 13437  0038CA  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 13438  0038CC  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 13439  0038CE  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 13440  0038D0  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 13441  0038D2  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 13442  0038D4  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 13443  0038D6  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 13444  0038D8  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 13445  0038DA  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 13446  0038DE  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 13447  0038E2  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 13448  0038E6  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 13449  0038EA                     l263:
 13450                           
 13451                           ; BSR set to: 0
 13452  0038EA  0012               	return		;funcret
 13453  0038EC                     __end_of_enc424j600_readPHYRegister:
 13454                           	opt stack 0
 13455                           tblptru	equ	0xFF8
 13456                           tblptrh	equ	0xFF7
 13457                           tblptrl	equ	0xFF6
 13458                           tablat	equ	0xFF5
 13459                           prodh	equ	0xFF4
 13460                           prodl	equ	0xFF3
 13461                           intcon	equ	0xFF2
 13462                           intcon3	equ	0xFF0
 13463                           indf0	equ	0xFEF
 13464                           postinc0	equ	0xFEE
 13465                           plusw0	equ	0xFEB
 13466                           fsr0h	equ	0xFEA
 13467                           fsr0l	equ	0xFE9
 13468                           wreg	equ	0xFE8
 13469                           indf1	equ	0xFE7
 13470                           postinc1	equ	0xFE6
 13471                           postdec1	equ	0xFE5
 13472                           plusw1	equ	0xFE3
 13473                           fsr1h	equ	0xFE2
 13474                           fsr1l	equ	0xFE1
 13475                           indf2	equ	0xFDF
 13476                           postinc2	equ	0xFDE
 13477                           postdec2	equ	0xFDD
 13478                           plusw2	equ	0xFDB
 13479                           fsr2h	equ	0xFDA
 13480                           fsr2l	equ	0xFD9
 13481                           status	equ	0xFD8
 13482                           
 13483 ;; *************** function _ethernetController_setLEDConfig *****************
 13484 ;; Defined at:
 13485 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 13486 ;; Parameters:    Size  Location     Type
 13487 ;;  LED             1    wreg     enum E5569
 13488 ;;  conf            1   14[BANK0 ] enum E5573
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;  LED             1   15[BANK0 ] enum E5569
 13491 ;;  data            1   16[BANK0 ] unsigned char 
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  1    wreg      void 
 13494 ;; Registers used:
 13495 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13496 ;; Tracked objects:
 13497 ;;		On entry : 0/0
 13498 ;;		On exit  : 0/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13501 ;;      Params:         0       1       0       0       0       0       0       0       0
 13502 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13503 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13504 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13505 ;;Total ram usage:        3 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; Hardware stack levels required when called:    7
 13508 ;; This function calls:
 13509 ;;		_enc424j600_readControlRegisterUnbanked
 13510 ;;		_enc424j600_writeControlRegisterUnbanked
 13511 ;; This function is called by:
 13512 ;;		_handleStackBackgroundTasks
 13513 ;;		_main
 13514 ;; This function uses a non-reentrant model
 13515 ;;
 13516                           
 13517                           	psect	text45
 13518  004506                     __ptext45:
 13519                           	opt stack 0
 13520  004506                     _ethernetController_setLEDConfig:
 13521                           	opt stack 22
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;incstack = 0
 13525                           ;ethernetController_setLEDConfig@LED stored from wreg
 13526  004506  0100               	movlb	0	; () banked
 13527  004508  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 13528                           
 13529                           ;ENC424J600.c: 420: uint8_t data;
 13530                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 13531  00450A  0E70               	movlw	low ethernetController_setLEDConfig@data
 13532  00450C  0100               	movlb	0	; () banked
 13533  00450E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13534  004510  0E00               	movlw	high ethernetController_setLEDConfig@data
 13535  004512  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13536  004514  0E75               	movlw	117
 13537  004516  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 13538                           
 13539                           ;ENC424J600.c: 422: if (LED == LEDB) {
 13540  00451A  0100               	movlb	0	; () banked
 13541  00451C  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13542  00451E  B4D8               	btfsc	status,2,c
 13543  004520  D00B               	goto	l205
 13544  004522  D015               	goto	l204
 13545  004524                     
 13546                           ; BSR set to: 0
 13547                           ;ENC424J600.c: 427: data &= ~0x0f;
 13548                           
 13549                           ; BSR set to: 0
 13550                           
 13551                           ;ENC424J600.c: 426: case LED_OFF:
 13552                           
 13553                           ; BSR set to: 0
 13554  004524  0EF0               	movlw	240
 13555  004526  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;ENC424J600.c: 428: data |= 0x01;
 13559  004528  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 13560                           
 13561                           ;ENC424J600.c: 429: break;
 13562  00452A  D02C               	goto	l216
 13563  00452C                     
 13564                           ; BSR set to: 0
 13565                           ;ENC424J600.c: 431: data &= ~0x0f;
 13566                           
 13567                           ; BSR set to: 0
 13568  00452C  0EF0               	movlw	240
 13569  00452E  D018               	goto	L4
 13570  004530                     
 13571                           ; BSR set to: 0
 13572                           ;ENC424J600.c: 434: data &= ~0x0f;
 13573                           
 13574                           ; BSR set to: 0
 13575  004530  0EF0               	movlw	240
 13576  004532  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13577                           
 13578                           ;ENC424J600.c: 435: data |= 0x06;
 13579  004534  0E06               	movlw	6
 13580  004536  D019               	goto	L5
 13581  004538                     l205:
 13582                           
 13583                           ; BSR set to: 0
 13584                           
 13585                           ; BSR set to: 0
 13586  004538  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13587                           
 13588                           ; Switch size 1, requested type "space"
 13589                           ; Number of cases is 3, Range of values is 0 to 2
 13590                           ; switch strategies available:
 13591                           ; Name         Instructions Cycles
 13592                           ; simple_byte           10     6 (average)
 13593                           ;	Chosen strategy is simple_byte
 13594  00453A  0A00               	xorlw	0	; case 0
 13595  00453C  B4D8               	btfsc	status,2,c
 13596  00453E  D7F6               	goto	l209
 13597  004540  0A01               	xorlw	1	; case 1
 13598  004542  B4D8               	btfsc	status,2,c
 13599  004544  D7EF               	goto	l206
 13600  004546  0A03               	xorlw	3	; case 2
 13601  004548  B4D8               	btfsc	status,2,c
 13602  00454A  D7F2               	goto	l210
 13603  00454C  D7EB               	goto	l206
 13604  00454E                     l204:
 13605                           
 13606                           ; BSR set to: 0
 13607                           
 13608                           ; BSR set to: 0
 13609  00454E  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13610  004550  B4D8               	btfsc	status,2,c
 13611  004552  D00D               	goto	l213
 13612  004554  D017               	goto	l216
 13613  004556                     
 13614                           ; BSR set to: 0
 13615                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 13616                           
 13617                           ; BSR set to: 0
 13618                           
 13619                           ;ENC424J600.c: 441: case LED_OFF:
 13620                           
 13621                           ; BSR set to: 0
 13622  004556  0E0F               	movlw	15
 13623  004558  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 13627  00455A  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 13628                           
 13629                           ;ENC424J600.c: 444: break;
 13630  00455C  D013               	goto	l216
 13631  00455E                     
 13632                           ; BSR set to: 0
 13633                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 13634                           
 13635                           ; BSR set to: 0
 13636  00455E  0E0F               	movlw	15
 13637  004560                     L4:
 13638  004560  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13639                           
 13640                           ;ENC424J600.c: 447: break;
 13641  004562  D010               	goto	l216
 13642  004564                     
 13643                           ; BSR set to: 0
 13644                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 13645                           
 13646                           ; BSR set to: 0
 13647  004564  0E0F               	movlw	15
 13648  004566  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13649                           
 13650                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 13651  004568  0E60               	movlw	96
 13652  00456A                     L5:
 13653  00456A  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;ENC424J600.c: 452: }
 13657                           
 13658                           ;ENC424J600.c: 451: break;
 13659  00456C  D00B               	goto	l216
 13660  00456E                     l213:
 13661                           
 13662                           ; BSR set to: 0
 13663                           
 13664                           ; BSR set to: 0
 13665  00456E  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13666                           
 13667                           ; Switch size 1, requested type "space"
 13668                           ; Number of cases is 3, Range of values is 0 to 2
 13669                           ; switch strategies available:
 13670                           ; Name         Instructions Cycles
 13671                           ; simple_byte           10     6 (average)
 13672                           ;	Chosen strategy is simple_byte
 13673  004570  0A00               	xorlw	0	; case 0
 13674  004572  B4D8               	btfsc	status,2,c
 13675  004574  D7F4               	goto	l217
 13676  004576  0A01               	xorlw	1	; case 1
 13677  004578  B4D8               	btfsc	status,2,c
 13678  00457A  D7ED               	goto	l214
 13679  00457C  0A03               	xorlw	3	; case 2
 13680  00457E  B4D8               	btfsc	status,2,c
 13681  004580  D7F1               	goto	l218
 13682  004582  D7E9               	goto	l214
 13683  004584                     l216:
 13684                           
 13685                           ; BSR set to: 0
 13686                           ;ENC424J600.c: 453: }
 13687                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 13688                           
 13689                           ; BSR set to: 0
 13690                           
 13691                           ; BSR set to: 0
 13692                           
 13693                           ; BSR set to: 0
 13694  004584  0E70               	movlw	low ethernetController_setLEDConfig@data
 13695  004586  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13696  004588  0E00               	movlw	high ethernetController_setLEDConfig@data
 13697  00458A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13698  00458C  0E75               	movlw	117
 13699  00458E  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 13700  004592  0012               	return		;funcret
 13701  004594                     __end_of_ethernetController_setLEDConfig:
 13702                           	opt stack 0
 13703                           tblptru	equ	0xFF8
 13704                           tblptrh	equ	0xFF7
 13705                           tblptrl	equ	0xFF6
 13706                           tablat	equ	0xFF5
 13707                           prodh	equ	0xFF4
 13708                           prodl	equ	0xFF3
 13709                           intcon	equ	0xFF2
 13710                           intcon3	equ	0xFF0
 13711                           indf0	equ	0xFEF
 13712                           postinc0	equ	0xFEE
 13713                           plusw0	equ	0xFEB
 13714                           fsr0h	equ	0xFEA
 13715                           fsr0l	equ	0xFE9
 13716                           wreg	equ	0xFE8
 13717                           indf1	equ	0xFE7
 13718                           postinc1	equ	0xFE6
 13719                           postdec1	equ	0xFE5
 13720                           plusw1	equ	0xFE3
 13721                           fsr1h	equ	0xFE2
 13722                           fsr1l	equ	0xFE1
 13723                           indf2	equ	0xFDF
 13724                           postinc2	equ	0xFDE
 13725                           postdec2	equ	0xFDD
 13726                           plusw2	equ	0xFDB
 13727                           fsr2h	equ	0xFDA
 13728                           fsr2l	equ	0xFD9
 13729                           status	equ	0xFD8
 13730                           
 13731 ;; *************** function _ethernetController_pollInterruptFlags *****************
 13732 ;; Defined at:
 13733 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 13734 ;; Parameters:    Size  Location     Type
 13735 ;;		None
 13736 ;; Auto vars:     Size  Location     Type
 13737 ;;  reg             2   32[BANK0 ] unsigned int 
 13738 ;;  flags           2   30[BANK0 ] struct interruptFlags
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  2   24[BANK0 ] struct interruptFlags
 13741 ;; Registers used:
 13742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13748 ;;      Params:         0       2       0       0       0       0       0       0       0
 13749 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13750 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13751 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13752 ;;Total ram usage:       10 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; Hardware stack levels required when called:    8
 13755 ;; This function calls:
 13756 ;;		_enc424j600_getInterruptFlags
 13757 ;; This function is called by:
 13758 ;;		_handleStackBackgroundTasks
 13759 ;; This function uses a non-reentrant model
 13760 ;;
 13761                           
 13762                           	psect	text46
 13763  00340E                     __ptext46:
 13764                           	opt stack 0
 13765  00340E                     _ethernetController_pollInterruptFlags:
 13766                           	opt stack 21
 13767                           
 13768                           ;ENC424J600.c: 313: interruptFlags_t flags;
 13769                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 13770                           
 13771                           ;incstack = 0
 13772  00340E  ECFC  F027         	call	_enc424j600_getInterruptFlags	;wreg free
 13773  003412  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 13774  003416  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 13775                           
 13776                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 13777  00341A  0100               	movlb	0	; () banked
 13778  00341C  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 13779  00341E  D003               	goto	u11750
 13780  003420  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13781  003422  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13782  003424  D002               	goto	u11768
 13783  003426                     u11750:
 13784  003426  0100               	movlb	0	; () banked
 13785  003428  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13786  00342A                     u11768:
 13787  00342A  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13788  00342C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13789  00342E  0BFE               	andlw	-2
 13790  003430  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13791  003432  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13792                           
 13793                           ; BSR set to: 0
 13794                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 13795  003434  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 13796  003436  D003               	goto	u11770
 13797  003438  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13798  00343A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13799  00343C  D002               	goto	u11788
 13800  00343E                     u11770:
 13801  00343E  0100               	movlb	0	; () banked
 13802  003440  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13803  003442                     u11788:
 13804  003442  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13805  003444  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13806  003446  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13807  003448  0BFD               	andlw	-3
 13808  00344A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13809  00344C  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 13813  00344E  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 13814  003450  D003               	goto	u11790
 13815  003452  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13816  003454  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13817  003456  D002               	goto	u11808
 13818  003458                     u11790:
 13819  003458  0100               	movlb	0	; () banked
 13820  00345A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13821  00345C                     u11808:
 13822  00345C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13823  00345E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13824  003460  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13825  003462  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13826  003464  0BFB               	andlw	-5
 13827  003466  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13828  003468  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 13832  00346A  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 13833  00346C  D003               	goto	u11810
 13834  00346E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13835  003470  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13836  003472  D002               	goto	u11828
 13837  003474                     u11810:
 13838  003474  0100               	movlb	0	; () banked
 13839  003476  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13840  003478                     u11828:
 13841  003478  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13842  00347A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13843  00347C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13844  00347E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13845  003480  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13846  003482  0BF7               	andlw	-9
 13847  003484  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13848  003486  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13849                           
 13850                           ; BSR set to: 0
 13851                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 13852  003488  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 13853  00348A  D003               	goto	u11830
 13854  00348C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13855  00348E  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13856  003490  D002               	goto	u11848
 13857  003492                     u11830:
 13858  003492  0100               	movlb	0	; () banked
 13859  003494  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13860  003496                     u11848:
 13861  003496  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13862  003498  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13863  00349A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13864  00349C  0BEF               	andlw	-17
 13865  00349E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13866  0034A0  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13867                           
 13868                           ; BSR set to: 0
 13869                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 13870  0034A2  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 13871  0034A4  D003               	goto	u11850
 13872  0034A6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13873  0034A8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13874  0034AA  D002               	goto	u11868
 13875  0034AC                     u11850:
 13876  0034AC  0100               	movlb	0	; () banked
 13877  0034AE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13878  0034B0                     u11868:
 13879  0034B0  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13880  0034B2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13881  0034B4  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13882  0034B6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13883  0034B8  0BDF               	andlw	-33
 13884  0034BA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13885  0034BC  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13886                           
 13887                           ; BSR set to: 0
 13888                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 13889  0034BE  A89E               	btfss	3998,4,c	;volatile
 13890  0034C0  D003               	goto	u11870
 13891  0034C2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13892  0034C4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13893  0034C6  D002               	goto	u11888
 13894  0034C8                     u11870:
 13895  0034C8  0100               	movlb	0	; () banked
 13896  0034CA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13897  0034CC                     u11888:
 13898  0034CC  0E01               	movlw	1
 13899  0034CE  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 13900  0034D0  0E00               	movlw	0
 13901  0034D2  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 13902  0034D4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13903  0034D6  D003               	goto	u11894
 13904  0034D8                     u11895:
 13905  0034D8  90D8               	bcf	status,0,c
 13906  0034DA  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13907  0034DC  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13908  0034DE                     u11894:
 13909  0034DE  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13910  0034E0  D7FB               	goto	u11895
 13911  0034E2  0100               	movlb	0	; () banked
 13912  0034E4  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 13913  0034E6  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13914  0034E8  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 13915  0034EA  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13916  0034EC  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 13917  0034EE  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 13918  0034F0  B4D8               	btfsc	status,2,c
 13919  0034F2  D003               	goto	u11900
 13920  0034F4  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13921  0034F6  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13922  0034F8  D002               	goto	u11918
 13923  0034FA                     u11900:
 13924  0034FA  0100               	movlb	0	; () banked
 13925  0034FC  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13926  0034FE                     u11918:
 13927  0034FE  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13928  003500  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13929  003502  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13930  003504  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13931  003506  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13932  003508  0BBF               	andlw	-65
 13933  00350A  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13934  00350C  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13935                           
 13936                           ; BSR set to: 0
 13937                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 13938  00350E  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 13939  003510  D003               	goto	u11920
 13940  003512  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13941  003514  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13942  003516  D002               	goto	u11938
 13943  003518                     u11920:
 13944  003518  0100               	movlb	0	; () banked
 13945  00351A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13946  00351C                     u11938:
 13947  00351C  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13948  00351E  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13949  003520  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13950  003522  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13951  003524  0B7F               	andlw	-129
 13952  003526  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13953  003528  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13954                           
 13955                           ; BSR set to: 0
 13956                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 13957  00352A  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 13958  00352C  D003               	goto	u11940
 13959  00352E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13960  003530  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13961  003532  D002               	goto	u11958
 13962  003534                     u11940:
 13963  003534  0100               	movlb	0	; () banked
 13964  003536  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13965  003538                     u11958:
 13966  003538  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13967  00353A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13968  00353C  0BFE               	andlw	-2
 13969  00353E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13970  003540  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13971                           
 13972                           ; BSR set to: 0
 13973                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 13974  003542  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 13975  003544  D003               	goto	u11960
 13976  003546  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13977  003548  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13978  00354A  D002               	goto	u11978
 13979  00354C                     u11960:
 13980  00354C  0100               	movlb	0	; () banked
 13981  00354E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13982  003550                     u11978:
 13983  003550  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13984  003552  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13985  003554  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13986  003556  0BFD               	andlw	-3
 13987  003558  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13988  00355A  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13989                           
 13990                           ; BSR set to: 0
 13991                           ;ENC424J600.c: 327: return flags;
 13992  00355C  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 13993  003560  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 13994  003564  0012               	return	
 13995  003566                     __end_of_ethernetController_pollInterruptFlags:
 13996                           	opt stack 0
 13997                           tblptru	equ	0xFF8
 13998                           tblptrh	equ	0xFF7
 13999                           tblptrl	equ	0xFF6
 14000                           tablat	equ	0xFF5
 14001                           prodh	equ	0xFF4
 14002                           prodl	equ	0xFF3
 14003                           intcon	equ	0xFF2
 14004                           intcon3	equ	0xFF0
 14005                           indf0	equ	0xFEF
 14006                           postinc0	equ	0xFEE
 14007                           plusw0	equ	0xFEB
 14008                           fsr0h	equ	0xFEA
 14009                           fsr0l	equ	0xFE9
 14010                           wreg	equ	0xFE8
 14011                           indf1	equ	0xFE7
 14012                           postinc1	equ	0xFE6
 14013                           postdec1	equ	0xFE5
 14014                           plusw1	equ	0xFE3
 14015                           fsr1h	equ	0xFE2
 14016                           fsr1l	equ	0xFE1
 14017                           indf2	equ	0xFDF
 14018                           postinc2	equ	0xFDE
 14019                           postdec2	equ	0xFDD
 14020                           plusw2	equ	0xFDB
 14021                           fsr2h	equ	0xFDA
 14022                           fsr2l	equ	0xFD9
 14023                           status	equ	0xFD8
 14024                           
 14025 ;; *************** function _enc424j600_getInterruptFlags *****************
 14026 ;; Defined at:
 14027 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 14028 ;; Parameters:    Size  Location     Type
 14029 ;;		None
 14030 ;; Auto vars:     Size  Location     Type
 14031 ;;  high            1   23[BANK0 ] unsigned char 
 14032 ;;  low             1   22[BANK0 ] unsigned char 
 14033 ;; Return value:  Size  Location     Type
 14034 ;;                  2   14[BANK0 ] unsigned int 
 14035 ;; Registers used:
 14036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14037 ;; Tracked objects:
 14038 ;;		On entry : 0/0
 14039 ;;		On exit  : 0/0
 14040 ;;		Unchanged: 0/0
 14041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14042 ;;      Params:         0       2       0       0       0       0       0       0       0
 14043 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14044 ;;      Temps:          0       6       0       0       0       0       0       0       0
 14045 ;;      Totals:         0      10       0       0       0       0       0       0       0
 14046 ;;Total ram usage:       10 bytes
 14047 ;; Hardware stack levels used:    1
 14048 ;; Hardware stack levels required when called:    7
 14049 ;; This function calls:
 14050 ;;		_enc424j600_readControlRegisterUnbanked
 14051 ;; This function is called by:
 14052 ;;		_ethernetController_pollInterruptFlags
 14053 ;; This function uses a non-reentrant model
 14054 ;;
 14055                           
 14056                           	psect	text47
 14057  004FF8                     __ptext47:
 14058                           	opt stack 0
 14059  004FF8                     _enc424j600_getInterruptFlags:
 14060                           	opt stack 21
 14061                           
 14062                           ;ENC424J600.c: 697: uint8_t low, high;
 14063                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 14064                           
 14065                           ; BSR set to: 0
 14066                           ;incstack = 0
 14067  004FF8  0E76               	movlw	low enc424j600_getInterruptFlags@low
 14068  004FFA  0100               	movlb	0	; () banked
 14069  004FFC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14070  004FFE  0E00               	movlw	high enc424j600_getInterruptFlags@low
 14071  005000  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14072  005002  0E1C               	movlw	28
 14073  005004  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 14074                           
 14075                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 14076  005008  0E77               	movlw	low enc424j600_getInterruptFlags@high
 14077  00500A  0100               	movlb	0	; () banked
 14078  00500C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14079  00500E  0E00               	movlw	high enc424j600_getInterruptFlags@high
 14080  005010  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14081  005012  0E1D               	movlw	29
 14082  005014  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 14083                           
 14084                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 14085  005018  0E00               	movlw	0
 14086  00501A  0100               	movlb	0	; () banked
 14087  00501C  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 14088  00501E  0EFF               	movlw	255
 14089  005020  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 14090  005022  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 14091  005024  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 14092  005026  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 14093  005028  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 14094  00502A  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 14095  00502C  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 14096  00502E  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 14097  005030  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 14098  005032  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 14099  005034  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 14100  005036  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 14101  005038  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 14102  00503A  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 14103  00503C  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 14104  00503E  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 14105  005040  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 14106  005042  0012               	return	
 14107  005044                     __end_of_enc424j600_getInterruptFlags:
 14108                           	opt stack 0
 14109                           tblptru	equ	0xFF8
 14110                           tblptrh	equ	0xFF7
 14111                           tblptrl	equ	0xFF6
 14112                           tablat	equ	0xFF5
 14113                           prodh	equ	0xFF4
 14114                           prodl	equ	0xFF3
 14115                           intcon	equ	0xFF2
 14116                           intcon3	equ	0xFF0
 14117                           indf0	equ	0xFEF
 14118                           postinc0	equ	0xFEE
 14119                           plusw0	equ	0xFEB
 14120                           fsr0h	equ	0xFEA
 14121                           fsr0l	equ	0xFE9
 14122                           wreg	equ	0xFE8
 14123                           indf1	equ	0xFE7
 14124                           postinc1	equ	0xFE6
 14125                           postdec1	equ	0xFE5
 14126                           plusw1	equ	0xFE3
 14127                           fsr1h	equ	0xFE2
 14128                           fsr1l	equ	0xFE1
 14129                           indf2	equ	0xFDF
 14130                           postinc2	equ	0xFDE
 14131                           postdec2	equ	0xFDD
 14132                           plusw2	equ	0xFDB
 14133                           fsr2h	equ	0xFDA
 14134                           fsr2l	equ	0xFD9
 14135                           status	equ	0xFD8
 14136                           
 14137 ;; *************** function _ethernetController_newPacketAvailable *****************
 14138 ;; Defined at:
 14139 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 14140 ;; Parameters:    Size  Location     Type
 14141 ;;		None
 14142 ;; Auto vars:     Size  Location     Type
 14143 ;;		None
 14144 ;; Return value:  Size  Location     Type
 14145 ;;                  1    wreg      unsigned char 
 14146 ;; Registers used:
 14147 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14148 ;; Tracked objects:
 14149 ;;		On entry : 0/0
 14150 ;;		On exit  : 0/0
 14151 ;;		Unchanged: 0/0
 14152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14153 ;;      Params:         0       0       0       0       0       0       0       0       0
 14154 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14156 ;;      Totals:         0       0       0       0       0       0       0       0       0
 14157 ;;Total ram usage:        0 bytes
 14158 ;; Hardware stack levels used:    1
 14159 ;; Hardware stack levels required when called:    8
 14160 ;; This function calls:
 14161 ;;		_enc424j600_getPacketCount
 14162 ;; This function is called by:
 14163 ;;		_handleStackBackgroundTasks
 14164 ;; This function uses a non-reentrant model
 14165 ;;
 14166                           
 14167                           	psect	text48
 14168  0056F2                     __ptext48:
 14169                           	opt stack 0
 14170  0056F2                     _ethernetController_newPacketAvailable:
 14171                           	opt stack 21
 14172                           
 14173                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;incstack = 0
 14177  0056F2  EC43  F02B         	call	_enc424j600_getPacketCount	;wreg free
 14178  0056F6  0900               	iorlw	0
 14179  0056F8  B4D8               	btfsc	status,2,c
 14180  0056FA  D002               	goto	u11980
 14181  0056FC  0E01               	movlw	1
 14182  0056FE  0012               	return	
 14183  005700                     u11980:
 14184  005700  0E00               	movlw	0
 14185  005702  0012               	return	
 14186  005704                     __end_of_ethernetController_newPacketAvailable:
 14187                           	opt stack 0
 14188                           tblptru	equ	0xFF8
 14189                           tblptrh	equ	0xFF7
 14190                           tblptrl	equ	0xFF6
 14191                           tablat	equ	0xFF5
 14192                           prodh	equ	0xFF4
 14193                           prodl	equ	0xFF3
 14194                           intcon	equ	0xFF2
 14195                           intcon3	equ	0xFF0
 14196                           indf0	equ	0xFEF
 14197                           postinc0	equ	0xFEE
 14198                           plusw0	equ	0xFEB
 14199                           fsr0h	equ	0xFEA
 14200                           fsr0l	equ	0xFE9
 14201                           wreg	equ	0xFE8
 14202                           indf1	equ	0xFE7
 14203                           postinc1	equ	0xFE6
 14204                           postdec1	equ	0xFE5
 14205                           plusw1	equ	0xFE3
 14206                           fsr1h	equ	0xFE2
 14207                           fsr1l	equ	0xFE1
 14208                           indf2	equ	0xFDF
 14209                           postinc2	equ	0xFDE
 14210                           postdec2	equ	0xFDD
 14211                           plusw2	equ	0xFDB
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _enc424j600_getPacketCount *****************
 14217 ;; Defined at:
 14218 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;		None
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;  lowByte         1   14[BANK0 ] unsigned char 
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      unsigned char 
 14225 ;; Registers used:
 14226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14232 ;;      Params:         0       0       0       0       0       0       0       0       0
 14233 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14235 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14236 ;;Total ram usage:        1 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:    7
 14239 ;; This function calls:
 14240 ;;		_enc424j600_readControlRegisterUnbanked
 14241 ;; This function is called by:
 14242 ;;		_ethernetController_newPacketAvailable
 14243 ;;		_ethernetController_getCurrentPacketCount
 14244 ;; This function uses a non-reentrant model
 14245 ;;
 14246                           
 14247                           	psect	text49
 14248  005686                     __ptext49:
 14249                           	opt stack 0
 14250  005686                     _enc424j600_getPacketCount:
 14251                           	opt stack 21
 14252                           
 14253                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 14254                           
 14255                           ;incstack = 0
 14256  005686  0E00               	movlw	0
 14257  005688  0100               	movlb	0	; () banked
 14258  00568A  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 14259                           
 14260                           ; BSR set to: 0
 14261                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 14262  00568C  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 14263  00568E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14264  005690  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 14265  005692  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14266  005694  0E1A               	movlw	26
 14267  005696  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 14268                           
 14269                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 14270  00569A  0100               	movlb	0	; () banked
 14271  00569C  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 14272  00569E  0012               	return	
 14273  0056A0                     __end_of_enc424j600_getPacketCount:
 14274                           	opt stack 0
 14275                           tblptru	equ	0xFF8
 14276                           tblptrh	equ	0xFF7
 14277                           tblptrl	equ	0xFF6
 14278                           tablat	equ	0xFF5
 14279                           prodh	equ	0xFF4
 14280                           prodl	equ	0xFF3
 14281                           intcon	equ	0xFF2
 14282                           intcon3	equ	0xFF0
 14283                           indf0	equ	0xFEF
 14284                           postinc0	equ	0xFEE
 14285                           plusw0	equ	0xFEB
 14286                           fsr0h	equ	0xFEA
 14287                           fsr0l	equ	0xFE9
 14288                           wreg	equ	0xFE8
 14289                           indf1	equ	0xFE7
 14290                           postinc1	equ	0xFE6
 14291                           postdec1	equ	0xFE5
 14292                           plusw1	equ	0xFE3
 14293                           fsr1h	equ	0xFE2
 14294                           fsr1l	equ	0xFE1
 14295                           indf2	equ	0xFDF
 14296                           postinc2	equ	0xFDE
 14297                           postdec2	equ	0xFDD
 14298                           plusw2	equ	0xFDB
 14299                           fsr2h	equ	0xFDA
 14300                           fsr2l	equ	0xFD9
 14301                           status	equ	0xFD8
 14302                           
 14303 ;; *************** function _ethernetController_clearInterruptFlag *****************
 14304 ;; Defined at:
 14305 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 14306 ;; Parameters:    Size  Location     Type
 14307 ;;  flag            1    wreg     unsigned char 
 14308 ;; Auto vars:     Size  Location     Type
 14309 ;;  flag            1   18[BANK0 ] unsigned char 
 14310 ;; Return value:  Size  Location     Type
 14311 ;;                  1    wreg      void 
 14312 ;; Registers used:
 14313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14314 ;; Tracked objects:
 14315 ;;		On entry : 0/0
 14316 ;;		On exit  : 0/0
 14317 ;;		Unchanged: 0/0
 14318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14319 ;;      Params:         0       0       0       0       0       0       0       0       0
 14320 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14321 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14322 ;;      Totals:         0       1       0       0       0       0       0       0       0
 14323 ;;Total ram usage:        1 bytes
 14324 ;; Hardware stack levels used:    1
 14325 ;; Hardware stack levels required when called:    8
 14326 ;; This function calls:
 14327 ;;		_enc424j600_clearInterruptFlag
 14328 ;; This function is called by:
 14329 ;;		_handleStackBackgroundTasks
 14330 ;; This function uses a non-reentrant model
 14331 ;;
 14332                           
 14333                           	psect	text50
 14334  005754                     __ptext50:
 14335                           	opt stack 0
 14336  005754                     _ethernetController_clearInterruptFlag:
 14337                           	opt stack 21
 14338                           
 14339                           ; BSR set to: 0
 14340                           ;incstack = 0
 14341                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 14342  005754  0100               	movlb	0	; () banked
 14343  005756  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 14344                           
 14345                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 14346  005758  0100               	movlb	0	; () banked
 14347  00575A  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 14348  00575C  EC0F  F023         	call	_enc424j600_clearInterruptFlag
 14349  005760  0012               	return		;funcret
 14350  005762                     __end_of_ethernetController_clearInterruptFlag:
 14351                           	opt stack 0
 14352                           tblptru	equ	0xFF8
 14353                           tblptrh	equ	0xFF7
 14354                           tblptrl	equ	0xFF6
 14355                           tablat	equ	0xFF5
 14356                           prodh	equ	0xFF4
 14357                           prodl	equ	0xFF3
 14358                           intcon	equ	0xFF2
 14359                           intcon3	equ	0xFF0
 14360                           indf0	equ	0xFEF
 14361                           postinc0	equ	0xFEE
 14362                           plusw0	equ	0xFEB
 14363                           fsr0h	equ	0xFEA
 14364                           fsr0l	equ	0xFE9
 14365                           wreg	equ	0xFE8
 14366                           indf1	equ	0xFE7
 14367                           postinc1	equ	0xFE6
 14368                           postdec1	equ	0xFE5
 14369                           plusw1	equ	0xFE3
 14370                           fsr1h	equ	0xFE2
 14371                           fsr1l	equ	0xFE1
 14372                           indf2	equ	0xFDF
 14373                           postinc2	equ	0xFDE
 14374                           postdec2	equ	0xFDD
 14375                           plusw2	equ	0xFDB
 14376                           fsr2h	equ	0xFDA
 14377                           fsr2l	equ	0xFD9
 14378                           status	equ	0xFD8
 14379                           
 14380 ;; *************** function _enc424j600_clearInterruptFlag *****************
 14381 ;; Defined at:
 14382 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 14383 ;; Parameters:    Size  Location     Type
 14384 ;;  flag            1    wreg     unsigned char 
 14385 ;; Auto vars:     Size  Location     Type
 14386 ;;  flag            1   16[BANK0 ] unsigned char 
 14387 ;;  temp            1   17[BANK0 ] unsigned char 
 14388 ;; Return value:  Size  Location     Type
 14389 ;;                  1    wreg      void 
 14390 ;; Registers used:
 14391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14397 ;;      Params:         0       0       0       0       0       0       0       0       0
 14398 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14399 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14400 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14401 ;;Total ram usage:        4 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    7
 14404 ;; This function calls:
 14405 ;;		_enc424j600_readControlRegisterUnbanked
 14406 ;;		_enc424j600_writeControlRegisterUnbanked
 14407 ;; This function is called by:
 14408 ;;		_ethernetController_clearInterruptFlag
 14409 ;; This function uses a non-reentrant model
 14410 ;;
 14411                           
 14412                           	psect	text51
 14413  00461E                     __ptext51:
 14414                           	opt stack 0
 14415  00461E                     _enc424j600_clearInterruptFlag:
 14416                           	opt stack 21
 14417                           
 14418                           ;incstack = 0
 14419                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 14420  00461E  0100               	movlb	0	; () banked
 14421  004620  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 14422                           
 14423                           ;ENC424J600.c: 704: uint8_t temp;
 14424                           ;ENC424J600.c: 705: if (flag < 8) {
 14425  004622  0E08               	movlw	8
 14426  004624  0100               	movlb	0	; () banked
 14427  004626  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 14428  004628  D01E               	goto	l317
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 14432  00462A  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14433  00462C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14434  00462E  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14435  004630  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14436  004632  0E1C               	movlw	28
 14437  004634  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 14438                           
 14439                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 14440  004638  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14441  00463C  0E01               	movlw	1
 14442  00463E  0100               	movlb	0	; () banked
 14443  004640  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14444  004642  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14445  004644  D002               	goto	u11364
 14446  004646                     u11365:
 14447  004646  90D8               	bcf	status,0,c
 14448  004648  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14449  00464A                     u11364:
 14450  00464A  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14451  00464C  D7FC               	goto	u11365
 14452  00464E  0100               	movlb	0	; () banked
 14453  004650  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14454  004652  0AFF               	xorlw	255
 14455  004654  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 14459  004656  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14460  004658  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14461  00465A  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14462  00465C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14463  00465E  0E1C               	movlw	28
 14464  004660  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14465                           
 14466                           ;ENC424J600.c: 709: } else {
 14467  004664  0012               	return	
 14468  004666                     l317:
 14469                           
 14470                           ;ENC424J600.c: 710: flag -= 8;
 14471  004666  0E08               	movlw	8
 14472  004668  0100               	movlb	0	; () banked
 14473  00466A  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 14474                           
 14475                           ; BSR set to: 0
 14476                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 14477  00466C  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14478  00466E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 14479  004670  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14480  004672  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 14481  004674  0E1D               	movlw	29
 14482  004676  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 14483                           
 14484                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 14485  00467A  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 14486  00467E  0E01               	movlw	1
 14487  004680  0100               	movlb	0	; () banked
 14488  004682  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 14489  004684  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14490  004686  D002               	goto	u11374
 14491  004688                     u11375:
 14492  004688  90D8               	bcf	status,0,c
 14493  00468A  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 14494  00468C                     u11374:
 14495  00468C  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 14496  00468E  D7FC               	goto	u11375
 14497  004690  0100               	movlb	0	; () banked
 14498  004692  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 14499  004694  0AFF               	xorlw	255
 14500  004696  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14501                           
 14502                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 14503  004698  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14504  00469A  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14505  00469C  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14506  00469E  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14507  0046A0  0E1D               	movlw	29
 14508  0046A2  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 14509  0046A6  0012               	return	
 14510  0046A8                     __end_of_enc424j600_clearInterruptFlag:
 14511                           	opt stack 0
 14512                           tblptru	equ	0xFF8
 14513                           tblptrh	equ	0xFF7
 14514                           tblptrl	equ	0xFF6
 14515                           tablat	equ	0xFF5
 14516                           prodh	equ	0xFF4
 14517                           prodl	equ	0xFF3
 14518                           intcon	equ	0xFF2
 14519                           intcon3	equ	0xFF0
 14520                           indf0	equ	0xFEF
 14521                           postinc0	equ	0xFEE
 14522                           plusw0	equ	0xFEB
 14523                           fsr0h	equ	0xFEA
 14524                           fsr0l	equ	0xFE9
 14525                           wreg	equ	0xFE8
 14526                           indf1	equ	0xFE7
 14527                           postinc1	equ	0xFE6
 14528                           postdec1	equ	0xFE5
 14529                           plusw1	equ	0xFE3
 14530                           fsr1h	equ	0xFE2
 14531                           fsr1l	equ	0xFE1
 14532                           indf2	equ	0xFDF
 14533                           postinc2	equ	0xFDE
 14534                           postdec2	equ	0xFDD
 14535                           plusw2	equ	0xFDB
 14536                           fsr2h	equ	0xFDA
 14537                           fsr2l	equ	0xFD9
 14538                           status	equ	0xFD8
 14539                           
 14540 ;; *************** function _arp_init *****************
 14541 ;; Defined at:
 14542 ;;		line 495 in file "src/stack/protocols/arp.c"
 14543 ;; Parameters:    Size  Location     Type
 14544 ;;		None
 14545 ;; Auto vars:     Size  Location     Type
 14546 ;;  i               1   92[BANK0 ] unsigned char 
 14547 ;;  mac             6   82[BANK0 ] struct macaddress
 14548 ;;  ip              4   88[BANK0 ] struct ipv4_address
 14549 ;; Return value:  Size  Location     Type
 14550 ;;                  1    wreg      void 
 14551 ;; Registers used:
 14552 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14553 ;; Tracked objects:
 14554 ;;		On entry : 0/0
 14555 ;;		On exit  : 0/0
 14556 ;;		Unchanged: 0/0
 14557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14558 ;;      Params:         0       0       0       0       0       0       0       0       0
 14559 ;;      Locals:         0      11       0       0       0       0       0       0       0
 14560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14561 ;;      Totals:         0      11       0       0       0       0       0       0       0
 14562 ;;Total ram usage:       11 bytes
 14563 ;; Hardware stack levels used:    1
 14564 ;; Hardware stack levels required when called:    7
 14565 ;; This function calls:
 14566 ;;		_UARTTransmitText
 14567 ;;		_arp_setNewEntry
 14568 ;;		_ipv4_setToAllZero
 14569 ;;		_mac_setAllZero
 14570 ;; This function is called by:
 14571 ;;		_handleStackBackgroundTasks
 14572 ;;		_stack_init
 14573 ;; This function uses a non-reentrant model
 14574 ;;
 14575                           
 14576                           	psect	text52
 14577  004990                     __ptext52:
 14578                           	opt stack 0
 14579  004990                     _arp_init:
 14580                           	opt stack 22
 14581                           
 14582                           ;arp.c: 496: macaddress_t mac;
 14583                           ;arp.c: 497: ipv4_address_t ip;
 14584                           ;arp.c: 498: mac_setAllZero(&mac);
 14585                           
 14586                           ;incstack = 0
 14587  004990  0EB2               	movlw	low arp_init@mac
 14588  004992  0100               	movlb	0	; () banked
 14589  004994  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 14590  004996  0E00               	movlw	high arp_init@mac
 14591  004998  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 14592  00499A  ECAB  F02A         	call	_mac_setAllZero	;wreg free
 14593                           
 14594                           ;arp.c: 499: ipv4_setToAllZero(&ip);
 14595  00499E  0EB8               	movlw	low arp_init@ip
 14596  0049A0  0100               	movlb	0	; () banked
 14597  0049A2  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 14598  0049A4  0E00               	movlw	high arp_init@ip
 14599  0049A6  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 14600  0049A8  EC98  F02A         	call	_ipv4_setToAllZero	;wreg free
 14601                           
 14602                           ;arp.c: 501: for (uint8_t i = 0; i < 8u; i++)
 14603  0049AC  0E00               	movlw	0
 14604  0049AE  0100               	movlb	0	; () banked
 14605  0049B0  6FBC               	movwf	arp_init@i& (0+255),b
 14606  0049B2                     l10165:
 14607                           
 14608                           ; BSR set to: 0
 14609  0049B2  0E07               	movlw	7
 14610  0049B4  65BC               	cpfsgt	arp_init@i& (0+255),b
 14611  0049B6  D001               	goto	l1070
 14612  0049B8  D01E               	goto	u12150
 14613  0049BA                     l1070:
 14614                           
 14615                           ; BSR set to: 0
 14616                           ;arp.c: 502: arp_setNewEntry(mac, ip, 0xffffffff);
 14617                           
 14618                           ; BSR set to: 0
 14619  0049BA  EE20  F0B2         	lfsr	2,arp_init@mac
 14620  0049BE  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 14621  0049C2  0E05               	movlw	5
 14622  0049C4                     u12141:
 14623  0049C4  CFDB FFEB          	movff	plusw2,plusw0
 14624  0049C8  06E8               	decf	wreg,f,c
 14625  0049CA  E2FC               	bc	u12141
 14626  0049CC  C0B8  F0A0         	movff	arp_init@ip,arp_setNewEntry@ip
 14627  0049D0  C0B9  F0A1         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
 14628  0049D4  C0BA  F0A2         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
 14629  0049D8  C0BB  F0A3         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
 14630  0049DC  0EFF               	movlw	255
 14631  0049DE  6FA4               	movwf	arp_setNewEntry@timestamp& (0+255),b
 14632  0049E0  0EFF               	movlw	255
 14633  0049E2  6FA5               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
 14634  0049E4  0EFF               	movlw	255
 14635  0049E6  6FA6               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
 14636  0049E8  0EFF               	movlw	255
 14637  0049EA  6FA7               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
 14638  0049EC  EC2A  F017         	call	_arp_setNewEntry	;wreg free
 14639  0049F0  0100               	movlb	0	; () banked
 14640  0049F2  2BBC               	incf	arp_init@i& (0+255),f,b
 14641  0049F4  D7DE               	goto	l10165
 14642  0049F6                     u12150:
 14643                           
 14644                           ; BSR set to: 0
 14645                           ;arp.c: 505: UARTTransmitText("[ARP]: Table was reset successfully.\n\r");
 14646                           
 14647                           ; BSR set to: 0
 14648  0049F6  0E8A               	movlw	low STR_94
 14649  0049F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14650  0049FA  0E7B               	movlw	high STR_94
 14651  0049FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14652  0049FE  EC06  F027         	call	_UARTTransmitText	;wreg free
 14653  004A02  0012               	return		;funcret
 14654  004A04                     __end_of_arp_init:
 14655                           	opt stack 0
 14656                           tblptru	equ	0xFF8
 14657                           tblptrh	equ	0xFF7
 14658                           tblptrl	equ	0xFF6
 14659                           tablat	equ	0xFF5
 14660                           prodh	equ	0xFF4
 14661                           prodl	equ	0xFF3
 14662                           intcon	equ	0xFF2
 14663                           intcon3	equ	0xFF0
 14664                           indf0	equ	0xFEF
 14665                           postinc0	equ	0xFEE
 14666                           plusw0	equ	0xFEB
 14667                           fsr0h	equ	0xFEA
 14668                           fsr0l	equ	0xFE9
 14669                           wreg	equ	0xFE8
 14670                           indf1	equ	0xFE7
 14671                           postinc1	equ	0xFE6
 14672                           postdec1	equ	0xFE5
 14673                           plusw1	equ	0xFE3
 14674                           fsr1h	equ	0xFE2
 14675                           fsr1l	equ	0xFE1
 14676                           indf2	equ	0xFDF
 14677                           postinc2	equ	0xFDE
 14678                           postdec2	equ	0xFDD
 14679                           plusw2	equ	0xFDB
 14680                           fsr2h	equ	0xFDA
 14681                           fsr2l	equ	0xFD9
 14682                           status	equ	0xFD8
 14683                           
 14684 ;; *************** function _arp_setNewEntry *****************
 14685 ;; Defined at:
 14686 ;;		line 470 in file "src/stack/protocols/arp.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  mac             6   58[BANK0 ] struct macaddress
 14689 ;;  ip              4   64[BANK0 ] struct ipv4_address
 14690 ;;  timestamp       4   68[BANK0 ] unsigned long 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  i               1   81[BANK0 ] unsigned char 
 14693 ;;  maxSeconds      4   76[BANK0 ] unsigned long 
 14694 ;;  oldestIndex     1   80[BANK0 ] unsigned char 
 14695 ;; Return value:  Size  Location     Type
 14696 ;;                  1    wreg      void 
 14697 ;; Registers used:
 14698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14704 ;;      Params:         0      14       0       0       0       0       0       0       0
 14705 ;;      Locals:         0       6       0       0       0       0       0       0       0
 14706 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14707 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14708 ;;Total ram usage:       24 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    6
 14711 ;; This function calls:
 14712 ;;		_UARTTransmitText
 14713 ;;		_ipAdressToString
 14714 ;;		_ipv4_isAllZero
 14715 ;;		_macToString
 14716 ;;		_mac_isAllZero
 14717 ;; This function is called by:
 14718 ;;		_arp_handleNewPacket
 14719 ;;		_arp_init
 14720 ;; This function uses a non-reentrant model
 14721 ;;
 14722                           
 14723                           	psect	text53
 14724  002E54                     __ptext53:
 14725                           	opt stack 0
 14726  002E54                     _arp_setNewEntry:
 14727                           	opt stack 22
 14728                           
 14729                           ;arp.c: 471: time_t maxSeconds = 0;
 14730                           
 14731                           ;incstack = 0
 14732  002E54  0E00               	movlw	0
 14733  002E56  0100               	movlb	0	; () banked
 14734  002E58  6FAC               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
 14735  002E5A  0E00               	movlw	0
 14736  002E5C  6FAD               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
 14737  002E5E  0E00               	movlw	0
 14738  002E60  6FAE               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
 14739  002E62  0E00               	movlw	0
 14740  002E64  6FAF               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
 14741                           
 14742                           ;arp.c: 472: uint8_t oldestIndex = 0;
 14743  002E66  0E00               	movlw	0
 14744  002E68  6FB0               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
 14745                           
 14746                           ;arp.c: 474: for (uint8_t i = 0; i < 8u; i++) {
 14747  002E6A  0E00               	movlw	0
 14748  002E6C  6FB1               	movwf	arp_setNewEntry@i& (0+255),b
 14749  002E6E                     l9377:
 14750                           
 14751                           ; BSR set to: 0
 14752  002E6E  0E07               	movlw	7
 14753  002E70  65B1               	cpfsgt	arp_setNewEntry@i& (0+255),b
 14754  002E72  D001               	goto	l1061
 14755  002E74  D02E               	goto	u11100
 14756  002E76                     l1061:
 14757                           
 14758                           ; BSR set to: 0
 14759                           ;arp.c: 475: if (arp_table[i].timeCreated > maxSeconds) {
 14760                           
 14761                           ; BSR set to: 0
 14762  002E76  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14763  002E78  0D0E               	mullw	14
 14764  002E7A  0E0A               	movlw	10
 14765  002E7C  26F3               	addwf	prodl,f,c
 14766  002E7E  0E00               	movlw	0
 14767  002E80  22F4               	addwfc	prodh,f,c
 14768  002E82  0E00               	movlw	low _arp_table
 14769  002E84  24F3               	addwf	prodl,w,c
 14770  002E86  6ED9               	movwf	fsr2l,c
 14771  002E88  0E03               	movlw	high _arp_table
 14772  002E8A  20F4               	addwfc	prodh,w,c
 14773  002E8C  6EDA               	movwf	fsr2h,c
 14774  002E8E  50DE               	movf	postinc2,w,c
 14775  002E90  5DAC               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
 14776  002E92  50DE               	movf	postinc2,w,c
 14777  002E94  59AD               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
 14778  002E96  50DE               	movf	postinc2,w,c
 14779  002E98  59AE               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
 14780  002E9A  50DE               	movf	postinc2,w,c
 14781  002E9C  59AF               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
 14782  002E9E  B0D8               	btfsc	status,0,c
 14783  002EA0  D016               	goto	l1063
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;arp.c: 476: maxSeconds = arp_table[i].timeCreated;
 14787  002EA2  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 14788  002EA4  0D0E               	mullw	14
 14789  002EA6  0E0A               	movlw	10
 14790  002EA8  26F3               	addwf	prodl,f,c
 14791  002EAA  0E00               	movlw	0
 14792  002EAC  22F4               	addwfc	prodh,f,c
 14793  002EAE  0E00               	movlw	low _arp_table
 14794  002EB0  24F3               	addwf	prodl,w,c
 14795  002EB2  6ED9               	movwf	fsr2l,c
 14796  002EB4  0E03               	movlw	high _arp_table
 14797  002EB6  20F4               	addwfc	prodh,w,c
 14798  002EB8  6EDA               	movwf	fsr2h,c
 14799  002EBA  CFDE F0AC          	movff	postinc2,arp_setNewEntry@maxSeconds
 14800  002EBE  CFDE F0AD          	movff	postinc2,arp_setNewEntry@maxSeconds+1
 14801  002EC2  CFDE F0AE          	movff	postinc2,arp_setNewEntry@maxSeconds+2
 14802  002EC6  CFDE F0AF          	movff	postinc2,arp_setNewEntry@maxSeconds+3
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;arp.c: 477: oldestIndex = i;
 14806  002ECA  C0B1  F0B0         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 14807  002ECE                     l1063:
 14808                           
 14809                           ; BSR set to: 0
 14810                           
 14811                           ; BSR set to: 0
 14812  002ECE  2BB1               	incf	arp_setNewEntry@i& (0+255),f,b
 14813  002ED0  D7CE               	goto	l9377
 14814  002ED2                     u11100:
 14815                           
 14816                           ; BSR set to: 0
 14817                           ;arp.c: 478: }
 14818                           ;arp.c: 479: }
 14819                           ;arp.c: 481: arp_table[oldestIndex].ip = ip;
 14820                           
 14821                           ; BSR set to: 0
 14822  002ED2  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14823  002ED4  0D0E               	mullw	14
 14824  002ED6  0E00               	movlw	low _arp_table
 14825  002ED8  24F3               	addwf	prodl,w,c
 14826  002EDA  6ED9               	movwf	fsr2l,c
 14827  002EDC  0E03               	movlw	high _arp_table
 14828  002EDE  20F4               	addwfc	prodh,w,c
 14829  002EE0  6EDA               	movwf	fsr2h,c
 14830  002EE2  C0A0  FFDE         	movff	arp_setNewEntry@ip,postinc2
 14831  002EE6  C0A1  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
 14832  002EEA  C0A2  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
 14833  002EEE  C0A3  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
 14834                           
 14835                           ; BSR set to: 0
 14836                           ;arp.c: 482: arp_table[oldestIndex].mac = mac;
 14837  002EF2  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14838  002EF6  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14839  002EF8  0D0E               	mullw	14
 14840  002EFA  0E04               	movlw	4
 14841  002EFC  26F3               	addwf	prodl,f,c
 14842  002EFE  0E00               	movlw	0
 14843  002F00  22F4               	addwfc	prodh,f,c
 14844  002F02  0E00               	movlw	low _arp_table
 14845  002F04  24F3               	addwf	prodl,w,c
 14846  002F06  6EE1               	movwf	fsr1l,c
 14847  002F08  0E03               	movlw	high _arp_table
 14848  002F0A  20F4               	addwfc	prodh,w,c
 14849  002F0C  6EE2               	movwf	fsr1h,c
 14850  002F0E  0E05               	movlw	5
 14851  002F10                     u11111:
 14852  002F10  CFDB FFE3          	movff	plusw2,plusw1
 14853  002F14  06E8               	decf	wreg,f,c
 14854  002F16  E2FC               	bc	u11111
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;arp.c: 483: arp_table[oldestIndex].timeCreated = timestamp;
 14858  002F18  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 14859  002F1A  0D0E               	mullw	14
 14860  002F1C  0E0A               	movlw	10
 14861  002F1E  26F3               	addwf	prodl,f,c
 14862  002F20  0E00               	movlw	0
 14863  002F22  22F4               	addwfc	prodh,f,c
 14864  002F24  0E00               	movlw	low _arp_table
 14865  002F26  24F3               	addwf	prodl,w,c
 14866  002F28  6ED9               	movwf	fsr2l,c
 14867  002F2A  0E03               	movlw	high _arp_table
 14868  002F2C  20F4               	addwfc	prodh,w,c
 14869  002F2E  6EDA               	movwf	fsr2h,c
 14870  002F30  C0A4  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
 14871  002F34  C0A5  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
 14872  002F38  C0A6  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
 14873  002F3C  C0A7  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;arp.c: 485: if (!((mac_isAllZero(&mac)) && ipv4_isAllZero(&ip))) {
 14877  002F40  0E9A               	movlw	low arp_setNewEntry@mac
 14878  002F42  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14879  002F44  0E00               	movlw	high arp_setNewEntry@mac
 14880  002F46  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14881  002F48  ECAD  F029         	call	_mac_isAllZero	;wreg free
 14882  002F4C  0100               	movlb	0	; () banked
 14883  002F4E  A0D8               	btfss	status,0,c
 14884  002F50  D009               	goto	u11130
 14885                           
 14886                           ; BSR set to: 0
 14887  002F52  0EA0               	movlw	low arp_setNewEntry@ip
 14888  002F54  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14889  002F56  0E00               	movlw	high arp_setNewEntry@ip
 14890  002F58  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14891  002F5A  ECC5  F029         	call	_ipv4_isAllZero	;wreg free
 14892  002F5E  0100               	movlb	0	; () banked
 14893  002F60  B0D8               	btfsc	status,0,c
 14894  002F62  0012               	return	
 14895  002F64                     u11130:
 14896                           
 14897                           ; BSR set to: 0
 14898                           ;arp.c: 486: UARTTransmitText("[ARP]: New entry created for ");
 14899                           
 14900                           ; BSR set to: 0
 14901  002F64  0E0E               	movlw	low STR_91
 14902  002F66  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14903  002F68  0E7D               	movlw	high STR_91
 14904  002F6A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14905  002F6C  EC06  F027         	call	_UARTTransmitText	;wreg free
 14906                           
 14907                           ;arp.c: 487: UARTTransmitText(ipAdressToString(ip));
 14908  002F70  C0A0  F073         	movff	arp_setNewEntry@ip,ipAdressToString@ip
 14909  002F74  C0A1  F074         	movff	arp_setNewEntry@ip+1,ipAdressToString@ip+1
 14910  002F78  C0A2  F075         	movff	arp_setNewEntry@ip+2,ipAdressToString@ip+2
 14911  002F7C  C0A3  F076         	movff	arp_setNewEntry@ip+3,ipAdressToString@ip+3
 14912  002F80  ECC6  F013         	call	_ipAdressToString	;wreg free
 14913  002F84  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 14914  002F88  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 14915  002F8C  EC06  F027         	call	_UARTTransmitText	;wreg free
 14916                           
 14917                           ;arp.c: 488: UARTTransmitText(" (");
 14918  002F90  0E0B               	movlw	low (STR_41+29)
 14919  002F92  0100               	movlb	0	; () banked
 14920  002F94  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14921  002F96  0E7D               	movlw	high (STR_41+29)
 14922  002F98  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14923  002F9A  EC06  F027         	call	_UARTTransmitText	;wreg free
 14924                           
 14925                           ;arp.c: 489: UARTTransmitText(macToString(mac));
 14926  002F9E  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 14927  002FA2  EE00  F07A         	lfsr	0,macToString@addr
 14928  002FA6  0E05               	movlw	5
 14929  002FA8                     u11141:
 14930  002FA8  CFDB FFEB          	movff	plusw2,plusw0
 14931  002FAC  06E8               	decf	wreg,f,c
 14932  002FAE  E2FC               	bc	u11141
 14933  002FB0  EC8A  F01D         	call	_macToString	;wreg free
 14934  002FB4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 14935  002FB8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 14936  002FBC  EC06  F027         	call	_UARTTransmitText	;wreg free
 14937                           
 14938                           ;arp.c: 490: UARTTransmitText(") ");
 14939  002FC0  0EED               	movlw	low STR_93
 14940  002FC2  0100               	movlb	0	; () banked
 14941  002FC4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14942  002FC6  0E7F               	movlw	high STR_93
 14943  002FC8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14944  002FCA  EC06  F027         	call	_UARTTransmitText	;wreg free
 14945  002FCE  0012               	return	
 14946  002FD0                     __end_of_arp_setNewEntry:
 14947                           	opt stack 0
 14948                           tblptru	equ	0xFF8
 14949                           tblptrh	equ	0xFF7
 14950                           tblptrl	equ	0xFF6
 14951                           tablat	equ	0xFF5
 14952                           prodh	equ	0xFF4
 14953                           prodl	equ	0xFF3
 14954                           intcon	equ	0xFF2
 14955                           intcon3	equ	0xFF0
 14956                           indf0	equ	0xFEF
 14957                           postinc0	equ	0xFEE
 14958                           plusw0	equ	0xFEB
 14959                           fsr0h	equ	0xFEA
 14960                           fsr0l	equ	0xFE9
 14961                           wreg	equ	0xFE8
 14962                           indf1	equ	0xFE7
 14963                           postinc1	equ	0xFE6
 14964                           postdec1	equ	0xFE5
 14965                           plusw1	equ	0xFE3
 14966                           fsr1h	equ	0xFE2
 14967                           fsr1l	equ	0xFE1
 14968                           indf2	equ	0xFDF
 14969                           postinc2	equ	0xFDE
 14970                           postdec2	equ	0xFDD
 14971                           plusw2	equ	0xFDB
 14972                           fsr2h	equ	0xFDA
 14973                           fsr2l	equ	0xFD9
 14974                           status	equ	0xFD8
 14975                           
 14976 ;; *************** function _mac_isAllZero *****************
 14977 ;; Defined at:
 14978 ;;		line 31 in file "src/eth/mac.c"
 14979 ;; Parameters:    Size  Location     Type
 14980 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 14981 ;;		 -> arp_setNewEntry@mac(6), arp_parseFromRXBuffer@arp(32), 
 14982 ;; Auto vars:     Size  Location     Type
 14983 ;;  i               1    2[BANK0 ] unsigned char 
 14984 ;; Return value:  Size  Location     Type
 14985 ;;		None               void
 14986 ;; Registers used:
 14987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14988 ;; Tracked objects:
 14989 ;;		On entry : 0/0
 14990 ;;		On exit  : 0/0
 14991 ;;		Unchanged: 0/0
 14992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14993 ;;      Params:         0       2       0       0       0       0       0       0       0
 14994 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14995 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14996 ;;      Totals:         0       3       0       0       0       0       0       0       0
 14997 ;;Total ram usage:        3 bytes
 14998 ;; Hardware stack levels used:    1
 14999 ;; Hardware stack levels required when called:    4
 15000 ;; This function calls:
 15001 ;;		Nothing
 15002 ;; This function is called by:
 15003 ;;		_arp_parseFromRXBuffer
 15004 ;;		_arp_setNewEntry
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text54
 15009  00535A                     __ptext54:
 15010                           	opt stack 0
 15011  00535A                     _mac_isAllZero:
 15012                           	opt stack 23
 15013                           
 15014                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 15015                           
 15016                           ;incstack = 0
 15017  00535A  0E00               	movlw	0
 15018  00535C  0100               	movlb	0	; () banked
 15019  00535E  6F62               	movwf	mac_isAllZero@i& (0+255),b
 15020  005360                     l8909:
 15021                           
 15022                           ; BSR set to: 0
 15023  005360  0E05               	movlw	5
 15024  005362  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 15025  005364  D001               	goto	l384
 15026  005366  D00F               	goto	u9970
 15027  005368                     l384:
 15028                           
 15029                           ; BSR set to: 0
 15030                           ;mac.c: 33: if (mac->address[i] != 0x00)
 15031                           
 15032                           ; BSR set to: 0
 15033  005368  5162               	movf	mac_isAllZero@i& (0+255),w,b
 15034  00536A  0D01               	mullw	1
 15035  00536C  50F3               	movf	prodl,w,c
 15036  00536E  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 15037  005370  6ED9               	movwf	fsr2l,c
 15038  005372  50F4               	movf	prodh,w,c
 15039  005374  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 15040  005376  6EDA               	movwf	fsr2h,c
 15041  005378  50DF               	movf	indf2,w,c
 15042  00537A  B4D8               	btfsc	status,2,c
 15043  00537C  D002               	goto	l386
 15044                           
 15045                           ; BSR set to: 0
 15046                           ;mac.c: 34: return 0;
 15047  00537E  90D8               	bcf	status,0,c
 15048                           
 15049                           ; BSR set to: 0
 15050  005380  0012               	return	
 15051  005382                     l386:
 15052                           
 15053                           ; BSR set to: 0
 15054                           
 15055                           ; BSR set to: 0
 15056  005382  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 15057  005384  D7ED               	goto	l8909
 15058  005386                     u9970:
 15059                           
 15060                           ; BSR set to: 0
 15061                           ;mac.c: 35: }
 15062                           ;mac.c: 36: return 1;
 15063                           
 15064                           ; BSR set to: 0
 15065  005386  80D8               	bsf	status,0,c
 15066  005388  0012               	return	
 15067  00538A                     __end_of_mac_isAllZero:
 15068                           	opt stack 0
 15069                           tblptru	equ	0xFF8
 15070                           tblptrh	equ	0xFF7
 15071                           tblptrl	equ	0xFF6
 15072                           tablat	equ	0xFF5
 15073                           prodh	equ	0xFF4
 15074                           prodl	equ	0xFF3
 15075                           intcon	equ	0xFF2
 15076                           intcon3	equ	0xFF0
 15077                           indf0	equ	0xFEF
 15078                           postinc0	equ	0xFEE
 15079                           plusw0	equ	0xFEB
 15080                           fsr0h	equ	0xFEA
 15081                           fsr0l	equ	0xFE9
 15082                           wreg	equ	0xFE8
 15083                           indf1	equ	0xFE7
 15084                           postinc1	equ	0xFE6
 15085                           postdec1	equ	0xFE5
 15086                           plusw1	equ	0xFE3
 15087                           fsr1h	equ	0xFE2
 15088                           fsr1l	equ	0xFE1
 15089                           indf2	equ	0xFDF
 15090                           postinc2	equ	0xFDE
 15091                           postdec2	equ	0xFDD
 15092                           plusw2	equ	0xFDB
 15093                           fsr2h	equ	0xFDA
 15094                           fsr2l	equ	0xFD9
 15095                           status	equ	0xFD8
 15096                           
 15097 ;; *************** function _macToString *****************
 15098 ;; Defined at:
 15099 ;;		line 107 in file "src/system/uart.c"
 15100 ;; Parameters:    Size  Location     Type
 15101 ;;  addr            6   26[BANK0 ] struct macaddress
 15102 ;; Auto vars:     Size  Location     Type
 15103 ;;  i               2   53[BANK0 ] int 
 15104 ;;  address        18   33[BANK0 ] unsigned char [18]
 15105 ;;  j               1   55[BANK0 ] unsigned char 
 15106 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 15107 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 15108 ;; Return value:  Size  Location     Type
 15109 ;;                  2   26[BANK0 ] PTR unsigned char 
 15110 ;; Registers used:
 15111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15112 ;; Tracked objects:
 15113 ;;		On entry : 0/0
 15114 ;;		On exit  : 0/0
 15115 ;;		Unchanged: 0/0
 15116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15117 ;;      Params:         0       6       0       0       0       0       0       0       0
 15118 ;;      Locals:         0      23       0       0       0       0       0       0       0
 15119 ;;      Temps:          0       1       0       0       0       0       0       0       0
 15120 ;;      Totals:         0      30       0       0       0       0       0       0       0
 15121 ;;Total ram usage:       30 bytes
 15122 ;; Hardware stack levels used:    1
 15123 ;; Hardware stack levels required when called:    4
 15124 ;; This function calls:
 15125 ;;		Nothing
 15126 ;; This function is called by:
 15127 ;;		_ethernet_rxGetNewFrame
 15128 ;;		_main
 15129 ;;		_arp_handleNewPacket
 15130 ;;		_arp_sendReply
 15131 ;;		_arp_setNewEntry
 15132 ;;		_ipv4_sendFrame
 15133 ;;		_arpEntryToString
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           	psect	text55
 15138  003B14                     __ptext55:
 15139                           	opt stack 0
 15140  003B14                     _macToString:
 15141                           	opt stack 23
 15142                           
 15143                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;incstack = 0
 15147  003B14  EE22  F0D2         	lfsr	2,macToString@F5946
 15148  003B18  EE10  F081         	lfsr	1,macToString@address
 15149  003B1C  0E11               	movlw	17
 15150  003B1E                     u9891:
 15151  003B1E  CFDB FFE3          	movff	plusw2,plusw1
 15152  003B22  06E8               	decf	wreg,f,c
 15153  003B24  E2FC               	bc	u9891
 15154                           
 15155                           ;uart.c: 109: uint8_t j = 0;
 15156  003B26  0E00               	movlw	0
 15157  003B28  0100               	movlb	0	; () banked
 15158  003B2A  6F97               	movwf	macToString@j& (0+255),b
 15159                           
 15160                           ; BSR set to: 0
 15161                           ;uart.c: 110: uint8_t firstDigit;
 15162                           ;uart.c: 111: uint8_t secondDigit;
 15163                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
 15164  003B2C  0E00               	movlw	0
 15165  003B2E  6F96               	movwf	(macToString@i+1)& (0+255),b
 15166  003B30  0E00               	movlw	0
 15167  003B32  6F95               	movwf	macToString@i& (0+255),b
 15168                           
 15169                           ; BSR set to: 0
 15170  003B34  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15171  003B36  D006               	goto	l815
 15172  003B38  5196               	movf	(macToString@i+1)& (0+255),w,b
 15173  003B3A  E16B               	bnz	l816
 15174  003B3C  0E06               	movlw	6
 15175  003B3E  5D95               	subwf	macToString@i& (0+255),w,b
 15176  003B40  B0D8               	btfsc	status,0,c
 15177  003B42  D067               	goto	u9940
 15178  003B44                     l815:
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 15182                           
 15183                           ; BSR set to: 0
 15184  003B44  0E7A               	movlw	low macToString@addr
 15185  003B46  2595               	addwf	macToString@i& (0+255),w,b
 15186  003B48  6ED9               	movwf	fsr2l,c
 15187  003B4A  0E00               	movlw	high macToString@addr
 15188  003B4C  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15189  003B4E  6EDA               	movwf	fsr2h,c
 15190  003B50  50DF               	movf	indf2,w,c
 15191  003B52  6F80               	movwf	??_macToString& (0+255),b
 15192  003B54  3980               	swapf	??_macToString& (0+255),w,b
 15193  003B56  0B0F               	andlw	15
 15194  003B58  0B0F               	andlw	15
 15195  003B5A  6F93               	movwf	macToString@firstDigit& (0+255),b
 15196                           
 15197                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
 15198  003B5C  0E7A               	movlw	low macToString@addr
 15199  003B5E  2595               	addwf	macToString@i& (0+255),w,b
 15200  003B60  6ED9               	movwf	fsr2l,c
 15201  003B62  0E00               	movlw	high macToString@addr
 15202  003B64  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 15203  003B66  6EDA               	movwf	fsr2h,c
 15204  003B68  50DF               	movf	indf2,w,c
 15205  003B6A  0B0F               	andlw	15
 15206  003B6C  6F94               	movwf	macToString@secondDigit& (0+255),b
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;uart.c: 117: firstDigit += 0x30;
 15210  003B6E  0E30               	movlw	48
 15211  003B70  2793               	addwf	macToString@firstDigit& (0+255),f,b
 15212                           
 15213                           ; BSR set to: 0
 15214                           ;uart.c: 118: secondDigit += 0x30;
 15215  003B72  0E30               	movlw	48
 15216  003B74  2794               	addwf	macToString@secondDigit& (0+255),f,b
 15217                           
 15218                           ; BSR set to: 0
 15219                           ;uart.c: 120: if (firstDigit > '9') {
 15220  003B76  0E39               	movlw	57
 15221  003B78  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 15222  003B7A  D00C               	goto	l817
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;uart.c: 121: address[j++] = firstDigit + 7;
 15226  003B7C  5197               	movf	macToString@j& (0+255),w,b
 15227  003B7E  0D01               	mullw	1
 15228  003B80  0E81               	movlw	low macToString@address
 15229  003B82  24F3               	addwf	prodl,w,c
 15230  003B84  6ED9               	movwf	fsr2l,c
 15231  003B86  0E00               	movlw	high macToString@address
 15232  003B88  20F4               	addwfc	prodh,w,c
 15233  003B8A  6EDA               	movwf	fsr2h,c
 15234  003B8C  5193               	movf	macToString@firstDigit& (0+255),w,b
 15235  003B8E  0F07               	addlw	7
 15236  003B90  6EDF               	movwf	indf2,c
 15237  003B92  D00A               	goto	l8881
 15238  003B94                     l817:
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;uart.c: 123: address[j++] = firstDigit;
 15242                           
 15243                           ; BSR set to: 0
 15244  003B94  5197               	movf	macToString@j& (0+255),w,b
 15245  003B96  0D01               	mullw	1
 15246  003B98  0E81               	movlw	low macToString@address
 15247  003B9A  24F3               	addwf	prodl,w,c
 15248  003B9C  6ED9               	movwf	fsr2l,c
 15249  003B9E  0E00               	movlw	high macToString@address
 15250  003BA0  20F4               	addwfc	prodh,w,c
 15251  003BA2  6EDA               	movwf	fsr2h,c
 15252  003BA4  C093  FFDF         	movff	macToString@firstDigit,indf2
 15253  003BA8                     l8881:
 15254                           
 15255                           ; BSR set to: 0
 15256  003BA8  2B97               	incf	macToString@j& (0+255),f,b
 15257                           
 15258                           ; BSR set to: 0
 15259                           ;uart.c: 124: }
 15260                           ;uart.c: 125: if (secondDigit > '9') {
 15261                           
 15262                           ; BSR set to: 0
 15263  003BAA  0E39               	movlw	57
 15264  003BAC  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 15265  003BAE  D00C               	goto	l819
 15266                           
 15267                           ; BSR set to: 0
 15268                           ;uart.c: 126: address[j++] = secondDigit + 7;
 15269  003BB0  5197               	movf	macToString@j& (0+255),w,b
 15270  003BB2  0D01               	mullw	1
 15271  003BB4  0E81               	movlw	low macToString@address
 15272  003BB6  24F3               	addwf	prodl,w,c
 15273  003BB8  6ED9               	movwf	fsr2l,c
 15274  003BBA  0E00               	movlw	high macToString@address
 15275  003BBC  20F4               	addwfc	prodh,w,c
 15276  003BBE  6EDA               	movwf	fsr2h,c
 15277  003BC0  5194               	movf	macToString@secondDigit& (0+255),w,b
 15278  003BC2  0F07               	addlw	7
 15279  003BC4  6EDF               	movwf	indf2,c
 15280  003BC6  D00A               	goto	l8891
 15281  003BC8                     l819:
 15282                           
 15283                           ; BSR set to: 0
 15284                           ;uart.c: 128: address[j++] = secondDigit;
 15285                           
 15286                           ; BSR set to: 0
 15287  003BC8  5197               	movf	macToString@j& (0+255),w,b
 15288  003BCA  0D01               	mullw	1
 15289  003BCC  0E81               	movlw	low macToString@address
 15290  003BCE  24F3               	addwf	prodl,w,c
 15291  003BD0  6ED9               	movwf	fsr2l,c
 15292  003BD2  0E00               	movlw	high macToString@address
 15293  003BD4  20F4               	addwfc	prodh,w,c
 15294  003BD6  6EDA               	movwf	fsr2h,c
 15295  003BD8  C094  FFDF         	movff	macToString@secondDigit,indf2
 15296  003BDC                     l8891:
 15297                           
 15298                           ; BSR set to: 0
 15299  003BDC  2B97               	incf	macToString@j& (0+255),f,b
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;uart.c: 129: }
 15303                           ;uart.c: 131: if (i < 5) {
 15304                           
 15305                           ; BSR set to: 0
 15306  003BDE  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15307  003BE0  D006               	goto	u9930
 15308  003BE2  5196               	movf	(macToString@i+1)& (0+255),w,b
 15309  003BE4  E10F               	bnz	l8899
 15310  003BE6  0E05               	movlw	5
 15311  003BE8  5D95               	subwf	macToString@i& (0+255),w,b
 15312  003BEA  B0D8               	btfsc	status,0,c
 15313  003BEC  D00B               	goto	l821
 15314  003BEE                     u9930:
 15315                           
 15316                           ; BSR set to: 0
 15317                           ;uart.c: 132: address[j++] = ':';
 15318  003BEE  5197               	movf	macToString@j& (0+255),w,b
 15319  003BF0  0D01               	mullw	1
 15320  003BF2  0E81               	movlw	low macToString@address
 15321  003BF4  24F3               	addwf	prodl,w,c
 15322  003BF6  6ED9               	movwf	fsr2l,c
 15323  003BF8  0E00               	movlw	high macToString@address
 15324  003BFA  20F4               	addwfc	prodh,w,c
 15325  003BFC  6EDA               	movwf	fsr2h,c
 15326  003BFE  0E3A               	movlw	58
 15327  003C00  6EDF               	movwf	indf2,c
 15328                           
 15329                           ; BSR set to: 0
 15330  003C02  2B97               	incf	macToString@j& (0+255),f,b
 15331  003C04                     l821:
 15332  003C04                     l8899:
 15333                           
 15334                           ; BSR set to: 0
 15335  003C04  4B95               	infsnz	macToString@i& (0+255),f,b
 15336  003C06  2B96               	incf	(macToString@i+1)& (0+255),f,b
 15337                           
 15338                           ; BSR set to: 0
 15339  003C08  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 15340  003C0A  D79C               	goto	l815
 15341  003C0C  5196               	movf	(macToString@i+1)& (0+255),w,b
 15342  003C0E  E101               	bnz	l8903
 15343  003C10  D795               	goto	L6
 15344  003C12                     u9940:
 15345  003C12                     l816:
 15346  003C12                     l8903:
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;uart.c: 133: }
 15350                           ;uart.c: 134: }
 15351                           ;uart.c: 135: return address;
 15352  003C12  0E81               	movlw	low macToString@address
 15353  003C14  6F7A               	movwf	?_macToString& (0+255),b
 15354  003C16  0E00               	movlw	high macToString@address
 15355  003C18  6F7B               	movwf	(?_macToString+1)& (0+255),b
 15356  003C1A  0012               	return	
 15357  003C1C                     __end_of_macToString:
 15358                           	opt stack 0
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           intcon3	equ	0xFF0
 15367                           indf0	equ	0xFEF
 15368                           postinc0	equ	0xFEE
 15369                           plusw0	equ	0xFEB
 15370                           fsr0h	equ	0xFEA
 15371                           fsr0l	equ	0xFE9
 15372                           wreg	equ	0xFE8
 15373                           indf1	equ	0xFE7
 15374                           postinc1	equ	0xFE6
 15375                           postdec1	equ	0xFE5
 15376                           plusw1	equ	0xFE3
 15377                           fsr1h	equ	0xFE2
 15378                           fsr1l	equ	0xFE1
 15379                           indf2	equ	0xFDF
 15380                           postinc2	equ	0xFDE
 15381                           postdec2	equ	0xFDD
 15382                           plusw2	equ	0xFDB
 15383                           fsr2h	equ	0xFDA
 15384                           fsr2l	equ	0xFD9
 15385                           status	equ	0xFD8
 15386                           
 15387 ;; *************** function _ipv4_isAllZero *****************
 15388 ;; Defined at:
 15389 ;;		line 296 in file "src/stack/protocols/ipv4.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15392 ;;		 -> arp_setNewEntry@ip(4), arp_parseFromRXBuffer@arp(32), 
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  i               1    2[BANK0 ] unsigned char 
 15395 ;; Return value:  Size  Location     Type
 15396 ;;		None               void
 15397 ;; Registers used:
 15398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15399 ;; Tracked objects:
 15400 ;;		On entry : 0/0
 15401 ;;		On exit  : 0/0
 15402 ;;		Unchanged: 0/0
 15403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15404 ;;      Params:         0       2       0       0       0       0       0       0       0
 15405 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15406 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15407 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15408 ;;Total ram usage:        3 bytes
 15409 ;; Hardware stack levels used:    1
 15410 ;; Hardware stack levels required when called:    4
 15411 ;; This function calls:
 15412 ;;		Nothing
 15413 ;; This function is called by:
 15414 ;;		_arp_parseFromRXBuffer
 15415 ;;		_arp_setNewEntry
 15416 ;; This function uses a non-reentrant model
 15417 ;;
 15418                           
 15419                           	psect	text56
 15420  00538A                     __ptext56:
 15421                           	opt stack 0
 15422  00538A                     _ipv4_isAllZero:
 15423                           	opt stack 23
 15424                           
 15425                           ;ipv4.c: 297: for (uint8_t i = 0; i < 4; i++) {
 15426                           
 15427                           ; BSR set to: 0
 15428                           ;incstack = 0
 15429  00538A  0E00               	movlw	0
 15430  00538C  0100               	movlb	0	; () banked
 15431  00538E  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 15432  005390                     l9065:
 15433                           
 15434                           ; BSR set to: 0
 15435  005390  0E03               	movlw	3
 15436  005392  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 15437  005394  D001               	goto	l1194
 15438  005396  D00F               	goto	u10180
 15439  005398                     l1194:
 15440                           
 15441                           ; BSR set to: 0
 15442                           ;ipv4.c: 298: if (ip->address[i] != 0x00)
 15443                           
 15444                           ; BSR set to: 0
 15445  005398  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 15446  00539A  0D01               	mullw	1
 15447  00539C  50F3               	movf	prodl,w,c
 15448  00539E  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 15449  0053A0  6ED9               	movwf	fsr2l,c
 15450  0053A2  50F4               	movf	prodh,w,c
 15451  0053A4  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 15452  0053A6  6EDA               	movwf	fsr2h,c
 15453  0053A8  50DF               	movf	indf2,w,c
 15454  0053AA  B4D8               	btfsc	status,2,c
 15455  0053AC  D002               	goto	l1196
 15456                           
 15457                           ; BSR set to: 0
 15458                           ;ipv4.c: 299: return 0;
 15459  0053AE  90D8               	bcf	status,0,c
 15460                           
 15461                           ; BSR set to: 0
 15462  0053B0  0012               	return	
 15463  0053B2                     l1196:
 15464                           
 15465                           ; BSR set to: 0
 15466                           
 15467                           ; BSR set to: 0
 15468  0053B2  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 15469  0053B4  D7ED               	goto	l9065
 15470  0053B6                     u10180:
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;ipv4.c: 300: }
 15474                           ;ipv4.c: 301: return 1;
 15475                           
 15476                           ; BSR set to: 0
 15477  0053B6  80D8               	bsf	status,0,c
 15478  0053B8  0012               	return	
 15479  0053BA                     __end_of_ipv4_isAllZero:
 15480                           	opt stack 0
 15481                           tblptru	equ	0xFF8
 15482                           tblptrh	equ	0xFF7
 15483                           tblptrl	equ	0xFF6
 15484                           tablat	equ	0xFF5
 15485                           prodh	equ	0xFF4
 15486                           prodl	equ	0xFF3
 15487                           intcon	equ	0xFF2
 15488                           intcon3	equ	0xFF0
 15489                           indf0	equ	0xFEF
 15490                           postinc0	equ	0xFEE
 15491                           plusw0	equ	0xFEB
 15492                           fsr0h	equ	0xFEA
 15493                           fsr0l	equ	0xFE9
 15494                           wreg	equ	0xFE8
 15495                           indf1	equ	0xFE7
 15496                           postinc1	equ	0xFE6
 15497                           postdec1	equ	0xFE5
 15498                           plusw1	equ	0xFE3
 15499                           fsr1h	equ	0xFE2
 15500                           fsr1l	equ	0xFE1
 15501                           indf2	equ	0xFDF
 15502                           postinc2	equ	0xFDE
 15503                           postdec2	equ	0xFDD
 15504                           plusw2	equ	0xFDB
 15505                           fsr2h	equ	0xFDA
 15506                           fsr2l	equ	0xFD9
 15507                           status	equ	0xFD8
 15508                           
 15509 ;; *************** function _arp_background *****************
 15510 ;; Defined at:
 15511 ;;		line 383 in file "src/stack/protocols/arp.c"
 15512 ;; Parameters:    Size  Location     Type
 15513 ;;  link            1    wreg     enum E232
 15514 ;; Auto vars:     Size  Location     Type
 15515 ;;  link            1   86[BANK1 ] enum E232
 15516 ;;  errProbe        3   90[BANK1 ] struct error
 15517 ;;  errAnnounce     3   87[BANK1 ] struct error
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  3   81[BANK1 ] struct error
 15520 ;; Registers used:
 15521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15527 ;;      Params:         0       0       3       0       0       0       0       0       0
 15528 ;;      Locals:         0       0       7       0       0       0       0       0       0
 15529 ;;      Temps:          0       0       2       0       0       0       0       0       0
 15530 ;;      Totals:         0       0      12       0       0       0       0       0       0
 15531 ;;Total ram usage:       12 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; Hardware stack levels required when called:   12
 15534 ;; This function calls:
 15535 ;;		_UARTTransmitText
 15536 ;;		_arp_gratuitous
 15537 ;;		_arp_probe
 15538 ;;		_ipv4_SrcAddrChanged
 15539 ;;		_ipv4_getPreliminaryIPSourceAddress
 15540 ;; This function is called by:
 15541 ;;		_handleStackBackgroundTasks
 15542 ;; This function uses a non-reentrant model
 15543 ;;
 15544                           
 15545                           	psect	text57
 15546  002CD4                     __ptext57:
 15547                           	opt stack 0
 15548  002CD4                     _arp_background:
 15549                           	opt stack 17
 15550                           
 15551                           ; BSR set to: 0
 15552                           ;incstack = 0
 15553                           ;arp_background@link stored from wreg
 15554  002CD4  0101               	movlb	1	; () banked
 15555  002CD6  6F56               	movwf	arp_background@link& (0+255),b
 15556                           
 15557                           ;arp.c: 384: error_t static err;
 15558                           ;arp.c: 385: error_t errProbe;
 15559                           ;arp.c: 386: error_t errAnnounce;
 15560                           ;arp.c: 387: bool_t static fAnnounce = 0;
 15561                           ;arp.c: 388: int8_t static state = 0;
 15562                           ;arp.c: 389: ipv4_address_t static ipPreliminary;
 15563                           ;arp.c: 390: err.code = ERROR_ARP_WAITING;
 15564  002CD8  0E01               	movlw	1
 15565  002CDA  0101               	movlb	1	; () banked
 15566  002CDC  6FC9               	movwf	(arp_background@err+2)& (0+255),b
 15567  002CDE  0E91               	movlw	145
 15568  002CE0  6FC8               	movwf	(arp_background@err+1)& (0+255),b
 15569                           
 15570                           ;arp.c: 391: err.module = ERROR_MODULE_ARP;
 15571  002CE2  0E03               	movlw	3
 15572  002CE4  6FC7               	movwf	arp_background@err& (0+255),b
 15573                           
 15574                           ;arp.c: 393: switch (state) {
 15575  002CE6  D0A8               	goto	l1034
 15576  002CE8                     
 15577                           ; BSR set to: 1
 15578                           ;arp.c: 397: ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 15579                           
 15580                           ; BSR set to: 1
 15581  002CE8  EC82  F02B         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 15582  002CEC  C060  F19C         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 15583  002CF0  C061  F19D         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 15584  002CF4  C062  F19E         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 15585  002CF8  C063  F19F         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 15586                           
 15587                           ;arp.c: 398: if (ipv4_SrcAddrChanged(&err)) {
 15588  002CFC  0EC7               	movlw	low arp_background@err
 15589  002CFE  0100               	movlb	0	; () banked
 15590  002D00  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 15591  002D02  0E01               	movlw	high arp_background@err
 15592  002D04  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 15593  002D06  EC66  F02B         	call	_ipv4_SrcAddrChanged	;wreg free
 15594  002D0A  0100               	movlb	0	; () banked
 15595  002D0C  A0D8               	btfss	status,0,c
 15596  002D0E  D055               	goto	l1039
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;arp.c: 399: errProbe.code = arp_probe(ipPreliminary, link).code;
 15600  002D10  C19C  F134         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 15601  002D14  C19D  F135         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 15602  002D18  C19E  F136         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 15603  002D1C  C19F  F137         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 15604  002D20  C156  F138         	movff	arp_background@link,arp_probe@link
 15605  002D24  ECCA  F00C         	call	_arp_probe	;wreg free
 15606  002D28  0E34               	movlw	low ?_arp_probe
 15607  002D2A  6ED9               	movwf	fsr2l,c
 15608  002D2C  0E01               	movlw	high ?_arp_probe
 15609  002D2E  6EDA               	movwf	fsr2h,c
 15610  002D30  0E01               	movlw	1
 15611  002D32  26D9               	addwf	fsr2l,f,c
 15612  002D34  0E00               	movlw	0
 15613  002D36  22DA               	addwfc	fsr2h,f,c
 15614  002D38  CFDE F15B          	movff	postinc2,arp_background@errProbe+1
 15615  002D3C  CFDD F15C          	movff	postdec2,arp_background@errProbe+2
 15616                           
 15617                           ;arp.c: 400: switch (errProbe.code) {
 15618  002D40  D023               	goto	l1037
 15619  002D42                     
 15620                           ;arp.c: 403: UARTTransmitText("[ARP]: Conflict during probing.\n\r");
 15621  002D42  0E68               	movlw	low STR_85
 15622  002D44  0100               	movlb	0	; () banked
 15623  002D46  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15624  002D48  0E7C               	movlw	high STR_85
 15625  002D4A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15626  002D4C  EC06  F027         	call	_UARTTransmitText	;wreg free
 15627                           
 15628                           ;arp.c: 405: break;
 15629  002D50  D034               	goto	l1039
 15630  002D52                     
 15631                           ;arp.c: 408: UARTTransmitText("[ARP]: Nobody answered to probes.\n\r");
 15632  002D52  0E21               	movlw	low STR_86
 15633  002D54  0100               	movlb	0	; () banked
 15634  002D56  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15635  002D58  0E7C               	movlw	high STR_86
 15636  002D5A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15637  002D5C  EC06  F027         	call	_UARTTransmitText	;wreg free
 15638                           
 15639                           ;arp.c: 410: state = 1;
 15640  002D60  0E01               	movlw	1
 15641  002D62  0101               	movlb	1	; () banked
 15642  002D64  6FA8               	movwf	arp_background@state& (0+255),b
 15643                           
 15644                           ; BSR set to: 1
 15645                           ;arp.c: 413: break;
 15646                           
 15647                           ;arp.c: 412: case ERROR_ARP_WAITING:
 15648                           
 15649                           ;arp.c: 411: break;
 15650  002D66  D029               	goto	l1039
 15651  002D68                     
 15652                           ; BSR set to: 1
 15653                           ;arp.c: 416: UARTTransmitText("[ARP]: Operation was interrupted because link was lost.\n
      +                          \r");
 15654                           
 15655                           ; BSR set to: 1
 15656  002D68  0E14               	movlw	low STR_87
 15657  002D6A  0100               	movlb	0	; () banked
 15658  002D6C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15659  002D6E  0E7A               	movlw	high STR_87
 15660  002D70  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15661  002D72  EC06  F027         	call	_UARTTransmitText	;wreg free
 15662                           
 15663                           ;arp.c: 418: break;
 15664  002D76  D021               	goto	l1039
 15665  002D78                     
 15666                           ;arp.c: 421: UARTTransmitText("[ARP]: An unknown error occured.\n\r");
 15667  002D78  0E45               	movlw	low STR_88
 15668  002D7A  0100               	movlb	0	; () banked
 15669  002D7C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15670  002D7E  0E7C               	movlw	high STR_88
 15671  002D80  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15672  002D82  EC06  F027         	call	_UARTTransmitText	;wreg free
 15673                           
 15674                           ;arp.c: 423: }
 15675  002D86  D019               	goto	l1039
 15676  002D88                     l1037:
 15677  002D88  EE21  F05B         	lfsr	2,arp_background@errProbe+1
 15678  002D8C  CFDE F154          	movff	postinc2,??_arp_background
 15679  002D90  CFDD F155          	movff	postdec2,??_arp_background+1
 15680                           
 15681                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15682                           ; Switch size 1, requested type "space"
 15683                           ; Number of cases is 1, Range of values is 1 to 1
 15684                           ; switch strategies available:
 15685                           ; Name         Instructions Cycles
 15686                           ; simple_byte            4     3 (average)
 15687                           ;	Chosen strategy is simple_byte
 15688  002D94  0101               	movlb	1	; () banked
 15689  002D96  5155               	movf	(??_arp_background+1)& (0+255),w,b
 15690  002D98  0A01               	xorlw	1	; case 1
 15691  002D9A  A4D8               	btfss	status,2,c
 15692  002D9C  D7ED               	goto	l1043
 15693                           
 15694                           ; BSR set to: 1
 15695                           ; Switch size 1, requested type "space"
 15696                           ; Number of cases is 4, Range of values is 145 to 150
 15697                           ; switch strategies available:
 15698                           ; Name         Instructions Cycles
 15699                           ; simple_byte           13     7 (average)
 15700                           ;	Chosen strategy is simple_byte
 15701  002D9E  5154               	movf	??_arp_background& (0+255),w,b
 15702  002DA0  0A91               	xorlw	145	; case 145
 15703  002DA2  B4D8               	btfsc	status,2,c
 15704  002DA4  D00A               	goto	l1039
 15705  002DA6  0A02               	xorlw	2	; case 147
 15706  002DA8  B4D8               	btfsc	status,2,c
 15707  002DAA  D7D3               	goto	l1040
 15708  002DAC  0A06               	xorlw	6	; case 149
 15709  002DAE  B4D8               	btfsc	status,2,c
 15710  002DB0  D7C8               	goto	l1038
 15711  002DB2  0A03               	xorlw	3	; case 150
 15712  002DB4  B4D8               	btfsc	status,2,c
 15713  002DB6  D7D8               	goto	l1042
 15714  002DB8  D7DF               	goto	l1043
 15715  002DBA                     l1039:
 15716                           
 15717                           ;arp.c: 424: }
 15718                           ;arp.c: 425: err.code = errProbe.code;
 15719                           
 15720                           ; BSR set to: 1
 15721  002DBA  C15B  F1C8         	movff	arp_background@errProbe+1,arp_background@err+1
 15722  002DBE  C15C  F1C9         	movff	arp_background@errProbe+2,arp_background@err+2
 15723                           
 15724                           ;arp.c: 427: break;
 15725  002DC2  D041               	goto	l1044
 15726  002DC4                     
 15727                           ;arp.c: 430: errAnnounce = arp_gratuitous(ipPreliminary, link);
 15728  002DC4  C19C  F134         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 15729  002DC8  C19D  F135         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 15730  002DCC  C19E  F136         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 15731  002DD0  C19F  F137         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 15732  002DD4  C156  F138         	movff	arp_background@link,arp_gratuitous@link
 15733  002DD8  EC91  F010         	call	_arp_gratuitous	;wreg free
 15734  002DDC  C134  F157         	movff	?_arp_gratuitous,arp_background@errAnnounce
 15735  002DE0  C135  F158         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 15736  002DE4  C136  F159         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 15737                           
 15738                           ;arp.c: 431: err.code = errAnnounce.code;
 15739  002DE8  C158  F1C8         	movff	arp_background@errAnnounce+1,arp_background@err+1
 15740  002DEC  C159  F1C9         	movff	arp_background@errAnnounce+2,arp_background@err+2
 15741                           
 15742                           ;arp.c: 432: if (err.code == ERROR_ARP_IPv4_ADDRESS_CONFLICT) {
 15743  002DF0  0E95               	movlw	149
 15744  002DF2  0101               	movlb	1	; () banked
 15745  002DF4  19C8               	xorwf	(arp_background@err+1)& (0+255),w,b
 15746  002DF6  E10D               	bnz	l10251
 15747  002DF8  05C9               	decf	(arp_background@err+2)& (0+255),w,b
 15748  002DFA  A4D8               	btfss	status,2,c
 15749  002DFC  D00A               	goto	l1046
 15750                           
 15751                           ; BSR set to: 1
 15752                           ;arp.c: 434: UARTTransmitText("[ARP]: Conflict during announcement.\n\r");
 15753  002DFE  0E63               	movlw	low STR_89
 15754  002E00  0100               	movlb	0	; () banked
 15755  002E02  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15756  002E04  0E7B               	movlw	high STR_89
 15757  002E06  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15758  002E08  EC06  F027         	call	_UARTTransmitText	;wreg free
 15759                           
 15760                           ;arp.c: 436: state = 0;
 15761  002E0C  0E00               	movlw	0
 15762  002E0E  0101               	movlb	1	; () banked
 15763  002E10  6FA8               	movwf	arp_background@state& (0+255),b
 15764  002E12                     l1046:
 15765  002E12                     l10251:
 15766                           
 15767                           ; BSR set to: 1
 15768                           ;arp.c: 437: }
 15769                           ;arp.c: 438: if (errAnnounce.module == ERROR_MODULE_ARP &&
 15770                           ;arp.c: 439: errAnnounce.code == (uint16_t)0) {
 15771  002E12  0E03               	movlw	3
 15772  002E14  1957               	xorwf	arp_background@errAnnounce& (0+255),w,b
 15773  002E16  A4D8               	btfss	status,2,c
 15774  002E18  D016               	goto	l1044
 15775                           
 15776                           ; BSR set to: 1
 15777  002E1A  5158               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 15778  002E1C  1159               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 15779  002E1E  A4D8               	btfss	status,2,c
 15780  002E20  D012               	goto	l1044
 15781                           
 15782                           ; BSR set to: 1
 15783                           ;arp.c: 441: UARTTransmitText("[ARP]: All announcements sent.\n\r");
 15784  002E22  0ECD               	movlw	low STR_90
 15785  002E24  0100               	movlb	0	; () banked
 15786  002E26  6F98               	movwf	UARTTransmitText@str& (0+255),b
 15787  002E28  0E7C               	movlw	high STR_90
 15788  002E2A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 15789  002E2C  EC06  F027         	call	_UARTTransmitText	;wreg free
 15790                           
 15791                           ;arp.c: 443: state = 0;
 15792  002E30  0E00               	movlw	0
 15793  002E32  0101               	movlb	1	; () banked
 15794  002E34  6FA8               	movwf	arp_background@state& (0+255),b
 15795                           
 15796                           ; BSR set to: 1
 15797                           ;arp.c: 446: }
 15798                           
 15799                           ; BSR set to: 1
 15800                           ;arp.c: 444: }
 15801                           ;arp.c: 445: break;
 15802  002E36  D007               	goto	l1044
 15803  002E38                     l1034:
 15804                           
 15805                           ; BSR set to: 1
 15806                           
 15807                           ; BSR set to: 1
 15808  002E38  51A8               	movf	arp_background@state& (0+255),w,b
 15809                           
 15810                           ; Switch size 1, requested type "space"
 15811                           ; Number of cases is 2, Range of values is 0 to 1
 15812                           ; switch strategies available:
 15813                           ; Name         Instructions Cycles
 15814                           ; simple_byte            7     4 (average)
 15815                           ;	Chosen strategy is simple_byte
 15816  002E3A  0A00               	xorlw	0	; case 0
 15817  002E3C  B4D8               	btfsc	status,2,c
 15818  002E3E  D754               	goto	l1035
 15819  002E40  0A01               	xorlw	1	; case 1
 15820  002E42  B4D8               	btfsc	status,2,c
 15821  002E44  D7BF               	goto	l1045
 15822  002E46                     l1044:
 15823                           
 15824                           ;arp.c: 448: return err;
 15825  002E46  C1C7  F151         	movff	arp_background@err,?_arp_background
 15826  002E4A  C1C8  F152         	movff	arp_background@err+1,?_arp_background+1
 15827  002E4E  C1C9  F153         	movff	arp_background@err+2,?_arp_background+2
 15828  002E52  0012               	return		;funcret
 15829  002E54                     __end_of_arp_background:
 15830                           	opt stack 0
 15831                           tblptru	equ	0xFF8
 15832                           tblptrh	equ	0xFF7
 15833                           tblptrl	equ	0xFF6
 15834                           tablat	equ	0xFF5
 15835                           prodh	equ	0xFF4
 15836                           prodl	equ	0xFF3
 15837                           intcon	equ	0xFF2
 15838                           intcon3	equ	0xFF0
 15839                           indf0	equ	0xFEF
 15840                           postinc0	equ	0xFEE
 15841                           plusw0	equ	0xFEB
 15842                           fsr0h	equ	0xFEA
 15843                           fsr0l	equ	0xFE9
 15844                           wreg	equ	0xFE8
 15845                           indf1	equ	0xFE7
 15846                           postinc1	equ	0xFE6
 15847                           postdec1	equ	0xFE5
 15848                           plusw1	equ	0xFE3
 15849                           fsr1h	equ	0xFE2
 15850                           fsr1l	equ	0xFE1
 15851                           indf2	equ	0xFDF
 15852                           postinc2	equ	0xFDE
 15853                           postdec2	equ	0xFDD
 15854                           plusw2	equ	0xFDB
 15855                           fsr2h	equ	0xFDA
 15856                           fsr2l	equ	0xFD9
 15857                           status	equ	0xFD8
 15858                           
 15859 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 15860 ;; Defined at:
 15861 ;;		line 231 in file "src/stack/protocols/ipv4.c"
 15862 ;; Parameters:    Size  Location     Type
 15863 ;;		None
 15864 ;; Auto vars:     Size  Location     Type
 15865 ;;		None
 15866 ;; Return value:  Size  Location     Type
 15867 ;;                  4    0[BANK0 ] struct ipv4_address
 15868 ;; Registers used:
 15869 ;;		None
 15870 ;; Tracked objects:
 15871 ;;		On entry : 0/0
 15872 ;;		On exit  : 0/0
 15873 ;;		Unchanged: 0/0
 15874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15875 ;;      Params:         0       4       0       0       0       0       0       0       0
 15876 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15877 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15878 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15879 ;;Total ram usage:        4 bytes
 15880 ;; Hardware stack levels used:    1
 15881 ;; Hardware stack levels required when called:    4
 15882 ;; This function calls:
 15883 ;;		Nothing
 15884 ;; This function is called by:
 15885 ;;		_arp_background
 15886 ;; This function uses a non-reentrant model
 15887 ;;
 15888                           
 15889                           	psect	text58
 15890  005704                     __ptext58:
 15891                           	opt stack 0
 15892  005704                     _ipv4_getPreliminaryIPSourceAddress:
 15893                           	opt stack 24
 15894                           
 15895                           ;ipv4.c: 232: return ipPreliminarySource;
 15896                           
 15897                           ;incstack = 0
 15898  005704  C198  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 15899  005708  C199  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 15900  00570C  C19A  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 15901  005710  C19B  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 15902  005714  0012               	return		;funcret
 15903  005716                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 15904                           	opt stack 0
 15905                           tblptru	equ	0xFF8
 15906                           tblptrh	equ	0xFF7
 15907                           tblptrl	equ	0xFF6
 15908                           tablat	equ	0xFF5
 15909                           prodh	equ	0xFF4
 15910                           prodl	equ	0xFF3
 15911                           intcon	equ	0xFF2
 15912                           intcon3	equ	0xFF0
 15913                           indf0	equ	0xFEF
 15914                           postinc0	equ	0xFEE
 15915                           plusw0	equ	0xFEB
 15916                           fsr0h	equ	0xFEA
 15917                           fsr0l	equ	0xFE9
 15918                           wreg	equ	0xFE8
 15919                           indf1	equ	0xFE7
 15920                           postinc1	equ	0xFE6
 15921                           postdec1	equ	0xFE5
 15922                           plusw1	equ	0xFE3
 15923                           fsr1h	equ	0xFE2
 15924                           fsr1l	equ	0xFE1
 15925                           indf2	equ	0xFDF
 15926                           postinc2	equ	0xFDE
 15927                           postdec2	equ	0xFDD
 15928                           plusw2	equ	0xFDB
 15929                           fsr2h	equ	0xFDA
 15930                           fsr2l	equ	0xFD9
 15931                           status	equ	0xFD8
 15932                           
 15933 ;; *************** function _ipv4_SrcAddrChanged *****************
 15934 ;; Defined at:
 15935 ;;		line 281 in file "src/stack/protocols/ipv4.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;  err             2    0[BANK0 ] PTR struct error
 15938 ;;		 -> arp_background@err(3), 
 15939 ;; Auto vars:     Size  Location     Type
 15940 ;;		None
 15941 ;; Return value:  Size  Location     Type
 15942 ;;		None               void
 15943 ;; Registers used:
 15944 ;;		wreg, status,2, status,0
 15945 ;; Tracked objects:
 15946 ;;		On entry : 0/0
 15947 ;;		On exit  : 0/0
 15948 ;;		Unchanged: 0/0
 15949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15950 ;;      Params:         0       2       0       0       0       0       0       0       0
 15951 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15952 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15953 ;;      Totals:         0       2       0       0       0       0       0       0       0
 15954 ;;Total ram usage:        2 bytes
 15955 ;; Hardware stack levels used:    1
 15956 ;; Hardware stack levels required when called:    4
 15957 ;; This function calls:
 15958 ;;		Nothing
 15959 ;; This function is called by:
 15960 ;;		_arp_background
 15961 ;; This function uses a non-reentrant model
 15962 ;;
 15963                           
 15964                           	psect	text59
 15965  0056CC                     __ptext59:
 15966                           	opt stack 0
 15967  0056CC                     _ipv4_SrcAddrChanged:
 15968                           	opt stack 24
 15969                           
 15970                           ;ipv4.c: 282: arpStatus = err;
 15971                           
 15972                           ;incstack = 0
 15973  0056CC  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 15974  0056D0  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 15975                           
 15976                           ;ipv4.c: 283: return fSrcAddrChanged;
 15977  0056D4  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 15978  0056D6  D002               	goto	l8135
 15979  0056D8  90D8               	bcf	status,0,c
 15980  0056DA  0012               	return	
 15981  0056DC                     l8135:
 15982  0056DC  80D8               	bsf	status,0,c
 15983  0056DE  0012               	return	
 15984  0056E0                     __end_of_ipv4_SrcAddrChanged:
 15985                           	opt stack 0
 15986                           tblptru	equ	0xFF8
 15987                           tblptrh	equ	0xFF7
 15988                           tblptrl	equ	0xFF6
 15989                           tablat	equ	0xFF5
 15990                           prodh	equ	0xFF4
 15991                           prodl	equ	0xFF3
 15992                           intcon	equ	0xFF2
 15993                           intcon3	equ	0xFF0
 15994                           indf0	equ	0xFEF
 15995                           postinc0	equ	0xFEE
 15996                           plusw0	equ	0xFEB
 15997                           fsr0h	equ	0xFEA
 15998                           fsr0l	equ	0xFE9
 15999                           wreg	equ	0xFE8
 16000                           indf1	equ	0xFE7
 16001                           postinc1	equ	0xFE6
 16002                           postdec1	equ	0xFE5
 16003                           plusw1	equ	0xFE3
 16004                           fsr1h	equ	0xFE2
 16005                           fsr1l	equ	0xFE1
 16006                           indf2	equ	0xFDF
 16007                           postinc2	equ	0xFDE
 16008                           postdec2	equ	0xFDD
 16009                           plusw2	equ	0xFDB
 16010                           fsr2h	equ	0xFDA
 16011                           fsr2l	equ	0xFD9
 16012                           status	equ	0xFD8
 16013                           
 16014 ;; *************** function _arp_probe *****************
 16015 ;; Defined at:
 16016 ;;		line 242 in file "src/stack/protocols/arp.c"
 16017 ;; Parameters:    Size  Location     Type
 16018 ;;  ipTarget        4   52[BANK1 ] struct ipv4_address
 16019 ;;  link            1   56[BANK1 ] enum E232
 16020 ;; Auto vars:     Size  Location     Type
 16021 ;;  ipSender        4   74[BANK1 ] struct ipv4_address
 16022 ;;  waitingTime     4   70[BANK1 ] unsigned long 
 16023 ;;  timeStart       4   66[BANK1 ] unsigned long 
 16024 ;;  err             3   78[BANK1 ] struct error
 16025 ;;  index           1   65[BANK1 ] unsigned char 
 16026 ;; Return value:  Size  Location     Type
 16027 ;;                  3   52[BANK1 ] struct error
 16028 ;; Registers used:
 16029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16030 ;; Tracked objects:
 16031 ;;		On entry : 0/0
 16032 ;;		On exit  : 0/0
 16033 ;;		Unchanged: 0/0
 16034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16035 ;;      Params:         0       0       5       0       0       0       0       0       0
 16036 ;;      Locals:         0       0      16       0       0       0       0       0       0
 16037 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16038 ;;      Totals:         0       0      29       0       0       0       0       0       0
 16039 ;;Total ram usage:       29 bytes
 16040 ;; Hardware stack levels used:    1
 16041 ;; Hardware stack levels required when called:   11
 16042 ;; This function calls:
 16043 ;;		_UARTTransmitText
 16044 ;;		___lwmod
 16045 ;;		_arp_checkForEntry
 16046 ;;		_arp_sendRequest
 16047 ;;		_getMillis
 16048 ;;		_ipAdressToString
 16049 ;;		_ipv4_setToAllZero
 16050 ;;		_rand
 16051 ;; This function is called by:
 16052 ;;		_arp_background
 16053 ;; This function uses a non-reentrant model
 16054 ;;
 16055                           
 16056                           	psect	text60
 16057  001994                     __ptext60:
 16058                           	opt stack 0
 16059  001994                     _arp_probe:
 16060                           	opt stack 17
 16061                           
 16062                           ;arp.c: 243: time_t timeStart;
 16063                           ;arp.c: 244: time_t waitingTime;
 16064                           ;arp.c: 245: ipv4_address_t ipSender;
 16065                           ;arp.c: 246: uint8_t static probeCounter = 0;
 16066                           ;arp.c: 247: error_t err;
 16067                           ;arp.c: 249: enum states {
 16068                           ;arp.c: 250: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 16069                           ;arp.c: 251: };
 16070                           ;arp.c: 252: uint8_t static state = PREPARING_PROBE;
 16071                           ;arp.c: 253: uint8_t index;
 16072                           ;arp.c: 254: err.module = ERROR_MODULE_ARP;
 16073                           
 16074                           ;incstack = 0
 16075  001994  0E03               	movlw	3
 16076  001996  0101               	movlb	1	; () banked
 16077  001998  6F4E               	movwf	arp_probe@err& (0+255),b
 16078                           
 16079                           ;arp.c: 256: if (link == NO_LINK) {
 16080  00199A  5138               	movf	arp_probe@link& (0+255),w,b
 16081  00199C  A4D8               	btfss	status,2,c
 16082  00199E  D00F               	goto	l986
 16083                           
 16084                           ; BSR set to: 1
 16085                           ;arp.c: 257: state = PREPARING_PROBE;
 16086  0019A0  0E00               	movlw	0
 16087  0019A2  6FAB               	movwf	arp_probe@state& (0+255),b
 16088                           
 16089                           ;arp.c: 258: probeCounter = 0;
 16090  0019A4  0E00               	movlw	0
 16091  0019A6  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16092                           
 16093                           ;arp.c: 259: err.code = ERROR_ARP_CONNECTION_FAILED;
 16094  0019A8  0E01               	movlw	1
 16095  0019AA  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16096  0019AC  0E96               	movlw	150
 16097  0019AE  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16098                           
 16099                           ; BSR set to: 1
 16100                           ;arp.c: 260: return err;
 16101  0019B0  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16102  0019B4  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16103  0019B8  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16104                           
 16105                           ; BSR set to: 1
 16106  0019BC  0012               	return	
 16107  0019BE                     l986:
 16108                           
 16109                           ; BSR set to: 1
 16110                           ;arp.c: 261: }
 16111                           ;arp.c: 263: if (arp_checkForEntry(ipTarget, &index)) {
 16112                           
 16113                           ; BSR set to: 1
 16114  0019BE  C134  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 16115  0019C2  C135  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 16116  0019C6  C136  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 16117  0019CA  C137  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 16118  0019CE  0E41               	movlw	low arp_probe@index
 16119  0019D0  0100               	movlb	0	; () banked
 16120  0019D2  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 16121  0019D4  0E01               	movlw	high arp_probe@index
 16122  0019D6  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 16123  0019D8  EC94  F020         	call	_arp_checkForEntry	;wreg free
 16124  0019DC  0900               	iorlw	0
 16125  0019DE  B4D8               	btfsc	status,2,c
 16126  0019E0  D12A               	goto	l989
 16127                           
 16128                           ;arp.c: 264: state = ARP_ENTRY_FOUND;
 16129  0019E2  0E03               	movlw	3
 16130  0019E4  0101               	movlb	1	; () banked
 16131  0019E6  6FAB               	movwf	arp_probe@state& (0+255),b
 16132                           
 16133                           ; BSR set to: 1
 16134                           ;arp.c: 265: }
 16135                           ;arp.c: 267: switch (state) {
 16136  0019E8  D126               	goto	l989
 16137  0019EA                     
 16138                           ; BSR set to: 1
 16139                           ;arp.c: 269: ipv4_setToAllZero(&ipSender);
 16140                           
 16141                           ; BSR set to: 1
 16142  0019EA  0E4A               	movlw	low arp_probe@ipSender
 16143  0019EC  0100               	movlb	0	; () banked
 16144  0019EE  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 16145  0019F0  0E01               	movlw	high arp_probe@ipSender
 16146  0019F2  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 16147  0019F4  EC98  F02A         	call	_ipv4_setToAllZero	;wreg free
 16148                           
 16149                           ;arp.c: 270: timeStart = getMillis();
 16150  0019F8  EC8B  F02B         	call	_getMillis	;wreg free
 16151  0019FC  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16152  001A00  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16153  001A04  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16154  001A08  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16155                           
 16156                           ;arp.c: 271: waitingTime = rand() % 1000u;
 16157  001A0C  ECDB  F026         	call	_rand	;wreg free
 16158  001A10  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16159  001A14  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16160  001A18  0E03               	movlw	3
 16161  001A1A  0100               	movlb	0	; () banked
 16162  001A1C  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16163  001A1E  0EE8               	movlw	232
 16164  001A20  6F70               	movwf	___lwmod@divisor& (0+255),b
 16165  001A22  EC68  F028         	call	___lwmod	;wreg free
 16166  001A26  0100               	movlb	0	; () banked
 16167  001A28  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16168  001A2C  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16169  001A30  0101               	movlb	1	; () banked
 16170  001A32  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16171  001A34  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16172                           
 16173                           ; BSR set to: 1
 16174                           ;arp.c: 272: state = WAITING_TO_SEND;
 16175  001A36  0E01               	movlw	1
 16176  001A38  6FAB               	movwf	arp_probe@state& (0+255),b
 16177  001A3A  D054               	goto	l993
 16178  001A3C                     
 16179                           ; BSR set to: 1
 16180                           ;arp.c: 276: if (getMillis() - timeStart >= waitingTime) {
 16181                           
 16182                           ; BSR set to: 1
 16183  001A3C  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16184  001A40  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16185  001A44  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16186  001A48  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16187  001A4C  1F39               	comf	??_arp_probe& (0+255),f,b
 16188  001A4E  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16189  001A50  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16190  001A52  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16191  001A54  2B39               	incf	??_arp_probe& (0+255),f,b
 16192  001A56  0E00               	movlw	0
 16193  001A58  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16194  001A5A  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16195  001A5C  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16196  001A5E  EC8B  F02B         	call	_getMillis	;wreg free
 16197  001A62  0101               	movlb	1	; () banked
 16198  001A64  5139               	movf	??_arp_probe& (0+255),w,b
 16199  001A66  0100               	movlb	0	; () banked
 16200  001A68  2560               	addwf	?_getMillis& (0+255),w,b
 16201  001A6A  0101               	movlb	1	; () banked
 16202  001A6C  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16203  001A6E  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16204  001A70  0100               	movlb	0	; () banked
 16205  001A72  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16206  001A74  0101               	movlb	1	; () banked
 16207  001A76  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16208  001A78  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16209  001A7A  0100               	movlb	0	; () banked
 16210  001A7C  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16211  001A7E  0101               	movlb	1	; () banked
 16212  001A80  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16213  001A82  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16214  001A84  0100               	movlb	0	; () banked
 16215  001A86  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16216  001A88  0101               	movlb	1	; () banked
 16217  001A8A  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16218  001A8C  5146               	movf	arp_probe@waitingTime& (0+255),w,b
 16219  001A8E  5D3D               	subwf	(??_arp_probe+4)& (0+255),w,b
 16220  001A90  5147               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 16221  001A92  593E               	subwfb	(??_arp_probe+5)& (0+255),w,b
 16222  001A94  5148               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 16223  001A96  593F               	subwfb	(??_arp_probe+6)& (0+255),w,b
 16224  001A98  5149               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 16225  001A9A  5940               	subwfb	(??_arp_probe+7)& (0+255),w,b
 16226  001A9C  A0D8               	btfss	status,0,c
 16227  001A9E  D022               	goto	l993
 16228                           
 16229                           ; BSR set to: 1
 16230                           ;arp.c: 277: state = SENDING_PROBE;
 16231  001AA0  0E02               	movlw	2
 16232  001AA2  6FAB               	movwf	arp_probe@state& (0+255),b
 16233                           
 16234                           ; BSR set to: 1
 16235                           ;arp.c: 279: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 16236  001AA4  0EE8               	movlw	232
 16237  001AA6  6F39               	movwf	??_arp_probe& (0+255),b
 16238  001AA8  0E03               	movlw	3
 16239  001AAA  6F3A               	movwf	(??_arp_probe+1)& (0+255),b
 16240  001AAC  ECDB  F026         	call	_rand	;wreg free
 16241  001AB0  C06C  F06E         	movff	?_rand,___lwmod@dividend
 16242  001AB4  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 16243  001AB8  0E03               	movlw	3
 16244  001ABA  0100               	movlb	0	; () banked
 16245  001ABC  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 16246  001ABE  0EE8               	movlw	232
 16247  001AC0  6F70               	movwf	___lwmod@divisor& (0+255),b
 16248  001AC2  EC68  F028         	call	___lwmod	;wreg free
 16249  001AC6  0101               	movlb	1	; () banked
 16250  001AC8  5139               	movf	??_arp_probe& (0+255),w,b
 16251  001ACA  0100               	movlb	0	; () banked
 16252  001ACC  276E               	addwf	?___lwmod& (0+255),f,b
 16253  001ACE  0101               	movlb	1	; () banked
 16254  001AD0  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16255  001AD2  0100               	movlb	0	; () banked
 16256  001AD4  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 16257  001AD6  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 16258  001ADA  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 16259  001ADE  0101               	movlb	1	; () banked
 16260  001AE0  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 16261  001AE2  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 16262  001AE4                     l993:
 16263                           
 16264                           ; BSR set to: 1
 16265                           ;arp.c: 280: }
 16266                           ;arp.c: 281: err.code = ERROR_ARP_WAITING;
 16267                           
 16268                           ; BSR set to: 1
 16269  001AE4  0E01               	movlw	1
 16270  001AE6  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16271  001AE8  0E91               	movlw	145
 16272  001AEA  D0A3               	goto	L8
 16273  001AEC                     
 16274                           ; BSR set to: 1
 16275                           ;arp.c: 284: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 16276                           
 16277                           ; BSR set to: 1
 16278  001AEC  51AC               	movf	arp_probe@probeCounter& (0+255),w,b
 16279  001AEE  B4D8               	btfsc	status,2,c
 16280  001AF0  D032               	goto	u11580
 16281                           
 16282                           ; BSR set to: 1
 16283  001AF2  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 16284  001AF6  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 16285  001AFA  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 16286  001AFE  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 16287  001B02  1F39               	comf	??_arp_probe& (0+255),f,b
 16288  001B04  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 16289  001B06  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 16290  001B08  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 16291  001B0A  2B39               	incf	??_arp_probe& (0+255),f,b
 16292  001B0C  0E00               	movlw	0
 16293  001B0E  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 16294  001B10  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 16295  001B12  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 16296  001B14  EC8B  F02B         	call	_getMillis	;wreg free
 16297  001B18  0101               	movlb	1	; () banked
 16298  001B1A  5139               	movf	??_arp_probe& (0+255),w,b
 16299  001B1C  0100               	movlb	0	; () banked
 16300  001B1E  2560               	addwf	?_getMillis& (0+255),w,b
 16301  001B20  0101               	movlb	1	; () banked
 16302  001B22  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 16303  001B24  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 16304  001B26  0100               	movlb	0	; () banked
 16305  001B28  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 16306  001B2A  0101               	movlb	1	; () banked
 16307  001B2C  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 16308  001B2E  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 16309  001B30  0100               	movlb	0	; () banked
 16310  001B32  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 16311  001B34  0101               	movlb	1	; () banked
 16312  001B36  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 16313  001B38  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 16314  001B3A  0100               	movlb	0	; () banked
 16315  001B3C  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 16316  001B3E  0101               	movlb	1	; () banked
 16317  001B40  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 16318  001B42  513D               	movf	(??_arp_probe+4)& (0+255),w,b
 16319  001B44  5D46               	subwf	arp_probe@waitingTime& (0+255),w,b
 16320  001B46  513E               	movf	(??_arp_probe+5)& (0+255),w,b
 16321  001B48  5947               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 16322  001B4A  513F               	movf	(??_arp_probe+6)& (0+255),w,b
 16323  001B4C  5948               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 16324  001B4E  5140               	movf	(??_arp_probe+7)& (0+255),w,b
 16325  001B50  5949               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 16326  001B52  B0D8               	btfsc	status,0,c
 16327  001B54  D07E               	goto	l991
 16328  001B56                     u11580:
 16329                           
 16330                           ; BSR set to: 1
 16331                           ;arp.c: 285: timeStart = getMillis();
 16332                           
 16333                           ; BSR set to: 1
 16334  001B56  EC8B  F02B         	call	_getMillis	;wreg free
 16335  001B5A  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 16336  001B5E  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 16337  001B62  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 16338  001B66  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 16339                           
 16340                           ;arp.c: 287: if (probeCounter < 3u) {
 16341  001B6A  0E03               	movlw	3
 16342  001B6C  0101               	movlb	1	; () banked
 16343  001B6E  61AC               	cpfslt	arp_probe@probeCounter& (0+255),b
 16344  001B70  D047               	goto	l998
 16345                           
 16346                           ; BSR set to: 1
 16347                           ;arp.c: 289: UARTTransmitText("[ARP]: Sending Probe for ");
 16348  001B72  0ED8               	movlw	low STR_80
 16349  001B74  0100               	movlb	0	; () banked
 16350  001B76  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16351  001B78  0E7D               	movlw	high STR_80
 16352  001B7A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16353  001B7C  EC06  F027         	call	_UARTTransmitText	;wreg free
 16354                           
 16355                           ;arp.c: 290: UARTTransmitText(ipAdressToString(ipTarget));
 16356  001B80  C134  F073         	movff	arp_probe@ipTarget,ipAdressToString@ip
 16357  001B84  C135  F074         	movff	arp_probe@ipTarget+1,ipAdressToString@ip+1
 16358  001B88  C136  F075         	movff	arp_probe@ipTarget+2,ipAdressToString@ip+2
 16359  001B8C  C137  F076         	movff	arp_probe@ipTarget+3,ipAdressToString@ip+3
 16360  001B90  ECC6  F013         	call	_ipAdressToString	;wreg free
 16361  001B94  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16362  001B98  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16363  001B9C  EC06  F027         	call	_UARTTransmitText	;wreg free
 16364                           
 16365                           ;arp.c: 291: UARTTransmitText(" (reply to ");
 16366  001BA0  0E31               	movlw	low STR_81
 16367  001BA2  0100               	movlb	0	; () banked
 16368  001BA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16369  001BA6  0E7F               	movlw	high STR_81
 16370  001BA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16371  001BAA  EC06  F027         	call	_UARTTransmitText	;wreg free
 16372                           
 16373                           ;arp.c: 292: UARTTransmitText(ipAdressToString(ipSender));
 16374  001BAE  C14A  F073         	movff	arp_probe@ipSender,ipAdressToString@ip
 16375  001BB2  C14B  F074         	movff	arp_probe@ipSender+1,ipAdressToString@ip+1
 16376  001BB6  C14C  F075         	movff	arp_probe@ipSender+2,ipAdressToString@ip+2
 16377  001BBA  C14D  F076         	movff	arp_probe@ipSender+3,ipAdressToString@ip+3
 16378  001BBE  ECC6  F013         	call	_ipAdressToString	;wreg free
 16379  001BC2  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 16380  001BC6  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 16381  001BCA  EC06  F027         	call	_UARTTransmitText	;wreg free
 16382                           
 16383                           ;arp.c: 293: UARTTransmitText(")\n\r");
 16384  001BCE  0EE9               	movlw	low STR_43
 16385  001BD0  0100               	movlb	0	; () banked
 16386  001BD2  6F98               	movwf	UARTTransmitText@str& (0+255),b
 16387  001BD4  0E7F               	movlw	high STR_43
 16388  001BD6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 16389  001BD8  EC06  F027         	call	_UARTTransmitText	;wreg free
 16390                           
 16391                           ;arp.c: 295: arp_sendRequest(ipSender, ipTarget);
 16392  001BDC  C14A  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 16393  001BE0  C14B  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 16394  001BE4  C14C  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 16395  001BE8  C14D  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 16396  001BEC  C134  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 16397  001BF0  C135  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 16398  001BF4  C136  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 16399  001BF8  C137  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 16400  001BFC  EC34  F022         	call	_arp_sendRequest	;wreg free
 16401  001C00                     l998:
 16402                           
 16403                           ;arp.c: 296: }
 16404                           ;arp.c: 297: if (probeCounter >= 3u) {
 16405  001C00  0E02               	movlw	2
 16406  001C02  0101               	movlb	1	; () banked
 16407  001C04  65AC               	cpfsgt	arp_probe@probeCounter& (0+255),b
 16408  001C06  D008               	goto	l999
 16409                           
 16410                           ; BSR set to: 1
 16411                           ;arp.c: 298: probeCounter = 0;
 16412  001C08  0E00               	movlw	0
 16413  001C0A  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16414                           
 16415                           ;arp.c: 299: state = PREPARING_PROBE;
 16416  001C0C  0E00               	movlw	0
 16417  001C0E  6FAB               	movwf	arp_probe@state& (0+255),b
 16418                           
 16419                           ;arp.c: 300: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 16420  001C10  0E01               	movlw	1
 16421  001C12  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16422  001C14  0E93               	movlw	147
 16423  001C16  D00D               	goto	L8
 16424  001C18                     l999:
 16425                           
 16426                           ; BSR set to: 1
 16427                           ;arp.c: 302: err.code = ERROR_ARP_WAITING;
 16428                           
 16429                           ; BSR set to: 1
 16430  001C18  0E01               	movlw	1
 16431  001C1A  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16432  001C1C  0E91               	movlw	145
 16433  001C1E  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16434                           
 16435                           ; BSR set to: 1
 16436                           ;arp.c: 303: probeCounter++;
 16437  001C20  2BAC               	incf	arp_probe@probeCounter& (0+255),f,b
 16438                           
 16439                           ; BSR set to: 1
 16440                           ;arp.c: 304: }
 16441                           ;arp.c: 305: }
 16442                           ;arp.c: 306: break;
 16443                           
 16444                           ; BSR set to: 1
 16445  001C22  D017               	goto	l991
 16446  001C24                     
 16447                           ; BSR set to: 1
 16448                           ;arp.c: 308: probeCounter = 0;
 16449                           
 16450                           ; BSR set to: 1
 16451  001C24  0E00               	movlw	0
 16452  001C26  6FAC               	movwf	arp_probe@probeCounter& (0+255),b
 16453                           
 16454                           ;arp.c: 309: state = PREPARING_PROBE;
 16455  001C28  0E00               	movlw	0
 16456  001C2A  6FAB               	movwf	arp_probe@state& (0+255),b
 16457                           
 16458                           ;arp.c: 310: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 16459  001C2C  0E01               	movlw	1
 16460  001C2E  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 16461  001C30  0E95               	movlw	149
 16462  001C32                     L8:
 16463  001C32  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 16464                           
 16465                           ;arp.c: 311: }
 16466  001C34  D00E               	goto	l991
 16467  001C36                     l989:
 16468                           
 16469                           ; BSR set to: 1
 16470  001C36  0101               	movlb	1	; () banked
 16471  001C38  51AB               	movf	arp_probe@state& (0+255),w,b
 16472                           
 16473                           ; Switch size 1, requested type "space"
 16474                           ; Number of cases is 4, Range of values is 0 to 3
 16475                           ; switch strategies available:
 16476                           ; Name         Instructions Cycles
 16477                           ; simple_byte           13     7 (average)
 16478                           ;	Chosen strategy is simple_byte
 16479  001C3A  0A00               	xorlw	0	; case 0
 16480  001C3C  B4D8               	btfsc	status,2,c
 16481  001C3E  D6D5               	goto	l990
 16482  001C40  0A01               	xorlw	1	; case 1
 16483  001C42  B4D8               	btfsc	status,2,c
 16484  001C44  D6FB               	goto	l992
 16485  001C46  0A03               	xorlw	3	; case 2
 16486  001C48  B4D8               	btfsc	status,2,c
 16487  001C4A  D750               	goto	l994
 16488  001C4C  0A01               	xorlw	1	; case 3
 16489  001C4E  B4D8               	btfsc	status,2,c
 16490  001C50  D7E9               	goto	l1001
 16491  001C52                     l991:
 16492                           
 16493                           ; BSR set to: 1
 16494                           ;arp.c: 312: return err;
 16495  001C52  C14E  F134         	movff	arp_probe@err,?_arp_probe
 16496  001C56  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 16497  001C5A  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 16498                           
 16499                           ; BSR set to: 1
 16500  001C5E  0012               	return		;funcret
 16501  001C60                     __end_of_arp_probe:
 16502                           	opt stack 0
 16503                           tblptru	equ	0xFF8
 16504                           tblptrh	equ	0xFF7
 16505                           tblptrl	equ	0xFF6
 16506                           tablat	equ	0xFF5
 16507                           prodh	equ	0xFF4
 16508                           prodl	equ	0xFF3
 16509                           intcon	equ	0xFF2
 16510                           intcon3	equ	0xFF0
 16511                           indf0	equ	0xFEF
 16512                           postinc0	equ	0xFEE
 16513                           plusw0	equ	0xFEB
 16514                           fsr0h	equ	0xFEA
 16515                           fsr0l	equ	0xFE9
 16516                           wreg	equ	0xFE8
 16517                           indf1	equ	0xFE7
 16518                           postinc1	equ	0xFE6
 16519                           postdec1	equ	0xFE5
 16520                           plusw1	equ	0xFE3
 16521                           fsr1h	equ	0xFE2
 16522                           fsr1l	equ	0xFE1
 16523                           indf2	equ	0xFDF
 16524                           postinc2	equ	0xFDE
 16525                           postdec2	equ	0xFDD
 16526                           plusw2	equ	0xFDB
 16527                           fsr2h	equ	0xFDA
 16528                           fsr2l	equ	0xFD9
 16529                           status	equ	0xFD8
 16530                           
 16531 ;; *************** function _rand *****************
 16532 ;; Defined at:
 16533 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 16534 ;; Parameters:    Size  Location     Type
 16535 ;;		None
 16536 ;; Auto vars:     Size  Location     Type
 16537 ;;		None
 16538 ;; Return value:  Size  Location     Type
 16539 ;;                  2   12[BANK0 ] int 
 16540 ;; Registers used:
 16541 ;;		wreg, status,2, status,0, cstack
 16542 ;; Tracked objects:
 16543 ;;		On entry : 0/0
 16544 ;;		On exit  : 0/0
 16545 ;;		Unchanged: 0/0
 16546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16547 ;;      Params:         0       2       0       0       0       0       0       0       0
 16548 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16549 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16550 ;;      Totals:         0       2       0       0       0       0       0       0       0
 16551 ;;Total ram usage:        2 bytes
 16552 ;; Hardware stack levels used:    1
 16553 ;; Hardware stack levels required when called:    5
 16554 ;; This function calls:
 16555 ;;		___lmul
 16556 ;; This function is called by:
 16557 ;;		_main
 16558 ;;		_arp_probe
 16559 ;; This function uses a non-reentrant model
 16560 ;;
 16561                           
 16562                           	psect	text61
 16563  004DB6                     __ptext61:
 16564                           	opt stack 0
 16565  004DB6                     _rand:
 16566                           	opt stack 25
 16567                           
 16568                           ; BSR set to: 1
 16569                           ;incstack = 0
 16570  004DB6  C049  F060         	movff	_randx,___lmul@multiplier
 16571  004DBA  C04A  F061         	movff	_randx+1,___lmul@multiplier+1
 16572  004DBE  C04B  F062         	movff	_randx+2,___lmul@multiplier+2
 16573  004DC2  C04C  F063         	movff	_randx+3,___lmul@multiplier+3
 16574  004DC6  0E6D               	movlw	109
 16575  004DC8  0100               	movlb	0	; () banked
 16576  004DCA  6F64               	movwf	___lmul@multiplicand& (0+255),b
 16577  004DCC  0E4E               	movlw	78
 16578  004DCE  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 16579  004DD0  0EC6               	movlw	198
 16580  004DD2  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 16581  004DD4  0E41               	movlw	65
 16582  004DD6  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 16583  004DD8  ECAF  F026         	call	___lmul	;wreg free
 16584  004DDC  C060  F049         	movff	?___lmul,_randx
 16585  004DE0  C061  F04A         	movff	?___lmul+1,_randx+1
 16586  004DE4  C062  F04B         	movff	?___lmul+2,_randx+2
 16587  004DE8  C063  F04C         	movff	?___lmul+3,_randx+3
 16588  004DEC  0E39               	movlw	57
 16589  004DEE  2649               	addwf	_randx,f,c
 16590  004DF0  0E30               	movlw	48
 16591  004DF2  224A               	addwfc	_randx+1,f,c
 16592  004DF4  0E00               	movlw	0
 16593  004DF6  224B               	addwfc	_randx+2,f,c
 16594  004DF8  0E00               	movlw	0
 16595  004DFA  224C               	addwfc	_randx+3,f,c
 16596  004DFC  0EFF               	movlw	255
 16597  004DFE  144B               	andwf	_randx+2,w,c
 16598  004E00  0100               	movlb	0	; () banked
 16599  004E02  6F6C               	movwf	?_rand& (0+255),b
 16600  004E04  0E7F               	movlw	127
 16601  004E06  144C               	andwf	_randx+3,w,c
 16602  004E08  6F6D               	movwf	(?_rand+1)& (0+255),b
 16603  004E0A  0012               	return	
 16604  004E0C                     __end_of_rand:
 16605                           	opt stack 0
 16606                           tblptru	equ	0xFF8
 16607                           tblptrh	equ	0xFF7
 16608                           tblptrl	equ	0xFF6
 16609                           tablat	equ	0xFF5
 16610                           prodh	equ	0xFF4
 16611                           prodl	equ	0xFF3
 16612                           intcon	equ	0xFF2
 16613                           intcon3	equ	0xFF0
 16614                           indf0	equ	0xFEF
 16615                           postinc0	equ	0xFEE
 16616                           plusw0	equ	0xFEB
 16617                           fsr0h	equ	0xFEA
 16618                           fsr0l	equ	0xFE9
 16619                           wreg	equ	0xFE8
 16620                           indf1	equ	0xFE7
 16621                           postinc1	equ	0xFE6
 16622                           postdec1	equ	0xFE5
 16623                           plusw1	equ	0xFE3
 16624                           fsr1h	equ	0xFE2
 16625                           fsr1l	equ	0xFE1
 16626                           indf2	equ	0xFDF
 16627                           postinc2	equ	0xFDE
 16628                           postdec2	equ	0xFDD
 16629                           plusw2	equ	0xFDB
 16630                           fsr2h	equ	0xFDA
 16631                           fsr2l	equ	0xFD9
 16632                           status	equ	0xFD8
 16633                           
 16634 ;; *************** function ___lmul *****************
 16635 ;; Defined at:
 16636 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 16637 ;; Parameters:    Size  Location     Type
 16638 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16639 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16640 ;; Auto vars:     Size  Location     Type
 16641 ;;  product         4    8[BANK0 ] unsigned long 
 16642 ;; Return value:  Size  Location     Type
 16643 ;;                  4    0[BANK0 ] unsigned long 
 16644 ;; Registers used:
 16645 ;;		wreg, status,2, status,0
 16646 ;; Tracked objects:
 16647 ;;		On entry : 0/0
 16648 ;;		On exit  : 0/0
 16649 ;;		Unchanged: 0/0
 16650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16651 ;;      Params:         0       8       0       0       0       0       0       0       0
 16652 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16654 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16655 ;;Total ram usage:       12 bytes
 16656 ;; Hardware stack levels used:    1
 16657 ;; Hardware stack levels required when called:    4
 16658 ;; This function calls:
 16659 ;;		Nothing
 16660 ;; This function is called by:
 16661 ;;		_rand
 16662 ;; This function uses a non-reentrant model
 16663 ;;
 16664                           
 16665                           	psect	text62
 16666  004D5E                     __ptext62:
 16667                           	opt stack 0
 16668  004D5E                     ___lmul:
 16669                           	opt stack 25
 16670                           
 16671                           ; BSR set to: 0
 16672                           ;incstack = 0
 16673  004D5E  0E00               	movlw	0
 16674  004D60  0100               	movlb	0	; () banked
 16675  004D62  6F68               	movwf	___lmul@product& (0+255),b
 16676  004D64  0E00               	movlw	0
 16677  004D66  6F69               	movwf	(___lmul@product+1)& (0+255),b
 16678  004D68  0E00               	movlw	0
 16679  004D6A  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 16680  004D6C  0E00               	movlw	0
 16681  004D6E  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 16682  004D70                     
 16683                           ; BSR set to: 0
 16684                           
 16685                           ; BSR set to: 0
 16686  004D70  A160               	btfss	___lmul@multiplier& (0+255),0,b
 16687  004D72  D008               	goto	l1226
 16688                           
 16689                           ; BSR set to: 0
 16690  004D74  5164               	movf	___lmul@multiplicand& (0+255),w,b
 16691  004D76  2768               	addwf	___lmul@product& (0+255),f,b
 16692  004D78  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 16693  004D7A  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 16694  004D7C  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 16695  004D7E  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 16696  004D80  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 16697  004D82  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 16698  004D84                     l1226:
 16699                           
 16700                           ; BSR set to: 0
 16701                           
 16702                           ; BSR set to: 0
 16703  004D84  90D8               	bcf	status,0,c
 16704  004D86  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 16705  004D88  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 16706  004D8A  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 16707  004D8C  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 16708                           
 16709                           ; BSR set to: 0
 16710  004D8E  90D8               	bcf	status,0,c
 16711  004D90  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 16712  004D92  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 16713  004D94  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 16714  004D96  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 16715  004D98  5160               	movf	___lmul@multiplier& (0+255),w,b
 16716  004D9A  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 16717  004D9C  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 16718  004D9E  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 16719  004DA0  A4D8               	btfss	status,2,c
 16720  004DA2  D7E6               	goto	l1225
 16721                           
 16722                           ; BSR set to: 0
 16723  004DA4  C068  F060         	movff	___lmul@product,?___lmul
 16724  004DA8  C069  F061         	movff	___lmul@product+1,?___lmul+1
 16725  004DAC  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 16726  004DB0  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 16727                           
 16728                           ; BSR set to: 0
 16729  004DB4  0012               	return		;funcret
 16730  004DB6                     __end_of___lmul:
 16731                           	opt stack 0
 16732                           tblptru	equ	0xFF8
 16733                           tblptrh	equ	0xFF7
 16734                           tblptrl	equ	0xFF6
 16735                           tablat	equ	0xFF5
 16736                           prodh	equ	0xFF4
 16737                           prodl	equ	0xFF3
 16738                           intcon	equ	0xFF2
 16739                           intcon3	equ	0xFF0
 16740                           indf0	equ	0xFEF
 16741                           postinc0	equ	0xFEE
 16742                           plusw0	equ	0xFEB
 16743                           fsr0h	equ	0xFEA
 16744                           fsr0l	equ	0xFE9
 16745                           wreg	equ	0xFE8
 16746                           indf1	equ	0xFE7
 16747                           postinc1	equ	0xFE6
 16748                           postdec1	equ	0xFE5
 16749                           plusw1	equ	0xFE3
 16750                           fsr1h	equ	0xFE2
 16751                           fsr1l	equ	0xFE1
 16752                           indf2	equ	0xFDF
 16753                           postinc2	equ	0xFDE
 16754                           postdec2	equ	0xFDD
 16755                           plusw2	equ	0xFDB
 16756                           fsr2h	equ	0xFDA
 16757                           fsr2l	equ	0xFD9
 16758                           status	equ	0xFD8
 16759                           
 16760 ;; *************** function _ipv4_setToAllZero *****************
 16761 ;; Defined at:
 16762 ;;		line 304 in file "src/stack/protocols/ipv4.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 16765 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 16766 ;; Auto vars:     Size  Location     Type
 16767 ;;  i               1    2[BANK0 ] unsigned char 
 16768 ;; Return value:  Size  Location     Type
 16769 ;;                  1    wreg      void 
 16770 ;; Registers used:
 16771 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16772 ;; Tracked objects:
 16773 ;;		On entry : 0/0
 16774 ;;		On exit  : 0/0
 16775 ;;		Unchanged: 0/0
 16776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16777 ;;      Params:         0       2       0       0       0       0       0       0       0
 16778 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16779 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16780 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16781 ;;Total ram usage:        3 bytes
 16782 ;; Hardware stack levels used:    1
 16783 ;; Hardware stack levels required when called:    4
 16784 ;; This function calls:
 16785 ;;		Nothing
 16786 ;; This function is called by:
 16787 ;;		_arp_probe
 16788 ;;		_arp_init
 16789 ;; This function uses a non-reentrant model
 16790 ;;
 16791                           
 16792                           	psect	text63
 16793  005530                     __ptext63:
 16794                           	opt stack 0
 16795  005530                     _ipv4_setToAllZero:
 16796                           	opt stack 24
 16797                           
 16798                           ;ipv4.c: 305: for (uint8_t i = 0; i < 4; i++) {
 16799                           
 16800                           ; BSR set to: 0
 16801                           ;incstack = 0
 16802  005530  0E00               	movlw	0
 16803  005532  0100               	movlb	0	; () banked
 16804  005534  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 16805  005536                     l9459:
 16806                           
 16807                           ; BSR set to: 0
 16808  005536  0E03               	movlw	3
 16809  005538  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 16810  00553A  D001               	goto	l1200
 16811  00553C  0012               	return	
 16812  00553E                     l1200:
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;ipv4.c: 306: ip->address[i] = 0x00;
 16816                           
 16817                           ; BSR set to: 0
 16818  00553E  5162               	movf	ipv4_setToAllZero@i& (0+255),w,b
 16819  005540  0D01               	mullw	1
 16820  005542  50F3               	movf	prodl,w,c
 16821  005544  2560               	addwf	ipv4_setToAllZero@ip& (0+255),w,b
 16822  005546  6ED9               	movwf	fsr2l,c
 16823  005548  50F4               	movf	prodh,w,c
 16824  00554A  2161               	addwfc	(ipv4_setToAllZero@ip+1)& (0+255),w,b
 16825  00554C  6EDA               	movwf	fsr2h,c
 16826  00554E  0E00               	movlw	0
 16827  005550  6EDF               	movwf	indf2,c
 16828                           
 16829                           ; BSR set to: 0
 16830  005552  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 16831  005554  D7F0               	goto	l9459
 16832  005556                     __end_of_ipv4_setToAllZero:
 16833                           	opt stack 0
 16834                           tblptru	equ	0xFF8
 16835                           tblptrh	equ	0xFF7
 16836                           tblptrl	equ	0xFF6
 16837                           tablat	equ	0xFF5
 16838                           prodh	equ	0xFF4
 16839                           prodl	equ	0xFF3
 16840                           intcon	equ	0xFF2
 16841                           intcon3	equ	0xFF0
 16842                           indf0	equ	0xFEF
 16843                           postinc0	equ	0xFEE
 16844                           plusw0	equ	0xFEB
 16845                           fsr0h	equ	0xFEA
 16846                           fsr0l	equ	0xFE9
 16847                           wreg	equ	0xFE8
 16848                           indf1	equ	0xFE7
 16849                           postinc1	equ	0xFE6
 16850                           postdec1	equ	0xFE5
 16851                           plusw1	equ	0xFE3
 16852                           fsr1h	equ	0xFE2
 16853                           fsr1l	equ	0xFE1
 16854                           indf2	equ	0xFDF
 16855                           postinc2	equ	0xFDE
 16856                           postdec2	equ	0xFDD
 16857                           plusw2	equ	0xFDB
 16858                           fsr2h	equ	0xFDA
 16859                           fsr2l	equ	0xFD9
 16860                           status	equ	0xFD8
 16861                           
 16862 ;; *************** function _arp_gratuitous *****************
 16863 ;; Defined at:
 16864 ;;		line 315 in file "src/stack/protocols/arp.c"
 16865 ;; Parameters:    Size  Location     Type
 16866 ;;  ip              4   52[BANK1 ] struct ipv4_address
 16867 ;;  link            1   56[BANK1 ] enum E232
 16868 ;; Auto vars:     Size  Location     Type
 16869 ;;  err             3  157[BANK0 ] struct error
 16870 ;;  index           1  156[BANK0 ] unsigned char 
 16871 ;; Return value:  Size  Location     Type
 16872 ;;                  3   52[BANK1 ] struct error
 16873 ;; Registers used:
 16874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16880 ;;      Params:         0       0       5       0       0       0       0       0       0
 16881 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16882 ;;      Temps:          0       0       8       0       0       0       0       0       0
 16883 ;;      Totals:         0       4      13       0       0       0       0       0       0
 16884 ;;Total ram usage:       17 bytes
 16885 ;; Hardware stack levels used:    1
 16886 ;; Hardware stack levels required when called:   11
 16887 ;; This function calls:
 16888 ;;		_UARTTransmitText
 16889 ;;		_arp_checkForEntry
 16890 ;;		_arp_sendRequest
 16891 ;;		_getMillis
 16892 ;;		_ipAdressToString
 16893 ;; This function is called by:
 16894 ;;		_arp_background
 16895 ;; This function uses a non-reentrant model
 16896 ;;
 16897                           
 16898                           	psect	text64
 16899  002122                     __ptext64:
 16900                           	opt stack 0
 16901  002122                     _arp_gratuitous:
 16902                           	opt stack 17
 16903                           
 16904                           ;arp.c: 316: uint8_t static announceCounter = 0;
 16905                           ;arp.c: 317: uint8_t static state = 0;
 16906                           ;arp.c: 318: time_t static timeStart = 0;
 16907                           ;arp.c: 319: uint8_t index;
 16908                           ;arp.c: 320: error_t err;
 16909                           ;arp.c: 322: enum states {
 16910                           ;arp.c: 323: INIT, WAIT_FOR_ANNOUNCE, ANNOUNCING, ENTRY_FOUND
 16911                           ;arp.c: 324: };
 16912                           ;arp.c: 325: err.module = ERROR_MODULE_ARP;
 16913                           
 16914                           ; BSR set to: 0
 16915                           ;incstack = 0
 16916  002122  0E03               	movlw	3
 16917  002124  0100               	movlb	0	; () banked
 16918  002126  6FFD               	movwf	arp_gratuitous@err& (0+255),b
 16919                           
 16920                           ;arp.c: 326: err.code = ERROR_ARP_WAITING;
 16921  002128  0E01               	movlw	1
 16922  00212A  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16923  00212C  0E91               	movlw	145
 16924  00212E  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16925                           
 16926                           ;arp.c: 328: if (link == NO_LINK) {
 16927  002130  0101               	movlb	1	; () banked
 16928  002132  5138               	movf	arp_gratuitous@link& (0+255),w,b
 16929  002134  A4D8               	btfss	status,2,c
 16930  002136  D010               	goto	l1010
 16931                           
 16932                           ; BSR set to: 1
 16933                           ;arp.c: 329: announceCounter = 0;
 16934  002138  0E00               	movlw	0
 16935  00213A  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 16936                           
 16937                           ;arp.c: 330: state = INIT;
 16938  00213C  0E00               	movlw	0
 16939  00213E  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 16940                           
 16941                           ;arp.c: 331: err.code = ERROR_ARP_CONNECTION_FAILED;
 16942  002140  0E01               	movlw	1
 16943  002142  0100               	movlb	0	; () banked
 16944  002144  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16945  002146  0E96               	movlw	150
 16946  002148  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16947                           
 16948                           ; BSR set to: 0
 16949                           ;arp.c: 332: return err;
 16950  00214A  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 16951  00214E  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 16952  002152  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 16953                           
 16954                           ; BSR set to: 0
 16955  002156  0012               	return	
 16956  002158                     l1010:
 16957                           
 16958                           ;arp.c: 333: }
 16959                           ;arp.c: 335: if (arp_checkForEntry(ip, &index)) {
 16960                           
 16961                           ; BSR set to: 0
 16962  002158  C134  F067         	movff	arp_gratuitous@ip,arp_checkForEntry@ip
 16963  00215C  C135  F068         	movff	arp_gratuitous@ip+1,arp_checkForEntry@ip+1
 16964  002160  C136  F069         	movff	arp_gratuitous@ip+2,arp_checkForEntry@ip+2
 16965  002164  C137  F06A         	movff	arp_gratuitous@ip+3,arp_checkForEntry@ip+3
 16966  002168  0EFC               	movlw	low arp_gratuitous@index
 16967  00216A  0100               	movlb	0	; () banked
 16968  00216C  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 16969  00216E  0E00               	movlw	high arp_gratuitous@index
 16970  002170  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 16971  002172  EC94  F020         	call	_arp_checkForEntry	;wreg free
 16972  002176  0900               	iorlw	0
 16973  002178  B4D8               	btfsc	status,2,c
 16974  00217A  D0E0               	goto	l1013
 16975                           
 16976                           ;arp.c: 336: state = ENTRY_FOUND;
 16977  00217C  0E03               	movlw	3
 16978  00217E  0101               	movlb	1	; () banked
 16979  002180  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 16980                           
 16981                           ; BSR set to: 1
 16982                           ;arp.c: 337: }
 16983                           ;arp.c: 339: switch (state) {
 16984  002182  D0DC               	goto	l1013
 16985  002184                     
 16986                           ; BSR set to: 1
 16987                           ;arp.c: 341: err.code = ERROR_ARP_WAITING;
 16988                           
 16989                           ; BSR set to: 1
 16990  002184  0E01               	movlw	1
 16991  002186  0100               	movlb	0	; () banked
 16992  002188  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 16993  00218A  0E91               	movlw	145
 16994  00218C  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;arp.c: 342: timeStart = getMillis();
 16998  00218E  EC8B  F02B         	call	_getMillis	;wreg free
 16999  002192  C060  F1A0         	movff	?_getMillis,arp_gratuitous@timeStart
 17000  002196  C061  F1A1         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17001  00219A  C062  F1A2         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17002  00219E  C063  F1A3         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17003                           
 17004                           ;arp.c: 343: state = WAIT_FOR_ANNOUNCE;
 17005  0021A2  0E01               	movlw	1
 17006  0021A4  0101               	movlb	1	; () banked
 17007  0021A6  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17008                           
 17009                           ;arp.c: 344: break;
 17010  0021A8  D0D7               	goto	l1015
 17011  0021AA                     
 17012                           ; BSR set to: 1
 17013                           ;arp.c: 346: err.code = ERROR_ARP_WAITING;
 17014                           
 17015                           ; BSR set to: 1
 17016  0021AA  0E01               	movlw	1
 17017  0021AC  0100               	movlb	0	; () banked
 17018  0021AE  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17019  0021B0  0E91               	movlw	145
 17020  0021B2  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17021                           
 17022                           ; BSR set to: 0
 17023                           ;arp.c: 347: if ((getMillis() - timeStart) > 2000u) {
 17024  0021B4  C1A0  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17025  0021B8  C1A1  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17026  0021BC  C1A2  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17027  0021C0  C1A3  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17028  0021C4  0101               	movlb	1	; () banked
 17029  0021C6  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17030  0021C8  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17031  0021CA  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17032  0021CC  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17033  0021CE  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17034  0021D0  0E00               	movlw	0
 17035  0021D2  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17036  0021D4  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17037  0021D6  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17038  0021D8  EC8B  F02B         	call	_getMillis	;wreg free
 17039  0021DC  0101               	movlb	1	; () banked
 17040  0021DE  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17041  0021E0  0100               	movlb	0	; () banked
 17042  0021E2  2560               	addwf	?_getMillis& (0+255),w,b
 17043  0021E4  0101               	movlb	1	; () banked
 17044  0021E6  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17045  0021E8  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17046  0021EA  0100               	movlb	0	; () banked
 17047  0021EC  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17048  0021EE  0101               	movlb	1	; () banked
 17049  0021F0  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17050  0021F2  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17051  0021F4  0100               	movlb	0	; () banked
 17052  0021F6  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17053  0021F8  0101               	movlb	1	; () banked
 17054  0021FA  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17055  0021FC  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17056  0021FE  0100               	movlb	0	; () banked
 17057  002200  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17058  002202  0101               	movlb	1	; () banked
 17059  002204  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17060  002206  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17061  002208  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17062  00220A  E106               	bnz	u11630
 17063  00220C  0ED1               	movlw	209
 17064  00220E  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17065  002210  0E07               	movlw	7
 17066  002212  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17067  002214  A0D8               	btfss	status,0,c
 17068  002216  D0A0               	goto	l1015
 17069  002218                     u11630:
 17070                           
 17071                           ; BSR set to: 1
 17072                           ;arp.c: 348: state = ANNOUNCING;
 17073  002218  0E02               	movlw	2
 17074  00221A  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17075                           
 17076                           ;arp.c: 349: announceCounter = 0;
 17077  00221C  0E00               	movlw	0
 17078  00221E  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17079                           
 17080                           ; BSR set to: 1
 17081                           ;arp.c: 350: }
 17082                           ;arp.c: 351: break;
 17083  002220  D09B               	goto	l1015
 17084  002222                     
 17085                           ; BSR set to: 1
 17086                           ;arp.c: 353: err.code = ERROR_ARP_WAITING;
 17087                           
 17088                           ; BSR set to: 1
 17089  002222  0E01               	movlw	1
 17090  002224  0100               	movlb	0	; () banked
 17091  002226  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17092  002228  0E91               	movlw	145
 17093  00222A  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17094                           
 17095                           ;arp.c: 354: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 17096  00222C  0101               	movlb	1	; () banked
 17097  00222E  51AA               	movf	arp_gratuitous@announceCounter& (0+255),w,b
 17098  002230  B4D8               	btfsc	status,2,c
 17099  002232  D031               	goto	u11650
 17100                           
 17101                           ; BSR set to: 1
 17102  002234  C1A0  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 17103  002238  C1A1  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 17104  00223C  C1A2  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 17105  002240  C1A3  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 17106  002244  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 17107  002246  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 17108  002248  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 17109  00224A  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 17110  00224C  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 17111  00224E  0E00               	movlw	0
 17112  002250  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 17113  002252  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 17114  002254  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 17115  002256  EC8B  F02B         	call	_getMillis	;wreg free
 17116  00225A  0101               	movlb	1	; () banked
 17117  00225C  5139               	movf	??_arp_gratuitous& (0+255),w,b
 17118  00225E  0100               	movlb	0	; () banked
 17119  002260  2560               	addwf	?_getMillis& (0+255),w,b
 17120  002262  0101               	movlb	1	; () banked
 17121  002264  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 17122  002266  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 17123  002268  0100               	movlb	0	; () banked
 17124  00226A  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 17125  00226C  0101               	movlb	1	; () banked
 17126  00226E  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 17127  002270  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 17128  002272  0100               	movlb	0	; () banked
 17129  002274  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 17130  002276  0101               	movlb	1	; () banked
 17131  002278  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 17132  00227A  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 17133  00227C  0100               	movlb	0	; () banked
 17134  00227E  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 17135  002280  0101               	movlb	1	; () banked
 17136  002282  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 17137  002284  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 17138  002286  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 17139  002288  E106               	bnz	l9857
 17140  00228A  0ED1               	movlw	209
 17141  00228C  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 17142  00228E  0E07               	movlw	7
 17143  002290  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 17144  002292  A0D8               	btfss	status,0,c
 17145  002294  D03C               	goto	l1019
 17146  002296                     u11650:
 17147  002296                     l9857:
 17148                           
 17149                           ; BSR set to: 1
 17150                           ;arp.c: 356: UARTTransmitText("[ARP]: Sending Gratuitous ARP request for ");
 17151  002296  0EE9               	movlw	low STR_83
 17152  002298  0100               	movlb	0	; () banked
 17153  00229A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17154  00229C  0E7A               	movlw	high STR_83
 17155  00229E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17156  0022A0  EC06  F027         	call	_UARTTransmitText	;wreg free
 17157                           
 17158                           ;arp.c: 357: UARTTransmitText(ipAdressToString(ip));
 17159  0022A4  C134  F073         	movff	arp_gratuitous@ip,ipAdressToString@ip
 17160  0022A8  C135  F074         	movff	arp_gratuitous@ip+1,ipAdressToString@ip+1
 17161  0022AC  C136  F075         	movff	arp_gratuitous@ip+2,ipAdressToString@ip+2
 17162  0022B0  C137  F076         	movff	arp_gratuitous@ip+3,ipAdressToString@ip+3
 17163  0022B4  ECC6  F013         	call	_ipAdressToString	;wreg free
 17164  0022B8  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 17165  0022BC  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 17166  0022C0  EC06  F027         	call	_UARTTransmitText	;wreg free
 17167                           
 17168                           ;arp.c: 358: UARTTransmitText("\n\r");
 17169  0022C4  0ED4               	movlw	low (STR_23+35)
 17170  0022C6  0100               	movlb	0	; () banked
 17171  0022C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 17172  0022CA  0E7B               	movlw	high (STR_23+35)
 17173  0022CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 17174  0022CE  EC06  F027         	call	_UARTTransmitText	;wreg free
 17175                           
 17176                           ;arp.c: 360: timeStart = getMillis();
 17177  0022D2  EC8B  F02B         	call	_getMillis	;wreg free
 17178  0022D6  C060  F1A0         	movff	?_getMillis,arp_gratuitous@timeStart
 17179  0022DA  C061  F1A1         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 17180  0022DE  C062  F1A2         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 17181  0022E2  C063  F1A3         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 17182                           
 17183                           ;arp.c: 361: arp_sendRequest(ip, ip);
 17184  0022E6  C134  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 17185  0022EA  C135  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 17186  0022EE  C136  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 17187  0022F2  C137  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 17188  0022F6  C134  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 17189  0022FA  C135  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 17190  0022FE  C136  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 17191  002302  C137  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 17192  002306  EC34  F022         	call	_arp_sendRequest	;wreg free
 17193                           
 17194                           ;arp.c: 362: announceCounter++;
 17195  00230A  0101               	movlb	1	; () banked
 17196  00230C  2BAA               	incf	arp_gratuitous@announceCounter& (0+255),f,b
 17197  00230E                     l1019:
 17198                           
 17199                           ; BSR set to: 1
 17200                           ;arp.c: 363: }
 17201                           ;arp.c: 364: if (announceCounter >= 2u) {
 17202                           
 17203                           ; BSR set to: 1
 17204  00230E  0E01               	movlw	1
 17205  002310  65AA               	cpfsgt	arp_gratuitous@announceCounter& (0+255),b
 17206  002312  D022               	goto	l1015
 17207                           
 17208                           ; BSR set to: 1
 17209                           ;arp.c: 366: announceCounter = 0;
 17210  002314  0E00               	movlw	0
 17211  002316  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17212                           
 17213                           ;arp.c: 367: state = INIT;
 17214  002318  0E00               	movlw	0
 17215  00231A  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17216                           
 17217                           ;arp.c: 368: err.code = (uint16_t)0;
 17218  00231C  0E00               	movlw	0
 17219  00231E  0100               	movlb	0	; () banked
 17220  002320  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17221  002322  0E00               	movlw	0
 17222  002324  D009               	goto	L9
 17223  002326                     
 17224                           ;arp.c: 372: announceCounter = 0;
 17225                           
 17226                           ; BSR set to: 0
 17227  002326  0E00               	movlw	0
 17228  002328  0101               	movlb	1	; () banked
 17229  00232A  6FAA               	movwf	arp_gratuitous@announceCounter& (0+255),b
 17230                           
 17231                           ;arp.c: 373: state = INIT;
 17232  00232C  0E00               	movlw	0
 17233  00232E  6FA9               	movwf	arp_gratuitous@state& (0+255),b
 17234                           
 17235                           ;arp.c: 374: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 17236  002330  0E01               	movlw	1
 17237  002332  0100               	movlb	0	; () banked
 17238  002334  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 17239  002336  0E95               	movlw	149
 17240  002338                     L9:
 17241  002338  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 17242                           
 17243                           ; BSR set to: 0
 17244                           ;arp.c: 377: }
 17245                           
 17246                           ;arp.c: 375: break;
 17247  00233A  D00E               	goto	l1015
 17248  00233C                     l1013:
 17249                           
 17250                           ; BSR set to: 0
 17251  00233C  0101               	movlb	1	; () banked
 17252  00233E  51A9               	movf	arp_gratuitous@state& (0+255),w,b
 17253                           
 17254                           ; Switch size 1, requested type "space"
 17255                           ; Number of cases is 4, Range of values is 0 to 3
 17256                           ; switch strategies available:
 17257                           ; Name         Instructions Cycles
 17258                           ; simple_byte           13     7 (average)
 17259                           ;	Chosen strategy is simple_byte
 17260  002340  0A00               	xorlw	0	; case 0
 17261  002342  B4D8               	btfsc	status,2,c
 17262  002344  D71F               	goto	l1014
 17263  002346  0A01               	xorlw	1	; case 1
 17264  002348  B4D8               	btfsc	status,2,c
 17265  00234A  D72F               	goto	l1016
 17266  00234C  0A03               	xorlw	3	; case 2
 17267  00234E  B4D8               	btfsc	status,2,c
 17268  002350  D768               	goto	l1018
 17269  002352  0A01               	xorlw	1	; case 3
 17270  002354  B4D8               	btfsc	status,2,c
 17271  002356  D7E7               	goto	l1023
 17272  002358                     l1015:
 17273                           
 17274                           ;arp.c: 378: return err;
 17275  002358  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 17276  00235C  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 17277  002360  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 17278  002364  0012               	return		;funcret
 17279  002366                     __end_of_arp_gratuitous:
 17280                           	opt stack 0
 17281                           tblptru	equ	0xFF8
 17282                           tblptrh	equ	0xFF7
 17283                           tblptrl	equ	0xFF6
 17284                           tablat	equ	0xFF5
 17285                           prodh	equ	0xFF4
 17286                           prodl	equ	0xFF3
 17287                           intcon	equ	0xFF2
 17288                           intcon3	equ	0xFF0
 17289                           indf0	equ	0xFEF
 17290                           postinc0	equ	0xFEE
 17291                           plusw0	equ	0xFEB
 17292                           fsr0h	equ	0xFEA
 17293                           fsr0l	equ	0xFE9
 17294                           wreg	equ	0xFE8
 17295                           indf1	equ	0xFE7
 17296                           postinc1	equ	0xFE6
 17297                           postdec1	equ	0xFE5
 17298                           plusw1	equ	0xFE3
 17299                           fsr1h	equ	0xFE2
 17300                           fsr1l	equ	0xFE1
 17301                           indf2	equ	0xFDF
 17302                           postinc2	equ	0xFDE
 17303                           postdec2	equ	0xFDD
 17304                           plusw2	equ	0xFDB
 17305                           fsr2h	equ	0xFDA
 17306                           fsr2l	equ	0xFD9
 17307                           status	equ	0xFD8
 17308                           
 17309 ;; *************** function _ipAdressToString *****************
 17310 ;; Defined at:
 17311 ;;		line 162 in file "src/system/uart.c"
 17312 ;; Parameters:    Size  Location     Type
 17313 ;;  ip              4   19[BANK0 ] struct ipv4_address
 17314 ;; Auto vars:     Size  Location     Type
 17315 ;;  i               1   40[BANK0 ] unsigned char 
 17316 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 17317 ;;  tens            4   31[BANK0 ] unsigned char [4]
 17318 ;;  ones            4   27[BANK0 ] unsigned char [4]
 17319 ;;  pointer         1   39[BANK0 ] unsigned char 
 17320 ;; Return value:  Size  Location     Type
 17321 ;;                  2   19[BANK0 ] PTR unsigned char 
 17322 ;; Registers used:
 17323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17324 ;; Tracked objects:
 17325 ;;		On entry : 0/0
 17326 ;;		On exit  : 0/0
 17327 ;;		Unchanged: 0/0
 17328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17329 ;;      Params:         0       4       0       0       0       0       0       0       0
 17330 ;;      Locals:         0      14       0       0       0       0       0       0       0
 17331 ;;      Temps:          0       4       0       0       0       0       0       0       0
 17332 ;;      Totals:         0      22       0       0       0       0       0       0       0
 17333 ;;Total ram usage:       22 bytes
 17334 ;; Hardware stack levels used:    1
 17335 ;; Hardware stack levels required when called:    5
 17336 ;; This function calls:
 17337 ;;		___lwdiv
 17338 ;;		___lwmod
 17339 ;; This function is called by:
 17340 ;;		_handleStackBackgroundTasks
 17341 ;;		_main
 17342 ;;		_arp_handleNewPacket
 17343 ;;		_arp_sendReply
 17344 ;;		_arp_probe
 17345 ;;		_arp_gratuitous
 17346 ;;		_arp_setNewEntry
 17347 ;;		_ipv4_sendFrame
 17348 ;;		_ipv4_handleNewPacket
 17349 ;;		_arpEntryToString
 17350 ;; This function uses a non-reentrant model
 17351 ;;
 17352                           
 17353                           	psect	text65
 17354  00278C                     __ptext65:
 17355                           	opt stack 0
 17356  00278C                     _ipAdressToString:
 17357                           	opt stack 22
 17358                           
 17359                           ;uart.c: 163: char static address [] = "???.???.???.???";
 17360                           ;uart.c: 164: uint8_t hundreds[4];
 17361                           ;uart.c: 165: uint8_t tens[4];
 17362                           ;uart.c: 166: uint8_t ones[4];
 17363                           ;uart.c: 167: uint8_t pointer = 0;
 17364                           
 17365                           ;incstack = 0
 17366  00278C  0E00               	movlw	0
 17367  00278E  0100               	movlb	0	; () banked
 17368  002790  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 17369                           
 17370                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 17371  002792  0E00               	movlw	0
 17372  002794  6F88               	movwf	ipAdressToString@i& (0+255),b
 17373  002796                     l8961:
 17374                           
 17375                           ; BSR set to: 0
 17376  002796  0E03               	movlw	3
 17377  002798  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 17378  00279A  D001               	goto	l844
 17379  00279C  D0DF               	goto	u10080
 17380  00279E                     l844:
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 17384                           
 17385                           ; BSR set to: 0
 17386  00279E  5188               	movf	ipAdressToString@i& (0+255),w,b
 17387  0027A0  0D01               	mullw	1
 17388  0027A2  0E83               	movlw	low ipAdressToString@hundreds
 17389  0027A4  24F3               	addwf	prodl,w,c
 17390  0027A6  6ED9               	movwf	fsr2l,c
 17391  0027A8  0E00               	movlw	high ipAdressToString@hundreds
 17392  0027AA  20F4               	addwfc	prodh,w,c
 17393  0027AC  6EDA               	movwf	fsr2h,c
 17394  0027AE  5188               	movf	ipAdressToString@i& (0+255),w,b
 17395  0027B0  0D01               	mullw	1
 17396  0027B2  0E73               	movlw	low ipAdressToString@ip
 17397  0027B4  24F3               	addwf	prodl,w,c
 17398  0027B6  6EE1               	movwf	fsr1l,c
 17399  0027B8  0E00               	movlw	high ipAdressToString@ip
 17400  0027BA  20F4               	addwfc	prodh,w,c
 17401  0027BC  6EE2               	movwf	fsr1h,c
 17402  0027BE  50E7               	movf	indf1,w,c
 17403  0027C0  6F77               	movwf	??_ipAdressToString& (0+255),b
 17404  0027C2  5177               	movf	??_ipAdressToString& (0+255),w,b
 17405  0027C4  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17406  0027C6  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 17407  0027C8  0E00               	movlw	0
 17408  0027CA  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17409  0027CC  0E64               	movlw	100
 17410  0027CE  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17411  0027D0  EC5B  F027         	call	___lwdiv	;wreg free
 17412  0027D4  0100               	movlb	0	; () banked
 17413  0027D6  5160               	movf	?___lwdiv& (0+255),w,b
 17414  0027D8  6EDF               	movwf	indf2,c
 17415                           
 17416                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 17417  0027DA  5188               	movf	ipAdressToString@i& (0+255),w,b
 17418  0027DC  0D01               	mullw	1
 17419  0027DE  0E7F               	movlw	low ipAdressToString@tens
 17420  0027E0  24F3               	addwf	prodl,w,c
 17421  0027E2  6ED9               	movwf	fsr2l,c
 17422  0027E4  0E00               	movlw	high ipAdressToString@tens
 17423  0027E6  20F4               	addwfc	prodh,w,c
 17424  0027E8  6EDA               	movwf	fsr2h,c
 17425  0027EA  5188               	movf	ipAdressToString@i& (0+255),w,b
 17426  0027EC  0D01               	mullw	1
 17427  0027EE  0E83               	movlw	low ipAdressToString@hundreds
 17428  0027F0  24F3               	addwf	prodl,w,c
 17429  0027F2  6EE1               	movwf	fsr1l,c
 17430  0027F4  0E00               	movlw	high ipAdressToString@hundreds
 17431  0027F6  20F4               	addwfc	prodh,w,c
 17432  0027F8  6EE2               	movwf	fsr1h,c
 17433  0027FA  50E7               	movf	indf1,w,c
 17434  0027FC  6F77               	movwf	??_ipAdressToString& (0+255),b
 17435  0027FE  5177               	movf	??_ipAdressToString& (0+255),w,b
 17436  002800  0D64               	mullw	100
 17437  002802  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 17438  002806  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 17439  00280A  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 17440  00280C  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 17441  00280E  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 17442  002810  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 17443  002812  5188               	movf	ipAdressToString@i& (0+255),w,b
 17444  002814  0D01               	mullw	1
 17445  002816  0E73               	movlw	low ipAdressToString@ip
 17446  002818  24F3               	addwf	prodl,w,c
 17447  00281A  6EE1               	movwf	fsr1l,c
 17448  00281C  0E00               	movlw	high ipAdressToString@ip
 17449  00281E  20F4               	addwfc	prodh,w,c
 17450  002820  6EE2               	movwf	fsr1h,c
 17451  002822  50E7               	movf	indf1,w,c
 17452  002824  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 17453  002826  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 17454  002828  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 17455  00282A  6F60               	movwf	___lwdiv@dividend& (0+255),b
 17456  00282C  0E00               	movlw	0
 17457  00282E  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 17458  002830  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 17459  002832  0E00               	movlw	0
 17460  002834  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 17461  002836  0E0A               	movlw	10
 17462  002838  6F62               	movwf	___lwdiv@divisor& (0+255),b
 17463  00283A  EC5B  F027         	call	___lwdiv	;wreg free
 17464  00283E  0100               	movlb	0	; () banked
 17465  002840  5160               	movf	?___lwdiv& (0+255),w,b
 17466  002842  6EDF               	movwf	indf2,c
 17467                           
 17468                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 17469  002844  5188               	movf	ipAdressToString@i& (0+255),w,b
 17470  002846  0D01               	mullw	1
 17471  002848  0E7B               	movlw	low ipAdressToString@ones
 17472  00284A  24F3               	addwf	prodl,w,c
 17473  00284C  6ED9               	movwf	fsr2l,c
 17474  00284E  0E00               	movlw	high ipAdressToString@ones
 17475  002850  20F4               	addwfc	prodh,w,c
 17476  002852  6EDA               	movwf	fsr2h,c
 17477  002854  5188               	movf	ipAdressToString@i& (0+255),w,b
 17478  002856  0D01               	mullw	1
 17479  002858  0E73               	movlw	low ipAdressToString@ip
 17480  00285A  24F3               	addwf	prodl,w,c
 17481  00285C  6EE1               	movwf	fsr1l,c
 17482  00285E  0E00               	movlw	high ipAdressToString@ip
 17483  002860  20F4               	addwfc	prodh,w,c
 17484  002862  6EE2               	movwf	fsr1h,c
 17485  002864  50E7               	movf	indf1,w,c
 17486  002866  6F77               	movwf	??_ipAdressToString& (0+255),b
 17487  002868  5177               	movf	??_ipAdressToString& (0+255),w,b
 17488  00286A  6F6E               	movwf	___lwmod@dividend& (0+255),b
 17489  00286C  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 17490  00286E  0E00               	movlw	0
 17491  002870  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 17492  002872  0E0A               	movlw	10
 17493  002874  6F70               	movwf	___lwmod@divisor& (0+255),b
 17494  002876  EC68  F028         	call	___lwmod	;wreg free
 17495  00287A  0100               	movlb	0	; () banked
 17496  00287C  516E               	movf	?___lwmod& (0+255),w,b
 17497  00287E  6EDF               	movwf	indf2,c
 17498                           
 17499                           ; BSR set to: 0
 17500                           ;uart.c: 175: if (hundreds[i] > 0)
 17501  002880  5188               	movf	ipAdressToString@i& (0+255),w,b
 17502  002882  0D01               	mullw	1
 17503  002884  0E83               	movlw	low ipAdressToString@hundreds
 17504  002886  24F3               	addwf	prodl,w,c
 17505  002888  6ED9               	movwf	fsr2l,c
 17506  00288A  0E00               	movlw	high ipAdressToString@hundreds
 17507  00288C  20F4               	addwfc	prodh,w,c
 17508  00288E  6EDA               	movwf	fsr2h,c
 17509  002890  50DF               	movf	indf2,w,c
 17510  002892  B4D8               	btfsc	status,2,c
 17511  002894  D014               	goto	l846
 17512                           
 17513                           ; BSR set to: 0
 17514                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 17515  002896  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17516  002898  0D01               	mullw	1
 17517  00289A  0EE4               	movlw	low ipAdressToString@address
 17518  00289C  24F3               	addwf	prodl,w,c
 17519  00289E  6ED9               	movwf	fsr2l,c
 17520  0028A0  0E02               	movlw	high ipAdressToString@address
 17521  0028A2  20F4               	addwfc	prodh,w,c
 17522  0028A4  6EDA               	movwf	fsr2h,c
 17523  0028A6  5188               	movf	ipAdressToString@i& (0+255),w,b
 17524  0028A8  0D01               	mullw	1
 17525  0028AA  0E83               	movlw	low ipAdressToString@hundreds
 17526  0028AC  24F3               	addwf	prodl,w,c
 17527  0028AE  6EE1               	movwf	fsr1l,c
 17528  0028B0  0E00               	movlw	high ipAdressToString@hundreds
 17529  0028B2  20F4               	addwfc	prodh,w,c
 17530  0028B4  6EE2               	movwf	fsr1h,c
 17531  0028B6  50E7               	movf	indf1,w,c
 17532  0028B8  0F30               	addlw	48
 17533  0028BA  6EDF               	movwf	indf2,c
 17534                           
 17535                           ; BSR set to: 0
 17536  0028BC  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17537  0028BE                     l846:
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 17541                           
 17542                           ; BSR set to: 0
 17543  0028BE  5188               	movf	ipAdressToString@i& (0+255),w,b
 17544  0028C0  0D01               	mullw	1
 17545  0028C2  0E7F               	movlw	low ipAdressToString@tens
 17546  0028C4  24F3               	addwf	prodl,w,c
 17547  0028C6  6ED9               	movwf	fsr2l,c
 17548  0028C8  0E00               	movlw	high ipAdressToString@tens
 17549  0028CA  20F4               	addwfc	prodh,w,c
 17550  0028CC  6EDA               	movwf	fsr2h,c
 17551  0028CE  50DF               	movf	indf2,w,c
 17552  0028D0  A4D8               	btfss	status,2,c
 17553  0028D2  D00B               	goto	u10060
 17554                           
 17555                           ; BSR set to: 0
 17556  0028D4  5188               	movf	ipAdressToString@i& (0+255),w,b
 17557  0028D6  0D01               	mullw	1
 17558  0028D8  0E83               	movlw	low ipAdressToString@hundreds
 17559  0028DA  24F3               	addwf	prodl,w,c
 17560  0028DC  6ED9               	movwf	fsr2l,c
 17561  0028DE  0E00               	movlw	high ipAdressToString@hundreds
 17562  0028E0  20F4               	addwfc	prodh,w,c
 17563  0028E2  6EDA               	movwf	fsr2h,c
 17564  0028E4  50DF               	movf	indf2,w,c
 17565  0028E6  B4D8               	btfsc	status,2,c
 17566  0028E8  D014               	goto	l847
 17567  0028EA                     u10060:
 17568                           
 17569                           ; BSR set to: 0
 17570                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 17571                           
 17572                           ; BSR set to: 0
 17573  0028EA  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17574  0028EC  0D01               	mullw	1
 17575  0028EE  0EE4               	movlw	low ipAdressToString@address
 17576  0028F0  24F3               	addwf	prodl,w,c
 17577  0028F2  6ED9               	movwf	fsr2l,c
 17578  0028F4  0E02               	movlw	high ipAdressToString@address
 17579  0028F6  20F4               	addwfc	prodh,w,c
 17580  0028F8  6EDA               	movwf	fsr2h,c
 17581  0028FA  5188               	movf	ipAdressToString@i& (0+255),w,b
 17582  0028FC  0D01               	mullw	1
 17583  0028FE  0E7F               	movlw	low ipAdressToString@tens
 17584  002900  24F3               	addwf	prodl,w,c
 17585  002902  6EE1               	movwf	fsr1l,c
 17586  002904  0E00               	movlw	high ipAdressToString@tens
 17587  002906  20F4               	addwfc	prodh,w,c
 17588  002908  6EE2               	movwf	fsr1h,c
 17589  00290A  50E7               	movf	indf1,w,c
 17590  00290C  0F30               	addlw	48
 17591  00290E  6EDF               	movwf	indf2,c
 17592                           
 17593                           ; BSR set to: 0
 17594  002910  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17595  002912                     l847:
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 17599                           
 17600                           ; BSR set to: 0
 17601  002912  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17602  002914  0D01               	mullw	1
 17603  002916  0EE4               	movlw	low ipAdressToString@address
 17604  002918  24F3               	addwf	prodl,w,c
 17605  00291A  6ED9               	movwf	fsr2l,c
 17606  00291C  0E02               	movlw	high ipAdressToString@address
 17607  00291E  20F4               	addwfc	prodh,w,c
 17608  002920  6EDA               	movwf	fsr2h,c
 17609  002922  5188               	movf	ipAdressToString@i& (0+255),w,b
 17610  002924  0D01               	mullw	1
 17611  002926  0E7B               	movlw	low ipAdressToString@ones
 17612  002928  24F3               	addwf	prodl,w,c
 17613  00292A  6EE1               	movwf	fsr1l,c
 17614  00292C  0E00               	movlw	high ipAdressToString@ones
 17615  00292E  20F4               	addwfc	prodh,w,c
 17616  002930  6EE2               	movwf	fsr1h,c
 17617  002932  50E7               	movf	indf1,w,c
 17618  002934  0F30               	addlw	48
 17619  002936  6EDF               	movwf	indf2,c
 17620  002938  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17621                           
 17622                           ; BSR set to: 0
 17623                           ;uart.c: 180: if (i != 3)
 17624  00293A  0E03               	movlw	3
 17625  00293C  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 17626  00293E  B4D8               	btfsc	status,2,c
 17627  002940  D00B               	goto	l850
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;uart.c: 181: address[pointer++] = '.';
 17631  002942  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17632  002944  0D01               	mullw	1
 17633  002946  0EE4               	movlw	low ipAdressToString@address
 17634  002948  24F3               	addwf	prodl,w,c
 17635  00294A  6ED9               	movwf	fsr2l,c
 17636  00294C  0E02               	movlw	high ipAdressToString@address
 17637  00294E  20F4               	addwfc	prodh,w,c
 17638  002950  6EDA               	movwf	fsr2h,c
 17639  002952  0E2E               	movlw	46
 17640  002954  6EDF               	movwf	indf2,c
 17641                           
 17642                           ; BSR set to: 0
 17643  002956  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 17644  002958                     l850:
 17645                           
 17646                           ; BSR set to: 0
 17647                           
 17648                           ; BSR set to: 0
 17649  002958  2B88               	incf	ipAdressToString@i& (0+255),f,b
 17650  00295A  D71D               	goto	l8961
 17651  00295C                     u10080:
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;uart.c: 182: }
 17655                           ;uart.c: 183: address[pointer] = '\0';
 17656                           
 17657                           ; BSR set to: 0
 17658  00295C  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 17659  00295E  0D01               	mullw	1
 17660  002960  0EE4               	movlw	low ipAdressToString@address
 17661  002962  24F3               	addwf	prodl,w,c
 17662  002964  6ED9               	movwf	fsr2l,c
 17663  002966  0E02               	movlw	high ipAdressToString@address
 17664  002968  20F4               	addwfc	prodh,w,c
 17665  00296A  6EDA               	movwf	fsr2h,c
 17666  00296C  0E00               	movlw	0
 17667  00296E  6EDF               	movwf	indf2,c
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;uart.c: 184: return address;
 17671  002970  0EE4               	movlw	low ipAdressToString@address
 17672  002972  6F73               	movwf	?_ipAdressToString& (0+255),b
 17673  002974  0E02               	movlw	high ipAdressToString@address
 17674  002976  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 17675  002978  0012               	return	
 17676  00297A                     __end_of_ipAdressToString:
 17677                           	opt stack 0
 17678                           tblptru	equ	0xFF8
 17679                           tblptrh	equ	0xFF7
 17680                           tblptrl	equ	0xFF6
 17681                           tablat	equ	0xFF5
 17682                           prodh	equ	0xFF4
 17683                           prodl	equ	0xFF3
 17684                           intcon	equ	0xFF2
 17685                           intcon3	equ	0xFF0
 17686                           indf0	equ	0xFEF
 17687                           postinc0	equ	0xFEE
 17688                           plusw0	equ	0xFEB
 17689                           fsr0h	equ	0xFEA
 17690                           fsr0l	equ	0xFE9
 17691                           wreg	equ	0xFE8
 17692                           indf1	equ	0xFE7
 17693                           postinc1	equ	0xFE6
 17694                           postdec1	equ	0xFE5
 17695                           plusw1	equ	0xFE3
 17696                           fsr1h	equ	0xFE2
 17697                           fsr1l	equ	0xFE1
 17698                           indf2	equ	0xFDF
 17699                           postinc2	equ	0xFDE
 17700                           postdec2	equ	0xFDD
 17701                           plusw2	equ	0xFDB
 17702                           fsr2h	equ	0xFDA
 17703                           fsr2l	equ	0xFD9
 17704                           status	equ	0xFD8
 17705                           
 17706 ;; *************** function ___lwmod *****************
 17707 ;; Defined at:
 17708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 17709 ;; Parameters:    Size  Location     Type
 17710 ;;  dividend        2   14[BANK0 ] unsigned int 
 17711 ;;  divisor         2   16[BANK0 ] unsigned int 
 17712 ;; Auto vars:     Size  Location     Type
 17713 ;;  counter         1   18[BANK0 ] unsigned char 
 17714 ;; Return value:  Size  Location     Type
 17715 ;;                  2   14[BANK0 ] unsigned int 
 17716 ;; Registers used:
 17717 ;;		wreg, status,2, status,0
 17718 ;; Tracked objects:
 17719 ;;		On entry : 0/0
 17720 ;;		On exit  : 0/0
 17721 ;;		Unchanged: 0/0
 17722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17723 ;;      Params:         0       4       0       0       0       0       0       0       0
 17724 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17725 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17726 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17727 ;;Total ram usage:        5 bytes
 17728 ;; Hardware stack levels used:    1
 17729 ;; Hardware stack levels required when called:    4
 17730 ;; This function calls:
 17731 ;;		Nothing
 17732 ;; This function is called by:
 17733 ;;		_ipAdressToString
 17734 ;;		_arp_probe
 17735 ;; This function uses a non-reentrant model
 17736 ;;
 17737                           
 17738                           	psect	text66
 17739  0050D0                     __ptext66:
 17740                           	opt stack 0
 17741  0050D0                     ___lwmod:
 17742                           	opt stack 22
 17743                           
 17744                           ; BSR set to: 0
 17745                           ;incstack = 0
 17746  0050D0  0100               	movlb	0	; () banked
 17747  0050D2  5170               	movf	___lwmod@divisor& (0+255),w,b
 17748  0050D4  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17749  0050D6  B4D8               	btfsc	status,2,c
 17750  0050D8  D018               	goto	l1646
 17751                           
 17752                           ; BSR set to: 0
 17753  0050DA  0E01               	movlw	1
 17754  0050DC  6F72               	movwf	___lwmod@counter& (0+255),b
 17755  0050DE  D004               	goto	l1641
 17756  0050E0                     
 17757                           ; BSR set to: 0
 17758                           
 17759                           ; BSR set to: 0
 17760  0050E0  90D8               	bcf	status,0,c
 17761  0050E2  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 17762  0050E4  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17763  0050E6  2B72               	incf	___lwmod@counter& (0+255),f,b
 17764  0050E8                     l1641:
 17765                           
 17766                           ; BSR set to: 0
 17767                           
 17768                           ; BSR set to: 0
 17769  0050E8  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17770  0050EA  D7FA               	goto	l1642
 17771  0050EC                     u9820:
 17772                           
 17773                           ; BSR set to: 0
 17774                           
 17775                           ; BSR set to: 0
 17776                           
 17777                           ; BSR set to: 0
 17778  0050EC  5170               	movf	___lwmod@divisor& (0+255),w,b
 17779  0050EE  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 17780  0050F0  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17781  0050F2  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17782  0050F4  A0D8               	btfss	status,0,c
 17783  0050F6  D004               	goto	l1645
 17784                           
 17785                           ; BSR set to: 0
 17786  0050F8  5170               	movf	___lwmod@divisor& (0+255),w,b
 17787  0050FA  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 17788  0050FC  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17789  0050FE  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17790  005100                     l1645:
 17791                           
 17792                           ; BSR set to: 0
 17793                           
 17794                           ; BSR set to: 0
 17795  005100  90D8               	bcf	status,0,c
 17796  005102  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17797  005104  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 17798                           
 17799                           ; BSR set to: 0
 17800  005106  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 17801  005108  D7F1               	goto	u9820
 17802  00510A                     l1646:
 17803                           
 17804                           ; BSR set to: 0
 17805                           
 17806                           ; BSR set to: 0
 17807  00510A  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 17808  00510E  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 17809                           
 17810                           ; BSR set to: 0
 17811  005112  0012               	return		;funcret
 17812  005114                     __end_of___lwmod:
 17813                           	opt stack 0
 17814                           tblptru	equ	0xFF8
 17815                           tblptrh	equ	0xFF7
 17816                           tblptrl	equ	0xFF6
 17817                           tablat	equ	0xFF5
 17818                           prodh	equ	0xFF4
 17819                           prodl	equ	0xFF3
 17820                           intcon	equ	0xFF2
 17821                           intcon3	equ	0xFF0
 17822                           indf0	equ	0xFEF
 17823                           postinc0	equ	0xFEE
 17824                           plusw0	equ	0xFEB
 17825                           fsr0h	equ	0xFEA
 17826                           fsr0l	equ	0xFE9
 17827                           wreg	equ	0xFE8
 17828                           indf1	equ	0xFE7
 17829                           postinc1	equ	0xFE6
 17830                           postdec1	equ	0xFE5
 17831                           plusw1	equ	0xFE3
 17832                           fsr1h	equ	0xFE2
 17833                           fsr1l	equ	0xFE1
 17834                           indf2	equ	0xFDF
 17835                           postinc2	equ	0xFDE
 17836                           postdec2	equ	0xFDD
 17837                           plusw2	equ	0xFDB
 17838                           fsr2h	equ	0xFDA
 17839                           fsr2l	equ	0xFD9
 17840                           status	equ	0xFD8
 17841                           
 17842 ;; *************** function ___lwdiv *****************
 17843 ;; Defined at:
 17844 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;  dividend        2    0[BANK0 ] unsigned int 
 17847 ;;  divisor         2    2[BANK0 ] unsigned int 
 17848 ;; Auto vars:     Size  Location     Type
 17849 ;;  quotient        2    5[BANK0 ] unsigned int 
 17850 ;;  counter         1    4[BANK0 ] unsigned char 
 17851 ;; Return value:  Size  Location     Type
 17852 ;;                  2    0[BANK0 ] unsigned int 
 17853 ;; Registers used:
 17854 ;;		wreg, status,2, status,0
 17855 ;; Tracked objects:
 17856 ;;		On entry : 0/0
 17857 ;;		On exit  : 0/0
 17858 ;;		Unchanged: 0/0
 17859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17860 ;;      Params:         0       4       0       0       0       0       0       0       0
 17861 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17862 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17863 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17864 ;;Total ram usage:        7 bytes
 17865 ;; Hardware stack levels used:    1
 17866 ;; Hardware stack levels required when called:    4
 17867 ;; This function calls:
 17868 ;;		Nothing
 17869 ;; This function is called by:
 17870 ;;		_ipAdressToString
 17871 ;; This function uses a non-reentrant model
 17872 ;;
 17873                           
 17874                           	psect	text67
 17875  004EB6                     __ptext67:
 17876                           	opt stack 0
 17877  004EB6                     ___lwdiv:
 17878                           	opt stack 22
 17879                           
 17880                           ; BSR set to: 0
 17881                           ;incstack = 0
 17882  004EB6  0E00               	movlw	0
 17883  004EB8  0100               	movlb	0	; () banked
 17884  004EBA  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17885  004EBC  0E00               	movlw	0
 17886  004EBE  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17887                           
 17888                           ; BSR set to: 0
 17889  004EC0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17890  004EC2  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17891  004EC4  B4D8               	btfsc	status,2,c
 17892  004EC6  D01C               	goto	l1636
 17893                           
 17894                           ; BSR set to: 0
 17895  004EC8  0E01               	movlw	1
 17896  004ECA  6F64               	movwf	___lwdiv@counter& (0+255),b
 17897  004ECC  D004               	goto	l1631
 17898  004ECE                     
 17899                           ; BSR set to: 0
 17900                           
 17901                           ; BSR set to: 0
 17902  004ECE  90D8               	bcf	status,0,c
 17903  004ED0  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17904  004ED2  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17905  004ED4  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17906  004ED6                     l1631:
 17907                           
 17908                           ; BSR set to: 0
 17909                           
 17910                           ; BSR set to: 0
 17911  004ED6  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17912  004ED8  D7FA               	goto	l1632
 17913  004EDA                     u9790:
 17914                           
 17915                           ; BSR set to: 0
 17916                           
 17917                           ; BSR set to: 0
 17918                           
 17919                           ; BSR set to: 0
 17920  004EDA  90D8               	bcf	status,0,c
 17921  004EDC  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17922  004EDE  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17923                           
 17924                           ; BSR set to: 0
 17925  004EE0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17926  004EE2  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17927  004EE4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17928  004EE6  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17929  004EE8  A0D8               	btfss	status,0,c
 17930  004EEA  D005               	goto	l1635
 17931                           
 17932                           ; BSR set to: 0
 17933  004EEC  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17934  004EEE  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17935  004EF0  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17936  004EF2  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17937                           
 17938                           ; BSR set to: 0
 17939  004EF4  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17940  004EF6                     l1635:
 17941                           
 17942                           ; BSR set to: 0
 17943                           
 17944                           ; BSR set to: 0
 17945  004EF6  90D8               	bcf	status,0,c
 17946  004EF8  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17947  004EFA  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17948                           
 17949                           ; BSR set to: 0
 17950  004EFC  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17951  004EFE  D7ED               	goto	u9790
 17952  004F00                     l1636:
 17953                           
 17954                           ; BSR set to: 0
 17955                           
 17956                           ; BSR set to: 0
 17957  004F00  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17958  004F04  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17959                           
 17960                           ; BSR set to: 0
 17961  004F08  0012               	return		;funcret
 17962  004F0A                     __end_of___lwdiv:
 17963                           	opt stack 0
 17964                           tblptru	equ	0xFF8
 17965                           tblptrh	equ	0xFF7
 17966                           tblptrl	equ	0xFF6
 17967                           tablat	equ	0xFF5
 17968                           prodh	equ	0xFF4
 17969                           prodl	equ	0xFF3
 17970                           intcon	equ	0xFF2
 17971                           intcon3	equ	0xFF0
 17972                           indf0	equ	0xFEF
 17973                           postinc0	equ	0xFEE
 17974                           plusw0	equ	0xFEB
 17975                           fsr0h	equ	0xFEA
 17976                           fsr0l	equ	0xFE9
 17977                           wreg	equ	0xFE8
 17978                           indf1	equ	0xFE7
 17979                           postinc1	equ	0xFE6
 17980                           postdec1	equ	0xFE5
 17981                           plusw1	equ	0xFE3
 17982                           fsr1h	equ	0xFE2
 17983                           fsr1l	equ	0xFE1
 17984                           indf2	equ	0xFDF
 17985                           postinc2	equ	0xFDE
 17986                           postdec2	equ	0xFDD
 17987                           plusw2	equ	0xFDB
 17988                           fsr2h	equ	0xFDA
 17989                           fsr2l	equ	0xFD9
 17990                           status	equ	0xFD8
 17991                           
 17992 ;; *************** function _arp_sendRequest *****************
 17993 ;; Defined at:
 17994 ;;		line 182 in file "src/stack/protocols/arp.c"
 17995 ;; Parameters:    Size  Location     Type
 17996 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 17997 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 17998 ;; Auto vars:     Size  Location     Type
 17999 ;;  request        32   20[BANK1 ] struct arp_message
 18000 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 18001 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 18002 ;; Return value:  Size  Location     Type
 18003 ;;                  1    wreg      void 
 18004 ;; Registers used:
 18005 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18006 ;; Tracked objects:
 18007 ;;		On entry : 0/0
 18008 ;;		On exit  : 0/0
 18009 ;;		Unchanged: 0/0
 18010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18011 ;;      Params:         0       0       8       0       0       0       0       0       0
 18012 ;;      Locals:         0       0      44       0       0       0       0       0       0
 18013 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18014 ;;      Totals:         0       0      52       0       0       0       0       0       0
 18015 ;;Total ram usage:       52 bytes
 18016 ;; Hardware stack levels used:    1
 18017 ;; Hardware stack levels required when called:   10
 18018 ;; This function calls:
 18019 ;;		_arp_send
 18020 ;;		_ethernetController_getMacAddress
 18021 ;;		_mac_setAllZero
 18022 ;; This function is called by:
 18023 ;;		_arp_probe
 18024 ;;		_arp_gratuitous
 18025 ;;		_ipv4_sendFrame
 18026 ;; This function uses a non-reentrant model
 18027 ;;
 18028                           
 18029                           	psect	text68
 18030  004468                     __ptext68:
 18031                           	opt stack 0
 18032  004468                     _arp_sendRequest:
 18033                           	opt stack 18
 18034                           
 18035                           ;arp.c: 183: arp_message_t request;
 18036                           ;arp.c: 184: macaddress_t senderMAC;
 18037                           ;arp.c: 185: macaddress_t targetMAC;
 18038                           ;arp.c: 187: senderMAC = ethernetController_getMacAddress();
 18039                           
 18040                           ; BSR set to: 0
 18041                           ;incstack = 0
 18042  004468  EC02  F025         	call	_ethernetController_getMacAddress	;wreg free
 18043  00446C  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18044  004470  0E05               	movlw	5
 18045  004472                     u11151:
 18046  004472  CFEB FFDB          	movff	plusw0,plusw2
 18047  004476  06E8               	decf	wreg,f,c
 18048  004478  E2FC               	bc	u11151
 18049                           
 18050                           ;arp.c: 188: mac_setAllZero(&targetMAC);
 18051  00447A  0E0E               	movlw	low arp_sendRequest@targetMAC
 18052  00447C  0100               	movlb	0	; () banked
 18053  00447E  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 18054  004480  0E01               	movlw	high arp_sendRequest@targetMAC
 18055  004482  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 18056  004484  ECAB  F02A         	call	_mac_setAllZero	;wreg free
 18057                           
 18058                           ;arp.c: 190: request.hlen = 6u;
 18059  004488  0E06               	movlw	6
 18060  00448A  0101               	movlb	1	; () banked
 18061  00448C  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 18062                           
 18063                           ; BSR set to: 1
 18064                           ;arp.c: 191: request.plen = 4u;
 18065  00448E  0E04               	movlw	4
 18066  004490  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 18067                           
 18068                           ; BSR set to: 1
 18069                           ;arp.c: 192: request.htype = ARP_HTYPE_ETHERNET;
 18070  004492  0E00               	movlw	0
 18071  004494  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 18072  004496  0E01               	movlw	1
 18073  004498  6F14               	movwf	arp_sendRequest@request& (0+255),b
 18074                           
 18075                           ; BSR set to: 1
 18076                           ;arp.c: 193: request.ptype = ARP_PTYPE_IPv4;
 18077  00449A  0E08               	movlw	8
 18078  00449C  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 18079  00449E  0E00               	movlw	0
 18080  0044A0  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 18081                           
 18082                           ; BSR set to: 1
 18083                           ;arp.c: 194: request.operation = ARP_REQUEST;
 18084  0044A2  0E00               	movlw	0
 18085  0044A4  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 18086  0044A6  0E01               	movlw	1
 18087  0044A8  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 18088                           
 18089                           ; BSR set to: 1
 18090                           ;arp.c: 195: request.senderIPAddress = ipSender;
 18091  0044AA  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 18092  0044AE  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 18093  0044B2  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 18094  0044B6  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 18095                           
 18096                           ; BSR set to: 1
 18097                           ;arp.c: 196: request.senderMACAddress = senderMAC;
 18098  0044BA  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 18099  0044BE  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 18100  0044C2  0E05               	movlw	5
 18101  0044C4                     u11161:
 18102  0044C4  CFDB FFE3          	movff	plusw2,plusw1
 18103  0044C8  06E8               	decf	wreg,f,c
 18104  0044CA  E2FC               	bc	u11161
 18105                           
 18106                           ; BSR set to: 1
 18107                           ;arp.c: 197: request.targetIPAddress = ipTarget;
 18108  0044CC  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 18109  0044D0  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 18110  0044D4  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 18111  0044D8  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 18112                           
 18113                           ; BSR set to: 1
 18114                           ;arp.c: 198: request.targetMACAddress = targetMAC;
 18115  0044DC  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 18116  0044E0  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 18117  0044E4  0E05               	movlw	5
 18118  0044E6                     u11171:
 18119  0044E6  CFDB FFE3          	movff	plusw2,plusw1
 18120  0044EA  06E8               	decf	wreg,f,c
 18121  0044EC  E2FC               	bc	u11171
 18122                           
 18123                           ; BSR set to: 1
 18124                           ;arp.c: 200: arp_send(request);
 18125  0044EE  EE21  F014         	lfsr	2,arp_sendRequest@request
 18126  0044F2  EE00  F0A7         	lfsr	0,arp_send@arp
 18127  0044F6  0E1F               	movlw	31
 18128  0044F8                     u11181:
 18129  0044F8  CFDB FFEB          	movff	plusw2,plusw0
 18130  0044FC  06E8               	decf	wreg,f,c
 18131  0044FE  E2FC               	bc	u11181
 18132  004500  EC30  F00E         	call	_arp_send	;wreg free
 18133  004504  0012               	return		;funcret
 18134  004506                     __end_of_arp_sendRequest:
 18135                           	opt stack 0
 18136                           tblptru	equ	0xFF8
 18137                           tblptrh	equ	0xFF7
 18138                           tblptrl	equ	0xFF6
 18139                           tablat	equ	0xFF5
 18140                           prodh	equ	0xFF4
 18141                           prodl	equ	0xFF3
 18142                           intcon	equ	0xFF2
 18143                           intcon3	equ	0xFF0
 18144                           indf0	equ	0xFEF
 18145                           postinc0	equ	0xFEE
 18146                           plusw0	equ	0xFEB
 18147                           fsr0h	equ	0xFEA
 18148                           fsr0l	equ	0xFE9
 18149                           wreg	equ	0xFE8
 18150                           indf1	equ	0xFE7
 18151                           postinc1	equ	0xFE6
 18152                           postdec1	equ	0xFE5
 18153                           plusw1	equ	0xFE3
 18154                           fsr1h	equ	0xFE2
 18155                           fsr1l	equ	0xFE1
 18156                           indf2	equ	0xFDF
 18157                           postinc2	equ	0xFDE
 18158                           postdec2	equ	0xFDD
 18159                           plusw2	equ	0xFDB
 18160                           fsr2h	equ	0xFDA
 18161                           fsr2l	equ	0xFD9
 18162                           status	equ	0xFD8
 18163                           
 18164 ;; *************** function _mac_setAllZero *****************
 18165 ;; Defined at:
 18166 ;;		line 47 in file "src/eth/mac.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18169 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 18170 ;; Auto vars:     Size  Location     Type
 18171 ;;  i               1    2[BANK0 ] unsigned char 
 18172 ;; Return value:  Size  Location     Type
 18173 ;;                  1    wreg      void 
 18174 ;; Registers used:
 18175 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18176 ;; Tracked objects:
 18177 ;;		On entry : 0/0
 18178 ;;		On exit  : 0/0
 18179 ;;		Unchanged: 0/0
 18180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18181 ;;      Params:         0       2       0       0       0       0       0       0       0
 18182 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18183 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18184 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18185 ;;Total ram usage:        3 bytes
 18186 ;; Hardware stack levels used:    1
 18187 ;; Hardware stack levels required when called:    4
 18188 ;; This function calls:
 18189 ;;		Nothing
 18190 ;; This function is called by:
 18191 ;;		_arp_sendRequest
 18192 ;;		_arp_init
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text69
 18197  005556                     __ptext69:
 18198                           	opt stack 0
 18199  005556                     _mac_setAllZero:
 18200                           	opt stack 24
 18201                           
 18202                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 18203                           
 18204                           ;incstack = 0
 18205  005556  0E00               	movlw	0
 18206  005558  0100               	movlb	0	; () banked
 18207  00555A  6F62               	movwf	mac_setAllZero@i& (0+255),b
 18208  00555C                     l8949:
 18209                           
 18210                           ; BSR set to: 0
 18211  00555C  0E05               	movlw	5
 18212  00555E  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 18213  005560  D001               	goto	l396
 18214  005562  0012               	return	
 18215  005564                     l396:
 18216                           
 18217                           ; BSR set to: 0
 18218                           ;mac.c: 49: mac->address[i] = 0x00;
 18219                           
 18220                           ; BSR set to: 0
 18221  005564  5162               	movf	mac_setAllZero@i& (0+255),w,b
 18222  005566  0D01               	mullw	1
 18223  005568  50F3               	movf	prodl,w,c
 18224  00556A  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 18225  00556C  6ED9               	movwf	fsr2l,c
 18226  00556E  50F4               	movf	prodh,w,c
 18227  005570  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 18228  005572  6EDA               	movwf	fsr2h,c
 18229  005574  0E00               	movlw	0
 18230  005576  6EDF               	movwf	indf2,c
 18231                           
 18232                           ; BSR set to: 0
 18233  005578  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 18234  00557A  D7F0               	goto	l8949
 18235  00557C                     __end_of_mac_setAllZero:
 18236                           	opt stack 0
 18237                           tblptru	equ	0xFF8
 18238                           tblptrh	equ	0xFF7
 18239                           tblptrl	equ	0xFF6
 18240                           tablat	equ	0xFF5
 18241                           prodh	equ	0xFF4
 18242                           prodl	equ	0xFF3
 18243                           intcon	equ	0xFF2
 18244                           intcon3	equ	0xFF0
 18245                           indf0	equ	0xFEF
 18246                           postinc0	equ	0xFEE
 18247                           plusw0	equ	0xFEB
 18248                           fsr0h	equ	0xFEA
 18249                           fsr0l	equ	0xFE9
 18250                           wreg	equ	0xFE8
 18251                           indf1	equ	0xFE7
 18252                           postinc1	equ	0xFE6
 18253                           postdec1	equ	0xFE5
 18254                           plusw1	equ	0xFE3
 18255                           fsr1h	equ	0xFE2
 18256                           fsr1l	equ	0xFE1
 18257                           indf2	equ	0xFDF
 18258                           postinc2	equ	0xFDE
 18259                           postdec2	equ	0xFDD
 18260                           plusw2	equ	0xFDB
 18261                           fsr2h	equ	0xFDA
 18262                           fsr2l	equ	0xFD9
 18263                           status	equ	0xFD8
 18264                           
 18265 ;; *************** function _ethernetController_getMacAddress *****************
 18266 ;; Defined at:
 18267 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 18268 ;; Parameters:    Size  Location     Type
 18269 ;;		None
 18270 ;; Auto vars:     Size  Location     Type
 18271 ;;  mac             6   20[BANK0 ] struct macaddress
 18272 ;; Return value:  Size  Location     Type
 18273 ;;                  6   14[BANK0 ] struct macaddress
 18274 ;; Registers used:
 18275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 18276 ;; Tracked objects:
 18277 ;;		On entry : 0/0
 18278 ;;		On exit  : 0/0
 18279 ;;		Unchanged: 0/0
 18280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18281 ;;      Params:         0       6       0       0       0       0       0       0       0
 18282 ;;      Locals:         0       6       0       0       0       0       0       0       0
 18283 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18284 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18285 ;;Total ram usage:       12 bytes
 18286 ;; Hardware stack levels used:    1
 18287 ;; Hardware stack levels required when called:    7
 18288 ;; This function calls:
 18289 ;;		_enc424j600_readControlRegisterUnbanked
 18290 ;; This function is called by:
 18291 ;;		_main
 18292 ;;		_arp_sendRequest
 18293 ;;		_arp_sendReply
 18294 ;;		_ipv4_sendFrame
 18295 ;; This function uses a non-reentrant model
 18296 ;;
 18297                           
 18298                           	psect	text70
 18299  004A04                     __ptext70:
 18300                           	opt stack 0
 18301  004A04                     _ethernetController_getMacAddress:
 18302                           	opt stack 21
 18303                           
 18304                           ;ENC424J600.c: 158: macaddress_t mac;
 18305                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 18306                           
 18307                           ; BSR set to: 0
 18308                           ;incstack = 0
 18309  004A04  0E74               	movlw	low ethernetController_getMacAddress@mac
 18310  004A06  0100               	movlb	0	; () banked
 18311  004A08  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18312  004A0A  0E00               	movlw	high ethernetController_getMacAddress@mac
 18313  004A0C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18314  004A0E  0E64               	movlw	100
 18315  004A10  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18316                           
 18317                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 18318  004A14  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 18319  004A16  0100               	movlb	0	; () banked
 18320  004A18  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18321  004A1A  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 18322  004A1C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18323  004A1E  0E65               	movlw	101
 18324  004A20  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18325                           
 18326                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 18327  004A24  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 18328  004A26  0100               	movlb	0	; () banked
 18329  004A28  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18330  004A2A  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 18331  004A2C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18332  004A2E  0E62               	movlw	98
 18333  004A30  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18334                           
 18335                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 18336  004A34  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 18337  004A36  0100               	movlb	0	; () banked
 18338  004A38  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18339  004A3A  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 18340  004A3C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18341  004A3E  0E63               	movlw	99
 18342  004A40  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18343                           
 18344                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 18345  004A44  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 18346  004A46  0100               	movlb	0	; () banked
 18347  004A48  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18348  004A4A  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 18349  004A4C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18350  004A4E  0E60               	movlw	96
 18351  004A50  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18352                           
 18353                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 18354  004A54  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 18355  004A56  0100               	movlb	0	; () banked
 18356  004A58  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18357  004A5A  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 18358  004A5C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18359  004A5E  0E61               	movlw	97
 18360  004A60  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 18361                           
 18362                           ;ENC424J600.c: 165: return mac;
 18363  004A64  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 18364  004A68  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 18365  004A6C  0E05               	movlw	5
 18366  004A6E                     u9841:
 18367  004A6E  CFDB FFEB          	movff	plusw2,plusw0
 18368  004A72  06E8               	decf	wreg,f,c
 18369  004A74  E2FC               	bc	u9841
 18370  004A76  0012               	return	
 18371  004A78                     __end_of_ethernetController_getMacAddress:
 18372                           	opt stack 0
 18373                           tblptru	equ	0xFF8
 18374                           tblptrh	equ	0xFF7
 18375                           tblptrl	equ	0xFF6
 18376                           tablat	equ	0xFF5
 18377                           prodh	equ	0xFF4
 18378                           prodl	equ	0xFF3
 18379                           intcon	equ	0xFF2
 18380                           intcon3	equ	0xFF0
 18381                           indf0	equ	0xFEF
 18382                           postinc0	equ	0xFEE
 18383                           plusw0	equ	0xFEB
 18384                           fsr0h	equ	0xFEA
 18385                           fsr0l	equ	0xFE9
 18386                           wreg	equ	0xFE8
 18387                           indf1	equ	0xFE7
 18388                           postinc1	equ	0xFE6
 18389                           postdec1	equ	0xFE5
 18390                           plusw1	equ	0xFE3
 18391                           fsr1h	equ	0xFE2
 18392                           fsr1l	equ	0xFE1
 18393                           indf2	equ	0xFDF
 18394                           postinc2	equ	0xFDE
 18395                           postdec2	equ	0xFDD
 18396                           plusw2	equ	0xFDB
 18397                           fsr2h	equ	0xFDA
 18398                           fsr2l	equ	0xFD9
 18399                           status	equ	0xFD8
 18400                           
 18401 ;; *************** function _arp_send *****************
 18402 ;; Defined at:
 18403 ;;		line 136 in file "src/stack/protocols/arp.c"
 18404 ;; Parameters:    Size  Location     Type
 18405 ;;  arp            32   71[BANK0 ] struct arp_message
 18406 ;; Auto vars:     Size  Location     Type
 18407 ;;  i               1  112[BANK0 ] unsigned char 
 18408 ;;  i               1  111[BANK0 ] unsigned char 
 18409 ;;  i               1  110[BANK0 ] unsigned char 
 18410 ;;  i               1  109[BANK0 ] unsigned char 
 18411 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 18412 ;;  field           9  147[BANK0 ] struct memoryField
 18413 ;;  destination     6  103[BANK0 ] struct macaddress
 18414 ;; Return value:  Size  Location     Type
 18415 ;;                  1    wreg      void 
 18416 ;; Registers used:
 18417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18418 ;; Tracked objects:
 18419 ;;		On entry : 0/0
 18420 ;;		On exit  : 0/0
 18421 ;;		Unchanged: 0/0
 18422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18423 ;;      Params:         0      32       0       0       0       0       0       0       0
 18424 ;;      Locals:         0      53       0       0       0       0       0       0       0
 18425 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18426 ;;      Totals:         0      85       0       0       0       0       0       0       0
 18427 ;;Total ram usage:       85 bytes
 18428 ;; Hardware stack levels used:    1
 18429 ;; Hardware stack levels required when called:    9
 18430 ;; This function calls:
 18431 ;;		_ethernetController_getSourceMACAddress
 18432 ;;		_ethernetController_sendPacket
 18433 ;;		_ethernetController_streamToTransmitBuffer
 18434 ;;		_ethernet_txFrameRequest
 18435 ;;		_mac_setToBroadcast
 18436 ;; This function is called by:
 18437 ;;		_arp_sendRequest
 18438 ;;		_arp_sendReply
 18439 ;; This function uses a non-reentrant model
 18440 ;;
 18441                           
 18442                           	psect	text71
 18443  001C60                     __ptext71:
 18444                           	opt stack 0
 18445  001C60                     _arp_send:
 18446                           	opt stack 18
 18447                           
 18448                           ;arp.c: 137: memoryField_t field;
 18449                           ;arp.c: 138: ethernetFrame_t ethFrame;
 18450                           ;arp.c: 141: macaddress_t destination;
 18451                           ;arp.c: 142: mac_setToBroadcast(&destination);
 18452                           
 18453                           ;incstack = 0
 18454  001C60  0EC7               	movlw	low arp_send@destination
 18455  001C62  0100               	movlb	0	; () banked
 18456  001C64  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 18457  001C66  0E00               	movlw	high arp_send@destination
 18458  001C68  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 18459  001C6A  ECBE  F02A         	call	_mac_setToBroadcast	;wreg free
 18460                           
 18461                           ;arp.c: 143: ethFrame.destination = destination;
 18462  001C6E  EE20  F0C7         	lfsr	2,arp_send@destination
 18463  001C72  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 18464  001C76  0E05               	movlw	5
 18465  001C78                     u10221:
 18466  001C78  CFDB FFE3          	movff	plusw2,plusw1
 18467  001C7C  06E8               	decf	wreg,f,c
 18468  001C7E  E2FC               	bc	u10221
 18469                           
 18470                           ;arp.c: 147: ethFrame.length = 36;
 18471  001C80  0E00               	movlw	0
 18472  001C82  0100               	movlb	0	; () banked
 18473  001C84  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 18474  001C86  0E24               	movlw	36
 18475  001C88  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 18476                           
 18477                           ; BSR set to: 0
 18478                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 18479  001C8A  EE20  F0F3         	lfsr	2,arp_send@field
 18480  001C8E  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 18481  001C92  0E08               	movlw	8
 18482  001C94                     u10231:
 18483  001C94  CFDB FFEB          	movff	plusw2,plusw0
 18484  001C98  06E8               	decf	wreg,f,c
 18485  001C9A  E2FC               	bc	u10231
 18486  001C9C  ECAD  F025         	call	_ethernetController_getSourceMACAddress	;wreg free
 18487  001CA0  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 18488  001CA4  0E05               	movlw	5
 18489  001CA6                     u10241:
 18490  001CA6  CFEB FFDB          	movff	plusw0,plusw2
 18491  001CAA  06E8               	decf	wreg,f,c
 18492  001CAC  E2FC               	bc	u10241
 18493                           
 18494                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 18495  001CAE  0E08               	movlw	8
 18496  001CB0  0100               	movlb	0	; () banked
 18497  001CB2  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 18498  001CB4  0E06               	movlw	6
 18499  001CB6  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 18500                           
 18501                           ; BSR set to: 0
 18502                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 18503  001CB8  0ED1               	movlw	low arp_send@ethFrame
 18504  001CBA  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 18505  001CBC  0E00               	movlw	high arp_send@ethFrame
 18506  001CBE  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 18507  001CC0  EC04  F01F         	call	_ethernet_txFrameRequest	;wreg free
 18508                           
 18509                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 18510  001CC4  0100               	movlb	0	; () banked
 18511  001CC6  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 18512  001CC8  A4D8               	btfss	status,2,c
 18513  001CCA  0012               	return	
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;arp.c: 155: }
 18517                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 18518                           
 18519                           ; BSR set to: 0
 18520                           
 18521                           ; BSR set to: 0
 18522                           ;arp.c: 154: return;
 18523  001CCC  0E08               	movlw	8
 18524  001CCE  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 18525  001CD0  6FF3               	movwf	arp_send@field& (0+255),b
 18526  001CD2  0E00               	movlw	0
 18527  001CD4  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 18528  001CD6  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 18529                           
 18530                           ; BSR set to: 0
 18531                           ;arp.c: 158: field.end = ethFrame.memory.end;
 18532  001CD8  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 18533  001CDC  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 18534                           
 18535                           ; BSR set to: 0
 18536                           ;arp.c: 159: field.length = 28;
 18537  001CE0  0E00               	movlw	0
 18538  001CE2  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 18539  001CE4  0E1C               	movlw	28
 18540  001CE6  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 18541                           
 18542                           ; BSR set to: 0
 18543                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 18544  001CE8  EE20  F0F3         	lfsr	2,arp_send@field
 18545  001CEC  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18546  001CF0  0E08               	movlw	8
 18547  001CF2                     u10261:
 18548  001CF2  CFDB FFEB          	movff	plusw2,plusw0
 18549  001CF6  06E8               	decf	wreg,f,c
 18550  001CF8  E2FC               	bc	u10261
 18551  001CFA  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 18552  001CFC  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18553                           
 18554                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 18555  001D00  EE20  F0F3         	lfsr	2,arp_send@field
 18556  001D04  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18557  001D08  0E08               	movlw	8
 18558  001D0A                     u10271:
 18559  001D0A  CFDB FFEB          	movff	plusw2,plusw0
 18560  001D0E  06E8               	decf	wreg,f,c
 18561  001D10  E2FC               	bc	u10271
 18562  001D12  0100               	movlb	0	; () banked
 18563  001D14  51A7               	movf	arp_send@arp& (0+255),w,b
 18564  001D16  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18565                           
 18566                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 18567  001D1A  EE20  F0F3         	lfsr	2,arp_send@field
 18568  001D1E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18569  001D22  0E08               	movlw	8
 18570  001D24                     u10281:
 18571  001D24  CFDB FFEB          	movff	plusw2,plusw0
 18572  001D28  06E8               	decf	wreg,f,c
 18573  001D2A  E2FC               	bc	u10281
 18574  001D2C  0100               	movlb	0	; () banked
 18575  001D2E  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 18576  001D30  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18577                           
 18578                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 18579  001D34  EE20  F0F3         	lfsr	2,arp_send@field
 18580  001D38  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18581  001D3C  0E08               	movlw	8
 18582  001D3E                     u10291:
 18583  001D3E  CFDB FFEB          	movff	plusw2,plusw0
 18584  001D42  06E8               	decf	wreg,f,c
 18585  001D44  E2FC               	bc	u10291
 18586  001D46  0100               	movlb	0	; () banked
 18587  001D48  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 18588  001D4A  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18589                           
 18590                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 18591  001D4E  EE20  F0F3         	lfsr	2,arp_send@field
 18592  001D52  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18593  001D56  0E08               	movlw	8
 18594  001D58                     u10301:
 18595  001D58  CFDB FFEB          	movff	plusw2,plusw0
 18596  001D5C  06E8               	decf	wreg,f,c
 18597  001D5E  E2FC               	bc	u10301
 18598  001D60  0100               	movlb	0	; () banked
 18599  001D62  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18600  001D64  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18601                           
 18602                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 18603  001D68  EE20  F0F3         	lfsr	2,arp_send@field
 18604  001D6C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18605  001D70  0E08               	movlw	8
 18606  001D72                     u10311:
 18607  001D72  CFDB FFEB          	movff	plusw2,plusw0
 18608  001D76  06E8               	decf	wreg,f,c
 18609  001D78  E2FC               	bc	u10311
 18610  001D7A  0100               	movlb	0	; () banked
 18611  001D7C  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18612  001D7E  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18613                           
 18614                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 18615  001D82  EE20  F0F3         	lfsr	2,arp_send@field
 18616  001D86  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18617  001D8A  0E08               	movlw	8
 18618  001D8C                     u10321:
 18619  001D8C  CFDB FFEB          	movff	plusw2,plusw0
 18620  001D90  06E8               	decf	wreg,f,c
 18621  001D92  E2FC               	bc	u10321
 18622  001D94  0100               	movlb	0	; () banked
 18623  001D96  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 18624  001D98  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18625                           
 18626                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 18627  001D9C  EE20  F0F3         	lfsr	2,arp_send@field
 18628  001DA0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18629  001DA4  0E08               	movlw	8
 18630  001DA6                     u10331:
 18631  001DA6  CFDB FFEB          	movff	plusw2,plusw0
 18632  001DAA  06E8               	decf	wreg,f,c
 18633  001DAC  E2FC               	bc	u10331
 18634  001DAE  0100               	movlb	0	; () banked
 18635  001DB0  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 18636  001DB2  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18637                           
 18638                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 18639  001DB6  0E00               	movlw	0
 18640  001DB8  0100               	movlb	0	; () banked
 18641  001DBA  6FCD               	movwf	arp_send@i& (0+255),b
 18642  001DBC  D01A               	goto	l960
 18643  001DBE                     
 18644                           ; BSR set to: 0
 18645                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 18646                           
 18647                           ; BSR set to: 0
 18648  001DBE  EE20  F0F3         	lfsr	2,arp_send@field
 18649  001DC2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18650  001DC6  0E08               	movlw	8
 18651  001DC8                     u10341:
 18652  001DC8  CFDB FFEB          	movff	plusw2,plusw0
 18653  001DCC  06E8               	decf	wreg,f,c
 18654  001DCE  E2FC               	bc	u10341
 18655  001DD0  51CD               	movf	arp_send@i& (0+255),w,b
 18656  001DD2  0D01               	mullw	1
 18657  001DD4  0E08               	movlw	8
 18658  001DD6  26F3               	addwf	prodl,f,c
 18659  001DD8  0E00               	movlw	0
 18660  001DDA  22F4               	addwfc	prodh,f,c
 18661  001DDC  0EA7               	movlw	low arp_send@arp
 18662  001DDE  24F3               	addwf	prodl,w,c
 18663  001DE0  6ED9               	movwf	fsr2l,c
 18664  001DE2  0E00               	movlw	high arp_send@arp
 18665  001DE4  20F4               	addwfc	prodh,w,c
 18666  001DE6  6EDA               	movwf	fsr2h,c
 18667  001DE8  50DF               	movf	indf2,w,c
 18668  001DEA  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18669  001DEE  0100               	movlb	0	; () banked
 18670  001DF0  2BCD               	incf	arp_send@i& (0+255),f,b
 18671  001DF2                     l960:
 18672                           
 18673                           ; BSR set to: 0
 18674                           
 18675                           ; BSR set to: 0
 18676  001DF2  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18677  001DF4  5DCD               	subwf	arp_send@i& (0+255),w,b
 18678  001DF6  A0D8               	btfss	status,0,c
 18679  001DF8  D7E2               	goto	l961
 18680                           
 18681                           ; BSR set to: 0
 18682                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 18683                           
 18684                           ; BSR set to: 0
 18685  001DFA  0E00               	movlw	0
 18686  001DFC  6FCE               	movwf	arp_send@i_3100& (0+255),b
 18687  001DFE  D01A               	goto	l963
 18688  001E00                     
 18689                           ; BSR set to: 0
 18690                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 18691                           
 18692                           ; BSR set to: 0
 18693  001E00  EE20  F0F3         	lfsr	2,arp_send@field
 18694  001E04  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18695  001E08  0E08               	movlw	8
 18696  001E0A                     u10361:
 18697  001E0A  CFDB FFEB          	movff	plusw2,plusw0
 18698  001E0E  06E8               	decf	wreg,f,c
 18699  001E10  E2FC               	bc	u10361
 18700  001E12  51CE               	movf	arp_send@i_3100& (0+255),w,b
 18701  001E14  0D01               	mullw	1
 18702  001E16  0E0E               	movlw	14
 18703  001E18  26F3               	addwf	prodl,f,c
 18704  001E1A  0E00               	movlw	0
 18705  001E1C  22F4               	addwfc	prodh,f,c
 18706  001E1E  0EA7               	movlw	low arp_send@arp
 18707  001E20  24F3               	addwf	prodl,w,c
 18708  001E22  6ED9               	movwf	fsr2l,c
 18709  001E24  0E00               	movlw	high arp_send@arp
 18710  001E26  20F4               	addwfc	prodh,w,c
 18711  001E28  6EDA               	movwf	fsr2h,c
 18712  001E2A  50DF               	movf	indf2,w,c
 18713  001E2C  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18714  001E30  0100               	movlb	0	; () banked
 18715  001E32  2BCE               	incf	arp_send@i_3100& (0+255),f,b
 18716  001E34                     l963:
 18717                           
 18718                           ; BSR set to: 0
 18719                           
 18720                           ; BSR set to: 0
 18721  001E34  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18722  001E36  5DCE               	subwf	arp_send@i_3100& (0+255),w,b
 18723  001E38  A0D8               	btfss	status,0,c
 18724  001E3A  D7E2               	goto	l964
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 18728                           
 18729                           ; BSR set to: 0
 18730  001E3C  0E00               	movlw	0
 18731  001E3E  6FCF               	movwf	arp_send@i_3101& (0+255),b
 18732  001E40  D01A               	goto	l966
 18733  001E42                     
 18734                           ; BSR set to: 0
 18735                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 18736                           
 18737                           ; BSR set to: 0
 18738  001E42  EE20  F0F3         	lfsr	2,arp_send@field
 18739  001E46  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18740  001E4A  0E08               	movlw	8
 18741  001E4C                     u10381:
 18742  001E4C  CFDB FFEB          	movff	plusw2,plusw0
 18743  001E50  06E8               	decf	wreg,f,c
 18744  001E52  E2FC               	bc	u10381
 18745  001E54  51CF               	movf	arp_send@i_3101& (0+255),w,b
 18746  001E56  0D01               	mullw	1
 18747  001E58  0E12               	movlw	18
 18748  001E5A  26F3               	addwf	prodl,f,c
 18749  001E5C  0E00               	movlw	0
 18750  001E5E  22F4               	addwfc	prodh,f,c
 18751  001E60  0EA7               	movlw	low arp_send@arp
 18752  001E62  24F3               	addwf	prodl,w,c
 18753  001E64  6ED9               	movwf	fsr2l,c
 18754  001E66  0E00               	movlw	high arp_send@arp
 18755  001E68  20F4               	addwfc	prodh,w,c
 18756  001E6A  6EDA               	movwf	fsr2h,c
 18757  001E6C  50DF               	movf	indf2,w,c
 18758  001E6E  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18759  001E72  0100               	movlb	0	; () banked
 18760  001E74  2BCF               	incf	arp_send@i_3101& (0+255),f,b
 18761  001E76                     l966:
 18762                           
 18763                           ; BSR set to: 0
 18764                           
 18765                           ; BSR set to: 0
 18766  001E76  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 18767  001E78  5DCF               	subwf	arp_send@i_3101& (0+255),w,b
 18768  001E7A  A0D8               	btfss	status,0,c
 18769  001E7C  D7E2               	goto	l967
 18770                           
 18771                           ; BSR set to: 0
 18772                           ;arp.c: 175: for (uint8_t i = 0; i < arp.plen; i++)
 18773                           
 18774                           ; BSR set to: 0
 18775  001E7E  0E00               	movlw	0
 18776  001E80  6FD0               	movwf	arp_send@i_3102& (0+255),b
 18777  001E82  D01A               	goto	l969
 18778  001E84                     
 18779                           ; BSR set to: 0
 18780                           ;arp.c: 176: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 18781                           
 18782                           ; BSR set to: 0
 18783  001E84  EE20  F0F3         	lfsr	2,arp_send@field
 18784  001E88  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 18785  001E8C  0E08               	movlw	8
 18786  001E8E                     u10401:
 18787  001E8E  CFDB FFEB          	movff	plusw2,plusw0
 18788  001E92  06E8               	decf	wreg,f,c
 18789  001E94  E2FC               	bc	u10401
 18790  001E96  51D0               	movf	arp_send@i_3102& (0+255),w,b
 18791  001E98  0D01               	mullw	1
 18792  001E9A  0E18               	movlw	24
 18793  001E9C  26F3               	addwf	prodl,f,c
 18794  001E9E  0E00               	movlw	0
 18795  001EA0  22F4               	addwfc	prodh,f,c
 18796  001EA2  0EA7               	movlw	low arp_send@arp
 18797  001EA4  24F3               	addwf	prodl,w,c
 18798  001EA6  6ED9               	movwf	fsr2l,c
 18799  001EA8  0E00               	movlw	high arp_send@arp
 18800  001EAA  20F4               	addwfc	prodh,w,c
 18801  001EAC  6EDA               	movwf	fsr2h,c
 18802  001EAE  50DF               	movf	indf2,w,c
 18803  001EB0  EC52  F024         	call	_ethernetController_streamToTransmitBuffer
 18804  001EB4  0100               	movlb	0	; () banked
 18805  001EB6  2BD0               	incf	arp_send@i_3102& (0+255),f,b
 18806  001EB8                     l969:
 18807                           
 18808                           ; BSR set to: 0
 18809                           
 18810                           ; BSR set to: 0
 18811  001EB8  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 18812  001EBA  5DD0               	subwf	arp_send@i_3102& (0+255),w,b
 18813  001EBC  A0D8               	btfss	status,0,c
 18814  001EBE  D7E2               	goto	l970
 18815                           
 18816                           ; BSR set to: 0
 18817                           ;arp.c: 178: ethernetController_sendPacket(ethFrame.memory);
 18818                           
 18819                           ; BSR set to: 0
 18820  001EC0  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 18821  001EC4  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 18822  001EC8  0E08               	movlw	8
 18823  001ECA                     u10421:
 18824  001ECA  CFDB FFEB          	movff	plusw2,plusw0
 18825  001ECE  06E8               	decf	wreg,f,c
 18826  001ED0  E2FC               	bc	u10421
 18827  001ED2  EC70  F02A         	call	_ethernetController_sendPacket	;wreg free
 18828  001ED6  0012               	return		;funcret
 18829  001ED8                     __end_of_arp_send:
 18830                           	opt stack 0
 18831                           tblptru	equ	0xFF8
 18832                           tblptrh	equ	0xFF7
 18833                           tblptrl	equ	0xFF6
 18834                           tablat	equ	0xFF5
 18835                           prodh	equ	0xFF4
 18836                           prodl	equ	0xFF3
 18837                           intcon	equ	0xFF2
 18838                           intcon3	equ	0xFF0
 18839                           indf0	equ	0xFEF
 18840                           postinc0	equ	0xFEE
 18841                           plusw0	equ	0xFEB
 18842                           fsr0h	equ	0xFEA
 18843                           fsr0l	equ	0xFE9
 18844                           wreg	equ	0xFE8
 18845                           indf1	equ	0xFE7
 18846                           postinc1	equ	0xFE6
 18847                           postdec1	equ	0xFE5
 18848                           plusw1	equ	0xFE3
 18849                           fsr1h	equ	0xFE2
 18850                           fsr1l	equ	0xFE1
 18851                           indf2	equ	0xFDF
 18852                           postinc2	equ	0xFDE
 18853                           postdec2	equ	0xFDD
 18854                           plusw2	equ	0xFDB
 18855                           fsr2h	equ	0xFDA
 18856                           fsr2l	equ	0xFD9
 18857                           status	equ	0xFD8
 18858                           
 18859 ;; *************** function _mac_setToBroadcast *****************
 18860 ;; Defined at:
 18861 ;;		line 26 in file "src/eth/mac.c"
 18862 ;; Parameters:    Size  Location     Type
 18863 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18864 ;;		 -> arp_send@destination(6), 
 18865 ;; Auto vars:     Size  Location     Type
 18866 ;;  i               1    2[BANK0 ] unsigned char 
 18867 ;; Return value:  Size  Location     Type
 18868 ;;                  1    wreg      void 
 18869 ;; Registers used:
 18870 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18871 ;; Tracked objects:
 18872 ;;		On entry : 0/0
 18873 ;;		On exit  : 0/0
 18874 ;;		Unchanged: 0/0
 18875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18876 ;;      Params:         0       2       0       0       0       0       0       0       0
 18877 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18878 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18879 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18880 ;;Total ram usage:        3 bytes
 18881 ;; Hardware stack levels used:    1
 18882 ;; Hardware stack levels required when called:    4
 18883 ;; This function calls:
 18884 ;;		Nothing
 18885 ;; This function is called by:
 18886 ;;		_arp_send
 18887 ;; This function uses a non-reentrant model
 18888 ;;
 18889                           
 18890                           	psect	text72
 18891  00557C                     __ptext72:
 18892                           	opt stack 0
 18893  00557C                     _mac_setToBroadcast:
 18894                           	opt stack 22
 18895                           
 18896                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 18897                           
 18898                           ;incstack = 0
 18899  00557C  0E00               	movlw	0
 18900  00557E  0100               	movlb	0	; () banked
 18901  005580  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 18902  005582                     l8705:
 18903                           
 18904                           ; BSR set to: 0
 18905  005582  0E05               	movlw	5
 18906  005584  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 18907  005586  D001               	goto	l379
 18908  005588  0012               	return	
 18909  00558A                     l379:
 18910                           
 18911                           ; BSR set to: 0
 18912                           ;mac.c: 28: mac->address[i] = 0xff;
 18913                           
 18914                           ; BSR set to: 0
 18915  00558A  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 18916  00558C  0D01               	mullw	1
 18917  00558E  50F3               	movf	prodl,w,c
 18918  005590  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 18919  005592  6ED9               	movwf	fsr2l,c
 18920  005594  50F4               	movf	prodh,w,c
 18921  005596  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 18922  005598  6EDA               	movwf	fsr2h,c
 18923  00559A  0EFF               	movlw	255
 18924  00559C  6EDF               	movwf	indf2,c
 18925                           
 18926                           ; BSR set to: 0
 18927  00559E  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 18928  0055A0  D7F0               	goto	l8705
 18929  0055A2                     __end_of_mac_setToBroadcast:
 18930                           	opt stack 0
 18931                           tblptru	equ	0xFF8
 18932                           tblptrh	equ	0xFF7
 18933                           tblptrl	equ	0xFF6
 18934                           tablat	equ	0xFF5
 18935                           prodh	equ	0xFF4
 18936                           prodl	equ	0xFF3
 18937                           intcon	equ	0xFF2
 18938                           intcon3	equ	0xFF0
 18939                           indf0	equ	0xFEF
 18940                           postinc0	equ	0xFEE
 18941                           plusw0	equ	0xFEB
 18942                           fsr0h	equ	0xFEA
 18943                           fsr0l	equ	0xFE9
 18944                           wreg	equ	0xFE8
 18945                           indf1	equ	0xFE7
 18946                           postinc1	equ	0xFE6
 18947                           postdec1	equ	0xFE5
 18948                           plusw1	equ	0xFE3
 18949                           fsr1h	equ	0xFE2
 18950                           fsr1l	equ	0xFE1
 18951                           indf2	equ	0xFDF
 18952                           postinc2	equ	0xFDE
 18953                           postdec2	equ	0xFDD
 18954                           plusw2	equ	0xFDB
 18955                           fsr2h	equ	0xFDA
 18956                           fsr2l	equ	0xFD9
 18957                           status	equ	0xFD8
 18958                           
 18959 ;; *************** function _ethernet_txFrameRequest *****************
 18960 ;; Defined at:
 18961 ;;		line 30 in file "src/eth/ethernet.c"
 18962 ;; Parameters:    Size  Location     Type
 18963 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 18964 ;;		 -> arp_send@ethFrame(34), stack(123), 
 18965 ;; Auto vars:     Size  Location     Type
 18966 ;;  err             3   68[BANK0 ] struct error
 18967 ;; Return value:  Size  Location     Type
 18968 ;;                  3   66[BANK0 ] struct error
 18969 ;; Registers used:
 18970 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18971 ;; Tracked objects:
 18972 ;;		On entry : 0/0
 18973 ;;		On exit  : 0/0
 18974 ;;		Unchanged: 0/0
 18975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18976 ;;      Params:         0       2       0       0       0       0       0       0       0
 18977 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18978 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18979 ;;      Totals:         0       5       0       0       0       0       0       0       0
 18980 ;;Total ram usage:        5 bytes
 18981 ;; Hardware stack levels used:    1
 18982 ;; Hardware stack levels required when called:    8
 18983 ;; This function calls:
 18984 ;;		_ethernetController_writeDestinationMACAddress
 18985 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 18986 ;;		_memory_txFrameRequest
 18987 ;; This function is called by:
 18988 ;;		_arp_send
 18989 ;;		_ipv4_txFrameRequest
 18990 ;; This function uses a non-reentrant model
 18991 ;;
 18992                           
 18993                           	psect	text73
 18994  003E08                     __ptext73:
 18995                           	opt stack 0
 18996  003E08                     _ethernet_txFrameRequest:
 18997                           	opt stack 21
 18998                           
 18999                           ;ethernet.c: 32: error_t err;
 19000                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 19001                           
 19002                           ; BSR set to: 0
 19003                           ;incstack = 0
 19004  003E08  0E02               	movlw	2
 19005  003E0A  0100               	movlb	0	; () banked
 19006  003E0C  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19007                           
 19008                           ;ethernet.c: 34: err.code = (uint16_t)0;
 19009  003E0E  0E00               	movlw	0
 19010  003E10  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19011  003E12  0E00               	movlw	0
 19012  003E14  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 19016  003E16  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 19017  003E1A  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 19018  003E1E  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 19019  003E22  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 19020  003E26  ECFF  F002         	call	_memory_txFrameRequest	;wreg free
 19021  003E2A  0100               	movlb	0	; () banked
 19022  003E2C  EE20 F010          	lfsr	2,16
 19023  003E30  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19024  003E32  26D9               	addwf	fsr2l,f,c
 19025  003E34  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19026  003E36  22DA               	addwfc	fsr2h,f,c
 19027  003E38  0E08               	movlw	8
 19028  003E3A                     u9651:
 19029  003E3A  CFEB FFDB          	movff	plusw0,plusw2
 19030  003E3E  06E8               	decf	wreg,f,c
 19031  003E40  E2FC               	bc	u9651
 19032                           
 19033                           ; BSR set to: 0
 19034                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 19035  003E42  EE20 F017          	lfsr	2,23
 19036  003E46  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19037  003E48  26D9               	addwf	fsr2l,f,c
 19038  003E4A  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19039  003E4C  22DA               	addwfc	fsr2h,f,c
 19040  003E4E  50DF               	movf	indf2,w,c
 19041  003E50  B4D8               	btfsc	status,2,c
 19042  003E52  D007               	goto	l359
 19043                           
 19044                           ; BSR set to: 0
 19045                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 19046  003E54  0E00               	movlw	0
 19047  003E56  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19048                           
 19049                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 19050  003E58  0E00               	movlw	0
 19051  003E5A  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19052  003E5C  0E65               	movlw	101
 19053  003E5E  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19054                           
 19055                           ; BSR set to: 0
 19056                           ;ethernet.c: 41: return err;
 19057                           ;	Return value of _ethernet_txFrameRequest is never used
 19058  003E60  0012               	return	
 19059  003E62                     l359:
 19060                           
 19061                           ; BSR set to: 0
 19062                           ;ethernet.c: 42: }
 19063                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 19064                           
 19065                           ; BSR set to: 0
 19066  003E62  EE20 F016          	lfsr	2,22
 19067  003E66  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19068  003E68  26D9               	addwf	fsr2l,f,c
 19069  003E6A  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19070  003E6C  22DA               	addwfc	fsr2h,f,c
 19071  003E6E  50DF               	movf	indf2,w,c
 19072  003E70  A4D8               	btfss	status,2,c
 19073  003E72  D007               	goto	l361
 19074                           
 19075                           ; BSR set to: 0
 19076                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 19077  003E74  0E00               	movlw	0
 19078  003E76  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 19079                           
 19080                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 19081  003E78  0E00               	movlw	0
 19082  003E7A  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 19083  003E7C  0EC7               	movlw	199
 19084  003E7E  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 19085                           
 19086                           ; BSR set to: 0
 19087                           ;ethernet.c: 47: return err;
 19088                           ;	Return value of _ethernet_txFrameRequest is never used
 19089  003E80  0012               	return	
 19090  003E82                     l361:
 19091                           
 19092                           ; BSR set to: 0
 19093                           ;ethernet.c: 48: }
 19094                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 19095                           
 19096                           ; BSR set to: 0
 19097  003E82  EE20 F008          	lfsr	2,8
 19098  003E86  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19099  003E88  26D9               	addwf	fsr2l,f,c
 19100  003E8A  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19101  003E8C  22DA               	addwfc	fsr2h,f,c
 19102  003E8E  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 19103  003E92  0E05               	movlw	5
 19104  003E94                     u9681:
 19105  003E94  CFDB FFEB          	movff	plusw2,plusw0
 19106  003E98  06E8               	decf	wreg,f,c
 19107  003E9A  E2FC               	bc	u9681
 19108  003E9C  EE20 F010          	lfsr	2,16
 19109  003EA0  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19110  003EA2  26D9               	addwf	fsr2l,f,c
 19111  003EA4  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19112  003EA6  22DA               	addwfc	fsr2h,f,c
 19113  003EA8  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 19114  003EAC  0E08               	movlw	8
 19115  003EAE                     u9691:
 19116  003EAE  CFDB FFEB          	movff	plusw2,plusw0
 19117  003EB2  06E8               	decf	wreg,f,c
 19118  003EB4  E2FC               	bc	u9691
 19119  003EB6  EC96  F023         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 19120                           
 19121                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 19122  003EBA  0100               	movlb	0	; () banked
 19123  003EBC  EE20 F00E          	lfsr	2,14
 19124  003EC0  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19125  003EC2  26D9               	addwf	fsr2l,f,c
 19126  003EC4  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19127  003EC6  22DA               	addwfc	fsr2h,f,c
 19128  003EC8  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 19129  003ECC  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 19130  003ED0  EE20 F010          	lfsr	2,16
 19131  003ED4  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 19132  003ED6  26D9               	addwf	fsr2l,f,c
 19133  003ED8  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 19134  003EDA  22DA               	addwfc	fsr2h,f,c
 19135  003EDC  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 19136  003EE0  0E08               	movlw	8
 19137  003EE2                     u9701:
 19138  003EE2  CFDB FFEB          	movff	plusw2,plusw0
 19139  003EE6  06E8               	decf	wreg,f,c
 19140  003EE8  E2FC               	bc	u9701
 19141  003EEA  ECAE  F027         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 19142  003EEE  0012               	return	
 19143  003EF0                     __end_of_ethernet_txFrameRequest:
 19144                           	opt stack 0
 19145                           tblptru	equ	0xFF8
 19146                           tblptrh	equ	0xFF7
 19147                           tblptrl	equ	0xFF6
 19148                           tablat	equ	0xFF5
 19149                           prodh	equ	0xFF4
 19150                           prodl	equ	0xFF3
 19151                           intcon	equ	0xFF2
 19152                           intcon3	equ	0xFF0
 19153                           indf0	equ	0xFEF
 19154                           postinc0	equ	0xFEE
 19155                           plusw0	equ	0xFEB
 19156                           fsr0h	equ	0xFEA
 19157                           fsr0l	equ	0xFE9
 19158                           wreg	equ	0xFE8
 19159                           indf1	equ	0xFE7
 19160                           postinc1	equ	0xFE6
 19161                           postdec1	equ	0xFE5
 19162                           plusw1	equ	0xFE3
 19163                           fsr1h	equ	0xFE2
 19164                           fsr1l	equ	0xFE1
 19165                           indf2	equ	0xFDF
 19166                           postinc2	equ	0xFDE
 19167                           postdec2	equ	0xFDD
 19168                           plusw2	equ	0xFDB
 19169                           fsr2h	equ	0xFDA
 19170                           fsr2l	equ	0xFD9
 19171                           status	equ	0xFD8
 19172                           
 19173 ;; *************** function _memory_txFrameRequest *****************
 19174 ;; Defined at:
 19175 ;;		line 133 in file "src/mem/memoryController.c"
 19176 ;; Parameters:    Size  Location     Type
 19177 ;;  length          2   36[BANK0 ] unsigned int 
 19178 ;; Auto vars:     Size  Location     Type
 19179 ;;  i               1   54[BANK0 ] unsigned char 
 19180 ;;  i               1   55[BANK0 ] unsigned char 
 19181 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 19182 ;;  field           9   56[BANK0 ] struct memoryField
 19183 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 19184 ;; Return value:  Size  Location     Type
 19185 ;;                  9   36[BANK0 ] struct memoryField
 19186 ;; Registers used:
 19187 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19188 ;; Tracked objects:
 19189 ;;		On entry : 0/0
 19190 ;;		On exit  : 0/0
 19191 ;;		Unchanged: 0/0
 19192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19193 ;;      Params:         0       9       0       0       0       0       0       0       0
 19194 ;;      Locals:         0      15       0       0       0       0       0       0       0
 19195 ;;      Temps:          0       6       0       0       0       0       0       0       0
 19196 ;;      Totals:         0      30       0       0       0       0       0       0       0
 19197 ;;Total ram usage:       30 bytes
 19198 ;; Hardware stack levels used:    1
 19199 ;; Hardware stack levels required when called:    6
 19200 ;; This function calls:
 19201 ;;		___wmul
 19202 ;;		_checkForOverlap
 19203 ;;		_entireMemoryEmpty
 19204 ;;		_entireMemoryFull
 19205 ;; This function is called by:
 19206 ;;		_ethernet_txFrameRequest
 19207 ;; This function uses a non-reentrant model
 19208 ;;
 19209                           
 19210                           	psect	text74
 19211  0005FE                     __ptext74:
 19212                           	opt stack 0
 19213  0005FE                     _memory_txFrameRequest:
 19214                           	opt stack 22
 19215                           
 19216                           ;memoryController.c: 134: memoryField_t field;
 19217                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 19218                           
 19219                           ;incstack = 0
 19220  0005FE  0E00               	movlw	0
 19221  000600  0100               	movlb	0	; () banked
 19222  000602  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 19223                           
 19224                           ; BSR set to: 0
 19225                           ;memoryController.c: 137: if (length == 0) {
 19226  000604  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19227  000606  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19228  000608  A4D8               	btfss	status,2,c
 19229  00060A  D00C               	goto	l462
 19230                           
 19231                           ; BSR set to: 0
 19232                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 19233  00060C  0E01               	movlw	1
 19234  00060E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19235                           
 19236                           ; BSR set to: 0
 19237                           ;memoryController.c: 139: return field;
 19238  000610  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19239  000614  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19240  000618  0E08               	movlw	8
 19241  00061A                     u9201:
 19242  00061A  CFDB FFEB          	movff	plusw2,plusw0
 19243  00061E  06E8               	decf	wreg,f,c
 19244  000620  E2FC               	bc	u9201
 19245                           
 19246                           ; BSR set to: 0
 19247  000622  0012               	return	
 19248  000624                     l462:
 19249                           
 19250                           ; BSR set to: 0
 19251                           ;memoryController.c: 140: }
 19252                           ;memoryController.c: 142: if (entireMemoryFull()) {
 19253                           
 19254                           ; BSR set to: 0
 19255  000624  EC26  F029         	call	_entireMemoryFull	;wreg free
 19256  000628  A0D8               	btfss	status,0,c
 19257  00062A  D00D               	goto	l464
 19258                           
 19259                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 19260  00062C  0E01               	movlw	1
 19261  00062E  0100               	movlb	0	; () banked
 19262  000630  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19263                           
 19264                           ; BSR set to: 0
 19265                           ;memoryController.c: 144: return field;
 19266  000632  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19267  000636  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19268  00063A  0E08               	movlw	8
 19269  00063C                     u9221:
 19270  00063C  CFDB FFEB          	movff	plusw2,plusw0
 19271  000640  06E8               	decf	wreg,f,c
 19272  000642  E2FC               	bc	u9221
 19273                           
 19274                           ; BSR set to: 0
 19275  000644  0012               	return	
 19276  000646                     l464:
 19277                           
 19278                           ;memoryController.c: 145: }
 19279                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 19280                           
 19281                           ; BSR set to: 0
 19282  000646  EC42  F029         	call	_entireMemoryEmpty	;wreg free
 19283  00064A  A0D8               	btfss	status,0,c
 19284  00064C  D238               	goto	l489
 19285                           
 19286                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 19287  00064E  0E30               	movlw	48
 19288  000650  0100               	movlb	0	; () banked
 19289  000652  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19290  000654  A0D8               	btfss	status,0,c
 19291  000656  D00C               	goto	l466
 19292                           
 19293                           ; BSR set to: 0
 19294                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 19295  000658  0E01               	movlw	1
 19296  00065A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;memoryController.c: 150: return field;
 19300  00065C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19301  000660  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19302  000664  0E08               	movlw	8
 19303  000666                     u9251:
 19304  000666  CFDB FFEB          	movff	plusw2,plusw0
 19305  00066A  06E8               	decf	wreg,f,c
 19306  00066C  E2FC               	bc	u9251
 19307                           
 19308                           ; BSR set to: 0
 19309  00066E  0012               	return	
 19310  000670                     l466:
 19311                           
 19312                           ; BSR set to: 0
 19313                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 19314                           
 19315                           ; BSR set to: 0
 19316  000670  0E00               	movlw	0
 19317  000672  0102               	movlb	2	; () banked
 19318  000674  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 19319  000676  0E00               	movlw	0
 19320  000678  6F00               	movwf	_occupiedMemory& (0+255),b
 19321                           
 19322                           ; BSR set to: 2
 19323                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 19324  00067A  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 19325  00067E  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 19326                           
 19327                           ; BSR set to: 2
 19328                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 19329  000682  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 19330  000686  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 19331                           
 19332                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 19333  00068A  0E01               	movlw	1
 19334  00068C  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 19335                           
 19336                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 19337  00068E  0E00               	movlw	0
 19338  000690  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 19339                           
 19340                           ; BSR set to: 2
 19341                           ;memoryController.c: 157: return occupiedMemory[0];
 19342  000692  EE22  F000         	lfsr	2,_occupiedMemory
 19343  000696  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19344  00069A  0E08               	movlw	8
 19345  00069C                     u9261:
 19346  00069C  CFDB FFEB          	movff	plusw2,plusw0
 19347  0006A0  06E8               	decf	wreg,f,c
 19348  0006A2  E2FC               	bc	u9261
 19349                           
 19350                           ; BSR set to: 2
 19351  0006A4  0012               	return	
 19352  0006A6                     
 19353                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 19354                           
 19355                           ; BSR set to: 2
 19356  0006A6  0100               	movlb	0	; () banked
 19357  0006A8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19358  0006AA  0D09               	mullw	9
 19359  0006AC  0E06               	movlw	6
 19360  0006AE  26F3               	addwf	prodl,f,c
 19361  0006B0  0E00               	movlw	0
 19362  0006B2  22F4               	addwfc	prodh,f,c
 19363  0006B4  0E00               	movlw	low _occupiedMemory
 19364  0006B6  24F3               	addwf	prodl,w,c
 19365  0006B8  6ED9               	movwf	fsr2l,c
 19366  0006BA  0E02               	movlw	high _occupiedMemory
 19367  0006BC  20F4               	addwfc	prodh,w,c
 19368  0006BE  6EDA               	movwf	fsr2h,c
 19369  0006C0  50DF               	movf	indf2,w,c
 19370  0006C2  A4D8               	btfss	status,2,c
 19371  0006C4  D1EB               	goto	l488
 19372                           
 19373                           ; BSR set to: 0
 19374                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 19375  0006C6  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19376  0006C8  B4D8               	btfsc	status,2,c
 19377  0006CA  D007               	goto	l472
 19378                           
 19379                           ; BSR set to: 0
 19380  0006CC  0EFF               	movlw	255
 19381  0006CE  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19382  0006D0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19383  0006D2  6B94               	clrf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19384  0006D4  0EFF               	movlw	255
 19385  0006D6  2394               	addwfc	(_memory_txFrameRequest$1174+1)& (0+255),f,b
 19386  0006D8  D004               	goto	l474
 19387  0006DA                     l472:
 19388                           
 19389                           ; BSR set to: 0
 19390                           
 19391                           ; BSR set to: 0
 19392  0006DA  0E00               	movlw	0
 19393  0006DC  6F94               	movwf	(_memory_txFrameRequest$1174+1)& (0+255),b
 19394  0006DE  0E07               	movlw	7
 19395  0006E0  6F93               	movwf	_memory_txFrameRequest$1174& (0+255),b
 19396  0006E2                     l474:
 19397                           
 19398                           ; BSR set to: 0
 19399                           
 19400                           ; BSR set to: 0
 19401  0006E2  C093  F060         	movff	_memory_txFrameRequest$1174,___wmul@multiplier
 19402  0006E6  C094  F061         	movff	_memory_txFrameRequest$1174+1,___wmul@multiplier+1
 19403  0006EA  0E00               	movlw	0
 19404  0006EC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19405  0006EE  0E09               	movlw	9
 19406  0006F0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19407  0006F2  EC5C  F02A         	call	___wmul	;wreg free
 19408  0006F6  0E02               	movlw	2
 19409  0006F8  0100               	movlb	0	; () banked
 19410  0006FA  2760               	addwf	?___wmul& (0+255),f,b
 19411  0006FC  0E00               	movlw	0
 19412  0006FE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19413  000700  0E00               	movlw	low _occupiedMemory
 19414  000702  2560               	addwf	?___wmul& (0+255),w,b
 19415  000704  6ED9               	movwf	fsr2l,c
 19416  000706  0E02               	movlw	high _occupiedMemory
 19417  000708  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19418  00070A  6EDA               	movwf	fsr2h,c
 19419  00070C  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19420  000710  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19421  000714  0E01               	movlw	1
 19422  000716  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19423  000718  0E00               	movlw	0
 19424  00071A  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19425  00071C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19426  00071E  0D09               	mullw	9
 19427  000720  0E00               	movlw	low _occupiedMemory
 19428  000722  24F3               	addwf	prodl,w,c
 19429  000724  6ED9               	movwf	fsr2l,c
 19430  000726  0E02               	movlw	high _occupiedMemory
 19431  000728  20F4               	addwfc	prodh,w,c
 19432  00072A  6EDA               	movwf	fsr2h,c
 19433  00072C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19434  000730  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19435                           
 19436                           ; BSR set to: 0
 19437                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 19438  000734  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19439  000736  0D09               	mullw	9
 19440  000738  0E00               	movlw	low _occupiedMemory
 19441  00073A  24F3               	addwf	prodl,w,c
 19442  00073C  6ED9               	movwf	fsr2l,c
 19443  00073E  0E02               	movlw	high _occupiedMemory
 19444  000740  20F4               	addwfc	prodh,w,c
 19445  000742  6EDA               	movwf	fsr2h,c
 19446  000744  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19447  000748  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19448  00074C  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19449  00074E  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19450  000750  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19451  000752  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19452  000754  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 19453  000756  0E30               	movlw	48
 19454  000758  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 19455  00075A  A0D8               	btfss	status,0,c
 19456  00075C  D0CF               	goto	l476
 19457                           
 19458                           ; BSR set to: 0
 19459                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 19460  00075E  0E07               	movlw	7
 19461  000760  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19462  000762  A4D8               	btfss	status,2,c
 19463  000764  D0CB               	goto	l476
 19464                           
 19465                           ; BSR set to: 0
 19466  000766  0102               	movlb	2	; () banked
 19467  000768  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 19468  00076A  A4D8               	btfss	status,2,c
 19469  00076C  D0C7               	goto	l476
 19470                           
 19471                           ; BSR set to: 2
 19472                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 19473  00076E  0100               	movlb	0	; () banked
 19474  000770  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19475  000772  0D09               	mullw	9
 19476  000774  0E04               	movlw	4
 19477  000776  26F3               	addwf	prodl,f,c
 19478  000778  0E00               	movlw	0
 19479  00077A  22F4               	addwfc	prodh,f,c
 19480  00077C  0E00               	movlw	low _occupiedMemory
 19481  00077E  24F3               	addwf	prodl,w,c
 19482  000780  6ED9               	movwf	fsr2l,c
 19483  000782  0E02               	movlw	high _occupiedMemory
 19484  000784  20F4               	addwfc	prodh,w,c
 19485  000786  6EDA               	movwf	fsr2h,c
 19486  000788  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19487  00078C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19488                           
 19489                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 19490  000790  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19491  000792  0D09               	mullw	9
 19492  000794  0E04               	movlw	4
 19493  000796  26F3               	addwf	prodl,f,c
 19494  000798  0E00               	movlw	0
 19495  00079A  22F4               	addwfc	prodh,f,c
 19496  00079C  0E00               	movlw	low _occupiedMemory
 19497  00079E  24F3               	addwf	prodl,w,c
 19498  0007A0  6ED9               	movwf	fsr2l,c
 19499  0007A2  0E02               	movlw	high _occupiedMemory
 19500  0007A4  20F4               	addwfc	prodh,w,c
 19501  0007A6  6EDA               	movwf	fsr2h,c
 19502  0007A8  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19503  0007AC  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19504  0007B0  0EFF               	movlw	255
 19505  0007B2  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 19506  0007B4  0E2F               	movlw	47
 19507  0007B6  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 19508  0007B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19509  0007BA  0D09               	mullw	9
 19510  0007BC  0E00               	movlw	low _occupiedMemory
 19511  0007BE  24F3               	addwf	prodl,w,c
 19512  0007C0  6ED9               	movwf	fsr2l,c
 19513  0007C2  0E02               	movlw	high _occupiedMemory
 19514  0007C4  20F4               	addwfc	prodh,w,c
 19515  0007C6  6EDA               	movwf	fsr2h,c
 19516  0007C8  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 19517  0007CC  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 19518  0007D0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19519  0007D2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19520  0007D4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19521  0007D6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19522  0007D8  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 19523  0007DA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19524  0007DC  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 19525  0007DE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19526  0007E0  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19527  0007E2  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19528  0007E4  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 19529  0007E6  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 19530  0007E8  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 19531  0007EA  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 19532  0007EC  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 19533  0007EE  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 19534  0007F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19535  0007F2  0D09               	mullw	9
 19536  0007F4  0E02               	movlw	2
 19537  0007F6  26F3               	addwf	prodl,f,c
 19538  0007F8  0E00               	movlw	0
 19539  0007FA  22F4               	addwfc	prodh,f,c
 19540  0007FC  0E00               	movlw	low _occupiedMemory
 19541  0007FE  24F3               	addwf	prodl,w,c
 19542  000800  6ED9               	movwf	fsr2l,c
 19543  000802  0E02               	movlw	high _occupiedMemory
 19544  000804  20F4               	addwfc	prodh,w,c
 19545  000806  6EDA               	movwf	fsr2h,c
 19546  000808  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 19547  00080C  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 19548                           
 19549                           ; BSR set to: 0
 19550                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 19551  000810  0E00               	movlw	0
 19552  000812  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 19553  000814                     l8503:
 19554                           
 19555                           ; BSR set to: 0
 19556  000814  0E07               	movlw	7
 19557  000816  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 19558  000818  D001               	goto	l477
 19559  00081A  D044               	goto	u9390
 19560  00081C                     l477:
 19561                           
 19562                           ; BSR set to: 0
 19563                           ;memoryController.c: 173: if (i == freeIndex)
 19564                           
 19565                           ; BSR set to: 0
 19566  00081C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19567  00081E  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 19568  000820  B4D8               	btfsc	status,2,c
 19569  000822  D03E               	goto	l481
 19570                           
 19571                           ; BSR set to: 0
 19572                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 19573                           
 19574                           ; BSR set to: 0
 19575                           
 19576                           ; BSR set to: 0
 19577                           ;memoryController.c: 174: continue;
 19578  000824  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19579  000826  0D09               	mullw	9
 19580  000828  0E00               	movlw	low _occupiedMemory
 19581  00082A  24F3               	addwf	prodl,w,c
 19582  00082C  6ED9               	movwf	fsr2l,c
 19583  00082E  0E02               	movlw	high _occupiedMemory
 19584  000830  20F4               	addwfc	prodh,w,c
 19585  000832  6EDA               	movwf	fsr2h,c
 19586  000834  EE00  F072         	lfsr	0,checkForOverlap@a
 19587  000838  0E08               	movlw	8
 19588  00083A                     u9341:
 19589  00083A  CFDB FFEB          	movff	plusw2,plusw0
 19590  00083E  06E8               	decf	wreg,f,c
 19591  000840  E2FC               	bc	u9341
 19592  000842  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19593  000844  0D09               	mullw	9
 19594  000846  0E00               	movlw	low _occupiedMemory
 19595  000848  24F3               	addwf	prodl,w,c
 19596  00084A  6ED9               	movwf	fsr2l,c
 19597  00084C  0E02               	movlw	high _occupiedMemory
 19598  00084E  20F4               	addwfc	prodh,w,c
 19599  000850  6EDA               	movwf	fsr2h,c
 19600  000852  EE00  F07B         	lfsr	0,checkForOverlap@b
 19601  000856  0E08               	movlw	8
 19602  000858                     u9351:
 19603  000858  CFDB FFEB          	movff	plusw2,plusw0
 19604  00085C  06E8               	decf	wreg,f,c
 19605  00085E  E2FC               	bc	u9351
 19606  000860  EC76  F01C         	call	_checkForOverlap	;wreg free
 19607  000864  0100               	movlb	0	; () banked
 19608  000866  A0D8               	btfss	status,0,c
 19609  000868  D01B               	goto	l481
 19610                           
 19611                           ; BSR set to: 0
 19612  00086A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 19613  00086C  0D09               	mullw	9
 19614  00086E  0E06               	movlw	6
 19615  000870  26F3               	addwf	prodl,f,c
 19616  000872  0E00               	movlw	0
 19617  000874  22F4               	addwfc	prodh,f,c
 19618  000876  0E00               	movlw	low _occupiedMemory
 19619  000878  24F3               	addwf	prodl,w,c
 19620  00087A  6ED9               	movwf	fsr2l,c
 19621  00087C  0E02               	movlw	high _occupiedMemory
 19622  00087E  20F4               	addwfc	prodh,w,c
 19623  000880  6EDA               	movwf	fsr2h,c
 19624  000882  50DF               	movf	indf2,w,c
 19625  000884  B4D8               	btfsc	status,2,c
 19626  000886  D00C               	goto	l481
 19627                           
 19628                           ; BSR set to: 0
 19629                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 19630  000888  0E01               	movlw	1
 19631  00088A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;memoryController.c: 178: return field;
 19635  00088C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 19636  000890  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19637  000894  0E08               	movlw	8
 19638  000896                     u9381:
 19639  000896  CFDB FFEB          	movff	plusw2,plusw0
 19640  00089A  06E8               	decf	wreg,f,c
 19641  00089C  E2FC               	bc	u9381
 19642                           
 19643                           ; BSR set to: 0
 19644  00089E  0012               	return	
 19645  0008A0                     l481:
 19646                           
 19647                           ; BSR set to: 0
 19648                           
 19649                           ; BSR set to: 0
 19650                           
 19651                           ; BSR set to: 0
 19652  0008A0  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 19653  0008A2  D7B8               	goto	l8503
 19654  0008A4                     u9390:
 19655                           
 19656                           ; BSR set to: 0
 19657                           ;memoryController.c: 179: }
 19658                           ;memoryController.c: 180: }
 19659                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 19660                           
 19661                           ; BSR set to: 0
 19662  0008A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19663  0008A6  0D09               	mullw	9
 19664  0008A8  0E06               	movlw	6
 19665  0008AA  26F3               	addwf	prodl,f,c
 19666  0008AC  0E00               	movlw	0
 19667  0008AE  22F4               	addwfc	prodh,f,c
 19668  0008B0  0E00               	movlw	low _occupiedMemory
 19669  0008B2  24F3               	addwf	prodl,w,c
 19670  0008B4  6ED9               	movwf	fsr2l,c
 19671  0008B6  0E02               	movlw	high _occupiedMemory
 19672  0008B8  20F4               	addwfc	prodh,w,c
 19673  0008BA  6EDA               	movwf	fsr2h,c
 19674  0008BC  0E01               	movlw	1
 19675  0008BE  6EDF               	movwf	indf2,c
 19676                           
 19677                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 19678  0008C0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19679  0008C2  0D09               	mullw	9
 19680  0008C4  0E08               	movlw	8
 19681  0008C6  26F3               	addwf	prodl,f,c
 19682  0008C8  0E00               	movlw	0
 19683  0008CA  22F4               	addwfc	prodh,f,c
 19684  0008CC  0E00               	movlw	low _occupiedMemory
 19685  0008CE  24F3               	addwf	prodl,w,c
 19686  0008D0  6ED9               	movwf	fsr2l,c
 19687  0008D2  0E02               	movlw	high _occupiedMemory
 19688  0008D4  20F4               	addwfc	prodh,w,c
 19689  0008D6  6EDA               	movwf	fsr2h,c
 19690  0008D8  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19691                           
 19692                           ; BSR set to: 0
 19693                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 19694  0008DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19695  0008DE  0D09               	mullw	9
 19696  0008E0  0E00               	movlw	low _occupiedMemory
 19697  0008E2  24F3               	addwf	prodl,w,c
 19698  0008E4  6ED9               	movwf	fsr2l,c
 19699  0008E6  0E02               	movlw	high _occupiedMemory
 19700  0008E8  20F4               	addwfc	prodh,w,c
 19701  0008EA  6EDA               	movwf	fsr2h,c
 19702  0008EC  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19703  0008F0  0E08               	movlw	8
 19704  0008F2                     u9401:
 19705  0008F2  CFDB FFEB          	movff	plusw2,plusw0
 19706  0008F6  06E8               	decf	wreg,f,c
 19707  0008F8  E2FC               	bc	u9401
 19708                           
 19709                           ; BSR set to: 0
 19710  0008FA  0012               	return	
 19711  0008FC                     l476:
 19712                           
 19713                           ;memoryController.c: 184: }
 19714                           ;memoryController.c: 185: }
 19715                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 19716                           
 19717                           ; BSR set to: 0
 19718                           
 19719                           ; BSR set to: 0
 19720  0008FC  0E01               	movlw	1
 19721  0008FE  0100               	movlb	0	; () banked
 19722  000900  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19723                           
 19724                           ; BSR set to: 0
 19725                           ;memoryController.c: 188: uint8_t i;
 19726                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19727  000902  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19728  000904  0D09               	mullw	9
 19729  000906  0E00               	movlw	low _occupiedMemory
 19730  000908  24F3               	addwf	prodl,w,c
 19731  00090A  6ED9               	movwf	fsr2l,c
 19732  00090C  0E02               	movlw	high _occupiedMemory
 19733  00090E  20F4               	addwfc	prodh,w,c
 19734  000910  6EDA               	movwf	fsr2h,c
 19735  000912  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19736  000916  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19737  00091A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19738  00091C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19739  00091E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19740  000920  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19741  000922  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19742  000924  0D09               	mullw	9
 19743  000926  0E02               	movlw	2
 19744  000928  26F3               	addwf	prodl,f,c
 19745  00092A  0E00               	movlw	0
 19746  00092C  22F4               	addwfc	prodh,f,c
 19747  00092E  0E00               	movlw	low _occupiedMemory
 19748  000930  24F3               	addwf	prodl,w,c
 19749  000932  6ED9               	movwf	fsr2l,c
 19750  000934  0E02               	movlw	high _occupiedMemory
 19751  000936  20F4               	addwfc	prodh,w,c
 19752  000938  6EDA               	movwf	fsr2h,c
 19753  00093A  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19754  00093E  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19755                           
 19756                           ; BSR set to: 0
 19757                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 19758  000942  0E00               	movlw	0
 19759  000944  6F97               	movwf	memory_txFrameRequest@i_1178& (0+255),b
 19760  000946                     l8537:
 19761                           
 19762                           ; BSR set to: 0
 19763  000946  0E07               	movlw	7
 19764  000948  6597               	cpfsgt	memory_txFrameRequest@i_1178& (0+255),b
 19765  00094A  D001               	goto	l482
 19766  00094C  D03A               	goto	u9470
 19767  00094E                     l482:
 19768                           
 19769                           ; BSR set to: 0
 19770                           ;memoryController.c: 191: if (i == freeIndex)
 19771                           
 19772                           ; BSR set to: 0
 19773  00094E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19774  000950  1997               	xorwf	memory_txFrameRequest@i_1178& (0+255),w,b
 19775  000952  B4D8               	btfsc	status,2,c
 19776  000954  D034               	goto	l487
 19777                           
 19778                           ; BSR set to: 0
 19779                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 19780                           
 19781                           ; BSR set to: 0
 19782                           
 19783                           ; BSR set to: 0
 19784                           ;memoryController.c: 192: continue;
 19785  000956  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19786  000958  0D09               	mullw	9
 19787  00095A  0E06               	movlw	6
 19788  00095C  26F3               	addwf	prodl,f,c
 19789  00095E  0E00               	movlw	0
 19790  000960  22F4               	addwfc	prodh,f,c
 19791  000962  0E00               	movlw	low _occupiedMemory
 19792  000964  24F3               	addwf	prodl,w,c
 19793  000966  6ED9               	movwf	fsr2l,c
 19794  000968  0E02               	movlw	high _occupiedMemory
 19795  00096A  20F4               	addwfc	prodh,w,c
 19796  00096C  6EDA               	movwf	fsr2h,c
 19797  00096E  50DF               	movf	indf2,w,c
 19798  000970  B4D8               	btfsc	status,2,c
 19799  000972  D025               	goto	l487
 19800                           
 19801                           ; BSR set to: 0
 19802                           ;memoryController.c: 196: }
 19803                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 19804                           
 19805                           ; BSR set to: 0
 19806                           
 19807                           ; BSR set to: 0
 19808                           ;memoryController.c: 194: continue;
 19809  000974  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19810  000976  0D09               	mullw	9
 19811  000978  0E00               	movlw	low _occupiedMemory
 19812  00097A  24F3               	addwf	prodl,w,c
 19813  00097C  6ED9               	movwf	fsr2l,c
 19814  00097E  0E02               	movlw	high _occupiedMemory
 19815  000980  20F4               	addwfc	prodh,w,c
 19816  000982  6EDA               	movwf	fsr2h,c
 19817  000984  EE00  F072         	lfsr	0,checkForOverlap@a
 19818  000988  0E08               	movlw	8
 19819  00098A                     u9441:
 19820  00098A  CFDB FFEB          	movff	plusw2,plusw0
 19821  00098E  06E8               	decf	wreg,f,c
 19822  000990  E2FC               	bc	u9441
 19823  000992  5197               	movf	memory_txFrameRequest@i_1178& (0+255),w,b
 19824  000994  0D09               	mullw	9
 19825  000996  0E00               	movlw	low _occupiedMemory
 19826  000998  24F3               	addwf	prodl,w,c
 19827  00099A  6ED9               	movwf	fsr2l,c
 19828  00099C  0E02               	movlw	high _occupiedMemory
 19829  00099E  20F4               	addwfc	prodh,w,c
 19830  0009A0  6EDA               	movwf	fsr2h,c
 19831  0009A2  EE00  F07B         	lfsr	0,checkForOverlap@b
 19832  0009A6  0E08               	movlw	8
 19833  0009A8                     u9451:
 19834  0009A8  CFDB FFEB          	movff	plusw2,plusw0
 19835  0009AC  06E8               	decf	wreg,f,c
 19836  0009AE  E2FC               	bc	u9451
 19837  0009B0  EC76  F01C         	call	_checkForOverlap	;wreg free
 19838  0009B4  0100               	movlb	0	; () banked
 19839  0009B6  A0D8               	btfss	status,0,c
 19840  0009B8  D002               	goto	l487
 19841                           
 19842                           ; BSR set to: 0
 19843                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 19844  0009BA  0E00               	movlw	0
 19845  0009BC  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 19846  0009BE                     l487:
 19847                           
 19848                           ; BSR set to: 0
 19849                           
 19850                           ; BSR set to: 0
 19851                           
 19852                           ; BSR set to: 0
 19853  0009BE  2B97               	incf	memory_txFrameRequest@i_1178& (0+255),f,b
 19854  0009C0  D7C2               	goto	l8537
 19855  0009C2                     u9470:
 19856                           
 19857                           ; BSR set to: 0
 19858                           ;memoryController.c: 201: }
 19859                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 19860                           
 19861                           ; BSR set to: 0
 19862  0009C2  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 19863  0009C4  B4D8               	btfsc	status,2,c
 19864  0009C6  D06A               	goto	l488
 19865                           
 19866                           ; BSR set to: 0
 19867                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 19868  0009C8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19869  0009CA  0D09               	mullw	9
 19870  0009CC  0E06               	movlw	6
 19871  0009CE  26F3               	addwf	prodl,f,c
 19872  0009D0  0E00               	movlw	0
 19873  0009D2  22F4               	addwfc	prodh,f,c
 19874  0009D4  0E00               	movlw	low _occupiedMemory
 19875  0009D6  24F3               	addwf	prodl,w,c
 19876  0009D8  6ED9               	movwf	fsr2l,c
 19877  0009DA  0E02               	movlw	high _occupiedMemory
 19878  0009DC  20F4               	addwfc	prodh,w,c
 19879  0009DE  6EDA               	movwf	fsr2h,c
 19880  0009E0  0E01               	movlw	1
 19881  0009E2  6EDF               	movwf	indf2,c
 19882                           
 19883                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 19884  0009E4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19885  0009E6  0D09               	mullw	9
 19886  0009E8  0E00               	movlw	low _occupiedMemory
 19887  0009EA  24F3               	addwf	prodl,w,c
 19888  0009EC  6ED9               	movwf	fsr2l,c
 19889  0009EE  0E02               	movlw	high _occupiedMemory
 19890  0009F0  20F4               	addwfc	prodh,w,c
 19891  0009F2  6EDA               	movwf	fsr2h,c
 19892  0009F4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 19893  0009F8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 19894  0009FC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 19895  0009FE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 19896  000A00  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 19897  000A02  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 19898  000A04  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19899  000A06  0D09               	mullw	9
 19900  000A08  0E02               	movlw	2
 19901  000A0A  26F3               	addwf	prodl,f,c
 19902  000A0C  0E00               	movlw	0
 19903  000A0E  22F4               	addwfc	prodh,f,c
 19904  000A10  0E00               	movlw	low _occupiedMemory
 19905  000A12  24F3               	addwf	prodl,w,c
 19906  000A14  6ED9               	movwf	fsr2l,c
 19907  000A16  0E02               	movlw	high _occupiedMemory
 19908  000A18  20F4               	addwfc	prodh,w,c
 19909  000A1A  6EDA               	movwf	fsr2h,c
 19910  000A1C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 19911  000A20  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 19912                           
 19913                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 19914  000A24  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19915  000A26  0D09               	mullw	9
 19916  000A28  0E07               	movlw	7
 19917  000A2A  26F3               	addwf	prodl,f,c
 19918  000A2C  0E00               	movlw	0
 19919  000A2E  22F4               	addwfc	prodh,f,c
 19920  000A30  0E00               	movlw	low _occupiedMemory
 19921  000A32  24F3               	addwf	prodl,w,c
 19922  000A34  6ED9               	movwf	fsr2l,c
 19923  000A36  0E02               	movlw	high _occupiedMemory
 19924  000A38  20F4               	addwfc	prodh,w,c
 19925  000A3A  6EDA               	movwf	fsr2h,c
 19926  000A3C  0E00               	movlw	0
 19927  000A3E  6EDF               	movwf	indf2,c
 19928                           
 19929                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 19930  000A40  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19931  000A42  0D09               	mullw	9
 19932  000A44  0E04               	movlw	4
 19933  000A46  26F3               	addwf	prodl,f,c
 19934  000A48  0E00               	movlw	0
 19935  000A4A  22F4               	addwfc	prodh,f,c
 19936  000A4C  0E00               	movlw	low _occupiedMemory
 19937  000A4E  24F3               	addwf	prodl,w,c
 19938  000A50  6ED9               	movwf	fsr2l,c
 19939  000A52  0E02               	movlw	high _occupiedMemory
 19940  000A54  20F4               	addwfc	prodh,w,c
 19941  000A56  6EDA               	movwf	fsr2h,c
 19942  000A58  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 19943  000A5C  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 19944                           
 19945                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 19946  000A60  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19947  000A62  0D09               	mullw	9
 19948  000A64  0E08               	movlw	8
 19949  000A66  26F3               	addwf	prodl,f,c
 19950  000A68  0E00               	movlw	0
 19951  000A6A  22F4               	addwfc	prodh,f,c
 19952  000A6C  0E00               	movlw	low _occupiedMemory
 19953  000A6E  24F3               	addwf	prodl,w,c
 19954  000A70  6ED9               	movwf	fsr2l,c
 19955  000A72  0E02               	movlw	high _occupiedMemory
 19956  000A74  20F4               	addwfc	prodh,w,c
 19957  000A76  6EDA               	movwf	fsr2h,c
 19958  000A78  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 19959                           
 19960                           ; BSR set to: 0
 19961                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 19962  000A7C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19963  000A7E  0D09               	mullw	9
 19964  000A80  0E00               	movlw	low _occupiedMemory
 19965  000A82  24F3               	addwf	prodl,w,c
 19966  000A84  6ED9               	movwf	fsr2l,c
 19967  000A86  0E02               	movlw	high _occupiedMemory
 19968  000A88  20F4               	addwfc	prodh,w,c
 19969  000A8A  6EDA               	movwf	fsr2h,c
 19970  000A8C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 19971  000A90  0E08               	movlw	8
 19972  000A92                     u9491:
 19973  000A92  CFDB FFEB          	movff	plusw2,plusw0
 19974  000A96  06E8               	decf	wreg,f,c
 19975  000A98  E2FC               	bc	u9491
 19976                           
 19977                           ; BSR set to: 0
 19978  000A9A  0012               	return	
 19979  000A9C                     l488:
 19980                           
 19981                           ; BSR set to: 0
 19982                           ;memoryController.c: 209: }
 19983                           ;memoryController.c: 210: }
 19984                           ;memoryController.c: 211: freeIndex++;
 19985                           
 19986                           ; BSR set to: 0
 19987                           
 19988                           ; BSR set to: 0
 19989  000A9C  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 19990                           
 19991                           ; BSR set to: 0
 19992                           ;memoryController.c: 212: if (freeIndex == 8) {
 19993  000A9E  0E08               	movlw	8
 19994  000AA0  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 19995  000AA2  A4D8               	btfss	status,2,c
 19996  000AA4  D00C               	goto	l489
 19997                           
 19998                           ; BSR set to: 0
 19999                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 20000  000AA6  0E01               	movlw	1
 20001  000AA8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;memoryController.c: 215: return field;
 20005  000AAA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20006  000AAE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20007  000AB2  0E08               	movlw	8
 20008  000AB4                     u9511:
 20009  000AB4  CFDB FFEB          	movff	plusw2,plusw0
 20010  000AB8  06E8               	decf	wreg,f,c
 20011  000ABA  E2FC               	bc	u9511
 20012                           
 20013                           ; BSR set to: 0
 20014  000ABC  0012               	return	
 20015  000ABE                     l489:
 20016                           
 20017                           ; BSR set to: 0
 20018                           
 20019                           ; BSR set to: 0
 20020  000ABE  0E08               	movlw	8
 20021  000AC0  0100               	movlb	0	; () banked
 20022  000AC2  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 20023  000AC4  D5F0               	goto	l469
 20024                           
 20025                           ; BSR set to: 0
 20026                           ;memoryController.c: 216: }
 20027                           ;memoryController.c: 217: }
 20028                           ;memoryController.c: 218: return field;
 20029                           
 20030                           ; BSR set to: 0
 20031  000AC6  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 20032  000ACA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 20033  000ACE  0E08               	movlw	8
 20034  000AD0                     u9531:
 20035  000AD0  CFDB FFEB          	movff	plusw2,plusw0
 20036  000AD4  06E8               	decf	wreg,f,c
 20037  000AD6  E2FC               	bc	u9531
 20038  000AD8  0012               	return	
 20039  000ADA                     __end_of_memory_txFrameRequest:
 20040                           	opt stack 0
 20041                           tblptru	equ	0xFF8
 20042                           tblptrh	equ	0xFF7
 20043                           tblptrl	equ	0xFF6
 20044                           tablat	equ	0xFF5
 20045                           prodh	equ	0xFF4
 20046                           prodl	equ	0xFF3
 20047                           intcon	equ	0xFF2
 20048                           intcon3	equ	0xFF0
 20049                           indf0	equ	0xFEF
 20050                           postinc0	equ	0xFEE
 20051                           plusw0	equ	0xFEB
 20052                           fsr0h	equ	0xFEA
 20053                           fsr0l	equ	0xFE9
 20054                           wreg	equ	0xFE8
 20055                           indf1	equ	0xFE7
 20056                           postinc1	equ	0xFE6
 20057                           postdec1	equ	0xFE5
 20058                           plusw1	equ	0xFE3
 20059                           fsr1h	equ	0xFE2
 20060                           fsr1l	equ	0xFE1
 20061                           indf2	equ	0xFDF
 20062                           postinc2	equ	0xFDE
 20063                           postdec2	equ	0xFDD
 20064                           plusw2	equ	0xFDB
 20065                           fsr2h	equ	0xFDA
 20066                           fsr2l	equ	0xFD9
 20067                           status	equ	0xFD8
 20068                           
 20069 ;; *************** function _entireMemoryFull *****************
 20070 ;; Defined at:
 20071 ;;		line 45 in file "src/mem/memoryController.c"
 20072 ;; Parameters:    Size  Location     Type
 20073 ;;		None
 20074 ;; Auto vars:     Size  Location     Type
 20075 ;;  i               1    0[BANK0 ] unsigned char 
 20076 ;; Return value:  Size  Location     Type
 20077 ;;		None               void
 20078 ;; Registers used:
 20079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20080 ;; Tracked objects:
 20081 ;;		On entry : 0/0
 20082 ;;		On exit  : 0/0
 20083 ;;		Unchanged: 0/0
 20084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20085 ;;      Params:         0       0       0       0       0       0       0       0       0
 20086 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20087 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20088 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20089 ;;Total ram usage:        1 bytes
 20090 ;; Hardware stack levels used:    1
 20091 ;; Hardware stack levels required when called:    4
 20092 ;; This function calls:
 20093 ;;		Nothing
 20094 ;; This function is called by:
 20095 ;;		_memory_txFrameRequest
 20096 ;; This function uses a non-reentrant model
 20097 ;;
 20098                           
 20099                           	psect	text75
 20100  00524C                     __ptext75:
 20101                           	opt stack 0
 20102  00524C                     _entireMemoryFull:
 20103                           	opt stack 23
 20104                           
 20105                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 20106                           
 20107                           ;incstack = 0
 20108  00524C  0E00               	movlw	0
 20109  00524E  0100               	movlb	0	; () banked
 20110  005250  6F60               	movwf	entireMemoryFull@i& (0+255),b
 20111  005252                     l8257:
 20112                           
 20113                           ; BSR set to: 0
 20114  005252  0E07               	movlw	7
 20115  005254  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 20116  005256  D001               	goto	l418
 20117  005258  D013               	goto	u8920
 20118  00525A                     l418:
 20119                           
 20120                           ; BSR set to: 0
 20121                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 20122                           
 20123                           ; BSR set to: 0
 20124  00525A  5160               	movf	entireMemoryFull@i& (0+255),w,b
 20125  00525C  0D09               	mullw	9
 20126  00525E  0E06               	movlw	6
 20127  005260  26F3               	addwf	prodl,f,c
 20128  005262  0E00               	movlw	0
 20129  005264  22F4               	addwfc	prodh,f,c
 20130  005266  0E00               	movlw	low _occupiedMemory
 20131  005268  24F3               	addwf	prodl,w,c
 20132  00526A  6ED9               	movwf	fsr2l,c
 20133  00526C  0E02               	movlw	high _occupiedMemory
 20134  00526E  20F4               	addwfc	prodh,w,c
 20135  005270  6EDA               	movwf	fsr2h,c
 20136  005272  50DF               	movf	indf2,w,c
 20137  005274  A4D8               	btfss	status,2,c
 20138  005276  D002               	goto	l420
 20139                           
 20140                           ; BSR set to: 0
 20141                           ;memoryController.c: 48: return 0;
 20142  005278  90D8               	bcf	status,0,c
 20143                           
 20144                           ; BSR set to: 0
 20145  00527A  0012               	return	
 20146  00527C                     l420:
 20147                           
 20148                           ; BSR set to: 0
 20149                           
 20150                           ; BSR set to: 0
 20151  00527C  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 20152  00527E  D7E9               	goto	l8257
 20153  005280                     u8920:
 20154                           
 20155                           ; BSR set to: 0
 20156                           ;memoryController.c: 49: }
 20157                           ;memoryController.c: 50: return 1;
 20158                           
 20159                           ; BSR set to: 0
 20160  005280  80D8               	bsf	status,0,c
 20161  005282  0012               	return	
 20162  005284                     __end_of_entireMemoryFull:
 20163                           	opt stack 0
 20164                           tblptru	equ	0xFF8
 20165                           tblptrh	equ	0xFF7
 20166                           tblptrl	equ	0xFF6
 20167                           tablat	equ	0xFF5
 20168                           prodh	equ	0xFF4
 20169                           prodl	equ	0xFF3
 20170                           intcon	equ	0xFF2
 20171                           intcon3	equ	0xFF0
 20172                           indf0	equ	0xFEF
 20173                           postinc0	equ	0xFEE
 20174                           plusw0	equ	0xFEB
 20175                           fsr0h	equ	0xFEA
 20176                           fsr0l	equ	0xFE9
 20177                           wreg	equ	0xFE8
 20178                           indf1	equ	0xFE7
 20179                           postinc1	equ	0xFE6
 20180                           postdec1	equ	0xFE5
 20181                           plusw1	equ	0xFE3
 20182                           fsr1h	equ	0xFE2
 20183                           fsr1l	equ	0xFE1
 20184                           indf2	equ	0xFDF
 20185                           postinc2	equ	0xFDE
 20186                           postdec2	equ	0xFDD
 20187                           plusw2	equ	0xFDB
 20188                           fsr2h	equ	0xFDA
 20189                           fsr2l	equ	0xFD9
 20190                           status	equ	0xFD8
 20191                           
 20192 ;; *************** function _entireMemoryEmpty *****************
 20193 ;; Defined at:
 20194 ;;		line 37 in file "src/mem/memoryController.c"
 20195 ;; Parameters:    Size  Location     Type
 20196 ;;		None
 20197 ;; Auto vars:     Size  Location     Type
 20198 ;;  i               1    0[BANK0 ] unsigned char 
 20199 ;; Return value:  Size  Location     Type
 20200 ;;		None               void
 20201 ;; Registers used:
 20202 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20203 ;; Tracked objects:
 20204 ;;		On entry : 0/0
 20205 ;;		On exit  : 0/0
 20206 ;;		Unchanged: 0/0
 20207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20208 ;;      Params:         0       0       0       0       0       0       0       0       0
 20209 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20210 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20211 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20212 ;;Total ram usage:        1 bytes
 20213 ;; Hardware stack levels used:    1
 20214 ;; Hardware stack levels required when called:    4
 20215 ;; This function calls:
 20216 ;;		Nothing
 20217 ;; This function is called by:
 20218 ;;		_memory_txFrameRequest
 20219 ;; This function uses a non-reentrant model
 20220 ;;
 20221                           
 20222                           	psect	text76
 20223  005284                     __ptext76:
 20224                           	opt stack 0
 20225  005284                     _entireMemoryEmpty:
 20226                           	opt stack 23
 20227                           
 20228                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;incstack = 0
 20232  005284  0E00               	movlw	0
 20233  005286  0100               	movlb	0	; () banked
 20234  005288  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 20235  00528A                     l8237:
 20236                           
 20237                           ; BSR set to: 0
 20238  00528A  0E07               	movlw	7
 20239  00528C  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 20240  00528E  D001               	goto	l412
 20241  005290  D013               	goto	u8890
 20242  005292                     l412:
 20243                           
 20244                           ; BSR set to: 0
 20245                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 20246                           
 20247                           ; BSR set to: 0
 20248  005292  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 20249  005294  0D09               	mullw	9
 20250  005296  0E06               	movlw	6
 20251  005298  26F3               	addwf	prodl,f,c
 20252  00529A  0E00               	movlw	0
 20253  00529C  22F4               	addwfc	prodh,f,c
 20254  00529E  0E00               	movlw	low _occupiedMemory
 20255  0052A0  24F3               	addwf	prodl,w,c
 20256  0052A2  6ED9               	movwf	fsr2l,c
 20257  0052A4  0E02               	movlw	high _occupiedMemory
 20258  0052A6  20F4               	addwfc	prodh,w,c
 20259  0052A8  6EDA               	movwf	fsr2h,c
 20260  0052AA  50DF               	movf	indf2,w,c
 20261  0052AC  B4D8               	btfsc	status,2,c
 20262  0052AE  D002               	goto	l414
 20263                           
 20264                           ; BSR set to: 0
 20265                           ;memoryController.c: 40: return 0;
 20266  0052B0  90D8               	bcf	status,0,c
 20267                           
 20268                           ; BSR set to: 0
 20269  0052B2  0012               	return	
 20270  0052B4                     l414:
 20271                           
 20272                           ; BSR set to: 0
 20273                           
 20274                           ; BSR set to: 0
 20275  0052B4  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 20276  0052B6  D7E9               	goto	l8237
 20277  0052B8                     u8890:
 20278                           
 20279                           ; BSR set to: 0
 20280                           ;memoryController.c: 41: }
 20281                           ;memoryController.c: 42: return 1;
 20282                           
 20283                           ; BSR set to: 0
 20284  0052B8  80D8               	bsf	status,0,c
 20285  0052BA  0012               	return	
 20286  0052BC                     __end_of_entireMemoryEmpty:
 20287                           	opt stack 0
 20288                           tblptru	equ	0xFF8
 20289                           tblptrh	equ	0xFF7
 20290                           tblptrl	equ	0xFF6
 20291                           tablat	equ	0xFF5
 20292                           prodh	equ	0xFF4
 20293                           prodl	equ	0xFF3
 20294                           intcon	equ	0xFF2
 20295                           intcon3	equ	0xFF0
 20296                           indf0	equ	0xFEF
 20297                           postinc0	equ	0xFEE
 20298                           plusw0	equ	0xFEB
 20299                           fsr0h	equ	0xFEA
 20300                           fsr0l	equ	0xFE9
 20301                           wreg	equ	0xFE8
 20302                           indf1	equ	0xFE7
 20303                           postinc1	equ	0xFE6
 20304                           postdec1	equ	0xFE5
 20305                           plusw1	equ	0xFE3
 20306                           fsr1h	equ	0xFE2
 20307                           fsr1l	equ	0xFE1
 20308                           indf2	equ	0xFDF
 20309                           postinc2	equ	0xFDE
 20310                           postdec2	equ	0xFDD
 20311                           plusw2	equ	0xFDB
 20312                           fsr2h	equ	0xFDA
 20313                           fsr2l	equ	0xFD9
 20314                           status	equ	0xFD8
 20315                           
 20316 ;; *************** function _checkForOverlap *****************
 20317 ;; Defined at:
 20318 ;;		line 63 in file "src/mem/memoryController.c"
 20319 ;; Parameters:    Size  Location     Type
 20320 ;;  a               9   18[BANK0 ] struct memoryField
 20321 ;;  b               9   27[BANK0 ] struct memoryField
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;		None
 20324 ;; Return value:  Size  Location     Type
 20325 ;;		None               void
 20326 ;; Registers used:
 20327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 20328 ;; Tracked objects:
 20329 ;;		On entry : 0/0
 20330 ;;		On exit  : 0/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20333 ;;      Params:         0      18       0       0       0       0       0       0       0
 20334 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20335 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20336 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20337 ;;Total ram usage:       18 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; Hardware stack levels required when called:    5
 20340 ;; This function calls:
 20341 ;;		_checkForOverlapSwitched
 20342 ;; This function is called by:
 20343 ;;		_memory_txFrameRequest
 20344 ;; This function uses a non-reentrant model
 20345 ;;
 20346                           
 20347                           	psect	text77
 20348  0038EC                     __ptext77:
 20349                           	opt stack 0
 20350  0038EC                     _checkForOverlap:
 20351                           	opt stack 22
 20352                           
 20353                           ;memoryController.c: 64: if ((a.start == b.start) ||
 20354                           ;memoryController.c: 65: (a.end == b.end) ||
 20355                           ;memoryController.c: 66: (a.start == b.end) ||
 20356                           ;memoryController.c: 67: (a.end == b.start) ||
 20357                           ;memoryController.c: 68: (a.end > 0x3000) ||
 20358                           ;memoryController.c: 69: (a.start > 0x3000) ||
 20359                           ;memoryController.c: 70: (b.end > 0x3000) ||
 20360                           ;memoryController.c: 71: (b.start > 0x3000))
 20361                           
 20362                           ; BSR set to: 0
 20363                           ;incstack = 0
 20364  0038EC  0100               	movlb	0	; () banked
 20365  0038EE  517B               	movf	checkForOverlap@b& (0+255),w,b
 20366  0038F0  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 20367  0038F2  E104               	bnz	u8930
 20368  0038F4  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20369  0038F6  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 20370  0038F8  B4D8               	btfsc	status,2,c
 20371  0038FA  D029               	goto	u9000
 20372  0038FC                     u8930:
 20373                           
 20374                           ; BSR set to: 0
 20375  0038FC  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20376  0038FE  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20377  003900  E104               	bnz	u8940
 20378  003902  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20379  003904  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20380  003906  B4D8               	btfsc	status,2,c
 20381  003908  D022               	goto	u9000
 20382  00390A                     u8940:
 20383                           
 20384                           ; BSR set to: 0
 20385  00390A  5172               	movf	checkForOverlap@a& (0+255),w,b
 20386  00390C  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 20387  00390E  E104               	bnz	u8950
 20388  003910  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20389  003912  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 20390  003914  B4D8               	btfsc	status,2,c
 20391  003916  D01B               	goto	u9000
 20392  003918                     u8950:
 20393                           
 20394                           ; BSR set to: 0
 20395  003918  517B               	movf	checkForOverlap@b& (0+255),w,b
 20396  00391A  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 20397  00391C  E104               	bnz	u8960
 20398  00391E  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20399  003920  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 20400  003922  B4D8               	btfsc	status,2,c
 20401  003924  D014               	goto	u9000
 20402  003926                     u8960:
 20403                           
 20404                           ; BSR set to: 0
 20405  003926  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 20406  003928  0E30               	movlw	48
 20407  00392A  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 20408  00392C  B0D8               	btfsc	status,0,c
 20409  00392E  D00F               	goto	u9000
 20410                           
 20411                           ; BSR set to: 0
 20412  003930  0572               	decf	checkForOverlap@a& (0+255),w,b
 20413  003932  0E30               	movlw	48
 20414  003934  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20415  003936  B0D8               	btfsc	status,0,c
 20416  003938  D00A               	goto	u9000
 20417                           
 20418                           ; BSR set to: 0
 20419  00393A  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 20420  00393C  0E30               	movlw	48
 20421  00393E  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20422  003940  B0D8               	btfsc	status,0,c
 20423  003942  D005               	goto	u9000
 20424                           
 20425                           ; BSR set to: 0
 20426  003944  057B               	decf	checkForOverlap@b& (0+255),w,b
 20427  003946  0E30               	movlw	48
 20428  003948  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20429  00394A  A0D8               	btfss	status,0,c
 20430  00394C  D002               	goto	l432
 20431  00394E                     u9000:
 20432                           
 20433                           ; BSR set to: 0
 20434                           ;memoryController.c: 72: return 1;
 20435                           
 20436                           ; BSR set to: 0
 20437  00394E  80D8               	bsf	status,0,c
 20438                           
 20439                           ; BSR set to: 0
 20440  003950  0012               	return	
 20441  003952                     l432:
 20442                           
 20443                           ; BSR set to: 0
 20444                           ;memoryController.c: 75: if (a.start < a.end) {
 20445                           
 20446                           ; BSR set to: 0
 20447  003952  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20448  003954  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20449  003956  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20450  003958  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20451  00395A  B0D8               	btfsc	status,0,c
 20452  00395C  D03B               	goto	l436
 20453                           
 20454                           ; BSR set to: 0
 20455                           ;memoryController.c: 76: if (b.start < b.end) {
 20456  00395E  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 20457  003960  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20458  003962  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 20459  003964  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20460  003966  B0D8               	btfsc	status,0,c
 20461  003968  D02B               	goto	l437
 20462                           
 20463                           ; BSR set to: 0
 20464                           ;memoryController.c: 78: if (a.start < b.start) {
 20465  00396A  517B               	movf	checkForOverlap@b& (0+255),w,b
 20466  00396C  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 20467  00396E  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 20468  003970  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 20469  003972  B0D8               	btfsc	status,0,c
 20470  003974  D00A               	goto	l438
 20471                           
 20472                           ; BSR set to: 0
 20473                           ;memoryController.c: 79: if (a.end > b.start) {
 20474  003976  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 20475  003978  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 20476  00397A  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 20477  00397C  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 20478  00397E  B0D8               	btfsc	status,0,c
 20479  003980  D002               	goto	l439
 20480                           
 20481                           ; BSR set to: 0
 20482                           ;memoryController.c: 80: return 1;
 20483  003982  80D8               	bsf	status,0,c
 20484                           
 20485                           ; BSR set to: 0
 20486                           ;memoryController.c: 81: } else {
 20487                           
 20488                           ; BSR set to: 0
 20489  003984  0012               	return	
 20490  003986                     l439:
 20491                           
 20492                           ; BSR set to: 0
 20493                           ;memoryController.c: 82: return 0;
 20494                           
 20495                           ; BSR set to: 0
 20496  003986  90D8               	bcf	status,0,c
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;memoryController.c: 83: }
 20500                           ;memoryController.c: 84: } else {
 20501                           
 20502                           ; BSR set to: 0
 20503  003988  0012               	return	
 20504  00398A                     l438:
 20505                           
 20506                           ; BSR set to: 0
 20507                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 20508                           
 20509                           ; BSR set to: 0
 20510  00398A  EE20  F07B         	lfsr	2,checkForOverlap@b
 20511  00398E  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20512  003992  0E08               	movlw	8
 20513  003994                     u9051:
 20514  003994  CFDB FFEB          	movff	plusw2,plusw0
 20515  003998  06E8               	decf	wreg,f,c
 20516  00399A  E2FC               	bc	u9051
 20517  00399C  EE20  F072         	lfsr	2,checkForOverlap@a
 20518  0039A0  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20519  0039A4  0E08               	movlw	8
 20520  0039A6                     u9061:
 20521  0039A6  CFDB FFEB          	movff	plusw2,plusw0
 20522  0039AA  06E8               	decf	wreg,f,c
 20523  0039AC  E2FC               	bc	u9061
 20524  0039AE  EC3B  F020         	call	_checkForOverlapSwitched	;wreg free
 20525  0039B2  0100               	movlb	0	; () banked
 20526  0039B4  B0D8               	btfsc	status,0,c
 20527  0039B6  D002               	goto	l8127
 20528                           
 20529                           ; BSR set to: 0
 20530  0039B8  90D8               	bcf	status,0,c
 20531  0039BA  0012               	return	
 20532  0039BC                     l8127:
 20533                           
 20534                           ; BSR set to: 0
 20535                           
 20536                           ; BSR set to: 0
 20537  0039BC  80D8               	bsf	status,0,c
 20538                           
 20539                           ; BSR set to: 0
 20540                           ;memoryController.c: 86: }
 20541                           ;memoryController.c: 87: } else {
 20542                           
 20543                           ; BSR set to: 0
 20544                           
 20545                           ; BSR set to: 0
 20546  0039BE  0012               	return	
 20547  0039C0                     l437:
 20548                           
 20549                           ; BSR set to: 0
 20550                           ;memoryController.c: 88: if (b.end < a.start)
 20551                           
 20552                           ; BSR set to: 0
 20553  0039C0  5172               	movf	checkForOverlap@a& (0+255),w,b
 20554  0039C2  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 20555  0039C4  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 20556  0039C6  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 20557  0039C8  B0D8               	btfsc	status,0,c
 20558  0039CA  D002               	goto	l443
 20559                           
 20560                           ; BSR set to: 0
 20561                           ;memoryController.c: 89: return 0;
 20562  0039CC  90D8               	bcf	status,0,c
 20563                           
 20564                           ; BSR set to: 0
 20565                           
 20566                           ; BSR set to: 0
 20567  0039CE  0012               	return	
 20568  0039D0                     l443:
 20569                           
 20570                           ; BSR set to: 0
 20571                           ;memoryController.c: 90: else
 20572                           ;memoryController.c: 91: return 1;
 20573                           
 20574                           ; BSR set to: 0
 20575  0039D0  80D8               	bsf	status,0,c
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;memoryController.c: 92: }
 20579                           ;memoryController.c: 93: } else {
 20580                           
 20581                           ; BSR set to: 0
 20582                           
 20583                           ; BSR set to: 0
 20584  0039D2  0012               	return	
 20585  0039D4                     l436:
 20586                           
 20587                           ; BSR set to: 0
 20588                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 20589                           
 20590                           ; BSR set to: 0
 20591  0039D4  EE20  F07B         	lfsr	2,checkForOverlap@b
 20592  0039D8  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 20593  0039DC  0E08               	movlw	8
 20594  0039DE                     u9091:
 20595  0039DE  CFDB FFEB          	movff	plusw2,plusw0
 20596  0039E2  06E8               	decf	wreg,f,c
 20597  0039E4  E2FC               	bc	u9091
 20598  0039E6  EE20  F072         	lfsr	2,checkForOverlap@a
 20599  0039EA  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 20600  0039EE  0E08               	movlw	8
 20601  0039F0                     u9101:
 20602  0039F0  CFDB FFEB          	movff	plusw2,plusw0
 20603  0039F4  06E8               	decf	wreg,f,c
 20604  0039F6  E2FC               	bc	u9101
 20605  0039F8  EC3B  F020         	call	_checkForOverlapSwitched	;wreg free
 20606  0039FC  0100               	movlb	0	; () banked
 20607  0039FE  B0D8               	btfsc	status,0,c
 20608  003A00  D002               	goto	l8131
 20609                           
 20610                           ; BSR set to: 0
 20611  003A02  90D8               	bcf	status,0,c
 20612  003A04  0012               	return	
 20613  003A06                     l8131:
 20614                           
 20615                           ; BSR set to: 0
 20616                           
 20617                           ; BSR set to: 0
 20618  003A06  80D8               	bsf	status,0,c
 20619                           
 20620                           ; BSR set to: 0
 20621                           
 20622                           ; BSR set to: 0
 20623  003A08  0012               	return	
 20624  003A0A                     __end_of_checkForOverlap:
 20625                           	opt stack 0
 20626                           tblptru	equ	0xFF8
 20627                           tblptrh	equ	0xFF7
 20628                           tblptrl	equ	0xFF6
 20629                           tablat	equ	0xFF5
 20630                           prodh	equ	0xFF4
 20631                           prodl	equ	0xFF3
 20632                           intcon	equ	0xFF2
 20633                           intcon3	equ	0xFF0
 20634                           indf0	equ	0xFEF
 20635                           postinc0	equ	0xFEE
 20636                           plusw0	equ	0xFEB
 20637                           fsr0h	equ	0xFEA
 20638                           fsr0l	equ	0xFE9
 20639                           wreg	equ	0xFE8
 20640                           indf1	equ	0xFE7
 20641                           postinc1	equ	0xFE6
 20642                           postdec1	equ	0xFE5
 20643                           plusw1	equ	0xFE3
 20644                           fsr1h	equ	0xFE2
 20645                           fsr1l	equ	0xFE1
 20646                           indf2	equ	0xFDF
 20647                           postinc2	equ	0xFDE
 20648                           postdec2	equ	0xFDD
 20649                           plusw2	equ	0xFDB
 20650                           fsr2h	equ	0xFDA
 20651                           fsr2l	equ	0xFD9
 20652                           status	equ	0xFD8
 20653                           
 20654 ;; *************** function _checkForOverlapSwitched *****************
 20655 ;; Defined at:
 20656 ;;		line 98 in file "src/mem/memoryController.c"
 20657 ;; Parameters:    Size  Location     Type
 20658 ;;  a               9    0[BANK0 ] struct memoryField
 20659 ;;  b               9    9[BANK0 ] struct memoryField
 20660 ;; Auto vars:     Size  Location     Type
 20661 ;;		None
 20662 ;; Return value:  Size  Location     Type
 20663 ;;		None               void
 20664 ;; Registers used:
 20665 ;;		wreg, status,2, status,0
 20666 ;; Tracked objects:
 20667 ;;		On entry : 0/0
 20668 ;;		On exit  : 0/0
 20669 ;;		Unchanged: 0/0
 20670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20671 ;;      Params:         0      18       0       0       0       0       0       0       0
 20672 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20673 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20674 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20675 ;;Total ram usage:       18 bytes
 20676 ;; Hardware stack levels used:    1
 20677 ;; Hardware stack levels required when called:    4
 20678 ;; This function calls:
 20679 ;;		Nothing
 20680 ;; This function is called by:
 20681 ;;		_checkForOverlap
 20682 ;; This function uses a non-reentrant model
 20683 ;;
 20684                           
 20685                           	psect	text78
 20686  004076                     __ptext78:
 20687                           	opt stack 0
 20688  004076                     _checkForOverlapSwitched:
 20689                           	opt stack 22
 20690                           
 20691                           ;memoryController.c: 101: if ((a.start == b.start) ||
 20692                           ;memoryController.c: 102: (a.end == b.end) ||
 20693                           ;memoryController.c: 103: (a.start == b.end) ||
 20694                           ;memoryController.c: 104: (a.end == b.start) ||
 20695                           ;memoryController.c: 105: (a.end > 0x3000) ||
 20696                           ;memoryController.c: 106: (a.start > 0x3000) ||
 20697                           ;memoryController.c: 107: (b.end > 0x3000) ||
 20698                           ;memoryController.c: 108: (b.start > 0x3000))
 20699                           
 20700                           ; BSR set to: 0
 20701                           ;incstack = 0
 20702  004076  0100               	movlb	0	; () banked
 20703  004078  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20704  00407A  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 20705  00407C  E104               	bnz	u8740
 20706  00407E  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20707  004080  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20708  004082  B4D8               	btfsc	status,2,c
 20709  004084  D029               	goto	u8810
 20710  004086                     u8740:
 20711                           
 20712                           ; BSR set to: 0
 20713  004086  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20714  004088  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20715  00408A  E104               	bnz	u8750
 20716  00408C  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20717  00408E  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20718  004090  B4D8               	btfsc	status,2,c
 20719  004092  D022               	goto	u8810
 20720  004094                     u8750:
 20721                           
 20722                           ; BSR set to: 0
 20723  004094  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20724  004096  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20725  004098  E104               	bnz	u8760
 20726  00409A  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20727  00409C  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20728  00409E  B4D8               	btfsc	status,2,c
 20729  0040A0  D01B               	goto	u8810
 20730  0040A2                     u8760:
 20731                           
 20732                           ; BSR set to: 0
 20733  0040A2  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20734  0040A4  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20735  0040A6  E104               	bnz	u8770
 20736  0040A8  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20737  0040AA  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20738  0040AC  B4D8               	btfsc	status,2,c
 20739  0040AE  D014               	goto	u8810
 20740  0040B0                     u8770:
 20741                           
 20742                           ; BSR set to: 0
 20743  0040B0  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20744  0040B2  0E30               	movlw	48
 20745  0040B4  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20746  0040B6  B0D8               	btfsc	status,0,c
 20747  0040B8  D00F               	goto	u8810
 20748                           
 20749                           ; BSR set to: 0
 20750  0040BA  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 20751  0040BC  0E30               	movlw	48
 20752  0040BE  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20753  0040C0  B0D8               	btfsc	status,0,c
 20754  0040C2  D00A               	goto	u8810
 20755                           
 20756                           ; BSR set to: 0
 20757  0040C4  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20758  0040C6  0E30               	movlw	48
 20759  0040C8  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20760  0040CA  B0D8               	btfsc	status,0,c
 20761  0040CC  D005               	goto	u8810
 20762                           
 20763                           ; BSR set to: 0
 20764  0040CE  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 20765  0040D0  0E30               	movlw	48
 20766  0040D2  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20767  0040D4  A0D8               	btfss	status,0,c
 20768  0040D6  D002               	goto	l448
 20769  0040D8                     u8810:
 20770                           
 20771                           ; BSR set to: 0
 20772                           ;memoryController.c: 109: return 1;
 20773                           
 20774                           ; BSR set to: 0
 20775  0040D8  80D8               	bsf	status,0,c
 20776                           
 20777                           ; BSR set to: 0
 20778  0040DA  0012               	return	
 20779  0040DC                     l448:
 20780                           
 20781                           ; BSR set to: 0
 20782                           ;memoryController.c: 112: if (a.start < a.end) {
 20783                           
 20784                           ; BSR set to: 0
 20785  0040DC  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20786  0040DE  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20787  0040E0  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20788  0040E2  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20789  0040E4  B0D8               	btfsc	status,0,c
 20790  0040E6  D01E               	goto	l459
 20791                           
 20792                           ; BSR set to: 0
 20793                           ;memoryController.c: 113: if (b.start < b.end) {
 20794  0040E8  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20795  0040EA  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20796  0040EC  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20797  0040EE  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20798  0040F0  B0D8               	btfsc	status,0,c
 20799  0040F2  D010               	goto	l453
 20800                           
 20801                           ; BSR set to: 0
 20802                           ;memoryController.c: 115: if (a.start < b.start) {
 20803  0040F4  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 20804  0040F6  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 20805  0040F8  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20806  0040FA  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20807  0040FC  B0D8               	btfsc	status,0,c
 20808  0040FE  D012               	goto	l459
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;memoryController.c: 116: if (a.end > b.start) {
 20812  004100  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 20813  004102  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 20814  004104  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 20815  004106  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 20816  004108  B0D8               	btfsc	status,0,c
 20817  00410A  D002               	goto	l455
 20818                           
 20819                           ; BSR set to: 0
 20820                           ;memoryController.c: 117: return 1;
 20821  00410C  80D8               	bsf	status,0,c
 20822                           
 20823                           ; BSR set to: 0
 20824  00410E  0012               	return	
 20825  004110                     l455:
 20826                           
 20827                           ; BSR set to: 0
 20828                           ;memoryController.c: 119: return 0;
 20829                           
 20830                           ; BSR set to: 0
 20831  004110  90D8               	bcf	status,0,c
 20832                           
 20833                           ; BSR set to: 0
 20834  004112  0012               	return	
 20835  004114                     l453:
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;memoryController.c: 123: if (b.end < a.start)
 20839                           
 20840                           ; BSR set to: 0
 20841  004114  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 20842  004116  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 20843  004118  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 20844  00411A  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 20845  00411C  A0D8               	btfss	status,0,c
 20846  00411E  D7F8               	goto	l455
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;memoryController.c: 125: else
 20850                           ;memoryController.c: 126: return 1;
 20851                           
 20852                           ; BSR set to: 0
 20853                           
 20854                           ; BSR set to: 0
 20855                           
 20856                           ; BSR set to: 0
 20857                           
 20858                           ; BSR set to: 0
 20859                           ;memoryController.c: 124: return 0;
 20860  004120  80D8               	bsf	status,0,c
 20861                           
 20862                           ; BSR set to: 0
 20863  004122  0012               	return	
 20864  004124                     l459:
 20865                           
 20866                           ; BSR set to: 0
 20867                           ;memoryController.c: 127: }
 20868                           ;memoryController.c: 128: }
 20869                           ;memoryController.c: 130: return 1;
 20870                           
 20871                           ; BSR set to: 0
 20872                           
 20873                           ; BSR set to: 0
 20874                           
 20875                           ; BSR set to: 0
 20876  004124  80D8               	bsf	status,0,c
 20877  004126  0012               	return	
 20878  004128                     __end_of_checkForOverlapSwitched:
 20879                           	opt stack 0
 20880                           tblptru	equ	0xFF8
 20881                           tblptrh	equ	0xFF7
 20882                           tblptrl	equ	0xFF6
 20883                           tablat	equ	0xFF5
 20884                           prodh	equ	0xFF4
 20885                           prodl	equ	0xFF3
 20886                           intcon	equ	0xFF2
 20887                           intcon3	equ	0xFF0
 20888                           indf0	equ	0xFEF
 20889                           postinc0	equ	0xFEE
 20890                           plusw0	equ	0xFEB
 20891                           fsr0h	equ	0xFEA
 20892                           fsr0l	equ	0xFE9
 20893                           wreg	equ	0xFE8
 20894                           indf1	equ	0xFE7
 20895                           postinc1	equ	0xFE6
 20896                           postdec1	equ	0xFE5
 20897                           plusw1	equ	0xFE3
 20898                           fsr1h	equ	0xFE2
 20899                           fsr1l	equ	0xFE1
 20900                           indf2	equ	0xFDF
 20901                           postinc2	equ	0xFDE
 20902                           postdec2	equ	0xFDD
 20903                           plusw2	equ	0xFDB
 20904                           fsr2h	equ	0xFDA
 20905                           fsr2l	equ	0xFD9
 20906                           status	equ	0xFD8
 20907                           
 20908 ;; *************** function ___wmul *****************
 20909 ;; Defined at:
 20910 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 20911 ;; Parameters:    Size  Location     Type
 20912 ;;  multiplier      2    0[BANK0 ] unsigned int 
 20913 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 20914 ;; Auto vars:     Size  Location     Type
 20915 ;;  product         2    4[BANK0 ] unsigned int 
 20916 ;; Return value:  Size  Location     Type
 20917 ;;                  2    0[BANK0 ] unsigned int 
 20918 ;; Registers used:
 20919 ;;		wreg, status,2, status,0, prodl, prodh
 20920 ;; Tracked objects:
 20921 ;;		On entry : 0/0
 20922 ;;		On exit  : 0/0
 20923 ;;		Unchanged: 0/0
 20924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20925 ;;      Params:         0       4       0       0       0       0       0       0       0
 20926 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20927 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20928 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20929 ;;Total ram usage:        6 bytes
 20930 ;; Hardware stack levels used:    1
 20931 ;; Hardware stack levels required when called:    4
 20932 ;; This function calls:
 20933 ;;		Nothing
 20934 ;; This function is called by:
 20935 ;;		_memory_txFrameRequest
 20936 ;; This function uses a non-reentrant model
 20937 ;;
 20938                           
 20939                           	psect	text79
 20940  0054B8                     __ptext79:
 20941                           	opt stack 0
 20942  0054B8                     ___wmul:
 20943                           	opt stack 23
 20944                           
 20945                           ; BSR set to: 0
 20946                           ;incstack = 0
 20947  0054B8  0100               	movlb	0	; () banked
 20948  0054BA  5160               	movf	___wmul@multiplier& (0+255),w,b
 20949  0054BC  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20950  0054BE  CFF3 F064          	movff	prodl,___wmul@product
 20951  0054C2  CFF4 F065          	movff	prodh,___wmul@product+1
 20952  0054C6  5160               	movf	___wmul@multiplier& (0+255),w,b
 20953  0054C8  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 20954  0054CA  50F3               	movf	prodl,w,c
 20955  0054CC  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20956  0054CE  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 20957  0054D0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 20958  0054D2  50F3               	movf	prodl,w,c
 20959  0054D4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 20960                           
 20961                           ; BSR set to: 0
 20962  0054D6  C064  F060         	movff	___wmul@product,?___wmul
 20963  0054DA  C065  F061         	movff	___wmul@product+1,?___wmul+1
 20964  0054DE  0012               	return	
 20965  0054E0                     __end_of___wmul:
 20966                           	opt stack 0
 20967                           tblptru	equ	0xFF8
 20968                           tblptrh	equ	0xFF7
 20969                           tblptrl	equ	0xFF6
 20970                           tablat	equ	0xFF5
 20971                           prodh	equ	0xFF4
 20972                           prodl	equ	0xFF3
 20973                           intcon	equ	0xFF2
 20974                           intcon3	equ	0xFF0
 20975                           indf0	equ	0xFEF
 20976                           postinc0	equ	0xFEE
 20977                           plusw0	equ	0xFEB
 20978                           fsr0h	equ	0xFEA
 20979                           fsr0l	equ	0xFE9
 20980                           wreg	equ	0xFE8
 20981                           indf1	equ	0xFE7
 20982                           postinc1	equ	0xFE6
 20983                           postdec1	equ	0xFE5
 20984                           plusw1	equ	0xFE3
 20985                           fsr1h	equ	0xFE2
 20986                           fsr1l	equ	0xFE1
 20987                           indf2	equ	0xFDF
 20988                           postinc2	equ	0xFDE
 20989                           postdec2	equ	0xFDD
 20990                           plusw2	equ	0xFDB
 20991                           fsr2h	equ	0xFDA
 20992                           fsr2l	equ	0xFD9
 20993                           status	equ	0xFD8
 20994                           
 20995 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 20996 ;; Defined at:
 20997 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 20998 ;; Parameters:    Size  Location     Type
 20999 ;;  ethtype         2   15[BANK0 ] enum E5508
 21000 ;;  field           9   17[BANK0 ] struct memoryField
 21001 ;; Auto vars:     Size  Location     Type
 21002 ;;  opcode          1   28[BANK0 ] unsigned char 
 21003 ;;  highByte        1   27[BANK0 ] unsigned char 
 21004 ;;  lowByte         1   26[BANK0 ] unsigned char 
 21005 ;; Return value:  Size  Location     Type
 21006 ;;                  1    wreg      void 
 21007 ;; Registers used:
 21008 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21009 ;; Tracked objects:
 21010 ;;		On entry : 0/0
 21011 ;;		On exit  : 0/0
 21012 ;;		Unchanged: 0/0
 21013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21014 ;;      Params:         0      11       0       0       0       0       0       0       0
 21015 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21017 ;;      Totals:         0      14       0       0       0       0       0       0       0
 21018 ;;Total ram usage:       14 bytes
 21019 ;; Hardware stack levels used:    1
 21020 ;; Hardware stack levels required when called:    7
 21021 ;; This function calls:
 21022 ;;		_enc424j600_setGPDATAWritePointer
 21023 ;;		_enc424j600_writeSPI
 21024 ;; This function is called by:
 21025 ;;		_ethernet_txFrameRequest
 21026 ;; This function uses a non-reentrant model
 21027 ;;
 21028                           
 21029                           	psect	text80
 21030  004F5C                     __ptext80:
 21031                           	opt stack 0
 21032  004F5C                     _ethernetController_writeEtherTypeFieldToBuffer:
 21033                           	opt stack 21
 21034                           
 21035                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 21036                           
 21037                           ; BSR set to: 0
 21038                           ;incstack = 0
 21039  004F5C  0E06               	movlw	6
 21040  004F5E  0100               	movlb	0	; () banked
 21041  004F60  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 21042  004F62  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 21043  004F64  0E00               	movlw	0
 21044  004F66  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 21045  004F68  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 21046  004F6A  ECEA  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21047                           
 21048                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 21049  004F6E  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 21050                           
 21051                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 21052  004F72  0100               	movlb	0	; () banked
 21053  004F74  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 21054  004F76  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 21055                           
 21056                           ; BSR set to: 0
 21057                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 21058  004F78  0E2A               	movlw	42
 21059  004F7A  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 21060                           
 21061                           ; BSR set to: 0
 21062                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 21063  004F7C  9881               	bcf	3969,4,c	;volatile
 21064                           
 21065                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 21066  004F7E  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 21067  004F80  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21068  004F82  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 21069  004F84  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21070  004F86  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21071                           
 21072                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 21073  004F8A  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 21074  004F8C  0100               	movlb	0	; () banked
 21075  004F8E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21076  004F90  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 21077  004F92  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21078  004F94  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21079                           
 21080                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 21081  004F98  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21082  004F9A  0100               	movlb	0	; () banked
 21083  004F9C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21084  004F9E  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 21085  004FA0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21086  004FA2  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21087                           
 21088                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 21089  004FA6  8881               	bsf	3969,4,c	;volatile
 21090  004FA8  0012               	return		;funcret
 21091  004FAA                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 21092                           	opt stack 0
 21093                           tblptru	equ	0xFF8
 21094                           tblptrh	equ	0xFF7
 21095                           tblptrl	equ	0xFF6
 21096                           tablat	equ	0xFF5
 21097                           prodh	equ	0xFF4
 21098                           prodl	equ	0xFF3
 21099                           intcon	equ	0xFF2
 21100                           intcon3	equ	0xFF0
 21101                           indf0	equ	0xFEF
 21102                           postinc0	equ	0xFEE
 21103                           plusw0	equ	0xFEB
 21104                           fsr0h	equ	0xFEA
 21105                           fsr0l	equ	0xFE9
 21106                           wreg	equ	0xFE8
 21107                           indf1	equ	0xFE7
 21108                           postinc1	equ	0xFE6
 21109                           postdec1	equ	0xFE5
 21110                           plusw1	equ	0xFE3
 21111                           fsr1h	equ	0xFE2
 21112                           fsr1l	equ	0xFE1
 21113                           indf2	equ	0xFDF
 21114                           postinc2	equ	0xFDE
 21115                           postdec2	equ	0xFDD
 21116                           plusw2	equ	0xFDB
 21117                           fsr2h	equ	0xFDA
 21118                           fsr2l	equ	0xFD9
 21119                           status	equ	0xFD8
 21120                           
 21121 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 21122 ;; Defined at:
 21123 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 21124 ;; Parameters:    Size  Location     Type
 21125 ;;  addr            6   15[BANK0 ] struct macaddress
 21126 ;;  field           9   21[BANK0 ] struct memoryField
 21127 ;; Auto vars:     Size  Location     Type
 21128 ;;  i               1   37[BANK0 ] unsigned char 
 21129 ;;  i               1   38[BANK0 ] unsigned char 
 21130 ;;  data            6   30[BANK0 ] unsigned char [6]
 21131 ;;  opcode          1   36[BANK0 ] unsigned char 
 21132 ;; Return value:  Size  Location     Type
 21133 ;;                  1    wreg      void 
 21134 ;; Registers used:
 21135 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21136 ;; Tracked objects:
 21137 ;;		On entry : 0/0
 21138 ;;		On exit  : 0/0
 21139 ;;		Unchanged: 0/0
 21140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21141 ;;      Params:         0      15       0       0       0       0       0       0       0
 21142 ;;      Locals:         0       9       0       0       0       0       0       0       0
 21143 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21144 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21145 ;;Total ram usage:       24 bytes
 21146 ;; Hardware stack levels used:    1
 21147 ;; Hardware stack levels required when called:    7
 21148 ;; This function calls:
 21149 ;;		_enc424j600_setGPDATAWritePointer
 21150 ;;		_enc424j600_writeSPI
 21151 ;; This function is called by:
 21152 ;;		_ethernet_txFrameRequest
 21153 ;;		_ipv4_sendFrame
 21154 ;; This function uses a non-reentrant model
 21155 ;;
 21156                           
 21157                           	psect	text81
 21158  00472C                     __ptext81:
 21159                           	opt stack 0
 21160  00472C                     _ethernetController_writeDestinationMACAddress:
 21161                           	opt stack 21
 21162                           
 21163                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 21164                           
 21165                           ;incstack = 0
 21166  00472C  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 21167  004730  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 21168  004734  ECEA  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21169                           
 21170                           ;ENC424J600.c: 230: uint8_t data[6];
 21171                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 21172  004738  0E00               	movlw	0
 21173  00473A  0100               	movlb	0	; () banked
 21174  00473C  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21175  00473E                     l8375:
 21176                           
 21177                           ; BSR set to: 0
 21178  00473E  0E05               	movlw	5
 21179  004740  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 21180  004742  D001               	goto	l140
 21181  004744  D014               	goto	u9130
 21182  004746                     l140:
 21183                           
 21184                           ; BSR set to: 0
 21185                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 21186                           
 21187                           ; BSR set to: 0
 21188  004746  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21189  004748  0D01               	mullw	1
 21190  00474A  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 21191  00474C  24F3               	addwf	prodl,w,c
 21192  00474E  6ED9               	movwf	fsr2l,c
 21193  004750  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 21194  004752  20F4               	addwfc	prodh,w,c
 21195  004754  6EDA               	movwf	fsr2h,c
 21196  004756  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 21197  004758  0D01               	mullw	1
 21198  00475A  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21199  00475C  24F3               	addwf	prodl,w,c
 21200  00475E  6EE1               	movwf	fsr1l,c
 21201  004760  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21202  004762  20F4               	addwfc	prodh,w,c
 21203  004764  6EE2               	movwf	fsr1h,c
 21204  004766  CFDF FFE7          	movff	indf2,indf1
 21205                           
 21206                           ; BSR set to: 0
 21207  00476A  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 21208  00476C  D7E8               	goto	l8375
 21209  00476E                     u9130:
 21210                           
 21211                           ; BSR set to: 0
 21212                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 21213                           
 21214                           ; BSR set to: 0
 21215  00476E  0E2A               	movlw	42
 21216  004770  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 21217                           
 21218                           ; BSR set to: 0
 21219                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 21220  004772  9881               	bcf	3969,4,c	;volatile
 21221                           
 21222                           ; BSR set to: 0
 21223                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 21224  004774  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 21225  004776  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21226  004778  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 21227  00477A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21228  00477C  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21229                           
 21230                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 21231  004780  0E00               	movlw	0
 21232  004782  0100               	movlb	0	; () banked
 21233  004784  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21234  004786                     l8393:
 21235                           
 21236                           ; BSR set to: 0
 21237  004786  0E05               	movlw	5
 21238  004788  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 21239  00478A  D001               	goto	l142
 21240  00478C  D00D               	goto	u9150
 21241  00478E                     l142:
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 21245                           
 21246                           ; BSR set to: 0
 21247  00478E  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 21248  004790  0D01               	mullw	1
 21249  004792  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 21250  004794  24F3               	addwf	prodl,w,c
 21251  004796  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21252  004798  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 21253  00479A  20F4               	addwfc	prodh,w,c
 21254  00479C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21255  00479E  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21256  0047A2  0100               	movlb	0	; () banked
 21257  0047A4  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 21258  0047A6  D7EF               	goto	l8393
 21259  0047A8                     u9150:
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 21263  0047A8  8881               	bsf	3969,4,c	;volatile
 21264                           
 21265                           ; BSR set to: 0
 21266  0047AA  0012               	return		;funcret
 21267  0047AC                     __end_of_ethernetController_writeDestinationMACAddress:
 21268                           	opt stack 0
 21269                           tblptru	equ	0xFF8
 21270                           tblptrh	equ	0xFF7
 21271                           tblptrl	equ	0xFF6
 21272                           tablat	equ	0xFF5
 21273                           prodh	equ	0xFF4
 21274                           prodl	equ	0xFF3
 21275                           intcon	equ	0xFF2
 21276                           intcon3	equ	0xFF0
 21277                           indf0	equ	0xFEF
 21278                           postinc0	equ	0xFEE
 21279                           plusw0	equ	0xFEB
 21280                           fsr0h	equ	0xFEA
 21281                           fsr0l	equ	0xFE9
 21282                           wreg	equ	0xFE8
 21283                           indf1	equ	0xFE7
 21284                           postinc1	equ	0xFE6
 21285                           postdec1	equ	0xFE5
 21286                           plusw1	equ	0xFE3
 21287                           fsr1h	equ	0xFE2
 21288                           fsr1l	equ	0xFE1
 21289                           indf2	equ	0xFDF
 21290                           postinc2	equ	0xFDE
 21291                           postdec2	equ	0xFDD
 21292                           plusw2	equ	0xFDB
 21293                           fsr2h	equ	0xFDA
 21294                           fsr2l	equ	0xFD9
 21295                           status	equ	0xFD8
 21296                           
 21297 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 21298 ;; Defined at:
 21299 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 21300 ;; Parameters:    Size  Location     Type
 21301 ;;  data            1    wreg     unsigned char 
 21302 ;;  field           9   15[BANK0 ] struct memoryField
 21303 ;; Auto vars:     Size  Location     Type
 21304 ;;  data            1   28[BANK0 ] unsigned char 
 21305 ;;  opcode          1   29[BANK0 ] unsigned char 
 21306 ;; Return value:  Size  Location     Type
 21307 ;;                  1    wreg      void 
 21308 ;; Registers used:
 21309 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21310 ;; Tracked objects:
 21311 ;;		On entry : 0/0
 21312 ;;		On exit  : 0/0
 21313 ;;		Unchanged: 0/0
 21314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21315 ;;      Params:         0       9       0       0       0       0       0       0       0
 21316 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21317 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21318 ;;      Totals:         0      15       0       0       0       0       0       0       0
 21319 ;;Total ram usage:       15 bytes
 21320 ;; Hardware stack levels used:    1
 21321 ;; Hardware stack levels required when called:    7
 21322 ;; This function calls:
 21323 ;;		_enc424j600_setGPDATAWritePointer
 21324 ;;		_enc424j600_writeSPI
 21325 ;; This function is called by:
 21326 ;;		_arp_send
 21327 ;;		_ipv4_streamToTransmissionBuffer
 21328 ;; This function uses a non-reentrant model
 21329 ;;
 21330                           
 21331                           	psect	text82
 21332  0048A4                     __ptext82:
 21333                           	opt stack 0
 21334  0048A4                     _ethernetController_streamToTransmitBuffer:
 21335                           	opt stack 22
 21336                           
 21337                           ; BSR set to: 0
 21338                           ;incstack = 0
 21339                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 21340  0048A4  0100               	movlb	0	; () banked
 21341  0048A6  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 21342                           
 21343                           ;ENC424J600.c: 209: uint8_t opcode;
 21344                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 21345                           ;ENC424J600.c: 211: if (pointer == 0) {
 21346  0048A8  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21347  0048AA  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21348  0048AC  A4D8               	btfss	status,2,c
 21349  0048AE  D010               	goto	l134
 21350                           
 21351                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 21352  0048B0  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 21353  0048B4  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 21354  0048B8  ECEA  F028         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 21355                           
 21356                           ;ENC424J600.c: 213: opcode = 0x2A;
 21357  0048BC  0E2A               	movlw	42
 21358  0048BE  0100               	movlb	0	; () banked
 21359  0048C0  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 21360                           
 21361                           ; BSR set to: 0
 21362                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 21363  0048C2  9881               	bcf	3969,4,c	;volatile
 21364                           
 21365                           ; BSR set to: 0
 21366                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 21367  0048C4  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 21368  0048C6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21369  0048C8  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 21370  0048CA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21371  0048CC  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21372  0048D0                     l134:
 21373                           
 21374                           ;ENC424J600.c: 216: }
 21375                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 21376  0048D0  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 21377  0048D2  0100               	movlb	0	; () banked
 21378  0048D4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21379  0048D6  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 21380  0048D8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21381  0048DA  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21382                           
 21383                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 21384  0048DE  0EFF               	movlw	255
 21385  0048E0  0100               	movlb	0	; () banked
 21386  0048E2  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 21387  0048E4  0EFF               	movlw	255
 21388  0048E6  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 21389  0048E8  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 21390  0048EC  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 21391  0048F0  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 21392  0048F4  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 21393  0048F6  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 21394  0048F8  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 21395  0048FA  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 21396  0048FC  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 21397  0048FE  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 21398  004900  E10A               	bnz	l8653
 21399  004902  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 21400  004904  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 21401  004906  A4D8               	btfss	status,2,c
 21402  004908  D006               	goto	l135
 21403                           
 21404                           ; BSR set to: 0
 21405                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 21406  00490A  8881               	bsf	3969,4,c	;volatile
 21407                           
 21408                           ; BSR set to: 0
 21409                           ;ENC424J600.c: 222: pointer = 0;
 21410  00490C  0E00               	movlw	0
 21411  00490E  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 21412  004910  0E00               	movlw	0
 21413  004912  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 21414                           
 21415                           ;ENC424J600.c: 223: } else {
 21416  004914  0012               	return	
 21417  004916                     l135:
 21418  004916                     l8653:
 21419                           
 21420                           ; BSR set to: 0
 21421                           ;ENC424J600.c: 224: pointer++;
 21422  004916  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 21423  004918  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 21424  00491A  0012               	return	
 21425  00491C                     __end_of_ethernetController_streamToTransmitBuffer:
 21426                           	opt stack 0
 21427                           tblptru	equ	0xFF8
 21428                           tblptrh	equ	0xFF7
 21429                           tblptrl	equ	0xFF6
 21430                           tablat	equ	0xFF5
 21431                           prodh	equ	0xFF4
 21432                           prodl	equ	0xFF3
 21433                           intcon	equ	0xFF2
 21434                           intcon3	equ	0xFF0
 21435                           indf0	equ	0xFEF
 21436                           postinc0	equ	0xFEE
 21437                           plusw0	equ	0xFEB
 21438                           fsr0h	equ	0xFEA
 21439                           fsr0l	equ	0xFE9
 21440                           wreg	equ	0xFE8
 21441                           indf1	equ	0xFE7
 21442                           postinc1	equ	0xFE6
 21443                           postdec1	equ	0xFE5
 21444                           plusw1	equ	0xFE3
 21445                           fsr1h	equ	0xFE2
 21446                           fsr1l	equ	0xFE1
 21447                           indf2	equ	0xFDF
 21448                           postinc2	equ	0xFDE
 21449                           postdec2	equ	0xFDD
 21450                           plusw2	equ	0xFDB
 21451                           fsr2h	equ	0xFDA
 21452                           fsr2l	equ	0xFD9
 21453                           status	equ	0xFD8
 21454                           
 21455 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 21456 ;; Defined at:
 21457 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 21458 ;; Parameters:    Size  Location     Type
 21459 ;;  addr            2   10[BANK0 ] unsigned int 
 21460 ;; Auto vars:     Size  Location     Type
 21461 ;;  highByte        1   14[BANK0 ] unsigned char 
 21462 ;;  lowByte         1   13[BANK0 ] unsigned char 
 21463 ;;  opcode          1   12[BANK0 ] unsigned char 
 21464 ;; Return value:  Size  Location     Type
 21465 ;;                  1    wreg      void 
 21466 ;; Registers used:
 21467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21468 ;; Tracked objects:
 21469 ;;		On entry : 0/0
 21470 ;;		On exit  : 0/0
 21471 ;;		Unchanged: 0/0
 21472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21473 ;;      Params:         0       2       0       0       0       0       0       0       0
 21474 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21476 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21477 ;;Total ram usage:        5 bytes
 21478 ;; Hardware stack levels used:    1
 21479 ;; Hardware stack levels required when called:    6
 21480 ;; This function calls:
 21481 ;;		_enc424j600_writeSPI
 21482 ;; This function is called by:
 21483 ;;		_ethernetController_streamToTransmitBuffer
 21484 ;;		_ethernetController_writeDestinationMACAddress
 21485 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 21486 ;; This function uses a non-reentrant model
 21487 ;;
 21488                           
 21489                           	psect	text83
 21490  0051D4                     __ptext83:
 21491                           	opt stack 0
 21492  0051D4                     _enc424j600_setGPDATAWritePointer:
 21493                           	opt stack 21
 21494                           
 21495                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 21496                           
 21497                           ; BSR set to: 0
 21498                           ;incstack = 0
 21499  0051D4  0E6C               	movlw	108
 21500  0051D6  0100               	movlb	0	; () banked
 21501  0051D8  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 21502                           
 21503                           ; BSR set to: 0
 21504                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 21505  0051DA  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 21506                           
 21507                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 21508  0051DE  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 21509  0051E0  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 21510                           
 21511                           ; BSR set to: 0
 21512                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 21513  0051E2  9881               	bcf	3969,4,c	;volatile
 21514                           
 21515                           ; BSR set to: 0
 21516                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 21517  0051E4  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 21518  0051E6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21519  0051E8  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 21520  0051EA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21521  0051EC  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21522                           
 21523                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 21524  0051F0  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 21525  0051F2  0100               	movlb	0	; () banked
 21526  0051F4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21527  0051F6  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 21528  0051F8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21529  0051FA  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21530                           
 21531                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 21532  0051FE  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 21533  005200  0100               	movlb	0	; () banked
 21534  005202  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21535  005204  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 21536  005206  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21537  005208  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 21538                           
 21539                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 21540  00520C  8881               	bsf	3969,4,c	;volatile
 21541  00520E  0012               	return		;funcret
 21542  005210                     __end_of_enc424j600_setGPDATAWritePointer:
 21543                           	opt stack 0
 21544                           tblptru	equ	0xFF8
 21545                           tblptrh	equ	0xFF7
 21546                           tblptrl	equ	0xFF6
 21547                           tablat	equ	0xFF5
 21548                           prodh	equ	0xFF4
 21549                           prodl	equ	0xFF3
 21550                           intcon	equ	0xFF2
 21551                           intcon3	equ	0xFF0
 21552                           indf0	equ	0xFEF
 21553                           postinc0	equ	0xFEE
 21554                           plusw0	equ	0xFEB
 21555                           fsr0h	equ	0xFEA
 21556                           fsr0l	equ	0xFE9
 21557                           wreg	equ	0xFE8
 21558                           indf1	equ	0xFE7
 21559                           postinc1	equ	0xFE6
 21560                           postdec1	equ	0xFE5
 21561                           plusw1	equ	0xFE3
 21562                           fsr1h	equ	0xFE2
 21563                           fsr1l	equ	0xFE1
 21564                           indf2	equ	0xFDF
 21565                           postinc2	equ	0xFDE
 21566                           postdec2	equ	0xFDD
 21567                           plusw2	equ	0xFDB
 21568                           fsr2h	equ	0xFDA
 21569                           fsr2l	equ	0xFD9
 21570                           status	equ	0xFD8
 21571                           
 21572 ;; *************** function _ethernetController_sendPacket *****************
 21573 ;; Defined at:
 21574 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 21575 ;; Parameters:    Size  Location     Type
 21576 ;;  field           9   18[BANK0 ] struct memoryField
 21577 ;; Auto vars:     Size  Location     Type
 21578 ;;		None
 21579 ;; Return value:  Size  Location     Type
 21580 ;;                  1    wreg      void 
 21581 ;; Registers used:
 21582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21583 ;; Tracked objects:
 21584 ;;		On entry : 0/0
 21585 ;;		On exit  : 0/0
 21586 ;;		Unchanged: 0/0
 21587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21588 ;;      Params:         0       9       0       0       0       0       0       0       0
 21589 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21590 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21591 ;;      Totals:         0       9       0       0       0       0       0       0       0
 21592 ;;Total ram usage:        9 bytes
 21593 ;; Hardware stack levels used:    1
 21594 ;; Hardware stack levels required when called:    8
 21595 ;; This function calls:
 21596 ;;		_enc424j600_setTXLength
 21597 ;;		_enc424j600_setTXStartAddress
 21598 ;;		_enc424j600_writeSingleByte
 21599 ;;		_memory_txFrameClear
 21600 ;; This function is called by:
 21601 ;;		_arp_send
 21602 ;;		_ipv4_sendFrame
 21603 ;; This function uses a non-reentrant model
 21604 ;;
 21605                           
 21606                           	psect	text84
 21607  0054E0                     __ptext84:
 21608                           	opt stack 0
 21609  0054E0                     _ethernetController_sendPacket:
 21610                           	opt stack 20
 21611                           
 21612                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 21613                           
 21614                           ;incstack = 0
 21615  0054E0  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 21616  0054E4  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 21617  0054E8  ECF4  F029         	call	_enc424j600_setTXStartAddress	;wreg free
 21618                           
 21619                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 21620  0054EC  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 21621  0054F0  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 21622  0054F4  EC09  F02A         	call	_enc424j600_setTXLength	;wreg free
 21623                           
 21624                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 21625  0054F8  0ED4               	movlw	212
 21626  0054FA  EC50  F02B         	call	_enc424j600_writeSingleByte
 21627                           
 21628                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 21629  0054FE  0100               	movlb	0	; () banked
 21630  005500  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 21631  005502  ECD1  F02A         	call	_memory_txFrameClear
 21632  005506  0012               	return		;funcret
 21633  005508                     __end_of_ethernetController_sendPacket:
 21634                           	opt stack 0
 21635                           tblptru	equ	0xFF8
 21636                           tblptrh	equ	0xFF7
 21637                           tblptrl	equ	0xFF6
 21638                           tablat	equ	0xFF5
 21639                           prodh	equ	0xFF4
 21640                           prodl	equ	0xFF3
 21641                           intcon	equ	0xFF2
 21642                           intcon3	equ	0xFF0
 21643                           indf0	equ	0xFEF
 21644                           postinc0	equ	0xFEE
 21645                           plusw0	equ	0xFEB
 21646                           fsr0h	equ	0xFEA
 21647                           fsr0l	equ	0xFE9
 21648                           wreg	equ	0xFE8
 21649                           indf1	equ	0xFE7
 21650                           postinc1	equ	0xFE6
 21651                           postdec1	equ	0xFE5
 21652                           plusw1	equ	0xFE3
 21653                           fsr1h	equ	0xFE2
 21654                           fsr1l	equ	0xFE1
 21655                           indf2	equ	0xFDF
 21656                           postinc2	equ	0xFDE
 21657                           postdec2	equ	0xFDD
 21658                           plusw2	equ	0xFDB
 21659                           fsr2h	equ	0xFDA
 21660                           fsr2l	equ	0xFD9
 21661                           status	equ	0xFD8
 21662                           
 21663 ;; *************** function _memory_txFrameClear *****************
 21664 ;; Defined at:
 21665 ;;		line 221 in file "src/mem/memoryController.c"
 21666 ;; Parameters:    Size  Location     Type
 21667 ;;  index           1    wreg     unsigned char 
 21668 ;; Auto vars:     Size  Location     Type
 21669 ;;  index           1    0[BANK0 ] unsigned char 
 21670 ;; Return value:  Size  Location     Type
 21671 ;;                  1    wreg      void 
 21672 ;; Registers used:
 21673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21674 ;; Tracked objects:
 21675 ;;		On entry : 0/0
 21676 ;;		On exit  : 0/0
 21677 ;;		Unchanged: 0/0
 21678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21679 ;;      Params:         0       0       0       0       0       0       0       0       0
 21680 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21681 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21682 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21683 ;;Total ram usage:        1 bytes
 21684 ;; Hardware stack levels used:    1
 21685 ;; Hardware stack levels required when called:    4
 21686 ;; This function calls:
 21687 ;;		Nothing
 21688 ;; This function is called by:
 21689 ;;		_ethernetController_sendPacket
 21690 ;; This function uses a non-reentrant model
 21691 ;;
 21692                           
 21693                           	psect	text85
 21694  0055A2                     __ptext85:
 21695                           	opt stack 0
 21696  0055A2                     _memory_txFrameClear:
 21697                           	opt stack 23
 21698                           
 21699                           ;incstack = 0
 21700                           ;memory_txFrameClear@index stored from wreg
 21701  0055A2  0100               	movlb	0	; () banked
 21702  0055A4  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 21703                           
 21704                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 21705  0055A6  0100               	movlb	0	; () banked
 21706  0055A8  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 21707  0055AA  0D09               	mullw	9
 21708  0055AC  0E06               	movlw	6
 21709  0055AE  26F3               	addwf	prodl,f,c
 21710  0055B0  0E00               	movlw	0
 21711  0055B2  22F4               	addwfc	prodh,f,c
 21712  0055B4  0E00               	movlw	low _occupiedMemory
 21713  0055B6  24F3               	addwf	prodl,w,c
 21714  0055B8  6ED9               	movwf	fsr2l,c
 21715  0055BA  0E02               	movlw	high _occupiedMemory
 21716  0055BC  20F4               	addwfc	prodh,w,c
 21717  0055BE  6EDA               	movwf	fsr2h,c
 21718  0055C0  0E00               	movlw	0
 21719  0055C2  6EDF               	movwf	indf2,c
 21720                           
 21721                           ; BSR set to: 0
 21722  0055C4  0012               	return		;funcret
 21723  0055C6                     __end_of_memory_txFrameClear:
 21724                           	opt stack 0
 21725                           tblptru	equ	0xFF8
 21726                           tblptrh	equ	0xFF7
 21727                           tblptrl	equ	0xFF6
 21728                           tablat	equ	0xFF5
 21729                           prodh	equ	0xFF4
 21730                           prodl	equ	0xFF3
 21731                           intcon	equ	0xFF2
 21732                           intcon3	equ	0xFF0
 21733                           indf0	equ	0xFEF
 21734                           postinc0	equ	0xFEE
 21735                           plusw0	equ	0xFEB
 21736                           fsr0h	equ	0xFEA
 21737                           fsr0l	equ	0xFE9
 21738                           wreg	equ	0xFE8
 21739                           indf1	equ	0xFE7
 21740                           postinc1	equ	0xFE6
 21741                           postdec1	equ	0xFE5
 21742                           plusw1	equ	0xFE3
 21743                           fsr1h	equ	0xFE2
 21744                           fsr1l	equ	0xFE1
 21745                           indf2	equ	0xFDF
 21746                           postinc2	equ	0xFDE
 21747                           postdec2	equ	0xFDD
 21748                           plusw2	equ	0xFDB
 21749                           fsr2h	equ	0xFDA
 21750                           fsr2l	equ	0xFD9
 21751                           status	equ	0xFD8
 21752                           
 21753 ;; *************** function _enc424j600_setTXStartAddress *****************
 21754 ;; Defined at:
 21755 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 21756 ;; Parameters:    Size  Location     Type
 21757 ;;  addr            2   14[BANK0 ] unsigned int 
 21758 ;; Auto vars:     Size  Location     Type
 21759 ;;  highByte        1   17[BANK0 ] unsigned char 
 21760 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21761 ;; Return value:  Size  Location     Type
 21762 ;;                  1    wreg      void 
 21763 ;; Registers used:
 21764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21765 ;; Tracked objects:
 21766 ;;		On entry : 0/0
 21767 ;;		On exit  : 0/0
 21768 ;;		Unchanged: 0/0
 21769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21770 ;;      Params:         0       2       0       0       0       0       0       0       0
 21771 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21772 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21773 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21774 ;;Total ram usage:        4 bytes
 21775 ;; Hardware stack levels used:    1
 21776 ;; Hardware stack levels required when called:    7
 21777 ;; This function calls:
 21778 ;;		_enc424j600_writeControlRegisterUnbanked
 21779 ;; This function is called by:
 21780 ;;		_ethernetController_sendPacket
 21781 ;; This function uses a non-reentrant model
 21782 ;;
 21783                           
 21784                           	psect	text86
 21785  0053E8                     __ptext86:
 21786                           	opt stack 0
 21787  0053E8                     _enc424j600_setTXStartAddress:
 21788                           	opt stack 20
 21789                           
 21790                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 21791                           
 21792                           ; BSR set to: 0
 21793                           ;incstack = 0
 21794  0053E8  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 21795                           
 21796                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 21797  0053EC  0100               	movlb	0	; () banked
 21798  0053EE  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 21799  0053F0  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 21800                           
 21801                           ; BSR set to: 0
 21802                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 21803  0053F2  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 21804  0053F4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21805  0053F6  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 21806  0053F8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21807  0053FA  0E00               	movlw	0
 21808  0053FC  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21809                           
 21810                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 21811  005400  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 21812  005402  0100               	movlb	0	; () banked
 21813  005404  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21814  005406  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 21815  005408  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21816  00540A  0E01               	movlw	1
 21817  00540C  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21818  005410  0012               	return		;funcret
 21819  005412                     __end_of_enc424j600_setTXStartAddress:
 21820                           	opt stack 0
 21821                           tblptru	equ	0xFF8
 21822                           tblptrh	equ	0xFF7
 21823                           tblptrl	equ	0xFF6
 21824                           tablat	equ	0xFF5
 21825                           prodh	equ	0xFF4
 21826                           prodl	equ	0xFF3
 21827                           intcon	equ	0xFF2
 21828                           intcon3	equ	0xFF0
 21829                           indf0	equ	0xFEF
 21830                           postinc0	equ	0xFEE
 21831                           plusw0	equ	0xFEB
 21832                           fsr0h	equ	0xFEA
 21833                           fsr0l	equ	0xFE9
 21834                           wreg	equ	0xFE8
 21835                           indf1	equ	0xFE7
 21836                           postinc1	equ	0xFE6
 21837                           postdec1	equ	0xFE5
 21838                           plusw1	equ	0xFE3
 21839                           fsr1h	equ	0xFE2
 21840                           fsr1l	equ	0xFE1
 21841                           indf2	equ	0xFDF
 21842                           postinc2	equ	0xFDE
 21843                           postdec2	equ	0xFDD
 21844                           plusw2	equ	0xFDB
 21845                           fsr2h	equ	0xFDA
 21846                           fsr2l	equ	0xFD9
 21847                           status	equ	0xFD8
 21848                           
 21849 ;; *************** function _enc424j600_setTXLength *****************
 21850 ;; Defined at:
 21851 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 21852 ;; Parameters:    Size  Location     Type
 21853 ;;  len             2   14[BANK0 ] unsigned int 
 21854 ;; Auto vars:     Size  Location     Type
 21855 ;;  highByte        1   17[BANK0 ] unsigned char 
 21856 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21857 ;; Return value:  Size  Location     Type
 21858 ;;                  1    wreg      void 
 21859 ;; Registers used:
 21860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21861 ;; Tracked objects:
 21862 ;;		On entry : 0/0
 21863 ;;		On exit  : 0/0
 21864 ;;		Unchanged: 0/0
 21865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21866 ;;      Params:         0       2       0       0       0       0       0       0       0
 21867 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21868 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21869 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21870 ;;Total ram usage:        4 bytes
 21871 ;; Hardware stack levels used:    1
 21872 ;; Hardware stack levels required when called:    7
 21873 ;; This function calls:
 21874 ;;		_enc424j600_writeControlRegisterUnbanked
 21875 ;; This function is called by:
 21876 ;;		_ethernetController_sendPacket
 21877 ;; This function uses a non-reentrant model
 21878 ;;
 21879                           
 21880                           	psect	text87
 21881  005412                     __ptext87:
 21882                           	opt stack 0
 21883  005412                     _enc424j600_setTXLength:
 21884                           	opt stack 20
 21885                           
 21886                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 21887                           
 21888                           ;incstack = 0
 21889  005412  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 21890                           
 21891                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 21892  005416  0100               	movlb	0	; () banked
 21893  005418  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 21894  00541A  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 21895                           
 21896                           ; BSR set to: 0
 21897                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 21898  00541C  0E70               	movlw	low enc424j600_setTXLength@lowByte
 21899  00541E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21900  005420  0E00               	movlw	high enc424j600_setTXLength@lowByte
 21901  005422  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21902  005424  0E02               	movlw	2
 21903  005426  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21904                           
 21905                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 21906  00542A  0E71               	movlw	low enc424j600_setTXLength@highByte
 21907  00542C  0100               	movlb	0	; () banked
 21908  00542E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21909  005430  0E00               	movlw	high enc424j600_setTXLength@highByte
 21910  005432  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21911  005434  0E03               	movlw	3
 21912  005436  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 21913  00543A  0012               	return		;funcret
 21914  00543C                     __end_of_enc424j600_setTXLength:
 21915                           	opt stack 0
 21916                           tblptru	equ	0xFF8
 21917                           tblptrh	equ	0xFF7
 21918                           tblptrl	equ	0xFF6
 21919                           tablat	equ	0xFF5
 21920                           prodh	equ	0xFF4
 21921                           prodl	equ	0xFF3
 21922                           intcon	equ	0xFF2
 21923                           intcon3	equ	0xFF0
 21924                           indf0	equ	0xFEF
 21925                           postinc0	equ	0xFEE
 21926                           plusw0	equ	0xFEB
 21927                           fsr0h	equ	0xFEA
 21928                           fsr0l	equ	0xFE9
 21929                           wreg	equ	0xFE8
 21930                           indf1	equ	0xFE7
 21931                           postinc1	equ	0xFE6
 21932                           postdec1	equ	0xFE5
 21933                           plusw1	equ	0xFE3
 21934                           fsr1h	equ	0xFE2
 21935                           fsr1l	equ	0xFE1
 21936                           indf2	equ	0xFDF
 21937                           postinc2	equ	0xFDE
 21938                           postdec2	equ	0xFDD
 21939                           plusw2	equ	0xFDB
 21940                           fsr2h	equ	0xFDA
 21941                           fsr2l	equ	0xFD9
 21942                           status	equ	0xFD8
 21943                           
 21944 ;; *************** function _ethernetController_getSourceMACAddress *****************
 21945 ;; Defined at:
 21946 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 21947 ;; Parameters:    Size  Location     Type
 21948 ;;  field           9   15[BANK0 ] struct memoryField
 21949 ;; Auto vars:     Size  Location     Type
 21950 ;;  temp            1   31[BANK0 ] unsigned char 
 21951 ;;  i               1   32[BANK0 ] unsigned char 
 21952 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 21953 ;;  opcode          1   24[BANK0 ] unsigned char 
 21954 ;; Return value:  Size  Location     Type
 21955 ;;                  6   15[BANK0 ] struct macaddress
 21956 ;; Registers used:
 21957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21958 ;; Tracked objects:
 21959 ;;		On entry : 0/0
 21960 ;;		On exit  : 0/0
 21961 ;;		Unchanged: 0/0
 21962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21963 ;;      Params:         0       9       0       0       0       0       0       0       0
 21964 ;;      Locals:         0       9       0       0       0       0       0       0       0
 21965 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21966 ;;      Totals:         0      18       0       0       0       0       0       0       0
 21967 ;;Total ram usage:       18 bytes
 21968 ;; Hardware stack levels used:    1
 21969 ;; Hardware stack levels required when called:    7
 21970 ;; This function calls:
 21971 ;;		_enc424j600_readSPI
 21972 ;;		_enc424j600_setERXDATAReadPointer
 21973 ;;		_enc424j600_writeSPI
 21974 ;; This function is called by:
 21975 ;;		_arp_send
 21976 ;; This function uses a non-reentrant model
 21977 ;;
 21978                           
 21979                           	psect	text88
 21980  004B5A                     __ptext88:
 21981                           	opt stack 0
 21982  004B5A                     _ethernetController_getSourceMACAddress:
 21983                           	opt stack 19
 21984                           
 21985                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 21986                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 21987                           
 21988                           ;incstack = 0
 21989  004B5A  0E0E               	movlw	14
 21990  004B5C  0100               	movlb	0	; () banked
 21991  004B5E  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 21992  004B60  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 21993  004B62  0E00               	movlw	0
 21994  004B64  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 21995  004B66  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 21996  004B68  EC08  F029         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 21997                           
 21998                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 21999  004B6C  0E2C               	movlw	44
 22000  004B6E  0100               	movlb	0	; () banked
 22001  004B70  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 22002                           
 22003                           ; BSR set to: 0
 22004                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 22005  004B72  9881               	bcf	3969,4,c	;volatile
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 22009  004B74  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 22010  004B76  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22011  004B78  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 22012  004B7A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22013  004B7C  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 22014                           
 22015                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 22016  004B80  0E00               	movlw	0
 22017  004B82  0100               	movlb	0	; () banked
 22018  004B84  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 22019  004B86                     l8663:
 22020                           
 22021                           ; BSR set to: 0
 22022  004B86  0E05               	movlw	5
 22023  004B88  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 22024  004B8A  D001               	goto	l155
 22025  004B8C  D013               	goto	u9630
 22026  004B8E                     l155:
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;ENC424J600.c: 275: uint8_t temp;
 22030                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 22031                           
 22032                           ; BSR set to: 0
 22033  004B8E  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 22034  004B90  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 22035  004B92  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 22036  004B94  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 22037  004B96  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
 22038                           
 22039                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 22040  004B9A  0100               	movlb	0	; () banked
 22041  004B9C  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 22042  004B9E  0D01               	mullw	1
 22043  004BA0  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 22044  004BA2  24F3               	addwf	prodl,w,c
 22045  004BA4  6ED9               	movwf	fsr2l,c
 22046  004BA6  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 22047  004BA8  20F4               	addwfc	prodh,w,c
 22048  004BAA  6EDA               	movwf	fsr2h,c
 22049  004BAC  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 22050                           
 22051                           ; BSR set to: 0
 22052  004BB0  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 22053  004BB2  D7E9               	goto	l8663
 22054  004BB4                     u9630:
 22055                           
 22056                           ; BSR set to: 0
 22057                           ;ENC424J600.c: 278: }
 22058                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 22059  004BB4  8881               	bsf	3969,4,c	;volatile
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;ENC424J600.c: 280: return sourceAddress;
 22063  004BB6  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 22064  004BBA  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 22065  004BBE  0E05               	movlw	5
 22066  004BC0                     u9641:
 22067  004BC0  CFDB FFEB          	movff	plusw2,plusw0
 22068  004BC4  06E8               	decf	wreg,f,c
 22069  004BC6  E2FC               	bc	u9641
 22070  004BC8  0012               	return	
 22071  004BCA                     __end_of_ethernetController_getSourceMACAddress:
 22072                           	opt stack 0
 22073                           tblptru	equ	0xFF8
 22074                           tblptrh	equ	0xFF7
 22075                           tblptrl	equ	0xFF6
 22076                           tablat	equ	0xFF5
 22077                           prodh	equ	0xFF4
 22078                           prodl	equ	0xFF3
 22079                           intcon	equ	0xFF2
 22080                           intcon3	equ	0xFF0
 22081                           indf0	equ	0xFEF
 22082                           postinc0	equ	0xFEE
 22083                           plusw0	equ	0xFEB
 22084                           fsr0h	equ	0xFEA
 22085                           fsr0l	equ	0xFE9
 22086                           wreg	equ	0xFE8
 22087                           indf1	equ	0xFE7
 22088                           postinc1	equ	0xFE6
 22089                           postdec1	equ	0xFE5
 22090                           plusw1	equ	0xFE3
 22091                           fsr1h	equ	0xFE2
 22092                           fsr1l	equ	0xFE1
 22093                           indf2	equ	0xFDF
 22094                           postinc2	equ	0xFDE
 22095                           postdec2	equ	0xFDD
 22096                           plusw2	equ	0xFDB
 22097                           fsr2h	equ	0xFDA
 22098                           fsr2l	equ	0xFD9
 22099                           status	equ	0xFD8
 22100                           
 22101 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 22102 ;; Defined at:
 22103 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 22104 ;; Parameters:    Size  Location     Type
 22105 ;;  addr            2   10[BANK0 ] unsigned int 
 22106 ;; Auto vars:     Size  Location     Type
 22107 ;;  highByte        1   14[BANK0 ] unsigned char 
 22108 ;;  lowByte         1   13[BANK0 ] unsigned char 
 22109 ;;  opcode          1   12[BANK0 ] unsigned char 
 22110 ;; Return value:  Size  Location     Type
 22111 ;;                  1    wreg      void 
 22112 ;; Registers used:
 22113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22114 ;; Tracked objects:
 22115 ;;		On entry : 0/0
 22116 ;;		On exit  : 0/0
 22117 ;;		Unchanged: 0/0
 22118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22119 ;;      Params:         0       2       0       0       0       0       0       0       0
 22120 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22121 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22122 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22123 ;;Total ram usage:        5 bytes
 22124 ;; Hardware stack levels used:    1
 22125 ;; Hardware stack levels required when called:    6
 22126 ;; This function calls:
 22127 ;;		_enc424j600_writeSPI
 22128 ;; This function is called by:
 22129 ;;		_ethernetController_getSourceMACAddress
 22130 ;;		_ethernetController_getEtherTypeField
 22131 ;;		_ethernetController_getRSV
 22132 ;;		_ethernetController_updateNextPacketPointer
 22133 ;;		_ethernetController_streamFromRXBuffer
 22134 ;;		_ethernetController_getDestinationMACAddress
 22135 ;; This function uses a non-reentrant model
 22136 ;;
 22137                           
 22138                           	psect	text89
 22139  005210                     __ptext89:
 22140                           	opt stack 0
 22141  005210                     _enc424j600_setERXDATAReadPointer:
 22142                           	opt stack 19
 22143                           
 22144                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 22145                           
 22146                           ; BSR set to: 0
 22147                           ;incstack = 0
 22148  005210  0E64               	movlw	100
 22149  005212  0100               	movlb	0	; () banked
 22150  005214  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 22151                           
 22152                           ; BSR set to: 0
 22153                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 22154  005216  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 22155                           
 22156                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 22157  00521A  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 22158  00521C  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 22159                           
 22160                           ; BSR set to: 0
 22161                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 22162  00521E  9881               	bcf	3969,4,c	;volatile
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 22166  005220  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 22167  005222  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22168  005224  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 22169  005226  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22170  005228  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 22171                           
 22172                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 22173  00522C  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 22174  00522E  0100               	movlb	0	; () banked
 22175  005230  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22176  005232  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 22177  005234  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22178  005236  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 22179                           
 22180                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 22181  00523A  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 22182  00523C  0100               	movlb	0	; () banked
 22183  00523E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22184  005240  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 22185  005242  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22186  005244  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 22187                           
 22188                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 22189  005248  8881               	bsf	3969,4,c	;volatile
 22190  00524A  0012               	return		;funcret
 22191  00524C                     __end_of_enc424j600_setERXDATAReadPointer:
 22192                           	opt stack 0
 22193                           tblptru	equ	0xFF8
 22194                           tblptrh	equ	0xFF7
 22195                           tblptrl	equ	0xFF6
 22196                           tablat	equ	0xFF5
 22197                           prodh	equ	0xFF4
 22198                           prodl	equ	0xFF3
 22199                           intcon	equ	0xFF2
 22200                           intcon3	equ	0xFF0
 22201                           indf0	equ	0xFEF
 22202                           postinc0	equ	0xFEE
 22203                           plusw0	equ	0xFEB
 22204                           fsr0h	equ	0xFEA
 22205                           fsr0l	equ	0xFE9
 22206                           wreg	equ	0xFE8
 22207                           indf1	equ	0xFE7
 22208                           postinc1	equ	0xFE6
 22209                           postdec1	equ	0xFE5
 22210                           plusw1	equ	0xFE3
 22211                           fsr1h	equ	0xFE2
 22212                           fsr1l	equ	0xFE1
 22213                           indf2	equ	0xFDF
 22214                           postinc2	equ	0xFDE
 22215                           postdec2	equ	0xFDD
 22216                           plusw2	equ	0xFDB
 22217                           fsr2h	equ	0xFDA
 22218                           fsr2l	equ	0xFD9
 22219                           status	equ	0xFD8
 22220                           
 22221 ;; *************** function _arp_checkForEntry *****************
 22222 ;; Defined at:
 22223 ;;		line 453 in file "src/stack/protocols/arp.c"
 22224 ;; Parameters:    Size  Location     Type
 22225 ;;  ip              4    7[BANK0 ] struct ipv4_address
 22226 ;;  index           2   11[BANK0 ] PTR unsigned char 
 22227 ;;		 -> ipv4_sendFrame@index(1), arp_gratuitous@index(1), arp_probe@index(1), 
 22228 ;; Auto vars:     Size  Location     Type
 22229 ;;  i               1   21[BANK0 ] unsigned char 
 22230 ;; Return value:  Size  Location     Type
 22231 ;;                  1    wreg      unsigned char 
 22232 ;; Registers used:
 22233 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22234 ;; Tracked objects:
 22235 ;;		On entry : 0/0
 22236 ;;		On exit  : 0/0
 22237 ;;		Unchanged: 0/0
 22238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22239 ;;      Params:         0       6       0       0       0       0       0       0       0
 22240 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22241 ;;      Temps:          0       8       0       0       0       0       0       0       0
 22242 ;;      Totals:         0      15       0       0       0       0       0       0       0
 22243 ;;Total ram usage:       15 bytes
 22244 ;; Hardware stack levels used:    1
 22245 ;; Hardware stack levels required when called:    5
 22246 ;; This function calls:
 22247 ;;		_getMillis
 22248 ;;		_ipv4_cmp
 22249 ;; This function is called by:
 22250 ;;		_arp_probe
 22251 ;;		_arp_gratuitous
 22252 ;;		_ipv4_sendFrame
 22253 ;; This function uses a non-reentrant model
 22254 ;;
 22255                           
 22256                           	psect	text90
 22257  004128                     __ptext90:
 22258                           	opt stack 0
 22259  004128                     _arp_checkForEntry:
 22260                           	opt stack 23
 22261                           
 22262                           ;arp.c: 454: for (uint8_t i = 0; i < 8u; i++) {
 22263                           
 22264                           ;incstack = 0
 22265  004128  0E00               	movlw	0
 22266  00412A  0100               	movlb	0	; () banked
 22267  00412C  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 22268  00412E                     l9435:
 22269                           
 22270                           ; BSR set to: 0
 22271  00412E  0E07               	movlw	7
 22272  004130  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 22273  004132  D001               	goto	l1051
 22274  004134  D050               	goto	u11220
 22275  004136                     l1051:
 22276                           
 22277                           ; BSR set to: 0
 22278                           ;arp.c: 455: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 22279                           
 22280                           ; BSR set to: 0
 22281  004136  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22282  004138  0D0E               	mullw	14
 22283  00413A  0E00               	movlw	low _arp_table
 22284  00413C  24F3               	addwf	prodl,w,c
 22285  00413E  6F60               	movwf	ipv4_cmp@a& (0+255),b
 22286  004140  0E03               	movlw	high _arp_table
 22287  004142  20F4               	addwfc	prodh,w,c
 22288  004144  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 22289  004146  0E67               	movlw	low arp_checkForEntry@ip
 22290  004148  6F62               	movwf	ipv4_cmp@b& (0+255),b
 22291  00414A  0E00               	movlw	high arp_checkForEntry@ip
 22292  00414C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 22293  00414E  ECAB  F028         	call	_ipv4_cmp	;wreg free
 22294  004152  0100               	movlb	0	; () banked
 22295  004154  A0D8               	btfss	status,0,c
 22296  004156  D03D               	goto	l1054
 22297                           
 22298                           ; BSR set to: 0
 22299                           ;arp.c: 456: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 22300  004158  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 22301  00415A  0D0E               	mullw	14
 22302  00415C  0E0A               	movlw	10
 22303  00415E  26F3               	addwf	prodl,f,c
 22304  004160  0E00               	movlw	0
 22305  004162  22F4               	addwfc	prodh,f,c
 22306  004164  0E00               	movlw	low _arp_table
 22307  004166  24F3               	addwf	prodl,w,c
 22308  004168  6ED9               	movwf	fsr2l,c
 22309  00416A  0E03               	movlw	high _arp_table
 22310  00416C  20F4               	addwfc	prodh,w,c
 22311  00416E  6EDA               	movwf	fsr2h,c
 22312  004170  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 22313  004174  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 22314  004178  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 22315  00417C  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 22316  004180  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 22317  004182  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 22318  004184  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 22319  004186  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 22320  004188  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 22321  00418A  0E00               	movlw	0
 22322  00418C  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 22323  00418E  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 22324  004190  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 22325  004192  EC8B  F02B         	call	_getMillis	;wreg free
 22326  004196  0100               	movlb	0	; () banked
 22327  004198  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 22328  00419A  2560               	addwf	?_getMillis& (0+255),w,b
 22329  00419C  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 22330  00419E  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 22331  0041A0  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 22332  0041A2  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 22333  0041A4  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 22334  0041A6  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 22335  0041A8  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 22336  0041AA  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 22337  0041AC  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 22338  0041AE  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 22339  0041B0  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 22340  0041B2  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 22341  0041B4  E10E               	bnz	l9449
 22342  0041B6  0E30               	movlw	48
 22343  0041B8  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 22344  0041BA  0E75               	movlw	117
 22345  0041BC  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 22346  0041BE  B0D8               	btfsc	status,0,c
 22347  0041C0  D008               	goto	l1054
 22348                           
 22349                           ; BSR set to: 0
 22350                           ;arp.c: 458: *index = i;
 22351  0041C2  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 22352  0041C6  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 22353  0041CA  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 22354                           
 22355                           ; BSR set to: 0
 22356                           ;arp.c: 459: return 1;
 22357  0041CE  0E01               	movlw	1
 22358                           
 22359                           ; BSR set to: 0
 22360  0041D0  0012               	return	
 22361  0041D2                     l1054:
 22362  0041D2                     l9449:
 22363                           
 22364                           ; BSR set to: 0
 22365  0041D2  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 22366  0041D4  D7AC               	goto	l9435
 22367  0041D6                     u11220:
 22368                           
 22369                           ; BSR set to: 0
 22370                           ;arp.c: 460: }
 22371                           ;arp.c: 461: }
 22372                           ;arp.c: 462: }
 22373                           ;arp.c: 463: return 0;
 22374                           
 22375                           ; BSR set to: 0
 22376  0041D6  0E00               	movlw	0
 22377  0041D8  0012               	return	
 22378  0041DA                     __end_of_arp_checkForEntry:
 22379                           	opt stack 0
 22380                           tblptru	equ	0xFF8
 22381                           tblptrh	equ	0xFF7
 22382                           tblptrl	equ	0xFF6
 22383                           tablat	equ	0xFF5
 22384                           prodh	equ	0xFF4
 22385                           prodl	equ	0xFF3
 22386                           intcon	equ	0xFF2
 22387                           intcon3	equ	0xFF0
 22388                           indf0	equ	0xFEF
 22389                           postinc0	equ	0xFEE
 22390                           plusw0	equ	0xFEB
 22391                           fsr0h	equ	0xFEA
 22392                           fsr0l	equ	0xFE9
 22393                           wreg	equ	0xFE8
 22394                           indf1	equ	0xFE7
 22395                           postinc1	equ	0xFE6
 22396                           postdec1	equ	0xFE5
 22397                           plusw1	equ	0xFE3
 22398                           fsr1h	equ	0xFE2
 22399                           fsr1l	equ	0xFE1
 22400                           indf2	equ	0xFDF
 22401                           postinc2	equ	0xFDE
 22402                           postdec2	equ	0xFDD
 22403                           plusw2	equ	0xFDB
 22404                           fsr2h	equ	0xFDA
 22405                           fsr2l	equ	0xFD9
 22406                           status	equ	0xFD8
 22407                           
 22408 ;; *************** function _ipv4_cmp *****************
 22409 ;; Defined at:
 22410 ;;		line 288 in file "src/stack/protocols/ipv4.c"
 22411 ;; Parameters:    Size  Location     Type
 22412 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 22413 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 22414 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 22415 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 22416 ;; Auto vars:     Size  Location     Type
 22417 ;;  i               1    6[BANK0 ] unsigned char 
 22418 ;; Return value:  Size  Location     Type
 22419 ;;		None               void
 22420 ;; Registers used:
 22421 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22422 ;; Tracked objects:
 22423 ;;		On entry : 0/0
 22424 ;;		On exit  : 0/0
 22425 ;;		Unchanged: 0/0
 22426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22427 ;;      Params:         0       4       0       0       0       0       0       0       0
 22428 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22429 ;;      Temps:          0       2       0       0       0       0       0       0       0
 22430 ;;      Totals:         0       7       0       0       0       0       0       0       0
 22431 ;;Total ram usage:        7 bytes
 22432 ;; Hardware stack levels used:    1
 22433 ;; Hardware stack levels required when called:    4
 22434 ;; This function calls:
 22435 ;;		Nothing
 22436 ;; This function is called by:
 22437 ;;		_arp_parseFromRXBuffer
 22438 ;;		_arp_sendReply
 22439 ;;		_arp_checkForEntry
 22440 ;; This function uses a non-reentrant model
 22441 ;;
 22442                           
 22443                           	psect	text91
 22444  005156                     __ptext91:
 22445                           	opt stack 0
 22446  005156                     _ipv4_cmp:
 22447                           	opt stack 23
 22448                           
 22449                           ;ipv4.c: 289: for (uint8_t i = 0; i < 4; i++) {
 22450                           
 22451                           ; BSR set to: 0
 22452                           ;incstack = 0
 22453  005156  0E00               	movlw	0
 22454  005158  0100               	movlb	0	; () banked
 22455  00515A  6F66               	movwf	ipv4_cmp@i& (0+255),b
 22456  00515C                     l9085:
 22457                           
 22458                           ; BSR set to: 0
 22459  00515C  0E03               	movlw	3
 22460  00515E  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 22461  005160  D001               	goto	l1188
 22462  005162  D018               	goto	u10210
 22463  005164                     l1188:
 22464                           
 22465                           ; BSR set to: 0
 22466                           ;ipv4.c: 290: if (a->address[i] != b->address[i])
 22467                           
 22468                           ; BSR set to: 0
 22469  005164  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22470  005166  0D01               	mullw	1
 22471  005168  50F3               	movf	prodl,w,c
 22472  00516A  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 22473  00516C  6ED9               	movwf	fsr2l,c
 22474  00516E  50F4               	movf	prodh,w,c
 22475  005170  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 22476  005172  6EDA               	movwf	fsr2h,c
 22477  005174  5166               	movf	ipv4_cmp@i& (0+255),w,b
 22478  005176  0D01               	mullw	1
 22479  005178  50F3               	movf	prodl,w,c
 22480  00517A  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 22481  00517C  6EE1               	movwf	fsr1l,c
 22482  00517E  50F4               	movf	prodh,w,c
 22483  005180  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 22484  005182  6EE2               	movwf	fsr1h,c
 22485  005184  50DE               	movf	postinc2,w,c
 22486  005186  18E6               	xorwf	postinc1,w,c
 22487  005188  B4D8               	btfsc	status,2,c
 22488  00518A  D002               	goto	l1190
 22489                           
 22490                           ; BSR set to: 0
 22491                           ;ipv4.c: 291: return 0;
 22492  00518C  90D8               	bcf	status,0,c
 22493                           
 22494                           ; BSR set to: 0
 22495  00518E  0012               	return	
 22496  005190                     l1190:
 22497                           
 22498                           ; BSR set to: 0
 22499                           
 22500                           ; BSR set to: 0
 22501  005190  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 22502  005192  D7E4               	goto	l9085
 22503  005194                     u10210:
 22504                           
 22505                           ; BSR set to: 0
 22506                           ;ipv4.c: 292: }
 22507                           ;ipv4.c: 293: return 1;
 22508                           
 22509                           ; BSR set to: 0
 22510  005194  80D8               	bsf	status,0,c
 22511  005196  0012               	return	
 22512  005198                     __end_of_ipv4_cmp:
 22513                           	opt stack 0
 22514                           tblptru	equ	0xFF8
 22515                           tblptrh	equ	0xFF7
 22516                           tblptrl	equ	0xFF6
 22517                           tablat	equ	0xFF5
 22518                           prodh	equ	0xFF4
 22519                           prodl	equ	0xFF3
 22520                           intcon	equ	0xFF2
 22521                           intcon3	equ	0xFF0
 22522                           indf0	equ	0xFEF
 22523                           postinc0	equ	0xFEE
 22524                           plusw0	equ	0xFEB
 22525                           fsr0h	equ	0xFEA
 22526                           fsr0l	equ	0xFE9
 22527                           wreg	equ	0xFE8
 22528                           indf1	equ	0xFE7
 22529                           postinc1	equ	0xFE6
 22530                           postdec1	equ	0xFE5
 22531                           plusw1	equ	0xFE3
 22532                           fsr1h	equ	0xFE2
 22533                           fsr1l	equ	0xFE1
 22534                           indf2	equ	0xFDF
 22535                           postinc2	equ	0xFDE
 22536                           postdec2	equ	0xFDD
 22537                           plusw2	equ	0xFDB
 22538                           fsr2h	equ	0xFDA
 22539                           fsr2l	equ	0xFD9
 22540                           status	equ	0xFD8
 22541                           
 22542 ;; *************** function _getMillis *****************
 22543 ;; Defined at:
 22544 ;;		line 34 in file "src/stack/time.c"
 22545 ;; Parameters:    Size  Location     Type
 22546 ;;		None
 22547 ;; Auto vars:     Size  Location     Type
 22548 ;;		None
 22549 ;; Return value:  Size  Location     Type
 22550 ;;                  4    0[BANK0 ] unsigned long 
 22551 ;; Registers used:
 22552 ;;		None
 22553 ;; Tracked objects:
 22554 ;;		On entry : 0/0
 22555 ;;		On exit  : 0/0
 22556 ;;		Unchanged: 0/0
 22557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22558 ;;      Params:         0       4       0       0       0       0       0       0       0
 22559 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22560 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22561 ;;      Totals:         0       4       0       0       0       0       0       0       0
 22562 ;;Total ram usage:        4 bytes
 22563 ;; Hardware stack levels used:    1
 22564 ;; Hardware stack levels required when called:    4
 22565 ;; This function calls:
 22566 ;;		Nothing
 22567 ;; This function is called by:
 22568 ;;		_ethernet_rxGetNewFrame
 22569 ;;		_arp_handleNewPacket
 22570 ;;		_arp_probe
 22571 ;;		_arp_gratuitous
 22572 ;;		_arp_checkForEntry
 22573 ;;		_ipv4_sendFrame
 22574 ;; This function uses a non-reentrant model
 22575 ;;
 22576                           
 22577                           	psect	text92
 22578  005716                     __ptext92:
 22579                           	opt stack 0
 22580  005716                     _getMillis:
 22581                           	opt stack 24
 22582                           
 22583                           ;time.c: 35: return time;
 22584                           
 22585                           ; BSR set to: 0
 22586                           ;incstack = 0
 22587  005716  C029  F060         	movff	_time,?_getMillis	;volatile
 22588  00571A  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 22589  00571E  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 22590  005722  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 22591  005726  0012               	return		;funcret
 22592  005728                     __end_of_getMillis:
 22593                           	opt stack 0
 22594                           tblptru	equ	0xFF8
 22595                           tblptrh	equ	0xFF7
 22596                           tblptrl	equ	0xFF6
 22597                           tablat	equ	0xFF5
 22598                           prodh	equ	0xFF4
 22599                           prodl	equ	0xFF3
 22600                           intcon	equ	0xFF2
 22601                           intcon3	equ	0xFF0
 22602                           indf0	equ	0xFEF
 22603                           postinc0	equ	0xFEE
 22604                           plusw0	equ	0xFEB
 22605                           fsr0h	equ	0xFEA
 22606                           fsr0l	equ	0xFE9
 22607                           wreg	equ	0xFE8
 22608                           indf1	equ	0xFE7
 22609                           postinc1	equ	0xFE6
 22610                           postdec1	equ	0xFE5
 22611                           plusw1	equ	0xFE3
 22612                           fsr1h	equ	0xFE2
 22613                           fsr1l	equ	0xFE1
 22614                           indf2	equ	0xFDF
 22615                           postinc2	equ	0xFDE
 22616                           postdec2	equ	0xFDD
 22617                           plusw2	equ	0xFDB
 22618                           fsr2h	equ	0xFDA
 22619                           fsr2l	equ	0xFD9
 22620                           status	equ	0xFD8
 22621                           
 22622 ;; *************** function _UARTTransmitText *****************
 22623 ;; Defined at:
 22624 ;;		line 36 in file "src/system/uart.c"
 22625 ;; Parameters:    Size  Location     Type
 22626 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 22627 ;;		 -> STR_113(27), STR_112(33), STR_111(19), STR_110(2), 
 22628 ;;		 -> STR_109(3), STR_108(3), STR_107(3), STR_106(3), 
 22629 ;;		 -> STR_105(5), STR_104(2), STR_103(2), STR_102(7), 
 22630 ;;		 -> STR_101(11), STR_100(3), STR_99(27), STR_98(3), 
 22631 ;;		 -> STR_97(8), STR_96(9), STR_95(3), STR_94(39), 
 22632 ;;		 -> STR_93(3), STR_92(3), STR_91(30), STR_90(33), 
 22633 ;;		 -> STR_89(39), STR_88(35), STR_87(58), STR_86(36), 
 22634 ;;		 -> STR_85(34), STR_84(3), STR_83(43), STR_82(4), 
 22635 ;;		 -> STR_81(12), STR_80(26), STR_79(2), STR_78(3), 
 22636 ;;		 -> STR_77(16), STR_76(15), STR_75(10), STR_74(2), 
 22637 ;;		 -> STR_73(3), STR_72(5), STR_71(3), STR_70(2), 
 22638 ;;		 -> STR_69(39), arpEntryToString@string(50), ipAdressToString@address(16), STR_68(17), 
 22639 ;;		 -> STR_67(4), STR_66(4), STR_65(5), STR_64(18), 
 22640 ;;		 -> STR_63(4), STR_62(5), macToString@address(18), hexToString@number(10), 
 22641 ;;		 -> intToString@number(10), STR_61(5), STR_60(9), STR_59(30), 
 22642 ;;		 -> STR_58(34), STR_57(55), STR_56(37), STR_55(15), 
 22643 ;;		 -> STR_54(14), STR_53(19), STR_52(30), STR_51(17), 
 22644 ;;		 -> STR_50(8), STR_49(29), STR_48(29), STR_47(20), 
 22645 ;;		 -> STR_46(19), STR_45(19), STR_44(13), STR_43(4), 
 22646 ;;		 -> STR_42(5), STR_41(32), STR_40(3), STR_39(15), 
 22647 ;;		 -> STR_38(51), STR_37(4), STR_36(23), STR_35(12), 
 22648 ;;		 -> STR_34(4), STR_33(9), STR_32(2), STR_31(12), 
 22649 ;;		 -> STR_30(24), STR_29(51), STR_28(49), STR_27(51), 
 22650 ;;		 -> STR_26(2), STR_25(3), STR_24(37), STR_23(38), 
 22651 ;;		 -> STR_22(40), STR_21(2), STR_20(3), STR_19(3), 
 22652 ;;		 -> STR_18(3), STR_17(5), STR_16(2), STR_15(3), 
 22653 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(2), 
 22654 ;;		 -> STR_10(20), STR_9(7), STR_8(6), STR_7(2), 
 22655 ;;		 -> STR_6(2), STR_5(16), STR_4(10), STR_3(12), 
 22656 ;;		 -> STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 22657 ;; Auto vars:     Size  Location     Type
 22658 ;;		None
 22659 ;; Return value:  Size  Location     Type
 22660 ;;                  1    wreg      void 
 22661 ;; Registers used:
 22662 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 22663 ;; Tracked objects:
 22664 ;;		On entry : 0/0
 22665 ;;		On exit  : 0/0
 22666 ;;		Unchanged: 0/0
 22667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22668 ;;      Params:         0       2       0       0       0       0       0       0       0
 22669 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22670 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22671 ;;      Totals:         0       2       0       0       0       0       0       0       0
 22672 ;;Total ram usage:        2 bytes
 22673 ;; Hardware stack levels used:    1
 22674 ;; Hardware stack levels required when called:    4
 22675 ;; This function calls:
 22676 ;;		Nothing
 22677 ;; This function is called by:
 22678 ;;		_ethernet_rxGetNewFrame
 22679 ;;		_handleStackBackgroundTasks
 22680 ;;		_main
 22681 ;;		_printEthernetState
 22682 ;;		_printErrorMessage
 22683 ;;		_UARTTransmitInt
 22684 ;;		_arp_handleNewPacket
 22685 ;;		_arp_sendReply
 22686 ;;		_arp_probe
 22687 ;;		_arp_gratuitous
 22688 ;;		_arp_background
 22689 ;;		_arp_setNewEntry
 22690 ;;		_arp_init
 22691 ;;		_ipv4_sendFrame
 22692 ;;		_ipv4_checkHeaderChecksum
 22693 ;;		_ipv4_handleNewPacket
 22694 ;;		_ipv4_background
 22695 ;;		_printArpTable
 22696 ;; This function uses a non-reentrant model
 22697 ;;
 22698                           
 22699                           	psect	text93
 22700  004E0C                     __ptext93:
 22701                           	opt stack 0
 22702  004E0C                     _UARTTransmitText:
 22703                           	opt stack 23
 22704                           
 22705                           ;uart.c: 37: while (*str) {
 22706                           
 22707                           ;incstack = 0
 22708  004E0C  D016               	goto	u9860
 22709  004E0E                     
 22710                           ;uart.c: 38: TXREG1 = *str++;
 22711  004E0E  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22712  004E12  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22713  004E16  6AF8               	clrf	tblptru,c
 22714  004E18  0E07               	movlw	(high __ramtop+-1)
 22715  004E1A  64F7               	cpfsgt	tblptrh,c
 22716  004E1C  D003               	bra	u9857
 22717  004E1E  0008               	tblrd		*
 22718  004E20  50F5               	movf	tablat,w,c
 22719  004E22  D005               	bra	u9850
 22720  004E24                     u9857:
 22721  004E24  CFF6 FFE9          	movff	tblptrl,fsr0l
 22722  004E28  CFF7 FFEA          	movff	tblptrh,fsr0h
 22723  004E2C  50EF               	movf	indf0,w,c
 22724  004E2E                     u9850:
 22725  004E2E  6EAD               	movwf	4013,c	;volatile
 22726  004E30  0100               	movlb	0	; () banked
 22727  004E32  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 22728  004E34  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 22729  004E36                     
 22730                           ; BSR set to: 0
 22731  004E36  A2AC               	btfss	4012,1,c	;volatile
 22732  004E38  D7FE               	goto	l787
 22733  004E3A                     u9860:
 22734  004E3A  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 22735  004E3E  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 22736  004E42  6AF8               	clrf	tblptru,c
 22737  004E44  0E07               	movlw	(high __ramtop+-1)
 22738  004E46  64F7               	cpfsgt	tblptrh,c
 22739  004E48  D003               	bra	u9877
 22740  004E4A  0008               	tblrd		*
 22741  004E4C  50F5               	movf	tablat,w,c
 22742  004E4E  D005               	bra	u9870
 22743  004E50                     u9877:
 22744  004E50  CFF6 FFE9          	movff	tblptrl,fsr0l
 22745  004E54  CFF7 FFEA          	movff	tblptrh,fsr0h
 22746  004E58  50EF               	movf	indf0,w,c
 22747  004E5A                     u9870:
 22748  004E5A  0900               	iorlw	0
 22749  004E5C  B4D8               	btfsc	status,2,c
 22750  004E5E  0012               	return	
 22751  004E60  D7D6               	goto	l785
 22752  004E62                     __end_of_UARTTransmitText:
 22753                           	opt stack 0
 22754                           tblptru	equ	0xFF8
 22755                           tblptrh	equ	0xFF7
 22756                           tblptrl	equ	0xFF6
 22757                           tablat	equ	0xFF5
 22758                           prodh	equ	0xFF4
 22759                           prodl	equ	0xFF3
 22760                           intcon	equ	0xFF2
 22761                           intcon3	equ	0xFF0
 22762                           indf0	equ	0xFEF
 22763                           postinc0	equ	0xFEE
 22764                           plusw0	equ	0xFEB
 22765                           fsr0h	equ	0xFEA
 22766                           fsr0l	equ	0xFE9
 22767                           wreg	equ	0xFE8
 22768                           indf1	equ	0xFE7
 22769                           postinc1	equ	0xFE6
 22770                           postdec1	equ	0xFE5
 22771                           plusw1	equ	0xFE3
 22772                           fsr1h	equ	0xFE2
 22773                           fsr1l	equ	0xFE1
 22774                           indf2	equ	0xFDF
 22775                           postinc2	equ	0xFDE
 22776                           postdec2	equ	0xFDD
 22777                           plusw2	equ	0xFDB
 22778                           fsr2h	equ	0xFDA
 22779                           fsr2l	equ	0xFD9
 22780                           status	equ	0xFD8
 22781                           
 22782 ;; *************** function _ethernetController_init *****************
 22783 ;; Defined at:
 22784 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 22785 ;; Parameters:    Size  Location     Type
 22786 ;;		None
 22787 ;; Auto vars:     Size  Location     Type
 22788 ;;  err             3   29[BANK0 ] struct error
 22789 ;; Return value:  Size  Location     Type
 22790 ;;                  3   26[BANK0 ] struct error
 22791 ;; Registers used:
 22792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22793 ;; Tracked objects:
 22794 ;;		On entry : 0/0
 22795 ;;		On exit  : 0/0
 22796 ;;		Unchanged: 0/0
 22797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22798 ;;      Params:         0       3       0       0       0       0       0       0       0
 22799 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22800 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22801 ;;      Totals:         0       6       0       0       0       0       0       0       0
 22802 ;;Total ram usage:        6 bytes
 22803 ;; Hardware stack levels used:    1
 22804 ;; Hardware stack levels required when called:    8
 22805 ;; This function calls:
 22806 ;;		_enc424j600_enableAutoMACInsertion
 22807 ;;		_enc424j600_enableReception
 22808 ;;		_enc424j600_initSPI
 22809 ;;		_enc424j600_setNextPacketPointer
 22810 ;;		_enc424j600_setRXBufferStartAddress
 22811 ;;		_enc424j600_setRXTailPointer
 22812 ;;		_ethernetController_checkDeviceId
 22813 ;;		_ethernetController_softReset
 22814 ;; This function is called by:
 22815 ;;		_main
 22816 ;; This function uses a non-reentrant model
 22817 ;;
 22818                           
 22819                           	psect	text94
 22820  0043C8                     __ptext94:
 22821                           	opt stack 0
 22822  0043C8                     _ethernetController_init:
 22823                           	opt stack 22
 22824                           
 22825                           ;ENC424J600.c: 35: error_t err;
 22826                           ;ENC424J600.c: 36: enc424j600_initSPI();
 22827                           
 22828                           ;incstack = 0
 22829  0043C8  EC28  F02B         	call	_enc424j600_initSPI	;wreg free
 22830                           
 22831                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 22832  0043CC  EC05  F01D         	call	_ethernetController_softReset	;wreg free
 22833  0043D0  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 22834  0043D4  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 22835  0043D8  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 22836                           
 22837                           ;ENC424J600.c: 38: if (err.code != (uint16_t)0) {
 22838  0043DC  0100               	movlb	0	; () banked
 22839  0043DE  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22840  0043E0  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22841  0043E2  B4D8               	btfsc	status,2,c
 22842  0043E4  D007               	goto	l75
 22843                           
 22844                           ; BSR set to: 0
 22845                           ;ENC424J600.c: 39: return err;
 22846  0043E6  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22847  0043EA  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22848  0043EE  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22849  0043F2  0012               	return	
 22850  0043F4                     l75:
 22851                           
 22852                           ; BSR set to: 0
 22853                           ;ENC424J600.c: 40: }
 22854                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 22855                           
 22856                           ; BSR set to: 0
 22857  0043F4  ECD5  F027         	call	_ethernetController_checkDeviceId	;wreg free
 22858  0043F8  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 22859  0043FC  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 22860  004400  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 22861                           
 22862                           ;ENC424J600.c: 42: if (err.code != (uint16_t)0) {
 22863  004404  0100               	movlb	0	; () banked
 22864  004406  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 22865  004408  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 22866  00440A  B4D8               	btfsc	status,2,c
 22867  00440C  D007               	goto	l77
 22868                           
 22869                           ; BSR set to: 0
 22870                           ;ENC424J600.c: 43: return err;
 22871  00440E  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22872  004412  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22873  004416  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22874  00441A  0012               	return	
 22875  00441C                     l77:
 22876                           
 22877                           ; BSR set to: 0
 22878                           ;ENC424J600.c: 44: }
 22879                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 22880                           
 22881                           ; BSR set to: 0
 22882  00441C  0E30               	movlw	48
 22883  00441E  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 22884  004420  0E00               	movlw	0
 22885  004422  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 22886  004424  EC33  F02A         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 22887                           
 22888                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 22889  004428  0E30               	movlw	48
 22890  00442A  0100               	movlb	0	; () banked
 22891  00442C  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 22892  00442E  0E00               	movlw	0
 22893  004430  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 22894  004432  ECC8  F02B         	call	_enc424j600_setNextPacketPointer	;wreg free
 22895                           
 22896                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 22897  004436  0E5F               	movlw	95
 22898  004438  0100               	movlb	0	; () banked
 22899  00443A  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 22900  00443C  0EFE               	movlw	254
 22901  00443E  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 22902  004440  EC1E  F02A         	call	_enc424j600_setRXTailPointer	;wreg free
 22903                           
 22904                           ;ENC424J600.c: 67: enc424j600_enableReception();
 22905  004444  ECCD  F02B         	call	_enc424j600_enableReception	;wreg free
 22906                           
 22907                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 22908  004448  EC84  F02A         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 22909                           
 22910                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 22911  00444C  0E01               	movlw	1
 22912  00444E  0100               	movlb	0	; () banked
 22913  004450  6F7D               	movwf	ethernetController_init@err& (0+255),b
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 22917  004452  0E00               	movlw	0
 22918  004454  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 22919  004456  0E00               	movlw	0
 22920  004458  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 22921                           
 22922                           ; BSR set to: 0
 22923                           ;ENC424J600.c: 72: return err;
 22924  00445A  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 22925  00445E  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 22926  004462  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 22927  004466  0012               	return	
 22928  004468                     __end_of_ethernetController_init:
 22929                           	opt stack 0
 22930                           tblptru	equ	0xFF8
 22931                           tblptrh	equ	0xFF7
 22932                           tblptrl	equ	0xFF6
 22933                           tablat	equ	0xFF5
 22934                           prodh	equ	0xFF4
 22935                           prodl	equ	0xFF3
 22936                           intcon	equ	0xFF2
 22937                           intcon3	equ	0xFF0
 22938                           indf0	equ	0xFEF
 22939                           postinc0	equ	0xFEE
 22940                           plusw0	equ	0xFEB
 22941                           fsr0h	equ	0xFEA
 22942                           fsr0l	equ	0xFE9
 22943                           wreg	equ	0xFE8
 22944                           indf1	equ	0xFE7
 22945                           postinc1	equ	0xFE6
 22946                           postdec1	equ	0xFE5
 22947                           plusw1	equ	0xFE3
 22948                           fsr1h	equ	0xFE2
 22949                           fsr1l	equ	0xFE1
 22950                           indf2	equ	0xFDF
 22951                           postinc2	equ	0xFDE
 22952                           postdec2	equ	0xFDD
 22953                           plusw2	equ	0xFDB
 22954                           fsr2h	equ	0xFDA
 22955                           fsr2l	equ	0xFD9
 22956                           status	equ	0xFD8
 22957                           
 22958 ;; *************** function _ethernetController_softReset *****************
 22959 ;; Defined at:
 22960 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 22961 ;; Parameters:    Size  Location     Type
 22962 ;;		None
 22963 ;; Auto vars:     Size  Location     Type
 22964 ;;  err             3   23[BANK0 ] struct error
 22965 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 22966 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 22967 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 22968 ;; Return value:  Size  Location     Type
 22969 ;;                  3   14[BANK0 ] struct error
 22970 ;; Registers used:
 22971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22972 ;; Tracked objects:
 22973 ;;		On entry : 0/0
 22974 ;;		On exit  : 0/0
 22975 ;;		Unchanged: 0/0
 22976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22977 ;;      Params:         0       3       0       0       0       0       0       0       0
 22978 ;;      Locals:         0       8       0       0       0       0       0       0       0
 22979 ;;      Temps:          0       1       0       0       0       0       0       0       0
 22980 ;;      Totals:         0      12       0       0       0       0       0       0       0
 22981 ;;Total ram usage:       12 bytes
 22982 ;; Hardware stack levels used:    1
 22983 ;; Hardware stack levels required when called:    7
 22984 ;; This function calls:
 22985 ;;		_enc424j600_readControlRegisterUnbanked
 22986 ;;		_enc424j600_writeControlRegisterUnbanked
 22987 ;;		_enc424j600_writeSingleByte
 22988 ;; This function is called by:
 22989 ;;		_ethernetController_init
 22990 ;; This function uses a non-reentrant model
 22991 ;;
 22992                           
 22993                           	psect	text95
 22994  003A0A                     __ptext95:
 22995                           	opt stack 0
 22996  003A0A                     _ethernetController_softReset:
 22997                           	opt stack 22
 22998                           
 22999                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 23000                           
 23001                           ; BSR set to: 0
 23002                           ;incstack = 0
 23003  003A0A  0E00               	movlw	0
 23004  003A0C  0100               	movlb	0	; () banked
 23005  003A0E  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 23009  003A10  C04D  F073         	movff	ethernetController_softReset@F5986,ethernetController_softReset@dataToSend
 23010  003A14  C04E  F074         	movff	ethernetController_softReset@F5986+1,ethernetController_softReset@dataToSend+1
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 23014  003A18  C040  F075         	movff	ethernetController_softReset@F5988,ethernetController_softReset@receivedData
 23015  003A1C  C041  F076         	movff	ethernetController_softReset@F5988+1,ethernetController_softReset@receivedData+1
 23016                           
 23017                           ;ENC424J600.c: 96: error_t err;
 23018                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23019  003A20  0E01               	movlw	1
 23020  003A22  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 23021                           
 23022                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 23023  003A24  0E00               	movlw	0
 23024  003A26  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23025  003A28  0E00               	movlw	0
 23026  003A2A  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23027                           
 23028                           ; BSR set to: 0
 23029                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 23030  003A2C  0E05               	movlw	5
 23031  003A2E  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 23032  003A30  D05F               	goto	l84
 23033                           
 23034                           ; BSR set to: 0
 23035                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 23036  003A32  0E73               	movlw	low ethernetController_softReset@dataToSend
 23037  003A34  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23038  003A36  0E00               	movlw	high ethernetController_softReset@dataToSend
 23039  003A38  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23040  003A3A  0E16               	movlw	22
 23041  003A3C  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23042                           
 23043                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 23044  003A40  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 23045  003A42  0100               	movlb	0	; () banked
 23046  003A44  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23047  003A46  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 23048  003A48  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23049  003A4A  0E17               	movlw	23
 23050  003A4C  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23051                           
 23052                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23053  003A50  0E75               	movlw	low ethernetController_softReset@receivedData
 23054  003A52  0100               	movlb	0	; () banked
 23055  003A54  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23056  003A56  0E00               	movlw	high ethernetController_softReset@receivedData
 23057  003A58  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23058  003A5A  0E16               	movlw	22
 23059  003A5C  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23060                           
 23061                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23062  003A60  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23063  003A62  0100               	movlb	0	; () banked
 23064  003A64  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23065  003A66  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23066  003A68  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23067  003A6A  0E17               	movlw	23
 23068  003A6C  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23069                           
 23070                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 23071  003A70  0100               	movlb	0	; () banked
 23072  003A72  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 23073  003A74  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 23074  003A76  A4D8               	btfss	status,2,c
 23075  003A78  D038               	goto	l88
 23076                           
 23077                           ; BSR set to: 0
 23078  003A7A  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 23079  003A7C  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23080  003A7E  A4D8               	btfss	status,2,c
 23081  003A80  D034               	goto	l88
 23082                           
 23083                           ; BSR set to: 0
 23084                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 23085  003A82  0ECA               	movlw	202
 23086  003A84  EC50  F02B         	call	_enc424j600_writeSingleByte
 23087                           
 23088                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 23089  003A88  0E42               	movlw	66
 23090  003A8A                     u12847:
 23091  003A8A  2EE8               	decfsz	wreg,f,c
 23092  003A8C  D7FE               	bra	u12847
 23093  003A8E  D000               	nop2	
 23094                           
 23095                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 23096  003A90  0E75               	movlw	low ethernetController_softReset@receivedData
 23097  003A92  0100               	movlb	0	; () banked
 23098  003A94  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23099  003A96  0E00               	movlw	high ethernetController_softReset@receivedData
 23100  003A98  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23101  003A9A  0E16               	movlw	22
 23102  003A9C  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23103                           
 23104                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 23105  003AA0  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 23106  003AA2  0100               	movlb	0	; () banked
 23107  003AA4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23108  003AA6  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 23109  003AA8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23110  003AAA  0E17               	movlw	23
 23111  003AAC  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23112                           
 23113                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 23114  003AB0  0100               	movlb	0	; () banked
 23115  003AB2  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 23116  003AB4  A4D8               	btfss	status,2,c
 23117  003AB6  D00D               	goto	l86
 23118                           
 23119                           ; BSR set to: 0
 23120  003AB8  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 23121  003ABA  A4D8               	btfss	status,2,c
 23122  003ABC  D00A               	goto	l86
 23123                           
 23124                           ; BSR set to: 0
 23125                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 23126  003ABE  0E03               	movlw	3
 23127  003AC0  0100               	movlb	0	; () banked
 23128  003AC2  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 23129  003AC4  0EA7               	movlw	167
 23130  003AC6                     u12857:
 23131  003AC6  2EE8               	decfsz	wreg,f,c
 23132  003AC8  D7FE               	bra	u12857
 23133  003ACA  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 23134  003ACC  D7FC               	bra	u12857
 23135  003ACE  D000               	nop2	
 23136  003AD0  D005               	goto	l9931
 23137  003AD2                     l86:
 23138                           
 23139                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23140  003AD2  0E01               	movlw	1
 23141  003AD4  0100               	movlb	0	; () banked
 23142  003AD6  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23143  003AD8  0E2E               	movlw	46
 23144  003ADA  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23145  003ADC                     l9931:
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;ENC424J600.c: 121: return err;
 23149  003ADC  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23150  003AE0  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23151  003AE4  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23152                           
 23153                           ; BSR set to: 0
 23154  003AE8  0012               	return	
 23155  003AEA                     l88:
 23156                           
 23157                           ;ENC424J600.c: 122: }
 23158                           ;ENC424J600.c: 123: }
 23159                           ;ENC424J600.c: 124: comFailCount++;
 23160                           
 23161                           ; BSR set to: 0
 23162                           
 23163                           ; BSR set to: 0
 23164  003AEA  0100               	movlb	0	; () banked
 23165  003AEC  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 23166                           
 23167                           ;ENC424J600.c: 125: } else {
 23168  003AEE  D00B               	goto	l89
 23169  003AF0                     l84:
 23170                           
 23171                           ; BSR set to: 0
 23172                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 23173                           
 23174                           ; BSR set to: 0
 23175  003AF0  0E01               	movlw	1
 23176  003AF2  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 23177  003AF4  0E2E               	movlw	46
 23178  003AF6  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 23179                           
 23180                           ; BSR set to: 0
 23181                           ;ENC424J600.c: 127: return err;
 23182  003AF8  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23183  003AFC  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23184  003B00  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23185                           
 23186                           ; BSR set to: 0
 23187  003B04  0012               	return	
 23188  003B06                     l89:
 23189                           
 23190                           ; BSR set to: 0
 23191                           ;ENC424J600.c: 128: }
 23192                           ;ENC424J600.c: 129: return err;
 23193  003B06  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 23194  003B0A  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 23195  003B0E  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 23196  003B12  0012               	return		;funcret
 23197  003B14                     __end_of_ethernetController_softReset:
 23198                           	opt stack 0
 23199                           tblptru	equ	0xFF8
 23200                           tblptrh	equ	0xFF7
 23201                           tblptrl	equ	0xFF6
 23202                           tablat	equ	0xFF5
 23203                           prodh	equ	0xFF4
 23204                           prodl	equ	0xFF3
 23205                           intcon	equ	0xFF2
 23206                           intcon3	equ	0xFF0
 23207                           indf0	equ	0xFEF
 23208                           postinc0	equ	0xFEE
 23209                           plusw0	equ	0xFEB
 23210                           fsr0h	equ	0xFEA
 23211                           fsr0l	equ	0xFE9
 23212                           wreg	equ	0xFE8
 23213                           indf1	equ	0xFE7
 23214                           postinc1	equ	0xFE6
 23215                           postdec1	equ	0xFE5
 23216                           plusw1	equ	0xFE3
 23217                           fsr1h	equ	0xFE2
 23218                           fsr1l	equ	0xFE1
 23219                           indf2	equ	0xFDF
 23220                           postinc2	equ	0xFDE
 23221                           postdec2	equ	0xFDD
 23222                           plusw2	equ	0xFDB
 23223                           fsr2h	equ	0xFDA
 23224                           fsr2l	equ	0xFD9
 23225                           status	equ	0xFD8
 23226                           
 23227 ;; *************** function _ethernetController_checkDeviceId *****************
 23228 ;; Defined at:
 23229 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 23230 ;; Parameters:    Size  Location     Type
 23231 ;;		None
 23232 ;; Auto vars:     Size  Location     Type
 23233 ;;  err             3   18[BANK0 ] struct error
 23234 ;;  data            1   17[BANK0 ] unsigned char 
 23235 ;; Return value:  Size  Location     Type
 23236 ;;                  3   14[BANK0 ] struct error
 23237 ;; Registers used:
 23238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23239 ;; Tracked objects:
 23240 ;;		On entry : 0/0
 23241 ;;		On exit  : 0/0
 23242 ;;		Unchanged: 0/0
 23243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23244 ;;      Params:         0       3       0       0       0       0       0       0       0
 23245 ;;      Locals:         0       4       0       0       0       0       0       0       0
 23246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23247 ;;      Totals:         0       7       0       0       0       0       0       0       0
 23248 ;;Total ram usage:        7 bytes
 23249 ;; Hardware stack levels used:    1
 23250 ;; Hardware stack levels required when called:    7
 23251 ;; This function calls:
 23252 ;;		_enc424j600_readControlRegisterUnbanked
 23253 ;; This function is called by:
 23254 ;;		_ethernetController_init
 23255 ;;		_main
 23256 ;; This function uses a non-reentrant model
 23257 ;;
 23258                           
 23259                           	psect	text96
 23260  004FAA                     __ptext96:
 23261                           	opt stack 0
 23262  004FAA                     _ethernetController_checkDeviceId:
 23263                           	opt stack 22
 23264                           
 23265                           ;ENC424J600.c: 133: error_t err;
 23266                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 23267                           
 23268                           ;incstack = 0
 23269  004FAA  0E01               	movlw	1
 23270  004FAC  0100               	movlb	0	; () banked
 23271  004FAE  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 23272                           
 23273                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 23274  004FB0  0E00               	movlw	0
 23275  004FB2  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23276  004FB4  0E00               	movlw	0
 23277  004FB6  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23278                           
 23279                           ;ENC424J600.c: 136: uint8_t data = 0;
 23280  004FB8  0E00               	movlw	0
 23281  004FBA  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 23282                           
 23283                           ; BSR set to: 0
 23284                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 23285  004FBC  0E71               	movlw	low ethernetController_checkDeviceId@data
 23286  004FBE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23287  004FC0  0E00               	movlw	high ethernetController_checkDeviceId@data
 23288  004FC2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23289  004FC4  0E74               	movlw	116
 23290  004FC6  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23291                           
 23292                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 23293  004FCA  0100               	movlb	0	; () banked
 23294  004FCC  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 23295  004FCE  42E8               	rrncf	wreg,f,c
 23296  004FD0  0B07               	andlw	7
 23297  004FD2  0B07               	andlw	7
 23298  004FD4  06E8               	decf	wreg,f,c
 23299  004FD6  A4D8               	btfss	status,2,c
 23300  004FD8  D004               	goto	l92
 23301                           
 23302                           ; BSR set to: 0
 23303                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 23304  004FDA  0E00               	movlw	0
 23305  004FDC  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23306  004FDE  0E00               	movlw	0
 23307  004FE0  D003               	goto	L10
 23308  004FE2                     l92:
 23309                           
 23310                           ; BSR set to: 0
 23311                           ;ENC424J600.c: 140: else
 23312                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 23313                           
 23314                           ; BSR set to: 0
 23315  004FE2  0E01               	movlw	1
 23316  004FE4  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 23317  004FE6  0E2D               	movlw	45
 23318  004FE8                     L10:
 23319  004FE8  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 23320                           
 23321                           ; BSR set to: 0
 23322                           ;ENC424J600.c: 142: return err;
 23323                           
 23324                           ; BSR set to: 0
 23325  004FEA  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 23326  004FEE  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 23327  004FF2  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 23328  004FF6  0012               	return	
 23329  004FF8                     __end_of_ethernetController_checkDeviceId:
 23330                           	opt stack 0
 23331                           tblptru	equ	0xFF8
 23332                           tblptrh	equ	0xFF7
 23333                           tblptrl	equ	0xFF6
 23334                           tablat	equ	0xFF5
 23335                           prodh	equ	0xFF4
 23336                           prodl	equ	0xFF3
 23337                           intcon	equ	0xFF2
 23338                           intcon3	equ	0xFF0
 23339                           indf0	equ	0xFEF
 23340                           postinc0	equ	0xFEE
 23341                           plusw0	equ	0xFEB
 23342                           fsr0h	equ	0xFEA
 23343                           fsr0l	equ	0xFE9
 23344                           wreg	equ	0xFE8
 23345                           indf1	equ	0xFE7
 23346                           postinc1	equ	0xFE6
 23347                           postdec1	equ	0xFE5
 23348                           plusw1	equ	0xFE3
 23349                           fsr1h	equ	0xFE2
 23350                           fsr1l	equ	0xFE1
 23351                           indf2	equ	0xFDF
 23352                           postinc2	equ	0xFDE
 23353                           postdec2	equ	0xFDD
 23354                           plusw2	equ	0xFDB
 23355                           fsr2h	equ	0xFDA
 23356                           fsr2l	equ	0xFD9
 23357                           status	equ	0xFD8
 23358                           
 23359 ;; *************** function _enc424j600_setRXTailPointer *****************
 23360 ;; Defined at:
 23361 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 23362 ;; Parameters:    Size  Location     Type
 23363 ;;  addr            2   14[BANK0 ] unsigned int 
 23364 ;; Auto vars:     Size  Location     Type
 23365 ;;  highByte        1   17[BANK0 ] unsigned char 
 23366 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23367 ;; Return value:  Size  Location     Type
 23368 ;;                  1    wreg      void 
 23369 ;; Registers used:
 23370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23371 ;; Tracked objects:
 23372 ;;		On entry : 0/0
 23373 ;;		On exit  : 0/0
 23374 ;;		Unchanged: 0/0
 23375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23376 ;;      Params:         0       2       0       0       0       0       0       0       0
 23377 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23378 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23379 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23380 ;;Total ram usage:        4 bytes
 23381 ;; Hardware stack levels used:    1
 23382 ;; Hardware stack levels required when called:    7
 23383 ;; This function calls:
 23384 ;;		_enc424j600_writeControlRegisterUnbanked
 23385 ;; This function is called by:
 23386 ;;		_ethernetController_init
 23387 ;;		_ethernetController_dropPacket
 23388 ;; This function uses a non-reentrant model
 23389 ;;
 23390                           
 23391                           	psect	text97
 23392  00543C                     __ptext97:
 23393                           	opt stack 0
 23394  00543C                     _enc424j600_setRXTailPointer:
 23395                           	opt stack 19
 23396                           
 23397                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;incstack = 0
 23401  00543C  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 23402                           
 23403                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 23404  005440  0100               	movlb	0	; () banked
 23405  005442  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 23406  005444  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 23407                           
 23408                           ; BSR set to: 0
 23409                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 23410  005446  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 23411  005448  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23412  00544A  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 23413  00544C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23414  00544E  0E06               	movlw	6
 23415  005450  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23416                           
 23417                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 23418  005454  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 23419  005456  0100               	movlb	0	; () banked
 23420  005458  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23421  00545A  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 23422  00545C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23423  00545E  0E07               	movlw	7
 23424  005460  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23425  005464  0012               	return		;funcret
 23426  005466                     __end_of_enc424j600_setRXTailPointer:
 23427                           	opt stack 0
 23428                           tblptru	equ	0xFF8
 23429                           tblptrh	equ	0xFF7
 23430                           tblptrl	equ	0xFF6
 23431                           tablat	equ	0xFF5
 23432                           prodh	equ	0xFF4
 23433                           prodl	equ	0xFF3
 23434                           intcon	equ	0xFF2
 23435                           intcon3	equ	0xFF0
 23436                           indf0	equ	0xFEF
 23437                           postinc0	equ	0xFEE
 23438                           plusw0	equ	0xFEB
 23439                           fsr0h	equ	0xFEA
 23440                           fsr0l	equ	0xFE9
 23441                           wreg	equ	0xFE8
 23442                           indf1	equ	0xFE7
 23443                           postinc1	equ	0xFE6
 23444                           postdec1	equ	0xFE5
 23445                           plusw1	equ	0xFE3
 23446                           fsr1h	equ	0xFE2
 23447                           fsr1l	equ	0xFE1
 23448                           indf2	equ	0xFDF
 23449                           postinc2	equ	0xFDE
 23450                           postdec2	equ	0xFDD
 23451                           plusw2	equ	0xFDB
 23452                           fsr2h	equ	0xFDA
 23453                           fsr2l	equ	0xFD9
 23454                           status	equ	0xFD8
 23455                           
 23456 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 23457 ;; Defined at:
 23458 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 23459 ;; Parameters:    Size  Location     Type
 23460 ;;  addr            2   14[BANK0 ] unsigned int 
 23461 ;; Auto vars:     Size  Location     Type
 23462 ;;  highByte        1   17[BANK0 ] unsigned char 
 23463 ;;  lowByte         1   16[BANK0 ] unsigned char 
 23464 ;; Return value:  Size  Location     Type
 23465 ;;                  1    wreg      void 
 23466 ;; Registers used:
 23467 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23468 ;; Tracked objects:
 23469 ;;		On entry : 0/0
 23470 ;;		On exit  : 0/0
 23471 ;;		Unchanged: 0/0
 23472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23473 ;;      Params:         0       2       0       0       0       0       0       0       0
 23474 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23475 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23476 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23477 ;;Total ram usage:        4 bytes
 23478 ;; Hardware stack levels used:    1
 23479 ;; Hardware stack levels required when called:    7
 23480 ;; This function calls:
 23481 ;;		_enc424j600_writeControlRegisterUnbanked
 23482 ;; This function is called by:
 23483 ;;		_ethernetController_init
 23484 ;; This function uses a non-reentrant model
 23485 ;;
 23486                           
 23487                           	psect	text98
 23488  005466                     __ptext98:
 23489                           	opt stack 0
 23490  005466                     _enc424j600_setRXBufferStartAddress:
 23491                           	opt stack 22
 23492                           
 23493                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 23494                           
 23495                           ;incstack = 0
 23496  005466  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 23497                           
 23498                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 23499  00546A  0100               	movlb	0	; () banked
 23500  00546C  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 23501  00546E  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 23502                           
 23503                           ; BSR set to: 0
 23504                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 23505  005470  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 23506  005472  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23507  005474  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 23508  005476  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23509  005478  0E04               	movlw	4
 23510  00547A  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23511                           
 23512                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 23513  00547E  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 23514  005480  0100               	movlb	0	; () banked
 23515  005482  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23516  005484  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 23517  005486  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23518  005488  0E05               	movlw	5
 23519  00548A  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23520  00548E  0012               	return		;funcret
 23521  005490                     __end_of_enc424j600_setRXBufferStartAddress:
 23522                           	opt stack 0
 23523                           tblptru	equ	0xFF8
 23524                           tblptrh	equ	0xFF7
 23525                           tblptrl	equ	0xFF6
 23526                           tablat	equ	0xFF5
 23527                           prodh	equ	0xFF4
 23528                           prodl	equ	0xFF3
 23529                           intcon	equ	0xFF2
 23530                           intcon3	equ	0xFF0
 23531                           indf0	equ	0xFEF
 23532                           postinc0	equ	0xFEE
 23533                           plusw0	equ	0xFEB
 23534                           fsr0h	equ	0xFEA
 23535                           fsr0l	equ	0xFE9
 23536                           wreg	equ	0xFE8
 23537                           indf1	equ	0xFE7
 23538                           postinc1	equ	0xFE6
 23539                           postdec1	equ	0xFE5
 23540                           plusw1	equ	0xFE3
 23541                           fsr1h	equ	0xFE2
 23542                           fsr1l	equ	0xFE1
 23543                           indf2	equ	0xFDF
 23544                           postinc2	equ	0xFDE
 23545                           postdec2	equ	0xFDD
 23546                           plusw2	equ	0xFDB
 23547                           fsr2h	equ	0xFDA
 23548                           fsr2l	equ	0xFD9
 23549                           status	equ	0xFD8
 23550                           
 23551 ;; *************** function _enc424j600_setNextPacketPointer *****************
 23552 ;; Defined at:
 23553 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 23554 ;; Parameters:    Size  Location     Type
 23555 ;;  ptr             2    0[BANK0 ] unsigned int 
 23556 ;; Auto vars:     Size  Location     Type
 23557 ;;		None
 23558 ;; Return value:  Size  Location     Type
 23559 ;;                  1    wreg      void 
 23560 ;; Registers used:
 23561 ;;		None
 23562 ;; Tracked objects:
 23563 ;;		On entry : 0/0
 23564 ;;		On exit  : 0/0
 23565 ;;		Unchanged: 0/0
 23566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23567 ;;      Params:         0       2       0       0       0       0       0       0       0
 23568 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23569 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23570 ;;      Totals:         0       2       0       0       0       0       0       0       0
 23571 ;;Total ram usage:        2 bytes
 23572 ;; Hardware stack levels used:    1
 23573 ;; Hardware stack levels required when called:    4
 23574 ;; This function calls:
 23575 ;;		Nothing
 23576 ;; This function is called by:
 23577 ;;		_ethernetController_init
 23578 ;;		_ethernetController_updateNextPacketPointer
 23579 ;; This function uses a non-reentrant model
 23580 ;;
 23581                           
 23582                           	psect	text99
 23583  005790                     __ptext99:
 23584                           	opt stack 0
 23585  005790                     _enc424j600_setNextPacketPointer:
 23586                           	opt stack 23
 23587                           
 23588                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 23589                           
 23590                           ;incstack = 0
 23591  005790  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 23592  005794  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 23593  005798  0012               	return		;funcret
 23594  00579A                     __end_of_enc424j600_setNextPacketPointer:
 23595                           	opt stack 0
 23596                           tblptru	equ	0xFF8
 23597                           tblptrh	equ	0xFF7
 23598                           tblptrl	equ	0xFF6
 23599                           tablat	equ	0xFF5
 23600                           prodh	equ	0xFF4
 23601                           prodl	equ	0xFF3
 23602                           intcon	equ	0xFF2
 23603                           intcon3	equ	0xFF0
 23604                           indf0	equ	0xFEF
 23605                           postinc0	equ	0xFEE
 23606                           plusw0	equ	0xFEB
 23607                           fsr0h	equ	0xFEA
 23608                           fsr0l	equ	0xFE9
 23609                           wreg	equ	0xFE8
 23610                           indf1	equ	0xFE7
 23611                           postinc1	equ	0xFE6
 23612                           postdec1	equ	0xFE5
 23613                           plusw1	equ	0xFE3
 23614                           fsr1h	equ	0xFE2
 23615                           fsr1l	equ	0xFE1
 23616                           indf2	equ	0xFDF
 23617                           postinc2	equ	0xFDE
 23618                           postdec2	equ	0xFDD
 23619                           plusw2	equ	0xFDB
 23620                           fsr2h	equ	0xFDA
 23621                           fsr2l	equ	0xFD9
 23622                           status	equ	0xFD8
 23623                           
 23624 ;; *************** function _enc424j600_enableReception *****************
 23625 ;; Defined at:
 23626 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 23627 ;; Parameters:    Size  Location     Type
 23628 ;;		None
 23629 ;; Auto vars:     Size  Location     Type
 23630 ;;		None
 23631 ;; Return value:  Size  Location     Type
 23632 ;;                  1    wreg      void 
 23633 ;; Registers used:
 23634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23635 ;; Tracked objects:
 23636 ;;		On entry : 0/0
 23637 ;;		On exit  : 0/0
 23638 ;;		Unchanged: 0/0
 23639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23640 ;;      Params:         0       0       0       0       0       0       0       0       0
 23641 ;;      Locals:         0       0       0       0       0       0       0       0       0
 23642 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23643 ;;      Totals:         0       0       0       0       0       0       0       0       0
 23644 ;;Total ram usage:        0 bytes
 23645 ;; Hardware stack levels used:    1
 23646 ;; Hardware stack levels required when called:    7
 23647 ;; This function calls:
 23648 ;;		_enc424j600_writeSingleByte
 23649 ;; This function is called by:
 23650 ;;		_ethernetController_init
 23651 ;;		_ethernetController_enableReception
 23652 ;; This function uses a non-reentrant model
 23653 ;;
 23654                           
 23655                           	psect	text100
 23656  00579A                     __ptext100:
 23657                           	opt stack 0
 23658  00579A                     _enc424j600_enableReception:
 23659                           	opt stack 22
 23660                           
 23661                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 23662                           
 23663                           ;incstack = 0
 23664  00579A  0EE8               	movlw	232
 23665  00579C  EC50  F02B         	call	_enc424j600_writeSingleByte
 23666  0057A0  0012               	return		;funcret
 23667  0057A2                     __end_of_enc424j600_enableReception:
 23668                           	opt stack 0
 23669                           tblptru	equ	0xFF8
 23670                           tblptrh	equ	0xFF7
 23671                           tblptrl	equ	0xFF6
 23672                           tablat	equ	0xFF5
 23673                           prodh	equ	0xFF4
 23674                           prodl	equ	0xFF3
 23675                           intcon	equ	0xFF2
 23676                           intcon3	equ	0xFF0
 23677                           indf0	equ	0xFEF
 23678                           postinc0	equ	0xFEE
 23679                           plusw0	equ	0xFEB
 23680                           fsr0h	equ	0xFEA
 23681                           fsr0l	equ	0xFE9
 23682                           wreg	equ	0xFE8
 23683                           indf1	equ	0xFE7
 23684                           postinc1	equ	0xFE6
 23685                           postdec1	equ	0xFE5
 23686                           plusw1	equ	0xFE3
 23687                           fsr1h	equ	0xFE2
 23688                           fsr1l	equ	0xFE1
 23689                           indf2	equ	0xFDF
 23690                           postinc2	equ	0xFDE
 23691                           postdec2	equ	0xFDD
 23692                           plusw2	equ	0xFDB
 23693                           fsr2h	equ	0xFDA
 23694                           fsr2l	equ	0xFD9
 23695                           status	equ	0xFD8
 23696                           
 23697 ;; *************** function _enc424j600_writeSingleByte *****************
 23698 ;; Defined at:
 23699 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 23700 ;; Parameters:    Size  Location     Type
 23701 ;;  opcode          1    wreg     unsigned char 
 23702 ;; Auto vars:     Size  Location     Type
 23703 ;;  opcode          1   10[BANK0 ] unsigned char 
 23704 ;; Return value:  Size  Location     Type
 23705 ;;                  1    wreg      void 
 23706 ;; Registers used:
 23707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23708 ;; Tracked objects:
 23709 ;;		On entry : 0/0
 23710 ;;		On exit  : 0/0
 23711 ;;		Unchanged: 0/0
 23712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23713 ;;      Params:         0       0       0       0       0       0       0       0       0
 23714 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23715 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23716 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23717 ;;Total ram usage:        1 bytes
 23718 ;; Hardware stack levels used:    1
 23719 ;; Hardware stack levels required when called:    6
 23720 ;; This function calls:
 23721 ;;		_enc424j600_writeSPI
 23722 ;; This function is called by:
 23723 ;;		_ethernetController_softReset
 23724 ;;		_ethernetController_sendPacket
 23725 ;;		_ethernetController_dropPacket
 23726 ;;		_enc424j600_enableReception
 23727 ;;		_enc424j600_disableReception
 23728 ;; This function uses a non-reentrant model
 23729 ;;
 23730                           
 23731                           	psect	text101
 23732  0056A0                     __ptext101:
 23733                           	opt stack 0
 23734  0056A0                     _enc424j600_writeSingleByte:
 23735                           	opt stack 21
 23736                           
 23737                           ;incstack = 0
 23738                           ;enc424j600_writeSingleByte@opcode stored from wreg
 23739  0056A0  0100               	movlb	0	; () banked
 23740  0056A2  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 23741                           
 23742                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 23743  0056A4  9881               	bcf	3969,4,c	;volatile
 23744                           
 23745                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 23746  0056A6  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 23747  0056A8  0100               	movlb	0	; () banked
 23748  0056AA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23749  0056AC  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 23750  0056AE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23751  0056B0  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 23752                           
 23753                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 23754  0056B4  8881               	bsf	3969,4,c	;volatile
 23755  0056B6  0012               	return		;funcret
 23756  0056B8                     __end_of_enc424j600_writeSingleByte:
 23757                           	opt stack 0
 23758                           tblptru	equ	0xFF8
 23759                           tblptrh	equ	0xFF7
 23760                           tblptrl	equ	0xFF6
 23761                           tablat	equ	0xFF5
 23762                           prodh	equ	0xFF4
 23763                           prodl	equ	0xFF3
 23764                           intcon	equ	0xFF2
 23765                           intcon3	equ	0xFF0
 23766                           indf0	equ	0xFEF
 23767                           postinc0	equ	0xFEE
 23768                           plusw0	equ	0xFEB
 23769                           fsr0h	equ	0xFEA
 23770                           fsr0l	equ	0xFE9
 23771                           wreg	equ	0xFE8
 23772                           indf1	equ	0xFE7
 23773                           postinc1	equ	0xFE6
 23774                           postdec1	equ	0xFE5
 23775                           plusw1	equ	0xFE3
 23776                           fsr1h	equ	0xFE2
 23777                           fsr1l	equ	0xFE1
 23778                           indf2	equ	0xFDF
 23779                           postinc2	equ	0xFDE
 23780                           postdec2	equ	0xFDD
 23781                           plusw2	equ	0xFDB
 23782                           fsr2h	equ	0xFDA
 23783                           fsr2l	equ	0xFD9
 23784                           status	equ	0xFD8
 23785                           
 23786 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 23787 ;; Defined at:
 23788 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 23789 ;; Parameters:    Size  Location     Type
 23790 ;;		None
 23791 ;; Auto vars:     Size  Location     Type
 23792 ;;  temp            1   14[BANK0 ] unsigned char 
 23793 ;; Return value:  Size  Location     Type
 23794 ;;                  1    wreg      void 
 23795 ;; Registers used:
 23796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23797 ;; Tracked objects:
 23798 ;;		On entry : 0/0
 23799 ;;		On exit  : 0/0
 23800 ;;		Unchanged: 0/0
 23801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23802 ;;      Params:         0       0       0       0       0       0       0       0       0
 23803 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23804 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23805 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23806 ;;Total ram usage:        1 bytes
 23807 ;; Hardware stack levels used:    1
 23808 ;; Hardware stack levels required when called:    7
 23809 ;; This function calls:
 23810 ;;		_enc424j600_readControlRegisterUnbanked
 23811 ;;		_enc424j600_writeControlRegisterUnbanked
 23812 ;; This function is called by:
 23813 ;;		_ethernetController_init
 23814 ;; This function uses a non-reentrant model
 23815 ;;
 23816                           
 23817                           	psect	text102
 23818  005508                     __ptext102:
 23819                           	opt stack 0
 23820  005508                     _enc424j600_enableAutoMACInsertion:
 23821                           	opt stack 22
 23822                           
 23823                           ;ENC424J600.c: 659: uint8_t temp = 0;
 23824                           
 23825                           ;incstack = 0
 23826  005508  0E00               	movlw	0
 23827  00550A  0100               	movlb	0	; () banked
 23828  00550C  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 23829                           
 23830                           ; BSR set to: 0
 23831                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 23832  00550E  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23833  005510  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 23834  005512  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23835  005514  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 23836  005516  0E6F               	movlw	111
 23837  005518  EC79  F029         	call	_enc424j600_readControlRegisterUnbanked
 23838                           
 23839                           ;ENC424J600.c: 661: temp |= (1 << 5);
 23840  00551C  0100               	movlb	0	; () banked
 23841  00551E  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 23842                           
 23843                           ; BSR set to: 0
 23844                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 23845  005520  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 23846  005522  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 23847  005524  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 23848  005526  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 23849  005528  0E6F               	movlw	111
 23850  00552A  EC5E  F029         	call	_enc424j600_writeControlRegisterUnbanked
 23851  00552E  0012               	return		;funcret
 23852  005530                     __end_of_enc424j600_enableAutoMACInsertion:
 23853                           	opt stack 0
 23854                           tblptru	equ	0xFF8
 23855                           tblptrh	equ	0xFF7
 23856                           tblptrl	equ	0xFF6
 23857                           tablat	equ	0xFF5
 23858                           prodh	equ	0xFF4
 23859                           prodl	equ	0xFF3
 23860                           intcon	equ	0xFF2
 23861                           intcon3	equ	0xFF0
 23862                           indf0	equ	0xFEF
 23863                           postinc0	equ	0xFEE
 23864                           plusw0	equ	0xFEB
 23865                           fsr0h	equ	0xFEA
 23866                           fsr0l	equ	0xFE9
 23867                           wreg	equ	0xFE8
 23868                           indf1	equ	0xFE7
 23869                           postinc1	equ	0xFE6
 23870                           postdec1	equ	0xFE5
 23871                           plusw1	equ	0xFE3
 23872                           fsr1h	equ	0xFE2
 23873                           fsr1l	equ	0xFE1
 23874                           indf2	equ	0xFDF
 23875                           postinc2	equ	0xFDE
 23876                           postdec2	equ	0xFDD
 23877                           plusw2	equ	0xFDB
 23878                           fsr2h	equ	0xFDA
 23879                           fsr2l	equ	0xFD9
 23880                           status	equ	0xFD8
 23881                           
 23882 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 23883 ;; Defined at:
 23884 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 23885 ;; Parameters:    Size  Location     Type
 23886 ;;  addr            1    wreg     unsigned char 
 23887 ;;  data            2   10[BANK0 ] PTR unsigned char 
 23888 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 23889 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 23890 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 23891 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 23892 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 23893 ;; Auto vars:     Size  Location     Type
 23894 ;;  addr            1   12[BANK0 ] unsigned char 
 23895 ;;  opcode          1   13[BANK0 ] unsigned char 
 23896 ;; Return value:  Size  Location     Type
 23897 ;;                  1    wreg      void 
 23898 ;; Registers used:
 23899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23900 ;; Tracked objects:
 23901 ;;		On entry : 0/0
 23902 ;;		On exit  : 0/0
 23903 ;;		Unchanged: 0/0
 23904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23905 ;;      Params:         0       2       0       0       0       0       0       0       0
 23906 ;;      Locals:         0       2       0       0       0       0       0       0       0
 23907 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23908 ;;      Totals:         0       4       0       0       0       0       0       0       0
 23909 ;;Total ram usage:        4 bytes
 23910 ;; Hardware stack levels used:    1
 23911 ;; Hardware stack levels required when called:    6
 23912 ;; This function calls:
 23913 ;;		_enc424j600_writeSPI
 23914 ;; This function is called by:
 23915 ;;		_ethernetController_softReset
 23916 ;;		_ethernetController_setLEDConfig
 23917 ;;		_enc424j600_readPHYRegister
 23918 ;;		_enc424j600_setTXLength
 23919 ;;		_enc424j600_setTXStartAddress
 23920 ;;		_enc424j600_setRXBufferStartAddress
 23921 ;;		_enc424j600_setRXTailPointer
 23922 ;;		_enc424j600_enableAutoMACInsertion
 23923 ;;		_enc424j600_clearInterruptFlag
 23924 ;;		_ethernetController_setMacAddress
 23925 ;;		_enc424j600_disableAutoMACInsertion
 23926 ;;		_enc424j600_enable
 23927 ;;		_enc424j600_disable
 23928 ;; This function uses a non-reentrant model
 23929 ;;
 23930                           
 23931                           	psect	text103
 23932  0052BC                     __ptext103:
 23933                           	opt stack 0
 23934  0052BC                     _enc424j600_writeControlRegisterUnbanked:
 23935                           	opt stack 20
 23936                           
 23937                           ;incstack = 0
 23938                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 23939  0052BC  0100               	movlb	0	; () banked
 23940  0052BE  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 23941                           
 23942                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 23943  0052C0  0E22               	movlw	34
 23944  0052C2  0100               	movlb	0	; () banked
 23945  0052C4  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 23946                           
 23947                           ; BSR set to: 0
 23948                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 23949  0052C6  9881               	bcf	3969,4,c	;volatile
 23950                           
 23951                           ; BSR set to: 0
 23952                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 23953  0052C8  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 23954  0052CA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23955  0052CC  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 23956  0052CE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23957  0052D0  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 23958                           
 23959                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 23960  0052D4  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 23961  0052D6  0100               	movlb	0	; () banked
 23962  0052D8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 23963  0052DA  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 23964  0052DC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 23965  0052DE  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 23966                           
 23967                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 23968  0052E2  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 23969  0052E6  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 23970  0052EA  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 23971                           
 23972                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 23973  0052EE  8881               	bsf	3969,4,c	;volatile
 23974  0052F0  0012               	return		;funcret
 23975  0052F2                     __end_of_enc424j600_writeControlRegisterUnbanked:
 23976                           	opt stack 0
 23977                           tblptru	equ	0xFF8
 23978                           tblptrh	equ	0xFF7
 23979                           tblptrl	equ	0xFF6
 23980                           tablat	equ	0xFF5
 23981                           prodh	equ	0xFF4
 23982                           prodl	equ	0xFF3
 23983                           intcon	equ	0xFF2
 23984                           intcon3	equ	0xFF0
 23985                           indf0	equ	0xFEF
 23986                           postinc0	equ	0xFEE
 23987                           plusw0	equ	0xFEB
 23988                           fsr0h	equ	0xFEA
 23989                           fsr0l	equ	0xFE9
 23990                           wreg	equ	0xFE8
 23991                           indf1	equ	0xFE7
 23992                           postinc1	equ	0xFE6
 23993                           postdec1	equ	0xFE5
 23994                           plusw1	equ	0xFE3
 23995                           fsr1h	equ	0xFE2
 23996                           fsr1l	equ	0xFE1
 23997                           indf2	equ	0xFDF
 23998                           postinc2	equ	0xFDE
 23999                           postdec2	equ	0xFDD
 24000                           plusw2	equ	0xFDB
 24001                           fsr2h	equ	0xFDA
 24002                           fsr2l	equ	0xFD9
 24003                           status	equ	0xFD8
 24004                           
 24005 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 24006 ;; Defined at:
 24007 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 24008 ;; Parameters:    Size  Location     Type
 24009 ;;  addr            1    wreg     unsigned char 
 24010 ;;  data            2   10[BANK0 ] PTR unsigned char 
 24011 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24012 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24013 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24014 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 24015 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24016 ;; Auto vars:     Size  Location     Type
 24017 ;;  addr            1   12[BANK0 ] unsigned char 
 24018 ;;  opcode          1   13[BANK0 ] unsigned char 
 24019 ;; Return value:  Size  Location     Type
 24020 ;;                  1    wreg      void 
 24021 ;; Registers used:
 24022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24023 ;; Tracked objects:
 24024 ;;		On entry : 0/0
 24025 ;;		On exit  : 0/0
 24026 ;;		Unchanged: 0/0
 24027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24028 ;;      Params:         0       2       0       0       0       0       0       0       0
 24029 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24030 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24031 ;;      Totals:         0       4       0       0       0       0       0       0       0
 24032 ;;Total ram usage:        4 bytes
 24033 ;; Hardware stack levels used:    1
 24034 ;; Hardware stack levels required when called:    6
 24035 ;; This function calls:
 24036 ;;		_enc424j600_readSPI
 24037 ;;		_enc424j600_writeSPI
 24038 ;; This function is called by:
 24039 ;;		_ethernetController_softReset
 24040 ;;		_ethernetController_checkDeviceId
 24041 ;;		_ethernetController_getMacAddress
 24042 ;;		_ethernetController_updateLinkStatus
 24043 ;;		_ethernetController_setLEDConfig
 24044 ;;		_enc424j600_readPHYRegister
 24045 ;;		_enc424j600_getPacketCount
 24046 ;;		_enc424j600_enableAutoMACInsertion
 24047 ;;		_enc424j600_getInterruptFlags
 24048 ;;		_enc424j600_clearInterruptFlag
 24049 ;;		_ethernetController_getSiliconRevision
 24050 ;;		_enc424j600_disableAutoMACInsertion
 24051 ;;		_enc424j600_enable
 24052 ;;		_enc424j600_disable
 24053 ;; This function uses a non-reentrant model
 24054 ;;
 24055                           
 24056                           	psect	text104
 24057  0052F2                     __ptext104:
 24058                           	opt stack 0
 24059  0052F2                     _enc424j600_readControlRegisterUnbanked:
 24060                           	opt stack 21
 24061                           
 24062                           ;incstack = 0
 24063                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 24064  0052F2  0100               	movlb	0	; () banked
 24065  0052F4  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 24066                           
 24067                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 24068  0052F6  0E20               	movlw	32
 24069  0052F8  0100               	movlb	0	; () banked
 24070  0052FA  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 24071                           
 24072                           ; BSR set to: 0
 24073                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 24074  0052FC  9881               	bcf	3969,4,c	;volatile
 24075                           
 24076                           ; BSR set to: 0
 24077                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 24078  0052FE  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 24079  005300  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24080  005302  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 24081  005304  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24082  005306  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 24083                           
 24084                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 24085  00530A  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 24086  00530C  0100               	movlb	0	; () banked
 24087  00530E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24088  005310  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 24089  005312  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24090  005314  EC4E  F026         	call	_enc424j600_writeSPI	;wreg free
 24091                           
 24092                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 24093  005318  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 24094  00531C  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 24095  005320  ECE5  F025         	call	_enc424j600_readSPI	;wreg free
 24096                           
 24097                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 24098  005324  8881               	bsf	3969,4,c	;volatile
 24099  005326  0012               	return		;funcret
 24100  005328                     __end_of_enc424j600_readControlRegisterUnbanked:
 24101                           	opt stack 0
 24102                           tblptru	equ	0xFF8
 24103                           tblptrh	equ	0xFF7
 24104                           tblptrl	equ	0xFF6
 24105                           tablat	equ	0xFF5
 24106                           prodh	equ	0xFF4
 24107                           prodl	equ	0xFF3
 24108                           intcon	equ	0xFF2
 24109                           intcon3	equ	0xFF0
 24110                           indf0	equ	0xFEF
 24111                           postinc0	equ	0xFEE
 24112                           plusw0	equ	0xFEB
 24113                           fsr0h	equ	0xFEA
 24114                           fsr0l	equ	0xFE9
 24115                           wreg	equ	0xFE8
 24116                           indf1	equ	0xFE7
 24117                           postinc1	equ	0xFE6
 24118                           postdec1	equ	0xFE5
 24119                           plusw1	equ	0xFE3
 24120                           fsr1h	equ	0xFE2
 24121                           fsr1l	equ	0xFE1
 24122                           indf2	equ	0xFDF
 24123                           postinc2	equ	0xFDE
 24124                           postdec2	equ	0xFDD
 24125                           plusw2	equ	0xFDB
 24126                           fsr2h	equ	0xFDA
 24127                           fsr2l	equ	0xFD9
 24128                           status	equ	0xFD8
 24129                           
 24130 ;; *************** function _enc424j600_writeSPI *****************
 24131 ;; Defined at:
 24132 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 24133 ;; Parameters:    Size  Location     Type
 24134 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24135 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 24136 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 24137 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 24138 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 24139 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 24140 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 24141 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 24142 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 24143 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 24144 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 24145 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 24146 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 24147 ;; Auto vars:     Size  Location     Type
 24148 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24149 ;; Return value:  Size  Location     Type
 24150 ;;                  1    wreg      void 
 24151 ;; Registers used:
 24152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24153 ;; Tracked objects:
 24154 ;;		On entry : 0/0
 24155 ;;		On exit  : 0/0
 24156 ;;		Unchanged: 0/0
 24157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24158 ;;      Params:         0       2       0       0       0       0       0       0       0
 24159 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24160 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24161 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24162 ;;Total ram usage:       10 bytes
 24163 ;; Hardware stack levels used:    1
 24164 ;; Hardware stack levels required when called:    5
 24165 ;; This function calls:
 24166 ;;		_enc424j600_initSPI
 24167 ;; This function is called by:
 24168 ;;		_ethernetController_streamToTransmitBuffer
 24169 ;;		_ethernetController_writeDestinationMACAddress
 24170 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 24171 ;;		_ethernetController_getSourceMACAddress
 24172 ;;		_ethernetController_getEtherTypeField
 24173 ;;		_ethernetController_getRSV
 24174 ;;		_ethernetController_updateNextPacketPointer
 24175 ;;		_ethernetController_streamFromRXBuffer
 24176 ;;		_enc424j600_writeSingleByte
 24177 ;;		_enc424j600_writeControlRegisterUnbanked
 24178 ;;		_enc424j600_readControlRegisterUnbanked
 24179 ;;		_enc424j600_setGPDATAWritePointer
 24180 ;;		_enc424j600_setERXDATAReadPointer
 24181 ;;		_ethernetController_getDestinationMACAddress
 24182 ;;		_enc424j600_setGPDATAReadPointer
 24183 ;; This function uses a non-reentrant model
 24184 ;;
 24185                           
 24186                           	psect	text105
 24187  004C9C                     __ptext105:
 24188                           	opt stack 0
 24189  004C9C                     _enc424j600_writeSPI:
 24190                           	opt stack 22
 24191                           
 24192                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 24193                           
 24194                           ;incstack = 0
 24195  004C9C  0E00               	movlw	0
 24196  004C9E  0100               	movlb	0	; () banked
 24197  004CA0  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 24198  004CA2  0E00               	movlw	0
 24199  004CA4  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 24200  004CA6  0E00               	movlw	0
 24201  004CA8  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 24202  004CAA  0E00               	movlw	0
 24203  004CAC  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 24204                           
 24205                           ; BSR set to: 0
 24206                           ;ENC424J600.c: 490: SSP1BUF = *data;
 24207  004CAE  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 24208  004CB2  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 24209  004CB6  50DF               	movf	indf2,w,c
 24210  004CB8  6EC9               	movwf	4041,c	;volatile
 24211  004CBA                     
 24212                           ; BSR set to: 0
 24213                           
 24214                           ; BSR set to: 0
 24215  004CBA  B0C7               	btfsc	4039,0,c	;volatile
 24216  004CBC  D015               	goto	u8720
 24217                           
 24218                           ; BSR set to: 0
 24219  004CBE  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 24220  004CC2  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 24221  004CC6  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 24222  004CCA  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 24223  004CCE  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 24224  004CD0  0E00               	movlw	0
 24225  004CD2  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 24226  004CD4  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 24227  004CD6  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 24228  004CD8  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 24229  004CDA  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 24230  004CDC  E105               	bnz	l8147
 24231  004CDE  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 24232  004CE0  0E0F               	movlw	15
 24233  004CE2  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 24234  004CE4  A0D8               	btfss	status,0,c
 24235  004CE6  D7E9               	goto	l232
 24236  004CE8                     u8720:
 24237  004CE8                     l8147:
 24238                           
 24239                           ; BSR set to: 0
 24240                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 24241  004CE8  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 24242  004CEA  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 24243  004CEC  E105               	bnz	u8730
 24244  004CEE  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 24245  004CF0  0E0F               	movlw	15
 24246  004CF2  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 24247  004CF4  A0D8               	btfss	status,0,c
 24248  004CF6  0012               	return	
 24249  004CF8                     u8730:
 24250                           
 24251                           ; BSR set to: 0
 24252                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 24253  004CF8  8881               	bsf	3969,4,c	;volatile
 24254                           
 24255                           ; BSR set to: 0
 24256                           ;ENC424J600.c: 494: enc424j600_initSPI();
 24257  004CFA  EC28  F02B         	call	_enc424j600_initSPI	;wreg free
 24258                           
 24259                           ;ENC424J600.c: 495: return;
 24260  004CFE  0012               	return	
 24261  004D00                     __end_of_enc424j600_writeSPI:
 24262                           	opt stack 0
 24263                           tblptru	equ	0xFF8
 24264                           tblptrh	equ	0xFF7
 24265                           tblptrl	equ	0xFF6
 24266                           tablat	equ	0xFF5
 24267                           prodh	equ	0xFF4
 24268                           prodl	equ	0xFF3
 24269                           intcon	equ	0xFF2
 24270                           intcon3	equ	0xFF0
 24271                           indf0	equ	0xFEF
 24272                           postinc0	equ	0xFEE
 24273                           plusw0	equ	0xFEB
 24274                           fsr0h	equ	0xFEA
 24275                           fsr0l	equ	0xFE9
 24276                           wreg	equ	0xFE8
 24277                           indf1	equ	0xFE7
 24278                           postinc1	equ	0xFE6
 24279                           postdec1	equ	0xFE5
 24280                           plusw1	equ	0xFE3
 24281                           fsr1h	equ	0xFE2
 24282                           fsr1l	equ	0xFE1
 24283                           indf2	equ	0xFDF
 24284                           postinc2	equ	0xFDE
 24285                           postdec2	equ	0xFDD
 24286                           plusw2	equ	0xFDB
 24287                           fsr2h	equ	0xFDA
 24288                           fsr2l	equ	0xFD9
 24289                           status	equ	0xFD8
 24290                           
 24291 ;; *************** function _enc424j600_readSPI *****************
 24292 ;; Defined at:
 24293 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 24294 ;; Parameters:    Size  Location     Type
 24295 ;;  data            2    0[BANK0 ] PTR unsigned char 
 24296 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 24297 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 24298 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 24299 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 24300 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 24301 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 24302 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 24303 ;; Auto vars:     Size  Location     Type
 24304 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 24305 ;; Return value:  Size  Location     Type
 24306 ;;                  1    wreg      void 
 24307 ;; Registers used:
 24308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24309 ;; Tracked objects:
 24310 ;;		On entry : 0/0
 24311 ;;		On exit  : 0/0
 24312 ;;		Unchanged: 0/0
 24313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24314 ;;      Params:         0       2       0       0       0       0       0       0       0
 24315 ;;      Locals:         0       4       0       0       0       0       0       0       0
 24316 ;;      Temps:          0       4       0       0       0       0       0       0       0
 24317 ;;      Totals:         0      10       0       0       0       0       0       0       0
 24318 ;;Total ram usage:       10 bytes
 24319 ;; Hardware stack levels used:    1
 24320 ;; Hardware stack levels required when called:    5
 24321 ;; This function calls:
 24322 ;;		_enc424j600_initSPI
 24323 ;; This function is called by:
 24324 ;;		_ethernetController_getSourceMACAddress
 24325 ;;		_ethernetController_getEtherTypeField
 24326 ;;		_ethernetController_getRSV
 24327 ;;		_ethernetController_updateNextPacketPointer
 24328 ;;		_ethernetController_streamFromRXBuffer
 24329 ;;		_enc424j600_readControlRegisterUnbanked
 24330 ;;		_ethernetController_getDestinationMACAddress
 24331 ;; This function uses a non-reentrant model
 24332 ;;
 24333                           
 24334                           	psect	text106
 24335  004BCA                     __ptext106:
 24336                           	opt stack 0
 24337  004BCA                     _enc424j600_readSPI:
 24338                           	opt stack 21
 24339                           
 24340                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 24341                           
 24342                           ;incstack = 0
 24343  004BCA  0E00               	movlw	0
 24344  004BCC  0100               	movlb	0	; () banked
 24345  004BCE  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 24346  004BD0  0E00               	movlw	0
 24347  004BD2  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 24348  004BD4  0E00               	movlw	0
 24349  004BD6  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 24350  004BD8  0E00               	movlw	0
 24351  004BDA  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 24352                           
 24353                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 24354  004BDC  0E00               	movlw	0
 24355  004BDE  6EC9               	movwf	4041,c	;volatile
 24356  004BE0                     
 24357                           ; BSR set to: 0
 24358                           
 24359                           ; BSR set to: 0
 24360  004BE0  B0C7               	btfsc	4039,0,c	;volatile
 24361  004BE2  D015               	goto	u9170
 24362                           
 24363                           ; BSR set to: 0
 24364  004BE4  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 24365  004BE8  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 24366  004BEC  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 24367  004BF0  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 24368  004BF4  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 24369  004BF6  0E00               	movlw	0
 24370  004BF8  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 24371  004BFA  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 24372  004BFC  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 24373  004BFE  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 24374  004C00  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 24375  004C02  E105               	bnz	l8433
 24376  004C04  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 24377  004C06  0E0F               	movlw	15
 24378  004C08  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 24379  004C0A  A0D8               	btfss	status,0,c
 24380  004C0C  D7E9               	goto	l241
 24381  004C0E                     u9170:
 24382  004C0E                     l8433:
 24383                           
 24384                           ; BSR set to: 0
 24385                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 24386  004C0E  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 24387  004C10  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 24388  004C12  E105               	bnz	u9180
 24389  004C14  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 24390  004C16  0E0F               	movlw	15
 24391  004C18  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 24392  004C1A  A0D8               	btfss	status,0,c
 24393  004C1C  D004               	goto	l245
 24394  004C1E                     u9180:
 24395                           
 24396                           ; BSR set to: 0
 24397                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 24398  004C1E  8881               	bsf	3969,4,c	;volatile
 24399                           
 24400                           ; BSR set to: 0
 24401                           ;ENC424J600.c: 506: enc424j600_initSPI();
 24402  004C20  EC28  F02B         	call	_enc424j600_initSPI	;wreg free
 24403                           
 24404                           ;ENC424J600.c: 507: return;
 24405  004C24  0012               	return	
 24406  004C26                     l245:
 24407                           
 24408                           ;ENC424J600.c: 508: }
 24409                           ;ENC424J600.c: 509: *data = SSP1BUF;
 24410  004C26  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 24411  004C2A  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 24412  004C2E  CFC9 FFDF          	movff	4041,indf2	;volatile
 24413  004C32  0012               	return		;funcret
 24414  004C34                     __end_of_enc424j600_readSPI:
 24415                           	opt stack 0
 24416                           tblptru	equ	0xFF8
 24417                           tblptrh	equ	0xFF7
 24418                           tblptrl	equ	0xFF6
 24419                           tablat	equ	0xFF5
 24420                           prodh	equ	0xFF4
 24421                           prodl	equ	0xFF3
 24422                           intcon	equ	0xFF2
 24423                           intcon3	equ	0xFF0
 24424                           indf0	equ	0xFEF
 24425                           postinc0	equ	0xFEE
 24426                           plusw0	equ	0xFEB
 24427                           fsr0h	equ	0xFEA
 24428                           fsr0l	equ	0xFE9
 24429                           wreg	equ	0xFE8
 24430                           indf1	equ	0xFE7
 24431                           postinc1	equ	0xFE6
 24432                           postdec1	equ	0xFE5
 24433                           plusw1	equ	0xFE3
 24434                           fsr1h	equ	0xFE2
 24435                           fsr1l	equ	0xFE1
 24436                           indf2	equ	0xFDF
 24437                           postinc2	equ	0xFDE
 24438                           postdec2	equ	0xFDD
 24439                           plusw2	equ	0xFDB
 24440                           fsr2h	equ	0xFDA
 24441                           fsr2l	equ	0xFD9
 24442                           status	equ	0xFD8
 24443                           
 24444 ;; *************** function _enc424j600_initSPI *****************
 24445 ;; Defined at:
 24446 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 24447 ;; Parameters:    Size  Location     Type
 24448 ;;		None
 24449 ;; Auto vars:     Size  Location     Type
 24450 ;;		None
 24451 ;; Return value:  Size  Location     Type
 24452 ;;                  1    wreg      void 
 24453 ;; Registers used:
 24454 ;;		None
 24455 ;; Tracked objects:
 24456 ;;		On entry : 0/0
 24457 ;;		On exit  : 0/0
 24458 ;;		Unchanged: 0/0
 24459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24460 ;;      Params:         0       0       0       0       0       0       0       0       0
 24461 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24462 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24463 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24464 ;;Total ram usage:        0 bytes
 24465 ;; Hardware stack levels used:    1
 24466 ;; Hardware stack levels required when called:    4
 24467 ;; This function calls:
 24468 ;;		Nothing
 24469 ;; This function is called by:
 24470 ;;		_ethernetController_init
 24471 ;;		_enc424j600_writeSPI
 24472 ;;		_enc424j600_readSPI
 24473 ;; This function uses a non-reentrant model
 24474 ;;
 24475                           
 24476                           	psect	text107
 24477  005650                     __ptext107:
 24478                           	opt stack 0
 24479  005650                     _enc424j600_initSPI:
 24480                           	opt stack 22
 24481                           
 24482                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 24483                           
 24484                           ;incstack = 0
 24485  005650  9AC6               	bcf	4038,5,c	;volatile
 24486                           
 24487                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 24488  005652  8CC7               	bsf	4039,6,c	;volatile
 24489                           
 24490                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 24491  005654  8093               	bsf	3987,0,c	;volatile
 24492                           
 24493                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 24494  005656  010F               	movlb	15	; () banked
 24495  005658  915C               	bcf	92,0,b	;volatile
 24496                           
 24497                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 24498  00565A  9293               	bcf	3987,1,c	;volatile
 24499                           
 24500                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 24501  00565C  935C               	bcf	92,1,b	;volatile
 24502                           
 24503                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 24504  00565E  9693               	bcf	3987,3,c	;volatile
 24505                           
 24506                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 24507  005660  975C               	bcf	92,3,b	;volatile
 24508                           
 24509                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 24510  005662  9893               	bcf	3987,4,c	;volatile
 24511                           
 24512                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 24513  005664  995C               	bcf	92,4,b	;volatile
 24514                           
 24515                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 24516  005666  8881               	bsf	3969,4,c	;volatile
 24517                           
 24518                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 24519  005668  8AC6               	bsf	4038,5,c	;volatile
 24520                           
 24521                           ; BSR set to: 15
 24522  00566A  0012               	return		;funcret
 24523  00566C                     __end_of_enc424j600_initSPI:
 24524                           	opt stack 0
 24525                           tblptru	equ	0xFF8
 24526                           tblptrh	equ	0xFF7
 24527                           tblptrl	equ	0xFF6
 24528                           tablat	equ	0xFF5
 24529                           prodh	equ	0xFF4
 24530                           prodl	equ	0xFF3
 24531                           intcon	equ	0xFF2
 24532                           intcon3	equ	0xFF0
 24533                           indf0	equ	0xFEF
 24534                           postinc0	equ	0xFEE
 24535                           plusw0	equ	0xFEB
 24536                           fsr0h	equ	0xFEA
 24537                           fsr0l	equ	0xFE9
 24538                           wreg	equ	0xFE8
 24539                           indf1	equ	0xFE7
 24540                           postinc1	equ	0xFE6
 24541                           postdec1	equ	0xFE5
 24542                           plusw1	equ	0xFE3
 24543                           fsr1h	equ	0xFE2
 24544                           fsr1l	equ	0xFE1
 24545                           indf2	equ	0xFDF
 24546                           postinc2	equ	0xFDE
 24547                           postdec2	equ	0xFDD
 24548                           plusw2	equ	0xFDB
 24549                           fsr2h	equ	0xFDA
 24550                           fsr2l	equ	0xFD9
 24551                           status	equ	0xFD8
 24552                           
 24553 ;; *************** function _ethernetController_getDeviceName *****************
 24554 ;; Defined at:
 24555 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 24556 ;; Parameters:    Size  Location     Type
 24557 ;;		None
 24558 ;; Auto vars:     Size  Location     Type
 24559 ;;  string         11    2[BANK0 ] const unsigned char [11]
 24560 ;; Return value:  Size  Location     Type
 24561 ;;                  2    0[BANK0 ] PTR unsigned char 
 24562 ;; Registers used:
 24563 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 24564 ;; Tracked objects:
 24565 ;;		On entry : 0/0
 24566 ;;		On exit  : 0/0
 24567 ;;		Unchanged: 0/0
 24568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24569 ;;      Params:         0       2       0       0       0       0       0       0       0
 24570 ;;      Locals:         0      11       0       0       0       0       0       0       0
 24571 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24572 ;;      Totals:         0      13       0       0       0       0       0       0       0
 24573 ;;Total ram usage:       13 bytes
 24574 ;; Hardware stack levels used:    1
 24575 ;; Hardware stack levels required when called:    4
 24576 ;; This function calls:
 24577 ;;		Nothing
 24578 ;; This function is called by:
 24579 ;;		_main
 24580 ;; This function uses a non-reentrant model
 24581 ;;
 24582                           
 24583                           	psect	text108
 24584  0055C6                     __ptext108:
 24585                           	opt stack 0
 24586  0055C6                     _ethernetController_getDeviceName:
 24587                           	opt stack 26
 24588                           
 24589                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 24590                           
 24591                           ; BSR set to: 15
 24592                           ;incstack = 0
 24593  0055C6  0E09               	movlw	low ethernetController_getDeviceName@F5998
 24594  0055C8  6EF6               	movwf	tblptrl,c
 24595  0055CA                     	if	1	;There is more than 1 active tblptr byte
 24596  0055CA  0E7A               	movlw	high ethernetController_getDeviceName@F5998
 24597  0055CC  6EF7               	movwf	tblptrh,c
 24598  0055CE                     	endif
 24599  0055CE                     	if	0	;There are less than 3 active tblptr bytes
 24600  0055CE                     	endif
 24601  0055CE  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 24602  0055D2  0E0A               	movlw	10
 24603  0055D4                     u12330:
 24604  0055D4  0009               	tblrd		*+
 24605  0055D6  CFF5 FFDE          	movff	tablat,postinc2
 24606  0055DA  06E8               	decf	wreg,f,c
 24607  0055DC  E2FB               	bc	u12330
 24608                           
 24609                           ;ENC424J600.c: 147: return (char*) string;
 24610  0055DE  0E62               	movlw	low ethernetController_getDeviceName@string
 24611  0055E0  0100               	movlb	0	; () banked
 24612  0055E2  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 24613  0055E4  0E00               	movlw	high ethernetController_getDeviceName@string
 24614  0055E6  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 24615  0055E8  0012               	return	
 24616  0055EA                     __end_of_ethernetController_getDeviceName:
 24617                           	opt stack 0
 24618                           tblptru	equ	0xFF8
 24619                           tblptrh	equ	0xFF7
 24620                           tblptrl	equ	0xFF6
 24621                           tablat	equ	0xFF5
 24622                           prodh	equ	0xFF4
 24623                           prodl	equ	0xFF3
 24624                           intcon	equ	0xFF2
 24625                           intcon3	equ	0xFF0
 24626                           indf0	equ	0xFEF
 24627                           postinc0	equ	0xFEE
 24628                           plusw0	equ	0xFEB
 24629                           fsr0h	equ	0xFEA
 24630                           fsr0l	equ	0xFE9
 24631                           wreg	equ	0xFE8
 24632                           indf1	equ	0xFE7
 24633                           postinc1	equ	0xFE6
 24634                           postdec1	equ	0xFE5
 24635                           plusw1	equ	0xFE3
 24636                           fsr1h	equ	0xFE2
 24637                           fsr1l	equ	0xFE1
 24638                           indf2	equ	0xFDF
 24639                           postinc2	equ	0xFDE
 24640                           postdec2	equ	0xFDD
 24641                           plusw2	equ	0xFDB
 24642                           fsr2h	equ	0xFDA
 24643                           fsr2l	equ	0xFD9
 24644                           status	equ	0xFD8
 24645                           
 24646 ;; *************** function ___awmod *****************
 24647 ;; Defined at:
 24648 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
 24649 ;; Parameters:    Size  Location     Type
 24650 ;;  dividend        2   14[BANK0 ] int 
 24651 ;;  divisor         2   16[BANK0 ] int 
 24652 ;; Auto vars:     Size  Location     Type
 24653 ;;  sign            1   19[BANK0 ] unsigned char 
 24654 ;;  counter         1   18[BANK0 ] unsigned char 
 24655 ;; Return value:  Size  Location     Type
 24656 ;;                  2   14[BANK0 ] int 
 24657 ;; Registers used:
 24658 ;;		wreg, status,2, status,0
 24659 ;; Tracked objects:
 24660 ;;		On entry : 0/0
 24661 ;;		On exit  : 0/0
 24662 ;;		Unchanged: 0/0
 24663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24664 ;;      Params:         0       4       0       0       0       0       0       0       0
 24665 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24666 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24667 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24668 ;;Total ram usage:        6 bytes
 24669 ;; Hardware stack levels used:    1
 24670 ;; Hardware stack levels required when called:    4
 24671 ;; This function calls:
 24672 ;;		Nothing
 24673 ;; This function is called by:
 24674 ;;		_main
 24675 ;; This function uses a non-reentrant model
 24676 ;;
 24677                           
 24678                           	psect	text109
 24679  004A78                     __ptext109:
 24680                           	opt stack 0
 24681  004A78                     ___awmod:
 24682                           	opt stack 26
 24683                           
 24684                           ; BSR set to: 0
 24685                           ;incstack = 0
 24686  004A78  0E00               	movlw	0
 24687  004A7A  0100               	movlb	0	; () banked
 24688  004A7C  6F73               	movwf	___awmod@sign& (0+255),b
 24689                           
 24690                           ; BSR set to: 0
 24691  004A7E  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
 24692  004A80  D006               	goto	l1394
 24693                           
 24694                           ; BSR set to: 0
 24695  004A82  6D6E               	negf	___awmod@dividend& (0+255),b
 24696  004A84  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 24697  004A86  B0D8               	btfsc	status,0,c
 24698  004A88  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 24699                           
 24700                           ; BSR set to: 0
 24701  004A8A  0E01               	movlw	1
 24702  004A8C  6F73               	movwf	___awmod@sign& (0+255),b
 24703  004A8E                     l1394:
 24704                           
 24705                           ; BSR set to: 0
 24706                           
 24707                           ; BSR set to: 0
 24708  004A8E  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 24709  004A90  D004               	goto	l1395
 24710                           
 24711                           ; BSR set to: 0
 24712  004A92  6D70               	negf	___awmod@divisor& (0+255),b
 24713  004A94  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
 24714  004A96  B0D8               	btfsc	status,0,c
 24715  004A98  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
 24716  004A9A                     l1395:
 24717                           
 24718                           ; BSR set to: 0
 24719                           
 24720                           ; BSR set to: 0
 24721  004A9A  5170               	movf	___awmod@divisor& (0+255),w,b
 24722  004A9C  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 24723  004A9E  B4D8               	btfsc	status,2,c
 24724  004AA0  D018               	goto	l1402
 24725                           
 24726                           ; BSR set to: 0
 24727  004AA2  0E01               	movlw	1
 24728  004AA4  6F72               	movwf	___awmod@counter& (0+255),b
 24729  004AA6  D004               	goto	l1397
 24730  004AA8                     
 24731                           ; BSR set to: 0
 24732                           
 24733                           ; BSR set to: 0
 24734  004AA8  90D8               	bcf	status,0,c
 24735  004AAA  3770               	rlcf	___awmod@divisor& (0+255),f,b
 24736  004AAC  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 24737  004AAE  2B72               	incf	___awmod@counter& (0+255),f,b
 24738  004AB0                     l1397:
 24739                           
 24740                           ; BSR set to: 0
 24741                           
 24742                           ; BSR set to: 0
 24743  004AB0  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
 24744  004AB2  D7FA               	goto	l1398
 24745  004AB4                     u12600:
 24746                           
 24747                           ; BSR set to: 0
 24748                           
 24749                           ; BSR set to: 0
 24750                           
 24751                           ; BSR set to: 0
 24752  004AB4  5170               	movf	___awmod@divisor& (0+255),w,b
 24753  004AB6  5D6E               	subwf	___awmod@dividend& (0+255),w,b
 24754  004AB8  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 24755  004ABA  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 24756  004ABC  A0D8               	btfss	status,0,c
 24757  004ABE  D004               	goto	l1401
 24758                           
 24759                           ; BSR set to: 0
 24760  004AC0  5170               	movf	___awmod@divisor& (0+255),w,b
 24761  004AC2  5F6E               	subwf	___awmod@dividend& (0+255),f,b
 24762  004AC4  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
 24763  004AC6  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 24764  004AC8                     l1401:
 24765                           
 24766                           ; BSR set to: 0
 24767                           
 24768                           ; BSR set to: 0
 24769  004AC8  90D8               	bcf	status,0,c
 24770  004ACA  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 24771  004ACC  3370               	rrcf	___awmod@divisor& (0+255),f,b
 24772                           
 24773                           ; BSR set to: 0
 24774  004ACE  2F72               	decfsz	___awmod@counter& (0+255),f,b
 24775  004AD0  D7F1               	goto	u12600
 24776  004AD2                     l1402:
 24777                           
 24778                           ; BSR set to: 0
 24779                           
 24780                           ; BSR set to: 0
 24781                           
 24782                           ; BSR set to: 0
 24783  004AD2  5173               	movf	___awmod@sign& (0+255),w,b
 24784  004AD4  B4D8               	btfsc	status,2,c
 24785  004AD6  D004               	goto	l1403
 24786                           
 24787                           ; BSR set to: 0
 24788  004AD8  6D6E               	negf	___awmod@dividend& (0+255),b
 24789  004ADA  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
 24790  004ADC  B0D8               	btfsc	status,0,c
 24791  004ADE  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
 24792  004AE0                     l1403:
 24793                           
 24794                           ; BSR set to: 0
 24795                           
 24796                           ; BSR set to: 0
 24797  004AE0  C06E  F06E         	movff	___awmod@dividend,?___awmod
 24798  004AE4  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
 24799  004AE8  0012               	return	
 24800  004AEA                     __end_of___awmod:
 24801                           	opt stack 0
 24802                           tblptru	equ	0xFF8
 24803                           tblptrh	equ	0xFF7
 24804                           tblptrl	equ	0xFF6
 24805                           tablat	equ	0xFF5
 24806                           prodh	equ	0xFF4
 24807                           prodl	equ	0xFF3
 24808                           intcon	equ	0xFF2
 24809                           intcon3	equ	0xFF0
 24810                           indf0	equ	0xFEF
 24811                           postinc0	equ	0xFEE
 24812                           plusw0	equ	0xFEB
 24813                           fsr0h	equ	0xFEA
 24814                           fsr0l	equ	0xFE9
 24815                           wreg	equ	0xFE8
 24816                           indf1	equ	0xFE7
 24817                           postinc1	equ	0xFE6
 24818                           postdec1	equ	0xFE5
 24819                           plusw1	equ	0xFE3
 24820                           fsr1h	equ	0xFE2
 24821                           fsr1l	equ	0xFE1
 24822                           indf2	equ	0xFDF
 24823                           postinc2	equ	0xFDE
 24824                           postdec2	equ	0xFDD
 24825                           plusw2	equ	0xFDB
 24826                           fsr2h	equ	0xFDA
 24827                           fsr2l	equ	0xFD9
 24828                           status	equ	0xFD8
 24829                           
 24830 ;; *************** function _UARTInit *****************
 24831 ;; Defined at:
 24832 ;;		line 26 in file "src/system/uart.c"
 24833 ;; Parameters:    Size  Location     Type
 24834 ;;		None
 24835 ;; Auto vars:     Size  Location     Type
 24836 ;;		None
 24837 ;; Return value:  Size  Location     Type
 24838 ;;                  1    wreg      void 
 24839 ;; Registers used:
 24840 ;;		wreg, status,2
 24841 ;; Tracked objects:
 24842 ;;		On entry : 0/0
 24843 ;;		On exit  : 0/0
 24844 ;;		Unchanged: 0/0
 24845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24846 ;;      Params:         0       0       0       0       0       0       0       0       0
 24847 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24849 ;;      Totals:         0       0       0       0       0       0       0       0       0
 24850 ;;Total ram usage:        0 bytes
 24851 ;; Hardware stack levels used:    1
 24852 ;; Hardware stack levels required when called:    4
 24853 ;; This function calls:
 24854 ;;		Nothing
 24855 ;; This function is called by:
 24856 ;;		_main
 24857 ;; This function uses a non-reentrant model
 24858 ;;
 24859                           
 24860                           	psect	text110
 24861  005728                     __ptext110:
 24862                           	opt stack 0
 24863  005728                     _UARTInit:
 24864                           	opt stack 26
 24865                           
 24866                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 24867                           
 24868                           ; BSR set to: 0
 24869                           ;incstack = 0
 24870  005728  8AAC               	bsf	4012,5,c	;volatile
 24871                           
 24872                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 24873  00572A  98AC               	bcf	4012,4,c	;volatile
 24874                           
 24875                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 24876  00572C  8EAB               	bsf	4011,7,c	;volatile
 24877                           
 24878                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 24879  00572E  8CAC               	bsf	4012,6,c	;volatile
 24880                           
 24881                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 24882  005730  80AC               	bsf	4012,0,c	;volatile
 24883                           
 24884                           ;uart.c: 32: SPBRG = 3;
 24885  005732  0E03               	movlw	3
 24886  005734  6EAF               	movwf	4015,c	;volatile
 24887  005736  0012               	return		;funcret
 24888  005738                     __end_of_UARTInit:
 24889                           	opt stack 0
 24890                           tblptru	equ	0xFF8
 24891                           tblptrh	equ	0xFF7
 24892                           tblptrl	equ	0xFF6
 24893                           tablat	equ	0xFF5
 24894                           prodh	equ	0xFF4
 24895                           prodl	equ	0xFF3
 24896                           intcon	equ	0xFF2
 24897                           intcon3	equ	0xFF0
 24898                           indf0	equ	0xFEF
 24899                           postinc0	equ	0xFEE
 24900                           plusw0	equ	0xFEB
 24901                           fsr0h	equ	0xFEA
 24902                           fsr0l	equ	0xFE9
 24903                           wreg	equ	0xFE8
 24904                           indf1	equ	0xFE7
 24905                           postinc1	equ	0xFE6
 24906                           postdec1	equ	0xFE5
 24907                           plusw1	equ	0xFE3
 24908                           fsr1h	equ	0xFE2
 24909                           fsr1l	equ	0xFE1
 24910                           indf2	equ	0xFDF
 24911                           postinc2	equ	0xFDE
 24912                           postdec2	equ	0xFDD
 24913                           plusw2	equ	0xFDB
 24914                           fsr2h	equ	0xFDA
 24915                           fsr2l	equ	0xFD9
 24916                           status	equ	0xFD8
 24917                           
 24918 ;; *************** function _ISR *****************
 24919 ;; Defined at:
 24920 ;;		line 269 in file "src/system/main.c"
 24921 ;; Parameters:    Size  Location     Type
 24922 ;;		None
 24923 ;; Auto vars:     Size  Location     Type
 24924 ;;		None
 24925 ;; Return value:  Size  Location     Type
 24926 ;;                  1    wreg      void 
 24927 ;; Registers used:
 24928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24929 ;; Tracked objects:
 24930 ;;		On entry : 0/0
 24931 ;;		On exit  : 0/0
 24932 ;;		Unchanged: 0/0
 24933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24934 ;;      Params:         0       0       0       0       0       0       0       0       0
 24935 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24936 ;;      Temps:         19       0       0       0       0       0       0       0       0
 24937 ;;      Totals:        19       0       0       0       0       0       0       0       0
 24938 ;;Total ram usage:       19 bytes
 24939 ;; Hardware stack levels used:    1
 24940 ;; Hardware stack levels required when called:    3
 24941 ;; This function calls:
 24942 ;;		_buttonHandler
 24943 ;;		_sevenSegmentUpdate
 24944 ;;		_updateTime
 24945 ;; This function is called by:
 24946 ;;		Interrupt level 2
 24947 ;; This function uses a non-reentrant model
 24948 ;;
 24949                           
 24950                           	psect	intcode
 24951  000008                     __pintcode:
 24952                           	opt stack 0
 24953  000008                     _ISR:
 24954                           	opt stack 17
 24955                           
 24956                           ;incstack = 0
 24957  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 24958  00000A  CFFA F017          	movff	pclath,??_ISR+1
 24959  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 24960  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 24961  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 24962  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 24963  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 24964  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 24965  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 24966  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 24967  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 24968  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 24969  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 24970  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 24971  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 24972  000042  C050  F025         	movff	btemp,??_ISR+15
 24973  000046  C051  F026         	movff	btemp+1,??_ISR+16
 24974  00004A  C052  F027         	movff	btemp+2,??_ISR+17
 24975  00004E  C053  F028         	movff	btemp+3,??_ISR+18
 24976                           
 24977                           ;main.c: 271: if (PIR1bits.CCP1IF) {
 24978  000052  A49E               	btfss	3998,2,c	;volatile
 24979  000054  D012               	goto	i2l714
 24980                           
 24981                           ;main.c: 272: PIR1bits.CCP1IF = 0;
 24982  000056  949E               	bcf	3998,2,c	;volatile
 24983                           
 24984                           ;main.c: 273: PORTBbits.RB6 = ~PORTBbits.RB6;
 24985  000058  AC81               	btfss	3969,6,c	;volatile
 24986  00005A  D002               	goto	i2u865_40
 24987  00005C  0E01               	movlw	1
 24988  00005E  D001               	goto	i2u865_46
 24989  000060                     i2u865_40:
 24990  000060  0E00               	movlw	0
 24991  000062                     i2u865_46:
 24992  000062  0AFF               	xorlw	255
 24993  000064  6E16               	movwf	??_ISR& (0+255),c
 24994  000066  3A16               	swapf	??_ISR,f,c
 24995  000068  4616               	rlncf	??_ISR,f,c
 24996  00006A  4616               	rlncf	??_ISR,f,c
 24997  00006C  5081               	movf	3969,w,c	;volatile
 24998  00006E  1816               	xorwf	??_ISR,w,c
 24999  000070  0BBF               	andlw	-65
 25000  000072  1816               	xorwf	??_ISR,w,c
 25001  000074  6E81               	movwf	3969,c	;volatile
 25002                           
 25003                           ;main.c: 274: updateTime();
 25004  000076  ECB1  F02B         	call	_updateTime	;wreg free
 25005  00007A                     i2l714:
 25006                           
 25007                           ;main.c: 275: }
 25008                           ;main.c: 277: if (INTCONbits.TMR0IF) {
 25009  00007A  A4F2               	btfss	intcon,2,c	;volatile
 25010  00007C  D00D               	goto	i2l715
 25011                           
 25012                           ;main.c: 278: INTCONbits.TMR0IF = 0;
 25013  00007E  94F2               	bcf	intcon,2,c	;volatile
 25014                           
 25015                           ;main.c: 279: sevenSegmentUpdate(numberToDisplay);
 25016  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 25017  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 25018  000088  ECDC  F01F         	call	_sevenSegmentUpdate	;wreg free
 25019                           
 25020                           ;main.c: 280: buttonHandler(&buttonState);
 25021  00008C  0ECA               	movlw	low _buttonState
 25022  00008E  6E01               	movwf	buttonHandler@state,c
 25023  000090  0E01               	movlw	high _buttonState
 25024  000092  6E02               	movwf	buttonHandler@state+1,c
 25025  000094  ECED  F020         	call	_buttonHandler	;wreg free
 25026  000098                     i2l715:
 25027                           
 25028                           ;main.c: 283: }
 25029                           ;main.c: 285: if (INTCON3bits.INT2IF) {
 25030  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 25031                           
 25032                           ;main.c: 286: INTCON3bits.INT2IF = 0;
 25033  00009A  92F0               	bcf	intcon3,1,c	;volatile
 25034                           
 25035                           ;main.c: 293: }
 25036                           ;main.c: 294: if (RCIF) {
 25037  00009C  C028  F053         	movff	??_ISR+18,btemp+3
 25038  0000A0  C027  F052         	movff	??_ISR+17,btemp+2
 25039  0000A4  C026  F051         	movff	??_ISR+16,btemp+1
 25040  0000A8  C025  F050         	movff	??_ISR+15,btemp
 25041  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 25042  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 25043  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 25044  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 25045  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 25046  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 25047  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 25048  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 25049  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 25050  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 25051  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 25052  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 25053  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 25054  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 25055  0000E4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 25056  0000E6  0011               	retfie		f
 25057  0000E8                     __end_of_ISR:
 25058                           	opt stack 0
 25059                           pclatu	equ	0xFFB
 25060                           pclath	equ	0xFFA
 25061                           tblptru	equ	0xFF8
 25062                           tblptrh	equ	0xFF7
 25063                           tblptrl	equ	0xFF6
 25064                           tablat	equ	0xFF5
 25065                           prodh	equ	0xFF4
 25066                           prodl	equ	0xFF3
 25067                           intcon	equ	0xFF2
 25068                           intcon3	equ	0xFF0
 25069                           indf0	equ	0xFEF
 25070                           postinc0	equ	0xFEE
 25071                           plusw0	equ	0xFEB
 25072                           fsr0h	equ	0xFEA
 25073                           fsr0l	equ	0xFE9
 25074                           wreg	equ	0xFE8
 25075                           indf1	equ	0xFE7
 25076                           postinc1	equ	0xFE6
 25077                           postdec1	equ	0xFE5
 25078                           plusw1	equ	0xFE3
 25079                           fsr1h	equ	0xFE2
 25080                           fsr1l	equ	0xFE1
 25081                           indf2	equ	0xFDF
 25082                           postinc2	equ	0xFDE
 25083                           postdec2	equ	0xFDD
 25084                           plusw2	equ	0xFDB
 25085                           fsr2h	equ	0xFDA
 25086                           fsr2l	equ	0xFD9
 25087                           status	equ	0xFD8
 25088                           
 25089 ;; *************** function _updateTime *****************
 25090 ;; Defined at:
 25091 ;;		line 30 in file "src/stack/time.c"
 25092 ;; Parameters:    Size  Location     Type
 25093 ;;		None
 25094 ;; Auto vars:     Size  Location     Type
 25095 ;;		None
 25096 ;; Return value:  Size  Location     Type
 25097 ;;                  1    wreg      void 
 25098 ;; Registers used:
 25099 ;;		wreg, status,2, status,0
 25100 ;; Tracked objects:
 25101 ;;		On entry : 0/0
 25102 ;;		On exit  : 0/0
 25103 ;;		Unchanged: 0/0
 25104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25105 ;;      Params:         0       0       0       0       0       0       0       0       0
 25106 ;;      Locals:         0       0       0       0       0       0       0       0       0
 25107 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25108 ;;      Totals:         0       0       0       0       0       0       0       0       0
 25109 ;;Total ram usage:        0 bytes
 25110 ;; Hardware stack levels used:    1
 25111 ;; This function calls:
 25112 ;;		Nothing
 25113 ;; This function is called by:
 25114 ;;		_ISR
 25115 ;; This function uses a non-reentrant model
 25116 ;;
 25117                           
 25118                           	psect	text112
 25119  005762                     __ptext112:
 25120                           	opt stack 0
 25121  005762                     _updateTime:
 25122                           	opt stack 19
 25123                           
 25124                           ;time.c: 31: time++;
 25125                           
 25126                           ;incstack = 0
 25127  005762  0E01               	movlw	1
 25128  005764  2629               	addwf	_time,f,c	;volatile
 25129  005766  0E00               	movlw	0
 25130  005768  222A               	addwfc	_time+1,f,c	;volatile
 25131  00576A  222B               	addwfc	_time+2,f,c	;volatile
 25132  00576C  222C               	addwfc	_time+3,f,c	;volatile
 25133  00576E  0012               	return		;funcret
 25134  005770                     __end_of_updateTime:
 25135                           	opt stack 0
 25136                           pclatu	equ	0xFFB
 25137                           pclath	equ	0xFFA
 25138                           tblptru	equ	0xFF8
 25139                           tblptrh	equ	0xFF7
 25140                           tblptrl	equ	0xFF6
 25141                           tablat	equ	0xFF5
 25142                           prodh	equ	0xFF4
 25143                           prodl	equ	0xFF3
 25144                           intcon	equ	0xFF2
 25145                           intcon3	equ	0xFF0
 25146                           indf0	equ	0xFEF
 25147                           postinc0	equ	0xFEE
 25148                           plusw0	equ	0xFEB
 25149                           fsr0h	equ	0xFEA
 25150                           fsr0l	equ	0xFE9
 25151                           wreg	equ	0xFE8
 25152                           indf1	equ	0xFE7
 25153                           postinc1	equ	0xFE6
 25154                           postdec1	equ	0xFE5
 25155                           plusw1	equ	0xFE3
 25156                           fsr1h	equ	0xFE2
 25157                           fsr1l	equ	0xFE1
 25158                           indf2	equ	0xFDF
 25159                           postinc2	equ	0xFDE
 25160                           postdec2	equ	0xFDD
 25161                           plusw2	equ	0xFDB
 25162                           fsr2h	equ	0xFDA
 25163                           fsr2l	equ	0xFD9
 25164                           status	equ	0xFD8
 25165                           
 25166 ;; *************** function _sevenSegmentUpdate *****************
 25167 ;; Defined at:
 25168 ;;		line 41 in file "src/system/sevenseg.c"
 25169 ;; Parameters:    Size  Location     Type
 25170 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 25171 ;; Auto vars:     Size  Location     Type
 25172 ;;  i               1   20[COMRAM] unsigned char 
 25173 ;; Return value:  Size  Location     Type
 25174 ;;                  1    wreg      void 
 25175 ;; Registers used:
 25176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25177 ;; Tracked objects:
 25178 ;;		On entry : 0/0
 25179 ;;		On exit  : 0/0
 25180 ;;		Unchanged: 0/0
 25181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25182 ;;      Params:         2       0       0       0       0       0       0       0       0
 25183 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25184 ;;      Temps:          2       0       0       0       0       0       0       0       0
 25185 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25186 ;;Total ram usage:        7 bytes
 25187 ;; Hardware stack levels used:    1
 25188 ;; Hardware stack levels required when called:    2
 25189 ;; This function calls:
 25190 ;;		_parseNumber
 25191 ;; This function is called by:
 25192 ;;		_ISR
 25193 ;; This function uses a non-reentrant model
 25194 ;;
 25195                           
 25196                           	psect	text113
 25197  003FB8                     __ptext113:
 25198                           	opt stack 0
 25199  003FB8                     _sevenSegmentUpdate:
 25200                           	opt stack 17
 25201                           
 25202                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 25203                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 25204                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 25205                           
 25206                           ;incstack = 0
 25207  003FB8  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25208  003FBC  0E01               	movlw	1
 25209  003FBE  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25210  003FC0  2A11               	incf	??_sevenSegmentUpdate,f,c
 25211  003FC2  D002               	goto	i2u827_44
 25212  003FC4                     i2u827_45:
 25213  003FC4  90D8               	bcf	status,0,c
 25214  003FC6  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25215  003FC8                     i2u827_44:
 25216  003FC8  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25217  003FCA  D7FC               	goto	i2u827_45
 25218  003FCC  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25219  003FCE  0AFF               	xorlw	255
 25220  003FD0  1682               	andwf	3970,f,c	;volatile
 25221                           
 25222                           ;sevenseg.c: 46: PORTA = 0x00;
 25223  003FD2  0E00               	movlw	0
 25224  003FD4  6E80               	movwf	3968,c	;volatile
 25225                           
 25226                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 25227  003FD6  0E02               	movlw	2
 25228  003FD8  6045               	cpfslt	sevenSegmentUpdate@digitPointer,c
 25229  003FDA  D007               	goto	i2l747
 25230  003FDC  0E01               	movlw	1
 25231  003FDE  2445               	addwf	sevenSegmentUpdate@digitPointer,w,c
 25232  003FE0  6E13               	movwf	_sevenSegmentUpdate$2491,c
 25233  003FE2  6A14               	clrf	_sevenSegmentUpdate$2491+1,c
 25234  003FE4  0E00               	movlw	0
 25235  003FE6  2214               	addwfc	_sevenSegmentUpdate$2491+1,f,c
 25236  003FE8  D004               	goto	i2l749
 25237  003FEA                     i2l747:
 25238  003FEA  0E00               	movlw	0
 25239  003FEC  6E14               	movwf	_sevenSegmentUpdate$2491+1,c
 25240  003FEE  0E00               	movlw	0
 25241  003FF0  6E13               	movwf	_sevenSegmentUpdate$2491,c
 25242  003FF2                     i2l749:
 25243  003FF2  C013  F045         	movff	_sevenSegmentUpdate$2491,sevenSegmentUpdate@digitPointer
 25244                           
 25245                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 25246  003FF6  0EE8               	movlw	232
 25247  003FF8  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 25248  003FFA  0E03               	movlw	3
 25249  003FFC  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 25250  003FFE  B0D8               	btfsc	status,0,c
 25251  004000  0012               	return	
 25252                           
 25253                           ;sevenseg.c: 51: }
 25254                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 25255                           
 25256                           ;sevenseg.c: 50: return;
 25257  004002  0E00               	movlw	0
 25258  004004  6E15               	movwf	sevenSegmentUpdate@i,c
 25259  004006                     i2l7581:
 25260  004006  0E02               	movlw	2
 25261  004008  6415               	cpfsgt	sevenSegmentUpdate@i,c
 25262  00400A  D001               	goto	i2l752
 25263  00400C  D013               	goto	i2u831_40
 25264  00400E                     i2l752:
 25265                           
 25266                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 25267  00400E  5015               	movf	sevenSegmentUpdate@i,w,c
 25268  004010  0D01               	mullw	1
 25269  004012  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25270  004014  24F3               	addwf	prodl,w,c
 25271  004016  6ED9               	movwf	fsr2l,c
 25272  004018  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25273  00401A  20F4               	addwfc	prodh,w,c
 25274  00401C  6EDA               	movwf	fsr2h,c
 25275  00401E  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 25276  004022  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 25277  004026  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 25278  00402A  ECD6  F023         	call	_parseNumber	;wreg free
 25279  00402E  6EDF               	movwf	indf2,c
 25280  004030  2A15               	incf	sevenSegmentUpdate@i,f,c
 25281  004032  D7E9               	goto	i2l7581
 25282  004034                     i2u831_40:
 25283                           
 25284                           ;sevenseg.c: 54: }
 25285                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 25286  004034  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 25287  004038  0E01               	movlw	1
 25288  00403A  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 25289  00403C  2A11               	incf	??_sevenSegmentUpdate,f,c
 25290  00403E  D002               	goto	i2u832_44
 25291  004040                     i2u832_45:
 25292  004040  90D8               	bcf	status,0,c
 25293  004042  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 25294  004044                     i2u832_44:
 25295  004044  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 25296  004046  D7FC               	goto	i2u832_45
 25297  004048  5012               	movf	??_sevenSegmentUpdate+1,w,c
 25298  00404A  1282               	iorwf	3970,f,c	;volatile
 25299                           
 25300                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 25301  00404C  5045               	movf	sevenSegmentUpdate@digitPointer,w,c
 25302  00404E  0D01               	mullw	1
 25303  004050  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 25304  004052  24F3               	addwf	prodl,w,c
 25305  004054  6ED9               	movwf	fsr2l,c
 25306  004056  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 25307  004058  20F4               	addwfc	prodh,w,c
 25308  00405A  6EDA               	movwf	fsr2h,c
 25309  00405C  50DF               	movf	indf2,w,c
 25310  00405E  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 25311  004060  5011               	movf	??_sevenSegmentUpdate,w,c
 25312  004062  0D01               	mullw	1
 25313  004064  0ECB               	movlw	low _sevenSegCharacters
 25314  004066  24F3               	addwf	prodl,w,c
 25315  004068  6ED9               	movwf	fsr2l,c
 25316  00406A  0E01               	movlw	high _sevenSegCharacters
 25317  00406C  20F4               	addwfc	prodh,w,c
 25318  00406E  6EDA               	movwf	fsr2h,c
 25319  004070  50DF               	movf	indf2,w,c
 25320  004072  6E80               	movwf	3968,c	;volatile
 25321  004074  0012               	return		;funcret
 25322  004076                     __end_of_sevenSegmentUpdate:
 25323                           	opt stack 0
 25324                           pclatu	equ	0xFFB
 25325                           pclath	equ	0xFFA
 25326                           tblptru	equ	0xFF8
 25327                           tblptrh	equ	0xFF7
 25328                           tblptrl	equ	0xFF6
 25329                           tablat	equ	0xFF5
 25330                           prodh	equ	0xFF4
 25331                           prodl	equ	0xFF3
 25332                           intcon	equ	0xFF2
 25333                           intcon3	equ	0xFF0
 25334                           indf0	equ	0xFEF
 25335                           postinc0	equ	0xFEE
 25336                           plusw0	equ	0xFEB
 25337                           fsr0h	equ	0xFEA
 25338                           fsr0l	equ	0xFE9
 25339                           wreg	equ	0xFE8
 25340                           indf1	equ	0xFE7
 25341                           postinc1	equ	0xFE6
 25342                           postdec1	equ	0xFE5
 25343                           plusw1	equ	0xFE3
 25344                           fsr1h	equ	0xFE2
 25345                           fsr1l	equ	0xFE1
 25346                           indf2	equ	0xFDF
 25347                           postinc2	equ	0xFDE
 25348                           postdec2	equ	0xFDD
 25349                           plusw2	equ	0xFDB
 25350                           fsr2h	equ	0xFDA
 25351                           fsr2l	equ	0xFD9
 25352                           status	equ	0xFD8
 25353                           
 25354 ;; *************** function _parseNumber *****************
 25355 ;; Defined at:
 25356 ;;		line 59 in file "src/system/sevenseg.c"
 25357 ;; Parameters:    Size  Location     Type
 25358 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 25359 ;;  digit           1    9[COMRAM] unsigned char 
 25360 ;; Auto vars:     Size  Location     Type
 25361 ;;  hundreds        1   13[COMRAM] unsigned char 
 25362 ;;  tens            1   12[COMRAM] unsigned char 
 25363 ;;  ones            1   11[COMRAM] unsigned char 
 25364 ;; Return value:  Size  Location     Type
 25365 ;;                  1    wreg      unsigned char 
 25366 ;; Registers used:
 25367 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 25368 ;; Tracked objects:
 25369 ;;		On entry : 0/0
 25370 ;;		On exit  : 0/0
 25371 ;;		Unchanged: 0/0
 25372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25373 ;;      Params:         3       0       0       0       0       0       0       0       0
 25374 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25375 ;;      Temps:          1       0       0       0       0       0       0       0       0
 25376 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25377 ;;Total ram usage:        7 bytes
 25378 ;; Hardware stack levels used:    1
 25379 ;; Hardware stack levels required when called:    1
 25380 ;; This function calls:
 25381 ;;		i2___lwdiv
 25382 ;; This function is called by:
 25383 ;;		_sevenSegmentUpdate
 25384 ;; This function uses a non-reentrant model
 25385 ;;
 25386                           
 25387                           	psect	text114
 25388  0047AC                     __ptext114:
 25389                           	opt stack 0
 25390  0047AC                     _parseNumber:
 25391                           	opt stack 17
 25392                           
 25393                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 25394                           
 25395                           ;incstack = 0
 25396  0047AC  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 25397  0047B0  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 25398  0047B4  0E00               	movlw	0
 25399  0047B6  6E04               	movwf	i2___lwdiv@divisor+1,c
 25400  0047B8  0E64               	movlw	100
 25401  0047BA  6E03               	movwf	i2___lwdiv@divisor,c
 25402  0047BC  EC85  F027         	call	i2___lwdiv	;wreg free
 25403  0047C0  5001               	movf	?i2___lwdiv,w,c
 25404  0047C2  6E0E               	movwf	parseNumber@hundreds,c
 25405                           
 25406                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 25407  0047C4  500E               	movf	parseNumber@hundreds,w,c
 25408  0047C6  0D64               	mullw	100
 25409  0047C8  1EF3               	comf	prodl,f,c
 25410  0047CA  1EF4               	comf	prodh,f,c
 25411  0047CC  4AF3               	infsnz	prodl,f,c
 25412  0047CE  2AF4               	incf	prodh,f,c
 25413  0047D0  5008               	movf	parseNumber@numberToDisplay,w,c
 25414  0047D2  24F3               	addwf	prodl,w,c
 25415  0047D4  6E01               	movwf	i2___lwdiv@dividend,c
 25416  0047D6  5009               	movf	parseNumber@numberToDisplay+1,w,c
 25417  0047D8  20F4               	addwfc	prodh,w,c
 25418  0047DA  6E02               	movwf	i2___lwdiv@dividend+1,c
 25419  0047DC  0E00               	movlw	0
 25420  0047DE  6E04               	movwf	i2___lwdiv@divisor+1,c
 25421  0047E0  0E0A               	movlw	10
 25422  0047E2  6E03               	movwf	i2___lwdiv@divisor,c
 25423  0047E4  EC85  F027         	call	i2___lwdiv	;wreg free
 25424  0047E8  5001               	movf	?i2___lwdiv,w,c
 25425  0047EA  6E0D               	movwf	parseNumber@tens,c
 25426                           
 25427                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 25428  0047EC  500D               	movf	parseNumber@tens,w,c
 25429  0047EE  0D0A               	mullw	10
 25430  0047F0  CFF3 F00B          	movff	prodl,??_parseNumber
 25431  0047F4  500E               	movf	parseNumber@hundreds,w,c
 25432  0047F6  0D64               	mullw	100
 25433  0047F8  50F3               	movf	prodl,w,c
 25434  0047FA  240B               	addwf	??_parseNumber,w,c
 25435  0047FC  0800               	sublw	0
 25436  0047FE  2408               	addwf	parseNumber@numberToDisplay,w,c
 25437  004800  6E0C               	movwf	parseNumber@ones,c
 25438                           
 25439                           ;sevenseg.c: 64: switch (digit) {
 25440  004802  D008               	goto	i2l756
 25441  004804                     
 25442                           ;sevenseg.c: 66: return ones;
 25443  004804  500C               	movf	parseNumber@ones,w,c
 25444  004806  0012               	return	
 25445  004808                     
 25446                           ;sevenseg.c: 68: return tens;
 25447  004808  500D               	movf	parseNumber@tens,w,c
 25448  00480A  0012               	return	
 25449  00480C                     
 25450                           ;sevenseg.c: 70: return hundreds;
 25451  00480C  500E               	movf	parseNumber@hundreds,w,c
 25452  00480E  0012               	return	
 25453  004810  0E00               	movlw	0
 25454                           
 25455                           ;sevenseg.c: 72: }
 25456  004812  0012               	return	
 25457  004814                     i2l756:
 25458  004814  500A               	movf	parseNumber@digit,w,c
 25459                           
 25460                           ; Switch size 1, requested type "space"
 25461                           ; Number of cases is 3, Range of values is 0 to 2
 25462                           ; switch strategies available:
 25463                           ; Name         Instructions Cycles
 25464                           ; simple_byte           10     6 (average)
 25465                           ;	Chosen strategy is simple_byte
 25466  004816  0A00               	xorlw	0	; case 0
 25467  004818  B4D8               	btfsc	status,2,c
 25468  00481A  D7F8               	goto	i2l760
 25469  00481C  0A01               	xorlw	1	; case 1
 25470  00481E  B4D8               	btfsc	status,2,c
 25471  004820  D7F3               	goto	i2l759
 25472  004822  0A03               	xorlw	3	; case 2
 25473  004824  B4D8               	btfsc	status,2,c
 25474  004826  D7EE               	goto	i2l757
 25475  004828  D7F3               	goto	i2l761
 25476  00482A                     __end_of_parseNumber:
 25477                           	opt stack 0
 25478                           pclatu	equ	0xFFB
 25479                           pclath	equ	0xFFA
 25480                           tblptru	equ	0xFF8
 25481                           tblptrh	equ	0xFF7
 25482                           tblptrl	equ	0xFF6
 25483                           tablat	equ	0xFF5
 25484                           prodh	equ	0xFF4
 25485                           prodl	equ	0xFF3
 25486                           intcon	equ	0xFF2
 25487                           intcon3	equ	0xFF0
 25488                           indf0	equ	0xFEF
 25489                           postinc0	equ	0xFEE
 25490                           plusw0	equ	0xFEB
 25491                           fsr0h	equ	0xFEA
 25492                           fsr0l	equ	0xFE9
 25493                           wreg	equ	0xFE8
 25494                           indf1	equ	0xFE7
 25495                           postinc1	equ	0xFE6
 25496                           postdec1	equ	0xFE5
 25497                           plusw1	equ	0xFE3
 25498                           fsr1h	equ	0xFE2
 25499                           fsr1l	equ	0xFE1
 25500                           indf2	equ	0xFDF
 25501                           postinc2	equ	0xFDE
 25502                           postdec2	equ	0xFDD
 25503                           plusw2	equ	0xFDB
 25504                           fsr2h	equ	0xFDA
 25505                           fsr2l	equ	0xFD9
 25506                           status	equ	0xFD8
 25507                           
 25508 ;; *************** function i2___lwdiv *****************
 25509 ;; Defined at:
 25510 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 25511 ;; Parameters:    Size  Location     Type
 25512 ;;  dividend        2    0[COMRAM] unsigned int 
 25513 ;;  divisor         2    2[COMRAM] unsigned int 
 25514 ;; Auto vars:     Size  Location     Type
 25515 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 25516 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 25517 ;; Return value:  Size  Location     Type
 25518 ;;                  2    0[COMRAM] unsigned int 
 25519 ;; Registers used:
 25520 ;;		wreg, status,2, status,0
 25521 ;; Tracked objects:
 25522 ;;		On entry : 0/0
 25523 ;;		On exit  : 0/0
 25524 ;;		Unchanged: 0/0
 25525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25526 ;;      Params:         4       0       0       0       0       0       0       0       0
 25527 ;;      Locals:         3       0       0       0       0       0       0       0       0
 25528 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25529 ;;      Totals:         7       0       0       0       0       0       0       0       0
 25530 ;;Total ram usage:        7 bytes
 25531 ;; Hardware stack levels used:    1
 25532 ;; This function calls:
 25533 ;;		Nothing
 25534 ;; This function is called by:
 25535 ;;		_parseNumber
 25536 ;; This function uses a non-reentrant model
 25537 ;;
 25538                           
 25539                           	psect	text115
 25540  004F0A                     __ptext115:
 25541                           	opt stack 0
 25542  004F0A                     i2___lwdiv:
 25543                           	opt stack 17
 25544                           
 25545                           ;incstack = 0
 25546  004F0A  0E00               	movlw	0
 25547  004F0C  6E06               	movwf	i2___lwdiv@quotient+1,c
 25548  004F0E  0E00               	movlw	0
 25549  004F10  6E05               	movwf	i2___lwdiv@quotient,c
 25550  004F12  5003               	movf	i2___lwdiv@divisor,w,c
 25551  004F14  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 25552  004F16  B4D8               	btfsc	status,2,c
 25553  004F18  D01C               	goto	i2l1636
 25554  004F1A  0E01               	movlw	1
 25555  004F1C  6E07               	movwf	i2___lwdiv@counter,c
 25556  004F1E  D004               	goto	i2l1631
 25557  004F20  90D8               	bcf	status,0,c
 25558  004F22  3603               	rlcf	i2___lwdiv@divisor,f,c
 25559  004F24  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 25560  004F26  2A07               	incf	i2___lwdiv@counter,f,c
 25561  004F28                     i2l1631:
 25562  004F28  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 25563  004F2A  D7FA               	goto	i2l1632
 25564  004F2C                     i2u735_40:
 25565  004F2C  90D8               	bcf	status,0,c
 25566  004F2E  3605               	rlcf	i2___lwdiv@quotient,f,c
 25567  004F30  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 25568  004F32  5003               	movf	i2___lwdiv@divisor,w,c
 25569  004F34  5C01               	subwf	i2___lwdiv@dividend,w,c
 25570  004F36  5004               	movf	i2___lwdiv@divisor+1,w,c
 25571  004F38  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 25572  004F3A  A0D8               	btfss	status,0,c
 25573  004F3C  D005               	goto	i2l1635
 25574  004F3E  5003               	movf	i2___lwdiv@divisor,w,c
 25575  004F40  5E01               	subwf	i2___lwdiv@dividend,f,c
 25576  004F42  5004               	movf	i2___lwdiv@divisor+1,w,c
 25577  004F44  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 25578  004F46  8005               	bsf	i2___lwdiv@quotient,0,c
 25579  004F48                     i2l1635:
 25580  004F48  90D8               	bcf	status,0,c
 25581  004F4A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 25582  004F4C  3203               	rrcf	i2___lwdiv@divisor,f,c
 25583  004F4E  2E07               	decfsz	i2___lwdiv@counter,f,c
 25584  004F50  D7ED               	goto	i2u735_40
 25585  004F52                     i2l1636:
 25586  004F52  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 25587  004F56  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 25588  004F5A  0012               	return		;funcret
 25589  004F5C                     __end_ofi2___lwdiv:
 25590                           	opt stack 0
 25591                           pclatu	equ	0xFFB
 25592                           pclath	equ	0xFFA
 25593                           tblptru	equ	0xFF8
 25594                           tblptrh	equ	0xFF7
 25595                           tblptrl	equ	0xFF6
 25596                           tablat	equ	0xFF5
 25597                           prodh	equ	0xFF4
 25598                           prodl	equ	0xFF3
 25599                           intcon	equ	0xFF2
 25600                           intcon3	equ	0xFF0
 25601                           indf0	equ	0xFEF
 25602                           postinc0	equ	0xFEE
 25603                           plusw0	equ	0xFEB
 25604                           fsr0h	equ	0xFEA
 25605                           fsr0l	equ	0xFE9
 25606                           wreg	equ	0xFE8
 25607                           indf1	equ	0xFE7
 25608                           postinc1	equ	0xFE6
 25609                           postdec1	equ	0xFE5
 25610                           plusw1	equ	0xFE3
 25611                           fsr1h	equ	0xFE2
 25612                           fsr1l	equ	0xFE1
 25613                           indf2	equ	0xFDF
 25614                           postinc2	equ	0xFDE
 25615                           postdec2	equ	0xFDD
 25616                           plusw2	equ	0xFDB
 25617                           fsr2h	equ	0xFDA
 25618                           fsr2l	equ	0xFD9
 25619                           status	equ	0xFD8
 25620                           
 25621 ;; *************** function _buttonHandler *****************
 25622 ;; Defined at:
 25623 ;;		line 245 in file "src/system/main.c"
 25624 ;; Parameters:    Size  Location     Type
 25625 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 25626 ;;		 -> buttonState(1), 
 25627 ;; Auto vars:     Size  Location     Type
 25628 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 25629 ;;  resetValue      4    2[COMRAM] const unsigned long 
 25630 ;; Return value:  Size  Location     Type
 25631 ;;                  1    wreg      void 
 25632 ;; Registers used:
 25633 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25634 ;; Tracked objects:
 25635 ;;		On entry : 0/0
 25636 ;;		On exit  : 0/0
 25637 ;;		Unchanged: 0/0
 25638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25639 ;;      Params:         2       0       0       0       0       0       0       0       0
 25640 ;;      Locals:         8       0       0       0       0       0       0       0       0
 25641 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25642 ;;      Totals:        10       0       0       0       0       0       0       0       0
 25643 ;;Total ram usage:       10 bytes
 25644 ;; Hardware stack levels used:    1
 25645 ;; This function calls:
 25646 ;;		Nothing
 25647 ;; This function is called by:
 25648 ;;		_ISR
 25649 ;; This function uses a non-reentrant model
 25650 ;;
 25651                           
 25652                           	psect	text116
 25653  0041DA                     __ptext116:
 25654                           	opt stack 0
 25655  0041DA                     _buttonHandler:
 25656                           	opt stack 19
 25657                           
 25658                           ;main.c: 246: uint8_t static oldState = 0;
 25659                           ;main.c: 247: uint8_t static newState = 0;
 25660                           ;main.c: 248: uint32_t static debounceCounter = 0;
 25661                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 25662                           
 25663                           ;incstack = 0
 25664  0041DA  0E1F               	movlw	31
 25665  0041DC  6E07               	movwf	buttonHandler@debounceValue,c
 25666  0041DE  0E00               	movlw	0
 25667  0041E0  6E08               	movwf	buttonHandler@debounceValue+1,c
 25668  0041E2  0E00               	movlw	0
 25669  0041E4  6E09               	movwf	buttonHandler@debounceValue+2,c
 25670  0041E6  0E00               	movlw	0
 25671  0041E8  6E0A               	movwf	buttonHandler@debounceValue+3,c
 25672                           
 25673                           ;main.c: 250: const uint32_t resetValue = 0x3ff;
 25674  0041EA  0EFF               	movlw	255
 25675  0041EC  6E03               	movwf	buttonHandler@resetValue,c
 25676  0041EE  0E03               	movlw	3
 25677  0041F0  6E04               	movwf	buttonHandler@resetValue+1,c
 25678  0041F2  0E00               	movlw	0
 25679  0041F4  6E05               	movwf	buttonHandler@resetValue+2,c
 25680  0041F6  0E00               	movlw	0
 25681  0041F8  6E06               	movwf	buttonHandler@resetValue+3,c
 25682                           
 25683                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 25684  0041FA  BA81               	btfsc	3969,5,c	;volatile
 25685  0041FC  D007               	goto	i2l704
 25686                           
 25687                           ;main.c: 252: debounceCounter++;
 25688  0041FE  0E01               	movlw	1
 25689  004200  262D               	addwf	buttonHandler@debounceCounter,f,c
 25690  004202  0E00               	movlw	0
 25691  004204  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 25692  004206  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 25693  004208  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 25694                           
 25695                           ;main.c: 253: } else {
 25696  00420A  D008               	goto	i2l705
 25697  00420C                     i2l704:
 25698                           
 25699                           ;main.c: 254: debounceCounter = 0;
 25700  00420C  0E00               	movlw	0
 25701  00420E  6E2D               	movwf	buttonHandler@debounceCounter,c
 25702  004210  0E00               	movlw	0
 25703  004212  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 25704  004214  0E00               	movlw	0
 25705  004216  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 25706  004218  0E00               	movlw	0
 25707  00421A  6E30               	movwf	buttonHandler@debounceCounter+3,c
 25708  00421C                     i2l705:
 25709                           
 25710                           ;main.c: 255: }
 25711                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 25712  00421C  5007               	movf	buttonHandler@debounceValue,w,c
 25713  00421E  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 25714  004220  5008               	movf	buttonHandler@debounceValue+1,w,c
 25715  004222  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 25716  004224  5009               	movf	buttonHandler@debounceValue+2,w,c
 25717  004226  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 25718  004228  500A               	movf	buttonHandler@debounceValue+3,w,c
 25719  00422A  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 25720  00422C  A0D8               	btfss	status,0,c
 25721  00422E  D002               	goto	i2u822_40
 25722  004230  0E01               	movlw	1
 25723  004232  D001               	goto	i2u823_40
 25724  004234                     i2u822_40:
 25725  004234  0E00               	movlw	0
 25726  004236                     i2u823_40:
 25727  004236  6E46               	movwf	buttonHandler@newState,c
 25728                           
 25729                           ;main.c: 257: if (newState && !oldState) {
 25730  004238  5046               	movf	buttonHandler@newState,w,c
 25731  00423A  B4D8               	btfsc	status,2,c
 25732  00423C  D011               	goto	i2l706
 25733  00423E  5047               	movf	buttonHandler@oldState,w,c
 25734  004240  A4D8               	btfss	status,2,c
 25735  004242  D00E               	goto	i2l706
 25736                           
 25737                           ;main.c: 258: debounceCounter = debounceValue;
 25738  004244  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 25739  004248  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 25740  00424C  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 25741  004250  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 25742                           
 25743                           ;main.c: 259: *state = 1;
 25744  004254  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25745  004258  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25746  00425C  0E01               	movlw	1
 25747  00425E  D005               	goto	L11
 25748  004260                     i2l706:
 25749                           
 25750                           ;main.c: 261: *state = 0;
 25751  004260  C001  FFD9         	movff	buttonHandler@state,fsr2l
 25752  004264  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 25753  004268  0E00               	movlw	0
 25754  00426A                     L11:
 25755  00426A  6EDF               	movwf	indf2,c
 25756                           
 25757                           ;main.c: 262: }
 25758                           ;main.c: 263: if (debounceCounter > resetValue)
 25759  00426C  502D               	movf	buttonHandler@debounceCounter,w,c
 25760  00426E  5C03               	subwf	buttonHandler@resetValue,w,c
 25761  004270  502E               	movf	buttonHandler@debounceCounter+1,w,c
 25762  004272  5804               	subwfb	buttonHandler@resetValue+1,w,c
 25763  004274  502F               	movf	buttonHandler@debounceCounter+2,w,c
 25764  004276  5805               	subwfb	buttonHandler@resetValue+2,w,c
 25765  004278  5030               	movf	buttonHandler@debounceCounter+3,w,c
 25766  00427A  5806               	subwfb	buttonHandler@resetValue+3,w,c
 25767  00427C  A0D8               	btfss	status,0,c
 25768  00427E  00FF               	reset		;# 
 25769                           
 25770                           ;main.c: 266: oldState = newState;
 25771  004280  C046  F047         	movff	buttonHandler@newState,buttonHandler@oldState
 25772  004284  0012               	return		;funcret
 25773  004286                     __end_of_buttonHandler:
 25774                           	opt stack 0
 25775                           pclatu	equ	0xFFB
 25776                           pclath	equ	0xFFA
 25777                           tblptru	equ	0xFF8
 25778                           tblptrh	equ	0xFF7
 25779                           tblptrl	equ	0xFF6
 25780                           tablat	equ	0xFF5
 25781                           prodh	equ	0xFF4
 25782                           prodl	equ	0xFF3
 25783                           intcon	equ	0xFF2
 25784                           intcon3	equ	0xFF0
 25785                           indf0	equ	0xFEF
 25786                           postinc0	equ	0xFEE
 25787                           plusw0	equ	0xFEB
 25788                           fsr0h	equ	0xFEA
 25789                           fsr0l	equ	0xFE9
 25790                           wreg	equ	0xFE8
 25791                           indf1	equ	0xFE7
 25792                           postinc1	equ	0xFE6
 25793                           postdec1	equ	0xFE5
 25794                           plusw1	equ	0xFE3
 25795                           fsr1h	equ	0xFE2
 25796                           fsr1l	equ	0xFE1
 25797                           indf2	equ	0xFDF
 25798                           postinc2	equ	0xFDE
 25799                           postdec2	equ	0xFDD
 25800                           plusw2	equ	0xFDB
 25801                           fsr2h	equ	0xFDA
 25802                           fsr2l	equ	0xFD9
 25803                           status	equ	0xFD8
 25804                           pclatu	equ	0xFFB
 25805                           pclath	equ	0xFFA
 25806                           tblptru	equ	0xFF8
 25807                           tblptrh	equ	0xFF7
 25808                           tblptrl	equ	0xFF6
 25809                           tablat	equ	0xFF5
 25810                           prodh	equ	0xFF4
 25811                           prodl	equ	0xFF3
 25812                           intcon	equ	0xFF2
 25813                           intcon3	equ	0xFF0
 25814                           indf0	equ	0xFEF
 25815                           postinc0	equ	0xFEE
 25816                           plusw0	equ	0xFEB
 25817                           fsr0h	equ	0xFEA
 25818                           fsr0l	equ	0xFE9
 25819                           wreg	equ	0xFE8
 25820                           indf1	equ	0xFE7
 25821                           postinc1	equ	0xFE6
 25822                           postdec1	equ	0xFE5
 25823                           plusw1	equ	0xFE3
 25824                           fsr1h	equ	0xFE2
 25825                           fsr1l	equ	0xFE1
 25826                           indf2	equ	0xFDF
 25827                           postinc2	equ	0xFDE
 25828                           postdec2	equ	0xFDD
 25829                           plusw2	equ	0xFDB
 25830                           fsr2h	equ	0xFDA
 25831                           fsr2l	equ	0xFD9
 25832                           status	equ	0xFD8
 25833                           
 25834                           	psect	rparam
 25835  0000                     pclatu	equ	0xFFB
 25836                           pclath	equ	0xFFA
 25837                           tblptru	equ	0xFF8
 25838                           tblptrh	equ	0xFF7
 25839                           tblptrl	equ	0xFF6
 25840                           tablat	equ	0xFF5
 25841                           prodh	equ	0xFF4
 25842                           prodl	equ	0xFF3
 25843                           intcon	equ	0xFF2
 25844                           intcon3	equ	0xFF0
 25845                           indf0	equ	0xFEF
 25846                           postinc0	equ	0xFEE
 25847                           plusw0	equ	0xFEB
 25848                           fsr0h	equ	0xFEA
 25849                           fsr0l	equ	0xFE9
 25850                           wreg	equ	0xFE8
 25851                           indf1	equ	0xFE7
 25852                           postinc1	equ	0xFE6
 25853                           postdec1	equ	0xFE5
 25854                           plusw1	equ	0xFE3
 25855                           fsr1h	equ	0xFE2
 25856                           fsr1l	equ	0xFE1
 25857                           indf2	equ	0xFDF
 25858                           postinc2	equ	0xFDE
 25859                           postdec2	equ	0xFDD
 25860                           plusw2	equ	0xFDB
 25861                           fsr2h	equ	0xFDA
 25862                           fsr2l	equ	0xFD9
 25863                           status	equ	0xFD8
 25864                           
 25865                           	psect	temp
 25866  000050                     btemp:
 25867                           	opt stack 0
 25868  000050                     	ds	1
 25869  0000                     int$flags	set	btemp
 25870  0000                     wtemp6	set	btemp+1
 25871                           pclatu	equ	0xFFB
 25872                           pclath	equ	0xFFA
 25873                           tblptru	equ	0xFF8
 25874                           tblptrh	equ	0xFF7
 25875                           tblptrl	equ	0xFF6
 25876                           tablat	equ	0xFF5
 25877                           prodh	equ	0xFF4
 25878                           prodl	equ	0xFF3
 25879                           intcon	equ	0xFF2
 25880                           intcon3	equ	0xFF0
 25881                           indf0	equ	0xFEF
 25882                           postinc0	equ	0xFEE
 25883                           plusw0	equ	0xFEB
 25884                           fsr0h	equ	0xFEA
 25885                           fsr0l	equ	0xFE9
 25886                           wreg	equ	0xFE8
 25887                           indf1	equ	0xFE7
 25888                           postinc1	equ	0xFE6
 25889                           postdec1	equ	0xFE5
 25890                           plusw1	equ	0xFE3
 25891                           fsr1h	equ	0xFE2
 25892                           fsr1l	equ	0xFE1
 25893                           indf2	equ	0xFDF
 25894                           postinc2	equ	0xFDE
 25895                           postdec2	equ	0xFDD
 25896                           plusw2	equ	0xFDB
 25897                           fsr2h	equ	0xFDA
 25898                           fsr2l	equ	0xFD9
 25899                           status	equ	0xFD8


Data Sizes:
    Strings     1514
    Constant    11
    Data        52
    BSS         459
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    160     160
    BANK1           256    148     215
    BANK2           256      0     244
    BANK3           256     46     208
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_setNewEntry@ip(BANK0[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK3[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 123
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK2[66]), stack(BANK2[123]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK3[32]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK0[1]), arp_gratuitous@index(BANK0[1]), arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_68(CODE[17]), STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 58
		 -> STR_113(CODE[27]), STR_112(CODE[33]), STR_111(CODE[19]), STR_110(CODE[2]), 
		 -> STR_109(CODE[3]), STR_108(CODE[3]), STR_107(CODE[3]), STR_106(CODE[3]), 
		 -> STR_105(CODE[5]), STR_104(CODE[2]), STR_103(CODE[2]), STR_102(CODE[7]), 
		 -> STR_101(CODE[11]), STR_100(CODE[3]), STR_99(CODE[27]), STR_98(CODE[3]), 
		 -> STR_97(CODE[8]), STR_96(CODE[9]), STR_95(CODE[3]), STR_94(CODE[39]), 
		 -> STR_93(CODE[3]), STR_92(CODE[3]), STR_91(CODE[30]), STR_90(CODE[33]), 
		 -> STR_89(CODE[39]), STR_88(CODE[35]), STR_87(CODE[58]), STR_86(CODE[36]), 
		 -> STR_85(CODE[34]), STR_84(CODE[3]), STR_83(CODE[43]), STR_82(CODE[4]), 
		 -> STR_81(CODE[12]), STR_80(CODE[26]), STR_79(CODE[2]), STR_78(CODE[3]), 
		 -> STR_77(CODE[16]), STR_76(CODE[15]), STR_75(CODE[10]), STR_74(CODE[2]), 
		 -> STR_73(CODE[3]), STR_72(CODE[5]), STR_71(CODE[3]), STR_70(CODE[2]), 
		 -> STR_69(CODE[39]), arpEntryToString@string(BANK3[50]), ipAdressToString@address(BANK2[16]), STR_68(CODE[17]), 
		 -> STR_67(CODE[4]), STR_66(CODE[4]), STR_65(CODE[5]), STR_64(CODE[18]), 
		 -> STR_63(CODE[4]), STR_62(CODE[5]), macToString@address(BANK0[18]), hexToString@number(BANK1[10]), 
		 -> intToString@number(BANK1[10]), STR_61(CODE[5]), STR_60(CODE[9]), STR_59(CODE[30]), 
		 -> STR_58(CODE[34]), STR_57(CODE[55]), STR_56(CODE[37]), STR_55(CODE[15]), 
		 -> STR_54(CODE[14]), STR_53(CODE[19]), STR_52(CODE[30]), STR_51(CODE[17]), 
		 -> STR_50(CODE[8]), STR_49(CODE[29]), STR_48(CODE[29]), STR_47(CODE[20]), 
		 -> STR_46(CODE[19]), STR_45(CODE[19]), STR_44(CODE[13]), STR_43(CODE[4]), 
		 -> STR_42(CODE[5]), STR_41(CODE[32]), STR_40(CODE[3]), STR_39(CODE[15]), 
		 -> STR_38(CODE[51]), STR_37(CODE[4]), STR_36(CODE[23]), STR_35(CODE[12]), 
		 -> STR_34(CODE[4]), STR_33(CODE[9]), STR_32(CODE[2]), STR_31(CODE[12]), 
		 -> STR_30(CODE[24]), STR_29(CODE[51]), STR_28(CODE[49]), STR_27(CODE[51]), 
		 -> STR_26(CODE[2]), STR_25(CODE[3]), STR_24(CODE[37]), STR_23(CODE[38]), 
		 -> STR_22(CODE[40]), STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[3]), STR_17(CODE[5]), STR_16(CODE[2]), STR_15(CODE[3]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), 
		 -> STR_10(CODE[20]), STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), 
		 -> STR_6(CODE[2]), STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), 
		 -> STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR struct stack size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_setNewEntry@mac(BANK0[6]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_64(CODE[18]), STR_63(CODE[4]), STR_62(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> arp_send@ethFrame(BANK0[34]), stack(BANK2[123]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 123
		 -> stack(BANK2[123]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_sendReply->_arp_send
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_init->_arp_setNewEntry
    _arp_setNewEntry->_UARTTransmitText
    _macToString->_ethernetController_getMacAddress
    _arp_background->_arp_gratuitous
    _rand->___lmul
    _ipAdressToString->___lwmod
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI
    ___awmod->_rand

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_arp_sendRequest
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0  954877
                                            145 BANK1      3     3      0
                                              0 BANK3     46    46      0
                           _UARTInit
                   _UARTTransmitText
                            ___awmod
   _ethernetController_checkDeviceId
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
                        _intToString
                   _ipAdressToString
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                               _rand
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0   39547
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     135
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   15644
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   19333
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1607
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   20533
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     71     5     66    8299
                                             30 BANK0     69     3     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          22    20      2  739981
                                            133 BANK1     12    10      2
                   _UARTTransmitText
                     _arp_background
                           _arp_init
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                    _ipv4_background
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              4     0      4     239
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    12     66  117166
                                            156 BANK0      4     4      0
                                             52 BANK1     74     8     66
                   _UARTTransmitText
                  _arp_checkForEntry
              _arp_getEntryFromTable
                    _arp_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _arp_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      9     6      3   15592
                                             58 BANK0      8     5      3
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              13    11      2  296072
                                            120 BANK1     13    11      2
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   63712
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   12751
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   17262
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2     957
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     660
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    8291
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    9486
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1370
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    8190
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  155570
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    9408
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   84691
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   15875
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     400
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   11132
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   19262
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3878
                                             36 BANK0      4     0      4
                            ___awmod (ARG)
                               _ltoa
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2599
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    2054
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     648
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   21128
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   13617
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   14029
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    7626
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    7190
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    7125
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    7125
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   13238
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   13207
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0   39547
                                             82 BANK0     11    11      0
                   _UARTTransmitText
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14   23424
                                             58 BANK0     24    10     14
                   _UARTTransmitText
                          _getMillis (ARG)
                   _ipAdressToString
                     _ipv4_isAllZero
                        _macToString
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (4) _mac_isAllZero                                        3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _macToString                                         30    24      6    1779
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _ipv4_isAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _arp_background                                      12     9      3  187782
                                             81 BANK1     12     9      3
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           29    24      5   86998
                                             52 BANK1     29    24      5
                   _UARTTransmitText
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (1) _rand                                                 2     0      2     512
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     512
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      17    12      5   85128
                                            156 BANK0      4     4      0
                                             52 BANK1     13     8      5
                   _UARTTransmitText
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (4) _ipAdressToString                                    22    18      4    4576
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
            _ipv4_getIPSourceAddress (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     856
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     933
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _arp_sendRequest                                     52    44      8   62705
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    7277
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _arp_send                                            85    53     32   53975
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   19933
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5104
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2380
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1128
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     440
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6913
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    7319
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    7989
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setGPDATAWritePointer                     5     3      2    3493
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   15696
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXStartAddress                         4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXLength                               4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    8252
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3805
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _arp_checkForEntry                                   15     9      6    1874
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4    1024
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _UARTTransmitText                                     2     0      2   15249
                                             56 BANK0      2     0      2
                            ___awmod (ARG)
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
            _ipv4_getIPSourceAddress (ARG)
                        _macToString (ARG)
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   53016
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   16685
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    7270
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    6366
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     239
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    3042
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSingleByte                           1     1      0    3042
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   13049
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeControlRegisterUnbanked              4     2      2    5918
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_readControlRegisterUnbanked               4     2      2    7054
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSPI                                 10     8      2    3008
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_readSPI                                  10     8      2    1032
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     641
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1115
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     914
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     667
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     201
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     ___awmod (ARG)
       _rand (ARG)
         ___lmul
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _ltoa (ARG)
         _ultoa
           ___lldiv
           ___llmod
       _rand (ARG)
         ___lmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipProtocolToString (ARG)
     _ipv4_getIPSourceAddress (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _rand (ARG)
       ___lmul
   ___awmod
     _rand (ARG)
       ___lmul
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
     _arp_background
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_gratuitous
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
       _arp_probe
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _arp_init
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_setNewEntry
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _intToString
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_handleNewPacket
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _getMillis (ARG)
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipv4_isAllZero (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _mac_isAllZero (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___awmod (ARG)
                 _rand (ARG)
                   ___lmul
               _ltoa (ARG)
                 _ultoa
                   ___lldiv
                   ___llmod
               _rand (ARG)
                 ___lmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
               _ipv4_getIPSourceAddress (ARG)
             _ipProtocolToString (ARG)
             _ipv4_getIPSourceAddress (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
             _rand (ARG)
               ___lmul
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
       _ipv4_getIPSourceAddress (ARG)
     _ipv4_background
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
     _ipv4_sendFrame
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_checkForEntry
         _getMillis
         _ipv4_cmp
       _arp_getEntryFromTable
       _arp_sendRequest
         _arp_send
           _ethernetController_getSourceMACAddress
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_sendPacket
             _enc424j600_setTXLength
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_setTXStartAddress
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_writeSingleByte
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _enc424j600_setGPDATAWritePointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _mac_setAllZero
       _ethernetController_getMacAddress
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_sendPacket
         _enc424j600_setTXLength
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_setTXStartAddress
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_setIPSourceAddress
   _intToString
     ___awmod (ARG)
       _rand (ARG)
         ___lmul
     _ltoa (ARG)
       _ultoa
         ___lldiv
         ___llmod
     _rand (ARG)
       ___lmul
   _ipAdressToString
     ___lwdiv
     ___lwmod
       _rand (ARG)
         ___lmul
     _ipv4_getIPSourceAddress (ARG)
   _ipv4_calculateHeaderChecksum
   _ipv4_getIPSourceAddress
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _enc424j600_setGPDATAWritePointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
     _intToString
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _ltoa (ARG)
         _ultoa
           ___lldiv
           ___llmod
       _rand (ARG)
         ___lmul
   _printEthernetState
     _UARTTransmitText
       ___awmod (ARG)
         _rand (ARG)
           ___lmul
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _ltoa (ARG)
           _ultoa
             ___lldiv
             ___llmod
         _rand (ARG)
           ___lmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
         _ipv4_getIPSourceAddress (ARG)
       _ipProtocolToString (ARG)
       _ipv4_getIPSourceAddress (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _rand (ARG)
         ___lmul
   _rand
     ___lmul
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _UARTTransmitText
         ___awmod (ARG)
           _rand (ARG)
             ___lmul
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _ltoa (ARG)
             _ultoa
               ___lldiv
               ___llmod
           _rand (ARG)
             ___lmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipProtocolToString (ARG)
         _ipv4_getIPSourceAddress (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _rand (ARG)
           ___lmul
       _arp_setNewEntry
         _UARTTransmitText
           ___awmod (ARG)
             _rand (ARG)
               ___lmul
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___awmod (ARG)
               _rand (ARG)
                 ___lmul
             _ltoa (ARG)
               _ultoa
                 ___lldiv
                 ___llmod
             _rand (ARG)
               ___lmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
             _ipv4_getIPSourceAddress (ARG)
           _ipProtocolToString (ARG)
           _ipv4_getIPSourceAddress (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _rand (ARG)
             ___lmul
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
           _ipv4_getIPSourceAddress (ARG)
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     2E      D0      12       81.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F4      10       95.3%
BITBANK1           100      0       0       7        0.0%
BANK1              100     94      D7       8       84.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     38A       6        0.0%
DATA                 0      0     38A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 31 20:45:44 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 4A78  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 4A04  
                                             arp_init@mac 00B2  
                                                      l75 43F4  
                                                      l92 4FE2  
                                                      l84 3AF0  
                                                      l77 441C  
                                                      l86 3AD2  
                                                      l88 3AEA  
                                                      l89 3B06  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 3FB8  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 4530  
                                                     l140 4746  
                                                     l204 454E  
                                                     l213 456E  
                                                     l205 4538  
                                                     l134 48D0  
                                                     l142 478E  
                                                     l214 4556  
                                                     l206 4524  
                                                     l135 4916  
                                                     l232 4CBA  
                                                     l216 4584  
                                                     l241 4BE0  
                                                     l217 455E  
                                                     l209 452C  
                                                     l218 4564  
                                                     l155 4B8E  
                                                     l412 5292  
                                                     l420 527C  
                                                     l180 4D06  
                                                     l245 4C26  
                                                     l317 4666  
                                                     l165 4950  
                                                     l414 52B4  
                                                     l182 4D2A  
                                                     l263 38EA  
                                                     l183 4D3E  
                                                     l432 3952  
                                                     l361 3E82  
                                                     l418 525A  
                                                     l258 3832  
                                                     l370 036E  
                                                     l530 2496  
                                                     l443 39D0  
                                                     l195 45B6  
                                                     l179 4D44  
                                                     l187 51B6  
                                                     l371 04E8  
                                                     l436 39D4  
                                                     l188 51CC  
                                                     l372 03BA  
                                                     l532 2578  
                                                     l524 2400  
                                                     l453 4114  
                                                     l437 39C0  
                                                     l197 45E6  
                                                     l373 0516  
                                                     l525 23DE  
                                                     l438 398A  
                                                     l462 0624  
                                                     l390 5122  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l526 23FA  
                                                     l455 4110  
                                                     l439 3986  
                                                     l359 3E62  
                                                     l199 460C  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l448 40DC  
                                                     l472 06DA  
                                                     l464 0646  
                                                     l384 5368  
                                                     l392 514E  
                                                     l368 032E  
                                                     l528 241C  
                                                     l481 08A0  
                                                     l801 561E  
                                                     l369 034E  
                                                     l482 094E  
                                                     l474 06E2  
                                                     l466 0670  
                                                     l386 5382  
                                                     l459 4124  
                                                     l379 558A  
                                                     l651 0D9A  
                                                     l476 08FC  
                                                     l396 5564  
                                                     l804 562A  
                                                     l644 0B72  
                                                     l477 081C  
                                                     l469 06A6  
                                                     l821 3C04  
                                                     l645 0BE2  
                                                     l654 0EE4  
                                                     l646 0C1A  
                                                     l487 09BE  
                                                     l815 3B44  
                                                     l671 42D6  
                                                     l655 0E78  
                                                     l647 0D58  
                                                     l488 0A9C  
                                                     l816 3C12  
                                                     l680 36FC  
                                                     l656 0EC8  
                                                     l489 0ABE  
                                                     l817 3B94  
                                                     l825 50AE  
                                                     l833 5074  
                                                     l809 3D8A  
                                                     l681 36AC  
                                                     l673 42EA  
                                                     l657 0EE0  
                                                     l649 0D90  
                                                     l850 2958  
                                                     l930 2AD6  
                                                     l826 508E  
                                                     l834 504A  
                                                     l690 378E  
                                                     l674 4300  
                                                     l819 3BC8  
                                                     l691 372E  
                                                     l683 36BC  
                                                     l667 42A6  
                                                     l844 279E  
                                                     l940 11B8  
                                                     l828 509A  
                                                     l836 5056  
                                                     l692 373E  
                                                     l684 36CC  
                                                     l676 4314  
                                                     l933 1154  
                                                     l829 50A4  
                                                     l837 5060  
                                                     l693 374C  
                                                     l685 36DC  
                                                     l669 42BA  
                                                     l846 28BE  
                                                     l950 1316  
                                                     l942 1256  
                                                     l934 110C  
                                                     l926 29A4  
                                                     l838 506A  
                                                     l686 36EC  
                                                     l847 2912  
                                                     l951 134C  
                                                     l943 120E  
                                                     l960 1DF2  
                                                     l936 11AA  
                                                     l928 29E4  
                                                     l688 375C  
                                                     l785 4E0E  
                                                     l961 1DBE  
                                                     l945 129C  
                                                     l937 1162  
                                                     l929 2AC2  
                                                     l689 3720  
                                                     l970 1E84  
                                                     l787 4E36  
                                                     l963 1E34  
                                                     l947 12D2  
                                                     l939 1200  
                                                     l964 1E00  
                                                     l949 1314  
                                                     l966 1E76  
                                                     l990 19EA  
                                                     l967 1E42  
                                                     l991 1C52  
                                                     l992 1A3C  
                                                     l969 1EB8  
                                                     l993 1AE4  
                                                     l994 1AEC  
                                                     l986 19BE  
                                                     l989 1C36  
                                                     l998 1C00  
                                                     l999 1C18  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 369C  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 55EA  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 55C6  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                            ___awmod@sign 0073  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 3FB8  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0048  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0044  
                      __end_of_enc424j600_readPHYRegister 38EC  
                              _enc424j600_readPHYRegister 37CA  
                          __end_of_enc424j600_setTXLength 543C  
                                        ??_arp_background 0154  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1001 1C24  
                                                    l1010 2158  
                                                    l1013 233C  
                                                    l1014 2184  
                                                    l1023 2326  
                                                    l1015 2358  
                                                    l1016 21AA  
                                                    l1200 553E  
                                                    l1040 2D52  
                                                    l1018 2222  
                                                    l1034 2E38  
                                                    l1042 2D68  
                                                    l1051 4136  
                                                    l1019 230E  
                                                    l1043 2D78  
                                                    l1035 2CE8  
                                                    l1131 277E  
                                                    l1044 2E46  
                                                    l1045 2DC4  
                                                    l1037 2D88  
                                                    l1061 2E76  
                                                    l1054 41D2  
                                                    l1046 2E12  
                                                    l1038 2D42  
                                                    l1070 49BA  
                                                    l1039 2DBA  
                                                    l1063 2ECE  
                                                    l1401 4AC8  
                                                    l1225 4D70  
                                                    l1153 3F3C  
                                                    l1129 269A  
                                                    l1402 4AD2  
                                                    l1226 4D84  
                                                    l1146 2078  
                                                    l1403 4AE0  
                                                    l1171 33F8  
                                                    l1148 20BE  
                                                    l1172 33AC  
                                                    l1157 2B50  
                                                    l1173 32CE  
                                                    l1190 5190  
                                                    l1175 330E  
                                                    l1176 3330  
                                                    l1177 3356  
                                                    l1194 5398  
                                                    l1178 3364  
                                                    l1179 3388  
                                                    l1188 5164  
                                                    l1196 53B2  
                                                    l1620 3CF6  
                                                    l1613 4E90  
                                                    l1631 4ED6  
                                                    l1632 4ECE  
                                                    l1641 50E8  
                                                    l1617 3C2C  
                                                    l1394 4A8E  
                                                    l1642 50E0  
                                                    l1395 4A9A  
                                                    l1635 4EF6  
                                                    l1619 3C88  
                                                    l1636 4F00  
                                                    l1564 46D8  
                                                    l1397 4AB0  
                                                    l1645 5100  
                                                    l1565 46CC  
                                                    l1398 4AA8  
                                                    l1646 510A  
                                                    l1574 4C54  
                                                    l1575 4C48  
                                                    l1568 470C  
                                                    l1569 471A  
                                                    l1578 4C7C  
                                                    l1579 4C8A  
                                                    l8131 3A06  
                                                    l8127 39BC  
                                                    l8135 56DC  
                                                    l8147 4CE8  
                                                    l8237 528A  
                                                    l8503 0814  
                                                    l8433 4C0E  
                                                    l8257 5252  
                                                    l9065 5390  
                                                    l9085 515C  
                                                    l8375 473E  
                                                    l9319 1344  
                                                    l8393 4786  
                                                    l8537 0946  
                                                    l8705 5582  
                                                    l9435 412E  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8653 4916  
                                                    l9525 3F3C  
                                                    l8663 4B86  
                                                    l8903 3C12  
                                                    l9449 41D2  
                                                    l9377 2E6E  
                                                    l9561 4948  
                                                    l9459 5536  
                                                    l8909 5360  
                                                    l9645 3864  
                                                    l9485 2070  
                                                    l8961 2796  
                                                    l8881 3BA8  
                                                    l8929 511A  
                                                    l9497 20B6  
                                                    l9931 3ADC  
                                                    l8891 3BDC  
                                                    l8949 555C  
                                                    STR_1 7FC2  
                                                    STR_2 7FFA  
                                                    l9857 2296  
                                                    STR_3 7F55  
                                                    STR_4 7F76  
                                                    l8899 3C04  
                                                    STR_5 7ED9  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FC2  
                                                    STR_7 7FFA  
                                                    STR_8 7FB9  
                                                    STR_9 7FB2  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u9000 394E  
                                                    u9101 39F0  
                                                    _RCIP 007CFD  
                                                    u9201 061A  
                                                    u9130 476E  
                                                    u9051 3994  
                                                    u9061 39A6  
                                                    u9221 063C  
                                                    u9150 47A8  
                                                    u9401 08F2  
                                                    u9170 4C0E  
                                                    u9091 39DE  
                                                    u9251 0666  
                                                    u9180 4C1E  
                                                    u9341 083A  
                                                    u9261 069C  
                                                    u9511 0AB4  
                                                    u9351 0858  
                                                    u8720 4CE8  
                                                    u9441 098A  
                                                    u8730 4CF8  
                                                    u8810 40D8  
                                                    u9531 0AD0  
                                                    u9451 09A8  
                                                    u8740 4086  
                                                    u9381 0896  
                                                    u9701 3EE2  
                                                    u9630 4BB4  
                                                    u8750 4094  
                                                    u9470 09C2  
                                                    u9390 08A4  
                                                    u9550 46DC  
                                                    u8760 40A2  
                                                    u8920 5280  
                                                    u9641 4BC0  
                                                    u8770 40B0  
                                                    u8930 38FC  
                                                    u9491 0A92  
                                                    u9651 3E3A  
                                                    u8940 390A  
                                                    u9820 50EC  
                                                    u9580 4C58  
                                                    u8950 3918  
                                                    u8960 3926  
                                                    u9681 3E94  
                                                    u9841 4A6E  
                                                    u9850 4E2E  
                                                    u8890 52B8  
                                                    u9930 3BEE  
                                                    u9691 3EAE  
                                                    u9860 4E3A  
                                                    u9940 3C12  
                                                    u9870 4E5A  
                                                    u9790 4EDA  
                                                    u9857 4E24  
                                                    u9970 5386  
                                                    u9891 3B1E  
                                                    u9877 4E50  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 5530  
                                                    _main 0ADA  
                                                    _rand 4DB6  
                                 printEthernetState@state 009A  
                                                    _ltoa 4E62  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0050  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 43C8  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 0214  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 4BCA  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4B5A  
                                            arp_probe@err 014E  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 5650  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 4076  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4B5A  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4AEA  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 538A  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                          handleStackBackgroundTasks@intf 018C  
                     ethernetController_setLEDConfig@conf 006E  
                                           arp_send@field 00F3  
                                                   l10207 270A  
                                                   l10251 2E12  
                                                   l11051 33DA  
                                                   l10165 49B2  
                                                   l11049 33D0  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E35  
                                                   ?_ltoa 007A  
                                                   STR_11 7FC2  
                                                   STR_20 7BD4  
                                                   STR_12 7FF3  
                                                   STR_21 7A83  
                                                   STR_13 7FF6  
                                                   STR_14 7FD8  
                                                   STR_30 7DF2  
                                                   STR_22 7B14  
                                                   STR_15 7FF0  
                                                   STR_31 7F49  
                                                   STR_23 7BB1  
                                                   STR_40 7BD4  
                                                   STR_32 7FEE  
                                                   STR_16 7FC2  
                                                   STR_24 7BFC  
                                                   STR_25 7BD4  
                                                   STR_17 7C1C  
                                                   STR_33 7F92  
                                                   STR_41 7CEE  
                                                   STR_34 7FCF  
                                                   STR_18 7D0B  
                                                   STR_26 7FFC  
                                                   STR_42 7FD3  
                                                   STR_50 7FA3  
                                                   STR_19 7FF9  
                                                   STR_43 7FE9  
                                                   STR_35 7F3D  
                                                   STR_51 7EB8  
                                                   STR_27 7A85  
                                                   STR_60 7F89  
                                                   STR_44 7F24  
                                                   STR_36 7E0A  
                                                   STR_52 7D2C  
                                                   STR_28 7AB8  
                                         __end_of___awmod 4AEA  
                                                   STR_29 7A85  
                                                   STR_37 7FCF  
                                                   STR_61 7FCE  
                                                   STR_53 7E82  
                                                   STR_45 7E6F  
                                                   STR_38 7A85  
                                                   STR_70 7FC2  
                                                   STR_62 7FC4  
                                                   STR_54 7F16  
                                                   STR_46 7E5C  
                                                   STR_71 7E32  
                                                   STR_63 7FE5  
                                                   STR_39 7F07  
                                                   STR_55 7EF8  
                                                   STR_47 7E21  
                                                   STR_72 7FBF  
                                                   STR_64 7E95  
                                                   STR_80 7DD8  
                                                   STR_48 7D68  
                                                   STR_56 7BD7  
                                                   STR_73 7E32  
                                                   STR_65 7FC9  
                                                   STR_81 7F31  
                                                   STR_49 7D85  
                                                   STR_57 7A4E  
                                                   STR_82 7FE9  
                                                   STR_74 7FFA  
                                                   STR_66 7FDD  
                                                   STR_90 7CCD  
                                                   STR_58 7C8A  
                                                   STR_67 7FE1  
                                                   STR_75 7F6C  
                                                   STR_59 7D4A  
                                                   STR_91 7D0E  
                                                   STR_83 7AE9  
                                                   STR_84 7BD4  
                                                   STR_92 7D0B  
                                                   STR_76 7EE9  
                                                   STR_68 7EA7  
                                                   STR_93 7FED  
                                                   STR_77 7EC9  
                                                   STR_85 7C68  
                                                   STR_69 7B3C  
                                                   STR_78 7E32  
                                                   STR_86 7C21  
                                                   STR_94 7B8A  
                                                   STR_79 7FFA  
                                                   STR_87 7A14  
                                                   STR_96 7F80  
                                                   STR_88 7C45  
                                                   STR_97 7F9B  
                                                   STR_89 7B63  
                                                   STR_98 7BD4  
                                                   STR_99 7DBD  
                                                   u10000 5152  
                                         __end_of___lldiv 472C  
                                                   u10110 190A  
                                                   u10105 178C  
                                                   u10210 5194  
                                                   u10130 3D2C  
                                                   u10115 1900  
                                                   u10060 28EA  
                                                   u11100 2ED2  
                                                   u10140 3D5A  
                                                   u10301 1D58  
                                                   u10221 1C78  
                                                   u11021 3182  
                                                   u10150 3DB8  
                                                   u10311 1D72  
                                                   u10231 1C94  
                                                   u11111 2F10  
                                                   u11031 3194  
                                                   u10080 295C  
                                                   u10401 1E8E  
                                                   u10321 1D8C  
                                                   u10241 1CA6  
                                                   u11041 31FC  
                                                   u10145 3D50  
                                                   u11130 2F64  
                                                   u10331 1DA6  
                                                   u11051 321E  
                                                   u10155 3DAE  
                                                   u11220 41D6  
                                                   u10180 53B6  
                                                   u10421 1ECA  
                                                   u10341 1DC8  
                                                   u10261 1CF2  
                                                   u11141 2FA8  
                                                   u11061 3230  
                                                   u11301 3EFE  
                                                   u10510 1436  
                                                   u10271 1D0A  
                                                   u11151 4472  
                                                   u11071 3254  
                                                   u10095 16DE  
                                                   u12111 0422  
                                                   u10361 1E0A  
                                                   u10281 1D24  
                                                   u11161 44C4  
                                                   u12121 045C  
                                                   u12201 2648  
                                                   u11410 2996  
                                                   u10610 1500  
                                                   u10530 1460  
                                                   u10450 13C4  
                                                   u11330 496A  
                                                   u10291 1D3E  
                                                   u11171 44E6  
                                                   u12051 0178  
                                                   u12211 265A  
                                                   u10508 1412  
                                                   u11260 20B2  
                                                   u11500 2B42  
                                                   u10381 1E4C  
                                                   u11181 44F8  
                                                   u12141 49C4  
                                                   u11421 29B6  
                                                   u11341 4986  
                                                   u12221 2670  
                                                   u12150 49F6  
                                                   u10710 15C6  
                                                   u10630 1526  
                                                   u10550 1486  
                                                   u10470 13E8  
                                                   u11511 2B64  
                                                   u12071 02A4  
                                                   u10608 14DC  
                                                   u10528 143A  
                                                   u11280 20F8  
                                                   u12240 270A  
                                         __end_of___llmod 4C9C  
                                                   u11441 29FC  
                                                   u11521 2B9E  
                                                   u12330 55D4  
                                                   u10730 15F0  
                                                   u10650 154E  
                                                   u10570 14AE  
                                                   u10490 140E  
                                                   u11451 2A5A  
                                                   u10811 167E  
                                                   u11291 2118  
                                                   u12171 25B8  
                                                   u11364 464A  
                                                   u10708 15A2  
                                                   u10628 1504  
                                                   u10548 1464  
                                                   u10468 13C8  
                                                   u11365 4646  
                                                   u12181 2606  
                                                   u11630 2218  
                                                   u11374 468C  
                                                   u11390 3864  
                                                   u10750 1618  
                                                   u10670 1578  
                                                   u10590 14D8  
                                                   u11375 4688  
                                                   u12191 2636  
                                                   u12511 431E  
                                                   u12600 4AB4  
                                                   u10808 1666  
                                                   u10728 15CA  
                                                   u10648 152A  
                                                   u10568 148A  
                                                   u10488 13EC  
                                                   u11481 2AE0  
                                                   u12521 54A6  
                                                   u11650 2296  
                                                   u11810 3474  
                                                   u10930 1310  
                                                   u10770 163C  
                                                   u10690 159E  
                                                   u11491 2AF6  
                                                   u11580 1B56  
                                                   u11900 34FA  
                                                   u10748 15F4  
                                                   u10668 1552  
                                                   u10588 14B2  
                                                   u11830 3492  
                                                   u11750 3426  
                                                   u10790 1662  
                                                   u12391 2452  
                                                   u11920 3518  
                                                   u11808 345C  
                                                   u10768 161C  
                                                   u10688 157C  
                                                   u11681 53DE  
                                                   u11850 34AC  
                                                   u11770 343E  
                                                   u12731 0E4C  
                                                   u11940 3534  
                                                   u11828 3478  
                                                   u10980 1344  
                                                   u10788 1640  
                                                   u11918 34FE  
                                                   u11870 34C8  
                                                   u11790 3458  
                                                   u10991 1362  
                                                   u12751 0EA6  
                                                   u11960 354C  
                                                   u11848 3496  
                                                   u11768 342A  
                                                   u12761 0ED2  
                                                   u12681 0C3A  
                                                   u12817 0B2C  
                                                   u11938 351C  
                                                   u12691 0D72  
                                                   u12827 0C96  
                                                   u11980 5700  
                                                   u11868 34B0  
                                                   u11788 3442  
                                                   u12837 382C  
                                                   u11958 3538  
                                                   u11894 34DE  
                                                   u12847 3A8A  
                                                   u11895 34D8  
                                                   u11888 34CC  
                                                   u12857 3AC6  
                                                   u11978 3550  
                                         __end_of___lwdiv 4F0A  
                              __end_of_printEthernetState 4328  
                                         __end_of___lwmod 5114  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l704 420C  
                                                   i2l705 421C  
                                                   i2l706 4260  
                                                   i2l714 007A  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l715 0098  
                                                   i2l760 480C  
                                                   i2l752 400E  
                                                   i2l761 4810  
                                                   i2l747 3FEA  
                                                   i2l756 4814  
                                                   i2l757 4804  
                                                   i2l749 3FF2  
                                                   i2l759 4808  
                                     _arp_handleNewPacket 297A  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 52F2  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 52BC  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 5156  
                                         _ipv4_background 32AA  
                                        __end_of_UARTInit 5738  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0049  
                               __end_of_ipv4_setToAllZero 5556  
                                                   _srand 5738  
                                                   _stack 0257  
                               arp_background@errAnnounce 0157  
                                                   main@i 03C8  
                                                   _ultoa 3C1C  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 4990  
                                          __pbitbssCOMRAM 0278  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1178 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0051  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                           arp_probe@link 0138  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 4E62  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 257A  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 278C  
                                         __initialization 4328  
                       ethernetController_softReset@F5986 004D  
                       ethernetController_softReset@F5988 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 0F72  
                                  __end_of_ipv4_isAllZero 53BA  
                                            __end_of_rand 4E0C  
                                            __end_of_ltoa 4EB6  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 0370  
                                ?_ipv4_setIPSourceAddress 0060  
                                    _ipv4_handleNewPacket 2B28  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1174 0093  
                       __end_of_enc424j600_getPacketCount 56A0  
                                           main@headerBuf 03A6  
                                          arp_send@i_3100 00CE  
                                          arp_send@i_3101 00CF  
                                          arp_send@i_3102 00D0  
                                                  ??_main 0191  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 313E  
                              _ipv4_writeHeaderIntoBuffer 2FD0  
                         handleStackBackgroundTasks@stack 0185  
                                        ??_arp_gratuitous 0139  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                                  STR_100 7BD4  
                                                  STR_101 7F61  
                                                  STR_110 7FFA  
                                                  STR_102 7FAB  
                                                  STR_103 7FFA  
                                                  STR_111 7E49  
                                                  STR_104 7FC2  
                                                  STR_112 7CAC  
                                                  STR_105 7FD3  
                                                  STR_113 7DA2  
                                                  STR_106 7FF6  
                                                  STR_107 7FF6  
                                                  STR_108 7FF6  
                                                  STR_109 7E32  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                   _arp_getEntryFromTable 53BA  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0248  
                                                  i2l1631 4F28  
                                                  i2l1632 4F20  
                                                  i2l1635 4F48  
                                                  i2l1636 4F52  
                               ??_ethernetController_init 007D  
                                                  i2l7581 4006  
                               ?_ipv4_checkHeaderChecksum 009A  
       __end_of_ethernetController_streamToTransmitBuffer 491C  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 48A4  
                                         _fSrcAddrChanged 0278  
                                  __end_of_ipv4_sendFrame 278C  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 4A04  
                                        __end_of_arp_send 1ED8  
                                                  ___lmul 4D5E  
                                        __end_of_ipv4_cmp 5198  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 54B8  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 257A  
                              _handleStackBackgroundTasks 2366  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0072  
                                   buttonHandler@oldState 0047  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0046  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 438E  
                                                  clear_1 439A  
                                                  clear_2 43A6  
                                                  clear_3 43B4  
                                         ___awmod@divisor 0070  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 340E  
                                         ___awmod@counter 0072  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 4FAA  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4F5C  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 03A2  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 5328  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 52F2  
                                            __pdataCOMRAM 0049  
                                      _enc424j600_initSPI 5650  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 4BCA  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 4F5C  
                                            __mediumconst 7A08  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 5762  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 5754  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 0026  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009F  
                                          arp_probe@index 0141  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01AB  
                                 ipAdressToString@address 02E4  
      __end_of_ethernetController_updateNextPacketPointer 48A4  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 482A  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 017C  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 43BA  
                                       _printErrorMessage 369C  
                                __size_of_arp_sendRequest 009E  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                   _arp_parseFromRXBuffer 0F72  
                          __end_of_ethernet_rxGetNewFrame 05FE  
                                        _sevenSegmentInit 566C  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
                             arp_parseFromRXBuffer@i_3025 0098  
                             arp_parseFromRXBuffer@i_3026 0099  
                             arp_parseFromRXBuffer@i_3027 009A  
              ethernetController_pollInterruptFlags@flags 007E  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 5770  
                                            __pidataBANK2 55EA  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 4468  
                                           __end_of_srand 5746  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3D1A  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3E08  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 4128  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 41DA  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 56E0  
                           __end_of_memory_txFrameRequest 0ADA  
                                      __size_of_hexToChar 0022  
                                 arp_background@fAnnounce 0279  
                                      __size_of_arp_probe 02CC  
                                  ?_arp_getEntryFromTable 0060  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 37CA  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 0194  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 55C6  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 508C  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 009A  
                                        _entireMemoryFull 524C  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 297A  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00FD  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                            __size_of_ipv4_txFrameRequest 0136  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 4286  
                               __end_of_etherTypeToString 50D0  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 4D5E  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 4D00  
                          sevenSegmentUpdate@digitPointer 0045  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 5728  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 57A2  
                              _enc424j600_enableReception 579A  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 00A8  
               __end_of_enc424j600_enableAutoMACInsertion 5530  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 5508  
                                       __end_of_hexToChar 562E  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1C60  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 538A  
                                         __size_of___lmul 0058  
                                                 ___awmod 4A78  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 46A8  
                                         __size_of___wmul 0028  
                                                 ___llmod 4C34  
                                                 ___lwdiv 4EB6  
                                                 ___lwmod 50D0  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 57AC  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 4328  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 0ADA  
                                                 __ptext1 577C  
                                                 __ptext2 57A8  
                                                 __ptext3 5738  
                                                 __ptext4 566C  
                                                 __ptext5 4286  
                                                 __ptext6 369C  
                                                 __ptext7 2FD0  
                                                 __ptext8 3566  
                                                 __ptext9 5490  
                                                 _mac_cmp 5114  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0187  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 5490  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 5466  
                   __end_of_ethernetController_dropPacket 51D4  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 5198  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                        ___awmod@dividend 006E  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 3566  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 340E  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0014  
                                              ??_arp_init 00B2  
                                                 main@err 03C9  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 32AA  
                                    end_of_initialization 43BA  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 55A2  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 0134  
                                           __Lmediumconst 7A08  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0180  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 00A0  
                             ?_handleStackBackgroundTasks 0185  
                                       _arp_checkForEntry 4128  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 5508  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 54E0  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                     ipv4_background@link 0001  
                                        _ipv4_parseHeader 1ED8  
                             ?_enc424j600_writeSingleByte 0001  
                                     ipv4_sendFrame@index 00FC  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 5686  
                                     _enc424j600_writeSPI 4C9C  
                 __end_of_ipv4_streamToTransmissionBuffer 54B8  
                __size_of_ipv4_streamToTransmissionBuffer 0028  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 5490  
                                              _stack_init 577C  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 5762  
         __end_of_ethernetController_getNextPacketPointer 5754  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 5746  
                                              arp_init@ip 00B8  
                             __end_of_arp_handleNewPacket 2B28  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 3EF0  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 4F0A  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1994  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1688  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 01B7  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01AC  
                               __end_of_arp_checkForEntry 41DA  
                                           ??_hexToString 0065  
                              arp_getEntryFromTable@index 0067  
                              arp_setNewEntry@oldestIndex 00B0  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 4DB6  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 54E0  
                                           __pidataCOMRAM 57A2  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 508C  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
                                 ??_arp_getEntryFromTable 0067  
             __end_of_ethernetController_updateLinkStatus 461E  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 4594  
                                     start_initialization 4328  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 3EF0  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 3C1C  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 5284  
   __end_of_ethernetController_writeDestinationMACAddress 47AC  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 472C  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 0244  
                                     arp_background@state 01A8  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01C1  
                     __end_of_enc424j600_setRXTailPointer 5466  
                             _enc424j600_setRXTailPointer 543C  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 0200  
                                                ??___wmul 0064  
                                     arp_gratuitous@index 00FC  
                                     _ipv4_txFrameRequest 3566  
                             arp_background@ipPreliminary 019C  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK1 01CB  
                                             __pdataBANK2 02D2  
                                     arp_gratuitous@state 01A9  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3E08  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 56E0  
                                 _ipv4_setIPSourceAddress 56B8  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 03A2  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 05FE  
           __end_of_ethernetController_newPacketAvailable 5704  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 56F2  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 2E54  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 4468  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0074  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 2CD4  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2400 03C6  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01CB  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7A08  
                                               _getMillis 5716  
                                               __ptext100 579A  
                                               __ptext101 56A0  
                                               __ptext110 5728  
                                               __ptext102 5508  
                                               __ptext103 52BC  
                                               __ptext112 5762  
                                               __ptext104 52F2  
                                               __ptext113 3FB8  
                                               __ptext105 4C9C  
                                               __ptext114 47AC  
                                               __ptext106 4BCA  
                                               __ptext115 4F0A  
                                               __ptext107 5650  
                                               __ptext116 41DA  
                                               __ptext108 55C6  
                                               __ptext109 4A78  
                                                ?___awmod 006E  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 560C  
                                               _arp_table 0300  
                                               _arp_probe 1994  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 57A8  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                                  arp_background@errProbe 015A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3657 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 535A  
                                             _macToString 3B14  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0164  
                                       _entireMemoryEmpty 5284  
                                ??_ethernet_rxGetNewFrame 017A  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                     ipv4_streamToTransmissionBuffer@data 00C2  
                                arp_setNewEntry@timestamp 00A4  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 01AA  
                                  __end_of_arp_background 2E54  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 2122  
                                  _enc424j600_setTXLength 5412  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u822_40 4234  
                                                i2u823_40 4236  
                                                i2u735_40 4F2C  
                                                i2u831_40 4034  
                                                i2u832_44 4044  
                                                i2u832_45 4040  
                                                i2u827_44 3FC8  
                                                i2u827_45 3FC4  
                                                i2u865_40 0060  
                                                i2u865_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 00B1  
                                     __size_of_updateTime 000E  
                                             _hexToString 3D1A  
                                      _mac_setToBroadcast 557C  
                              __end_of_sevenSegmentUpdate 4076  
                                              ?_getMillis 0060  
                                                _UARTInit 5728  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 5412  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 53E8  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 482A  
                __end_of_enc424j600_setERXDATAReadPointer 524C  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 5210  
                                              ?_arp_probe 0134  
                                               arp_init@i 00BC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 01A0  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 03CC  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 2FD0  
                                 __end_of_arp_sendRequest 4506  
                               __end_of_entireMemoryEmpty 52BC  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 46A8  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 461E  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0146  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 433C  
                                               copy_data1 435C  
                                               copy_data2 437C  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01AD  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 2122  
                                         ?_arp_background 0151  
                __end_of_ethernetController_checkDeviceId 4FF8  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 4FAA  
                                      arp_background@link 0156  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 5044  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 4FF8  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                      arp_gratuitous@link 0138  
                      __end_of_enc424j600_writeSingleByte 56B8  
                              _enc424j600_writeSingleByte 56A0  
                                  macToString@secondDigit 0094  
                                        __size_of___awmod 0072  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 5328  
                       handleStackBackgroundTasks@errIPv4 018E  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 491C  
                 __end_of_ethernetController_setLEDConfig 4594  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 4506  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 4286  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01CA  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                          __size_of_arp_getEntryFromTable 002E  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                           __end_of_arp_getEntryFromTable 53E8  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 0198  
                                                __ptext10 2366  
                                                __ptext11 56B8  
                                                __ptext20 3D1A  
                                                __ptext12 257A  
                                                __ptext21 560C  
                                                __ptext13 53BA  
                                                __ptext30 5746  
                                                __ptext22 5044  
                                                __ptext14 32AA  
                                                __ptext31 5786  
                                                __ptext23 482A  
                                                __ptext15 00EC  
                                                __ptext40 3C1C  
                                                __ptext32 313E  
                                                __ptext24 491C  
                                                __ptext16 2B28  
                                                __ptext41 4C34  
                                                __ptext33 56E0  
                                                __ptext25 136C  
                                                __ptext17 1ED8  
                                                __ptext50 5754  
                                                __ptext42 46A8  
                                                __ptext34 0F72  
                                                __ptext26 4AEA  
                                                __ptext18 3EF0  
                                                __ptext51 461E  
                                                __ptext43 4594  
                                                __ptext35 5114  
                                                __ptext27 508C  
                                                __ptext19 1688  
                                                __ptext60 1994  
                                                __ptext52 4990  
                                                __ptext44 37CA  
                                                __ptext36 4D00  
                                                __ptext28 297A  
                                                __ptext61 4DB6  
                                                __ptext53 2E54  
                                                __ptext45 4506  
                                                __ptext37 562E  
                                                __ptext29 5198  
                                                __ptext70 4A04  
                                                __ptext62 4D5E  
                                                __ptext54 535A  
                                                __ptext46 340E  
                                                __ptext38 5328  
                                                __ptext71 1C60  
                                                __ptext63 5530  
                                                __ptext55 3B14  
                                                __ptext47 4FF8  
                                                __ptext39 4E62  
                                                __ptext80 4F5C  
                                                __ptext72 557C  
                                                __ptext64 2122  
                                                __ptext56 538A  
                                                __ptext48 56F2  
                                                __ptext81 472C  
                                                __ptext73 3E08  
                                                __ptext65 278C  
                                                __ptext57 2CD4  
                                                __ptext49 5686  
                                                __ptext90 4128  
                                                __ptext82 48A4  
                                                __ptext74 05FE  
                                                __ptext66 50D0  
                                                __ptext58 5704  
                                                __ptext91 5156  
                                                __ptext83 51D4  
                                                __ptext75 524C  
                                                __ptext67 4EB6  
                                                __ptext59 56CC  
                                                __ptext92 5716  
                                                __ptext84 54E0  
                                                __ptext76 5284  
                                                __ptext68 4468  
                                                __ptext93 4E0C  
                                                __ptext85 55A2  
                                                __ptext77 38EC  
                                                __ptext69 5556  
                                                __ptext94 43C8  
                                                __ptext86 53E8  
                                                __ptext78 4076  
                                                __ptext95 3A0A  
                                                __ptext87 5412  
                                                __ptext79 54B8  
                                                __ptext96 4FAA  
                                                __ptext88 4B5A  
                                                __ptext97 543C  
                                                __ptext89 5210  
                                                __ptext98 5466  
                                                __ptext99 5790  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 4990  
                                                _arp_send 1C60  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0512  
                                          _mac_setAllZero 5556  
                                  __end_of_arp_gratuitous 2366  
                                                _ipv4_cmp 5156  
                                                _ipSource 01A4  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 5044  
                         __end_of_ipv4_getIPSourceAddress 56F2  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 56CC  
              __end_of_ipv4_getPreliminaryIPSourceAddress 5716  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 5704  
                                           __size_of_main 0498  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 5686  
                                       ??_ipv4_background 009D  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 5790  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 5786  
                 __end_of_enc424j600_setNextPacketPointer 579A  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 5790  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 00A0  
                                         _checkForOverlap 38EC  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 47AC  
                                             ??_getMillis 0064  
                                                int$flags 0050  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 535A  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                     _ipv4_SrcAddrChanged 56CC  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0139  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 0182  
                                        _UARTTransmitText 4E0C  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 00BD  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 009A  
                                  ipv4_sendFrame@ipPacket 0134  
                                       arp_background@err 01C7  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 00FD  
                                  __end_of_mac_setAllZero 557C  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 55A2  
                             __end_of_enc424j600_writeSPI 4D00  
                        handleStackBackgroundTasks@errArp 0189  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00C0  
                                           _arp_sendReply 313E  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 0134  
                           __end_of_arp_parseFromRXBuffer 136C  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5946 02D2  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 00AC  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 0212  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 5786  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 566C  
                              __end_of_enc424j600_readSPI 4C34  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 0142  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 5770  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 014A  
                                       arp_probe@ipTarget 0134  
                                         _UARTTransmitInt 562E  
                                      arp_setNewEntry@mac 009A  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 1688  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 136C  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 0194  
                __end_of_enc424j600_setGPDATAWritePointer 5210  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 51D4  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 3B14  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 3A0A  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2CD4  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 3A0A  
           __end_ofethernetController_getDeviceName@F5998 7A14  
                   ethernetController_getDeviceName@F5998 7A09  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2491 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
