

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sun Mar 17 19:40:14 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1,group=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   133                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   134                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   135  0000                     
   136                           ; Version 1.45
   137                           ; Generated 16/11/2017 GMT
   138                           ; 
   139                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   140                           ; All rights reserved.
   141                           ; 
   142                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   143                           ; 
   144                           ; Redistribution and use in source and binary forms, with or without modification, are
   145                           ; permitted provided that the following conditions are met:
   146                           ; 
   147                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   148                           ;        conditions and the following disclaimer.
   149                           ; 
   150                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   151                           ;        of conditions and the following disclaimer in the documentation and/or other
   152                           ;        materials provided with the distribution.
   153                           ; 
   154                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   155                           ;        software without specific prior written permission.
   156                           ; 
   157                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   158                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   159                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   160                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   161                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   162                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   163                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   164                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   165                           ; 
   166                           ; 
   167                           ; Code-generator required, PIC18F25K50 Definitions
   168                           ; 
   169                           ; SFR Addresses
   170  0000                     
   171                           	psect	idataCOMRAM
   172  004CDC                     __pidataCOMRAM:
   173                           	opt stack 0
   174                           
   175                           ;initializer for _randx
   176  004CDC  0001               	dw	1
   177  004CDE  0000               	dw	0
   178                           
   179                           ;initializer for ethernetController_softReset@F5983
   180  004CE0  12                 	db	18
   181  004CE1  34                 	db	52
   182                           
   183                           	psect	idataBANK2
   184  004966                     __pidataBANK2:
   185                           	opt stack 0
   186                           
   187                           ;initializer for macToString@F5943
   188  004966  3F                 	db	63
   189  004967  3F                 	db	63
   190  004968  3A                 	db	58
   191  004969  3F                 	db	63
   192  00496A  3F                 	db	63
   193  00496B  3A                 	db	58
   194  00496C  3F                 	db	63
   195  00496D  3F                 	db	63
   196  00496E  3A                 	db	58
   197  00496F  3F                 	db	63
   198  004970  3F                 	db	63
   199  004971  3A                 	db	58
   200  004972  3F                 	db	63
   201  004973  3F                 	db	63
   202  004974  3A                 	db	58
   203  004975  3F                 	db	63
   204  004976  3F                 	db	63
   205  004977  00                 	db	0
   206                           
   207                           ;initializer for _sevenSegCharacters
   208  004978  3F                 	db	63
   209  004979  06                 	db	6
   210  00497A  5B                 	db	91
   211  00497B  4F                 	db	79
   212  00497C  66                 	db	102
   213  00497D  6D                 	db	109
   214  00497E  7D                 	db	125
   215  00497F  07                 	db	7
   216  004980  7F                 	db	127
   217  004981  6F                 	db	111
   218  004982  00                 	db	0
   219  004983  40                 	db	64
   220                           
   221                           ;initializer for ipAdressToString@address
   222  004984  3F                 	db	63
   223  004985  3F                 	db	63
   224  004986  3F                 	db	63
   225  004987  2E                 	db	46
   226  004988  3F                 	db	63
   227  004989  3F                 	db	63
   228  00498A  3F                 	db	63
   229  00498B  2E                 	db	46
   230  00498C  3F                 	db	63
   231  00498D  3F                 	db	63
   232  00498E  3F                 	db	63
   233  00498F  2E                 	db	46
   234  004990  3F                 	db	63
   235  004991  3F                 	db	63
   236  004992  3F                 	db	63
   237  004993  00                 	db	0
   238                           
   239                           	psect	mediumconst
   240  007AA8                     __pmediumconst:
   241                           	opt stack 0
   242  007AA8  00                 	db	0
   243  007AA9                     ethernetController_getDeviceName@F5995:
   244                           	opt stack 0
   245  007AA9  45                 	db	69
   246  007AAA  4E                 	db	78
   247  007AAB  43                 	db	67
   248  007AAC  34                 	db	52
   249  007AAD  32                 	db	50
   250  007AAE  34                 	db	52
   251  007AAF  4A                 	db	74
   252  007AB0  36                 	db	54
   253  007AB1  30                 	db	48
   254  007AB2  30                 	db	48
   255  007AB3  00                 	db	0
   256  007AB4                     __end_ofethernetController_getDeviceName@F5995:
   257                           	opt stack 0
   258  0000                     _ANSELC	set	3933
   259  0000                     _ANSELA	set	3931
   260  0000                     _ANSELB	set	3932
   261  0000                     _ANSELBbits	set	3932
   262  0000                     _CCPR1	set	4030
   263  0000                     _TXREG1	set	4013
   264  0000                     _SPBRG	set	4015
   265  0000                     _RCSTA1bits	set	4011
   266  0000                     _TXSTA1bits	set	4012
   267  0000                     _PORTA	set	3968
   268  0000                     _TRISA	set	3986
   269  0000                     _TRISC	set	3988
   270  0000                     _PORTC	set	3970
   271  0000                     _PIR1bits	set	3998
   272  0000                     _PORTB	set	3969
   273  0000                     _TRISB	set	3987
   274  0000                     _RCONbits	set	4048
   275  0000                     _PIE1bits	set	3997
   276  0000                     _CCP1CONbits	set	4029
   277  0000                     _T1CONbits	set	4045
   278  0000                     _T0CONbits	set	4053
   279  0000                     _INTCON3bits	set	4080
   280  0000                     _INTCONbits	set	4082
   281  0000                     _OSCCON2bits	set	4050
   282  0000                     _OSCCONbits	set	4051
   283  0000                     _SSP1BUF	set	4041
   284  0000                     _TRISBbits	set	3987
   285  0000                     _SSP1STATbits	set	4039
   286  0000                     _SSP1CON1bits	set	4038
   287  0000                     _PORTBbits	set	3969
   288  0000                     _TRMT	set	32097
   289  0000                     _RCIF	set	31989
   290  0000                     _RCIE	set	31981
   291  0000                     _RCIP	set	31997
   292  0000                     _TXIF	set	31988
   293  007AB4                     STR_89:
   294  007AB4  49                 	db	73	;'I'
   295  007AB5  50                 	db	80	;'P'
   296  007AB6  76                 	db	118	;'v'
   297  007AB7  34                 	db	52	;'4'
   298  007AB8  3A                 	db	58	;':'
   299  007AB9  20                 	db	32
   300  007ABA  46                 	db	70	;'F'
   301  007ABB  6C                 	db	108	;'l'
   302  007ABC  61                 	db	97	;'a'
   303  007ABD  67                 	db	103	;'g'
   304  007ABE  20                 	db	32
   305  007ABF  77                 	db	119	;'w'
   306  007AC0  61                 	db	97	;'a'
   307  007AC1  73                 	db	115	;'s'
   308  007AC2  20                 	db	32
   309  007AC3  72                 	db	114	;'r'
   310  007AC4  65                 	db	101	;'e'
   311  007AC5  73                 	db	115	;'s'
   312  007AC6  65                 	db	101	;'e'
   313  007AC7  74                 	db	116	;'t'
   314  007AC8  20                 	db	32
   315  007AC9  62                 	db	98	;'b'
   316  007ACA  65                 	db	101	;'e'
   317  007ACB  63                 	db	99	;'c'
   318  007ACC  61                 	db	97	;'a'
   319  007ACD  75                 	db	117	;'u'
   320  007ACE  73                 	db	115	;'s'
   321  007ACF  65                 	db	101	;'e'
   322  007AD0  20                 	db	32
   323  007AD1  61                 	db	97	;'a'
   324  007AD2  64                 	db	100	;'d'
   325  007AD3  64                 	db	100	;'d'
   326  007AD4  72                 	db	114	;'r'
   327  007AD5  65                 	db	101	;'e'
   328  007AD6  73                 	db	115	;'s'
   329  007AD7  73                 	db	115	;'s'
   330  007AD8  20                 	db	32
   331  007AD9  63                 	db	99	;'c'
   332  007ADA  68                 	db	104	;'h'
   333  007ADB  61                 	db	97	;'a'
   334  007ADC  6E                 	db	110	;'n'
   335  007ADD  67                 	db	103	;'g'
   336  007ADE  65                 	db	101	;'e'
   337  007ADF  20                 	db	32
   338  007AE0  77                 	db	119	;'w'
   339  007AE1  61                 	db	97	;'a'
   340  007AE2  73                 	db	115	;'s'
   341  007AE3  20                 	db	32
   342  007AE4  75                 	db	117	;'u'
   343  007AE5  6E                 	db	110	;'n'
   344  007AE6  73                 	db	115	;'s'
   345  007AE7  75                 	db	117	;'u'
   346  007AE8  63                 	db	99	;'c'
   347  007AE9  63                 	db	99	;'c'
   348  007AEA  65                 	db	101	;'e'
   349  007AEB  73                 	db	115	;'s'
   350  007AEC  73                 	db	115	;'s'
   351  007AED  66                 	db	102	;'f'
   352  007AEE  75                 	db	117	;'u'
   353  007AEF  6C                 	db	108	;'l'
   354  007AF0  2E                 	db	46
   355  007AF1  0A                 	db	10
   356  007AF2  0D                 	db	13
   357  007AF3  00                 	db	0
   358  007AF4                     STR_95:
   359  007AF4  49                 	db	73	;'I'
   360  007AF5  50                 	db	80	;'P'
   361  007AF6  76                 	db	118	;'v'
   362  007AF7  34                 	db	52	;'4'
   363  007AF8  3A                 	db	58	;':'
   364  007AF9  20                 	db	32
   365  007AFA  46                 	db	70	;'F'
   366  007AFB  6C                 	db	108	;'l'
   367  007AFC  61                 	db	97	;'a'
   368  007AFD  67                 	db	103	;'g'
   369  007AFE  20                 	db	32
   370  007AFF  77                 	db	119	;'w'
   371  007B00  61                 	db	97	;'a'
   372  007B01  73                 	db	115	;'s'
   373  007B02  20                 	db	32
   374  007B03  72                 	db	114	;'r'
   375  007B04  65                 	db	101	;'e'
   376  007B05  73                 	db	115	;'s'
   377  007B06  65                 	db	101	;'e'
   378  007B07  74                 	db	116	;'t'
   379  007B08  20                 	db	32
   380  007B09  62                 	db	98	;'b'
   381  007B0A  65                 	db	101	;'e'
   382  007B0B  63                 	db	99	;'c'
   383  007B0C  61                 	db	97	;'a'
   384  007B0D  75                 	db	117	;'u'
   385  007B0E  73                 	db	115	;'s'
   386  007B0F  65                 	db	101	;'e'
   387  007B10  20                 	db	32
   388  007B11  61                 	db	97	;'a'
   389  007B12  64                 	db	100	;'d'
   390  007B13  64                 	db	100	;'d'
   391  007B14  72                 	db	114	;'r'
   392  007B15  65                 	db	101	;'e'
   393  007B16  73                 	db	115	;'s'
   394  007B17  73                 	db	115	;'s'
   395  007B18  20                 	db	32
   396  007B19  63                 	db	99	;'c'
   397  007B1A  68                 	db	104	;'h'
   398  007B1B  61                 	db	97	;'a'
   399  007B1C  6E                 	db	110	;'n'
   400  007B1D  67                 	db	103	;'g'
   401  007B1E  65                 	db	101	;'e'
   402  007B1F  20                 	db	32
   403  007B20  69                 	db	105	;'i'
   404  007B21  73                 	db	115	;'s'
   405  007B22  20                 	db	32
   406  007B23  63                 	db	99	;'c'
   407  007B24  6F                 	db	111	;'o'
   408  007B25  6D                 	db	109	;'m'
   409  007B26  70                 	db	112	;'p'
   410  007B27  6C                 	db	108	;'l'
   411  007B28  65                 	db	101	;'e'
   412  007B29  74                 	db	116	;'t'
   413  007B2A  65                 	db	101	;'e'
   414  007B2B  2E                 	db	46
   415  007B2C  0A                 	db	10
   416  007B2D  0D                 	db	13
   417  007B2E  00                 	db	0
   418  007B2F                     STR_47:
   419  007B2F  45                 	db	69	;'E'
   420  007B30  74                 	db	116	;'t'
   421  007B31  68                 	db	104	;'h'
   422  007B32  65                 	db	101	;'e'
   423  007B33  72                 	db	114	;'r'
   424  007B34  6E                 	db	110	;'n'
   425  007B35  65                 	db	101	;'e'
   426  007B36  74                 	db	116	;'t'
   427  007B37  20                 	db	32
   428  007B38  63                 	db	99	;'c'
   429  007B39  6F                 	db	111	;'o'
   430  007B3A  6E                 	db	110	;'n'
   431  007B3B  74                 	db	116	;'t'
   432  007B3C  72                 	db	114	;'r'
   433  007B3D  6F                 	db	111	;'o'
   434  007B3E  6C                 	db	108	;'l'
   435  007B3F  6C                 	db	108	;'l'
   436  007B40  65                 	db	101	;'e'
   437  007B41  72                 	db	114	;'r'
   438  007B42  20                 	db	32
   439  007B43  68                 	db	104	;'h'
   440  007B44  61                 	db	97	;'a'
   441  007B45  73                 	db	115	;'s'
   442  007B46  20                 	db	32
   443  007B47  72                 	db	114	;'r'
   444  007B48  65                 	db	101	;'e'
   445  007B49  74                 	db	116	;'t'
   446  007B4A  75                 	db	117	;'u'
   447  007B4B  72                 	db	114	;'r'
   448  007B4C  6E                 	db	110	;'n'
   449  007B4D  65                 	db	101	;'e'
   450  007B4E  64                 	db	100	;'d'
   451  007B4F  20                 	db	32
   452  007B50  61                 	db	97	;'a'
   453  007B51  6E                 	db	110	;'n'
   454  007B52  20                 	db	32
   455  007B53  75                 	db	117	;'u'
   456  007B54  6E                 	db	110	;'n'
   457  007B55  6B                 	db	107	;'k'
   458  007B56  6E                 	db	110	;'n'
   459  007B57  6F                 	db	111	;'o'
   460  007B58  77                 	db	119	;'w'
   461  007B59  6E                 	db	110	;'n'
   462  007B5A  20                 	db	32
   463  007B5B  64                 	db	100	;'d'
   464  007B5C  65                 	db	101	;'e'
   465  007B5D  76                 	db	118	;'v'
   466  007B5E  69                 	db	105	;'i'
   467  007B5F  63                 	db	99	;'c'
   468  007B60  65                 	db	101	;'e'
   469  007B61  20                 	db	32
   470  007B62  49                 	db	73	;'I'
   471  007B63  44                 	db	68	;'D'
   472  007B64  2E                 	db	46
   473  007B65  00                 	db	0
   474  007B66                     STR_22:
   475  007B66  2D                 	db	45
   476  007B67  2D                 	db	45
   477  007B68  2D                 	db	45
   478  007B69  2D                 	db	45
   479  007B6A  2D                 	db	45
   480  007B6B  2D                 	db	45
   481  007B6C  2D                 	db	45
   482  007B6D  2D                 	db	45
   483  007B6E  2D                 	db	45
   484  007B6F  2D                 	db	45
   485  007B70  2D                 	db	45
   486  007B71  2D                 	db	45
   487  007B72  2D                 	db	45
   488  007B73  2D                 	db	45
   489  007B74  2D                 	db	45
   490  007B75  2D                 	db	45
   491  007B76  2D                 	db	45
   492  007B77  2D                 	db	45
   493  007B78  2D                 	db	45
   494  007B79  2D                 	db	45
   495  007B7A  2D                 	db	45
   496  007B7B  2D                 	db	45
   497  007B7C  2D                 	db	45
   498  007B7D  2D                 	db	45
   499  007B7E  2D                 	db	45
   500  007B7F  2D                 	db	45
   501  007B80  2D                 	db	45
   502  007B81  2D                 	db	45
   503  007B82  2D                 	db	45
   504  007B83  2D                 	db	45
   505  007B84  2D                 	db	45
   506  007B85  2D                 	db	45
   507  007B86  2D                 	db	45
   508  007B87  2D                 	db	45
   509  007B88  2D                 	db	45
   510  007B89  2D                 	db	45
   511  007B8A  2D                 	db	45
   512  007B8B  2D                 	db	45
   513  007B8C  2D                 	db	45
   514  007B8D  2D                 	db	45
   515  007B8E  2D                 	db	45
   516  007B8F  2D                 	db	45
   517  007B90  2D                 	db	45
   518  007B91  2D                 	db	45
   519  007B92  2D                 	db	45
   520  007B93  2D                 	db	45
   521  007B94  2D                 	db	45
   522  007B95  2D                 	db	45
   523  007B96  0A                 	db	10
   524  007B97  0D                 	db	13
   525  007B98  00                 	db	0
   526  007B99                     STR_23:
   527  007B99  07                 	db	7
   528  007B9A  2A                 	db	42
   529  007B9B  2A                 	db	42
   530  007B9C  2A                 	db	42
   531  007B9D  20                 	db	32
   532  007B9E  43                 	db	67	;'C'
   533  007B9F  52                 	db	82	;'R'
   534  007BA0  49                 	db	73	;'I'
   535  007BA1  54                 	db	84	;'T'
   536  007BA2  49                 	db	73	;'I'
   537  007BA3  43                 	db	67	;'C'
   538  007BA4  41                 	db	65	;'A'
   539  007BA5  4C                 	db	76	;'L'
   540  007BA6  20                 	db	32
   541  007BA7  45                 	db	69	;'E'
   542  007BA8  52                 	db	82	;'R'
   543  007BA9  52                 	db	82	;'R'
   544  007BAA  4F                 	db	79	;'O'
   545  007BAB  52                 	db	82	;'R'
   546  007BAC  3A                 	db	58	;':'
   547  007BAD  20                 	db	32
   548  007BAE  57                 	db	87	;'W'
   549  007BAF  41                 	db	65	;'A'
   550  007BB0  54                 	db	84	;'T'
   551  007BB1  43                 	db	67	;'C'
   552  007BB2  48                 	db	72	;'H'
   553  007BB3  44                 	db	68	;'D'
   554  007BB4  4F                 	db	79	;'O'
   555  007BB5  47                 	db	71	;'G'
   556  007BB6  20                 	db	32
   557  007BB7  43                 	db	67	;'C'
   558  007BB8  41                 	db	65	;'A'
   559  007BB9  55                 	db	85	;'U'
   560  007BBA  53                 	db	83	;'S'
   561  007BBB  45                 	db	69	;'E'
   562  007BBC  44                 	db	68	;'D'
   563  007BBD  20                 	db	32
   564  007BBE  52                 	db	82	;'R'
   565  007BBF  45                 	db	69	;'E'
   566  007BC0  53                 	db	83	;'S'
   567  007BC1  45                 	db	69	;'E'
   568  007BC2  54                 	db	84	;'T'
   569  007BC3  20                 	db	32
   570  007BC4  2A                 	db	42
   571  007BC5  2A                 	db	42
   572  007BC6  2A                 	db	42
   573  007BC7  0A                 	db	10
   574  007BC8  0D                 	db	13
   575  007BC9  00                 	db	0
   576  007BCA                     STR_90:
   577  007BCA  49                 	db	73	;'I'
   578  007BCB  50                 	db	80	;'P'
   579  007BCC  76                 	db	118	;'v'
   580  007BCD  34                 	db	52	;'4'
   581  007BCE  3A                 	db	58	;':'
   582  007BCF  20                 	db	32
   583  007BD0  41                 	db	65	;'A'
   584  007BD1  52                 	db	82	;'R'
   585  007BD2  50                 	db	80	;'P'
   586  007BD3  20                 	db	32
   587  007BD4  73                 	db	115	;'s'
   588  007BD5  65                 	db	101	;'e'
   589  007BD6  6E                 	db	110	;'n'
   590  007BD7  74                 	db	116	;'t'
   591  007BD8  20                 	db	32
   592  007BD9  6D                 	db	109	;'m'
   593  007BDA  61                 	db	97	;'a'
   594  007BDB  78                 	db	120	;'x'
   595  007BDC  69                 	db	105	;'i'
   596  007BDD  6D                 	db	109	;'m'
   597  007BDE  75                 	db	117	;'u'
   598  007BDF  6D                 	db	109	;'m'
   599  007BE0  20                 	db	32
   600  007BE1  6E                 	db	110	;'n'
   601  007BE2  75                 	db	117	;'u'
   602  007BE3  6D                 	db	109	;'m'
   603  007BE4  62                 	db	98	;'b'
   604  007BE5  65                 	db	101	;'e'
   605  007BE6  72                 	db	114	;'r'
   606  007BE7  20                 	db	32
   607  007BE8  6F                 	db	111	;'o'
   608  007BE9  66                 	db	102	;'f'
   609  007BEA  20                 	db	32
   610  007BEB  72                 	db	114	;'r'
   611  007BEC  65                 	db	101	;'e'
   612  007BED  71                 	db	113	;'q'
   613  007BEE  75                 	db	117	;'u'
   614  007BEF  65                 	db	101	;'e'
   615  007BF0  73                 	db	115	;'s'
   616  007BF1  74                 	db	116	;'t'
   617  007BF2  73                 	db	115	;'s'
   618  007BF3  2E                 	db	46
   619  007BF4  0A                 	db	10
   620  007BF5  0D                 	db	13
   621  007BF6  00                 	db	0
   622  007BF7                     STR_86:
   623  007BF7  49                 	db	73	;'I'
   624  007BF8  50                 	db	80	;'P'
   625  007BF9  76                 	db	118	;'v'
   626  007BFA  34                 	db	52	;'4'
   627  007BFB  3A                 	db	58	;':'
   628  007BFC  20                 	db	32
   629  007BFD  52                 	db	82	;'R'
   630  007BFE  65                 	db	101	;'e'
   631  007BFF  71                 	db	113	;'q'
   632  007C00  75                 	db	117	;'u'
   633  007C01  65                 	db	101	;'e'
   634  007C02  73                 	db	115	;'s'
   635  007C03  74                 	db	116	;'t'
   636  007C04  20                 	db	32
   637  007C05  66                 	db	102	;'f'
   638  007C06  6F                 	db	111	;'o'
   639  007C07  72                 	db	114	;'r'
   640  007C08  20                 	db	32
   641  007C09  6E                 	db	110	;'n'
   642  007C0A  65                 	db	101	;'e'
   643  007C0B  77                 	db	119	;'w'
   644  007C0C  20                 	db	32
   645  007C0D  49                 	db	73	;'I'
   646  007C0E  50                 	db	80	;'P'
   647  007C0F  20                 	db	32
   648  007C10  73                 	db	115	;'s'
   649  007C11  6F                 	db	111	;'o'
   650  007C12  75                 	db	117	;'u'
   651  007C13  72                 	db	114	;'r'
   652  007C14  63                 	db	99	;'c'
   653  007C15  65                 	db	101	;'e'
   654  007C16  20                 	db	32
   655  007C17  61                 	db	97	;'a'
   656  007C18  64                 	db	100	;'d'
   657  007C19  64                 	db	100	;'d'
   658  007C1A  72                 	db	114	;'r'
   659  007C1B  65                 	db	101	;'e'
   660  007C1C  73                 	db	115	;'s'
   661  007C1D  73                 	db	115	;'s'
   662  007C1E  20                 	db	32
   663  007C1F  28                 	db	40
   664  007C20  00                 	db	0
   665  007C21                     STR_96:
   666  007C21  49                 	db	73	;'I'
   667  007C22  50                 	db	80	;'P'
   668  007C23  76                 	db	118	;'v'
   669  007C24  34                 	db	52	;'4'
   670  007C25  3A                 	db	58	;':'
   671  007C26  20                 	db	32
   672  007C27  41                 	db	65	;'A'
   673  007C28  52                 	db	82	;'R'
   674  007C29  50                 	db	80	;'P'
   675  007C2A  20                 	db	32
   676  007C2B  72                 	db	114	;'r'
   677  007C2C  65                 	db	101	;'e'
   678  007C2D  74                 	db	116	;'t'
   679  007C2E  75                 	db	117	;'u'
   680  007C2F  72                 	db	114	;'r'
   681  007C30  6E                 	db	110	;'n'
   682  007C31  65                 	db	101	;'e'
   683  007C32  64                 	db	100	;'d'
   684  007C33  20                 	db	32
   685  007C34  61                 	db	97	;'a'
   686  007C35  6E                 	db	110	;'n'
   687  007C36  20                 	db	32
   688  007C37  75                 	db	117	;'u'
   689  007C38  6E                 	db	110	;'n'
   690  007C39  6B                 	db	107	;'k'
   691  007C3A  6E                 	db	110	;'n'
   692  007C3B  6F                 	db	111	;'o'
   693  007C3C  77                 	db	119	;'w'
   694  007C3D  6E                 	db	110	;'n'
   695  007C3E  20                 	db	32
   696  007C3F  65                 	db	101	;'e'
   697  007C40  72                 	db	114	;'r'
   698  007C41  72                 	db	114	;'r'
   699  007C42  6F                 	db	111	;'o'
   700  007C43  72                 	db	114	;'r'
   701  007C44  2E                 	db	46
   702  007C45  0A                 	db	10
   703  007C46  0D                 	db	13
   704  007C47  00                 	db	0
   705  007C48                     STR_59:
   706  007C48  5B                 	db	91	;'['
   707  007C49  49                 	db	73	;'I'
   708  007C4A  6E                 	db	110	;'n'
   709  007C4B  76                 	db	118	;'v'
   710  007C4C  61                 	db	97	;'a'
   711  007C4D  6C                 	db	108	;'l'
   712  007C4E  69                 	db	105	;'i'
   713  007C4F  64                 	db	100	;'d'
   714  007C50  20                 	db	32
   715  007C51  41                 	db	65	;'A'
   716  007C52  52                 	db	82	;'R'
   717  007C53  50                 	db	80	;'P'
   718  007C54  20                 	db	32
   719  007C55  4D                 	db	77	;'M'
   720  007C56  65                 	db	101	;'e'
   721  007C57  73                 	db	115	;'s'
   722  007C58  73                 	db	115	;'s'
   723  007C59  61                 	db	97	;'a'
   724  007C5A  67                 	db	103	;'g'
   725  007C5B  65                 	db	101	;'e'
   726  007C5C  20                 	db	32
   727  007C5D  77                 	db	119	;'w'
   728  007C5E  61                 	db	97	;'a'
   729  007C5F  73                 	db	115	;'s'
   730  007C60  20                 	db	32
   731  007C61  64                 	db	100	;'d'
   732  007C62  69                 	db	105	;'i'
   733  007C63  73                 	db	115	;'s'
   734  007C64  63                 	db	99	;'c'
   735  007C65  61                 	db	97	;'a'
   736  007C66  72                 	db	114	;'r'
   737  007C67  64                 	db	100	;'d'
   738  007C68  65                 	db	101	;'e'
   739  007C69  64                 	db	100	;'d'
   740  007C6A  2E                 	db	46
   741  007C6B  5D                 	db	93	;']'
   742  007C6C  0D                 	db	13
   743  007C6D  0A                 	db	10
   744  007C6E  00                 	db	0
   745  007C6F                     STR_93:
   746  007C6F  20                 	db	32
   747  007C70  77                 	db	119	;'w'
   748  007C71  61                 	db	97	;'a'
   749  007C72  73                 	db	115	;'s'
   750  007C73  20                 	db	32
   751  007C74  73                 	db	115	;'s'
   752  007C75  65                 	db	101	;'e'
   753  007C76  74                 	db	116	;'t'
   754  007C77  20                 	db	32
   755  007C78  74                 	db	116	;'t'
   756  007C79  6F                 	db	111	;'o'
   757  007C7A  20                 	db	32
   758  007C7B  74                 	db	116	;'t'
   759  007C7C  68                 	db	104	;'h'
   760  007C7D  65                 	db	101	;'e'
   761  007C7E  20                 	db	32
   762  007C7F  70                 	db	112	;'p'
   763  007C80  72                 	db	114	;'r'
   764  007C81  65                 	db	101	;'e'
   765  007C82  6C                 	db	108	;'l'
   766  007C83  69                 	db	105	;'i'
   767  007C84  6D                 	db	109	;'m'
   768  007C85  69                 	db	105	;'i'
   769  007C86  6E                 	db	110	;'n'
   770  007C87  61                 	db	97	;'a'
   771  007C88  72                 	db	114	;'r'
   772  007C89  79                 	db	121	;'y'
   773  007C8A  20                 	db	32
   774  007C8B  61                 	db	97	;'a'
   775  007C8C  64                 	db	100	;'d'
   776  007C8D  64                 	db	100	;'d'
   777  007C8E  72                 	db	114	;'r'
   778  007C8F  65                 	db	101	;'e'
   779  007C90  73                 	db	115	;'s'
   780  007C91  73                 	db	115	;'s'
   781  007C92  20                 	db	32
   782  007C93  28                 	db	40
   783  007C94  00                 	db	0
   784  007C95                     STR_46:
   785  007C95  45                 	db	69	;'E'
   786  007C96  74                 	db	116	;'t'
   787  007C97  68                 	db	104	;'h'
   788  007C98  65                 	db	101	;'e'
   789  007C99  72                 	db	114	;'r'
   790  007C9A  6E                 	db	110	;'n'
   791  007C9B  65                 	db	101	;'e'
   792  007C9C  74                 	db	116	;'t'
   793  007C9D  20                 	db	32
   794  007C9E  63                 	db	99	;'c'
   795  007C9F  6F                 	db	111	;'o'
   796  007CA0  6E                 	db	110	;'n'
   797  007CA1  74                 	db	116	;'t'
   798  007CA2  72                 	db	114	;'r'
   799  007CA3  6F                 	db	111	;'o'
   800  007CA4  6C                 	db	108	;'l'
   801  007CA5  6C                 	db	108	;'l'
   802  007CA6  65                 	db	101	;'e'
   803  007CA7  72                 	db	114	;'r'
   804  007CA8  20                 	db	32
   805  007CA9  69                 	db	105	;'i'
   806  007CAA  73                 	db	115	;'s'
   807  007CAB  20                 	db	32
   808  007CAC  75                 	db	117	;'u'
   809  007CAD  6E                 	db	110	;'n'
   810  007CAE  72                 	db	114	;'r'
   811  007CAF  65                 	db	101	;'e'
   812  007CB0  73                 	db	115	;'s'
   813  007CB1  70                 	db	112	;'p'
   814  007CB2  6F                 	db	111	;'o'
   815  007CB3  6E                 	db	110	;'n'
   816  007CB4  73                 	db	115	;'s'
   817  007CB5  69                 	db	105	;'i'
   818  007CB6  76                 	db	118	;'v'
   819  007CB7  65                 	db	101	;'e'
   820  007CB8  2E                 	db	46
   821  007CB9  00                 	db	0
   822  007CBA                     STR_70:
   823  007CBA  41                 	db	65	;'A'
   824  007CBB  52                 	db	82	;'R'
   825  007CBC  50                 	db	80	;'P'
   826  007CBD  3A                 	db	58	;':'
   827  007CBE  20                 	db	32
   828  007CBF  49                 	db	73	;'I'
   829  007CC0  50                 	db	80	;'P'
   830  007CC1  76                 	db	118	;'v'
   831  007CC2  34                 	db	52	;'4'
   832  007CC3  20                 	db	32
   833  007CC4  61                 	db	97	;'a'
   834  007CC5  64                 	db	100	;'d'
   835  007CC6  64                 	db	100	;'d'
   836  007CC7  72                 	db	114	;'r'
   837  007CC8  65                 	db	101	;'e'
   838  007CC9  73                 	db	115	;'s'
   839  007CCA  73                 	db	115	;'s'
   840  007CCB  20                 	db	32
   841  007CCC  61                 	db	97	;'a'
   842  007CCD  6C                 	db	108	;'l'
   843  007CCE  72                 	db	114	;'r'
   844  007CCF  65                 	db	101	;'e'
   845  007CD0  61                 	db	97	;'a'
   846  007CD1  64                 	db	100	;'d'
   847  007CD2  79                 	db	121	;'y'
   848  007CD3  20                 	db	32
   849  007CD4  69                 	db	105	;'i'
   850  007CD5  6E                 	db	110	;'n'
   851  007CD6  20                 	db	32
   852  007CD7  75                 	db	117	;'u'
   853  007CD8  73                 	db	115	;'s'
   854  007CD9  65                 	db	101	;'e'
   855  007CDA  21                 	db	33
   856  007CDB  0A                 	db	10
   857  007CDC  0D                 	db	13
   858  007CDD  00                 	db	0
   859  007CDE                     STR_88:
   860  007CDE  49                 	db	73	;'I'
   861  007CDF  50                 	db	80	;'P'
   862  007CE0  76                 	db	118	;'v'
   863  007CE1  34                 	db	52	;'4'
   864  007CE2  3A                 	db	58	;':'
   865  007CE3  20                 	db	32
   866  007CE4  41                 	db	65	;'A'
   867  007CE5  64                 	db	100	;'d'
   868  007CE6  64                 	db	100	;'d'
   869  007CE7  72                 	db	114	;'r'
   870  007CE8  65                 	db	101	;'e'
   871  007CE9  73                 	db	115	;'s'
   872  007CEA  73                 	db	115	;'s'
   873  007CEB  20                 	db	32
   874  007CEC  69                 	db	105	;'i'
   875  007CED  73                 	db	115	;'s'
   876  007CEE  20                 	db	32
   877  007CEF  61                 	db	97	;'a'
   878  007CF0  6C                 	db	108	;'l'
   879  007CF1  72                 	db	114	;'r'
   880  007CF2  65                 	db	101	;'e'
   881  007CF3  61                 	db	97	;'a'
   882  007CF4  64                 	db	100	;'d'
   883  007CF5  79                 	db	121	;'y'
   884  007CF6  20                 	db	32
   885  007CF7  69                 	db	105	;'i'
   886  007CF8  6E                 	db	110	;'n'
   887  007CF9  20                 	db	32
   888  007CFA  75                 	db	117	;'u'
   889  007CFB  73                 	db	115	;'s'
   890  007CFC  65                 	db	101	;'e'
   891  007CFD  2E                 	db	46
   892  007CFE  0A                 	db	10
   893  007CFF  0D                 	db	13
   894  007D00  00                 	db	0
   895  007D01                     STR_48:
   896  007D01  49                 	db	73	;'I'
   897  007D02  50                 	db	80	;'P'
   898  007D03  20                 	db	32
   899  007D04  61                 	db	97	;'a'
   900  007D05  64                 	db	100	;'d'
   901  007D06  64                 	db	100	;'d'
   902  007D07  72                 	db	114	;'r'
   903  007D08  65                 	db	101	;'e'
   904  007D09  73                 	db	115	;'s'
   905  007D0A  73                 	db	115	;'s'
   906  007D0B  20                 	db	32
   907  007D0C  63                 	db	99	;'c'
   908  007D0D  6F                 	db	111	;'o'
   909  007D0E  75                 	db	117	;'u'
   910  007D0F  6C                 	db	108	;'l'
   911  007D10  64                 	db	100	;'d'
   912  007D11  20                 	db	32
   913  007D12  6E                 	db	110	;'n'
   914  007D13  6F                 	db	111	;'o'
   915  007D14  74                 	db	116	;'t'
   916  007D15  20                 	db	32
   917  007D16  62                 	db	98	;'b'
   918  007D17  65                 	db	101	;'e'
   919  007D18  20                 	db	32
   920  007D19  72                 	db	114	;'r'
   921  007D1A  65                 	db	101	;'e'
   922  007D1B  73                 	db	115	;'s'
   923  007D1C  6F                 	db	111	;'o'
   924  007D1D  6C                 	db	108	;'l'
   925  007D1E  76                 	db	118	;'v'
   926  007D1F  65                 	db	101	;'e'
   927  007D20  64                 	db	100	;'d'
   928  007D21  2E                 	db	46
   929  007D22  00                 	db	0
   930  007D23                     STR_72:
   931  007D23  41                 	db	65	;'A'
   932  007D24  52                 	db	82	;'R'
   933  007D25  50                 	db	80	;'P'
   934  007D26  3A                 	db	58	;':'
   935  007D27  20                 	db	32
   936  007D28  41                 	db	65	;'A'
   937  007D29  6E                 	db	110	;'n'
   938  007D2A  20                 	db	32
   939  007D2B  75                 	db	117	;'u'
   940  007D2C  6E                 	db	110	;'n'
   941  007D2D  6B                 	db	107	;'k'
   942  007D2E  6E                 	db	110	;'n'
   943  007D2F  6F                 	db	111	;'o'
   944  007D30  77                 	db	119	;'w'
   945  007D31  6E                 	db	110	;'n'
   946  007D32  20                 	db	32
   947  007D33  65                 	db	101	;'e'
   948  007D34  72                 	db	114	;'r'
   949  007D35  72                 	db	114	;'r'
   950  007D36  6F                 	db	111	;'o'
   951  007D37  72                 	db	114	;'r'
   952  007D38  20                 	db	32
   953  007D39  6F                 	db	111	;'o'
   954  007D3A  63                 	db	99	;'c'
   955  007D3B  63                 	db	99	;'c'
   956  007D3C  75                 	db	117	;'u'
   957  007D3D  72                 	db	114	;'r'
   958  007D3E  65                 	db	101	;'e'
   959  007D3F  64                 	db	100	;'d'
   960  007D40  2E                 	db	46
   961  007D41  0A                 	db	10
   962  007D42  0D                 	db	13
   963  007D43  00                 	db	0
   964  007D44                     STR_73:
   965  007D44  41                 	db	65	;'A'
   966  007D45  52                 	db	82	;'R'
   967  007D46  50                 	db	80	;'P'
   968  007D47  3A                 	db	58	;':'
   969  007D48  20                 	db	32
   970  007D49  41                 	db	65	;'A'
   971  007D4A  6C                 	db	108	;'l'
   972  007D4B  6C                 	db	108	;'l'
   973  007D4C  20                 	db	32
   974  007D4D  41                 	db	65	;'A'
   975  007D4E  6E                 	db	110	;'n'
   976  007D4F  6E                 	db	110	;'n'
   977  007D50  6F                 	db	111	;'o'
   978  007D51  75                 	db	117	;'u'
   979  007D52  6E                 	db	110	;'n'
   980  007D53  63                 	db	99	;'c'
   981  007D54  65                 	db	101	;'e'
   982  007D55  6D                 	db	109	;'m'
   983  007D56  65                 	db	101	;'e'
   984  007D57  6E                 	db	110	;'n'
   985  007D58  74                 	db	116	;'t'
   986  007D59  73                 	db	115	;'s'
   987  007D5A  20                 	db	32
   988  007D5B  73                 	db	115	;'s'
   989  007D5C  65                 	db	101	;'e'
   990  007D5D  6E                 	db	110	;'n'
   991  007D5E  74                 	db	116	;'t'
   992  007D5F  2E                 	db	46
   993  007D60  0A                 	db	10
   994  007D61  0D                 	db	13
   995  007D62  00                 	db	0
   996  007D63                     STR_91:
   997  007D63  49                 	db	73	;'I'
   998  007D64  50                 	db	80	;'P'
   999  007D65  76                 	db	118	;'v'
  1000  007D66  34                 	db	52	;'4'
  1001  007D67  3A                 	db	58	;':'
  1002  007D68  20                 	db	32
  1003  007D69  41                 	db	65	;'A'
  1004  007D6A  52                 	db	82	;'R'
  1005  007D6B  50                 	db	80	;'P'
  1006  007D6C  20                 	db	32
  1007  007D6D  72                 	db	114	;'r'
  1008  007D6E  65                 	db	101	;'e'
  1009  007D6F  74                 	db	116	;'t'
  1010  007D70  75                 	db	117	;'u'
  1011  007D71  72                 	db	114	;'r'
  1012  007D72  6E                 	db	110	;'n'
  1013  007D73  65                 	db	101	;'e'
  1014  007D74  64                 	db	100	;'d'
  1015  007D75  20                 	db	32
  1016  007D76  73                 	db	115	;'s'
  1017  007D77  75                 	db	117	;'u'
  1018  007D78  63                 	db	99	;'c'
  1019  007D79  63                 	db	99	;'c'
  1020  007D7A  65                 	db	101	;'e'
  1021  007D7B  73                 	db	115	;'s'
  1022  007D7C  73                 	db	115	;'s'
  1023  007D7D  2E                 	db	46
  1024  007D7E  0A                 	db	10
  1025  007D7F  0D                 	db	13
  1026  007D80  00                 	db	0
  1027  007D81                     STR_42:
  1028  007D81  20                 	db	32
  1029  007D82  45                 	db	69	;'E'
  1030  007D83  54                 	db	84	;'T'
  1031  007D84  48                 	db	72	;'H'
  1032  007D85  45                 	db	69	;'E'
  1033  007D86  52                 	db	82	;'R'
  1034  007D87  4E                 	db	78	;'N'
  1035  007D88  45                 	db	69	;'E'
  1036  007D89  54                 	db	84	;'T'
  1037  007D8A  20                 	db	32
  1038  007D8B  43                 	db	67	;'C'
  1039  007D8C  4F                 	db	79	;'O'
  1040  007D8D  4E                 	db	78	;'N'
  1041  007D8E  54                 	db	84	;'T'
  1042  007D8F  52                 	db	82	;'R'
  1043  007D90  4F                 	db	79	;'O'
  1044  007D91  4C                 	db	76	;'L'
  1045  007D92  4C                 	db	76	;'L'
  1046  007D93  45                 	db	69	;'E'
  1047  007D94  52                 	db	82	;'R'
  1048  007D95  20                 	db	32
  1049  007D96  4D                 	db	77	;'M'
  1050  007D97  4F                 	db	79	;'O'
  1051  007D98  44                 	db	68	;'D'
  1052  007D99  55                 	db	85	;'U'
  1053  007D9A  4C                 	db	76	;'L'
  1054  007D9B  45                 	db	69	;'E'
  1055  007D9C  3A                 	db	58	;':'
  1056  007D9D  20                 	db	32
  1057  007D9E  00                 	db	0
  1058  007D9F                     STR_49:
  1059  007D9F  41                 	db	65	;'A'
  1060  007DA0  6E                 	db	110	;'n'
  1061  007DA1  20                 	db	32
  1062  007DA2  75                 	db	117	;'u'
  1063  007DA3  6E                 	db	110	;'n'
  1064  007DA4  6B                 	db	107	;'k'
  1065  007DA5  6E                 	db	110	;'n'
  1066  007DA6  6F                 	db	111	;'o'
  1067  007DA7  77                 	db	119	;'w'
  1068  007DA8  6E                 	db	110	;'n'
  1069  007DA9  20                 	db	32
  1070  007DAA  65                 	db	101	;'e'
  1071  007DAB  72                 	db	114	;'r'
  1072  007DAC  72                 	db	114	;'r'
  1073  007DAD  6F                 	db	111	;'o'
  1074  007DAE  72                 	db	114	;'r'
  1075  007DAF  20                 	db	32
  1076  007DB0  68                 	db	104	;'h'
  1077  007DB1  61                 	db	97	;'a'
  1078  007DB2  73                 	db	115	;'s'
  1079  007DB3  20                 	db	32
  1080  007DB4  6F                 	db	111	;'o'
  1081  007DB5  63                 	db	99	;'c'
  1082  007DB6  63                 	db	99	;'c'
  1083  007DB7  75                 	db	117	;'u'
  1084  007DB8  72                 	db	114	;'r'
  1085  007DB9  65                 	db	101	;'e'
  1086  007DBA  64                 	db	100	;'d'
  1087  007DBB  2E                 	db	46
  1088  007DBC  00                 	db	0
  1089  007DBD                     STR_38:
  1090  007DBD  63                 	db	99	;'c'
  1091  007DBE  6F                 	db	111	;'o'
  1092  007DBF  6E                 	db	110	;'n'
  1093  007DC0  6E                 	db	110	;'n'
  1094  007DC1  65                 	db	101	;'e'
  1095  007DC2  63                 	db	99	;'c'
  1096  007DC3  74                 	db	116	;'t'
  1097  007DC4  69                 	db	105	;'i'
  1098  007DC5  6F                 	db	111	;'o'
  1099  007DC6  6E                 	db	110	;'n'
  1100  007DC7  20                 	db	32
  1101  007DC8  69                 	db	105	;'i'
  1102  007DC9  73                 	db	115	;'s'
  1103  007DCA  20                 	db	32
  1104  007DCB  48                 	db	72	;'H'
  1105  007DCC  61                 	db	97	;'a'
  1106  007DCD  6C                 	db	108	;'l'
  1107  007DCE  66                 	db	102	;'f'
  1108  007DCF  20                 	db	32
  1109  007DD0  44                 	db	68	;'D'
  1110  007DD1  75                 	db	117	;'u'
  1111  007DD2  70                 	db	112	;'p'
  1112  007DD3  6C                 	db	108	;'l'
  1113  007DD4  65                 	db	101	;'e'
  1114  007DD5  78                 	db	120	;'x'
  1115  007DD6  2E                 	db	46
  1116  007DD7  0A                 	db	10
  1117  007DD8  0D                 	db	13
  1118  007DD9  00                 	db	0
  1119  007DDA                     STR_39:
  1120  007DDA  63                 	db	99	;'c'
  1121  007DDB  6F                 	db	111	;'o'
  1122  007DDC  6E                 	db	110	;'n'
  1123  007DDD  6E                 	db	110	;'n'
  1124  007DDE  65                 	db	101	;'e'
  1125  007DDF  63                 	db	99	;'c'
  1126  007DE0  74                 	db	116	;'t'
  1127  007DE1  69                 	db	105	;'i'
  1128  007DE2  6F                 	db	111	;'o'
  1129  007DE3  6E                 	db	110	;'n'
  1130  007DE4  20                 	db	32
  1131  007DE5  69                 	db	105	;'i'
  1132  007DE6  73                 	db	115	;'s'
  1133  007DE7  20                 	db	32
  1134  007DE8  46                 	db	70	;'F'
  1135  007DE9  75                 	db	117	;'u'
  1136  007DEA  6C                 	db	108	;'l'
  1137  007DEB  6C                 	db	108	;'l'
  1138  007DEC  20                 	db	32
  1139  007DED  44                 	db	68	;'D'
  1140  007DEE  75                 	db	117	;'u'
  1141  007DEF  70                 	db	112	;'p'
  1142  007DF0  6C                 	db	108	;'l'
  1143  007DF1  65                 	db	101	;'e'
  1144  007DF2  78                 	db	120	;'x'
  1145  007DF3  2E                 	db	46
  1146  007DF4  0A                 	db	10
  1147  007DF5  0D                 	db	13
  1148  007DF6  00                 	db	0
  1149  007DF7                     STR_71:
  1150  007DF7  41                 	db	65	;'A'
  1151  007DF8  52                 	db	82	;'R'
  1152  007DF9  50                 	db	80	;'P'
  1153  007DFA  3A                 	db	58	;':'
  1154  007DFB  20                 	db	32
  1155  007DFC  4E                 	db	78	;'N'
  1156  007DFD  6F                 	db	111	;'o'
  1157  007DFE  62                 	db	98	;'b'
  1158  007DFF  6F                 	db	111	;'o'
  1159  007E00  64                 	db	100	;'d'
  1160  007E01  79                 	db	121	;'y'
  1161  007E02  20                 	db	32
  1162  007E03  61                 	db	97	;'a'
  1163  007E04  6E                 	db	110	;'n'
  1164  007E05  73                 	db	115	;'s'
  1165  007E06  77                 	db	119	;'w'
  1166  007E07  65                 	db	101	;'e'
  1167  007E08  72                 	db	114	;'r'
  1168  007E09  65                 	db	101	;'e'
  1169  007E0A  64                 	db	100	;'d'
  1170  007E0B  2E                 	db	46
  1171  007E0C  0A                 	db	10
  1172  007E0D  0D                 	db	13
  1173  007E0E  00                 	db	0
  1174  007E0F                     STR_25:
  1175  007E0F  46                 	db	70	;'F'
  1176  007E10  49                 	db	73	;'I'
  1177  007E11  52                 	db	82	;'R'
  1178  007E12  4D                 	db	77	;'M'
  1179  007E13  57                 	db	87	;'W'
  1180  007E14  41                 	db	65	;'A'
  1181  007E15  52                 	db	82	;'R'
  1182  007E16  45                 	db	69	;'E'
  1183  007E17  20                 	db	32
  1184  007E18  42                 	db	66	;'B'
  1185  007E19  55                 	db	85	;'U'
  1186  007E1A  49                 	db	73	;'I'
  1187  007E1B  4C                 	db	76	;'L'
  1188  007E1C  44                 	db	68	;'D'
  1189  007E1D  20                 	db	32
  1190  007E1E  44                 	db	68	;'D'
  1191  007E1F  41                 	db	65	;'A'
  1192  007E20  54                 	db	84	;'T'
  1193  007E21  45                 	db	69	;'E'
  1194  007E22  20                 	db	32
  1195  007E23  49                 	db	73	;'I'
  1196  007E24  53                 	db	83	;'S'
  1197  007E25  20                 	db	32
  1198  007E26  00                 	db	0
  1199  007E27                     STR_92:
  1200  007E27  49                 	db	73	;'I'
  1201  007E28  50                 	db	80	;'P'
  1202  007E29  76                 	db	118	;'v'
  1203  007E2A  34                 	db	52	;'4'
  1204  007E2B  3A                 	db	58	;':'
  1205  007E2C  20                 	db	32
  1206  007E2D  4F                 	db	79	;'O'
  1207  007E2E  6C                 	db	108	;'l'
  1208  007E2F  64                 	db	100	;'d'
  1209  007E30  20                 	db	32
  1210  007E31  49                 	db	73	;'I'
  1211  007E32  50                 	db	80	;'P'
  1212  007E33  20                 	db	32
  1213  007E34  53                 	db	83	;'S'
  1214  007E35  72                 	db	114	;'r'
  1215  007E36  63                 	db	99	;'c'
  1216  007E37  20                 	db	32
  1217  007E38  41                 	db	65	;'A'
  1218  007E39  64                 	db	100	;'d'
  1219  007E3A  64                 	db	100	;'d'
  1220  007E3B  72                 	db	114	;'r'
  1221  007E3C  20                 	db	32
  1222  007E3D  00                 	db	0
  1223  007E3E                     STR_31:
  1224  007E3E  53                 	db	83	;'S'
  1225  007E3F  6F                 	db	111	;'o'
  1226  007E40  75                 	db	117	;'u'
  1227  007E41  72                 	db	114	;'r'
  1228  007E42  63                 	db	99	;'c'
  1229  007E43  65                 	db	101	;'e'
  1230  007E44  20                 	db	32
  1231  007E45  4D                 	db	77	;'M'
  1232  007E46  41                 	db	65	;'A'
  1233  007E47  43                 	db	67	;'C'
  1234  007E48  20                 	db	32
  1235  007E49  61                 	db	97	;'a'
  1236  007E4A  64                 	db	100	;'d'
  1237  007E4B  64                 	db	100	;'d'
  1238  007E4C  72                 	db	114	;'r'
  1239  007E4D  65                 	db	101	;'e'
  1240  007E4E  73                 	db	115	;'s'
  1241  007E4F  73                 	db	115	;'s'
  1242  007E50  20                 	db	32
  1243  007E51  69                 	db	105	;'i'
  1244  007E52  73                 	db	115	;'s'
  1245  007E53  20                 	db	32
  1246  007E54  00                 	db	0
  1247  007E55                     STR_37:
  1248  007E55  53                 	db	83	;'S'
  1249  007E56  70                 	db	112	;'p'
  1250  007E57  65                 	db	101	;'e'
  1251  007E58  65                 	db	101	;'e'
  1252  007E59  64                 	db	100	;'d'
  1253  007E5A  20                 	db	32
  1254  007E5B  69                 	db	105	;'i'
  1255  007E5C  73                 	db	115	;'s'
  1256  007E5D  20                 	db	32
  1257  007E5E  31                 	db	49	;'1'
  1258  007E5F  30                 	db	48	;'0'
  1259  007E60  30                 	db	48	;'0'
  1260  007E61  20                 	db	32
  1261  007E62  4D                 	db	77	;'M'
  1262  007E63  62                 	db	98	;'b'
  1263  007E64  70                 	db	112	;'p'
  1264  007E65  73                 	db	115	;'s'
  1265  007E66  2C                 	db	44
  1266  007E67  20                 	db	32
  1267  007E68  00                 	db	0
  1268  007E69                     STR_10:
  1269  007E69  5B                 	db	91	;'['
  1270  007E6A  55                 	db	85	;'U'
  1271  007E6B  6E                 	db	110	;'n'
  1272  007E6C  6B                 	db	107	;'k'
  1273  007E6D  6E                 	db	110	;'n'
  1274  007E6E  6F                 	db	111	;'o'
  1275  007E6F  77                 	db	119	;'w'
  1276  007E70  6E                 	db	110	;'n'
  1277  007E71  20                 	db	32
  1278  007E72  45                 	db	69	;'E'
  1279  007E73  74                 	db	116	;'t'
  1280  007E74  68                 	db	104	;'h'
  1281  007E75  65                 	db	101	;'e'
  1282  007E76  72                 	db	114	;'r'
  1283  007E77  54                 	db	84	;'T'
  1284  007E78  79                 	db	121	;'y'
  1285  007E79  70                 	db	112	;'p'
  1286  007E7A  65                 	db	101	;'e'
  1287  007E7B  5D                 	db	93	;']'
  1288  007E7C  00                 	db	0
  1289  007E7D                     STR_85:
  1290  007E7D  5B                 	db	91	;'['
  1291  007E7E  49                 	db	73	;'I'
  1292  007E7F  4E                 	db	78	;'N'
  1293  007E80  56                 	db	86	;'V'
  1294  007E81  41                 	db	65	;'A'
  1295  007E82  4C                 	db	76	;'L'
  1296  007E83  49                 	db	73	;'I'
  1297  007E84  44                 	db	68	;'D'
  1298  007E85  20                 	db	32
  1299  007E86  43                 	db	67	;'C'
  1300  007E87  48                 	db	72	;'H'
  1301  007E88  45                 	db	69	;'E'
  1302  007E89  43                 	db	67	;'C'
  1303  007E8A  4B                 	db	75	;'K'
  1304  007E8B  53                 	db	83	;'S'
  1305  007E8C  55                 	db	85	;'U'
  1306  007E8D  4D                 	db	77	;'M'
  1307  007E8E  5D                 	db	93	;']'
  1308  007E8F  00                 	db	0
  1309  007E90                     STR_36:
  1310  007E90  53                 	db	83	;'S'
  1311  007E91  70                 	db	112	;'p'
  1312  007E92  65                 	db	101	;'e'
  1313  007E93  65                 	db	101	;'e'
  1314  007E94  64                 	db	100	;'d'
  1315  007E95  20                 	db	32
  1316  007E96  69                 	db	105	;'i'
  1317  007E97  73                 	db	115	;'s'
  1318  007E98  20                 	db	32
  1319  007E99  31                 	db	49	;'1'
  1320  007E9A  30                 	db	48	;'0'
  1321  007E9B  20                 	db	32
  1322  007E9C  4D                 	db	77	;'M'
  1323  007E9D  62                 	db	98	;'b'
  1324  007E9E  70                 	db	112	;'p'
  1325  007E9F  73                 	db	115	;'s'
  1326  007EA0  2C                 	db	44
  1327  007EA1  20                 	db	32
  1328  007EA2  00                 	db	0
  1329  007EA3                     STR_35:
  1330  007EA3  4C                 	db	76	;'L'
  1331  007EA4  69                 	db	105	;'i'
  1332  007EA5  6E                 	db	110	;'n'
  1333  007EA6  6B                 	db	107	;'k'
  1334  007EA7  20                 	db	32
  1335  007EA8  65                 	db	101	;'e'
  1336  007EA9  73                 	db	115	;'s'
  1337  007EAA  74                 	db	116	;'t'
  1338  007EAB  61                 	db	97	;'a'
  1339  007EAC  62                 	db	98	;'b'
  1340  007EAD  6C                 	db	108	;'l'
  1341  007EAE  69                 	db	105	;'i'
  1342  007EAF  73                 	db	115	;'s'
  1343  007EB0  68                 	db	104	;'h'
  1344  007EB1  65                 	db	101	;'e'
  1345  007EB2  64                 	db	100	;'d'
  1346  007EB3  2E                 	db	46
  1347  007EB4  20                 	db	32
  1348  007EB5  00                 	db	0
  1349  007EB6                     STR_43:
  1350  007EB6  20                 	db	32
  1351  007EB7  45                 	db	69	;'E'
  1352  007EB8  54                 	db	84	;'T'
  1353  007EB9  48                 	db	72	;'H'
  1354  007EBA  45                 	db	69	;'E'
  1355  007EBB  52                 	db	82	;'R'
  1356  007EBC  4E                 	db	78	;'N'
  1357  007EBD  45                 	db	69	;'E'
  1358  007EBE  54                 	db	84	;'T'
  1359  007EBF  20                 	db	32
  1360  007EC0  4D                 	db	77	;'M'
  1361  007EC1  4F                 	db	79	;'O'
  1362  007EC2  44                 	db	68	;'D'
  1363  007EC3  55                 	db	85	;'U'
  1364  007EC4  4C                 	db	76	;'L'
  1365  007EC5  45                 	db	69	;'E'
  1366  007EC6  3A                 	db	58	;':'
  1367  007EC7  20                 	db	32
  1368  007EC8  00                 	db	0
  1369  007EC9                     STR_54:
  1370  007EC9  55                 	db	85	;'U'
  1371  007ECA  6E                 	db	110	;'n'
  1372  007ECB  6B                 	db	107	;'k'
  1373  007ECC  6E                 	db	110	;'n'
  1374  007ECD  6F                 	db	111	;'o'
  1375  007ECE  77                 	db	119	;'w'
  1376  007ECF  6E                 	db	110	;'n'
  1377  007ED0  20                 	db	32
  1378  007ED1  45                 	db	69	;'E'
  1379  007ED2  74                 	db	116	;'t'
  1380  007ED3  68                 	db	104	;'h'
  1381  007ED4  65                 	db	101	;'e'
  1382  007ED5  72                 	db	114	;'r'
  1383  007ED6  54                 	db	84	;'T'
  1384  007ED7  79                 	db	121	;'y'
  1385  007ED8  70                 	db	112	;'p'
  1386  007ED9  65                 	db	101	;'e'
  1387  007EDA  00                 	db	0
  1388  007EDB                     STR_58:
  1389  007EDB  55                 	db	85	;'U'
  1390  007EDC  6E                 	db	110	;'n'
  1391  007EDD  6B                 	db	107	;'k'
  1392  007EDE  6E                 	db	110	;'n'
  1393  007EDF  6F                 	db	111	;'o'
  1394  007EE0  77                 	db	119	;'w'
  1395  007EE1  6E                 	db	110	;'n'
  1396  007EE2  20                 	db	32
  1397  007EE3  50                 	db	80	;'P'
  1398  007EE4  72                 	db	114	;'r'
  1399  007EE5  6F                 	db	111	;'o'
  1400  007EE6  74                 	db	116	;'t'
  1401  007EE7  6F                 	db	111	;'o'
  1402  007EE8  63                 	db	99	;'c'
  1403  007EE9  6F                 	db	111	;'o'
  1404  007EEA  6C                 	db	108	;'l'
  1405  007EEB  00                 	db	0
  1406  007EEC                     STR_41:
  1407  007EEC  20                 	db	32
  1408  007EED  4D                 	db	77	;'M'
  1409  007EEE  45                 	db	69	;'E'
  1410  007EEF  4D                 	db	77	;'M'
  1411  007EF0  4F                 	db	79	;'O'
  1412  007EF1  52                 	db	82	;'R'
  1413  007EF2  59                 	db	89	;'Y'
  1414  007EF3  20                 	db	32
  1415  007EF4  4D                 	db	77	;'M'
  1416  007EF5  4F                 	db	79	;'O'
  1417  007EF6  44                 	db	68	;'D'
  1418  007EF7  55                 	db	85	;'U'
  1419  007EF8  4C                 	db	76	;'L'
  1420  007EF9  45                 	db	69	;'E'
  1421  007EFA  3A                 	db	58	;':'
  1422  007EFB  20                 	db	32
  1423  007EFC  00                 	db	0
  1424  007EFD                     STR_67:
  1425  007EFD  5B                 	db	91	;'['
  1426  007EFE  52                 	db	82	;'R'
  1427  007EFF  65                 	db	101	;'e'
  1428  007F00  70                 	db	112	;'p'
  1429  007F01  6C                 	db	108	;'l'
  1430  007F02  79                 	db	121	;'y'
  1431  007F03  20                 	db	32
  1432  007F04  73                 	db	115	;'s'
  1433  007F05  65                 	db	101	;'e'
  1434  007F06  6E                 	db	110	;'n'
  1435  007F07  74                 	db	116	;'t'
  1436  007F08  20                 	db	32
  1437  007F09  74                 	db	116	;'t'
  1438  007F0A  6F                 	db	111	;'o'
  1439  007F0B  20                 	db	32
  1440  007F0C  00                 	db	0
  1441  007F0D                     STR_5:
  1442  007F0D  5B                 	db	91	;'['
  1443  007F0E  53                 	db	83	;'S'
  1444  007F0F  79                 	db	121	;'y'
  1445  007F10  6D                 	db	109	;'m'
  1446  007F11  62                 	db	98	;'b'
  1447  007F12  6F                 	db	111	;'o'
  1448  007F13  6C                 	db	108	;'l'
  1449  007F14  20                 	db	32
  1450  007F15  45                 	db	69	;'E'
  1451  007F16  72                 	db	114	;'r'
  1452  007F17  72                 	db	114	;'r'
  1453  007F18  6F                 	db	111	;'o'
  1454  007F19  72                 	db	114	;'r'
  1455  007F1A  73                 	db	115	;'s'
  1456  007F1B  5D                 	db	93	;']'
  1457  007F1C  00                 	db	0
  1458  007F1D                     STR_66:
  1459  007F1D  5B                 	db	91	;'['
  1460  007F1E  49                 	db	73	;'I'
  1461  007F1F  73                 	db	115	;'s'
  1462  007F20  47                 	db	71	;'G'
  1463  007F21  72                 	db	114	;'r'
  1464  007F22  61                 	db	97	;'a'
  1465  007F23  74                 	db	116	;'t'
  1466  007F24  75                 	db	117	;'u'
  1467  007F25  69                 	db	105	;'i'
  1468  007F26  74                 	db	116	;'t'
  1469  007F27  6F                 	db	111	;'o'
  1470  007F28  75                 	db	117	;'u'
  1471  007F29  73                 	db	115	;'s'
  1472  007F2A  5D                 	db	93	;']'
  1473  007F2B  00                 	db	0
  1474  007F2C                     STR_45:
  1475  007F2C  20                 	db	32
  1476  007F2D  49                 	db	73	;'I'
  1477  007F2E  50                 	db	80	;'P'
  1478  007F2F  76                 	db	118	;'v'
  1479  007F30  34                 	db	52	;'4'
  1480  007F31  20                 	db	32
  1481  007F32  4D                 	db	77	;'M'
  1482  007F33  4F                 	db	79	;'O'
  1483  007F34  44                 	db	68	;'D'
  1484  007F35  55                 	db	85	;'U'
  1485  007F36  4C                 	db	76	;'L'
  1486  007F37  45                 	db	69	;'E'
  1487  007F38  3A                 	db	58	;':'
  1488  007F39  20                 	db	32
  1489  007F3A  00                 	db	0
  1490  007F3B                     STR_44:
  1491  007F3B  20                 	db	32
  1492  007F3C  41                 	db	65	;'A'
  1493  007F3D  52                 	db	82	;'R'
  1494  007F3E  50                 	db	80	;'P'
  1495  007F3F  20                 	db	32
  1496  007F40  4D                 	db	77	;'M'
  1497  007F41  4F                 	db	79	;'O'
  1498  007F42  44                 	db	68	;'D'
  1499  007F43  55                 	db	85	;'U'
  1500  007F44  4C                 	db	76	;'L'
  1501  007F45  45                 	db	69	;'E'
  1502  007F46  3A                 	db	58	;':'
  1503  007F47  20                 	db	32
  1504  007F48  00                 	db	0
  1505  007F49                     STR_34:
  1506  007F49  4C                 	db	76	;'L'
  1507  007F4A  69                 	db	105	;'i'
  1508  007F4B  6E                 	db	110	;'n'
  1509  007F4C  6B                 	db	107	;'k'
  1510  007F4D  20                 	db	32
  1511  007F4E  6C                 	db	108	;'l'
  1512  007F4F  6F                 	db	111	;'o'
  1513  007F50  73                 	db	115	;'s'
  1514  007F51  74                 	db	116	;'t'
  1515  007F52  2E                 	db	46
  1516  007F53  0A                 	db	10
  1517  007F54  0D                 	db	13
  1518  007F55  00                 	db	0
  1519  007F56                     STR_30:
  1520  007F56  20                 	db	32
  1521  007F57  64                 	db	100	;'d'
  1522  007F58  65                 	db	101	;'e'
  1523  007F59  74                 	db	116	;'t'
  1524  007F5A  65                 	db	101	;'e'
  1525  007F5B  63                 	db	99	;'c'
  1526  007F5C  74                 	db	116	;'t'
  1527  007F5D  65                 	db	101	;'e'
  1528  007F5E  64                 	db	100	;'d'
  1529  007F5F  2E                 	db	46
  1530  007F60  20                 	db	32
  1531  007F61  00                 	db	0
  1532  007F62                     STR_26:
  1533  007F62  4D                 	db	77	;'M'
  1534  007F63  61                 	db	97	;'a'
  1535  007F64  72                 	db	114	;'r'
  1536  007F65  20                 	db	32
  1537  007F66  31                 	db	49	;'1'
  1538  007F67  37                 	db	55	;'7'
  1539  007F68  20                 	db	32
  1540  007F69  32                 	db	50	;'2'
  1541  007F6A  30                 	db	48	;'0'
  1542  007F6B  31                 	db	49	;'1'
  1543  007F6C  39                 	db	57	;'9'
  1544  007F6D  00                 	db	0
  1545  007F6E                     STR_3:
  1546  007F6E  5B                 	db	91	;'['
  1547  007F6F  42                 	db	66	;'B'
  1548  007F70  72                 	db	114	;'r'
  1549  007F71  6F                 	db	111	;'o'
  1550  007F72  61                 	db	97	;'a'
  1551  007F73  64                 	db	100	;'d'
  1552  007F74  63                 	db	99	;'c'
  1553  007F75  61                 	db	97	;'a'
  1554  007F76  73                 	db	115	;'s'
  1555  007F77  74                 	db	116	;'t'
  1556  007F78  5D                 	db	93	;']'
  1557  007F79  00                 	db	0
  1558  007F7A                     STR_75:
  1559  007F7A  5B                 	db	91	;'['
  1560  007F7B  45                 	db	69	;'E'
  1561  007F7C  78                 	db	120	;'x'
  1562  007F7D  70                 	db	112	;'p'
  1563  007F7E  65                 	db	101	;'e'
  1564  007F7F  63                 	db	99	;'c'
  1565  007F80  74                 	db	116	;'t'
  1566  007F81  65                 	db	101	;'e'
  1567  007F82  64                 	db	100	;'d'
  1568  007F83  20                 	db	32
  1569  007F84  00                 	db	0
  1570  007F85                     STR_65:
  1571  007F85  5B                 	db	91	;'['
  1572  007F86  49                 	db	73	;'I'
  1573  007F87  73                 	db	115	;'s'
  1574  007F88  50                 	db	80	;'P'
  1575  007F89  72                 	db	114	;'r'
  1576  007F8A  6F                 	db	111	;'o'
  1577  007F8B  62                 	db	98	;'b'
  1578  007F8C  65                 	db	101	;'e'
  1579  007F8D  5D                 	db	93	;']'
  1580  007F8E  00                 	db	0
  1581  007F8F                     STR_4:
  1582  007F8F  5B                 	db	91	;'['
  1583  007F90  55                 	db	85	;'U'
  1584  007F91  6E                 	db	110	;'n'
  1585  007F92  69                 	db	105	;'i'
  1586  007F93  63                 	db	99	;'c'
  1587  007F94  61                 	db	97	;'a'
  1588  007F95  73                 	db	115	;'s'
  1589  007F96  74                 	db	116	;'t'
  1590  007F97  5D                 	db	93	;']'
  1591  007F98  00                 	db	0
  1592  007F99                     STR_50:
  1593  007F99  20                 	db	32
  1594  007F9A  28                 	db	40
  1595  007F9B  43                 	db	67	;'C'
  1596  007F9C  6F                 	db	111	;'o'
  1597  007F9D  64                 	db	100	;'d'
  1598  007F9E  65                 	db	101	;'e'
  1599  007F9F  3A                 	db	58	;':'
  1600  007FA0  20                 	db	32
  1601  007FA1  00                 	db	0
  1602  007FA2                     STR_28:
  1603  007FA2  31                 	db	49	;'1'
  1604  007FA3  37                 	db	55	;'7'
  1605  007FA4  3A                 	db	58	;':'
  1606  007FA5  35                 	db	53	;'5'
  1607  007FA6  36                 	db	54	;'6'
  1608  007FA7  3A                 	db	58	;':'
  1609  007FA8  31                 	db	49	;'1'
  1610  007FA9  31                 	db	49	;'1'
  1611  007FAA  00                 	db	0
  1612  007FAB                     STR_40:
  1613  007FAB  5B                 	db	91	;'['
  1614  007FAC  45                 	db	69	;'E'
  1615  007FAD  52                 	db	82	;'R'
  1616  007FAE  52                 	db	82	;'R'
  1617  007FAF  4F                 	db	79	;'O'
  1618  007FB0  52                 	db	82	;'R'
  1619  007FB1  5D                 	db	93	;']'
  1620  007FB2  00                 	db	0
  1621  007FB3                     STR_76:
  1622  007FB3  2C                 	db	44
  1623  007FB4  20                 	db	32
  1624  007FB5  67                 	db	103	;'g'
  1625  007FB6  6F                 	db	111	;'o'
  1626  007FB7  74                 	db	116	;'t'
  1627  007FB8  20                 	db	32
  1628  007FB9  00                 	db	0
  1629  007FBA                     STR_9:
  1630  007FBA  5B                 	db	91	;'['
  1631  007FBB  49                 	db	73	;'I'
  1632  007FBC  50                 	db	80	;'P'
  1633  007FBD  76                 	db	118	;'v'
  1634  007FBE  34                 	db	52	;'4'
  1635  007FBF  5D                 	db	93	;']'
  1636  007FC0  00                 	db	0
  1637  007FC1                     STR_8:
  1638  007FC1  5B                 	db	91	;'['
  1639  007FC2  41                 	db	65	;'A'
  1640  007FC3  52                 	db	82	;'R'
  1641  007FC4  50                 	db	80	;'P'
  1642  007FC5  5D                 	db	93	;']'
  1643  007FC6  00                 	db	0
  1644  007FC7                     STR_79:
  1645  007FC7  20                 	db	32
  1646  007FC8  2D                 	db	45
  1647  007FC9  3E                 	db	62	;'>'
  1648  007FCA  20                 	db	32
  1649  007FCB  00                 	db	0
  1650  007FCC                     STR_62:
  1651  007FCC  5D                 	db	93	;']'
  1652  007FCD  2D                 	db	45
  1653  007FCE  3E                 	db	62	;'>'
  1654  007FCF  5B                 	db	91	;'['
  1655  007FD0  00                 	db	0
  1656  007FD1                     STR_52:
  1657  007FD1  49                 	db	73	;'I'
  1658  007FD2  50                 	db	80	;'P'
  1659  007FD3  76                 	db	118	;'v'
  1660  007FD4  34                 	db	52	;'4'
  1661  007FD5  00                 	db	0
  1662  007FD6                     STR_55:
  1663  007FD6  49                 	db	73	;'I'
  1664  007FD7  43                 	db	67	;'C'
  1665  007FD8  4D                 	db	77	;'M'
  1666  007FD9  50                 	db	80	;'P'
  1667  007FDA  00                 	db	0
  1668  007FDB                     STR_51:
  1669  007FDB  29                 	db	41
  1670  007FDC  2E                 	db	46
  1671  007FDD  0A                 	db	10
  1672  007FDE  0D                 	db	13
  1673  007FDF  00                 	db	0
  1674  007FE0                     STR_14:
  1675  007FE0  5D                 	db	93	;']'
  1676  007FE1  5B                 	db	91	;'['
  1677  007FE2  4C                 	db	76	;'L'
  1678  007FE3  3D                 	db	61	;'='
  1679  007FE4  00                 	db	0
  1680  007FE5                     STR_56:
  1681  007FE5  54                 	db	84	;'T'
  1682  007FE6  43                 	db	67	;'C'
  1683  007FE7  50                 	db	80	;'P'
  1684  007FE8  00                 	db	0
  1685  007FE9                     STR_57:
  1686  007FE9  55                 	db	85	;'U'
  1687  007FEA  44                 	db	68	;'D'
  1688  007FEB  50                 	db	80	;'P'
  1689  007FEC  00                 	db	0
  1690  007FED                     STR_53:
  1691  007FED  41                 	db	65	;'A'
  1692  007FEE  52                 	db	82	;'R'
  1693  007FEF  50                 	db	80	;'P'
  1694  007FF0  00                 	db	0
  1695  007FF1                     STR_15:
  1696  007FF1  5D                 	db	93	;']'
  1697  007FF2  20                 	db	32
  1698  007FF3  00                 	db	0
  1699  007FF4                     STR_12:
  1700  007FF4  2D                 	db	45
  1701  007FF5  3E                 	db	62	;'>'
  1702  007FF6  00                 	db	0
  1703  007FF7                     STR_13:
  1704  007FF7  5D                 	db	93	;']'
  1705  007FF8  5B                 	db	91	;'['
  1706  007FF9  00                 	db	0
  1707  007FFA                     STR_19:
  1708  007FFA  29                 	db	41
  1709  007FFB  5D                 	db	93	;']'
  1710  007FFC  00                 	db	0
  1711  007FFD                     STR_21:
  1712  007FFD  12                 	db	18
  1713  007FFE  00                 	db	0
  1714  0000                     
  1715                           ; #config settings
  1716  007FFF  00                 	db	0	; dummy byte at the end
  1717  0000                     
  1718                           	psect	cinit
  1719  003C16                     __pcinit:
  1720                           	opt stack 0
  1721  003C16                     start_initialization:
  1722                           	opt stack 0
  1723  003C16                     __initialization:
  1724                           	opt stack 0
  1725                           
  1726                           ; Initialize objects allocated to BANK2 (46 bytes)
  1727                           ; load TBLPTR registers with __pidataBANK2
  1728  003C16  0E66               	movlw	low __pidataBANK2
  1729  003C18  6EF6               	movwf	tblptrl,c
  1730  003C1A  0E49               	movlw	high __pidataBANK2
  1731  003C1C  6EF7               	movwf	tblptrh,c
  1732  003C1E  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1733  003C20  6EF8               	movwf	tblptru,c
  1734  003C22  EE02  F0C5         	lfsr	0,__pdataBANK2
  1735  003C26  EE10 F02E          	lfsr	1,46
  1736  003C2A                     copy_data0:
  1737  003C2A  0009               	tblrd		*+
  1738  003C2C  CFF5 FFEE          	movff	tablat,postinc0
  1739  003C30  50E5               	movf	postdec1,w,c
  1740  003C32  50E1               	movf	fsr1l,w,c
  1741  003C34  E1FA               	bnz	copy_data0
  1742                           
  1743                           ; Initialize objects allocated to COMRAM (6 bytes)
  1744                           ; load TBLPTR registers with __pidataCOMRAM
  1745  003C36  0EDC               	movlw	low __pidataCOMRAM
  1746  003C38  6EF6               	movwf	tblptrl,c
  1747  003C3A  0E4C               	movlw	high __pidataCOMRAM
  1748  003C3C  6EF7               	movwf	tblptrh,c
  1749  003C3E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1750  003C40  6EF8               	movwf	tblptru,c
  1751  003C42  EE00  F049         	lfsr	0,__pdataCOMRAM
  1752  003C46  EE10 F006          	lfsr	1,6
  1753  003C4A                     copy_data1:
  1754  003C4A  0009               	tblrd		*+
  1755  003C4C  CFF5 FFEE          	movff	tablat,postinc0
  1756  003C50  50E5               	movf	postdec1,w,c
  1757  003C52  50E1               	movf	fsr1l,w,c
  1758  003C54  E1FA               	bnz	copy_data1
  1759                           
  1760                           ; Clear objects allocated to BANK3 (121 bytes)
  1761  003C56  EE03  F000         	lfsr	0,__pbssBANK3
  1762  003C5A  0E79               	movlw	121
  1763  003C5C                     clear_0:
  1764  003C5C  6AEE               	clrf	postinc0,c
  1765  003C5E  06E8               	decf	wreg,f,c
  1766  003C60  E1FD               	bnz	clear_0
  1767                           
  1768                           ; Clear objects allocated to BANK2 (197 bytes)
  1769  003C62  EE02  F000         	lfsr	0,__pbssBANK2
  1770  003C66  0EC5               	movlw	197
  1771  003C68                     clear_1:
  1772  003C68  6AEE               	clrf	postinc0,c
  1773  003C6A  06E8               	decf	wreg,f,c
  1774  003C6C  E1FD               	bnz	clear_1
  1775                           
  1776                           ; Clear objects allocated to BANK1 (102 bytes)
  1777  003C6E  EE01  F08B         	lfsr	0,__pbssBANK1
  1778  003C72  0E66               	movlw	102
  1779  003C74                     clear_2:
  1780  003C74  6AEE               	clrf	postinc0,c
  1781  003C76  06E8               	decf	wreg,f,c
  1782  003C78  E1FD               	bnz	clear_2
  1783                           
  1784                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  1785  003C7A  6A4F               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  1786                           
  1787                           ; Clear objects allocated to COMRAM (32 bytes)
  1788  003C7C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1789  003C80  0E20               	movlw	32
  1790  003C82                     clear_3:
  1791  003C82  6AEE               	clrf	postinc0,c
  1792  003C84  06E8               	decf	wreg,f,c
  1793  003C86  E1FD               	bnz	clear_3
  1794  003C88                     end_of_initialization:
  1795                           	opt stack 0
  1796  003C88                     __end_of__initialization:
  1797                           	opt stack 0
  1798  003C88  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1799  003C8A  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1800  003C8C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1801  003C8E  6EF8               	movwf	tblptru,c
  1802  003C90  0100               	movlb	0
  1803  003C92  EF88  F00A         	goto	_main	;jump to C main() function
  1804                           tblptru	equ	0xFF8
  1805                           tblptrh	equ	0xFF7
  1806                           tblptrl	equ	0xFF6
  1807                           tablat	equ	0xFF5
  1808                           postinc0	equ	0xFEE
  1809                           wreg	equ	0xFE8
  1810                           postdec1	equ	0xFE5
  1811                           fsr1l	equ	0xFE1
  1812                           
  1813                           	psect	bitbssCOMRAM
  1814  000278                     __pbitbssCOMRAM:
  1815                           	opt stack 0
  1816  000278                     _fSrcAddrChanged:
  1817                           	opt stack 0
  1818  000278                     	ds	1
  1819  000279                     arp_background@fAnnounce:
  1820                           	opt stack 0
  1821  000279                     	ds	1
  1822                           tblptru	equ	0xFF8
  1823                           tblptrh	equ	0xFF7
  1824                           tblptrl	equ	0xFF6
  1825                           tablat	equ	0xFF5
  1826                           postinc0	equ	0xFEE
  1827                           wreg	equ	0xFE8
  1828                           postdec1	equ	0xFE5
  1829                           fsr1l	equ	0xFE1
  1830                           
  1831                           	psect	bssCOMRAM
  1832  000029                     __pbssCOMRAM:
  1833                           	opt stack 0
  1834  000029                     _time:
  1835                           	opt stack 0
  1836  000029                     	ds	4
  1837  00002D                     buttonHandler@debounceCounter:
  1838                           	opt stack 0
  1839  00002D                     	ds	4
  1840  000031                     _numberToDisplay:
  1841                           	opt stack 0
  1842  000031                     	ds	4
  1843  000035                     ethernet_rxGetNewFrame@counter:
  1844                           	opt stack 0
  1845  000035                     	ds	4
  1846  000039                     sevenSegmentUpdate@digitsToDisplay:
  1847                           	opt stack 0
  1848  000039                     	ds	3
  1849  00003C                     _arpStatus:
  1850                           	opt stack 0
  1851  00003C                     	ds	2
  1852  00003E                     ethernetController_streamToTransmitBuffer@pointer:
  1853                           	opt stack 0
  1854  00003E                     	ds	2
  1855  000040                     ethernetController_softReset@F5985:
  1856                           	opt stack 0
  1857  000040                     	ds	2
  1858  000042                     _nextPacketPointer:
  1859                           	opt stack 0
  1860  000042                     	ds	2
  1861  000044                     	ds	1
  1862  000045                     sevenSegmentUpdate@digitPointer:
  1863                           	opt stack 0
  1864  000045                     	ds	1
  1865  000046                     buttonHandler@newState:
  1866                           	opt stack 0
  1867  000046                     	ds	1
  1868  000047                     buttonHandler@oldState:
  1869                           	opt stack 0
  1870  000047                     	ds	1
  1871  000048                     	ds	1
  1872                           tblptru	equ	0xFF8
  1873                           tblptrh	equ	0xFF7
  1874                           tblptrl	equ	0xFF6
  1875                           tablat	equ	0xFF5
  1876                           postinc0	equ	0xFEE
  1877                           wreg	equ	0xFE8
  1878                           postdec1	equ	0xFE5
  1879                           fsr1l	equ	0xFE1
  1880                           
  1881                           	psect	dataCOMRAM
  1882  000049                     __pdataCOMRAM:
  1883                           	opt stack 0
  1884  000049                     _randx:
  1885                           	opt stack 0
  1886  000049                     	ds	4
  1887  00004D                     ethernetController_softReset@F5983:
  1888                           	opt stack 0
  1889  00004D                     	ds	2
  1890                           tblptru	equ	0xFF8
  1891                           tblptrh	equ	0xFF7
  1892                           tblptrl	equ	0xFF6
  1893                           tablat	equ	0xFF5
  1894                           postinc0	equ	0xFEE
  1895                           wreg	equ	0xFE8
  1896                           postdec1	equ	0xFE5
  1897                           fsr1l	equ	0xFE1
  1898                           
  1899                           	psect	bssBANK1
  1900  00018B                     __pbssBANK1:
  1901                           	opt stack 0
  1902  00018B                     _occupiedMemory:
  1903                           	opt stack 0
  1904  00018B                     	ds	72
  1905  0001D3                     	ds	4
  1906  0001D7                     _ipPreliminarySource:
  1907                           	opt stack 0
  1908  0001D7                     	ds	4
  1909  0001DB                     arp_gratuitous@timeStart:
  1910                           	opt stack 0
  1911  0001DB                     	ds	4
  1912  0001DF                     _ipSource:
  1913                           	opt stack 0
  1914  0001DF                     	ds	4
  1915  0001E3                     arp_gratuitous@state:
  1916                           	opt stack 0
  1917  0001E3                     	ds	1
  1918  0001E4                     arp_gratuitous@announceCounter:
  1919                           	opt stack 0
  1920  0001E4                     	ds	1
  1921  0001E5                     arp_probe@state:
  1922                           	opt stack 0
  1923  0001E5                     	ds	1
  1924  0001E6                     arp_probe@probeCounter:
  1925                           	opt stack 0
  1926  0001E6                     	ds	1
  1927  0001E7                     ethernetController_getRSV@temp:
  1928                           	opt stack 0
  1929  0001E7                     	ds	6
  1930  0001ED                     arp_background@err:
  1931                           	opt stack 0
  1932  0001ED                     	ds	3
  1933  0001F0                     _buttonState:
  1934                           	opt stack 0
  1935  0001F0                     	ds	1
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1l	equ	0xFE1
  1944                           
  1945                           	psect	bssBANK2
  1946  000200                     __pbssBANK2:
  1947                           	opt stack 0
  1948  000200                     printEthernetState@oldState:
  1949                           	opt stack 0
  1950  000200                     	ds	15
  1951  00020F                     _arp_table:
  1952                           	opt stack 0
  1953  00020F                     	ds	112
  1954  00027F                     arpEntryToString@string:
  1955                           	opt stack 0
  1956  00027F                     	ds	50
  1957  0002B1                     hexToString@number:
  1958                           	opt stack 0
  1959  0002B1                     	ds	10
  1960  0002BB                     intToString@number:
  1961                           	opt stack 0
  1962  0002BB                     	ds	10
  1963                           tblptru	equ	0xFF8
  1964                           tblptrh	equ	0xFF7
  1965                           tblptrl	equ	0xFF6
  1966                           tablat	equ	0xFF5
  1967                           postinc0	equ	0xFEE
  1968                           wreg	equ	0xFE8
  1969                           postdec1	equ	0xFE5
  1970                           fsr1l	equ	0xFE1
  1971                           
  1972                           	psect	dataBANK2
  1973  0002C5                     __pdataBANK2:
  1974                           	opt stack 0
  1975  0002C5                     macToString@F5943:
  1976                           	opt stack 0
  1977  0002C5                     	ds	18
  1978  0002D7                     _sevenSegCharacters:
  1979                           	opt stack 0
  1980  0002D7                     	ds	12
  1981  0002E3                     ipAdressToString@address:
  1982                           	opt stack 0
  1983  0002E3                     	ds	16
  1984                           tblptru	equ	0xFF8
  1985                           tblptrh	equ	0xFF7
  1986                           tblptrl	equ	0xFF6
  1987                           tablat	equ	0xFF5
  1988                           postinc0	equ	0xFEE
  1989                           wreg	equ	0xFE8
  1990                           postdec1	equ	0xFE5
  1991                           fsr1l	equ	0xFE1
  1992                           
  1993                           	psect	bssBANK3
  1994  000300                     __pbssBANK3:
  1995                           	opt stack 0
  1996  000300                     _stack:
  1997                           	opt stack 0
  1998  000300                     	ds	121
  1999                           tblptru	equ	0xFF8
  2000                           tblptrh	equ	0xFF7
  2001                           tblptrl	equ	0xFF6
  2002                           tablat	equ	0xFF5
  2003                           postinc0	equ	0xFEE
  2004                           wreg	equ	0xFE8
  2005                           postdec1	equ	0xFE5
  2006                           fsr1l	equ	0xFE1
  2007                           
  2008                           	psect	cstackBANK3
  2009  000379                     __pcstackBANK3:
  2010                           	opt stack 0
  2011  000379                     main@prescaler:
  2012                           	opt stack 0
  2013                           
  2014                           ; 4 bytes @ 0x0
  2015  000379                     	ds	4
  2016  00037D                     _main$2369:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x4
  2020  00037D                     	ds	2
  2021  00037F                     main@err:
  2022                           	opt stack 0
  2023                           
  2024                           ; 3 bytes @ 0x6
  2025  00037F                     	ds	3
  2026  000382                     main@ipDst:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x9
  2030  000382                     	ds	4
  2031  000386                     main@ipSrc:
  2032                           	opt stack 0
  2033                           
  2034                           ; 4 bytes @ 0xD
  2035  000386                     	ds	4
  2036                           tblptru	equ	0xFF8
  2037                           tblptrh	equ	0xFF7
  2038                           tblptrl	equ	0xFF6
  2039                           tablat	equ	0xFF5
  2040                           postinc0	equ	0xFEE
  2041                           wreg	equ	0xFE8
  2042                           postdec1	equ	0xFE5
  2043                           fsr1l	equ	0xFE1
  2044                           
  2045                           	psect	cstackBANK1
  2046  000100                     __pcstackBANK1:
  2047                           	opt stack 0
  2048  000100                     arp_sendRequest@ipSender:
  2049                           	opt stack 0
  2050  000100                     arp_sendReply@request:
  2051                           	opt stack 0
  2052                           
  2053                           ; 32 bytes @ 0x0
  2054  000100                     	ds	4
  2055  000104                     arp_sendRequest@ipTarget:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x4
  2059  000104                     	ds	4
  2060  000108                     arp_sendRequest@senderMAC:
  2061                           	opt stack 0
  2062                           
  2063                           ; 6 bytes @ 0x8
  2064  000108                     	ds	6
  2065  00010E                     arp_sendRequest@targetMAC:
  2066                           	opt stack 0
  2067                           
  2068                           ; 6 bytes @ 0xE
  2069  00010E                     	ds	6
  2070  000114                     arp_sendRequest@request:
  2071                           	opt stack 0
  2072                           
  2073                           ; 32 bytes @ 0x14
  2074  000114                     	ds	12
  2075  000120                     arp_sendReply@senderMAC:
  2076                           	opt stack 0
  2077                           
  2078                           ; 6 bytes @ 0x20
  2079  000120                     	ds	6
  2080  000126                     arp_sendReply@targetMAC:
  2081                           	opt stack 0
  2082                           
  2083                           ; 6 bytes @ 0x26
  2084  000126                     	ds	6
  2085  00012C                     arp_sendReply@senderIP:
  2086                           	opt stack 0
  2087                           
  2088                           ; 4 bytes @ 0x2C
  2089  00012C                     	ds	4
  2090  000130                     arp_sendReply@targetIP:
  2091                           	opt stack 0
  2092                           
  2093                           ; 4 bytes @ 0x30
  2094  000130                     	ds	4
  2095  000134                     ??_arp_probe:
  2096  000134                     ??_arp_gratuitous:
  2097  000134                     arp_sendReply@myIP:
  2098                           	opt stack 0
  2099                           
  2100                           ; 4 bytes @ 0x34
  2101  000134                     	ds	4
  2102  000138                     arp_sendReply@reply:
  2103                           	opt stack 0
  2104                           
  2105                           ; 32 bytes @ 0x38
  2106  000138                     	ds	4
  2107  00013C                     arp_probe@index:
  2108                           	opt stack 0
  2109  00013C                     arp_gratuitous@err:
  2110                           	opt stack 0
  2111                           
  2112                           ; 3 bytes @ 0x3C
  2113  00013C                     	ds	1
  2114  00013D                     arp_probe@timeStart:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x3D
  2118  00013D                     	ds	4
  2119  000141                     arp_probe@waitingTime:
  2120                           	opt stack 0
  2121                           
  2122                           ; 4 bytes @ 0x41
  2123  000141                     	ds	4
  2124  000145                     arp_probe@ipSender:
  2125                           	opt stack 0
  2126                           
  2127                           ; 4 bytes @ 0x45
  2128  000145                     	ds	4
  2129  000149                     arp_probe@err:
  2130                           	opt stack 0
  2131                           
  2132                           ; 3 bytes @ 0x49
  2133  000149                     	ds	3
  2134  00014C                     ??_arp_background:
  2135                           
  2136                           ; 1 bytes @ 0x4C
  2137  00014C                     	ds	2
  2138  00014E                     arp_background@ipPreliminary:
  2139                           	opt stack 0
  2140                           
  2141                           ; 4 bytes @ 0x4E
  2142  00014E                     	ds	4
  2143  000152                     arp_background@errAnnounce:
  2144                           	opt stack 0
  2145                           
  2146                           ; 3 bytes @ 0x52
  2147  000152                     	ds	6
  2148  000158                     arp_handleNewPacket@arp:
  2149                           	opt stack 0
  2150                           
  2151                           ; 32 bytes @ 0x58
  2152  000158                     	ds	32
  2153  000178                     ?_ethernet_rxGetNewFrame:
  2154                           	opt stack 0
  2155  000178                     ethernet_rxGetNewFrame@frame:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x78
  2159  000178                     	ds	3
  2160  00017B                     ??_ethernet_rxGetNewFrame:
  2161                           
  2162                           ; 1 bytes @ 0x7B
  2163  00017B                     	ds	8
  2164  000183                     ethernet_rxGetNewFrame@err:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x83
  2168  000183                     	ds	3
  2169  000186                     handleStackBackgroundTasks@stack:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x86
  2173  000186                     	ds	2
  2174  000188                     
  2175                           ; 1 bytes @ 0x88
  2176  000188                     	ds	1
  2177  000189                     ??_main:
  2178                           
  2179                           ; 1 bytes @ 0x89
  2180  000189                     	ds	2
  2181                           tblptru	equ	0xFF8
  2182                           tblptrh	equ	0xFF7
  2183                           tblptrl	equ	0xFF6
  2184                           tablat	equ	0xFF5
  2185                           postinc0	equ	0xFEE
  2186                           wreg	equ	0xFE8
  2187                           postdec1	equ	0xFE5
  2188                           fsr1l	equ	0xFE1
  2189                           
  2190                           	psect	cstackBANK0
  2191  000060                     __pcstackBANK0:
  2192                           	opt stack 0
  2193  000060                     ?_enc424j600_getNextPacketPointer:
  2194                           	opt stack 0
  2195  000060                     ?_ethernetController_getDeviceName:
  2196                           	opt stack 0
  2197  000060                     ?_etherTypeToString:
  2198                           	opt stack 0
  2199  000060                     ?_ipProtocolToString:
  2200                           	opt stack 0
  2201  000060                     ?___wmul:
  2202                           	opt stack 0
  2203  000060                     ?___lwdiv:
  2204                           	opt stack 0
  2205  000060                     ?_getMillis:
  2206                           	opt stack 0
  2207  000060                     ?_ipv4_getIPSourceAddress:
  2208                           	opt stack 0
  2209  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2210                           	opt stack 0
  2211  000060                     ?___lmul:
  2212                           	opt stack 0
  2213  000060                     ?___lldiv:
  2214                           	opt stack 0
  2215  000060                     ?___llmod:
  2216                           	opt stack 0
  2217  000060                     ?_enc424j600_updateReceiveStatusVector:
  2218                           	opt stack 0
  2219  000060                     entireMemoryEmpty@i:
  2220                           	opt stack 0
  2221  000060                     entireMemoryFull@i:
  2222                           	opt stack 0
  2223  000060                     memory_txFrameClear@index:
  2224                           	opt stack 0
  2225  000060                     hexToChar@val:
  2226                           	opt stack 0
  2227  000060                     enc424j600_writeSPI@data:
  2228                           	opt stack 0
  2229  000060                     enc424j600_readSPI@data:
  2230                           	opt stack 0
  2231  000060                     enc424j600_setNextPacketPointer@ptr:
  2232                           	opt stack 0
  2233  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2234                           	opt stack 0
  2235  000060                     mac_setToBroadcast@mac:
  2236                           	opt stack 0
  2237  000060                     mac_isAllZero@mac:
  2238                           	opt stack 0
  2239  000060                     mac_cmp@a:
  2240                           	opt stack 0
  2241  000060                     mac_setAllZero@mac:
  2242                           	opt stack 0
  2243  000060                     etherTypeToString@ethertype:
  2244                           	opt stack 0
  2245  000060                     ipv4_calculateHeaderChecksum@header:
  2246                           	opt stack 0
  2247  000060                     ipv4_SrcAddrChanged@err:
  2248                           	opt stack 0
  2249  000060                     ipv4_cmp@a:
  2250                           	opt stack 0
  2251  000060                     ipv4_isAllZero@ip:
  2252                           	opt stack 0
  2253  000060                     ipv4_setToAllZero@ip:
  2254                           	opt stack 0
  2255  000060                     ___wmul@multiplier:
  2256                           	opt stack 0
  2257  000060                     ___lwdiv@dividend:
  2258                           	opt stack 0
  2259  000060                     ___lmul@multiplier:
  2260                           	opt stack 0
  2261  000060                     ___lldiv@dividend:
  2262                           	opt stack 0
  2263  000060                     ___llmod@dividend:
  2264                           	opt stack 0
  2265  000060                     checkForOverlapSwitched@a:
  2266                           	opt stack 0
  2267                           
  2268                           ; 9 bytes @ 0x0
  2269  000060                     	ds	1
  2270  000061                     ?_hexToString:
  2271                           	opt stack 0
  2272  000061                     hexToString@val:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x1
  2276  000061                     	ds	1
  2277  000062                     ??_enc424j600_writeSPI:
  2278  000062                     ??_enc424j600_readSPI:
  2279  000062                     ??_etherTypeToString:
  2280  000062                     ??_ipv4_calculateHeaderChecksum:
  2281  000062                     ?_ethernetController_getNextPacketPointer:
  2282                           	opt stack 0
  2283  000062                     mac_setToBroadcast@i:
  2284                           	opt stack 0
  2285  000062                     mac_isAllZero@i:
  2286                           	opt stack 0
  2287  000062                     mac_setAllZero@i:
  2288                           	opt stack 0
  2289  000062                     ipProtocolToString@protocol:
  2290                           	opt stack 0
  2291  000062                     ipv4_isAllZero@i:
  2292                           	opt stack 0
  2293  000062                     ipv4_setToAllZero@i:
  2294                           	opt stack 0
  2295  000062                     mac_cmp@b:
  2296                           	opt stack 0
  2297  000062                     ipv4_cmp@b:
  2298                           	opt stack 0
  2299  000062                     ___wmul@multiplicand:
  2300                           	opt stack 0
  2301  000062                     ___lwdiv@divisor:
  2302                           	opt stack 0
  2303  000062                     ethernetController_getDeviceName@string:
  2304                           	opt stack 0
  2305                           
  2306                           ; 11 bytes @ 0x2
  2307  000062                     	ds	2
  2308  000064                     ___lwdiv@counter:
  2309                           	opt stack 0
  2310  000064                     ___wmul@product:
  2311                           	opt stack 0
  2312  000064                     ___lmul@multiplicand:
  2313                           	opt stack 0
  2314  000064                     ___lldiv@divisor:
  2315                           	opt stack 0
  2316  000064                     ___llmod@divisor:
  2317                           	opt stack 0
  2318  000064                     arp_setNewEntry@mac:
  2319                           	opt stack 0
  2320                           
  2321                           ; 6 bytes @ 0x4
  2322  000064                     	ds	1
  2323  000065                     ??_enc424j600_updateReceiveStatusVector:
  2324  000065                     ??_hexToString:
  2325  000065                     ___lwdiv@quotient:
  2326                           	opt stack 0
  2327                           
  2328                           ; 2 bytes @ 0x5
  2329  000065                     	ds	1
  2330  000066                     mac_cmp@i:
  2331                           	opt stack 0
  2332  000066                     ipv4_cmp@i:
  2333                           	opt stack 0
  2334  000066                     enc424j600_writeSPI@timeoutCounter:
  2335                           	opt stack 0
  2336  000066                     enc424j600_readSPI@timeoutCounter:
  2337                           	opt stack 0
  2338                           
  2339                           ; 4 bytes @ 0x6
  2340  000066                     	ds	1
  2341  000067                     arp_checkForEntry@ip:
  2342                           	opt stack 0
  2343                           
  2344                           ; 4 bytes @ 0x7
  2345  000067                     	ds	1
  2346  000068                     ___llmod@counter:
  2347                           	opt stack 0
  2348  000068                     ___lmul@product:
  2349                           	opt stack 0
  2350  000068                     ___lldiv@quotient:
  2351                           	opt stack 0
  2352                           
  2353                           ; 4 bytes @ 0x8
  2354  000068                     	ds	1
  2355  000069                     hexToString@pointer:
  2356                           	opt stack 0
  2357  000069                     checkForOverlapSwitched@b:
  2358                           	opt stack 0
  2359                           
  2360                           ; 9 bytes @ 0x9
  2361  000069                     	ds	1
  2362  00006A                     enc424j600_writeSingleByte@opcode:
  2363                           	opt stack 0
  2364  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  2365                           	opt stack 0
  2366  00006A                     enc424j600_readControlRegisterUnbanked@data:
  2367                           	opt stack 0
  2368  00006A                     enc424j600_setGPDATAWritePointer@addr:
  2369                           	opt stack 0
  2370  00006A                     enc424j600_setERXDATAReadPointer@addr:
  2371                           	opt stack 0
  2372  00006A                     arp_setNewEntry@ip:
  2373                           	opt stack 0
  2374                           
  2375                           ; 4 bytes @ 0xA
  2376  00006A                     	ds	1
  2377  00006B                     arp_checkForEntry@index:
  2378                           	opt stack 0
  2379                           
  2380                           ; 2 bytes @ 0xB
  2381  00006B                     	ds	1
  2382  00006C                     ?_rand:
  2383                           	opt stack 0
  2384  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  2385                           	opt stack 0
  2386  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  2387                           	opt stack 0
  2388  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  2389                           	opt stack 0
  2390  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  2391                           	opt stack 0
  2392  00006C                     ___lldiv@counter:
  2393                           	opt stack 0
  2394  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  2395                           	opt stack 0
  2396                           
  2397                           ; 5 bytes @ 0xC
  2398  00006C                     	ds	1
  2399  00006D                     ??_arp_checkForEntry:
  2400  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  2401                           	opt stack 0
  2402  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  2403                           	opt stack 0
  2404  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  2405                           	opt stack 0
  2406  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  2407                           	opt stack 0
  2408  00006D                     ultoa@buf:
  2409                           	opt stack 0
  2410                           
  2411                           ; 2 bytes @ 0xD
  2412  00006D                     	ds	1
  2413  00006E                     ??_enc424j600_clearInterruptFlag:
  2414  00006E                     ?_enc424j600_getInterruptFlags:
  2415                           	opt stack 0
  2416  00006E                     ?___lwmod:
  2417                           	opt stack 0
  2418  00006E                     ?_ethernetController_softReset:
  2419                           	opt stack 0
  2420  00006E                     ?_ethernetController_checkDeviceId:
  2421                           	opt stack 0
  2422  00006E                     ?_ethernetController_getMacAddress:
  2423                           	opt stack 0
  2424  00006E                     ethernetController_setLEDConfig@conf:
  2425                           	opt stack 0
  2426  00006E                     enc424j600_getPacketCount@lowByte:
  2427                           	opt stack 0
  2428  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  2429                           	opt stack 0
  2430  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  2431                           	opt stack 0
  2432  00006E                     enc424j600_enableAutoMACInsertion@temp:
  2433                           	opt stack 0
  2434  00006E                     enc424j600_readPHYRegister@data:
  2435                           	opt stack 0
  2436  00006E                     enc424j600_setTXLength@len:
  2437                           	opt stack 0
  2438  00006E                     enc424j600_setTXStartAddress@addr:
  2439                           	opt stack 0
  2440  00006E                     enc424j600_setRXBufferStartAddress@addr:
  2441                           	opt stack 0
  2442  00006E                     enc424j600_setRXTailPointer@addr:
  2443                           	opt stack 0
  2444  00006E                     ___lwmod@dividend:
  2445                           	opt stack 0
  2446  00006E                     arp_setNewEntry@timestamp:
  2447                           	opt stack 0
  2448  00006E                     ipv4_calculateHeaderChecksum@sum:
  2449                           	opt stack 0
  2450                           
  2451                           ; 4 bytes @ 0xE
  2452  00006E                     	ds	1
  2453  00006F                     ??_ethernetController_updateNextPacketPointer:
  2454  00006F                     ?_ethernetController_getEtherTypeField:
  2455                           	opt stack 0
  2456  00006F                     ?_ethernetController_getSourceMACAddress:
  2457                           	opt stack 0
  2458  00006F                     ethernetController_setLEDConfig@LED:
  2459                           	opt stack 0
  2460  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2461                           	opt stack 0
  2462  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  2463                           	opt stack 0
  2464  00006F                     ultoa@val:
  2465                           	opt stack 0
  2466  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2467                           	opt stack 0
  2468  00006F                     ethernetController_streamToTransmitBuffer@field:
  2469                           	opt stack 0
  2470  00006F                     ethernetController_getSourceMACAddress@field:
  2471                           	opt stack 0
  2472  00006F                     ethernetController_getEtherTypeField@field:
  2473                           	opt stack 0
  2474                           
  2475                           ; 9 bytes @ 0xF
  2476  00006F                     	ds	1
  2477  000070                     ??_enc424j600_getInterruptFlags:
  2478  000070                     ??_enc424j600_readPHYRegister:
  2479  000070                     ethernetController_setLEDConfig@data:
  2480                           	opt stack 0
  2481  000070                     enc424j600_setTXLength@lowByte:
  2482                           	opt stack 0
  2483  000070                     enc424j600_setTXStartAddress@lowByte:
  2484                           	opt stack 0
  2485  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  2486                           	opt stack 0
  2487  000070                     enc424j600_setRXTailPointer@lowByte:
  2488                           	opt stack 0
  2489  000070                     enc424j600_clearInterruptFlag@flag:
  2490                           	opt stack 0
  2491  000070                     ___lwmod@divisor:
  2492                           	opt stack 0
  2493                           
  2494                           ; 2 bytes @ 0x10
  2495  000070                     	ds	1
  2496  000071                     ??_ethernetController_softReset:
  2497  000071                     ?_ethernetController_getRSV:
  2498                           	opt stack 0
  2499  000071                     ethernetController_checkDeviceId@data:
  2500                           	opt stack 0
  2501  000071                     ethernetController_streamFromRXBuffer@startEnd:
  2502                           	opt stack 0
  2503  000071                     enc424j600_setTXLength@highByte:
  2504                           	opt stack 0
  2505  000071                     enc424j600_setTXStartAddress@highByte:
  2506                           	opt stack 0
  2507  000071                     enc424j600_setRXBufferStartAddress@highByte:
  2508                           	opt stack 0
  2509  000071                     enc424j600_setRXTailPointer@highByte:
  2510                           	opt stack 0
  2511  000071                     enc424j600_clearInterruptFlag@temp:
  2512                           	opt stack 0
  2513  000071                     ethernetController_getRSV@address:
  2514                           	opt stack 0
  2515  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2516                           	opt stack 0
  2517                           
  2518                           ; 9 bytes @ 0x11
  2519  000071                     	ds	1
  2520  000072                     ethernetController_softReset@comFailCount:
  2521                           	opt stack 0
  2522  000072                     ethernetController_clearInterruptFlag@flag:
  2523                           	opt stack 0
  2524  000072                     ethernetController_streamFromRXBuffer@opcode:
  2525                           	opt stack 0
  2526  000072                     ___lwmod@counter:
  2527                           	opt stack 0
  2528  000072                     ethernetController_dropPacket@frame:
  2529                           	opt stack 0
  2530  000072                     ethernetController_checkDeviceId@err:
  2531                           	opt stack 0
  2532  000072                     ethernetController_sendPacket@field:
  2533                           	opt stack 0
  2534  000072                     checkForOverlap@a:
  2535                           	opt stack 0
  2536                           
  2537                           ; 9 bytes @ 0x12
  2538  000072                     	ds	1
  2539  000073                     ?_ipAdressToString:
  2540                           	opt stack 0
  2541  000073                     ethernetController_streamFromRXBuffer@temp:
  2542                           	opt stack 0
  2543  000073                     ethernetController_softReset@dataToSend:
  2544                           	opt stack 0
  2545  000073                     ultoa@base:
  2546                           	opt stack 0
  2547  000073                     ipAdressToString@ip:
  2548                           	opt stack 0
  2549                           
  2550                           ; 4 bytes @ 0x13
  2551  000073                     	ds	1
  2552  000074                     ?_ipv4_parseHeader:
  2553                           	opt stack 0
  2554  000074                     ?_arp_parseFromRXBuffer:
  2555                           	opt stack 0
  2556  000074                     arp_parseFromRXBuffer@frame:
  2557                           	opt stack 0
  2558  000074                     ipv4_parseHeader@field:
  2559                           	opt stack 0
  2560  000074                     ethernetController_getMacAddress@mac:
  2561                           	opt stack 0
  2562                           
  2563                           ; 6 bytes @ 0x14
  2564  000074                     	ds	1
  2565  000075                     arp_checkForEntry@i:
  2566                           	opt stack 0
  2567  000075                     ethernetController_softReset@receivedData:
  2568                           	opt stack 0
  2569  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2570                           	opt stack 0
  2571  000075                     ultoa@v:
  2572                           	opt stack 0
  2573  000075                     ethernetController_writeDestinationMACAddress@field:
  2574                           	opt stack 0
  2575                           
  2576                           ; 9 bytes @ 0x15
  2577  000075                     	ds	1
  2578  000076                     ethernetController_getRSV@opcode:
  2579                           	opt stack 0
  2580  000076                     enc424j600_readPHYRegister@addr:
  2581                           	opt stack 0
  2582  000076                     enc424j600_getInterruptFlags@low:
  2583                           	opt stack 0
  2584  000076                     arp_setNewEntry@maxSeconds:
  2585                           	opt stack 0
  2586                           
  2587                           ; 4 bytes @ 0x16
  2588  000076                     	ds	1
  2589  000077                     ??_ipAdressToString:
  2590  000077                     ethernetController_getRSV@i:
  2591                           	opt stack 0
  2592  000077                     ethernetController_updateNextPacketPointer@opcode:
  2593                           	opt stack 0
  2594  000077                     enc424j600_readPHYRegister@PHYaddress:
  2595                           	opt stack 0
  2596  000077                     enc424j600_getInterruptFlags@high:
  2597                           	opt stack 0
  2598  000077                     ethernetController_softReset@err:
  2599                           	opt stack 0
  2600                           
  2601                           ; 3 bytes @ 0x17
  2602  000077                     	ds	1
  2603  000078                     ??_ethernetController_streamToTransmitBuffer:
  2604  000078                     ??_ethernetController_getEtherTypeField:
  2605  000078                     ?_ethernetController_pollInterruptFlags:
  2606                           	opt stack 0
  2607  000078                     ethernetController_getSourceMACAddress@opcode:
  2608                           	opt stack 0
  2609  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2610                           	opt stack 0
  2611  000078                     enc424j600_readPHYRegister@unusedBits:
  2612                           	opt stack 0
  2613                           
  2614                           ; 1 bytes @ 0x18
  2615  000078                     	ds	1
  2616  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2617                           	opt stack 0
  2618  000079                     ultoa@c:
  2619                           	opt stack 0
  2620  000079                     enc424j600_readPHYRegister@timeoutCounter:
  2621                           	opt stack 0
  2622  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2623                           	opt stack 0
  2624                           
  2625                           ; 6 bytes @ 0x19
  2626  000079                     	ds	1
  2627  00007A                     ??_ethernetController_pollInterruptFlags:
  2628  00007A                     ?_macToString:
  2629                           	opt stack 0
  2630  00007A                     ?_ethernetController_init:
  2631                           	opt stack 0
  2632  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2633                           	opt stack 0
  2634  00007A                     arp_setNewEntry@oldestIndex:
  2635                           	opt stack 0
  2636  00007A                     ltoa@buf:
  2637                           	opt stack 0
  2638  00007A                     srand@x:
  2639                           	opt stack 0
  2640  00007A                     macToString@addr:
  2641                           	opt stack 0
  2642                           
  2643                           ; 6 bytes @ 0x1A
  2644  00007A                     	ds	1
  2645  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2646                           	opt stack 0
  2647  00007B                     arp_setNewEntry@i:
  2648                           	opt stack 0
  2649  00007B                     ipAdressToString@ones:
  2650                           	opt stack 0
  2651  00007B                     checkForOverlap@b:
  2652                           	opt stack 0
  2653                           
  2654                           ; 9 bytes @ 0x1B
  2655  00007B                     	ds	1
  2656  00007C                     ethernetController_streamToTransmitBuffer@data:
  2657                           	opt stack 0
  2658  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2659                           	opt stack 0
  2660  00007C                     ethernetController_getEtherTypeField@ethertype:
  2661                           	opt stack 0
  2662  00007C                     ltoa@val:
  2663                           	opt stack 0
  2664  00007C                     arp_init@mac:
  2665                           	opt stack 0
  2666                           
  2667                           ; 6 bytes @ 0x1C
  2668  00007C                     	ds	1
  2669  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2670                           	opt stack 0
  2671  00007D                     enc424j600_readPHYRegister@lowByte:
  2672                           	opt stack 0
  2673  00007D                     ethernetController_init@err:
  2674                           	opt stack 0
  2675                           
  2676                           ; 3 bytes @ 0x1D
  2677  00007D                     	ds	1
  2678  00007E                     ethernetController_getEtherTypeField@opcode:
  2679                           	opt stack 0
  2680  00007E                     enc424j600_readPHYRegister@highByte:
  2681                           	opt stack 0
  2682  00007E                     ethernetController_pollInterruptFlags@flags:
  2683                           	opt stack 0
  2684  00007E                     ethernetController_writeDestinationMACAddress@data:
  2685                           	opt stack 0
  2686                           
  2687                           ; 6 bytes @ 0x1E
  2688  00007E                     	ds	1
  2689  00007F                     ethernetController_getSourceMACAddress@temp:
  2690                           	opt stack 0
  2691  00007F                     ethernetController_getEtherTypeField@lowByte:
  2692                           	opt stack 0
  2693  00007F                     enc424j600_readPHYRegister@temp:
  2694                           	opt stack 0
  2695  00007F                     ipAdressToString@tens:
  2696                           	opt stack 0
  2697                           
  2698                           ; 4 bytes @ 0x1F
  2699  00007F                     	ds	1
  2700  000080                     ??_macToString:
  2701  000080                     ethernetController_getSourceMACAddress@i:
  2702                           	opt stack 0
  2703  000080                     ethernetController_getEtherTypeField@highByte:
  2704                           	opt stack 0
  2705  000080                     ethernetController_pollInterruptFlags@reg:
  2706                           	opt stack 0
  2707  000080                     ethernetController_updateLinkStatus@state:
  2708                           	opt stack 0
  2709  000080                     ltoa@base:
  2710                           	opt stack 0
  2711                           
  2712                           ; 2 bytes @ 0x20
  2713  000080                     	ds	1
  2714  000081                     macToString@address:
  2715                           	opt stack 0
  2716                           
  2717                           ; 18 bytes @ 0x21
  2718  000081                     	ds	1
  2719  000082                     ethernetController_updateLinkStatus@temp:
  2720                           	opt stack 0
  2721  000082                     ltoa@cp:
  2722                           	opt stack 0
  2723  000082                     arp_init@ip:
  2724                           	opt stack 0
  2725                           
  2726                           ; 4 bytes @ 0x22
  2727  000082                     	ds	1
  2728  000083                     ethernetController_updateLinkStatus@temp16:
  2729                           	opt stack 0
  2730  000083                     ipAdressToString@hundreds:
  2731                           	opt stack 0
  2732                           
  2733                           ; 4 bytes @ 0x23
  2734  000083                     	ds	1
  2735  000084                     ?_intToString:
  2736                           	opt stack 0
  2737  000084                     ?_memory_txFrameRequest:
  2738                           	opt stack 0
  2739  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2740                           	opt stack 0
  2741  000084                     memory_txFrameRequest@length:
  2742                           	opt stack 0
  2743  000084                     intToString@val:
  2744                           	opt stack 0
  2745                           
  2746                           ; 4 bytes @ 0x24
  2747  000084                     	ds	1
  2748  000085                     ethernetController_writeDestinationMACAddress@i_646:
  2749                           	opt stack 0
  2750                           
  2751                           ; 1 bytes @ 0x25
  2752  000085                     	ds	1
  2753  000086                     ethernetController_writeDestinationMACAddress@i:
  2754                           	opt stack 0
  2755  000086                     arp_init@i:
  2756                           	opt stack 0
  2757                           
  2758                           ; 1 bytes @ 0x26
  2759  000086                     	ds	1
  2760  000087                     ipAdressToString@pointer:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x27
  2764  000087                     	ds	1
  2765  000088                     ipAdressToString@i:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x28
  2769  000088                     	ds	3
  2770  00008B                     ??_ipv4_parseHeader:
  2771                           
  2772                           ; 1 bytes @ 0x2B
  2773  00008B                     	ds	1
  2774  00008C                     ipv4_parseHeader@i:
  2775                           	opt stack 0
  2776                           
  2777                           ; 1 bytes @ 0x2C
  2778  00008C                     	ds	1
  2779  00008D                     ??_memory_txFrameRequest:
  2780  00008D                     ipv4_parseHeader@i_3583:
  2781                           	opt stack 0
  2782                           
  2783                           ; 1 bytes @ 0x2D
  2784  00008D                     	ds	1
  2785  00008E                     ipv4_parseHeader@temp:
  2786                           	opt stack 0
  2787                           
  2788                           ; 1 bytes @ 0x2E
  2789  00008E                     	ds	1
  2790  00008F                     ipv4_parseHeader@ip:
  2791                           	opt stack 0
  2792                           
  2793                           ; 23 bytes @ 0x2F
  2794  00008F                     	ds	4
  2795  000093                     macToString@firstDigit:
  2796                           	opt stack 0
  2797  000093                     _memory_txFrameRequest$1183:
  2798                           	opt stack 0
  2799                           
  2800                           ; 2 bytes @ 0x33
  2801  000093                     	ds	1
  2802  000094                     ??_arp_parseFromRXBuffer:
  2803  000094                     macToString@secondDigit:
  2804                           	opt stack 0
  2805                           
  2806                           ; 1 bytes @ 0x34
  2807  000094                     	ds	1
  2808  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2809                           	opt stack 0
  2810  000095                     macToString@i:
  2811                           	opt stack 0
  2812                           
  2813                           ; 2 bytes @ 0x35
  2814  000095                     	ds	1
  2815  000096                     memory_txFrameRequest@i:
  2816                           	opt stack 0
  2817                           
  2818                           ; 1 bytes @ 0x36
  2819  000096                     	ds	1
  2820  000097                     memory_txFrameRequest@i_1187:
  2821                           	opt stack 0
  2822  000097                     macToString@j:
  2823                           	opt stack 0
  2824  000097                     arp_parseFromRXBuffer@i:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x37
  2828  000097                     	ds	1
  2829  000098                     arp_parseFromRXBuffer@i_2992:
  2830                           	opt stack 0
  2831  000098                     UARTTransmitText@str:
  2832                           	opt stack 0
  2833  000098                     memory_txFrameRequest@field:
  2834                           	opt stack 0
  2835                           
  2836                           ; 9 bytes @ 0x38
  2837  000098                     	ds	1
  2838  000099                     arp_parseFromRXBuffer@i_2993:
  2839                           	opt stack 0
  2840                           
  2841                           ; 1 bytes @ 0x39
  2842  000099                     	ds	1
  2843  00009A                     ??_ipv4_background:
  2844  00009A                     arp_parseFromRXBuffer@i_2994:
  2845                           	opt stack 0
  2846  00009A                     ipv4_checkHeaderChecksum@header:
  2847                           	opt stack 0
  2848  00009A                     printErrorMessage@err:
  2849                           	opt stack 0
  2850  00009A                     UARTTransmitInt@val:
  2851                           	opt stack 0
  2852  00009A                     ipv4_setIPSourceAddress@ip:
  2853                           	opt stack 0
  2854  00009A                     printEthernetState@state:
  2855                           	opt stack 0
  2856                           
  2857                           ; 15 bytes @ 0x3A
  2858  00009A                     	ds	1
  2859  00009B                     arp_parseFromRXBuffer@offset:
  2860                           	opt stack 0
  2861                           
  2862                           ; 2 bytes @ 0x3B
  2863  00009B                     	ds	1
  2864  00009C                     ??_ipv4_checkHeaderChecksum:
  2865  00009C                     ipv4_background@err:
  2866                           	opt stack 0
  2867                           
  2868                           ; 3 bytes @ 0x3C
  2869  00009C                     	ds	1
  2870  00009D                     ??_printErrorMessage:
  2871  00009D                     arp_parseFromRXBuffer@arp:
  2872                           	opt stack 0
  2873                           
  2874                           ; 32 bytes @ 0x3D
  2875  00009D                     	ds	1
  2876  00009E                     ipv4_checkHeaderChecksum@testHeader:
  2877                           	opt stack 0
  2878                           
  2879                           ; 23 bytes @ 0x3E
  2880  00009E                     	ds	3
  2881  0000A1                     memory_txFrameRequest@freeIndex:
  2882                           	opt stack 0
  2883                           
  2884                           ; 1 bytes @ 0x41
  2885  0000A1                     	ds	1
  2886  0000A2                     ethernet_txFrameRequest@frame:
  2887                           	opt stack 0
  2888                           
  2889                           ; 2 bytes @ 0x42
  2890  0000A2                     	ds	2
  2891  0000A4                     ethernet_txFrameRequest@err:
  2892                           	opt stack 0
  2893                           
  2894                           ; 3 bytes @ 0x44
  2895  0000A4                     	ds	3
  2896  0000A7                     arp_send@arp:
  2897                           	opt stack 0
  2898                           
  2899                           ; 32 bytes @ 0x47
  2900  0000A7                     	ds	2
  2901  0000A9                     
  2902                           ; 1 bytes @ 0x49
  2903  0000A9                     	ds	12
  2904  0000B5                     ipv4_handleNewPacket@frame:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0x55
  2908  0000B5                     	ds	2
  2909  0000B7                     ??_ipv4_handleNewPacket:
  2910                           
  2911                           ; 1 bytes @ 0x57
  2912  0000B7                     	ds	2
  2913  0000B9                     ipv4_handleNewPacket@headerField:
  2914                           	opt stack 0
  2915                           
  2916                           ; 9 bytes @ 0x59
  2917  0000B9                     	ds	9
  2918  0000C2                     ipv4_handleNewPacket@ip:
  2919                           	opt stack 0
  2920                           
  2921                           ; 23 bytes @ 0x62
  2922  0000C2                     	ds	5
  2923  0000C7                     arp_send@destination:
  2924                           	opt stack 0
  2925                           
  2926                           ; 6 bytes @ 0x67
  2927  0000C7                     	ds	6
  2928  0000CD                     arp_send@i:
  2929                           	opt stack 0
  2930                           
  2931                           ; 1 bytes @ 0x6D
  2932  0000CD                     	ds	1
  2933  0000CE                     arp_send@i_3067:
  2934                           	opt stack 0
  2935                           
  2936                           ; 1 bytes @ 0x6E
  2937  0000CE                     	ds	1
  2938  0000CF                     arp_send@i_3068:
  2939                           	opt stack 0
  2940                           
  2941                           ; 1 bytes @ 0x6F
  2942  0000CF                     	ds	1
  2943  0000D0                     arp_send@i_3069:
  2944                           	opt stack 0
  2945                           
  2946                           ; 1 bytes @ 0x70
  2947  0000D0                     	ds	1
  2948  0000D1                     arp_send@ethFrame:
  2949                           	opt stack 0
  2950                           
  2951                           ; 34 bytes @ 0x71
  2952  0000D1                     	ds	34
  2953  0000F3                     arp_send@field:
  2954                           	opt stack 0
  2955                           
  2956                           ; 9 bytes @ 0x93
  2957  0000F3                     	ds	9
  2958  0000FC                     ?_arp_probe:
  2959                           	opt stack 0
  2960  0000FC                     ?_arp_gratuitous:
  2961                           	opt stack 0
  2962  0000FC                     arp_handleNewPacket@frame:
  2963                           	opt stack 0
  2964  0000FC                     arp_probe@ipTarget:
  2965                           	opt stack 0
  2966  0000FC                     arp_gratuitous@ip:
  2967                           	opt stack 0
  2968                           
  2969                           ; 4 bytes @ 0x9C
  2970  0000FC                     	ds	2
  2971  0000FE                     
  2972                           ; 1 bytes @ 0x9E
  2973  0000FE                     	ds	2
  2974                           tblptru	equ	0xFF8
  2975                           tblptrh	equ	0xFF7
  2976                           tblptrl	equ	0xFF6
  2977                           tablat	equ	0xFF5
  2978                           postinc0	equ	0xFEE
  2979                           wreg	equ	0xFE8
  2980                           postdec1	equ	0xFE5
  2981                           fsr1l	equ	0xFE1
  2982                           
  2983                           	psect	cstackCOMRAM
  2984  000001                     __pcstackCOMRAM:
  2985                           	opt stack 0
  2986  000001                     ?i2___lwdiv:
  2987                           	opt stack 0
  2988  000001                     buttonHandler@state:
  2989                           	opt stack 0
  2990  000001                     i2___lwdiv@dividend:
  2991                           	opt stack 0
  2992                           
  2993                           ; 2 bytes @ 0x0
  2994  000001                     	ds	2
  2995  000003                     i2___lwdiv@divisor:
  2996                           	opt stack 0
  2997  000003                     buttonHandler@resetValue:
  2998                           	opt stack 0
  2999                           
  3000                           ; 4 bytes @ 0x2
  3001  000003                     	ds	2
  3002  000005                     i2___lwdiv@quotient:
  3003                           	opt stack 0
  3004                           
  3005                           ; 2 bytes @ 0x4
  3006  000005                     	ds	2
  3007  000007                     i2___lwdiv@counter:
  3008                           	opt stack 0
  3009  000007                     buttonHandler@debounceValue:
  3010                           	opt stack 0
  3011                           
  3012                           ; 4 bytes @ 0x6
  3013  000007                     	ds	1
  3014  000008                     parseNumber@numberToDisplay:
  3015                           	opt stack 0
  3016                           
  3017                           ; 2 bytes @ 0x7
  3018  000008                     	ds	2
  3019  00000A                     parseNumber@digit:
  3020                           	opt stack 0
  3021                           
  3022                           ; 1 bytes @ 0x9
  3023  00000A                     	ds	1
  3024  00000B                     ??_parseNumber:
  3025                           
  3026                           ; 1 bytes @ 0xA
  3027  00000B                     	ds	1
  3028  00000C                     parseNumber@ones:
  3029                           	opt stack 0
  3030                           
  3031                           ; 1 bytes @ 0xB
  3032  00000C                     	ds	1
  3033  00000D                     parseNumber@tens:
  3034                           	opt stack 0
  3035                           
  3036                           ; 1 bytes @ 0xC
  3037  00000D                     	ds	1
  3038  00000E                     parseNumber@hundreds:
  3039                           	opt stack 0
  3040                           
  3041                           ; 1 bytes @ 0xD
  3042  00000E                     	ds	1
  3043  00000F                     sevenSegmentUpdate@numberToDisplay:
  3044                           	opt stack 0
  3045                           
  3046                           ; 2 bytes @ 0xE
  3047  00000F                     	ds	2
  3048  000011                     ??_sevenSegmentUpdate:
  3049                           
  3050                           ; 1 bytes @ 0x10
  3051  000011                     	ds	2
  3052  000013                     _sevenSegmentUpdate$2453:
  3053                           	opt stack 0
  3054                           
  3055                           ; 2 bytes @ 0x12
  3056  000013                     	ds	2
  3057  000015                     sevenSegmentUpdate@i:
  3058                           	opt stack 0
  3059                           
  3060                           ; 1 bytes @ 0x14
  3061  000015                     	ds	1
  3062  000016                     ??_ISR:
  3063                           
  3064                           ; 1 bytes @ 0x15
  3065  000016                     	ds	19
  3066                           tblptru	equ	0xFF8
  3067                           tblptrh	equ	0xFF7
  3068                           tblptrl	equ	0xFF6
  3069                           tablat	equ	0xFF5
  3070                           postinc0	equ	0xFEE
  3071                           wreg	equ	0xFE8
  3072                           postdec1	equ	0xFE5
  3073                           fsr1l	equ	0xFE1
  3074                           
  3075 ;;
  3076 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3077 ;;
  3078 ;; *************** function _main *****************
  3079 ;; Defined at:
  3080 ;;		line 33 in file "src/system/main.c"
  3081 ;; Parameters:    Size  Location     Type
  3082 ;;		None
  3083 ;; Auto vars:     Size  Location     Type
  3084 ;;  ipSrc           4   13[BANK3 ] struct ipv4_address
  3085 ;;  ipDst           4    9[BANK3 ] struct ipv4_address
  3086 ;;  prescaler       4    0[BANK3 ] unsigned long 
  3087 ;;  err             3    6[BANK3 ] struct error
  3088 ;;  oldState        1    0        unsigned char 
  3089 ;; Return value:  Size  Location     Type
  3090 ;;                  1    wreg      void 
  3091 ;; Registers used:
  3092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3093 ;; Tracked objects:
  3094 ;;		On entry : 0/0
  3095 ;;		On exit  : 0/0
  3096 ;;		Unchanged: 0/0
  3097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3098 ;;      Params:         0       0       0       0       0       0       0       0       0
  3099 ;;      Locals:         0       0       0       0      17       0       0       0       0
  3100 ;;      Temps:          0       0       2       0       0       0       0       0       0
  3101 ;;      Totals:         0       0       2       0      17       0       0       0       0
  3102 ;;Total ram usage:       19 bytes
  3103 ;; Hardware stack levels required when called:   14
  3104 ;; This function calls:
  3105 ;;		_UARTInit
  3106 ;;		_UARTTransmitText
  3107 ;;		_ethernetController_checkDeviceId
  3108 ;;		_ethernetController_getCurrentPacketCount
  3109 ;;		_ethernetController_getDeviceName
  3110 ;;		_ethernetController_getMacAddress
  3111 ;;		_ethernetController_init
  3112 ;;		_ethernetController_setLEDConfig
  3113 ;;		_handleStackBackgroundTasks
  3114 ;;		_ipv4_setIPSourceAddress
  3115 ;;		_macToString
  3116 ;;		_printErrorMessage
  3117 ;;		_printEthernetState
  3118 ;;		_sevenSegmentInit
  3119 ;;		_srand
  3120 ;;		_stack_init
  3121 ;; This function is called by:
  3122 ;;		Startup code after reset
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text0
  3127  001510                     __ptext0:
  3128                           	opt stack 0
  3129  001510                     _main:
  3130                           	opt stack 17
  3131                           
  3132                           ;main.c: 36: OSCCONbits.SCS = 0b00;
  3133                           
  3134                           ;incstack = 0
  3135  001510  0EFC               	movlw	-4
  3136  001512  16D3               	andwf	4051,f,c	;volatile
  3137                           
  3138                           ;main.c: 37: OSCCONbits.IRCF = 0b1110;
  3139  001514  50D3               	movf	4051,w,c	;volatile
  3140  001516  0B8F               	andlw	-113
  3141  001518  0960               	iorlw	96
  3142  00151A  6ED3               	movwf	4051,c	;volatile
  3143                           
  3144                           ;main.c: 38: OSCCON2bits.PLLEN = 0b1;
  3145  00151C  88D2               	bsf	4050,4,c	;volatile
  3146                           
  3147                           ;main.c: 41: INTCONbits.GIE = 0;
  3148  00151E  9EF2               	bcf	intcon,7,c	;volatile
  3149                           
  3150                           ;main.c: 42: INTCONbits.TMR0IE = 1;
  3151  001520  8AF2               	bsf	intcon,5,c	;volatile
  3152                           
  3153                           ;main.c: 43: INTCON3bits.INT2IE = 1;
  3154  001522  88F0               	bsf	intcon3,4,c	;volatile
  3155                           
  3156                           ;main.c: 44: RCIP = 0;
  3157  001524  9A9F               	bcf	3999,5,c	;volatile
  3158                           
  3159                           ;main.c: 45: RCIE = 1;
  3160  001526  8A9D               	bsf	3997,5,c	;volatile
  3161                           
  3162                           ;main.c: 46: INTCONbits.PEIE = 1;
  3163  001528  8CF2               	bsf	intcon,6,c	;volatile
  3164                           
  3165                           ;main.c: 50: T0CONbits.TMR0ON = 1;
  3166  00152A  8ED5               	bsf	4053,7,c	;volatile
  3167                           
  3168                           ;main.c: 51: T0CONbits.T08BIT = 1;
  3169  00152C  8CD5               	bsf	4053,6,c	;volatile
  3170                           
  3171                           ;main.c: 52: T0CONbits.T0CS = 0;
  3172  00152E  9AD5               	bcf	4053,5,c	;volatile
  3173                           
  3174                           ;main.c: 53: T0CONbits.PSA = 0;
  3175  001530  96D5               	bcf	4053,3,c	;volatile
  3176                           
  3177                           ;main.c: 54: T0CONbits.T0PS = 0b101;
  3178  001532  50D5               	movf	4053,w,c	;volatile
  3179  001534  0BF8               	andlw	-8
  3180  001536  0905               	iorlw	5
  3181  001538  6ED5               	movwf	4053,c	;volatile
  3182                           
  3183                           ;main.c: 58: T1CONbits.TMR1ON = 1;
  3184  00153A  80CD               	bsf	4045,0,c	;volatile
  3185                           
  3186                           ;main.c: 59: CCP1CONbits.CCP1M = 0b1011;
  3187  00153C  50BD               	movf	4029,w,c	;volatile
  3188  00153E  0BF0               	andlw	-16
  3189  001540  090B               	iorlw	11
  3190  001542  6EBD               	movwf	4029,c	;volatile
  3191                           
  3192                           ;main.c: 60: CCPR1 = 8000;
  3193  001544  0E1F               	movlw	31
  3194  001546  6EBF               	movwf	4031,c	;volatile
  3195  001548  0E40               	movlw	64
  3196  00154A  6EBE               	movwf	4030,c	;volatile
  3197                           
  3198                           ;main.c: 61: PIE1bits.CCP1IE = 1;
  3199  00154C  849D               	bsf	3997,2,c	;volatile
  3200                           
  3201                           ;main.c: 62: INTCONbits.PEIE = 1;
  3202  00154E  8CF2               	bsf	intcon,6,c	;volatile
  3203                           
  3204                           ;main.c: 64: TRISBbits.RB6 = 0;
  3205  001550  9C93               	bcf	3987,6,c	;volatile
  3206                           
  3207                           ;main.c: 67: UARTInit();
  3208  001552  EC37  F026         	call	_UARTInit	;wreg free
  3209                           
  3210                           ;main.c: 68: sevenSegmentInit();
  3211  001556  ECE3  F025         	call	_sevenSegmentInit	;wreg free
  3212                           
  3213                           ;main.c: 69: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  3214  00155A  0E68               	movlw	104
  3215  00155C  0101               	movlb	1	; () banked
  3216  00155E  6F89               	movwf	??_main& (0+255),b
  3217  001560  0EE4               	movlw	228
  3218  001562                     u11767:
  3219  001562  2EE8               	decfsz	wreg,f,c
  3220  001564  D7FE               	bra	u11767
  3221  001566  2F89               	decfsz	??_main& (0+255),f,b
  3222  001568  D7FC               	bra	u11767
  3223  00156A  F000               	nop	
  3224                           
  3225                           ;main.c: 70: UARTTransmitText("\x12");
  3226  00156C  0EFD               	movlw	low STR_21
  3227  00156E  0100               	movlb	0	; () banked
  3228  001570  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3229  001572  0E7F               	movlw	high STR_21
  3230  001574  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3231  001576  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3232                           
  3233                           ;main.c: 71: if (!RCONbits.TO) {
  3234  00157A  B6D0               	btfsc	4048,3,c	;volatile
  3235  00157C  D015               	goto	l622
  3236                           
  3237                           ;main.c: 72: UARTTransmitText("------------------------------------------------\n\r");
  3238  00157E  0E66               	movlw	low STR_22
  3239  001580  0100               	movlb	0	; () banked
  3240  001582  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3241  001584  0E7B               	movlw	high STR_22
  3242  001586  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3243  001588  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3244                           
  3245                           ;main.c: 73: UARTTransmitText("\a*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  3246  00158C  0E99               	movlw	low STR_23
  3247  00158E  0100               	movlb	0	; () banked
  3248  001590  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3249  001592  0E7B               	movlw	high STR_23
  3250  001594  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3251  001596  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3252                           
  3253                           ;main.c: 74: UARTTransmitText("------------------------------------------------\n\r");
  3254  00159A  0E66               	movlw	low STR_22
  3255  00159C  0100               	movlb	0	; () banked
  3256  00159E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3257  0015A0  0E7B               	movlw	high STR_22
  3258  0015A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3259  0015A4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3260  0015A8                     l622:
  3261                           
  3262                           ;main.c: 75: }
  3263                           ;main.c: 76: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  3264  0015A8  0E0F               	movlw	low STR_25
  3265  0015AA  0100               	movlb	0	; () banked
  3266  0015AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3267  0015AE  0E7E               	movlw	high STR_25
  3268  0015B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3269  0015B2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3270                           
  3271                           ;main.c: 77: UARTTransmitText("Mar 17 2019");
  3272  0015B6  0E62               	movlw	low STR_26
  3273  0015B8  0100               	movlb	0	; () banked
  3274  0015BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3275  0015BC  0E7F               	movlw	high STR_26
  3276  0015BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3277  0015C0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3278                           
  3279                           ;main.c: 78: UARTTransmitText(" ");
  3280  0015C4  0E67               	movlw	low (STR_37+18)
  3281  0015C6  0100               	movlb	0	; () banked
  3282  0015C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3283  0015CA  0E7E               	movlw	high (STR_37+18)
  3284  0015CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3285  0015CE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3286                           
  3287                           ;main.c: 79: UARTTransmitText("17:56:11");
  3288  0015D2  0EA2               	movlw	low STR_28
  3289  0015D4  0100               	movlb	0	; () banked
  3290  0015D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3291  0015D8  0E7F               	movlw	high STR_28
  3292  0015DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3293  0015DC  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3294                           
  3295                           ;main.c: 80: UARTTransmitText(".\n\r");
  3296  0015E0  0EDC               	movlw	low (STR_51+1)
  3297  0015E2  0100               	movlb	0	; () banked
  3298  0015E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3299  0015E6  0E7F               	movlw	high (STR_51+1)
  3300  0015E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3301  0015EA  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3302                           
  3303                           ;main.c: 81: error_t err;
  3304                           ;main.c: 82: err = ethernetController_init();
  3305  0015EE  ECB7  F01F         	call	_ethernetController_init	;wreg free
  3306  0015F2  C07A  F37F         	movff	?_ethernetController_init,main@err
  3307  0015F6  C07B  F380         	movff	?_ethernetController_init+1,main@err+1
  3308  0015FA  C07C  F381         	movff	?_ethernetController_init+2,main@err+2
  3309                           
  3310                           ;main.c: 83: if (err.code != (uint16_t)0)
  3311  0015FE  0103               	movlb	3	; () banked
  3312  001600  5180               	movf	(main@err+1)& (0+255),w,b
  3313  001602  1181               	iorwf	(main@err+2)& (0+255),w,b
  3314  001604  B4D8               	btfsc	status,2,c
  3315  001606  D008               	goto	l623
  3316                           
  3317                           ; BSR set to: 3
  3318                           ;main.c: 84: printErrorMessage(err);
  3319  001608  C37F  F09A         	movff	main@err,printErrorMessage@err
  3320  00160C  C380  F09B         	movff	main@err+1,printErrorMessage@err+1
  3321  001610  C381  F09C         	movff	main@err+2,printErrorMessage@err+2
  3322  001614  ECF2  F014         	call	_printErrorMessage	;wreg free
  3323  001618                     l623:
  3324                           
  3325                           ;main.c: 85: err = ethernetController_checkDeviceId();
  3326  001618  ECAB  F022         	call	_ethernetController_checkDeviceId	;wreg free
  3327  00161C  C06E  F37F         	movff	?_ethernetController_checkDeviceId,main@err
  3328  001620  C06F  F380         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  3329  001624  C070  F381         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  3330                           
  3331                           ;main.c: 86: if (err.code == (uint16_t)0) {
  3332  001628  0103               	movlb	3	; () banked
  3333  00162A  5180               	movf	(main@err+1)& (0+255),w,b
  3334  00162C  1181               	iorwf	(main@err+2)& (0+255),w,b
  3335  00162E  A4D8               	btfss	status,2,c
  3336  001630  D00F               	goto	l624
  3337                           
  3338                           ; BSR set to: 3
  3339                           ;main.c: 87: UARTTransmitText(ethernetController_getDeviceName());
  3340  001632  EC92  F025         	call	_ethernetController_getDeviceName	;wreg free
  3341  001636  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  3342  00163A  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  3343  00163E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3344                           
  3345                           ;main.c: 88: UARTTransmitText(" detected. ");
  3346  001642  0E56               	movlw	low STR_30
  3347  001644  0100               	movlb	0	; () banked
  3348  001646  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3349  001648  0E7F               	movlw	high STR_30
  3350  00164A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3351  00164C  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3352  001650                     l624:
  3353                           
  3354                           ;main.c: 89: }
  3355                           ;main.c: 90: UARTTransmitText("Source MAC address is ");
  3356  001650  0E3E               	movlw	low STR_31
  3357  001652  0100               	movlb	0	; () banked
  3358  001654  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3359  001656  0E7E               	movlw	high STR_31
  3360  001658  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3361  00165A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3362                           
  3363                           ;main.c: 91: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  3364  00165E  EC7D  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3365  001662  CFE9 FFD9          	movff	fsr0l,fsr2l
  3366  001666  CFEA FFDA          	movff	fsr0h,fsr2h
  3367  00166A  EE00  F07A         	lfsr	0,macToString@addr
  3368  00166E  0E05               	movlw	5
  3369  001670                     u11681:
  3370  001670  CFDB FFEB          	movff	plusw2,plusw0
  3371  001674  06E8               	decf	wreg,f,c
  3372  001676  E2FC               	bc	u11681
  3373  001678  EC2E  F017         	call	_macToString	;wreg free
  3374  00167C  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  3375  001680  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  3376  001684  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3377                           
  3378                           ;main.c: 92: UARTTransmitText(".\n\r");
  3379  001688  0EDC               	movlw	low (STR_51+1)
  3380  00168A  0100               	movlb	0	; () banked
  3381  00168C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3382  00168E  0E7F               	movlw	high (STR_51+1)
  3383  001690  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3384  001692  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3385                           
  3386                           ;main.c: 93: UARTTransmitText("------------------------------------------------\n\r");
  3387  001696  0E66               	movlw	low STR_22
  3388  001698  0100               	movlb	0	; () banked
  3389  00169A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3390  00169C  0E7B               	movlw	high STR_22
  3391  00169E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3392  0016A0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  3393                           
  3394                           ;main.c: 95: stack_init();
  3395  0016A4  EC5B  F026         	call	_stack_init	;wreg free
  3396                           
  3397                           ;main.c: 97: ethernetController_setLEDConfig(LEDA, LED_ON);
  3398  0016A8  0E00               	movlw	0
  3399  0016AA  0100               	movlb	0	; () banked
  3400  0016AC  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3401  0016AE  0E00               	movlw	0
  3402  0016B0  ECF8  F01C         	call	_ethernetController_setLEDConfig
  3403                           
  3404                           ;main.c: 98: ethernetController_setLEDConfig(LEDA, LED_ON);
  3405  0016B4  0E00               	movlw	0
  3406  0016B6  0100               	movlb	0	; () banked
  3407  0016B8  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3408  0016BA  0E00               	movlw	0
  3409  0016BC  ECF8  F01C         	call	_ethernetController_setLEDConfig
  3410                           
  3411                           ;main.c: 99: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  3412  0016C0  0E15               	movlw	21
  3413  0016C2  0101               	movlb	1	; () banked
  3414  0016C4  6F8A               	movwf	(??_main+1)& (0+255),b
  3415  0016C6  0E4B               	movlw	75
  3416  0016C8  6F89               	movwf	??_main& (0+255),b
  3417  0016CA  0EBE               	movlw	190
  3418  0016CC                     u11777:
  3419  0016CC  2EE8               	decfsz	wreg,f,c
  3420  0016CE  D7FE               	bra	u11777
  3421  0016D0  2F89               	decfsz	??_main& (0+255),f,b
  3422  0016D2  D7FC               	bra	u11777
  3423  0016D4  2F8A               	decfsz	(??_main+1)& (0+255),f,b
  3424  0016D6  D7FA               	bra	u11777
  3425  0016D8  F000               	nop	
  3426                           
  3427                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3428  0016DA  0E01               	movlw	1
  3429  0016DC  0100               	movlb	0	; () banked
  3430  0016DE  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3431  0016E0  0E00               	movlw	0
  3432  0016E2  ECF8  F01C         	call	_ethernetController_setLEDConfig
  3433                           
  3434                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3435  0016E6  0E01               	movlw	1
  3436  0016E8  0100               	movlb	0	; () banked
  3437  0016EA  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3438  0016EC  0E00               	movlw	0
  3439  0016EE  ECF8  F01C         	call	_ethernetController_setLEDConfig
  3440                           
  3441                           ;main.c: 105: uint32_t prescaler = 0;
  3442  0016F2  0E00               	movlw	0
  3443  0016F4  0103               	movlb	3	; () banked
  3444  0016F6  6F79               	movwf	main@prescaler& (0+255),b
  3445  0016F8  0E00               	movlw	0
  3446  0016FA  6F7A               	movwf	(main@prescaler+1)& (0+255),b
  3447  0016FC  0E00               	movlw	0
  3448  0016FE  6F7B               	movwf	(main@prescaler+2)& (0+255),b
  3449  001700  0E00               	movlw	0
  3450  001702  6F7C               	movwf	(main@prescaler+3)& (0+255),b
  3451                           
  3452                           ; BSR set to: 3
  3453                           ;main.c: 107: ANSELB &= ~(1<<5);
  3454  001704  010F               	movlb	15	; () banked
  3455  001706  9B5C               	bcf	92,5,b	;volatile
  3456                           
  3457                           ; BSR set to: 15
  3458                           ;main.c: 108: TRISB |= (1<<5);
  3459  001708  8A93               	bsf	3987,5,c	;volatile
  3460                           
  3461                           ; BSR set to: 15
  3462                           ;main.c: 110: uint8_t oldState;
  3463                           ;main.c: 112: ipv4_address_t ipSrc;
  3464                           ;main.c: 113: ipSrc.address[0] = 192;
  3465  00170A  0EC0               	movlw	192
  3466  00170C  0103               	movlb	3	; () banked
  3467  00170E  6F86               	movwf	main@ipSrc& (0+255),b
  3468                           
  3469                           ; BSR set to: 3
  3470                           ;main.c: 114: ipSrc.address[1] = 168;
  3471  001710  0EA8               	movlw	168
  3472  001712  6F87               	movwf	(main@ipSrc+1)& (0+255),b
  3473                           
  3474                           ; BSR set to: 3
  3475                           ;main.c: 115: ipSrc.address[2] = 0;
  3476  001714  0E00               	movlw	0
  3477  001716  6F88               	movwf	(main@ipSrc+2)& (0+255),b
  3478                           
  3479                           ; BSR set to: 3
  3480                           ;main.c: 116: ipSrc.address[3] = 1;
  3481  001718  0E01               	movlw	1
  3482  00171A  6F89               	movwf	(main@ipSrc+3)& (0+255),b
  3483                           
  3484                           ; BSR set to: 3
  3485                           ;main.c: 118: ipv4_address_t ipDst;
  3486                           ;main.c: 119: ipDst.address[0] = 192;
  3487  00171C  0EC0               	movlw	192
  3488  00171E  6F82               	movwf	main@ipDst& (0+255),b
  3489                           
  3490                           ; BSR set to: 3
  3491                           ;main.c: 120: ipDst.address[1] = 168;
  3492  001720  0EA8               	movlw	168
  3493  001722  6F83               	movwf	(main@ipDst+1)& (0+255),b
  3494                           
  3495                           ; BSR set to: 3
  3496                           ;main.c: 121: ipDst.address[2] = 0;
  3497  001724  0E00               	movlw	0
  3498  001726  6F84               	movwf	(main@ipDst+2)& (0+255),b
  3499                           
  3500                           ; BSR set to: 3
  3501                           ;main.c: 122: ipDst.address[3] = 4;
  3502  001728  0E04               	movlw	4
  3503  00172A  6F85               	movwf	(main@ipDst+3)& (0+255),b
  3504                           
  3505                           ; BSR set to: 3
  3506                           ;main.c: 125: INTCONbits.GIE = 1;
  3507  00172C  8EF2               	bsf	intcon,7,c	;volatile
  3508                           
  3509                           ; BSR set to: 3
  3510                           ;main.c: 126: INTCONbits.PEIE = 1;
  3511  00172E  8CF2               	bsf	intcon,6,c	;volatile
  3512                           
  3513                           ; BSR set to: 3
  3514                           ;main.c: 130: srand(ethernetController_getMacAddress().address[5]);
  3515  001730  EC7D  F01F         	call	_ethernetController_getMacAddress	;wreg free
  3516  001734  0E05               	movlw	5
  3517  001736  26E9               	addwf	fsr0l,f,c
  3518  001738  0E00               	movlw	0
  3519  00173A  22EA               	addwfc	fsr0h,f,c
  3520  00173C  50EF               	movf	indf0,w,c
  3521  00173E  0101               	movlb	1	; () banked
  3522  001740  6F89               	movwf	??_main& (0+255),b
  3523  001742  5189               	movf	??_main& (0+255),w,b
  3524  001744  0100               	movlb	0	; () banked
  3525  001746  6F7A               	movwf	srand@x& (0+255),b
  3526  001748  6B7B               	clrf	(srand@x+1)& (0+255),b
  3527  00174A  EC3F  F026         	call	_srand	;wreg free
  3528  00174E                     l625:
  3529  00174E  0004               	clrwdt		;# 
  3530                           
  3531                           ;main.c: 136: handleStackBackgroundTasks(&stack);
  3532  001750  0E00               	movlw	low _stack
  3533  001752  0101               	movlb	1	; () banked
  3534  001754  6F86               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3535  001756  0E03               	movlw	high _stack
  3536  001758  6F87               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3537  00175A  EC16  F01A         	call	_handleStackBackgroundTasks	;wreg free
  3538                           
  3539                           ;main.c: 138: printEthernetState(stack.ethernet);
  3540  00175E  EE23  F000         	lfsr	2,_stack	;volatile
  3541  001762  EE00  F09A         	lfsr	0,printEthernetState@state
  3542  001766  0E0E               	movlw	14
  3543  001768                     u11691:
  3544  001768  CFDB FFEB          	movff	plusw2,plusw0
  3545  00176C  06E8               	decf	wreg,f,c
  3546  00176E  E2FC               	bc	u11691
  3547  001770  ECA7  F01C         	call	_printEthernetState	;wreg free
  3548                           
  3549                           ;main.c: 139: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3550  001774  0103               	movlb	3	; () banked
  3551  001776  5100               	movf	_stack& (0+255),w,b	;volatile
  3552  001778  B4D8               	btfsc	status,2,c
  3553  00177A  D009               	goto	l627
  3554                           
  3555                           ; BSR set to: 3
  3556  00177C  EC71  F026         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3557  001780  0101               	movlb	1	; () banked
  3558  001782  6F89               	movwf	??_main& (0+255),b
  3559  001784  5189               	movf	??_main& (0+255),w,b
  3560  001786  0103               	movlb	3	; () banked
  3561  001788  6F7D               	movwf	_main$2369& (0+255),b
  3562  00178A  6B7E               	clrf	(_main$2369+1)& (0+255),b
  3563  00178C  D004               	goto	l629
  3564  00178E                     l627:
  3565                           
  3566                           ; BSR set to: 3
  3567                           
  3568                           ; BSR set to: 3
  3569  00178E  0E03               	movlw	3
  3570  001790  6F7E               	movwf	(_main$2369+1)& (0+255),b
  3571  001792  0EE8               	movlw	232
  3572  001794  6F7D               	movwf	_main$2369& (0+255),b
  3573  001796                     l629:
  3574                           
  3575                           ; BSR set to: 3
  3576                           
  3577                           ; BSR set to: 3
  3578  001796  C37D  F031         	movff	_main$2369,_numberToDisplay	;volatile
  3579  00179A  C37E  F032         	movff	_main$2369+1,_numberToDisplay+1	;volatile
  3580  00179E  0E00               	movlw	0
  3581  0017A0  BE32               	btfsc	_numberToDisplay+1,7,c	;volatile
  3582  0017A2  0EFF               	movlw	-1
  3583  0017A4  6E33               	movwf	_numberToDisplay+2,c	;volatile
  3584  0017A6  6E34               	movwf	_numberToDisplay+3,c	;volatile
  3585                           
  3586                           ; BSR set to: 3
  3587                           ;main.c: 141: if (buttonState) {
  3588  0017A8  0101               	movlb	1	; () banked
  3589  0017AA  51F0               	movf	_buttonState& (0+255),w,b	;volatile
  3590  0017AC  B4D8               	btfsc	status,2,c
  3591  0017AE  D7CF               	goto	l625
  3592                           
  3593                           ; BSR set to: 1
  3594                           ;main.c: 142: buttonState = 0;
  3595  0017B0  0E00               	movlw	0
  3596  0017B2  6FF0               	movwf	_buttonState& (0+255),b	;volatile
  3597                           
  3598                           ; BSR set to: 1
  3599                           ;main.c: 144: ipv4_setIPSourceAddress(ipSrc);
  3600  0017B4  C386  F09A         	movff	main@ipSrc,ipv4_setIPSourceAddress@ip
  3601  0017B8  C387  F09B         	movff	main@ipSrc+1,ipv4_setIPSourceAddress@ip+1
  3602  0017BC  C388  F09C         	movff	main@ipSrc+2,ipv4_setIPSourceAddress@ip+2
  3603  0017C0  C389  F09D         	movff	main@ipSrc+3,ipv4_setIPSourceAddress@ip+3
  3604  0017C4  EC5C  F022         	call	_ipv4_setIPSourceAddress	;wreg free
  3605                           
  3606                           ;main.c: 145: ipSrc.address[3]++;
  3607  0017C8  0103               	movlb	3	; () banked
  3608  0017CA  2B89               	incf	(main@ipSrc+3)& (0+255),f,b
  3609                           
  3610                           ; BSR set to: 3
  3611                           
  3612                           ; BSR set to: 3
  3613  0017CC  D7C0               	goto	l625
  3614  0017CE                     __end_of_main:
  3615                           	opt stack 0
  3616                           tblptru	equ	0xFF8
  3617                           tblptrh	equ	0xFF7
  3618                           tblptrl	equ	0xFF6
  3619                           tablat	equ	0xFF5
  3620                           intcon	equ	0xFF2
  3621                           intcon3	equ	0xFF0
  3622                           indf0	equ	0xFEF
  3623                           postinc0	equ	0xFEE
  3624                           plusw0	equ	0xFEB
  3625                           fsr0h	equ	0xFEA
  3626                           fsr0l	equ	0xFE9
  3627                           wreg	equ	0xFE8
  3628                           postdec1	equ	0xFE5
  3629                           fsr1l	equ	0xFE1
  3630                           plusw2	equ	0xFDB
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8
  3634                           
  3635 ;; *************** function _stack_init *****************
  3636 ;; Defined at:
  3637 ;;		line 27 in file "src/stack/stack.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;		None
  3640 ;; Auto vars:     Size  Location     Type
  3641 ;;		None
  3642 ;; Return value:  Size  Location     Type
  3643 ;;                  3  528[None  ] struct error
  3644 ;; Registers used:
  3645 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3646 ;; Tracked objects:
  3647 ;;		On entry : 0/0
  3648 ;;		On exit  : 0/0
  3649 ;;		Unchanged: 0/0
  3650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3651 ;;      Params:         0       0       0       0       0       0       0       0       0
  3652 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3653 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3654 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3655 ;;Total ram usage:        0 bytes
  3656 ;; Hardware stack levels used:    1
  3657 ;; Hardware stack levels required when called:    6
  3658 ;; This function calls:
  3659 ;;		_arp_init
  3660 ;;		_ipv4_init
  3661 ;; This function is called by:
  3662 ;;		_main
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text1
  3667  004CB6                     __ptext1:
  3668                           	opt stack 0
  3669  004CB6                     _stack_init:
  3670                           	opt stack 24
  3671                           
  3672                           ;stack.c: 28: arp_init();
  3673                           
  3674                           ; BSR set to: 3
  3675                           ;incstack = 0
  3676  004CB6  ECC9  F020         	call	_arp_init	;wreg free
  3677                           
  3678                           ;stack.c: 29: ipv4_init();
  3679  004CBA  EC74  F026         	call	_ipv4_init	;wreg free
  3680  004CBE  0012               	return		;funcret
  3681  004CC0                     __end_of_stack_init:
  3682                           	opt stack 0
  3683                           tblptru	equ	0xFF8
  3684                           tblptrh	equ	0xFF7
  3685                           tblptrl	equ	0xFF6
  3686                           tablat	equ	0xFF5
  3687                           intcon	equ	0xFF2
  3688                           intcon3	equ	0xFF0
  3689                           indf0	equ	0xFEF
  3690                           postinc0	equ	0xFEE
  3691                           plusw0	equ	0xFEB
  3692                           fsr0h	equ	0xFEA
  3693                           fsr0l	equ	0xFE9
  3694                           wreg	equ	0xFE8
  3695                           postdec1	equ	0xFE5
  3696                           fsr1l	equ	0xFE1
  3697                           plusw2	equ	0xFDB
  3698                           fsr2h	equ	0xFDA
  3699                           fsr2l	equ	0xFD9
  3700                           status	equ	0xFD8
  3701                           
  3702 ;; *************** function _ipv4_init *****************
  3703 ;; Defined at:
  3704 ;;		line 321 in file "src/stack/protocols/ipv4.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;		None
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  1    wreg      void 
  3711 ;; Registers used:
  3712 ;;		None
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3718 ;;      Params:         0       0       0       0       0       0       0       0       0
  3719 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3720 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3721 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3722 ;;Total ram usage:        0 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:    4
  3725 ;; This function calls:
  3726 ;;		Nothing
  3727 ;; This function is called by:
  3728 ;;		_stack_init
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text2
  3733  004CE8                     __ptext2:
  3734                           	opt stack 0
  3735  004CE8                     _ipv4_init:
  3736                           	opt stack 25
  3737                           
  3738                           ;ipv4.c: 322: fSrcAddrChanged = 0;
  3739                           
  3740                           ;incstack = 0
  3741  004CE8  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  3742  004CEA  0012               	return		;funcret
  3743  004CEC                     __end_of_ipv4_init:
  3744                           	opt stack 0
  3745                           tblptru	equ	0xFF8
  3746                           tblptrh	equ	0xFF7
  3747                           tblptrl	equ	0xFF6
  3748                           tablat	equ	0xFF5
  3749                           intcon	equ	0xFF2
  3750                           intcon3	equ	0xFF0
  3751                           indf0	equ	0xFEF
  3752                           postinc0	equ	0xFEE
  3753                           plusw0	equ	0xFEB
  3754                           fsr0h	equ	0xFEA
  3755                           fsr0l	equ	0xFE9
  3756                           wreg	equ	0xFE8
  3757                           postdec1	equ	0xFE5
  3758                           fsr1l	equ	0xFE1
  3759                           plusw2	equ	0xFDB
  3760                           fsr2h	equ	0xFDA
  3761                           fsr2l	equ	0xFD9
  3762                           status	equ	0xFD8
  3763                           
  3764 ;; *************** function _arp_init *****************
  3765 ;; Defined at:
  3766 ;;		line 418 in file "src/stack/protocols/arp.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;  i               1   38[BANK0 ] unsigned char 
  3771 ;;  mac             6   28[BANK0 ] struct macaddress
  3772 ;;  ip              4   34[BANK0 ] struct ipv4_address
  3773 ;; Return value:  Size  Location     Type
  3774 ;;                  1    wreg      void 
  3775 ;; Registers used:
  3776 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3777 ;; Tracked objects:
  3778 ;;		On entry : 0/0
  3779 ;;		On exit  : 0/0
  3780 ;;		Unchanged: 0/0
  3781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3782 ;;      Params:         0       0       0       0       0       0       0       0       0
  3783 ;;      Locals:         0      11       0       0       0       0       0       0       0
  3784 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3785 ;;      Totals:         0      11       0       0       0       0       0       0       0
  3786 ;;Total ram usage:       11 bytes
  3787 ;; Hardware stack levels used:    1
  3788 ;; Hardware stack levels required when called:    5
  3789 ;; This function calls:
  3790 ;;		_arp_setNewEntry
  3791 ;;		_ipv4_setToAllZero
  3792 ;;		_mac_setAllZero
  3793 ;; This function is called by:
  3794 ;;		_stack_init
  3795 ;; This function uses a non-reentrant model
  3796 ;;
  3797                           
  3798                           	psect	text3
  3799  004192                     __ptext3:
  3800                           	opt stack 0
  3801  004192                     _arp_init:
  3802                           	opt stack 24
  3803                           
  3804                           ;arp.c: 419: macaddress_t mac;
  3805                           ;arp.c: 420: ipv4_address_t ip;
  3806                           ;arp.c: 421: mac_setAllZero(&mac);
  3807                           
  3808                           ;incstack = 0
  3809  004192  0E7C               	movlw	low arp_init@mac
  3810  004194  0100               	movlb	0	; () banked
  3811  004196  6F60               	movwf	mac_setAllZero@mac& (0+255),b
  3812  004198  0E00               	movlw	high arp_init@mac
  3813  00419A  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
  3814  00419C  EC5A  F025         	call	_mac_setAllZero	;wreg free
  3815                           
  3816                           ;arp.c: 422: ipv4_setToAllZero(&ip);
  3817  0041A0  0E82               	movlw	low arp_init@ip
  3818  0041A2  0100               	movlb	0	; () banked
  3819  0041A4  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  3820  0041A6  0E00               	movlw	high arp_init@ip
  3821  0041A8  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  3822  0041AA  ECC6  F025         	call	_ipv4_setToAllZero	;wreg free
  3823                           
  3824                           ;arp.c: 424: for (uint8_t i = 0; i < 8u; i++)
  3825  0041AE  0E00               	movlw	0
  3826  0041B0  0100               	movlb	0	; () banked
  3827  0041B2  6F86               	movwf	arp_init@i& (0+255),b
  3828  0041B4                     l9629:
  3829                           
  3830                           ; BSR set to: 0
  3831  0041B4  0E07               	movlw	7
  3832  0041B6  6586               	cpfsgt	arp_init@i& (0+255),b
  3833  0041B8  D001               	goto	l1026
  3834  0041BA  0012               	return	
  3835  0041BC                     l1026:
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;arp.c: 425: arp_setNewEntry(mac, ip, 0xffffffff);
  3839                           
  3840                           ; BSR set to: 0
  3841  0041BC  EE20  F07C         	lfsr	2,arp_init@mac
  3842  0041C0  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  3843  0041C4  0E05               	movlw	5
  3844  0041C6                     u11431:
  3845  0041C6  CFDB FFEB          	movff	plusw2,plusw0
  3846  0041CA  06E8               	decf	wreg,f,c
  3847  0041CC  E2FC               	bc	u11431
  3848  0041CE  C082  F06A         	movff	arp_init@ip,arp_setNewEntry@ip
  3849  0041D2  C083  F06B         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
  3850  0041D6  C084  F06C         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
  3851  0041DA  C085  F06D         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
  3852  0041DE  0EFF               	movlw	255
  3853  0041E0  6F6E               	movwf	arp_setNewEntry@timestamp& (0+255),b
  3854  0041E2  0EFF               	movlw	255
  3855  0041E4  6F6F               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
  3856  0041E6  0EFF               	movlw	255
  3857  0041E8  6F70               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
  3858  0041EA  0EFF               	movlw	255
  3859  0041EC  6F71               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
  3860  0041EE  EC2B  F019         	call	_arp_setNewEntry	;wreg free
  3861  0041F2  0100               	movlb	0	; () banked
  3862  0041F4  2B86               	incf	arp_init@i& (0+255),f,b
  3863  0041F6  D7DE               	goto	l9629
  3864  0041F8                     __end_of_arp_init:
  3865                           	opt stack 0
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           intcon	equ	0xFF2
  3871                           intcon3	equ	0xFF0
  3872                           indf0	equ	0xFEF
  3873                           postinc0	equ	0xFEE
  3874                           plusw0	equ	0xFEB
  3875                           fsr0h	equ	0xFEA
  3876                           fsr0l	equ	0xFE9
  3877                           wreg	equ	0xFE8
  3878                           postdec1	equ	0xFE5
  3879                           fsr1l	equ	0xFE1
  3880                           plusw2	equ	0xFDB
  3881                           fsr2h	equ	0xFDA
  3882                           fsr2l	equ	0xFD9
  3883                           status	equ	0xFD8
  3884                           
  3885 ;; *************** function _srand *****************
  3886 ;; Defined at:
  3887 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  3888 ;; Parameters:    Size  Location     Type
  3889 ;;  x               2   26[BANK0 ] unsigned int 
  3890 ;; Auto vars:     Size  Location     Type
  3891 ;;		None
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      void 
  3894 ;; Registers used:
  3895 ;;		status,2
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3901 ;;      Params:         0       2       0       0       0       0       0       0       0
  3902 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3904 ;;      Totals:         0       2       0       0       0       0       0       0       0
  3905 ;;Total ram usage:        2 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    4
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_main
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text4
  3916  004C7E                     __ptext4:
  3917                           	opt stack 0
  3918  004C7E                     _srand:
  3919                           	opt stack 26
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;incstack = 0
  3923  004C7E  C07A  F049         	movff	srand@x,_randx
  3924  004C82  C07B  F04A         	movff	srand@x+1,_randx+1
  3925  004C86  6A4B               	clrf	_randx+2,c
  3926  004C88  6A4C               	clrf	_randx+3,c
  3927  004C8A  0012               	return		;funcret
  3928  004C8C                     __end_of_srand:
  3929                           	opt stack 0
  3930                           tblptru	equ	0xFF8
  3931                           tblptrh	equ	0xFF7
  3932                           tblptrl	equ	0xFF6
  3933                           tablat	equ	0xFF5
  3934                           intcon	equ	0xFF2
  3935                           intcon3	equ	0xFF0
  3936                           indf0	equ	0xFEF
  3937                           postinc0	equ	0xFEE
  3938                           plusw0	equ	0xFEB
  3939                           fsr0h	equ	0xFEA
  3940                           fsr0l	equ	0xFE9
  3941                           wreg	equ	0xFE8
  3942                           postdec1	equ	0xFE5
  3943                           fsr1l	equ	0xFE1
  3944                           plusw2	equ	0xFDB
  3945                           fsr2h	equ	0xFDA
  3946                           fsr2l	equ	0xFD9
  3947                           status	equ	0xFD8
  3948                           
  3949 ;; *************** function _sevenSegmentInit *****************
  3950 ;; Defined at:
  3951 ;;		line 28 in file "src/system/sevenseg.c"
  3952 ;; Parameters:    Size  Location     Type
  3953 ;;		None
  3954 ;; Auto vars:     Size  Location     Type
  3955 ;;		None
  3956 ;; Return value:  Size  Location     Type
  3957 ;;                  1    wreg      void 
  3958 ;; Registers used:
  3959 ;;		wreg, status,2, status,0
  3960 ;; Tracked objects:
  3961 ;;		On entry : 0/0
  3962 ;;		On exit  : 0/0
  3963 ;;		Unchanged: 0/0
  3964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3965 ;;      Params:         0       0       0       0       0       0       0       0       0
  3966 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3967 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3968 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3969 ;;Total ram usage:        0 bytes
  3970 ;; Hardware stack levels used:    1
  3971 ;; Hardware stack levels required when called:    4
  3972 ;; This function calls:
  3973 ;;		Nothing
  3974 ;; This function is called by:
  3975 ;;		_main
  3976 ;; This function uses a non-reentrant model
  3977 ;;
  3978                           
  3979                           	psect	text5
  3980  004BC6                     __ptext5:
  3981                           	opt stack 0
  3982  004BC6                     _sevenSegmentInit:
  3983                           	opt stack 26
  3984                           
  3985                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3986                           
  3987                           ;incstack = 0
  3988  004BC6  0EF8               	movlw	248
  3989  004BC8  1682               	andwf	3970,f,c	;volatile
  3990                           
  3991                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3992  004BCA  0EF8               	movlw	248
  3993  004BCC  1694               	andwf	3988,f,c	;volatile
  3994                           
  3995                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3996  004BCE  0E00               	movlw	0
  3997  004BD0  6E92               	movwf	3986,c	;volatile
  3998                           
  3999                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4000  004BD2  0E00               	movlw	0
  4001  004BD4  010F               	movlb	15	; () banked
  4002  004BD6  6F5B               	movwf	91,b	;volatile
  4003                           
  4004                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4005  004BD8  0EF8               	movlw	248
  4006  004BDA  175D               	andwf	93,f,b	;volatile
  4007                           
  4008                           ; BSR set to: 15
  4009                           ;sevenseg.c: 38: PORTA = 0xff;
  4010  004BDC  6880               	setf	3968,c	;volatile
  4011                           
  4012                           ; BSR set to: 15
  4013  004BDE  0012               	return		;funcret
  4014  004BE0                     __end_of_sevenSegmentInit:
  4015                           	opt stack 0
  4016                           tblptru	equ	0xFF8
  4017                           tblptrh	equ	0xFF7
  4018                           tblptrl	equ	0xFF6
  4019                           tablat	equ	0xFF5
  4020                           intcon	equ	0xFF2
  4021                           intcon3	equ	0xFF0
  4022                           indf0	equ	0xFEF
  4023                           postinc0	equ	0xFEE
  4024                           plusw0	equ	0xFEB
  4025                           fsr0h	equ	0xFEA
  4026                           fsr0l	equ	0xFE9
  4027                           wreg	equ	0xFE8
  4028                           postdec1	equ	0xFE5
  4029                           fsr1l	equ	0xFE1
  4030                           plusw2	equ	0xFDB
  4031                           fsr2h	equ	0xFDA
  4032                           fsr2l	equ	0xFD9
  4033                           status	equ	0xFD8
  4034                           
  4035 ;; *************** function _printEthernetState *****************
  4036 ;; Defined at:
  4037 ;;		line 179 in file "src/system/main.c"
  4038 ;; Parameters:    Size  Location     Type
  4039 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4040 ;; Auto vars:     Size  Location     Type
  4041 ;;		None
  4042 ;; Return value:  Size  Location     Type
  4043 ;;                  1    wreg      void 
  4044 ;; Registers used:
  4045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4046 ;; Tracked objects:
  4047 ;;		On entry : 0/0
  4048 ;;		On exit  : 0/0
  4049 ;;		Unchanged: 0/0
  4050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4051 ;;      Params:         0      15       0       0       0       0       0       0       0
  4052 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4053 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4054 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4055 ;;Total ram usage:       15 bytes
  4056 ;; Hardware stack levels used:    1
  4057 ;; Hardware stack levels required when called:    5
  4058 ;; This function calls:
  4059 ;;		_UARTTransmitText
  4060 ;; This function is called by:
  4061 ;;		_main
  4062 ;; This function uses a non-reentrant model
  4063 ;;
  4064                           
  4065                           	psect	text6
  4066  00394E                     __ptext6:
  4067                           	opt stack 0
  4068  00394E                     _printEthernetState:
  4069                           	opt stack 25
  4070                           
  4071                           ;main.c: 180: static ethernetConnection_t oldState;
  4072                           ;main.c: 181: if (state.link != oldState.link) {
  4073                           
  4074                           ; BSR set to: 15
  4075                           ;incstack = 0
  4076  00394E  0102               	movlb	2	; () banked
  4077  003950  5100               	movf	printEthernetState@oldState& (0+255),w,b
  4078  003952  0100               	movlb	0	; () banked
  4079  003954  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4080  003956  B4D8               	btfsc	status,2,c
  4081  003958  D041               	goto	l648
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;main.c: 182: if (state.link == NO_LINK) {
  4085  00395A  519A               	movf	printEthernetState@state& (0+255),w,b
  4086  00395C  A4D8               	btfss	status,2,c
  4087  00395E  D007               	goto	l639
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;main.c: 183: UARTTransmitText("Link lost.\n\r");
  4091  003960  0E49               	movlw	low STR_34
  4092  003962  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4093  003964  0E7F               	movlw	high STR_34
  4094  003966  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4095  003968  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4096                           
  4097                           ;main.c: 184: } else if (state.link == LINK_ESTABLISHED) {
  4098  00396C  D00A               	goto	l641
  4099  00396E                     l639:
  4100  00396E  0100               	movlb	0	; () banked
  4101  003970  059A               	decf	printEthernetState@state& (0+255),w,b
  4102  003972  A4D8               	btfss	status,2,c
  4103  003974  D006               	goto	l641
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;main.c: 185: UARTTransmitText("Link established. ");
  4107  003976  0EA3               	movlw	low STR_35
  4108  003978  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4109  00397A  0E7E               	movlw	high STR_35
  4110  00397C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4111  00397E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4112  003982                     l641:
  4113                           
  4114                           ;main.c: 186: }
  4115                           ;main.c: 188: if (state.link == LINK_ESTABLISHED) {
  4116  003982  0100               	movlb	0	; () banked
  4117  003984  059A               	decf	printEthernetState@state& (0+255),w,b
  4118  003986  A4D8               	btfss	status,2,c
  4119  003988  D029               	goto	l648
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;main.c: 189: if (state.speed == TEN_MBIT) {
  4123  00398A  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  4124  00398C  A4D8               	btfss	status,2,c
  4125  00398E  D007               	goto	l643
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;main.c: 190: UARTTransmitText("Speed is 10 Mbps, ");
  4129  003990  0E90               	movlw	low STR_36
  4130  003992  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4131  003994  0E7E               	movlw	high STR_36
  4132  003996  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4133  003998  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4134                           
  4135                           ;main.c: 191: } else if (state.speed == HUNDRED_MBIT) {
  4136  00399C  D00A               	goto	l645
  4137  00399E                     l643:
  4138  00399E  0100               	movlb	0	; () banked
  4139  0039A0  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  4140  0039A2  A4D8               	btfss	status,2,c
  4141  0039A4  D006               	goto	l645
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;main.c: 192: UARTTransmitText("Speed is 100 Mbps, ");
  4145  0039A6  0E55               	movlw	low STR_37
  4146  0039A8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4147  0039AA  0E7E               	movlw	high STR_37
  4148  0039AC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4149  0039AE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4150  0039B2                     l645:
  4151                           
  4152                           ;main.c: 193: }
  4153                           ;main.c: 194: if (state.duplex == HALF_DUPLEX) {
  4154  0039B2  0100               	movlb	0	; () banked
  4155  0039B4  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  4156  0039B6  A4D8               	btfss	status,2,c
  4157  0039B8  D007               	goto	l646
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;main.c: 195: UARTTransmitText("connection is Half Duplex.\n\r");
  4161  0039BA  0EBD               	movlw	low STR_38
  4162  0039BC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4163  0039BE  0E7D               	movlw	high STR_38
  4164  0039C0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4165  0039C2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4166                           
  4167                           ;main.c: 196: } else if (state.duplex == FULL_DUPLEX) {
  4168  0039C6  D00A               	goto	l648
  4169  0039C8                     l646:
  4170  0039C8  0100               	movlb	0	; () banked
  4171  0039CA  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  4172  0039CC  A4D8               	btfss	status,2,c
  4173  0039CE  D006               	goto	l648
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;main.c: 198: UARTTransmitText("connection is Full Duplex.\n\r");
  4177  0039D0  0EDA               	movlw	low STR_39
  4178  0039D2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4179  0039D4  0E7D               	movlw	high STR_39
  4180  0039D6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4181  0039D8  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4182  0039DC                     l648:
  4183                           
  4184                           ;main.c: 199: }
  4185                           ;main.c: 200: }
  4186                           ;main.c: 201: }
  4187                           ;main.c: 202: oldState = state;
  4188  0039DC  EE20  F09A         	lfsr	2,printEthernetState@state
  4189  0039E0  EE12  F000         	lfsr	1,printEthernetState@oldState
  4190  0039E4  0E0E               	movlw	14
  4191  0039E6                     u11581:
  4192  0039E6  CFDB FFE3          	movff	plusw2,plusw1
  4193  0039EA  06E8               	decf	wreg,f,c
  4194  0039EC  E2FC               	bc	u11581
  4195  0039EE  0012               	return		;funcret
  4196  0039F0                     __end_of_printEthernetState:
  4197                           	opt stack 0
  4198                           tblptru	equ	0xFF8
  4199                           tblptrh	equ	0xFF7
  4200                           tblptrl	equ	0xFF6
  4201                           tablat	equ	0xFF5
  4202                           intcon	equ	0xFF2
  4203                           intcon3	equ	0xFF0
  4204                           indf0	equ	0xFEF
  4205                           postinc0	equ	0xFEE
  4206                           plusw0	equ	0xFEB
  4207                           fsr0h	equ	0xFEA
  4208                           fsr0l	equ	0xFE9
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           plusw1	equ	0xFE3
  4212                           fsr1l	equ	0xFE1
  4213                           plusw2	equ	0xFDB
  4214                           fsr2h	equ	0xFDA
  4215                           fsr2l	equ	0xFD9
  4216                           status	equ	0xFD8
  4217                           
  4218 ;; *************** function _printErrorMessage *****************
  4219 ;; Defined at:
  4220 ;;		line 205 in file "src/system/main.c"
  4221 ;; Parameters:    Size  Location     Type
  4222 ;;  err             3   58[BANK0 ] struct error
  4223 ;; Auto vars:     Size  Location     Type
  4224 ;;		None
  4225 ;; Return value:  Size  Location     Type
  4226 ;;                  1    wreg      void 
  4227 ;; Registers used:
  4228 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4229 ;; Tracked objects:
  4230 ;;		On entry : 0/0
  4231 ;;		On exit  : 0/0
  4232 ;;		Unchanged: 0/0
  4233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4234 ;;      Params:         0       3       0       0       0       0       0       0       0
  4235 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4236 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4237 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4238 ;;Total ram usage:        5 bytes
  4239 ;; Hardware stack levels used:    1
  4240 ;; Hardware stack levels required when called:    8
  4241 ;; This function calls:
  4242 ;;		_UARTTransmitText
  4243 ;;		_intToString
  4244 ;; This function is called by:
  4245 ;;		_main
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248                           
  4249                           	psect	text7
  4250  0029E4                     __ptext7:
  4251                           	opt stack 0
  4252  0029E4                     _printErrorMessage:
  4253                           	opt stack 22
  4254                           
  4255                           ;main.c: 206: UARTTransmitText("[ERROR]");
  4256                           
  4257                           ;incstack = 0
  4258  0029E4  0EAB               	movlw	low STR_40
  4259  0029E6  0100               	movlb	0	; () banked
  4260  0029E8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4261  0029EA  0E7F               	movlw	high STR_40
  4262  0029EC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4263  0029EE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4264                           
  4265                           ;main.c: 207: switch (err.module) {
  4266  0029F2  D028               	goto	l652
  4267  0029F4                     
  4268                           ;main.c: 209: UARTTransmitText(" MEMORY MODULE: ");
  4269  0029F4  0EEC               	movlw	low STR_41
  4270  0029F6  0100               	movlb	0	; () banked
  4271  0029F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4272  0029FA  0E7E               	movlw	high STR_41
  4273  0029FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4274  0029FE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4275                           
  4276                           ;main.c: 210: break;
  4277  002A02  D050               	goto	l660
  4278  002A04                     
  4279                           ;main.c: 212: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  4280  002A04  0E81               	movlw	low STR_42
  4281  002A06  0100               	movlb	0	; () banked
  4282  002A08  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4283  002A0A  0E7D               	movlw	high STR_42
  4284  002A0C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4285  002A0E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4286                           
  4287                           ;main.c: 213: break;
  4288  002A12  D048               	goto	l660
  4289  002A14                     
  4290                           ;main.c: 215: UARTTransmitText(" ETHERNET MODULE: ");
  4291  002A14  0EB6               	movlw	low STR_43
  4292  002A16  0100               	movlb	0	; () banked
  4293  002A18  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4294  002A1A  0E7E               	movlw	high STR_43
  4295  002A1C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4296  002A1E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4297                           
  4298                           ;main.c: 216: break;
  4299  002A22  D040               	goto	l660
  4300  002A24                     
  4301                           ;main.c: 218: UARTTransmitText(" ARP MODULE: ");
  4302  002A24  0E3B               	movlw	low STR_44
  4303  002A26  0100               	movlb	0	; () banked
  4304  002A28  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4305  002A2A  0E7F               	movlw	high STR_44
  4306  002A2C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4307  002A2E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4308                           
  4309                           ;main.c: 219: break;
  4310  002A32  D038               	goto	l660
  4311  002A34                     
  4312                           ;main.c: 221: UARTTransmitText(" IPv4 MODULE: ");
  4313  002A34  0E2C               	movlw	low STR_45
  4314  002A36  0100               	movlb	0	; () banked
  4315  002A38  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4316  002A3A  0E7F               	movlw	high STR_45
  4317  002A3C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4318  002A3E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4319                           
  4320                           ;main.c: 224: }
  4321                           
  4322                           ;main.c: 223: break;
  4323                           
  4324                           ;main.c: 222: default:
  4325  002A42  D030               	goto	l660
  4326  002A44                     l652:
  4327  002A44  0100               	movlb	0	; () banked
  4328  002A46  519A               	movf	printErrorMessage@err& (0+255),w,b
  4329                           
  4330                           ; Switch size 1, requested type "space"
  4331                           ; Number of cases is 5, Range of values is 0 to 4
  4332                           ; switch strategies available:
  4333                           ; Name         Instructions Cycles
  4334                           ; simple_byte           16     9 (average)
  4335                           ;	Chosen strategy is simple_byte
  4336  002A48  0A00               	xorlw	0	; case 0
  4337  002A4A  B4D8               	btfsc	status,2,c
  4338  002A4C  D7D3               	goto	l653
  4339  002A4E  0A01               	xorlw	1	; case 1
  4340  002A50  B4D8               	btfsc	status,2,c
  4341  002A52  D7D8               	goto	l655
  4342  002A54  0A03               	xorlw	3	; case 2
  4343  002A56  B4D8               	btfsc	status,2,c
  4344  002A58  D7DD               	goto	l656
  4345  002A5A  0A01               	xorlw	1	; case 3
  4346  002A5C  B4D8               	btfsc	status,2,c
  4347  002A5E  D7E2               	goto	l657
  4348  002A60  0A07               	xorlw	7	; case 4
  4349  002A62  B4D8               	btfsc	status,2,c
  4350  002A64  D7E7               	goto	l658
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;main.c: 225: switch (err.code) {
  4354  002A66  D01E               	goto	l660
  4355  002A68                     
  4356                           ; BSR set to: 0
  4357                           ;main.c: 227: UARTTransmitText("Ethernet controller is unresponsive.");
  4358                           
  4359                           ; BSR set to: 0
  4360  002A68  0E95               	movlw	low STR_46
  4361  002A6A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4362  002A6C  0E7C               	movlw	high STR_46
  4363  002A6E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4364  002A70  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4365                           
  4366                           ;main.c: 228: break;
  4367  002A74  D030               	goto	l662
  4368  002A76                     
  4369                           ;main.c: 230: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  4370  002A76  0E2F               	movlw	low STR_47
  4371  002A78  0100               	movlb	0	; () banked
  4372  002A7A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4373  002A7C  0E7B               	movlw	high STR_47
  4374  002A7E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4375  002A80  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4376                           
  4377                           ;main.c: 231: break;
  4378  002A84  D028               	goto	l662
  4379  002A86                     
  4380                           ;main.c: 233: UARTTransmitText("IP address could not be resolved.");
  4381  002A86  0E01               	movlw	low STR_48
  4382  002A88  0100               	movlb	0	; () banked
  4383  002A8A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4384  002A8C  0E7D               	movlw	high STR_48
  4385  002A8E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4386  002A90  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4387  002A94                     
  4388                           ;main.c: 236: UARTTransmitText("An unknown error has occured.");
  4389                           
  4390                           ;main.c: 235: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  4391  002A94  0E9F               	movlw	low STR_49
  4392  002A96  0100               	movlb	0	; () banked
  4393  002A98  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4394  002A9A  0E7D               	movlw	high STR_49
  4395  002A9C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4396  002A9E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4397                           
  4398                           ;main.c: 238: }
  4399                           
  4400                           ;main.c: 237: break;
  4401  002AA2  D019               	goto	l662
  4402  002AA4                     l660:
  4403  002AA4  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  4404  002AA8  CFDE F09D          	movff	postinc2,??_printErrorMessage
  4405  002AAC  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  4406                           
  4407                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4408                           ; Switch size 1, requested type "space"
  4409                           ; Number of cases is 1, Range of values is 1 to 1
  4410                           ; switch strategies available:
  4411                           ; Name         Instructions Cycles
  4412                           ; simple_byte            4     3 (average)
  4413                           ;	Chosen strategy is simple_byte
  4414  002AB0  0100               	movlb	0	; () banked
  4415  002AB2  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  4416  002AB4  0A01               	xorlw	1	; case 1
  4417  002AB6  A4D8               	btfss	status,2,c
  4418  002AB8  D7ED               	goto	l665
  4419                           
  4420                           ; BSR set to: 0
  4421                           ; Switch size 1, requested type "space"
  4422                           ; Number of cases is 4, Range of values is 45 to 146
  4423                           ; switch strategies available:
  4424                           ; Name         Instructions Cycles
  4425                           ; simple_byte           13     7 (average)
  4426                           ;	Chosen strategy is simple_byte
  4427  002ABA  519D               	movf	??_printErrorMessage& (0+255),w,b
  4428  002ABC  0A2D               	xorlw	45	; case 45
  4429  002ABE  B4D8               	btfsc	status,2,c
  4430  002AC0  D7DA               	goto	l663
  4431  002AC2  0A03               	xorlw	3	; case 46
  4432  002AC4  B4D8               	btfsc	status,2,c
  4433  002AC6  D7D0               	goto	l661
  4434  002AC8  0AA1               	xorlw	161	; case 143
  4435  002ACA  B4D8               	btfsc	status,2,c
  4436  002ACC  D7E3               	goto	l665
  4437  002ACE  0A1D               	xorlw	29	; case 146
  4438  002AD0  B4D8               	btfsc	status,2,c
  4439  002AD2  D7D9               	goto	l664
  4440  002AD4  D7DF               	goto	l665
  4441  002AD6                     l662:
  4442                           
  4443                           ;main.c: 240: UARTTransmitText(" (Code: ");
  4444                           
  4445                           ; BSR set to: 0
  4446  002AD6  0E99               	movlw	low STR_50
  4447  002AD8  0100               	movlb	0	; () banked
  4448  002ADA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4449  002ADC  0E7F               	movlw	high STR_50
  4450  002ADE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4451  002AE0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4452                           
  4453                           ;main.c: 241: UARTTransmitText(intToString(err.code));
  4454  002AE4  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  4455  002AE8  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  4456  002AEC  0100               	movlb	0	; () banked
  4457  002AEE  6B86               	clrf	(intToString@val+2)& (0+255),b
  4458  002AF0  6B87               	clrf	(intToString@val+3)& (0+255),b
  4459  002AF2  EC6A  F024         	call	_intToString	;wreg free
  4460  002AF6  C084  F098         	movff	?_intToString,UARTTransmitText@str
  4461  002AFA  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  4462  002AFE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4463                           
  4464                           ;main.c: 242: UARTTransmitText(").\n\r");
  4465  002B02  0EDB               	movlw	low STR_51
  4466  002B04  0100               	movlb	0	; () banked
  4467  002B06  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4468  002B08  0E7F               	movlw	high STR_51
  4469  002B0A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4470  002B0C  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4471  002B10  0012               	return		;funcret
  4472  002B12                     __end_of_printErrorMessage:
  4473                           	opt stack 0
  4474                           tblptru	equ	0xFF8
  4475                           tblptrh	equ	0xFF7
  4476                           tblptrl	equ	0xFF6
  4477                           tablat	equ	0xFF5
  4478                           intcon	equ	0xFF2
  4479                           intcon3	equ	0xFF0
  4480                           indf0	equ	0xFEF
  4481                           postinc0	equ	0xFEE
  4482                           plusw0	equ	0xFEB
  4483                           fsr0h	equ	0xFEA
  4484                           fsr0l	equ	0xFE9
  4485                           wreg	equ	0xFE8
  4486                           postdec1	equ	0xFE5
  4487                           plusw1	equ	0xFE3
  4488                           fsr1l	equ	0xFE1
  4489                           postinc2	equ	0xFDE
  4490                           postdec2	equ	0xFDD
  4491                           plusw2	equ	0xFDB
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _ipv4_setIPSourceAddress *****************
  4497 ;; Defined at:
  4498 ;;		line 239 in file "src/stack/protocols/ipv4.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;  ip              4   58[BANK0 ] struct ipv4_address
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;                  1    wreg      void 
  4505 ;; Registers used:
  4506 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4512 ;;      Params:         0       4       0       0       0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4515 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4516 ;;Total ram usage:        4 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; Hardware stack levels required when called:    6
  4519 ;; This function calls:
  4520 ;;		_UARTTransmitText
  4521 ;;		_ipAdressToString
  4522 ;; This function is called by:
  4523 ;;		_main
  4524 ;; This function uses a non-reentrant model
  4525 ;;
  4526                           
  4527                           	psect	text8
  4528  0044B8                     __ptext8:
  4529                           	opt stack 0
  4530  0044B8                     _ipv4_setIPSourceAddress:
  4531                           	opt stack 24
  4532                           
  4533                           ;ipv4.c: 240: UARTTransmitText("IPv4: Request for new IP source address (");
  4534                           
  4535                           ;incstack = 0
  4536  0044B8  0EF7               	movlw	low STR_86
  4537  0044BA  0100               	movlb	0	; () banked
  4538  0044BC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4539  0044BE  0E7B               	movlw	high STR_86
  4540  0044C0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4541  0044C2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4542                           
  4543                           ;ipv4.c: 241: UARTTransmitText(ipAdressToString(ip));
  4544  0044C6  C09A  F073         	movff	ipv4_setIPSourceAddress@ip,ipAdressToString@ip
  4545  0044CA  C09B  F074         	movff	ipv4_setIPSourceAddress@ip+1,ipAdressToString@ip+1
  4546  0044CE  C09C  F075         	movff	ipv4_setIPSourceAddress@ip+2,ipAdressToString@ip+2
  4547  0044D2  C09D  F076         	movff	ipv4_setIPSourceAddress@ip+3,ipAdressToString@ip+3
  4548  0044D6  EC67  F00F         	call	_ipAdressToString	;wreg free
  4549  0044DA  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4550  0044DE  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4551  0044E2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4552                           
  4553                           ;ipv4.c: 242: UARTTransmitText(").\n\r");
  4554  0044E6  0EDB               	movlw	low STR_51
  4555  0044E8  0100               	movlb	0	; () banked
  4556  0044EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4557  0044EC  0E7F               	movlw	high STR_51
  4558  0044EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4559  0044F0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4560                           
  4561                           ;ipv4.c: 243: ipPreliminarySource = ip;
  4562  0044F4  C09A  F1D7         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  4563  0044F8  C09B  F1D8         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  4564  0044FC  C09C  F1D9         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  4565  004500  C09D  F1DA         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  4566                           
  4567                           ;ipv4.c: 244: fSrcAddrChanged = 1;
  4568  004504  804F               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4569  004506  0012               	return		;funcret
  4570  004508                     __end_of_ipv4_setIPSourceAddress:
  4571                           	opt stack 0
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           intcon	equ	0xFF2
  4577                           intcon3	equ	0xFF0
  4578                           indf0	equ	0xFEF
  4579                           postinc0	equ	0xFEE
  4580                           plusw0	equ	0xFEB
  4581                           fsr0h	equ	0xFEA
  4582                           fsr0l	equ	0xFE9
  4583                           wreg	equ	0xFE8
  4584                           postdec1	equ	0xFE5
  4585                           plusw1	equ	0xFE3
  4586                           fsr1l	equ	0xFE1
  4587                           postinc2	equ	0xFDE
  4588                           postdec2	equ	0xFDD
  4589                           plusw2	equ	0xFDB
  4590                           fsr2h	equ	0xFDA
  4591                           fsr2l	equ	0xFD9
  4592                           status	equ	0xFD8
  4593                           
  4594 ;; *************** function _handleStackBackgroundTasks *****************
  4595 ;; Defined at:
  4596 ;;		line 36 in file "src/stack/backgroundTasks.c"
  4597 ;; Parameters:    Size  Location     Type
  4598 ;;  stack           2  134[BANK1 ] PTR volatile struct stac
  4599 ;;		 -> stack(121), 
  4600 ;; Auto vars:     Size  Location     Type
  4601 ;;  foo            10    0        unsigned char [10]
  4602 ;; Return value:  Size  Location     Type
  4603 ;;                  1    wreg      void 
  4604 ;; Registers used:
  4605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4606 ;; Tracked objects:
  4607 ;;		On entry : 0/0
  4608 ;;		On exit  : 0/0
  4609 ;;		Unchanged: 0/0
  4610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4611 ;;      Params:         0       0       2       0       0       0       0       0       0
  4612 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4613 ;;      Temps:          0       0       1       0       0       0       0       0       0
  4614 ;;      Totals:         0       0       3       0       0       0       0       0       0
  4615 ;;Total ram usage:        3 bytes
  4616 ;; Hardware stack levels used:    1
  4617 ;; Hardware stack levels required when called:   13
  4618 ;; This function calls:
  4619 ;;		_arp_background
  4620 ;;		_ethernetController_clearInterruptFlag
  4621 ;;		_ethernetController_newPacketAvailable
  4622 ;;		_ethernetController_pollInterruptFlags
  4623 ;;		_ethernetController_setLEDConfig
  4624 ;;		_ethernetController_updateLinkStatus
  4625 ;;		_ethernet_rxGetNewFrame
  4626 ;;		_ipv4_background
  4627 ;; This function is called by:
  4628 ;;		_main
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text9
  4633  00342C                     __ptext9:
  4634                           	opt stack 0
  4635  00342C                     _handleStackBackgroundTasks:
  4636                           	opt stack 17
  4637                           
  4638                           ;backgroundTasks.c: 37: unsigned char foo[10];
  4639                           ;backgroundTasks.c: 39: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4640                           
  4641                           ;incstack = 0
  4642  00342C  EC46  F014         	call	_ethernetController_pollInterruptFlags	;wreg free
  4643  003430  0101               	movlb	1	; () banked
  4644  003432  EE20 F012          	lfsr	2,18
  4645  003436  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4646  003438  26D9               	addwf	fsr2l,f,c
  4647  00343A  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4648  00343C  22DA               	addwfc	fsr2h,f,c
  4649  00343E  0100               	movlb	0	; () banked
  4650  003440  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4651  003444  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4652                           
  4653                           ; BSR set to: 0
  4654                           ;backgroundTasks.c: 42: if (stack->background.interruptFlags.LINKIF) {
  4655  003448  0101               	movlb	1	; () banked
  4656  00344A  EE20 F012          	lfsr	2,18
  4657  00344E  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4658  003450  26D9               	addwf	fsr2l,f,c
  4659  003452  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4660  003454  22DA               	addwfc	fsr2h,f,c
  4661  003456  A6DF               	btfss	indf2,3,c
  4662  003458  D029               	goto	l514
  4663                           
  4664                           ; BSR set to: 1
  4665                           ;backgroundTasks.c: 44: ethernetController_updateLinkStatus(&(stack->ethernet));
  4666  00345A  C186  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  4667  00345E  C187  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  4668  003462  EC3F  F01D         	call	_ethernetController_updateLinkStatus	;wreg free
  4669                           
  4670                           ;backgroundTasks.c: 46: if (stack->ethernet.link == LINK_ESTABLISHED) {
  4671  003466  C186  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  4672  00346A  C187  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  4673  00346E  04DE               	decf	postinc2,w,c
  4674  003470  A4D8               	btfss	status,2,c
  4675  003472  D00D               	goto	l515
  4676                           
  4677                           ;backgroundTasks.c: 47: ethernetController_setLEDConfig(LEDA, LED_ON);
  4678  003474  0E00               	movlw	0
  4679  003476  0100               	movlb	0	; () banked
  4680  003478  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4681  00347A  0E00               	movlw	0
  4682  00347C  ECF8  F01C         	call	_ethernetController_setLEDConfig
  4683                           
  4684                           ;backgroundTasks.c: 48: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  4685  003480  0E02               	movlw	2
  4686  003482  0100               	movlb	0	; () banked
  4687  003484  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4688  003486  0E01               	movlw	1
  4689  003488  ECF8  F01C         	call	_ethernetController_setLEDConfig
  4690                           
  4691                           ;backgroundTasks.c: 49: } else {
  4692  00348C  D00C               	goto	l516
  4693  00348E                     l515:
  4694                           
  4695                           ;backgroundTasks.c: 50: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4696  00348E  0E01               	movlw	1
  4697  003490  0100               	movlb	0	; () banked
  4698  003492  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4699  003494  0E00               	movlw	0
  4700  003496  ECF8  F01C         	call	_ethernetController_setLEDConfig
  4701                           
  4702                           ;backgroundTasks.c: 51: ethernetController_setLEDConfig(LEDB, LED_OFF);
  4703  00349A  0E01               	movlw	1
  4704  00349C  0100               	movlb	0	; () banked
  4705  00349E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4706  0034A0  0E01               	movlw	1
  4707  0034A2  ECF8  F01C         	call	_ethernetController_setLEDConfig
  4708  0034A6                     l516:
  4709                           
  4710                           ;backgroundTasks.c: 52: }
  4711                           ;backgroundTasks.c: 53: ethernetController_clearInterruptFlag(LINKIF);
  4712  0034A6  0E0B               	movlw	11
  4713  0034A8  EC4D  F026         	call	_ethernetController_clearInterruptFlag
  4714  0034AC                     l514:
  4715                           
  4716                           ;backgroundTasks.c: 54: }
  4717                           ;backgroundTasks.c: 56: if (stack->background.interruptFlags.PKTIF) {
  4718  0034AC  0101               	movlb	1	; () banked
  4719  0034AE  EE20 F012          	lfsr	2,18
  4720  0034B2  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4721  0034B4  26D9               	addwf	fsr2l,f,c
  4722  0034B6  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4723  0034B8  22DA               	addwfc	fsr2h,f,c
  4724  0034BA  A8DF               	btfss	indf2,4,c
  4725  0034BC  D018               	goto	l518
  4726                           
  4727                           ; BSR set to: 1
  4728                           ;backgroundTasks.c: 58: if (ethernetController_newPacketAvailable()) {
  4729  0034BE  EC13  F026         	call	_ethernetController_newPacketAvailable	;wreg free
  4730  0034C2  0900               	iorlw	0
  4731  0034C4  B4D8               	btfsc	status,2,c
  4732  0034C6  D013               	goto	l518
  4733                           
  4734                           ;backgroundTasks.c: 59: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4735  0034C8  C186  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4736  0034CC  C187  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4737  0034D0  EC76  F000         	call	_ethernet_rxGetNewFrame	;wreg free
  4738  0034D4  0101               	movlb	1	; () banked
  4739  0034D6  EE20 F00F          	lfsr	2,15
  4740  0034DA  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4741  0034DC  26D9               	addwf	fsr2l,f,c
  4742  0034DE  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4743  0034E0  22DA               	addwfc	fsr2h,f,c
  4744  0034E2  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4745  0034E6  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4746  0034EA  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4747  0034EE                     l518:
  4748                           
  4749                           ;backgroundTasks.c: 60: }
  4750                           ;backgroundTasks.c: 61: }
  4751                           ;backgroundTasks.c: 66: if (stack->background.fPacketPending) {
  4752                           
  4753                           ; BSR set to: 1
  4754                           
  4755                           ; BSR set to: 1
  4756  0034EE  0101               	movlb	1	; () banked
  4757  0034F0  EE20 F014          	lfsr	2,20
  4758  0034F4  5186               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4759  0034F6  26D9               	addwf	fsr2l,f,c
  4760  0034F8  5187               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4761  0034FA  22DA               	addwfc	fsr2h,f,c
  4762                           
  4763                           ; BSR set to: 1
  4764                           ;backgroundTasks.c: 86: }
  4765                           ;backgroundTasks.c: 88: arp_background();
  4766                           
  4767                           ; BSR set to: 1
  4768  0034FC  ECB2  F017         	call	_arp_background	;wreg free
  4769                           
  4770                           ;backgroundTasks.c: 89: ipv4_background();
  4771  003500  EC0B  F012         	call	_ipv4_background	;wreg free
  4772  003504  0012               	return		;funcret
  4773  003506                     __end_of_handleStackBackgroundTasks:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           intcon	equ	0xFF2
  4780                           intcon3	equ	0xFF0
  4781                           indf0	equ	0xFEF
  4782                           postinc0	equ	0xFEE
  4783                           plusw0	equ	0xFEB
  4784                           fsr0h	equ	0xFEA
  4785                           fsr0l	equ	0xFE9
  4786                           wreg	equ	0xFE8
  4787                           postdec1	equ	0xFE5
  4788                           plusw1	equ	0xFE3
  4789                           fsr1l	equ	0xFE1
  4790                           indf2	equ	0xFDF
  4791                           postinc2	equ	0xFDE
  4792                           postdec2	equ	0xFDD
  4793                           plusw2	equ	0xFDB
  4794                           fsr2h	equ	0xFDA
  4795                           fsr2l	equ	0xFD9
  4796                           status	equ	0xFD8
  4797                           
  4798 ;; *************** function _ipv4_background *****************
  4799 ;; Defined at:
  4800 ;;		line 249 in file "src/stack/protocols/ipv4.c"
  4801 ;; Parameters:    Size  Location     Type
  4802 ;;		None
  4803 ;; Auto vars:     Size  Location     Type
  4804 ;;  err             3   60[BANK0 ] struct error
  4805 ;; Return value:  Size  Location     Type
  4806 ;;                  3  509[None  ] struct error
  4807 ;; Registers used:
  4808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4809 ;; Tracked objects:
  4810 ;;		On entry : 0/0
  4811 ;;		On exit  : 0/0
  4812 ;;		Unchanged: 0/0
  4813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4814 ;;      Params:         0       0       0       0       0       0       0       0       0
  4815 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4816 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4817 ;;      Totals:         0       5       0       0       0       0       0       0       0
  4818 ;;Total ram usage:        5 bytes
  4819 ;; Hardware stack levels used:    1
  4820 ;; Hardware stack levels required when called:    6
  4821 ;; This function calls:
  4822 ;;		_UARTTransmitText
  4823 ;;		_ipAdressToString
  4824 ;; This function is called by:
  4825 ;;		_handleStackBackgroundTasks
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text10
  4830  002416                     __ptext10:
  4831                           	opt stack 0
  4832  002416                     _ipv4_background:
  4833                           	opt stack 23
  4834                           
  4835                           ;ipv4.c: 250: error_t err;
  4836                           ;ipv4.c: 251: err.module = ERROR_MODULE_IPv4;
  4837                           
  4838                           ;incstack = 0
  4839  002416  0E04               	movlw	4
  4840  002418  0100               	movlb	0	; () banked
  4841  00241A  6F9C               	movwf	ipv4_background@err& (0+255),b
  4842                           
  4843                           ;ipv4.c: 252: err.code = (uint16_t)0;
  4844  00241C  0E00               	movlw	0
  4845  00241E  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  4846  002420  0E00               	movlw	0
  4847  002422  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;ipv4.c: 253: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  4851  002424  C03C  FFD9         	movff	_arpStatus,fsr2l
  4852  002428  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4853  00242C  0E03               	movlw	3
  4854  00242E  18DE               	xorwf	postinc2,w,c
  4855  002430  A4D8               	btfss	status,2,c
  4856  002432  D0B6               	goto	l1106
  4857                           
  4858                           ; BSR set to: 0
  4859  002434  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4860  002436  D090               	goto	l1107
  4861  002438  D0B3               	goto	l1106
  4862  00243A                     
  4863                           ; BSR set to: 0
  4864                           ;ipv4.c: 256: err = (*arpStatus);
  4865                           
  4866                           ; BSR set to: 0
  4867  00243A  C03C  FFD9         	movff	_arpStatus,fsr2l
  4868  00243E  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4869  002442  CFDE F09C          	movff	postinc2,ipv4_background@err
  4870  002446  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  4871  00244A  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  4872                           
  4873                           ; BSR set to: 0
  4874                           ;ipv4.c: 257: return err;
  4875                           ;	Return value of _ipv4_background is never used
  4876  00244E  0012               	return	
  4877  002450                     
  4878                           ; BSR set to: 0
  4879                           ;ipv4.c: 259: err = (*arpStatus);
  4880                           
  4881                           ; BSR set to: 0
  4882  002450  C03C  FFD9         	movff	_arpStatus,fsr2l
  4883  002454  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  4884  002458  CFDE F09C          	movff	postinc2,ipv4_background@err
  4885  00245C  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  4886  002460  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;ipv4.c: 261: return err;
  4890                           ;	Return value of _ipv4_background is never used
  4891  002464  0012               	return	
  4892  002466                     
  4893                           ; BSR set to: 0
  4894                           ;ipv4.c: 263: UARTTransmitText("IPv4: Address is already in use.\n\r");
  4895                           
  4896                           ; BSR set to: 0
  4897  002466  0EDE               	movlw	low STR_88
  4898  002468  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4899  00246A  0E7C               	movlw	high STR_88
  4900  00246C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4901  00246E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4902                           
  4903                           ;ipv4.c: 264: fSrcAddrChanged = 0;
  4904  002472  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4905                           
  4906                           ;ipv4.c: 265: UARTTransmitText("IPv4: Flag was reset because address change was unsucces
      +                          sful.\n\r");
  4907  002474  0EB4               	movlw	low STR_89
  4908  002476  0100               	movlb	0	; () banked
  4909  002478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4910  00247A  0E7A               	movlw	high STR_89
  4911  00247C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4912  00247E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4913                           
  4914                           ;ipv4.c: 266: return err;
  4915                           ;	Return value of _ipv4_background is never used
  4916  002482  0012               	return	
  4917  002484                     
  4918                           ;ipv4.c: 268: err.code = (uint16_t)0;
  4919  002484  0E00               	movlw	0
  4920  002486  0100               	movlb	0	; () banked
  4921  002488  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  4922  00248A  0E00               	movlw	0
  4923  00248C  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  4924                           
  4925                           ; BSR set to: 0
  4926                           ;ipv4.c: 269: UARTTransmitText("IPv4: ARP sent maximum number of requests.\n\r");
  4927  00248E  0ECA               	movlw	low STR_90
  4928  002490  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4929  002492  0E7B               	movlw	high STR_90
  4930  002494  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4931  002496  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4932                           
  4933                           ;ipv4.c: 270: UARTTransmitText("IPv4: ARP returned success.\n\r");
  4934  00249A  0E63               	movlw	low STR_91
  4935  00249C  0100               	movlb	0	; () banked
  4936  00249E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4937  0024A0  0E7D               	movlw	high STR_91
  4938  0024A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4939  0024A4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4940                           
  4941                           ;ipv4.c: 271: UARTTransmitText("IPv4: Old IP Src Addr ");
  4942  0024A8  0E27               	movlw	low STR_92
  4943  0024AA  0100               	movlb	0	; () banked
  4944  0024AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4945  0024AE  0E7E               	movlw	high STR_92
  4946  0024B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4947  0024B2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4948                           
  4949                           ;ipv4.c: 272: UARTTransmitText(ipAdressToString(ipSource));
  4950  0024B6  C1DF  F073         	movff	_ipSource,ipAdressToString@ip
  4951  0024BA  C1E0  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  4952  0024BE  C1E1  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  4953  0024C2  C1E2  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  4954  0024C6  EC67  F00F         	call	_ipAdressToString	;wreg free
  4955  0024CA  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4956  0024CE  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4957  0024D2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4958                           
  4959                           ;ipv4.c: 273: ipSource = ipPreliminarySource;
  4960  0024D6  C1D7  F1DF         	movff	_ipPreliminarySource,_ipSource
  4961  0024DA  C1D8  F1E0         	movff	_ipPreliminarySource+1,_ipSource+1
  4962  0024DE  C1D9  F1E1         	movff	_ipPreliminarySource+2,_ipSource+2
  4963  0024E2  C1DA  F1E2         	movff	_ipPreliminarySource+3,_ipSource+3
  4964                           
  4965                           ;ipv4.c: 274: UARTTransmitText(" was set to the preliminary address (");
  4966  0024E6  0E6F               	movlw	low STR_93
  4967  0024E8  0100               	movlb	0	; () banked
  4968  0024EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4969  0024EC  0E7C               	movlw	high STR_93
  4970  0024EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4971  0024F0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4972                           
  4973                           ;ipv4.c: 275: UARTTransmitText(ipAdressToString(ipSource));
  4974  0024F4  C1DF  F073         	movff	_ipSource,ipAdressToString@ip
  4975  0024F8  C1E0  F074         	movff	_ipSource+1,ipAdressToString@ip+1
  4976  0024FC  C1E1  F075         	movff	_ipSource+2,ipAdressToString@ip+2
  4977  002500  C1E2  F076         	movff	_ipSource+3,ipAdressToString@ip+3
  4978  002504  EC67  F00F         	call	_ipAdressToString	;wreg free
  4979  002508  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4980  00250C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4981  002510  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4982                           
  4983                           ;ipv4.c: 276: UARTTransmitText(").\n\r");
  4984  002514  0EDB               	movlw	low STR_51
  4985  002516  0100               	movlb	0	; () banked
  4986  002518  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4987  00251A  0E7F               	movlw	high STR_51
  4988  00251C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4989  00251E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  4990                           
  4991                           ;ipv4.c: 277: fSrcAddrChanged = 0;
  4992  002522  904F               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4993                           
  4994                           ;ipv4.c: 278: UARTTransmitText("IPv4: Flag was reset because address change is complete.
      +                          \n\r");
  4995  002524  0EF4               	movlw	low STR_95
  4996  002526  0100               	movlb	0	; () banked
  4997  002528  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4998  00252A  0E7A               	movlw	high STR_95
  4999  00252C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5000  00252E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5001                           
  5002                           ;ipv4.c: 279: return err;
  5003                           ;	Return value of _ipv4_background is never used
  5004  002532  0012               	return	
  5005  002534                     
  5006                           ;ipv4.c: 282: err = (*arpStatus);
  5007                           
  5008                           ;ipv4.c: 281: case ERROR_ARP_UNKNOWN:
  5009  002534  C03C  FFD9         	movff	_arpStatus,fsr2l
  5010  002538  C03D  FFDA         	movff	_arpStatus+1,fsr2h
  5011  00253C  CFDE F09C          	movff	postinc2,ipv4_background@err
  5012  002540  CFDE F09D          	movff	postinc2,ipv4_background@err+1
  5013  002544  CFDD F09E          	movff	postdec2,ipv4_background@err+2
  5014                           
  5015                           ;ipv4.c: 283: UARTTransmitText("IPv4: ARP returned an unknown error.\n\r");
  5016  002548  0E21               	movlw	low STR_96
  5017  00254A  0100               	movlb	0	; () banked
  5018  00254C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5019  00254E  0E7C               	movlw	high STR_96
  5020  002550  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5021  002552  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5022                           
  5023                           ;ipv4.c: 285: }
  5024                           
  5025                           ;ipv4.c: 284: return err;
  5026                           ;	Return value of _ipv4_background is never used
  5027  002556  0012               	return	
  5028  002558                     l1107:
  5029  002558  EE20 F001          	lfsr	2,1
  5030  00255C  503C               	movf	_arpStatus,w,c
  5031  00255E  26D9               	addwf	fsr2l,f,c
  5032  002560  503D               	movf	_arpStatus+1,w,c
  5033  002562  22DA               	addwfc	fsr2h,f,c
  5034  002564  CFDE F09A          	movff	postinc2,??_ipv4_background
  5035  002568  CFDD F09B          	movff	postdec2,??_ipv4_background+1
  5036                           
  5037                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  5038                           ; Switch size 1, requested type "space"
  5039                           ; Number of cases is 2, Range of values is 0 to 1
  5040                           ; switch strategies available:
  5041                           ; Name         Instructions Cycles
  5042                           ; simple_byte            7     4 (average)
  5043                           ;	Chosen strategy is simple_byte
  5044  00256C  0100               	movlb	0	; () banked
  5045  00256E  519B               	movf	(??_ipv4_background+1)& (0+255),w,b
  5046  002570  0A00               	xorlw	0	; case 0
  5047  002572  B4D8               	btfsc	status,2,c
  5048  002574  D004               	goto	l10201
  5049  002576  0A01               	xorlw	1	; case 1
  5050  002578  B4D8               	btfsc	status,2,c
  5051  00257A  D006               	goto	l10203
  5052  00257C  D7DB               	goto	l1113
  5053  00257E                     l10201:
  5054                           
  5055                           ; BSR set to: 0
  5056                           ; Switch size 1, requested type "space"
  5057                           ; Number of cases is 1, Range of values is 0 to 0
  5058                           ; switch strategies available:
  5059                           ; Name         Instructions Cycles
  5060                           ; simple_byte            4     3 (average)
  5061                           ;	Chosen strategy is simple_byte
  5062  00257E  519A               	movf	??_ipv4_background& (0+255),w,b
  5063  002580  0A00               	xorlw	0	; case 0
  5064  002582  B4D8               	btfsc	status,2,c
  5065  002584  D75A               	goto	l1108
  5066  002586  D7D6               	goto	l1113
  5067  002588                     l10203:
  5068                           
  5069                           ; BSR set to: 0
  5070                           ; Switch size 1, requested type "space"
  5071                           ; Number of cases is 4, Range of values is 145 to 243
  5072                           ; switch strategies available:
  5073                           ; Name         Instructions Cycles
  5074                           ; simple_byte           13     7 (average)
  5075                           ;	Chosen strategy is simple_byte
  5076  002588  519A               	movf	??_ipv4_background& (0+255),w,b
  5077  00258A  0A91               	xorlw	145	; case 145
  5078  00258C  B4D8               	btfsc	status,2,c
  5079  00258E  D760               	goto	l1110
  5080  002590  0A03               	xorlw	3	; case 146
  5081  002592  B4D8               	btfsc	status,2,c
  5082  002594  D777               	goto	l1112
  5083  002596  0A06               	xorlw	6	; case 148
  5084  002598  B4D8               	btfsc	status,2,c
  5085  00259A  D765               	goto	l1111
  5086  00259C  0A67               	xorlw	103	; case 243
  5087  00259E  D7CA               	goto	l1113
  5088  0025A0                     l1106:
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;ipv4.c: 287: err.code = ERROR_IPv4_UNKNOWN;
  5092                           
  5093                           ; BSR set to: 0
  5094  0025A0  0E02               	movlw	2
  5095  0025A2  6F9E               	movwf	(ipv4_background@err+2)& (0+255),b
  5096  0025A4  0E57               	movlw	87
  5097  0025A6  6F9D               	movwf	(ipv4_background@err+1)& (0+255),b
  5098                           
  5099                           ; BSR set to: 0
  5100  0025A8  0012               	return	
  5101  0025AA                     __end_of_ipv4_background:
  5102                           	opt stack 0
  5103                           tblptru	equ	0xFF8
  5104                           tblptrh	equ	0xFF7
  5105                           tblptrl	equ	0xFF6
  5106                           tablat	equ	0xFF5
  5107                           intcon	equ	0xFF2
  5108                           intcon3	equ	0xFF0
  5109                           indf0	equ	0xFEF
  5110                           postinc0	equ	0xFEE
  5111                           plusw0	equ	0xFEB
  5112                           fsr0h	equ	0xFEA
  5113                           fsr0l	equ	0xFE9
  5114                           wreg	equ	0xFE8
  5115                           postdec1	equ	0xFE5
  5116                           plusw1	equ	0xFE3
  5117                           fsr1l	equ	0xFE1
  5118                           indf2	equ	0xFDF
  5119                           postinc2	equ	0xFDE
  5120                           postdec2	equ	0xFDD
  5121                           plusw2	equ	0xFDB
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _ethernet_rxGetNewFrame *****************
  5127 ;; Defined at:
  5128 ;;		line 55 in file "src/eth/ethernet.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5131 ;;		 -> stack.ethernet(15), stack(121), 
  5132 ;; Auto vars:     Size  Location     Type
  5133 ;;  err             3  131[BANK1 ] struct error
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  3  120[BANK1 ] struct error
  5136 ;; Registers used:
  5137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5143 ;;      Params:         0       0       3       0       0       0       0       0       0
  5144 ;;      Locals:         0       0       3       0       0       0       0       0       0
  5145 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5146 ;;      Totals:         0       0      14       0       0       0       0       0       0
  5147 ;;Total ram usage:       14 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:   12
  5150 ;; This function calls:
  5151 ;;		_UARTTransmitInt
  5152 ;;		_UARTTransmitText
  5153 ;;		_arp_handleNewPacket
  5154 ;;		_etherTypeToString
  5155 ;;		_ethernetController_dropPacket
  5156 ;;		_ethernetController_getEtherTypeField
  5157 ;;		_ethernetController_getNextPacketPointer
  5158 ;;		_ethernetController_getRSV
  5159 ;;		_ethernetController_updateNextPacketPointer
  5160 ;;		_getMillis
  5161 ;;		_intToString
  5162 ;;		_ipv4_handleNewPacket
  5163 ;;		_macToString
  5164 ;; This function is called by:
  5165 ;;		_handleStackBackgroundTasks
  5166 ;; This function uses a non-reentrant model
  5167 ;;
  5168                           
  5169                           	psect	text11
  5170  0000EC                     __ptext11:
  5171                           	opt stack 0
  5172  0000EC                     _ethernet_rxGetNewFrame:
  5173                           	opt stack 17
  5174                           
  5175                           ;ethernet.c: 56: uint32_t static counter = 0;
  5176                           ;ethernet.c: 57: error_t err;
  5177                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  5178                           
  5179                           ;incstack = 0
  5180  0000EC  0E02               	movlw	2
  5181  0000EE  0101               	movlb	1	; () banked
  5182  0000F0  6F83               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5183                           
  5184                           ;ethernet.c: 59: err.code = (uint16_t)0;
  5185  0000F2  0E00               	movlw	0
  5186  0000F4  6F85               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  5187  0000F6  0E00               	movlw	0
  5188  0000F8  6F84               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  5189                           
  5190                           ; BSR set to: 1
  5191                           ;ethernet.c: 62: frame->tReceived = getMillis();
  5192  0000FA  EC25  F026         	call	_getMillis	;wreg free
  5193  0000FE  0101               	movlb	1	; () banked
  5194  000100  EE20 F01E          	lfsr	2,30
  5195  000104  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5196  000106  26D9               	addwf	fsr2l,f,c
  5197  000108  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5198  00010A  22DA               	addwfc	fsr2h,f,c
  5199  00010C  0100               	movlb	0	; () banked
  5200  00010E  C060  FFDE         	movff	?_getMillis,postinc2
  5201  000112  C061  FFDE         	movff	?_getMillis+1,postinc2
  5202  000116  C062  FFDE         	movff	?_getMillis+2,postinc2
  5203  00011A  C063  FFDE         	movff	?_getMillis+3,postinc2
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  5207  00011E  EC46  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  5208  000122  0101               	movlb	1	; () banked
  5209  000124  EE20 F010          	lfsr	2,16
  5210  000128  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5211  00012A  26D9               	addwf	fsr2l,f,c
  5212  00012C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5213  00012E  22DA               	addwfc	fsr2h,f,c
  5214  000130  0100               	movlb	0	; () banked
  5215  000132  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  5216  000136  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  5220  00013A  ECCA  F01E         	call	_ethernetController_updateNextPacketPointer	;wreg free
  5221                           
  5222                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  5223  00013E  0101               	movlb	1	; () banked
  5224  000140  EE20 F016          	lfsr	2,22
  5225  000144  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5226  000146  26D9               	addwf	fsr2l,f,c
  5227  000148  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5228  00014A  22DA               	addwfc	fsr2h,f,c
  5229  00014C  0E01               	movlw	1
  5230  00014E  6EDF               	movwf	indf2,c
  5231                           
  5232                           ; BSR set to: 1
  5233                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  5234  000150  EE20 F010          	lfsr	2,16
  5235  000154  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5236  000156  26D9               	addwf	fsr2l,f,c
  5237  000158  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5238  00015A  22DA               	addwfc	fsr2h,f,c
  5239  00015C  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  5240  000160  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  5241  000164  EC43  F01F         	call	_ethernetController_getRSV	;wreg free
  5242  000168  0101               	movlb	1	; () banked
  5243  00016A  EE20 F019          	lfsr	2,25
  5244  00016E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5245  000170  26D9               	addwf	fsr2l,f,c
  5246  000172  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5247  000174  22DA               	addwfc	fsr2h,f,c
  5248  000176  0E04               	movlw	4
  5249  000178                     u11281:
  5250  000178  CFEB FFDB          	movff	plusw0,plusw2
  5251  00017C  06E8               	decf	wreg,f,c
  5252  00017E  E2FC               	bc	u11281
  5253                           
  5254                           ; BSR set to: 1
  5255                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  5256  000180  EE20 F019          	lfsr	2,25
  5257  000184  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5258  000186  26D9               	addwf	fsr2l,f,c
  5259  000188  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5260  00018A  22DA               	addwfc	fsr2h,f,c
  5261  00018C  EE10 F014          	lfsr	1,20
  5262  000190  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5263  000192  26E1               	addwf	fsr1l,f,c
  5264  000194  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5265  000196  22E2               	addwfc	fsr1h,f,c
  5266  000198  CFDE FFE6          	movff	postinc2,postinc1
  5267  00019C  CFDD FFE5          	movff	postdec2,postdec1
  5268                           
  5269                           ; BSR set to: 1
  5270                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  5271  0001A0  EE20 F014          	lfsr	2,20
  5272  0001A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5273  0001A6  26D9               	addwf	fsr2l,f,c
  5274  0001A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5275  0001AA  22DA               	addwfc	fsr2h,f,c
  5276  0001AC  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5277  0001B0  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5278  0001B4  EE20 F010          	lfsr	2,16
  5279  0001B8  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5280  0001BA  26D9               	addwf	fsr2l,f,c
  5281  0001BC  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5282  0001BE  22DA               	addwfc	fsr2h,f,c
  5283  0001C0  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5284  0001C4  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5285  0001C8  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5286  0001CA  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5287  0001CC  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5288  0001CE  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5289  0001D0  0E60               	movlw	96
  5290  0001D2  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5291  0001D4  A0D8               	btfss	status,0,c
  5292  0001D6  D03B               	goto	l366
  5293                           
  5294                           ; BSR set to: 1
  5295                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  5296  0001D8  0E00               	movlw	0
  5297  0001DA  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  5298  0001DC  0E30               	movlw	48
  5299  0001DE  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  5300  0001E0  EE20 F014          	lfsr	2,20
  5301  0001E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5302  0001E6  26D9               	addwf	fsr2l,f,c
  5303  0001E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5304  0001EA  22DA               	addwfc	fsr2h,f,c
  5305  0001EC  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5306  0001F0  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5307  0001F4  0EFF               	movlw	255
  5308  0001F6  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  5309  0001F8  0E2F               	movlw	47
  5310  0001FA  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  5311  0001FC  EE20 F010          	lfsr	2,16
  5312  000200  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5313  000202  26D9               	addwf	fsr2l,f,c
  5314  000204  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5315  000206  22DA               	addwfc	fsr2h,f,c
  5316  000208  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  5317  00020C  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  5318  000210  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5319  000212  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5320  000214  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5321  000216  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5322  000218  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  5323  00021A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5324  00021C  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  5325  00021E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5326  000220  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5327  000222  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5328  000224  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5329  000226  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5330  000228  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  5331  00022A  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5332  00022C  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5333  00022E  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5334  000230  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5335  000232  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5336  000234  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5337  000236  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5338  000238  EE20 F012          	lfsr	2,18
  5339  00023C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5340  00023E  26D9               	addwf	fsr2l,f,c
  5341  000240  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5342  000242  22DA               	addwfc	fsr2h,f,c
  5343  000244  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  5344  000248  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  5345                           
  5346                           ;ethernet.c: 74: } else {
  5347  00024C  D022               	goto	l367
  5348  00024E                     l366:
  5349                           
  5350                           ; BSR set to: 1
  5351                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  5352                           
  5353                           ; BSR set to: 1
  5354  00024E  EE20 F014          	lfsr	2,20
  5355  000252  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5356  000254  26D9               	addwf	fsr2l,f,c
  5357  000256  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5358  000258  22DA               	addwfc	fsr2h,f,c
  5359  00025A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5360  00025E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5361  000262  EE20 F010          	lfsr	2,16
  5362  000266  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5363  000268  26D9               	addwf	fsr2l,f,c
  5364  00026A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5365  00026C  22DA               	addwfc	fsr2h,f,c
  5366  00026E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5367  000272  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5368  000276  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5369  000278  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5370  00027A  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5371  00027C  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5372  00027E  EE20 F012          	lfsr	2,18
  5373  000282  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5374  000284  26D9               	addwf	fsr2l,f,c
  5375  000286  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5376  000288  22DA               	addwfc	fsr2h,f,c
  5377  00028A  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  5378  00028E  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  5379  000292                     l367:
  5380                           
  5381                           ; BSR set to: 1
  5382                           ;ethernet.c: 76: }
  5383                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  5384                           
  5385                           ; BSR set to: 1
  5386  000292  EE20 F010          	lfsr	2,16
  5387  000296  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5388  000298  26D9               	addwf	fsr2l,f,c
  5389  00029A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5390  00029C  22DA               	addwfc	fsr2h,f,c
  5391  00029E  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  5392  0002A2  0E08               	movlw	8
  5393  0002A4                     u11301:
  5394  0002A4  CFDB FFEB          	movff	plusw2,plusw0
  5395  0002A8  06E8               	decf	wreg,f,c
  5396  0002AA  E2FC               	bc	u11301
  5397  0002AC  ECF0  F01F         	call	_ethernetController_getEtherTypeField	;wreg free
  5398  0002B0  0101               	movlb	1	; () banked
  5399  0002B2  EE20 F00E          	lfsr	2,14
  5400  0002B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5401  0002B8  26D9               	addwf	fsr2l,f,c
  5402  0002BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5403  0002BC  22DA               	addwfc	fsr2h,f,c
  5404  0002BE  0100               	movlb	0	; () banked
  5405  0002C0  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  5406  0002C4  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;ethernet.c: 79: UARTTransmitText("[");
  5410  0002C8  0ECF               	movlw	low (STR_62+3)
  5411  0002CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5412  0002CC  0E7F               	movlw	high (STR_62+3)
  5413  0002CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5414  0002D0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5415                           
  5416                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  5417  0002D4  C035  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  5418  0002D8  C036  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  5419  0002DC  C037  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  5420  0002E0  C038  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  5421  0002E4  EC6A  F024         	call	_intToString	;wreg free
  5422  0002E8  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5423  0002EC  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5424  0002F0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5425  0002F4  0E01               	movlw	1
  5426  0002F6  2635               	addwf	ethernet_rxGetNewFrame@counter,f,c
  5427  0002F8  0E00               	movlw	0
  5428  0002FA  2236               	addwfc	ethernet_rxGetNewFrame@counter+1,f,c
  5429  0002FC  2237               	addwfc	ethernet_rxGetNewFrame@counter+2,f,c
  5430  0002FE  2238               	addwfc	ethernet_rxGetNewFrame@counter+3,f,c
  5431                           
  5432                           ;ethernet.c: 81: UARTTransmitText("]");
  5433  000300  0EFB               	movlw	low (STR_19+1)
  5434  000302  0100               	movlb	0	; () banked
  5435  000304  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5436  000306  0E7F               	movlw	high (STR_19+1)
  5437  000308  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5438  00030A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5439                           
  5440                           ;ethernet.c: 84: if (frame->receiveStatusVector.broadcast)
  5441  00030E  0101               	movlb	1	; () banked
  5442  000310  EE20 F01B          	lfsr	2,27
  5443  000314  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5444  000316  26D9               	addwf	fsr2l,f,c
  5445  000318  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5446  00031A  22DA               	addwfc	fsr2h,f,c
  5447  00031C  AEDF               	btfss	indf2,7,c
  5448  00031E  D007               	goto	l368
  5449                           
  5450                           ; BSR set to: 1
  5451                           ;ethernet.c: 85: UARTTransmitText("[Broadcast]");
  5452  000320  0E6E               	movlw	low STR_3
  5453  000322  0100               	movlb	0	; () banked
  5454  000324  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5455  000326  0E7F               	movlw	high STR_3
  5456  000328  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5457  00032A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5458  00032E                     l368:
  5459                           
  5460                           ;ethernet.c: 86: if (frame->receiveStatusVector.unicast)
  5461  00032E  0101               	movlb	1	; () banked
  5462  000330  EE20 F01D          	lfsr	2,29
  5463  000334  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5464  000336  26D9               	addwf	fsr2l,f,c
  5465  000338  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5466  00033A  22DA               	addwfc	fsr2h,f,c
  5467  00033C  A4DF               	btfss	indf2,2,c
  5468  00033E  D007               	goto	l369
  5469                           
  5470                           ; BSR set to: 1
  5471                           ;ethernet.c: 87: UARTTransmitText("[Unicast]");
  5472  000340  0E8F               	movlw	low STR_4
  5473  000342  0100               	movlb	0	; () banked
  5474  000344  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5475  000346  0E7F               	movlw	high STR_4
  5476  000348  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5477  00034A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5478  00034E                     l369:
  5479                           
  5480                           ;ethernet.c: 88: if (!frame->receiveStatusVector.receivedOk)
  5481  00034E  0101               	movlb	1	; () banked
  5482  000350  EE20 F01B          	lfsr	2,27
  5483  000354  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5484  000356  26D9               	addwf	fsr2l,f,c
  5485  000358  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5486  00035A  22DA               	addwfc	fsr2h,f,c
  5487  00035C  BADF               	btfsc	indf2,5,c
  5488  00035E  D007               	goto	l370
  5489                           
  5490                           ; BSR set to: 1
  5491                           ;ethernet.c: 89: UARTTransmitText("[Symbol Errors]");
  5492  000360  0E0D               	movlw	low STR_5
  5493  000362  0100               	movlb	0	; () banked
  5494  000364  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5495  000366  0E7F               	movlw	high STR_5
  5496  000368  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5497  00036A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5498  00036E                     l370:
  5499                           
  5500                           ;ethernet.c: 91: UARTTransmitText("[");
  5501  00036E  0ECF               	movlw	low (STR_62+3)
  5502  000370  0100               	movlb	0	; () banked
  5503  000372  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5504  000374  0E7F               	movlw	high (STR_62+3)
  5505  000376  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5506  000378  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5507                           
  5508                           ;ethernet.c: 92: UARTTransmitText(intToString(frame->tReceived));
  5509  00037C  0101               	movlb	1	; () banked
  5510  00037E  EE20 F01E          	lfsr	2,30
  5511  000382  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5512  000384  26D9               	addwf	fsr2l,f,c
  5513  000386  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5514  000388  22DA               	addwfc	fsr2h,f,c
  5515  00038A  CFDE F084          	movff	postinc2,intToString@val
  5516  00038E  CFDE F085          	movff	postinc2,intToString@val+1
  5517  000392  CFDE F086          	movff	postinc2,intToString@val+2
  5518  000396  CFDE F087          	movff	postinc2,intToString@val+3
  5519  00039A  EC6A  F024         	call	_intToString	;wreg free
  5520  00039E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5521  0003A2  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5522  0003A6  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5523                           
  5524                           ;ethernet.c: 93: UARTTransmitText("]");
  5525  0003AA  0EFB               	movlw	low (STR_19+1)
  5526  0003AC  0100               	movlb	0	; () banked
  5527  0003AE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5528  0003B0  0E7F               	movlw	high (STR_19+1)
  5529  0003B2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5530  0003B4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5531                           
  5532                           ;ethernet.c: 99: switch (frame->ethertype) {
  5533  0003B8  D097               	goto	l371
  5534  0003BA                     
  5535                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  5536  0003BA  0EC1               	movlw	low STR_8
  5537  0003BC  0100               	movlb	0	; () banked
  5538  0003BE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5539  0003C0  0E7F               	movlw	high STR_8
  5540  0003C2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5541  0003C4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5542                           
  5543                           ;ethernet.c: 102: arp_handleNewPacket(frame);
  5544  0003C8  C178  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  5545  0003CC  C179  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  5546  0003D0  EC5E  F010         	call	_arp_handleNewPacket	;wreg free
  5547                           
  5548                           ;ethernet.c: 103: break;
  5549  0003D4  D0A0               	goto	l373
  5550  0003D6                     
  5551                           ;ethernet.c: 105: UARTTransmitText("[IPv4]");
  5552  0003D6  0EBA               	movlw	low STR_9
  5553  0003D8  0100               	movlb	0	; () banked
  5554  0003DA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5555  0003DC  0E7F               	movlw	high STR_9
  5556  0003DE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5557  0003E0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5558                           
  5559                           ;ethernet.c: 106: ipv4_handleNewPacket(frame);
  5560  0003E4  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  5561  0003E8  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  5562  0003EC  EC35  F011         	call	_ipv4_handleNewPacket	;wreg free
  5563                           
  5564                           ;ethernet.c: 107: break;
  5565  0003F0  D092               	goto	l373
  5566  0003F2                     
  5567                           ;ethernet.c: 109: UARTTransmitText("[Unknown EtherType]");
  5568  0003F2  0E69               	movlw	low STR_10
  5569  0003F4  0100               	movlb	0	; () banked
  5570  0003F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5571  0003F8  0E7E               	movlw	high STR_10
  5572  0003FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5573  0003FC  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5574                           
  5575                           ;ethernet.c: 110: UARTTransmitText("[");
  5576  000400  0ECF               	movlw	low (STR_62+3)
  5577  000402  0100               	movlb	0	; () banked
  5578  000404  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5579  000406  0E7F               	movlw	high (STR_62+3)
  5580  000408  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5581  00040A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5582                           
  5583                           ;ethernet.c: 111: UARTTransmitText(macToString(frame->source));
  5584  00040E  0101               	movlb	1	; () banked
  5585  000410  EE20 F002          	lfsr	2,2
  5586  000414  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5587  000416  26D9               	addwf	fsr2l,f,c
  5588  000418  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5589  00041A  22DA               	addwfc	fsr2h,f,c
  5590  00041C  EE00  F07A         	lfsr	0,macToString@addr
  5591  000420  0E05               	movlw	5
  5592  000422                     u11341:
  5593  000422  CFDB FFEB          	movff	plusw2,plusw0
  5594  000426  06E8               	decf	wreg,f,c
  5595  000428  E2FC               	bc	u11341
  5596  00042A  EC2E  F017         	call	_macToString	;wreg free
  5597  00042E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5598  000432  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5599  000436  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5600                           
  5601                           ;ethernet.c: 112: UARTTransmitText("->");
  5602  00043A  0EF4               	movlw	low STR_12
  5603  00043C  0100               	movlb	0	; () banked
  5604  00043E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5605  000440  0E7F               	movlw	high STR_12
  5606  000442  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5607  000444  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5608                           
  5609                           ;ethernet.c: 113: UARTTransmitText(macToString(frame->destination));
  5610  000448  0101               	movlb	1	; () banked
  5611  00044A  EE20 F008          	lfsr	2,8
  5612  00044E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5613  000450  26D9               	addwf	fsr2l,f,c
  5614  000452  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5615  000454  22DA               	addwfc	fsr2h,f,c
  5616  000456  EE00  F07A         	lfsr	0,macToString@addr
  5617  00045A  0E05               	movlw	5
  5618  00045C                     u11351:
  5619  00045C  CFDB FFEB          	movff	plusw2,plusw0
  5620  000460  06E8               	decf	wreg,f,c
  5621  000462  E2FC               	bc	u11351
  5622  000464  EC2E  F017         	call	_macToString	;wreg free
  5623  000468  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  5624  00046C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  5625  000470  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5626                           
  5627                           ;ethernet.c: 114: UARTTransmitText("][");
  5628  000474  0EF7               	movlw	low STR_13
  5629  000476  0100               	movlb	0	; () banked
  5630  000478  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5631  00047A  0E7F               	movlw	high STR_13
  5632  00047C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5633  00047E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5634                           
  5635                           ;ethernet.c: 115: UARTTransmitText(etherTypeToString(frame->ethertype));
  5636  000482  0101               	movlb	1	; () banked
  5637  000484  EE20 F00E          	lfsr	2,14
  5638  000488  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5639  00048A  26D9               	addwf	fsr2l,f,c
  5640  00048C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5641  00048E  22DA               	addwfc	fsr2h,f,c
  5642  000490  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  5643  000494  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  5644  000498  EC1C  F023         	call	_etherTypeToString	;wreg free
  5645  00049C  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  5646  0004A0  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  5647  0004A4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5648                           
  5649                           ;ethernet.c: 116: UARTTransmitText("][L=");
  5650  0004A8  0EE0               	movlw	low STR_14
  5651  0004AA  0100               	movlb	0	; () banked
  5652  0004AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5653  0004AE  0E7F               	movlw	high STR_14
  5654  0004B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5655  0004B2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5656                           
  5657                           ;ethernet.c: 117: UARTTransmitInt(frame->length);
  5658  0004B6  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  5659  0004BA  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  5660  0004BE  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5661  0004C2  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5662  0004C6  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  5663  0004CA  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  5664  0004CE  0100               	movlb	0	; () banked
  5665  0004D0  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  5666  0004D2  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  5667  0004D4  ECB5  F025         	call	_UARTTransmitInt	;wreg free
  5668                           
  5669                           ;ethernet.c: 118: UARTTransmitText("] ");
  5670  0004D8  0EF1               	movlw	low STR_15
  5671  0004DA  0100               	movlb	0	; () banked
  5672  0004DC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5673  0004DE  0E7F               	movlw	high STR_15
  5674  0004E0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5675  0004E2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5676                           
  5677                           ;ethernet.c: 120: }
  5678                           
  5679                           ;ethernet.c: 119: break;
  5680  0004E6  D017               	goto	l373
  5681  0004E8                     l371:
  5682  0004E8  0101               	movlb	1	; () banked
  5683  0004EA  EE20 F00E          	lfsr	2,14
  5684  0004EE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5685  0004F0  26D9               	addwf	fsr2l,f,c
  5686  0004F2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5687  0004F4  22DA               	addwfc	fsr2h,f,c
  5688  0004F6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5689  0004FA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5690                           
  5691                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5692                           ; Switch size 1, requested type "space"
  5693                           ; Number of cases is 1, Range of values is 8 to 8
  5694                           ; switch strategies available:
  5695                           ; Name         Instructions Cycles
  5696                           ; simple_byte            4     3 (average)
  5697                           ;	Chosen strategy is simple_byte
  5698  0004FE  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5699  000500  0A08               	xorlw	8	; case 8
  5700  000502  A4D8               	btfss	status,2,c
  5701  000504  D776               	goto	l375
  5702                           
  5703                           ; BSR set to: 1
  5704                           ; Switch size 1, requested type "space"
  5705                           ; Number of cases is 2, Range of values is 0 to 6
  5706                           ; switch strategies available:
  5707                           ; Name         Instructions Cycles
  5708                           ; simple_byte            7     4 (average)
  5709                           ;	Chosen strategy is simple_byte
  5710  000506  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5711  000508  0A00               	xorlw	0	; case 0
  5712  00050A  B4D8               	btfsc	status,2,c
  5713  00050C  D764               	goto	l374
  5714  00050E  0A06               	xorlw	6	; case 6
  5715  000510  B4D8               	btfsc	status,2,c
  5716  000512  D753               	goto	l372
  5717  000514  D76E               	goto	l375
  5718  000516                     l373:
  5719                           
  5720                           ;ethernet.c: 123: UARTTransmitText("[");
  5721                           
  5722                           ; BSR set to: 1
  5723  000516  0ECF               	movlw	low (STR_62+3)
  5724  000518  0100               	movlb	0	; () banked
  5725  00051A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5726  00051C  0E7F               	movlw	high (STR_62+3)
  5727  00051E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5728  000520  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5729                           
  5730                           ;ethernet.c: 124: UARTTransmitText(intToString(frame->memory.start));
  5731  000524  0101               	movlb	1	; () banked
  5732  000526  EE20 F010          	lfsr	2,16
  5733  00052A  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5734  00052C  26D9               	addwf	fsr2l,f,c
  5735  00052E  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5736  000530  22DA               	addwfc	fsr2h,f,c
  5737  000532  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5738  000536  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5739  00053A  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5740  00053E  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5741  000542  0100               	movlb	0	; () banked
  5742  000544  6B86               	clrf	(intToString@val+2)& (0+255),b
  5743  000546  6B87               	clrf	(intToString@val+3)& (0+255),b
  5744  000548  EC6A  F024         	call	_intToString	;wreg free
  5745  00054C  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5746  000550  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5747  000554  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5748                           
  5749                           ;ethernet.c: 125: UARTTransmitText(" to ");
  5750  000558  0E08               	movlw	low (STR_67+11)
  5751  00055A  0100               	movlb	0	; () banked
  5752  00055C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5753  00055E  0E7F               	movlw	high (STR_67+11)
  5754  000560  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5755  000562  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5756                           
  5757                           ;ethernet.c: 126: UARTTransmitText(intToString(frame->memory.end));
  5758  000566  0101               	movlb	1	; () banked
  5759  000568  EE20 F012          	lfsr	2,18
  5760  00056C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5761  00056E  26D9               	addwf	fsr2l,f,c
  5762  000570  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5763  000572  22DA               	addwfc	fsr2h,f,c
  5764  000574  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5765  000578  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5766  00057C  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5767  000580  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5768  000584  0100               	movlb	0	; () banked
  5769  000586  6B86               	clrf	(intToString@val+2)& (0+255),b
  5770  000588  6B87               	clrf	(intToString@val+3)& (0+255),b
  5771  00058A  EC6A  F024         	call	_intToString	;wreg free
  5772  00058E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5773  000592  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5774  000596  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5775                           
  5776                           ;ethernet.c: 127: UARTTransmitText(" (");
  5777  00059A  0E1E               	movlw	low (STR_86+39)
  5778  00059C  0100               	movlb	0	; () banked
  5779  00059E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5780  0005A0  0E7C               	movlw	high (STR_86+39)
  5781  0005A2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5782  0005A4  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5783                           
  5784                           ;ethernet.c: 128: UARTTransmitText(intToString(frame->memory.length));
  5785  0005A8  0101               	movlb	1	; () banked
  5786  0005AA  EE20 F014          	lfsr	2,20
  5787  0005AE  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5788  0005B0  26D9               	addwf	fsr2l,f,c
  5789  0005B2  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5790  0005B4  22DA               	addwfc	fsr2h,f,c
  5791  0005B6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5792  0005BA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5793  0005BE  C17B  F084         	movff	??_ethernet_rxGetNewFrame,intToString@val
  5794  0005C2  C17C  F085         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  5795  0005C6  0100               	movlb	0	; () banked
  5796  0005C8  6B86               	clrf	(intToString@val+2)& (0+255),b
  5797  0005CA  6B87               	clrf	(intToString@val+3)& (0+255),b
  5798  0005CC  EC6A  F024         	call	_intToString	;wreg free
  5799  0005D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5800  0005D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5801  0005D8  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5802                           
  5803                           ;ethernet.c: 129: UARTTransmitText(")]");
  5804  0005DC  0EFA               	movlw	low STR_19
  5805  0005DE  0100               	movlb	0	; () banked
  5806  0005E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5807  0005E2  0E7F               	movlw	high STR_19
  5808  0005E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5809  0005E6  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5810                           
  5811                           ;ethernet.c: 131: ethernetController_dropPacket(frame);
  5812  0005EA  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  5813  0005EE  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  5814  0005F2  ECA2  F023         	call	_ethernetController_dropPacket	;wreg free
  5815                           
  5816                           ;ethernet.c: 133: UARTTransmitText("\n\r");
  5817  0005F6  0EDB               	movlw	low (STR_70+33)
  5818  0005F8  0100               	movlb	0	; () banked
  5819  0005FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5820  0005FC  0E7C               	movlw	high (STR_70+33)
  5821  0005FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5822  000600  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5823                           
  5824                           ;ethernet.c: 135: return err;
  5825  000604  C183  F178         	movff	ethernet_rxGetNewFrame@err,?_ethernet_rxGetNewFrame
  5826  000608  C184  F179         	movff	ethernet_rxGetNewFrame@err+1,?_ethernet_rxGetNewFrame+1
  5827  00060C  C185  F17A         	movff	ethernet_rxGetNewFrame@err+2,?_ethernet_rxGetNewFrame+2
  5828  000610  0012               	return	
  5829  000612                     __end_of_ethernet_rxGetNewFrame:
  5830                           	opt stack 0
  5831                           tblptru	equ	0xFF8
  5832                           tblptrh	equ	0xFF7
  5833                           tblptrl	equ	0xFF6
  5834                           tablat	equ	0xFF5
  5835                           intcon	equ	0xFF2
  5836                           intcon3	equ	0xFF0
  5837                           indf0	equ	0xFEF
  5838                           postinc0	equ	0xFEE
  5839                           plusw0	equ	0xFEB
  5840                           fsr0h	equ	0xFEA
  5841                           fsr0l	equ	0xFE9
  5842                           wreg	equ	0xFE8
  5843                           postinc1	equ	0xFE6
  5844                           postdec1	equ	0xFE5
  5845                           plusw1	equ	0xFE3
  5846                           fsr1h	equ	0xFE2
  5847                           fsr1l	equ	0xFE1
  5848                           indf2	equ	0xFDF
  5849                           postinc2	equ	0xFDE
  5850                           postdec2	equ	0xFDD
  5851                           plusw2	equ	0xFDB
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _ipv4_handleNewPacket *****************
  5857 ;; Defined at:
  5858 ;;		line 203 in file "src/stack/protocols/ipv4.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  5861 ;;		 -> stack.ethernet(15), stack(121), 
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;  ip             23   98[BANK0 ] struct ipv4_header
  5864 ;;  headerField     9   89[BANK0 ] struct memoryField
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5874 ;;      Params:         0       2       0       0       0       0       0       0       0
  5875 ;;      Locals:         0      32       0       0       0       0       0       0       0
  5876 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5877 ;;      Totals:         0      36       0       0       0       0       0       0       0
  5878 ;;Total ram usage:       36 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    9
  5881 ;; This function calls:
  5882 ;;		_UARTTransmitText
  5883 ;;		_ethernetController_dropPacket
  5884 ;;		_intToString
  5885 ;;		_ipAdressToString
  5886 ;;		_ipProtocolToString
  5887 ;;		_ipv4_checkHeaderChecksum
  5888 ;;		_ipv4_parseHeader
  5889 ;; This function is called by:
  5890 ;;		_ethernet_rxGetNewFrame
  5891 ;; This function uses a non-reentrant model
  5892 ;;
  5893                           
  5894                           	psect	text12
  5895  00226A                     __ptext12:
  5896                           	opt stack 0
  5897  00226A                     _ipv4_handleNewPacket:
  5898                           	opt stack 19
  5899                           
  5900                           ;ipv4.c: 204: ipv4_header_t ip;
  5901                           ;ipv4.c: 205: memoryField_t headerField;
  5902                           ;ipv4.c: 206: if (frame->ethertype != ETHERTYPE_IPv4) {
  5903                           
  5904                           ;incstack = 0
  5905  00226A  0100               	movlb	0	; () banked
  5906  00226C  EE20 F00E          	lfsr	2,14
  5907  002270  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5908  002272  26D9               	addwf	fsr2l,f,c
  5909  002274  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5910  002276  22DA               	addwfc	fsr2h,f,c
  5911  002278  50DE               	movf	postinc2,w,c
  5912  00227A  E104               	bnz	u10770
  5913  00227C  0E08               	movlw	8
  5914  00227E  18DE               	xorwf	postinc2,w,c
  5915  002280  B4D8               	btfsc	status,2,c
  5916  002282  D007               	goto	l1092
  5917  002284                     u10770:
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;ipv4.c: 207: ethernetController_dropPacket(frame);
  5921  002284  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  5922  002288  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  5923  00228C  ECA2  F023         	call	_ethernetController_dropPacket	;wreg free
  5924                           
  5925                           ;ipv4.c: 208: return;
  5926  002290  0012               	return	
  5927  002292                     l1092:
  5928                           
  5929                           ;ipv4.c: 209: }
  5930                           ;ipv4.c: 210: headerField = frame->memory;
  5931  002292  0100               	movlb	0	; () banked
  5932  002294  EE20 F010          	lfsr	2,16
  5933  002298  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5934  00229A  26D9               	addwf	fsr2l,f,c
  5935  00229C  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5936  00229E  22DA               	addwfc	fsr2h,f,c
  5937  0022A0  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  5938  0022A4  0E08               	movlw	8
  5939  0022A6                     u10781:
  5940  0022A6  CFDB FFE3          	movff	plusw2,plusw1
  5941  0022AA  06E8               	decf	wreg,f,c
  5942  0022AC  E2FC               	bc	u10781
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;ipv4.c: 211: headerField.start = frame->memory.start + 22;
  5946  0022AE  EE20 F010          	lfsr	2,16
  5947  0022B2  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  5948  0022B4  26D9               	addwf	fsr2l,f,c
  5949  0022B6  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  5950  0022B8  22DA               	addwfc	fsr2h,f,c
  5951  0022BA  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  5952  0022BE  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  5953  0022C2  0E16               	movlw	22
  5954  0022C4  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  5955  0022C6  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  5956  0022C8  0E00               	movlw	0
  5957  0022CA  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  5958  0022CC  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  5959                           
  5960                           ; BSR set to: 0
  5961                           ;ipv4.c: 213: ip = ipv4_parseHeader(&headerField);
  5962  0022CE  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  5963  0022D0  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  5964  0022D2  0E00               	movlw	high ipv4_handleNewPacket@headerField
  5965  0022D4  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  5966  0022D6  EC23  F00D         	call	_ipv4_parseHeader	;wreg free
  5967  0022DA  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  5968  0022DE  0E16               	movlw	22
  5969  0022E0                     u10791:
  5970  0022E0  CFEB FFDB          	movff	plusw0,plusw2
  5971  0022E4  06E8               	decf	wreg,f,c
  5972  0022E6  E2FC               	bc	u10791
  5973                           
  5974                           ;ipv4.c: 214: UARTTransmitText("[");
  5975  0022E8  0ECF               	movlw	low (STR_62+3)
  5976  0022EA  0100               	movlb	0	; () banked
  5977  0022EC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5978  0022EE  0E7F               	movlw	high (STR_62+3)
  5979  0022F0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5980  0022F2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5981                           
  5982                           ;ipv4.c: 215: UARTTransmitText(ipAdressToString(ip.source));
  5983  0022F6  C0D1  F073         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  5984  0022FA  C0D2  F074         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  5985  0022FE  C0D3  F075         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  5986  002302  C0D4  F076         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  5987  002306  EC67  F00F         	call	_ipAdressToString	;wreg free
  5988  00230A  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5989  00230E  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5990  002312  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5991                           
  5992                           ;ipv4.c: 216: UARTTransmitText(" -> ");
  5993  002316  0EC7               	movlw	low STR_79
  5994  002318  0100               	movlb	0	; () banked
  5995  00231A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5996  00231C  0E7F               	movlw	high STR_79
  5997  00231E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5998  002320  ECB4  F021         	call	_UARTTransmitText	;wreg free
  5999                           
  6000                           ;ipv4.c: 217: UARTTransmitText(ipAdressToString(ip.destination));
  6001  002324  C0D5  F073         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  6002  002328  C0D6  F074         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  6003  00232C  C0D7  F075         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  6004  002330  C0D8  F076         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  6005  002334  EC67  F00F         	call	_ipAdressToString	;wreg free
  6006  002338  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6007  00233C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6008  002340  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6009                           
  6010                           ;ipv4.c: 218: UARTTransmitText("][");
  6011  002344  0EF7               	movlw	low STR_13
  6012  002346  0100               	movlb	0	; () banked
  6013  002348  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6014  00234A  0E7F               	movlw	high STR_13
  6015  00234C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6016  00234E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6017                           
  6018                           ;ipv4.c: 219: UARTTransmitText((ipProtocolToString(ip.protocol)));
  6019  002352  0100               	movlb	0	; () banked
  6020  002354  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  6021  002356  ECF8  F022         	call	_ipProtocolToString
  6022  00235A  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  6023  00235E  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  6024  002362  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6025                           
  6026                           ;ipv4.c: 220: UARTTransmitText("][");
  6027  002366  0EF7               	movlw	low STR_13
  6028  002368  0100               	movlb	0	; () banked
  6029  00236A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6030  00236C  0E7F               	movlw	high STR_13
  6031  00236E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6032  002370  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6033                           
  6034                           ;ipv4.c: 221: UARTTransmitText(intToString(ip.totalLength));
  6035  002374  C0C6  F084         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  6036  002378  C0C7  F085         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  6037  00237C  0100               	movlb	0	; () banked
  6038  00237E  6B86               	clrf	(intToString@val+2)& (0+255),b
  6039  002380  6B87               	clrf	(intToString@val+3)& (0+255),b
  6040  002382  EC6A  F024         	call	_intToString	;wreg free
  6041  002386  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6042  00238A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6043  00238E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6044                           
  6045                           ;ipv4.c: 222: UARTTransmitText("][");
  6046  002392  0EF7               	movlw	low STR_13
  6047  002394  0100               	movlb	0	; () banked
  6048  002396  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6049  002398  0E7F               	movlw	high STR_13
  6050  00239A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6051  00239C  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6052                           
  6053                           ;ipv4.c: 223: UARTTransmitText(intToString(ip.version));
  6054  0023A0  0100               	movlb	0	; () banked
  6055  0023A2  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  6056  0023A4  6F84               	movwf	intToString@val& (0+255),b
  6057  0023A6  6B85               	clrf	(intToString@val+1)& (0+255),b
  6058  0023A8  6B86               	clrf	(intToString@val+2)& (0+255),b
  6059  0023AA  6B87               	clrf	(intToString@val+3)& (0+255),b
  6060  0023AC  EC6A  F024         	call	_intToString	;wreg free
  6061  0023B0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6062  0023B4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6063  0023B8  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6064                           
  6065                           ;ipv4.c: 224: UARTTransmitText(", ");
  6066  0023BC  0E66               	movlw	low (STR_37+17)
  6067  0023BE  0100               	movlb	0	; () banked
  6068  0023C0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6069  0023C2  0E7E               	movlw	high (STR_37+17)
  6070  0023C4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6071  0023C6  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6072                           
  6073                           ;ipv4.c: 225: UARTTransmitText(intToString(ip.headerLength));
  6074  0023CA  0100               	movlb	0	; () banked
  6075  0023CC  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  6076  0023CE  6F84               	movwf	intToString@val& (0+255),b
  6077  0023D0  6B85               	clrf	(intToString@val+1)& (0+255),b
  6078  0023D2  6B86               	clrf	(intToString@val+2)& (0+255),b
  6079  0023D4  6B87               	clrf	(intToString@val+3)& (0+255),b
  6080  0023D6  EC6A  F024         	call	_intToString	;wreg free
  6081  0023DA  C084  F098         	movff	?_intToString,UARTTransmitText@str
  6082  0023DE  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6083  0023E2  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6084                           
  6085                           ;ipv4.c: 226: UARTTransmitText("]");
  6086  0023E6  0EFB               	movlw	low (STR_19+1)
  6087  0023E8  0100               	movlb	0	; () banked
  6088  0023EA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6089  0023EC  0E7F               	movlw	high (STR_19+1)
  6090  0023EE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6091  0023F0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6092                           
  6093                           ;ipv4.c: 227: if (!ipv4_checkHeaderChecksum(&ip))
  6094  0023F4  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6095  0023F6  0100               	movlb	0	; () banked
  6096  0023F8  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6097  0023FA  0E00               	movlw	high ipv4_handleNewPacket@ip
  6098  0023FC  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6099  0023FE  EC83  F01A         	call	_ipv4_checkHeaderChecksum	;wreg free
  6100  002402  0100               	movlb	0	; () banked
  6101  002404  B0D8               	btfsc	status,0,c
  6102  002406  0012               	return	
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;ipv4.c: 228: UARTTransmitText("[INVALID CHECKSUM]");
  6106  002408  0E7D               	movlw	low STR_85
  6107  00240A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6108  00240C  0E7E               	movlw	high STR_85
  6109  00240E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6110  002410  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6111  002414  0012               	return	
  6112  002416                     __end_of_ipv4_handleNewPacket:
  6113                           	opt stack 0
  6114                           tblptru	equ	0xFF8
  6115                           tblptrh	equ	0xFF7
  6116                           tblptrl	equ	0xFF6
  6117                           tablat	equ	0xFF5
  6118                           intcon	equ	0xFF2
  6119                           intcon3	equ	0xFF0
  6120                           indf0	equ	0xFEF
  6121                           postinc0	equ	0xFEE
  6122                           plusw0	equ	0xFEB
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           postinc1	equ	0xFE6
  6127                           postdec1	equ	0xFE5
  6128                           plusw1	equ	0xFE3
  6129                           fsr1h	equ	0xFE2
  6130                           fsr1l	equ	0xFE1
  6131                           indf2	equ	0xFDF
  6132                           postinc2	equ	0xFDE
  6133                           postdec2	equ	0xFDD
  6134                           plusw2	equ	0xFDB
  6135                           fsr2h	equ	0xFDA
  6136                           fsr2l	equ	0xFD9
  6137                           status	equ	0xFD8
  6138                           
  6139 ;; *************** function _ipv4_parseHeader *****************
  6140 ;; Defined at:
  6141 ;;		line 141 in file "src/stack/protocols/ipv4.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;  field           2   20[BANK0 ] PTR struct memoryField
  6144 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  i               1   45[BANK0 ] unsigned char 
  6147 ;;  i               1   44[BANK0 ] unsigned char 
  6148 ;;  ip             23   47[BANK0 ] struct ipv4_header
  6149 ;;  temp            1   46[BANK0 ] unsigned char 
  6150 ;; Return value:  Size  Location     Type
  6151 ;;                  23   20[BANK0 ] struct ipv4_header
  6152 ;; Registers used:
  6153 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6154 ;; Tracked objects:
  6155 ;;		On entry : 0/0
  6156 ;;		On exit  : 0/0
  6157 ;;		Unchanged: 0/0
  6158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6159 ;;      Params:         0      23       0       0       0       0       0       0       0
  6160 ;;      Locals:         0      26       0       0       0       0       0       0       0
  6161 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6162 ;;      Totals:         0      50       0       0       0       0       0       0       0
  6163 ;;Total ram usage:       50 bytes
  6164 ;; Hardware stack levels used:    1
  6165 ;; Hardware stack levels required when called:    8
  6166 ;; This function calls:
  6167 ;;		_ethernetController_streamFromRXBuffer
  6168 ;; This function is called by:
  6169 ;;		_ipv4_handleNewPacket
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text13
  6174  001A46                     __ptext13:
  6175                           	opt stack 0
  6176  001A46                     _ipv4_parseHeader:
  6177                           	opt stack 19
  6178                           
  6179                           ;ipv4.c: 142: ipv4_header_t ip;
  6180                           ;ipv4.c: 143: uint8_t temp;
  6181                           ;ipv4.c: 145: ethernetController_streamFromRXBuffer(0, field->start);
  6182                           
  6183                           ;incstack = 0
  6184  001A46  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6185  001A4A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6186  001A4E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6187  001A52  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6188  001A56  0E00               	movlw	0
  6189  001A58  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6190                           
  6191                           ;ipv4.c: 147: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6192  001A5C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6193  001A60  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6194  001A64  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6195  001A68  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6196  001A6C  0E01               	movlw	1
  6197  001A6E  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6198  001A72  0100               	movlb	0	; () banked
  6199  001A74  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;ipv4.c: 148: ip.version = (temp & 0xf0) >> 4;
  6203  001A76  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  6204  001A78  0B0F               	andlw	15
  6205  001A7A  0B0F               	andlw	15
  6206  001A7C  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  6207                           
  6208                           ; BSR set to: 0
  6209                           ;ipv4.c: 149: ip.headerLength = temp & 0x0f;
  6210  001A7E  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6211  001A80  0B0F               	andlw	15
  6212  001A82  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  6213                           
  6214                           ;ipv4.c: 151: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6215  001A84  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6216  001A88  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6217  001A8C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6218  001A90  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6219  001A94  0E01               	movlw	1
  6220  001A96  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6221  001A9A  0100               	movlb	0	; () banked
  6222  001A9C  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6223                           
  6224                           ; BSR set to: 0
  6225                           ;ipv4.c: 152: ip.dscp = (temp & 0x1f);
  6226  001A9E  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6227  001AA0  0B1F               	andlw	31
  6228  001AA2  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  6229                           
  6230                           ; BSR set to: 0
  6231                           ;ipv4.c: 153: ip.ecn = (temp & 0xC0) >> 6;
  6232  001AA4  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6233  001AA6  46E8               	rlncf	wreg,f,c
  6234  001AA8  0B03               	andlw	3
  6235  001AAA  0B03               	andlw	3
  6236  001AAC  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  6237                           
  6238                           ;ipv4.c: 155: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  6239  001AAE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6240  001AB2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6241  001AB6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6242  001ABA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6243  001ABE  0E01               	movlw	1
  6244  001AC0  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6245  001AC4  0100               	movlb	0	; () banked
  6246  001AC6  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  6247  001AC8  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  6248                           
  6249                           ;ipv4.c: 156: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  6250  001ACA  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6251  001ACE  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6252  001AD2  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6253  001AD6  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6254  001ADA  0E01               	movlw	1
  6255  001ADC  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6256  001AE0  0100               	movlb	0	; () banked
  6257  001AE2  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6258  001AE4  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6259  001AE6  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  6260                           
  6261                           ;ipv4.c: 158: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  6262  001AE8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6263  001AEC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6264  001AF0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6265  001AF4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6266  001AF8  0E01               	movlw	1
  6267  001AFA  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6268  001AFE  0100               	movlb	0	; () banked
  6269  001B00  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  6270  001B02  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  6271                           
  6272                           ;ipv4.c: 159: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6273  001B04  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6274  001B08  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6275  001B0C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6276  001B10  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6277  001B14  0E01               	movlw	1
  6278  001B16  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6279  001B1A  0100               	movlb	0	; () banked
  6280  001B1C  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6281  001B1E  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6282  001B20  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  6283                           
  6284                           ;ipv4.c: 161: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6285  001B22  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6286  001B26  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6287  001B2A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6288  001B2E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6289  001B32  0E01               	movlw	1
  6290  001B34  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6291  001B38  0100               	movlb	0	; () banked
  6292  001B3A  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  6293                           
  6294                           ; BSR set to: 0
  6295                           ;ipv4.c: 162: ip.flags = ((temp & 0xC0) >> 6);
  6296  001B3C  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6297  001B3E  46E8               	rlncf	wreg,f,c
  6298  001B40  0B03               	andlw	3
  6299  001B42  0B03               	andlw	3
  6300  001B44  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  6301                           
  6302                           ; BSR set to: 0
  6303                           ;ipv4.c: 163: ip.fragmentOffset = ((temp & 0x1f) << 8);
  6304  001B46  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6305  001B48  0B1F               	andlw	31
  6306  001B4A  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  6307  001B4C  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  6308                           
  6309                           ;ipv4.c: 165: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6310  001B4E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6311  001B52  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6312  001B56  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6313  001B5A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6314  001B5E  0E01               	movlw	1
  6315  001B60  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6316  001B64  0100               	movlb	0	; () banked
  6317  001B66  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6318  001B68  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6319  001B6A  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  6320                           
  6321                           ;ipv4.c: 167: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  6322  001B6C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6323  001B70  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6324  001B74  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6325  001B78  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6326  001B7C  0E01               	movlw	1
  6327  001B7E  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6328  001B82  0100               	movlb	0	; () banked
  6329  001B84  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  6330                           
  6331                           ;ipv4.c: 169: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  6332  001B86  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6333  001B8A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6334  001B8E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6335  001B92  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6336  001B96  0E01               	movlw	1
  6337  001B98  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6338  001B9C  0100               	movlb	0	; () banked
  6339  001B9E  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  6340                           
  6341                           ;ipv4.c: 171: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  6342  001BA0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6343  001BA4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6344  001BA8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6345  001BAC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6346  001BB0  0E01               	movlw	1
  6347  001BB2  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6348  001BB6  0100               	movlb	0	; () banked
  6349  001BB8  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  6350  001BBA  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  6351                           
  6352                           ;ipv4.c: 172: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  6353  001BBC  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6354  001BC0  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6355  001BC4  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6356  001BC8  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6357  001BCC  0E01               	movlw	1
  6358  001BCE  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6359  001BD2  0100               	movlb	0	; () banked
  6360  001BD4  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6361  001BD6  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  6362  001BD8  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  6363                           
  6364                           ; BSR set to: 0
  6365                           ;ipv4.c: 174: for (uint8_t i = 0; i < 4; i++)
  6366  001BDA  0E00               	movlw	0
  6367  001BDC  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  6368  001BDE                     l8879:
  6369                           
  6370                           ; BSR set to: 0
  6371  001BDE  0E03               	movlw	3
  6372  001BE0  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  6373  001BE2  D001               	goto	l1081
  6374  001BE4  D01D               	goto	u10530
  6375  001BE6                     l1081:
  6376                           
  6377                           ; BSR set to: 0
  6378                           ;ipv4.c: 175: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  6379                           
  6380                           ; BSR set to: 0
  6381  001BE6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6382  001BEA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6383  001BEE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6384  001BF2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6385  001BF6  0E01               	movlw	1
  6386  001BF8  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6387  001BFC  0100               	movlb	0	; () banked
  6388  001BFE  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6389  001C00  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  6390  001C02  0D01               	mullw	1
  6391  001C04  0E0F               	movlw	15
  6392  001C06  26F3               	addwf	prodl,f,c
  6393  001C08  0E00               	movlw	0
  6394  001C0A  22F4               	addwfc	prodh,f,c
  6395  001C0C  0E8F               	movlw	low ipv4_parseHeader@ip
  6396  001C0E  24F3               	addwf	prodl,w,c
  6397  001C10  6ED9               	movwf	fsr2l,c
  6398  001C12  0E00               	movlw	high ipv4_parseHeader@ip
  6399  001C14  20F4               	addwfc	prodh,w,c
  6400  001C16  6EDA               	movwf	fsr2h,c
  6401  001C18  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6402                           
  6403                           ; BSR set to: 0
  6404  001C1C  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  6405  001C1E  D7DF               	goto	l8879
  6406  001C20                     u10530:
  6407                           
  6408                           ; BSR set to: 0
  6409                           ;ipv4.c: 177: for (uint8_t i = 0; i < 4; i++)
  6410                           
  6411                           ; BSR set to: 0
  6412  001C20  0E00               	movlw	0
  6413  001C22  6F8D               	movwf	ipv4_parseHeader@i_3583& (0+255),b
  6414  001C24                     l8891:
  6415                           
  6416                           ; BSR set to: 0
  6417  001C24  0E03               	movlw	3
  6418  001C26  658D               	cpfsgt	ipv4_parseHeader@i_3583& (0+255),b
  6419  001C28  D001               	goto	l1083
  6420  001C2A  D01D               	goto	u10550
  6421  001C2C                     l1083:
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;ipv4.c: 178: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  6425                           
  6426                           ; BSR set to: 0
  6427  001C2C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6428  001C30  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6429  001C34  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6430  001C38  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6431  001C3C  0E01               	movlw	1
  6432  001C3E  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6433  001C42  0100               	movlb	0	; () banked
  6434  001C44  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  6435  001C46  518D               	movf	ipv4_parseHeader@i_3583& (0+255),w,b
  6436  001C48  0D01               	mullw	1
  6437  001C4A  0E13               	movlw	19
  6438  001C4C  26F3               	addwf	prodl,f,c
  6439  001C4E  0E00               	movlw	0
  6440  001C50  22F4               	addwfc	prodh,f,c
  6441  001C52  0E8F               	movlw	low ipv4_parseHeader@ip
  6442  001C54  24F3               	addwf	prodl,w,c
  6443  001C56  6ED9               	movwf	fsr2l,c
  6444  001C58  0E00               	movlw	high ipv4_parseHeader@ip
  6445  001C5A  20F4               	addwfc	prodh,w,c
  6446  001C5C  6EDA               	movwf	fsr2h,c
  6447  001C5E  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  6448                           
  6449                           ; BSR set to: 0
  6450  001C62  2B8D               	incf	ipv4_parseHeader@i_3583& (0+255),f,b
  6451  001C64  D7DF               	goto	l8891
  6452  001C66                     u10550:
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;ipv4.c: 180: ethernetController_streamFromRXBuffer(2, field->start);
  6456                           
  6457                           ; BSR set to: 0
  6458  001C66  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6459  001C6A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6460  001C6E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6461  001C72  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6462  001C76  0E02               	movlw	2
  6463  001C78  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
  6464                           
  6465                           ;ipv4.c: 182: return ip;
  6466  001C7C  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  6467  001C80  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  6468  001C84  0E16               	movlw	22
  6469  001C86                     u10561:
  6470  001C86  CFDB FFEB          	movff	plusw2,plusw0
  6471  001C8A  06E8               	decf	wreg,f,c
  6472  001C8C  E2FC               	bc	u10561
  6473  001C8E  0012               	return	
  6474  001C90                     __end_of_ipv4_parseHeader:
  6475                           	opt stack 0
  6476                           tblptru	equ	0xFF8
  6477                           tblptrh	equ	0xFF7
  6478                           tblptrl	equ	0xFF6
  6479                           tablat	equ	0xFF5
  6480                           prodh	equ	0xFF4
  6481                           prodl	equ	0xFF3
  6482                           intcon	equ	0xFF2
  6483                           intcon3	equ	0xFF0
  6484                           indf0	equ	0xFEF
  6485                           postinc0	equ	0xFEE
  6486                           plusw0	equ	0xFEB
  6487                           fsr0h	equ	0xFEA
  6488                           fsr0l	equ	0xFE9
  6489                           wreg	equ	0xFE8
  6490                           postinc1	equ	0xFE6
  6491                           postdec1	equ	0xFE5
  6492                           plusw1	equ	0xFE3
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           plusw2	equ	0xFDB
  6499                           fsr2h	equ	0xFDA
  6500                           fsr2l	equ	0xFD9
  6501                           status	equ	0xFD8
  6502                           
  6503 ;; *************** function _ipv4_checkHeaderChecksum *****************
  6504 ;; Defined at:
  6505 ;;		line 185 in file "src/stack/protocols/ipv4.c"
  6506 ;; Parameters:    Size  Location     Type
  6507 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  6508 ;;		 -> ipv4_handleNewPacket@ip(23), 
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  6511 ;; Return value:  Size  Location     Type
  6512 ;;		None               void
  6513 ;; Registers used:
  6514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6520 ;;      Params:         0       2       0       0       0       0       0       0       0
  6521 ;;      Locals:         0      23       0       0       0       0       0       0       0
  6522 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6523 ;;      Totals:         0      27       0       0       0       0       0       0       0
  6524 ;;Total ram usage:       27 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    6
  6527 ;; This function calls:
  6528 ;;		_UARTTransmitText
  6529 ;;		_hexToString
  6530 ;;		_ipv4_calculateHeaderChecksum
  6531 ;; This function is called by:
  6532 ;;		_ipv4_handleNewPacket
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text14
  6537  003506                     __ptext14:
  6538                           	opt stack 0
  6539  003506                     _ipv4_checkHeaderChecksum:
  6540                           	opt stack 21
  6541                           
  6542                           ;ipv4.c: 186: ipv4_header_t testHeader;
  6543                           ;ipv4.c: 187: testHeader = *header;
  6544                           
  6545                           ;incstack = 0
  6546  003506  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  6547  00350A  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  6548  00350E  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  6549  003512  0E16               	movlw	22
  6550  003514                     u10571:
  6551  003514  CFDB FFE3          	movff	plusw2,plusw1
  6552  003518  06E8               	decf	wreg,f,c
  6553  00351A  E2FC               	bc	u10571
  6554                           
  6555                           ;ipv4.c: 188: testHeader.checksum = 0x0000;
  6556  00351C  0E00               	movlw	0
  6557  00351E  0100               	movlb	0	; () banked
  6558  003520  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  6559  003522  0E00               	movlw	0
  6560  003524  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  6561                           
  6562                           ; BSR set to: 0
  6563                           ;ipv4.c: 189: ipv4_calculateHeaderChecksum(&testHeader);
  6564  003526  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  6565  003528  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  6566  00352A  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  6567  00352C  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  6568  00352E  EC02  F009         	call	_ipv4_calculateHeaderChecksum	;wreg free
  6569                           
  6570                           ;ipv4.c: 190: if (testHeader.checksum == header->checksum) {
  6571  003532  0100               	movlb	0	; () banked
  6572  003534  EE20 F00D          	lfsr	2,13
  6573  003538  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6574  00353A  26D9               	addwf	fsr2l,f,c
  6575  00353C  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6576  00353E  22DA               	addwfc	fsr2h,f,c
  6577  003540  50DE               	movf	postinc2,w,c
  6578  003542  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  6579  003544  E106               	bnz	l8919
  6580  003546  50DE               	movf	postinc2,w,c
  6581  003548  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  6582  00354A  A4D8               	btfss	status,2,c
  6583  00354C  D002               	goto	l1088
  6584                           
  6585                           ; BSR set to: 0
  6586                           ;ipv4.c: 191: return 1;
  6587  00354E  80D8               	bsf	status,0,c
  6588                           
  6589                           ; BSR set to: 0
  6590  003550  0012               	return	
  6591  003552                     l1088:
  6592  003552                     l8919:
  6593                           
  6594                           ; BSR set to: 0
  6595                           ;ipv4.c: 192: }
  6596                           ;ipv4.c: 193: UARTTransmitText("[Expected ");
  6597  003552  0E7A               	movlw	low STR_75
  6598  003554  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6599  003556  0E7F               	movlw	high STR_75
  6600  003558  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6601  00355A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6602                           
  6603                           ;ipv4.c: 194: UARTTransmitText(hexToString(testHeader.checksum));
  6604  00355E  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  6605  003562  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  6606  003566  0100               	movlb	0	; () banked
  6607  003568  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6608  00356A  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6609  00356C  ECB4  F018         	call	_hexToString	;wreg free
  6610  003570  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6611  003574  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6612  003578  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6613                           
  6614                           ;ipv4.c: 195: UARTTransmitText(", got ");
  6615  00357C  0EB3               	movlw	low STR_76
  6616  00357E  0100               	movlb	0	; () banked
  6617  003580  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6618  003582  0E7F               	movlw	high STR_76
  6619  003584  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6620  003586  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6621                           
  6622                           ;ipv4.c: 196: UARTTransmitText(hexToString(header->checksum));
  6623  00358A  0100               	movlb	0	; () banked
  6624  00358C  EE20 F00D          	lfsr	2,13
  6625  003590  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  6626  003592  26D9               	addwf	fsr2l,f,c
  6627  003594  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  6628  003596  22DA               	addwfc	fsr2h,f,c
  6629  003598  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  6630  00359C  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  6631  0035A0  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  6632  0035A4  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  6633  0035A8  6B63               	clrf	(hexToString@val+2)& (0+255),b
  6634  0035AA  6B64               	clrf	(hexToString@val+3)& (0+255),b
  6635  0035AC  ECB4  F018         	call	_hexToString	;wreg free
  6636  0035B0  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  6637  0035B4  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  6638  0035B8  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6639                           
  6640                           ;ipv4.c: 197: UARTTransmitText("]");
  6641  0035BC  0EFB               	movlw	low (STR_19+1)
  6642  0035BE  0100               	movlb	0	; () banked
  6643  0035C0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6644  0035C2  0E7F               	movlw	high (STR_19+1)
  6645  0035C4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6646  0035C6  ECB4  F021         	call	_UARTTransmitText	;wreg free
  6647                           
  6648                           ;ipv4.c: 198: return 0;
  6649  0035CA  90D8               	bcf	status,0,c
  6650  0035CC  0012               	return	
  6651  0035CE                     __end_of_ipv4_checkHeaderChecksum:
  6652                           	opt stack 0
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon3	equ	0xFF0
  6661                           indf0	equ	0xFEF
  6662                           postinc0	equ	0xFEE
  6663                           plusw0	equ	0xFEB
  6664                           fsr0h	equ	0xFEA
  6665                           fsr0l	equ	0xFE9
  6666                           wreg	equ	0xFE8
  6667                           postinc1	equ	0xFE6
  6668                           postdec1	equ	0xFE5
  6669                           plusw1	equ	0xFE3
  6670                           fsr1h	equ	0xFE2
  6671                           fsr1l	equ	0xFE1
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           plusw2	equ	0xFDB
  6676                           fsr2h	equ	0xFDA
  6677                           fsr2l	equ	0xFD9
  6678                           status	equ	0xFD8
  6679                           
  6680 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  6681 ;; Defined at:
  6682 ;;		line 121 in file "src/stack/protocols/ipv4.c"
  6683 ;; Parameters:    Size  Location     Type
  6684 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  6685 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  sum             4   14[BANK0 ] unsigned long 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  1    wreg      void 
  6690 ;; Registers used:
  6691 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6697 ;;      Params:         0       2       0       0       0       0       0       0       0
  6698 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6699 ;;      Temps:          0      12       0       0       0       0       0       0       0
  6700 ;;      Totals:         0      18       0       0       0       0       0       0       0
  6701 ;;Total ram usage:       18 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    4
  6704 ;; This function calls:
  6705 ;;		Nothing
  6706 ;; This function is called by:
  6707 ;;		_ipv4_checkHeaderChecksum
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text15
  6712  001204                     __ptext15:
  6713                           	opt stack 0
  6714  001204                     _ipv4_calculateHeaderChecksum:
  6715                           	opt stack 22
  6716                           
  6717                           ;ipv4.c: 123: uint32_t sum = 0;
  6718                           
  6719                           ;incstack = 0
  6720  001204  0E00               	movlw	0
  6721  001206  0100               	movlb	0	; () banked
  6722  001208  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  6723  00120A  0E00               	movlw	0
  6724  00120C  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  6725  00120E  0E00               	movlw	0
  6726  001210  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6727  001212  0E00               	movlw	0
  6728  001214  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6729                           
  6730                           ; BSR set to: 0
  6731                           ;ipv4.c: 124: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
  6732  001216  EE20 F002          	lfsr	2,2
  6733  00121A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6734  00121C  26D9               	addwf	fsr2l,f,c
  6735  00121E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6736  001220  22DA               	addwfc	fsr2h,f,c
  6737  001222  50DF               	movf	indf2,w,c
  6738  001224  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6739  001226  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6740  001228  90D8               	bcf	status,0,c
  6741  00122A  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6742  00122C  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6743  00122E  90D8               	bcf	status,0,c
  6744  001230  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  6745  001232  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6746  001234  EE20 F001          	lfsr	2,1
  6747  001238  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6748  00123A  26D9               	addwf	fsr2l,f,c
  6749  00123C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6750  00123E  22DA               	addwfc	fsr2h,f,c
  6751  001240  50DF               	movf	indf2,w,c
  6752  001242  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6753  001244  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6754  001246  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6755  001248  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6756  00124A  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  6757  00124E  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  6758  001252  50DF               	movf	indf2,w,c
  6759  001254  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  6760  001256  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  6761  001258  0E0C               	movlw	12
  6762  00125A                     u9705:
  6763  00125A  90D8               	bcf	status,0,c
  6764  00125C  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6765  00125E  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6766  001260  2EE8               	decfsz	wreg,f,c
  6767  001262  D7FB               	goto	u9705
  6768  001264  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6769  001266  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6770  001268  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6771  00126A  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6772  00126C  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6773  00126E  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6774  001270  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6775  001272  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6776  001274  EE20 F003          	lfsr	2,3
  6777  001278  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6778  00127A  26D9               	addwf	fsr2l,f,c
  6779  00127C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6780  00127E  22DA               	addwfc	fsr2h,f,c
  6781  001280  50DF               	movf	indf2,w,c
  6782  001282  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  6783  001284  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  6784  001286  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  6785  001288  0E00               	movlw	0
  6786  00128A  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  6787  00128C  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  6788  001290  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  6789  001294  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  6790  001296  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;ipv4.c: 125: sum += header->totalLength;
  6794  001298  EE20 F004          	lfsr	2,4
  6795  00129C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6796  00129E  26D9               	addwf	fsr2l,f,c
  6797  0012A0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6798  0012A2  22DA               	addwfc	fsr2h,f,c
  6799  0012A4  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6800  0012A8  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6801  0012AC  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6802  0012AE  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6803  0012B0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6804  0012B2  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6805  0012B4  0E00               	movlw	0
  6806  0012B6  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6807  0012B8  0E00               	movlw	0
  6808  0012BA  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;ipv4.c: 126: sum += header->identification;
  6812  0012BC  EE20 F006          	lfsr	2,6
  6813  0012C0  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6814  0012C2  26D9               	addwf	fsr2l,f,c
  6815  0012C4  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6816  0012C6  22DA               	addwfc	fsr2h,f,c
  6817  0012C8  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6818  0012CC  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6819  0012D0  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6820  0012D2  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6821  0012D4  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6822  0012D6  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6823  0012D8  0E00               	movlw	0
  6824  0012DA  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6825  0012DC  0E00               	movlw	0
  6826  0012DE  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;ipv4.c: 127: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  6830  0012E0  EE20 F009          	lfsr	2,9
  6831  0012E4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6832  0012E6  26D9               	addwf	fsr2l,f,c
  6833  0012E8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6834  0012EA  22DA               	addwfc	fsr2h,f,c
  6835  0012EC  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  6836  0012F0  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  6837  0012F4  EE20 F008          	lfsr	2,8
  6838  0012F8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6839  0012FA  26D9               	addwf	fsr2l,f,c
  6840  0012FC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6841  0012FE  22DA               	addwfc	fsr2h,f,c
  6842  001300  50DF               	movf	indf2,w,c
  6843  001302  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6844  001304  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6845  001306  0E0D               	movlw	13
  6846  001308                     u9715:
  6847  001308  90D8               	bcf	status,0,c
  6848  00130A  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6849  00130C  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6850  00130E  2EE8               	decfsz	wreg,f,c
  6851  001310  D7FB               	goto	u9715
  6852  001312  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6853  001314  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6854  001316  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6855  001318  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6856  00131A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6857  00131C  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6858  00131E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6859  001320  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6860  001322  0E00               	movlw	0
  6861  001324  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6862  001326  0E00               	movlw	0
  6863  001328  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6864                           
  6865                           ; BSR set to: 0
  6866                           ;ipv4.c: 128: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  6867  00132A  EE20 F00B          	lfsr	2,11
  6868  00132E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6869  001330  26D9               	addwf	fsr2l,f,c
  6870  001332  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6871  001334  22DA               	addwfc	fsr2h,f,c
  6872  001336  50DF               	movf	indf2,w,c
  6873  001338  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6874  00133A  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6875  00133C  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6876  00133E  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6877  001340  EE20 F00C          	lfsr	2,12
  6878  001344  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6879  001346  26D9               	addwf	fsr2l,f,c
  6880  001348  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6881  00134A  22DA               	addwfc	fsr2h,f,c
  6882  00134C  50DF               	movf	indf2,w,c
  6883  00134E  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6884  001350  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6885  001352  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  6886  001354  0E00               	movlw	0
  6887  001356  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  6888  001358  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6889  00135A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6890  00135C  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6891  00135E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6892  001360  0E00               	movlw	0
  6893  001362  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6894  001364  0E00               	movlw	0
  6895  001366  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;ipv4.c: 130: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
  6899  001368  EE20 F00F          	lfsr	2,15
  6900  00136C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6901  00136E  26D9               	addwf	fsr2l,f,c
  6902  001370  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6903  001372  22DA               	addwfc	fsr2h,f,c
  6904  001374  50DF               	movf	indf2,w,c
  6905  001376  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6906  001378  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6907  00137A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6908  00137C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6909  00137E  EE20 F010          	lfsr	2,16
  6910  001382  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6911  001384  26D9               	addwf	fsr2l,f,c
  6912  001386  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6913  001388  22DA               	addwfc	fsr2h,f,c
  6914  00138A  50DF               	movf	indf2,w,c
  6915  00138C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6916  00138E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6917  001390  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6918  001392  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6919  001394  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6920  001396  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6921  001398  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6922  00139A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6923  00139C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6924  00139E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6925  0013A0  0E00               	movlw	0
  6926  0013A2  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6927  0013A4  0E00               	movlw	0
  6928  0013A6  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;ipv4.c: 131: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  6932  0013A8  EE20 F011          	lfsr	2,17
  6933  0013AC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6934  0013AE  26D9               	addwf	fsr2l,f,c
  6935  0013B0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6936  0013B2  22DA               	addwfc	fsr2h,f,c
  6937  0013B4  50DF               	movf	indf2,w,c
  6938  0013B6  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6939  0013B8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6940  0013BA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6941  0013BC  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6942  0013BE  EE20 F012          	lfsr	2,18
  6943  0013C2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6944  0013C4  26D9               	addwf	fsr2l,f,c
  6945  0013C6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6946  0013C8  22DA               	addwfc	fsr2h,f,c
  6947  0013CA  50DF               	movf	indf2,w,c
  6948  0013CC  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6949  0013CE  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6950  0013D0  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6951  0013D2  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6952  0013D4  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6953  0013D6  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6954  0013D8  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6955  0013DA  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6956  0013DC  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6957  0013DE  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6958  0013E0  0E00               	movlw	0
  6959  0013E2  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6960  0013E4  0E00               	movlw	0
  6961  0013E6  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6962                           
  6963                           ; BSR set to: 0
  6964                           ;ipv4.c: 132: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  6965  0013E8  EE20 F013          	lfsr	2,19
  6966  0013EC  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6967  0013EE  26D9               	addwf	fsr2l,f,c
  6968  0013F0  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6969  0013F2  22DA               	addwfc	fsr2h,f,c
  6970  0013F4  50DF               	movf	indf2,w,c
  6971  0013F6  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  6972  0013F8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  6973  0013FA  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  6974  0013FC  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  6975  0013FE  EE20 F014          	lfsr	2,20
  6976  001402  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  6977  001404  26D9               	addwf	fsr2l,f,c
  6978  001406  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  6979  001408  22DA               	addwfc	fsr2h,f,c
  6980  00140A  50DF               	movf	indf2,w,c
  6981  00140C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  6982  00140E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  6983  001410  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  6984  001412  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  6985  001414  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  6986  001416  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  6987  001418  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  6988  00141A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  6989  00141C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  6990  00141E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  6991  001420  0E00               	movlw	0
  6992  001422  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  6993  001424  0E00               	movlw	0
  6994  001426  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  6995                           
  6996                           ; BSR set to: 0
  6997                           ;ipv4.c: 133: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  6998  001428  EE20 F015          	lfsr	2,21
  6999  00142C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7000  00142E  26D9               	addwf	fsr2l,f,c
  7001  001430  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7002  001432  22DA               	addwfc	fsr2h,f,c
  7003  001434  50DF               	movf	indf2,w,c
  7004  001436  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7005  001438  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7006  00143A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7007  00143C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7008  00143E  EE20 F016          	lfsr	2,22
  7009  001442  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7010  001444  26D9               	addwf	fsr2l,f,c
  7011  001446  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7012  001448  22DA               	addwfc	fsr2h,f,c
  7013  00144A  50DF               	movf	indf2,w,c
  7014  00144C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7015  00144E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7016  001450  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7017  001452  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7018  001454  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7019  001456  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7020  001458  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7021  00145A  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7022  00145C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7023  00145E  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7024  001460  0E00               	movlw	0
  7025  001462  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7026  001464  0E00               	movlw	0
  7027  001466  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030                           ;ipv4.c: 135: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  7031  001468  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7032  00146C  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7033  001470  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7034  001474  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7035  001478  0E11               	movlw	17
  7036  00147A  D005               	goto	u9720
  7037  00147C                     u9725:
  7038  00147C  90D8               	bcf	status,0,c
  7039  00147E  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7040  001480  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7041  001482  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7042  001484  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7043  001486                     u9720:
  7044  001486  2EE8               	decfsz	wreg,f,c
  7045  001488  D7F9               	goto	u9725
  7046  00148A  0E0F               	movlw	15
  7047  00148C  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7048  00148E  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7049  001490  0E00               	movlw	0
  7050  001492  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7051  001494  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7052  001496  0E00               	movlw	0
  7053  001498  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7054  00149A  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7055  00149C  0E00               	movlw	0
  7056  00149E  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7057  0014A0  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7058  0014A2  0EFF               	movlw	255
  7059  0014A4  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  7060  0014A6  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  7061  0014A8  0EFF               	movlw	255
  7062  0014AA  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  7063  0014AC  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  7064  0014AE  0E00               	movlw	0
  7065  0014B0  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  7066  0014B2  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  7067  0014B4  0E00               	movlw	0
  7068  0014B6  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  7069  0014B8  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  7070  0014BA  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7071  0014BC  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  7072  0014BE  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7073  0014C0  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  7074  0014C2  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  7075  0014C4  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7076  0014C6  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  7077  0014C8  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  7078  0014CA  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7079  0014CC  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7080  0014CE  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  7081  0014D0  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7082                           
  7083                           ; BSR set to: 0
  7084                           ;ipv4.c: 136: sum = ~sum;
  7085  0014D2  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7086  0014D6  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7087  0014DA  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7088  0014DE  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7089  0014E2  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7090  0014E4  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7091  0014E6  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7092  0014E8  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7093  0014EA  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7094  0014EE  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7095  0014F2  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7096  0014F6  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7097                           
  7098                           ; BSR set to: 0
  7099                           ;ipv4.c: 138: header->checksum = sum;
  7100  0014FA  EE20 F00D          	lfsr	2,13
  7101  0014FE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7102  001500  26D9               	addwf	fsr2l,f,c
  7103  001502  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7104  001504  22DA               	addwfc	fsr2h,f,c
  7105  001506  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  7106  00150A  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  7107                           
  7108                           ; BSR set to: 0
  7109  00150E  0012               	return		;funcret
  7110  001510                     __end_of_ipv4_calculateHeaderChecksum:
  7111                           	opt stack 0
  7112                           tblptru	equ	0xFF8
  7113                           tblptrh	equ	0xFF7
  7114                           tblptrl	equ	0xFF6
  7115                           tablat	equ	0xFF5
  7116                           prodh	equ	0xFF4
  7117                           prodl	equ	0xFF3
  7118                           intcon	equ	0xFF2
  7119                           intcon3	equ	0xFF0
  7120                           indf0	equ	0xFEF
  7121                           postinc0	equ	0xFEE
  7122                           plusw0	equ	0xFEB
  7123                           fsr0h	equ	0xFEA
  7124                           fsr0l	equ	0xFE9
  7125                           wreg	equ	0xFE8
  7126                           postinc1	equ	0xFE6
  7127                           postdec1	equ	0xFE5
  7128                           plusw1	equ	0xFE3
  7129                           fsr1h	equ	0xFE2
  7130                           fsr1l	equ	0xFE1
  7131                           indf2	equ	0xFDF
  7132                           postinc2	equ	0xFDE
  7133                           postdec2	equ	0xFDD
  7134                           plusw2	equ	0xFDB
  7135                           fsr2h	equ	0xFDA
  7136                           fsr2l	equ	0xFD9
  7137                           status	equ	0xFD8
  7138                           
  7139 ;; *************** function _hexToString *****************
  7140 ;; Defined at:
  7141 ;;		line 93 in file "src/system/uart.c"
  7142 ;; Parameters:    Size  Location     Type
  7143 ;;  val             4    1[BANK0 ] unsigned long 
  7144 ;; Auto vars:     Size  Location     Type
  7145 ;;  pointer         1    9[BANK0 ] unsigned char 
  7146 ;; Return value:  Size  Location     Type
  7147 ;;                  2    1[BANK0 ] PTR unsigned char 
  7148 ;; Registers used:
  7149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7150 ;; Tracked objects:
  7151 ;;		On entry : 0/0
  7152 ;;		On exit  : 0/0
  7153 ;;		Unchanged: 0/0
  7154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7155 ;;      Params:         0       4       0       0       0       0       0       0       0
  7156 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7157 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7158 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7159 ;;Total ram usage:        9 bytes
  7160 ;; Hardware stack levels used:    1
  7161 ;; Hardware stack levels required when called:    5
  7162 ;; This function calls:
  7163 ;;		_hexToChar
  7164 ;; This function is called by:
  7165 ;;		_ipv4_checkHeaderChecksum
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text16
  7170  003168                     __ptext16:
  7171                           	opt stack 0
  7172  003168                     _hexToString:
  7173                           	opt stack 21
  7174                           
  7175                           ;uart.c: 94: char static number [10];
  7176                           ;uart.c: 95: uint8_t pointer = 0;
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;incstack = 0
  7180  003168  0E00               	movlw	0
  7181  00316A  0100               	movlb	0	; () banked
  7182  00316C  6F69               	movwf	hexToString@pointer& (0+255),b
  7183                           
  7184                           ; BSR set to: 0
  7185                           ;uart.c: 96: if (val > 0xff) {
  7186  00316E  5164               	movf	(hexToString@val+3)& (0+255),w,b
  7187  003170  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  7188  003172  E103               	bnz	u9340
  7189  003174  0562               	decf	(hexToString@val+1)& (0+255),w,b
  7190  003176  A0D8               	btfss	status,0,c
  7191  003178  D02F               	goto	l781
  7192  00317A                     u9340:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;uart.c: 97: number[pointer++] = hexToChar((val >> 12) & 0xf);
  7196  00317A  5169               	movf	hexToString@pointer& (0+255),w,b
  7197  00317C  0D01               	mullw	1
  7198  00317E  0EB1               	movlw	low hexToString@number
  7199  003180  24F3               	addwf	prodl,w,c
  7200  003182  6ED9               	movwf	fsr2l,c
  7201  003184  0E02               	movlw	high hexToString@number
  7202  003186  20F4               	addwfc	prodh,w,c
  7203  003188  6EDA               	movwf	fsr2h,c
  7204  00318A  C061  F065         	movff	hexToString@val,??_hexToString
  7205  00318E  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7206  003192  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7207  003196  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7208  00319A  0E0D               	movlw	13
  7209  00319C  D005               	goto	u9350
  7210  00319E                     u9355:
  7211  00319E  90D8               	bcf	status,0,c
  7212  0031A0  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7213  0031A2  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7214  0031A4  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7215  0031A6  3365               	rrcf	??_hexToString& (0+255),f,b
  7216  0031A8                     u9350:
  7217  0031A8  2EE8               	decfsz	wreg,f,c
  7218  0031AA  D7F9               	goto	u9355
  7219  0031AC  5165               	movf	??_hexToString& (0+255),w,b
  7220  0031AE  0B0F               	andlw	15
  7221  0031B0  ECA4  F025         	call	_hexToChar
  7222  0031B4  6EDF               	movwf	indf2,c
  7223  0031B6  0100               	movlb	0	; () banked
  7224  0031B8  2B69               	incf	hexToString@pointer& (0+255),f,b
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;uart.c: 98: number[pointer++] = hexToChar((val >> 8) & 0xf);
  7228  0031BA  5169               	movf	hexToString@pointer& (0+255),w,b
  7229  0031BC  0D01               	mullw	1
  7230  0031BE  0EB1               	movlw	low hexToString@number
  7231  0031C0  24F3               	addwf	prodl,w,c
  7232  0031C2  6ED9               	movwf	fsr2l,c
  7233  0031C4  0E02               	movlw	high hexToString@number
  7234  0031C6  20F4               	addwfc	prodh,w,c
  7235  0031C8  6EDA               	movwf	fsr2h,c
  7236  0031CA  5162               	movf	(hexToString@val+1)& (0+255),w,b
  7237  0031CC  0B0F               	andlw	15
  7238  0031CE  ECA4  F025         	call	_hexToChar
  7239  0031D2  6EDF               	movwf	indf2,c
  7240  0031D4  0100               	movlb	0	; () banked
  7241  0031D6  2B69               	incf	hexToString@pointer& (0+255),f,b
  7242  0031D8                     l781:
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;uart.c: 99: }
  7246                           ;uart.c: 100: number[pointer++] = hexToChar((val >> 4) & 0xf);
  7247                           
  7248                           ; BSR set to: 0
  7249  0031D8  5169               	movf	hexToString@pointer& (0+255),w,b
  7250  0031DA  0D01               	mullw	1
  7251  0031DC  0EB1               	movlw	low hexToString@number
  7252  0031DE  24F3               	addwf	prodl,w,c
  7253  0031E0  6ED9               	movwf	fsr2l,c
  7254  0031E2  0E02               	movlw	high hexToString@number
  7255  0031E4  20F4               	addwfc	prodh,w,c
  7256  0031E6  6EDA               	movwf	fsr2h,c
  7257  0031E8  C061  F065         	movff	hexToString@val,??_hexToString
  7258  0031EC  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7259  0031F0  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7260  0031F4  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7261  0031F8  0E05               	movlw	5
  7262  0031FA  D005               	goto	u9360
  7263  0031FC                     u9365:
  7264  0031FC  90D8               	bcf	status,0,c
  7265  0031FE  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7266  003200  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7267  003202  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7268  003204  3365               	rrcf	??_hexToString& (0+255),f,b
  7269  003206                     u9360:
  7270  003206  2EE8               	decfsz	wreg,f,c
  7271  003208  D7F9               	goto	u9365
  7272  00320A  5165               	movf	??_hexToString& (0+255),w,b
  7273  00320C  0B0F               	andlw	15
  7274  00320E  ECA4  F025         	call	_hexToChar
  7275  003212  6EDF               	movwf	indf2,c
  7276  003214  0100               	movlb	0	; () banked
  7277  003216  2B69               	incf	hexToString@pointer& (0+255),f,b
  7278                           
  7279                           ;uart.c: 101: number[pointer++] = hexToChar(val & 0xf);
  7280  003218  5169               	movf	hexToString@pointer& (0+255),w,b
  7281  00321A  0D01               	mullw	1
  7282  00321C  0EB1               	movlw	low hexToString@number
  7283  00321E  24F3               	addwf	prodl,w,c
  7284  003220  6ED9               	movwf	fsr2l,c
  7285  003222  0E02               	movlw	high hexToString@number
  7286  003224  20F4               	addwfc	prodh,w,c
  7287  003226  6EDA               	movwf	fsr2h,c
  7288  003228  5161               	movf	hexToString@val& (0+255),w,b
  7289  00322A  0B0F               	andlw	15
  7290  00322C  ECA4  F025         	call	_hexToChar
  7291  003230  6EDF               	movwf	indf2,c
  7292  003232  0100               	movlb	0	; () banked
  7293  003234  2B69               	incf	hexToString@pointer& (0+255),f,b
  7294                           
  7295                           ; BSR set to: 0
  7296                           ;uart.c: 103: number[pointer++] = '\0';
  7297  003236  5169               	movf	hexToString@pointer& (0+255),w,b
  7298  003238  0D01               	mullw	1
  7299  00323A  0EB1               	movlw	low hexToString@number
  7300  00323C  24F3               	addwf	prodl,w,c
  7301  00323E  6ED9               	movwf	fsr2l,c
  7302  003240  0E02               	movlw	high hexToString@number
  7303  003242  20F4               	addwfc	prodh,w,c
  7304  003244  6EDA               	movwf	fsr2h,c
  7305  003246  0E00               	movlw	0
  7306  003248  6EDF               	movwf	indf2,c
  7307                           
  7308                           ; BSR set to: 0
  7309  00324A  2B69               	incf	hexToString@pointer& (0+255),f,b
  7310                           
  7311                           ; BSR set to: 0
  7312                           ;uart.c: 104: return number;
  7313  00324C  0EB1               	movlw	low hexToString@number
  7314  00324E  6F61               	movwf	?_hexToString& (0+255),b
  7315  003250  0E02               	movlw	high hexToString@number
  7316  003252  6F62               	movwf	(?_hexToString+1)& (0+255),b
  7317  003254  0012               	return	
  7318  003256                     __end_of_hexToString:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           intcon3	equ	0xFF0
  7328                           indf0	equ	0xFEF
  7329                           postinc0	equ	0xFEE
  7330                           plusw0	equ	0xFEB
  7331                           fsr0h	equ	0xFEA
  7332                           fsr0l	equ	0xFE9
  7333                           wreg	equ	0xFE8
  7334                           postinc1	equ	0xFE6
  7335                           postdec1	equ	0xFE5
  7336                           plusw1	equ	0xFE3
  7337                           fsr1h	equ	0xFE2
  7338                           fsr1l	equ	0xFE1
  7339                           indf2	equ	0xFDF
  7340                           postinc2	equ	0xFDE
  7341                           postdec2	equ	0xFDD
  7342                           plusw2	equ	0xFDB
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _hexToChar *****************
  7348 ;; Defined at:
  7349 ;;		line 84 in file "src/system/uart.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  val             1    wreg     unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  val             1    0[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      unsigned char 
  7356 ;; Registers used:
  7357 ;;		wreg, status,2, status,0
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0
  7364 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7366 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7367 ;;Total ram usage:        1 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    4
  7370 ;; This function calls:
  7371 ;;		Nothing
  7372 ;; This function is called by:
  7373 ;;		_hexToString
  7374 ;; This function uses a non-reentrant model
  7375 ;;
  7376                           
  7377                           	psect	text17
  7378  004B48                     __ptext17:
  7379                           	opt stack 0
  7380  004B48                     _hexToChar:
  7381                           	opt stack 21
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;incstack = 0
  7385                           ;hexToChar@val stored from wreg
  7386  004B48  0100               	movlb	0	; () banked
  7387  004B4A  6F60               	movwf	hexToChar@val& (0+255),b
  7388                           
  7389                           ;uart.c: 85: if (val < 10) {
  7390  004B4C  0E0A               	movlw	10
  7391  004B4E  0100               	movlb	0	; () banked
  7392  004B50  6160               	cpfslt	hexToChar@val& (0+255),b
  7393  004B52  D003               	goto	l773
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;uart.c: 86: return val + 0x30u;
  7397  004B54  5160               	movf	hexToChar@val& (0+255),w,b
  7398  004B56  0F30               	addlw	48
  7399                           
  7400                           ; BSR set to: 0
  7401  004B58  0012               	return	
  7402  004B5A                     l773:
  7403                           
  7404                           ; BSR set to: 0
  7405                           
  7406                           ; BSR set to: 0
  7407  004B5A  0E10               	movlw	16
  7408  004B5C  6160               	cpfslt	hexToChar@val& (0+255),b
  7409  004B5E  D003               	goto	l776
  7410                           
  7411                           ; BSR set to: 0
  7412                           ;uart.c: 88: return val + 0x41u - 10;
  7413  004B60  5160               	movf	hexToChar@val& (0+255),w,b
  7414  004B62  0F37               	addlw	55
  7415                           
  7416                           ; BSR set to: 0
  7417  004B64  0012               	return	
  7418  004B66                     l776:
  7419                           
  7420                           ; BSR set to: 0
  7421                           ;uart.c: 89: }
  7422                           ;uart.c: 90: return 0;
  7423                           
  7424                           ; BSR set to: 0
  7425                           
  7426                           ; BSR set to: 0
  7427  004B66  0E00               	movlw	0
  7428  004B68  0012               	return	
  7429  004B6A                     __end_of_hexToChar:
  7430                           	opt stack 0
  7431                           tblptru	equ	0xFF8
  7432                           tblptrh	equ	0xFF7
  7433                           tblptrl	equ	0xFF6
  7434                           tablat	equ	0xFF5
  7435                           prodh	equ	0xFF4
  7436                           prodl	equ	0xFF3
  7437                           intcon	equ	0xFF2
  7438                           intcon3	equ	0xFF0
  7439                           indf0	equ	0xFEF
  7440                           postinc0	equ	0xFEE
  7441                           plusw0	equ	0xFEB
  7442                           fsr0h	equ	0xFEA
  7443                           fsr0l	equ	0xFE9
  7444                           wreg	equ	0xFE8
  7445                           postinc1	equ	0xFE6
  7446                           postdec1	equ	0xFE5
  7447                           plusw1	equ	0xFE3
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           indf2	equ	0xFDF
  7451                           postinc2	equ	0xFDE
  7452                           postdec2	equ	0xFDD
  7453                           plusw2	equ	0xFDB
  7454                           fsr2h	equ	0xFDA
  7455                           fsr2l	equ	0xFD9
  7456                           status	equ	0xFD8
  7457                           
  7458 ;; *************** function _ipProtocolToString *****************
  7459 ;; Defined at:
  7460 ;;		line 149 in file "src/system/uart.c"
  7461 ;; Parameters:    Size  Location     Type
  7462 ;;  protocol        1    wreg     enum E5627
  7463 ;; Auto vars:     Size  Location     Type
  7464 ;;  protocol        1    2[BANK0 ] enum E5627
  7465 ;; Return value:  Size  Location     Type
  7466 ;;                  2    0[BANK0 ] PTR unsigned char 
  7467 ;; Registers used:
  7468 ;;		wreg, status,2, status,0
  7469 ;; Tracked objects:
  7470 ;;		On entry : 0/0
  7471 ;;		On exit  : 0/0
  7472 ;;		Unchanged: 0/0
  7473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7474 ;;      Params:         0       2       0       0       0       0       0       0       0
  7475 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7476 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7477 ;;      Totals:         0       3       0       0       0       0       0       0       0
  7478 ;;Total ram usage:        3 bytes
  7479 ;; Hardware stack levels used:    1
  7480 ;; Hardware stack levels required when called:    4
  7481 ;; This function calls:
  7482 ;;		Nothing
  7483 ;; This function is called by:
  7484 ;;		_ipv4_handleNewPacket
  7485 ;; This function uses a non-reentrant model
  7486 ;;
  7487                           
  7488                           	psect	text18
  7489  0045F0                     __ptext18:
  7490                           	opt stack 0
  7491  0045F0                     _ipProtocolToString:
  7492                           	opt stack 23
  7493                           
  7494                           ; BSR set to: 0
  7495                           ;incstack = 0
  7496                           ;ipProtocolToString@protocol stored from wreg
  7497  0045F0  0100               	movlb	0	; () banked
  7498  0045F2  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  7499                           
  7500                           ;uart.c: 150: switch (protocol) {
  7501  0045F4  D015               	goto	l805
  7502  0045F6                     
  7503                           ;uart.c: 152: return "ICMP";
  7504  0045F6  0ED6               	movlw	low STR_55
  7505  0045F8  0100               	movlb	0	; () banked
  7506  0045FA  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7507  0045FC  0E7F               	movlw	high STR_55
  7508  0045FE  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7509                           
  7510                           ; BSR set to: 0
  7511  004600  0012               	return	
  7512  004602                     
  7513                           ; BSR set to: 0
  7514                           ;uart.c: 154: return "TCP";
  7515                           
  7516                           ; BSR set to: 0
  7517  004602  0EE5               	movlw	low STR_56
  7518  004604  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7519  004606  0E7F               	movlw	high STR_56
  7520  004608  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7521                           
  7522                           ; BSR set to: 0
  7523  00460A  0012               	return	
  7524  00460C                     
  7525                           ; BSR set to: 0
  7526                           ;uart.c: 156: return "UDP";
  7527                           
  7528                           ; BSR set to: 0
  7529  00460C  0EE9               	movlw	low STR_57
  7530  00460E  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7531  004610  0E7F               	movlw	high STR_57
  7532  004612  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7533                           
  7534                           ; BSR set to: 0
  7535  004614  0012               	return	
  7536  004616                     
  7537                           ; BSR set to: 0
  7538                           ;uart.c: 158: return "Unknown Protocol";
  7539                           
  7540                           ; BSR set to: 0
  7541  004616  0EDB               	movlw	low STR_58
  7542  004618  6F60               	movwf	?_ipProtocolToString& (0+255),b
  7543  00461A  0E7E               	movlw	high STR_58
  7544  00461C  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;uart.c: 159: }
  7548                           
  7549                           ; BSR set to: 0
  7550  00461E  0012               	return	
  7551  004620                     l805:
  7552                           
  7553                           ; BSR set to: 0
  7554  004620  0100               	movlb	0	; () banked
  7555  004622  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  7556                           
  7557                           ; Switch size 1, requested type "space"
  7558                           ; Number of cases is 3, Range of values is 1 to 17
  7559                           ; switch strategies available:
  7560                           ; Name         Instructions Cycles
  7561                           ; simple_byte           10     6 (average)
  7562                           ;	Chosen strategy is simple_byte
  7563  004624  0A01               	xorlw	1	; case 1
  7564  004626  B4D8               	btfsc	status,2,c
  7565  004628  D7E6               	goto	l806
  7566  00462A  0A07               	xorlw	7	; case 6
  7567  00462C  B4D8               	btfsc	status,2,c
  7568  00462E  D7E9               	goto	l808
  7569  004630  0A17               	xorlw	23	; case 17
  7570  004632  B4D8               	btfsc	status,2,c
  7571  004634  D7EB               	goto	l809
  7572  004636  D7EF               	goto	l810
  7573  004638                     __end_of_ipProtocolToString:
  7574                           	opt stack 0
  7575                           tblptru	equ	0xFF8
  7576                           tblptrh	equ	0xFF7
  7577                           tblptrl	equ	0xFF6
  7578                           tablat	equ	0xFF5
  7579                           prodh	equ	0xFF4
  7580                           prodl	equ	0xFF3
  7581                           intcon	equ	0xFF2
  7582                           intcon3	equ	0xFF0
  7583                           indf0	equ	0xFEF
  7584                           postinc0	equ	0xFEE
  7585                           plusw0	equ	0xFEB
  7586                           fsr0h	equ	0xFEA
  7587                           fsr0l	equ	0xFE9
  7588                           wreg	equ	0xFE8
  7589                           postinc1	equ	0xFE6
  7590                           postdec1	equ	0xFE5
  7591                           plusw1	equ	0xFE3
  7592                           fsr1h	equ	0xFE2
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           postdec2	equ	0xFDD
  7597                           plusw2	equ	0xFDB
  7598                           fsr2h	equ	0xFDA
  7599                           fsr2l	equ	0xFD9
  7600                           status	equ	0xFD8
  7601                           
  7602 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  7603 ;; Defined at:
  7604 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  7609 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  7610 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  7611 ;;  opcode          1   23[BANK0 ] unsigned char 
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7621 ;;      Params:         0       0       0       0       0       0       0       0       0
  7622 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7623 ;;      Temps:          0       6       0       0       0       0       0       0       0
  7624 ;;      Totals:         0      11       0       0       0       0       0       0       0
  7625 ;;Total ram usage:       11 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    7
  7628 ;; This function calls:
  7629 ;;		_enc424j600_getNextPacketPointer
  7630 ;;		_enc424j600_readSPI
  7631 ;;		_enc424j600_setERXDATAReadPointer
  7632 ;;		_enc424j600_setNextPacketPointer
  7633 ;;		_enc424j600_writeSPI
  7634 ;; This function is called by:
  7635 ;;		_ethernet_rxGetNewFrame
  7636 ;; This function uses a non-reentrant model
  7637 ;;
  7638                           
  7639                           	psect	text19
  7640  003D94                     __ptext19:
  7641                           	opt stack 0
  7642  003D94                     _ethernetController_updateNextPacketPointer:
  7643                           	opt stack 21
  7644                           
  7645                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
  7646                           ;ENC424J600.c: 336: uint8_t opcode;
  7647                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
  7648                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;incstack = 0
  7652  003D94  EC60  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  7653  003D98  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  7654  003D9C  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  7655                           
  7656                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
  7657  003DA0  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
  7658  003DA4  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
  7659  003DA8  ECDE  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7660                           
  7661                           ;ENC424J600.c: 340: opcode = 0x2C;
  7662  003DAC  0E2C               	movlw	44
  7663  003DAE  0100               	movlb	0	; () banked
  7664  003DB0  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
  7668  003DB2  9881               	bcf	3969,4,c	;volatile
  7669                           
  7670                           ; BSR set to: 0
  7671                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
  7672  003DB4  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  7673  003DB6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7674  003DB8  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  7675  003DBA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7676  003DBC  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
  7677                           
  7678                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
  7679  003DC0  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  7680  003DC2  0100               	movlb	0	; () banked
  7681  003DC4  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7682  003DC6  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  7683  003DC8  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7684  003DCA  EC60  F020         	call	_enc424j600_readSPI	;wreg free
  7685                           
  7686                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
  7687  003DCE  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  7688  003DD0  0100               	movlb	0	; () banked
  7689  003DD2  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7690  003DD4  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  7691  003DD6  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7692  003DD8  EC60  F020         	call	_enc424j600_readSPI	;wreg free
  7693                           
  7694                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
  7695  003DDC  8881               	bsf	3969,4,c	;volatile
  7696                           
  7697                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  7698  003DDE  0E00               	movlw	0
  7699  003DE0  0100               	movlb	0	; () banked
  7700  003DE2  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  7701  003DE4  0EFF               	movlw	255
  7702  003DE6  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  7703  003DE8  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  7704  003DEA  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  7705  003DEC  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  7706  003DEE  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  7707  003DF0  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  7708  003DF2  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  7709  003DF4  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  7710  003DF6  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  7711  003DF8  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  7712  003DFA  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  7713  003DFC  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  7714  003DFE  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  7715  003E00  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
  7716  003E02  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  7717  003E04  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  7718  003E06  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
  7719  003E08  EC65  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
  7720  003E0C  0012               	return		;funcret
  7721  003E0E                     __end_of_ethernetController_updateNextPacketPointer:
  7722                           	opt stack 0
  7723                           tblptru	equ	0xFF8
  7724                           tblptrh	equ	0xFF7
  7725                           tblptrl	equ	0xFF6
  7726                           tablat	equ	0xFF5
  7727                           prodh	equ	0xFF4
  7728                           prodl	equ	0xFF3
  7729                           intcon	equ	0xFF2
  7730                           intcon3	equ	0xFF0
  7731                           indf0	equ	0xFEF
  7732                           postinc0	equ	0xFEE
  7733                           plusw0	equ	0xFEB
  7734                           fsr0h	equ	0xFEA
  7735                           fsr0l	equ	0xFE9
  7736                           wreg	equ	0xFE8
  7737                           postinc1	equ	0xFE6
  7738                           postdec1	equ	0xFE5
  7739                           plusw1	equ	0xFE3
  7740                           fsr1h	equ	0xFE2
  7741                           fsr1l	equ	0xFE1
  7742                           indf2	equ	0xFDF
  7743                           postinc2	equ	0xFDE
  7744                           postdec2	equ	0xFDD
  7745                           plusw2	equ	0xFDB
  7746                           fsr2h	equ	0xFDA
  7747                           fsr2l	equ	0xFD9
  7748                           status	equ	0xFD8
  7749                           
  7750 ;; *************** function _ethernetController_getRSV *****************
  7751 ;; Defined at:
  7752 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
  7753 ;; Parameters:    Size  Location     Type
  7754 ;;  address         2   17[BANK0 ] unsigned int 
  7755 ;; Auto vars:     Size  Location     Type
  7756 ;;  i               1   23[BANK0 ] unsigned char 
  7757 ;;  opcode          1   22[BANK0 ] unsigned char 
  7758 ;; Return value:  Size  Location     Type
  7759 ;;                  5   17[BANK0 ] struct RSV
  7760 ;; Registers used:
  7761 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7762 ;; Tracked objects:
  7763 ;;		On entry : 0/0
  7764 ;;		On exit  : 0/0
  7765 ;;		Unchanged: 0/0
  7766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7767 ;;      Params:         0       5       0       0       0       0       0       0       0
  7768 ;;      Locals:         0       2       0       0       0       0       0       0       0
  7769 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7770 ;;      Totals:         0       7       0       0       0       0       0       0       0
  7771 ;;Total ram usage:        7 bytes
  7772 ;; Hardware stack levels used:    1
  7773 ;; Hardware stack levels required when called:    7
  7774 ;; This function calls:
  7775 ;;		_enc424j600_readSPI
  7776 ;;		_enc424j600_setERXDATAReadPointer
  7777 ;;		_enc424j600_updateReceiveStatusVector
  7778 ;;		_enc424j600_writeSPI
  7779 ;; This function is called by:
  7780 ;;		_ethernet_rxGetNewFrame
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           	psect	text20
  7785  003E86                     __ptext20:
  7786                           	opt stack 0
  7787  003E86                     _ethernetController_getRSV:
  7788                           	opt stack 21
  7789                           
  7790                           ;ENC424J600.c: 300: uint8_t static temp[6];
  7791                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
  7792                           
  7793                           ;incstack = 0
  7794  003E86  0E02               	movlw	2
  7795  003E88  0100               	movlb	0	; () banked
  7796  003E8A  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  7797  003E8C  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  7798  003E8E  0E00               	movlw	0
  7799  003E90  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  7800  003E92  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  7801  003E94  ECDE  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  7802                           
  7803                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
  7804  003E98  0E2C               	movlw	44
  7805  003E9A  0100               	movlb	0	; () banked
  7806  003E9C  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  7807                           
  7808                           ; BSR set to: 0
  7809                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
  7810  003E9E  9881               	bcf	3969,4,c	;volatile
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
  7814  003EA0  0E76               	movlw	low ethernetController_getRSV@opcode
  7815  003EA2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  7816  003EA4  0E00               	movlw	high ethernetController_getRSV@opcode
  7817  003EA6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  7818  003EA8  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
  7819                           
  7820                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
  7821  003EAC  0E00               	movlw	0
  7822  003EAE  0100               	movlb	0	; () banked
  7823  003EB0  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  7824  003EB2                     l8955:
  7825                           
  7826                           ; BSR set to: 0
  7827  003EB2  0E05               	movlw	5
  7828  003EB4  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  7829  003EB6  D001               	goto	l165
  7830  003EB8  D00D               	goto	u10600
  7831  003EBA                     l165:
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
  7835                           
  7836                           ; BSR set to: 0
  7837  003EBA  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  7838  003EBC  0D01               	mullw	1
  7839  003EBE  0EE7               	movlw	low ethernetController_getRSV@temp
  7840  003EC0  24F3               	addwf	prodl,w,c
  7841  003EC2  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  7842  003EC4  0E01               	movlw	high ethernetController_getRSV@temp
  7843  003EC6  20F4               	addwfc	prodh,w,c
  7844  003EC8  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  7845  003ECA  EC60  F020         	call	_enc424j600_readSPI	;wreg free
  7846  003ECE  0100               	movlb	0	; () banked
  7847  003ED0  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  7848  003ED2  D7EF               	goto	l8955
  7849  003ED4                     u10600:
  7850                           
  7851                           ; BSR set to: 0
  7852                           ;ENC424J600.c: 307: }
  7853                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
  7854  003ED4  8881               	bsf	3969,4,c	;volatile
  7855                           
  7856                           ; BSR set to: 0
  7857                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
  7858  003ED6  0EE7               	movlw	low ethernetController_getRSV@temp
  7859  003ED8  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
  7860  003EDA  0E01               	movlw	high ethernetController_getRSV@temp
  7861  003EDC  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
  7862  003EDE  EC74  F007         	call	_enc424j600_updateReceiveStatusVector	;wreg free
  7863  003EE2  CFE9 FFD9          	movff	fsr0l,fsr2l
  7864  003EE6  CFEA FFDA          	movff	fsr0h,fsr2h
  7865  003EEA  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  7866  003EEE  0E04               	movlw	4
  7867  003EF0                     u10611:
  7868  003EF0  CFDB FFEB          	movff	plusw2,plusw0
  7869  003EF4  06E8               	decf	wreg,f,c
  7870  003EF6  E2FC               	bc	u10611
  7871  003EF8  0012               	return	
  7872  003EFA                     __end_of_ethernetController_getRSV:
  7873                           	opt stack 0
  7874                           tblptru	equ	0xFF8
  7875                           tblptrh	equ	0xFF7
  7876                           tblptrl	equ	0xFF6
  7877                           tablat	equ	0xFF5
  7878                           prodh	equ	0xFF4
  7879                           prodl	equ	0xFF3
  7880                           intcon	equ	0xFF2
  7881                           intcon3	equ	0xFF0
  7882                           indf0	equ	0xFEF
  7883                           postinc0	equ	0xFEE
  7884                           plusw0	equ	0xFEB
  7885                           fsr0h	equ	0xFEA
  7886                           fsr0l	equ	0xFE9
  7887                           wreg	equ	0xFE8
  7888                           postinc1	equ	0xFE6
  7889                           postdec1	equ	0xFE5
  7890                           plusw1	equ	0xFE3
  7891                           fsr1h	equ	0xFE2
  7892                           fsr1l	equ	0xFE1
  7893                           indf2	equ	0xFDF
  7894                           postinc2	equ	0xFDE
  7895                           postdec2	equ	0xFDD
  7896                           plusw2	equ	0xFDB
  7897                           fsr2h	equ	0xFDA
  7898                           fsr2l	equ	0xFD9
  7899                           status	equ	0xFD8
  7900                           
  7901 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
  7902 ;; Defined at:
  7903 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
  7904 ;; Parameters:    Size  Location     Type
  7905 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  7906 ;;		 -> ethernetController_getRSV@temp(6), 
  7907 ;; Auto vars:     Size  Location     Type
  7908 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  7909 ;; Return value:  Size  Location     Type
  7910 ;;                  5    0[BANK0 ] struct RSV
  7911 ;; Registers used:
  7912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  7913 ;; Tracked objects:
  7914 ;;		On entry : 0/0
  7915 ;;		On exit  : 0/0
  7916 ;;		Unchanged: 0/0
  7917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7918 ;;      Params:         0       5       0       0       0       0       0       0       0
  7919 ;;      Locals:         0       5       0       0       0       0       0       0       0
  7920 ;;      Temps:          0       7       0       0       0       0       0       0       0
  7921 ;;      Totals:         0      17       0       0       0       0       0       0       0
  7922 ;;Total ram usage:       17 bytes
  7923 ;; Hardware stack levels used:    1
  7924 ;; Hardware stack levels required when called:    4
  7925 ;; This function calls:
  7926 ;;		Nothing
  7927 ;; This function is called by:
  7928 ;;		_ethernetController_getRSV
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           	psect	text21
  7933  000EE8                     __ptext21:
  7934                           	opt stack 0
  7935  000EE8                     _enc424j600_updateReceiveStatusVector:
  7936                           	opt stack 23
  7937                           
  7938                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
  7939                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  7940                           
  7941                           ;incstack = 0
  7942  000EE8  0E00               	movlw	0
  7943  000EEA  0100               	movlb	0	; () banked
  7944  000EEC  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7945  000EEE  0EFF               	movlw	255
  7946  000EF0  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
  7947  000EF2  EE20 F001          	lfsr	2,1
  7948  000EF6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  7949  000EF8  26D9               	addwf	fsr2l,f,c
  7950  000EFA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7951  000EFC  22DA               	addwfc	fsr2h,f,c
  7952  000EFE  50DF               	movf	indf2,w,c
  7953  000F00  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
  7954  000F02  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
  7955  000F04  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
  7956  000F06  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
  7957  000F08  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  7958  000F0A  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
  7959  000F0C  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
  7960  000F0E  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
  7961  000F10  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
  7962  000F14  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
  7963  000F18  50DF               	movf	indf2,w,c
  7964  000F1A  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
  7965  000F1C  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
  7966  000F1E  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
  7967  000F20  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
  7968  000F22  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  7969  000F24  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
  7970  000F26  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
  7971  000F28  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  7972                           
  7973                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  7974  000F2A  EE20 F002          	lfsr	2,2
  7975  000F2E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  7976  000F30  26D9               	addwf	fsr2l,f,c
  7977  000F32  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7978  000F34  22DA               	addwfc	fsr2h,f,c
  7979  000F36  A0DF               	btfss	indf2,0,c
  7980  000F38  D003               	goto	u9750
  7981  000F3A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7982  000F3C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  7983  000F3E  D002               	goto	u9768
  7984  000F40                     u9750:
  7985  000F40  0100               	movlb	0	; () banked
  7986  000F42  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  7987  000F44                     u9768:
  7988  000F44  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  7989  000F46  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  7990  000F48  0BFE               	andlw	-2
  7991  000F4A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  7992  000F4C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  7993                           
  7994                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  7995  000F4E  EE20 F002          	lfsr	2,2
  7996  000F52  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  7997  000F54  26D9               	addwf	fsr2l,f,c
  7998  000F56  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  7999  000F58  22DA               	addwfc	fsr2h,f,c
  8000  000F5A  A4DF               	btfss	indf2,2,c
  8001  000F5C  D003               	goto	u9770
  8002  000F5E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8003  000F60  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8004  000F62  D002               	goto	u9788
  8005  000F64                     u9770:
  8006  000F64  0100               	movlb	0	; () banked
  8007  000F66  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8008  000F68                     u9788:
  8009  000F68  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8010  000F6A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8011  000F6C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8012  000F6E  0BFD               	andlw	-3
  8013  000F70  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8014  000F72  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8015                           
  8016                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  8017  000F74  EE20 F002          	lfsr	2,2
  8018  000F78  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8019  000F7A  26D9               	addwf	fsr2l,f,c
  8020  000F7C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8021  000F7E  22DA               	addwfc	fsr2h,f,c
  8022  000F80  A8DF               	btfss	indf2,4,c
  8023  000F82  D003               	goto	u9790
  8024  000F84  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8025  000F86  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8026  000F88  D002               	goto	u9808
  8027  000F8A                     u9790:
  8028  000F8A  0100               	movlb	0	; () banked
  8029  000F8C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8030  000F8E                     u9808:
  8031  000F8E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8032  000F90  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8033  000F92  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8034  000F94  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8035  000F96  0BFB               	andlw	-5
  8036  000F98  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8037  000F9A  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8038                           
  8039                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  8040  000F9C  EE20 F002          	lfsr	2,2
  8041  000FA0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8042  000FA2  26D9               	addwf	fsr2l,f,c
  8043  000FA4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8044  000FA6  22DA               	addwfc	fsr2h,f,c
  8045  000FA8  AADF               	btfss	indf2,5,c
  8046  000FAA  D003               	goto	u9810
  8047  000FAC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8048  000FAE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8049  000FB0  D002               	goto	u9828
  8050  000FB2                     u9810:
  8051  000FB2  0100               	movlb	0	; () banked
  8052  000FB4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8053  000FB6                     u9828:
  8054  000FB6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8055  000FB8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8056  000FBA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8057  000FBC  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8058  000FBE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8059  000FC0  0BF7               	andlw	-9
  8060  000FC2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8061  000FC4  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8062                           
  8063                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  8064  000FC6  EE20 F002          	lfsr	2,2
  8065  000FCA  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8066  000FCC  26D9               	addwf	fsr2l,f,c
  8067  000FCE  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8068  000FD0  22DA               	addwfc	fsr2h,f,c
  8069  000FD2  ACDF               	btfss	indf2,6,c
  8070  000FD4  D003               	goto	u9830
  8071  000FD6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8072  000FD8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8073  000FDA  D002               	goto	u9848
  8074  000FDC                     u9830:
  8075  000FDC  0100               	movlb	0	; () banked
  8076  000FDE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8077  000FE0                     u9848:
  8078  000FE0  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8079  000FE2  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8080  000FE4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8081  000FE6  0BEF               	andlw	-17
  8082  000FE8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8083  000FEA  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8084                           
  8085                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8086  000FEC  EE20 F002          	lfsr	2,2
  8087  000FF0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8088  000FF2  26D9               	addwf	fsr2l,f,c
  8089  000FF4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8090  000FF6  22DA               	addwfc	fsr2h,f,c
  8091  000FF8  AEDF               	btfss	indf2,7,c
  8092  000FFA  D003               	goto	u9850
  8093  000FFC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8094  000FFE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8095  001000  D002               	goto	u9868
  8096  001002                     u9850:
  8097  001002  0100               	movlb	0	; () banked
  8098  001004  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8099  001006                     u9868:
  8100  001006  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8101  001008  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8102  00100A  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8103  00100C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8104  00100E  0BDF               	andlw	-33
  8105  001010  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8106  001012  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8107                           
  8108                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  8109  001014  EE20 F003          	lfsr	2,3
  8110  001018  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8111  00101A  26D9               	addwf	fsr2l,f,c
  8112  00101C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8113  00101E  22DA               	addwfc	fsr2h,f,c
  8114  001020  A0DF               	btfss	indf2,0,c
  8115  001022  D003               	goto	u9870
  8116  001024  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8117  001026  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8118  001028  D002               	goto	u9888
  8119  00102A                     u9870:
  8120  00102A  0100               	movlb	0	; () banked
  8121  00102C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8122  00102E                     u9888:
  8123  00102E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8124  001030  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8125  001032  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8126  001034  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8127  001036  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8128  001038  0BBF               	andlw	-65
  8129  00103A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8130  00103C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8131                           
  8132                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  8133  00103E  EE20 F003          	lfsr	2,3
  8134  001042  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8135  001044  26D9               	addwf	fsr2l,f,c
  8136  001046  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8137  001048  22DA               	addwfc	fsr2h,f,c
  8138  00104A  A2DF               	btfss	indf2,1,c
  8139  00104C  D003               	goto	u9890
  8140  00104E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8141  001050  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8142  001052  D002               	goto	u9908
  8143  001054                     u9890:
  8144  001054  0100               	movlb	0	; () banked
  8145  001056  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8146  001058                     u9908:
  8147  001058  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8148  00105A  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8149  00105C  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8150  00105E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8151  001060  0B7F               	andlw	-129
  8152  001062  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8153  001064  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8154                           
  8155                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8156  001066  EE20 F003          	lfsr	2,3
  8157  00106A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8158  00106C  26D9               	addwf	fsr2l,f,c
  8159  00106E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8160  001070  22DA               	addwfc	fsr2h,f,c
  8161  001072  A6DF               	btfss	indf2,3,c
  8162  001074  D003               	goto	u9910
  8163  001076  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8164  001078  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8165  00107A  D002               	goto	u9928
  8166  00107C                     u9910:
  8167  00107C  0100               	movlb	0	; () banked
  8168  00107E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8169  001080                     u9928:
  8170  001080  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8171  001082  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8172  001084  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8173  001086  0BFD               	andlw	-3
  8174  001088  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8175  00108A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8176                           
  8177                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  8178  00108C  EE20 F003          	lfsr	2,3
  8179  001090  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8180  001092  26D9               	addwf	fsr2l,f,c
  8181  001094  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8182  001096  22DA               	addwfc	fsr2h,f,c
  8183  001098  A8DF               	btfss	indf2,4,c
  8184  00109A  D003               	goto	u9930
  8185  00109C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8186  00109E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8187  0010A0  D002               	goto	u9948
  8188  0010A2                     u9930:
  8189  0010A2  0100               	movlb	0	; () banked
  8190  0010A4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8191  0010A6                     u9948:
  8192  0010A6  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8193  0010A8  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8194  0010AA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8195  0010AC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8196  0010AE  0BFB               	andlw	-5
  8197  0010B0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8198  0010B2  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8199                           
  8200                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  8201  0010B4  EE20 F003          	lfsr	2,3
  8202  0010B8  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8203  0010BA  26D9               	addwf	fsr2l,f,c
  8204  0010BC  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8205  0010BE  22DA               	addwfc	fsr2h,f,c
  8206  0010C0  AADF               	btfss	indf2,5,c
  8207  0010C2  D003               	goto	u9950
  8208  0010C4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8209  0010C6  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8210  0010C8  D002               	goto	u9968
  8211  0010CA                     u9950:
  8212  0010CA  0100               	movlb	0	; () banked
  8213  0010CC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8214  0010CE                     u9968:
  8215  0010CE  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8216  0010D0  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8217  0010D2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8218  0010D4  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8219  0010D6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8220  0010D8  0BF7               	andlw	-9
  8221  0010DA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8222  0010DC  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8223                           
  8224                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  8225  0010DE  EE20 F003          	lfsr	2,3
  8226  0010E2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8227  0010E4  26D9               	addwf	fsr2l,f,c
  8228  0010E6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8229  0010E8  22DA               	addwfc	fsr2h,f,c
  8230  0010EA  ACDF               	btfss	indf2,6,c
  8231  0010EC  D003               	goto	u9970
  8232  0010EE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8233  0010F0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8234  0010F2  D002               	goto	u9988
  8235  0010F4                     u9970:
  8236  0010F4  0100               	movlb	0	; () banked
  8237  0010F6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8238  0010F8                     u9988:
  8239  0010F8  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8240  0010FA  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8241  0010FC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8242  0010FE  0BEF               	andlw	-17
  8243  001100  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8244  001102  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8245                           
  8246                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8247  001104  EE20 F003          	lfsr	2,3
  8248  001108  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8249  00110A  26D9               	addwf	fsr2l,f,c
  8250  00110C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8251  00110E  22DA               	addwfc	fsr2h,f,c
  8252  001110  AEDF               	btfss	indf2,7,c
  8253  001112  D003               	goto	u9990
  8254  001114  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8255  001116  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8256  001118  D002               	goto	u10008
  8257  00111A                     u9990:
  8258  00111A  0100               	movlb	0	; () banked
  8259  00111C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8260  00111E                     u10008:
  8261  00111E  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8262  001120  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8263  001122  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8264  001124  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8265  001126  0BDF               	andlw	-33
  8266  001128  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8267  00112A  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8268                           
  8269                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  8270  00112C  EE20 F004          	lfsr	2,4
  8271  001130  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8272  001132  26D9               	addwf	fsr2l,f,c
  8273  001134  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8274  001136  22DA               	addwfc	fsr2h,f,c
  8275  001138  A0DF               	btfss	indf2,0,c
  8276  00113A  D003               	goto	u10010
  8277  00113C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8278  00113E  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8279  001140  D002               	goto	u10028
  8280  001142                     u10010:
  8281  001142  0100               	movlb	0	; () banked
  8282  001144  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8283  001146                     u10028:
  8284  001146  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8285  001148  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8286  00114A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8287  00114C  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8288  00114E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8289  001150  0BBF               	andlw	-65
  8290  001152  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8291  001154  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8292                           
  8293                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  8294  001156  EE20 F004          	lfsr	2,4
  8295  00115A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8296  00115C  26D9               	addwf	fsr2l,f,c
  8297  00115E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8298  001160  22DA               	addwfc	fsr2h,f,c
  8299  001162  A2DF               	btfss	indf2,1,c
  8300  001164  D003               	goto	u10030
  8301  001166  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8302  001168  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8303  00116A  D002               	goto	u10048
  8304  00116C                     u10030:
  8305  00116C  0100               	movlb	0	; () banked
  8306  00116E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8307  001170                     u10048:
  8308  001170  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8309  001172  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8310  001174  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8311  001176  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8312  001178  0B7F               	andlw	-129
  8313  00117A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8314  00117C  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8315                           
  8316                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  8317  00117E  EE20 F004          	lfsr	2,4
  8318  001182  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8319  001184  26D9               	addwf	fsr2l,f,c
  8320  001186  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8321  001188  22DA               	addwfc	fsr2h,f,c
  8322  00118A  A4DF               	btfss	indf2,2,c
  8323  00118C  D003               	goto	u10050
  8324  00118E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8325  001190  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8326  001192  D002               	goto	u10068
  8327  001194                     u10050:
  8328  001194  0100               	movlb	0	; () banked
  8329  001196  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8330  001198                     u10068:
  8331  001198  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8332  00119A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8333  00119C  0BFE               	andlw	-2
  8334  00119E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8335  0011A0  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8336                           
  8337                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8338  0011A2  EE20 F004          	lfsr	2,4
  8339  0011A6  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8340  0011A8  26D9               	addwf	fsr2l,f,c
  8341  0011AA  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8342  0011AC  22DA               	addwfc	fsr2h,f,c
  8343  0011AE  A6DF               	btfss	indf2,3,c
  8344  0011B0  D003               	goto	u10070
  8345  0011B2  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8346  0011B4  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8347  0011B6  D002               	goto	u10088
  8348  0011B8                     u10070:
  8349  0011B8  0100               	movlb	0	; () banked
  8350  0011BA  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8351  0011BC                     u10088:
  8352  0011BC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8353  0011BE  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8354  0011C0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8355  0011C2  0BFD               	andlw	-3
  8356  0011C4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8357  0011C6  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8358                           
  8359                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  8360  0011C8  EE20 F004          	lfsr	2,4
  8361  0011CC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
  8362  0011CE  26D9               	addwf	fsr2l,f,c
  8363  0011D0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8364  0011D2  22DA               	addwfc	fsr2h,f,c
  8365  0011D4  A8DF               	btfss	indf2,4,c
  8366  0011D6  D003               	goto	u10090
  8367  0011D8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8368  0011DA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8369  0011DC  D002               	goto	u10108
  8370  0011DE                     u10090:
  8371  0011DE  0100               	movlb	0	; () banked
  8372  0011E0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
  8373  0011E2                     u10108:
  8374  0011E2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8375  0011E4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
  8376  0011E6  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8377  0011E8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8378  0011EA  0BFB               	andlw	-5
  8379  0011EC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
  8380  0011EE  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;ENC424J600.c: 746: return receiveStatusVector;
  8384  0011F0  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
  8385  0011F4  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
  8386  0011F8  0E04               	movlw	4
  8387  0011FA                     u10111:
  8388  0011FA  CFDB FFEB          	movff	plusw2,plusw0
  8389  0011FE  06E8               	decf	wreg,f,c
  8390  001200  E2FC               	bc	u10111
  8391  001202  0012               	return	
  8392  001204                     __end_of_enc424j600_updateReceiveStatusVector:
  8393                           	opt stack 0
  8394                           tblptru	equ	0xFF8
  8395                           tblptrh	equ	0xFF7
  8396                           tblptrl	equ	0xFF6
  8397                           tablat	equ	0xFF5
  8398                           prodh	equ	0xFF4
  8399                           prodl	equ	0xFF3
  8400                           intcon	equ	0xFF2
  8401                           intcon3	equ	0xFF0
  8402                           indf0	equ	0xFEF
  8403                           postinc0	equ	0xFEE
  8404                           plusw0	equ	0xFEB
  8405                           fsr0h	equ	0xFEA
  8406                           fsr0l	equ	0xFE9
  8407                           wreg	equ	0xFE8
  8408                           postinc1	equ	0xFE6
  8409                           postdec1	equ	0xFE5
  8410                           plusw1	equ	0xFE3
  8411                           fsr1h	equ	0xFE2
  8412                           fsr1l	equ	0xFE1
  8413                           indf2	equ	0xFDF
  8414                           postinc2	equ	0xFDE
  8415                           postdec2	equ	0xFDD
  8416                           plusw2	equ	0xFDB
  8417                           fsr2h	equ	0xFDA
  8418                           fsr2l	equ	0xFD9
  8419                           status	equ	0xFD8
  8420                           
  8421 ;; *************** function _ethernetController_getEtherTypeField *****************
  8422 ;; Defined at:
  8423 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
  8424 ;; Parameters:    Size  Location     Type
  8425 ;;  field           9   15[BANK0 ] struct memoryField
  8426 ;; Auto vars:     Size  Location     Type
  8427 ;;  ethertype       2   28[BANK0 ] enum E5508
  8428 ;;  highByte        1   32[BANK0 ] unsigned char 
  8429 ;;  lowByte         1   31[BANK0 ] unsigned char 
  8430 ;;  opcode          1   30[BANK0 ] unsigned char 
  8431 ;; Return value:  Size  Location     Type
  8432 ;;                  2   15[BANK0 ] enum E5508
  8433 ;; Registers used:
  8434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8435 ;; Tracked objects:
  8436 ;;		On entry : 0/0
  8437 ;;		On exit  : 0/0
  8438 ;;		Unchanged: 0/0
  8439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8440 ;;      Params:         0       9       0       0       0       0       0       0       0
  8441 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8442 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8443 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8444 ;;Total ram usage:       18 bytes
  8445 ;; Hardware stack levels used:    1
  8446 ;; Hardware stack levels required when called:    7
  8447 ;; This function calls:
  8448 ;;		_enc424j600_readSPI
  8449 ;;		_enc424j600_setERXDATAReadPointer
  8450 ;;		_enc424j600_writeSPI
  8451 ;; This function is called by:
  8452 ;;		_ethernet_rxGetNewFrame
  8453 ;; This function uses a non-reentrant model
  8454 ;;
  8455                           
  8456                           	psect	text22
  8457  003FE0                     __ptext22:
  8458                           	opt stack 0
  8459  003FE0                     _ethernetController_getEtherTypeField:
  8460                           	opt stack 21
  8461                           
  8462                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;incstack = 0
  8466  003FE0  0E00               	movlw	0
  8467  003FE2  0100               	movlb	0	; () banked
  8468  003FE4  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8469  003FE6  0E00               	movlw	0
  8470  003FE8  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8471                           
  8472                           ; BSR set to: 0
  8473                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
  8474  003FEA  0E14               	movlw	20
  8475  003FEC  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  8476  003FEE  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
  8477  003FF0  0E00               	movlw	0
  8478  003FF2  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  8479  003FF4  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
  8480  003FF6  ECDE  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
  8481                           
  8482                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
  8483  003FFA  0E2C               	movlw	44
  8484  003FFC  0100               	movlb	0	; () banked
  8485  003FFE  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
  8489  004000  9881               	bcf	3969,4,c	;volatile
  8490                           
  8491                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
  8492  004002  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  8493  004004  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
  8494  004006  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  8495  004008  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
  8496  00400A  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
  8497                           
  8498                           ;ENC424J600.c: 290: uint8_t lowByte;
  8499                           ;ENC424J600.c: 291: uint8_t highByte;
  8500                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
  8501  00400E  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  8502  004010  0100               	movlb	0	; () banked
  8503  004012  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8504  004014  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  8505  004016  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8506  004018  EC60  F020         	call	_enc424j600_readSPI	;wreg free
  8507                           
  8508                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
  8509  00401C  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  8510  00401E  0100               	movlb	0	; () banked
  8511  004020  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
  8512  004022  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  8513  004024  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
  8514  004026  EC60  F020         	call	_enc424j600_readSPI	;wreg free
  8515                           
  8516                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
  8517  00402A  0100               	movlb	0	; () banked
  8518  00402C  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  8519  00402E  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  8520  004030  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  8521  004032  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  8522  004034  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  8523  004036  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  8524  004038  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  8525  00403A  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  8526  00403C  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  8527  00403E  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  8528  004040  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  8529  004042  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
  8533  004044  8881               	bsf	3969,4,c	;volatile
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;ENC424J600.c: 296: return ethertype;
  8537  004046  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  8538  00404A  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  8539  00404E  0012               	return	
  8540  004050                     __end_of_ethernetController_getEtherTypeField:
  8541                           	opt stack 0
  8542                           tblptru	equ	0xFF8
  8543                           tblptrh	equ	0xFF7
  8544                           tblptrl	equ	0xFF6
  8545                           tablat	equ	0xFF5
  8546                           prodh	equ	0xFF4
  8547                           prodl	equ	0xFF3
  8548                           intcon	equ	0xFF2
  8549                           intcon3	equ	0xFF0
  8550                           indf0	equ	0xFEF
  8551                           postinc0	equ	0xFEE
  8552                           plusw0	equ	0xFEB
  8553                           fsr0h	equ	0xFEA
  8554                           fsr0l	equ	0xFE9
  8555                           wreg	equ	0xFE8
  8556                           postinc1	equ	0xFE6
  8557                           postdec1	equ	0xFE5
  8558                           plusw1	equ	0xFE3
  8559                           fsr1h	equ	0xFE2
  8560                           fsr1l	equ	0xFE1
  8561                           indf2	equ	0xFDF
  8562                           postinc2	equ	0xFDE
  8563                           postdec2	equ	0xFDD
  8564                           plusw2	equ	0xFDB
  8565                           fsr2h	equ	0xFDA
  8566                           fsr2l	equ	0xFD9
  8567                           status	equ	0xFD8
  8568                           
  8569 ;; *************** function _etherTypeToString *****************
  8570 ;; Defined at:
  8571 ;;		line 138 in file "src/system/uart.c"
  8572 ;; Parameters:    Size  Location     Type
  8573 ;;  ethertype       2    0[BANK0 ] enum E5590
  8574 ;; Auto vars:     Size  Location     Type
  8575 ;;		None
  8576 ;; Return value:  Size  Location     Type
  8577 ;;                  2    0[BANK0 ] PTR unsigned char 
  8578 ;; Registers used:
  8579 ;;		wreg, status,2, status,0
  8580 ;; Tracked objects:
  8581 ;;		On entry : 0/0
  8582 ;;		On exit  : 0/0
  8583 ;;		Unchanged: 0/0
  8584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8585 ;;      Params:         0       2       0       0       0       0       0       0       0
  8586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8587 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8588 ;;      Totals:         0       4       0       0       0       0       0       0       0
  8589 ;;Total ram usage:        4 bytes
  8590 ;; Hardware stack levels used:    1
  8591 ;; Hardware stack levels required when called:    4
  8592 ;; This function calls:
  8593 ;;		Nothing
  8594 ;; This function is called by:
  8595 ;;		_ethernet_rxGetNewFrame
  8596 ;; This function uses a non-reentrant model
  8597 ;;
  8598                           
  8599                           	psect	text23
  8600  004638                     __ptext23:
  8601                           	opt stack 0
  8602  004638                     _etherTypeToString:
  8603                           	opt stack 24
  8604                           
  8605                           ;uart.c: 139: switch (ethertype) {
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;incstack = 0
  8609  004638  D010               	goto	l797
  8610  00463A                     
  8611                           ;uart.c: 141: return "IPv4";
  8612  00463A  0ED1               	movlw	low STR_52
  8613  00463C  0100               	movlb	0	; () banked
  8614  00463E  6F60               	movwf	?_etherTypeToString& (0+255),b
  8615  004640  0E7F               	movlw	high STR_52
  8616  004642  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8617                           
  8618                           ; BSR set to: 0
  8619  004644  0012               	return	
  8620  004646                     
  8621                           ; BSR set to: 0
  8622                           ;uart.c: 143: return "ARP";
  8623                           
  8624                           ; BSR set to: 0
  8625  004646  0EED               	movlw	low STR_53
  8626  004648  6F60               	movwf	?_etherTypeToString& (0+255),b
  8627  00464A  0E7F               	movlw	high STR_53
  8628  00464C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8629                           
  8630                           ; BSR set to: 0
  8631  00464E  0012               	return	
  8632  004650                     
  8633                           ; BSR set to: 0
  8634                           ;uart.c: 145: return "Unknown EtherType";
  8635                           
  8636                           ; BSR set to: 0
  8637  004650  0EC9               	movlw	low STR_54
  8638  004652  6F60               	movwf	?_etherTypeToString& (0+255),b
  8639  004654  0E7E               	movlw	high STR_54
  8640  004656  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;uart.c: 146: }
  8644                           
  8645                           ; BSR set to: 0
  8646  004658  0012               	return	
  8647  00465A                     l797:
  8648                           
  8649                           ; BSR set to: 0
  8650  00465A  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  8651  00465E  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  8652                           
  8653                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8654                           ; Switch size 1, requested type "space"
  8655                           ; Number of cases is 1, Range of values is 8 to 8
  8656                           ; switch strategies available:
  8657                           ; Name         Instructions Cycles
  8658                           ; simple_byte            4     3 (average)
  8659                           ;	Chosen strategy is simple_byte
  8660  004662  0100               	movlb	0	; () banked
  8661  004664  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  8662  004666  0A08               	xorlw	8	; case 8
  8663  004668  A4D8               	btfss	status,2,c
  8664  00466A  D7F2               	goto	l801
  8665                           
  8666                           ; BSR set to: 0
  8667                           ; Switch size 1, requested type "space"
  8668                           ; Number of cases is 2, Range of values is 0 to 6
  8669                           ; switch strategies available:
  8670                           ; Name         Instructions Cycles
  8671                           ; simple_byte            7     4 (average)
  8672                           ;	Chosen strategy is simple_byte
  8673  00466C  5162               	movf	??_etherTypeToString& (0+255),w,b
  8674  00466E  0A00               	xorlw	0	; case 0
  8675  004670  B4D8               	btfsc	status,2,c
  8676  004672  D7E3               	goto	l798
  8677  004674  0A06               	xorlw	6	; case 6
  8678  004676  B4D8               	btfsc	status,2,c
  8679  004678  D7E6               	goto	l800
  8680  00467A  D7EA               	goto	l801
  8681  00467C                     __end_of_etherTypeToString:
  8682                           	opt stack 0
  8683                           tblptru	equ	0xFF8
  8684                           tblptrh	equ	0xFF7
  8685                           tblptrl	equ	0xFF6
  8686                           tablat	equ	0xFF5
  8687                           prodh	equ	0xFF4
  8688                           prodl	equ	0xFF3
  8689                           intcon	equ	0xFF2
  8690                           intcon3	equ	0xFF0
  8691                           indf0	equ	0xFEF
  8692                           postinc0	equ	0xFEE
  8693                           plusw0	equ	0xFEB
  8694                           fsr0h	equ	0xFEA
  8695                           fsr0l	equ	0xFE9
  8696                           wreg	equ	0xFE8
  8697                           postinc1	equ	0xFE6
  8698                           postdec1	equ	0xFE5
  8699                           plusw1	equ	0xFE3
  8700                           fsr1h	equ	0xFE2
  8701                           fsr1l	equ	0xFE1
  8702                           indf2	equ	0xFDF
  8703                           postinc2	equ	0xFDE
  8704                           postdec2	equ	0xFDD
  8705                           plusw2	equ	0xFDB
  8706                           fsr2h	equ	0xFDA
  8707                           fsr2l	equ	0xFD9
  8708                           status	equ	0xFD8
  8709                           
  8710 ;; *************** function _arp_handleNewPacket *****************
  8711 ;; Defined at:
  8712 ;;		line 33 in file "src/stack/protocols/arp.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
  8715 ;;		 -> stack.ethernet(15), stack(121), 
  8716 ;; Auto vars:     Size  Location     Type
  8717 ;;  arp            32   88[BANK1 ] struct arp_message
  8718 ;; Return value:  Size  Location     Type
  8719 ;;                  1    wreg      void 
  8720 ;; Registers used:
  8721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8722 ;; Tracked objects:
  8723 ;;		On entry : 0/0
  8724 ;;		On exit  : 0/0
  8725 ;;		Unchanged: 0/0
  8726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8727 ;;      Params:         0       2       0       0       0       0       0       0       0
  8728 ;;      Locals:         0       0      32       0       0       0       0       0       0
  8729 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8730 ;;      Totals:         0       4      32       0       0       0       0       0       0
  8731 ;;Total ram usage:       36 bytes
  8732 ;; Hardware stack levels used:    1
  8733 ;; Hardware stack levels required when called:   11
  8734 ;; This function calls:
  8735 ;;		_UARTTransmitText
  8736 ;;		_arp_parseFromRXBuffer
  8737 ;;		_arp_sendReply
  8738 ;;		_arp_setNewEntry
  8739 ;;		_ethernetController_dropPacket
  8740 ;;		_getMillis
  8741 ;;		_ipAdressToString
  8742 ;;		_macToString
  8743 ;; This function is called by:
  8744 ;;		_ethernet_rxGetNewFrame
  8745 ;; This function uses a non-reentrant model
  8746 ;;
  8747                           
  8748                           	psect	text24
  8749  0020BC                     __ptext24:
  8750                           	opt stack 0
  8751  0020BC                     _arp_handleNewPacket:
  8752                           	opt stack 17
  8753                           
  8754                           ;arp.c: 34: arp_message_t arp;
  8755                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;incstack = 0
  8759  0020BC  0100               	movlb	0	; () banked
  8760  0020BE  EE20 F00E          	lfsr	2,14
  8761  0020C2  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
  8762  0020C4  26D9               	addwf	fsr2l,f,c
  8763  0020C6  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
  8764  0020C8  22DA               	addwfc	fsr2h,f,c
  8765  0020CA  0E06               	movlw	6
  8766  0020CC  18DE               	xorwf	postinc2,w,c
  8767  0020CE  E104               	bnz	u10680
  8768  0020D0  0E08               	movlw	8
  8769  0020D2  18DE               	xorwf	postinc2,w,c
  8770  0020D4  B4D8               	btfsc	status,2,c
  8771  0020D6  D007               	goto	l898
  8772  0020D8                     u10680:
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;arp.c: 36: ethernetController_dropPacket(frame);
  8776  0020D8  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8777  0020DC  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8778  0020E0  ECA2  F023         	call	_ethernetController_dropPacket	;wreg free
  8779                           
  8780                           ;arp.c: 37: return;
  8781  0020E4  0012               	return	
  8782  0020E6                     l898:
  8783                           
  8784                           ;arp.c: 38: }
  8785                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
  8786  0020E6  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
  8787  0020EA  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
  8788  0020EE  EC77  F005         	call	_arp_parseFromRXBuffer	;wreg free
  8789  0020F2  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  8790  0020F6  0E1F               	movlw	31
  8791  0020F8                     u10691:
  8792  0020F8  CFEB FFDB          	movff	plusw0,plusw2
  8793  0020FC  06E8               	decf	wreg,f,c
  8794  0020FE  E2FC               	bc	u10691
  8795                           
  8796                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
  8797  002100  0101               	movlb	1	; () banked
  8798  002102  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
  8799  002104  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
  8800  002106  B4D8               	btfsc	status,2,c
  8801  002108  D00E               	goto	l900
  8802                           
  8803                           ; BSR set to: 1
  8804                           ;arp.c: 42: ethernetController_dropPacket(frame);
  8805  00210A  C0FC  F072         	movff	arp_handleNewPacket@frame,ethernetController_dropPacket@frame
  8806  00210E  C0FD  F073         	movff	arp_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  8807  002112  ECA2  F023         	call	_ethernetController_dropPacket	;wreg free
  8808                           
  8809                           ;arp.c: 43: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
  8810  002116  0E48               	movlw	low STR_59
  8811  002118  0100               	movlb	0	; () banked
  8812  00211A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8813  00211C  0E7C               	movlw	high STR_59
  8814  00211E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8815  002120  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8816                           
  8817                           ;arp.c: 44: return;
  8818  002124  0012               	return	
  8819  002126                     l900:
  8820                           
  8821                           ;arp.c: 45: }
  8822                           ;arp.c: 46: UARTTransmitText("[");
  8823  002126  0ECF               	movlw	low (STR_62+3)
  8824  002128  0100               	movlb	0	; () banked
  8825  00212A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8826  00212C  0E7F               	movlw	high (STR_62+3)
  8827  00212E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8828  002130  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8829                           
  8830                           ;arp.c: 47: UARTTransmitText(macToString(arp.senderMACAddress));
  8831  002134  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  8832  002138  EE00  F07A         	lfsr	0,macToString@addr
  8833  00213C  0E05               	movlw	5
  8834  00213E                     u10711:
  8835  00213E  CFDB FFEB          	movff	plusw2,plusw0
  8836  002142  06E8               	decf	wreg,f,c
  8837  002144  E2FC               	bc	u10711
  8838  002146  EC2E  F017         	call	_macToString	;wreg free
  8839  00214A  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8840  00214E  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8841  002152  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8842                           
  8843                           ;arp.c: 48: UARTTransmitText(", ");
  8844  002156  0E66               	movlw	low (STR_37+17)
  8845  002158  0100               	movlb	0	; () banked
  8846  00215A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8847  00215C  0E7E               	movlw	high (STR_37+17)
  8848  00215E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8849  002160  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8850                           
  8851                           ;arp.c: 49: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
  8852  002164  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
  8853  002168  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
  8854  00216C  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
  8855  002170  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
  8856  002174  EC67  F00F         	call	_ipAdressToString	;wreg free
  8857  002178  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8858  00217C  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8859  002180  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8860                           
  8861                           ;arp.c: 50: UARTTransmitText("]->[");
  8862  002184  0ECC               	movlw	low STR_62
  8863  002186  0100               	movlb	0	; () banked
  8864  002188  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8865  00218A  0E7F               	movlw	high STR_62
  8866  00218C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8867  00218E  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8868                           
  8869                           ;arp.c: 51: UARTTransmitText(macToString(arp.targetMACAddress));
  8870  002192  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
  8871  002196  EE00  F07A         	lfsr	0,macToString@addr
  8872  00219A  0E05               	movlw	5
  8873  00219C                     u10721:
  8874  00219C  CFDB FFEB          	movff	plusw2,plusw0
  8875  0021A0  06E8               	decf	wreg,f,c
  8876  0021A2  E2FC               	bc	u10721
  8877  0021A4  EC2E  F017         	call	_macToString	;wreg free
  8878  0021A8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  8879  0021AC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  8880  0021B0  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8881                           
  8882                           ;arp.c: 52: UARTTransmitText(", ");
  8883  0021B4  0E66               	movlw	low (STR_37+17)
  8884  0021B6  0100               	movlb	0	; () banked
  8885  0021B8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8886  0021BA  0E7E               	movlw	high (STR_37+17)
  8887  0021BC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8888  0021BE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8889                           
  8890                           ;arp.c: 53: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
  8891  0021C2  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
  8892  0021C6  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
  8893  0021CA  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
  8894  0021CE  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
  8895  0021D2  EC67  F00F         	call	_ipAdressToString	;wreg free
  8896  0021D6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  8897  0021DA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  8898  0021DE  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8899                           
  8900                           ;arp.c: 54: UARTTransmitText("]");
  8901  0021E2  0EFB               	movlw	low (STR_19+1)
  8902  0021E4  0100               	movlb	0	; () banked
  8903  0021E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8904  0021E8  0E7F               	movlw	high (STR_19+1)
  8905  0021EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8906  0021EC  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8907                           
  8908                           ;arp.c: 55: if (arp.fIsProbe)
  8909  0021F0  0101               	movlb	1	; () banked
  8910  0021F2  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
  8911  0021F4  D007               	goto	l901
  8912                           
  8913                           ; BSR set to: 1
  8914                           ;arp.c: 56: UARTTransmitText("[IsProbe]");
  8915  0021F6  0E85               	movlw	low STR_65
  8916  0021F8  0100               	movlb	0	; () banked
  8917  0021FA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8918  0021FC  0E7F               	movlw	high STR_65
  8919  0021FE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8920  002200  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8921  002204                     l901:
  8922                           
  8923                           ;arp.c: 57: if (arp.fIsGratuitous)
  8924  002204  0101               	movlb	1	; () banked
  8925  002206  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
  8926  002208  D007               	goto	l902
  8927                           
  8928                           ; BSR set to: 1
  8929                           ;arp.c: 58: UARTTransmitText("[IsGratuitous]");
  8930  00220A  0E1D               	movlw	low STR_66
  8931  00220C  0100               	movlb	0	; () banked
  8932  00220E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8933  002210  0E7F               	movlw	high STR_66
  8934  002212  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8935  002214  ECB4  F021         	call	_UARTTransmitText	;wreg free
  8936  002218                     l902:
  8937                           
  8938                           ;arp.c: 60: arp_sendReply(arp);
  8939  002218  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
  8940  00221C  EE01  F000         	lfsr	0,arp_sendReply@request
  8941  002220  0E1F               	movlw	31
  8942  002222                     u10751:
  8943  002222  CFDB FFEB          	movff	plusw2,plusw0
  8944  002226  06E8               	decf	wreg,f,c
  8945  002228  E2FC               	bc	u10751
  8946  00222A  EC90  F013         	call	_arp_sendReply	;wreg free
  8947                           
  8948                           ;arp.c: 61: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
  8949  00222E  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
  8950  002232  EE00  F064         	lfsr	0,arp_setNewEntry@mac
  8951  002236  0E05               	movlw	5
  8952  002238                     u10761:
  8953  002238  CFDB FFEB          	movff	plusw2,plusw0
  8954  00223C  06E8               	decf	wreg,f,c
  8955  00223E  E2FC               	bc	u10761
  8956  002240  C166  F06A         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
  8957  002244  C167  F06B         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
  8958  002248  C168  F06C         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
  8959  00224C  C169  F06D         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
  8960  002250  EC25  F026         	call	_getMillis	;wreg free
  8961  002254  C060  F06E         	movff	?_getMillis,arp_setNewEntry@timestamp
  8962  002258  C061  F06F         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
  8963  00225C  C062  F070         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
  8964  002260  C063  F071         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
  8965  002264  EC2B  F019         	call	_arp_setNewEntry	;wreg free
  8966  002268  0012               	return		;funcret
  8967  00226A                     __end_of_arp_handleNewPacket:
  8968                           	opt stack 0
  8969                           tblptru	equ	0xFF8
  8970                           tblptrh	equ	0xFF7
  8971                           tblptrl	equ	0xFF6
  8972                           tablat	equ	0xFF5
  8973                           prodh	equ	0xFF4
  8974                           prodl	equ	0xFF3
  8975                           intcon	equ	0xFF2
  8976                           intcon3	equ	0xFF0
  8977                           indf0	equ	0xFEF
  8978                           postinc0	equ	0xFEE
  8979                           plusw0	equ	0xFEB
  8980                           fsr0h	equ	0xFEA
  8981                           fsr0l	equ	0xFE9
  8982                           wreg	equ	0xFE8
  8983                           postinc1	equ	0xFE6
  8984                           postdec1	equ	0xFE5
  8985                           plusw1	equ	0xFE3
  8986                           fsr1h	equ	0xFE2
  8987                           fsr1l	equ	0xFE1
  8988                           indf2	equ	0xFDF
  8989                           postinc2	equ	0xFDE
  8990                           postdec2	equ	0xFDD
  8991                           plusw2	equ	0xFDB
  8992                           fsr2h	equ	0xFDA
  8993                           fsr2l	equ	0xFD9
  8994                           status	equ	0xFD8
  8995                           
  8996 ;; *************** function _ethernetController_dropPacket *****************
  8997 ;; Defined at:
  8998 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
  8999 ;; Parameters:    Size  Location     Type
  9000 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
  9001 ;;		 -> stack.ethernet(15), stack(121), 
  9002 ;; Auto vars:     Size  Location     Type
  9003 ;;		None
  9004 ;; Return value:  Size  Location     Type
  9005 ;;                  1    wreg      void 
  9006 ;; Registers used:
  9007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9008 ;; Tracked objects:
  9009 ;;		On entry : 0/0
  9010 ;;		On exit  : 0/0
  9011 ;;		Unchanged: 0/0
  9012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9013 ;;      Params:         0       2       0       0       0       0       0       0       0
  9014 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9016 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9017 ;;Total ram usage:        2 bytes
  9018 ;; Hardware stack levels used:    1
  9019 ;; Hardware stack levels required when called:    8
  9020 ;; This function calls:
  9021 ;;		_enc424j600_setRXTailPointer
  9022 ;;		_enc424j600_writeSingleByte
  9023 ;;		_ethernetController_getNextPacketPointer
  9024 ;; This function is called by:
  9025 ;;		_ethernet_rxGetNewFrame
  9026 ;;		_arp_handleNewPacket
  9027 ;;		_ipv4_handleNewPacket
  9028 ;; This function uses a non-reentrant model
  9029 ;;
  9030                           
  9031                           	psect	text25
  9032  004744                     __ptext25:
  9033                           	opt stack 0
  9034  004744                     _ethernetController_dropPacket:
  9035                           	opt stack 19
  9036                           
  9037                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
  9038                           
  9039                           ;incstack = 0
  9040  004744  EC46  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9041  004748  0E30               	movlw	48
  9042  00474A  0100               	movlb	0	; () banked
  9043  00474C  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9044  00474E  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9045  004750  A4D8               	btfss	status,2,c
  9046  004752  D007               	goto	l187
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
  9050  004754  0E5F               	movlw	95
  9051  004756  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9052  004758  0EFE               	movlw	254
  9053  00475A  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9054  00475C  ECF4  F024         	call	_enc424j600_setRXTailPointer	;wreg free
  9055                           
  9056                           ;ENC424J600.c: 383: } else {
  9057  004760  D00B               	goto	l188
  9058  004762                     l187:
  9059                           
  9060                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
  9061  004762  EC46  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  9062  004766  0EFE               	movlw	254
  9063  004768  0100               	movlb	0	; () banked
  9064  00476A  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
  9065  00476C  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
  9066  00476E  0EFF               	movlw	255
  9067  004770  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
  9068  004772  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
  9069  004774  ECF4  F024         	call	_enc424j600_setRXTailPointer	;wreg free
  9070  004778                     l188:
  9071                           
  9072                           ;ENC424J600.c: 385: }
  9073                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
  9074  004778  0ECC               	movlw	204
  9075  00477A  ECFD  F025         	call	_enc424j600_writeSingleByte
  9076  00477E  0012               	return		;funcret
  9077  004780                     __end_of_ethernetController_dropPacket:
  9078                           	opt stack 0
  9079                           tblptru	equ	0xFF8
  9080                           tblptrh	equ	0xFF7
  9081                           tblptrl	equ	0xFF6
  9082                           tablat	equ	0xFF5
  9083                           prodh	equ	0xFF4
  9084                           prodl	equ	0xFF3
  9085                           intcon	equ	0xFF2
  9086                           intcon3	equ	0xFF0
  9087                           indf0	equ	0xFEF
  9088                           postinc0	equ	0xFEE
  9089                           plusw0	equ	0xFEB
  9090                           fsr0h	equ	0xFEA
  9091                           fsr0l	equ	0xFE9
  9092                           wreg	equ	0xFE8
  9093                           postinc1	equ	0xFE6
  9094                           postdec1	equ	0xFE5
  9095                           plusw1	equ	0xFE3
  9096                           fsr1h	equ	0xFE2
  9097                           fsr1l	equ	0xFE1
  9098                           indf2	equ	0xFDF
  9099                           postinc2	equ	0xFDE
  9100                           postdec2	equ	0xFDD
  9101                           plusw2	equ	0xFDB
  9102                           fsr2h	equ	0xFDA
  9103                           fsr2l	equ	0xFD9
  9104                           status	equ	0xFD8
  9105                           
  9106 ;; *************** function _ethernetController_getNextPacketPointer *****************
  9107 ;; Defined at:
  9108 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;		None
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  2    2[BANK0 ] unsigned int 
  9115 ;; Registers used:
  9116 ;;		cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9122 ;;      Params:         0       2       0       0       0       0       0       0       0
  9123 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9124 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9125 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9126 ;;Total ram usage:        2 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    5
  9129 ;; This function calls:
  9130 ;;		_enc424j600_getNextPacketPointer
  9131 ;; This function is called by:
  9132 ;;		_ethernetController_dropPacket
  9133 ;;		_ethernet_rxGetNewFrame
  9134 ;; This function uses a non-reentrant model
  9135 ;;
  9136                           
  9137                           	psect	text26
  9138  004C8C                     __ptext26:
  9139                           	opt stack 0
  9140  004C8C                     _ethernetController_getNextPacketPointer:
  9141                           	opt stack 21
  9142                           
  9143                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
  9144                           
  9145                           ;incstack = 0
  9146  004C8C  EC60  F026         	call	_enc424j600_getNextPacketPointer	;wreg free
  9147  004C90  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
  9148  004C94  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
  9149  004C98  0012               	return	
  9150  004C9A                     __end_of_ethernetController_getNextPacketPointer:
  9151                           	opt stack 0
  9152                           tblptru	equ	0xFF8
  9153                           tblptrh	equ	0xFF7
  9154                           tblptrl	equ	0xFF6
  9155                           tablat	equ	0xFF5
  9156                           prodh	equ	0xFF4
  9157                           prodl	equ	0xFF3
  9158                           intcon	equ	0xFF2
  9159                           intcon3	equ	0xFF0
  9160                           indf0	equ	0xFEF
  9161                           postinc0	equ	0xFEE
  9162                           plusw0	equ	0xFEB
  9163                           fsr0h	equ	0xFEA
  9164                           fsr0l	equ	0xFE9
  9165                           wreg	equ	0xFE8
  9166                           postinc1	equ	0xFE6
  9167                           postdec1	equ	0xFE5
  9168                           plusw1	equ	0xFE3
  9169                           fsr1h	equ	0xFE2
  9170                           fsr1l	equ	0xFE1
  9171                           indf2	equ	0xFDF
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           plusw2	equ	0xFDB
  9175                           fsr2h	equ	0xFDA
  9176                           fsr2l	equ	0xFD9
  9177                           status	equ	0xFD8
  9178                           
  9179 ;; *************** function _enc424j600_getNextPacketPointer *****************
  9180 ;; Defined at:
  9181 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
  9182 ;; Parameters:    Size  Location     Type
  9183 ;;		None
  9184 ;; Auto vars:     Size  Location     Type
  9185 ;;		None
  9186 ;; Return value:  Size  Location     Type
  9187 ;;                  2    0[BANK0 ] unsigned int 
  9188 ;; Registers used:
  9189 ;;		None
  9190 ;; Tracked objects:
  9191 ;;		On entry : 0/0
  9192 ;;		On exit  : 0/0
  9193 ;;		Unchanged: 0/0
  9194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9195 ;;      Params:         0       2       0       0       0       0       0       0       0
  9196 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9197 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9198 ;;      Totals:         0       2       0       0       0       0       0       0       0
  9199 ;;Total ram usage:        2 bytes
  9200 ;; Hardware stack levels used:    1
  9201 ;; Hardware stack levels required when called:    4
  9202 ;; This function calls:
  9203 ;;		Nothing
  9204 ;; This function is called by:
  9205 ;;		_ethernetController_updateNextPacketPointer
  9206 ;;		_ethernetController_getNextPacketPointer
  9207 ;; This function uses a non-reentrant model
  9208 ;;
  9209                           
  9210                           	psect	text27
  9211  004CC0                     __ptext27:
  9212                           	opt stack 0
  9213  004CC0                     _enc424j600_getNextPacketPointer:
  9214                           	opt stack 21
  9215                           
  9216                           ;ENC424J600.c: 591: return nextPacketPointer;
  9217                           
  9218                           ;incstack = 0
  9219  004CC0  C042  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
  9220  004CC4  C043  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
  9221  004CC8  0012               	return		;funcret
  9222  004CCA                     __end_of_enc424j600_getNextPacketPointer:
  9223                           	opt stack 0
  9224                           tblptru	equ	0xFF8
  9225                           tblptrh	equ	0xFF7
  9226                           tblptrl	equ	0xFF6
  9227                           tablat	equ	0xFF5
  9228                           prodh	equ	0xFF4
  9229                           prodl	equ	0xFF3
  9230                           intcon	equ	0xFF2
  9231                           intcon3	equ	0xFF0
  9232                           indf0	equ	0xFEF
  9233                           postinc0	equ	0xFEE
  9234                           plusw0	equ	0xFEB
  9235                           fsr0h	equ	0xFEA
  9236                           fsr0l	equ	0xFE9
  9237                           wreg	equ	0xFE8
  9238                           postinc1	equ	0xFE6
  9239                           postdec1	equ	0xFE5
  9240                           plusw1	equ	0xFE3
  9241                           fsr1h	equ	0xFE2
  9242                           fsr1l	equ	0xFE1
  9243                           indf2	equ	0xFDF
  9244                           postinc2	equ	0xFDE
  9245                           postdec2	equ	0xFDD
  9246                           plusw2	equ	0xFDB
  9247                           fsr2h	equ	0xFDA
  9248                           fsr2l	equ	0xFD9
  9249                           status	equ	0xFD8
  9250                           
  9251 ;; *************** function _arp_setNewEntry *****************
  9252 ;; Defined at:
  9253 ;;		line 401 in file "src/stack/protocols/arp.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  mac             6    4[BANK0 ] struct macaddress
  9256 ;;  ip              4   10[BANK0 ] struct ipv4_address
  9257 ;;  timestamp       4   14[BANK0 ] unsigned long 
  9258 ;; Auto vars:     Size  Location     Type
  9259 ;;  i               1   27[BANK0 ] unsigned char 
  9260 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
  9261 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
  9262 ;; Return value:  Size  Location     Type
  9263 ;;                  1    wreg      void 
  9264 ;; Registers used:
  9265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9266 ;; Tracked objects:
  9267 ;;		On entry : 0/0
  9268 ;;		On exit  : 0/0
  9269 ;;		Unchanged: 0/0
  9270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9271 ;;      Params:         0      14       0       0       0       0       0       0       0
  9272 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9273 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9274 ;;      Totals:         0      24       0       0       0       0       0       0       0
  9275 ;;Total ram usage:       24 bytes
  9276 ;; Hardware stack levels used:    1
  9277 ;; Hardware stack levels required when called:    4
  9278 ;; This function calls:
  9279 ;;		Nothing
  9280 ;; This function is called by:
  9281 ;;		_arp_handleNewPacket
  9282 ;;		_arp_init
  9283 ;; This function uses a non-reentrant model
  9284 ;;
  9285                           
  9286                           	psect	text28
  9287  003256                     __ptext28:
  9288                           	opt stack 0
  9289  003256                     _arp_setNewEntry:
  9290                           	opt stack 24
  9291                           
  9292                           ;arp.c: 402: uint32_t maxSeconds = 0;
  9293                           
  9294                           ;incstack = 0
  9295  003256  0E00               	movlw	0
  9296  003258  0100               	movlb	0	; () banked
  9297  00325A  6F76               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
  9298  00325C  0E00               	movlw	0
  9299  00325E  6F77               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
  9300  003260  0E00               	movlw	0
  9301  003262  6F78               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
  9302  003264  0E00               	movlw	0
  9303  003266  6F79               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
  9304                           
  9305                           ;arp.c: 403: uint8_t oldestIndex = 0;
  9306  003268  0E00               	movlw	0
  9307  00326A  6F7A               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
  9308                           
  9309                           ;arp.c: 405: for (uint8_t i = 0; i < 8u; i++) {
  9310  00326C  0E00               	movlw	0
  9311  00326E  6F7B               	movwf	arp_setNewEntry@i& (0+255),b
  9312  003270                     l8773:
  9313                           
  9314                           ; BSR set to: 0
  9315  003270  0E07               	movlw	7
  9316  003272  657B               	cpfsgt	arp_setNewEntry@i& (0+255),b
  9317  003274  D001               	goto	l1020
  9318  003276  D02E               	goto	u10400
  9319  003278                     l1020:
  9320                           
  9321                           ; BSR set to: 0
  9322                           ;arp.c: 406: if (arp_table[i].timeCreated > maxSeconds) {
  9323                           
  9324                           ; BSR set to: 0
  9325  003278  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9326  00327A  0D0E               	mullw	14
  9327  00327C  0E0A               	movlw	10
  9328  00327E  26F3               	addwf	prodl,f,c
  9329  003280  0E00               	movlw	0
  9330  003282  22F4               	addwfc	prodh,f,c
  9331  003284  0E0F               	movlw	low _arp_table
  9332  003286  24F3               	addwf	prodl,w,c
  9333  003288  6ED9               	movwf	fsr2l,c
  9334  00328A  0E02               	movlw	high _arp_table
  9335  00328C  20F4               	addwfc	prodh,w,c
  9336  00328E  6EDA               	movwf	fsr2h,c
  9337  003290  50DE               	movf	postinc2,w,c
  9338  003292  5D76               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
  9339  003294  50DE               	movf	postinc2,w,c
  9340  003296  5977               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
  9341  003298  50DE               	movf	postinc2,w,c
  9342  00329A  5978               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
  9343  00329C  50DE               	movf	postinc2,w,c
  9344  00329E  5979               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
  9345  0032A0  B0D8               	btfsc	status,0,c
  9346  0032A2  D016               	goto	l1022
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;arp.c: 408: maxSeconds = arp_table[i].timeCreated;
  9350  0032A4  517B               	movf	arp_setNewEntry@i& (0+255),w,b
  9351  0032A6  0D0E               	mullw	14
  9352  0032A8  0E0A               	movlw	10
  9353  0032AA  26F3               	addwf	prodl,f,c
  9354  0032AC  0E00               	movlw	0
  9355  0032AE  22F4               	addwfc	prodh,f,c
  9356  0032B0  0E0F               	movlw	low _arp_table
  9357  0032B2  24F3               	addwf	prodl,w,c
  9358  0032B4  6ED9               	movwf	fsr2l,c
  9359  0032B6  0E02               	movlw	high _arp_table
  9360  0032B8  20F4               	addwfc	prodh,w,c
  9361  0032BA  6EDA               	movwf	fsr2h,c
  9362  0032BC  CFDE F076          	movff	postinc2,arp_setNewEntry@maxSeconds
  9363  0032C0  CFDE F077          	movff	postinc2,arp_setNewEntry@maxSeconds+1
  9364  0032C4  CFDE F078          	movff	postinc2,arp_setNewEntry@maxSeconds+2
  9365  0032C8  CFDE F079          	movff	postinc2,arp_setNewEntry@maxSeconds+3
  9366                           
  9367                           ; BSR set to: 0
  9368                           ;arp.c: 409: oldestIndex = i;
  9369  0032CC  C07B  F07A         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
  9370  0032D0                     l1022:
  9371                           
  9372                           ; BSR set to: 0
  9373                           
  9374                           ; BSR set to: 0
  9375  0032D0  2B7B               	incf	arp_setNewEntry@i& (0+255),f,b
  9376  0032D2  D7CE               	goto	l8773
  9377  0032D4                     u10400:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;arp.c: 410: }
  9381                           ;arp.c: 411: }
  9382                           ;arp.c: 413: arp_table[oldestIndex].ip = ip;
  9383                           
  9384                           ; BSR set to: 0
  9385  0032D4  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9386  0032D6  0D0E               	mullw	14
  9387  0032D8  0E0F               	movlw	low _arp_table
  9388  0032DA  24F3               	addwf	prodl,w,c
  9389  0032DC  6ED9               	movwf	fsr2l,c
  9390  0032DE  0E02               	movlw	high _arp_table
  9391  0032E0  20F4               	addwfc	prodh,w,c
  9392  0032E2  6EDA               	movwf	fsr2h,c
  9393  0032E4  C06A  FFDE         	movff	arp_setNewEntry@ip,postinc2
  9394  0032E8  C06B  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
  9395  0032EC  C06C  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
  9396  0032F0  C06D  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;arp.c: 414: arp_table[oldestIndex].mac = mac;
  9400  0032F4  EE20  F064         	lfsr	2,arp_setNewEntry@mac
  9401  0032F8  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9402  0032FA  0D0E               	mullw	14
  9403  0032FC  0E04               	movlw	4
  9404  0032FE  26F3               	addwf	prodl,f,c
  9405  003300  0E00               	movlw	0
  9406  003302  22F4               	addwfc	prodh,f,c
  9407  003304  0E0F               	movlw	low _arp_table
  9408  003306  24F3               	addwf	prodl,w,c
  9409  003308  6EE1               	movwf	fsr1l,c
  9410  00330A  0E02               	movlw	high _arp_table
  9411  00330C  20F4               	addwfc	prodh,w,c
  9412  00330E  6EE2               	movwf	fsr1h,c
  9413  003310  0E05               	movlw	5
  9414  003312                     u10411:
  9415  003312  CFDB FFE3          	movff	plusw2,plusw1
  9416  003316  06E8               	decf	wreg,f,c
  9417  003318  E2FC               	bc	u10411
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;arp.c: 415: arp_table[oldestIndex].timeCreated = timestamp;
  9421  00331A  517A               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
  9422  00331C  0D0E               	mullw	14
  9423  00331E  0E0A               	movlw	10
  9424  003320  26F3               	addwf	prodl,f,c
  9425  003322  0E00               	movlw	0
  9426  003324  22F4               	addwfc	prodh,f,c
  9427  003326  0E0F               	movlw	low _arp_table
  9428  003328  24F3               	addwf	prodl,w,c
  9429  00332A  6ED9               	movwf	fsr2l,c
  9430  00332C  0E02               	movlw	high _arp_table
  9431  00332E  20F4               	addwfc	prodh,w,c
  9432  003330  6EDA               	movwf	fsr2h,c
  9433  003332  C06E  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
  9434  003336  C06F  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
  9435  00333A  C070  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
  9436  00333E  C071  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
  9437                           
  9438                           ; BSR set to: 0
  9439  003342  0012               	return		;funcret
  9440  003344                     __end_of_arp_setNewEntry:
  9441                           	opt stack 0
  9442                           tblptru	equ	0xFF8
  9443                           tblptrh	equ	0xFF7
  9444                           tblptrl	equ	0xFF6
  9445                           tablat	equ	0xFF5
  9446                           prodh	equ	0xFF4
  9447                           prodl	equ	0xFF3
  9448                           intcon	equ	0xFF2
  9449                           intcon3	equ	0xFF0
  9450                           indf0	equ	0xFEF
  9451                           postinc0	equ	0xFEE
  9452                           plusw0	equ	0xFEB
  9453                           fsr0h	equ	0xFEA
  9454                           fsr0l	equ	0xFE9
  9455                           wreg	equ	0xFE8
  9456                           postinc1	equ	0xFE6
  9457                           postdec1	equ	0xFE5
  9458                           plusw1	equ	0xFE3
  9459                           fsr1h	equ	0xFE2
  9460                           fsr1l	equ	0xFE1
  9461                           indf2	equ	0xFDF
  9462                           postinc2	equ	0xFDE
  9463                           postdec2	equ	0xFDD
  9464                           plusw2	equ	0xFDB
  9465                           fsr2h	equ	0xFDA
  9466                           fsr2l	equ	0xFD9
  9467                           status	equ	0xFD8
  9468                           
  9469 ;; *************** function _arp_sendReply *****************
  9470 ;; Defined at:
  9471 ;;		line 206 in file "src/stack/protocols/arp.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;  request        32    0[BANK1 ] struct arp_message
  9474 ;; Auto vars:     Size  Location     Type
  9475 ;;  reply          32   56[BANK1 ] struct arp_message
  9476 ;;  targetMAC       6   38[BANK1 ] struct macaddress
  9477 ;;  senderMAC       6   32[BANK1 ] struct macaddress
  9478 ;;  myIP            4   52[BANK1 ] struct ipv4_address
  9479 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
  9480 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
  9481 ;; Return value:  Size  Location     Type
  9482 ;;                  1    wreg      void 
  9483 ;; Registers used:
  9484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9485 ;; Tracked objects:
  9486 ;;		On entry : 0/0
  9487 ;;		On exit  : 0/0
  9488 ;;		Unchanged: 0/0
  9489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9490 ;;      Params:         0       0      32       0       0       0       0       0       0
  9491 ;;      Locals:         0       0      56       0       0       0       0       0       0
  9492 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9493 ;;      Totals:         0       0      88       0       0       0       0       0       0
  9494 ;;Total ram usage:       88 bytes
  9495 ;; Hardware stack levels used:    1
  9496 ;; Hardware stack levels required when called:   10
  9497 ;; This function calls:
  9498 ;;		_UARTTransmitText
  9499 ;;		_arp_send
  9500 ;;		_ethernetController_getMacAddress
  9501 ;;		_ipAdressToString
  9502 ;;		_ipv4_cmp
  9503 ;;		_ipv4_getIPSourceAddress
  9504 ;;		_macToString
  9505 ;; This function is called by:
  9506 ;;		_arp_handleNewPacket
  9507 ;; This function uses a non-reentrant model
  9508 ;;
  9509                           
  9510                           	psect	text29
  9511  002720                     __ptext29:
  9512                           	opt stack 0
  9513  002720                     _arp_sendReply:
  9514                           	opt stack 17
  9515                           
  9516                           ;arp.c: 207: if (request.operation != ARP_REQUEST)
  9517                           
  9518                           ; BSR set to: 0
  9519                           ;incstack = 0
  9520  002720  0101               	movlb	1	; () banked
  9521  002722  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
  9522  002724  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
  9523  002726  A4D8               	btfss	status,2,c
  9524  002728  0012               	return	
  9525                           
  9526                           ; BSR set to: 1
  9527                           ;arp.c: 210: ipv4_address_t myIP = ipv4_getIPSourceAddress();
  9528                           
  9529                           ; BSR set to: 1
  9530                           
  9531                           ; BSR set to: 1
  9532                           ;arp.c: 208: return;
  9533  00272A  EC2E  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  9534  00272E  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
  9535  002732  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
  9536  002736  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
  9537  00273A  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
  9538                           
  9539                           ;arp.c: 211: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
  9540  00273E  0E18               	movlw	low (arp_sendReply@request+24)
  9541  002740  0100               	movlb	0	; () banked
  9542  002742  6F60               	movwf	ipv4_cmp@a& (0+255),b
  9543  002744  0E01               	movlw	high (arp_sendReply@request+24)
  9544  002746  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  9545  002748  0E34               	movlw	low arp_sendReply@myIP
  9546  00274A  6F62               	movwf	ipv4_cmp@b& (0+255),b
  9547  00274C  0E01               	movlw	high arp_sendReply@myIP
  9548  00274E  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  9549  002750  EC81  F023         	call	_ipv4_cmp	;wreg free
  9550  002754  0100               	movlb	0	; () banked
  9551  002756  A0D8               	btfss	status,0,c
  9552  002758  0012               	return	
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;arp.c: 214: arp_message_t reply;
  9556                           ;arp.c: 215: ipv4_address_t senderIP;
  9557                           ;arp.c: 216: ipv4_address_t targetIP;
  9558                           ;arp.c: 217: macaddress_t senderMAC;
  9559                           ;arp.c: 218: macaddress_t targetMAC;
  9560                           ;arp.c: 220: senderMAC = ethernetController_getMacAddress();
  9561                           
  9562                           ; BSR set to: 0
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;arp.c: 212: return;
  9566  00275A  EC7D  F01F         	call	_ethernetController_getMacAddress	;wreg free
  9567  00275E  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9568  002762  0E05               	movlw	5
  9569  002764                     u10321:
  9570  002764  CFEB FFDB          	movff	plusw0,plusw2
  9571  002768  06E8               	decf	wreg,f,c
  9572  00276A  E2FC               	bc	u10321
  9573                           
  9574                           ;arp.c: 221: targetMAC = request.senderMACAddress;
  9575  00276C  EE21  F008         	lfsr	2,arp_sendReply@request+8
  9576  002770  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
  9577  002774  0E05               	movlw	5
  9578  002776                     u10331:
  9579  002776  CFDB FFE3          	movff	plusw2,plusw1
  9580  00277A  06E8               	decf	wreg,f,c
  9581  00277C  E2FC               	bc	u10331
  9582                           
  9583                           ;arp.c: 222: senderIP = ipv4_getIPSourceAddress();
  9584  00277E  EC2E  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  9585  002782  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
  9586  002786  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
  9587  00278A  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
  9588  00278E  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
  9589                           
  9590                           ;arp.c: 223: targetIP = request.senderIPAddress;
  9591  002792  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
  9592  002796  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
  9593  00279A  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
  9594  00279E  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
  9595                           
  9596                           ;arp.c: 225: reply.hlen = 6u;
  9597  0027A2  0E06               	movlw	6
  9598  0027A4  0101               	movlb	1	; () banked
  9599  0027A6  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
  9600                           
  9601                           ; BSR set to: 1
  9602                           ;arp.c: 226: reply.plen = 4u;
  9603  0027A8  0E04               	movlw	4
  9604  0027AA  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
  9605                           
  9606                           ; BSR set to: 1
  9607                           ;arp.c: 227: reply.htype = ARP_HTYPE_ETHERNET;
  9608  0027AC  0E00               	movlw	0
  9609  0027AE  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
  9610  0027B0  0E01               	movlw	1
  9611  0027B2  6F38               	movwf	arp_sendReply@reply& (0+255),b
  9612                           
  9613                           ; BSR set to: 1
  9614                           ;arp.c: 228: reply.ptype = ARP_PTYPE_IPv4;
  9615  0027B4  0E08               	movlw	8
  9616  0027B6  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
  9617  0027B8  0E00               	movlw	0
  9618  0027BA  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
  9619                           
  9620                           ; BSR set to: 1
  9621                           ;arp.c: 229: reply.operation = ARP_REPLY;
  9622  0027BC  0E00               	movlw	0
  9623  0027BE  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
  9624  0027C0  0E02               	movlw	2
  9625  0027C2  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
  9626                           
  9627                           ; BSR set to: 1
  9628                           ;arp.c: 230: reply.senderIPAddress = senderIP;
  9629  0027C4  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
  9630  0027C8  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
  9631  0027CC  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
  9632  0027D0  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
  9633                           
  9634                           ; BSR set to: 1
  9635                           ;arp.c: 231: reply.senderMACAddress = senderMAC;
  9636  0027D4  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
  9637  0027D8  EE11  F040         	lfsr	1,arp_sendReply@reply+8
  9638  0027DC  0E05               	movlw	5
  9639  0027DE                     u10341:
  9640  0027DE  CFDB FFE3          	movff	plusw2,plusw1
  9641  0027E2  06E8               	decf	wreg,f,c
  9642  0027E4  E2FC               	bc	u10341
  9643                           
  9644                           ; BSR set to: 1
  9645                           ;arp.c: 232: reply.targetIPAddress = targetIP;
  9646  0027E6  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
  9647  0027EA  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
  9648  0027EE  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
  9649  0027F2  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
  9650                           
  9651                           ; BSR set to: 1
  9652                           ;arp.c: 233: reply.targetMACAddress = targetMAC;
  9653  0027F6  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
  9654  0027FA  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
  9655  0027FE  0E05               	movlw	5
  9656  002800                     u10351:
  9657  002800  CFDB FFE3          	movff	plusw2,plusw1
  9658  002804  06E8               	decf	wreg,f,c
  9659  002806  E2FC               	bc	u10351
  9660                           
  9661                           ; BSR set to: 1
  9662                           ;arp.c: 235: arp_send(reply);
  9663  002808  EE21  F038         	lfsr	2,arp_sendReply@reply
  9664  00280C  EE00  F0A7         	lfsr	0,arp_send@arp
  9665  002810  0E1F               	movlw	31
  9666  002812                     u10361:
  9667  002812  CFDB FFEB          	movff	plusw2,plusw0
  9668  002816  06E8               	decf	wreg,f,c
  9669  002818  E2FC               	bc	u10361
  9670  00281A  ECE7  F00B         	call	_arp_send	;wreg free
  9671                           
  9672                           ;arp.c: 237: UARTTransmitText("[Reply sent to ");
  9673  00281E  0EFD               	movlw	low STR_67
  9674  002820  0100               	movlb	0	; () banked
  9675  002822  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9676  002824  0E7E               	movlw	high STR_67
  9677  002826  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9678  002828  ECB4  F021         	call	_UARTTransmitText	;wreg free
  9679                           
  9680                           ;arp.c: 238: UARTTransmitText(macToString(reply.targetMACAddress));
  9681  00282C  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
  9682  002830  EE00  F07A         	lfsr	0,macToString@addr
  9683  002834  0E05               	movlw	5
  9684  002836                     u10371:
  9685  002836  CFDB FFEB          	movff	plusw2,plusw0
  9686  00283A  06E8               	decf	wreg,f,c
  9687  00283C  E2FC               	bc	u10371
  9688  00283E  EC2E  F017         	call	_macToString	;wreg free
  9689  002842  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  9690  002846  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  9691  00284A  ECB4  F021         	call	_UARTTransmitText	;wreg free
  9692                           
  9693                           ;arp.c: 239: UARTTransmitText(", ");
  9694  00284E  0E66               	movlw	low (STR_37+17)
  9695  002850  0100               	movlb	0	; () banked
  9696  002852  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9697  002854  0E7E               	movlw	high (STR_37+17)
  9698  002856  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9699  002858  ECB4  F021         	call	_UARTTransmitText	;wreg free
  9700                           
  9701                           ;arp.c: 240: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
  9702  00285C  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
  9703  002860  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
  9704  002864  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
  9705  002868  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
  9706  00286C  EC67  F00F         	call	_ipAdressToString	;wreg free
  9707  002870  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9708  002874  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9709  002878  ECB4  F021         	call	_UARTTransmitText	;wreg free
  9710                           
  9711                           ;arp.c: 241: UARTTransmitText("]");
  9712  00287C  0EFB               	movlw	low (STR_19+1)
  9713  00287E  0100               	movlb	0	; () banked
  9714  002880  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9715  002882  0E7F               	movlw	high (STR_19+1)
  9716  002884  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9717  002886  ECB4  F021         	call	_UARTTransmitText	;wreg free
  9718  00288A  0012               	return		;funcret
  9719  00288C                     __end_of_arp_sendReply:
  9720                           	opt stack 0
  9721                           tblptru	equ	0xFF8
  9722                           tblptrh	equ	0xFF7
  9723                           tblptrl	equ	0xFF6
  9724                           tablat	equ	0xFF5
  9725                           prodh	equ	0xFF4
  9726                           prodl	equ	0xFF3
  9727                           intcon	equ	0xFF2
  9728                           intcon3	equ	0xFF0
  9729                           indf0	equ	0xFEF
  9730                           postinc0	equ	0xFEE
  9731                           plusw0	equ	0xFEB
  9732                           fsr0h	equ	0xFEA
  9733                           fsr0l	equ	0xFE9
  9734                           wreg	equ	0xFE8
  9735                           postinc1	equ	0xFE6
  9736                           postdec1	equ	0xFE5
  9737                           plusw1	equ	0xFE3
  9738                           fsr1h	equ	0xFE2
  9739                           fsr1l	equ	0xFE1
  9740                           indf2	equ	0xFDF
  9741                           postinc2	equ	0xFDE
  9742                           postdec2	equ	0xFDD
  9743                           plusw2	equ	0xFDB
  9744                           fsr2h	equ	0xFDA
  9745                           fsr2l	equ	0xFD9
  9746                           status	equ	0xFD8
  9747                           
  9748 ;; *************** function _macToString *****************
  9749 ;; Defined at:
  9750 ;;		line 107 in file "src/system/uart.c"
  9751 ;; Parameters:    Size  Location     Type
  9752 ;;  addr            6   26[BANK0 ] struct macaddress
  9753 ;; Auto vars:     Size  Location     Type
  9754 ;;  i               2   53[BANK0 ] int 
  9755 ;;  address        18   33[BANK0 ] unsigned char [18]
  9756 ;;  j               1   55[BANK0 ] unsigned char 
  9757 ;;  secondDigit     1   52[BANK0 ] unsigned char 
  9758 ;;  firstDigit      1   51[BANK0 ] unsigned char 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  2   26[BANK0 ] PTR unsigned char 
  9761 ;; Registers used:
  9762 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9768 ;;      Params:         0       6       0       0       0       0       0       0       0
  9769 ;;      Locals:         0      23       0       0       0       0       0       0       0
  9770 ;;      Temps:          0       1       0       0       0       0       0       0       0
  9771 ;;      Totals:         0      30       0       0       0       0       0       0       0
  9772 ;;Total ram usage:       30 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    4
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_ethernet_rxGetNewFrame
  9779 ;;		_main
  9780 ;;		_arp_handleNewPacket
  9781 ;;		_arp_sendReply
  9782 ;;		_arpEntryToString
  9783 ;; This function uses a non-reentrant model
  9784 ;;
  9785                           
  9786                           	psect	text30
  9787  002E5C                     __ptext30:
  9788                           	opt stack 0
  9789  002E5C                     _macToString:
  9790                           	opt stack 26
  9791                           
  9792                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
  9793                           
  9794                           ;incstack = 0
  9795  002E5C  EE22  F0C5         	lfsr	2,macToString@F5943
  9796  002E60  EE10  F081         	lfsr	1,macToString@address
  9797  002E64  0E11               	movlw	17
  9798  002E66                     u9191:
  9799  002E66  CFDB FFE3          	movff	plusw2,plusw1
  9800  002E6A  06E8               	decf	wreg,f,c
  9801  002E6C  E2FC               	bc	u9191
  9802                           
  9803                           ;uart.c: 109: uint8_t j = 0;
  9804  002E6E  0E00               	movlw	0
  9805  002E70  0100               	movlb	0	; () banked
  9806  002E72  6F97               	movwf	macToString@j& (0+255),b
  9807                           
  9808                           ; BSR set to: 0
  9809                           ;uart.c: 110: uint8_t firstDigit;
  9810                           ;uart.c: 111: uint8_t secondDigit;
  9811                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
  9812  002E74  0E00               	movlw	0
  9813  002E76  6F96               	movwf	(macToString@i+1)& (0+255),b
  9814  002E78  0E00               	movlw	0
  9815  002E7A  6F95               	movwf	macToString@i& (0+255),b
  9816                           
  9817                           ; BSR set to: 0
  9818  002E7C  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9819  002E7E  D006               	goto	l787
  9820  002E80  5196               	movf	(macToString@i+1)& (0+255),w,b
  9821  002E82  E16B               	bnz	l788
  9822  002E84  0E06               	movlw	6
  9823  002E86  5D95               	subwf	macToString@i& (0+255),w,b
  9824  002E88  B0D8               	btfsc	status,0,c
  9825  002E8A  D067               	goto	u9240
  9826  002E8C                     l787:
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
  9830                           
  9831                           ; BSR set to: 0
  9832  002E8C  0E7A               	movlw	low macToString@addr
  9833  002E8E  2595               	addwf	macToString@i& (0+255),w,b
  9834  002E90  6ED9               	movwf	fsr2l,c
  9835  002E92  0E00               	movlw	high macToString@addr
  9836  002E94  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9837  002E96  6EDA               	movwf	fsr2h,c
  9838  002E98  50DF               	movf	indf2,w,c
  9839  002E9A  6F80               	movwf	??_macToString& (0+255),b
  9840  002E9C  3980               	swapf	??_macToString& (0+255),w,b
  9841  002E9E  0B0F               	andlw	15
  9842  002EA0  0B0F               	andlw	15
  9843  002EA2  6F93               	movwf	macToString@firstDigit& (0+255),b
  9844                           
  9845                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
  9846  002EA4  0E7A               	movlw	low macToString@addr
  9847  002EA6  2595               	addwf	macToString@i& (0+255),w,b
  9848  002EA8  6ED9               	movwf	fsr2l,c
  9849  002EAA  0E00               	movlw	high macToString@addr
  9850  002EAC  2196               	addwfc	(macToString@i+1)& (0+255),w,b
  9851  002EAE  6EDA               	movwf	fsr2h,c
  9852  002EB0  50DF               	movf	indf2,w,c
  9853  002EB2  0B0F               	andlw	15
  9854  002EB4  6F94               	movwf	macToString@secondDigit& (0+255),b
  9855                           
  9856                           ; BSR set to: 0
  9857                           ;uart.c: 117: firstDigit += 0x30;
  9858  002EB6  0E30               	movlw	48
  9859  002EB8  2793               	addwf	macToString@firstDigit& (0+255),f,b
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;uart.c: 118: secondDigit += 0x30;
  9863  002EBA  0E30               	movlw	48
  9864  002EBC  2794               	addwf	macToString@secondDigit& (0+255),f,b
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;uart.c: 120: if (firstDigit > '9') {
  9868  002EBE  0E39               	movlw	57
  9869  002EC0  6593               	cpfsgt	macToString@firstDigit& (0+255),b
  9870  002EC2  D00C               	goto	l789
  9871                           
  9872                           ; BSR set to: 0
  9873                           ;uart.c: 121: address[j++] = firstDigit + 7;
  9874  002EC4  5197               	movf	macToString@j& (0+255),w,b
  9875  002EC6  0D01               	mullw	1
  9876  002EC8  0E81               	movlw	low macToString@address
  9877  002ECA  24F3               	addwf	prodl,w,c
  9878  002ECC  6ED9               	movwf	fsr2l,c
  9879  002ECE  0E00               	movlw	high macToString@address
  9880  002ED0  20F4               	addwfc	prodh,w,c
  9881  002ED2  6EDA               	movwf	fsr2h,c
  9882  002ED4  5193               	movf	macToString@firstDigit& (0+255),w,b
  9883  002ED6  0F07               	addlw	7
  9884  002ED8  6EDF               	movwf	indf2,c
  9885  002EDA  D00A               	goto	l8285
  9886  002EDC                     l789:
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;uart.c: 123: address[j++] = firstDigit;
  9890                           
  9891                           ; BSR set to: 0
  9892  002EDC  5197               	movf	macToString@j& (0+255),w,b
  9893  002EDE  0D01               	mullw	1
  9894  002EE0  0E81               	movlw	low macToString@address
  9895  002EE2  24F3               	addwf	prodl,w,c
  9896  002EE4  6ED9               	movwf	fsr2l,c
  9897  002EE6  0E00               	movlw	high macToString@address
  9898  002EE8  20F4               	addwfc	prodh,w,c
  9899  002EEA  6EDA               	movwf	fsr2h,c
  9900  002EEC  C093  FFDF         	movff	macToString@firstDigit,indf2
  9901  002EF0                     l8285:
  9902                           
  9903                           ; BSR set to: 0
  9904  002EF0  2B97               	incf	macToString@j& (0+255),f,b
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;uart.c: 124: }
  9908                           ;uart.c: 125: if (secondDigit > '9') {
  9909                           
  9910                           ; BSR set to: 0
  9911  002EF2  0E39               	movlw	57
  9912  002EF4  6594               	cpfsgt	macToString@secondDigit& (0+255),b
  9913  002EF6  D00C               	goto	l791
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;uart.c: 126: address[j++] = secondDigit + 7;
  9917  002EF8  5197               	movf	macToString@j& (0+255),w,b
  9918  002EFA  0D01               	mullw	1
  9919  002EFC  0E81               	movlw	low macToString@address
  9920  002EFE  24F3               	addwf	prodl,w,c
  9921  002F00  6ED9               	movwf	fsr2l,c
  9922  002F02  0E00               	movlw	high macToString@address
  9923  002F04  20F4               	addwfc	prodh,w,c
  9924  002F06  6EDA               	movwf	fsr2h,c
  9925  002F08  5194               	movf	macToString@secondDigit& (0+255),w,b
  9926  002F0A  0F07               	addlw	7
  9927  002F0C  6EDF               	movwf	indf2,c
  9928  002F0E  D00A               	goto	l8295
  9929  002F10                     l791:
  9930                           
  9931                           ; BSR set to: 0
  9932                           ;uart.c: 128: address[j++] = secondDigit;
  9933                           
  9934                           ; BSR set to: 0
  9935  002F10  5197               	movf	macToString@j& (0+255),w,b
  9936  002F12  0D01               	mullw	1
  9937  002F14  0E81               	movlw	low macToString@address
  9938  002F16  24F3               	addwf	prodl,w,c
  9939  002F18  6ED9               	movwf	fsr2l,c
  9940  002F1A  0E00               	movlw	high macToString@address
  9941  002F1C  20F4               	addwfc	prodh,w,c
  9942  002F1E  6EDA               	movwf	fsr2h,c
  9943  002F20  C094  FFDF         	movff	macToString@secondDigit,indf2
  9944  002F24                     l8295:
  9945                           
  9946                           ; BSR set to: 0
  9947  002F24  2B97               	incf	macToString@j& (0+255),f,b
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;uart.c: 129: }
  9951                           ;uart.c: 131: if (i < 5) {
  9952                           
  9953                           ; BSR set to: 0
  9954  002F26  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9955  002F28  D006               	goto	u9230
  9956  002F2A  5196               	movf	(macToString@i+1)& (0+255),w,b
  9957  002F2C  E10F               	bnz	l8303
  9958  002F2E  0E05               	movlw	5
  9959  002F30  5D95               	subwf	macToString@i& (0+255),w,b
  9960  002F32  B0D8               	btfsc	status,0,c
  9961  002F34  D00B               	goto	l793
  9962  002F36                     u9230:
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;uart.c: 132: address[j++] = ':';
  9966  002F36  5197               	movf	macToString@j& (0+255),w,b
  9967  002F38  0D01               	mullw	1
  9968  002F3A  0E81               	movlw	low macToString@address
  9969  002F3C  24F3               	addwf	prodl,w,c
  9970  002F3E  6ED9               	movwf	fsr2l,c
  9971  002F40  0E00               	movlw	high macToString@address
  9972  002F42  20F4               	addwfc	prodh,w,c
  9973  002F44  6EDA               	movwf	fsr2h,c
  9974  002F46  0E3A               	movlw	58
  9975  002F48  6EDF               	movwf	indf2,c
  9976                           
  9977                           ; BSR set to: 0
  9978  002F4A  2B97               	incf	macToString@j& (0+255),f,b
  9979  002F4C                     l793:
  9980  002F4C                     l8303:
  9981                           
  9982                           ; BSR set to: 0
  9983  002F4C  4B95               	infsnz	macToString@i& (0+255),f,b
  9984  002F4E  2B96               	incf	(macToString@i+1)& (0+255),f,b
  9985                           
  9986                           ; BSR set to: 0
  9987  002F50  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
  9988  002F52  D79C               	goto	l787
  9989  002F54  5196               	movf	(macToString@i+1)& (0+255),w,b
  9990  002F56  E101               	bnz	l8307
  9991  002F58  D795               	goto	L1
  9992  002F5A                     u9240:
  9993  002F5A                     l788:
  9994  002F5A                     l8307:
  9995                           
  9996                           ; BSR set to: 0
  9997                           ;uart.c: 133: }
  9998                           ;uart.c: 134: }
  9999                           ;uart.c: 135: return address;
 10000  002F5A  0E81               	movlw	low macToString@address
 10001  002F5C  6F7A               	movwf	?_macToString& (0+255),b
 10002  002F5E  0E00               	movlw	high macToString@address
 10003  002F60  6F7B               	movwf	(?_macToString+1)& (0+255),b
 10004  002F62  0012               	return	
 10005  002F64                     __end_of_macToString:
 10006                           	opt stack 0
 10007                           tblptru	equ	0xFF8
 10008                           tblptrh	equ	0xFF7
 10009                           tblptrl	equ	0xFF6
 10010                           tablat	equ	0xFF5
 10011                           prodh	equ	0xFF4
 10012                           prodl	equ	0xFF3
 10013                           intcon	equ	0xFF2
 10014                           intcon3	equ	0xFF0
 10015                           indf0	equ	0xFEF
 10016                           postinc0	equ	0xFEE
 10017                           plusw0	equ	0xFEB
 10018                           fsr0h	equ	0xFEA
 10019                           fsr0l	equ	0xFE9
 10020                           wreg	equ	0xFE8
 10021                           postinc1	equ	0xFE6
 10022                           postdec1	equ	0xFE5
 10023                           plusw1	equ	0xFE3
 10024                           fsr1h	equ	0xFE2
 10025                           fsr1l	equ	0xFE1
 10026                           indf2	equ	0xFDF
 10027                           postinc2	equ	0xFDE
 10028                           postdec2	equ	0xFDD
 10029                           plusw2	equ	0xFDB
 10030                           fsr2h	equ	0xFDA
 10031                           fsr2l	equ	0xFD9
 10032                           status	equ	0xFD8
 10033                           
 10034 ;; *************** function _ipAdressToString *****************
 10035 ;; Defined at:
 10036 ;;		line 162 in file "src/system/uart.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;  ip              4   19[BANK0 ] struct ipv4_address
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;  i               1   40[BANK0 ] unsigned char 
 10041 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 10042 ;;  tens            4   31[BANK0 ] unsigned char [4]
 10043 ;;  ones            4   27[BANK0 ] unsigned char [4]
 10044 ;;  pointer         1   39[BANK0 ] unsigned char 
 10045 ;; Return value:  Size  Location     Type
 10046 ;;                  2   19[BANK0 ] PTR unsigned char 
 10047 ;; Registers used:
 10048 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10049 ;; Tracked objects:
 10050 ;;		On entry : 0/0
 10051 ;;		On exit  : 0/0
 10052 ;;		Unchanged: 0/0
 10053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10054 ;;      Params:         0       4       0       0       0       0       0       0       0
 10055 ;;      Locals:         0      14       0       0       0       0       0       0       0
 10056 ;;      Temps:          0       4       0       0       0       0       0       0       0
 10057 ;;      Totals:         0      22       0       0       0       0       0       0       0
 10058 ;;Total ram usage:       22 bytes
 10059 ;; Hardware stack levels used:    1
 10060 ;; Hardware stack levels required when called:    5
 10061 ;; This function calls:
 10062 ;;		___lwdiv
 10063 ;;		___lwmod
 10064 ;; This function is called by:
 10065 ;;		_arp_handleNewPacket
 10066 ;;		_arp_sendReply
 10067 ;;		_ipv4_handleNewPacket
 10068 ;;		_ipv4_setIPSourceAddress
 10069 ;;		_ipv4_background
 10070 ;;		_arpEntryToString
 10071 ;; This function uses a non-reentrant model
 10072 ;;
 10073                           
 10074                           	psect	text31
 10075  001ECE                     __ptext31:
 10076                           	opt stack 0
 10077  001ECE                     _ipAdressToString:
 10078                           	opt stack 24
 10079                           
 10080                           ;uart.c: 163: char static address [] = "???.???.???.???";
 10081                           ;uart.c: 164: uint8_t hundreds[4];
 10082                           ;uart.c: 165: uint8_t tens[4];
 10083                           ;uart.c: 166: uint8_t ones[4];
 10084                           ;uart.c: 167: uint8_t pointer = 0;
 10085                           
 10086                           ; BSR set to: 0
 10087                           ;incstack = 0
 10088  001ECE  0E00               	movlw	0
 10089  001ED0  0100               	movlb	0	; () banked
 10090  001ED2  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 10091                           
 10092                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 10093  001ED4  0E00               	movlw	0
 10094  001ED6  6F88               	movwf	ipAdressToString@i& (0+255),b
 10095  001ED8                     l8401:
 10096                           
 10097                           ; BSR set to: 0
 10098  001ED8  0E03               	movlw	3
 10099  001EDA  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 10100  001EDC  D001               	goto	l816
 10101  001EDE  D0DF               	goto	u9420
 10102  001EE0                     l816:
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 10106                           
 10107                           ; BSR set to: 0
 10108  001EE0  5188               	movf	ipAdressToString@i& (0+255),w,b
 10109  001EE2  0D01               	mullw	1
 10110  001EE4  0E83               	movlw	low ipAdressToString@hundreds
 10111  001EE6  24F3               	addwf	prodl,w,c
 10112  001EE8  6ED9               	movwf	fsr2l,c
 10113  001EEA  0E00               	movlw	high ipAdressToString@hundreds
 10114  001EEC  20F4               	addwfc	prodh,w,c
 10115  001EEE  6EDA               	movwf	fsr2h,c
 10116  001EF0  5188               	movf	ipAdressToString@i& (0+255),w,b
 10117  001EF2  0D01               	mullw	1
 10118  001EF4  0E73               	movlw	low ipAdressToString@ip
 10119  001EF6  24F3               	addwf	prodl,w,c
 10120  001EF8  6EE1               	movwf	fsr1l,c
 10121  001EFA  0E00               	movlw	high ipAdressToString@ip
 10122  001EFC  20F4               	addwfc	prodh,w,c
 10123  001EFE  6EE2               	movwf	fsr1h,c
 10124  001F00  50E7               	movf	indf1,w,c
 10125  001F02  6F77               	movwf	??_ipAdressToString& (0+255),b
 10126  001F04  5177               	movf	??_ipAdressToString& (0+255),w,b
 10127  001F06  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10128  001F08  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 10129  001F0A  0E00               	movlw	0
 10130  001F0C  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10131  001F0E  0E64               	movlw	100
 10132  001F10  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10133  001F12  ECDF  F021         	call	___lwdiv	;wreg free
 10134  001F16  0100               	movlb	0	; () banked
 10135  001F18  5160               	movf	?___lwdiv& (0+255),w,b
 10136  001F1A  6EDF               	movwf	indf2,c
 10137                           
 10138                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 10139  001F1C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10140  001F1E  0D01               	mullw	1
 10141  001F20  0E7F               	movlw	low ipAdressToString@tens
 10142  001F22  24F3               	addwf	prodl,w,c
 10143  001F24  6ED9               	movwf	fsr2l,c
 10144  001F26  0E00               	movlw	high ipAdressToString@tens
 10145  001F28  20F4               	addwfc	prodh,w,c
 10146  001F2A  6EDA               	movwf	fsr2h,c
 10147  001F2C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10148  001F2E  0D01               	mullw	1
 10149  001F30  0E83               	movlw	low ipAdressToString@hundreds
 10150  001F32  24F3               	addwf	prodl,w,c
 10151  001F34  6EE1               	movwf	fsr1l,c
 10152  001F36  0E00               	movlw	high ipAdressToString@hundreds
 10153  001F38  20F4               	addwfc	prodh,w,c
 10154  001F3A  6EE2               	movwf	fsr1h,c
 10155  001F3C  50E7               	movf	indf1,w,c
 10156  001F3E  6F77               	movwf	??_ipAdressToString& (0+255),b
 10157  001F40  5177               	movf	??_ipAdressToString& (0+255),w,b
 10158  001F42  0D64               	mullw	100
 10159  001F44  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 10160  001F48  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 10161  001F4C  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 10162  001F4E  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 10163  001F50  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 10164  001F52  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 10165  001F54  5188               	movf	ipAdressToString@i& (0+255),w,b
 10166  001F56  0D01               	mullw	1
 10167  001F58  0E73               	movlw	low ipAdressToString@ip
 10168  001F5A  24F3               	addwf	prodl,w,c
 10169  001F5C  6EE1               	movwf	fsr1l,c
 10170  001F5E  0E00               	movlw	high ipAdressToString@ip
 10171  001F60  20F4               	addwfc	prodh,w,c
 10172  001F62  6EE2               	movwf	fsr1h,c
 10173  001F64  50E7               	movf	indf1,w,c
 10174  001F66  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 10175  001F68  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 10176  001F6A  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 10177  001F6C  6F60               	movwf	___lwdiv@dividend& (0+255),b
 10178  001F6E  0E00               	movlw	0
 10179  001F70  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 10180  001F72  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 10181  001F74  0E00               	movlw	0
 10182  001F76  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 10183  001F78  0E0A               	movlw	10
 10184  001F7A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 10185  001F7C  ECDF  F021         	call	___lwdiv	;wreg free
 10186  001F80  0100               	movlb	0	; () banked
 10187  001F82  5160               	movf	?___lwdiv& (0+255),w,b
 10188  001F84  6EDF               	movwf	indf2,c
 10189                           
 10190                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 10191  001F86  5188               	movf	ipAdressToString@i& (0+255),w,b
 10192  001F88  0D01               	mullw	1
 10193  001F8A  0E7B               	movlw	low ipAdressToString@ones
 10194  001F8C  24F3               	addwf	prodl,w,c
 10195  001F8E  6ED9               	movwf	fsr2l,c
 10196  001F90  0E00               	movlw	high ipAdressToString@ones
 10197  001F92  20F4               	addwfc	prodh,w,c
 10198  001F94  6EDA               	movwf	fsr2h,c
 10199  001F96  5188               	movf	ipAdressToString@i& (0+255),w,b
 10200  001F98  0D01               	mullw	1
 10201  001F9A  0E73               	movlw	low ipAdressToString@ip
 10202  001F9C  24F3               	addwf	prodl,w,c
 10203  001F9E  6EE1               	movwf	fsr1l,c
 10204  001FA0  0E00               	movlw	high ipAdressToString@ip
 10205  001FA2  20F4               	addwfc	prodh,w,c
 10206  001FA4  6EE2               	movwf	fsr1h,c
 10207  001FA6  50E7               	movf	indf1,w,c
 10208  001FA8  6F77               	movwf	??_ipAdressToString& (0+255),b
 10209  001FAA  5177               	movf	??_ipAdressToString& (0+255),w,b
 10210  001FAC  6F6E               	movwf	___lwmod@dividend& (0+255),b
 10211  001FAE  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 10212  001FB0  0E00               	movlw	0
 10213  001FB2  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 10214  001FB4  0E0A               	movlw	10
 10215  001FB6  6F70               	movwf	___lwmod@divisor& (0+255),b
 10216  001FB8  EC3E  F023         	call	___lwmod	;wreg free
 10217  001FBC  0100               	movlb	0	; () banked
 10218  001FBE  516E               	movf	?___lwmod& (0+255),w,b
 10219  001FC0  6EDF               	movwf	indf2,c
 10220                           
 10221                           ; BSR set to: 0
 10222                           ;uart.c: 175: if (hundreds[i] > 0)
 10223  001FC2  5188               	movf	ipAdressToString@i& (0+255),w,b
 10224  001FC4  0D01               	mullw	1
 10225  001FC6  0E83               	movlw	low ipAdressToString@hundreds
 10226  001FC8  24F3               	addwf	prodl,w,c
 10227  001FCA  6ED9               	movwf	fsr2l,c
 10228  001FCC  0E00               	movlw	high ipAdressToString@hundreds
 10229  001FCE  20F4               	addwfc	prodh,w,c
 10230  001FD0  6EDA               	movwf	fsr2h,c
 10231  001FD2  50DF               	movf	indf2,w,c
 10232  001FD4  B4D8               	btfsc	status,2,c
 10233  001FD6  D014               	goto	l818
 10234                           
 10235                           ; BSR set to: 0
 10236                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 10237  001FD8  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10238  001FDA  0D01               	mullw	1
 10239  001FDC  0EE3               	movlw	low ipAdressToString@address
 10240  001FDE  24F3               	addwf	prodl,w,c
 10241  001FE0  6ED9               	movwf	fsr2l,c
 10242  001FE2  0E02               	movlw	high ipAdressToString@address
 10243  001FE4  20F4               	addwfc	prodh,w,c
 10244  001FE6  6EDA               	movwf	fsr2h,c
 10245  001FE8  5188               	movf	ipAdressToString@i& (0+255),w,b
 10246  001FEA  0D01               	mullw	1
 10247  001FEC  0E83               	movlw	low ipAdressToString@hundreds
 10248  001FEE  24F3               	addwf	prodl,w,c
 10249  001FF0  6EE1               	movwf	fsr1l,c
 10250  001FF2  0E00               	movlw	high ipAdressToString@hundreds
 10251  001FF4  20F4               	addwfc	prodh,w,c
 10252  001FF6  6EE2               	movwf	fsr1h,c
 10253  001FF8  50E7               	movf	indf1,w,c
 10254  001FFA  0F30               	addlw	48
 10255  001FFC  6EDF               	movwf	indf2,c
 10256                           
 10257                           ; BSR set to: 0
 10258  001FFE  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10259  002000                     l818:
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 10263                           
 10264                           ; BSR set to: 0
 10265  002000  5188               	movf	ipAdressToString@i& (0+255),w,b
 10266  002002  0D01               	mullw	1
 10267  002004  0E7F               	movlw	low ipAdressToString@tens
 10268  002006  24F3               	addwf	prodl,w,c
 10269  002008  6ED9               	movwf	fsr2l,c
 10270  00200A  0E00               	movlw	high ipAdressToString@tens
 10271  00200C  20F4               	addwfc	prodh,w,c
 10272  00200E  6EDA               	movwf	fsr2h,c
 10273  002010  50DF               	movf	indf2,w,c
 10274  002012  A4D8               	btfss	status,2,c
 10275  002014  D00B               	goto	u9400
 10276                           
 10277                           ; BSR set to: 0
 10278  002016  5188               	movf	ipAdressToString@i& (0+255),w,b
 10279  002018  0D01               	mullw	1
 10280  00201A  0E83               	movlw	low ipAdressToString@hundreds
 10281  00201C  24F3               	addwf	prodl,w,c
 10282  00201E  6ED9               	movwf	fsr2l,c
 10283  002020  0E00               	movlw	high ipAdressToString@hundreds
 10284  002022  20F4               	addwfc	prodh,w,c
 10285  002024  6EDA               	movwf	fsr2h,c
 10286  002026  50DF               	movf	indf2,w,c
 10287  002028  B4D8               	btfsc	status,2,c
 10288  00202A  D014               	goto	l819
 10289  00202C                     u9400:
 10290                           
 10291                           ; BSR set to: 0
 10292                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 10293                           
 10294                           ; BSR set to: 0
 10295  00202C  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10296  00202E  0D01               	mullw	1
 10297  002030  0EE3               	movlw	low ipAdressToString@address
 10298  002032  24F3               	addwf	prodl,w,c
 10299  002034  6ED9               	movwf	fsr2l,c
 10300  002036  0E02               	movlw	high ipAdressToString@address
 10301  002038  20F4               	addwfc	prodh,w,c
 10302  00203A  6EDA               	movwf	fsr2h,c
 10303  00203C  5188               	movf	ipAdressToString@i& (0+255),w,b
 10304  00203E  0D01               	mullw	1
 10305  002040  0E7F               	movlw	low ipAdressToString@tens
 10306  002042  24F3               	addwf	prodl,w,c
 10307  002044  6EE1               	movwf	fsr1l,c
 10308  002046  0E00               	movlw	high ipAdressToString@tens
 10309  002048  20F4               	addwfc	prodh,w,c
 10310  00204A  6EE2               	movwf	fsr1h,c
 10311  00204C  50E7               	movf	indf1,w,c
 10312  00204E  0F30               	addlw	48
 10313  002050  6EDF               	movwf	indf2,c
 10314                           
 10315                           ; BSR set to: 0
 10316  002052  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10317  002054                     l819:
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 10321                           
 10322                           ; BSR set to: 0
 10323  002054  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10324  002056  0D01               	mullw	1
 10325  002058  0EE3               	movlw	low ipAdressToString@address
 10326  00205A  24F3               	addwf	prodl,w,c
 10327  00205C  6ED9               	movwf	fsr2l,c
 10328  00205E  0E02               	movlw	high ipAdressToString@address
 10329  002060  20F4               	addwfc	prodh,w,c
 10330  002062  6EDA               	movwf	fsr2h,c
 10331  002064  5188               	movf	ipAdressToString@i& (0+255),w,b
 10332  002066  0D01               	mullw	1
 10333  002068  0E7B               	movlw	low ipAdressToString@ones
 10334  00206A  24F3               	addwf	prodl,w,c
 10335  00206C  6EE1               	movwf	fsr1l,c
 10336  00206E  0E00               	movlw	high ipAdressToString@ones
 10337  002070  20F4               	addwfc	prodh,w,c
 10338  002072  6EE2               	movwf	fsr1h,c
 10339  002074  50E7               	movf	indf1,w,c
 10340  002076  0F30               	addlw	48
 10341  002078  6EDF               	movwf	indf2,c
 10342  00207A  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;uart.c: 180: if (i != 3)
 10346  00207C  0E03               	movlw	3
 10347  00207E  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 10348  002080  B4D8               	btfsc	status,2,c
 10349  002082  D00B               	goto	l822
 10350                           
 10351                           ; BSR set to: 0
 10352                           ;uart.c: 181: address[pointer++] = '.';
 10353  002084  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10354  002086  0D01               	mullw	1
 10355  002088  0EE3               	movlw	low ipAdressToString@address
 10356  00208A  24F3               	addwf	prodl,w,c
 10357  00208C  6ED9               	movwf	fsr2l,c
 10358  00208E  0E02               	movlw	high ipAdressToString@address
 10359  002090  20F4               	addwfc	prodh,w,c
 10360  002092  6EDA               	movwf	fsr2h,c
 10361  002094  0E2E               	movlw	46
 10362  002096  6EDF               	movwf	indf2,c
 10363                           
 10364                           ; BSR set to: 0
 10365  002098  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 10366  00209A                     l822:
 10367                           
 10368                           ; BSR set to: 0
 10369                           
 10370                           ; BSR set to: 0
 10371  00209A  2B88               	incf	ipAdressToString@i& (0+255),f,b
 10372  00209C  D71D               	goto	l8401
 10373  00209E                     u9420:
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;uart.c: 182: }
 10377                           ;uart.c: 183: address[pointer] = '\0';
 10378                           
 10379                           ; BSR set to: 0
 10380  00209E  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 10381  0020A0  0D01               	mullw	1
 10382  0020A2  0EE3               	movlw	low ipAdressToString@address
 10383  0020A4  24F3               	addwf	prodl,w,c
 10384  0020A6  6ED9               	movwf	fsr2l,c
 10385  0020A8  0E02               	movlw	high ipAdressToString@address
 10386  0020AA  20F4               	addwfc	prodh,w,c
 10387  0020AC  6EDA               	movwf	fsr2h,c
 10388  0020AE  0E00               	movlw	0
 10389  0020B0  6EDF               	movwf	indf2,c
 10390                           
 10391                           ; BSR set to: 0
 10392                           ;uart.c: 184: return address;
 10393  0020B2  0EE3               	movlw	low ipAdressToString@address
 10394  0020B4  6F73               	movwf	?_ipAdressToString& (0+255),b
 10395  0020B6  0E02               	movlw	high ipAdressToString@address
 10396  0020B8  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 10397  0020BA  0012               	return	
 10398  0020BC                     __end_of_ipAdressToString:
 10399                           	opt stack 0
 10400                           tblptru	equ	0xFF8
 10401                           tblptrh	equ	0xFF7
 10402                           tblptrl	equ	0xFF6
 10403                           tablat	equ	0xFF5
 10404                           prodh	equ	0xFF4
 10405                           prodl	equ	0xFF3
 10406                           intcon	equ	0xFF2
 10407                           intcon3	equ	0xFF0
 10408                           indf0	equ	0xFEF
 10409                           postinc0	equ	0xFEE
 10410                           plusw0	equ	0xFEB
 10411                           fsr0h	equ	0xFEA
 10412                           fsr0l	equ	0xFE9
 10413                           wreg	equ	0xFE8
 10414                           indf1	equ	0xFE7
 10415                           postinc1	equ	0xFE6
 10416                           postdec1	equ	0xFE5
 10417                           plusw1	equ	0xFE3
 10418                           fsr1h	equ	0xFE2
 10419                           fsr1l	equ	0xFE1
 10420                           indf2	equ	0xFDF
 10421                           postinc2	equ	0xFDE
 10422                           postdec2	equ	0xFDD
 10423                           plusw2	equ	0xFDB
 10424                           fsr2h	equ	0xFDA
 10425                           fsr2l	equ	0xFD9
 10426                           status	equ	0xFD8
 10427                           
 10428 ;; *************** function ___lwdiv *****************
 10429 ;; Defined at:
 10430 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 10431 ;; Parameters:    Size  Location     Type
 10432 ;;  dividend        2    0[BANK0 ] unsigned int 
 10433 ;;  divisor         2    2[BANK0 ] unsigned int 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  quotient        2    5[BANK0 ] unsigned int 
 10436 ;;  counter         1    4[BANK0 ] unsigned char 
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  2    0[BANK0 ] unsigned int 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10446 ;;      Params:         0       4       0       0       0       0       0       0       0
 10447 ;;      Locals:         0       3       0       0       0       0       0       0       0
 10448 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10449 ;;      Totals:         0       7       0       0       0       0       0       0       0
 10450 ;;Total ram usage:        7 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    4
 10453 ;; This function calls:
 10454 ;;		Nothing
 10455 ;; This function is called by:
 10456 ;;		_ipAdressToString
 10457 ;; This function uses a non-reentrant model
 10458 ;;
 10459                           
 10460                           	psect	text32
 10461  0043BE                     __ptext32:
 10462                           	opt stack 0
 10463  0043BE                     ___lwdiv:
 10464                           	opt stack 24
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;incstack = 0
 10468  0043BE  0E00               	movlw	0
 10469  0043C0  0100               	movlb	0	; () banked
 10470  0043C2  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 10471  0043C4  0E00               	movlw	0
 10472  0043C6  6F65               	movwf	___lwdiv@quotient& (0+255),b
 10473                           
 10474                           ; BSR set to: 0
 10475  0043C8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10476  0043CA  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 10477  0043CC  B4D8               	btfsc	status,2,c
 10478  0043CE  D01C               	goto	l1570
 10479                           
 10480                           ; BSR set to: 0
 10481  0043D0  0E01               	movlw	1
 10482  0043D2  6F64               	movwf	___lwdiv@counter& (0+255),b
 10483  0043D4  D004               	goto	l1565
 10484  0043D6                     
 10485                           ; BSR set to: 0
 10486                           
 10487                           ; BSR set to: 0
 10488  0043D6  90D8               	bcf	status,0,c
 10489  0043D8  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 10490  0043DA  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 10491  0043DC  2B64               	incf	___lwdiv@counter& (0+255),f,b
 10492  0043DE                     l1565:
 10493                           
 10494                           ; BSR set to: 0
 10495                           
 10496                           ; BSR set to: 0
 10497  0043DE  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 10498  0043E0  D7FA               	goto	l1566
 10499  0043E2                     u9090:
 10500                           
 10501                           ; BSR set to: 0
 10502                           
 10503                           ; BSR set to: 0
 10504                           
 10505                           ; BSR set to: 0
 10506  0043E2  90D8               	bcf	status,0,c
 10507  0043E4  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 10508  0043E6  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 10509                           
 10510                           ; BSR set to: 0
 10511  0043E8  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10512  0043EA  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 10513  0043EC  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10514  0043EE  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 10515  0043F0  A0D8               	btfss	status,0,c
 10516  0043F2  D005               	goto	l1569
 10517                           
 10518                           ; BSR set to: 0
 10519  0043F4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 10520  0043F6  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 10521  0043F8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 10522  0043FA  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 10523                           
 10524                           ; BSR set to: 0
 10525  0043FC  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 10526  0043FE                     l1569:
 10527                           
 10528                           ; BSR set to: 0
 10529                           
 10530                           ; BSR set to: 0
 10531  0043FE  90D8               	bcf	status,0,c
 10532  004400  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 10533  004402  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 10534                           
 10535                           ; BSR set to: 0
 10536  004404  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 10537  004406  D7ED               	goto	u9090
 10538  004408                     l1570:
 10539                           
 10540                           ; BSR set to: 0
 10541                           
 10542                           ; BSR set to: 0
 10543  004408  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 10544  00440C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 10545                           
 10546                           ; BSR set to: 0
 10547  004410  0012               	return		;funcret
 10548  004412                     __end_of___lwdiv:
 10549                           	opt stack 0
 10550                           tblptru	equ	0xFF8
 10551                           tblptrh	equ	0xFF7
 10552                           tblptrl	equ	0xFF6
 10553                           tablat	equ	0xFF5
 10554                           prodh	equ	0xFF4
 10555                           prodl	equ	0xFF3
 10556                           intcon	equ	0xFF2
 10557                           intcon3	equ	0xFF0
 10558                           indf0	equ	0xFEF
 10559                           postinc0	equ	0xFEE
 10560                           plusw0	equ	0xFEB
 10561                           fsr0h	equ	0xFEA
 10562                           fsr0l	equ	0xFE9
 10563                           wreg	equ	0xFE8
 10564                           indf1	equ	0xFE7
 10565                           postinc1	equ	0xFE6
 10566                           postdec1	equ	0xFE5
 10567                           plusw1	equ	0xFE3
 10568                           fsr1h	equ	0xFE2
 10569                           fsr1l	equ	0xFE1
 10570                           indf2	equ	0xFDF
 10571                           postinc2	equ	0xFDE
 10572                           postdec2	equ	0xFDD
 10573                           plusw2	equ	0xFDB
 10574                           fsr2h	equ	0xFDA
 10575                           fsr2l	equ	0xFD9
 10576                           status	equ	0xFD8
 10577                           
 10578 ;; *************** function _arp_parseFromRXBuffer *****************
 10579 ;; Defined at:
 10580 ;;		line 64 in file "src/stack/protocols/arp.c"
 10581 ;; Parameters:    Size  Location     Type
 10582 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 10583 ;;		 -> stack.ethernet(15), stack(121), 
 10584 ;; Auto vars:     Size  Location     Type
 10585 ;;  i               1   58[BANK0 ] unsigned char 
 10586 ;;  i               1   57[BANK0 ] unsigned char 
 10587 ;;  i               1   56[BANK0 ] unsigned char 
 10588 ;;  i               1   55[BANK0 ] unsigned char 
 10589 ;;  arp            32   61[BANK0 ] struct arp_message
 10590 ;;  offset          2   59[BANK0 ] const unsigned int 
 10591 ;; Return value:  Size  Location     Type
 10592 ;;                  32   20[BANK0 ] struct arp_message
 10593 ;; Registers used:
 10594 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10595 ;; Tracked objects:
 10596 ;;		On entry : 0/0
 10597 ;;		On exit  : 0/0
 10598 ;;		Unchanged: 0/0
 10599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10600 ;;      Params:         0      32       0       0       0       0       0       0       0
 10601 ;;      Locals:         0      38       0       0       0       0       0       0       0
 10602 ;;      Temps:          0       3       0       0       0       0       0       0       0
 10603 ;;      Totals:         0      73       0       0       0       0       0       0       0
 10604 ;;Total ram usage:       73 bytes
 10605 ;; Hardware stack levels used:    1
 10606 ;; Hardware stack levels required when called:    8
 10607 ;; This function calls:
 10608 ;;		_ethernetController_streamFromRXBuffer
 10609 ;;		_ipv4_cmp
 10610 ;;		_ipv4_isAllZero
 10611 ;;		_mac_cmp
 10612 ;;		_mac_isAllZero
 10613 ;; This function is called by:
 10614 ;;		_arp_handleNewPacket
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           	psect	text33
 10619  000AEE                     __ptext33:
 10620                           	opt stack 0
 10621  000AEE                     _arp_parseFromRXBuffer:
 10622                           	opt stack 19
 10623                           
 10624                           ;arp.c: 65: arp_message_t arp;
 10625                           ;arp.c: 66: uint16_t const offset = 22;
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;incstack = 0
 10629  000AEE  0E00               	movlw	0
 10630  000AF0  0100               	movlb	0	; () banked
 10631  000AF2  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 10632  000AF4  0E16               	movlw	22
 10633  000AF6  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;arp.c: 68: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 10637  000AF8  EE20 F010          	lfsr	2,16
 10638  000AFC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10639  000AFE  26D9               	addwf	fsr2l,f,c
 10640  000B00  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10641  000B02  22DA               	addwfc	fsr2h,f,c
 10642  000B04  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10643  000B08  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10644  000B0C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10645  000B0E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10646  000B10  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10647  000B12  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10648  000B14  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10649  000B16  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10650  000B18  0E00               	movlw	0
 10651  000B1A  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10652                           
 10653                           ;arp.c: 71: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10654  000B1E  0100               	movlb	0	; () banked
 10655  000B20  EE20 F010          	lfsr	2,16
 10656  000B24  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10657  000B26  26D9               	addwf	fsr2l,f,c
 10658  000B28  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10659  000B2A  22DA               	addwfc	fsr2h,f,c
 10660  000B2C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10661  000B30  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10662  000B34  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10663  000B36  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10664  000B38  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10665  000B3A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10666  000B3C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10667  000B3E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10668  000B40  0E01               	movlw	1
 10669  000B42  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10670  000B46  0100               	movlb	0	; () banked
 10671  000B48  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 10672  000B4A  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;arp.c: 72: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10676  000B4C  EE20 F010          	lfsr	2,16
 10677  000B50  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10678  000B52  26D9               	addwf	fsr2l,f,c
 10679  000B54  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10680  000B56  22DA               	addwfc	fsr2h,f,c
 10681  000B58  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10682  000B5C  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10683  000B60  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10684  000B62  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10685  000B64  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10686  000B66  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10687  000B68  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10688  000B6A  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10689  000B6C  0E01               	movlw	1
 10690  000B6E  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10691  000B72  0100               	movlb	0	; () banked
 10692  000B74  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10693  000B76  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10694  000B78  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;arp.c: 74: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 10698  000B7A  EE20 F010          	lfsr	2,16
 10699  000B7E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10700  000B80  26D9               	addwf	fsr2l,f,c
 10701  000B82  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10702  000B84  22DA               	addwfc	fsr2h,f,c
 10703  000B86  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10704  000B8A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10705  000B8E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10706  000B90  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10707  000B92  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10708  000B94  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10709  000B96  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10710  000B98  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10711  000B9A  0E01               	movlw	1
 10712  000B9C  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10713  000BA0  0100               	movlb	0	; () banked
 10714  000BA2  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 10715  000BA4  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;arp.c: 75: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 10719  000BA6  EE20 F010          	lfsr	2,16
 10720  000BAA  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10721  000BAC  26D9               	addwf	fsr2l,f,c
 10722  000BAE  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10723  000BB0  22DA               	addwfc	fsr2h,f,c
 10724  000BB2  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10725  000BB6  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10726  000BBA  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10727  000BBC  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10728  000BBE  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10729  000BC0  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10730  000BC2  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10731  000BC4  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10732  000BC6  0E01               	movlw	1
 10733  000BC8  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10734  000BCC  0100               	movlb	0	; () banked
 10735  000BCE  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10736  000BD0  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10737  000BD2  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 10738                           
 10739                           ; BSR set to: 0
 10740                           ;arp.c: 77: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10741  000BD4  EE20 F010          	lfsr	2,16
 10742  000BD8  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10743  000BDA  26D9               	addwf	fsr2l,f,c
 10744  000BDC  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10745  000BDE  22DA               	addwfc	fsr2h,f,c
 10746  000BE0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10747  000BE4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10748  000BE8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10749  000BEA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10750  000BEC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10751  000BEE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10752  000BF0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10753  000BF2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10754  000BF4  0E01               	movlw	1
 10755  000BF6  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10756  000BFA  0100               	movlb	0	; () banked
 10757  000BFC  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 10758                           
 10759                           ; BSR set to: 0
 10760                           ;arp.c: 78: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 10761  000BFE  EE20 F010          	lfsr	2,16
 10762  000C02  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10763  000C04  26D9               	addwf	fsr2l,f,c
 10764  000C06  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10765  000C08  22DA               	addwfc	fsr2h,f,c
 10766  000C0A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10767  000C0E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10768  000C12  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10769  000C14  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10770  000C16  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10771  000C18  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10772  000C1A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10773  000C1C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10774  000C1E  0E01               	movlw	1
 10775  000C20  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10776  000C24  0100               	movlb	0	; () banked
 10777  000C26  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 10778                           
 10779                           ; BSR set to: 0
 10780                           ;arp.c: 80: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 10781  000C28  EE20 F010          	lfsr	2,16
 10782  000C2C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10783  000C2E  26D9               	addwf	fsr2l,f,c
 10784  000C30  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10785  000C32  22DA               	addwfc	fsr2h,f,c
 10786  000C34  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10787  000C38  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10788  000C3C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10789  000C3E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10790  000C40  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10791  000C42  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10792  000C44  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10793  000C46  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10794  000C48  0E01               	movlw	1
 10795  000C4A  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10796  000C4E  0100               	movlb	0	; () banked
 10797  000C50  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 10798  000C52  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 10799                           
 10800                           ; BSR set to: 0
 10801                           ;arp.c: 81: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 10802  000C54  EE20 F010          	lfsr	2,16
 10803  000C58  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10804  000C5A  26D9               	addwf	fsr2l,f,c
 10805  000C5C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10806  000C5E  22DA               	addwfc	fsr2h,f,c
 10807  000C60  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10808  000C64  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10809  000C68  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10810  000C6A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10811  000C6C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10812  000C6E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10813  000C70  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10814  000C72  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10815  000C74  0E01               	movlw	1
 10816  000C76  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10817  000C7A  0100               	movlb	0	; () banked
 10818  000C7C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10819  000C7E  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 10820  000C80  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;arp.c: 84: for (uint8_t i = 0; i < arp.hlen; i++)
 10824  000C82  0E00               	movlw	0
 10825  000C84  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 10826  000C86  D024               	goto	l905
 10827  000C88                     
 10828                           ; BSR set to: 0
 10829                           ;arp.c: 85: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10830                           
 10831                           ; BSR set to: 0
 10832  000C88  EE20 F010          	lfsr	2,16
 10833  000C8C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10834  000C8E  26D9               	addwf	fsr2l,f,c
 10835  000C90  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10836  000C92  22DA               	addwfc	fsr2h,f,c
 10837  000C94  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10838  000C98  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10839  000C9C  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10840  000C9E  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10841  000CA0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10842  000CA2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10843  000CA4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10844  000CA6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10845  000CA8  0E01               	movlw	1
 10846  000CAA  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10847  000CAE  0100               	movlb	0	; () banked
 10848  000CB0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10849  000CB2  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 10850  000CB4  0D01               	mullw	1
 10851  000CB6  0E08               	movlw	8
 10852  000CB8  26F3               	addwf	prodl,f,c
 10853  000CBA  0E00               	movlw	0
 10854  000CBC  22F4               	addwfc	prodh,f,c
 10855  000CBE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10856  000CC0  24F3               	addwf	prodl,w,c
 10857  000CC2  6ED9               	movwf	fsr2l,c
 10858  000CC4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10859  000CC6  20F4               	addwfc	prodh,w,c
 10860  000CC8  6EDA               	movwf	fsr2h,c
 10861  000CCA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10862                           
 10863                           ; BSR set to: 0
 10864  000CCE  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 10865  000CD0                     l905:
 10866                           
 10867                           ; BSR set to: 0
 10868                           
 10869                           ; BSR set to: 0
 10870  000CD0  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10871  000CD2  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 10872  000CD4  A0D8               	btfss	status,0,c
 10873  000CD6  D7D8               	goto	l906
 10874                           
 10875                           ; BSR set to: 0
 10876                           ;arp.c: 86: for (uint8_t i = 0; i < arp.plen; i++)
 10877                           
 10878                           ; BSR set to: 0
 10879  000CD8  0E00               	movlw	0
 10880  000CDA  6F98               	movwf	arp_parseFromRXBuffer@i_2992& (0+255),b
 10881  000CDC  D024               	goto	l908
 10882  000CDE                     
 10883                           ; BSR set to: 0
 10884                           ;arp.c: 87: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 10885                           
 10886                           ; BSR set to: 0
 10887  000CDE  EE20 F010          	lfsr	2,16
 10888  000CE2  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10889  000CE4  26D9               	addwf	fsr2l,f,c
 10890  000CE6  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10891  000CE8  22DA               	addwfc	fsr2h,f,c
 10892  000CEA  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10893  000CEE  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10894  000CF2  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10895  000CF4  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10896  000CF6  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10897  000CF8  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10898  000CFA  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10899  000CFC  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10900  000CFE  0E01               	movlw	1
 10901  000D00  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10902  000D04  0100               	movlb	0	; () banked
 10903  000D06  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10904  000D08  5198               	movf	arp_parseFromRXBuffer@i_2992& (0+255),w,b
 10905  000D0A  0D01               	mullw	1
 10906  000D0C  0E0E               	movlw	14
 10907  000D0E  26F3               	addwf	prodl,f,c
 10908  000D10  0E00               	movlw	0
 10909  000D12  22F4               	addwfc	prodh,f,c
 10910  000D14  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10911  000D16  24F3               	addwf	prodl,w,c
 10912  000D18  6ED9               	movwf	fsr2l,c
 10913  000D1A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10914  000D1C  20F4               	addwfc	prodh,w,c
 10915  000D1E  6EDA               	movwf	fsr2h,c
 10916  000D20  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10917                           
 10918                           ; BSR set to: 0
 10919  000D24  2B98               	incf	arp_parseFromRXBuffer@i_2992& (0+255),f,b
 10920  000D26                     l908:
 10921                           
 10922                           ; BSR set to: 0
 10923                           
 10924                           ; BSR set to: 0
 10925  000D26  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 10926  000D28  5D98               	subwf	arp_parseFromRXBuffer@i_2992& (0+255),w,b
 10927  000D2A  A0D8               	btfss	status,0,c
 10928  000D2C  D7D8               	goto	l909
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;arp.c: 89: for (uint8_t i = 0; i < arp.hlen; i++)
 10932                           
 10933                           ; BSR set to: 0
 10934  000D2E  0E00               	movlw	0
 10935  000D30  6F99               	movwf	arp_parseFromRXBuffer@i_2993& (0+255),b
 10936  000D32  D024               	goto	l911
 10937  000D34                     
 10938                           ; BSR set to: 0
 10939                           ;arp.c: 90: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 10940                           
 10941                           ; BSR set to: 0
 10942  000D34  EE20 F010          	lfsr	2,16
 10943  000D38  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10944  000D3A  26D9               	addwf	fsr2l,f,c
 10945  000D3C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 10946  000D3E  22DA               	addwfc	fsr2h,f,c
 10947  000D40  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 10948  000D44  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 10949  000D48  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 10950  000D4A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 10951  000D4C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 10952  000D4E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 10953  000D50  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 10954  000D52  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 10955  000D54  0E01               	movlw	1
 10956  000D56  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 10957  000D5A  0100               	movlb	0	; () banked
 10958  000D5C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 10959  000D5E  5199               	movf	arp_parseFromRXBuffer@i_2993& (0+255),w,b
 10960  000D60  0D01               	mullw	1
 10961  000D62  0E12               	movlw	18
 10962  000D64  26F3               	addwf	prodl,f,c
 10963  000D66  0E00               	movlw	0
 10964  000D68  22F4               	addwfc	prodh,f,c
 10965  000D6A  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 10966  000D6C  24F3               	addwf	prodl,w,c
 10967  000D6E  6ED9               	movwf	fsr2l,c
 10968  000D70  0E00               	movlw	high arp_parseFromRXBuffer@arp
 10969  000D72  20F4               	addwfc	prodh,w,c
 10970  000D74  6EDA               	movwf	fsr2h,c
 10971  000D76  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 10972                           
 10973                           ; BSR set to: 0
 10974  000D7A  2B99               	incf	arp_parseFromRXBuffer@i_2993& (0+255),f,b
 10975  000D7C                     l911:
 10976                           
 10977                           ; BSR set to: 0
 10978                           
 10979                           ; BSR set to: 0
 10980  000D7C  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 10981  000D7E  5D99               	subwf	arp_parseFromRXBuffer@i_2993& (0+255),w,b
 10982  000D80  A0D8               	btfss	status,0,c
 10983  000D82  D7D8               	goto	l912
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;arp.c: 91: for (uint8_t i = 0; i < arp.plen; i++)
 10987                           
 10988                           ; BSR set to: 0
 10989  000D84  0E00               	movlw	0
 10990  000D86  6F9A               	movwf	arp_parseFromRXBuffer@i_2994& (0+255),b
 10991  000D88  D024               	goto	l914
 10992  000D8A                     
 10993                           ; BSR set to: 0
 10994                           ;arp.c: 92: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 10995                           
 10996                           ; BSR set to: 0
 10997  000D8A  EE20 F010          	lfsr	2,16
 10998  000D8E  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 10999  000D90  26D9               	addwf	fsr2l,f,c
 11000  000D92  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11001  000D94  22DA               	addwfc	fsr2h,f,c
 11002  000D96  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11003  000D9A  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11004  000D9E  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11005  000DA0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11006  000DA2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11007  000DA4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11008  000DA6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11009  000DA8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11010  000DAA  0E01               	movlw	1
 11011  000DAC  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 11012  000DB0  0100               	movlb	0	; () banked
 11013  000DB2  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 11014  000DB4  519A               	movf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 11015  000DB6  0D01               	mullw	1
 11016  000DB8  0E18               	movlw	24
 11017  000DBA  26F3               	addwf	prodl,f,c
 11018  000DBC  0E00               	movlw	0
 11019  000DBE  22F4               	addwfc	prodh,f,c
 11020  000DC0  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 11021  000DC2  24F3               	addwf	prodl,w,c
 11022  000DC4  6ED9               	movwf	fsr2l,c
 11023  000DC6  0E00               	movlw	high arp_parseFromRXBuffer@arp
 11024  000DC8  20F4               	addwfc	prodh,w,c
 11025  000DCA  6EDA               	movwf	fsr2h,c
 11026  000DCC  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 11027                           
 11028                           ; BSR set to: 0
 11029  000DD0  2B9A               	incf	arp_parseFromRXBuffer@i_2994& (0+255),f,b
 11030  000DD2                     l914:
 11031                           
 11032                           ; BSR set to: 0
 11033                           
 11034                           ; BSR set to: 0
 11035  000DD2  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11036  000DD4  5D9A               	subwf	arp_parseFromRXBuffer@i_2994& (0+255),w,b
 11037  000DD6  A0D8               	btfss	status,0,c
 11038  000DD8  D7D8               	goto	l915
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;arp.c: 94: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 11042                           
 11043                           ; BSR set to: 0
 11044  000DDA  EE20 F010          	lfsr	2,16
 11045  000DDE  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 11046  000DE0  26D9               	addwf	fsr2l,f,c
 11047  000DE2  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 11048  000DE4  22DA               	addwfc	fsr2h,f,c
 11049  000DE6  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 11050  000DEA  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 11051  000DEE  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 11052  000DF0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 11053  000DF2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 11054  000DF4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 11055  000DF6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 11056  000DF8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 11057  000DFA  0E02               	movlw	2
 11058  000DFC  EC2E  F021         	call	_ethernetController_streamFromRXBuffer
 11059                           
 11060                           ;arp.c: 96: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 11061  000E00  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11062  000E02  0100               	movlb	0	; () banked
 11063  000E04  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 11064  000E06  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11065  000E08  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 11066  000E0A  EC9B  F024         	call	_ipv4_isAllZero	;wreg free
 11067  000E0E  0100               	movlb	0	; () banked
 11068  000E10  A0D8               	btfss	status,0,c
 11069  000E12  D002               	goto	l917
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;arp.c: 97: arp.fIsProbe = 1;
 11073  000E14  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11074  000E16  D03C               	goto	l921
 11075  000E18                     l917:
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;arp.c: 100: arp.fIsProbe = 0;
 11079  000E18  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 11080                           
 11081                           ; BSR set to: 0
 11082                           ;arp.c: 102: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11083                           ;arp.c: 103: mac_isAllZero(&arp.targetMACAddress) &&
 11084                           ;arp.c: 104: arp.operation == ARP_REQUEST) {
 11085  000E1A  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11086  000E1C  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11087  000E1E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11088  000E20  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11089  000E22  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11090  000E24  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11091  000E26  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11092  000E28  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11093  000E2A  EC81  F023         	call	_ipv4_cmp	;wreg free
 11094  000E2E  0100               	movlb	0	; () banked
 11095  000E30  A0D8               	btfss	status,0,c
 11096  000E32  D00D               	goto	l919
 11097                           
 11098                           ; BSR set to: 0
 11099  000E34  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11100  000E36  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 11101  000E38  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11102  000E3A  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 11103  000E3C  EC83  F024         	call	_mac_isAllZero	;wreg free
 11104  000E40  0100               	movlb	0	; () banked
 11105  000E42  A0D8               	btfss	status,0,c
 11106  000E44  D004               	goto	l919
 11107                           
 11108                           ; BSR set to: 0
 11109  000E46  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11110  000E48  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11111  000E4A  B4D8               	btfsc	status,2,c
 11112  000E4C  D01F               	goto	u10230
 11113  000E4E                     l919:
 11114                           
 11115                           ; BSR set to: 0
 11116                           ;arp.c: 108: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 11117                           ;arp.c: 109: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 11118                           ;arp.c: 110: arp.operation == ARP_REPLY) {
 11119                           
 11120                           ; BSR set to: 0
 11121  000E4E  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 11122  000E50  6F60               	movwf	ipv4_cmp@a& (0+255),b
 11123  000E52  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 11124  000E54  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 11125  000E56  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 11126  000E58  6F62               	movwf	ipv4_cmp@b& (0+255),b
 11127  000E5A  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 11128  000E5C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 11129  000E5E  EC81  F023         	call	_ipv4_cmp	;wreg free
 11130  000E62  0100               	movlb	0	; () banked
 11131  000E64  A0D8               	btfss	status,0,c
 11132  000E66  D014               	goto	l921
 11133                           
 11134                           ; BSR set to: 0
 11135  000E68  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 11136  000E6A  6F60               	movwf	mac_cmp@a& (0+255),b
 11137  000E6C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 11138  000E6E  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 11139  000E70  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 11140  000E72  6F62               	movwf	mac_cmp@b& (0+255),b
 11141  000E74  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 11142  000E76  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 11143  000E78  EC60  F023         	call	_mac_cmp	;wreg free
 11144  000E7C  0100               	movlb	0	; () banked
 11145  000E7E  A0D8               	btfss	status,0,c
 11146  000E80  D007               	goto	l921
 11147                           
 11148                           ; BSR set to: 0
 11149  000E82  0E02               	movlw	2
 11150  000E84  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11151  000E86  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11152  000E88  A4D8               	btfss	status,2,c
 11153  000E8A  D002               	goto	l921
 11154  000E8C                     u10230:
 11155                           
 11156                           ; BSR set to: 0
 11157                           ;arp.c: 111: arp.fIsGratuitous = 1;
 11158  000E8C  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11159                           
 11160                           ;arp.c: 112: } else {
 11161  000E8E  D001               	goto	l922
 11162  000E90                     l921:
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;arp.c: 113: arp.fIsGratuitous = 0;
 11166  000E90  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 11167  000E92                     l922:
 11168                           
 11169                           ; BSR set to: 0
 11170                           ;arp.c: 114: }
 11171                           ;arp.c: 115: }
 11172                           ;arp.c: 116: }
 11173                           ;arp.c: 119: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 11174                           ;arp.c: 120: (arp.ptype != ARP_PTYPE_IPv4) ||
 11175                           ;arp.c: 121: (arp.operation > 2) ||
 11176                           ;arp.c: 122: (arp.hlen != 6u) ||
 11177                           ;arp.c: 123: (arp.plen != 4u)) {
 11178                           
 11179                           ; BSR set to: 0
 11180                           
 11181                           ; BSR set to: 0
 11182                           
 11183                           ; BSR set to: 0
 11184  000E92  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 11185  000E94  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 11186  000E96  A4D8               	btfss	status,2,c
 11187  000E98  D013               	goto	u10280
 11188                           
 11189                           ; BSR set to: 0
 11190  000E9A  0E08               	movlw	8
 11191  000E9C  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 11192  000E9E  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 11193  000EA0  A4D8               	btfss	status,2,c
 11194  000EA2  D00E               	goto	u10280
 11195                           
 11196                           ; BSR set to: 0
 11197  000EA4  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 11198  000EA6  E10C               	bnz	l8715
 11199  000EA8  0E03               	movlw	3
 11200  000EAA  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 11201  000EAC  B0D8               	btfsc	status,0,c
 11202  000EAE  D008               	goto	u10280
 11203                           
 11204                           ; BSR set to: 0
 11205  000EB0  0E06               	movlw	6
 11206  000EB2  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 11207  000EB4  A4D8               	btfss	status,2,c
 11208  000EB6  D004               	goto	u10280
 11209                           
 11210                           ; BSR set to: 0
 11211  000EB8  0E04               	movlw	4
 11212  000EBA  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 11213  000EBC  B4D8               	btfsc	status,2,c
 11214  000EBE  D004               	goto	l923
 11215  000EC0                     u10280:
 11216  000EC0                     l8715:
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;arp.c: 124: arp.err.code = ERROR_ARP_INVALID_VALUES;
 11220  000EC0  0E01               	movlw	1
 11221  000EC2  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11222  000EC4  0E93               	movlw	147
 11223  000EC6  D003               	goto	L2
 11224  000EC8                     l923:
 11225                           
 11226                           ; BSR set to: 0
 11227                           ;arp.c: 127: arp.err.code = (uint16_t)0;
 11228                           
 11229                           ; BSR set to: 0
 11230  000EC8  0E00               	movlw	0
 11231  000ECA  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 11232  000ECC  0E00               	movlw	0
 11233  000ECE                     L2:
 11234  000ECE  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 11235                           
 11236                           ;arp.c: 128: arp.err.module = ERROR_MODULE_ARP;
 11237  000ED0  0E03               	movlw	3
 11238  000ED2  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;arp.c: 129: }
 11242                           ;arp.c: 131: return arp;
 11243                           
 11244                           ; BSR set to: 0
 11245  000ED4  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 11246  000ED8  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 11247  000EDC  0E1F               	movlw	31
 11248  000EDE                     u10291:
 11249  000EDE  CFDB FFEB          	movff	plusw2,plusw0
 11250  000EE2  06E8               	decf	wreg,f,c
 11251  000EE4  E2FC               	bc	u10291
 11252  000EE6  0012               	return	
 11253  000EE8                     __end_of_arp_parseFromRXBuffer:
 11254                           	opt stack 0
 11255                           tblptru	equ	0xFF8
 11256                           tblptrh	equ	0xFF7
 11257                           tblptrl	equ	0xFF6
 11258                           tablat	equ	0xFF5
 11259                           prodh	equ	0xFF4
 11260                           prodl	equ	0xFF3
 11261                           intcon	equ	0xFF2
 11262                           intcon3	equ	0xFF0
 11263                           indf0	equ	0xFEF
 11264                           postinc0	equ	0xFEE
 11265                           plusw0	equ	0xFEB
 11266                           fsr0h	equ	0xFEA
 11267                           fsr0l	equ	0xFE9
 11268                           wreg	equ	0xFE8
 11269                           indf1	equ	0xFE7
 11270                           postinc1	equ	0xFE6
 11271                           postdec1	equ	0xFE5
 11272                           plusw1	equ	0xFE3
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           plusw2	equ	0xFDB
 11279                           fsr2h	equ	0xFDA
 11280                           fsr2l	equ	0xFD9
 11281                           status	equ	0xFD8
 11282                           
 11283 ;; *************** function _mac_isAllZero *****************
 11284 ;; Defined at:
 11285 ;;		line 31 in file "src/eth/mac.c"
 11286 ;; Parameters:    Size  Location     Type
 11287 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 11288 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11289 ;; Auto vars:     Size  Location     Type
 11290 ;;  i               1    2[BANK0 ] unsigned char 
 11291 ;; Return value:  Size  Location     Type
 11292 ;;		None               void
 11293 ;; Registers used:
 11294 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11295 ;; Tracked objects:
 11296 ;;		On entry : 0/0
 11297 ;;		On exit  : 0/0
 11298 ;;		Unchanged: 0/0
 11299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11300 ;;      Params:         0       2       0       0       0       0       0       0       0
 11301 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11302 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11303 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11304 ;;Total ram usage:        3 bytes
 11305 ;; Hardware stack levels used:    1
 11306 ;; Hardware stack levels required when called:    4
 11307 ;; This function calls:
 11308 ;;		Nothing
 11309 ;; This function is called by:
 11310 ;;		_arp_parseFromRXBuffer
 11311 ;; This function uses a non-reentrant model
 11312 ;;
 11313                           
 11314                           	psect	text34
 11315  004906                     __ptext34:
 11316                           	opt stack 0
 11317  004906                     _mac_isAllZero:
 11318                           	opt stack 22
 11319                           
 11320                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;incstack = 0
 11324  004906  0E00               	movlw	0
 11325  004908  0100               	movlb	0	; () banked
 11326  00490A  6F62               	movwf	mac_isAllZero@i& (0+255),b
 11327  00490C                     l8313:
 11328                           
 11329                           ; BSR set to: 0
 11330  00490C  0E05               	movlw	5
 11331  00490E  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 11332  004910  D001               	goto	l384
 11333  004912  D00F               	goto	u9270
 11334  004914                     l384:
 11335                           
 11336                           ; BSR set to: 0
 11337                           ;mac.c: 33: if (mac->address[i] != 0x00)
 11338                           
 11339                           ; BSR set to: 0
 11340  004914  5162               	movf	mac_isAllZero@i& (0+255),w,b
 11341  004916  0D01               	mullw	1
 11342  004918  50F3               	movf	prodl,w,c
 11343  00491A  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 11344  00491C  6ED9               	movwf	fsr2l,c
 11345  00491E  50F4               	movf	prodh,w,c
 11346  004920  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 11347  004922  6EDA               	movwf	fsr2h,c
 11348  004924  50DF               	movf	indf2,w,c
 11349  004926  B4D8               	btfsc	status,2,c
 11350  004928  D002               	goto	l386
 11351                           
 11352                           ; BSR set to: 0
 11353                           ;mac.c: 34: return 0;
 11354  00492A  90D8               	bcf	status,0,c
 11355                           
 11356                           ; BSR set to: 0
 11357  00492C  0012               	return	
 11358  00492E                     l386:
 11359                           
 11360                           ; BSR set to: 0
 11361                           
 11362                           ; BSR set to: 0
 11363  00492E  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 11364  004930  D7ED               	goto	l8313
 11365  004932                     u9270:
 11366                           
 11367                           ; BSR set to: 0
 11368                           ;mac.c: 35: }
 11369                           ;mac.c: 36: return 1;
 11370                           
 11371                           ; BSR set to: 0
 11372  004932  80D8               	bsf	status,0,c
 11373  004934  0012               	return	
 11374  004936                     __end_of_mac_isAllZero:
 11375                           	opt stack 0
 11376                           tblptru	equ	0xFF8
 11377                           tblptrh	equ	0xFF7
 11378                           tblptrl	equ	0xFF6
 11379                           tablat	equ	0xFF5
 11380                           prodh	equ	0xFF4
 11381                           prodl	equ	0xFF3
 11382                           intcon	equ	0xFF2
 11383                           intcon3	equ	0xFF0
 11384                           indf0	equ	0xFEF
 11385                           postinc0	equ	0xFEE
 11386                           plusw0	equ	0xFEB
 11387                           fsr0h	equ	0xFEA
 11388                           fsr0l	equ	0xFE9
 11389                           wreg	equ	0xFE8
 11390                           indf1	equ	0xFE7
 11391                           postinc1	equ	0xFE6
 11392                           postdec1	equ	0xFE5
 11393                           plusw1	equ	0xFE3
 11394                           fsr1h	equ	0xFE2
 11395                           fsr1l	equ	0xFE1
 11396                           indf2	equ	0xFDF
 11397                           postinc2	equ	0xFDE
 11398                           postdec2	equ	0xFDD
 11399                           plusw2	equ	0xFDB
 11400                           fsr2h	equ	0xFDA
 11401                           fsr2l	equ	0xFD9
 11402                           status	equ	0xFD8
 11403                           
 11404 ;; *************** function _mac_cmp *****************
 11405 ;; Defined at:
 11406 ;;		line 39 in file "src/eth/mac.c"
 11407 ;; Parameters:    Size  Location     Type
 11408 ;;  a               2    0[BANK0 ] PTR struct macaddress
 11409 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11410 ;;  b               2    2[BANK0 ] PTR struct macaddress
 11411 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  i               1    6[BANK0 ] unsigned char 
 11414 ;; Return value:  Size  Location     Type
 11415 ;;		None               void
 11416 ;; Registers used:
 11417 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11423 ;;      Params:         0       4       0       0       0       0       0       0       0
 11424 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11425 ;;      Temps:          0       2       0       0       0       0       0       0       0
 11426 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11427 ;;Total ram usage:        7 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; Hardware stack levels required when called:    4
 11430 ;; This function calls:
 11431 ;;		Nothing
 11432 ;; This function is called by:
 11433 ;;		_arp_parseFromRXBuffer
 11434 ;; This function uses a non-reentrant model
 11435 ;;
 11436                           
 11437                           	psect	text35
 11438  0046C0                     __ptext35:
 11439                           	opt stack 0
 11440  0046C0                     _mac_cmp:
 11441                           	opt stack 22
 11442                           
 11443                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;incstack = 0
 11447  0046C0  0E00               	movlw	0
 11448  0046C2  0100               	movlb	0	; () banked
 11449  0046C4  6F66               	movwf	mac_cmp@i& (0+255),b
 11450  0046C6                     l8333:
 11451                           
 11452                           ; BSR set to: 0
 11453  0046C6  0E05               	movlw	5
 11454  0046C8  6566               	cpfsgt	mac_cmp@i& (0+255),b
 11455  0046CA  D001               	goto	l390
 11456  0046CC  D018               	goto	u9300
 11457  0046CE                     l390:
 11458                           
 11459                           ; BSR set to: 0
 11460                           ;mac.c: 41: if (a->address[i] != b->address[i])
 11461                           
 11462                           ; BSR set to: 0
 11463  0046CE  5166               	movf	mac_cmp@i& (0+255),w,b
 11464  0046D0  0D01               	mullw	1
 11465  0046D2  50F3               	movf	prodl,w,c
 11466  0046D4  2562               	addwf	mac_cmp@b& (0+255),w,b
 11467  0046D6  6ED9               	movwf	fsr2l,c
 11468  0046D8  50F4               	movf	prodh,w,c
 11469  0046DA  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 11470  0046DC  6EDA               	movwf	fsr2h,c
 11471  0046DE  5166               	movf	mac_cmp@i& (0+255),w,b
 11472  0046E0  0D01               	mullw	1
 11473  0046E2  50F3               	movf	prodl,w,c
 11474  0046E4  2560               	addwf	mac_cmp@a& (0+255),w,b
 11475  0046E6  6EE1               	movwf	fsr1l,c
 11476  0046E8  50F4               	movf	prodh,w,c
 11477  0046EA  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 11478  0046EC  6EE2               	movwf	fsr1h,c
 11479  0046EE  50DE               	movf	postinc2,w,c
 11480  0046F0  18E6               	xorwf	postinc1,w,c
 11481  0046F2  B4D8               	btfsc	status,2,c
 11482  0046F4  D002               	goto	l392
 11483                           
 11484                           ; BSR set to: 0
 11485                           ;mac.c: 42: return 0;
 11486  0046F6  90D8               	bcf	status,0,c
 11487                           
 11488                           ; BSR set to: 0
 11489  0046F8  0012               	return	
 11490  0046FA                     l392:
 11491                           
 11492                           ; BSR set to: 0
 11493                           
 11494                           ; BSR set to: 0
 11495  0046FA  2B66               	incf	mac_cmp@i& (0+255),f,b
 11496  0046FC  D7E4               	goto	l8333
 11497  0046FE                     u9300:
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;mac.c: 43: }
 11501                           ;mac.c: 44: return 1;
 11502                           
 11503                           ; BSR set to: 0
 11504  0046FE  80D8               	bsf	status,0,c
 11505  004700  0012               	return	
 11506  004702                     __end_of_mac_cmp:
 11507                           	opt stack 0
 11508                           tblptru	equ	0xFF8
 11509                           tblptrh	equ	0xFF7
 11510                           tblptrl	equ	0xFF6
 11511                           tablat	equ	0xFF5
 11512                           prodh	equ	0xFF4
 11513                           prodl	equ	0xFF3
 11514                           intcon	equ	0xFF2
 11515                           intcon3	equ	0xFF0
 11516                           indf0	equ	0xFEF
 11517                           postinc0	equ	0xFEE
 11518                           plusw0	equ	0xFEB
 11519                           fsr0h	equ	0xFEA
 11520                           fsr0l	equ	0xFE9
 11521                           wreg	equ	0xFE8
 11522                           indf1	equ	0xFE7
 11523                           postinc1	equ	0xFE6
 11524                           postdec1	equ	0xFE5
 11525                           plusw1	equ	0xFE3
 11526                           fsr1h	equ	0xFE2
 11527                           fsr1l	equ	0xFE1
 11528                           indf2	equ	0xFDF
 11529                           postinc2	equ	0xFDE
 11530                           postdec2	equ	0xFDD
 11531                           plusw2	equ	0xFDB
 11532                           fsr2h	equ	0xFDA
 11533                           fsr2l	equ	0xFD9
 11534                           status	equ	0xFD8
 11535                           
 11536 ;; *************** function _ipv4_isAllZero *****************
 11537 ;; Defined at:
 11538 ;;		line 306 in file "src/stack/protocols/ipv4.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 11541 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  i               1    2[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;		None               void
 11546 ;; Registers used:
 11547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11553 ;;      Params:         0       2       0       0       0       0       0       0       0
 11554 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11555 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11556 ;;      Totals:         0       3       0       0       0       0       0       0       0
 11557 ;;Total ram usage:        3 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    4
 11560 ;; This function calls:
 11561 ;;		Nothing
 11562 ;; This function is called by:
 11563 ;;		_arp_parseFromRXBuffer
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           	psect	text36
 11568  004936                     __ptext36:
 11569                           	opt stack 0
 11570  004936                     _ipv4_isAllZero:
 11571                           	opt stack 22
 11572                           
 11573                           ;ipv4.c: 307: for (uint8_t i = 0; i < 4; i++) {
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;incstack = 0
 11577  004936  0E00               	movlw	0
 11578  004938  0100               	movlb	0	; () banked
 11579  00493A  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 11580  00493C                     l8441:
 11581                           
 11582                           ; BSR set to: 0
 11583  00493C  0E03               	movlw	3
 11584  00493E  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 11585  004940  D001               	goto	l1128
 11586  004942  D00F               	goto	u9450
 11587  004944                     l1128:
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;ipv4.c: 308: if (ip->address[i] != 0x00)
 11591                           
 11592                           ; BSR set to: 0
 11593  004944  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 11594  004946  0D01               	mullw	1
 11595  004948  50F3               	movf	prodl,w,c
 11596  00494A  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 11597  00494C  6ED9               	movwf	fsr2l,c
 11598  00494E  50F4               	movf	prodh,w,c
 11599  004950  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 11600  004952  6EDA               	movwf	fsr2h,c
 11601  004954  50DF               	movf	indf2,w,c
 11602  004956  B4D8               	btfsc	status,2,c
 11603  004958  D002               	goto	l1130
 11604                           
 11605                           ; BSR set to: 0
 11606                           ;ipv4.c: 309: return 0;
 11607  00495A  90D8               	bcf	status,0,c
 11608                           
 11609                           ; BSR set to: 0
 11610  00495C  0012               	return	
 11611  00495E                     l1130:
 11612                           
 11613                           ; BSR set to: 0
 11614                           
 11615                           ; BSR set to: 0
 11616  00495E  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 11617  004960  D7ED               	goto	l8441
 11618  004962                     u9450:
 11619                           
 11620                           ; BSR set to: 0
 11621                           ;ipv4.c: 310: }
 11622                           ;ipv4.c: 311: return 1;
 11623                           
 11624                           ; BSR set to: 0
 11625  004962  80D8               	bsf	status,0,c
 11626  004964  0012               	return	
 11627  004966                     __end_of_ipv4_isAllZero:
 11628                           	opt stack 0
 11629                           tblptru	equ	0xFF8
 11630                           tblptrh	equ	0xFF7
 11631                           tblptrl	equ	0xFF6
 11632                           tablat	equ	0xFF5
 11633                           prodh	equ	0xFF4
 11634                           prodl	equ	0xFF3
 11635                           intcon	equ	0xFF2
 11636                           intcon3	equ	0xFF0
 11637                           indf0	equ	0xFEF
 11638                           postinc0	equ	0xFEE
 11639                           plusw0	equ	0xFEB
 11640                           fsr0h	equ	0xFEA
 11641                           fsr0l	equ	0xFE9
 11642                           wreg	equ	0xFE8
 11643                           indf1	equ	0xFE7
 11644                           postinc1	equ	0xFE6
 11645                           postdec1	equ	0xFE5
 11646                           plusw1	equ	0xFE3
 11647                           fsr1h	equ	0xFE2
 11648                           fsr1l	equ	0xFE1
 11649                           indf2	equ	0xFDF
 11650                           postinc2	equ	0xFDE
 11651                           postdec2	equ	0xFDD
 11652                           plusw2	equ	0xFDB
 11653                           fsr2h	equ	0xFDA
 11654                           fsr2l	equ	0xFD9
 11655                           status	equ	0xFD8
 11656                           
 11657 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 11658 ;; Defined at:
 11659 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 11660 ;; Parameters:    Size  Location     Type
 11661 ;;  startEnd        1    wreg     unsigned char 
 11662 ;;  startAddress    2   15[BANK0 ] unsigned int 
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;  startEnd        1   17[BANK0 ] unsigned char 
 11665 ;;  temp            1   19[BANK0 ] unsigned char 
 11666 ;;  opcode          1   18[BANK0 ] unsigned char 
 11667 ;; Return value:  Size  Location     Type
 11668 ;;                  1    wreg      unsigned char 
 11669 ;; Registers used:
 11670 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11671 ;; Tracked objects:
 11672 ;;		On entry : 0/0
 11673 ;;		On exit  : 0/0
 11674 ;;		Unchanged: 0/0
 11675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11676 ;;      Params:         0       2       0       0       0       0       0       0       0
 11677 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11678 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11679 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11680 ;;Total ram usage:        5 bytes
 11681 ;; Hardware stack levels used:    1
 11682 ;; Hardware stack levels required when called:    7
 11683 ;; This function calls:
 11684 ;;		_enc424j600_readSPI
 11685 ;;		_enc424j600_setERXDATAReadPointer
 11686 ;;		_enc424j600_writeSPI
 11687 ;; This function is called by:
 11688 ;;		_arp_parseFromRXBuffer
 11689 ;;		_ipv4_parseHeader
 11690 ;; This function uses a non-reentrant model
 11691 ;;
 11692                           
 11693                           	psect	text37
 11694  00425C                     __ptext37:
 11695                           	opt stack 0
 11696  00425C                     _ethernetController_streamFromRXBuffer:
 11697                           	opt stack 19
 11698                           
 11699                           ; BSR set to: 0
 11700                           ;incstack = 0
 11701                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 11702  00425C  0100               	movlb	0	; () banked
 11703  00425E  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 11704                           
 11705                           ;ENC424J600.c: 351: uint8_t temp;
 11706                           ;ENC424J600.c: 352: uint8_t opcode;
 11707                           ;ENC424J600.c: 353: switch (startEnd) {
 11708  004260  D01F               	goto	l179
 11709  004262                     
 11710                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 11711  004262  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 11712  004266  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 11713  00426A  ECDE  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 11714                           
 11715                           ;ENC424J600.c: 356: opcode = 0x2C;
 11716  00426E  0E2C               	movlw	44
 11717  004270  0100               	movlb	0	; () banked
 11718  004272  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 11719                           
 11720                           ; BSR set to: 0
 11721                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 11722  004274  9881               	bcf	3969,4,c	;volatile
 11723                           
 11724                           ; BSR set to: 0
 11725                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 11726  004276  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 11727  004278  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 11728  00427A  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 11729  00427C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 11730  00427E  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 11731                           
 11732                           ;ENC424J600.c: 359: return 0;
 11733  004282  0E00               	movlw	0
 11734  004284  0012               	return	
 11735  004286                     
 11736                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 11737  004286  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 11738  004288  0100               	movlb	0	; () banked
 11739  00428A  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 11740  00428C  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 11741  00428E  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 11742  004290  EC60  F020         	call	_enc424j600_readSPI	;wreg free
 11743                           
 11744                           ;ENC424J600.c: 362: return temp;
 11745  004294  0100               	movlb	0	; () banked
 11746  004296  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 11747                           
 11748                           ; BSR set to: 0
 11749  004298  0012               	return	
 11750  00429A                     l183:
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 11754  00429A  8881               	bsf	3969,4,c	;volatile
 11755                           
 11756                           ; BSR set to: 0
 11757                           ;ENC424J600.c: 374: return 0;
 11758  00429C  0E00               	movlw	0
 11759                           
 11760                           ; BSR set to: 0
 11761  00429E  0012               	return	
 11762  0042A0                     l179:
 11763                           
 11764                           ; BSR set to: 0
 11765  0042A0  0100               	movlb	0	; () banked
 11766  0042A2  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 11767                           
 11768                           ; Switch size 1, requested type "space"
 11769                           ; Number of cases is 3, Range of values is 0 to 2
 11770                           ; switch strategies available:
 11771                           ; Name         Instructions Cycles
 11772                           ; simple_byte           10     6 (average)
 11773                           ;	Chosen strategy is simple_byte
 11774  0042A4  0A00               	xorlw	0	; case 0
 11775  0042A6  B4D8               	btfsc	status,2,c
 11776  0042A8  D7DC               	goto	l180
 11777  0042AA  0A01               	xorlw	1	; case 1
 11778  0042AC  B4D8               	btfsc	status,2,c
 11779  0042AE  D7EB               	goto	l182
 11780  0042B0  0A03               	xorlw	3	; case 2
 11781  0042B2  B4D8               	btfsc	status,2,c
 11782  0042B4  D7F2               	goto	l183
 11783                           
 11784                           ; BSR set to: 0
 11785                           ;ENC424J600.c: 376: return 0;
 11786                           
 11787                           ; BSR set to: 0
 11788  0042B6  0E00               	movlw	0
 11789  0042B8  0012               	return	
 11790  0042BA                     __end_of_ethernetController_streamFromRXBuffer:
 11791                           	opt stack 0
 11792                           tblptru	equ	0xFF8
 11793                           tblptrh	equ	0xFF7
 11794                           tblptrl	equ	0xFF6
 11795                           tablat	equ	0xFF5
 11796                           prodh	equ	0xFF4
 11797                           prodl	equ	0xFF3
 11798                           intcon	equ	0xFF2
 11799                           intcon3	equ	0xFF0
 11800                           indf0	equ	0xFEF
 11801                           postinc0	equ	0xFEE
 11802                           plusw0	equ	0xFEB
 11803                           fsr0h	equ	0xFEA
 11804                           fsr0l	equ	0xFE9
 11805                           wreg	equ	0xFE8
 11806                           indf1	equ	0xFE7
 11807                           postinc1	equ	0xFE6
 11808                           postdec1	equ	0xFE5
 11809                           plusw1	equ	0xFE3
 11810                           fsr1h	equ	0xFE2
 11811                           fsr1l	equ	0xFE1
 11812                           indf2	equ	0xFDF
 11813                           postinc2	equ	0xFDE
 11814                           postdec2	equ	0xFDD
 11815                           plusw2	equ	0xFDB
 11816                           fsr2h	equ	0xFDA
 11817                           fsr2l	equ	0xFD9
 11818                           status	equ	0xFD8
 11819                           
 11820 ;; *************** function _UARTTransmitInt *****************
 11821 ;; Defined at:
 11822 ;;		line 43 in file "src/system/uart.c"
 11823 ;; Parameters:    Size  Location     Type
 11824 ;;  val             4   58[BANK0 ] unsigned long 
 11825 ;; Auto vars:     Size  Location     Type
 11826 ;;		None
 11827 ;; Return value:  Size  Location     Type
 11828 ;;                  1    wreg      void 
 11829 ;; Registers used:
 11830 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11831 ;; Tracked objects:
 11832 ;;		On entry : 0/0
 11833 ;;		On exit  : 0/0
 11834 ;;		Unchanged: 0/0
 11835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11836 ;;      Params:         0       4       0       0       0       0       0       0       0
 11837 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11839 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11840 ;;Total ram usage:        4 bytes
 11841 ;; Hardware stack levels used:    1
 11842 ;; Hardware stack levels required when called:    8
 11843 ;; This function calls:
 11844 ;;		_UARTTransmitText
 11845 ;;		_intToString
 11846 ;; This function is called by:
 11847 ;;		_ethernet_rxGetNewFrame
 11848 ;; This function uses a non-reentrant model
 11849 ;;
 11850                           
 11851                           	psect	text38
 11852  004B6A                     __ptext38:
 11853                           	opt stack 0
 11854  004B6A                     _UARTTransmitInt:
 11855                           	opt stack 20
 11856                           
 11857                           ;uart.c: 44: UARTTransmitText(intToString(val));
 11858                           
 11859                           ;incstack = 0
 11860  004B6A  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 11861  004B6E  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 11862  004B72  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 11863  004B76  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 11864  004B7A  EC6A  F024         	call	_intToString	;wreg free
 11865  004B7E  C084  F098         	movff	?_intToString,UARTTransmitText@str
 11866  004B82  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 11867  004B86  ECB4  F021         	call	_UARTTransmitText	;wreg free
 11868  004B8A  0012               	return		;funcret
 11869  004B8C                     __end_of_UARTTransmitInt:
 11870                           	opt stack 0
 11871                           tblptru	equ	0xFF8
 11872                           tblptrh	equ	0xFF7
 11873                           tblptrl	equ	0xFF6
 11874                           tablat	equ	0xFF5
 11875                           prodh	equ	0xFF4
 11876                           prodl	equ	0xFF3
 11877                           intcon	equ	0xFF2
 11878                           intcon3	equ	0xFF0
 11879                           indf0	equ	0xFEF
 11880                           postinc0	equ	0xFEE
 11881                           plusw0	equ	0xFEB
 11882                           fsr0h	equ	0xFEA
 11883                           fsr0l	equ	0xFE9
 11884                           wreg	equ	0xFE8
 11885                           indf1	equ	0xFE7
 11886                           postinc1	equ	0xFE6
 11887                           postdec1	equ	0xFE5
 11888                           plusw1	equ	0xFE3
 11889                           fsr1h	equ	0xFE2
 11890                           fsr1l	equ	0xFE1
 11891                           indf2	equ	0xFDF
 11892                           postinc2	equ	0xFDE
 11893                           postdec2	equ	0xFDD
 11894                           plusw2	equ	0xFDB
 11895                           fsr2h	equ	0xFDA
 11896                           fsr2l	equ	0xFD9
 11897                           status	equ	0xFD8
 11898                           
 11899 ;; *************** function _intToString *****************
 11900 ;; Defined at:
 11901 ;;		line 75 in file "src/system/uart.c"
 11902 ;; Parameters:    Size  Location     Type
 11903 ;;  val             4   36[BANK0 ] unsigned long 
 11904 ;; Auto vars:     Size  Location     Type
 11905 ;;		None
 11906 ;; Return value:  Size  Location     Type
 11907 ;;                  2   36[BANK0 ] PTR unsigned char 
 11908 ;; Registers used:
 11909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11910 ;; Tracked objects:
 11911 ;;		On entry : 0/0
 11912 ;;		On exit  : 0/0
 11913 ;;		Unchanged: 0/0
 11914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11915 ;;      Params:         0       4       0       0       0       0       0       0       0
 11916 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11917 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11918 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11919 ;;Total ram usage:        4 bytes
 11920 ;; Hardware stack levels used:    1
 11921 ;; Hardware stack levels required when called:    7
 11922 ;; This function calls:
 11923 ;;		_ltoa
 11924 ;; This function is called by:
 11925 ;;		_ethernet_rxGetNewFrame
 11926 ;;		_printErrorMessage
 11927 ;;		_UARTTransmitInt
 11928 ;;		_ipv4_handleNewPacket
 11929 ;;		_arpEntryToString
 11930 ;; This function uses a non-reentrant model
 11931 ;;
 11932                           
 11933                           	psect	text39
 11934  0048D4                     __ptext39:
 11935                           	opt stack 0
 11936  0048D4                     _intToString:
 11937                           	opt stack 22
 11938                           
 11939                           ;uart.c: 76: char static number [10];
 11940                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 11941                           
 11942                           ;incstack = 0
 11943  0048D4  0EBB               	movlw	low intToString@number
 11944  0048D6  0100               	movlb	0	; () banked
 11945  0048D8  6F7A               	movwf	ltoa@buf& (0+255),b
 11946  0048DA  0E02               	movlw	high intToString@number
 11947  0048DC  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 11948  0048DE  C084  F07C         	movff	intToString@val,ltoa@val
 11949  0048E2  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 11950  0048E6  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 11951  0048EA  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 11952  0048EE  0E00               	movlw	0
 11953  0048F0  6F81               	movwf	(ltoa@base+1)& (0+255),b
 11954  0048F2  0E0A               	movlw	10
 11955  0048F4  6F80               	movwf	ltoa@base& (0+255),b
 11956  0048F6  EC09  F022         	call	_ltoa	;wreg free
 11957                           
 11958                           ;uart.c: 81: return number;
 11959  0048FA  0EBB               	movlw	low intToString@number
 11960  0048FC  0100               	movlb	0	; () banked
 11961  0048FE  6F84               	movwf	?_intToString& (0+255),b
 11962  004900  0E02               	movlw	high intToString@number
 11963  004902  6F85               	movwf	(?_intToString+1)& (0+255),b
 11964  004904  0012               	return	
 11965  004906                     __end_of_intToString:
 11966                           	opt stack 0
 11967                           tblptru	equ	0xFF8
 11968                           tblptrh	equ	0xFF7
 11969                           tblptrl	equ	0xFF6
 11970                           tablat	equ	0xFF5
 11971                           prodh	equ	0xFF4
 11972                           prodl	equ	0xFF3
 11973                           intcon	equ	0xFF2
 11974                           intcon3	equ	0xFF0
 11975                           indf0	equ	0xFEF
 11976                           postinc0	equ	0xFEE
 11977                           plusw0	equ	0xFEB
 11978                           fsr0h	equ	0xFEA
 11979                           fsr0l	equ	0xFE9
 11980                           wreg	equ	0xFE8
 11981                           indf1	equ	0xFE7
 11982                           postinc1	equ	0xFE6
 11983                           postdec1	equ	0xFE5
 11984                           plusw1	equ	0xFE3
 11985                           fsr1h	equ	0xFE2
 11986                           fsr1l	equ	0xFE1
 11987                           indf2	equ	0xFDF
 11988                           postinc2	equ	0xFDE
 11989                           postdec2	equ	0xFDD
 11990                           plusw2	equ	0xFDB
 11991                           fsr2h	equ	0xFDA
 11992                           fsr2l	equ	0xFD9
 11993                           status	equ	0xFD8
 11994                           
 11995 ;; *************** function _ltoa *****************
 11996 ;; Defined at:
 11997 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 12000 ;;		 -> intToString@number(10), 
 12001 ;;  val             4   28[BANK0 ] long 
 12002 ;;  base            2   32[BANK0 ] int 
 12003 ;; Auto vars:     Size  Location     Type
 12004 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 12005 ;;		 -> intToString@number(10), 
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  2   26[BANK0 ] PTR unsigned char 
 12008 ;; Registers used:
 12009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12015 ;;      Params:         0       8       0       0       0       0       0       0       0
 12016 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12018 ;;      Totals:         0      10       0       0       0       0       0       0       0
 12019 ;;Total ram usage:       10 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:    6
 12022 ;; This function calls:
 12023 ;;		_ultoa
 12024 ;; This function is called by:
 12025 ;;		_intToString
 12026 ;; This function uses a non-reentrant model
 12027 ;;
 12028                           
 12029                           	psect	text40
 12030  004412                     __ptext40:
 12031                           	opt stack 0
 12032  004412                     _ltoa:
 12033                           	opt stack 22
 12034                           
 12035                           ; BSR set to: 0
 12036                           ;incstack = 0
 12037  004412  C07A  F082         	movff	ltoa@buf,ltoa@cp
 12038  004416  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 12039  00441A  0100               	movlb	0	; () banked
 12040  00441C  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 12041  00441E  D010               	goto	l1547
 12042                           
 12043                           ; BSR set to: 0
 12044  004420  C07A  FFD9         	movff	ltoa@buf,fsr2l
 12045  004424  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 12046  004428  0E2D               	movlw	45
 12047  00442A  6EDF               	movwf	indf2,c
 12048                           
 12049                           ; BSR set to: 0
 12050  00442C  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 12051  00442E  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 12052                           
 12053                           ; BSR set to: 0
 12054  004430  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 12055  004432  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 12056  004434  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 12057  004436  6D7C               	negf	ltoa@val& (0+255),b
 12058  004438  0E00               	movlw	0
 12059  00443A  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 12060  00443C  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 12061  00443E  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 12062  004440                     l1547:
 12063                           
 12064                           ; BSR set to: 0
 12065                           
 12066                           ; BSR set to: 0
 12067  004440  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 12068  004444  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 12069  004448  C07C  F06F         	movff	ltoa@val,ultoa@val
 12070  00444C  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 12071  004450  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 12072  004454  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 12073  004458  C080  F073         	movff	ltoa@base,ultoa@base
 12074  00445C  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 12075  004460  EC35  F018         	call	_ultoa	;wreg free
 12076  004464  0012               	return	
 12077  004466                     __end_of_ltoa:
 12078                           	opt stack 0
 12079                           tblptru	equ	0xFF8
 12080                           tblptrh	equ	0xFF7
 12081                           tblptrl	equ	0xFF6
 12082                           tablat	equ	0xFF5
 12083                           prodh	equ	0xFF4
 12084                           prodl	equ	0xFF3
 12085                           intcon	equ	0xFF2
 12086                           intcon3	equ	0xFF0
 12087                           indf0	equ	0xFEF
 12088                           postinc0	equ	0xFEE
 12089                           plusw0	equ	0xFEB
 12090                           fsr0h	equ	0xFEA
 12091                           fsr0l	equ	0xFE9
 12092                           wreg	equ	0xFE8
 12093                           indf1	equ	0xFE7
 12094                           postinc1	equ	0xFE6
 12095                           postdec1	equ	0xFE5
 12096                           plusw1	equ	0xFE3
 12097                           fsr1h	equ	0xFE2
 12098                           fsr1l	equ	0xFE1
 12099                           indf2	equ	0xFDF
 12100                           postinc2	equ	0xFDE
 12101                           postdec2	equ	0xFDD
 12102                           plusw2	equ	0xFDB
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107 ;; *************** function _ultoa *****************
 12108 ;; Defined at:
 12109 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 12110 ;; Parameters:    Size  Location     Type
 12111 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 12112 ;;		 -> intToString@number(10), 
 12113 ;;  val             4   15[BANK0 ] unsigned long 
 12114 ;;  base            2   19[BANK0 ] int 
 12115 ;; Auto vars:     Size  Location     Type
 12116 ;;  v               4   21[BANK0 ] unsigned long 
 12117 ;;  c               1   25[BANK0 ] unsigned char 
 12118 ;; Return value:  Size  Location     Type
 12119 ;;                  2   13[BANK0 ] PTR unsigned char 
 12120 ;; Registers used:
 12121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12122 ;; Tracked objects:
 12123 ;;		On entry : 0/0
 12124 ;;		On exit  : 0/0
 12125 ;;		Unchanged: 0/0
 12126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12127 ;;      Params:         0       8       0       0       0       0       0       0       0
 12128 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12129 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12130 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12131 ;;Total ram usage:       13 bytes
 12132 ;; Hardware stack levels used:    1
 12133 ;; Hardware stack levels required when called:    5
 12134 ;; This function calls:
 12135 ;;		___lldiv
 12136 ;;		___llmod
 12137 ;; This function is called by:
 12138 ;;		_ltoa
 12139 ;; This function uses a non-reentrant model
 12140 ;;
 12141                           
 12142                           	psect	text41
 12143  00306A                     __ptext41:
 12144                           	opt stack 0
 12145  00306A                     _ultoa:
 12146                           	opt stack 22
 12147                           
 12148                           ;incstack = 0
 12149  00306A  C06F  F075         	movff	ultoa@val,ultoa@v
 12150  00306E  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 12151  003072  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 12152  003076  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 12153  00307A  C075  F060         	movff	ultoa@v,___lldiv@dividend
 12154  00307E  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 12155  003082  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 12156  003086  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 12157  00308A  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12158  00308E  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12159  003092  0100               	movlb	0	; () banked
 12160  003094  0E00               	movlw	0
 12161  003096  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12162  003098  0EFF               	movlw	-1
 12163  00309A  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12164  00309C  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12165  00309E  ECC9  F01D         	call	___lldiv	;wreg free
 12166  0030A2  C060  F075         	movff	?___lldiv,ultoa@v
 12167  0030A6  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 12168  0030AA  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 12169  0030AE  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 12170  0030B2  0100               	movlb	0	; () banked
 12171  0030B4  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 12172  0030B6  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 12173                           
 12174                           ; BSR set to: 0
 12175  0030B8  5175               	movf	ultoa@v& (0+255),w,b
 12176  0030BA  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 12177  0030BC  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 12178  0030BE  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 12179  0030C0  A4D8               	btfss	status,2,c
 12180  0030C2  D7DB               	goto	l1551
 12181                           
 12182                           ; BSR set to: 0
 12183                           
 12184                           ; BSR set to: 0
 12185  0030C4  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12186  0030C8  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12187  0030CC  0E00               	movlw	0
 12188  0030CE  6EDF               	movwf	indf2,c
 12189                           
 12190                           ; BSR set to: 0
 12191  0030D0  076D               	decf	ultoa@buf& (0+255),f,b
 12192  0030D2  A0D8               	btfss	status,0,c
 12193  0030D4  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12194  0030D6                     
 12195                           ; BSR set to: 0
 12196                           
 12197                           ; BSR set to: 0
 12198  0030D6  C06F  F060         	movff	ultoa@val,___llmod@dividend
 12199  0030DA  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 12200  0030DE  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 12201  0030E2  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 12202  0030E6  C073  F064         	movff	ultoa@base,___llmod@divisor
 12203  0030EA  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 12204  0030EE  0E00               	movlw	0
 12205  0030F0  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 12206  0030F2  0EFF               	movlw	-1
 12207  0030F4  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 12208  0030F6  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 12209  0030F8  EC95  F020         	call	___llmod	;wreg free
 12210  0030FC  0100               	movlb	0	; () banked
 12211  0030FE  5160               	movf	?___llmod& (0+255),w,b
 12212  003100  6F79               	movwf	ultoa@c& (0+255),b
 12213                           
 12214                           ; BSR set to: 0
 12215  003102  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 12216  003106  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 12217  00310A  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 12218  00310E  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 12219  003112  C073  F064         	movff	ultoa@base,___lldiv@divisor
 12220  003116  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 12221  00311A  0E00               	movlw	0
 12222  00311C  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 12223  00311E  0EFF               	movlw	-1
 12224  003120  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 12225  003122  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 12226  003124  ECC9  F01D         	call	___lldiv	;wreg free
 12227  003128  C060  F06F         	movff	?___lldiv,ultoa@val
 12228  00312C  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 12229  003130  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 12230  003134  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 12231  003138  0E09               	movlw	9
 12232  00313A  0100               	movlb	0	; () banked
 12233  00313C  6579               	cpfsgt	ultoa@c& (0+255),b
 12234  00313E  D002               	goto	l1554
 12235                           
 12236                           ; BSR set to: 0
 12237  003140  0E07               	movlw	7
 12238  003142  2779               	addwf	ultoa@c& (0+255),f,b
 12239  003144                     l1554:
 12240                           
 12241                           ; BSR set to: 0
 12242  003144  0E30               	movlw	48
 12243  003146  2779               	addwf	ultoa@c& (0+255),f,b
 12244                           
 12245                           ; BSR set to: 0
 12246  003148  C06D  FFD9         	movff	ultoa@buf,fsr2l
 12247  00314C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 12248  003150  C079  FFDF         	movff	ultoa@c,indf2
 12249                           
 12250                           ; BSR set to: 0
 12251  003154  076D               	decf	ultoa@buf& (0+255),f,b
 12252  003156  A0D8               	btfss	status,0,c
 12253  003158  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 12254                           
 12255                           ; BSR set to: 0
 12256  00315A  516F               	movf	ultoa@val& (0+255),w,b
 12257  00315C  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 12258  00315E  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 12259  003160  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 12260  003162  B4D8               	btfsc	status,2,c
 12261  003164  0012               	return	
 12262  003166  D7B7               	goto	l1553
 12263  003168                     __end_of_ultoa:
 12264                           	opt stack 0
 12265                           tblptru	equ	0xFF8
 12266                           tblptrh	equ	0xFF7
 12267                           tblptrl	equ	0xFF6
 12268                           tablat	equ	0xFF5
 12269                           prodh	equ	0xFF4
 12270                           prodl	equ	0xFF3
 12271                           intcon	equ	0xFF2
 12272                           intcon3	equ	0xFF0
 12273                           indf0	equ	0xFEF
 12274                           postinc0	equ	0xFEE
 12275                           plusw0	equ	0xFEB
 12276                           fsr0h	equ	0xFEA
 12277                           fsr0l	equ	0xFE9
 12278                           wreg	equ	0xFE8
 12279                           indf1	equ	0xFE7
 12280                           postinc1	equ	0xFE6
 12281                           postdec1	equ	0xFE5
 12282                           plusw1	equ	0xFE3
 12283                           fsr1h	equ	0xFE2
 12284                           fsr1l	equ	0xFE1
 12285                           indf2	equ	0xFDF
 12286                           postinc2	equ	0xFDE
 12287                           postdec2	equ	0xFDD
 12288                           plusw2	equ	0xFDB
 12289                           fsr2h	equ	0xFDA
 12290                           fsr2l	equ	0xFD9
 12291                           status	equ	0xFD8
 12292                           
 12293 ;; *************** function ___llmod *****************
 12294 ;; Defined at:
 12295 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;  dividend        4    0[BANK0 ] unsigned long 
 12298 ;;  divisor         4    4[BANK0 ] unsigned long 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;  counter         1    8[BANK0 ] unsigned char 
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  4    0[BANK0 ] unsigned long 
 12303 ;; Registers used:
 12304 ;;		wreg, status,2, status,0
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12310 ;;      Params:         0       8       0       0       0       0       0       0       0
 12311 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12312 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12313 ;;      Totals:         0       9       0       0       0       0       0       0       0
 12314 ;;Total ram usage:        9 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; Hardware stack levels required when called:    4
 12317 ;; This function calls:
 12318 ;;		Nothing
 12319 ;; This function is called by:
 12320 ;;		_ultoa
 12321 ;;		_arpEntryToString
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           	psect	text42
 12326  00412A                     __ptext42:
 12327                           	opt stack 0
 12328  00412A                     ___llmod:
 12329                           	opt stack 22
 12330                           
 12331                           ; BSR set to: 0
 12332                           ;incstack = 0
 12333  00412A  0100               	movlb	0	; () banked
 12334  00412C  5164               	movf	___llmod@divisor& (0+255),w,b
 12335  00412E  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 12336  004130  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 12337  004132  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 12338  004134  B4D8               	btfsc	status,2,c
 12339  004136  D024               	goto	l1513
 12340                           
 12341                           ; BSR set to: 0
 12342  004138  0E01               	movlw	1
 12343  00413A  6F68               	movwf	___llmod@counter& (0+255),b
 12344  00413C  D006               	goto	l1508
 12345  00413E                     
 12346                           ; BSR set to: 0
 12347                           
 12348                           ; BSR set to: 0
 12349  00413E  90D8               	bcf	status,0,c
 12350  004140  3764               	rlcf	___llmod@divisor& (0+255),f,b
 12351  004142  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 12352  004144  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 12353  004146  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 12354  004148  2B68               	incf	___llmod@counter& (0+255),f,b
 12355  00414A                     l1508:
 12356                           
 12357                           ; BSR set to: 0
 12358                           
 12359                           ; BSR set to: 0
 12360  00414A  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 12361  00414C  D7F8               	goto	l1509
 12362  00414E                     u8880:
 12363                           
 12364                           ; BSR set to: 0
 12365                           
 12366                           ; BSR set to: 0
 12367                           
 12368                           ; BSR set to: 0
 12369  00414E  5164               	movf	___llmod@divisor& (0+255),w,b
 12370  004150  5D60               	subwf	___llmod@dividend& (0+255),w,b
 12371  004152  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12372  004154  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 12373  004156  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12374  004158  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 12375  00415A  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12376  00415C  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 12377  00415E  A0D8               	btfss	status,0,c
 12378  004160  D008               	goto	l1512
 12379                           
 12380                           ; BSR set to: 0
 12381  004162  5164               	movf	___llmod@divisor& (0+255),w,b
 12382  004164  5F60               	subwf	___llmod@dividend& (0+255),f,b
 12383  004166  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 12384  004168  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 12385  00416A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 12386  00416C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 12387  00416E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 12388  004170  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 12389  004172                     l1512:
 12390                           
 12391                           ; BSR set to: 0
 12392                           
 12393                           ; BSR set to: 0
 12394  004172  90D8               	bcf	status,0,c
 12395  004174  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 12396  004176  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 12397  004178  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 12398  00417A  3364               	rrcf	___llmod@divisor& (0+255),f,b
 12399                           
 12400                           ; BSR set to: 0
 12401  00417C  2F68               	decfsz	___llmod@counter& (0+255),f,b
 12402  00417E  D7E7               	goto	u8880
 12403  004180                     l1513:
 12404                           
 12405                           ; BSR set to: 0
 12406                           
 12407                           ; BSR set to: 0
 12408  004180  C060  F060         	movff	___llmod@dividend,?___llmod
 12409  004184  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 12410  004188  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 12411  00418C  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 12412                           
 12413                           ; BSR set to: 0
 12414  004190  0012               	return		;funcret
 12415  004192                     __end_of___llmod:
 12416                           	opt stack 0
 12417                           tblptru	equ	0xFF8
 12418                           tblptrh	equ	0xFF7
 12419                           tblptrl	equ	0xFF6
 12420                           tablat	equ	0xFF5
 12421                           prodh	equ	0xFF4
 12422                           prodl	equ	0xFF3
 12423                           intcon	equ	0xFF2
 12424                           intcon3	equ	0xFF0
 12425                           indf0	equ	0xFEF
 12426                           postinc0	equ	0xFEE
 12427                           plusw0	equ	0xFEB
 12428                           fsr0h	equ	0xFEA
 12429                           fsr0l	equ	0xFE9
 12430                           wreg	equ	0xFE8
 12431                           indf1	equ	0xFE7
 12432                           postinc1	equ	0xFE6
 12433                           postdec1	equ	0xFE5
 12434                           plusw1	equ	0xFE3
 12435                           fsr1h	equ	0xFE2
 12436                           fsr1l	equ	0xFE1
 12437                           indf2	equ	0xFDF
 12438                           postinc2	equ	0xFDE
 12439                           postdec2	equ	0xFDD
 12440                           plusw2	equ	0xFDB
 12441                           fsr2h	equ	0xFDA
 12442                           fsr2l	equ	0xFD9
 12443                           status	equ	0xFD8
 12444                           
 12445 ;; *************** function ___lldiv *****************
 12446 ;; Defined at:
 12447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 12448 ;; Parameters:    Size  Location     Type
 12449 ;;  dividend        4    0[BANK0 ] unsigned long 
 12450 ;;  divisor         4    4[BANK0 ] unsigned long 
 12451 ;; Auto vars:     Size  Location     Type
 12452 ;;  quotient        4    8[BANK0 ] unsigned long 
 12453 ;;  counter         1   12[BANK0 ] unsigned char 
 12454 ;; Return value:  Size  Location     Type
 12455 ;;                  4    0[BANK0 ] unsigned long 
 12456 ;; Registers used:
 12457 ;;		wreg, status,2, status,0
 12458 ;; Tracked objects:
 12459 ;;		On entry : 0/0
 12460 ;;		On exit  : 0/0
 12461 ;;		Unchanged: 0/0
 12462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12463 ;;      Params:         0       8       0       0       0       0       0       0       0
 12464 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12465 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12466 ;;      Totals:         0      13       0       0       0       0       0       0       0
 12467 ;;Total ram usage:       13 bytes
 12468 ;; Hardware stack levels used:    1
 12469 ;; Hardware stack levels required when called:    4
 12470 ;; This function calls:
 12471 ;;		Nothing
 12472 ;; This function is called by:
 12473 ;;		_ultoa
 12474 ;; This function uses a non-reentrant model
 12475 ;;
 12476                           
 12477                           	psect	text43
 12478  003B92                     __ptext43:
 12479                           	opt stack 0
 12480  003B92                     ___lldiv:
 12481                           	opt stack 22
 12482                           
 12483                           ; BSR set to: 0
 12484                           ;incstack = 0
 12485  003B92  0E00               	movlw	0
 12486  003B94  0100               	movlb	0	; () banked
 12487  003B96  6F68               	movwf	___lldiv@quotient& (0+255),b
 12488  003B98  0E00               	movlw	0
 12489  003B9A  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 12490  003B9C  0E00               	movlw	0
 12491  003B9E  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 12492  003BA0  0E00               	movlw	0
 12493  003BA2  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 12494                           
 12495                           ; BSR set to: 0
 12496  003BA4  5164               	movf	___lldiv@divisor& (0+255),w,b
 12497  003BA6  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 12498  003BA8  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 12499  003BAA  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 12500  003BAC  B4D8               	btfsc	status,2,c
 12501  003BAE  D02A               	goto	l1503
 12502                           
 12503                           ; BSR set to: 0
 12504  003BB0  0E01               	movlw	1
 12505  003BB2  6F6C               	movwf	___lldiv@counter& (0+255),b
 12506  003BB4  D006               	goto	l1498
 12507  003BB6                     
 12508                           ; BSR set to: 0
 12509                           
 12510                           ; BSR set to: 0
 12511  003BB6  90D8               	bcf	status,0,c
 12512  003BB8  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 12513  003BBA  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 12514  003BBC  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 12515  003BBE  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 12516  003BC0  2B6C               	incf	___lldiv@counter& (0+255),f,b
 12517  003BC2                     l1498:
 12518                           
 12519                           ; BSR set to: 0
 12520                           
 12521                           ; BSR set to: 0
 12522  003BC2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 12523  003BC4  D7F8               	goto	l1499
 12524  003BC6                     u8850:
 12525                           
 12526                           ; BSR set to: 0
 12527                           
 12528                           ; BSR set to: 0
 12529                           
 12530                           ; BSR set to: 0
 12531  003BC6  90D8               	bcf	status,0,c
 12532  003BC8  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 12533  003BCA  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 12534  003BCC  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 12535  003BCE  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 12536                           
 12537                           ; BSR set to: 0
 12538  003BD0  5164               	movf	___lldiv@divisor& (0+255),w,b
 12539  003BD2  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 12540  003BD4  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12541  003BD6  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 12542  003BD8  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12543  003BDA  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 12544  003BDC  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12545  003BDE  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 12546  003BE0  A0D8               	btfss	status,0,c
 12547  003BE2  D009               	goto	l1502
 12548                           
 12549                           ; BSR set to: 0
 12550  003BE4  5164               	movf	___lldiv@divisor& (0+255),w,b
 12551  003BE6  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 12552  003BE8  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 12553  003BEA  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 12554  003BEC  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 12555  003BEE  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 12556  003BF0  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 12557  003BF2  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 12558                           
 12559                           ; BSR set to: 0
 12560  003BF4  8168               	bsf	___lldiv@quotient& (0+255),0,b
 12561  003BF6                     l1502:
 12562                           
 12563                           ; BSR set to: 0
 12564                           
 12565                           ; BSR set to: 0
 12566  003BF6  90D8               	bcf	status,0,c
 12567  003BF8  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 12568  003BFA  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 12569  003BFC  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 12570  003BFE  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 12571                           
 12572                           ; BSR set to: 0
 12573  003C00  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 12574  003C02  D7E1               	goto	u8850
 12575  003C04                     l1503:
 12576                           
 12577                           ; BSR set to: 0
 12578                           
 12579                           ; BSR set to: 0
 12580  003C04  C068  F060         	movff	___lldiv@quotient,?___lldiv
 12581  003C08  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 12582  003C0C  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 12583  003C10  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 12584                           
 12585                           ; BSR set to: 0
 12586  003C14  0012               	return		;funcret
 12587  003C16                     __end_of___lldiv:
 12588                           	opt stack 0
 12589                           tblptru	equ	0xFF8
 12590                           tblptrh	equ	0xFF7
 12591                           tblptrl	equ	0xFF6
 12592                           tablat	equ	0xFF5
 12593                           prodh	equ	0xFF4
 12594                           prodl	equ	0xFF3
 12595                           intcon	equ	0xFF2
 12596                           intcon3	equ	0xFF0
 12597                           indf0	equ	0xFEF
 12598                           postinc0	equ	0xFEE
 12599                           plusw0	equ	0xFEB
 12600                           fsr0h	equ	0xFEA
 12601                           fsr0l	equ	0xFE9
 12602                           wreg	equ	0xFE8
 12603                           indf1	equ	0xFE7
 12604                           postinc1	equ	0xFE6
 12605                           postdec1	equ	0xFE5
 12606                           plusw1	equ	0xFE3
 12607                           fsr1h	equ	0xFE2
 12608                           fsr1l	equ	0xFE1
 12609                           indf2	equ	0xFDF
 12610                           postinc2	equ	0xFDE
 12611                           postdec2	equ	0xFDD
 12612                           plusw2	equ	0xFDB
 12613                           fsr2h	equ	0xFDA
 12614                           fsr2l	equ	0xFD9
 12615                           status	equ	0xFD8
 12616                           
 12617 ;; *************** function _ethernetController_updateLinkStatus *****************
 12618 ;; Defined at:
 12619 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 12622 ;;		 -> stack(121), 
 12623 ;; Auto vars:     Size  Location     Type
 12624 ;;  temp16          2   35[BANK0 ] unsigned int 
 12625 ;;  temp            1   34[BANK0 ] unsigned char 
 12626 ;; Return value:  Size  Location     Type
 12627 ;;                  1    wreg      void 
 12628 ;; Registers used:
 12629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12630 ;; Tracked objects:
 12631 ;;		On entry : 0/0
 12632 ;;		On exit  : 0/0
 12633 ;;		Unchanged: 0/0
 12634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12635 ;;      Params:         0       2       0       0       0       0       0       0       0
 12636 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12637 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12638 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12639 ;;Total ram usage:        5 bytes
 12640 ;; Hardware stack levels used:    1
 12641 ;; Hardware stack levels required when called:    8
 12642 ;; This function calls:
 12643 ;;		_enc424j600_readControlRegisterUnbanked
 12644 ;;		_enc424j600_readPHYRegister
 12645 ;; This function is called by:
 12646 ;;		_handleStackBackgroundTasks
 12647 ;; This function uses a non-reentrant model
 12648 ;;
 12649                           
 12650                           	psect	text44
 12651  003A7E                     __ptext44:
 12652                           	opt stack 0
 12653  003A7E                     _ethernetController_updateLinkStatus:
 12654                           	opt stack 21
 12655                           
 12656                           ;ENC424J600.c: 395: uint8_t temp;
 12657                           ;ENC424J600.c: 396: uint16_t temp16;
 12658                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 12659                           
 12660                           ; BSR set to: 0
 12661                           ;incstack = 0
 12662  003A7E  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 12663  003A80  0100               	movlb	0	; () banked
 12664  003A82  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12665  003A84  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 12666  003A86  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12667  003A88  0E1B               	movlw	27
 12668  003A8A  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 12669                           
 12670                           ;ENC424J600.c: 398: if (temp & 0x01) {
 12671  003A8E  0100               	movlb	0	; () banked
 12672  003A90  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 12673  003A92  D006               	goto	l195
 12674                           
 12675                           ; BSR set to: 0
 12676                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 12677  003A94  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 12678  003A98  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 12679  003A9C  0E01               	movlw	1
 12680  003A9E  D005               	goto	L3
 12681  003AA0                     l195:
 12682                           
 12683                           ; BSR set to: 0
 12684                           ;ENC424J600.c: 401: state->link = NO_LINK;
 12685                           
 12686                           ; BSR set to: 0
 12687  003AA0  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 12688  003AA4  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 12689  003AA8  0E00               	movlw	0
 12690  003AAA                     L3:
 12691  003AAA  6EDF               	movwf	indf2,c
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;ENC424J600.c: 402: }
 12695                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 12696                           
 12697                           ; BSR set to: 0
 12698  003AAC  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 12699  003AAE  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 12700  003AB0  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 12701  003AB2  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 12702  003AB4  0E1F               	movlw	31
 12703  003AB6  EC89  F015         	call	_enc424j600_readPHYRegister
 12704                           
 12705                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 12706  003ABA  0100               	movlb	0	; () banked
 12707  003ABC  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 12708  003ABE  D008               	goto	l197
 12709                           
 12710                           ; BSR set to: 0
 12711                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 12712  003AC0  EE20 F001          	lfsr	2,1
 12713  003AC4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12714  003AC6  26D9               	addwf	fsr2l,f,c
 12715  003AC8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12716  003ACA  22DA               	addwfc	fsr2h,f,c
 12717  003ACC  0E01               	movlw	1
 12718  003ACE  D007               	goto	L4
 12719  003AD0                     l197:
 12720                           
 12721                           ; BSR set to: 0
 12722                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 12723                           
 12724                           ; BSR set to: 0
 12725  003AD0  EE20 F001          	lfsr	2,1
 12726  003AD4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12727  003AD6  26D9               	addwf	fsr2l,f,c
 12728  003AD8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12729  003ADA  22DA               	addwfc	fsr2h,f,c
 12730  003ADC  0E00               	movlw	0
 12731  003ADE                     L4:
 12732  003ADE  6EDF               	movwf	indf2,c
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;ENC424J600.c: 410: }
 12736                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 12737                           
 12738                           ; BSR set to: 0
 12739  003AE0  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 12740  003AE2  D009               	goto	l199
 12741                           
 12742                           ; BSR set to: 0
 12743                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 12744  003AE4  EE20 F002          	lfsr	2,2
 12745  003AE8  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12746  003AEA  26D9               	addwf	fsr2l,f,c
 12747  003AEC  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12748  003AEE  22DA               	addwfc	fsr2h,f,c
 12749  003AF0  0E01               	movlw	1
 12750  003AF2  6EDF               	movwf	indf2,c
 12751                           
 12752                           ;ENC424J600.c: 414: } else {
 12753  003AF4  0012               	return	
 12754  003AF6                     l199:
 12755                           
 12756                           ; BSR set to: 0
 12757                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 12758                           
 12759                           ; BSR set to: 0
 12760  003AF6  EE20 F002          	lfsr	2,2
 12761  003AFA  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 12762  003AFC  26D9               	addwf	fsr2l,f,c
 12763  003AFE  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 12764  003B00  22DA               	addwfc	fsr2h,f,c
 12765  003B02  0E00               	movlw	0
 12766  003B04  6EDF               	movwf	indf2,c
 12767  003B06  0012               	return	
 12768  003B08                     __end_of_ethernetController_updateLinkStatus:
 12769                           	opt stack 0
 12770                           tblptru	equ	0xFF8
 12771                           tblptrh	equ	0xFF7
 12772                           tblptrl	equ	0xFF6
 12773                           tablat	equ	0xFF5
 12774                           prodh	equ	0xFF4
 12775                           prodl	equ	0xFF3
 12776                           intcon	equ	0xFF2
 12777                           intcon3	equ	0xFF0
 12778                           indf0	equ	0xFEF
 12779                           postinc0	equ	0xFEE
 12780                           plusw0	equ	0xFEB
 12781                           fsr0h	equ	0xFEA
 12782                           fsr0l	equ	0xFE9
 12783                           wreg	equ	0xFE8
 12784                           indf1	equ	0xFE7
 12785                           postinc1	equ	0xFE6
 12786                           postdec1	equ	0xFE5
 12787                           plusw1	equ	0xFE3
 12788                           fsr1h	equ	0xFE2
 12789                           fsr1l	equ	0xFE1
 12790                           indf2	equ	0xFDF
 12791                           postinc2	equ	0xFDE
 12792                           postdec2	equ	0xFDD
 12793                           plusw2	equ	0xFDB
 12794                           fsr2h	equ	0xFDA
 12795                           fsr2l	equ	0xFD9
 12796                           status	equ	0xFD8
 12797                           
 12798 ;; *************** function _enc424j600_readPHYRegister *****************
 12799 ;; Defined at:
 12800 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 12801 ;; Parameters:    Size  Location     Type
 12802 ;;  addr            1    wreg     unsigned char 
 12803 ;;  data            2   14[BANK0 ] PTR unsigned int 
 12804 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  addr            1   22[BANK0 ] unsigned char 
 12807 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 12808 ;;  temp            1   31[BANK0 ] unsigned char 
 12809 ;;  highByte        1   30[BANK0 ] unsigned char 
 12810 ;;  lowByte         1   29[BANK0 ] unsigned char 
 12811 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 12812 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  1    wreg      void 
 12815 ;; Registers used:
 12816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12822 ;;      Params:         0       2       0       0       0       0       0       0       0
 12823 ;;      Locals:         0      10       0       0       0       0       0       0       0
 12824 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12825 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12826 ;;Total ram usage:       18 bytes
 12827 ;; Hardware stack levels used:    1
 12828 ;; Hardware stack levels required when called:    7
 12829 ;; This function calls:
 12830 ;;		_enc424j600_readControlRegisterUnbanked
 12831 ;;		_enc424j600_writeControlRegisterUnbanked
 12832 ;; This function is called by:
 12833 ;;		_ethernetController_updateLinkStatus
 12834 ;; This function uses a non-reentrant model
 12835 ;;
 12836                           
 12837                           	psect	text45
 12838  002B12                     __ptext45:
 12839                           	opt stack 0
 12840  002B12                     _enc424j600_readPHYRegister:
 12841                           	opt stack 21
 12842                           
 12843                           ; BSR set to: 0
 12844                           ;incstack = 0
 12845                           ;enc424j600_readPHYRegister@addr stored from wreg
 12846  002B12  0100               	movlb	0	; () banked
 12847  002B14  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 12848                           
 12849                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 12850  002B16  0100               	movlb	0	; () banked
 12851  002B18  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 12852  002B1A  0B1F               	andlw	31
 12853  002B1C  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 12857  002B1E  0E01               	movlw	1
 12858  002B20  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;ENC424J600.c: 542: uint8_t temp;
 12862                           ;ENC424J600.c: 543: uint8_t lowByte;
 12863                           ;ENC424J600.c: 544: uint8_t highByte;
 12864                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 12865  002B22  0E00               	movlw	0
 12866  002B24  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 12867  002B26  0E00               	movlw	0
 12868  002B28  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 12869  002B2A  0E00               	movlw	0
 12870  002B2C  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 12871  002B2E  0E00               	movlw	0
 12872  002B30  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 12876  002B32  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 12877  002B34  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12878  002B36  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 12879  002B38  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12880  002B3A  0E54               	movlw	84
 12881  002B3C  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12882                           
 12883                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 12884  002B40  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 12885  002B42  0100               	movlb	0	; () banked
 12886  002B44  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12887  002B46  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 12888  002B48  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12889  002B4A  0E55               	movlw	85
 12890  002B4C  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12891                           
 12892                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 12893  002B50  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12894  002B52  0100               	movlb	0	; () banked
 12895  002B54  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12896  002B56  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12897  002B58  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12898  002B5A  0E52               	movlw	82
 12899  002B5C  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 12900                           
 12901                           ;ENC424J600.c: 552: temp |= 0x01;
 12902  002B60  0100               	movlb	0	; () banked
 12903  002B62  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 12907  002B64  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12908  002B66  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12909  002B68  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12910  002B6A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12911  002B6C  0E52               	movlw	82
 12912  002B6E  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12913                           
 12914                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 12915  002B72  0E45               	movlw	69
 12916  002B74                     u11787:
 12917  002B74  2EE8               	decfsz	wreg,f,c
 12918  002B76  D7FE               	bra	u11787
 12919  002B78  F000               	nop	
 12920  002B7A                     
 12921                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 12922  002B7A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12923  002B7C  0100               	movlb	0	; () banked
 12924  002B7E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12925  002B80  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12926  002B82  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12927  002B84  0E6A               	movlw	106
 12928  002B86  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 12929                           
 12930                           ;ENC424J600.c: 559: timeoutCounter++;
 12931  002B8A  0E01               	movlw	1
 12932  002B8C  0100               	movlb	0	; () banked
 12933  002B8E  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 12934  002B90  0E00               	movlw	0
 12935  002B92  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 12936  002B94  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 12937  002B96  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 12938                           
 12939                           ; BSR set to: 0
 12940                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 12941  002B98  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 12942  002B9A  D008               	goto	u10660
 12943                           
 12944                           ; BSR set to: 0
 12945  002B9C  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 12946  002B9E  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 12947  002BA0  E105               	bnz	l9039
 12948  002BA2  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 12949  002BA4  0E0F               	movlw	15
 12950  002BA6  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 12951  002BA8  A0D8               	btfss	status,0,c
 12952  002BAA  D7E7               	goto	l258
 12953  002BAC                     u10660:
 12954  002BAC                     l9039:
 12955                           
 12956                           ; BSR set to: 0
 12957                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 12958  002BAC  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 12959  002BAE  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 12960  002BB0  E140               	bnz	l263
 12961  002BB2  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 12962  002BB4  0E0F               	movlw	15
 12963  002BB6  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 12964  002BB8  B0D8               	btfsc	status,0,c
 12965  002BBA  0012               	return	
 12966                           
 12967                           ; BSR set to: 0
 12968                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 12969                           
 12970                           ; BSR set to: 0
 12971                           
 12972                           ; BSR set to: 0
 12973                           ;ENC424J600.c: 562: return;
 12974  002BBC  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12975  002BBE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12976  002BC0  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12977  002BC2  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 12978  002BC4  0E52               	movlw	82
 12979  002BC6  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 12980                           
 12981                           ;ENC424J600.c: 566: temp &= ~0x01;
 12982  002BCA  0100               	movlb	0	; () banked
 12983  002BCC  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 12984                           
 12985                           ; BSR set to: 0
 12986                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 12987  002BCE  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 12988  002BD0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 12989  002BD2  0E00               	movlw	high enc424j600_readPHYRegister@temp
 12990  002BD4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 12991  002BD6  0E52               	movlw	82
 12992  002BD8  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 12993                           
 12994                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 12995  002BDC  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 12996  002BDE  0100               	movlb	0	; () banked
 12997  002BE0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 12998  002BE2  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 12999  002BE4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13000  002BE6  0E68               	movlw	104
 13001  002BE8  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13002                           
 13003                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 13004  002BEC  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 13005  002BEE  0100               	movlb	0	; () banked
 13006  002BF0  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13007  002BF2  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 13008  002BF4  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13009  002BF6  0E69               	movlw	105
 13010  002BF8  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13011                           
 13012                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 13013  002BFC  0E00               	movlw	0
 13014  002BFE  0100               	movlb	0	; () banked
 13015  002C00  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 13016  002C02  0EFF               	movlw	255
 13017  002C04  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 13018  002C06  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 13019  002C08  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 13020  002C0A  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 13021  002C0C  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 13022  002C0E  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 13023  002C10  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 13024  002C12  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 13025  002C14  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 13026  002C16  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 13027  002C18  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 13028  002C1A  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 13029  002C1C  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 13030  002C1E  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 13031  002C20  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 13032  002C22  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 13033  002C26  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 13034  002C2A  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 13035  002C2E  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 13036  002C32                     l263:
 13037                           
 13038                           ; BSR set to: 0
 13039  002C32  0012               	return		;funcret
 13040  002C34                     __end_of_enc424j600_readPHYRegister:
 13041                           	opt stack 0
 13042                           tblptru	equ	0xFF8
 13043                           tblptrh	equ	0xFF7
 13044                           tblptrl	equ	0xFF6
 13045                           tablat	equ	0xFF5
 13046                           prodh	equ	0xFF4
 13047                           prodl	equ	0xFF3
 13048                           intcon	equ	0xFF2
 13049                           intcon3	equ	0xFF0
 13050                           indf0	equ	0xFEF
 13051                           postinc0	equ	0xFEE
 13052                           plusw0	equ	0xFEB
 13053                           fsr0h	equ	0xFEA
 13054                           fsr0l	equ	0xFE9
 13055                           wreg	equ	0xFE8
 13056                           indf1	equ	0xFE7
 13057                           postinc1	equ	0xFE6
 13058                           postdec1	equ	0xFE5
 13059                           plusw1	equ	0xFE3
 13060                           fsr1h	equ	0xFE2
 13061                           fsr1l	equ	0xFE1
 13062                           indf2	equ	0xFDF
 13063                           postinc2	equ	0xFDE
 13064                           postdec2	equ	0xFDD
 13065                           plusw2	equ	0xFDB
 13066                           fsr2h	equ	0xFDA
 13067                           fsr2l	equ	0xFD9
 13068                           status	equ	0xFD8
 13069                           
 13070 ;; *************** function _ethernetController_setLEDConfig *****************
 13071 ;; Defined at:
 13072 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 13073 ;; Parameters:    Size  Location     Type
 13074 ;;  LED             1    wreg     enum E5569
 13075 ;;  conf            1   14[BANK0 ] enum E5573
 13076 ;; Auto vars:     Size  Location     Type
 13077 ;;  LED             1   15[BANK0 ] enum E5569
 13078 ;;  data            1   16[BANK0 ] unsigned char 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      void 
 13081 ;; Registers used:
 13082 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13088 ;;      Params:         0       1       0       0       0       0       0       0       0
 13089 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13090 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13091 ;;      Totals:         0       3       0       0       0       0       0       0       0
 13092 ;;Total ram usage:        3 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    7
 13095 ;; This function calls:
 13096 ;;		_enc424j600_readControlRegisterUnbanked
 13097 ;;		_enc424j600_writeControlRegisterUnbanked
 13098 ;; This function is called by:
 13099 ;;		_handleStackBackgroundTasks
 13100 ;;		_main
 13101 ;; This function uses a non-reentrant model
 13102 ;;
 13103                           
 13104                           	psect	text46
 13105  0039F0                     __ptext46:
 13106                           	opt stack 0
 13107  0039F0                     _ethernetController_setLEDConfig:
 13108                           	opt stack 22
 13109                           
 13110                           ; BSR set to: 0
 13111                           ;incstack = 0
 13112                           ;ethernetController_setLEDConfig@LED stored from wreg
 13113  0039F0  0100               	movlb	0	; () banked
 13114  0039F2  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 13115                           
 13116                           ;ENC424J600.c: 420: uint8_t data;
 13117                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 13118  0039F4  0E70               	movlw	low ethernetController_setLEDConfig@data
 13119  0039F6  0100               	movlb	0	; () banked
 13120  0039F8  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13121  0039FA  0E00               	movlw	high ethernetController_setLEDConfig@data
 13122  0039FC  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13123  0039FE  0E75               	movlw	117
 13124  003A00  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13125                           
 13126                           ;ENC424J600.c: 422: if (LED == LEDB) {
 13127  003A04  0100               	movlb	0	; () banked
 13128  003A06  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13129  003A08  B4D8               	btfsc	status,2,c
 13130  003A0A  D00B               	goto	l205
 13131  003A0C  D015               	goto	l204
 13132  003A0E                     
 13133                           ; BSR set to: 0
 13134                           ;ENC424J600.c: 427: data &= ~0x0f;
 13135                           
 13136                           ; BSR set to: 0
 13137                           
 13138                           ;ENC424J600.c: 426: case LED_OFF:
 13139                           
 13140                           ; BSR set to: 0
 13141  003A0E  0EF0               	movlw	240
 13142  003A10  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13143                           
 13144                           ; BSR set to: 0
 13145                           ;ENC424J600.c: 428: data |= 0x01;
 13146  003A12  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 13147                           
 13148                           ;ENC424J600.c: 429: break;
 13149  003A14  D02C               	goto	l216
 13150  003A16                     
 13151                           ; BSR set to: 0
 13152                           ;ENC424J600.c: 431: data &= ~0x0f;
 13153                           
 13154                           ; BSR set to: 0
 13155  003A16  0EF0               	movlw	240
 13156  003A18  D018               	goto	L5
 13157  003A1A                     
 13158                           ; BSR set to: 0
 13159                           ;ENC424J600.c: 434: data &= ~0x0f;
 13160                           
 13161                           ; BSR set to: 0
 13162  003A1A  0EF0               	movlw	240
 13163  003A1C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13164                           
 13165                           ;ENC424J600.c: 435: data |= 0x06;
 13166  003A1E  0E06               	movlw	6
 13167  003A20  D019               	goto	L6
 13168  003A22                     l205:
 13169                           
 13170                           ; BSR set to: 0
 13171                           
 13172                           ; BSR set to: 0
 13173  003A22  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13174                           
 13175                           ; Switch size 1, requested type "space"
 13176                           ; Number of cases is 3, Range of values is 0 to 2
 13177                           ; switch strategies available:
 13178                           ; Name         Instructions Cycles
 13179                           ; simple_byte           10     6 (average)
 13180                           ;	Chosen strategy is simple_byte
 13181  003A24  0A00               	xorlw	0	; case 0
 13182  003A26  B4D8               	btfsc	status,2,c
 13183  003A28  D7F6               	goto	l209
 13184  003A2A  0A01               	xorlw	1	; case 1
 13185  003A2C  B4D8               	btfsc	status,2,c
 13186  003A2E  D7EF               	goto	l206
 13187  003A30  0A03               	xorlw	3	; case 2
 13188  003A32  B4D8               	btfsc	status,2,c
 13189  003A34  D7F2               	goto	l210
 13190  003A36  D7EB               	goto	l206
 13191  003A38                     l204:
 13192                           
 13193                           ; BSR set to: 0
 13194                           
 13195                           ; BSR set to: 0
 13196  003A38  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 13197  003A3A  B4D8               	btfsc	status,2,c
 13198  003A3C  D00D               	goto	l213
 13199  003A3E  D017               	goto	l216
 13200  003A40                     
 13201                           ; BSR set to: 0
 13202                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 13203                           
 13204                           ; BSR set to: 0
 13205                           
 13206                           ;ENC424J600.c: 441: case LED_OFF:
 13207                           
 13208                           ; BSR set to: 0
 13209  003A40  0E0F               	movlw	15
 13210  003A42  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13211                           
 13212                           ; BSR set to: 0
 13213                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 13214  003A44  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 13215                           
 13216                           ;ENC424J600.c: 444: break;
 13217  003A46  D013               	goto	l216
 13218  003A48                     
 13219                           ; BSR set to: 0
 13220                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 13221                           
 13222                           ; BSR set to: 0
 13223  003A48  0E0F               	movlw	15
 13224  003A4A                     L5:
 13225  003A4A  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13226                           
 13227                           ;ENC424J600.c: 447: break;
 13228  003A4C  D010               	goto	l216
 13229  003A4E                     
 13230                           ; BSR set to: 0
 13231                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 13232                           
 13233                           ; BSR set to: 0
 13234  003A4E  0E0F               	movlw	15
 13235  003A50  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13236                           
 13237                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 13238  003A52  0E60               	movlw	96
 13239  003A54                     L6:
 13240  003A54  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;ENC424J600.c: 452: }
 13244                           
 13245                           ;ENC424J600.c: 451: break;
 13246  003A56  D00B               	goto	l216
 13247  003A58                     l213:
 13248                           
 13249                           ; BSR set to: 0
 13250                           
 13251                           ; BSR set to: 0
 13252  003A58  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 13253                           
 13254                           ; Switch size 1, requested type "space"
 13255                           ; Number of cases is 3, Range of values is 0 to 2
 13256                           ; switch strategies available:
 13257                           ; Name         Instructions Cycles
 13258                           ; simple_byte           10     6 (average)
 13259                           ;	Chosen strategy is simple_byte
 13260  003A5A  0A00               	xorlw	0	; case 0
 13261  003A5C  B4D8               	btfsc	status,2,c
 13262  003A5E  D7F4               	goto	l217
 13263  003A60  0A01               	xorlw	1	; case 1
 13264  003A62  B4D8               	btfsc	status,2,c
 13265  003A64  D7ED               	goto	l214
 13266  003A66  0A03               	xorlw	3	; case 2
 13267  003A68  B4D8               	btfsc	status,2,c
 13268  003A6A  D7F1               	goto	l218
 13269  003A6C  D7E9               	goto	l214
 13270  003A6E                     l216:
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;ENC424J600.c: 453: }
 13274                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 13275                           
 13276                           ; BSR set to: 0
 13277                           
 13278                           ; BSR set to: 0
 13279                           
 13280                           ; BSR set to: 0
 13281  003A6E  0E70               	movlw	low ethernetController_setLEDConfig@data
 13282  003A70  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13283  003A72  0E00               	movlw	high ethernetController_setLEDConfig@data
 13284  003A74  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13285  003A76  0E75               	movlw	117
 13286  003A78  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 13287  003A7C  0012               	return		;funcret
 13288  003A7E                     __end_of_ethernetController_setLEDConfig:
 13289                           	opt stack 0
 13290                           tblptru	equ	0xFF8
 13291                           tblptrh	equ	0xFF7
 13292                           tblptrl	equ	0xFF6
 13293                           tablat	equ	0xFF5
 13294                           prodh	equ	0xFF4
 13295                           prodl	equ	0xFF3
 13296                           intcon	equ	0xFF2
 13297                           intcon3	equ	0xFF0
 13298                           indf0	equ	0xFEF
 13299                           postinc0	equ	0xFEE
 13300                           plusw0	equ	0xFEB
 13301                           fsr0h	equ	0xFEA
 13302                           fsr0l	equ	0xFE9
 13303                           wreg	equ	0xFE8
 13304                           indf1	equ	0xFE7
 13305                           postinc1	equ	0xFE6
 13306                           postdec1	equ	0xFE5
 13307                           plusw1	equ	0xFE3
 13308                           fsr1h	equ	0xFE2
 13309                           fsr1l	equ	0xFE1
 13310                           indf2	equ	0xFDF
 13311                           postinc2	equ	0xFDE
 13312                           postdec2	equ	0xFDD
 13313                           plusw2	equ	0xFDB
 13314                           fsr2h	equ	0xFDA
 13315                           fsr2l	equ	0xFD9
 13316                           status	equ	0xFD8
 13317                           
 13318 ;; *************** function _ethernetController_pollInterruptFlags *****************
 13319 ;; Defined at:
 13320 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;		None
 13323 ;; Auto vars:     Size  Location     Type
 13324 ;;  reg             2   32[BANK0 ] unsigned int 
 13325 ;;  flags           2   30[BANK0 ] struct interruptFlags
 13326 ;; Return value:  Size  Location     Type
 13327 ;;                  2   24[BANK0 ] struct interruptFlags
 13328 ;; Registers used:
 13329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13330 ;; Tracked objects:
 13331 ;;		On entry : 0/0
 13332 ;;		On exit  : 0/0
 13333 ;;		Unchanged: 0/0
 13334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13335 ;;      Params:         0       2       0       0       0       0       0       0       0
 13336 ;;      Locals:         0       4       0       0       0       0       0       0       0
 13337 ;;      Temps:          0       4       0       0       0       0       0       0       0
 13338 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13339 ;;Total ram usage:       10 bytes
 13340 ;; Hardware stack levels used:    1
 13341 ;; Hardware stack levels required when called:    8
 13342 ;; This function calls:
 13343 ;;		_enc424j600_getInterruptFlags
 13344 ;; This function is called by:
 13345 ;;		_handleStackBackgroundTasks
 13346 ;; This function uses a non-reentrant model
 13347 ;;
 13348                           
 13349                           	psect	text47
 13350  00288C                     __ptext47:
 13351                           	opt stack 0
 13352  00288C                     _ethernetController_pollInterruptFlags:
 13353                           	opt stack 21
 13354                           
 13355                           ;ENC424J600.c: 313: interruptFlags_t flags;
 13356                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 13357                           
 13358                           ;incstack = 0
 13359  00288C  ECD2  F022         	call	_enc424j600_getInterruptFlags	;wreg free
 13360  002890  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 13361  002894  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 13362                           
 13363                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 13364  002898  0100               	movlb	0	; () banked
 13365  00289A  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 13366  00289C  D003               	goto	u10980
 13367  00289E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13368  0028A0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13369  0028A2  D002               	goto	u10998
 13370  0028A4                     u10980:
 13371  0028A4  0100               	movlb	0	; () banked
 13372  0028A6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13373  0028A8                     u10998:
 13374  0028A8  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13375  0028AA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13376  0028AC  0BFE               	andlw	-2
 13377  0028AE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13378  0028B0  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 13382  0028B2  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 13383  0028B4  D003               	goto	u11000
 13384  0028B6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13385  0028B8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13386  0028BA  D002               	goto	u11018
 13387  0028BC                     u11000:
 13388  0028BC  0100               	movlb	0	; () banked
 13389  0028BE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13390  0028C0                     u11018:
 13391  0028C0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13392  0028C2  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13393  0028C4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13394  0028C6  0BFD               	andlw	-3
 13395  0028C8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13396  0028CA  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13397                           
 13398                           ; BSR set to: 0
 13399                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 13400  0028CC  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 13401  0028CE  D003               	goto	u11020
 13402  0028D0  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13403  0028D2  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13404  0028D4  D002               	goto	u11038
 13405  0028D6                     u11020:
 13406  0028D6  0100               	movlb	0	; () banked
 13407  0028D8  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13408  0028DA                     u11038:
 13409  0028DA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13410  0028DC  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13411  0028DE  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13412  0028E0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13413  0028E2  0BFB               	andlw	-5
 13414  0028E4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13415  0028E6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13416                           
 13417                           ; BSR set to: 0
 13418                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 13419  0028E8  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 13420  0028EA  D003               	goto	u11040
 13421  0028EC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13422  0028EE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13423  0028F0  D002               	goto	u11058
 13424  0028F2                     u11040:
 13425  0028F2  0100               	movlb	0	; () banked
 13426  0028F4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13427  0028F6                     u11058:
 13428  0028F6  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13429  0028F8  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13430  0028FA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13431  0028FC  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13432  0028FE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13433  002900  0BF7               	andlw	-9
 13434  002902  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13435  002904  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13436                           
 13437                           ; BSR set to: 0
 13438                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 13439  002906  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 13440  002908  D003               	goto	u11060
 13441  00290A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13442  00290C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13443  00290E  D002               	goto	u11078
 13444  002910                     u11060:
 13445  002910  0100               	movlb	0	; () banked
 13446  002912  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13447  002914                     u11078:
 13448  002914  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13449  002916  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13450  002918  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13451  00291A  0BEF               	andlw	-17
 13452  00291C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13453  00291E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 13457  002920  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 13458  002922  D003               	goto	u11080
 13459  002924  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13460  002926  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13461  002928  D002               	goto	u11098
 13462  00292A                     u11080:
 13463  00292A  0100               	movlb	0	; () banked
 13464  00292C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13465  00292E                     u11098:
 13466  00292E  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13467  002930  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13468  002932  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13469  002934  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13470  002936  0BDF               	andlw	-33
 13471  002938  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13472  00293A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13473                           
 13474                           ; BSR set to: 0
 13475                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 13476  00293C  A89E               	btfss	3998,4,c	;volatile
 13477  00293E  D003               	goto	u11100
 13478  002940  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13479  002942  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13480  002944  D002               	goto	u11118
 13481  002946                     u11100:
 13482  002946  0100               	movlb	0	; () banked
 13483  002948  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13484  00294A                     u11118:
 13485  00294A  0E01               	movlw	1
 13486  00294C  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 13487  00294E  0E00               	movlw	0
 13488  002950  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 13489  002952  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13490  002954  D003               	goto	u11124
 13491  002956                     u11125:
 13492  002956  90D8               	bcf	status,0,c
 13493  002958  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13494  00295A  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13495  00295C                     u11124:
 13496  00295C  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13497  00295E  D7FB               	goto	u11125
 13498  002960  0100               	movlb	0	; () banked
 13499  002962  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 13500  002964  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 13501  002966  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 13502  002968  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 13503  00296A  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 13504  00296C  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 13505  00296E  B4D8               	btfsc	status,2,c
 13506  002970  D003               	goto	u11130
 13507  002972  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13508  002974  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13509  002976  D002               	goto	u11148
 13510  002978                     u11130:
 13511  002978  0100               	movlb	0	; () banked
 13512  00297A  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 13513  00297C                     u11148:
 13514  00297C  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13515  00297E  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13516  002980  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 13517  002982  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13518  002984  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13519  002986  0BBF               	andlw	-65
 13520  002988  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 13521  00298A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 13525  00298C  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 13526  00298E  D003               	goto	u11150
 13527  002990  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13528  002992  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13529  002994  D002               	goto	u11168
 13530  002996                     u11150:
 13531  002996  0100               	movlb	0	; () banked
 13532  002998  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13533  00299A                     u11168:
 13534  00299A  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13535  00299C  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13536  00299E  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 13537  0029A0  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13538  0029A2  0B7F               	andlw	-129
 13539  0029A4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13540  0029A6  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 13541                           
 13542                           ; BSR set to: 0
 13543                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 13544  0029A8  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 13545  0029AA  D003               	goto	u11170
 13546  0029AC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13547  0029AE  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13548  0029B0  D002               	goto	u11188
 13549  0029B2                     u11170:
 13550  0029B2  0100               	movlb	0	; () banked
 13551  0029B4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13552  0029B6                     u11188:
 13553  0029B6  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13554  0029B8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13555  0029BA  0BFE               	andlw	-2
 13556  0029BC  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13557  0029BE  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 13561  0029C0  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 13562  0029C2  D003               	goto	u11190
 13563  0029C4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13564  0029C6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13565  0029C8  D002               	goto	u11208
 13566  0029CA                     u11190:
 13567  0029CA  0100               	movlb	0	; () banked
 13568  0029CC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 13569  0029CE                     u11208:
 13570  0029CE  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 13571  0029D0  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 13572  0029D2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13573  0029D4  0BFD               	andlw	-3
 13574  0029D6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 13575  0029D8  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 13576                           
 13577                           ; BSR set to: 0
 13578                           ;ENC424J600.c: 327: return flags;
 13579  0029DA  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 13580  0029DE  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 13581  0029E2  0012               	return	
 13582  0029E4                     __end_of_ethernetController_pollInterruptFlags:
 13583                           	opt stack 0
 13584                           tblptru	equ	0xFF8
 13585                           tblptrh	equ	0xFF7
 13586                           tblptrl	equ	0xFF6
 13587                           tablat	equ	0xFF5
 13588                           prodh	equ	0xFF4
 13589                           prodl	equ	0xFF3
 13590                           intcon	equ	0xFF2
 13591                           intcon3	equ	0xFF0
 13592                           indf0	equ	0xFEF
 13593                           postinc0	equ	0xFEE
 13594                           plusw0	equ	0xFEB
 13595                           fsr0h	equ	0xFEA
 13596                           fsr0l	equ	0xFE9
 13597                           wreg	equ	0xFE8
 13598                           indf1	equ	0xFE7
 13599                           postinc1	equ	0xFE6
 13600                           postdec1	equ	0xFE5
 13601                           plusw1	equ	0xFE3
 13602                           fsr1h	equ	0xFE2
 13603                           fsr1l	equ	0xFE1
 13604                           indf2	equ	0xFDF
 13605                           postinc2	equ	0xFDE
 13606                           postdec2	equ	0xFDD
 13607                           plusw2	equ	0xFDB
 13608                           fsr2h	equ	0xFDA
 13609                           fsr2l	equ	0xFD9
 13610                           status	equ	0xFD8
 13611                           
 13612 ;; *************** function _enc424j600_getInterruptFlags *****************
 13613 ;; Defined at:
 13614 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 13615 ;; Parameters:    Size  Location     Type
 13616 ;;		None
 13617 ;; Auto vars:     Size  Location     Type
 13618 ;;  high            1   23[BANK0 ] unsigned char 
 13619 ;;  low             1   22[BANK0 ] unsigned char 
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  2   14[BANK0 ] unsigned int 
 13622 ;; Registers used:
 13623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13629 ;;      Params:         0       2       0       0       0       0       0       0       0
 13630 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13631 ;;      Temps:          0       6       0       0       0       0       0       0       0
 13632 ;;      Totals:         0      10       0       0       0       0       0       0       0
 13633 ;;Total ram usage:       10 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    7
 13636 ;; This function calls:
 13637 ;;		_enc424j600_readControlRegisterUnbanked
 13638 ;; This function is called by:
 13639 ;;		_ethernetController_pollInterruptFlags
 13640 ;; This function uses a non-reentrant model
 13641 ;;
 13642                           
 13643                           	psect	text48
 13644  0045A4                     __ptext48:
 13645                           	opt stack 0
 13646  0045A4                     _enc424j600_getInterruptFlags:
 13647                           	opt stack 21
 13648                           
 13649                           ;ENC424J600.c: 697: uint8_t low, high;
 13650                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;incstack = 0
 13654  0045A4  0E76               	movlw	low enc424j600_getInterruptFlags@low
 13655  0045A6  0100               	movlb	0	; () banked
 13656  0045A8  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13657  0045AA  0E00               	movlw	high enc424j600_getInterruptFlags@low
 13658  0045AC  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13659  0045AE  0E1C               	movlw	28
 13660  0045B0  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13661                           
 13662                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 13663  0045B4  0E77               	movlw	low enc424j600_getInterruptFlags@high
 13664  0045B6  0100               	movlb	0	; () banked
 13665  0045B8  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13666  0045BA  0E00               	movlw	high enc424j600_getInterruptFlags@high
 13667  0045BC  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13668  0045BE  0E1D               	movlw	29
 13669  0045C0  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13670                           
 13671                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 13672  0045C4  0E00               	movlw	0
 13673  0045C6  0100               	movlb	0	; () banked
 13674  0045C8  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 13675  0045CA  0EFF               	movlw	255
 13676  0045CC  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 13677  0045CE  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 13678  0045D0  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 13679  0045D2  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 13680  0045D4  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 13681  0045D6  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 13682  0045D8  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 13683  0045DA  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 13684  0045DC  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 13685  0045DE  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 13686  0045E0  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 13687  0045E2  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 13688  0045E4  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 13689  0045E6  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 13690  0045E8  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 13691  0045EA  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 13692  0045EC  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 13693  0045EE  0012               	return	
 13694  0045F0                     __end_of_enc424j600_getInterruptFlags:
 13695                           	opt stack 0
 13696                           tblptru	equ	0xFF8
 13697                           tblptrh	equ	0xFF7
 13698                           tblptrl	equ	0xFF6
 13699                           tablat	equ	0xFF5
 13700                           prodh	equ	0xFF4
 13701                           prodl	equ	0xFF3
 13702                           intcon	equ	0xFF2
 13703                           intcon3	equ	0xFF0
 13704                           indf0	equ	0xFEF
 13705                           postinc0	equ	0xFEE
 13706                           plusw0	equ	0xFEB
 13707                           fsr0h	equ	0xFEA
 13708                           fsr0l	equ	0xFE9
 13709                           wreg	equ	0xFE8
 13710                           indf1	equ	0xFE7
 13711                           postinc1	equ	0xFE6
 13712                           postdec1	equ	0xFE5
 13713                           plusw1	equ	0xFE3
 13714                           fsr1h	equ	0xFE2
 13715                           fsr1l	equ	0xFE1
 13716                           indf2	equ	0xFDF
 13717                           postinc2	equ	0xFDE
 13718                           postdec2	equ	0xFDD
 13719                           plusw2	equ	0xFDB
 13720                           fsr2h	equ	0xFDA
 13721                           fsr2l	equ	0xFD9
 13722                           status	equ	0xFD8
 13723                           
 13724 ;; *************** function _ethernetController_newPacketAvailable *****************
 13725 ;; Defined at:
 13726 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 13727 ;; Parameters:    Size  Location     Type
 13728 ;;		None
 13729 ;; Auto vars:     Size  Location     Type
 13730 ;;		None
 13731 ;; Return value:  Size  Location     Type
 13732 ;;                  1    wreg      unsigned char 
 13733 ;; Registers used:
 13734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13735 ;; Tracked objects:
 13736 ;;		On entry : 0/0
 13737 ;;		On exit  : 0/0
 13738 ;;		Unchanged: 0/0
 13739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13740 ;;      Params:         0       0       0       0       0       0       0       0       0
 13741 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13742 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13743 ;;      Totals:         0       0       0       0       0       0       0       0       0
 13744 ;;Total ram usage:        0 bytes
 13745 ;; Hardware stack levels used:    1
 13746 ;; Hardware stack levels required when called:    8
 13747 ;; This function calls:
 13748 ;;		_enc424j600_getPacketCount
 13749 ;; This function is called by:
 13750 ;;		_handleStackBackgroundTasks
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           	psect	text49
 13755  004C26                     __ptext49:
 13756                           	opt stack 0
 13757  004C26                     _ethernetController_newPacketAvailable:
 13758                           	opt stack 21
 13759                           
 13760                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 13761                           
 13762                           ; BSR set to: 0
 13763                           ;incstack = 0
 13764  004C26  ECF0  F025         	call	_enc424j600_getPacketCount	;wreg free
 13765  004C2A  0900               	iorlw	0
 13766  004C2C  B4D8               	btfsc	status,2,c
 13767  004C2E  D002               	goto	u11210
 13768  004C30  0E01               	movlw	1
 13769  004C32  0012               	return	
 13770  004C34                     u11210:
 13771  004C34  0E00               	movlw	0
 13772  004C36  0012               	return	
 13773  004C38                     __end_of_ethernetController_newPacketAvailable:
 13774                           	opt stack 0
 13775                           tblptru	equ	0xFF8
 13776                           tblptrh	equ	0xFF7
 13777                           tblptrl	equ	0xFF6
 13778                           tablat	equ	0xFF5
 13779                           prodh	equ	0xFF4
 13780                           prodl	equ	0xFF3
 13781                           intcon	equ	0xFF2
 13782                           intcon3	equ	0xFF0
 13783                           indf0	equ	0xFEF
 13784                           postinc0	equ	0xFEE
 13785                           plusw0	equ	0xFEB
 13786                           fsr0h	equ	0xFEA
 13787                           fsr0l	equ	0xFE9
 13788                           wreg	equ	0xFE8
 13789                           indf1	equ	0xFE7
 13790                           postinc1	equ	0xFE6
 13791                           postdec1	equ	0xFE5
 13792                           plusw1	equ	0xFE3
 13793                           fsr1h	equ	0xFE2
 13794                           fsr1l	equ	0xFE1
 13795                           indf2	equ	0xFDF
 13796                           postinc2	equ	0xFDE
 13797                           postdec2	equ	0xFDD
 13798                           plusw2	equ	0xFDB
 13799                           fsr2h	equ	0xFDA
 13800                           fsr2l	equ	0xFD9
 13801                           status	equ	0xFD8
 13802                           
 13803 ;; *************** function _ethernetController_clearInterruptFlag *****************
 13804 ;; Defined at:
 13805 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 13806 ;; Parameters:    Size  Location     Type
 13807 ;;  flag            1    wreg     unsigned char 
 13808 ;; Auto vars:     Size  Location     Type
 13809 ;;  flag            1   18[BANK0 ] unsigned char 
 13810 ;; Return value:  Size  Location     Type
 13811 ;;                  1    wreg      void 
 13812 ;; Registers used:
 13813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13814 ;; Tracked objects:
 13815 ;;		On entry : 0/0
 13816 ;;		On exit  : 0/0
 13817 ;;		Unchanged: 0/0
 13818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13819 ;;      Params:         0       0       0       0       0       0       0       0       0
 13820 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13821 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13822 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13823 ;;Total ram usage:        1 bytes
 13824 ;; Hardware stack levels used:    1
 13825 ;; Hardware stack levels required when called:    8
 13826 ;; This function calls:
 13827 ;;		_enc424j600_clearInterruptFlag
 13828 ;; This function is called by:
 13829 ;;		_handleStackBackgroundTasks
 13830 ;; This function uses a non-reentrant model
 13831 ;;
 13832                           
 13833                           	psect	text50
 13834  004C9A                     __ptext50:
 13835                           	opt stack 0
 13836  004C9A                     _ethernetController_clearInterruptFlag:
 13837                           	opt stack 21
 13838                           
 13839                           ;incstack = 0
 13840                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 13841  004C9A  0100               	movlb	0	; () banked
 13842  004C9C  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 13843                           
 13844                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 13845  004C9E  0100               	movlb	0	; () banked
 13846  004CA0  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 13847  004CA2  EC84  F01D         	call	_enc424j600_clearInterruptFlag
 13848  004CA6  0012               	return		;funcret
 13849  004CA8                     __end_of_ethernetController_clearInterruptFlag:
 13850                           	opt stack 0
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           intcon	equ	0xFF2
 13858                           intcon3	equ	0xFF0
 13859                           indf0	equ	0xFEF
 13860                           postinc0	equ	0xFEE
 13861                           plusw0	equ	0xFEB
 13862                           fsr0h	equ	0xFEA
 13863                           fsr0l	equ	0xFE9
 13864                           wreg	equ	0xFE8
 13865                           indf1	equ	0xFE7
 13866                           postinc1	equ	0xFE6
 13867                           postdec1	equ	0xFE5
 13868                           plusw1	equ	0xFE3
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           plusw2	equ	0xFDB
 13875                           fsr2h	equ	0xFDA
 13876                           fsr2l	equ	0xFD9
 13877                           status	equ	0xFD8
 13878                           
 13879 ;; *************** function _enc424j600_clearInterruptFlag *****************
 13880 ;; Defined at:
 13881 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 13882 ;; Parameters:    Size  Location     Type
 13883 ;;  flag            1    wreg     unsigned char 
 13884 ;; Auto vars:     Size  Location     Type
 13885 ;;  flag            1   16[BANK0 ] unsigned char 
 13886 ;;  temp            1   17[BANK0 ] unsigned char 
 13887 ;; Return value:  Size  Location     Type
 13888 ;;                  1    wreg      void 
 13889 ;; Registers used:
 13890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13891 ;; Tracked objects:
 13892 ;;		On entry : 0/0
 13893 ;;		On exit  : 0/0
 13894 ;;		Unchanged: 0/0
 13895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13896 ;;      Params:         0       0       0       0       0       0       0       0       0
 13897 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13898 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13899 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13900 ;;Total ram usage:        4 bytes
 13901 ;; Hardware stack levels used:    1
 13902 ;; Hardware stack levels required when called:    7
 13903 ;; This function calls:
 13904 ;;		_enc424j600_readControlRegisterUnbanked
 13905 ;;		_enc424j600_writeControlRegisterUnbanked
 13906 ;; This function is called by:
 13907 ;;		_ethernetController_clearInterruptFlag
 13908 ;; This function uses a non-reentrant model
 13909 ;;
 13910                           
 13911                           	psect	text51
 13912  003B08                     __ptext51:
 13913                           	opt stack 0
 13914  003B08                     _enc424j600_clearInterruptFlag:
 13915                           	opt stack 21
 13916                           
 13917                           ;incstack = 0
 13918                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 13919  003B08  0100               	movlb	0	; () banked
 13920  003B0A  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 13921                           
 13922                           ;ENC424J600.c: 704: uint8_t temp;
 13923                           ;ENC424J600.c: 705: if (flag < 8) {
 13924  003B0C  0E08               	movlw	8
 13925  003B0E  0100               	movlb	0	; () banked
 13926  003B10  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 13927  003B12  D01E               	goto	l317
 13928                           
 13929                           ; BSR set to: 0
 13930                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 13931  003B14  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13932  003B16  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13933  003B18  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13934  003B1A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13935  003B1C  0E1C               	movlw	28
 13936  003B1E  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13937                           
 13938                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 13939  003B22  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 13940  003B26  0E01               	movlw	1
 13941  003B28  0100               	movlb	0	; () banked
 13942  003B2A  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 13943  003B2C  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13944  003B2E  D002               	goto	u10634
 13945  003B30                     u10635:
 13946  003B30  90D8               	bcf	status,0,c
 13947  003B32  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 13948  003B34                     u10634:
 13949  003B34  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13950  003B36  D7FC               	goto	u10635
 13951  003B38  0100               	movlb	0	; () banked
 13952  003B3A  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 13953  003B3C  0AFF               	xorlw	255
 13954  003B3E  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 13955                           
 13956                           ; BSR set to: 0
 13957                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 13958  003B40  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13959  003B42  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 13960  003B44  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13961  003B46  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 13962  003B48  0E1C               	movlw	28
 13963  003B4A  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 13964                           
 13965                           ;ENC424J600.c: 709: } else {
 13966  003B4E  0012               	return	
 13967  003B50                     l317:
 13968                           
 13969                           ;ENC424J600.c: 710: flag -= 8;
 13970  003B50  0E08               	movlw	8
 13971  003B52  0100               	movlb	0	; () banked
 13972  003B54  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 13973                           
 13974                           ; BSR set to: 0
 13975                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 13976  003B56  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 13977  003B58  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 13978  003B5A  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 13979  003B5C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 13980  003B5E  0E1D               	movlw	29
 13981  003B60  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 13982                           
 13983                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 13984  003B64  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 13985  003B68  0E01               	movlw	1
 13986  003B6A  0100               	movlb	0	; () banked
 13987  003B6C  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 13988  003B6E  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13989  003B70  D002               	goto	u10644
 13990  003B72                     u10645:
 13991  003B72  90D8               	bcf	status,0,c
 13992  003B74  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 13993  003B76                     u10644:
 13994  003B76  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 13995  003B78  D7FC               	goto	u10645
 13996  003B7A  0100               	movlb	0	; () banked
 13997  003B7C  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 13998  003B7E  0AFF               	xorlw	255
 13999  003B80  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 14000                           
 14001                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 14002  003B82  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 14003  003B84  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 14004  003B86  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 14005  003B88  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 14006  003B8A  0E1D               	movlw	29
 14007  003B8C  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 14008  003B90  0012               	return	
 14009  003B92                     __end_of_enc424j600_clearInterruptFlag:
 14010                           	opt stack 0
 14011                           tblptru	equ	0xFF8
 14012                           tblptrh	equ	0xFF7
 14013                           tblptrl	equ	0xFF6
 14014                           tablat	equ	0xFF5
 14015                           prodh	equ	0xFF4
 14016                           prodl	equ	0xFF3
 14017                           intcon	equ	0xFF2
 14018                           intcon3	equ	0xFF0
 14019                           indf0	equ	0xFEF
 14020                           postinc0	equ	0xFEE
 14021                           plusw0	equ	0xFEB
 14022                           fsr0h	equ	0xFEA
 14023                           fsr0l	equ	0xFE9
 14024                           wreg	equ	0xFE8
 14025                           indf1	equ	0xFE7
 14026                           postinc1	equ	0xFE6
 14027                           postdec1	equ	0xFE5
 14028                           plusw1	equ	0xFE3
 14029                           fsr1h	equ	0xFE2
 14030                           fsr1l	equ	0xFE1
 14031                           indf2	equ	0xFDF
 14032                           postinc2	equ	0xFDE
 14033                           postdec2	equ	0xFDD
 14034                           plusw2	equ	0xFDB
 14035                           fsr2h	equ	0xFDA
 14036                           fsr2l	equ	0xFD9
 14037                           status	equ	0xFD8
 14038                           
 14039 ;; *************** function _arp_background *****************
 14040 ;; Defined at:
 14041 ;;		line 342 in file "src/stack/protocols/arp.c"
 14042 ;; Parameters:    Size  Location     Type
 14043 ;;		None
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  ipPreliminar    4   78[BANK1 ] struct ipv4_address
 14046 ;;  errAnnounce     3   82[BANK1 ] struct error
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  3  507[None  ] struct error
 14049 ;; Registers used:
 14050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14056 ;;      Params:         0       0       0       0       0       0       0       0       0
 14057 ;;      Locals:         0       0       7       0       0       0       0       0       0
 14058 ;;      Temps:          0       0       2       0       0       0       0       0       0
 14059 ;;      Totals:         0       0       9       0       0       0       0       0       0
 14060 ;;Total ram usage:        9 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; Hardware stack levels required when called:   12
 14063 ;; This function calls:
 14064 ;;		_UARTTransmitText
 14065 ;;		_arp_gratuitous
 14066 ;;		_arp_probe
 14067 ;;		_ipv4_SrcAddrChanged
 14068 ;;		_ipv4_getPreliminaryIPSourceAddress
 14069 ;; This function is called by:
 14070 ;;		_handleStackBackgroundTasks
 14071 ;; This function uses a non-reentrant model
 14072 ;;
 14073                           
 14074                           	psect	text52
 14075  002F64                     __ptext52:
 14076                           	opt stack 0
 14077  002F64                     _arp_background:
 14078                           	opt stack 17
 14079                           
 14080                           ;arp.c: 343: error_t static err;
 14081                           ;arp.c: 344: error_t errAnnounce;
 14082                           ;arp.c: 345: bool_t static fAnnounce = 0;
 14083                           ;arp.c: 346: err.code = (uint16_t)0xffff;
 14084                           
 14085                           ;incstack = 0
 14086  002F64  0101               	movlb	1	; () banked
 14087  002F66  69EE               	setf	(arp_background@err+1)& (0+255),b
 14088  002F68  69EF               	setf	(arp_background@err+2)& (0+255),b
 14089                           
 14090                           ; BSR set to: 1
 14091                           ;arp.c: 347: err.module = ERROR_MODULE_ARP;
 14092  002F6A  0E03               	movlw	3
 14093  002F6C  6FED               	movwf	arp_background@err& (0+255),b
 14094                           
 14095                           ; BSR set to: 1
 14096                           ;arp.c: 350: ipv4_address_t ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 14097  002F6E  EC1C  F026         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 14098  002F72  C060  F14E         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 14099  002F76  C061  F14F         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 14100  002F7A  C062  F150         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 14101  002F7E  C063  F151         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 14102                           
 14103                           ;arp.c: 352: if (ipv4_SrcAddrChanged(&err)) {
 14104  002F82  0EED               	movlw	low arp_background@err
 14105  002F84  0100               	movlb	0	; () banked
 14106  002F86  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 14107  002F88  0E01               	movlw	high arp_background@err
 14108  002F8A  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 14109  002F8C  EC09  F026         	call	_ipv4_SrcAddrChanged	;wreg free
 14110  002F90  0100               	movlb	0	; () banked
 14111  002F92  A0D8               	btfss	status,0,c
 14112  002F94  D046               	goto	l1001
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;arp.c: 354: err.code = arp_probe(ipPreliminary).code;
 14116  002F96  C14E  F0FC         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 14117  002F9A  C14F  F0FD         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 14118  002F9E  C150  F0FE         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 14119  002FA2  C151  F0FF         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 14120  002FA6  EC48  F00E         	call	_arp_probe	;wreg free
 14121  002FAA  0EFC               	movlw	low ?_arp_probe
 14122  002FAC  6ED9               	movwf	fsr2l,c
 14123  002FAE  0E00               	movlw	high ?_arp_probe
 14124  002FB0  6EDA               	movwf	fsr2h,c
 14125  002FB2  0E01               	movlw	1
 14126  002FB4  26D9               	addwf	fsr2l,f,c
 14127  002FB6  0E00               	movlw	0
 14128  002FB8  22DA               	addwfc	fsr2h,f,c
 14129  002FBA  CFDE F1EE          	movff	postinc2,arp_background@err+1
 14130  002FBE  CFDD F1EF          	movff	postdec2,arp_background@err+2
 14131                           
 14132                           ;arp.c: 356: switch (err.code) {
 14133  002FC2  D019               	goto	l999
 14134  002FC4                     
 14135                           ;arp.c: 358: UARTTransmitText("ARP: IPv4 address already in use!\n\r");
 14136  002FC4  0EBA               	movlw	low STR_70
 14137  002FC6  0100               	movlb	0	; () banked
 14138  002FC8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14139  002FCA  0E7C               	movlw	high STR_70
 14140  002FCC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14141  002FCE  ECB4  F021         	call	_UARTTransmitText	;wreg free
 14142                           
 14143                           ;arp.c: 359: break;
 14144  002FD2  D027               	goto	l1001
 14145  002FD4                     
 14146                           ;arp.c: 361: UARTTransmitText("ARP: Nobody answered.\n\r");
 14147  002FD4  0EF7               	movlw	low STR_71
 14148  002FD6  0100               	movlb	0	; () banked
 14149  002FD8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14150  002FDA  0E7D               	movlw	high STR_71
 14151  002FDC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14152  002FDE  ECB4  F021         	call	_UARTTransmitText	;wreg free
 14153                           
 14154                           ;arp.c: 362: fAnnounce = 1;
 14155  002FE2  824F               	bsf	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14156                           
 14157                           ;arp.c: 365: break;
 14158                           
 14159                           ;arp.c: 364: case ERROR_ARP_WAITING:
 14160                           
 14161                           ;arp.c: 363: break;
 14162  002FE4  D01E               	goto	l1001
 14163  002FE6                     
 14164                           ;arp.c: 367: UARTTransmitText("ARP: An unknown error occured.\n\r");
 14165  002FE6  0E23               	movlw	low STR_72
 14166  002FE8  0100               	movlb	0	; () banked
 14167  002FEA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14168  002FEC  0E7D               	movlw	high STR_72
 14169  002FEE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14170  002FF0  ECB4  F021         	call	_UARTTransmitText	;wreg free
 14171                           
 14172                           ;arp.c: 368: }
 14173  002FF4  D016               	goto	l1001
 14174  002FF6                     l999:
 14175  002FF6  EE21  F0EE         	lfsr	2,arp_background@err+1
 14176  002FFA  CFDE F14C          	movff	postinc2,??_arp_background
 14177  002FFE  CFDD F14D          	movff	postdec2,??_arp_background+1
 14178                           
 14179                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14180                           ; Switch size 1, requested type "space"
 14181                           ; Number of cases is 1, Range of values is 1 to 1
 14182                           ; switch strategies available:
 14183                           ; Name         Instructions Cycles
 14184                           ; simple_byte            4     3 (average)
 14185                           ;	Chosen strategy is simple_byte
 14186  003002  0101               	movlb	1	; () banked
 14187  003004  514D               	movf	(??_arp_background+1)& (0+255),w,b
 14188  003006  0A01               	xorlw	1	; case 1
 14189  003008  A4D8               	btfss	status,2,c
 14190  00300A  D7ED               	goto	l1004
 14191                           
 14192                           ; BSR set to: 1
 14193                           ; Switch size 1, requested type "space"
 14194                           ; Number of cases is 3, Range of values is 145 to 148
 14195                           ; switch strategies available:
 14196                           ; Name         Instructions Cycles
 14197                           ; simple_byte           10     6 (average)
 14198                           ;	Chosen strategy is simple_byte
 14199  00300C  514C               	movf	??_arp_background& (0+255),w,b
 14200  00300E  0A91               	xorlw	145	; case 145
 14201  003010  B4D8               	btfsc	status,2,c
 14202  003012  D007               	goto	l1001
 14203  003014  0A03               	xorlw	3	; case 146
 14204  003016  B4D8               	btfsc	status,2,c
 14205  003018  D7DD               	goto	l1002
 14206  00301A  0A06               	xorlw	6	; case 148
 14207  00301C  B4D8               	btfsc	status,2,c
 14208  00301E  D7D2               	goto	l1000
 14209  003020  D7E2               	goto	l1004
 14210  003022                     l1001:
 14211                           
 14212                           ;arp.c: 369: }
 14213                           ;arp.c: 370: if (fAnnounce) {
 14214                           
 14215                           ; BSR set to: 1
 14216  003022  A24F               	btfss	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14217  003024  0012               	return	
 14218                           
 14219                           ;arp.c: 371: errAnnounce = arp_gratuitous(ipPreliminary);
 14220  003026  C14E  F0FC         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 14221  00302A  C14F  F0FD         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 14222  00302E  C150  F0FE         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 14223  003032  C151  F0FF         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 14224  003036  ECD5  F012         	call	_arp_gratuitous	;wreg free
 14225  00303A  C0FC  F152         	movff	?_arp_gratuitous,arp_background@errAnnounce
 14226  00303E  C0FD  F153         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 14227  003042  C0FE  F154         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 14228                           
 14229                           ;arp.c: 372: if (errAnnounce.module == ERROR_MODULE_ARP &&
 14230                           ;arp.c: 373: errAnnounce.code == (uint16_t)0) {
 14231  003046  0E03               	movlw	3
 14232  003048  0101               	movlb	1	; () banked
 14233  00304A  1952               	xorwf	arp_background@errAnnounce& (0+255),w,b
 14234  00304C  A4D8               	btfss	status,2,c
 14235  00304E  0012               	return	
 14236                           
 14237                           ; BSR set to: 1
 14238  003050  5153               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 14239  003052  1154               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 14240  003054  A4D8               	btfss	status,2,c
 14241  003056  0012               	return	
 14242                           
 14243                           ; BSR set to: 1
 14244                           ;arp.c: 374: UARTTransmitText("ARP: All Announcements sent.\n\r");
 14245  003058  0E44               	movlw	low STR_73
 14246  00305A  0100               	movlb	0	; () banked
 14247  00305C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 14248  00305E  0E7D               	movlw	high STR_73
 14249  003060  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 14250  003062  ECB4  F021         	call	_UARTTransmitText	;wreg free
 14251                           
 14252                           ;arp.c: 375: fAnnounce = 0;
 14253  003066  924F               	bcf	arp_background@fAnnounce/(0+8),arp_background@fAnnounce& (0+7),c
 14254  003068  0012               	return	
 14255  00306A                     __end_of_arp_background:
 14256                           	opt stack 0
 14257                           tblptru	equ	0xFF8
 14258                           tblptrh	equ	0xFF7
 14259                           tblptrl	equ	0xFF6
 14260                           tablat	equ	0xFF5
 14261                           prodh	equ	0xFF4
 14262                           prodl	equ	0xFF3
 14263                           intcon	equ	0xFF2
 14264                           intcon3	equ	0xFF0
 14265                           indf0	equ	0xFEF
 14266                           postinc0	equ	0xFEE
 14267                           plusw0	equ	0xFEB
 14268                           fsr0h	equ	0xFEA
 14269                           fsr0l	equ	0xFE9
 14270                           wreg	equ	0xFE8
 14271                           indf1	equ	0xFE7
 14272                           postinc1	equ	0xFE6
 14273                           postdec1	equ	0xFE5
 14274                           plusw1	equ	0xFE3
 14275                           fsr1h	equ	0xFE2
 14276                           fsr1l	equ	0xFE1
 14277                           indf2	equ	0xFDF
 14278                           postinc2	equ	0xFDE
 14279                           postdec2	equ	0xFDD
 14280                           plusw2	equ	0xFDB
 14281                           fsr2h	equ	0xFDA
 14282                           fsr2l	equ	0xFD9
 14283                           status	equ	0xFD8
 14284                           
 14285 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 14286 ;; Defined at:
 14287 ;;		line 235 in file "src/stack/protocols/ipv4.c"
 14288 ;; Parameters:    Size  Location     Type
 14289 ;;		None
 14290 ;; Auto vars:     Size  Location     Type
 14291 ;;		None
 14292 ;; Return value:  Size  Location     Type
 14293 ;;                  4    0[BANK0 ] struct ipv4_address
 14294 ;; Registers used:
 14295 ;;		None
 14296 ;; Tracked objects:
 14297 ;;		On entry : 0/0
 14298 ;;		On exit  : 0/0
 14299 ;;		Unchanged: 0/0
 14300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14301 ;;      Params:         0       4       0       0       0       0       0       0       0
 14302 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14303 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14304 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14305 ;;Total ram usage:        4 bytes
 14306 ;; Hardware stack levels used:    1
 14307 ;; Hardware stack levels required when called:    4
 14308 ;; This function calls:
 14309 ;;		Nothing
 14310 ;; This function is called by:
 14311 ;;		_arp_background
 14312 ;; This function uses a non-reentrant model
 14313 ;;
 14314                           
 14315                           	psect	text53
 14316  004C38                     __ptext53:
 14317                           	opt stack 0
 14318  004C38                     _ipv4_getPreliminaryIPSourceAddress:
 14319                           	opt stack 24
 14320                           
 14321                           ;ipv4.c: 236: return ipPreliminarySource;
 14322                           
 14323                           ;incstack = 0
 14324  004C38  C1D7  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 14325  004C3C  C1D8  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 14326  004C40  C1D9  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 14327  004C44  C1DA  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 14328  004C48  0012               	return		;funcret
 14329  004C4A                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 14330                           	opt stack 0
 14331                           tblptru	equ	0xFF8
 14332                           tblptrh	equ	0xFF7
 14333                           tblptrl	equ	0xFF6
 14334                           tablat	equ	0xFF5
 14335                           prodh	equ	0xFF4
 14336                           prodl	equ	0xFF3
 14337                           intcon	equ	0xFF2
 14338                           intcon3	equ	0xFF0
 14339                           indf0	equ	0xFEF
 14340                           postinc0	equ	0xFEE
 14341                           plusw0	equ	0xFEB
 14342                           fsr0h	equ	0xFEA
 14343                           fsr0l	equ	0xFE9
 14344                           wreg	equ	0xFE8
 14345                           indf1	equ	0xFE7
 14346                           postinc1	equ	0xFE6
 14347                           postdec1	equ	0xFE5
 14348                           plusw1	equ	0xFE3
 14349                           fsr1h	equ	0xFE2
 14350                           fsr1l	equ	0xFE1
 14351                           indf2	equ	0xFDF
 14352                           postinc2	equ	0xFDE
 14353                           postdec2	equ	0xFDD
 14354                           plusw2	equ	0xFDB
 14355                           fsr2h	equ	0xFDA
 14356                           fsr2l	equ	0xFD9
 14357                           status	equ	0xFD8
 14358                           
 14359 ;; *************** function _ipv4_SrcAddrChanged *****************
 14360 ;; Defined at:
 14361 ;;		line 291 in file "src/stack/protocols/ipv4.c"
 14362 ;; Parameters:    Size  Location     Type
 14363 ;;  err             2    0[BANK0 ] PTR struct error
 14364 ;;		 -> arp_background@err(3), 
 14365 ;; Auto vars:     Size  Location     Type
 14366 ;;		None
 14367 ;; Return value:  Size  Location     Type
 14368 ;;		None               void
 14369 ;; Registers used:
 14370 ;;		wreg, status,2, status,0
 14371 ;; Tracked objects:
 14372 ;;		On entry : 0/0
 14373 ;;		On exit  : 0/0
 14374 ;;		Unchanged: 0/0
 14375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14376 ;;      Params:         0       2       0       0       0       0       0       0       0
 14377 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14378 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14379 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14380 ;;Total ram usage:        2 bytes
 14381 ;; Hardware stack levels used:    1
 14382 ;; Hardware stack levels required when called:    4
 14383 ;; This function calls:
 14384 ;;		Nothing
 14385 ;; This function is called by:
 14386 ;;		_arp_background
 14387 ;; This function uses a non-reentrant model
 14388 ;;
 14389                           
 14390                           	psect	text54
 14391  004C12                     __ptext54:
 14392                           	opt stack 0
 14393  004C12                     _ipv4_SrcAddrChanged:
 14394                           	opt stack 24
 14395                           
 14396                           ;ipv4.c: 292: arpStatus = err;
 14397                           
 14398                           ;incstack = 0
 14399  004C12  C060  F03C         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 14400  004C16  C061  F03D         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 14401                           
 14402                           ;ipv4.c: 293: return fSrcAddrChanged;
 14403  004C1A  B04F               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 14404  004C1C  D002               	goto	l7539
 14405  004C1E  90D8               	bcf	status,0,c
 14406  004C20  0012               	return	
 14407  004C22                     l7539:
 14408  004C22  80D8               	bsf	status,0,c
 14409  004C24  0012               	return	
 14410  004C26                     __end_of_ipv4_SrcAddrChanged:
 14411                           	opt stack 0
 14412                           tblptru	equ	0xFF8
 14413                           tblptrh	equ	0xFF7
 14414                           tblptrl	equ	0xFF6
 14415                           tablat	equ	0xFF5
 14416                           prodh	equ	0xFF4
 14417                           prodl	equ	0xFF3
 14418                           intcon	equ	0xFF2
 14419                           intcon3	equ	0xFF0
 14420                           indf0	equ	0xFEF
 14421                           postinc0	equ	0xFEE
 14422                           plusw0	equ	0xFEB
 14423                           fsr0h	equ	0xFEA
 14424                           fsr0l	equ	0xFE9
 14425                           wreg	equ	0xFE8
 14426                           indf1	equ	0xFE7
 14427                           postinc1	equ	0xFE6
 14428                           postdec1	equ	0xFE5
 14429                           plusw1	equ	0xFE3
 14430                           fsr1h	equ	0xFE2
 14431                           fsr1l	equ	0xFE1
 14432                           indf2	equ	0xFDF
 14433                           postinc2	equ	0xFDE
 14434                           postdec2	equ	0xFDD
 14435                           plusw2	equ	0xFDB
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440 ;; *************** function _arp_probe *****************
 14441 ;; Defined at:
 14442 ;;		line 245 in file "src/stack/protocols/arp.c"
 14443 ;; Parameters:    Size  Location     Type
 14444 ;;  ipTarget        4  156[BANK0 ] struct ipv4_address
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;  ipSender        4   69[BANK1 ] struct ipv4_address
 14447 ;;  waitingTime     4   65[BANK1 ] unsigned long 
 14448 ;;  timeStart       4   61[BANK1 ] unsigned long 
 14449 ;;  err             3   73[BANK1 ] struct error
 14450 ;;  index           1   60[BANK1 ] unsigned char 
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  3  156[BANK0 ] struct error
 14453 ;; Registers used:
 14454 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14460 ;;      Params:         0       4       0       0       0       0       0       0       0
 14461 ;;      Locals:         0       0      16       0       0       0       0       0       0
 14462 ;;      Temps:          0       0       8       0       0       0       0       0       0
 14463 ;;      Totals:         0       4      24       0       0       0       0       0       0
 14464 ;;Total ram usage:       28 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:   11
 14467 ;; This function calls:
 14468 ;;		___lwmod
 14469 ;;		_arp_checkForEntry
 14470 ;;		_arp_sendRequest
 14471 ;;		_getMillis
 14472 ;;		_ipv4_setToAllZero
 14473 ;;		_rand
 14474 ;; This function is called by:
 14475 ;;		_arp_background
 14476 ;; This function uses a non-reentrant model
 14477 ;;
 14478                           
 14479                           	psect	text55
 14480  001C90                     __ptext55:
 14481                           	opt stack 0
 14482  001C90                     _arp_probe:
 14483                           	opt stack 17
 14484                           
 14485                           ;arp.c: 246: time_t timeStart;
 14486                           ;arp.c: 247: time_t waitingTime;
 14487                           ;arp.c: 248: ipv4_address_t ipSender;
 14488                           ;arp.c: 249: uint8_t static probeCounter = 0;
 14489                           ;arp.c: 250: error_t err;
 14490                           ;arp.c: 252: enum states {
 14491                           ;arp.c: 253: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 14492                           ;arp.c: 254: };
 14493                           ;arp.c: 255: uint8_t static state = PREPARING_PROBE;
 14494                           ;arp.c: 256: uint8_t index;
 14495                           ;arp.c: 257: err.module = ERROR_MODULE_ARP;
 14496                           
 14497                           ;incstack = 0
 14498  001C90  0E03               	movlw	3
 14499  001C92  0101               	movlb	1	; () banked
 14500  001C94  6F49               	movwf	arp_probe@err& (0+255),b
 14501                           
 14502                           ; BSR set to: 1
 14503                           ;arp.c: 259: if (arp_checkForEntry(ipTarget, &index)) {
 14504  001C96  C0FC  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 14505  001C9A  C0FD  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 14506  001C9E  C0FE  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 14507  001CA2  C0FF  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 14508  001CA6  0E3C               	movlw	low arp_probe@index
 14509  001CA8  0100               	movlb	0	; () banked
 14510  001CAA  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 14511  001CAC  0E01               	movlw	high arp_probe@index
 14512  001CAE  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 14513  001CB0  EC46  F01B         	call	_arp_checkForEntry	;wreg free
 14514  001CB4  0900               	iorlw	0
 14515  001CB6  B4D8               	btfsc	status,2,c
 14516  001CB8  D0F5               	goto	l959
 14517                           
 14518                           ;arp.c: 260: state = ARP_ENTRY_FOUND;
 14519  001CBA  0E03               	movlw	3
 14520  001CBC  0101               	movlb	1	; () banked
 14521  001CBE  6FE5               	movwf	arp_probe@state& (0+255),b
 14522                           
 14523                           ; BSR set to: 1
 14524                           ;arp.c: 261: }
 14525                           ;arp.c: 263: switch (state) {
 14526  001CC0  D0F1               	goto	l959
 14527  001CC2                     
 14528                           ; BSR set to: 1
 14529                           ;arp.c: 265: ipv4_setToAllZero(&ipSender);
 14530                           
 14531                           ; BSR set to: 1
 14532  001CC2  0E45               	movlw	low arp_probe@ipSender
 14533  001CC4  0100               	movlb	0	; () banked
 14534  001CC6  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 14535  001CC8  0E01               	movlw	high arp_probe@ipSender
 14536  001CCA  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 14537  001CCC  ECC6  F025         	call	_ipv4_setToAllZero	;wreg free
 14538                           
 14539                           ;arp.c: 266: timeStart = getMillis();
 14540  001CD0  EC25  F026         	call	_getMillis	;wreg free
 14541  001CD4  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 14542  001CD8  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 14543  001CDC  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 14544  001CE0  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 14545                           
 14546                           ;arp.c: 267: waitingTime = rand() % 1000u;
 14547  001CE4  EC89  F021         	call	_rand	;wreg free
 14548  001CE8  C06C  F06E         	movff	?_rand,___lwmod@dividend
 14549  001CEC  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 14550  001CF0  0E03               	movlw	3
 14551  001CF2  0100               	movlb	0	; () banked
 14552  001CF4  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 14553  001CF6  0EE8               	movlw	232
 14554  001CF8  6F70               	movwf	___lwmod@divisor& (0+255),b
 14555  001CFA  EC3E  F023         	call	___lwmod	;wreg free
 14556  001CFE  0100               	movlb	0	; () banked
 14557  001D00  C06E  F141         	movff	?___lwmod,arp_probe@waitingTime
 14558  001D04  C06F  F142         	movff	?___lwmod+1,arp_probe@waitingTime+1
 14559  001D08  0101               	movlb	1	; () banked
 14560  001D0A  6B43               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 14561  001D0C  6B44               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 14562                           
 14563                           ; BSR set to: 1
 14564                           ;arp.c: 268: state = WAITING_TO_SEND;
 14565  001D0E  0E01               	movlw	1
 14566  001D10  6FE5               	movwf	arp_probe@state& (0+255),b
 14567  001D12  D054               	goto	l963
 14568  001D14                     
 14569                           ; BSR set to: 1
 14570                           ;arp.c: 272: if (getMillis() - timeStart >= waitingTime) {
 14571                           
 14572                           ; BSR set to: 1
 14573  001D14  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 14574  001D18  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 14575  001D1C  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 14576  001D20  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 14577  001D24  1F34               	comf	??_arp_probe& (0+255),f,b
 14578  001D26  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 14579  001D28  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 14580  001D2A  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 14581  001D2C  2B34               	incf	??_arp_probe& (0+255),f,b
 14582  001D2E  0E00               	movlw	0
 14583  001D30  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 14584  001D32  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 14585  001D34  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 14586  001D36  EC25  F026         	call	_getMillis	;wreg free
 14587  001D3A  0101               	movlb	1	; () banked
 14588  001D3C  5134               	movf	??_arp_probe& (0+255),w,b
 14589  001D3E  0100               	movlb	0	; () banked
 14590  001D40  2560               	addwf	?_getMillis& (0+255),w,b
 14591  001D42  0101               	movlb	1	; () banked
 14592  001D44  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 14593  001D46  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14594  001D48  0100               	movlb	0	; () banked
 14595  001D4A  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 14596  001D4C  0101               	movlb	1	; () banked
 14597  001D4E  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 14598  001D50  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 14599  001D52  0100               	movlb	0	; () banked
 14600  001D54  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 14601  001D56  0101               	movlb	1	; () banked
 14602  001D58  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 14603  001D5A  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 14604  001D5C  0100               	movlb	0	; () banked
 14605  001D5E  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 14606  001D60  0101               	movlb	1	; () banked
 14607  001D62  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 14608  001D64  5141               	movf	arp_probe@waitingTime& (0+255),w,b
 14609  001D66  5D38               	subwf	(??_arp_probe+4)& (0+255),w,b
 14610  001D68  5142               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 14611  001D6A  5939               	subwfb	(??_arp_probe+5)& (0+255),w,b
 14612  001D6C  5143               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 14613  001D6E  593A               	subwfb	(??_arp_probe+6)& (0+255),w,b
 14614  001D70  5144               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 14615  001D72  593B               	subwfb	(??_arp_probe+7)& (0+255),w,b
 14616  001D74  A0D8               	btfss	status,0,c
 14617  001D76  D022               	goto	l963
 14618                           
 14619                           ; BSR set to: 1
 14620                           ;arp.c: 273: state = SENDING_PROBE;
 14621  001D78  0E02               	movlw	2
 14622  001D7A  6FE5               	movwf	arp_probe@state& (0+255),b
 14623                           
 14624                           ; BSR set to: 1
 14625                           ;arp.c: 275: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 14626  001D7C  0EE8               	movlw	232
 14627  001D7E  6F34               	movwf	??_arp_probe& (0+255),b
 14628  001D80  0E03               	movlw	3
 14629  001D82  6F35               	movwf	(??_arp_probe+1)& (0+255),b
 14630  001D84  EC89  F021         	call	_rand	;wreg free
 14631  001D88  C06C  F06E         	movff	?_rand,___lwmod@dividend
 14632  001D8C  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 14633  001D90  0E03               	movlw	3
 14634  001D92  0100               	movlb	0	; () banked
 14635  001D94  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 14636  001D96  0EE8               	movlw	232
 14637  001D98  6F70               	movwf	___lwmod@divisor& (0+255),b
 14638  001D9A  EC3E  F023         	call	___lwmod	;wreg free
 14639  001D9E  0101               	movlb	1	; () banked
 14640  001DA0  5134               	movf	??_arp_probe& (0+255),w,b
 14641  001DA2  0100               	movlb	0	; () banked
 14642  001DA4  276E               	addwf	?___lwmod& (0+255),f,b
 14643  001DA6  0101               	movlb	1	; () banked
 14644  001DA8  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14645  001DAA  0100               	movlb	0	; () banked
 14646  001DAC  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 14647  001DAE  C06E  F141         	movff	?___lwmod,arp_probe@waitingTime
 14648  001DB2  C06F  F142         	movff	?___lwmod+1,arp_probe@waitingTime+1
 14649  001DB6  0101               	movlb	1	; () banked
 14650  001DB8  6B43               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 14651  001DBA  6B44               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 14652  001DBC                     l963:
 14653                           
 14654                           ; BSR set to: 1
 14655                           ;arp.c: 276: }
 14656                           ;arp.c: 277: err.code = ERROR_ARP_WAITING;
 14657                           
 14658                           ; BSR set to: 1
 14659  001DBC  0E01               	movlw	1
 14660  001DBE  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14661  001DC0  0E91               	movlw	145
 14662  001DC2  D06E               	goto	L8
 14663  001DC4                     
 14664                           ; BSR set to: 1
 14665                           ;arp.c: 280: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 14666                           
 14667                           ; BSR set to: 1
 14668  001DC4  51E6               	movf	arp_probe@probeCounter& (0+255),w,b
 14669  001DC6  B4D8               	btfsc	status,2,c
 14670  001DC8  D032               	goto	u10840
 14671                           
 14672                           ; BSR set to: 1
 14673  001DCA  C13D  F134         	movff	arp_probe@timeStart,??_arp_probe
 14674  001DCE  C13E  F135         	movff	arp_probe@timeStart+1,??_arp_probe+1
 14675  001DD2  C13F  F136         	movff	arp_probe@timeStart+2,??_arp_probe+2
 14676  001DD6  C140  F137         	movff	arp_probe@timeStart+3,??_arp_probe+3
 14677  001DDA  1F34               	comf	??_arp_probe& (0+255),f,b
 14678  001DDC  1F35               	comf	(??_arp_probe+1)& (0+255),f,b
 14679  001DDE  1F36               	comf	(??_arp_probe+2)& (0+255),f,b
 14680  001DE0  1F37               	comf	(??_arp_probe+3)& (0+255),f,b
 14681  001DE2  2B34               	incf	??_arp_probe& (0+255),f,b
 14682  001DE4  0E00               	movlw	0
 14683  001DE6  2335               	addwfc	(??_arp_probe+1)& (0+255),f,b
 14684  001DE8  2336               	addwfc	(??_arp_probe+2)& (0+255),f,b
 14685  001DEA  2337               	addwfc	(??_arp_probe+3)& (0+255),f,b
 14686  001DEC  EC25  F026         	call	_getMillis	;wreg free
 14687  001DF0  0101               	movlb	1	; () banked
 14688  001DF2  5134               	movf	??_arp_probe& (0+255),w,b
 14689  001DF4  0100               	movlb	0	; () banked
 14690  001DF6  2560               	addwf	?_getMillis& (0+255),w,b
 14691  001DF8  0101               	movlb	1	; () banked
 14692  001DFA  6F38               	movwf	(??_arp_probe+4)& (0+255),b
 14693  001DFC  5135               	movf	(??_arp_probe+1)& (0+255),w,b
 14694  001DFE  0100               	movlb	0	; () banked
 14695  001E00  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 14696  001E02  0101               	movlb	1	; () banked
 14697  001E04  6F39               	movwf	(??_arp_probe+5)& (0+255),b
 14698  001E06  5136               	movf	(??_arp_probe+2)& (0+255),w,b
 14699  001E08  0100               	movlb	0	; () banked
 14700  001E0A  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 14701  001E0C  0101               	movlb	1	; () banked
 14702  001E0E  6F3A               	movwf	(??_arp_probe+6)& (0+255),b
 14703  001E10  5137               	movf	(??_arp_probe+3)& (0+255),w,b
 14704  001E12  0100               	movlb	0	; () banked
 14705  001E14  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 14706  001E16  0101               	movlb	1	; () banked
 14707  001E18  6F3B               	movwf	(??_arp_probe+7)& (0+255),b
 14708  001E1A  5138               	movf	(??_arp_probe+4)& (0+255),w,b
 14709  001E1C  5D41               	subwf	arp_probe@waitingTime& (0+255),w,b
 14710  001E1E  5139               	movf	(??_arp_probe+5)& (0+255),w,b
 14711  001E20  5942               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 14712  001E22  513A               	movf	(??_arp_probe+6)& (0+255),w,b
 14713  001E24  5943               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 14714  001E26  513B               	movf	(??_arp_probe+7)& (0+255),w,b
 14715  001E28  5944               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 14716  001E2A  B0D8               	btfsc	status,0,c
 14717  001E2C  D049               	goto	l961
 14718  001E2E                     u10840:
 14719                           
 14720                           ; BSR set to: 1
 14721                           ;arp.c: 281: timeStart = getMillis();
 14722                           
 14723                           ; BSR set to: 1
 14724  001E2E  EC25  F026         	call	_getMillis	;wreg free
 14725  001E32  C060  F13D         	movff	?_getMillis,arp_probe@timeStart
 14726  001E36  C061  F13E         	movff	?_getMillis+1,arp_probe@timeStart+1
 14727  001E3A  C062  F13F         	movff	?_getMillis+2,arp_probe@timeStart+2
 14728  001E3E  C063  F140         	movff	?_getMillis+3,arp_probe@timeStart+3
 14729                           
 14730                           ;arp.c: 283: if (probeCounter < 3u) {
 14731  001E42  0E03               	movlw	3
 14732  001E44  0101               	movlb	1	; () banked
 14733  001E46  61E6               	cpfslt	arp_probe@probeCounter& (0+255),b
 14734  001E48  D012               	goto	l968
 14735                           
 14736                           ; BSR set to: 1
 14737                           ;arp.c: 284: arp_sendRequest(ipSender, ipTarget);
 14738  001E4A  C145  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 14739  001E4E  C146  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 14740  001E52  C147  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 14741  001E56  C148  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 14742  001E5A  C0FC  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 14743  001E5E  C0FD  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 14744  001E62  C0FE  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 14745  001E66  C0FF  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 14746  001E6A  EC9F  F01B         	call	_arp_sendRequest	;wreg free
 14747  001E6E                     l968:
 14748                           
 14749                           ;arp.c: 285: }
 14750                           ;arp.c: 286: if (probeCounter >= 3u) {
 14751  001E6E  0E02               	movlw	2
 14752  001E70  0101               	movlb	1	; () banked
 14753  001E72  65E6               	cpfsgt	arp_probe@probeCounter& (0+255),b
 14754  001E74  D008               	goto	l969
 14755                           
 14756                           ; BSR set to: 1
 14757                           ;arp.c: 287: probeCounter = 0;
 14758  001E76  0E00               	movlw	0
 14759  001E78  6FE6               	movwf	arp_probe@probeCounter& (0+255),b
 14760                           
 14761                           ;arp.c: 288: state = PREPARING_PROBE;
 14762  001E7A  0E00               	movlw	0
 14763  001E7C  6FE5               	movwf	arp_probe@state& (0+255),b
 14764                           
 14765                           ;arp.c: 289: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 14766  001E7E  0E01               	movlw	1
 14767  001E80  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14768  001E82  0E92               	movlw	146
 14769  001E84  D00D               	goto	L8
 14770  001E86                     l969:
 14771                           
 14772                           ; BSR set to: 1
 14773                           ;arp.c: 291: err.code = ERROR_ARP_WAITING;
 14774                           
 14775                           ; BSR set to: 1
 14776  001E86  0E01               	movlw	1
 14777  001E88  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14778  001E8A  0E91               	movlw	145
 14779  001E8C  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 14780                           
 14781                           ; BSR set to: 1
 14782                           ;arp.c: 292: probeCounter++;
 14783  001E8E  2BE6               	incf	arp_probe@probeCounter& (0+255),f,b
 14784                           
 14785                           ; BSR set to: 1
 14786                           ;arp.c: 293: }
 14787                           ;arp.c: 294: }
 14788                           ;arp.c: 295: break;
 14789                           
 14790                           ; BSR set to: 1
 14791  001E90  D017               	goto	l961
 14792  001E92                     
 14793                           ; BSR set to: 1
 14794                           ;arp.c: 297: probeCounter = 0;
 14795                           
 14796                           ; BSR set to: 1
 14797  001E92  0E00               	movlw	0
 14798  001E94  6FE6               	movwf	arp_probe@probeCounter& (0+255),b
 14799                           
 14800                           ;arp.c: 298: state = PREPARING_PROBE;
 14801  001E96  0E00               	movlw	0
 14802  001E98  6FE5               	movwf	arp_probe@state& (0+255),b
 14803                           
 14804                           ;arp.c: 299: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 14805  001E9A  0E01               	movlw	1
 14806  001E9C  6F4B               	movwf	(arp_probe@err+2)& (0+255),b
 14807  001E9E  0E94               	movlw	148
 14808  001EA0                     L8:
 14809  001EA0  6F4A               	movwf	(arp_probe@err+1)& (0+255),b
 14810                           
 14811                           ;arp.c: 300: }
 14812  001EA2  D00E               	goto	l961
 14813  001EA4                     l959:
 14814                           
 14815                           ; BSR set to: 1
 14816  001EA4  0101               	movlb	1	; () banked
 14817  001EA6  51E5               	movf	arp_probe@state& (0+255),w,b
 14818                           
 14819                           ; Switch size 1, requested type "space"
 14820                           ; Number of cases is 4, Range of values is 0 to 3
 14821                           ; switch strategies available:
 14822                           ; Name         Instructions Cycles
 14823                           ; simple_byte           13     7 (average)
 14824                           ;	Chosen strategy is simple_byte
 14825  001EA8  0A00               	xorlw	0	; case 0
 14826  001EAA  B4D8               	btfsc	status,2,c
 14827  001EAC  D70A               	goto	l960
 14828  001EAE  0A01               	xorlw	1	; case 1
 14829  001EB0  B4D8               	btfsc	status,2,c
 14830  001EB2  D730               	goto	l962
 14831  001EB4  0A03               	xorlw	3	; case 2
 14832  001EB6  B4D8               	btfsc	status,2,c
 14833  001EB8  D785               	goto	l964
 14834  001EBA  0A01               	xorlw	1	; case 3
 14835  001EBC  B4D8               	btfsc	status,2,c
 14836  001EBE  D7E9               	goto	l971
 14837  001EC0                     l961:
 14838                           
 14839                           ; BSR set to: 1
 14840                           ;arp.c: 301: return err;
 14841  001EC0  C149  F0FC         	movff	arp_probe@err,?_arp_probe
 14842  001EC4  C14A  F0FD         	movff	arp_probe@err+1,?_arp_probe+1
 14843  001EC8  C14B  F0FE         	movff	arp_probe@err+2,?_arp_probe+2
 14844                           
 14845                           ; BSR set to: 1
 14846  001ECC  0012               	return		;funcret
 14847  001ECE                     __end_of_arp_probe:
 14848                           	opt stack 0
 14849                           tblptru	equ	0xFF8
 14850                           tblptrh	equ	0xFF7
 14851                           tblptrl	equ	0xFF6
 14852                           tablat	equ	0xFF5
 14853                           prodh	equ	0xFF4
 14854                           prodl	equ	0xFF3
 14855                           intcon	equ	0xFF2
 14856                           intcon3	equ	0xFF0
 14857                           indf0	equ	0xFEF
 14858                           postinc0	equ	0xFEE
 14859                           plusw0	equ	0xFEB
 14860                           fsr0h	equ	0xFEA
 14861                           fsr0l	equ	0xFE9
 14862                           wreg	equ	0xFE8
 14863                           indf1	equ	0xFE7
 14864                           postinc1	equ	0xFE6
 14865                           postdec1	equ	0xFE5
 14866                           plusw1	equ	0xFE3
 14867                           fsr1h	equ	0xFE2
 14868                           fsr1l	equ	0xFE1
 14869                           indf2	equ	0xFDF
 14870                           postinc2	equ	0xFDE
 14871                           postdec2	equ	0xFDD
 14872                           plusw2	equ	0xFDB
 14873                           fsr2h	equ	0xFDA
 14874                           fsr2l	equ	0xFD9
 14875                           status	equ	0xFD8
 14876                           
 14877 ;; *************** function _rand *****************
 14878 ;; Defined at:
 14879 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 14880 ;; Parameters:    Size  Location     Type
 14881 ;;		None
 14882 ;; Auto vars:     Size  Location     Type
 14883 ;;		None
 14884 ;; Return value:  Size  Location     Type
 14885 ;;                  2   12[BANK0 ] int 
 14886 ;; Registers used:
 14887 ;;		wreg, status,2, status,0, cstack
 14888 ;; Tracked objects:
 14889 ;;		On entry : 0/0
 14890 ;;		On exit  : 0/0
 14891 ;;		Unchanged: 0/0
 14892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14893 ;;      Params:         0       2       0       0       0       0       0       0       0
 14894 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14895 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14896 ;;      Totals:         0       2       0       0       0       0       0       0       0
 14897 ;;Total ram usage:        2 bytes
 14898 ;; Hardware stack levels used:    1
 14899 ;; Hardware stack levels required when called:    5
 14900 ;; This function calls:
 14901 ;;		___lmul
 14902 ;; This function is called by:
 14903 ;;		_arp_probe
 14904 ;; This function uses a non-reentrant model
 14905 ;;
 14906                           
 14907                           	psect	text56
 14908  004312                     __ptext56:
 14909                           	opt stack 0
 14910  004312                     _rand:
 14911                           	opt stack 22
 14912                           
 14913                           ; BSR set to: 1
 14914                           ;incstack = 0
 14915  004312  C049  F060         	movff	_randx,___lmul@multiplier
 14916  004316  C04A  F061         	movff	_randx+1,___lmul@multiplier+1
 14917  00431A  C04B  F062         	movff	_randx+2,___lmul@multiplier+2
 14918  00431E  C04C  F063         	movff	_randx+3,___lmul@multiplier+3
 14919  004322  0E6D               	movlw	109
 14920  004324  0100               	movlb	0	; () banked
 14921  004326  6F64               	movwf	___lmul@multiplicand& (0+255),b
 14922  004328  0E4E               	movlw	78
 14923  00432A  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 14924  00432C  0EC6               	movlw	198
 14925  00432E  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 14926  004330  0E41               	movlw	65
 14927  004332  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 14928  004334  EC5D  F021         	call	___lmul	;wreg free
 14929  004338  C060  F049         	movff	?___lmul,_randx
 14930  00433C  C061  F04A         	movff	?___lmul+1,_randx+1
 14931  004340  C062  F04B         	movff	?___lmul+2,_randx+2
 14932  004344  C063  F04C         	movff	?___lmul+3,_randx+3
 14933  004348  0E39               	movlw	57
 14934  00434A  2649               	addwf	_randx,f,c
 14935  00434C  0E30               	movlw	48
 14936  00434E  224A               	addwfc	_randx+1,f,c
 14937  004350  0E00               	movlw	0
 14938  004352  224B               	addwfc	_randx+2,f,c
 14939  004354  0E00               	movlw	0
 14940  004356  224C               	addwfc	_randx+3,f,c
 14941  004358  0EFF               	movlw	255
 14942  00435A  144B               	andwf	_randx+2,w,c
 14943  00435C  0100               	movlb	0	; () banked
 14944  00435E  6F6C               	movwf	?_rand& (0+255),b
 14945  004360  0E7F               	movlw	127
 14946  004362  144C               	andwf	_randx+3,w,c
 14947  004364  6F6D               	movwf	(?_rand+1)& (0+255),b
 14948  004366  0012               	return	
 14949  004368                     __end_of_rand:
 14950                           	opt stack 0
 14951                           tblptru	equ	0xFF8
 14952                           tblptrh	equ	0xFF7
 14953                           tblptrl	equ	0xFF6
 14954                           tablat	equ	0xFF5
 14955                           prodh	equ	0xFF4
 14956                           prodl	equ	0xFF3
 14957                           intcon	equ	0xFF2
 14958                           intcon3	equ	0xFF0
 14959                           indf0	equ	0xFEF
 14960                           postinc0	equ	0xFEE
 14961                           plusw0	equ	0xFEB
 14962                           fsr0h	equ	0xFEA
 14963                           fsr0l	equ	0xFE9
 14964                           wreg	equ	0xFE8
 14965                           indf1	equ	0xFE7
 14966                           postinc1	equ	0xFE6
 14967                           postdec1	equ	0xFE5
 14968                           plusw1	equ	0xFE3
 14969                           fsr1h	equ	0xFE2
 14970                           fsr1l	equ	0xFE1
 14971                           indf2	equ	0xFDF
 14972                           postinc2	equ	0xFDE
 14973                           postdec2	equ	0xFDD
 14974                           plusw2	equ	0xFDB
 14975                           fsr2h	equ	0xFDA
 14976                           fsr2l	equ	0xFD9
 14977                           status	equ	0xFD8
 14978                           
 14979 ;; *************** function ___lmul *****************
 14980 ;; Defined at:
 14981 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 14982 ;; Parameters:    Size  Location     Type
 14983 ;;  multiplier      4    0[BANK0 ] unsigned long 
 14984 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;  product         4    8[BANK0 ] unsigned long 
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  4    0[BANK0 ] unsigned long 
 14989 ;; Registers used:
 14990 ;;		wreg, status,2, status,0
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14996 ;;      Params:         0       8       0       0       0       0       0       0       0
 14997 ;;      Locals:         0       4       0       0       0       0       0       0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14999 ;;      Totals:         0      12       0       0       0       0       0       0       0
 15000 ;;Total ram usage:       12 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; Hardware stack levels required when called:    4
 15003 ;; This function calls:
 15004 ;;		Nothing
 15005 ;; This function is called by:
 15006 ;;		_rand
 15007 ;; This function uses a non-reentrant model
 15008 ;;
 15009                           
 15010                           	psect	text57
 15011  0042BA                     __ptext57:
 15012                           	opt stack 0
 15013  0042BA                     ___lmul:
 15014                           	opt stack 22
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;incstack = 0
 15018  0042BA  0E00               	movlw	0
 15019  0042BC  0100               	movlb	0	; () banked
 15020  0042BE  6F68               	movwf	___lmul@product& (0+255),b
 15021  0042C0  0E00               	movlw	0
 15022  0042C2  6F69               	movwf	(___lmul@product+1)& (0+255),b
 15023  0042C4  0E00               	movlw	0
 15024  0042C6  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 15025  0042C8  0E00               	movlw	0
 15026  0042CA  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 15027  0042CC                     
 15028                           ; BSR set to: 0
 15029                           
 15030                           ; BSR set to: 0
 15031  0042CC  A160               	btfss	___lmul@multiplier& (0+255),0,b
 15032  0042CE  D008               	goto	l1160
 15033                           
 15034                           ; BSR set to: 0
 15035  0042D0  5164               	movf	___lmul@multiplicand& (0+255),w,b
 15036  0042D2  2768               	addwf	___lmul@product& (0+255),f,b
 15037  0042D4  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 15038  0042D6  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 15039  0042D8  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 15040  0042DA  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 15041  0042DC  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 15042  0042DE  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 15043  0042E0                     l1160:
 15044                           
 15045                           ; BSR set to: 0
 15046                           
 15047                           ; BSR set to: 0
 15048  0042E0  90D8               	bcf	status,0,c
 15049  0042E2  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 15050  0042E4  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 15051  0042E6  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 15052  0042E8  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 15053                           
 15054                           ; BSR set to: 0
 15055  0042EA  90D8               	bcf	status,0,c
 15056  0042EC  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 15057  0042EE  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 15058  0042F0  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 15059  0042F2  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 15060  0042F4  5160               	movf	___lmul@multiplier& (0+255),w,b
 15061  0042F6  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 15062  0042F8  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 15063  0042FA  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 15064  0042FC  A4D8               	btfss	status,2,c
 15065  0042FE  D7E6               	goto	l1159
 15066                           
 15067                           ; BSR set to: 0
 15068  004300  C068  F060         	movff	___lmul@product,?___lmul
 15069  004304  C069  F061         	movff	___lmul@product+1,?___lmul+1
 15070  004308  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 15071  00430C  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 15072                           
 15073                           ; BSR set to: 0
 15074  004310  0012               	return		;funcret
 15075  004312                     __end_of___lmul:
 15076                           	opt stack 0
 15077                           tblptru	equ	0xFF8
 15078                           tblptrh	equ	0xFF7
 15079                           tblptrl	equ	0xFF6
 15080                           tablat	equ	0xFF5
 15081                           prodh	equ	0xFF4
 15082                           prodl	equ	0xFF3
 15083                           intcon	equ	0xFF2
 15084                           intcon3	equ	0xFF0
 15085                           indf0	equ	0xFEF
 15086                           postinc0	equ	0xFEE
 15087                           plusw0	equ	0xFEB
 15088                           fsr0h	equ	0xFEA
 15089                           fsr0l	equ	0xFE9
 15090                           wreg	equ	0xFE8
 15091                           indf1	equ	0xFE7
 15092                           postinc1	equ	0xFE6
 15093                           postdec1	equ	0xFE5
 15094                           plusw1	equ	0xFE3
 15095                           fsr1h	equ	0xFE2
 15096                           fsr1l	equ	0xFE1
 15097                           indf2	equ	0xFDF
 15098                           postinc2	equ	0xFDE
 15099                           postdec2	equ	0xFDD
 15100                           plusw2	equ	0xFDB
 15101                           fsr2h	equ	0xFDA
 15102                           fsr2l	equ	0xFD9
 15103                           status	equ	0xFD8
 15104                           
 15105 ;; *************** function _ipv4_setToAllZero *****************
 15106 ;; Defined at:
 15107 ;;		line 314 in file "src/stack/protocols/ipv4.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 15110 ;;		 -> arp_init@ip(4), arp_probe@ipSender(4), 
 15111 ;; Auto vars:     Size  Location     Type
 15112 ;;  i               1    2[BANK0 ] unsigned char 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  1    wreg      void 
 15115 ;; Registers used:
 15116 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15122 ;;      Params:         0       2       0       0       0       0       0       0       0
 15123 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15124 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15125 ;;      Totals:         0       3       0       0       0       0       0       0       0
 15126 ;;Total ram usage:        3 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    4
 15129 ;; This function calls:
 15130 ;;		Nothing
 15131 ;; This function is called by:
 15132 ;;		_arp_probe
 15133 ;;		_arp_init
 15134 ;; This function uses a non-reentrant model
 15135 ;;
 15136                           
 15137                           	psect	text58
 15138  004B8C                     __ptext58:
 15139                           	opt stack 0
 15140  004B8C                     _ipv4_setToAllZero:
 15141                           	opt stack 24
 15142                           
 15143                           ;ipv4.c: 315: for (uint8_t i = 0; i < 4; i++) {
 15144                           
 15145                           ; BSR set to: 0
 15146                           ;incstack = 0
 15147  004B8C  0E00               	movlw	0
 15148  004B8E  0100               	movlb	0	; () banked
 15149  004B90  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 15150  004B92                     l8845:
 15151                           
 15152                           ; BSR set to: 0
 15153  004B92  0E03               	movlw	3
 15154  004B94  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 15155  004B96  D001               	goto	l1134
 15156  004B98  0012               	return	
 15157  004B9A                     l1134:
 15158                           
 15159                           ; BSR set to: 0
 15160                           ;ipv4.c: 316: ip->address[0] = 0x00;
 15161                           
 15162                           ; BSR set to: 0
 15163  004B9A  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 15164  004B9E  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 15165  004BA2  0E00               	movlw	0
 15166  004BA4  6EDF               	movwf	indf2,c
 15167                           
 15168                           ; BSR set to: 0
 15169  004BA6  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 15170  004BA8  D7F4               	goto	l8845
 15171  004BAA                     __end_of_ipv4_setToAllZero:
 15172                           	opt stack 0
 15173                           tblptru	equ	0xFF8
 15174                           tblptrh	equ	0xFF7
 15175                           tblptrl	equ	0xFF6
 15176                           tablat	equ	0xFF5
 15177                           prodh	equ	0xFF4
 15178                           prodl	equ	0xFF3
 15179                           intcon	equ	0xFF2
 15180                           intcon3	equ	0xFF0
 15181                           indf0	equ	0xFEF
 15182                           postinc0	equ	0xFEE
 15183                           plusw0	equ	0xFEB
 15184                           fsr0h	equ	0xFEA
 15185                           fsr0l	equ	0xFE9
 15186                           wreg	equ	0xFE8
 15187                           indf1	equ	0xFE7
 15188                           postinc1	equ	0xFE6
 15189                           postdec1	equ	0xFE5
 15190                           plusw1	equ	0xFE3
 15191                           fsr1h	equ	0xFE2
 15192                           fsr1l	equ	0xFE1
 15193                           indf2	equ	0xFDF
 15194                           postinc2	equ	0xFDE
 15195                           postdec2	equ	0xFDD
 15196                           plusw2	equ	0xFDB
 15197                           fsr2h	equ	0xFDA
 15198                           fsr2l	equ	0xFD9
 15199                           status	equ	0xFD8
 15200                           
 15201 ;; *************** function _arp_checkForEntry *****************
 15202 ;; Defined at:
 15203 ;;		line 383 in file "src/stack/protocols/arp.c"
 15204 ;; Parameters:    Size  Location     Type
 15205 ;;  ip              4    7[BANK0 ] struct ipv4_address
 15206 ;;  index           2   11[BANK0 ] PTR unsigned char 
 15207 ;;		 -> arp_probe@index(1), 
 15208 ;; Auto vars:     Size  Location     Type
 15209 ;;  i               1   21[BANK0 ] unsigned char 
 15210 ;; Return value:  Size  Location     Type
 15211 ;;                  1    wreg      unsigned char 
 15212 ;; Registers used:
 15213 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15214 ;; Tracked objects:
 15215 ;;		On entry : 0/0
 15216 ;;		On exit  : 0/0
 15217 ;;		Unchanged: 0/0
 15218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15219 ;;      Params:         0       6       0       0       0       0       0       0       0
 15220 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15221 ;;      Temps:          0       8       0       0       0       0       0       0       0
 15222 ;;      Totals:         0      15       0       0       0       0       0       0       0
 15223 ;;Total ram usage:       15 bytes
 15224 ;; Hardware stack levels used:    1
 15225 ;; Hardware stack levels required when called:    5
 15226 ;; This function calls:
 15227 ;;		_getMillis
 15228 ;;		_ipv4_cmp
 15229 ;; This function is called by:
 15230 ;;		_arp_probe
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           	psect	text59
 15235  00368C                     __ptext59:
 15236                           	opt stack 0
 15237  00368C                     _arp_checkForEntry:
 15238                           	opt stack 22
 15239                           
 15240                           ;arp.c: 384: for (uint8_t i = 0; i < 8u; i++) {
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;incstack = 0
 15244  00368C  0E00               	movlw	0
 15245  00368E  0100               	movlb	0	; () banked
 15246  003690  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 15247  003692                     l8821:
 15248                           
 15249                           ; BSR set to: 0
 15250  003692  0E07               	movlw	7
 15251  003694  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 15252  003696  D001               	goto	l1010
 15253  003698  D050               	goto	u10490
 15254  00369A                     l1010:
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;arp.c: 385: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 15258                           
 15259                           ; BSR set to: 0
 15260  00369A  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 15261  00369C  0D0E               	mullw	14
 15262  00369E  0E0F               	movlw	low _arp_table
 15263  0036A0  24F3               	addwf	prodl,w,c
 15264  0036A2  6F60               	movwf	ipv4_cmp@a& (0+255),b
 15265  0036A4  0E02               	movlw	high _arp_table
 15266  0036A6  20F4               	addwfc	prodh,w,c
 15267  0036A8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 15268  0036AA  0E67               	movlw	low arp_checkForEntry@ip
 15269  0036AC  6F62               	movwf	ipv4_cmp@b& (0+255),b
 15270  0036AE  0E00               	movlw	high arp_checkForEntry@ip
 15271  0036B0  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 15272  0036B2  EC81  F023         	call	_ipv4_cmp	;wreg free
 15273  0036B6  0100               	movlb	0	; () banked
 15274  0036B8  A0D8               	btfss	status,0,c
 15275  0036BA  D03D               	goto	l1013
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;arp.c: 386: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 15279  0036BC  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 15280  0036BE  0D0E               	mullw	14
 15281  0036C0  0E0A               	movlw	10
 15282  0036C2  26F3               	addwf	prodl,f,c
 15283  0036C4  0E00               	movlw	0
 15284  0036C6  22F4               	addwfc	prodh,f,c
 15285  0036C8  0E0F               	movlw	low _arp_table
 15286  0036CA  24F3               	addwf	prodl,w,c
 15287  0036CC  6ED9               	movwf	fsr2l,c
 15288  0036CE  0E02               	movlw	high _arp_table
 15289  0036D0  20F4               	addwfc	prodh,w,c
 15290  0036D2  6EDA               	movwf	fsr2h,c
 15291  0036D4  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 15292  0036D8  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 15293  0036DC  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 15294  0036E0  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 15295  0036E4  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 15296  0036E6  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 15297  0036E8  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 15298  0036EA  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 15299  0036EC  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 15300  0036EE  0E00               	movlw	0
 15301  0036F0  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 15302  0036F2  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 15303  0036F4  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 15304  0036F6  EC25  F026         	call	_getMillis	;wreg free
 15305  0036FA  0100               	movlb	0	; () banked
 15306  0036FC  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 15307  0036FE  2560               	addwf	?_getMillis& (0+255),w,b
 15308  003700  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 15309  003702  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 15310  003704  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15311  003706  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 15312  003708  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 15313  00370A  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15314  00370C  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 15315  00370E  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 15316  003710  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15317  003712  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 15318  003714  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 15319  003716  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 15320  003718  E10E               	bnz	l8835
 15321  00371A  0E30               	movlw	48
 15322  00371C  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 15323  00371E  0E75               	movlw	117
 15324  003720  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 15325  003722  B0D8               	btfsc	status,0,c
 15326  003724  D008               	goto	l1013
 15327                           
 15328                           ; BSR set to: 0
 15329                           ;arp.c: 388: *index = i;
 15330  003726  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 15331  00372A  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 15332  00372E  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 15333                           
 15334                           ; BSR set to: 0
 15335                           ;arp.c: 390: return 1;
 15336  003732  0E01               	movlw	1
 15337                           
 15338                           ; BSR set to: 0
 15339  003734  0012               	return	
 15340  003736                     l1013:
 15341  003736                     l8835:
 15342                           
 15343                           ; BSR set to: 0
 15344  003736  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 15345  003738  D7AC               	goto	l8821
 15346  00373A                     u10490:
 15347                           
 15348                           ; BSR set to: 0
 15349                           ;arp.c: 391: }
 15350                           ;arp.c: 392: }
 15351                           ;arp.c: 393: }
 15352                           ;arp.c: 394: return 0;
 15353                           
 15354                           ; BSR set to: 0
 15355  00373A  0E00               	movlw	0
 15356  00373C  0012               	return	
 15357  00373E                     __end_of_arp_checkForEntry:
 15358                           	opt stack 0
 15359                           tblptru	equ	0xFF8
 15360                           tblptrh	equ	0xFF7
 15361                           tblptrl	equ	0xFF6
 15362                           tablat	equ	0xFF5
 15363                           prodh	equ	0xFF4
 15364                           prodl	equ	0xFF3
 15365                           intcon	equ	0xFF2
 15366                           intcon3	equ	0xFF0
 15367                           indf0	equ	0xFEF
 15368                           postinc0	equ	0xFEE
 15369                           plusw0	equ	0xFEB
 15370                           fsr0h	equ	0xFEA
 15371                           fsr0l	equ	0xFE9
 15372                           wreg	equ	0xFE8
 15373                           indf1	equ	0xFE7
 15374                           postinc1	equ	0xFE6
 15375                           postdec1	equ	0xFE5
 15376                           plusw1	equ	0xFE3
 15377                           fsr1h	equ	0xFE2
 15378                           fsr1l	equ	0xFE1
 15379                           indf2	equ	0xFDF
 15380                           postinc2	equ	0xFDE
 15381                           postdec2	equ	0xFDD
 15382                           plusw2	equ	0xFDB
 15383                           fsr2h	equ	0xFDA
 15384                           fsr2l	equ	0xFD9
 15385                           status	equ	0xFD8
 15386                           
 15387 ;; *************** function _ipv4_cmp *****************
 15388 ;; Defined at:
 15389 ;;		line 298 in file "src/stack/protocols/ipv4.c"
 15390 ;; Parameters:    Size  Location     Type
 15391 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 15392 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 15393 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 15394 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 15395 ;; Auto vars:     Size  Location     Type
 15396 ;;  i               1    6[BANK0 ] unsigned char 
 15397 ;; Return value:  Size  Location     Type
 15398 ;;		None               void
 15399 ;; Registers used:
 15400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15401 ;; Tracked objects:
 15402 ;;		On entry : 0/0
 15403 ;;		On exit  : 0/0
 15404 ;;		Unchanged: 0/0
 15405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15406 ;;      Params:         0       4       0       0       0       0       0       0       0
 15407 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15408 ;;      Temps:          0       2       0       0       0       0       0       0       0
 15409 ;;      Totals:         0       7       0       0       0       0       0       0       0
 15410 ;;Total ram usage:        7 bytes
 15411 ;; Hardware stack levels used:    1
 15412 ;; Hardware stack levels required when called:    4
 15413 ;; This function calls:
 15414 ;;		Nothing
 15415 ;; This function is called by:
 15416 ;;		_arp_parseFromRXBuffer
 15417 ;;		_arp_sendReply
 15418 ;;		_arp_checkForEntry
 15419 ;; This function uses a non-reentrant model
 15420 ;;
 15421                           
 15422                           	psect	text60
 15423  004702                     __ptext60:
 15424                           	opt stack 0
 15425  004702                     _ipv4_cmp:
 15426                           	opt stack 22
 15427                           
 15428                           ;ipv4.c: 299: for (uint8_t i = 0; i < 4; i++) {
 15429                           
 15430                           ; BSR set to: 0
 15431                           ;incstack = 0
 15432  004702  0E00               	movlw	0
 15433  004704  0100               	movlb	0	; () banked
 15434  004706  6F66               	movwf	ipv4_cmp@i& (0+255),b
 15435  004708                     l8461:
 15436                           
 15437                           ; BSR set to: 0
 15438  004708  0E03               	movlw	3
 15439  00470A  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 15440  00470C  D001               	goto	l1122
 15441  00470E  D018               	goto	u9480
 15442  004710                     l1122:
 15443                           
 15444                           ; BSR set to: 0
 15445                           ;ipv4.c: 300: if (a->address[i] != b->address[i])
 15446                           
 15447                           ; BSR set to: 0
 15448  004710  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15449  004712  0D01               	mullw	1
 15450  004714  50F3               	movf	prodl,w,c
 15451  004716  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 15452  004718  6ED9               	movwf	fsr2l,c
 15453  00471A  50F4               	movf	prodh,w,c
 15454  00471C  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 15455  00471E  6EDA               	movwf	fsr2h,c
 15456  004720  5166               	movf	ipv4_cmp@i& (0+255),w,b
 15457  004722  0D01               	mullw	1
 15458  004724  50F3               	movf	prodl,w,c
 15459  004726  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 15460  004728  6EE1               	movwf	fsr1l,c
 15461  00472A  50F4               	movf	prodh,w,c
 15462  00472C  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 15463  00472E  6EE2               	movwf	fsr1h,c
 15464  004730  50DE               	movf	postinc2,w,c
 15465  004732  18E6               	xorwf	postinc1,w,c
 15466  004734  B4D8               	btfsc	status,2,c
 15467  004736  D002               	goto	l1124
 15468                           
 15469                           ; BSR set to: 0
 15470                           ;ipv4.c: 301: return 0;
 15471  004738  90D8               	bcf	status,0,c
 15472                           
 15473                           ; BSR set to: 0
 15474  00473A  0012               	return	
 15475  00473C                     l1124:
 15476                           
 15477                           ; BSR set to: 0
 15478                           
 15479                           ; BSR set to: 0
 15480  00473C  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 15481  00473E  D7E4               	goto	l8461
 15482  004740                     u9480:
 15483                           
 15484                           ; BSR set to: 0
 15485                           ;ipv4.c: 302: }
 15486                           ;ipv4.c: 303: return 1;
 15487                           
 15488                           ; BSR set to: 0
 15489  004740  80D8               	bsf	status,0,c
 15490  004742  0012               	return	
 15491  004744                     __end_of_ipv4_cmp:
 15492                           	opt stack 0
 15493                           tblptru	equ	0xFF8
 15494                           tblptrh	equ	0xFF7
 15495                           tblptrl	equ	0xFF6
 15496                           tablat	equ	0xFF5
 15497                           prodh	equ	0xFF4
 15498                           prodl	equ	0xFF3
 15499                           intcon	equ	0xFF2
 15500                           intcon3	equ	0xFF0
 15501                           indf0	equ	0xFEF
 15502                           postinc0	equ	0xFEE
 15503                           plusw0	equ	0xFEB
 15504                           fsr0h	equ	0xFEA
 15505                           fsr0l	equ	0xFE9
 15506                           wreg	equ	0xFE8
 15507                           indf1	equ	0xFE7
 15508                           postinc1	equ	0xFE6
 15509                           postdec1	equ	0xFE5
 15510                           plusw1	equ	0xFE3
 15511                           fsr1h	equ	0xFE2
 15512                           fsr1l	equ	0xFE1
 15513                           indf2	equ	0xFDF
 15514                           postinc2	equ	0xFDE
 15515                           postdec2	equ	0xFDD
 15516                           plusw2	equ	0xFDB
 15517                           fsr2h	equ	0xFDA
 15518                           fsr2l	equ	0xFD9
 15519                           status	equ	0xFD8
 15520                           
 15521 ;; *************** function ___lwmod *****************
 15522 ;; Defined at:
 15523 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  dividend        2   14[BANK0 ] unsigned int 
 15526 ;;  divisor         2   16[BANK0 ] unsigned int 
 15527 ;; Auto vars:     Size  Location     Type
 15528 ;;  counter         1   18[BANK0 ] unsigned char 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;                  2   14[BANK0 ] unsigned int 
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0
 15533 ;; Tracked objects:
 15534 ;;		On entry : 0/0
 15535 ;;		On exit  : 0/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15538 ;;      Params:         0       4       0       0       0       0       0       0       0
 15539 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15540 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15541 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15542 ;;Total ram usage:        5 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    4
 15545 ;; This function calls:
 15546 ;;		Nothing
 15547 ;; This function is called by:
 15548 ;;		_ipAdressToString
 15549 ;;		_arp_probe
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           	psect	text61
 15554  00467C                     __ptext61:
 15555                           	opt stack 0
 15556  00467C                     ___lwmod:
 15557                           	opt stack 24
 15558                           
 15559                           ; BSR set to: 0
 15560                           ;incstack = 0
 15561  00467C  0100               	movlb	0	; () banked
 15562  00467E  5170               	movf	___lwmod@divisor& (0+255),w,b
 15563  004680  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 15564  004682  B4D8               	btfsc	status,2,c
 15565  004684  D018               	goto	l1580
 15566                           
 15567                           ; BSR set to: 0
 15568  004686  0E01               	movlw	1
 15569  004688  6F72               	movwf	___lwmod@counter& (0+255),b
 15570  00468A  D004               	goto	l1575
 15571  00468C                     
 15572                           ; BSR set to: 0
 15573                           
 15574                           ; BSR set to: 0
 15575  00468C  90D8               	bcf	status,0,c
 15576  00468E  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 15577  004690  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 15578  004692  2B72               	incf	___lwmod@counter& (0+255),f,b
 15579  004694                     l1575:
 15580                           
 15581                           ; BSR set to: 0
 15582                           
 15583                           ; BSR set to: 0
 15584  004694  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 15585  004696  D7FA               	goto	l1576
 15586  004698                     u9120:
 15587                           
 15588                           ; BSR set to: 0
 15589                           
 15590                           ; BSR set to: 0
 15591                           
 15592                           ; BSR set to: 0
 15593  004698  5170               	movf	___lwmod@divisor& (0+255),w,b
 15594  00469A  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 15595  00469C  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15596  00469E  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 15597  0046A0  A0D8               	btfss	status,0,c
 15598  0046A2  D004               	goto	l1579
 15599                           
 15600                           ; BSR set to: 0
 15601  0046A4  5170               	movf	___lwmod@divisor& (0+255),w,b
 15602  0046A6  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 15603  0046A8  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 15604  0046AA  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 15605  0046AC                     l1579:
 15606                           
 15607                           ; BSR set to: 0
 15608                           
 15609                           ; BSR set to: 0
 15610  0046AC  90D8               	bcf	status,0,c
 15611  0046AE  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 15612  0046B0  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 15613                           
 15614                           ; BSR set to: 0
 15615  0046B2  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 15616  0046B4  D7F1               	goto	u9120
 15617  0046B6                     l1580:
 15618                           
 15619                           ; BSR set to: 0
 15620                           
 15621                           ; BSR set to: 0
 15622  0046B6  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 15623  0046BA  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 15624                           
 15625                           ; BSR set to: 0
 15626  0046BE  0012               	return		;funcret
 15627  0046C0                     __end_of___lwmod:
 15628                           	opt stack 0
 15629                           tblptru	equ	0xFF8
 15630                           tblptrh	equ	0xFF7
 15631                           tblptrl	equ	0xFF6
 15632                           tablat	equ	0xFF5
 15633                           prodh	equ	0xFF4
 15634                           prodl	equ	0xFF3
 15635                           intcon	equ	0xFF2
 15636                           intcon3	equ	0xFF0
 15637                           indf0	equ	0xFEF
 15638                           postinc0	equ	0xFEE
 15639                           plusw0	equ	0xFEB
 15640                           fsr0h	equ	0xFEA
 15641                           fsr0l	equ	0xFE9
 15642                           wreg	equ	0xFE8
 15643                           indf1	equ	0xFE7
 15644                           postinc1	equ	0xFE6
 15645                           postdec1	equ	0xFE5
 15646                           plusw1	equ	0xFE3
 15647                           fsr1h	equ	0xFE2
 15648                           fsr1l	equ	0xFE1
 15649                           indf2	equ	0xFDF
 15650                           postinc2	equ	0xFDE
 15651                           postdec2	equ	0xFDD
 15652                           plusw2	equ	0xFDB
 15653                           fsr2h	equ	0xFDA
 15654                           fsr2l	equ	0xFD9
 15655                           status	equ	0xFD8
 15656                           
 15657 ;; *************** function _arp_gratuitous *****************
 15658 ;; Defined at:
 15659 ;;		line 304 in file "src/stack/protocols/arp.c"
 15660 ;; Parameters:    Size  Location     Type
 15661 ;;  ip              4  156[BANK0 ] struct ipv4_address
 15662 ;; Auto vars:     Size  Location     Type
 15663 ;;  err             3   60[BANK1 ] struct error
 15664 ;; Return value:  Size  Location     Type
 15665 ;;                  3  156[BANK0 ] struct error
 15666 ;; Registers used:
 15667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15668 ;; Tracked objects:
 15669 ;;		On entry : 0/0
 15670 ;;		On exit  : 0/0
 15671 ;;		Unchanged: 0/0
 15672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15673 ;;      Params:         0       4       0       0       0       0       0       0       0
 15674 ;;      Locals:         0       0       3       0       0       0       0       0       0
 15675 ;;      Temps:          0       0       8       0       0       0       0       0       0
 15676 ;;      Totals:         0       4      11       0       0       0       0       0       0
 15677 ;;Total ram usage:       15 bytes
 15678 ;; Hardware stack levels used:    1
 15679 ;; Hardware stack levels required when called:   11
 15680 ;; This function calls:
 15681 ;;		_arp_sendRequest
 15682 ;;		_getMillis
 15683 ;; This function is called by:
 15684 ;;		_arp_background
 15685 ;; This function uses a non-reentrant model
 15686 ;;
 15687                           
 15688                           	psect	text62
 15689  0025AA                     __ptext62:
 15690                           	opt stack 0
 15691  0025AA                     _arp_gratuitous:
 15692                           	opt stack 17
 15693                           
 15694                           ;arp.c: 305: uint8_t static announceCounter = 0;
 15695                           ;arp.c: 306: uint8_t static state = 0;
 15696                           ;arp.c: 307: time_t static timeStart = 0;
 15697                           ;arp.c: 308: error_t err;
 15698                           ;arp.c: 309: err.module = ERROR_MODULE_ARP;
 15699                           
 15700                           ; BSR set to: 0
 15701                           ;incstack = 0
 15702  0025AA  0E03               	movlw	3
 15703  0025AC  0101               	movlb	1	; () banked
 15704  0025AE  6F3C               	movwf	arp_gratuitous@err& (0+255),b
 15705                           
 15706                           ;arp.c: 310: err.code = ERROR_ARP_WAITING;
 15707  0025B0  0E01               	movlw	1
 15708  0025B2  6F3E               	movwf	(arp_gratuitous@err+2)& (0+255),b
 15709  0025B4  0E91               	movlw	145
 15710  0025B6  6F3D               	movwf	(arp_gratuitous@err+1)& (0+255),b
 15711                           
 15712                           ;arp.c: 312: switch (state) {
 15713  0025B8  D0A2               	goto	l981
 15714  0025BA                     
 15715                           ; BSR set to: 1
 15716                           ;arp.c: 314: timeStart = getMillis();
 15717                           
 15718                           ; BSR set to: 1
 15719  0025BA  EC25  F026         	call	_getMillis	;wreg free
 15720  0025BE  C060  F1DB         	movff	?_getMillis,arp_gratuitous@timeStart
 15721  0025C2  C061  F1DC         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 15722  0025C6  C062  F1DD         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 15723  0025CA  C063  F1DE         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 15724                           
 15725                           ;arp.c: 315: state = 1;
 15726  0025CE  0E01               	movlw	1
 15727  0025D0  0101               	movlb	1	; () banked
 15728  0025D2  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15729                           
 15730                           ;arp.c: 316: break;
 15731  0025D4  D09E               	goto	l983
 15732  0025D6                     
 15733                           ; BSR set to: 1
 15734                           ;arp.c: 318: if ((getMillis() - timeStart) > 2000u) {
 15735                           
 15736                           ; BSR set to: 1
 15737  0025D6  C1DB  F134         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 15738  0025DA  C1DC  F135         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 15739  0025DE  C1DD  F136         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 15740  0025E2  C1DE  F137         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 15741  0025E6  1F34               	comf	??_arp_gratuitous& (0+255),f,b
 15742  0025E8  1F35               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 15743  0025EA  1F36               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 15744  0025EC  1F37               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 15745  0025EE  2B34               	incf	??_arp_gratuitous& (0+255),f,b
 15746  0025F0  0E00               	movlw	0
 15747  0025F2  2335               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 15748  0025F4  2336               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 15749  0025F6  2337               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 15750  0025F8  EC25  F026         	call	_getMillis	;wreg free
 15751  0025FC  0101               	movlb	1	; () banked
 15752  0025FE  5134               	movf	??_arp_gratuitous& (0+255),w,b
 15753  002600  0100               	movlb	0	; () banked
 15754  002602  2560               	addwf	?_getMillis& (0+255),w,b
 15755  002604  0101               	movlb	1	; () banked
 15756  002606  6F38               	movwf	(??_arp_gratuitous+4)& (0+255),b
 15757  002608  5135               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 15758  00260A  0100               	movlb	0	; () banked
 15759  00260C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15760  00260E  0101               	movlb	1	; () banked
 15761  002610  6F39               	movwf	(??_arp_gratuitous+5)& (0+255),b
 15762  002612  5136               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 15763  002614  0100               	movlb	0	; () banked
 15764  002616  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15765  002618  0101               	movlb	1	; () banked
 15766  00261A  6F3A               	movwf	(??_arp_gratuitous+6)& (0+255),b
 15767  00261C  5137               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 15768  00261E  0100               	movlb	0	; () banked
 15769  002620  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15770  002622  0101               	movlb	1	; () banked
 15771  002624  6F3B               	movwf	(??_arp_gratuitous+7)& (0+255),b
 15772  002626  513B               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 15773  002628  113A               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 15774  00262A  E106               	bnz	u10870
 15775  00262C  0ED1               	movlw	209
 15776  00262E  5D38               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 15777  002630  0E07               	movlw	7
 15778  002632  5939               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 15779  002634  A0D8               	btfss	status,0,c
 15780  002636  D06D               	goto	l983
 15781  002638                     u10870:
 15782                           
 15783                           ; BSR set to: 1
 15784                           ;arp.c: 319: state = 2;
 15785  002638  0E02               	movlw	2
 15786  00263A  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15787                           
 15788                           ;arp.c: 320: announceCounter = 0;
 15789  00263C  0E00               	movlw	0
 15790  00263E  6FE4               	movwf	arp_gratuitous@announceCounter& (0+255),b
 15791                           
 15792                           ; BSR set to: 1
 15793                           ;arp.c: 321: }
 15794                           ;arp.c: 322: break;
 15795  002640  D068               	goto	l983
 15796  002642                     
 15797                           ; BSR set to: 1
 15798                           ;arp.c: 324: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 15799                           
 15800                           ; BSR set to: 1
 15801  002642  51E4               	movf	arp_gratuitous@announceCounter& (0+255),w,b
 15802  002644  B4D8               	btfsc	status,2,c
 15803  002646  D031               	goto	u10890
 15804                           
 15805                           ; BSR set to: 1
 15806  002648  C1DB  F134         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 15807  00264C  C1DC  F135         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 15808  002650  C1DD  F136         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 15809  002654  C1DE  F137         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 15810  002658  1F34               	comf	??_arp_gratuitous& (0+255),f,b
 15811  00265A  1F35               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 15812  00265C  1F36               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 15813  00265E  1F37               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 15814  002660  2B34               	incf	??_arp_gratuitous& (0+255),f,b
 15815  002662  0E00               	movlw	0
 15816  002664  2335               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 15817  002666  2336               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 15818  002668  2337               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 15819  00266A  EC25  F026         	call	_getMillis	;wreg free
 15820  00266E  0101               	movlb	1	; () banked
 15821  002670  5134               	movf	??_arp_gratuitous& (0+255),w,b
 15822  002672  0100               	movlb	0	; () banked
 15823  002674  2560               	addwf	?_getMillis& (0+255),w,b
 15824  002676  0101               	movlb	1	; () banked
 15825  002678  6F38               	movwf	(??_arp_gratuitous+4)& (0+255),b
 15826  00267A  5135               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 15827  00267C  0100               	movlb	0	; () banked
 15828  00267E  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 15829  002680  0101               	movlb	1	; () banked
 15830  002682  6F39               	movwf	(??_arp_gratuitous+5)& (0+255),b
 15831  002684  5136               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 15832  002686  0100               	movlb	0	; () banked
 15833  002688  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 15834  00268A  0101               	movlb	1	; () banked
 15835  00268C  6F3A               	movwf	(??_arp_gratuitous+6)& (0+255),b
 15836  00268E  5137               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 15837  002690  0100               	movlb	0	; () banked
 15838  002692  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 15839  002694  0101               	movlb	1	; () banked
 15840  002696  6F3B               	movwf	(??_arp_gratuitous+7)& (0+255),b
 15841  002698  513B               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 15842  00269A  113A               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 15843  00269C  E106               	bnz	l9223
 15844  00269E  0ED1               	movlw	209
 15845  0026A0  5D38               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 15846  0026A2  0E07               	movlw	7
 15847  0026A4  5939               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 15848  0026A6  A0D8               	btfss	status,0,c
 15849  0026A8  D01E               	goto	l987
 15850  0026AA                     u10890:
 15851  0026AA                     l9223:
 15852                           
 15853                           ; BSR set to: 1
 15854                           ;arp.c: 325: timeStart = getMillis();
 15855  0026AA  EC25  F026         	call	_getMillis	;wreg free
 15856  0026AE  C060  F1DB         	movff	?_getMillis,arp_gratuitous@timeStart
 15857  0026B2  C061  F1DC         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 15858  0026B6  C062  F1DD         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 15859  0026BA  C063  F1DE         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 15860                           
 15861                           ;arp.c: 326: arp_sendRequest(ip, ip);
 15862  0026BE  C0FC  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 15863  0026C2  C0FD  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 15864  0026C6  C0FE  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 15865  0026CA  C0FF  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 15866  0026CE  C0FC  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 15867  0026D2  C0FD  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 15868  0026D6  C0FE  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 15869  0026DA  C0FF  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 15870  0026DE  EC9F  F01B         	call	_arp_sendRequest	;wreg free
 15871                           
 15872                           ;arp.c: 327: announceCounter++;
 15873  0026E2  0101               	movlb	1	; () banked
 15874  0026E4  2BE4               	incf	arp_gratuitous@announceCounter& (0+255),f,b
 15875  0026E6                     l987:
 15876                           
 15877                           ; BSR set to: 1
 15878                           ;arp.c: 328: }
 15879                           ;arp.c: 329: if (announceCounter >= 2u) {
 15880                           
 15881                           ; BSR set to: 1
 15882  0026E6  0E01               	movlw	1
 15883  0026E8  65E4               	cpfsgt	arp_gratuitous@announceCounter& (0+255),b
 15884  0026EA  D013               	goto	l983
 15885                           
 15886                           ; BSR set to: 1
 15887                           ;arp.c: 331: announceCounter = 0;
 15888  0026EC  0E00               	movlw	0
 15889  0026EE  6FE4               	movwf	arp_gratuitous@announceCounter& (0+255),b
 15890                           
 15891                           ;arp.c: 332: state = 0;
 15892  0026F0  0E00               	movlw	0
 15893  0026F2  6FE3               	movwf	arp_gratuitous@state& (0+255),b
 15894                           
 15895                           ;arp.c: 333: err.code = (uint16_t)0;
 15896  0026F4  0E00               	movlw	0
 15897  0026F6  6F3E               	movwf	(arp_gratuitous@err+2)& (0+255),b
 15898  0026F8  0E00               	movlw	0
 15899  0026FA  6F3D               	movwf	(arp_gratuitous@err+1)& (0+255),b
 15900                           
 15901                           ; BSR set to: 1
 15902                           ;arp.c: 336: }
 15903                           
 15904                           ; BSR set to: 1
 15905                           ;arp.c: 334: }
 15906                           ;arp.c: 335: break;
 15907  0026FC  D00A               	goto	l983
 15908  0026FE                     l981:
 15909                           
 15910                           ; BSR set to: 1
 15911                           
 15912                           ; BSR set to: 1
 15913  0026FE  51E3               	movf	arp_gratuitous@state& (0+255),w,b
 15914                           
 15915                           ; Switch size 1, requested type "space"
 15916                           ; Number of cases is 3, Range of values is 0 to 2
 15917                           ; switch strategies available:
 15918                           ; Name         Instructions Cycles
 15919                           ; simple_byte           10     6 (average)
 15920                           ;	Chosen strategy is simple_byte
 15921  002700  0A00               	xorlw	0	; case 0
 15922  002702  B4D8               	btfsc	status,2,c
 15923  002704  D75A               	goto	l982
 15924  002706  0A01               	xorlw	1	; case 1
 15925  002708  B4D8               	btfsc	status,2,c
 15926  00270A  D765               	goto	l984
 15927  00270C  0A03               	xorlw	3	; case 2
 15928  00270E  B4D8               	btfsc	status,2,c
 15929  002710  D798               	goto	l986
 15930  002712                     l983:
 15931                           
 15932                           ; BSR set to: 1
 15933                           ;arp.c: 337: return err;
 15934  002712  C13C  F0FC         	movff	arp_gratuitous@err,?_arp_gratuitous
 15935  002716  C13D  F0FD         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 15936  00271A  C13E  F0FE         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 15937                           
 15938                           ; BSR set to: 1
 15939  00271E  0012               	return		;funcret
 15940  002720                     __end_of_arp_gratuitous:
 15941                           	opt stack 0
 15942                           tblptru	equ	0xFF8
 15943                           tblptrh	equ	0xFF7
 15944                           tblptrl	equ	0xFF6
 15945                           tablat	equ	0xFF5
 15946                           prodh	equ	0xFF4
 15947                           prodl	equ	0xFF3
 15948                           intcon	equ	0xFF2
 15949                           intcon3	equ	0xFF0
 15950                           indf0	equ	0xFEF
 15951                           postinc0	equ	0xFEE
 15952                           plusw0	equ	0xFEB
 15953                           fsr0h	equ	0xFEA
 15954                           fsr0l	equ	0xFE9
 15955                           wreg	equ	0xFE8
 15956                           indf1	equ	0xFE7
 15957                           postinc1	equ	0xFE6
 15958                           postdec1	equ	0xFE5
 15959                           plusw1	equ	0xFE3
 15960                           fsr1h	equ	0xFE2
 15961                           fsr1l	equ	0xFE1
 15962                           indf2	equ	0xFDF
 15963                           postinc2	equ	0xFDE
 15964                           postdec2	equ	0xFDD
 15965                           plusw2	equ	0xFDB
 15966                           fsr2h	equ	0xFDA
 15967                           fsr2l	equ	0xFD9
 15968                           status	equ	0xFD8
 15969                           
 15970 ;; *************** function _getMillis *****************
 15971 ;; Defined at:
 15972 ;;		line 34 in file "src/stack/time.c"
 15973 ;; Parameters:    Size  Location     Type
 15974 ;;		None
 15975 ;; Auto vars:     Size  Location     Type
 15976 ;;		None
 15977 ;; Return value:  Size  Location     Type
 15978 ;;                  4    0[BANK0 ] unsigned long 
 15979 ;; Registers used:
 15980 ;;		None
 15981 ;; Tracked objects:
 15982 ;;		On entry : 0/0
 15983 ;;		On exit  : 0/0
 15984 ;;		Unchanged: 0/0
 15985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15986 ;;      Params:         0       4       0       0       0       0       0       0       0
 15987 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15988 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15989 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15990 ;;Total ram usage:        4 bytes
 15991 ;; Hardware stack levels used:    1
 15992 ;; Hardware stack levels required when called:    4
 15993 ;; This function calls:
 15994 ;;		Nothing
 15995 ;; This function is called by:
 15996 ;;		_ethernet_rxGetNewFrame
 15997 ;;		_arp_handleNewPacket
 15998 ;;		_arp_probe
 15999 ;;		_arp_gratuitous
 16000 ;;		_arp_checkForEntry
 16001 ;; This function uses a non-reentrant model
 16002 ;;
 16003                           
 16004                           	psect	text63
 16005  004C4A                     __ptext63:
 16006                           	opt stack 0
 16007  004C4A                     _getMillis:
 16008                           	opt stack 24
 16009                           
 16010                           ;time.c: 35: return time;
 16011                           
 16012                           ; BSR set to: 1
 16013                           ;incstack = 0
 16014  004C4A  C029  F060         	movff	_time,?_getMillis	;volatile
 16015  004C4E  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 16016  004C52  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 16017  004C56  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 16018  004C5A  0012               	return		;funcret
 16019  004C5C                     __end_of_getMillis:
 16020                           	opt stack 0
 16021                           tblptru	equ	0xFF8
 16022                           tblptrh	equ	0xFF7
 16023                           tblptrl	equ	0xFF6
 16024                           tablat	equ	0xFF5
 16025                           prodh	equ	0xFF4
 16026                           prodl	equ	0xFF3
 16027                           intcon	equ	0xFF2
 16028                           intcon3	equ	0xFF0
 16029                           indf0	equ	0xFEF
 16030                           postinc0	equ	0xFEE
 16031                           plusw0	equ	0xFEB
 16032                           fsr0h	equ	0xFEA
 16033                           fsr0l	equ	0xFE9
 16034                           wreg	equ	0xFE8
 16035                           indf1	equ	0xFE7
 16036                           postinc1	equ	0xFE6
 16037                           postdec1	equ	0xFE5
 16038                           plusw1	equ	0xFE3
 16039                           fsr1h	equ	0xFE2
 16040                           fsr1l	equ	0xFE1
 16041                           indf2	equ	0xFDF
 16042                           postinc2	equ	0xFDE
 16043                           postdec2	equ	0xFDD
 16044                           plusw2	equ	0xFDB
 16045                           fsr2h	equ	0xFDA
 16046                           fsr2l	equ	0xFD9
 16047                           status	equ	0xFD8
 16048                           
 16049 ;; *************** function _arp_sendRequest *****************
 16050 ;; Defined at:
 16051 ;;		line 183 in file "src/stack/protocols/arp.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 16054 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;  request        32   20[BANK1 ] struct arp_message
 16057 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 16058 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 16059 ;; Return value:  Size  Location     Type
 16060 ;;                  1    wreg      void 
 16061 ;; Registers used:
 16062 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16063 ;; Tracked objects:
 16064 ;;		On entry : 0/0
 16065 ;;		On exit  : 0/0
 16066 ;;		Unchanged: 0/0
 16067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16068 ;;      Params:         0       0       8       0       0       0       0       0       0
 16069 ;;      Locals:         0       0      44       0       0       0       0       0       0
 16070 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16071 ;;      Totals:         0       0      52       0       0       0       0       0       0
 16072 ;;Total ram usage:       52 bytes
 16073 ;; Hardware stack levels used:    1
 16074 ;; Hardware stack levels required when called:   10
 16075 ;; This function calls:
 16076 ;;		_arp_send
 16077 ;;		_ethernetController_getMacAddress
 16078 ;;		_ipv4_getIPSourceAddress
 16079 ;;		_mac_setAllZero
 16080 ;; This function is called by:
 16081 ;;		_arp_probe
 16082 ;;		_arp_gratuitous
 16083 ;; This function uses a non-reentrant model
 16084 ;;
 16085                           
 16086                           	psect	text64
 16087  00373E                     __ptext64:
 16088                           	opt stack 0
 16089  00373E                     _arp_sendRequest:
 16090                           	opt stack 17
 16091                           
 16092                           ;arp.c: 184: arp_message_t request;
 16093                           ;arp.c: 185: macaddress_t senderMAC;
 16094                           ;arp.c: 186: macaddress_t targetMAC;
 16095                           ;arp.c: 188: senderMAC = ethernetController_getMacAddress();
 16096                           
 16097                           ;incstack = 0
 16098  00373E  EC7D  F01F         	call	_ethernetController_getMacAddress	;wreg free
 16099  003742  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 16100  003746  0E05               	movlw	5
 16101  003748                     u10421:
 16102  003748  CFEB FFDB          	movff	plusw0,plusw2
 16103  00374C  06E8               	decf	wreg,f,c
 16104  00374E  E2FC               	bc	u10421
 16105                           
 16106                           ;arp.c: 190: ipSender = ipv4_getIPSourceAddress();
 16107  003750  EC2E  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 16108  003754  C060  F100         	movff	?_ipv4_getIPSourceAddress,arp_sendRequest@ipSender
 16109  003758  C061  F101         	movff	?_ipv4_getIPSourceAddress+1,arp_sendRequest@ipSender+1
 16110  00375C  C062  F102         	movff	?_ipv4_getIPSourceAddress+2,arp_sendRequest@ipSender+2
 16111  003760  C063  F103         	movff	?_ipv4_getIPSourceAddress+3,arp_sendRequest@ipSender+3
 16112                           
 16113                           ;arp.c: 191: mac_setAllZero(&targetMAC);
 16114  003764  0E0E               	movlw	low arp_sendRequest@targetMAC
 16115  003766  0100               	movlb	0	; () banked
 16116  003768  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 16117  00376A  0E01               	movlw	high arp_sendRequest@targetMAC
 16118  00376C  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 16119  00376E  EC5A  F025         	call	_mac_setAllZero	;wreg free
 16120                           
 16121                           ;arp.c: 193: request.hlen = 6u;
 16122  003772  0E06               	movlw	6
 16123  003774  0101               	movlb	1	; () banked
 16124  003776  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 16125                           
 16126                           ; BSR set to: 1
 16127                           ;arp.c: 194: request.plen = 4u;
 16128  003778  0E04               	movlw	4
 16129  00377A  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 16130                           
 16131                           ; BSR set to: 1
 16132                           ;arp.c: 195: request.htype = ARP_HTYPE_ETHERNET;
 16133  00377C  0E00               	movlw	0
 16134  00377E  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 16135  003780  0E01               	movlw	1
 16136  003782  6F14               	movwf	arp_sendRequest@request& (0+255),b
 16137                           
 16138                           ; BSR set to: 1
 16139                           ;arp.c: 196: request.ptype = ARP_PTYPE_IPv4;
 16140  003784  0E08               	movlw	8
 16141  003786  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 16142  003788  0E00               	movlw	0
 16143  00378A  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 16144                           
 16145                           ; BSR set to: 1
 16146                           ;arp.c: 197: request.operation = ARP_REQUEST;
 16147  00378C  0E00               	movlw	0
 16148  00378E  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 16149  003790  0E01               	movlw	1
 16150  003792  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 16151                           
 16152                           ; BSR set to: 1
 16153                           ;arp.c: 198: request.senderIPAddress = ipSender;
 16154  003794  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 16155  003798  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 16156  00379C  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 16157  0037A0  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 16158                           
 16159                           ; BSR set to: 1
 16160                           ;arp.c: 199: request.senderMACAddress = senderMAC;
 16161  0037A4  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 16162  0037A8  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 16163  0037AC  0E05               	movlw	5
 16164  0037AE                     u10431:
 16165  0037AE  CFDB FFE3          	movff	plusw2,plusw1
 16166  0037B2  06E8               	decf	wreg,f,c
 16167  0037B4  E2FC               	bc	u10431
 16168                           
 16169                           ; BSR set to: 1
 16170                           ;arp.c: 200: request.targetIPAddress = ipTarget;
 16171  0037B6  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 16172  0037BA  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 16173  0037BE  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 16174  0037C2  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 16175                           
 16176                           ; BSR set to: 1
 16177                           ;arp.c: 201: request.targetMACAddress = targetMAC;
 16178  0037C6  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 16179  0037CA  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 16180  0037CE  0E05               	movlw	5
 16181  0037D0                     u10441:
 16182  0037D0  CFDB FFE3          	movff	plusw2,plusw1
 16183  0037D4  06E8               	decf	wreg,f,c
 16184  0037D6  E2FC               	bc	u10441
 16185                           
 16186                           ; BSR set to: 1
 16187                           ;arp.c: 203: arp_send(request);
 16188  0037D8  EE21  F014         	lfsr	2,arp_sendRequest@request
 16189  0037DC  EE00  F0A7         	lfsr	0,arp_send@arp
 16190  0037E0  0E1F               	movlw	31
 16191  0037E2                     u10451:
 16192  0037E2  CFDB FFEB          	movff	plusw2,plusw0
 16193  0037E6  06E8               	decf	wreg,f,c
 16194  0037E8  E2FC               	bc	u10451
 16195  0037EA  ECE7  F00B         	call	_arp_send	;wreg free
 16196  0037EE  0012               	return		;funcret
 16197  0037F0                     __end_of_arp_sendRequest:
 16198                           	opt stack 0
 16199                           tblptru	equ	0xFF8
 16200                           tblptrh	equ	0xFF7
 16201                           tblptrl	equ	0xFF6
 16202                           tablat	equ	0xFF5
 16203                           prodh	equ	0xFF4
 16204                           prodl	equ	0xFF3
 16205                           intcon	equ	0xFF2
 16206                           intcon3	equ	0xFF0
 16207                           indf0	equ	0xFEF
 16208                           postinc0	equ	0xFEE
 16209                           plusw0	equ	0xFEB
 16210                           fsr0h	equ	0xFEA
 16211                           fsr0l	equ	0xFE9
 16212                           wreg	equ	0xFE8
 16213                           indf1	equ	0xFE7
 16214                           postinc1	equ	0xFE6
 16215                           postdec1	equ	0xFE5
 16216                           plusw1	equ	0xFE3
 16217                           fsr1h	equ	0xFE2
 16218                           fsr1l	equ	0xFE1
 16219                           indf2	equ	0xFDF
 16220                           postinc2	equ	0xFDE
 16221                           postdec2	equ	0xFDD
 16222                           plusw2	equ	0xFDB
 16223                           fsr2h	equ	0xFDA
 16224                           fsr2l	equ	0xFD9
 16225                           status	equ	0xFD8
 16226                           
 16227 ;; *************** function _mac_setAllZero *****************
 16228 ;; Defined at:
 16229 ;;		line 47 in file "src/eth/mac.c"
 16230 ;; Parameters:    Size  Location     Type
 16231 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 16232 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 16233 ;; Auto vars:     Size  Location     Type
 16234 ;;  i               1    2[BANK0 ] unsigned char 
 16235 ;; Return value:  Size  Location     Type
 16236 ;;                  1    wreg      void 
 16237 ;; Registers used:
 16238 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16239 ;; Tracked objects:
 16240 ;;		On entry : 0/0
 16241 ;;		On exit  : 0/0
 16242 ;;		Unchanged: 0/0
 16243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16244 ;;      Params:         0       2       0       0       0       0       0       0       0
 16245 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16246 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16247 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16248 ;;Total ram usage:        3 bytes
 16249 ;; Hardware stack levels used:    1
 16250 ;; Hardware stack levels required when called:    4
 16251 ;; This function calls:
 16252 ;;		Nothing
 16253 ;; This function is called by:
 16254 ;;		_arp_sendRequest
 16255 ;;		_arp_init
 16256 ;; This function uses a non-reentrant model
 16257 ;;
 16258                           
 16259                           	psect	text65
 16260  004AB4                     __ptext65:
 16261                           	opt stack 0
 16262  004AB4                     _mac_setAllZero:
 16263                           	opt stack 24
 16264                           
 16265                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 16266                           
 16267                           ;incstack = 0
 16268  004AB4  0E00               	movlw	0
 16269  004AB6  0100               	movlb	0	; () banked
 16270  004AB8  6F62               	movwf	mac_setAllZero@i& (0+255),b
 16271  004ABA                     l8353:
 16272                           
 16273                           ; BSR set to: 0
 16274  004ABA  0E05               	movlw	5
 16275  004ABC  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 16276  004ABE  D001               	goto	l396
 16277  004AC0  0012               	return	
 16278  004AC2                     l396:
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;mac.c: 49: mac->address[i] = 0x00;
 16282                           
 16283                           ; BSR set to: 0
 16284  004AC2  5162               	movf	mac_setAllZero@i& (0+255),w,b
 16285  004AC4  0D01               	mullw	1
 16286  004AC6  50F3               	movf	prodl,w,c
 16287  004AC8  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 16288  004ACA  6ED9               	movwf	fsr2l,c
 16289  004ACC  50F4               	movf	prodh,w,c
 16290  004ACE  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 16291  004AD0  6EDA               	movwf	fsr2h,c
 16292  004AD2  0E00               	movlw	0
 16293  004AD4  6EDF               	movwf	indf2,c
 16294                           
 16295                           ; BSR set to: 0
 16296  004AD6  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 16297  004AD8  D7F0               	goto	l8353
 16298  004ADA                     __end_of_mac_setAllZero:
 16299                           	opt stack 0
 16300                           tblptru	equ	0xFF8
 16301                           tblptrh	equ	0xFF7
 16302                           tblptrl	equ	0xFF6
 16303                           tablat	equ	0xFF5
 16304                           prodh	equ	0xFF4
 16305                           prodl	equ	0xFF3
 16306                           intcon	equ	0xFF2
 16307                           intcon3	equ	0xFF0
 16308                           indf0	equ	0xFEF
 16309                           postinc0	equ	0xFEE
 16310                           plusw0	equ	0xFEB
 16311                           fsr0h	equ	0xFEA
 16312                           fsr0l	equ	0xFE9
 16313                           wreg	equ	0xFE8
 16314                           indf1	equ	0xFE7
 16315                           postinc1	equ	0xFE6
 16316                           postdec1	equ	0xFE5
 16317                           plusw1	equ	0xFE3
 16318                           fsr1h	equ	0xFE2
 16319                           fsr1l	equ	0xFE1
 16320                           indf2	equ	0xFDF
 16321                           postinc2	equ	0xFDE
 16322                           postdec2	equ	0xFDD
 16323                           plusw2	equ	0xFDB
 16324                           fsr2h	equ	0xFDA
 16325                           fsr2l	equ	0xFD9
 16326                           status	equ	0xFD8
 16327                           
 16328 ;; *************** function _ipv4_getIPSourceAddress *****************
 16329 ;; Defined at:
 16330 ;;		line 231 in file "src/stack/protocols/ipv4.c"
 16331 ;; Parameters:    Size  Location     Type
 16332 ;;		None
 16333 ;; Auto vars:     Size  Location     Type
 16334 ;;		None
 16335 ;; Return value:  Size  Location     Type
 16336 ;;                  4    0[BANK0 ] struct ipv4_address
 16337 ;; Registers used:
 16338 ;;		None
 16339 ;; Tracked objects:
 16340 ;;		On entry : 0/0
 16341 ;;		On exit  : 0/0
 16342 ;;		Unchanged: 0/0
 16343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16344 ;;      Params:         0       4       0       0       0       0       0       0       0
 16345 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16346 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16347 ;;      Totals:         0       4       0       0       0       0       0       0       0
 16348 ;;Total ram usage:        4 bytes
 16349 ;; Hardware stack levels used:    1
 16350 ;; Hardware stack levels required when called:    4
 16351 ;; This function calls:
 16352 ;;		Nothing
 16353 ;; This function is called by:
 16354 ;;		_arp_sendRequest
 16355 ;;		_arp_sendReply
 16356 ;; This function uses a non-reentrant model
 16357 ;;
 16358                           
 16359                           	psect	text66
 16360  004C5C                     __ptext66:
 16361                           	opt stack 0
 16362  004C5C                     _ipv4_getIPSourceAddress:
 16363                           	opt stack 22
 16364                           
 16365                           ;ipv4.c: 232: return ipSource;
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;incstack = 0
 16369  004C5C  C1DF  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 16370  004C60  C1E0  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 16371  004C64  C1E1  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 16372  004C68  C1E2  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 16373  004C6C  0012               	return		;funcret
 16374  004C6E                     __end_of_ipv4_getIPSourceAddress:
 16375                           	opt stack 0
 16376                           tblptru	equ	0xFF8
 16377                           tblptrh	equ	0xFF7
 16378                           tblptrl	equ	0xFF6
 16379                           tablat	equ	0xFF5
 16380                           prodh	equ	0xFF4
 16381                           prodl	equ	0xFF3
 16382                           intcon	equ	0xFF2
 16383                           intcon3	equ	0xFF0
 16384                           indf0	equ	0xFEF
 16385                           postinc0	equ	0xFEE
 16386                           plusw0	equ	0xFEB
 16387                           fsr0h	equ	0xFEA
 16388                           fsr0l	equ	0xFE9
 16389                           wreg	equ	0xFE8
 16390                           indf1	equ	0xFE7
 16391                           postinc1	equ	0xFE6
 16392                           postdec1	equ	0xFE5
 16393                           plusw1	equ	0xFE3
 16394                           fsr1h	equ	0xFE2
 16395                           fsr1l	equ	0xFE1
 16396                           indf2	equ	0xFDF
 16397                           postinc2	equ	0xFDE
 16398                           postdec2	equ	0xFDD
 16399                           plusw2	equ	0xFDB
 16400                           fsr2h	equ	0xFDA
 16401                           fsr2l	equ	0xFD9
 16402                           status	equ	0xFD8
 16403                           
 16404 ;; *************** function _ethernetController_getMacAddress *****************
 16405 ;; Defined at:
 16406 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 16407 ;; Parameters:    Size  Location     Type
 16408 ;;		None
 16409 ;; Auto vars:     Size  Location     Type
 16410 ;;  mac             6   20[BANK0 ] struct macaddress
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  6   14[BANK0 ] struct macaddress
 16413 ;; Registers used:
 16414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16420 ;;      Params:         0       6       0       0       0       0       0       0       0
 16421 ;;      Locals:         0       6       0       0       0       0       0       0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16423 ;;      Totals:         0      12       0       0       0       0       0       0       0
 16424 ;;Total ram usage:       12 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:    7
 16427 ;; This function calls:
 16428 ;;		_enc424j600_readControlRegisterUnbanked
 16429 ;; This function is called by:
 16430 ;;		_main
 16431 ;;		_arp_sendRequest
 16432 ;;		_arp_sendReply
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           	psect	text67
 16437  003EFA                     __ptext67:
 16438                           	opt stack 0
 16439  003EFA                     _ethernetController_getMacAddress:
 16440                           	opt stack 19
 16441                           
 16442                           ;ENC424J600.c: 158: macaddress_t mac;
 16443                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 16444                           
 16445                           ;incstack = 0
 16446  003EFA  0E74               	movlw	low ethernetController_getMacAddress@mac
 16447  003EFC  0100               	movlb	0	; () banked
 16448  003EFE  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16449  003F00  0E00               	movlw	high ethernetController_getMacAddress@mac
 16450  003F02  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16451  003F04  0E64               	movlw	100
 16452  003F06  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16453                           
 16454                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 16455  003F0A  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 16456  003F0C  0100               	movlb	0	; () banked
 16457  003F0E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16458  003F10  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 16459  003F12  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16460  003F14  0E65               	movlw	101
 16461  003F16  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16462                           
 16463                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 16464  003F1A  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 16465  003F1C  0100               	movlb	0	; () banked
 16466  003F1E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16467  003F20  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 16468  003F22  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16469  003F24  0E62               	movlw	98
 16470  003F26  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16471                           
 16472                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 16473  003F2A  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 16474  003F2C  0100               	movlb	0	; () banked
 16475  003F2E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16476  003F30  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 16477  003F32  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16478  003F34  0E63               	movlw	99
 16479  003F36  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16480                           
 16481                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 16482  003F3A  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 16483  003F3C  0100               	movlb	0	; () banked
 16484  003F3E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16485  003F40  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 16486  003F42  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16487  003F44  0E60               	movlw	96
 16488  003F46  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16489                           
 16490                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 16491  003F4A  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 16492  003F4C  0100               	movlb	0	; () banked
 16493  003F4E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16494  003F50  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 16495  003F52  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16496  003F54  0E61               	movlw	97
 16497  003F56  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 16498                           
 16499                           ;ENC424J600.c: 165: return mac;
 16500  003F5A  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 16501  003F5E  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 16502  003F62  0E05               	movlw	5
 16503  003F64                     u9141:
 16504  003F64  CFDB FFEB          	movff	plusw2,plusw0
 16505  003F68  06E8               	decf	wreg,f,c
 16506  003F6A  E2FC               	bc	u9141
 16507  003F6C  0012               	return	
 16508  003F6E                     __end_of_ethernetController_getMacAddress:
 16509                           	opt stack 0
 16510                           tblptru	equ	0xFF8
 16511                           tblptrh	equ	0xFF7
 16512                           tblptrl	equ	0xFF6
 16513                           tablat	equ	0xFF5
 16514                           prodh	equ	0xFF4
 16515                           prodl	equ	0xFF3
 16516                           intcon	equ	0xFF2
 16517                           intcon3	equ	0xFF0
 16518                           indf0	equ	0xFEF
 16519                           postinc0	equ	0xFEE
 16520                           plusw0	equ	0xFEB
 16521                           fsr0h	equ	0xFEA
 16522                           fsr0l	equ	0xFE9
 16523                           wreg	equ	0xFE8
 16524                           indf1	equ	0xFE7
 16525                           postinc1	equ	0xFE6
 16526                           postdec1	equ	0xFE5
 16527                           plusw1	equ	0xFE3
 16528                           fsr1h	equ	0xFE2
 16529                           fsr1l	equ	0xFE1
 16530                           indf2	equ	0xFDF
 16531                           postinc2	equ	0xFDE
 16532                           postdec2	equ	0xFDD
 16533                           plusw2	equ	0xFDB
 16534                           fsr2h	equ	0xFDA
 16535                           fsr2l	equ	0xFD9
 16536                           status	equ	0xFD8
 16537                           
 16538 ;; *************** function _arp_send *****************
 16539 ;; Defined at:
 16540 ;;		line 136 in file "src/stack/protocols/arp.c"
 16541 ;; Parameters:    Size  Location     Type
 16542 ;;  arp            32   71[BANK0 ] struct arp_message
 16543 ;; Auto vars:     Size  Location     Type
 16544 ;;  i               1  112[BANK0 ] unsigned char 
 16545 ;;  i               1  111[BANK0 ] unsigned char 
 16546 ;;  i               1  110[BANK0 ] unsigned char 
 16547 ;;  i               1  109[BANK0 ] unsigned char 
 16548 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 16549 ;;  field           9  147[BANK0 ] struct memoryField
 16550 ;;  destination     6  103[BANK0 ] struct macaddress
 16551 ;; Return value:  Size  Location     Type
 16552 ;;                  1    wreg      void 
 16553 ;; Registers used:
 16554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16560 ;;      Params:         0      32       0       0       0       0       0       0       0
 16561 ;;      Locals:         0      53       0       0       0       0       0       0       0
 16562 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16563 ;;      Totals:         0      85       0       0       0       0       0       0       0
 16564 ;;Total ram usage:       85 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    9
 16567 ;; This function calls:
 16568 ;;		_ethernetController_getSourceMACAddress
 16569 ;;		_ethernetController_sendPacket
 16570 ;;		_ethernetController_streamToTransmitBuffer
 16571 ;;		_ethernet_txFrameRequest
 16572 ;;		_mac_setToBroadcast
 16573 ;; This function is called by:
 16574 ;;		_arp_sendRequest
 16575 ;;		_arp_sendReply
 16576 ;; This function uses a non-reentrant model
 16577 ;;
 16578                           
 16579                           	psect	text68
 16580  0017CE                     __ptext68:
 16581                           	opt stack 0
 16582  0017CE                     _arp_send:
 16583                           	opt stack 17
 16584                           
 16585                           ;arp.c: 137: memoryField_t field;
 16586                           ;arp.c: 138: ethernetFrame_t ethFrame;
 16587                           ;arp.c: 141: macaddress_t destination;
 16588                           ;arp.c: 142: mac_setToBroadcast(&destination);
 16589                           
 16590                           ;incstack = 0
 16591  0017CE  0EC7               	movlw	low arp_send@destination
 16592  0017D0  0100               	movlb	0	; () banked
 16593  0017D2  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 16594  0017D4  0E00               	movlw	high arp_send@destination
 16595  0017D6  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 16596  0017D8  EC6D  F025         	call	_mac_setToBroadcast	;wreg free
 16597                           
 16598                           ;arp.c: 143: ethFrame.destination = destination;
 16599  0017DC  EE20  F0C7         	lfsr	2,arp_send@destination
 16600  0017E0  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 16601  0017E4  0E05               	movlw	5
 16602  0017E6                     u9491:
 16603  0017E6  CFDB FFE3          	movff	plusw2,plusw1
 16604  0017EA  06E8               	decf	wreg,f,c
 16605  0017EC  E2FC               	bc	u9491
 16606                           
 16607                           ;arp.c: 147: ethFrame.length = 36;
 16608  0017EE  0E00               	movlw	0
 16609  0017F0  0100               	movlb	0	; () banked
 16610  0017F2  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 16611  0017F4  0E24               	movlw	36
 16612  0017F6  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 16613                           
 16614                           ; BSR set to: 0
 16615                           ;arp.c: 148: ethFrame.source = ethernetController_getSourceMACAddress(field);
 16616  0017F8  EE20  F0F3         	lfsr	2,arp_send@field
 16617  0017FC  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 16618  001800  0E08               	movlw	8
 16619  001802                     u9501:
 16620  001802  CFDB FFEB          	movff	plusw2,plusw0
 16621  001806  06E8               	decf	wreg,f,c
 16622  001808  E2FC               	bc	u9501
 16623  00180A  EC28  F020         	call	_ethernetController_getSourceMACAddress	;wreg free
 16624  00180E  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 16625  001812  0E05               	movlw	5
 16626  001814                     u9511:
 16627  001814  CFEB FFDB          	movff	plusw0,plusw2
 16628  001818  06E8               	decf	wreg,f,c
 16629  00181A  E2FC               	bc	u9511
 16630                           
 16631                           ;arp.c: 149: ethFrame.ethertype = ETHERTYPE_ARP;
 16632  00181C  0E08               	movlw	8
 16633  00181E  0100               	movlb	0	; () banked
 16634  001820  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 16635  001822  0E06               	movlw	6
 16636  001824  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;arp.c: 151: ethernet_txFrameRequest(&ethFrame);
 16640  001826  0ED1               	movlw	low arp_send@ethFrame
 16641  001828  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 16642  00182A  0E00               	movlw	high arp_send@ethFrame
 16643  00182C  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 16644  00182E  ECA2  F019         	call	_ethernet_txFrameRequest	;wreg free
 16645                           
 16646                           ;arp.c: 153: if (ethFrame.memory.fOutOfMemory) {
 16647  001832  0100               	movlb	0	; () banked
 16648  001834  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 16649  001836  A4D8               	btfss	status,2,c
 16650  001838  0012               	return	
 16651                           
 16652                           ; BSR set to: 0
 16653                           ;arp.c: 155: }
 16654                           ;arp.c: 157: field.start = ethFrame.memory.start + 8;
 16655                           
 16656                           ; BSR set to: 0
 16657                           
 16658                           ; BSR set to: 0
 16659                           ;arp.c: 154: return;
 16660  00183A  0E08               	movlw	8
 16661  00183C  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 16662  00183E  6FF3               	movwf	arp_send@field& (0+255),b
 16663  001840  0E00               	movlw	0
 16664  001842  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 16665  001844  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;arp.c: 158: field.end = ethFrame.memory.end;
 16669  001846  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 16670  00184A  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 16671                           
 16672                           ; BSR set to: 0
 16673                           ;arp.c: 159: field.length = 28;
 16674  00184E  0E00               	movlw	0
 16675  001850  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 16676  001852  0E1C               	movlw	28
 16677  001854  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;arp.c: 161: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 16681  001856  EE20  F0F3         	lfsr	2,arp_send@field
 16682  00185A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16683  00185E  0E08               	movlw	8
 16684  001860                     u9531:
 16685  001860  CFDB FFEB          	movff	plusw2,plusw0
 16686  001864  06E8               	decf	wreg,f,c
 16687  001866  E2FC               	bc	u9531
 16688  001868  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 16689  00186A  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16690                           
 16691                           ;arp.c: 162: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 16692  00186E  EE20  F0F3         	lfsr	2,arp_send@field
 16693  001872  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16694  001876  0E08               	movlw	8
 16695  001878                     u9541:
 16696  001878  CFDB FFEB          	movff	plusw2,plusw0
 16697  00187C  06E8               	decf	wreg,f,c
 16698  00187E  E2FC               	bc	u9541
 16699  001880  0100               	movlb	0	; () banked
 16700  001882  51A7               	movf	arp_send@arp& (0+255),w,b
 16701  001884  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16702                           
 16703                           ;arp.c: 163: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 16704  001888  EE20  F0F3         	lfsr	2,arp_send@field
 16705  00188C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16706  001890  0E08               	movlw	8
 16707  001892                     u9551:
 16708  001892  CFDB FFEB          	movff	plusw2,plusw0
 16709  001896  06E8               	decf	wreg,f,c
 16710  001898  E2FC               	bc	u9551
 16711  00189A  0100               	movlb	0	; () banked
 16712  00189C  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 16713  00189E  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16714                           
 16715                           ;arp.c: 164: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 16716  0018A2  EE20  F0F3         	lfsr	2,arp_send@field
 16717  0018A6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16718  0018AA  0E08               	movlw	8
 16719  0018AC                     u9561:
 16720  0018AC  CFDB FFEB          	movff	plusw2,plusw0
 16721  0018B0  06E8               	decf	wreg,f,c
 16722  0018B2  E2FC               	bc	u9561
 16723  0018B4  0100               	movlb	0	; () banked
 16724  0018B6  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 16725  0018B8  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16726                           
 16727                           ;arp.c: 165: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 16728  0018BC  EE20  F0F3         	lfsr	2,arp_send@field
 16729  0018C0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16730  0018C4  0E08               	movlw	8
 16731  0018C6                     u9571:
 16732  0018C6  CFDB FFEB          	movff	plusw2,plusw0
 16733  0018CA  06E8               	decf	wreg,f,c
 16734  0018CC  E2FC               	bc	u9571
 16735  0018CE  0100               	movlb	0	; () banked
 16736  0018D0  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16737  0018D2  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16738                           
 16739                           ;arp.c: 166: ethernetController_streamToTransmitBuffer(arp.plen, field);
 16740  0018D6  EE20  F0F3         	lfsr	2,arp_send@field
 16741  0018DA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16742  0018DE  0E08               	movlw	8
 16743  0018E0                     u9581:
 16744  0018E0  CFDB FFEB          	movff	plusw2,plusw0
 16745  0018E4  06E8               	decf	wreg,f,c
 16746  0018E6  E2FC               	bc	u9581
 16747  0018E8  0100               	movlb	0	; () banked
 16748  0018EA  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16749  0018EC  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16750                           
 16751                           ;arp.c: 167: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 16752  0018F0  EE20  F0F3         	lfsr	2,arp_send@field
 16753  0018F4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16754  0018F8  0E08               	movlw	8
 16755  0018FA                     u9591:
 16756  0018FA  CFDB FFEB          	movff	plusw2,plusw0
 16757  0018FE  06E8               	decf	wreg,f,c
 16758  001900  E2FC               	bc	u9591
 16759  001902  0100               	movlb	0	; () banked
 16760  001904  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 16761  001906  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16762                           
 16763                           ;arp.c: 168: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 16764  00190A  EE20  F0F3         	lfsr	2,arp_send@field
 16765  00190E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16766  001912  0E08               	movlw	8
 16767  001914                     u9601:
 16768  001914  CFDB FFEB          	movff	plusw2,plusw0
 16769  001918  06E8               	decf	wreg,f,c
 16770  00191A  E2FC               	bc	u9601
 16771  00191C  0100               	movlb	0	; () banked
 16772  00191E  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 16773  001920  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16774                           
 16775                           ;arp.c: 169: for (uint8_t i = 0; i < arp.hlen; i++)
 16776  001924  0E00               	movlw	0
 16777  001926  0100               	movlb	0	; () banked
 16778  001928  6FCD               	movwf	arp_send@i& (0+255),b
 16779  00192A  D01A               	goto	l932
 16780  00192C                     
 16781                           ; BSR set to: 0
 16782                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 16783                           
 16784                           ; BSR set to: 0
 16785  00192C  EE20  F0F3         	lfsr	2,arp_send@field
 16786  001930  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16787  001934  0E08               	movlw	8
 16788  001936                     u9611:
 16789  001936  CFDB FFEB          	movff	plusw2,plusw0
 16790  00193A  06E8               	decf	wreg,f,c
 16791  00193C  E2FC               	bc	u9611
 16792  00193E  51CD               	movf	arp_send@i& (0+255),w,b
 16793  001940  0D01               	mullw	1
 16794  001942  0E08               	movlw	8
 16795  001944  26F3               	addwf	prodl,f,c
 16796  001946  0E00               	movlw	0
 16797  001948  22F4               	addwfc	prodh,f,c
 16798  00194A  0EA7               	movlw	low arp_send@arp
 16799  00194C  24F3               	addwf	prodl,w,c
 16800  00194E  6ED9               	movwf	fsr2l,c
 16801  001950  0E00               	movlw	high arp_send@arp
 16802  001952  20F4               	addwfc	prodh,w,c
 16803  001954  6EDA               	movwf	fsr2h,c
 16804  001956  50DF               	movf	indf2,w,c
 16805  001958  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16806  00195C  0100               	movlb	0	; () banked
 16807  00195E  2BCD               	incf	arp_send@i& (0+255),f,b
 16808  001960                     l932:
 16809                           
 16810                           ; BSR set to: 0
 16811                           
 16812                           ; BSR set to: 0
 16813  001960  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16814  001962  5DCD               	subwf	arp_send@i& (0+255),w,b
 16815  001964  A0D8               	btfss	status,0,c
 16816  001966  D7E2               	goto	l933
 16817                           
 16818                           ; BSR set to: 0
 16819                           ;arp.c: 171: for (uint8_t i = 0; i < arp.plen; i++)
 16820                           
 16821                           ; BSR set to: 0
 16822  001968  0E00               	movlw	0
 16823  00196A  6FCE               	movwf	arp_send@i_3067& (0+255),b
 16824  00196C  D01A               	goto	l935
 16825  00196E                     
 16826                           ; BSR set to: 0
 16827                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 16828                           
 16829                           ; BSR set to: 0
 16830  00196E  EE20  F0F3         	lfsr	2,arp_send@field
 16831  001972  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16832  001976  0E08               	movlw	8
 16833  001978                     u9631:
 16834  001978  CFDB FFEB          	movff	plusw2,plusw0
 16835  00197C  06E8               	decf	wreg,f,c
 16836  00197E  E2FC               	bc	u9631
 16837  001980  51CE               	movf	arp_send@i_3067& (0+255),w,b
 16838  001982  0D01               	mullw	1
 16839  001984  0E0E               	movlw	14
 16840  001986  26F3               	addwf	prodl,f,c
 16841  001988  0E00               	movlw	0
 16842  00198A  22F4               	addwfc	prodh,f,c
 16843  00198C  0EA7               	movlw	low arp_send@arp
 16844  00198E  24F3               	addwf	prodl,w,c
 16845  001990  6ED9               	movwf	fsr2l,c
 16846  001992  0E00               	movlw	high arp_send@arp
 16847  001994  20F4               	addwfc	prodh,w,c
 16848  001996  6EDA               	movwf	fsr2h,c
 16849  001998  50DF               	movf	indf2,w,c
 16850  00199A  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16851  00199E  0100               	movlb	0	; () banked
 16852  0019A0  2BCE               	incf	arp_send@i_3067& (0+255),f,b
 16853  0019A2                     l935:
 16854                           
 16855                           ; BSR set to: 0
 16856                           
 16857                           ; BSR set to: 0
 16858  0019A2  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16859  0019A4  5DCE               	subwf	arp_send@i_3067& (0+255),w,b
 16860  0019A6  A0D8               	btfss	status,0,c
 16861  0019A8  D7E2               	goto	l936
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;arp.c: 173: for (uint8_t i = 0; i < arp.hlen; i++)
 16865                           
 16866                           ; BSR set to: 0
 16867  0019AA  0E00               	movlw	0
 16868  0019AC  6FCF               	movwf	arp_send@i_3068& (0+255),b
 16869  0019AE  D01A               	goto	l938
 16870  0019B0                     
 16871                           ; BSR set to: 0
 16872                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 16873                           
 16874                           ; BSR set to: 0
 16875  0019B0  EE20  F0F3         	lfsr	2,arp_send@field
 16876  0019B4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16877  0019B8  0E08               	movlw	8
 16878  0019BA                     u9651:
 16879  0019BA  CFDB FFEB          	movff	plusw2,plusw0
 16880  0019BE  06E8               	decf	wreg,f,c
 16881  0019C0  E2FC               	bc	u9651
 16882  0019C2  51CF               	movf	arp_send@i_3068& (0+255),w,b
 16883  0019C4  0D01               	mullw	1
 16884  0019C6  0E12               	movlw	18
 16885  0019C8  26F3               	addwf	prodl,f,c
 16886  0019CA  0E00               	movlw	0
 16887  0019CC  22F4               	addwfc	prodh,f,c
 16888  0019CE  0EA7               	movlw	low arp_send@arp
 16889  0019D0  24F3               	addwf	prodl,w,c
 16890  0019D2  6ED9               	movwf	fsr2l,c
 16891  0019D4  0E00               	movlw	high arp_send@arp
 16892  0019D6  20F4               	addwfc	prodh,w,c
 16893  0019D8  6EDA               	movwf	fsr2h,c
 16894  0019DA  50DF               	movf	indf2,w,c
 16895  0019DC  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16896  0019E0  0100               	movlb	0	; () banked
 16897  0019E2  2BCF               	incf	arp_send@i_3068& (0+255),f,b
 16898  0019E4                     l938:
 16899                           
 16900                           ; BSR set to: 0
 16901                           
 16902                           ; BSR set to: 0
 16903  0019E4  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 16904  0019E6  5DCF               	subwf	arp_send@i_3068& (0+255),w,b
 16905  0019E8  A0D8               	btfss	status,0,c
 16906  0019EA  D7E2               	goto	l939
 16907                           
 16908                           ; BSR set to: 0
 16909                           ;arp.c: 176: for (uint8_t i = 0; i < arp.plen; i++)
 16910                           
 16911                           ; BSR set to: 0
 16912  0019EC  0E00               	movlw	0
 16913  0019EE  6FD0               	movwf	arp_send@i_3069& (0+255),b
 16914  0019F0  D01A               	goto	l941
 16915  0019F2                     
 16916                           ; BSR set to: 0
 16917                           ;arp.c: 177: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 16918                           
 16919                           ; BSR set to: 0
 16920  0019F2  EE20  F0F3         	lfsr	2,arp_send@field
 16921  0019F6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 16922  0019FA  0E08               	movlw	8
 16923  0019FC                     u9671:
 16924  0019FC  CFDB FFEB          	movff	plusw2,plusw0
 16925  001A00  06E8               	decf	wreg,f,c
 16926  001A02  E2FC               	bc	u9671
 16927  001A04  51D0               	movf	arp_send@i_3069& (0+255),w,b
 16928  001A06  0D01               	mullw	1
 16929  001A08  0E18               	movlw	24
 16930  001A0A  26F3               	addwf	prodl,f,c
 16931  001A0C  0E00               	movlw	0
 16932  001A0E  22F4               	addwfc	prodh,f,c
 16933  001A10  0EA7               	movlw	low arp_send@arp
 16934  001A12  24F3               	addwf	prodl,w,c
 16935  001A14  6ED9               	movwf	fsr2l,c
 16936  001A16  0E00               	movlw	high arp_send@arp
 16937  001A18  20F4               	addwfc	prodh,w,c
 16938  001A1A  6EDA               	movwf	fsr2h,c
 16939  001A1C  50DF               	movf	indf2,w,c
 16940  001A1E  EC07  F01F         	call	_ethernetController_streamToTransmitBuffer
 16941  001A22  0100               	movlb	0	; () banked
 16942  001A24  2BD0               	incf	arp_send@i_3069& (0+255),f,b
 16943  001A26                     l941:
 16944                           
 16945                           ; BSR set to: 0
 16946                           
 16947                           ; BSR set to: 0
 16948  001A26  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 16949  001A28  5DD0               	subwf	arp_send@i_3069& (0+255),w,b
 16950  001A2A  A0D8               	btfss	status,0,c
 16951  001A2C  D7E2               	goto	l942
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;arp.c: 179: ethernetController_sendPacket(ethFrame.memory);
 16955                           
 16956                           ; BSR set to: 0
 16957  001A2E  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 16958  001A32  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 16959  001A36  0E08               	movlw	8
 16960  001A38                     u9691:
 16961  001A38  CFDB FFEB          	movff	plusw2,plusw0
 16962  001A3C  06E8               	decf	wreg,f,c
 16963  001A3E  E2FC               	bc	u9691
 16964  001A40  EC32  F025         	call	_ethernetController_sendPacket	;wreg free
 16965  001A44  0012               	return		;funcret
 16966  001A46                     __end_of_arp_send:
 16967                           	opt stack 0
 16968                           tblptru	equ	0xFF8
 16969                           tblptrh	equ	0xFF7
 16970                           tblptrl	equ	0xFF6
 16971                           tablat	equ	0xFF5
 16972                           prodh	equ	0xFF4
 16973                           prodl	equ	0xFF3
 16974                           intcon	equ	0xFF2
 16975                           intcon3	equ	0xFF0
 16976                           indf0	equ	0xFEF
 16977                           postinc0	equ	0xFEE
 16978                           plusw0	equ	0xFEB
 16979                           fsr0h	equ	0xFEA
 16980                           fsr0l	equ	0xFE9
 16981                           wreg	equ	0xFE8
 16982                           indf1	equ	0xFE7
 16983                           postinc1	equ	0xFE6
 16984                           postdec1	equ	0xFE5
 16985                           plusw1	equ	0xFE3
 16986                           fsr1h	equ	0xFE2
 16987                           fsr1l	equ	0xFE1
 16988                           indf2	equ	0xFDF
 16989                           postinc2	equ	0xFDE
 16990                           postdec2	equ	0xFDD
 16991                           plusw2	equ	0xFDB
 16992                           fsr2h	equ	0xFDA
 16993                           fsr2l	equ	0xFD9
 16994                           status	equ	0xFD8
 16995                           
 16996 ;; *************** function _mac_setToBroadcast *****************
 16997 ;; Defined at:
 16998 ;;		line 26 in file "src/eth/mac.c"
 16999 ;; Parameters:    Size  Location     Type
 17000 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 17001 ;;		 -> arp_send@destination(6), 
 17002 ;; Auto vars:     Size  Location     Type
 17003 ;;  i               1    2[BANK0 ] unsigned char 
 17004 ;; Return value:  Size  Location     Type
 17005 ;;                  1    wreg      void 
 17006 ;; Registers used:
 17007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 17008 ;; Tracked objects:
 17009 ;;		On entry : 0/0
 17010 ;;		On exit  : 0/0
 17011 ;;		Unchanged: 0/0
 17012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17013 ;;      Params:         0       2       0       0       0       0       0       0       0
 17014 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17016 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17017 ;;Total ram usage:        3 bytes
 17018 ;; Hardware stack levels used:    1
 17019 ;; Hardware stack levels required when called:    4
 17020 ;; This function calls:
 17021 ;;		Nothing
 17022 ;; This function is called by:
 17023 ;;		_arp_send
 17024 ;; This function uses a non-reentrant model
 17025 ;;
 17026                           
 17027                           	psect	text69
 17028  004ADA                     __ptext69:
 17029                           	opt stack 0
 17030  004ADA                     _mac_setToBroadcast:
 17031                           	opt stack 21
 17032                           
 17033                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 17034                           
 17035                           ;incstack = 0
 17036  004ADA  0E00               	movlw	0
 17037  004ADC  0100               	movlb	0	; () banked
 17038  004ADE  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 17039  004AE0                     l8109:
 17040                           
 17041                           ; BSR set to: 0
 17042  004AE0  0E05               	movlw	5
 17043  004AE2  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 17044  004AE4  D001               	goto	l379
 17045  004AE6  0012               	return	
 17046  004AE8                     l379:
 17047                           
 17048                           ; BSR set to: 0
 17049                           ;mac.c: 28: mac->address[i] = 0xff;
 17050                           
 17051                           ; BSR set to: 0
 17052  004AE8  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 17053  004AEA  0D01               	mullw	1
 17054  004AEC  50F3               	movf	prodl,w,c
 17055  004AEE  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 17056  004AF0  6ED9               	movwf	fsr2l,c
 17057  004AF2  50F4               	movf	prodh,w,c
 17058  004AF4  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 17059  004AF6  6EDA               	movwf	fsr2h,c
 17060  004AF8  0EFF               	movlw	255
 17061  004AFA  6EDF               	movwf	indf2,c
 17062                           
 17063                           ; BSR set to: 0
 17064  004AFC  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 17065  004AFE  D7F0               	goto	l8109
 17066  004B00                     __end_of_mac_setToBroadcast:
 17067                           	opt stack 0
 17068                           tblptru	equ	0xFF8
 17069                           tblptrh	equ	0xFF7
 17070                           tblptrl	equ	0xFF6
 17071                           tablat	equ	0xFF5
 17072                           prodh	equ	0xFF4
 17073                           prodl	equ	0xFF3
 17074                           intcon	equ	0xFF2
 17075                           intcon3	equ	0xFF0
 17076                           indf0	equ	0xFEF
 17077                           postinc0	equ	0xFEE
 17078                           plusw0	equ	0xFEB
 17079                           fsr0h	equ	0xFEA
 17080                           fsr0l	equ	0xFE9
 17081                           wreg	equ	0xFE8
 17082                           indf1	equ	0xFE7
 17083                           postinc1	equ	0xFE6
 17084                           postdec1	equ	0xFE5
 17085                           plusw1	equ	0xFE3
 17086                           fsr1h	equ	0xFE2
 17087                           fsr1l	equ	0xFE1
 17088                           indf2	equ	0xFDF
 17089                           postinc2	equ	0xFDE
 17090                           postdec2	equ	0xFDD
 17091                           plusw2	equ	0xFDB
 17092                           fsr2h	equ	0xFDA
 17093                           fsr2l	equ	0xFD9
 17094                           status	equ	0xFD8
 17095                           
 17096 ;; *************** function _ethernet_txFrameRequest *****************
 17097 ;; Defined at:
 17098 ;;		line 30 in file "src/eth/ethernet.c"
 17099 ;; Parameters:    Size  Location     Type
 17100 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 17101 ;;		 -> arp_send@ethFrame(34), 
 17102 ;; Auto vars:     Size  Location     Type
 17103 ;;  err             3   68[BANK0 ] struct error
 17104 ;; Return value:  Size  Location     Type
 17105 ;;                  3   66[BANK0 ] struct error
 17106 ;; Registers used:
 17107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17108 ;; Tracked objects:
 17109 ;;		On entry : 0/0
 17110 ;;		On exit  : 0/0
 17111 ;;		Unchanged: 0/0
 17112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17113 ;;      Params:         0       2       0       0       0       0       0       0       0
 17114 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17115 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17116 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17117 ;;Total ram usage:        5 bytes
 17118 ;; Hardware stack levels used:    1
 17119 ;; Hardware stack levels required when called:    8
 17120 ;; This function calls:
 17121 ;;		_ethernetController_writeDestinationMACAddress
 17122 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 17123 ;;		_memory_txFrameRequest
 17124 ;; This function is called by:
 17125 ;;		_arp_send
 17126 ;;		_ipv4_txFrameRequest
 17127 ;; This function uses a non-reentrant model
 17128 ;;
 17129                           
 17130                           	psect	text70
 17131  003344                     __ptext70:
 17132                           	opt stack 0
 17133  003344                     _ethernet_txFrameRequest:
 17134                           	opt stack 17
 17135                           
 17136                           ;ethernet.c: 32: error_t err;
 17137                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 17138                           
 17139                           ; BSR set to: 0
 17140                           ;incstack = 0
 17141  003344  0E02               	movlw	2
 17142  003346  0100               	movlb	0	; () banked
 17143  003348  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17144                           
 17145                           ;ethernet.c: 34: err.code = (uint16_t)0;
 17146  00334A  0E00               	movlw	0
 17147  00334C  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17148  00334E  0E00               	movlw	0
 17149  003350  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 17153  003352  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 17154  003356  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 17155  00335A  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 17156  00335E  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 17157  003362  EC09  F003         	call	_memory_txFrameRequest	;wreg free
 17158  003366  0100               	movlb	0	; () banked
 17159  003368  EE20 F010          	lfsr	2,16
 17160  00336C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17161  00336E  26D9               	addwf	fsr2l,f,c
 17162  003370  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17163  003372  22DA               	addwfc	fsr2h,f,c
 17164  003374  0E08               	movlw	8
 17165  003376                     u8951:
 17166  003376  CFEB FFDB          	movff	plusw0,plusw2
 17167  00337A  06E8               	decf	wreg,f,c
 17168  00337C  E2FC               	bc	u8951
 17169                           
 17170                           ; BSR set to: 0
 17171                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 17172  00337E  EE20 F017          	lfsr	2,23
 17173  003382  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17174  003384  26D9               	addwf	fsr2l,f,c
 17175  003386  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17176  003388  22DA               	addwfc	fsr2h,f,c
 17177  00338A  50DF               	movf	indf2,w,c
 17178  00338C  B4D8               	btfsc	status,2,c
 17179  00338E  D007               	goto	l359
 17180                           
 17181                           ; BSR set to: 0
 17182                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 17183  003390  0E00               	movlw	0
 17184  003392  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17185                           
 17186                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 17187  003394  0E00               	movlw	0
 17188  003396  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17189  003398  0E65               	movlw	101
 17190  00339A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;ethernet.c: 41: return err;
 17194                           ;	Return value of _ethernet_txFrameRequest is never used
 17195  00339C  0012               	return	
 17196  00339E                     l359:
 17197                           
 17198                           ; BSR set to: 0
 17199                           ;ethernet.c: 42: }
 17200                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 17201                           
 17202                           ; BSR set to: 0
 17203  00339E  EE20 F016          	lfsr	2,22
 17204  0033A2  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17205  0033A4  26D9               	addwf	fsr2l,f,c
 17206  0033A6  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17207  0033A8  22DA               	addwfc	fsr2h,f,c
 17208  0033AA  50DF               	movf	indf2,w,c
 17209  0033AC  A4D8               	btfss	status,2,c
 17210  0033AE  D007               	goto	l361
 17211                           
 17212                           ; BSR set to: 0
 17213                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 17214  0033B0  0E00               	movlw	0
 17215  0033B2  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 17216                           
 17217                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 17218  0033B4  0E00               	movlw	0
 17219  0033B6  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 17220  0033B8  0EC7               	movlw	199
 17221  0033BA  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 17222                           
 17223                           ; BSR set to: 0
 17224                           ;ethernet.c: 47: return err;
 17225                           ;	Return value of _ethernet_txFrameRequest is never used
 17226  0033BC  0012               	return	
 17227  0033BE                     l361:
 17228                           
 17229                           ; BSR set to: 0
 17230                           ;ethernet.c: 48: }
 17231                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 17232                           
 17233                           ; BSR set to: 0
 17234  0033BE  EE20 F008          	lfsr	2,8
 17235  0033C2  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17236  0033C4  26D9               	addwf	fsr2l,f,c
 17237  0033C6  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17238  0033C8  22DA               	addwfc	fsr2h,f,c
 17239  0033CA  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 17240  0033CE  0E05               	movlw	5
 17241  0033D0                     u8981:
 17242  0033D0  CFDB FFEB          	movff	plusw2,plusw0
 17243  0033D4  06E8               	decf	wreg,f,c
 17244  0033D6  E2FC               	bc	u8981
 17245  0033D8  EE20 F010          	lfsr	2,16
 17246  0033DC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17247  0033DE  26D9               	addwf	fsr2l,f,c
 17248  0033E0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17249  0033E2  22DA               	addwfc	fsr2h,f,c
 17250  0033E4  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 17251  0033E8  0E08               	movlw	8
 17252  0033EA                     u8991:
 17253  0033EA  CFDB FFEB          	movff	plusw2,plusw0
 17254  0033EE  06E8               	decf	wreg,f,c
 17255  0033F0  E2FC               	bc	u8991
 17256  0033F2  EC4B  F01E         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 17257                           
 17258                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 17259  0033F6  0100               	movlb	0	; () banked
 17260  0033F8  EE20 F00E          	lfsr	2,14
 17261  0033FC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17262  0033FE  26D9               	addwf	fsr2l,f,c
 17263  003400  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17264  003402  22DA               	addwfc	fsr2h,f,c
 17265  003404  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 17266  003408  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 17267  00340C  EE20 F010          	lfsr	2,16
 17268  003410  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 17269  003412  26D9               	addwf	fsr2l,f,c
 17270  003414  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 17271  003416  22DA               	addwfc	fsr2h,f,c
 17272  003418  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 17273  00341C  0E08               	movlw	8
 17274  00341E                     u9001:
 17275  00341E  CFDB FFEB          	movff	plusw2,plusw0
 17276  003422  06E8               	decf	wreg,f,c
 17277  003424  E2FC               	bc	u9001
 17278  003426  EC84  F022         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 17279  00342A  0012               	return	
 17280  00342C                     __end_of_ethernet_txFrameRequest:
 17281                           	opt stack 0
 17282                           tblptru	equ	0xFF8
 17283                           tblptrh	equ	0xFF7
 17284                           tblptrl	equ	0xFF6
 17285                           tablat	equ	0xFF5
 17286                           prodh	equ	0xFF4
 17287                           prodl	equ	0xFF3
 17288                           intcon	equ	0xFF2
 17289                           intcon3	equ	0xFF0
 17290                           indf0	equ	0xFEF
 17291                           postinc0	equ	0xFEE
 17292                           plusw0	equ	0xFEB
 17293                           fsr0h	equ	0xFEA
 17294                           fsr0l	equ	0xFE9
 17295                           wreg	equ	0xFE8
 17296                           indf1	equ	0xFE7
 17297                           postinc1	equ	0xFE6
 17298                           postdec1	equ	0xFE5
 17299                           plusw1	equ	0xFE3
 17300                           fsr1h	equ	0xFE2
 17301                           fsr1l	equ	0xFE1
 17302                           indf2	equ	0xFDF
 17303                           postinc2	equ	0xFDE
 17304                           postdec2	equ	0xFDD
 17305                           plusw2	equ	0xFDB
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310 ;; *************** function _memory_txFrameRequest *****************
 17311 ;; Defined at:
 17312 ;;		line 133 in file "src/mem/memoryController.c"
 17313 ;; Parameters:    Size  Location     Type
 17314 ;;  length          2   36[BANK0 ] unsigned int 
 17315 ;; Auto vars:     Size  Location     Type
 17316 ;;  i               1   54[BANK0 ] unsigned char 
 17317 ;;  i               1   55[BANK0 ] unsigned char 
 17318 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 17319 ;;  field           9   56[BANK0 ] struct memoryField
 17320 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 17321 ;; Return value:  Size  Location     Type
 17322 ;;                  9   36[BANK0 ] struct memoryField
 17323 ;; Registers used:
 17324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17325 ;; Tracked objects:
 17326 ;;		On entry : 0/0
 17327 ;;		On exit  : 0/0
 17328 ;;		Unchanged: 0/0
 17329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17330 ;;      Params:         0       9       0       0       0       0       0       0       0
 17331 ;;      Locals:         0      15       0       0       0       0       0       0       0
 17332 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17333 ;;      Totals:         0      30       0       0       0       0       0       0       0
 17334 ;;Total ram usage:       30 bytes
 17335 ;; Hardware stack levels used:    1
 17336 ;; Hardware stack levels required when called:    6
 17337 ;; This function calls:
 17338 ;;		___wmul
 17339 ;;		_checkForOverlap
 17340 ;;		_entireMemoryEmpty
 17341 ;;		_entireMemoryFull
 17342 ;; This function is called by:
 17343 ;;		_ethernet_txFrameRequest
 17344 ;; This function uses a non-reentrant model
 17345 ;;
 17346                           
 17347                           	psect	text71
 17348  000612                     __ptext71:
 17349                           	opt stack 0
 17350  000612                     _memory_txFrameRequest:
 17351                           	opt stack 18
 17352                           
 17353                           ;memoryController.c: 134: memoryField_t field;
 17354                           ;memoryController.c: 135: uint8_t freeIndex = 0;
 17355                           
 17356                           ;incstack = 0
 17357  000612  0E00               	movlw	0
 17358  000614  0100               	movlb	0	; () banked
 17359  000616  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 17360                           
 17361                           ; BSR set to: 0
 17362                           ;memoryController.c: 137: if (length == 0) {
 17363  000618  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17364  00061A  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17365  00061C  A4D8               	btfss	status,2,c
 17366  00061E  D00C               	goto	l462
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;memoryController.c: 138: field.fOutOfMemory = 1;
 17370  000620  0E01               	movlw	1
 17371  000622  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17372                           
 17373                           ; BSR set to: 0
 17374                           ;memoryController.c: 139: return field;
 17375  000624  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17376  000628  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17377  00062C  0E08               	movlw	8
 17378  00062E                     u8501:
 17379  00062E  CFDB FFEB          	movff	plusw2,plusw0
 17380  000632  06E8               	decf	wreg,f,c
 17381  000634  E2FC               	bc	u8501
 17382                           
 17383                           ; BSR set to: 0
 17384  000636  0012               	return	
 17385  000638                     l462:
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;memoryController.c: 140: }
 17389                           ;memoryController.c: 142: if (entireMemoryFull()) {
 17390                           
 17391                           ; BSR set to: 0
 17392  000638  ECFC  F023         	call	_entireMemoryFull	;wreg free
 17393  00063C  A0D8               	btfss	status,0,c
 17394  00063E  D00D               	goto	l464
 17395                           
 17396                           ;memoryController.c: 143: field.fOutOfMemory = 1;
 17397  000640  0E01               	movlw	1
 17398  000642  0100               	movlb	0	; () banked
 17399  000644  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17400                           
 17401                           ; BSR set to: 0
 17402                           ;memoryController.c: 144: return field;
 17403  000646  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17404  00064A  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17405  00064E  0E08               	movlw	8
 17406  000650                     u8521:
 17407  000650  CFDB FFEB          	movff	plusw2,plusw0
 17408  000654  06E8               	decf	wreg,f,c
 17409  000656  E2FC               	bc	u8521
 17410                           
 17411                           ; BSR set to: 0
 17412  000658  0012               	return	
 17413  00065A                     l464:
 17414                           
 17415                           ;memoryController.c: 145: }
 17416                           ;memoryController.c: 146: if (entireMemoryEmpty()) {
 17417                           
 17418                           ; BSR set to: 0
 17419  00065A  EC18  F024         	call	_entireMemoryEmpty	;wreg free
 17420  00065E  A0D8               	btfss	status,0,c
 17421  000660  D238               	goto	l489
 17422                           
 17423                           ;memoryController.c: 148: if ((0x0000 + length) > 0x3000 - 1) {
 17424  000662  0E30               	movlw	48
 17425  000664  0100               	movlb	0	; () banked
 17426  000666  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17427  000668  A0D8               	btfss	status,0,c
 17428  00066A  D00C               	goto	l466
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;memoryController.c: 149: field.fOutOfMemory = 1;
 17432  00066C  0E01               	movlw	1
 17433  00066E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17434                           
 17435                           ; BSR set to: 0
 17436                           ;memoryController.c: 150: return field;
 17437  000670  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17438  000674  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17439  000678  0E08               	movlw	8
 17440  00067A                     u8551:
 17441  00067A  CFDB FFEB          	movff	plusw2,plusw0
 17442  00067E  06E8               	decf	wreg,f,c
 17443  000680  E2FC               	bc	u8551
 17444                           
 17445                           ; BSR set to: 0
 17446  000682  0012               	return	
 17447  000684                     l466:
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;memoryController.c: 152: occupiedMemory[0].start = 0x0000;
 17451                           
 17452                           ; BSR set to: 0
 17453  000684  0E00               	movlw	0
 17454  000686  0101               	movlb	1	; () banked
 17455  000688  6F8C               	movwf	(_occupiedMemory+1)& (0+255),b
 17456  00068A  0E00               	movlw	0
 17457  00068C  6F8B               	movwf	_occupiedMemory& (0+255),b
 17458                           
 17459                           ; BSR set to: 1
 17460                           ;memoryController.c: 153: occupiedMemory[0].end = 0x0000 + length;
 17461  00068E  C084  F18D         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 17462  000692  C085  F18E         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 17463                           
 17464                           ; BSR set to: 1
 17465                           ;memoryController.c: 154: occupiedMemory[0].length = length;
 17466  000696  C084  F18F         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 17467  00069A  C085  F190         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 17468                           
 17469                           ;memoryController.c: 155: occupiedMemory[0].fIsAssigned = 1;
 17470  00069E  0E01               	movlw	1
 17471  0006A0  6F91               	movwf	(_occupiedMemory+6)& (0+255),b
 17472                           
 17473                           ;memoryController.c: 156: occupiedMemory[0].index = 0;
 17474  0006A2  0E00               	movlw	0
 17475  0006A4  6F93               	movwf	(_occupiedMemory+8)& (0+255),b
 17476                           
 17477                           ; BSR set to: 1
 17478                           ;memoryController.c: 157: return occupiedMemory[0];
 17479  0006A6  EE21  F08B         	lfsr	2,_occupiedMemory
 17480  0006AA  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17481  0006AE  0E08               	movlw	8
 17482  0006B0                     u8561:
 17483  0006B0  CFDB FFEB          	movff	plusw2,plusw0
 17484  0006B4  06E8               	decf	wreg,f,c
 17485  0006B6  E2FC               	bc	u8561
 17486                           
 17487                           ; BSR set to: 1
 17488  0006B8  0012               	return	
 17489  0006BA                     
 17490                           ;memoryController.c: 163: if (!occupiedMemory[freeIndex].fIsAssigned) {
 17491                           
 17492                           ; BSR set to: 1
 17493  0006BA  0100               	movlb	0	; () banked
 17494  0006BC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17495  0006BE  0D09               	mullw	9
 17496  0006C0  0E06               	movlw	6
 17497  0006C2  26F3               	addwf	prodl,f,c
 17498  0006C4  0E00               	movlw	0
 17499  0006C6  22F4               	addwfc	prodh,f,c
 17500  0006C8  0E8B               	movlw	low _occupiedMemory
 17501  0006CA  24F3               	addwf	prodl,w,c
 17502  0006CC  6ED9               	movwf	fsr2l,c
 17503  0006CE  0E01               	movlw	high _occupiedMemory
 17504  0006D0  20F4               	addwfc	prodh,w,c
 17505  0006D2  6EDA               	movwf	fsr2h,c
 17506  0006D4  50DF               	movf	indf2,w,c
 17507  0006D6  A4D8               	btfss	status,2,c
 17508  0006D8  D1EB               	goto	l488
 17509                           
 17510                           ; BSR set to: 0
 17511                           ;memoryController.c: 167: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 17512  0006DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17513  0006DC  B4D8               	btfsc	status,2,c
 17514  0006DE  D007               	goto	l472
 17515                           
 17516                           ; BSR set to: 0
 17517  0006E0  0EFF               	movlw	255
 17518  0006E2  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17519  0006E4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17520  0006E6  6B94               	clrf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17521  0006E8  0EFF               	movlw	255
 17522  0006EA  2394               	addwfc	(_memory_txFrameRequest$1183+1)& (0+255),f,b
 17523  0006EC  D004               	goto	l474
 17524  0006EE                     l472:
 17525                           
 17526                           ; BSR set to: 0
 17527                           
 17528                           ; BSR set to: 0
 17529  0006EE  0E00               	movlw	0
 17530  0006F0  6F94               	movwf	(_memory_txFrameRequest$1183+1)& (0+255),b
 17531  0006F2  0E07               	movlw	7
 17532  0006F4  6F93               	movwf	_memory_txFrameRequest$1183& (0+255),b
 17533  0006F6                     l474:
 17534                           
 17535                           ; BSR set to: 0
 17536                           
 17537                           ; BSR set to: 0
 17538  0006F6  C093  F060         	movff	_memory_txFrameRequest$1183,___wmul@multiplier
 17539  0006FA  C094  F061         	movff	_memory_txFrameRequest$1183+1,___wmul@multiplier+1
 17540  0006FE  0E00               	movlw	0
 17541  000700  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 17542  000702  0E09               	movlw	9
 17543  000704  6F62               	movwf	___wmul@multiplicand& (0+255),b
 17544  000706  EC1E  F025         	call	___wmul	;wreg free
 17545  00070A  0E02               	movlw	2
 17546  00070C  0100               	movlb	0	; () banked
 17547  00070E  2760               	addwf	?___wmul& (0+255),f,b
 17548  000710  0E00               	movlw	0
 17549  000712  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 17550  000714  0E8B               	movlw	low _occupiedMemory
 17551  000716  2560               	addwf	?___wmul& (0+255),w,b
 17552  000718  6ED9               	movwf	fsr2l,c
 17553  00071A  0E01               	movlw	high _occupiedMemory
 17554  00071C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 17555  00071E  6EDA               	movwf	fsr2h,c
 17556  000720  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17557  000724  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17558  000728  0E01               	movlw	1
 17559  00072A  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17560  00072C  0E00               	movlw	0
 17561  00072E  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17562  000730  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17563  000732  0D09               	mullw	9
 17564  000734  0E8B               	movlw	low _occupiedMemory
 17565  000736  24F3               	addwf	prodl,w,c
 17566  000738  6ED9               	movwf	fsr2l,c
 17567  00073A  0E01               	movlw	high _occupiedMemory
 17568  00073C  20F4               	addwfc	prodh,w,c
 17569  00073E  6EDA               	movwf	fsr2h,c
 17570  000740  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17571  000744  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;memoryController.c: 168: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 17575  000748  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17576  00074A  0D09               	mullw	9
 17577  00074C  0E8B               	movlw	low _occupiedMemory
 17578  00074E  24F3               	addwf	prodl,w,c
 17579  000750  6ED9               	movwf	fsr2l,c
 17580  000752  0E01               	movlw	high _occupiedMemory
 17581  000754  20F4               	addwfc	prodh,w,c
 17582  000756  6EDA               	movwf	fsr2h,c
 17583  000758  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17584  00075C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17585  000760  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17586  000762  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17587  000764  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17588  000766  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17589  000768  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 17590  00076A  0E30               	movlw	48
 17591  00076C  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 17592  00076E  A0D8               	btfss	status,0,c
 17593  000770  D0CF               	goto	l476
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;memoryController.c: 169: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 17597  000772  0E07               	movlw	7
 17598  000774  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17599  000776  A4D8               	btfss	status,2,c
 17600  000778  D0CB               	goto	l476
 17601                           
 17602                           ; BSR set to: 0
 17603  00077A  0101               	movlb	1	; () banked
 17604  00077C  5191               	movf	(_occupiedMemory+6)& (0+255),w,b
 17605  00077E  A4D8               	btfss	status,2,c
 17606  000780  D0C7               	goto	l476
 17607                           
 17608                           ; BSR set to: 1
 17609                           ;memoryController.c: 170: occupiedMemory[freeIndex].length = length;
 17610  000782  0100               	movlb	0	; () banked
 17611  000784  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17612  000786  0D09               	mullw	9
 17613  000788  0E04               	movlw	4
 17614  00078A  26F3               	addwf	prodl,f,c
 17615  00078C  0E00               	movlw	0
 17616  00078E  22F4               	addwfc	prodh,f,c
 17617  000790  0E8B               	movlw	low _occupiedMemory
 17618  000792  24F3               	addwf	prodl,w,c
 17619  000794  6ED9               	movwf	fsr2l,c
 17620  000796  0E01               	movlw	high _occupiedMemory
 17621  000798  20F4               	addwfc	prodh,w,c
 17622  00079A  6EDA               	movwf	fsr2h,c
 17623  00079C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 17624  0007A0  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 17625                           
 17626                           ;memoryController.c: 171: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 17627  0007A4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17628  0007A6  0D09               	mullw	9
 17629  0007A8  0E04               	movlw	4
 17630  0007AA  26F3               	addwf	prodl,f,c
 17631  0007AC  0E00               	movlw	0
 17632  0007AE  22F4               	addwfc	prodh,f,c
 17633  0007B0  0E8B               	movlw	low _occupiedMemory
 17634  0007B2  24F3               	addwf	prodl,w,c
 17635  0007B4  6ED9               	movwf	fsr2l,c
 17636  0007B6  0E01               	movlw	high _occupiedMemory
 17637  0007B8  20F4               	addwfc	prodh,w,c
 17638  0007BA  6EDA               	movwf	fsr2h,c
 17639  0007BC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17640  0007C0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17641  0007C4  0EFF               	movlw	255
 17642  0007C6  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 17643  0007C8  0E2F               	movlw	47
 17644  0007CA  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 17645  0007CC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17646  0007CE  0D09               	mullw	9
 17647  0007D0  0E8B               	movlw	low _occupiedMemory
 17648  0007D2  24F3               	addwf	prodl,w,c
 17649  0007D4  6ED9               	movwf	fsr2l,c
 17650  0007D6  0E01               	movlw	high _occupiedMemory
 17651  0007D8  20F4               	addwfc	prodh,w,c
 17652  0007DA  6EDA               	movwf	fsr2h,c
 17653  0007DC  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 17654  0007E0  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 17655  0007E4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17656  0007E6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17657  0007E8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17658  0007EA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17659  0007EC  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 17660  0007EE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17661  0007F0  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 17662  0007F2  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17663  0007F4  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17664  0007F6  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17665  0007F8  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 17666  0007FA  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 17667  0007FC  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 17668  0007FE  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 17669  000800  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 17670  000802  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 17671  000804  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17672  000806  0D09               	mullw	9
 17673  000808  0E02               	movlw	2
 17674  00080A  26F3               	addwf	prodl,f,c
 17675  00080C  0E00               	movlw	0
 17676  00080E  22F4               	addwfc	prodh,f,c
 17677  000810  0E8B               	movlw	low _occupiedMemory
 17678  000812  24F3               	addwf	prodl,w,c
 17679  000814  6ED9               	movwf	fsr2l,c
 17680  000816  0E01               	movlw	high _occupiedMemory
 17681  000818  20F4               	addwfc	prodh,w,c
 17682  00081A  6EDA               	movwf	fsr2h,c
 17683  00081C  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 17684  000820  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 17685                           
 17686                           ; BSR set to: 0
 17687                           ;memoryController.c: 172: for (uint8_t i = 0; i < 8; i++) {
 17688  000824  0E00               	movlw	0
 17689  000826  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 17690  000828                     l7907:
 17691                           
 17692                           ; BSR set to: 0
 17693  000828  0E07               	movlw	7
 17694  00082A  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 17695  00082C  D001               	goto	l477
 17696  00082E  D044               	goto	u8690
 17697  000830                     l477:
 17698                           
 17699                           ; BSR set to: 0
 17700                           ;memoryController.c: 173: if (i == freeIndex)
 17701                           
 17702                           ; BSR set to: 0
 17703  000830  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17704  000832  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 17705  000834  B4D8               	btfsc	status,2,c
 17706  000836  D03E               	goto	l481
 17707                           
 17708                           ; BSR set to: 0
 17709                           ;memoryController.c: 175: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 17710                           
 17711                           ; BSR set to: 0
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;memoryController.c: 174: continue;
 17715  000838  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17716  00083A  0D09               	mullw	9
 17717  00083C  0E8B               	movlw	low _occupiedMemory
 17718  00083E  24F3               	addwf	prodl,w,c
 17719  000840  6ED9               	movwf	fsr2l,c
 17720  000842  0E01               	movlw	high _occupiedMemory
 17721  000844  20F4               	addwfc	prodh,w,c
 17722  000846  6EDA               	movwf	fsr2h,c
 17723  000848  EE00  F072         	lfsr	0,checkForOverlap@a
 17724  00084C  0E08               	movlw	8
 17725  00084E                     u8641:
 17726  00084E  CFDB FFEB          	movff	plusw2,plusw0
 17727  000852  06E8               	decf	wreg,f,c
 17728  000854  E2FC               	bc	u8641
 17729  000856  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17730  000858  0D09               	mullw	9
 17731  00085A  0E8B               	movlw	low _occupiedMemory
 17732  00085C  24F3               	addwf	prodl,w,c
 17733  00085E  6ED9               	movwf	fsr2l,c
 17734  000860  0E01               	movlw	high _occupiedMemory
 17735  000862  20F4               	addwfc	prodh,w,c
 17736  000864  6EDA               	movwf	fsr2h,c
 17737  000866  EE00  F07B         	lfsr	0,checkForOverlap@b
 17738  00086A  0E08               	movlw	8
 17739  00086C                     u8651:
 17740  00086C  CFDB FFEB          	movff	plusw2,plusw0
 17741  000870  06E8               	decf	wreg,f,c
 17742  000872  E2FC               	bc	u8651
 17743  000874  EC1A  F016         	call	_checkForOverlap	;wreg free
 17744  000878  0100               	movlb	0	; () banked
 17745  00087A  A0D8               	btfss	status,0,c
 17746  00087C  D01B               	goto	l481
 17747                           
 17748                           ; BSR set to: 0
 17749  00087E  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 17750  000880  0D09               	mullw	9
 17751  000882  0E06               	movlw	6
 17752  000884  26F3               	addwf	prodl,f,c
 17753  000886  0E00               	movlw	0
 17754  000888  22F4               	addwfc	prodh,f,c
 17755  00088A  0E8B               	movlw	low _occupiedMemory
 17756  00088C  24F3               	addwf	prodl,w,c
 17757  00088E  6ED9               	movwf	fsr2l,c
 17758  000890  0E01               	movlw	high _occupiedMemory
 17759  000892  20F4               	addwfc	prodh,w,c
 17760  000894  6EDA               	movwf	fsr2h,c
 17761  000896  50DF               	movf	indf2,w,c
 17762  000898  B4D8               	btfsc	status,2,c
 17763  00089A  D00C               	goto	l481
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;memoryController.c: 177: field.fOutOfMemory = 1;
 17767  00089C  0E01               	movlw	1
 17768  00089E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 17769                           
 17770                           ; BSR set to: 0
 17771                           ;memoryController.c: 178: return field;
 17772  0008A0  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 17773  0008A4  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17774  0008A8  0E08               	movlw	8
 17775  0008AA                     u8681:
 17776  0008AA  CFDB FFEB          	movff	plusw2,plusw0
 17777  0008AE  06E8               	decf	wreg,f,c
 17778  0008B0  E2FC               	bc	u8681
 17779                           
 17780                           ; BSR set to: 0
 17781  0008B2  0012               	return	
 17782  0008B4                     l481:
 17783                           
 17784                           ; BSR set to: 0
 17785                           
 17786                           ; BSR set to: 0
 17787                           
 17788                           ; BSR set to: 0
 17789  0008B4  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 17790  0008B6  D7B8               	goto	l7907
 17791  0008B8                     u8690:
 17792                           
 17793                           ; BSR set to: 0
 17794                           ;memoryController.c: 179: }
 17795                           ;memoryController.c: 180: }
 17796                           ;memoryController.c: 181: occupiedMemory[freeIndex].fIsAssigned = 1;
 17797                           
 17798                           ; BSR set to: 0
 17799  0008B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17800  0008BA  0D09               	mullw	9
 17801  0008BC  0E06               	movlw	6
 17802  0008BE  26F3               	addwf	prodl,f,c
 17803  0008C0  0E00               	movlw	0
 17804  0008C2  22F4               	addwfc	prodh,f,c
 17805  0008C4  0E8B               	movlw	low _occupiedMemory
 17806  0008C6  24F3               	addwf	prodl,w,c
 17807  0008C8  6ED9               	movwf	fsr2l,c
 17808  0008CA  0E01               	movlw	high _occupiedMemory
 17809  0008CC  20F4               	addwfc	prodh,w,c
 17810  0008CE  6EDA               	movwf	fsr2h,c
 17811  0008D0  0E01               	movlw	1
 17812  0008D2  6EDF               	movwf	indf2,c
 17813                           
 17814                           ;memoryController.c: 182: occupiedMemory[freeIndex].index = freeIndex;
 17815  0008D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17816  0008D6  0D09               	mullw	9
 17817  0008D8  0E08               	movlw	8
 17818  0008DA  26F3               	addwf	prodl,f,c
 17819  0008DC  0E00               	movlw	0
 17820  0008DE  22F4               	addwfc	prodh,f,c
 17821  0008E0  0E8B               	movlw	low _occupiedMemory
 17822  0008E2  24F3               	addwf	prodl,w,c
 17823  0008E4  6ED9               	movwf	fsr2l,c
 17824  0008E6  0E01               	movlw	high _occupiedMemory
 17825  0008E8  20F4               	addwfc	prodh,w,c
 17826  0008EA  6EDA               	movwf	fsr2h,c
 17827  0008EC  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;memoryController.c: 183: return occupiedMemory[freeIndex];
 17831  0008F0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17832  0008F2  0D09               	mullw	9
 17833  0008F4  0E8B               	movlw	low _occupiedMemory
 17834  0008F6  24F3               	addwf	prodl,w,c
 17835  0008F8  6ED9               	movwf	fsr2l,c
 17836  0008FA  0E01               	movlw	high _occupiedMemory
 17837  0008FC  20F4               	addwfc	prodh,w,c
 17838  0008FE  6EDA               	movwf	fsr2h,c
 17839  000900  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 17840  000904  0E08               	movlw	8
 17841  000906                     u8701:
 17842  000906  CFDB FFEB          	movff	plusw2,plusw0
 17843  00090A  06E8               	decf	wreg,f,c
 17844  00090C  E2FC               	bc	u8701
 17845                           
 17846                           ; BSR set to: 0
 17847  00090E  0012               	return	
 17848  000910                     l476:
 17849                           
 17850                           ;memoryController.c: 184: }
 17851                           ;memoryController.c: 185: }
 17852                           ;memoryController.c: 187: uint8_t fNoOverlapMarker = 1;
 17853                           
 17854                           ; BSR set to: 0
 17855                           
 17856                           ; BSR set to: 0
 17857  000910  0E01               	movlw	1
 17858  000912  0100               	movlb	0	; () banked
 17859  000914  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17860                           
 17861                           ; BSR set to: 0
 17862                           ;memoryController.c: 188: uint8_t i;
 17863                           ;memoryController.c: 189: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 17864  000916  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17865  000918  0D09               	mullw	9
 17866  00091A  0E8B               	movlw	low _occupiedMemory
 17867  00091C  24F3               	addwf	prodl,w,c
 17868  00091E  6ED9               	movwf	fsr2l,c
 17869  000920  0E01               	movlw	high _occupiedMemory
 17870  000922  20F4               	addwfc	prodh,w,c
 17871  000924  6EDA               	movwf	fsr2h,c
 17872  000926  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 17873  00092A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 17874  00092E  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 17875  000930  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 17876  000932  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 17877  000934  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 17878  000936  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17879  000938  0D09               	mullw	9
 17880  00093A  0E02               	movlw	2
 17881  00093C  26F3               	addwf	prodl,f,c
 17882  00093E  0E00               	movlw	0
 17883  000940  22F4               	addwfc	prodh,f,c
 17884  000942  0E8B               	movlw	low _occupiedMemory
 17885  000944  24F3               	addwf	prodl,w,c
 17886  000946  6ED9               	movwf	fsr2l,c
 17887  000948  0E01               	movlw	high _occupiedMemory
 17888  00094A  20F4               	addwfc	prodh,w,c
 17889  00094C  6EDA               	movwf	fsr2h,c
 17890  00094E  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 17891  000952  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;memoryController.c: 190: for (i = 0; i < 8; i++) {
 17895  000956  0E00               	movlw	0
 17896  000958  6F97               	movwf	memory_txFrameRequest@i_1187& (0+255),b
 17897  00095A                     l7941:
 17898                           
 17899                           ; BSR set to: 0
 17900  00095A  0E07               	movlw	7
 17901  00095C  6597               	cpfsgt	memory_txFrameRequest@i_1187& (0+255),b
 17902  00095E  D001               	goto	l482
 17903  000960  D03A               	goto	u8770
 17904  000962                     l482:
 17905                           
 17906                           ; BSR set to: 0
 17907                           ;memoryController.c: 191: if (i == freeIndex)
 17908                           
 17909                           ; BSR set to: 0
 17910  000962  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17911  000964  1997               	xorwf	memory_txFrameRequest@i_1187& (0+255),w,b
 17912  000966  B4D8               	btfsc	status,2,c
 17913  000968  D034               	goto	l487
 17914                           
 17915                           ; BSR set to: 0
 17916                           ;memoryController.c: 193: if (!occupiedMemory[i].fIsAssigned) {
 17917                           
 17918                           ; BSR set to: 0
 17919                           
 17920                           ; BSR set to: 0
 17921                           ;memoryController.c: 192: continue;
 17922  00096A  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17923  00096C  0D09               	mullw	9
 17924  00096E  0E06               	movlw	6
 17925  000970  26F3               	addwf	prodl,f,c
 17926  000972  0E00               	movlw	0
 17927  000974  22F4               	addwfc	prodh,f,c
 17928  000976  0E8B               	movlw	low _occupiedMemory
 17929  000978  24F3               	addwf	prodl,w,c
 17930  00097A  6ED9               	movwf	fsr2l,c
 17931  00097C  0E01               	movlw	high _occupiedMemory
 17932  00097E  20F4               	addwfc	prodh,w,c
 17933  000980  6EDA               	movwf	fsr2h,c
 17934  000982  50DF               	movf	indf2,w,c
 17935  000984  B4D8               	btfsc	status,2,c
 17936  000986  D025               	goto	l487
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;memoryController.c: 196: }
 17940                           ;memoryController.c: 198: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 17941                           
 17942                           ; BSR set to: 0
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;memoryController.c: 194: continue;
 17946  000988  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 17947  00098A  0D09               	mullw	9
 17948  00098C  0E8B               	movlw	low _occupiedMemory
 17949  00098E  24F3               	addwf	prodl,w,c
 17950  000990  6ED9               	movwf	fsr2l,c
 17951  000992  0E01               	movlw	high _occupiedMemory
 17952  000994  20F4               	addwfc	prodh,w,c
 17953  000996  6EDA               	movwf	fsr2h,c
 17954  000998  EE00  F072         	lfsr	0,checkForOverlap@a
 17955  00099C  0E08               	movlw	8
 17956  00099E                     u8741:
 17957  00099E  CFDB FFEB          	movff	plusw2,plusw0
 17958  0009A2  06E8               	decf	wreg,f,c
 17959  0009A4  E2FC               	bc	u8741
 17960  0009A6  5197               	movf	memory_txFrameRequest@i_1187& (0+255),w,b
 17961  0009A8  0D09               	mullw	9
 17962  0009AA  0E8B               	movlw	low _occupiedMemory
 17963  0009AC  24F3               	addwf	prodl,w,c
 17964  0009AE  6ED9               	movwf	fsr2l,c
 17965  0009B0  0E01               	movlw	high _occupiedMemory
 17966  0009B2  20F4               	addwfc	prodh,w,c
 17967  0009B4  6EDA               	movwf	fsr2h,c
 17968  0009B6  EE00  F07B         	lfsr	0,checkForOverlap@b
 17969  0009BA  0E08               	movlw	8
 17970  0009BC                     u8751:
 17971  0009BC  CFDB FFEB          	movff	plusw2,plusw0
 17972  0009C0  06E8               	decf	wreg,f,c
 17973  0009C2  E2FC               	bc	u8751
 17974  0009C4  EC1A  F016         	call	_checkForOverlap	;wreg free
 17975  0009C8  0100               	movlb	0	; () banked
 17976  0009CA  A0D8               	btfss	status,0,c
 17977  0009CC  D002               	goto	l487
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;memoryController.c: 199: fNoOverlapMarker = 0;
 17981  0009CE  0E00               	movlw	0
 17982  0009D0  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 17983  0009D2                     l487:
 17984                           
 17985                           ; BSR set to: 0
 17986                           
 17987                           ; BSR set to: 0
 17988                           
 17989                           ; BSR set to: 0
 17990  0009D2  2B97               	incf	memory_txFrameRequest@i_1187& (0+255),f,b
 17991  0009D4  D7C2               	goto	l7941
 17992  0009D6                     u8770:
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;memoryController.c: 201: }
 17996                           ;memoryController.c: 202: if (fNoOverlapMarker) {
 17997                           
 17998                           ; BSR set to: 0
 17999  0009D6  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 18000  0009D8  B4D8               	btfsc	status,2,c
 18001  0009DA  D06A               	goto	l488
 18002                           
 18003                           ; BSR set to: 0
 18004                           ;memoryController.c: 203: occupiedMemory[freeIndex].fIsAssigned = 1;
 18005  0009DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18006  0009DE  0D09               	mullw	9
 18007  0009E0  0E06               	movlw	6
 18008  0009E2  26F3               	addwf	prodl,f,c
 18009  0009E4  0E00               	movlw	0
 18010  0009E6  22F4               	addwfc	prodh,f,c
 18011  0009E8  0E8B               	movlw	low _occupiedMemory
 18012  0009EA  24F3               	addwf	prodl,w,c
 18013  0009EC  6ED9               	movwf	fsr2l,c
 18014  0009EE  0E01               	movlw	high _occupiedMemory
 18015  0009F0  20F4               	addwfc	prodh,w,c
 18016  0009F2  6EDA               	movwf	fsr2h,c
 18017  0009F4  0E01               	movlw	1
 18018  0009F6  6EDF               	movwf	indf2,c
 18019                           
 18020                           ;memoryController.c: 204: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 18021  0009F8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18022  0009FA  0D09               	mullw	9
 18023  0009FC  0E8B               	movlw	low _occupiedMemory
 18024  0009FE  24F3               	addwf	prodl,w,c
 18025  000A00  6ED9               	movwf	fsr2l,c
 18026  000A02  0E01               	movlw	high _occupiedMemory
 18027  000A04  20F4               	addwfc	prodh,w,c
 18028  000A06  6EDA               	movwf	fsr2h,c
 18029  000A08  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 18030  000A0C  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 18031  000A10  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 18032  000A12  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 18033  000A14  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 18034  000A16  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 18035  000A18  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18036  000A1A  0D09               	mullw	9
 18037  000A1C  0E02               	movlw	2
 18038  000A1E  26F3               	addwf	prodl,f,c
 18039  000A20  0E00               	movlw	0
 18040  000A22  22F4               	addwfc	prodh,f,c
 18041  000A24  0E8B               	movlw	low _occupiedMemory
 18042  000A26  24F3               	addwf	prodl,w,c
 18043  000A28  6ED9               	movwf	fsr2l,c
 18044  000A2A  0E01               	movlw	high _occupiedMemory
 18045  000A2C  20F4               	addwfc	prodh,w,c
 18046  000A2E  6EDA               	movwf	fsr2h,c
 18047  000A30  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 18048  000A34  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 18049                           
 18050                           ;memoryController.c: 205: occupiedMemory[freeIndex].fOutOfMemory = 0;
 18051  000A38  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18052  000A3A  0D09               	mullw	9
 18053  000A3C  0E07               	movlw	7
 18054  000A3E  26F3               	addwf	prodl,f,c
 18055  000A40  0E00               	movlw	0
 18056  000A42  22F4               	addwfc	prodh,f,c
 18057  000A44  0E8B               	movlw	low _occupiedMemory
 18058  000A46  24F3               	addwf	prodl,w,c
 18059  000A48  6ED9               	movwf	fsr2l,c
 18060  000A4A  0E01               	movlw	high _occupiedMemory
 18061  000A4C  20F4               	addwfc	prodh,w,c
 18062  000A4E  6EDA               	movwf	fsr2h,c
 18063  000A50  0E00               	movlw	0
 18064  000A52  6EDF               	movwf	indf2,c
 18065                           
 18066                           ;memoryController.c: 206: occupiedMemory[freeIndex].length = length;
 18067  000A54  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18068  000A56  0D09               	mullw	9
 18069  000A58  0E04               	movlw	4
 18070  000A5A  26F3               	addwf	prodl,f,c
 18071  000A5C  0E00               	movlw	0
 18072  000A5E  22F4               	addwfc	prodh,f,c
 18073  000A60  0E8B               	movlw	low _occupiedMemory
 18074  000A62  24F3               	addwf	prodl,w,c
 18075  000A64  6ED9               	movwf	fsr2l,c
 18076  000A66  0E01               	movlw	high _occupiedMemory
 18077  000A68  20F4               	addwfc	prodh,w,c
 18078  000A6A  6EDA               	movwf	fsr2h,c
 18079  000A6C  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 18080  000A70  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 18081                           
 18082                           ;memoryController.c: 207: occupiedMemory[freeIndex].index = freeIndex;
 18083  000A74  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18084  000A76  0D09               	mullw	9
 18085  000A78  0E08               	movlw	8
 18086  000A7A  26F3               	addwf	prodl,f,c
 18087  000A7C  0E00               	movlw	0
 18088  000A7E  22F4               	addwfc	prodh,f,c
 18089  000A80  0E8B               	movlw	low _occupiedMemory
 18090  000A82  24F3               	addwf	prodl,w,c
 18091  000A84  6ED9               	movwf	fsr2l,c
 18092  000A86  0E01               	movlw	high _occupiedMemory
 18093  000A88  20F4               	addwfc	prodh,w,c
 18094  000A8A  6EDA               	movwf	fsr2h,c
 18095  000A8C  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 18096                           
 18097                           ; BSR set to: 0
 18098                           ;memoryController.c: 208: return occupiedMemory[freeIndex];
 18099  000A90  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18100  000A92  0D09               	mullw	9
 18101  000A94  0E8B               	movlw	low _occupiedMemory
 18102  000A96  24F3               	addwf	prodl,w,c
 18103  000A98  6ED9               	movwf	fsr2l,c
 18104  000A9A  0E01               	movlw	high _occupiedMemory
 18105  000A9C  20F4               	addwfc	prodh,w,c
 18106  000A9E  6EDA               	movwf	fsr2h,c
 18107  000AA0  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18108  000AA4  0E08               	movlw	8
 18109  000AA6                     u8791:
 18110  000AA6  CFDB FFEB          	movff	plusw2,plusw0
 18111  000AAA  06E8               	decf	wreg,f,c
 18112  000AAC  E2FC               	bc	u8791
 18113                           
 18114                           ; BSR set to: 0
 18115  000AAE  0012               	return	
 18116  000AB0                     l488:
 18117                           
 18118                           ; BSR set to: 0
 18119                           ;memoryController.c: 209: }
 18120                           ;memoryController.c: 210: }
 18121                           ;memoryController.c: 211: freeIndex++;
 18122                           
 18123                           ; BSR set to: 0
 18124                           
 18125                           ; BSR set to: 0
 18126  000AB0  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;memoryController.c: 212: if (freeIndex == 8) {
 18130  000AB2  0E08               	movlw	8
 18131  000AB4  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 18132  000AB6  A4D8               	btfss	status,2,c
 18133  000AB8  D00C               	goto	l489
 18134                           
 18135                           ; BSR set to: 0
 18136                           ;memoryController.c: 214: field.fOutOfMemory = 1;
 18137  000ABA  0E01               	movlw	1
 18138  000ABC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;memoryController.c: 215: return field;
 18142  000ABE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 18143  000AC2  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18144  000AC6  0E08               	movlw	8
 18145  000AC8                     u8811:
 18146  000AC8  CFDB FFEB          	movff	plusw2,plusw0
 18147  000ACC  06E8               	decf	wreg,f,c
 18148  000ACE  E2FC               	bc	u8811
 18149                           
 18150                           ; BSR set to: 0
 18151  000AD0  0012               	return	
 18152  000AD2                     l489:
 18153                           
 18154                           ; BSR set to: 0
 18155                           
 18156                           ; BSR set to: 0
 18157  000AD2  0E08               	movlw	8
 18158  000AD4  0100               	movlb	0	; () banked
 18159  000AD6  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 18160  000AD8  D5F0               	goto	l469
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;memoryController.c: 216: }
 18164                           ;memoryController.c: 217: }
 18165                           ;memoryController.c: 218: return field;
 18166                           
 18167                           ; BSR set to: 0
 18168  000ADA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 18169  000ADE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 18170  000AE2  0E08               	movlw	8
 18171  000AE4                     u8831:
 18172  000AE4  CFDB FFEB          	movff	plusw2,plusw0
 18173  000AE8  06E8               	decf	wreg,f,c
 18174  000AEA  E2FC               	bc	u8831
 18175  000AEC  0012               	return	
 18176  000AEE                     __end_of_memory_txFrameRequest:
 18177                           	opt stack 0
 18178                           tblptru	equ	0xFF8
 18179                           tblptrh	equ	0xFF7
 18180                           tblptrl	equ	0xFF6
 18181                           tablat	equ	0xFF5
 18182                           prodh	equ	0xFF4
 18183                           prodl	equ	0xFF3
 18184                           intcon	equ	0xFF2
 18185                           intcon3	equ	0xFF0
 18186                           indf0	equ	0xFEF
 18187                           postinc0	equ	0xFEE
 18188                           plusw0	equ	0xFEB
 18189                           fsr0h	equ	0xFEA
 18190                           fsr0l	equ	0xFE9
 18191                           wreg	equ	0xFE8
 18192                           indf1	equ	0xFE7
 18193                           postinc1	equ	0xFE6
 18194                           postdec1	equ	0xFE5
 18195                           plusw1	equ	0xFE3
 18196                           fsr1h	equ	0xFE2
 18197                           fsr1l	equ	0xFE1
 18198                           indf2	equ	0xFDF
 18199                           postinc2	equ	0xFDE
 18200                           postdec2	equ	0xFDD
 18201                           plusw2	equ	0xFDB
 18202                           fsr2h	equ	0xFDA
 18203                           fsr2l	equ	0xFD9
 18204                           status	equ	0xFD8
 18205                           
 18206 ;; *************** function _entireMemoryFull *****************
 18207 ;; Defined at:
 18208 ;;		line 45 in file "src/mem/memoryController.c"
 18209 ;; Parameters:    Size  Location     Type
 18210 ;;		None
 18211 ;; Auto vars:     Size  Location     Type
 18212 ;;  i               1    0[BANK0 ] unsigned char 
 18213 ;; Return value:  Size  Location     Type
 18214 ;;		None               void
 18215 ;; Registers used:
 18216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18222 ;;      Params:         0       0       0       0       0       0       0       0       0
 18223 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18224 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18225 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18226 ;;Total ram usage:        1 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:    4
 18229 ;; This function calls:
 18230 ;;		Nothing
 18231 ;; This function is called by:
 18232 ;;		_memory_txFrameRequest
 18233 ;; This function uses a non-reentrant model
 18234 ;;
 18235                           
 18236                           	psect	text72
 18237  0047F8                     __ptext72:
 18238                           	opt stack 0
 18239  0047F8                     _entireMemoryFull:
 18240                           	opt stack 19
 18241                           
 18242                           ;memoryController.c: 46: for (uint8_t i = 0; i < 8; i++) {
 18243                           
 18244                           ;incstack = 0
 18245  0047F8  0E00               	movlw	0
 18246  0047FA  0100               	movlb	0	; () banked
 18247  0047FC  6F60               	movwf	entireMemoryFull@i& (0+255),b
 18248  0047FE                     l7661:
 18249                           
 18250                           ; BSR set to: 0
 18251  0047FE  0E07               	movlw	7
 18252  004800  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 18253  004802  D001               	goto	l418
 18254  004804  D013               	goto	u8220
 18255  004806                     l418:
 18256                           
 18257                           ; BSR set to: 0
 18258                           ;memoryController.c: 47: if (!occupiedMemory[i].fIsAssigned)
 18259                           
 18260                           ; BSR set to: 0
 18261  004806  5160               	movf	entireMemoryFull@i& (0+255),w,b
 18262  004808  0D09               	mullw	9
 18263  00480A  0E06               	movlw	6
 18264  00480C  26F3               	addwf	prodl,f,c
 18265  00480E  0E00               	movlw	0
 18266  004810  22F4               	addwfc	prodh,f,c
 18267  004812  0E8B               	movlw	low _occupiedMemory
 18268  004814  24F3               	addwf	prodl,w,c
 18269  004816  6ED9               	movwf	fsr2l,c
 18270  004818  0E01               	movlw	high _occupiedMemory
 18271  00481A  20F4               	addwfc	prodh,w,c
 18272  00481C  6EDA               	movwf	fsr2h,c
 18273  00481E  50DF               	movf	indf2,w,c
 18274  004820  A4D8               	btfss	status,2,c
 18275  004822  D002               	goto	l420
 18276                           
 18277                           ; BSR set to: 0
 18278                           ;memoryController.c: 48: return 0;
 18279  004824  90D8               	bcf	status,0,c
 18280                           
 18281                           ; BSR set to: 0
 18282  004826  0012               	return	
 18283  004828                     l420:
 18284                           
 18285                           ; BSR set to: 0
 18286                           
 18287                           ; BSR set to: 0
 18288  004828  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 18289  00482A  D7E9               	goto	l7661
 18290  00482C                     u8220:
 18291                           
 18292                           ; BSR set to: 0
 18293                           ;memoryController.c: 49: }
 18294                           ;memoryController.c: 50: return 1;
 18295                           
 18296                           ; BSR set to: 0
 18297  00482C  80D8               	bsf	status,0,c
 18298  00482E  0012               	return	
 18299  004830                     __end_of_entireMemoryFull:
 18300                           	opt stack 0
 18301                           tblptru	equ	0xFF8
 18302                           tblptrh	equ	0xFF7
 18303                           tblptrl	equ	0xFF6
 18304                           tablat	equ	0xFF5
 18305                           prodh	equ	0xFF4
 18306                           prodl	equ	0xFF3
 18307                           intcon	equ	0xFF2
 18308                           intcon3	equ	0xFF0
 18309                           indf0	equ	0xFEF
 18310                           postinc0	equ	0xFEE
 18311                           plusw0	equ	0xFEB
 18312                           fsr0h	equ	0xFEA
 18313                           fsr0l	equ	0xFE9
 18314                           wreg	equ	0xFE8
 18315                           indf1	equ	0xFE7
 18316                           postinc1	equ	0xFE6
 18317                           postdec1	equ	0xFE5
 18318                           plusw1	equ	0xFE3
 18319                           fsr1h	equ	0xFE2
 18320                           fsr1l	equ	0xFE1
 18321                           indf2	equ	0xFDF
 18322                           postinc2	equ	0xFDE
 18323                           postdec2	equ	0xFDD
 18324                           plusw2	equ	0xFDB
 18325                           fsr2h	equ	0xFDA
 18326                           fsr2l	equ	0xFD9
 18327                           status	equ	0xFD8
 18328                           
 18329 ;; *************** function _entireMemoryEmpty *****************
 18330 ;; Defined at:
 18331 ;;		line 37 in file "src/mem/memoryController.c"
 18332 ;; Parameters:    Size  Location     Type
 18333 ;;		None
 18334 ;; Auto vars:     Size  Location     Type
 18335 ;;  i               1    0[BANK0 ] unsigned char 
 18336 ;; Return value:  Size  Location     Type
 18337 ;;		None               void
 18338 ;; Registers used:
 18339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18340 ;; Tracked objects:
 18341 ;;		On entry : 0/0
 18342 ;;		On exit  : 0/0
 18343 ;;		Unchanged: 0/0
 18344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18345 ;;      Params:         0       0       0       0       0       0       0       0       0
 18346 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18347 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18348 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18349 ;;Total ram usage:        1 bytes
 18350 ;; Hardware stack levels used:    1
 18351 ;; Hardware stack levels required when called:    4
 18352 ;; This function calls:
 18353 ;;		Nothing
 18354 ;; This function is called by:
 18355 ;;		_memory_txFrameRequest
 18356 ;; This function uses a non-reentrant model
 18357 ;;
 18358                           
 18359                           	psect	text73
 18360  004830                     __ptext73:
 18361                           	opt stack 0
 18362  004830                     _entireMemoryEmpty:
 18363                           	opt stack 19
 18364                           
 18365                           ;memoryController.c: 38: for (uint8_t i = 0; i < 8; i++) {
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;incstack = 0
 18369  004830  0E00               	movlw	0
 18370  004832  0100               	movlb	0	; () banked
 18371  004834  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 18372  004836                     l7641:
 18373                           
 18374                           ; BSR set to: 0
 18375  004836  0E07               	movlw	7
 18376  004838  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 18377  00483A  D001               	goto	l412
 18378  00483C  D013               	goto	u8190
 18379  00483E                     l412:
 18380                           
 18381                           ; BSR set to: 0
 18382                           ;memoryController.c: 39: if (occupiedMemory[i].fIsAssigned)
 18383                           
 18384                           ; BSR set to: 0
 18385  00483E  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 18386  004840  0D09               	mullw	9
 18387  004842  0E06               	movlw	6
 18388  004844  26F3               	addwf	prodl,f,c
 18389  004846  0E00               	movlw	0
 18390  004848  22F4               	addwfc	prodh,f,c
 18391  00484A  0E8B               	movlw	low _occupiedMemory
 18392  00484C  24F3               	addwf	prodl,w,c
 18393  00484E  6ED9               	movwf	fsr2l,c
 18394  004850  0E01               	movlw	high _occupiedMemory
 18395  004852  20F4               	addwfc	prodh,w,c
 18396  004854  6EDA               	movwf	fsr2h,c
 18397  004856  50DF               	movf	indf2,w,c
 18398  004858  B4D8               	btfsc	status,2,c
 18399  00485A  D002               	goto	l414
 18400                           
 18401                           ; BSR set to: 0
 18402                           ;memoryController.c: 40: return 0;
 18403  00485C  90D8               	bcf	status,0,c
 18404                           
 18405                           ; BSR set to: 0
 18406  00485E  0012               	return	
 18407  004860                     l414:
 18408                           
 18409                           ; BSR set to: 0
 18410                           
 18411                           ; BSR set to: 0
 18412  004860  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 18413  004862  D7E9               	goto	l7641
 18414  004864                     u8190:
 18415                           
 18416                           ; BSR set to: 0
 18417                           ;memoryController.c: 41: }
 18418                           ;memoryController.c: 42: return 1;
 18419                           
 18420                           ; BSR set to: 0
 18421  004864  80D8               	bsf	status,0,c
 18422  004866  0012               	return	
 18423  004868                     __end_of_entireMemoryEmpty:
 18424                           	opt stack 0
 18425                           tblptru	equ	0xFF8
 18426                           tblptrh	equ	0xFF7
 18427                           tblptrl	equ	0xFF6
 18428                           tablat	equ	0xFF5
 18429                           prodh	equ	0xFF4
 18430                           prodl	equ	0xFF3
 18431                           intcon	equ	0xFF2
 18432                           intcon3	equ	0xFF0
 18433                           indf0	equ	0xFEF
 18434                           postinc0	equ	0xFEE
 18435                           plusw0	equ	0xFEB
 18436                           fsr0h	equ	0xFEA
 18437                           fsr0l	equ	0xFE9
 18438                           wreg	equ	0xFE8
 18439                           indf1	equ	0xFE7
 18440                           postinc1	equ	0xFE6
 18441                           postdec1	equ	0xFE5
 18442                           plusw1	equ	0xFE3
 18443                           fsr1h	equ	0xFE2
 18444                           fsr1l	equ	0xFE1
 18445                           indf2	equ	0xFDF
 18446                           postinc2	equ	0xFDE
 18447                           postdec2	equ	0xFDD
 18448                           plusw2	equ	0xFDB
 18449                           fsr2h	equ	0xFDA
 18450                           fsr2l	equ	0xFD9
 18451                           status	equ	0xFD8
 18452                           
 18453 ;; *************** function _checkForOverlap *****************
 18454 ;; Defined at:
 18455 ;;		line 63 in file "src/mem/memoryController.c"
 18456 ;; Parameters:    Size  Location     Type
 18457 ;;  a               9   18[BANK0 ] struct memoryField
 18458 ;;  b               9   27[BANK0 ] struct memoryField
 18459 ;; Auto vars:     Size  Location     Type
 18460 ;;		None
 18461 ;; Return value:  Size  Location     Type
 18462 ;;		None               void
 18463 ;; Registers used:
 18464 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 18465 ;; Tracked objects:
 18466 ;;		On entry : 0/0
 18467 ;;		On exit  : 0/0
 18468 ;;		Unchanged: 0/0
 18469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18470 ;;      Params:         0      18       0       0       0       0       0       0       0
 18471 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18472 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18473 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18474 ;;Total ram usage:       18 bytes
 18475 ;; Hardware stack levels used:    1
 18476 ;; Hardware stack levels required when called:    5
 18477 ;; This function calls:
 18478 ;;		_checkForOverlapSwitched
 18479 ;; This function is called by:
 18480 ;;		_memory_txFrameRequest
 18481 ;; This function uses a non-reentrant model
 18482 ;;
 18483                           
 18484                           	psect	text74
 18485  002C34                     __ptext74:
 18486                           	opt stack 0
 18487  002C34                     _checkForOverlap:
 18488                           	opt stack 18
 18489                           
 18490                           ;memoryController.c: 64: if ((a.start == b.start) ||
 18491                           ;memoryController.c: 65: (a.end == b.end) ||
 18492                           ;memoryController.c: 66: (a.start == b.end) ||
 18493                           ;memoryController.c: 67: (a.end == b.start) ||
 18494                           ;memoryController.c: 68: (a.end > 0x3000) ||
 18495                           ;memoryController.c: 69: (a.start > 0x3000) ||
 18496                           ;memoryController.c: 70: (b.end > 0x3000) ||
 18497                           ;memoryController.c: 71: (b.start > 0x3000))
 18498                           
 18499                           ; BSR set to: 0
 18500                           ;incstack = 0
 18501  002C34  0100               	movlb	0	; () banked
 18502  002C36  517B               	movf	checkForOverlap@b& (0+255),w,b
 18503  002C38  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 18504  002C3A  E104               	bnz	u8230
 18505  002C3C  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18506  002C3E  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 18507  002C40  B4D8               	btfsc	status,2,c
 18508  002C42  D029               	goto	u8300
 18509  002C44                     u8230:
 18510                           
 18511                           ; BSR set to: 0
 18512  002C44  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18513  002C46  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18514  002C48  E104               	bnz	u8240
 18515  002C4A  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18516  002C4C  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18517  002C4E  B4D8               	btfsc	status,2,c
 18518  002C50  D022               	goto	u8300
 18519  002C52                     u8240:
 18520                           
 18521                           ; BSR set to: 0
 18522  002C52  5172               	movf	checkForOverlap@a& (0+255),w,b
 18523  002C54  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 18524  002C56  E104               	bnz	u8250
 18525  002C58  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18526  002C5A  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 18527  002C5C  B4D8               	btfsc	status,2,c
 18528  002C5E  D01B               	goto	u8300
 18529  002C60                     u8250:
 18530                           
 18531                           ; BSR set to: 0
 18532  002C60  517B               	movf	checkForOverlap@b& (0+255),w,b
 18533  002C62  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 18534  002C64  E104               	bnz	u8260
 18535  002C66  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18536  002C68  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 18537  002C6A  B4D8               	btfsc	status,2,c
 18538  002C6C  D014               	goto	u8300
 18539  002C6E                     u8260:
 18540                           
 18541                           ; BSR set to: 0
 18542  002C6E  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 18543  002C70  0E30               	movlw	48
 18544  002C72  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 18545  002C74  B0D8               	btfsc	status,0,c
 18546  002C76  D00F               	goto	u8300
 18547                           
 18548                           ; BSR set to: 0
 18549  002C78  0572               	decf	checkForOverlap@a& (0+255),w,b
 18550  002C7A  0E30               	movlw	48
 18551  002C7C  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18552  002C7E  B0D8               	btfsc	status,0,c
 18553  002C80  D00A               	goto	u8300
 18554                           
 18555                           ; BSR set to: 0
 18556  002C82  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 18557  002C84  0E30               	movlw	48
 18558  002C86  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18559  002C88  B0D8               	btfsc	status,0,c
 18560  002C8A  D005               	goto	u8300
 18561                           
 18562                           ; BSR set to: 0
 18563  002C8C  057B               	decf	checkForOverlap@b& (0+255),w,b
 18564  002C8E  0E30               	movlw	48
 18565  002C90  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18566  002C92  A0D8               	btfss	status,0,c
 18567  002C94  D002               	goto	l432
 18568  002C96                     u8300:
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;memoryController.c: 72: return 1;
 18572                           
 18573                           ; BSR set to: 0
 18574  002C96  80D8               	bsf	status,0,c
 18575                           
 18576                           ; BSR set to: 0
 18577  002C98  0012               	return	
 18578  002C9A                     l432:
 18579                           
 18580                           ; BSR set to: 0
 18581                           ;memoryController.c: 75: if (a.start < a.end) {
 18582                           
 18583                           ; BSR set to: 0
 18584  002C9A  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18585  002C9C  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18586  002C9E  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18587  002CA0  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18588  002CA2  B0D8               	btfsc	status,0,c
 18589  002CA4  D03B               	goto	l436
 18590                           
 18591                           ; BSR set to: 0
 18592                           ;memoryController.c: 76: if (b.start < b.end) {
 18593  002CA6  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 18594  002CA8  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18595  002CAA  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 18596  002CAC  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18597  002CAE  B0D8               	btfsc	status,0,c
 18598  002CB0  D02B               	goto	l437
 18599                           
 18600                           ; BSR set to: 0
 18601                           ;memoryController.c: 78: if (a.start < b.start) {
 18602  002CB2  517B               	movf	checkForOverlap@b& (0+255),w,b
 18603  002CB4  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 18604  002CB6  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 18605  002CB8  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 18606  002CBA  B0D8               	btfsc	status,0,c
 18607  002CBC  D00A               	goto	l438
 18608                           
 18609                           ; BSR set to: 0
 18610                           ;memoryController.c: 79: if (a.end > b.start) {
 18611  002CBE  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 18612  002CC0  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 18613  002CC2  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 18614  002CC4  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 18615  002CC6  B0D8               	btfsc	status,0,c
 18616  002CC8  D002               	goto	l439
 18617                           
 18618                           ; BSR set to: 0
 18619                           ;memoryController.c: 80: return 1;
 18620  002CCA  80D8               	bsf	status,0,c
 18621                           
 18622                           ; BSR set to: 0
 18623                           ;memoryController.c: 81: } else {
 18624                           
 18625                           ; BSR set to: 0
 18626  002CCC  0012               	return	
 18627  002CCE                     l439:
 18628                           
 18629                           ; BSR set to: 0
 18630                           ;memoryController.c: 82: return 0;
 18631                           
 18632                           ; BSR set to: 0
 18633  002CCE  90D8               	bcf	status,0,c
 18634                           
 18635                           ; BSR set to: 0
 18636                           ;memoryController.c: 83: }
 18637                           ;memoryController.c: 84: } else {
 18638                           
 18639                           ; BSR set to: 0
 18640  002CD0  0012               	return	
 18641  002CD2                     l438:
 18642                           
 18643                           ; BSR set to: 0
 18644                           ;memoryController.c: 85: return checkForOverlapSwitched(b, a);
 18645                           
 18646                           ; BSR set to: 0
 18647  002CD2  EE20  F07B         	lfsr	2,checkForOverlap@b
 18648  002CD6  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18649  002CDA  0E08               	movlw	8
 18650  002CDC                     u8351:
 18651  002CDC  CFDB FFEB          	movff	plusw2,plusw0
 18652  002CE0  06E8               	decf	wreg,f,c
 18653  002CE2  E2FC               	bc	u8351
 18654  002CE4  EE20  F072         	lfsr	2,checkForOverlap@a
 18655  002CE8  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18656  002CEC  0E08               	movlw	8
 18657  002CEE                     u8361:
 18658  002CEE  CFDB FFEB          	movff	plusw2,plusw0
 18659  002CF2  06E8               	decf	wreg,f,c
 18660  002CF4  E2FC               	bc	u8361
 18661  002CF6  ECF8  F01B         	call	_checkForOverlapSwitched	;wreg free
 18662  002CFA  0100               	movlb	0	; () banked
 18663  002CFC  B0D8               	btfsc	status,0,c
 18664  002CFE  D002               	goto	l7531
 18665                           
 18666                           ; BSR set to: 0
 18667  002D00  90D8               	bcf	status,0,c
 18668  002D02  0012               	return	
 18669  002D04                     l7531:
 18670                           
 18671                           ; BSR set to: 0
 18672                           
 18673                           ; BSR set to: 0
 18674  002D04  80D8               	bsf	status,0,c
 18675                           
 18676                           ; BSR set to: 0
 18677                           ;memoryController.c: 86: }
 18678                           ;memoryController.c: 87: } else {
 18679                           
 18680                           ; BSR set to: 0
 18681                           
 18682                           ; BSR set to: 0
 18683  002D06  0012               	return	
 18684  002D08                     l437:
 18685                           
 18686                           ; BSR set to: 0
 18687                           ;memoryController.c: 88: if (b.end < a.start)
 18688                           
 18689                           ; BSR set to: 0
 18690  002D08  5172               	movf	checkForOverlap@a& (0+255),w,b
 18691  002D0A  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 18692  002D0C  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 18693  002D0E  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 18694  002D10  B0D8               	btfsc	status,0,c
 18695  002D12  D002               	goto	l443
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;memoryController.c: 89: return 0;
 18699  002D14  90D8               	bcf	status,0,c
 18700                           
 18701                           ; BSR set to: 0
 18702                           
 18703                           ; BSR set to: 0
 18704  002D16  0012               	return	
 18705  002D18                     l443:
 18706                           
 18707                           ; BSR set to: 0
 18708                           ;memoryController.c: 90: else
 18709                           ;memoryController.c: 91: return 1;
 18710                           
 18711                           ; BSR set to: 0
 18712  002D18  80D8               	bsf	status,0,c
 18713                           
 18714                           ; BSR set to: 0
 18715                           ;memoryController.c: 92: }
 18716                           ;memoryController.c: 93: } else {
 18717                           
 18718                           ; BSR set to: 0
 18719                           
 18720                           ; BSR set to: 0
 18721  002D1A  0012               	return	
 18722  002D1C                     l436:
 18723                           
 18724                           ; BSR set to: 0
 18725                           ;memoryController.c: 94: return checkForOverlapSwitched(b, a);
 18726                           
 18727                           ; BSR set to: 0
 18728  002D1C  EE20  F07B         	lfsr	2,checkForOverlap@b
 18729  002D20  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 18730  002D24  0E08               	movlw	8
 18731  002D26                     u8391:
 18732  002D26  CFDB FFEB          	movff	plusw2,plusw0
 18733  002D2A  06E8               	decf	wreg,f,c
 18734  002D2C  E2FC               	bc	u8391
 18735  002D2E  EE20  F072         	lfsr	2,checkForOverlap@a
 18736  002D32  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 18737  002D36  0E08               	movlw	8
 18738  002D38                     u8401:
 18739  002D38  CFDB FFEB          	movff	plusw2,plusw0
 18740  002D3C  06E8               	decf	wreg,f,c
 18741  002D3E  E2FC               	bc	u8401
 18742  002D40  ECF8  F01B         	call	_checkForOverlapSwitched	;wreg free
 18743  002D44  0100               	movlb	0	; () banked
 18744  002D46  B0D8               	btfsc	status,0,c
 18745  002D48  D002               	goto	l7535
 18746                           
 18747                           ; BSR set to: 0
 18748  002D4A  90D8               	bcf	status,0,c
 18749  002D4C  0012               	return	
 18750  002D4E                     l7535:
 18751                           
 18752                           ; BSR set to: 0
 18753                           
 18754                           ; BSR set to: 0
 18755  002D4E  80D8               	bsf	status,0,c
 18756                           
 18757                           ; BSR set to: 0
 18758                           
 18759                           ; BSR set to: 0
 18760  002D50  0012               	return	
 18761  002D52                     __end_of_checkForOverlap:
 18762                           	opt stack 0
 18763                           tblptru	equ	0xFF8
 18764                           tblptrh	equ	0xFF7
 18765                           tblptrl	equ	0xFF6
 18766                           tablat	equ	0xFF5
 18767                           prodh	equ	0xFF4
 18768                           prodl	equ	0xFF3
 18769                           intcon	equ	0xFF2
 18770                           intcon3	equ	0xFF0
 18771                           indf0	equ	0xFEF
 18772                           postinc0	equ	0xFEE
 18773                           plusw0	equ	0xFEB
 18774                           fsr0h	equ	0xFEA
 18775                           fsr0l	equ	0xFE9
 18776                           wreg	equ	0xFE8
 18777                           indf1	equ	0xFE7
 18778                           postinc1	equ	0xFE6
 18779                           postdec1	equ	0xFE5
 18780                           plusw1	equ	0xFE3
 18781                           fsr1h	equ	0xFE2
 18782                           fsr1l	equ	0xFE1
 18783                           indf2	equ	0xFDF
 18784                           postinc2	equ	0xFDE
 18785                           postdec2	equ	0xFDD
 18786                           plusw2	equ	0xFDB
 18787                           fsr2h	equ	0xFDA
 18788                           fsr2l	equ	0xFD9
 18789                           status	equ	0xFD8
 18790                           
 18791 ;; *************** function _checkForOverlapSwitched *****************
 18792 ;; Defined at:
 18793 ;;		line 98 in file "src/mem/memoryController.c"
 18794 ;; Parameters:    Size  Location     Type
 18795 ;;  a               9    0[BANK0 ] struct memoryField
 18796 ;;  b               9    9[BANK0 ] struct memoryField
 18797 ;; Auto vars:     Size  Location     Type
 18798 ;;		None
 18799 ;; Return value:  Size  Location     Type
 18800 ;;		None               void
 18801 ;; Registers used:
 18802 ;;		wreg, status,2, status,0
 18803 ;; Tracked objects:
 18804 ;;		On entry : 0/0
 18805 ;;		On exit  : 0/0
 18806 ;;		Unchanged: 0/0
 18807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18808 ;;      Params:         0      18       0       0       0       0       0       0       0
 18809 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18810 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18811 ;;      Totals:         0      18       0       0       0       0       0       0       0
 18812 ;;Total ram usage:       18 bytes
 18813 ;; Hardware stack levels used:    1
 18814 ;; Hardware stack levels required when called:    4
 18815 ;; This function calls:
 18816 ;;		Nothing
 18817 ;; This function is called by:
 18818 ;;		_checkForOverlap
 18819 ;; This function uses a non-reentrant model
 18820 ;;
 18821                           
 18822                           	psect	text75
 18823  0037F0                     __ptext75:
 18824                           	opt stack 0
 18825  0037F0                     _checkForOverlapSwitched:
 18826                           	opt stack 18
 18827                           
 18828                           ;memoryController.c: 101: if ((a.start == b.start) ||
 18829                           ;memoryController.c: 102: (a.end == b.end) ||
 18830                           ;memoryController.c: 103: (a.start == b.end) ||
 18831                           ;memoryController.c: 104: (a.end == b.start) ||
 18832                           ;memoryController.c: 105: (a.end > 0x3000) ||
 18833                           ;memoryController.c: 106: (a.start > 0x3000) ||
 18834                           ;memoryController.c: 107: (b.end > 0x3000) ||
 18835                           ;memoryController.c: 108: (b.start > 0x3000))
 18836                           
 18837                           ; BSR set to: 0
 18838                           ;incstack = 0
 18839  0037F0  0100               	movlb	0	; () banked
 18840  0037F2  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18841  0037F4  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 18842  0037F6  E104               	bnz	u8040
 18843  0037F8  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18844  0037FA  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18845  0037FC  B4D8               	btfsc	status,2,c
 18846  0037FE  D029               	goto	u8110
 18847  003800                     u8040:
 18848                           
 18849                           ; BSR set to: 0
 18850  003800  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18851  003802  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18852  003804  E104               	bnz	u8050
 18853  003806  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18854  003808  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18855  00380A  B4D8               	btfsc	status,2,c
 18856  00380C  D022               	goto	u8110
 18857  00380E                     u8050:
 18858                           
 18859                           ; BSR set to: 0
 18860  00380E  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18861  003810  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18862  003812  E104               	bnz	u8060
 18863  003814  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18864  003816  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18865  003818  B4D8               	btfsc	status,2,c
 18866  00381A  D01B               	goto	u8110
 18867  00381C                     u8060:
 18868                           
 18869                           ; BSR set to: 0
 18870  00381C  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18871  00381E  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18872  003820  E104               	bnz	u8070
 18873  003822  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18874  003824  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18875  003826  B4D8               	btfsc	status,2,c
 18876  003828  D014               	goto	u8110
 18877  00382A                     u8070:
 18878                           
 18879                           ; BSR set to: 0
 18880  00382A  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18881  00382C  0E30               	movlw	48
 18882  00382E  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18883  003830  B0D8               	btfsc	status,0,c
 18884  003832  D00F               	goto	u8110
 18885                           
 18886                           ; BSR set to: 0
 18887  003834  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 18888  003836  0E30               	movlw	48
 18889  003838  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18890  00383A  B0D8               	btfsc	status,0,c
 18891  00383C  D00A               	goto	u8110
 18892                           
 18893                           ; BSR set to: 0
 18894  00383E  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18895  003840  0E30               	movlw	48
 18896  003842  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18897  003844  B0D8               	btfsc	status,0,c
 18898  003846  D005               	goto	u8110
 18899                           
 18900                           ; BSR set to: 0
 18901  003848  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 18902  00384A  0E30               	movlw	48
 18903  00384C  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18904  00384E  A0D8               	btfss	status,0,c
 18905  003850  D002               	goto	l448
 18906  003852                     u8110:
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;memoryController.c: 109: return 1;
 18910                           
 18911                           ; BSR set to: 0
 18912  003852  80D8               	bsf	status,0,c
 18913                           
 18914                           ; BSR set to: 0
 18915  003854  0012               	return	
 18916  003856                     l448:
 18917                           
 18918                           ; BSR set to: 0
 18919                           ;memoryController.c: 112: if (a.start < a.end) {
 18920                           
 18921                           ; BSR set to: 0
 18922  003856  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18923  003858  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18924  00385A  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18925  00385C  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18926  00385E  B0D8               	btfsc	status,0,c
 18927  003860  D01E               	goto	l459
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;memoryController.c: 113: if (b.start < b.end) {
 18931  003862  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18932  003864  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18933  003866  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18934  003868  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18935  00386A  B0D8               	btfsc	status,0,c
 18936  00386C  D010               	goto	l453
 18937                           
 18938                           ; BSR set to: 0
 18939                           ;memoryController.c: 115: if (a.start < b.start) {
 18940  00386E  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 18941  003870  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 18942  003872  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18943  003874  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18944  003876  B0D8               	btfsc	status,0,c
 18945  003878  D012               	goto	l459
 18946                           
 18947                           ; BSR set to: 0
 18948                           ;memoryController.c: 116: if (a.end > b.start) {
 18949  00387A  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 18950  00387C  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 18951  00387E  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 18952  003880  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 18953  003882  B0D8               	btfsc	status,0,c
 18954  003884  D002               	goto	l455
 18955                           
 18956                           ; BSR set to: 0
 18957                           ;memoryController.c: 117: return 1;
 18958  003886  80D8               	bsf	status,0,c
 18959                           
 18960                           ; BSR set to: 0
 18961  003888  0012               	return	
 18962  00388A                     l455:
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;memoryController.c: 119: return 0;
 18966                           
 18967                           ; BSR set to: 0
 18968  00388A  90D8               	bcf	status,0,c
 18969                           
 18970                           ; BSR set to: 0
 18971  00388C  0012               	return	
 18972  00388E                     l453:
 18973                           
 18974                           ; BSR set to: 0
 18975                           ;memoryController.c: 123: if (b.end < a.start)
 18976                           
 18977                           ; BSR set to: 0
 18978  00388E  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 18979  003890  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 18980  003892  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 18981  003894  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 18982  003896  A0D8               	btfss	status,0,c
 18983  003898  D7F8               	goto	l455
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;memoryController.c: 125: else
 18987                           ;memoryController.c: 126: return 1;
 18988                           
 18989                           ; BSR set to: 0
 18990                           
 18991                           ; BSR set to: 0
 18992                           
 18993                           ; BSR set to: 0
 18994                           
 18995                           ; BSR set to: 0
 18996                           ;memoryController.c: 124: return 0;
 18997  00389A  80D8               	bsf	status,0,c
 18998                           
 18999                           ; BSR set to: 0
 19000  00389C  0012               	return	
 19001  00389E                     l459:
 19002                           
 19003                           ; BSR set to: 0
 19004                           ;memoryController.c: 127: }
 19005                           ;memoryController.c: 128: }
 19006                           ;memoryController.c: 130: return 1;
 19007                           
 19008                           ; BSR set to: 0
 19009                           
 19010                           ; BSR set to: 0
 19011                           
 19012                           ; BSR set to: 0
 19013  00389E  80D8               	bsf	status,0,c
 19014  0038A0  0012               	return	
 19015  0038A2                     __end_of_checkForOverlapSwitched:
 19016                           	opt stack 0
 19017                           tblptru	equ	0xFF8
 19018                           tblptrh	equ	0xFF7
 19019                           tblptrl	equ	0xFF6
 19020                           tablat	equ	0xFF5
 19021                           prodh	equ	0xFF4
 19022                           prodl	equ	0xFF3
 19023                           intcon	equ	0xFF2
 19024                           intcon3	equ	0xFF0
 19025                           indf0	equ	0xFEF
 19026                           postinc0	equ	0xFEE
 19027                           plusw0	equ	0xFEB
 19028                           fsr0h	equ	0xFEA
 19029                           fsr0l	equ	0xFE9
 19030                           wreg	equ	0xFE8
 19031                           indf1	equ	0xFE7
 19032                           postinc1	equ	0xFE6
 19033                           postdec1	equ	0xFE5
 19034                           plusw1	equ	0xFE3
 19035                           fsr1h	equ	0xFE2
 19036                           fsr1l	equ	0xFE1
 19037                           indf2	equ	0xFDF
 19038                           postinc2	equ	0xFDE
 19039                           postdec2	equ	0xFDD
 19040                           plusw2	equ	0xFDB
 19041                           fsr2h	equ	0xFDA
 19042                           fsr2l	equ	0xFD9
 19043                           status	equ	0xFD8
 19044                           
 19045 ;; *************** function ___wmul *****************
 19046 ;; Defined at:
 19047 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 19048 ;; Parameters:    Size  Location     Type
 19049 ;;  multiplier      2    0[BANK0 ] unsigned int 
 19050 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 19051 ;; Auto vars:     Size  Location     Type
 19052 ;;  product         2    4[BANK0 ] unsigned int 
 19053 ;; Return value:  Size  Location     Type
 19054 ;;                  2    0[BANK0 ] unsigned int 
 19055 ;; Registers used:
 19056 ;;		wreg, status,2, status,0, prodl, prodh
 19057 ;; Tracked objects:
 19058 ;;		On entry : 0/0
 19059 ;;		On exit  : 0/0
 19060 ;;		Unchanged: 0/0
 19061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19062 ;;      Params:         0       4       0       0       0       0       0       0       0
 19063 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19065 ;;      Totals:         0       6       0       0       0       0       0       0       0
 19066 ;;Total ram usage:        6 bytes
 19067 ;; Hardware stack levels used:    1
 19068 ;; Hardware stack levels required when called:    4
 19069 ;; This function calls:
 19070 ;;		Nothing
 19071 ;; This function is called by:
 19072 ;;		_memory_txFrameRequest
 19073 ;; This function uses a non-reentrant model
 19074 ;;
 19075                           
 19076                           	psect	text76
 19077  004A3C                     __ptext76:
 19078                           	opt stack 0
 19079  004A3C                     ___wmul:
 19080                           	opt stack 19
 19081                           
 19082                           ; BSR set to: 0
 19083                           ;incstack = 0
 19084  004A3C  0100               	movlb	0	; () banked
 19085  004A3E  5160               	movf	___wmul@multiplier& (0+255),w,b
 19086  004A40  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19087  004A42  CFF3 F064          	movff	prodl,___wmul@product
 19088  004A46  CFF4 F065          	movff	prodh,___wmul@product+1
 19089  004A4A  5160               	movf	___wmul@multiplier& (0+255),w,b
 19090  004A4C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 19091  004A4E  50F3               	movf	prodl,w,c
 19092  004A50  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19093  004A52  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 19094  004A54  0362               	mulwf	___wmul@multiplicand& (0+255),b
 19095  004A56  50F3               	movf	prodl,w,c
 19096  004A58  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 19097                           
 19098                           ; BSR set to: 0
 19099  004A5A  C064  F060         	movff	___wmul@product,?___wmul
 19100  004A5E  C065  F061         	movff	___wmul@product+1,?___wmul+1
 19101  004A62  0012               	return	
 19102  004A64                     __end_of___wmul:
 19103                           	opt stack 0
 19104                           tblptru	equ	0xFF8
 19105                           tblptrh	equ	0xFF7
 19106                           tblptrl	equ	0xFF6
 19107                           tablat	equ	0xFF5
 19108                           prodh	equ	0xFF4
 19109                           prodl	equ	0xFF3
 19110                           intcon	equ	0xFF2
 19111                           intcon3	equ	0xFF0
 19112                           indf0	equ	0xFEF
 19113                           postinc0	equ	0xFEE
 19114                           plusw0	equ	0xFEB
 19115                           fsr0h	equ	0xFEA
 19116                           fsr0l	equ	0xFE9
 19117                           wreg	equ	0xFE8
 19118                           indf1	equ	0xFE7
 19119                           postinc1	equ	0xFE6
 19120                           postdec1	equ	0xFE5
 19121                           plusw1	equ	0xFE3
 19122                           fsr1h	equ	0xFE2
 19123                           fsr1l	equ	0xFE1
 19124                           indf2	equ	0xFDF
 19125                           postinc2	equ	0xFDE
 19126                           postdec2	equ	0xFDD
 19127                           plusw2	equ	0xFDB
 19128                           fsr2h	equ	0xFDA
 19129                           fsr2l	equ	0xFD9
 19130                           status	equ	0xFD8
 19131                           
 19132 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 19133 ;; Defined at:
 19134 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 19135 ;; Parameters:    Size  Location     Type
 19136 ;;  ethtype         2   15[BANK0 ] enum E5508
 19137 ;;  field           9   17[BANK0 ] struct memoryField
 19138 ;; Auto vars:     Size  Location     Type
 19139 ;;  opcode          1   28[BANK0 ] unsigned char 
 19140 ;;  highByte        1   27[BANK0 ] unsigned char 
 19141 ;;  lowByte         1   26[BANK0 ] unsigned char 
 19142 ;; Return value:  Size  Location     Type
 19143 ;;                  1    wreg      void 
 19144 ;; Registers used:
 19145 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19146 ;; Tracked objects:
 19147 ;;		On entry : 0/0
 19148 ;;		On exit  : 0/0
 19149 ;;		Unchanged: 0/0
 19150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19151 ;;      Params:         0      11       0       0       0       0       0       0       0
 19152 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19153 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19154 ;;      Totals:         0      14       0       0       0       0       0       0       0
 19155 ;;Total ram usage:       14 bytes
 19156 ;; Hardware stack levels used:    1
 19157 ;; Hardware stack levels required when called:    7
 19158 ;; This function calls:
 19159 ;;		_enc424j600_setGPDATAWritePointer
 19160 ;;		_enc424j600_writeSPI
 19161 ;; This function is called by:
 19162 ;;		_ethernet_txFrameRequest
 19163 ;; This function uses a non-reentrant model
 19164 ;;
 19165                           
 19166                           	psect	text77
 19167  004508                     __ptext77:
 19168                           	opt stack 0
 19169  004508                     _ethernetController_writeEtherTypeFieldToBuffer:
 19170                           	opt stack 17
 19171                           
 19172                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 19173                           
 19174                           ; BSR set to: 0
 19175                           ;incstack = 0
 19176  004508  0E06               	movlw	6
 19177  00450A  0100               	movlb	0	; () banked
 19178  00450C  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 19179  00450E  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 19180  004510  0E00               	movlw	0
 19181  004512  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 19182  004514  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 19183  004516  ECC0  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19184                           
 19185                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 19186  00451A  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 19187                           
 19188                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 19189  00451E  0100               	movlb	0	; () banked
 19190  004520  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 19191  004522  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 19192                           
 19193                           ; BSR set to: 0
 19194                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 19195  004524  0E2A               	movlw	42
 19196  004526  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 19197                           
 19198                           ; BSR set to: 0
 19199                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 19200  004528  9881               	bcf	3969,4,c	;volatile
 19201                           
 19202                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 19203  00452A  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 19204  00452C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19205  00452E  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 19206  004530  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19207  004532  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19208                           
 19209                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 19210  004536  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 19211  004538  0100               	movlb	0	; () banked
 19212  00453A  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19213  00453C  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 19214  00453E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19215  004540  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19216                           
 19217                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 19218  004544  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 19219  004546  0100               	movlb	0	; () banked
 19220  004548  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19221  00454A  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 19222  00454C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19223  00454E  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19224                           
 19225                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 19226  004552  8881               	bsf	3969,4,c	;volatile
 19227  004554  0012               	return		;funcret
 19228  004556                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 19229                           	opt stack 0
 19230                           tblptru	equ	0xFF8
 19231                           tblptrh	equ	0xFF7
 19232                           tblptrl	equ	0xFF6
 19233                           tablat	equ	0xFF5
 19234                           prodh	equ	0xFF4
 19235                           prodl	equ	0xFF3
 19236                           intcon	equ	0xFF2
 19237                           intcon3	equ	0xFF0
 19238                           indf0	equ	0xFEF
 19239                           postinc0	equ	0xFEE
 19240                           plusw0	equ	0xFEB
 19241                           fsr0h	equ	0xFEA
 19242                           fsr0l	equ	0xFE9
 19243                           wreg	equ	0xFE8
 19244                           indf1	equ	0xFE7
 19245                           postinc1	equ	0xFE6
 19246                           postdec1	equ	0xFE5
 19247                           plusw1	equ	0xFE3
 19248                           fsr1h	equ	0xFE2
 19249                           fsr1l	equ	0xFE1
 19250                           indf2	equ	0xFDF
 19251                           postinc2	equ	0xFDE
 19252                           postdec2	equ	0xFDD
 19253                           plusw2	equ	0xFDB
 19254                           fsr2h	equ	0xFDA
 19255                           fsr2l	equ	0xFD9
 19256                           status	equ	0xFD8
 19257                           
 19258 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 19259 ;; Defined at:
 19260 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 19261 ;; Parameters:    Size  Location     Type
 19262 ;;  addr            6   15[BANK0 ] struct macaddress
 19263 ;;  field           9   21[BANK0 ] struct memoryField
 19264 ;; Auto vars:     Size  Location     Type
 19265 ;;  i               1   37[BANK0 ] unsigned char 
 19266 ;;  i               1   38[BANK0 ] unsigned char 
 19267 ;;  data            6   30[BANK0 ] unsigned char [6]
 19268 ;;  opcode          1   36[BANK0 ] unsigned char 
 19269 ;; Return value:  Size  Location     Type
 19270 ;;                  1    wreg      void 
 19271 ;; Registers used:
 19272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19273 ;; Tracked objects:
 19274 ;;		On entry : 0/0
 19275 ;;		On exit  : 0/0
 19276 ;;		Unchanged: 0/0
 19277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19278 ;;      Params:         0      15       0       0       0       0       0       0       0
 19279 ;;      Locals:         0       9       0       0       0       0       0       0       0
 19280 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19281 ;;      Totals:         0      24       0       0       0       0       0       0       0
 19282 ;;Total ram usage:       24 bytes
 19283 ;; Hardware stack levels used:    1
 19284 ;; Hardware stack levels required when called:    7
 19285 ;; This function calls:
 19286 ;;		_enc424j600_setGPDATAWritePointer
 19287 ;;		_enc424j600_writeSPI
 19288 ;; This function is called by:
 19289 ;;		_ethernet_txFrameRequest
 19290 ;; This function uses a non-reentrant model
 19291 ;;
 19292                           
 19293                           	psect	text78
 19294  003C96                     __ptext78:
 19295                           	opt stack 0
 19296  003C96                     _ethernetController_writeDestinationMACAddress:
 19297                           	opt stack 17
 19298                           
 19299                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 19300                           
 19301                           ;incstack = 0
 19302  003C96  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 19303  003C9A  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 19304  003C9E  ECC0  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19305                           
 19306                           ;ENC424J600.c: 230: uint8_t data[6];
 19307                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 19308  003CA2  0E00               	movlw	0
 19309  003CA4  0100               	movlb	0	; () banked
 19310  003CA6  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 19311  003CA8                     l7779:
 19312                           
 19313                           ; BSR set to: 0
 19314  003CA8  0E05               	movlw	5
 19315  003CAA  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 19316  003CAC  D001               	goto	l140
 19317  003CAE  D014               	goto	u8430
 19318  003CB0                     l140:
 19319                           
 19320                           ; BSR set to: 0
 19321                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 19322                           
 19323                           ; BSR set to: 0
 19324  003CB0  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 19325  003CB2  0D01               	mullw	1
 19326  003CB4  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 19327  003CB6  24F3               	addwf	prodl,w,c
 19328  003CB8  6ED9               	movwf	fsr2l,c
 19329  003CBA  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 19330  003CBC  20F4               	addwfc	prodh,w,c
 19331  003CBE  6EDA               	movwf	fsr2h,c
 19332  003CC0  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 19333  003CC2  0D01               	mullw	1
 19334  003CC4  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 19335  003CC6  24F3               	addwf	prodl,w,c
 19336  003CC8  6EE1               	movwf	fsr1l,c
 19337  003CCA  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 19338  003CCC  20F4               	addwfc	prodh,w,c
 19339  003CCE  6EE2               	movwf	fsr1h,c
 19340  003CD0  CFDF FFE7          	movff	indf2,indf1
 19341                           
 19342                           ; BSR set to: 0
 19343  003CD4  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 19344  003CD6  D7E8               	goto	l7779
 19345  003CD8                     u8430:
 19346                           
 19347                           ; BSR set to: 0
 19348                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 19349                           
 19350                           ; BSR set to: 0
 19351  003CD8  0E2A               	movlw	42
 19352  003CDA  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 19353                           
 19354                           ; BSR set to: 0
 19355                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 19356  003CDC  9881               	bcf	3969,4,c	;volatile
 19357                           
 19358                           ; BSR set to: 0
 19359                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 19360  003CDE  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 19361  003CE0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19362  003CE2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 19363  003CE4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19364  003CE6  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19365                           
 19366                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 19367  003CEA  0E00               	movlw	0
 19368  003CEC  0100               	movlb	0	; () banked
 19369  003CEE  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 19370  003CF0                     l7797:
 19371                           
 19372                           ; BSR set to: 0
 19373  003CF0  0E05               	movlw	5
 19374  003CF2  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_646& (0+255),b
 19375  003CF4  D001               	goto	l142
 19376  003CF6  D00D               	goto	u8450
 19377  003CF8                     l142:
 19378                           
 19379                           ; BSR set to: 0
 19380                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 19381                           
 19382                           ; BSR set to: 0
 19383  003CF8  5185               	movf	ethernetController_writeDestinationMACAddress@i_646& (0+255),w,b
 19384  003CFA  0D01               	mullw	1
 19385  003CFC  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 19386  003CFE  24F3               	addwf	prodl,w,c
 19387  003D00  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19388  003D02  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 19389  003D04  20F4               	addwfc	prodh,w,c
 19390  003D06  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19391  003D08  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19392  003D0C  0100               	movlb	0	; () banked
 19393  003D0E  2B85               	incf	ethernetController_writeDestinationMACAddress@i_646& (0+255),f,b
 19394  003D10  D7EF               	goto	l7797
 19395  003D12                     u8450:
 19396                           
 19397                           ; BSR set to: 0
 19398                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 19399  003D12  8881               	bsf	3969,4,c	;volatile
 19400                           
 19401                           ; BSR set to: 0
 19402  003D14  0012               	return		;funcret
 19403  003D16                     __end_of_ethernetController_writeDestinationMACAddress:
 19404                           	opt stack 0
 19405                           tblptru	equ	0xFF8
 19406                           tblptrh	equ	0xFF7
 19407                           tblptrl	equ	0xFF6
 19408                           tablat	equ	0xFF5
 19409                           prodh	equ	0xFF4
 19410                           prodl	equ	0xFF3
 19411                           intcon	equ	0xFF2
 19412                           intcon3	equ	0xFF0
 19413                           indf0	equ	0xFEF
 19414                           postinc0	equ	0xFEE
 19415                           plusw0	equ	0xFEB
 19416                           fsr0h	equ	0xFEA
 19417                           fsr0l	equ	0xFE9
 19418                           wreg	equ	0xFE8
 19419                           indf1	equ	0xFE7
 19420                           postinc1	equ	0xFE6
 19421                           postdec1	equ	0xFE5
 19422                           plusw1	equ	0xFE3
 19423                           fsr1h	equ	0xFE2
 19424                           fsr1l	equ	0xFE1
 19425                           indf2	equ	0xFDF
 19426                           postinc2	equ	0xFDE
 19427                           postdec2	equ	0xFDD
 19428                           plusw2	equ	0xFDB
 19429                           fsr2h	equ	0xFDA
 19430                           fsr2l	equ	0xFD9
 19431                           status	equ	0xFD8
 19432                           
 19433 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 19434 ;; Defined at:
 19435 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 19436 ;; Parameters:    Size  Location     Type
 19437 ;;  data            1    wreg     unsigned char 
 19438 ;;  field           9   15[BANK0 ] struct memoryField
 19439 ;; Auto vars:     Size  Location     Type
 19440 ;;  data            1   28[BANK0 ] unsigned char 
 19441 ;;  opcode          1   29[BANK0 ] unsigned char 
 19442 ;; Return value:  Size  Location     Type
 19443 ;;                  1    wreg      void 
 19444 ;; Registers used:
 19445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19446 ;; Tracked objects:
 19447 ;;		On entry : 0/0
 19448 ;;		On exit  : 0/0
 19449 ;;		Unchanged: 0/0
 19450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19451 ;;      Params:         0       9       0       0       0       0       0       0       0
 19452 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19453 ;;      Temps:          0       4       0       0       0       0       0       0       0
 19454 ;;      Totals:         0      15       0       0       0       0       0       0       0
 19455 ;;Total ram usage:       15 bytes
 19456 ;; Hardware stack levels used:    1
 19457 ;; Hardware stack levels required when called:    7
 19458 ;; This function calls:
 19459 ;;		_enc424j600_setGPDATAWritePointer
 19460 ;;		_enc424j600_writeSPI
 19461 ;; This function is called by:
 19462 ;;		_arp_send
 19463 ;;		_ipv4_streamToTransmissionBuffer
 19464 ;; This function uses a non-reentrant model
 19465 ;;
 19466                           
 19467                           	psect	text79
 19468  003E0E                     __ptext79:
 19469                           	opt stack 0
 19470  003E0E                     _ethernetController_streamToTransmitBuffer:
 19471                           	opt stack 18
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;incstack = 0
 19475                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 19476  003E0E  0100               	movlb	0	; () banked
 19477  003E10  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 19478                           
 19479                           ;ENC424J600.c: 209: uint8_t opcode;
 19480                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 19481                           ;ENC424J600.c: 211: if (pointer == 0) {
 19482  003E12  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 19483  003E14  103F               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 19484  003E16  A4D8               	btfss	status,2,c
 19485  003E18  D010               	goto	l134
 19486                           
 19487                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 19488  003E1A  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 19489  003E1E  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 19490  003E22  ECC0  F023         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 19491                           
 19492                           ;ENC424J600.c: 213: opcode = 0x2A;
 19493  003E26  0E2A               	movlw	42
 19494  003E28  0100               	movlb	0	; () banked
 19495  003E2A  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 19496                           
 19497                           ; BSR set to: 0
 19498                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 19499  003E2C  9881               	bcf	3969,4,c	;volatile
 19500                           
 19501                           ; BSR set to: 0
 19502                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 19503  003E2E  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 19504  003E30  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19505  003E32  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 19506  003E34  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19507  003E36  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19508  003E3A                     l134:
 19509                           
 19510                           ;ENC424J600.c: 216: }
 19511                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 19512  003E3A  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 19513  003E3C  0100               	movlb	0	; () banked
 19514  003E3E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19515  003E40  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 19516  003E42  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19517  003E44  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19518                           
 19519                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 19520  003E48  0EFF               	movlw	255
 19521  003E4A  0100               	movlb	0	; () banked
 19522  003E4C  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 19523  003E4E  0EFF               	movlw	255
 19524  003E50  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 19525  003E52  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 19526  003E56  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 19527  003E5A  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 19528  003E5E  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 19529  003E60  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 19530  003E62  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 19531  003E64  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 19532  003E66  503E               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 19533  003E68  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 19534  003E6A  E10A               	bnz	l8057
 19535  003E6C  503F               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 19536  003E6E  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 19537  003E70  A4D8               	btfss	status,2,c
 19538  003E72  D006               	goto	l135
 19539                           
 19540                           ; BSR set to: 0
 19541                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 19542  003E74  8881               	bsf	3969,4,c	;volatile
 19543                           
 19544                           ; BSR set to: 0
 19545                           ;ENC424J600.c: 222: pointer = 0;
 19546  003E76  0E00               	movlw	0
 19547  003E78  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 19548  003E7A  0E00               	movlw	0
 19549  003E7C  6E3E               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 19550                           
 19551                           ;ENC424J600.c: 223: } else {
 19552  003E7E  0012               	return	
 19553  003E80                     l135:
 19554  003E80                     l8057:
 19555                           
 19556                           ; BSR set to: 0
 19557                           ;ENC424J600.c: 224: pointer++;
 19558  003E80  4A3E               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 19559  003E82  2A3F               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 19560  003E84  0012               	return	
 19561  003E86                     __end_of_ethernetController_streamToTransmitBuffer:
 19562                           	opt stack 0
 19563                           tblptru	equ	0xFF8
 19564                           tblptrh	equ	0xFF7
 19565                           tblptrl	equ	0xFF6
 19566                           tablat	equ	0xFF5
 19567                           prodh	equ	0xFF4
 19568                           prodl	equ	0xFF3
 19569                           intcon	equ	0xFF2
 19570                           intcon3	equ	0xFF0
 19571                           indf0	equ	0xFEF
 19572                           postinc0	equ	0xFEE
 19573                           plusw0	equ	0xFEB
 19574                           fsr0h	equ	0xFEA
 19575                           fsr0l	equ	0xFE9
 19576                           wreg	equ	0xFE8
 19577                           indf1	equ	0xFE7
 19578                           postinc1	equ	0xFE6
 19579                           postdec1	equ	0xFE5
 19580                           plusw1	equ	0xFE3
 19581                           fsr1h	equ	0xFE2
 19582                           fsr1l	equ	0xFE1
 19583                           indf2	equ	0xFDF
 19584                           postinc2	equ	0xFDE
 19585                           postdec2	equ	0xFDD
 19586                           plusw2	equ	0xFDB
 19587                           fsr2h	equ	0xFDA
 19588                           fsr2l	equ	0xFD9
 19589                           status	equ	0xFD8
 19590                           
 19591 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 19592 ;; Defined at:
 19593 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 19594 ;; Parameters:    Size  Location     Type
 19595 ;;  addr            2   10[BANK0 ] unsigned int 
 19596 ;; Auto vars:     Size  Location     Type
 19597 ;;  highByte        1   14[BANK0 ] unsigned char 
 19598 ;;  lowByte         1   13[BANK0 ] unsigned char 
 19599 ;;  opcode          1   12[BANK0 ] unsigned char 
 19600 ;; Return value:  Size  Location     Type
 19601 ;;                  1    wreg      void 
 19602 ;; Registers used:
 19603 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19604 ;; Tracked objects:
 19605 ;;		On entry : 0/0
 19606 ;;		On exit  : 0/0
 19607 ;;		Unchanged: 0/0
 19608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19609 ;;      Params:         0       2       0       0       0       0       0       0       0
 19610 ;;      Locals:         0       3       0       0       0       0       0       0       0
 19611 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19612 ;;      Totals:         0       5       0       0       0       0       0       0       0
 19613 ;;Total ram usage:        5 bytes
 19614 ;; Hardware stack levels used:    1
 19615 ;; Hardware stack levels required when called:    6
 19616 ;; This function calls:
 19617 ;;		_enc424j600_writeSPI
 19618 ;; This function is called by:
 19619 ;;		_ethernetController_streamToTransmitBuffer
 19620 ;;		_ethernetController_writeDestinationMACAddress
 19621 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 19622 ;; This function uses a non-reentrant model
 19623 ;;
 19624                           
 19625                           	psect	text80
 19626  004780                     __ptext80:
 19627                           	opt stack 0
 19628  004780                     _enc424j600_setGPDATAWritePointer:
 19629                           	opt stack 17
 19630                           
 19631                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 19632                           
 19633                           ; BSR set to: 0
 19634                           ;incstack = 0
 19635  004780  0E6C               	movlw	108
 19636  004782  0100               	movlb	0	; () banked
 19637  004784  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 19638                           
 19639                           ; BSR set to: 0
 19640                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 19641  004786  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 19642                           
 19643                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 19644  00478A  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 19645  00478C  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 19646                           
 19647                           ; BSR set to: 0
 19648                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 19649  00478E  9881               	bcf	3969,4,c	;volatile
 19650                           
 19651                           ; BSR set to: 0
 19652                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 19653  004790  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 19654  004792  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19655  004794  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 19656  004796  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19657  004798  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19658                           
 19659                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 19660  00479C  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 19661  00479E  0100               	movlb	0	; () banked
 19662  0047A0  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19663  0047A2  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 19664  0047A4  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19665  0047A6  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19666                           
 19667                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 19668  0047AA  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 19669  0047AC  0100               	movlb	0	; () banked
 19670  0047AE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 19671  0047B0  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 19672  0047B2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 19673  0047B4  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 19674                           
 19675                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 19676  0047B8  8881               	bsf	3969,4,c	;volatile
 19677  0047BA  0012               	return		;funcret
 19678  0047BC                     __end_of_enc424j600_setGPDATAWritePointer:
 19679                           	opt stack 0
 19680                           tblptru	equ	0xFF8
 19681                           tblptrh	equ	0xFF7
 19682                           tblptrl	equ	0xFF6
 19683                           tablat	equ	0xFF5
 19684                           prodh	equ	0xFF4
 19685                           prodl	equ	0xFF3
 19686                           intcon	equ	0xFF2
 19687                           intcon3	equ	0xFF0
 19688                           indf0	equ	0xFEF
 19689                           postinc0	equ	0xFEE
 19690                           plusw0	equ	0xFEB
 19691                           fsr0h	equ	0xFEA
 19692                           fsr0l	equ	0xFE9
 19693                           wreg	equ	0xFE8
 19694                           indf1	equ	0xFE7
 19695                           postinc1	equ	0xFE6
 19696                           postdec1	equ	0xFE5
 19697                           plusw1	equ	0xFE3
 19698                           fsr1h	equ	0xFE2
 19699                           fsr1l	equ	0xFE1
 19700                           indf2	equ	0xFDF
 19701                           postinc2	equ	0xFDE
 19702                           postdec2	equ	0xFDD
 19703                           plusw2	equ	0xFDB
 19704                           fsr2h	equ	0xFDA
 19705                           fsr2l	equ	0xFD9
 19706                           status	equ	0xFD8
 19707                           
 19708 ;; *************** function _ethernetController_sendPacket *****************
 19709 ;; Defined at:
 19710 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 19711 ;; Parameters:    Size  Location     Type
 19712 ;;  field           9   18[BANK0 ] struct memoryField
 19713 ;; Auto vars:     Size  Location     Type
 19714 ;;		None
 19715 ;; Return value:  Size  Location     Type
 19716 ;;                  1    wreg      void 
 19717 ;; Registers used:
 19718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19719 ;; Tracked objects:
 19720 ;;		On entry : 0/0
 19721 ;;		On exit  : 0/0
 19722 ;;		Unchanged: 0/0
 19723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19724 ;;      Params:         0       9       0       0       0       0       0       0       0
 19725 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19726 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19727 ;;      Totals:         0       9       0       0       0       0       0       0       0
 19728 ;;Total ram usage:        9 bytes
 19729 ;; Hardware stack levels used:    1
 19730 ;; Hardware stack levels required when called:    8
 19731 ;; This function calls:
 19732 ;;		_enc424j600_setTXLength
 19733 ;;		_enc424j600_setTXStartAddress
 19734 ;;		_enc424j600_writeSingleByte
 19735 ;;		_memory_txFrameClear
 19736 ;; This function is called by:
 19737 ;;		_arp_send
 19738 ;; This function uses a non-reentrant model
 19739 ;;
 19740                           
 19741                           	psect	text81
 19742  004A64                     __ptext81:
 19743                           	opt stack 0
 19744  004A64                     _ethernetController_sendPacket:
 19745                           	opt stack 17
 19746                           
 19747                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 19748                           
 19749                           ;incstack = 0
 19750  004A64  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 19751  004A68  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 19752  004A6C  ECCA  F024         	call	_enc424j600_setTXStartAddress	;wreg free
 19753                           
 19754                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 19755  004A70  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 19756  004A74  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 19757  004A78  ECDF  F024         	call	_enc424j600_setTXLength	;wreg free
 19758                           
 19759                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 19760  004A7C  0ED4               	movlw	212
 19761  004A7E  ECFD  F025         	call	_enc424j600_writeSingleByte
 19762                           
 19763                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 19764  004A82  0100               	movlb	0	; () banked
 19765  004A84  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 19766  004A86  EC80  F025         	call	_memory_txFrameClear
 19767  004A8A  0012               	return		;funcret
 19768  004A8C                     __end_of_ethernetController_sendPacket:
 19769                           	opt stack 0
 19770                           tblptru	equ	0xFF8
 19771                           tblptrh	equ	0xFF7
 19772                           tblptrl	equ	0xFF6
 19773                           tablat	equ	0xFF5
 19774                           prodh	equ	0xFF4
 19775                           prodl	equ	0xFF3
 19776                           intcon	equ	0xFF2
 19777                           intcon3	equ	0xFF0
 19778                           indf0	equ	0xFEF
 19779                           postinc0	equ	0xFEE
 19780                           plusw0	equ	0xFEB
 19781                           fsr0h	equ	0xFEA
 19782                           fsr0l	equ	0xFE9
 19783                           wreg	equ	0xFE8
 19784                           indf1	equ	0xFE7
 19785                           postinc1	equ	0xFE6
 19786                           postdec1	equ	0xFE5
 19787                           plusw1	equ	0xFE3
 19788                           fsr1h	equ	0xFE2
 19789                           fsr1l	equ	0xFE1
 19790                           indf2	equ	0xFDF
 19791                           postinc2	equ	0xFDE
 19792                           postdec2	equ	0xFDD
 19793                           plusw2	equ	0xFDB
 19794                           fsr2h	equ	0xFDA
 19795                           fsr2l	equ	0xFD9
 19796                           status	equ	0xFD8
 19797                           
 19798 ;; *************** function _memory_txFrameClear *****************
 19799 ;; Defined at:
 19800 ;;		line 221 in file "src/mem/memoryController.c"
 19801 ;; Parameters:    Size  Location     Type
 19802 ;;  index           1    wreg     unsigned char 
 19803 ;; Auto vars:     Size  Location     Type
 19804 ;;  index           1    0[BANK0 ] unsigned char 
 19805 ;; Return value:  Size  Location     Type
 19806 ;;                  1    wreg      void 
 19807 ;; Registers used:
 19808 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19809 ;; Tracked objects:
 19810 ;;		On entry : 0/0
 19811 ;;		On exit  : 0/0
 19812 ;;		Unchanged: 0/0
 19813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19814 ;;      Params:         0       0       0       0       0       0       0       0       0
 19815 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19816 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19817 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19818 ;;Total ram usage:        1 bytes
 19819 ;; Hardware stack levels used:    1
 19820 ;; Hardware stack levels required when called:    4
 19821 ;; This function calls:
 19822 ;;		Nothing
 19823 ;; This function is called by:
 19824 ;;		_ethernetController_sendPacket
 19825 ;; This function uses a non-reentrant model
 19826 ;;
 19827                           
 19828                           	psect	text82
 19829  004B00                     __ptext82:
 19830                           	opt stack 0
 19831  004B00                     _memory_txFrameClear:
 19832                           	opt stack 20
 19833                           
 19834                           ;incstack = 0
 19835                           ;memory_txFrameClear@index stored from wreg
 19836  004B00  0100               	movlb	0	; () banked
 19837  004B02  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 19838                           
 19839                           ;memoryController.c: 222: occupiedMemory[index].fIsAssigned = 0;
 19840  004B04  0100               	movlb	0	; () banked
 19841  004B06  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 19842  004B08  0D09               	mullw	9
 19843  004B0A  0E06               	movlw	6
 19844  004B0C  26F3               	addwf	prodl,f,c
 19845  004B0E  0E00               	movlw	0
 19846  004B10  22F4               	addwfc	prodh,f,c
 19847  004B12  0E8B               	movlw	low _occupiedMemory
 19848  004B14  24F3               	addwf	prodl,w,c
 19849  004B16  6ED9               	movwf	fsr2l,c
 19850  004B18  0E01               	movlw	high _occupiedMemory
 19851  004B1A  20F4               	addwfc	prodh,w,c
 19852  004B1C  6EDA               	movwf	fsr2h,c
 19853  004B1E  0E00               	movlw	0
 19854  004B20  6EDF               	movwf	indf2,c
 19855                           
 19856                           ; BSR set to: 0
 19857  004B22  0012               	return		;funcret
 19858  004B24                     __end_of_memory_txFrameClear:
 19859                           	opt stack 0
 19860                           tblptru	equ	0xFF8
 19861                           tblptrh	equ	0xFF7
 19862                           tblptrl	equ	0xFF6
 19863                           tablat	equ	0xFF5
 19864                           prodh	equ	0xFF4
 19865                           prodl	equ	0xFF3
 19866                           intcon	equ	0xFF2
 19867                           intcon3	equ	0xFF0
 19868                           indf0	equ	0xFEF
 19869                           postinc0	equ	0xFEE
 19870                           plusw0	equ	0xFEB
 19871                           fsr0h	equ	0xFEA
 19872                           fsr0l	equ	0xFE9
 19873                           wreg	equ	0xFE8
 19874                           indf1	equ	0xFE7
 19875                           postinc1	equ	0xFE6
 19876                           postdec1	equ	0xFE5
 19877                           plusw1	equ	0xFE3
 19878                           fsr1h	equ	0xFE2
 19879                           fsr1l	equ	0xFE1
 19880                           indf2	equ	0xFDF
 19881                           postinc2	equ	0xFDE
 19882                           postdec2	equ	0xFDD
 19883                           plusw2	equ	0xFDB
 19884                           fsr2h	equ	0xFDA
 19885                           fsr2l	equ	0xFD9
 19886                           status	equ	0xFD8
 19887                           
 19888 ;; *************** function _enc424j600_setTXStartAddress *****************
 19889 ;; Defined at:
 19890 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 19891 ;; Parameters:    Size  Location     Type
 19892 ;;  addr            2   14[BANK0 ] unsigned int 
 19893 ;; Auto vars:     Size  Location     Type
 19894 ;;  highByte        1   17[BANK0 ] unsigned char 
 19895 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19896 ;; Return value:  Size  Location     Type
 19897 ;;                  1    wreg      void 
 19898 ;; Registers used:
 19899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19900 ;; Tracked objects:
 19901 ;;		On entry : 0/0
 19902 ;;		On exit  : 0/0
 19903 ;;		Unchanged: 0/0
 19904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19905 ;;      Params:         0       2       0       0       0       0       0       0       0
 19906 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19907 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19908 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19909 ;;Total ram usage:        4 bytes
 19910 ;; Hardware stack levels used:    1
 19911 ;; Hardware stack levels required when called:    7
 19912 ;; This function calls:
 19913 ;;		_enc424j600_writeControlRegisterUnbanked
 19914 ;; This function is called by:
 19915 ;;		_ethernetController_sendPacket
 19916 ;; This function uses a non-reentrant model
 19917 ;;
 19918                           
 19919                           	psect	text83
 19920  004994                     __ptext83:
 19921                           	opt stack 0
 19922  004994                     _enc424j600_setTXStartAddress:
 19923                           	opt stack 17
 19924                           
 19925                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 19926                           
 19927                           ; BSR set to: 0
 19928                           ;incstack = 0
 19929  004994  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 19930                           
 19931                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 19932  004998  0100               	movlb	0	; () banked
 19933  00499A  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 19934  00499C  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 19935                           
 19936                           ; BSR set to: 0
 19937                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 19938  00499E  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 19939  0049A0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19940  0049A2  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 19941  0049A4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19942  0049A6  0E00               	movlw	0
 19943  0049A8  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 19944                           
 19945                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 19946  0049AC  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 19947  0049AE  0100               	movlb	0	; () banked
 19948  0049B0  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 19949  0049B2  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 19950  0049B4  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19951  0049B6  0E01               	movlw	1
 19952  0049B8  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 19953  0049BC  0012               	return		;funcret
 19954  0049BE                     __end_of_enc424j600_setTXStartAddress:
 19955                           	opt stack 0
 19956                           tblptru	equ	0xFF8
 19957                           tblptrh	equ	0xFF7
 19958                           tblptrl	equ	0xFF6
 19959                           tablat	equ	0xFF5
 19960                           prodh	equ	0xFF4
 19961                           prodl	equ	0xFF3
 19962                           intcon	equ	0xFF2
 19963                           intcon3	equ	0xFF0
 19964                           indf0	equ	0xFEF
 19965                           postinc0	equ	0xFEE
 19966                           plusw0	equ	0xFEB
 19967                           fsr0h	equ	0xFEA
 19968                           fsr0l	equ	0xFE9
 19969                           wreg	equ	0xFE8
 19970                           indf1	equ	0xFE7
 19971                           postinc1	equ	0xFE6
 19972                           postdec1	equ	0xFE5
 19973                           plusw1	equ	0xFE3
 19974                           fsr1h	equ	0xFE2
 19975                           fsr1l	equ	0xFE1
 19976                           indf2	equ	0xFDF
 19977                           postinc2	equ	0xFDE
 19978                           postdec2	equ	0xFDD
 19979                           plusw2	equ	0xFDB
 19980                           fsr2h	equ	0xFDA
 19981                           fsr2l	equ	0xFD9
 19982                           status	equ	0xFD8
 19983                           
 19984 ;; *************** function _enc424j600_setTXLength *****************
 19985 ;; Defined at:
 19986 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 19987 ;; Parameters:    Size  Location     Type
 19988 ;;  len             2   14[BANK0 ] unsigned int 
 19989 ;; Auto vars:     Size  Location     Type
 19990 ;;  highByte        1   17[BANK0 ] unsigned char 
 19991 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19992 ;; Return value:  Size  Location     Type
 19993 ;;                  1    wreg      void 
 19994 ;; Registers used:
 19995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19996 ;; Tracked objects:
 19997 ;;		On entry : 0/0
 19998 ;;		On exit  : 0/0
 19999 ;;		Unchanged: 0/0
 20000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20001 ;;      Params:         0       2       0       0       0       0       0       0       0
 20002 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20003 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20004 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20005 ;;Total ram usage:        4 bytes
 20006 ;; Hardware stack levels used:    1
 20007 ;; Hardware stack levels required when called:    7
 20008 ;; This function calls:
 20009 ;;		_enc424j600_writeControlRegisterUnbanked
 20010 ;; This function is called by:
 20011 ;;		_ethernetController_sendPacket
 20012 ;; This function uses a non-reentrant model
 20013 ;;
 20014                           
 20015                           	psect	text84
 20016  0049BE                     __ptext84:
 20017                           	opt stack 0
 20018  0049BE                     _enc424j600_setTXLength:
 20019                           	opt stack 17
 20020                           
 20021                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 20022                           
 20023                           ;incstack = 0
 20024  0049BE  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 20025                           
 20026                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 20027  0049C2  0100               	movlb	0	; () banked
 20028  0049C4  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 20029  0049C6  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 20030                           
 20031                           ; BSR set to: 0
 20032                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 20033  0049C8  0E70               	movlw	low enc424j600_setTXLength@lowByte
 20034  0049CA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20035  0049CC  0E00               	movlw	high enc424j600_setTXLength@lowByte
 20036  0049CE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20037  0049D0  0E02               	movlw	2
 20038  0049D2  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20039                           
 20040                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 20041  0049D6  0E71               	movlw	low enc424j600_setTXLength@highByte
 20042  0049D8  0100               	movlb	0	; () banked
 20043  0049DA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20044  0049DC  0E00               	movlw	high enc424j600_setTXLength@highByte
 20045  0049DE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20046  0049E0  0E03               	movlw	3
 20047  0049E2  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20048  0049E6  0012               	return		;funcret
 20049  0049E8                     __end_of_enc424j600_setTXLength:
 20050                           	opt stack 0
 20051                           tblptru	equ	0xFF8
 20052                           tblptrh	equ	0xFF7
 20053                           tblptrl	equ	0xFF6
 20054                           tablat	equ	0xFF5
 20055                           prodh	equ	0xFF4
 20056                           prodl	equ	0xFF3
 20057                           intcon	equ	0xFF2
 20058                           intcon3	equ	0xFF0
 20059                           indf0	equ	0xFEF
 20060                           postinc0	equ	0xFEE
 20061                           plusw0	equ	0xFEB
 20062                           fsr0h	equ	0xFEA
 20063                           fsr0l	equ	0xFE9
 20064                           wreg	equ	0xFE8
 20065                           indf1	equ	0xFE7
 20066                           postinc1	equ	0xFE6
 20067                           postdec1	equ	0xFE5
 20068                           plusw1	equ	0xFE3
 20069                           fsr1h	equ	0xFE2
 20070                           fsr1l	equ	0xFE1
 20071                           indf2	equ	0xFDF
 20072                           postinc2	equ	0xFDE
 20073                           postdec2	equ	0xFDD
 20074                           plusw2	equ	0xFDB
 20075                           fsr2h	equ	0xFDA
 20076                           fsr2l	equ	0xFD9
 20077                           status	equ	0xFD8
 20078                           
 20079 ;; *************** function _ethernetController_getSourceMACAddress *****************
 20080 ;; Defined at:
 20081 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 20082 ;; Parameters:    Size  Location     Type
 20083 ;;  field           9   15[BANK0 ] struct memoryField
 20084 ;; Auto vars:     Size  Location     Type
 20085 ;;  temp            1   31[BANK0 ] unsigned char 
 20086 ;;  i               1   32[BANK0 ] unsigned char 
 20087 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 20088 ;;  opcode          1   24[BANK0 ] unsigned char 
 20089 ;; Return value:  Size  Location     Type
 20090 ;;                  6   15[BANK0 ] struct macaddress
 20091 ;; Registers used:
 20092 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20093 ;; Tracked objects:
 20094 ;;		On entry : 0/0
 20095 ;;		On exit  : 0/0
 20096 ;;		Unchanged: 0/0
 20097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20098 ;;      Params:         0       9       0       0       0       0       0       0       0
 20099 ;;      Locals:         0       9       0       0       0       0       0       0       0
 20100 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20101 ;;      Totals:         0      18       0       0       0       0       0       0       0
 20102 ;;Total ram usage:       18 bytes
 20103 ;; Hardware stack levels used:    1
 20104 ;; Hardware stack levels required when called:    7
 20105 ;; This function calls:
 20106 ;;		_enc424j600_readSPI
 20107 ;;		_enc424j600_setERXDATAReadPointer
 20108 ;;		_enc424j600_writeSPI
 20109 ;; This function is called by:
 20110 ;;		_arp_send
 20111 ;; This function uses a non-reentrant model
 20112 ;;
 20113                           
 20114                           	psect	text85
 20115  004050                     __ptext85:
 20116                           	opt stack 0
 20117  004050                     _ethernetController_getSourceMACAddress:
 20118                           	opt stack 18
 20119                           
 20120                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 20121                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 20122                           
 20123                           ;incstack = 0
 20124  004050  0E0E               	movlw	14
 20125  004052  0100               	movlb	0	; () banked
 20126  004054  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 20127  004056  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 20128  004058  0E00               	movlw	0
 20129  00405A  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 20130  00405C  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 20131  00405E  ECDE  F023         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 20132                           
 20133                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 20134  004062  0E2C               	movlw	44
 20135  004064  0100               	movlb	0	; () banked
 20136  004066  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 20137                           
 20138                           ; BSR set to: 0
 20139                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 20140  004068  9881               	bcf	3969,4,c	;volatile
 20141                           
 20142                           ; BSR set to: 0
 20143                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 20144  00406A  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 20145  00406C  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20146  00406E  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 20147  004070  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20148  004072  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 20149                           
 20150                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 20151  004076  0E00               	movlw	0
 20152  004078  0100               	movlb	0	; () banked
 20153  00407A  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 20154  00407C                     l8067:
 20155                           
 20156                           ; BSR set to: 0
 20157  00407C  0E05               	movlw	5
 20158  00407E  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 20159  004080  D001               	goto	l155
 20160  004082  D013               	goto	u8930
 20161  004084                     l155:
 20162                           
 20163                           ; BSR set to: 0
 20164                           ;ENC424J600.c: 275: uint8_t temp;
 20165                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 20166                           
 20167                           ; BSR set to: 0
 20168  004084  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 20169  004086  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 20170  004088  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 20171  00408A  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 20172  00408C  EC60  F020         	call	_enc424j600_readSPI	;wreg free
 20173                           
 20174                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 20175  004090  0100               	movlb	0	; () banked
 20176  004092  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 20177  004094  0D01               	mullw	1
 20178  004096  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 20179  004098  24F3               	addwf	prodl,w,c
 20180  00409A  6ED9               	movwf	fsr2l,c
 20181  00409C  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 20182  00409E  20F4               	addwfc	prodh,w,c
 20183  0040A0  6EDA               	movwf	fsr2h,c
 20184  0040A2  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 20185                           
 20186                           ; BSR set to: 0
 20187  0040A6  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 20188  0040A8  D7E9               	goto	l8067
 20189  0040AA                     u8930:
 20190                           
 20191                           ; BSR set to: 0
 20192                           ;ENC424J600.c: 278: }
 20193                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 20194  0040AA  8881               	bsf	3969,4,c	;volatile
 20195                           
 20196                           ; BSR set to: 0
 20197                           ;ENC424J600.c: 280: return sourceAddress;
 20198  0040AC  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 20199  0040B0  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 20200  0040B4  0E05               	movlw	5
 20201  0040B6                     u8941:
 20202  0040B6  CFDB FFEB          	movff	plusw2,plusw0
 20203  0040BA  06E8               	decf	wreg,f,c
 20204  0040BC  E2FC               	bc	u8941
 20205  0040BE  0012               	return	
 20206  0040C0                     __end_of_ethernetController_getSourceMACAddress:
 20207                           	opt stack 0
 20208                           tblptru	equ	0xFF8
 20209                           tblptrh	equ	0xFF7
 20210                           tblptrl	equ	0xFF6
 20211                           tablat	equ	0xFF5
 20212                           prodh	equ	0xFF4
 20213                           prodl	equ	0xFF3
 20214                           intcon	equ	0xFF2
 20215                           intcon3	equ	0xFF0
 20216                           indf0	equ	0xFEF
 20217                           postinc0	equ	0xFEE
 20218                           plusw0	equ	0xFEB
 20219                           fsr0h	equ	0xFEA
 20220                           fsr0l	equ	0xFE9
 20221                           wreg	equ	0xFE8
 20222                           indf1	equ	0xFE7
 20223                           postinc1	equ	0xFE6
 20224                           postdec1	equ	0xFE5
 20225                           plusw1	equ	0xFE3
 20226                           fsr1h	equ	0xFE2
 20227                           fsr1l	equ	0xFE1
 20228                           indf2	equ	0xFDF
 20229                           postinc2	equ	0xFDE
 20230                           postdec2	equ	0xFDD
 20231                           plusw2	equ	0xFDB
 20232                           fsr2h	equ	0xFDA
 20233                           fsr2l	equ	0xFD9
 20234                           status	equ	0xFD8
 20235                           
 20236 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 20237 ;; Defined at:
 20238 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 20239 ;; Parameters:    Size  Location     Type
 20240 ;;  addr            2   10[BANK0 ] unsigned int 
 20241 ;; Auto vars:     Size  Location     Type
 20242 ;;  highByte        1   14[BANK0 ] unsigned char 
 20243 ;;  lowByte         1   13[BANK0 ] unsigned char 
 20244 ;;  opcode          1   12[BANK0 ] unsigned char 
 20245 ;; Return value:  Size  Location     Type
 20246 ;;                  1    wreg      void 
 20247 ;; Registers used:
 20248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20249 ;; Tracked objects:
 20250 ;;		On entry : 0/0
 20251 ;;		On exit  : 0/0
 20252 ;;		Unchanged: 0/0
 20253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20254 ;;      Params:         0       2       0       0       0       0       0       0       0
 20255 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20256 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20257 ;;      Totals:         0       5       0       0       0       0       0       0       0
 20258 ;;Total ram usage:        5 bytes
 20259 ;; Hardware stack levels used:    1
 20260 ;; Hardware stack levels required when called:    6
 20261 ;; This function calls:
 20262 ;;		_enc424j600_writeSPI
 20263 ;; This function is called by:
 20264 ;;		_ethernetController_getSourceMACAddress
 20265 ;;		_ethernetController_getEtherTypeField
 20266 ;;		_ethernetController_getRSV
 20267 ;;		_ethernetController_updateNextPacketPointer
 20268 ;;		_ethernetController_streamFromRXBuffer
 20269 ;;		_ethernetController_getDestinationMACAddress
 20270 ;; This function uses a non-reentrant model
 20271 ;;
 20272                           
 20273                           	psect	text86
 20274  0047BC                     __ptext86:
 20275                           	opt stack 0
 20276  0047BC                     _enc424j600_setERXDATAReadPointer:
 20277                           	opt stack 19
 20278                           
 20279                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 20280                           
 20281                           ; BSR set to: 0
 20282                           ;incstack = 0
 20283  0047BC  0E64               	movlw	100
 20284  0047BE  0100               	movlb	0	; () banked
 20285  0047C0  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 20286                           
 20287                           ; BSR set to: 0
 20288                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 20289  0047C2  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 20290                           
 20291                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 20292  0047C6  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 20293  0047C8  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 20294                           
 20295                           ; BSR set to: 0
 20296                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 20297  0047CA  9881               	bcf	3969,4,c	;volatile
 20298                           
 20299                           ; BSR set to: 0
 20300                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 20301  0047CC  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 20302  0047CE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20303  0047D0  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 20304  0047D2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20305  0047D4  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 20306                           
 20307                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 20308  0047D8  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 20309  0047DA  0100               	movlb	0	; () banked
 20310  0047DC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20311  0047DE  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 20312  0047E0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20313  0047E2  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 20314                           
 20315                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 20316  0047E6  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 20317  0047E8  0100               	movlb	0	; () banked
 20318  0047EA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 20319  0047EC  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 20320  0047EE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 20321  0047F0  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 20322                           
 20323                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 20324  0047F4  8881               	bsf	3969,4,c	;volatile
 20325  0047F6  0012               	return		;funcret
 20326  0047F8                     __end_of_enc424j600_setERXDATAReadPointer:
 20327                           	opt stack 0
 20328                           tblptru	equ	0xFF8
 20329                           tblptrh	equ	0xFF7
 20330                           tblptrl	equ	0xFF6
 20331                           tablat	equ	0xFF5
 20332                           prodh	equ	0xFF4
 20333                           prodl	equ	0xFF3
 20334                           intcon	equ	0xFF2
 20335                           intcon3	equ	0xFF0
 20336                           indf0	equ	0xFEF
 20337                           postinc0	equ	0xFEE
 20338                           plusw0	equ	0xFEB
 20339                           fsr0h	equ	0xFEA
 20340                           fsr0l	equ	0xFE9
 20341                           wreg	equ	0xFE8
 20342                           indf1	equ	0xFE7
 20343                           postinc1	equ	0xFE6
 20344                           postdec1	equ	0xFE5
 20345                           plusw1	equ	0xFE3
 20346                           fsr1h	equ	0xFE2
 20347                           fsr1l	equ	0xFE1
 20348                           indf2	equ	0xFDF
 20349                           postinc2	equ	0xFDE
 20350                           postdec2	equ	0xFDD
 20351                           plusw2	equ	0xFDB
 20352                           fsr2h	equ	0xFDA
 20353                           fsr2l	equ	0xFD9
 20354                           status	equ	0xFD8
 20355                           
 20356 ;; *************** function _UARTTransmitText *****************
 20357 ;; Defined at:
 20358 ;;		line 36 in file "src/system/uart.c"
 20359 ;; Parameters:    Size  Location     Type
 20360 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 20361 ;;		 -> STR_96(39), STR_95(59), STR_94(5), STR_93(38), 
 20362 ;;		 -> STR_92(23), STR_91(30), STR_90(45), STR_89(64), 
 20363 ;;		 -> STR_88(35), STR_87(5), STR_86(42), STR_85(19), 
 20364 ;;		 -> STR_84(2), STR_83(3), STR_82(3), STR_81(3), 
 20365 ;;		 -> STR_80(3), STR_79(5), STR_78(2), STR_77(2), 
 20366 ;;		 -> STR_76(7), STR_75(11), STR_74(3), STR_73(31), 
 20367 ;;		 -> STR_72(33), STR_71(24), STR_70(36), STR_69(2), 
 20368 ;;		 -> STR_68(3), STR_67(16), STR_66(15), STR_65(10), 
 20369 ;;		 -> STR_64(2), STR_63(3), STR_62(5), STR_61(3), 
 20370 ;;		 -> STR_60(2), STR_59(39), arpEntryToString@string(50), ipAdressToString@address(16), 
 20371 ;;		 -> STR_58(17), STR_57(4), STR_56(4), STR_55(5), 
 20372 ;;		 -> STR_54(18), STR_53(4), STR_52(5), macToString@address(18), 
 20373 ;;		 -> hexToString@number(10), intToString@number(10), STR_51(5), STR_50(9), 
 20374 ;;		 -> STR_49(30), STR_48(34), STR_47(55), STR_46(37), 
 20375 ;;		 -> STR_45(15), STR_44(14), STR_43(19), STR_42(30), 
 20376 ;;		 -> STR_41(17), STR_40(8), STR_39(29), STR_38(29), 
 20377 ;;		 -> STR_37(20), STR_36(19), STR_35(19), STR_34(13), 
 20378 ;;		 -> STR_33(51), STR_32(4), STR_31(23), STR_30(12), 
 20379 ;;		 -> STR_29(4), STR_28(9), STR_27(2), STR_26(12), 
 20380 ;;		 -> STR_25(24), STR_24(51), STR_23(49), STR_22(51), 
 20381 ;;		 -> STR_21(2), STR_20(3), STR_19(3), STR_18(3), 
 20382 ;;		 -> STR_17(5), STR_16(2), STR_15(3), STR_14(5), 
 20383 ;;		 -> STR_13(3), STR_12(3), STR_11(2), STR_10(20), 
 20384 ;;		 -> STR_9(7), STR_8(6), STR_7(2), STR_6(2), 
 20385 ;;		 -> STR_5(16), STR_4(10), STR_3(12), STR_2(2), 
 20386 ;;		 -> STR_1(2), ethernetController_getDeviceName@string(11), 
 20387 ;; Auto vars:     Size  Location     Type
 20388 ;;		None
 20389 ;; Return value:  Size  Location     Type
 20390 ;;                  1    wreg      void 
 20391 ;; Registers used:
 20392 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20393 ;; Tracked objects:
 20394 ;;		On entry : 0/0
 20395 ;;		On exit  : 0/0
 20396 ;;		Unchanged: 0/0
 20397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20398 ;;      Params:         0       2       0       0       0       0       0       0       0
 20399 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20400 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20401 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20402 ;;Total ram usage:        2 bytes
 20403 ;; Hardware stack levels used:    1
 20404 ;; Hardware stack levels required when called:    4
 20405 ;; This function calls:
 20406 ;;		Nothing
 20407 ;; This function is called by:
 20408 ;;		_ethernet_rxGetNewFrame
 20409 ;;		_main
 20410 ;;		_printEthernetState
 20411 ;;		_printErrorMessage
 20412 ;;		_UARTTransmitInt
 20413 ;;		_arp_handleNewPacket
 20414 ;;		_arp_sendReply
 20415 ;;		_arp_background
 20416 ;;		_ipv4_checkHeaderChecksum
 20417 ;;		_ipv4_handleNewPacket
 20418 ;;		_ipv4_setIPSourceAddress
 20419 ;;		_ipv4_background
 20420 ;;		_printArpTable
 20421 ;; This function uses a non-reentrant model
 20422 ;;
 20423                           
 20424                           	psect	text87
 20425  004368                     __ptext87:
 20426                           	opt stack 0
 20427  004368                     _UARTTransmitText:
 20428                           	opt stack 25
 20429                           
 20430                           ;uart.c: 37: while (*str) {
 20431                           
 20432                           ;incstack = 0
 20433  004368  D016               	goto	u9160
 20434  00436A                     
 20435                           ;uart.c: 38: TXREG1 = *str++;
 20436  00436A  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20437  00436E  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20438  004372  6AF8               	clrf	tblptru,c
 20439  004374  0E07               	movlw	(high __ramtop+-1)
 20440  004376  64F7               	cpfsgt	tblptrh,c
 20441  004378  D003               	bra	u9157
 20442  00437A  0008               	tblrd		*
 20443  00437C  50F5               	movf	tablat,w,c
 20444  00437E  D005               	bra	u9150
 20445  004380                     u9157:
 20446  004380  CFF6 FFE9          	movff	tblptrl,fsr0l
 20447  004384  CFF7 FFEA          	movff	tblptrh,fsr0h
 20448  004388  50EF               	movf	indf0,w,c
 20449  00438A                     u9150:
 20450  00438A  6EAD               	movwf	4013,c	;volatile
 20451  00438C  0100               	movlb	0	; () banked
 20452  00438E  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 20453  004390  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 20454  004392                     
 20455                           ; BSR set to: 0
 20456  004392  A2AC               	btfss	4012,1,c	;volatile
 20457  004394  D7FE               	goto	l759
 20458  004396                     u9160:
 20459  004396  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 20460  00439A  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 20461  00439E  6AF8               	clrf	tblptru,c
 20462  0043A0  0E07               	movlw	(high __ramtop+-1)
 20463  0043A2  64F7               	cpfsgt	tblptrh,c
 20464  0043A4  D003               	bra	u9177
 20465  0043A6  0008               	tblrd		*
 20466  0043A8  50F5               	movf	tablat,w,c
 20467  0043AA  D005               	bra	u9170
 20468  0043AC                     u9177:
 20469  0043AC  CFF6 FFE9          	movff	tblptrl,fsr0l
 20470  0043B0  CFF7 FFEA          	movff	tblptrh,fsr0h
 20471  0043B4  50EF               	movf	indf0,w,c
 20472  0043B6                     u9170:
 20473  0043B6  0900               	iorlw	0
 20474  0043B8  B4D8               	btfsc	status,2,c
 20475  0043BA  0012               	return	
 20476  0043BC  D7D6               	goto	l757
 20477  0043BE                     __end_of_UARTTransmitText:
 20478                           	opt stack 0
 20479                           tblptru	equ	0xFF8
 20480                           tblptrh	equ	0xFF7
 20481                           tblptrl	equ	0xFF6
 20482                           tablat	equ	0xFF5
 20483                           prodh	equ	0xFF4
 20484                           prodl	equ	0xFF3
 20485                           intcon	equ	0xFF2
 20486                           intcon3	equ	0xFF0
 20487                           indf0	equ	0xFEF
 20488                           postinc0	equ	0xFEE
 20489                           plusw0	equ	0xFEB
 20490                           fsr0h	equ	0xFEA
 20491                           fsr0l	equ	0xFE9
 20492                           wreg	equ	0xFE8
 20493                           indf1	equ	0xFE7
 20494                           postinc1	equ	0xFE6
 20495                           postdec1	equ	0xFE5
 20496                           plusw1	equ	0xFE3
 20497                           fsr1h	equ	0xFE2
 20498                           fsr1l	equ	0xFE1
 20499                           indf2	equ	0xFDF
 20500                           postinc2	equ	0xFDE
 20501                           postdec2	equ	0xFDD
 20502                           plusw2	equ	0xFDB
 20503                           fsr2h	equ	0xFDA
 20504                           fsr2l	equ	0xFD9
 20505                           status	equ	0xFD8
 20506                           
 20507 ;; *************** function _ethernetController_init *****************
 20508 ;; Defined at:
 20509 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 20510 ;; Parameters:    Size  Location     Type
 20511 ;;		None
 20512 ;; Auto vars:     Size  Location     Type
 20513 ;;  err             3   29[BANK0 ] struct error
 20514 ;; Return value:  Size  Location     Type
 20515 ;;                  3   26[BANK0 ] struct error
 20516 ;; Registers used:
 20517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20518 ;; Tracked objects:
 20519 ;;		On entry : 0/0
 20520 ;;		On exit  : 0/0
 20521 ;;		Unchanged: 0/0
 20522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20523 ;;      Params:         0       3       0       0       0       0       0       0       0
 20524 ;;      Locals:         0       3       0       0       0       0       0       0       0
 20525 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20526 ;;      Totals:         0       6       0       0       0       0       0       0       0
 20527 ;;Total ram usage:        6 bytes
 20528 ;; Hardware stack levels used:    1
 20529 ;; Hardware stack levels required when called:    8
 20530 ;; This function calls:
 20531 ;;		_enc424j600_enableAutoMACInsertion
 20532 ;;		_enc424j600_enableReception
 20533 ;;		_enc424j600_initSPI
 20534 ;;		_enc424j600_setNextPacketPointer
 20535 ;;		_enc424j600_setRXBufferStartAddress
 20536 ;;		_enc424j600_setRXTailPointer
 20537 ;;		_ethernetController_checkDeviceId
 20538 ;;		_ethernetController_softReset
 20539 ;; This function is called by:
 20540 ;;		_main
 20541 ;; This function uses a non-reentrant model
 20542 ;;
 20543                           
 20544                           	psect	text88
 20545  003F6E                     __ptext88:
 20546                           	opt stack 0
 20547  003F6E                     _ethernetController_init:
 20548                           	opt stack 22
 20549                           
 20550                           ;ENC424J600.c: 35: error_t err;
 20551                           ;ENC424J600.c: 36: enc424j600_initSPI();
 20552                           
 20553                           ;incstack = 0
 20554  003F6E  ECD5  F025         	call	_enc424j600_initSPI	;wreg free
 20555                           
 20556                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 20557  003F72  ECA9  F016         	call	_ethernetController_softReset	;wreg free
 20558  003F76  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 20559  003F7A  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 20560  003F7E  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 20561                           
 20562                           ;ENC424J600.c: 40: }
 20563                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 20564  003F82  ECAB  F022         	call	_ethernetController_checkDeviceId	;wreg free
 20565  003F86  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 20566  003F8A  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 20567  003F8E  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 20568                           
 20569                           ;ENC424J600.c: 44: }
 20570                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 20571  003F92  0E30               	movlw	48
 20572  003F94  0100               	movlb	0	; () banked
 20573  003F96  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 20574  003F98  0E00               	movlw	0
 20575  003F9A  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 20576  003F9C  EC09  F025         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 20577                           
 20578                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 20579  003FA0  0E30               	movlw	48
 20580  003FA2  0100               	movlb	0	; () banked
 20581  003FA4  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 20582  003FA6  0E00               	movlw	0
 20583  003FA8  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 20584  003FAA  EC65  F026         	call	_enc424j600_setNextPacketPointer	;wreg free
 20585                           
 20586                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 20587  003FAE  0E5F               	movlw	95
 20588  003FB0  0100               	movlb	0	; () banked
 20589  003FB2  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 20590  003FB4  0EFE               	movlw	254
 20591  003FB6  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 20592  003FB8  ECF4  F024         	call	_enc424j600_setRXTailPointer	;wreg free
 20593                           
 20594                           ;ENC424J600.c: 67: enc424j600_enableReception();
 20595  003FBC  EC6A  F026         	call	_enc424j600_enableReception	;wreg free
 20596                           
 20597                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 20598  003FC0  EC46  F025         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 20599                           
 20600                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20601  003FC4  0E01               	movlw	1
 20602  003FC6  0100               	movlb	0	; () banked
 20603  003FC8  6F7D               	movwf	ethernetController_init@err& (0+255),b
 20604                           
 20605                           ; BSR set to: 0
 20606                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 20607  003FCA  0E00               	movlw	0
 20608  003FCC  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 20609  003FCE  0E00               	movlw	0
 20610  003FD0  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 20611                           
 20612                           ; BSR set to: 0
 20613                           ;ENC424J600.c: 72: return err;
 20614  003FD2  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 20615  003FD6  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 20616  003FDA  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 20617  003FDE  0012               	return	
 20618  003FE0                     __end_of_ethernetController_init:
 20619                           	opt stack 0
 20620                           tblptru	equ	0xFF8
 20621                           tblptrh	equ	0xFF7
 20622                           tblptrl	equ	0xFF6
 20623                           tablat	equ	0xFF5
 20624                           prodh	equ	0xFF4
 20625                           prodl	equ	0xFF3
 20626                           intcon	equ	0xFF2
 20627                           intcon3	equ	0xFF0
 20628                           indf0	equ	0xFEF
 20629                           postinc0	equ	0xFEE
 20630                           plusw0	equ	0xFEB
 20631                           fsr0h	equ	0xFEA
 20632                           fsr0l	equ	0xFE9
 20633                           wreg	equ	0xFE8
 20634                           indf1	equ	0xFE7
 20635                           postinc1	equ	0xFE6
 20636                           postdec1	equ	0xFE5
 20637                           plusw1	equ	0xFE3
 20638                           fsr1h	equ	0xFE2
 20639                           fsr1l	equ	0xFE1
 20640                           indf2	equ	0xFDF
 20641                           postinc2	equ	0xFDE
 20642                           postdec2	equ	0xFDD
 20643                           plusw2	equ	0xFDB
 20644                           fsr2h	equ	0xFDA
 20645                           fsr2l	equ	0xFD9
 20646                           status	equ	0xFD8
 20647                           
 20648 ;; *************** function _ethernetController_softReset *****************
 20649 ;; Defined at:
 20650 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 20651 ;; Parameters:    Size  Location     Type
 20652 ;;		None
 20653 ;; Auto vars:     Size  Location     Type
 20654 ;;  err             3   23[BANK0 ] struct error
 20655 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 20656 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 20657 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 20658 ;; Return value:  Size  Location     Type
 20659 ;;                  3   14[BANK0 ] struct error
 20660 ;; Registers used:
 20661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20662 ;; Tracked objects:
 20663 ;;		On entry : 0/0
 20664 ;;		On exit  : 0/0
 20665 ;;		Unchanged: 0/0
 20666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20667 ;;      Params:         0       3       0       0       0       0       0       0       0
 20668 ;;      Locals:         0       8       0       0       0       0       0       0       0
 20669 ;;      Temps:          0       1       0       0       0       0       0       0       0
 20670 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20671 ;;Total ram usage:       12 bytes
 20672 ;; Hardware stack levels used:    1
 20673 ;; Hardware stack levels required when called:    7
 20674 ;; This function calls:
 20675 ;;		_enc424j600_readControlRegisterUnbanked
 20676 ;;		_enc424j600_writeControlRegisterUnbanked
 20677 ;;		_enc424j600_writeSingleByte
 20678 ;; This function is called by:
 20679 ;;		_ethernetController_init
 20680 ;; This function uses a non-reentrant model
 20681 ;;
 20682                           
 20683                           	psect	text89
 20684  002D52                     __ptext89:
 20685                           	opt stack 0
 20686  002D52                     _ethernetController_softReset:
 20687                           	opt stack 22
 20688                           
 20689                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 20690                           
 20691                           ; BSR set to: 0
 20692                           ;incstack = 0
 20693  002D52  0E00               	movlw	0
 20694  002D54  0100               	movlb	0	; () banked
 20695  002D56  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 20696                           
 20697                           ; BSR set to: 0
 20698                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 20699  002D58  C04D  F073         	movff	ethernetController_softReset@F5983,ethernetController_softReset@dataToSend
 20700  002D5C  C04E  F074         	movff	ethernetController_softReset@F5983+1,ethernetController_softReset@dataToSend+1
 20701                           
 20702                           ; BSR set to: 0
 20703                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 20704  002D60  C040  F075         	movff	ethernetController_softReset@F5985,ethernetController_softReset@receivedData
 20705  002D64  C041  F076         	movff	ethernetController_softReset@F5985+1,ethernetController_softReset@receivedData+1
 20706                           
 20707                           ;ENC424J600.c: 96: error_t err;
 20708                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20709  002D68  0E01               	movlw	1
 20710  002D6A  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 20711                           
 20712                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 20713  002D6C  0E00               	movlw	0
 20714  002D6E  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20715  002D70  0E00               	movlw	0
 20716  002D72  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20717                           
 20718                           ; BSR set to: 0
 20719                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 20720  002D74  0E05               	movlw	5
 20721  002D76  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 20722  002D78  D05F               	goto	l84
 20723                           
 20724                           ; BSR set to: 0
 20725                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 20726  002D7A  0E73               	movlw	low ethernetController_softReset@dataToSend
 20727  002D7C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20728  002D7E  0E00               	movlw	high ethernetController_softReset@dataToSend
 20729  002D80  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20730  002D82  0E16               	movlw	22
 20731  002D84  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20732                           
 20733                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 20734  002D88  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 20735  002D8A  0100               	movlb	0	; () banked
 20736  002D8C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 20737  002D8E  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 20738  002D90  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 20739  002D92  0E17               	movlw	23
 20740  002D94  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 20741                           
 20742                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20743  002D98  0E75               	movlw	low ethernetController_softReset@receivedData
 20744  002D9A  0100               	movlb	0	; () banked
 20745  002D9C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20746  002D9E  0E00               	movlw	high ethernetController_softReset@receivedData
 20747  002DA0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20748  002DA2  0E16               	movlw	22
 20749  002DA4  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 20750                           
 20751                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20752  002DA8  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20753  002DAA  0100               	movlb	0	; () banked
 20754  002DAC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20755  002DAE  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20756  002DB0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20757  002DB2  0E17               	movlw	23
 20758  002DB4  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 20759                           
 20760                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 20761  002DB8  0100               	movlb	0	; () banked
 20762  002DBA  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 20763  002DBC  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 20764  002DBE  A4D8               	btfss	status,2,c
 20765  002DC0  D038               	goto	l88
 20766                           
 20767                           ; BSR set to: 0
 20768  002DC2  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 20769  002DC4  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20770  002DC6  A4D8               	btfss	status,2,c
 20771  002DC8  D034               	goto	l88
 20772                           
 20773                           ; BSR set to: 0
 20774                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 20775  002DCA  0ECA               	movlw	202
 20776  002DCC  ECFD  F025         	call	_enc424j600_writeSingleByte
 20777                           
 20778                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 20779  002DD0  0E42               	movlw	66
 20780  002DD2                     u11797:
 20781  002DD2  2EE8               	decfsz	wreg,f,c
 20782  002DD4  D7FE               	bra	u11797
 20783  002DD6  D000               	nop2	
 20784                           
 20785                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 20786  002DD8  0E75               	movlw	low ethernetController_softReset@receivedData
 20787  002DDA  0100               	movlb	0	; () banked
 20788  002DDC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20789  002DDE  0E00               	movlw	high ethernetController_softReset@receivedData
 20790  002DE0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20791  002DE2  0E16               	movlw	22
 20792  002DE4  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 20793                           
 20794                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 20795  002DE8  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 20796  002DEA  0100               	movlb	0	; () banked
 20797  002DEC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20798  002DEE  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 20799  002DF0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20800  002DF2  0E17               	movlw	23
 20801  002DF4  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 20802                           
 20803                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 20804  002DF8  0100               	movlb	0	; () banked
 20805  002DFA  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 20806  002DFC  A4D8               	btfss	status,2,c
 20807  002DFE  D00D               	goto	l86
 20808                           
 20809                           ; BSR set to: 0
 20810  002E00  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 20811  002E02  A4D8               	btfss	status,2,c
 20812  002E04  D00A               	goto	l86
 20813                           
 20814                           ; BSR set to: 0
 20815                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 20816  002E06  0E03               	movlw	3
 20817  002E08  0100               	movlb	0	; () banked
 20818  002E0A  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 20819  002E0C  0EA7               	movlw	167
 20820  002E0E                     u11807:
 20821  002E0E  2EE8               	decfsz	wreg,f,c
 20822  002E10  D7FE               	bra	u11807
 20823  002E12  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 20824  002E14  D7FC               	bra	u11807
 20825  002E16  D000               	nop2	
 20826  002E18  D005               	goto	l9285
 20827  002E1A                     l86:
 20828                           
 20829                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20830  002E1A  0E01               	movlw	1
 20831  002E1C  0100               	movlb	0	; () banked
 20832  002E1E  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20833  002E20  0E2E               	movlw	46
 20834  002E22  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20835  002E24                     l9285:
 20836                           
 20837                           ; BSR set to: 0
 20838                           ;ENC424J600.c: 121: return err;
 20839  002E24  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20840  002E28  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20841  002E2C  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20842                           
 20843                           ; BSR set to: 0
 20844  002E30  0012               	return	
 20845  002E32                     l88:
 20846                           
 20847                           ;ENC424J600.c: 122: }
 20848                           ;ENC424J600.c: 123: }
 20849                           ;ENC424J600.c: 124: comFailCount++;
 20850                           
 20851                           ; BSR set to: 0
 20852                           
 20853                           ; BSR set to: 0
 20854  002E32  0100               	movlb	0	; () banked
 20855  002E34  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 20856                           
 20857                           ;ENC424J600.c: 125: } else {
 20858  002E36  D00B               	goto	l89
 20859  002E38                     l84:
 20860                           
 20861                           ; BSR set to: 0
 20862                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 20863                           
 20864                           ; BSR set to: 0
 20865  002E38  0E01               	movlw	1
 20866  002E3A  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 20867  002E3C  0E2E               	movlw	46
 20868  002E3E  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 20869                           
 20870                           ; BSR set to: 0
 20871                           ;ENC424J600.c: 127: return err;
 20872  002E40  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20873  002E44  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20874  002E48  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20875                           
 20876                           ; BSR set to: 0
 20877  002E4C  0012               	return	
 20878  002E4E                     l89:
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;ENC424J600.c: 128: }
 20882                           ;ENC424J600.c: 129: return err;
 20883  002E4E  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 20884  002E52  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 20885  002E56  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 20886  002E5A  0012               	return		;funcret
 20887  002E5C                     __end_of_ethernetController_softReset:
 20888                           	opt stack 0
 20889                           tblptru	equ	0xFF8
 20890                           tblptrh	equ	0xFF7
 20891                           tblptrl	equ	0xFF6
 20892                           tablat	equ	0xFF5
 20893                           prodh	equ	0xFF4
 20894                           prodl	equ	0xFF3
 20895                           intcon	equ	0xFF2
 20896                           intcon3	equ	0xFF0
 20897                           indf0	equ	0xFEF
 20898                           postinc0	equ	0xFEE
 20899                           plusw0	equ	0xFEB
 20900                           fsr0h	equ	0xFEA
 20901                           fsr0l	equ	0xFE9
 20902                           wreg	equ	0xFE8
 20903                           indf1	equ	0xFE7
 20904                           postinc1	equ	0xFE6
 20905                           postdec1	equ	0xFE5
 20906                           plusw1	equ	0xFE3
 20907                           fsr1h	equ	0xFE2
 20908                           fsr1l	equ	0xFE1
 20909                           indf2	equ	0xFDF
 20910                           postinc2	equ	0xFDE
 20911                           postdec2	equ	0xFDD
 20912                           plusw2	equ	0xFDB
 20913                           fsr2h	equ	0xFDA
 20914                           fsr2l	equ	0xFD9
 20915                           status	equ	0xFD8
 20916                           
 20917 ;; *************** function _ethernetController_checkDeviceId *****************
 20918 ;; Defined at:
 20919 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 20920 ;; Parameters:    Size  Location     Type
 20921 ;;		None
 20922 ;; Auto vars:     Size  Location     Type
 20923 ;;  err             3   18[BANK0 ] struct error
 20924 ;;  data            1   17[BANK0 ] unsigned char 
 20925 ;; Return value:  Size  Location     Type
 20926 ;;                  3   14[BANK0 ] struct error
 20927 ;; Registers used:
 20928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20929 ;; Tracked objects:
 20930 ;;		On entry : 0/0
 20931 ;;		On exit  : 0/0
 20932 ;;		Unchanged: 0/0
 20933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20934 ;;      Params:         0       3       0       0       0       0       0       0       0
 20935 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20936 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20937 ;;      Totals:         0       7       0       0       0       0       0       0       0
 20938 ;;Total ram usage:        7 bytes
 20939 ;; Hardware stack levels used:    1
 20940 ;; Hardware stack levels required when called:    7
 20941 ;; This function calls:
 20942 ;;		_enc424j600_readControlRegisterUnbanked
 20943 ;; This function is called by:
 20944 ;;		_ethernetController_init
 20945 ;;		_main
 20946 ;; This function uses a non-reentrant model
 20947 ;;
 20948                           
 20949                           	psect	text90
 20950  004556                     __ptext90:
 20951                           	opt stack 0
 20952  004556                     _ethernetController_checkDeviceId:
 20953                           	opt stack 22
 20954                           
 20955                           ;ENC424J600.c: 133: error_t err;
 20956                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 20957                           
 20958                           ;incstack = 0
 20959  004556  0E01               	movlw	1
 20960  004558  0100               	movlb	0	; () banked
 20961  00455A  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 20962                           
 20963                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 20964  00455C  0E00               	movlw	0
 20965  00455E  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20966  004560  0E00               	movlw	0
 20967  004562  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 20968                           
 20969                           ;ENC424J600.c: 136: uint8_t data = 0;
 20970  004564  0E00               	movlw	0
 20971  004566  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 20972                           
 20973                           ; BSR set to: 0
 20974                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 20975  004568  0E71               	movlw	low ethernetController_checkDeviceId@data
 20976  00456A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 20977  00456C  0E00               	movlw	high ethernetController_checkDeviceId@data
 20978  00456E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 20979  004570  0E74               	movlw	116
 20980  004572  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 20981                           
 20982                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 20983  004576  0100               	movlb	0	; () banked
 20984  004578  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 20985  00457A  42E8               	rrncf	wreg,f,c
 20986  00457C  0B07               	andlw	7
 20987  00457E  0B07               	andlw	7
 20988  004580  06E8               	decf	wreg,f,c
 20989  004582  A4D8               	btfss	status,2,c
 20990  004584  D004               	goto	l92
 20991                           
 20992                           ; BSR set to: 0
 20993                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 20994  004586  0E00               	movlw	0
 20995  004588  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 20996  00458A  0E00               	movlw	0
 20997  00458C  D003               	goto	L9
 20998  00458E                     l92:
 20999                           
 21000                           ; BSR set to: 0
 21001                           ;ENC424J600.c: 140: else
 21002                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 21003                           
 21004                           ; BSR set to: 0
 21005  00458E  0E01               	movlw	1
 21006  004590  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 21007  004592  0E2D               	movlw	45
 21008  004594                     L9:
 21009  004594  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 21010                           
 21011                           ; BSR set to: 0
 21012                           ;ENC424J600.c: 142: return err;
 21013                           
 21014                           ; BSR set to: 0
 21015  004596  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 21016  00459A  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 21017  00459E  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 21018  0045A2  0012               	return	
 21019  0045A4                     __end_of_ethernetController_checkDeviceId:
 21020                           	opt stack 0
 21021                           tblptru	equ	0xFF8
 21022                           tblptrh	equ	0xFF7
 21023                           tblptrl	equ	0xFF6
 21024                           tablat	equ	0xFF5
 21025                           prodh	equ	0xFF4
 21026                           prodl	equ	0xFF3
 21027                           intcon	equ	0xFF2
 21028                           intcon3	equ	0xFF0
 21029                           indf0	equ	0xFEF
 21030                           postinc0	equ	0xFEE
 21031                           plusw0	equ	0xFEB
 21032                           fsr0h	equ	0xFEA
 21033                           fsr0l	equ	0xFE9
 21034                           wreg	equ	0xFE8
 21035                           indf1	equ	0xFE7
 21036                           postinc1	equ	0xFE6
 21037                           postdec1	equ	0xFE5
 21038                           plusw1	equ	0xFE3
 21039                           fsr1h	equ	0xFE2
 21040                           fsr1l	equ	0xFE1
 21041                           indf2	equ	0xFDF
 21042                           postinc2	equ	0xFDE
 21043                           postdec2	equ	0xFDD
 21044                           plusw2	equ	0xFDB
 21045                           fsr2h	equ	0xFDA
 21046                           fsr2l	equ	0xFD9
 21047                           status	equ	0xFD8
 21048                           
 21049 ;; *************** function _enc424j600_setRXTailPointer *****************
 21050 ;; Defined at:
 21051 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 21052 ;; Parameters:    Size  Location     Type
 21053 ;;  addr            2   14[BANK0 ] unsigned int 
 21054 ;; Auto vars:     Size  Location     Type
 21055 ;;  highByte        1   17[BANK0 ] unsigned char 
 21056 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21057 ;; Return value:  Size  Location     Type
 21058 ;;                  1    wreg      void 
 21059 ;; Registers used:
 21060 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21061 ;; Tracked objects:
 21062 ;;		On entry : 0/0
 21063 ;;		On exit  : 0/0
 21064 ;;		Unchanged: 0/0
 21065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21066 ;;      Params:         0       2       0       0       0       0       0       0       0
 21067 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21068 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21069 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21070 ;;Total ram usage:        4 bytes
 21071 ;; Hardware stack levels used:    1
 21072 ;; Hardware stack levels required when called:    7
 21073 ;; This function calls:
 21074 ;;		_enc424j600_writeControlRegisterUnbanked
 21075 ;; This function is called by:
 21076 ;;		_ethernetController_init
 21077 ;;		_ethernetController_dropPacket
 21078 ;; This function uses a non-reentrant model
 21079 ;;
 21080                           
 21081                           	psect	text91
 21082  0049E8                     __ptext91:
 21083                           	opt stack 0
 21084  0049E8                     _enc424j600_setRXTailPointer:
 21085                           	opt stack 19
 21086                           
 21087                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 21088                           
 21089                           ; BSR set to: 0
 21090                           ;incstack = 0
 21091  0049E8  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 21092                           
 21093                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 21094  0049EC  0100               	movlb	0	; () banked
 21095  0049EE  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 21096  0049F0  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 21097                           
 21098                           ; BSR set to: 0
 21099                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 21100  0049F2  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 21101  0049F4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21102  0049F6  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 21103  0049F8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21104  0049FA  0E06               	movlw	6
 21105  0049FC  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21106                           
 21107                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 21108  004A00  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 21109  004A02  0100               	movlb	0	; () banked
 21110  004A04  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21111  004A06  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 21112  004A08  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21113  004A0A  0E07               	movlw	7
 21114  004A0C  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21115  004A10  0012               	return		;funcret
 21116  004A12                     __end_of_enc424j600_setRXTailPointer:
 21117                           	opt stack 0
 21118                           tblptru	equ	0xFF8
 21119                           tblptrh	equ	0xFF7
 21120                           tblptrl	equ	0xFF6
 21121                           tablat	equ	0xFF5
 21122                           prodh	equ	0xFF4
 21123                           prodl	equ	0xFF3
 21124                           intcon	equ	0xFF2
 21125                           intcon3	equ	0xFF0
 21126                           indf0	equ	0xFEF
 21127                           postinc0	equ	0xFEE
 21128                           plusw0	equ	0xFEB
 21129                           fsr0h	equ	0xFEA
 21130                           fsr0l	equ	0xFE9
 21131                           wreg	equ	0xFE8
 21132                           indf1	equ	0xFE7
 21133                           postinc1	equ	0xFE6
 21134                           postdec1	equ	0xFE5
 21135                           plusw1	equ	0xFE3
 21136                           fsr1h	equ	0xFE2
 21137                           fsr1l	equ	0xFE1
 21138                           indf2	equ	0xFDF
 21139                           postinc2	equ	0xFDE
 21140                           postdec2	equ	0xFDD
 21141                           plusw2	equ	0xFDB
 21142                           fsr2h	equ	0xFDA
 21143                           fsr2l	equ	0xFD9
 21144                           status	equ	0xFD8
 21145                           
 21146 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 21147 ;; Defined at:
 21148 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 21149 ;; Parameters:    Size  Location     Type
 21150 ;;  addr            2   14[BANK0 ] unsigned int 
 21151 ;; Auto vars:     Size  Location     Type
 21152 ;;  highByte        1   17[BANK0 ] unsigned char 
 21153 ;;  lowByte         1   16[BANK0 ] unsigned char 
 21154 ;; Return value:  Size  Location     Type
 21155 ;;                  1    wreg      void 
 21156 ;; Registers used:
 21157 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21158 ;; Tracked objects:
 21159 ;;		On entry : 0/0
 21160 ;;		On exit  : 0/0
 21161 ;;		Unchanged: 0/0
 21162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21163 ;;      Params:         0       2       0       0       0       0       0       0       0
 21164 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21165 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21166 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21167 ;;Total ram usage:        4 bytes
 21168 ;; Hardware stack levels used:    1
 21169 ;; Hardware stack levels required when called:    7
 21170 ;; This function calls:
 21171 ;;		_enc424j600_writeControlRegisterUnbanked
 21172 ;; This function is called by:
 21173 ;;		_ethernetController_init
 21174 ;; This function uses a non-reentrant model
 21175 ;;
 21176                           
 21177                           	psect	text92
 21178  004A12                     __ptext92:
 21179                           	opt stack 0
 21180  004A12                     _enc424j600_setRXBufferStartAddress:
 21181                           	opt stack 22
 21182                           
 21183                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 21184                           
 21185                           ;incstack = 0
 21186  004A12  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 21187                           
 21188                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 21189  004A16  0100               	movlb	0	; () banked
 21190  004A18  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 21191  004A1A  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 21192                           
 21193                           ; BSR set to: 0
 21194                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 21195  004A1C  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 21196  004A1E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21197  004A20  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 21198  004A22  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21199  004A24  0E04               	movlw	4
 21200  004A26  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21201                           
 21202                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 21203  004A2A  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 21204  004A2C  0100               	movlb	0	; () banked
 21205  004A2E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21206  004A30  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 21207  004A32  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21208  004A34  0E05               	movlw	5
 21209  004A36  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21210  004A3A  0012               	return		;funcret
 21211  004A3C                     __end_of_enc424j600_setRXBufferStartAddress:
 21212                           	opt stack 0
 21213                           tblptru	equ	0xFF8
 21214                           tblptrh	equ	0xFF7
 21215                           tblptrl	equ	0xFF6
 21216                           tablat	equ	0xFF5
 21217                           prodh	equ	0xFF4
 21218                           prodl	equ	0xFF3
 21219                           intcon	equ	0xFF2
 21220                           intcon3	equ	0xFF0
 21221                           indf0	equ	0xFEF
 21222                           postinc0	equ	0xFEE
 21223                           plusw0	equ	0xFEB
 21224                           fsr0h	equ	0xFEA
 21225                           fsr0l	equ	0xFE9
 21226                           wreg	equ	0xFE8
 21227                           indf1	equ	0xFE7
 21228                           postinc1	equ	0xFE6
 21229                           postdec1	equ	0xFE5
 21230                           plusw1	equ	0xFE3
 21231                           fsr1h	equ	0xFE2
 21232                           fsr1l	equ	0xFE1
 21233                           indf2	equ	0xFDF
 21234                           postinc2	equ	0xFDE
 21235                           postdec2	equ	0xFDD
 21236                           plusw2	equ	0xFDB
 21237                           fsr2h	equ	0xFDA
 21238                           fsr2l	equ	0xFD9
 21239                           status	equ	0xFD8
 21240                           
 21241 ;; *************** function _enc424j600_setNextPacketPointer *****************
 21242 ;; Defined at:
 21243 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 21244 ;; Parameters:    Size  Location     Type
 21245 ;;  ptr             2    0[BANK0 ] unsigned int 
 21246 ;; Auto vars:     Size  Location     Type
 21247 ;;		None
 21248 ;; Return value:  Size  Location     Type
 21249 ;;                  1    wreg      void 
 21250 ;; Registers used:
 21251 ;;		None
 21252 ;; Tracked objects:
 21253 ;;		On entry : 0/0
 21254 ;;		On exit  : 0/0
 21255 ;;		Unchanged: 0/0
 21256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21257 ;;      Params:         0       2       0       0       0       0       0       0       0
 21258 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21259 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21260 ;;      Totals:         0       2       0       0       0       0       0       0       0
 21261 ;;Total ram usage:        2 bytes
 21262 ;; Hardware stack levels used:    1
 21263 ;; Hardware stack levels required when called:    4
 21264 ;; This function calls:
 21265 ;;		Nothing
 21266 ;; This function is called by:
 21267 ;;		_ethernetController_init
 21268 ;;		_ethernetController_updateNextPacketPointer
 21269 ;; This function uses a non-reentrant model
 21270 ;;
 21271                           
 21272                           	psect	text93
 21273  004CCA                     __ptext93:
 21274                           	opt stack 0
 21275  004CCA                     _enc424j600_setNextPacketPointer:
 21276                           	opt stack 23
 21277                           
 21278                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 21279                           
 21280                           ;incstack = 0
 21281  004CCA  C060  F042         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 21282  004CCE  C061  F043         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 21283  004CD2  0012               	return		;funcret
 21284  004CD4                     __end_of_enc424j600_setNextPacketPointer:
 21285                           	opt stack 0
 21286                           tblptru	equ	0xFF8
 21287                           tblptrh	equ	0xFF7
 21288                           tblptrl	equ	0xFF6
 21289                           tablat	equ	0xFF5
 21290                           prodh	equ	0xFF4
 21291                           prodl	equ	0xFF3
 21292                           intcon	equ	0xFF2
 21293                           intcon3	equ	0xFF0
 21294                           indf0	equ	0xFEF
 21295                           postinc0	equ	0xFEE
 21296                           plusw0	equ	0xFEB
 21297                           fsr0h	equ	0xFEA
 21298                           fsr0l	equ	0xFE9
 21299                           wreg	equ	0xFE8
 21300                           indf1	equ	0xFE7
 21301                           postinc1	equ	0xFE6
 21302                           postdec1	equ	0xFE5
 21303                           plusw1	equ	0xFE3
 21304                           fsr1h	equ	0xFE2
 21305                           fsr1l	equ	0xFE1
 21306                           indf2	equ	0xFDF
 21307                           postinc2	equ	0xFDE
 21308                           postdec2	equ	0xFDD
 21309                           plusw2	equ	0xFDB
 21310                           fsr2h	equ	0xFDA
 21311                           fsr2l	equ	0xFD9
 21312                           status	equ	0xFD8
 21313                           
 21314 ;; *************** function _enc424j600_enableReception *****************
 21315 ;; Defined at:
 21316 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 21317 ;; Parameters:    Size  Location     Type
 21318 ;;		None
 21319 ;; Auto vars:     Size  Location     Type
 21320 ;;		None
 21321 ;; Return value:  Size  Location     Type
 21322 ;;                  1    wreg      void 
 21323 ;; Registers used:
 21324 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21325 ;; Tracked objects:
 21326 ;;		On entry : 0/0
 21327 ;;		On exit  : 0/0
 21328 ;;		Unchanged: 0/0
 21329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21330 ;;      Params:         0       0       0       0       0       0       0       0       0
 21331 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21332 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21333 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21334 ;;Total ram usage:        0 bytes
 21335 ;; Hardware stack levels used:    1
 21336 ;; Hardware stack levels required when called:    7
 21337 ;; This function calls:
 21338 ;;		_enc424j600_writeSingleByte
 21339 ;; This function is called by:
 21340 ;;		_ethernetController_init
 21341 ;;		_ethernetController_enableReception
 21342 ;; This function uses a non-reentrant model
 21343 ;;
 21344                           
 21345                           	psect	text94
 21346  004CD4                     __ptext94:
 21347                           	opt stack 0
 21348  004CD4                     _enc424j600_enableReception:
 21349                           	opt stack 22
 21350                           
 21351                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 21352                           
 21353                           ;incstack = 0
 21354  004CD4  0EE8               	movlw	232
 21355  004CD6  ECFD  F025         	call	_enc424j600_writeSingleByte
 21356  004CDA  0012               	return		;funcret
 21357  004CDC                     __end_of_enc424j600_enableReception:
 21358                           	opt stack 0
 21359                           tblptru	equ	0xFF8
 21360                           tblptrh	equ	0xFF7
 21361                           tblptrl	equ	0xFF6
 21362                           tablat	equ	0xFF5
 21363                           prodh	equ	0xFF4
 21364                           prodl	equ	0xFF3
 21365                           intcon	equ	0xFF2
 21366                           intcon3	equ	0xFF0
 21367                           indf0	equ	0xFEF
 21368                           postinc0	equ	0xFEE
 21369                           plusw0	equ	0xFEB
 21370                           fsr0h	equ	0xFEA
 21371                           fsr0l	equ	0xFE9
 21372                           wreg	equ	0xFE8
 21373                           indf1	equ	0xFE7
 21374                           postinc1	equ	0xFE6
 21375                           postdec1	equ	0xFE5
 21376                           plusw1	equ	0xFE3
 21377                           fsr1h	equ	0xFE2
 21378                           fsr1l	equ	0xFE1
 21379                           indf2	equ	0xFDF
 21380                           postinc2	equ	0xFDE
 21381                           postdec2	equ	0xFDD
 21382                           plusw2	equ	0xFDB
 21383                           fsr2h	equ	0xFDA
 21384                           fsr2l	equ	0xFD9
 21385                           status	equ	0xFD8
 21386                           
 21387 ;; *************** function _enc424j600_writeSingleByte *****************
 21388 ;; Defined at:
 21389 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 21390 ;; Parameters:    Size  Location     Type
 21391 ;;  opcode          1    wreg     unsigned char 
 21392 ;; Auto vars:     Size  Location     Type
 21393 ;;  opcode          1   10[BANK0 ] unsigned char 
 21394 ;; Return value:  Size  Location     Type
 21395 ;;                  1    wreg      void 
 21396 ;; Registers used:
 21397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21398 ;; Tracked objects:
 21399 ;;		On entry : 0/0
 21400 ;;		On exit  : 0/0
 21401 ;;		Unchanged: 0/0
 21402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21403 ;;      Params:         0       0       0       0       0       0       0       0       0
 21404 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21405 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21406 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21407 ;;Total ram usage:        1 bytes
 21408 ;; Hardware stack levels used:    1
 21409 ;; Hardware stack levels required when called:    6
 21410 ;; This function calls:
 21411 ;;		_enc424j600_writeSPI
 21412 ;; This function is called by:
 21413 ;;		_ethernetController_softReset
 21414 ;;		_ethernetController_sendPacket
 21415 ;;		_ethernetController_dropPacket
 21416 ;;		_enc424j600_enableReception
 21417 ;;		_enc424j600_disableReception
 21418 ;; This function uses a non-reentrant model
 21419 ;;
 21420                           
 21421                           	psect	text95
 21422  004BFA                     __ptext95:
 21423                           	opt stack 0
 21424  004BFA                     _enc424j600_writeSingleByte:
 21425                           	opt stack 20
 21426                           
 21427                           ;incstack = 0
 21428                           ;enc424j600_writeSingleByte@opcode stored from wreg
 21429  004BFA  0100               	movlb	0	; () banked
 21430  004BFC  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 21431                           
 21432                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 21433  004BFE  9881               	bcf	3969,4,c	;volatile
 21434                           
 21435                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 21436  004C00  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 21437  004C02  0100               	movlb	0	; () banked
 21438  004C04  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21439  004C06  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 21440  004C08  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21441  004C0A  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 21442                           
 21443                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 21444  004C0E  8881               	bsf	3969,4,c	;volatile
 21445  004C10  0012               	return		;funcret
 21446  004C12                     __end_of_enc424j600_writeSingleByte:
 21447                           	opt stack 0
 21448                           tblptru	equ	0xFF8
 21449                           tblptrh	equ	0xFF7
 21450                           tblptrl	equ	0xFF6
 21451                           tablat	equ	0xFF5
 21452                           prodh	equ	0xFF4
 21453                           prodl	equ	0xFF3
 21454                           intcon	equ	0xFF2
 21455                           intcon3	equ	0xFF0
 21456                           indf0	equ	0xFEF
 21457                           postinc0	equ	0xFEE
 21458                           plusw0	equ	0xFEB
 21459                           fsr0h	equ	0xFEA
 21460                           fsr0l	equ	0xFE9
 21461                           wreg	equ	0xFE8
 21462                           indf1	equ	0xFE7
 21463                           postinc1	equ	0xFE6
 21464                           postdec1	equ	0xFE5
 21465                           plusw1	equ	0xFE3
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           indf2	equ	0xFDF
 21469                           postinc2	equ	0xFDE
 21470                           postdec2	equ	0xFDD
 21471                           plusw2	equ	0xFDB
 21472                           fsr2h	equ	0xFDA
 21473                           fsr2l	equ	0xFD9
 21474                           status	equ	0xFD8
 21475                           
 21476 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 21477 ;; Defined at:
 21478 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 21479 ;; Parameters:    Size  Location     Type
 21480 ;;		None
 21481 ;; Auto vars:     Size  Location     Type
 21482 ;;  temp            1   14[BANK0 ] unsigned char 
 21483 ;; Return value:  Size  Location     Type
 21484 ;;                  1    wreg      void 
 21485 ;; Registers used:
 21486 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21487 ;; Tracked objects:
 21488 ;;		On entry : 0/0
 21489 ;;		On exit  : 0/0
 21490 ;;		Unchanged: 0/0
 21491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21492 ;;      Params:         0       0       0       0       0       0       0       0       0
 21493 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21494 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21495 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21496 ;;Total ram usage:        1 bytes
 21497 ;; Hardware stack levels used:    1
 21498 ;; Hardware stack levels required when called:    7
 21499 ;; This function calls:
 21500 ;;		_enc424j600_readControlRegisterUnbanked
 21501 ;;		_enc424j600_writeControlRegisterUnbanked
 21502 ;; This function is called by:
 21503 ;;		_ethernetController_init
 21504 ;; This function uses a non-reentrant model
 21505 ;;
 21506                           
 21507                           	psect	text96
 21508  004A8C                     __ptext96:
 21509                           	opt stack 0
 21510  004A8C                     _enc424j600_enableAutoMACInsertion:
 21511                           	opt stack 22
 21512                           
 21513                           ;ENC424J600.c: 659: uint8_t temp = 0;
 21514                           
 21515                           ;incstack = 0
 21516  004A8C  0E00               	movlw	0
 21517  004A8E  0100               	movlb	0	; () banked
 21518  004A90  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 21519                           
 21520                           ; BSR set to: 0
 21521                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 21522  004A92  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21523  004A94  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21524  004A96  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21525  004A98  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21526  004A9A  0E6F               	movlw	111
 21527  004A9C  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 21528                           
 21529                           ;ENC424J600.c: 661: temp |= (1 << 5);
 21530  004AA0  0100               	movlb	0	; () banked
 21531  004AA2  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 21532                           
 21533                           ; BSR set to: 0
 21534                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 21535  004AA4  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 21536  004AA6  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 21537  004AA8  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 21538  004AAA  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 21539  004AAC  0E6F               	movlw	111
 21540  004AAE  EC34  F024         	call	_enc424j600_writeControlRegisterUnbanked
 21541  004AB2  0012               	return		;funcret
 21542  004AB4                     __end_of_enc424j600_enableAutoMACInsertion:
 21543                           	opt stack 0
 21544                           tblptru	equ	0xFF8
 21545                           tblptrh	equ	0xFF7
 21546                           tblptrl	equ	0xFF6
 21547                           tablat	equ	0xFF5
 21548                           prodh	equ	0xFF4
 21549                           prodl	equ	0xFF3
 21550                           intcon	equ	0xFF2
 21551                           intcon3	equ	0xFF0
 21552                           indf0	equ	0xFEF
 21553                           postinc0	equ	0xFEE
 21554                           plusw0	equ	0xFEB
 21555                           fsr0h	equ	0xFEA
 21556                           fsr0l	equ	0xFE9
 21557                           wreg	equ	0xFE8
 21558                           indf1	equ	0xFE7
 21559                           postinc1	equ	0xFE6
 21560                           postdec1	equ	0xFE5
 21561                           plusw1	equ	0xFE3
 21562                           fsr1h	equ	0xFE2
 21563                           fsr1l	equ	0xFE1
 21564                           indf2	equ	0xFDF
 21565                           postinc2	equ	0xFDE
 21566                           postdec2	equ	0xFDD
 21567                           plusw2	equ	0xFDB
 21568                           fsr2h	equ	0xFDA
 21569                           fsr2l	equ	0xFD9
 21570                           status	equ	0xFD8
 21571                           
 21572 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 21573 ;; Defined at:
 21574 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 21575 ;; Parameters:    Size  Location     Type
 21576 ;;  addr            1    wreg     unsigned char 
 21577 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21578 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 21579 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 21580 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 21581 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 21582 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 21583 ;; Auto vars:     Size  Location     Type
 21584 ;;  addr            1   12[BANK0 ] unsigned char 
 21585 ;;  opcode          1   13[BANK0 ] unsigned char 
 21586 ;; Return value:  Size  Location     Type
 21587 ;;                  1    wreg      void 
 21588 ;; Registers used:
 21589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21590 ;; Tracked objects:
 21591 ;;		On entry : 0/0
 21592 ;;		On exit  : 0/0
 21593 ;;		Unchanged: 0/0
 21594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21595 ;;      Params:         0       2       0       0       0       0       0       0       0
 21596 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21597 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21598 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21599 ;;Total ram usage:        4 bytes
 21600 ;; Hardware stack levels used:    1
 21601 ;; Hardware stack levels required when called:    6
 21602 ;; This function calls:
 21603 ;;		_enc424j600_writeSPI
 21604 ;; This function is called by:
 21605 ;;		_ethernetController_softReset
 21606 ;;		_ethernetController_setLEDConfig
 21607 ;;		_enc424j600_readPHYRegister
 21608 ;;		_enc424j600_setTXLength
 21609 ;;		_enc424j600_setTXStartAddress
 21610 ;;		_enc424j600_setRXBufferStartAddress
 21611 ;;		_enc424j600_setRXTailPointer
 21612 ;;		_enc424j600_enableAutoMACInsertion
 21613 ;;		_enc424j600_clearInterruptFlag
 21614 ;;		_ethernetController_setMacAddress
 21615 ;;		_enc424j600_disableAutoMACInsertion
 21616 ;;		_enc424j600_enable
 21617 ;;		_enc424j600_disable
 21618 ;; This function uses a non-reentrant model
 21619 ;;
 21620                           
 21621                           	psect	text97
 21622  004868                     __ptext97:
 21623                           	opt stack 0
 21624  004868                     _enc424j600_writeControlRegisterUnbanked:
 21625                           	opt stack 19
 21626                           
 21627                           ;incstack = 0
 21628                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 21629  004868  0100               	movlb	0	; () banked
 21630  00486A  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 21631                           
 21632                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 21633  00486C  0E22               	movlw	34
 21634  00486E  0100               	movlb	0	; () banked
 21635  004870  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 21636                           
 21637                           ; BSR set to: 0
 21638                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 21639  004872  9881               	bcf	3969,4,c	;volatile
 21640                           
 21641                           ; BSR set to: 0
 21642                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 21643  004874  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 21644  004876  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21645  004878  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 21646  00487A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21647  00487C  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 21648                           
 21649                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 21650  004880  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 21651  004882  0100               	movlb	0	; () banked
 21652  004884  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 21653  004886  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 21654  004888  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 21655  00488A  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 21656                           
 21657                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 21658  00488E  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 21659  004892  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 21660  004896  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 21661                           
 21662                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 21663  00489A  8881               	bsf	3969,4,c	;volatile
 21664  00489C  0012               	return		;funcret
 21665  00489E                     __end_of_enc424j600_writeControlRegisterUnbanked:
 21666                           	opt stack 0
 21667                           tblptru	equ	0xFF8
 21668                           tblptrh	equ	0xFF7
 21669                           tblptrl	equ	0xFF6
 21670                           tablat	equ	0xFF5
 21671                           prodh	equ	0xFF4
 21672                           prodl	equ	0xFF3
 21673                           intcon	equ	0xFF2
 21674                           intcon3	equ	0xFF0
 21675                           indf0	equ	0xFEF
 21676                           postinc0	equ	0xFEE
 21677                           plusw0	equ	0xFEB
 21678                           fsr0h	equ	0xFEA
 21679                           fsr0l	equ	0xFE9
 21680                           wreg	equ	0xFE8
 21681                           indf1	equ	0xFE7
 21682                           postinc1	equ	0xFE6
 21683                           postdec1	equ	0xFE5
 21684                           plusw1	equ	0xFE3
 21685                           fsr1h	equ	0xFE2
 21686                           fsr1l	equ	0xFE1
 21687                           indf2	equ	0xFDF
 21688                           postinc2	equ	0xFDE
 21689                           postdec2	equ	0xFDD
 21690                           plusw2	equ	0xFDB
 21691                           fsr2h	equ	0xFDA
 21692                           fsr2l	equ	0xFD9
 21693                           status	equ	0xFD8
 21694                           
 21695 ;; *************** function _ethernetController_getDeviceName *****************
 21696 ;; Defined at:
 21697 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 21698 ;; Parameters:    Size  Location     Type
 21699 ;;		None
 21700 ;; Auto vars:     Size  Location     Type
 21701 ;;  string         11    2[BANK0 ] const unsigned char [11]
 21702 ;; Return value:  Size  Location     Type
 21703 ;;                  2    0[BANK0 ] PTR unsigned char 
 21704 ;; Registers used:
 21705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 21706 ;; Tracked objects:
 21707 ;;		On entry : 0/0
 21708 ;;		On exit  : 0/0
 21709 ;;		Unchanged: 0/0
 21710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21711 ;;      Params:         0       2       0       0       0       0       0       0       0
 21712 ;;      Locals:         0      11       0       0       0       0       0       0       0
 21713 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21714 ;;      Totals:         0      13       0       0       0       0       0       0       0
 21715 ;;Total ram usage:       13 bytes
 21716 ;; Hardware stack levels used:    1
 21717 ;; Hardware stack levels required when called:    4
 21718 ;; This function calls:
 21719 ;;		Nothing
 21720 ;; This function is called by:
 21721 ;;		_main
 21722 ;; This function uses a non-reentrant model
 21723 ;;
 21724                           
 21725                           	psect	text98
 21726  004B24                     __ptext98:
 21727                           	opt stack 0
 21728  004B24                     _ethernetController_getDeviceName:
 21729                           	opt stack 26
 21730                           
 21731                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 21732                           
 21733                           ;incstack = 0
 21734  004B24  0EA9               	movlw	low ethernetController_getDeviceName@F5995
 21735  004B26  6EF6               	movwf	tblptrl,c
 21736  004B28                     	if	1	;There is more than 1 active tblptr byte
 21737  004B28  0E7A               	movlw	high ethernetController_getDeviceName@F5995
 21738  004B2A  6EF7               	movwf	tblptrh,c
 21739  004B2C                     	endif
 21740  004B2C                     	if	0	;There are less than 3 active tblptr bytes
 21741  004B2C                     	endif
 21742  004B2C  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 21743  004B30  0E0A               	movlw	10
 21744  004B32                     u11450:
 21745  004B32  0009               	tblrd		*+
 21746  004B34  CFF5 FFDE          	movff	tablat,postinc2
 21747  004B38  06E8               	decf	wreg,f,c
 21748  004B3A  E2FB               	bc	u11450
 21749                           
 21750                           ;ENC424J600.c: 147: return (char*) string;
 21751  004B3C  0E62               	movlw	low ethernetController_getDeviceName@string
 21752  004B3E  0100               	movlb	0	; () banked
 21753  004B40  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 21754  004B42  0E00               	movlw	high ethernetController_getDeviceName@string
 21755  004B44  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 21756  004B46  0012               	return	
 21757  004B48                     __end_of_ethernetController_getDeviceName:
 21758                           	opt stack 0
 21759                           tblptru	equ	0xFF8
 21760                           tblptrh	equ	0xFF7
 21761                           tblptrl	equ	0xFF6
 21762                           tablat	equ	0xFF5
 21763                           prodh	equ	0xFF4
 21764                           prodl	equ	0xFF3
 21765                           intcon	equ	0xFF2
 21766                           intcon3	equ	0xFF0
 21767                           indf0	equ	0xFEF
 21768                           postinc0	equ	0xFEE
 21769                           plusw0	equ	0xFEB
 21770                           fsr0h	equ	0xFEA
 21771                           fsr0l	equ	0xFE9
 21772                           wreg	equ	0xFE8
 21773                           indf1	equ	0xFE7
 21774                           postinc1	equ	0xFE6
 21775                           postdec1	equ	0xFE5
 21776                           plusw1	equ	0xFE3
 21777                           fsr1h	equ	0xFE2
 21778                           fsr1l	equ	0xFE1
 21779                           indf2	equ	0xFDF
 21780                           postinc2	equ	0xFDE
 21781                           postdec2	equ	0xFDD
 21782                           plusw2	equ	0xFDB
 21783                           fsr2h	equ	0xFDA
 21784                           fsr2l	equ	0xFD9
 21785                           status	equ	0xFD8
 21786                           
 21787 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 21788 ;; Defined at:
 21789 ;;		line 457 in file "src/enc424j600/ENC424J600.c"
 21790 ;; Parameters:    Size  Location     Type
 21791 ;;		None
 21792 ;; Auto vars:     Size  Location     Type
 21793 ;;		None
 21794 ;; Return value:  Size  Location     Type
 21795 ;;                  1    wreg      unsigned char 
 21796 ;; Registers used:
 21797 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21798 ;; Tracked objects:
 21799 ;;		On entry : 0/0
 21800 ;;		On exit  : 0/0
 21801 ;;		Unchanged: 0/0
 21802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21803 ;;      Params:         0       0       0       0       0       0       0       0       0
 21804 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21805 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21806 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21807 ;;Total ram usage:        0 bytes
 21808 ;; Hardware stack levels used:    1
 21809 ;; Hardware stack levels required when called:    8
 21810 ;; This function calls:
 21811 ;;		_enc424j600_getPacketCount
 21812 ;; This function is called by:
 21813 ;;		_main
 21814 ;; This function uses a non-reentrant model
 21815 ;;
 21816                           
 21817                           	psect	text99
 21818  004CE2                     __ptext99:
 21819                           	opt stack 0
 21820  004CE2                     _ethernetController_getCurrentPacketCount:
 21821                           	opt stack 22
 21822                           
 21823                           ;ENC424J600.c: 458: return enc424j600_getPacketCount();
 21824                           
 21825                           ; BSR set to: 0
 21826                           ;incstack = 0
 21827  004CE2  ECF0  F025         	call	_enc424j600_getPacketCount	;wreg free
 21828  004CE6  0012               	return	
 21829  004CE8                     __end_of_ethernetController_getCurrentPacketCount:
 21830                           	opt stack 0
 21831                           tblptru	equ	0xFF8
 21832                           tblptrh	equ	0xFF7
 21833                           tblptrl	equ	0xFF6
 21834                           tablat	equ	0xFF5
 21835                           prodh	equ	0xFF4
 21836                           prodl	equ	0xFF3
 21837                           intcon	equ	0xFF2
 21838                           intcon3	equ	0xFF0
 21839                           indf0	equ	0xFEF
 21840                           postinc0	equ	0xFEE
 21841                           plusw0	equ	0xFEB
 21842                           fsr0h	equ	0xFEA
 21843                           fsr0l	equ	0xFE9
 21844                           wreg	equ	0xFE8
 21845                           indf1	equ	0xFE7
 21846                           postinc1	equ	0xFE6
 21847                           postdec1	equ	0xFE5
 21848                           plusw1	equ	0xFE3
 21849                           fsr1h	equ	0xFE2
 21850                           fsr1l	equ	0xFE1
 21851                           indf2	equ	0xFDF
 21852                           postinc2	equ	0xFDE
 21853                           postdec2	equ	0xFDD
 21854                           plusw2	equ	0xFDB
 21855                           fsr2h	equ	0xFDA
 21856                           fsr2l	equ	0xFD9
 21857                           status	equ	0xFD8
 21858                           
 21859 ;; *************** function _enc424j600_getPacketCount *****************
 21860 ;; Defined at:
 21861 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 21862 ;; Parameters:    Size  Location     Type
 21863 ;;		None
 21864 ;; Auto vars:     Size  Location     Type
 21865 ;;  lowByte         1   14[BANK0 ] unsigned char 
 21866 ;; Return value:  Size  Location     Type
 21867 ;;                  1    wreg      unsigned char 
 21868 ;; Registers used:
 21869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21870 ;; Tracked objects:
 21871 ;;		On entry : 0/0
 21872 ;;		On exit  : 0/0
 21873 ;;		Unchanged: 0/0
 21874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21875 ;;      Params:         0       0       0       0       0       0       0       0       0
 21876 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21877 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21878 ;;      Totals:         0       1       0       0       0       0       0       0       0
 21879 ;;Total ram usage:        1 bytes
 21880 ;; Hardware stack levels used:    1
 21881 ;; Hardware stack levels required when called:    7
 21882 ;; This function calls:
 21883 ;;		_enc424j600_readControlRegisterUnbanked
 21884 ;; This function is called by:
 21885 ;;		_ethernetController_newPacketAvailable
 21886 ;;		_ethernetController_getCurrentPacketCount
 21887 ;; This function uses a non-reentrant model
 21888 ;;
 21889                           
 21890                           	psect	text100
 21891  004BE0                     __ptext100:
 21892                           	opt stack 0
 21893  004BE0                     _enc424j600_getPacketCount:
 21894                           	opt stack 21
 21895                           
 21896                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 21897                           
 21898                           ;incstack = 0
 21899  004BE0  0E00               	movlw	0
 21900  004BE2  0100               	movlb	0	; () banked
 21901  004BE4  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 21902                           
 21903                           ; BSR set to: 0
 21904                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 21905  004BE6  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 21906  004BE8  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 21907  004BEA  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 21908  004BEC  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 21909  004BEE  0E1A               	movlw	26
 21910  004BF0  EC4F  F024         	call	_enc424j600_readControlRegisterUnbanked
 21911                           
 21912                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 21913  004BF4  0100               	movlb	0	; () banked
 21914  004BF6  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 21915  004BF8  0012               	return	
 21916  004BFA                     __end_of_enc424j600_getPacketCount:
 21917                           	opt stack 0
 21918                           tblptru	equ	0xFF8
 21919                           tblptrh	equ	0xFF7
 21920                           tblptrl	equ	0xFF6
 21921                           tablat	equ	0xFF5
 21922                           prodh	equ	0xFF4
 21923                           prodl	equ	0xFF3
 21924                           intcon	equ	0xFF2
 21925                           intcon3	equ	0xFF0
 21926                           indf0	equ	0xFEF
 21927                           postinc0	equ	0xFEE
 21928                           plusw0	equ	0xFEB
 21929                           fsr0h	equ	0xFEA
 21930                           fsr0l	equ	0xFE9
 21931                           wreg	equ	0xFE8
 21932                           indf1	equ	0xFE7
 21933                           postinc1	equ	0xFE6
 21934                           postdec1	equ	0xFE5
 21935                           plusw1	equ	0xFE3
 21936                           fsr1h	equ	0xFE2
 21937                           fsr1l	equ	0xFE1
 21938                           indf2	equ	0xFDF
 21939                           postinc2	equ	0xFDE
 21940                           postdec2	equ	0xFDD
 21941                           plusw2	equ	0xFDB
 21942                           fsr2h	equ	0xFDA
 21943                           fsr2l	equ	0xFD9
 21944                           status	equ	0xFD8
 21945                           
 21946 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 21947 ;; Defined at:
 21948 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 21949 ;; Parameters:    Size  Location     Type
 21950 ;;  addr            1    wreg     unsigned char 
 21951 ;;  data            2   10[BANK0 ] PTR unsigned char 
 21952 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 21953 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 21954 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 21955 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 21956 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 21957 ;; Auto vars:     Size  Location     Type
 21958 ;;  addr            1   12[BANK0 ] unsigned char 
 21959 ;;  opcode          1   13[BANK0 ] unsigned char 
 21960 ;; Return value:  Size  Location     Type
 21961 ;;                  1    wreg      void 
 21962 ;; Registers used:
 21963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21964 ;; Tracked objects:
 21965 ;;		On entry : 0/0
 21966 ;;		On exit  : 0/0
 21967 ;;		Unchanged: 0/0
 21968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21969 ;;      Params:         0       2       0       0       0       0       0       0       0
 21970 ;;      Locals:         0       2       0       0       0       0       0       0       0
 21971 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21972 ;;      Totals:         0       4       0       0       0       0       0       0       0
 21973 ;;Total ram usage:        4 bytes
 21974 ;; Hardware stack levels used:    1
 21975 ;; Hardware stack levels required when called:    6
 21976 ;; This function calls:
 21977 ;;		_enc424j600_readSPI
 21978 ;;		_enc424j600_writeSPI
 21979 ;; This function is called by:
 21980 ;;		_ethernetController_softReset
 21981 ;;		_ethernetController_checkDeviceId
 21982 ;;		_ethernetController_getMacAddress
 21983 ;;		_ethernetController_updateLinkStatus
 21984 ;;		_ethernetController_setLEDConfig
 21985 ;;		_enc424j600_readPHYRegister
 21986 ;;		_enc424j600_getPacketCount
 21987 ;;		_enc424j600_enableAutoMACInsertion
 21988 ;;		_enc424j600_getInterruptFlags
 21989 ;;		_enc424j600_clearInterruptFlag
 21990 ;;		_ethernetController_getSiliconRevision
 21991 ;;		_enc424j600_disableAutoMACInsertion
 21992 ;;		_enc424j600_enable
 21993 ;;		_enc424j600_disable
 21994 ;; This function uses a non-reentrant model
 21995 ;;
 21996                           
 21997                           	psect	text101
 21998  00489E                     __ptext101:
 21999                           	opt stack 0
 22000  00489E                     _enc424j600_readControlRegisterUnbanked:
 22001                           	opt stack 19
 22002                           
 22003                           ; BSR set to: 0
 22004                           ;incstack = 0
 22005                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 22006  00489E  0100               	movlb	0	; () banked
 22007  0048A0  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 22008                           
 22009                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 22010  0048A2  0E20               	movlw	32
 22011  0048A4  0100               	movlb	0	; () banked
 22012  0048A6  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 22013                           
 22014                           ; BSR set to: 0
 22015                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 22016  0048A8  9881               	bcf	3969,4,c	;volatile
 22017                           
 22018                           ; BSR set to: 0
 22019                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 22020  0048AA  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 22021  0048AC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22022  0048AE  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 22023  0048B0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22024  0048B2  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 22025                           
 22026                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 22027  0048B6  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 22028  0048B8  0100               	movlb	0	; () banked
 22029  0048BA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 22030  0048BC  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 22031  0048BE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 22032  0048C0  ECFC  F020         	call	_enc424j600_writeSPI	;wreg free
 22033                           
 22034                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 22035  0048C4  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 22036  0048C8  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 22037  0048CC  EC60  F020         	call	_enc424j600_readSPI	;wreg free
 22038                           
 22039                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 22040  0048D0  8881               	bsf	3969,4,c	;volatile
 22041  0048D2  0012               	return		;funcret
 22042  0048D4                     __end_of_enc424j600_readControlRegisterUnbanked:
 22043                           	opt stack 0
 22044                           tblptru	equ	0xFF8
 22045                           tblptrh	equ	0xFF7
 22046                           tblptrl	equ	0xFF6
 22047                           tablat	equ	0xFF5
 22048                           prodh	equ	0xFF4
 22049                           prodl	equ	0xFF3
 22050                           intcon	equ	0xFF2
 22051                           intcon3	equ	0xFF0
 22052                           indf0	equ	0xFEF
 22053                           postinc0	equ	0xFEE
 22054                           plusw0	equ	0xFEB
 22055                           fsr0h	equ	0xFEA
 22056                           fsr0l	equ	0xFE9
 22057                           wreg	equ	0xFE8
 22058                           indf1	equ	0xFE7
 22059                           postinc1	equ	0xFE6
 22060                           postdec1	equ	0xFE5
 22061                           plusw1	equ	0xFE3
 22062                           fsr1h	equ	0xFE2
 22063                           fsr1l	equ	0xFE1
 22064                           indf2	equ	0xFDF
 22065                           postinc2	equ	0xFDE
 22066                           postdec2	equ	0xFDD
 22067                           plusw2	equ	0xFDB
 22068                           fsr2h	equ	0xFDA
 22069                           fsr2l	equ	0xFD9
 22070                           status	equ	0xFD8
 22071                           
 22072 ;; *************** function _enc424j600_writeSPI *****************
 22073 ;; Defined at:
 22074 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 22075 ;; Parameters:    Size  Location     Type
 22076 ;;  data            2    0[BANK0 ] PTR unsigned char 
 22077 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 22078 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 22079 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 22080 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 22081 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 22082 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 22083 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 22084 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 22085 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 22086 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 22087 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 22088 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 22089 ;; Auto vars:     Size  Location     Type
 22090 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 22091 ;; Return value:  Size  Location     Type
 22092 ;;                  1    wreg      void 
 22093 ;; Registers used:
 22094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22095 ;; Tracked objects:
 22096 ;;		On entry : 0/0
 22097 ;;		On exit  : 0/0
 22098 ;;		Unchanged: 0/0
 22099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22100 ;;      Params:         0       2       0       0       0       0       0       0       0
 22101 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22102 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22103 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22104 ;;Total ram usage:       10 bytes
 22105 ;; Hardware stack levels used:    1
 22106 ;; Hardware stack levels required when called:    5
 22107 ;; This function calls:
 22108 ;;		_enc424j600_initSPI
 22109 ;; This function is called by:
 22110 ;;		_ethernetController_streamToTransmitBuffer
 22111 ;;		_ethernetController_writeDestinationMACAddress
 22112 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 22113 ;;		_ethernetController_getSourceMACAddress
 22114 ;;		_ethernetController_getEtherTypeField
 22115 ;;		_ethernetController_getRSV
 22116 ;;		_ethernetController_updateNextPacketPointer
 22117 ;;		_ethernetController_streamFromRXBuffer
 22118 ;;		_enc424j600_writeSingleByte
 22119 ;;		_enc424j600_writeControlRegisterUnbanked
 22120 ;;		_enc424j600_readControlRegisterUnbanked
 22121 ;;		_enc424j600_setGPDATAWritePointer
 22122 ;;		_enc424j600_setERXDATAReadPointer
 22123 ;;		_ethernetController_getDestinationMACAddress
 22124 ;;		_enc424j600_setGPDATAReadPointer
 22125 ;; This function uses a non-reentrant model
 22126 ;;
 22127                           
 22128                           	psect	text102
 22129  0041F8                     __ptext102:
 22130                           	opt stack 0
 22131  0041F8                     _enc424j600_writeSPI:
 22132                           	opt stack 20
 22133                           
 22134                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 22135                           
 22136                           ;incstack = 0
 22137  0041F8  0E00               	movlw	0
 22138  0041FA  0100               	movlb	0	; () banked
 22139  0041FC  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 22140  0041FE  0E00               	movlw	0
 22141  004200  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 22142  004202  0E00               	movlw	0
 22143  004204  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 22144  004206  0E00               	movlw	0
 22145  004208  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 22146                           
 22147                           ; BSR set to: 0
 22148                           ;ENC424J600.c: 490: SSP1BUF = *data;
 22149  00420A  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 22150  00420E  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 22151  004212  50DF               	movf	indf2,w,c
 22152  004214  6EC9               	movwf	4041,c	;volatile
 22153  004216                     
 22154                           ; BSR set to: 0
 22155                           
 22156                           ; BSR set to: 0
 22157  004216  B0C7               	btfsc	4039,0,c	;volatile
 22158  004218  D015               	goto	u8020
 22159                           
 22160                           ; BSR set to: 0
 22161  00421A  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 22162  00421E  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 22163  004222  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 22164  004226  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 22165  00422A  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 22166  00422C  0E00               	movlw	0
 22167  00422E  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 22168  004230  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 22169  004232  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 22170  004234  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 22171  004236  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 22172  004238  E105               	bnz	l7551
 22173  00423A  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 22174  00423C  0E0F               	movlw	15
 22175  00423E  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 22176  004240  A0D8               	btfss	status,0,c
 22177  004242  D7E9               	goto	l232
 22178  004244                     u8020:
 22179  004244                     l7551:
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 22183  004244  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 22184  004246  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 22185  004248  E105               	bnz	u8030
 22186  00424A  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 22187  00424C  0E0F               	movlw	15
 22188  00424E  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 22189  004250  A0D8               	btfss	status,0,c
 22190  004252  0012               	return	
 22191  004254                     u8030:
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 22195  004254  8881               	bsf	3969,4,c	;volatile
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;ENC424J600.c: 494: enc424j600_initSPI();
 22199  004256  ECD5  F025         	call	_enc424j600_initSPI	;wreg free
 22200                           
 22201                           ;ENC424J600.c: 495: return;
 22202  00425A  0012               	return	
 22203  00425C                     __end_of_enc424j600_writeSPI:
 22204                           	opt stack 0
 22205                           tblptru	equ	0xFF8
 22206                           tblptrh	equ	0xFF7
 22207                           tblptrl	equ	0xFF6
 22208                           tablat	equ	0xFF5
 22209                           prodh	equ	0xFF4
 22210                           prodl	equ	0xFF3
 22211                           intcon	equ	0xFF2
 22212                           intcon3	equ	0xFF0
 22213                           indf0	equ	0xFEF
 22214                           postinc0	equ	0xFEE
 22215                           plusw0	equ	0xFEB
 22216                           fsr0h	equ	0xFEA
 22217                           fsr0l	equ	0xFE9
 22218                           wreg	equ	0xFE8
 22219                           indf1	equ	0xFE7
 22220                           postinc1	equ	0xFE6
 22221                           postdec1	equ	0xFE5
 22222                           plusw1	equ	0xFE3
 22223                           fsr1h	equ	0xFE2
 22224                           fsr1l	equ	0xFE1
 22225                           indf2	equ	0xFDF
 22226                           postinc2	equ	0xFDE
 22227                           postdec2	equ	0xFDD
 22228                           plusw2	equ	0xFDB
 22229                           fsr2h	equ	0xFDA
 22230                           fsr2l	equ	0xFD9
 22231                           status	equ	0xFD8
 22232                           
 22233 ;; *************** function _enc424j600_readSPI *****************
 22234 ;; Defined at:
 22235 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 22236 ;; Parameters:    Size  Location     Type
 22237 ;;  data            2    0[BANK0 ] PTR unsigned char 
 22238 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 22239 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 22240 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 22241 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 22242 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 22243 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 22244 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 22245 ;; Auto vars:     Size  Location     Type
 22246 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 22247 ;; Return value:  Size  Location     Type
 22248 ;;                  1    wreg      void 
 22249 ;; Registers used:
 22250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 22251 ;; Tracked objects:
 22252 ;;		On entry : 0/0
 22253 ;;		On exit  : 0/0
 22254 ;;		Unchanged: 0/0
 22255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22256 ;;      Params:         0       2       0       0       0       0       0       0       0
 22257 ;;      Locals:         0       4       0       0       0       0       0       0       0
 22258 ;;      Temps:          0       4       0       0       0       0       0       0       0
 22259 ;;      Totals:         0      10       0       0       0       0       0       0       0
 22260 ;;Total ram usage:       10 bytes
 22261 ;; Hardware stack levels used:    1
 22262 ;; Hardware stack levels required when called:    5
 22263 ;; This function calls:
 22264 ;;		_enc424j600_initSPI
 22265 ;; This function is called by:
 22266 ;;		_ethernetController_getSourceMACAddress
 22267 ;;		_ethernetController_getEtherTypeField
 22268 ;;		_ethernetController_getRSV
 22269 ;;		_ethernetController_updateNextPacketPointer
 22270 ;;		_ethernetController_streamFromRXBuffer
 22271 ;;		_enc424j600_readControlRegisterUnbanked
 22272 ;;		_ethernetController_getDestinationMACAddress
 22273 ;; This function uses a non-reentrant model
 22274 ;;
 22275                           
 22276                           	psect	text103
 22277  0040C0                     __ptext103:
 22278                           	opt stack 0
 22279  0040C0                     _enc424j600_readSPI:
 22280                           	opt stack 20
 22281                           
 22282                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 22283                           
 22284                           ;incstack = 0
 22285  0040C0  0E00               	movlw	0
 22286  0040C2  0100               	movlb	0	; () banked
 22287  0040C4  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 22288  0040C6  0E00               	movlw	0
 22289  0040C8  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 22290  0040CA  0E00               	movlw	0
 22291  0040CC  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 22292  0040CE  0E00               	movlw	0
 22293  0040D0  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 22294                           
 22295                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 22296  0040D2  0E00               	movlw	0
 22297  0040D4  6EC9               	movwf	4041,c	;volatile
 22298  0040D6                     
 22299                           ; BSR set to: 0
 22300                           
 22301                           ; BSR set to: 0
 22302  0040D6  B0C7               	btfsc	4039,0,c	;volatile
 22303  0040D8  D015               	goto	u8470
 22304                           
 22305                           ; BSR set to: 0
 22306  0040DA  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 22307  0040DE  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 22308  0040E2  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 22309  0040E6  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 22310  0040EA  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 22311  0040EC  0E00               	movlw	0
 22312  0040EE  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 22313  0040F0  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 22314  0040F2  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 22315  0040F4  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 22316  0040F6  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 22317  0040F8  E105               	bnz	l7837
 22318  0040FA  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 22319  0040FC  0E0F               	movlw	15
 22320  0040FE  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 22321  004100  A0D8               	btfss	status,0,c
 22322  004102  D7E9               	goto	l241
 22323  004104                     u8470:
 22324  004104                     l7837:
 22325                           
 22326                           ; BSR set to: 0
 22327                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 22328  004104  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 22329  004106  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 22330  004108  E105               	bnz	u8480
 22331  00410A  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 22332  00410C  0E0F               	movlw	15
 22333  00410E  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 22334  004110  A0D8               	btfss	status,0,c
 22335  004112  D004               	goto	l245
 22336  004114                     u8480:
 22337                           
 22338                           ; BSR set to: 0
 22339                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 22340  004114  8881               	bsf	3969,4,c	;volatile
 22341                           
 22342                           ; BSR set to: 0
 22343                           ;ENC424J600.c: 506: enc424j600_initSPI();
 22344  004116  ECD5  F025         	call	_enc424j600_initSPI	;wreg free
 22345                           
 22346                           ;ENC424J600.c: 507: return;
 22347  00411A  0012               	return	
 22348  00411C                     l245:
 22349                           
 22350                           ;ENC424J600.c: 508: }
 22351                           ;ENC424J600.c: 509: *data = SSP1BUF;
 22352  00411C  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 22353  004120  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 22354  004124  CFC9 FFDF          	movff	4041,indf2	;volatile
 22355  004128  0012               	return		;funcret
 22356  00412A                     __end_of_enc424j600_readSPI:
 22357                           	opt stack 0
 22358                           tblptru	equ	0xFF8
 22359                           tblptrh	equ	0xFF7
 22360                           tblptrl	equ	0xFF6
 22361                           tablat	equ	0xFF5
 22362                           prodh	equ	0xFF4
 22363                           prodl	equ	0xFF3
 22364                           intcon	equ	0xFF2
 22365                           intcon3	equ	0xFF0
 22366                           indf0	equ	0xFEF
 22367                           postinc0	equ	0xFEE
 22368                           plusw0	equ	0xFEB
 22369                           fsr0h	equ	0xFEA
 22370                           fsr0l	equ	0xFE9
 22371                           wreg	equ	0xFE8
 22372                           indf1	equ	0xFE7
 22373                           postinc1	equ	0xFE6
 22374                           postdec1	equ	0xFE5
 22375                           plusw1	equ	0xFE3
 22376                           fsr1h	equ	0xFE2
 22377                           fsr1l	equ	0xFE1
 22378                           indf2	equ	0xFDF
 22379                           postinc2	equ	0xFDE
 22380                           postdec2	equ	0xFDD
 22381                           plusw2	equ	0xFDB
 22382                           fsr2h	equ	0xFDA
 22383                           fsr2l	equ	0xFD9
 22384                           status	equ	0xFD8
 22385                           
 22386 ;; *************** function _enc424j600_initSPI *****************
 22387 ;; Defined at:
 22388 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 22389 ;; Parameters:    Size  Location     Type
 22390 ;;		None
 22391 ;; Auto vars:     Size  Location     Type
 22392 ;;		None
 22393 ;; Return value:  Size  Location     Type
 22394 ;;                  1    wreg      void 
 22395 ;; Registers used:
 22396 ;;		None
 22397 ;; Tracked objects:
 22398 ;;		On entry : 0/0
 22399 ;;		On exit  : 0/0
 22400 ;;		Unchanged: 0/0
 22401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22402 ;;      Params:         0       0       0       0       0       0       0       0       0
 22403 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22404 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22405 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22406 ;;Total ram usage:        0 bytes
 22407 ;; Hardware stack levels used:    1
 22408 ;; Hardware stack levels required when called:    4
 22409 ;; This function calls:
 22410 ;;		Nothing
 22411 ;; This function is called by:
 22412 ;;		_ethernetController_init
 22413 ;;		_enc424j600_writeSPI
 22414 ;;		_enc424j600_readSPI
 22415 ;; This function uses a non-reentrant model
 22416 ;;
 22417                           
 22418                           	psect	text104
 22419  004BAA                     __ptext104:
 22420                           	opt stack 0
 22421  004BAA                     _enc424j600_initSPI:
 22422                           	opt stack 20
 22423                           
 22424                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 22425                           
 22426                           ;incstack = 0
 22427  004BAA  9AC6               	bcf	4038,5,c	;volatile
 22428                           
 22429                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 22430  004BAC  8CC7               	bsf	4039,6,c	;volatile
 22431                           
 22432                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 22433  004BAE  8093               	bsf	3987,0,c	;volatile
 22434                           
 22435                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 22436  004BB0  010F               	movlb	15	; () banked
 22437  004BB2  915C               	bcf	92,0,b	;volatile
 22438                           
 22439                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 22440  004BB4  9293               	bcf	3987,1,c	;volatile
 22441                           
 22442                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 22443  004BB6  935C               	bcf	92,1,b	;volatile
 22444                           
 22445                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 22446  004BB8  9693               	bcf	3987,3,c	;volatile
 22447                           
 22448                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 22449  004BBA  975C               	bcf	92,3,b	;volatile
 22450                           
 22451                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 22452  004BBC  9893               	bcf	3987,4,c	;volatile
 22453                           
 22454                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 22455  004BBE  995C               	bcf	92,4,b	;volatile
 22456                           
 22457                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 22458  004BC0  8881               	bsf	3969,4,c	;volatile
 22459                           
 22460                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 22461  004BC2  8AC6               	bsf	4038,5,c	;volatile
 22462                           
 22463                           ; BSR set to: 15
 22464  004BC4  0012               	return		;funcret
 22465  004BC6                     __end_of_enc424j600_initSPI:
 22466                           	opt stack 0
 22467                           tblptru	equ	0xFF8
 22468                           tblptrh	equ	0xFF7
 22469                           tblptrl	equ	0xFF6
 22470                           tablat	equ	0xFF5
 22471                           prodh	equ	0xFF4
 22472                           prodl	equ	0xFF3
 22473                           intcon	equ	0xFF2
 22474                           intcon3	equ	0xFF0
 22475                           indf0	equ	0xFEF
 22476                           postinc0	equ	0xFEE
 22477                           plusw0	equ	0xFEB
 22478                           fsr0h	equ	0xFEA
 22479                           fsr0l	equ	0xFE9
 22480                           wreg	equ	0xFE8
 22481                           indf1	equ	0xFE7
 22482                           postinc1	equ	0xFE6
 22483                           postdec1	equ	0xFE5
 22484                           plusw1	equ	0xFE3
 22485                           fsr1h	equ	0xFE2
 22486                           fsr1l	equ	0xFE1
 22487                           indf2	equ	0xFDF
 22488                           postinc2	equ	0xFDE
 22489                           postdec2	equ	0xFDD
 22490                           plusw2	equ	0xFDB
 22491                           fsr2h	equ	0xFDA
 22492                           fsr2l	equ	0xFD9
 22493                           status	equ	0xFD8
 22494                           
 22495 ;; *************** function _UARTInit *****************
 22496 ;; Defined at:
 22497 ;;		line 26 in file "src/system/uart.c"
 22498 ;; Parameters:    Size  Location     Type
 22499 ;;		None
 22500 ;; Auto vars:     Size  Location     Type
 22501 ;;		None
 22502 ;; Return value:  Size  Location     Type
 22503 ;;                  1    wreg      void 
 22504 ;; Registers used:
 22505 ;;		wreg, status,2
 22506 ;; Tracked objects:
 22507 ;;		On entry : 0/0
 22508 ;;		On exit  : 0/0
 22509 ;;		Unchanged: 0/0
 22510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22511 ;;      Params:         0       0       0       0       0       0       0       0       0
 22512 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22513 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22514 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22515 ;;Total ram usage:        0 bytes
 22516 ;; Hardware stack levels used:    1
 22517 ;; Hardware stack levels required when called:    4
 22518 ;; This function calls:
 22519 ;;		Nothing
 22520 ;; This function is called by:
 22521 ;;		_main
 22522 ;; This function uses a non-reentrant model
 22523 ;;
 22524                           
 22525                           	psect	text105
 22526  004C6E                     __ptext105:
 22527                           	opt stack 0
 22528  004C6E                     _UARTInit:
 22529                           	opt stack 26
 22530                           
 22531                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 22532                           
 22533                           ; BSR set to: 15
 22534                           ;incstack = 0
 22535  004C6E  8AAC               	bsf	4012,5,c	;volatile
 22536                           
 22537                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 22538  004C70  98AC               	bcf	4012,4,c	;volatile
 22539                           
 22540                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 22541  004C72  8EAB               	bsf	4011,7,c	;volatile
 22542                           
 22543                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 22544  004C74  8CAC               	bsf	4012,6,c	;volatile
 22545                           
 22546                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 22547  004C76  80AC               	bsf	4012,0,c	;volatile
 22548                           
 22549                           ;uart.c: 32: SPBRG = 3;
 22550  004C78  0E03               	movlw	3
 22551  004C7A  6EAF               	movwf	4015,c	;volatile
 22552  004C7C  0012               	return		;funcret
 22553  004C7E                     __end_of_UARTInit:
 22554                           	opt stack 0
 22555                           tblptru	equ	0xFF8
 22556                           tblptrh	equ	0xFF7
 22557                           tblptrl	equ	0xFF6
 22558                           tablat	equ	0xFF5
 22559                           prodh	equ	0xFF4
 22560                           prodl	equ	0xFF3
 22561                           intcon	equ	0xFF2
 22562                           intcon3	equ	0xFF0
 22563                           indf0	equ	0xFEF
 22564                           postinc0	equ	0xFEE
 22565                           plusw0	equ	0xFEB
 22566                           fsr0h	equ	0xFEA
 22567                           fsr0l	equ	0xFE9
 22568                           wreg	equ	0xFE8
 22569                           indf1	equ	0xFE7
 22570                           postinc1	equ	0xFE6
 22571                           postdec1	equ	0xFE5
 22572                           plusw1	equ	0xFE3
 22573                           fsr1h	equ	0xFE2
 22574                           fsr1l	equ	0xFE1
 22575                           indf2	equ	0xFDF
 22576                           postinc2	equ	0xFDE
 22577                           postdec2	equ	0xFDD
 22578                           plusw2	equ	0xFDB
 22579                           fsr2h	equ	0xFDA
 22580                           fsr2l	equ	0xFD9
 22581                           status	equ	0xFD8
 22582                           
 22583 ;; *************** function _ISR *****************
 22584 ;; Defined at:
 22585 ;;		line 269 in file "src/system/main.c"
 22586 ;; Parameters:    Size  Location     Type
 22587 ;;		None
 22588 ;; Auto vars:     Size  Location     Type
 22589 ;;		None
 22590 ;; Return value:  Size  Location     Type
 22591 ;;                  1    wreg      void 
 22592 ;; Registers used:
 22593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22594 ;; Tracked objects:
 22595 ;;		On entry : 0/0
 22596 ;;		On exit  : 0/0
 22597 ;;		Unchanged: 0/0
 22598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22599 ;;      Params:         0       0       0       0       0       0       0       0       0
 22600 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22601 ;;      Temps:         19       0       0       0       0       0       0       0       0
 22602 ;;      Totals:        19       0       0       0       0       0       0       0       0
 22603 ;;Total ram usage:       19 bytes
 22604 ;; Hardware stack levels used:    1
 22605 ;; Hardware stack levels required when called:    3
 22606 ;; This function calls:
 22607 ;;		_buttonHandler
 22608 ;;		_sevenSegmentUpdate
 22609 ;;		_updateTime
 22610 ;; This function is called by:
 22611 ;;		Interrupt level 2
 22612 ;; This function uses a non-reentrant model
 22613 ;;
 22614                           
 22615                           	psect	intcode
 22616  000008                     __pintcode:
 22617                           	opt stack 0
 22618  000008                     _ISR:
 22619                           	opt stack 17
 22620                           
 22621                           ;incstack = 0
 22622  000008  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22623  00000A  CFFA F017          	movff	pclath,??_ISR+1
 22624  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 22625  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 22626  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 22627  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 22628  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 22629  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 22630  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 22631  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 22632  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 22633  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 22634  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 22635  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 22636  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 22637  000042  C050  F025         	movff	btemp,??_ISR+15
 22638  000046  C051  F026         	movff	btemp+1,??_ISR+16
 22639  00004A  C052  F027         	movff	btemp+2,??_ISR+17
 22640  00004E  C053  F028         	movff	btemp+3,??_ISR+18
 22641                           
 22642                           ;main.c: 271: if (PIR1bits.CCP1IF) {
 22643  000052  A49E               	btfss	3998,2,c	;volatile
 22644  000054  D012               	goto	i2l686
 22645                           
 22646                           ;main.c: 272: PIR1bits.CCP1IF = 0;
 22647  000056  949E               	bcf	3998,2,c	;volatile
 22648                           
 22649                           ;main.c: 273: PORTBbits.RB6 = ~PORTBbits.RB6;
 22650  000058  AC81               	btfss	3969,6,c	;volatile
 22651  00005A  D002               	goto	i2u794_40
 22652  00005C  0E01               	movlw	1
 22653  00005E  D001               	goto	i2u794_46
 22654  000060                     i2u794_40:
 22655  000060  0E00               	movlw	0
 22656  000062                     i2u794_46:
 22657  000062  0AFF               	xorlw	255
 22658  000064  6E16               	movwf	??_ISR& (0+255),c
 22659  000066  3A16               	swapf	??_ISR,f,c
 22660  000068  4616               	rlncf	??_ISR,f,c
 22661  00006A  4616               	rlncf	??_ISR,f,c
 22662  00006C  5081               	movf	3969,w,c	;volatile
 22663  00006E  1816               	xorwf	??_ISR,w,c
 22664  000070  0BBF               	andlw	-65
 22665  000072  1816               	xorwf	??_ISR,w,c
 22666  000074  6E81               	movwf	3969,c	;volatile
 22667                           
 22668                           ;main.c: 274: updateTime();
 22669  000076  EC54  F026         	call	_updateTime	;wreg free
 22670  00007A                     i2l686:
 22671                           
 22672                           ;main.c: 275: }
 22673                           ;main.c: 277: if (INTCONbits.TMR0IF) {
 22674  00007A  A4F2               	btfss	intcon,2,c	;volatile
 22675  00007C  D00D               	goto	i2l687
 22676                           
 22677                           ;main.c: 278: INTCONbits.TMR0IF = 0;
 22678  00007E  94F2               	bcf	intcon,2,c	;volatile
 22679                           
 22680                           ;main.c: 279: sevenSegmentUpdate(numberToDisplay);
 22681  000080  C031  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 22682  000084  C032  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 22683  000088  ECE7  F01A         	call	_sevenSegmentUpdate	;wreg free
 22684                           
 22685                           ;main.c: 280: buttonHandler(&buttonState);
 22686  00008C  0EF0               	movlw	low _buttonState
 22687  00008E  6E01               	movwf	buttonHandler@state,c
 22688  000090  0E01               	movlw	high _buttonState
 22689  000092  6E02               	movwf	buttonHandler@state+1,c
 22690  000094  EC51  F01C         	call	_buttonHandler	;wreg free
 22691  000098                     i2l687:
 22692                           
 22693                           ;main.c: 283: }
 22694                           ;main.c: 285: if (INTCON3bits.INT2IF) {
 22695  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 22696                           
 22697                           ;main.c: 286: INTCON3bits.INT2IF = 0;
 22698  00009A  92F0               	bcf	intcon3,1,c	;volatile
 22699                           
 22700                           ;main.c: 293: }
 22701                           ;main.c: 294: if (RCIF) {
 22702  00009C  C028  F053         	movff	??_ISR+18,btemp+3
 22703  0000A0  C027  F052         	movff	??_ISR+17,btemp+2
 22704  0000A4  C026  F051         	movff	??_ISR+16,btemp+1
 22705  0000A8  C025  F050         	movff	??_ISR+15,btemp
 22706  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 22707  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 22708  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 22709  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 22710  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 22711  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 22712  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 22713  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 22714  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 22715  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 22716  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 22717  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 22718  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 22719  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 22720  0000E4  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22721  0000E6  0011               	retfie		f
 22722  0000E8                     __end_of_ISR:
 22723                           	opt stack 0
 22724                           pclatu	equ	0xFFB
 22725                           pclath	equ	0xFFA
 22726                           tblptru	equ	0xFF8
 22727                           tblptrh	equ	0xFF7
 22728                           tblptrl	equ	0xFF6
 22729                           tablat	equ	0xFF5
 22730                           prodh	equ	0xFF4
 22731                           prodl	equ	0xFF3
 22732                           intcon	equ	0xFF2
 22733                           intcon3	equ	0xFF0
 22734                           indf0	equ	0xFEF
 22735                           postinc0	equ	0xFEE
 22736                           plusw0	equ	0xFEB
 22737                           fsr0h	equ	0xFEA
 22738                           fsr0l	equ	0xFE9
 22739                           wreg	equ	0xFE8
 22740                           indf1	equ	0xFE7
 22741                           postinc1	equ	0xFE6
 22742                           postdec1	equ	0xFE5
 22743                           plusw1	equ	0xFE3
 22744                           fsr1h	equ	0xFE2
 22745                           fsr1l	equ	0xFE1
 22746                           indf2	equ	0xFDF
 22747                           postinc2	equ	0xFDE
 22748                           postdec2	equ	0xFDD
 22749                           plusw2	equ	0xFDB
 22750                           fsr2h	equ	0xFDA
 22751                           fsr2l	equ	0xFD9
 22752                           status	equ	0xFD8
 22753                           
 22754 ;; *************** function _updateTime *****************
 22755 ;; Defined at:
 22756 ;;		line 30 in file "src/stack/time.c"
 22757 ;; Parameters:    Size  Location     Type
 22758 ;;		None
 22759 ;; Auto vars:     Size  Location     Type
 22760 ;;		None
 22761 ;; Return value:  Size  Location     Type
 22762 ;;                  1    wreg      void 
 22763 ;; Registers used:
 22764 ;;		wreg, status,2, status,0
 22765 ;; Tracked objects:
 22766 ;;		On entry : 0/0
 22767 ;;		On exit  : 0/0
 22768 ;;		Unchanged: 0/0
 22769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22770 ;;      Params:         0       0       0       0       0       0       0       0       0
 22771 ;;      Locals:         0       0       0       0       0       0       0       0       0
 22772 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22773 ;;      Totals:         0       0       0       0       0       0       0       0       0
 22774 ;;Total ram usage:        0 bytes
 22775 ;; Hardware stack levels used:    1
 22776 ;; This function calls:
 22777 ;;		Nothing
 22778 ;; This function is called by:
 22779 ;;		_ISR
 22780 ;; This function uses a non-reentrant model
 22781 ;;
 22782                           
 22783                           	psect	text107
 22784  004CA8                     __ptext107:
 22785                           	opt stack 0
 22786  004CA8                     _updateTime:
 22787                           	opt stack 19
 22788                           
 22789                           ;time.c: 31: time++;
 22790                           
 22791                           ;incstack = 0
 22792  004CA8  0E01               	movlw	1
 22793  004CAA  2629               	addwf	_time,f,c	;volatile
 22794  004CAC  0E00               	movlw	0
 22795  004CAE  222A               	addwfc	_time+1,f,c	;volatile
 22796  004CB0  222B               	addwfc	_time+2,f,c	;volatile
 22797  004CB2  222C               	addwfc	_time+3,f,c	;volatile
 22798  004CB4  0012               	return		;funcret
 22799  004CB6                     __end_of_updateTime:
 22800                           	opt stack 0
 22801                           pclatu	equ	0xFFB
 22802                           pclath	equ	0xFFA
 22803                           tblptru	equ	0xFF8
 22804                           tblptrh	equ	0xFF7
 22805                           tblptrl	equ	0xFF6
 22806                           tablat	equ	0xFF5
 22807                           prodh	equ	0xFF4
 22808                           prodl	equ	0xFF3
 22809                           intcon	equ	0xFF2
 22810                           intcon3	equ	0xFF0
 22811                           indf0	equ	0xFEF
 22812                           postinc0	equ	0xFEE
 22813                           plusw0	equ	0xFEB
 22814                           fsr0h	equ	0xFEA
 22815                           fsr0l	equ	0xFE9
 22816                           wreg	equ	0xFE8
 22817                           indf1	equ	0xFE7
 22818                           postinc1	equ	0xFE6
 22819                           postdec1	equ	0xFE5
 22820                           plusw1	equ	0xFE3
 22821                           fsr1h	equ	0xFE2
 22822                           fsr1l	equ	0xFE1
 22823                           indf2	equ	0xFDF
 22824                           postinc2	equ	0xFDE
 22825                           postdec2	equ	0xFDD
 22826                           plusw2	equ	0xFDB
 22827                           fsr2h	equ	0xFDA
 22828                           fsr2l	equ	0xFD9
 22829                           status	equ	0xFD8
 22830                           
 22831 ;; *************** function _sevenSegmentUpdate *****************
 22832 ;; Defined at:
 22833 ;;		line 41 in file "src/system/sevenseg.c"
 22834 ;; Parameters:    Size  Location     Type
 22835 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 22836 ;; Auto vars:     Size  Location     Type
 22837 ;;  i               1   20[COMRAM] unsigned char 
 22838 ;; Return value:  Size  Location     Type
 22839 ;;                  1    wreg      void 
 22840 ;; Registers used:
 22841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22842 ;; Tracked objects:
 22843 ;;		On entry : 0/0
 22844 ;;		On exit  : 0/0
 22845 ;;		Unchanged: 0/0
 22846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22847 ;;      Params:         2       0       0       0       0       0       0       0       0
 22848 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22849 ;;      Temps:          2       0       0       0       0       0       0       0       0
 22850 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22851 ;;Total ram usage:        7 bytes
 22852 ;; Hardware stack levels used:    1
 22853 ;; Hardware stack levels required when called:    2
 22854 ;; This function calls:
 22855 ;;		_parseNumber
 22856 ;; This function is called by:
 22857 ;;		_ISR
 22858 ;; This function uses a non-reentrant model
 22859 ;;
 22860                           
 22861                           	psect	text108
 22862  0035CE                     __ptext108:
 22863                           	opt stack 0
 22864  0035CE                     _sevenSegmentUpdate:
 22865                           	opt stack 17
 22866                           
 22867                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 22868                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 22869                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 22870                           
 22871                           ;incstack = 0
 22872  0035CE  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22873  0035D2  0E01               	movlw	1
 22874  0035D4  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22875  0035D6  2A11               	incf	??_sevenSegmentUpdate,f,c
 22876  0035D8  D002               	goto	i2u768_44
 22877  0035DA                     i2u768_45:
 22878  0035DA  90D8               	bcf	status,0,c
 22879  0035DC  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22880  0035DE                     i2u768_44:
 22881  0035DE  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22882  0035E0  D7FC               	goto	i2u768_45
 22883  0035E2  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22884  0035E4  0AFF               	xorlw	255
 22885  0035E6  1682               	andwf	3970,f,c	;volatile
 22886                           
 22887                           ;sevenseg.c: 46: PORTA = 0x00;
 22888  0035E8  0E00               	movlw	0
 22889  0035EA  6E80               	movwf	3968,c	;volatile
 22890                           
 22891                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 22892  0035EC  0E02               	movlw	2
 22893  0035EE  6045               	cpfslt	sevenSegmentUpdate@digitPointer,c
 22894  0035F0  D007               	goto	i2l719
 22895  0035F2  0E01               	movlw	1
 22896  0035F4  2445               	addwf	sevenSegmentUpdate@digitPointer,w,c
 22897  0035F6  6E13               	movwf	_sevenSegmentUpdate$2453,c
 22898  0035F8  6A14               	clrf	_sevenSegmentUpdate$2453+1,c
 22899  0035FA  0E00               	movlw	0
 22900  0035FC  2214               	addwfc	_sevenSegmentUpdate$2453+1,f,c
 22901  0035FE  D004               	goto	i2l721
 22902  003600                     i2l719:
 22903  003600  0E00               	movlw	0
 22904  003602  6E14               	movwf	_sevenSegmentUpdate$2453+1,c
 22905  003604  0E00               	movlw	0
 22906  003606  6E13               	movwf	_sevenSegmentUpdate$2453,c
 22907  003608                     i2l721:
 22908  003608  C013  F045         	movff	_sevenSegmentUpdate$2453,sevenSegmentUpdate@digitPointer
 22909                           
 22910                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 22911  00360C  0EE8               	movlw	232
 22912  00360E  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 22913  003610  0E03               	movlw	3
 22914  003612  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 22915  003614  B0D8               	btfsc	status,0,c
 22916  003616  0012               	return	
 22917                           
 22918                           ;sevenseg.c: 51: }
 22919                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 22920                           
 22921                           ;sevenseg.c: 50: return;
 22922  003618  0E00               	movlw	0
 22923  00361A  6E15               	movwf	sevenSegmentUpdate@i,c
 22924  00361C                     i2l7063:
 22925  00361C  0E02               	movlw	2
 22926  00361E  6415               	cpfsgt	sevenSegmentUpdate@i,c
 22927  003620  D001               	goto	i2l724
 22928  003622  D013               	goto	i2u772_40
 22929  003624                     i2l724:
 22930                           
 22931                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 22932  003624  5015               	movf	sevenSegmentUpdate@i,w,c
 22933  003626  0D01               	mullw	1
 22934  003628  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22935  00362A  24F3               	addwf	prodl,w,c
 22936  00362C  6ED9               	movwf	fsr2l,c
 22937  00362E  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22938  003630  20F4               	addwfc	prodh,w,c
 22939  003632  6EDA               	movwf	fsr2h,c
 22940  003634  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 22941  003638  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 22942  00363C  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 22943  003640  EC8B  F01E         	call	_parseNumber	;wreg free
 22944  003644  6EDF               	movwf	indf2,c
 22945  003646  2A15               	incf	sevenSegmentUpdate@i,f,c
 22946  003648  D7E9               	goto	i2l7063
 22947  00364A                     i2u772_40:
 22948                           
 22949                           ;sevenseg.c: 54: }
 22950                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 22951  00364A  C045  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22952  00364E  0E01               	movlw	1
 22953  003650  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22954  003652  2A11               	incf	??_sevenSegmentUpdate,f,c
 22955  003654  D002               	goto	i2u773_44
 22956  003656                     i2u773_45:
 22957  003656  90D8               	bcf	status,0,c
 22958  003658  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22959  00365A                     i2u773_44:
 22960  00365A  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22961  00365C  D7FC               	goto	i2u773_45
 22962  00365E  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22963  003660  1282               	iorwf	3970,f,c	;volatile
 22964                           
 22965                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 22966  003662  5045               	movf	sevenSegmentUpdate@digitPointer,w,c
 22967  003664  0D01               	mullw	1
 22968  003666  0E39               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22969  003668  24F3               	addwf	prodl,w,c
 22970  00366A  6ED9               	movwf	fsr2l,c
 22971  00366C  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22972  00366E  20F4               	addwfc	prodh,w,c
 22973  003670  6EDA               	movwf	fsr2h,c
 22974  003672  50DF               	movf	indf2,w,c
 22975  003674  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 22976  003676  5011               	movf	??_sevenSegmentUpdate,w,c
 22977  003678  0D01               	mullw	1
 22978  00367A  0ED7               	movlw	low _sevenSegCharacters
 22979  00367C  24F3               	addwf	prodl,w,c
 22980  00367E  6ED9               	movwf	fsr2l,c
 22981  003680  0E02               	movlw	high _sevenSegCharacters
 22982  003682  20F4               	addwfc	prodh,w,c
 22983  003684  6EDA               	movwf	fsr2h,c
 22984  003686  50DF               	movf	indf2,w,c
 22985  003688  6E80               	movwf	3968,c	;volatile
 22986  00368A  0012               	return		;funcret
 22987  00368C                     __end_of_sevenSegmentUpdate:
 22988                           	opt stack 0
 22989                           pclatu	equ	0xFFB
 22990                           pclath	equ	0xFFA
 22991                           tblptru	equ	0xFF8
 22992                           tblptrh	equ	0xFF7
 22993                           tblptrl	equ	0xFF6
 22994                           tablat	equ	0xFF5
 22995                           prodh	equ	0xFF4
 22996                           prodl	equ	0xFF3
 22997                           intcon	equ	0xFF2
 22998                           intcon3	equ	0xFF0
 22999                           indf0	equ	0xFEF
 23000                           postinc0	equ	0xFEE
 23001                           plusw0	equ	0xFEB
 23002                           fsr0h	equ	0xFEA
 23003                           fsr0l	equ	0xFE9
 23004                           wreg	equ	0xFE8
 23005                           indf1	equ	0xFE7
 23006                           postinc1	equ	0xFE6
 23007                           postdec1	equ	0xFE5
 23008                           plusw1	equ	0xFE3
 23009                           fsr1h	equ	0xFE2
 23010                           fsr1l	equ	0xFE1
 23011                           indf2	equ	0xFDF
 23012                           postinc2	equ	0xFDE
 23013                           postdec2	equ	0xFDD
 23014                           plusw2	equ	0xFDB
 23015                           fsr2h	equ	0xFDA
 23016                           fsr2l	equ	0xFD9
 23017                           status	equ	0xFD8
 23018                           
 23019 ;; *************** function _parseNumber *****************
 23020 ;; Defined at:
 23021 ;;		line 59 in file "src/system/sevenseg.c"
 23022 ;; Parameters:    Size  Location     Type
 23023 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 23024 ;;  digit           1    9[COMRAM] unsigned char 
 23025 ;; Auto vars:     Size  Location     Type
 23026 ;;  hundreds        1   13[COMRAM] unsigned char 
 23027 ;;  tens            1   12[COMRAM] unsigned char 
 23028 ;;  ones            1   11[COMRAM] unsigned char 
 23029 ;; Return value:  Size  Location     Type
 23030 ;;                  1    wreg      unsigned char 
 23031 ;; Registers used:
 23032 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 23033 ;; Tracked objects:
 23034 ;;		On entry : 0/0
 23035 ;;		On exit  : 0/0
 23036 ;;		Unchanged: 0/0
 23037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23038 ;;      Params:         3       0       0       0       0       0       0       0       0
 23039 ;;      Locals:         3       0       0       0       0       0       0       0       0
 23040 ;;      Temps:          1       0       0       0       0       0       0       0       0
 23041 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23042 ;;Total ram usage:        7 bytes
 23043 ;; Hardware stack levels used:    1
 23044 ;; Hardware stack levels required when called:    1
 23045 ;; This function calls:
 23046 ;;		i2___lwdiv
 23047 ;; This function is called by:
 23048 ;;		_sevenSegmentUpdate
 23049 ;; This function uses a non-reentrant model
 23050 ;;
 23051                           
 23052                           	psect	text109
 23053  003D16                     __ptext109:
 23054                           	opt stack 0
 23055  003D16                     _parseNumber:
 23056                           	opt stack 17
 23057                           
 23058                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 23059                           
 23060                           ;incstack = 0
 23061  003D16  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 23062  003D1A  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 23063  003D1E  0E00               	movlw	0
 23064  003D20  6E04               	movwf	i2___lwdiv@divisor+1,c
 23065  003D22  0E64               	movlw	100
 23066  003D24  6E03               	movwf	i2___lwdiv@divisor,c
 23067  003D26  EC33  F022         	call	i2___lwdiv	;wreg free
 23068  003D2A  5001               	movf	?i2___lwdiv,w,c
 23069  003D2C  6E0E               	movwf	parseNumber@hundreds,c
 23070                           
 23071                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 23072  003D2E  500E               	movf	parseNumber@hundreds,w,c
 23073  003D30  0D64               	mullw	100
 23074  003D32  1EF3               	comf	prodl,f,c
 23075  003D34  1EF4               	comf	prodh,f,c
 23076  003D36  4AF3               	infsnz	prodl,f,c
 23077  003D38  2AF4               	incf	prodh,f,c
 23078  003D3A  5008               	movf	parseNumber@numberToDisplay,w,c
 23079  003D3C  24F3               	addwf	prodl,w,c
 23080  003D3E  6E01               	movwf	i2___lwdiv@dividend,c
 23081  003D40  5009               	movf	parseNumber@numberToDisplay+1,w,c
 23082  003D42  20F4               	addwfc	prodh,w,c
 23083  003D44  6E02               	movwf	i2___lwdiv@dividend+1,c
 23084  003D46  0E00               	movlw	0
 23085  003D48  6E04               	movwf	i2___lwdiv@divisor+1,c
 23086  003D4A  0E0A               	movlw	10
 23087  003D4C  6E03               	movwf	i2___lwdiv@divisor,c
 23088  003D4E  EC33  F022         	call	i2___lwdiv	;wreg free
 23089  003D52  5001               	movf	?i2___lwdiv,w,c
 23090  003D54  6E0D               	movwf	parseNumber@tens,c
 23091                           
 23092                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 23093  003D56  500D               	movf	parseNumber@tens,w,c
 23094  003D58  0D0A               	mullw	10
 23095  003D5A  CFF3 F00B          	movff	prodl,??_parseNumber
 23096  003D5E  500E               	movf	parseNumber@hundreds,w,c
 23097  003D60  0D64               	mullw	100
 23098  003D62  50F3               	movf	prodl,w,c
 23099  003D64  240B               	addwf	??_parseNumber,w,c
 23100  003D66  0800               	sublw	0
 23101  003D68  2408               	addwf	parseNumber@numberToDisplay,w,c
 23102  003D6A  6E0C               	movwf	parseNumber@ones,c
 23103                           
 23104                           ;sevenseg.c: 64: switch (digit) {
 23105  003D6C  D008               	goto	i2l728
 23106  003D6E                     
 23107                           ;sevenseg.c: 66: return ones;
 23108  003D6E  500C               	movf	parseNumber@ones,w,c
 23109  003D70  0012               	return	
 23110  003D72                     
 23111                           ;sevenseg.c: 68: return tens;
 23112  003D72  500D               	movf	parseNumber@tens,w,c
 23113  003D74  0012               	return	
 23114  003D76                     
 23115                           ;sevenseg.c: 70: return hundreds;
 23116  003D76  500E               	movf	parseNumber@hundreds,w,c
 23117  003D78  0012               	return	
 23118  003D7A  0E00               	movlw	0
 23119                           
 23120                           ;sevenseg.c: 72: }
 23121  003D7C  0012               	return	
 23122  003D7E                     i2l728:
 23123  003D7E  500A               	movf	parseNumber@digit,w,c
 23124                           
 23125                           ; Switch size 1, requested type "space"
 23126                           ; Number of cases is 3, Range of values is 0 to 2
 23127                           ; switch strategies available:
 23128                           ; Name         Instructions Cycles
 23129                           ; simple_byte           10     6 (average)
 23130                           ;	Chosen strategy is simple_byte
 23131  003D80  0A00               	xorlw	0	; case 0
 23132  003D82  B4D8               	btfsc	status,2,c
 23133  003D84  D7F8               	goto	i2l732
 23134  003D86  0A01               	xorlw	1	; case 1
 23135  003D88  B4D8               	btfsc	status,2,c
 23136  003D8A  D7F3               	goto	i2l731
 23137  003D8C  0A03               	xorlw	3	; case 2
 23138  003D8E  B4D8               	btfsc	status,2,c
 23139  003D90  D7EE               	goto	i2l729
 23140  003D92  D7F3               	goto	i2l733
 23141  003D94                     __end_of_parseNumber:
 23142                           	opt stack 0
 23143                           pclatu	equ	0xFFB
 23144                           pclath	equ	0xFFA
 23145                           tblptru	equ	0xFF8
 23146                           tblptrh	equ	0xFF7
 23147                           tblptrl	equ	0xFF6
 23148                           tablat	equ	0xFF5
 23149                           prodh	equ	0xFF4
 23150                           prodl	equ	0xFF3
 23151                           intcon	equ	0xFF2
 23152                           intcon3	equ	0xFF0
 23153                           indf0	equ	0xFEF
 23154                           postinc0	equ	0xFEE
 23155                           plusw0	equ	0xFEB
 23156                           fsr0h	equ	0xFEA
 23157                           fsr0l	equ	0xFE9
 23158                           wreg	equ	0xFE8
 23159                           indf1	equ	0xFE7
 23160                           postinc1	equ	0xFE6
 23161                           postdec1	equ	0xFE5
 23162                           plusw1	equ	0xFE3
 23163                           fsr1h	equ	0xFE2
 23164                           fsr1l	equ	0xFE1
 23165                           indf2	equ	0xFDF
 23166                           postinc2	equ	0xFDE
 23167                           postdec2	equ	0xFDD
 23168                           plusw2	equ	0xFDB
 23169                           fsr2h	equ	0xFDA
 23170                           fsr2l	equ	0xFD9
 23171                           status	equ	0xFD8
 23172                           
 23173 ;; *************** function i2___lwdiv *****************
 23174 ;; Defined at:
 23175 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 23176 ;; Parameters:    Size  Location     Type
 23177 ;;  dividend        2    0[COMRAM] unsigned int 
 23178 ;;  divisor         2    2[COMRAM] unsigned int 
 23179 ;; Auto vars:     Size  Location     Type
 23180 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 23181 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 23182 ;; Return value:  Size  Location     Type
 23183 ;;                  2    0[COMRAM] unsigned int 
 23184 ;; Registers used:
 23185 ;;		wreg, status,2, status,0
 23186 ;; Tracked objects:
 23187 ;;		On entry : 0/0
 23188 ;;		On exit  : 0/0
 23189 ;;		Unchanged: 0/0
 23190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23191 ;;      Params:         4       0       0       0       0       0       0       0       0
 23192 ;;      Locals:         3       0       0       0       0       0       0       0       0
 23193 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23194 ;;      Totals:         7       0       0       0       0       0       0       0       0
 23195 ;;Total ram usage:        7 bytes
 23196 ;; Hardware stack levels used:    1
 23197 ;; This function calls:
 23198 ;;		Nothing
 23199 ;; This function is called by:
 23200 ;;		_parseNumber
 23201 ;; This function uses a non-reentrant model
 23202 ;;
 23203                           
 23204                           	psect	text110
 23205  004466                     __ptext110:
 23206                           	opt stack 0
 23207  004466                     i2___lwdiv:
 23208                           	opt stack 17
 23209                           
 23210                           ;incstack = 0
 23211  004466  0E00               	movlw	0
 23212  004468  6E06               	movwf	i2___lwdiv@quotient+1,c
 23213  00446A  0E00               	movlw	0
 23214  00446C  6E05               	movwf	i2___lwdiv@quotient,c
 23215  00446E  5003               	movf	i2___lwdiv@divisor,w,c
 23216  004470  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 23217  004472  B4D8               	btfsc	status,2,c
 23218  004474  D01C               	goto	i2l1570
 23219  004476  0E01               	movlw	1
 23220  004478  6E07               	movwf	i2___lwdiv@counter,c
 23221  00447A  D004               	goto	i2l1565
 23222  00447C  90D8               	bcf	status,0,c
 23223  00447E  3603               	rlcf	i2___lwdiv@divisor,f,c
 23224  004480  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 23225  004482  2A07               	incf	i2___lwdiv@counter,f,c
 23226  004484                     i2l1565:
 23227  004484  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 23228  004486  D7FA               	goto	i2l1566
 23229  004488                     i2u693_40:
 23230  004488  90D8               	bcf	status,0,c
 23231  00448A  3605               	rlcf	i2___lwdiv@quotient,f,c
 23232  00448C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 23233  00448E  5003               	movf	i2___lwdiv@divisor,w,c
 23234  004490  5C01               	subwf	i2___lwdiv@dividend,w,c
 23235  004492  5004               	movf	i2___lwdiv@divisor+1,w,c
 23236  004494  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 23237  004496  A0D8               	btfss	status,0,c
 23238  004498  D005               	goto	i2l1569
 23239  00449A  5003               	movf	i2___lwdiv@divisor,w,c
 23240  00449C  5E01               	subwf	i2___lwdiv@dividend,f,c
 23241  00449E  5004               	movf	i2___lwdiv@divisor+1,w,c
 23242  0044A0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 23243  0044A2  8005               	bsf	i2___lwdiv@quotient,0,c
 23244  0044A4                     i2l1569:
 23245  0044A4  90D8               	bcf	status,0,c
 23246  0044A6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 23247  0044A8  3203               	rrcf	i2___lwdiv@divisor,f,c
 23248  0044AA  2E07               	decfsz	i2___lwdiv@counter,f,c
 23249  0044AC  D7ED               	goto	i2u693_40
 23250  0044AE                     i2l1570:
 23251  0044AE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 23252  0044B2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 23253  0044B6  0012               	return		;funcret
 23254  0044B8                     __end_ofi2___lwdiv:
 23255                           	opt stack 0
 23256                           pclatu	equ	0xFFB
 23257                           pclath	equ	0xFFA
 23258                           tblptru	equ	0xFF8
 23259                           tblptrh	equ	0xFF7
 23260                           tblptrl	equ	0xFF6
 23261                           tablat	equ	0xFF5
 23262                           prodh	equ	0xFF4
 23263                           prodl	equ	0xFF3
 23264                           intcon	equ	0xFF2
 23265                           intcon3	equ	0xFF0
 23266                           indf0	equ	0xFEF
 23267                           postinc0	equ	0xFEE
 23268                           plusw0	equ	0xFEB
 23269                           fsr0h	equ	0xFEA
 23270                           fsr0l	equ	0xFE9
 23271                           wreg	equ	0xFE8
 23272                           indf1	equ	0xFE7
 23273                           postinc1	equ	0xFE6
 23274                           postdec1	equ	0xFE5
 23275                           plusw1	equ	0xFE3
 23276                           fsr1h	equ	0xFE2
 23277                           fsr1l	equ	0xFE1
 23278                           indf2	equ	0xFDF
 23279                           postinc2	equ	0xFDE
 23280                           postdec2	equ	0xFDD
 23281                           plusw2	equ	0xFDB
 23282                           fsr2h	equ	0xFDA
 23283                           fsr2l	equ	0xFD9
 23284                           status	equ	0xFD8
 23285                           
 23286 ;; *************** function _buttonHandler *****************
 23287 ;; Defined at:
 23288 ;;		line 245 in file "src/system/main.c"
 23289 ;; Parameters:    Size  Location     Type
 23290 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 23291 ;;		 -> buttonState(1), 
 23292 ;; Auto vars:     Size  Location     Type
 23293 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 23294 ;;  resetValue      4    2[COMRAM] const unsigned long 
 23295 ;; Return value:  Size  Location     Type
 23296 ;;                  1    wreg      void 
 23297 ;; Registers used:
 23298 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23299 ;; Tracked objects:
 23300 ;;		On entry : 0/0
 23301 ;;		On exit  : 0/0
 23302 ;;		Unchanged: 0/0
 23303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23304 ;;      Params:         2       0       0       0       0       0       0       0       0
 23305 ;;      Locals:         8       0       0       0       0       0       0       0       0
 23306 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23307 ;;      Totals:        10       0       0       0       0       0       0       0       0
 23308 ;;Total ram usage:       10 bytes
 23309 ;; Hardware stack levels used:    1
 23310 ;; This function calls:
 23311 ;;		Nothing
 23312 ;; This function is called by:
 23313 ;;		_ISR
 23314 ;; This function uses a non-reentrant model
 23315 ;;
 23316                           
 23317                           	psect	text111
 23318  0038A2                     __ptext111:
 23319                           	opt stack 0
 23320  0038A2                     _buttonHandler:
 23321                           	opt stack 19
 23322                           
 23323                           ;main.c: 246: uint8_t static oldState = 0;
 23324                           ;main.c: 247: uint8_t static newState = 0;
 23325                           ;main.c: 248: uint32_t static debounceCounter = 0;
 23326                           ;main.c: 249: const uint32_t debounceValue = 0x1f;
 23327                           
 23328                           ;incstack = 0
 23329  0038A2  0E1F               	movlw	31
 23330  0038A4  6E07               	movwf	buttonHandler@debounceValue,c
 23331  0038A6  0E00               	movlw	0
 23332  0038A8  6E08               	movwf	buttonHandler@debounceValue+1,c
 23333  0038AA  0E00               	movlw	0
 23334  0038AC  6E09               	movwf	buttonHandler@debounceValue+2,c
 23335  0038AE  0E00               	movlw	0
 23336  0038B0  6E0A               	movwf	buttonHandler@debounceValue+3,c
 23337                           
 23338                           ;main.c: 250: const uint32_t resetValue = 0xfff;
 23339  0038B2  0EFF               	movlw	255
 23340  0038B4  6E03               	movwf	buttonHandler@resetValue,c
 23341  0038B6  0E0F               	movlw	15
 23342  0038B8  6E04               	movwf	buttonHandler@resetValue+1,c
 23343  0038BA  0E00               	movlw	0
 23344  0038BC  6E05               	movwf	buttonHandler@resetValue+2,c
 23345  0038BE  0E00               	movlw	0
 23346  0038C0  6E06               	movwf	buttonHandler@resetValue+3,c
 23347                           
 23348                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 23349  0038C2  BA81               	btfsc	3969,5,c	;volatile
 23350  0038C4  D007               	goto	i2l676
 23351                           
 23352                           ;main.c: 252: debounceCounter++;
 23353  0038C6  0E01               	movlw	1
 23354  0038C8  262D               	addwf	buttonHandler@debounceCounter,f,c
 23355  0038CA  0E00               	movlw	0
 23356  0038CC  222E               	addwfc	buttonHandler@debounceCounter+1,f,c
 23357  0038CE  222F               	addwfc	buttonHandler@debounceCounter+2,f,c
 23358  0038D0  2230               	addwfc	buttonHandler@debounceCounter+3,f,c
 23359                           
 23360                           ;main.c: 253: } else {
 23361  0038D2  D008               	goto	i2l677
 23362  0038D4                     i2l676:
 23363                           
 23364                           ;main.c: 254: debounceCounter = 0;
 23365  0038D4  0E00               	movlw	0
 23366  0038D6  6E2D               	movwf	buttonHandler@debounceCounter,c
 23367  0038D8  0E00               	movlw	0
 23368  0038DA  6E2E               	movwf	buttonHandler@debounceCounter+1,c
 23369  0038DC  0E00               	movlw	0
 23370  0038DE  6E2F               	movwf	buttonHandler@debounceCounter+2,c
 23371  0038E0  0E00               	movlw	0
 23372  0038E2  6E30               	movwf	buttonHandler@debounceCounter+3,c
 23373  0038E4                     i2l677:
 23374                           
 23375                           ;main.c: 255: }
 23376                           ;main.c: 256: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 23377  0038E4  5007               	movf	buttonHandler@debounceValue,w,c
 23378  0038E6  5C2D               	subwf	buttonHandler@debounceCounter,w,c
 23379  0038E8  5008               	movf	buttonHandler@debounceValue+1,w,c
 23380  0038EA  582E               	subwfb	buttonHandler@debounceCounter+1,w,c
 23381  0038EC  5009               	movf	buttonHandler@debounceValue+2,w,c
 23382  0038EE  582F               	subwfb	buttonHandler@debounceCounter+2,w,c
 23383  0038F0  500A               	movf	buttonHandler@debounceValue+3,w,c
 23384  0038F2  5830               	subwfb	buttonHandler@debounceCounter+3,w,c
 23385  0038F4  A0D8               	btfss	status,0,c
 23386  0038F6  D002               	goto	i2u763_40
 23387  0038F8  0E01               	movlw	1
 23388  0038FA  D001               	goto	i2u764_40
 23389  0038FC                     i2u763_40:
 23390  0038FC  0E00               	movlw	0
 23391  0038FE                     i2u764_40:
 23392  0038FE  6E46               	movwf	buttonHandler@newState,c
 23393                           
 23394                           ;main.c: 257: if (newState && !oldState) {
 23395  003900  5046               	movf	buttonHandler@newState,w,c
 23396  003902  B4D8               	btfsc	status,2,c
 23397  003904  D011               	goto	i2l678
 23398  003906  5047               	movf	buttonHandler@oldState,w,c
 23399  003908  A4D8               	btfss	status,2,c
 23400  00390A  D00E               	goto	i2l678
 23401                           
 23402                           ;main.c: 258: debounceCounter = debounceValue;
 23403  00390C  C007  F02D         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 23404  003910  C008  F02E         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 23405  003914  C009  F02F         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 23406  003918  C00A  F030         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 23407                           
 23408                           ;main.c: 259: *state = 1;
 23409  00391C  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23410  003920  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23411  003924  0E01               	movlw	1
 23412  003926  D005               	goto	L10
 23413  003928                     i2l678:
 23414                           
 23415                           ;main.c: 261: *state = 0;
 23416  003928  C001  FFD9         	movff	buttonHandler@state,fsr2l
 23417  00392C  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 23418  003930  0E00               	movlw	0
 23419  003932                     L10:
 23420  003932  6EDF               	movwf	indf2,c
 23421                           
 23422                           ;main.c: 262: }
 23423                           ;main.c: 263: if (debounceCounter > resetValue)
 23424  003934  502D               	movf	buttonHandler@debounceCounter,w,c
 23425  003936  5C03               	subwf	buttonHandler@resetValue,w,c
 23426  003938  502E               	movf	buttonHandler@debounceCounter+1,w,c
 23427  00393A  5804               	subwfb	buttonHandler@resetValue+1,w,c
 23428  00393C  502F               	movf	buttonHandler@debounceCounter+2,w,c
 23429  00393E  5805               	subwfb	buttonHandler@resetValue+2,w,c
 23430  003940  5030               	movf	buttonHandler@debounceCounter+3,w,c
 23431  003942  5806               	subwfb	buttonHandler@resetValue+3,w,c
 23432  003944  A0D8               	btfss	status,0,c
 23433  003946  00FF               	reset		;# 
 23434                           
 23435                           ;main.c: 266: oldState = newState;
 23436  003948  C046  F047         	movff	buttonHandler@newState,buttonHandler@oldState
 23437  00394C  0012               	return		;funcret
 23438  00394E                     __end_of_buttonHandler:
 23439                           	opt stack 0
 23440                           pclatu	equ	0xFFB
 23441                           pclath	equ	0xFFA
 23442                           tblptru	equ	0xFF8
 23443                           tblptrh	equ	0xFF7
 23444                           tblptrl	equ	0xFF6
 23445                           tablat	equ	0xFF5
 23446                           prodh	equ	0xFF4
 23447                           prodl	equ	0xFF3
 23448                           intcon	equ	0xFF2
 23449                           intcon3	equ	0xFF0
 23450                           indf0	equ	0xFEF
 23451                           postinc0	equ	0xFEE
 23452                           plusw0	equ	0xFEB
 23453                           fsr0h	equ	0xFEA
 23454                           fsr0l	equ	0xFE9
 23455                           wreg	equ	0xFE8
 23456                           indf1	equ	0xFE7
 23457                           postinc1	equ	0xFE6
 23458                           postdec1	equ	0xFE5
 23459                           plusw1	equ	0xFE3
 23460                           fsr1h	equ	0xFE2
 23461                           fsr1l	equ	0xFE1
 23462                           indf2	equ	0xFDF
 23463                           postinc2	equ	0xFDE
 23464                           postdec2	equ	0xFDD
 23465                           plusw2	equ	0xFDB
 23466                           fsr2h	equ	0xFDA
 23467                           fsr2l	equ	0xFD9
 23468                           status	equ	0xFD8
 23469                           pclatu	equ	0xFFB
 23470                           pclath	equ	0xFFA
 23471                           tblptru	equ	0xFF8
 23472                           tblptrh	equ	0xFF7
 23473                           tblptrl	equ	0xFF6
 23474                           tablat	equ	0xFF5
 23475                           prodh	equ	0xFF4
 23476                           prodl	equ	0xFF3
 23477                           intcon	equ	0xFF2
 23478                           intcon3	equ	0xFF0
 23479                           indf0	equ	0xFEF
 23480                           postinc0	equ	0xFEE
 23481                           plusw0	equ	0xFEB
 23482                           fsr0h	equ	0xFEA
 23483                           fsr0l	equ	0xFE9
 23484                           wreg	equ	0xFE8
 23485                           indf1	equ	0xFE7
 23486                           postinc1	equ	0xFE6
 23487                           postdec1	equ	0xFE5
 23488                           plusw1	equ	0xFE3
 23489                           fsr1h	equ	0xFE2
 23490                           fsr1l	equ	0xFE1
 23491                           indf2	equ	0xFDF
 23492                           postinc2	equ	0xFDE
 23493                           postdec2	equ	0xFDD
 23494                           plusw2	equ	0xFDB
 23495                           fsr2h	equ	0xFDA
 23496                           fsr2l	equ	0xFD9
 23497                           status	equ	0xFD8
 23498                           
 23499                           	psect	rparam
 23500  0000                     pclatu	equ	0xFFB
 23501                           pclath	equ	0xFFA
 23502                           tblptru	equ	0xFF8
 23503                           tblptrh	equ	0xFF7
 23504                           tblptrl	equ	0xFF6
 23505                           tablat	equ	0xFF5
 23506                           prodh	equ	0xFF4
 23507                           prodl	equ	0xFF3
 23508                           intcon	equ	0xFF2
 23509                           intcon3	equ	0xFF0
 23510                           indf0	equ	0xFEF
 23511                           postinc0	equ	0xFEE
 23512                           plusw0	equ	0xFEB
 23513                           fsr0h	equ	0xFEA
 23514                           fsr0l	equ	0xFE9
 23515                           wreg	equ	0xFE8
 23516                           indf1	equ	0xFE7
 23517                           postinc1	equ	0xFE6
 23518                           postdec1	equ	0xFE5
 23519                           plusw1	equ	0xFE3
 23520                           fsr1h	equ	0xFE2
 23521                           fsr1l	equ	0xFE1
 23522                           indf2	equ	0xFDF
 23523                           postinc2	equ	0xFDE
 23524                           postdec2	equ	0xFDD
 23525                           plusw2	equ	0xFDB
 23526                           fsr2h	equ	0xFDA
 23527                           fsr2l	equ	0xFD9
 23528                           status	equ	0xFD8
 23529                           
 23530                           	psect	temp
 23531  000050                     btemp:
 23532                           	opt stack 0
 23533  000050                     	ds	1
 23534  0000                     int$flags	set	btemp
 23535  0000                     wtemp6	set	btemp+1
 23536                           pclatu	equ	0xFFB
 23537                           pclath	equ	0xFFA
 23538                           tblptru	equ	0xFF8
 23539                           tblptrh	equ	0xFF7
 23540                           tblptrl	equ	0xFF6
 23541                           tablat	equ	0xFF5
 23542                           prodh	equ	0xFF4
 23543                           prodl	equ	0xFF3
 23544                           intcon	equ	0xFF2
 23545                           intcon3	equ	0xFF0
 23546                           indf0	equ	0xFEF
 23547                           postinc0	equ	0xFEE
 23548                           plusw0	equ	0xFEB
 23549                           fsr0h	equ	0xFEA
 23550                           fsr0l	equ	0xFE9
 23551                           wreg	equ	0xFE8
 23552                           indf1	equ	0xFE7
 23553                           postinc1	equ	0xFE6
 23554                           postdec1	equ	0xFE5
 23555                           plusw1	equ	0xFE3
 23556                           fsr1h	equ	0xFE2
 23557                           fsr1l	equ	0xFE1
 23558                           indf2	equ	0xFDF
 23559                           postinc2	equ	0xFDE
 23560                           postdec2	equ	0xFDD
 23561                           plusw2	equ	0xFDB
 23562                           fsr2h	equ	0xFDA
 23563                           fsr2l	equ	0xFD9
 23564                           status	equ	0xFD8


Data Sizes:
    Strings     1355
    Constant    11
    Data        52
    BSS         452
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    160     160
    BANK1           256    139     241
    BANK2           256      0     243
    BANK3           256     17     138
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK2[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(BANK1[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(BANK1[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK2[50]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_58(CODE[17]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK2[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 64
		 -> STR_96(CODE[39]), STR_95(CODE[59]), STR_94(CODE[5]), STR_93(CODE[38]), 
		 -> STR_92(CODE[23]), STR_91(CODE[30]), STR_90(CODE[45]), STR_89(CODE[64]), 
		 -> STR_88(CODE[35]), STR_87(CODE[5]), STR_86(CODE[42]), STR_85(CODE[19]), 
		 -> STR_84(CODE[2]), STR_83(CODE[3]), STR_82(CODE[3]), STR_81(CODE[3]), 
		 -> STR_80(CODE[3]), STR_79(CODE[5]), STR_78(CODE[2]), STR_77(CODE[2]), 
		 -> STR_76(CODE[7]), STR_75(CODE[11]), STR_74(CODE[3]), STR_73(CODE[31]), 
		 -> STR_72(CODE[33]), STR_71(CODE[24]), STR_70(CODE[36]), STR_69(CODE[2]), 
		 -> STR_68(CODE[3]), STR_67(CODE[16]), STR_66(CODE[15]), STR_65(CODE[10]), 
		 -> STR_64(CODE[2]), STR_63(CODE[3]), STR_62(CODE[5]), STR_61(CODE[3]), 
		 -> STR_60(CODE[2]), STR_59(CODE[39]), arpEntryToString@string(BANK2[50]), ipAdressToString@address(BANK2[16]), 
		 -> STR_58(CODE[17]), STR_57(CODE[4]), STR_56(CODE[4]), STR_55(CODE[5]), 
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), macToString@address(BANK0[18]), 
		 -> hexToString@number(BANK2[10]), intToString@number(BANK2[10]), STR_51(CODE[5]), STR_50(CODE[9]), 
		 -> STR_49(CODE[30]), STR_48(CODE[34]), STR_47(CODE[55]), STR_46(CODE[37]), 
		 -> STR_45(CODE[15]), STR_44(CODE[14]), STR_43(CODE[19]), STR_42(CODE[30]), 
		 -> STR_41(CODE[17]), STR_40(CODE[8]), STR_39(CODE[29]), STR_38(CODE[29]), 
		 -> STR_37(CODE[20]), STR_36(CODE[19]), STR_35(CODE[19]), STR_34(CODE[13]), 
		 -> STR_33(CODE[51]), STR_32(CODE[4]), STR_31(CODE[23]), STR_30(CODE[12]), 
		 -> STR_29(CODE[4]), STR_28(CODE[9]), STR_27(CODE[2]), STR_26(CODE[12]), 
		 -> STR_25(CODE[24]), STR_24(CODE[51]), STR_23(CODE[49]), STR_22(CODE[51]), 
		 -> STR_21(CODE[2]), STR_20(CODE[3]), STR_19(CODE[3]), STR_18(CODE[3]), 
		 -> STR_17(CODE[5]), STR_16(CODE[2]), STR_15(CODE[3]), STR_14(CODE[5]), 
		 -> STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[2]), STR_10(CODE[20]), 
		 -> STR_9(CODE[7]), STR_8(CODE[6]), STR_7(CODE[2]), STR_6(CODE[2]), 
		 -> STR_5(CODE[16]), STR_4(CODE[10]), STR_3(CODE[12]), STR_2(CODE[2]), 
		 -> STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_54(CODE[18]), STR_53(CODE[4]), STR_52(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 121
		 -> stack.ethernet(BANK3[15]), stack(BANK3[121]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 34
		 -> arp_send@ethFrame(BANK0[34]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 121
		 -> stack(BANK3[121]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _arp_init->_arp_setNewEntry
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_setIPSourceAddress->_UARTTransmitText
    _ipv4_background->_UARTTransmitText
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_setNewEntry->_getMillis
    _arp_sendReply->_arp_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwmod
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_background->_arp_gratuitous
    _arp_background->_arp_probe
    _rand->___lmul
    _arp_checkForEntry->_ipv4_cmp
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _UARTTransmitText->_macToString
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _ethernetController_getCurrentPacketCount->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                20    20      0  552378
                                            137 BANK1      2     2      0
                                              0 BANK3     17    17      0
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
            _ipv4_setIPSourceAddress
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0    1720
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0    1720
                                             28 BANK0     11    11      0
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     121
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   11156
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   14391
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_setIPSourceAddress                              4     0      4   14453
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          13    11      2  420353
                                            134 BANK1      3     1      2
                     _arp_background
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                    _ipv4_background
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      5     5      0   14466
                                             58 BANK0      5     5      0
                   _UARTTransmitText
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  225043
                                            120 BANK1     14    11      3
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   50814
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   11323
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   12628
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (5) _ipv4_calculateHeaderChecksum                        18    16      2     839
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     632
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  111484
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8564
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                          _getMillis (ARG)
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   71591
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    3526
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   14071
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2    9718
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   14320
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3424
                                             36 BANK0      4     0      4
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2403
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    1900
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     601
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   18510
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    6716
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_background                                       9     9      0  125270
                                             76 BANK1      9     9      0
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           28    24      4   58709
                                            156 BANK0      4     0      4
                                             52 BANK1     24    24      0
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (4) _rand                                                 2     0      2     456
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (5) ___lmul                                              12     4      8     456
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     279
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _arp_checkForEntry                                   15     9      6    1318
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (5) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     772
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      15    11      4   55532
                                            156 BANK0      4     0      4
                                             52 BANK1     11    11      0
                    _arp_sendRequest
                          _getMillis
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_sendRequest                                     52    44      8   55272
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _arp_send                                            85    53     32   47741
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (6) _mac_setToBroadcast                                   3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (6) _ethernet_txFrameRequest                              5     3      2   17835
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameRequest                               30    21      9    4950
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (8) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (9) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (8) ___wmul                                               6     2      4     412
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (7) _ethernetController_writeDestinationMACAddress       24     9     15    6257
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (8) _enc424j600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _ethernetController_sendPacket                        9     0      9   13618
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (7) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (7) _enc424j600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2   10775
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   46276
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   14613
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    5554
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _enc424j600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableReception                           0     0      0    2650
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _enc424j600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (7) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                19    19      0    1063
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (12) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                      10     8      2     188
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
     _ipProtocolToString (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getCurrentPacketCount
     _enc424j600_getPacketCount
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _arp_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_gratuitous
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _getMillis
       _arp_probe
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipv4_getIPSourceAddress
           _mac_setAllZero
         _getMillis
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _getMillis (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipv4_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _ipAdressToString
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
   _ipv4_setIPSourceAddress
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _arp_setNewEntry
         _getMillis (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100     11      8A      12       53.9%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      F3      10       94.9%
BITBANK1           100      0       0       7        0.0%
BANK1              100     8B      F1       8       94.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      4F       1       84.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     35D       6        0.0%
DATA                 0      0     35D       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sun Mar 17 19:40:14 2019

                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 3F6E  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 3EFA  
                                             arp_init@mac 007C  
                                                      l92 458E  
                                                      l84 2E38  
                                                      l86 2E1A  
                                                      l88 2E32  
                                                      l89 2E4E  
                        __end_of_ipv4_checkHeaderChecksum 35CE  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 3A1A  
                                                     l140 3CB0  
                                                     l204 3A38  
                                                     l213 3A58  
                                                     l205 3A22  
                                                     l134 3E3A  
                                                     l142 3CF8  
                                                     l214 3A40  
                                                     l206 3A0E  
                                                     l135 3E80  
                                                     l232 4216  
                                                     l216 3A6E  
                                                     l241 40D6  
                                                     l217 3A48  
                                                     l209 3A16  
                                                     l218 3A4E  
                                                     l155 4084  
                                                     l412 483E  
                                                     l420 4828  
                                                     l180 4262  
                                                     l245 411C  
                                                     l317 3B50  
                                                     l165 3EBA  
                                                     l414 4860  
                                                     l182 4286  
                                                     l263 2C32  
                                                     l183 429A  
                                                     l432 2C9A  
                                                     l361 33BE  
                                                     l418 4806  
                                                     l258 2B7A  
                                                     l370 036E  
                                                     l514 34AC  
                                                     l443 2D18  
                                                     l195 3AA0  
                                                     l179 42A0  
                                                     l187 4762  
                                                     l371 04E8  
                                                     l515 348E  
                                                     l436 2D1C  
                                                     l188 4778  
                                                     l372 03BA  
                                                     l516 34A6  
                                                     l453 388E  
                                                     l437 2D08  
                                                     l197 3AD0  
                                                     l373 0516  
                                                     l438 2CD2  
                                                     l462 0638  
                                                     l390 46CE  
                                                     l374 03D6  
                                                     l366 024E  
                                                     l518 34EE  
                                                     l622 15A8  
                                                     l455 388A  
                                                     l439 2CCE  
                                                     l359 339E  
                                                     l199 3AF6  
                                                     l375 03F2  
                                                     l367 0292  
                                                     l623 1618  
                                                     l448 3856  
                                                     l472 06EE  
                                                     l464 065A  
                                                     l392 46FA  
                                                     l384 4914  
                                                     l800 4646  
                                                     l368 032E  
                                                     l624 1650  
                                                     l481 08B4  
                                                     l801 4650  
                                                     l369 034E  
                                                     l641 3982  
                                                     l625 174E  
                                                     l482 0962  
                                                     l474 06F6  
                                                     l466 0684  
                                                     l386 492E  
                                                     l810 4616  
                                                     l459 389E  
                                                     l379 4AE8  
                                                     l643 399E  
                                                     l627 178E  
                                                     l476 0910  
                                                     l396 4AC2  
                                                     l900 2126  
                                                     l660 2AA4  
                                                     l652 2A44  
                                                     l477 0830  
                                                     l469 06BA  
                                                     l901 2204  
                                                     l805 4620  
                                                     l661 2A68  
                                                     l653 29F4  
                                                     l645 39B2  
                                                     l629 1796  
                                                     l822 209A  
                                                     l902 2218  
                                                     l806 45F6  
                                                     l662 2AD6  
                                                     l646 39C8  
                                                     l487 09D2  
                                                     l911 0D7C  
                                                     l663 2A76  
                                                     l655 2A04  
                                                     l639 396E  
                                                     l488 0AB0  
                                                     l912 0D34  
                                                     l816 1EE0  
                                                     l808 4602  
                                                     l664 2A86  
                                                     l656 2A14  
                                                     l648 39DC  
                                                     l489 0AD2  
                                                     l921 0E90  
                                                     l905 0CD0  
                                                     l809 460C  
                                                     l665 2A94  
                                                     l657 2A24  
                                                     l922 0E92  
                                                     l914 0DD2  
                                                     l906 0C88  
                                                     l818 2000  
                                                     l658 2A34  
                                                     l923 0EC8  
                                                     l915 0D8A  
                                                     l819 2054  
                                                     l932 1960  
                                                     l908 0D26  
                                                     l757 436A  
                                                     l941 1A26  
                                                     l933 192C  
                                                     l917 0E18  
                                                     l909 0CDE  
                                                     l773 4B5A  
                                                     l781 31D8  
                                                     l942 19F2  
                                                     l759 4392  
                                                     l935 19A2  
                                                     l919 0E4E  
                                                     l791 2F10  
                                                     l936 196E  
                                                     l960 1CC2  
                                                     l776 4B66  
                                                     l961 1EC0  
                                                     l793 2F4C  
                                                     l938 19E4  
                                                     l962 1D14  
                                                     l939 19B0  
                                                     l971 1E92  
                                                     l963 1DBC  
                                                     l787 2E8C  
                                                     l964 1DC4  
                                                     l788 2F5A  
                                                     l981 26FE  
                                                     l789 2EDC  
                                                     l797 465A  
                                                     l982 25BA  
                                                     l798 463A  
                                                     l983 2712  
                                                     l959 1EA4  
                                                     l984 25D6  
                                                     l968 1E6E  
                                                     l969 1E86  
                                                     l986 2642  
                                                     l898 20E6  
                                                     l987 26E6  
                                                     l999 2FF6  
                                            __CFG_CPB$OFF 000000  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 4B48  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 4B24  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 35CE  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 0048  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 0044  
                      __end_of_enc424j600_readPHYRegister 2C34  
                              _enc424j600_readPHYRegister 2B12  
                          __end_of_enc424j600_setTXLength 49E8  
                                        ??_arp_background 014C  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1000 2FC4  
                                                    l1001 3022  
                                                    l1010 369A  
                                                    l1002 2FD4  
                                                    l1004 2FE6  
                                                    l1020 3278  
                                                    l1013 3736  
                                                    l1022 32D0  
                                                    l1110 2450  
                                                    l1111 2466  
                                                    l1112 2484  
                                                    l1113 2534  
                                                    l1122 4710  
                                                    l1130 495E  
                                                    l1106 25A0  
                                                    l1026 41BC  
                                                    l1107 2558  
                                                    l1124 473C  
                                                    l1108 243A  
                                                    l1134 4B9A  
                                                    l1160 42E0  
                                                    l1128 4944  
                                                    l1081 1BE6  
                                                    l1083 1C2C  
                                                    l1092 2292  
                                                    l1502 3BF6  
                                                    l1159 42CC  
                                                    l1503 3C04  
                                                    l1512 4172  
                                                    l1088 3552  
                                                    l1513 4180  
                                                    l1508 414A  
                                                    l1509 413E  
                                                    l1551 307A  
                                                    l1553 30D6  
                                                    l1554 3144  
                                                    l1570 4408  
                                                    l1547 4440  
                                                    l1580 46B6  
                                                    l1565 43DE  
                                                    l1566 43D6  
                                                    l1575 4694  
                                                    l1576 468C  
                                                    l1569 43FE  
                                                    l1498 3BC2  
                                                    l1579 46AC  
                                                    l1499 3BB6  
                                                    l8109 4AE0  
                                                    l8303 2F4C  
                                                    l8057 3E80  
                                                    l8313 490C  
                                                    l8401 1ED8  
                                                    l8067 407C  
                                                    l7531 2D04  
                                                    l8307 2F5A  
                                                    l8333 46C6  
                                                    l7551 4244  
                                                    l7535 2D4E  
                                                    l9223 26AA  
                                                    l9039 2BAC  
                                                    l7641 4836  
                                                    l8353 4ABA  
                                                    l8441 493C  
                                                    l7539 4C22  
                                                    l7661 47FE  
                                                    l8461 4708  
                                                    l8285 2EF0  
                                                    l8295 2F24  
                                                    l7907 0828  
                                                    l8715 0EC0  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l7837 4104  
                                                    l9285 2E24  
                                                    l7941 095A  
                                                    l8821 3692  
                                                    l7779 3CA8  
                                                    l8835 3736  
                                                    l7797 3CF0  
                                                    l8845 4B92  
                                                    l8773 3270  
                                                    l9629 41B4  
                                                    l8919 3552  
                                                    l8955 3EB2  
                                                    l8891 1C24  
                                                    l8879 1BDE  
                                                    STR_1 7FCF  
                                                    STR_2 7FFB  
                                                    STR_3 7F6E  
                                                    STR_4 7F8F  
                                                    STR_5 7F0D  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7FCF  
                                                    STR_7 7FFB  
                                                    STR_8 7FC1  
                                                    STR_9 7FBA  
               ethernetController_clearInterruptFlag@flag 0072  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    u8020 4244  
                                                    _RCIF 007CF5  
                                                    u8030 4254  
                                                    u8110 3852  
                                                    u8040 3800  
                                                    u9001 341E  
                                                    u8050 380E  
                                                    u8060 381C  
                                                    u8300 2C96  
                                                    u8220 482C  
                                                    u8070 382A  
                                                    u8230 2C44  
                                                    _RCIP 007CFD  
                                                    u8240 2C52  
                                                    u9120 4698  
                                                    u8401 2D38  
                                                    u8250 2C60  
                                                    u8260 2C6E  
                                                    u9300 46FE  
                                                    u8501 062E  
                                                    u9141 3F64  
                                                    u9150 438A  
                                                    u8430 3CD8  
                                                    u8190 4864  
                                                    u9230 2F36  
                                                    u8351 2CDC  
                                                    u9160 4396  
                                                    u9400 202C  
                                                    u9240 2F5A  
                                                    u8361 2CEE  
                                                    u8521 0650  
                                                    u9170 43B6  
                                                    u8450 3D12  
                                                    u9090 43E2  
                                                    u9420 209E  
                                                    u9340 317A  
                                                    u9157 4380  
                                                    u8701 0906  
                                                    u9501 1802  
                                                    u8470 4104  
                                                    u9270 4932  
                                                    u9350 31A8  
                                                    u8391 2D26  
                                                    u8551 067A  
                                                    u9511 1814  
                                                    u9191 2E66  
                                                    u8480 4114  
                                                    u9360 3206  
                                                    u9177 43AC  
                                                    u8641 084E  
                                                    u8561 06B0  
                                                    u9601 1914  
                                                    u9450 4962  
                                                    u8811 0AC8  
                                                    u8651 086C  
                                                    u9611 1936  
                                                    u9531 1860  
                                                    u9355 319E  
                                                    u8741 099E  
                                                    u9541 1878  
                                                    u9365 31FC  
                                                    u8831 0AE4  
                                                    u8751 09BC  
                                                    u9631 1978  
                                                    u9551 1892  
                                                    u9480 4740  
                                                    u9720 1486  
                                                    u8681 08AA  
                                                    u9561 18AC  
                                                    u9705 125A  
                                                    u8930 40AA  
                                                    u8770 09D6  
                                                    u8690 08B8  
                                                    u8850 3BC6  
                                                    u9810 0FB2  
                                                    u9651 19BA  
                                                    u9571 18C6  
                                                    u9491 17E6  
                                                    u9715 1308  
                                                    u8941 40B6  
                                                    u9581 18E0  
                                                    u9725 147C  
                                                    u9910 107C  
                                                    u9830 0FDC  
                                                    u9750 0F40  
                                                    u8791 0AA6  
                                                    u8951 3376  
                                                    u9671 19FC  
                                                    u9591 18FA  
                                                    u8880 414E  
                                                    u9808 0F8E  
                                                    u9930 10A2  
                                                    u9850 1002  
                                                    u9770 0F64  
                                                    u9691 1A38  
                                                    u9908 1058  
                                                    u9828 0FB6  
                                                    u8981 33D0  
                                                    u9950 10CA  
                                                    u9870 102A  
                                                    u9790 0F8A  
                                                    u8991 33EA  
                                                    u9928 1080  
                                                    u9848 0FE0  
                                                    u9768 0F44  
                                                    u9970 10F4  
                                                    u9890 1054  
                                                    u9948 10A6  
                                                    u9868 1006  
                                                    u9788 0F68  
                                                    u9990 111A  
                                                    u9968 10CE  
                                                    u9888 102E  
                                                    u9988 10F8  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 4B8C  
                                                    _main 1510  
                                                    _rand 4312  
                                 printEthernetState@state 009A  
                                                    _ltoa 4412  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0050  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 3F6E  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 00DA  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 40C0  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 4050  
                                            arp_probe@err 0149  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4B8C  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 0035  
                                 _checkForOverlapSwitched 37F0  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 4050  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 3FE0  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 4936  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 4CE8  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4CE2  
                                           arp_send@field 00F3  
                                                   l10201 257E  
                                                   l10203 2588  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0042  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7E69  
                                                   ?_ltoa 007A  
                                                   STR_11 7FCF  
                                                   STR_20 7CDB  
                                                   STR_12 7FF4  
                                                   STR_21 7FFD  
                                                   STR_13 7FF7  
                                                   STR_14 7FE0  
                                                   STR_30 7F56  
                                                   STR_22 7B66  
                                                   STR_15 7FF1  
                                                   STR_31 7E3E  
                                                   STR_23 7B99  
                                                   STR_24 7B66  
                                                   STR_32 7FDC  
                                                   STR_16 7FCF  
                                                   STR_40 7FAB  
                                                   STR_33 7B66  
                                                   STR_17 7F08  
                                                   STR_41 7EEC  
                                                   STR_25 7E0F  
                                                   STR_18 7C1E  
                                                   STR_50 7F99  
                                                   STR_26 7F62  
                                                   STR_34 7F49  
                                                   STR_42 7D81  
                                                   STR_27 7E67  
                                                   STR_19 7FFA  
                                                   STR_51 7FDB  
                                                   STR_43 7EB6  
                                                   STR_35 7EA3  
                                                   STR_60 7FCF  
                                                   STR_52 7FD1  
                                                   STR_28 7FA2  
                                                   STR_44 7F3B  
                                                   STR_36 7E90  
                                                   STR_29 7FDC  
                                                   STR_61 7E66  
                                                   STR_53 7FED  
                                                   STR_45 7F2C  
                                                   STR_37 7E55  
                                                   STR_62 7FCC  
                                                   STR_54 7EC9  
                                                   STR_38 7DBD  
                                                   STR_70 7CBA  
                                                   STR_46 7C95  
                                                   STR_63 7E66  
                                                   STR_55 7FD6  
                                                   STR_71 7DF7  
                                                   STR_39 7DDA  
                                                   STR_47 7B2F  
                                                   STR_80 7FF7  
                                                   STR_64 7FFB  
                                                   STR_56 7FE5  
                                                   STR_72 7D23  
                                                   STR_48 7D01  
                                                   STR_81 7FF7  
                                                   STR_57 7FE9  
                                                   STR_65 7F85  
                                                   STR_49 7D9F  
                                                   STR_73 7D44  
                                                   STR_82 7FF7  
                                                   STR_66 7F1D  
                                                   STR_58 7EDB  
                                                   STR_90 7BCA  
                                                   STR_83 7E66  
                                                   STR_75 7F7A  
                                                   STR_67 7EFD  
                                                   STR_91 7D63  
                                                   STR_59 7C48  
                                                   STR_68 7E66  
                                                   STR_84 7FFB  
                                                   STR_76 7FB3  
                                                   STR_92 7E27  
                                                   STR_77 7FFB  
                                                   STR_69 7FFB  
                                                   STR_85 7E7D  
                                                   STR_93 7C6F  
                                                   STR_94 7FDB  
                                                   STR_78 7FCF  
                                                   STR_86 7BF7  
                                                   STR_87 7FDB  
                                                   STR_79 7FC7  
                                                   STR_95 7AF4  
                                                   STR_88 7CDE  
                                                   STR_96 7C21  
                                                   STR_89 7AB4  
                                                   u10010 1142  
                                         __end_of___lldiv 3C16  
                                                   u10030 116C  
                                                   u10111 11FA  
                                                   u11000 28BC  
                                                   u10008 111E  
                                                   u10050 1194  
                                                   u11100 2946  
                                                   u11020 28D6  
                                                   u10108 11E2  
                                                   u10028 1146  
                                                   u10230 0E8C  
                                                   u10070 11B8  
                                                   u11040 28F2  
                                                   u10400 32D4  
                                                   u10048 1170  
                                                   u10321 2764  
                                                   u11210 4C34  
                                                   u11130 2978  
                                                   u11018 28C0  
                                                   u10090 11DE  
                                                   u10331 2776  
                                                   u10411 3312  
                                                   u11124 295C  
                                                   u11060 2910  
                                                   u10068 1198  
                                                   u10421 3748  
                                                   u11125 2956  
                                                   u10341 27DE  
                                                   u11301 02A4  
                                                   u11150 2996  
                                                   u11118 294A  
                                                   u11038 28DA  
                                                   u10431 37AE  
                                                   u10351 2800  
                                                   u11208 29CE  
                                                   u11080 292A  
                                                   u10280 0EC0  
                                                   u10088 11BC  
                                                   u10600 3ED4  
                                                   u10441 37D0  
                                                   u10361 2812  
                                                   u11170 29B2  
                                                   u11058 28F6  
                                                   u10530 1C20  
                                                   u10451 37E2  
                                                   u10291 0EDE  
                                                   u10371 2836  
                                                   u10611 3EF0  
                                                   u11148 297C  
                                                   u11341 0422  
                                                   u11190 29CA  
                                                   u11078 2914  
                                                   u10550 1C66  
                                                   u10711 213E  
                                                   u11351 045C  
                                                   u11431 41C6  
                                                   u11168 299A  
                                         __end_of___llmod 4192  
                                                   u10721 219C  
                                                   u10561 1C86  
                                                   u11281 0178  
                                                   u11450 4B32  
                                                   u10490 373A  
                                                   u10634 3B34  
                                                   u11098 292E  
                                                   u10635 3B30  
                                                   u10571 3514  
                                                   u10644 3B76  
                                                   u11188 29B6  
                                                   u10660 2BAC  
                                                   u10645 3B72  
                                                   u10751 2222  
                                                   u10840 1E2E  
                                                   u10680 20D8  
                                                   u10761 2238  
                                                   u10770 2284  
                                                   u10691 20F8  
                                                   u10781 22A6  
                                                   u11581 39E6  
                                                   u10870 2638  
                                                   u11807 2E0E  
                                                   u10791 22E0  
                                                   u11681 1670  
                                                   u10890 26AA  
                                                   u11691 1768  
                                                   u10980 28A4  
                                                   u11767 1562  
                                                   u11777 16CC  
                                                   u11787 2B74  
                                                   u11797 2DD2  
                                                   u10998 28A8  
                                         __end_of___lwdiv 4412  
                              __end_of_printEthernetState 39F0  
                                         __end_of___lwmod 46C0  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l721 3608  
        ethernetController_streamToTransmitBuffer@pointer 003E  
                                                   i2l731 3D72  
                                                   i2l732 3D76  
                                                   i2l724 3624  
                                                   i2l733 3D7A  
                                                   i2l719 3600  
                                                   i2l728 3D7E  
                                                   i2l729 3D6E  
                                                   i2l676 38D4  
                                                   i2l677 38E4  
                                                   i2l678 3928  
                                                   i2l686 007A  
                                                   i2l687 0098  
                                     _arp_handleNewPacket 20BC  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 489E  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 4868  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 4702  
                                         _ipv4_background 2416  
                                        __end_of_UARTInit 4C7E  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 0049  
                               __end_of_ipv4_setToAllZero 4BAA  
                                                   _srand 4C7E  
                                                   _stack 0300  
                               arp_background@errAnnounce 0152  
                                                   _ultoa 306A  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 3EFA  
                                          __pbitbssCOMRAM 0278  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1187 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0051  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 43BE  
                                          __CFG_PBADEN$ON 000000  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 1ECE  
                                         __initialization 3C16  
                       ethernetController_softReset@F5983 004D  
                       ethernetController_softReset@F5985 0040  
                             memory_txFrameRequest@length 0084  
                                            __end_of_main 17CE  
                                  __end_of_ipv4_isAllZero 4966  
                                            __end_of_rand 4368  
                                            __end_of_ltoa 4466  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 027F  
                                ?_ipv4_setIPSourceAddress 009A  
                                    _ipv4_handleNewPacket 226A  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1183 0093  
                       __end_of_enc424j600_getPacketCount 4BFA  
                                          arp_send@i_3067 00CE  
                                          arp_send@i_3068 00CF  
                                          arp_send@i_3069 00D0  
                                                  ??_main 0189  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                         handleStackBackgroundTasks@stack 0186  
                                        ??_arp_gratuitous 0134  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0200  
                                                  i2l1570 44AE  
                                                  i2l1565 4484  
                                                  i2l1566 447C  
                                                  i2l1569 44A4  
                                                  i2l7063 361C  
                               ??_ethernetController_init 007D  
                               ?_ipv4_checkHeaderChecksum 009A  
       __end_of_ethernetController_streamToTransmitBuffer 3E86  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3E0E  
                                         _fSrcAddrChanged 0278  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 41F8  
                                        __end_of_arp_send 1A46  
                                                  ___lmul 42BA  
                                        __end_of_ipv4_cmp 4744  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4A3C  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 3506  
                              _handleStackBackgroundTasks 342C  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 0047  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0046  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                                    __size_of_hexToString 00EE  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 002D  
                                                  clear_0 3C5C  
                                                  clear_1 3C68  
                                                  clear_2 3C74  
                                                  clear_3 3C82  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                                 __end_of_ipv4_background 25AA  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 4556  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 4508  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0379  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 48D4  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 489E  
                                            __pdataCOMRAM 0049  
                                      _enc424j600_initSPI 4BAA  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 40C0  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 44B8  
                                            __mediumconst 7AA8  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 4CA8  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4C9A  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 001E  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 009C  
                                          arp_probe@index 013C  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0031  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 01E5  
                                 ipAdressToString@address 02E3  
      __end_of_ethernetController_updateNextPacketPointer 3E0E  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3D94  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 00EE  
                       sevenSegmentUpdate@digitsToDisplay 0039  
                                              __accesstop 0060  
                                 __end_of__initialization 3C88  
                                       _printErrorMessage 29E4  
                                __size_of_arp_sendRequest 00B2  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                   _arp_parseFromRXBuffer 0AEE  
                          __end_of_ethernet_rxGetNewFrame 0612  
                                        _sevenSegmentInit 4BC6  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
              ethernetController_pollInterruptFlags@flags 007E  
                             arp_parseFromRXBuffer@i_2992 0098  
                             arp_parseFromRXBuffer@i_2993 0099  
                             arp_parseFromRXBuffer@i_2994 009A  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 4966  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 3FE0  
                                           __end_of_srand 4C8C  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 3168  
                             arp_parseFromRXBuffer@offset 009B  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 3344  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 38A2  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 38A2  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 4C26  
                           __end_of_memory_txFrameRequest 0AEE  
                                      __size_of_hexToChar 0022  
                                 arp_background@fAnnounce 0279  
                                      __size_of_arp_probe 023E  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0004  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 2B12  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 018B  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                             __end_of_memory_txFrameClear 4B24  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 4638  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 0001  
                                        _entireMemoryFull 47F8  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 20BC  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 394E  
                               __end_of_etherTypeToString 467C  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 42BA  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 425C  
                          sevenSegmentUpdate@digitPointer 0045  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 4C5C  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 4CDC  
                              _enc424j600_enableReception 4CD4  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 0072  
               __end_of_enc424j600_enableAutoMACInsertion 4AB4  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 4A8C  
                                       __end_of_hexToChar 4B6A  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 1ECE  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 4936  
                                         __size_of___lmul 0058  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 3B92  
                                         __size_of___wmul 0028  
                                                 ___llmod 412A  
                                                 ___lwdiv 43BE  
                                                 ___lwmod 467C  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 4CEC  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3C16  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                                                 __ptext0 1510  
                                                 __ptext1 4CB6  
                                                 __ptext2 4CE8  
                                                 __ptext3 4192  
                                                 __ptext4 4C7E  
                                                 __ptext5 4BC6  
                                                 __ptext6 394E  
                                                 __ptext7 29E4  
                                                 __ptext8 44B8  
                                                 __ptext9 342C  
                                                 _mac_cmp 46C0  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0188  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 4A3C  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 4A12  
                   __end_of_ethernetController_dropPacket 4780  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 4744  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 29E4  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 288C  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0050  
                                              ??_arp_init 007C  
                                                 main@err 037F  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 288C  
                                    end_of_initialization 3C88  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4B00  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 00FC  
                                           __Lmediumconst 7AA8  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0106  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 006A  
                             ?_handleStackBackgroundTasks 0186  
                                       _arp_checkForEntry 368C  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 4A8C  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4A64  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 1A46  
                             ?_enc424j600_writeSingleByte 0001  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4BE0  
                                     _enc424j600_writeSPI 41F8  
                                              _stack_init 4CB6  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 4CA8  
         __end_of_ethernetController_getNextPacketPointer 4C9A  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4C8C  
                                              arp_init@ip 0082  
                             __end_of_arp_handleNewPacket 226A  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 342C  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 4466  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 1510  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 1204  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                                       intToString@number 02BB  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 01E6  
                               __end_of_arp_checkForEntry 373E  
                                           ??_hexToString 0065  
                              arp_setNewEntry@oldestIndex 007A  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 4312  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4A64  
                                           __pidataCOMRAM 4CDC  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 4638  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
             __end_of_ethernetController_updateLinkStatus 3B08  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3A7E  
                                     start_initialization 3C16  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 3506  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 2F64  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 4830  
   __end_of_ethernetController_writeDestinationMACAddress 3D16  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3C96  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 0176  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01E7  
                     __end_of_enc424j600_setRXTailPointer 4A12  
                             _enc424j600_setRXTailPointer 49E8  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 018B  
                                                ??___wmul 0064  
                             arp_background@ipPreliminary 014E  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 02C5  
                                     arp_gratuitous@state 01E3  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                            ??_enc424j600_enableReception 006B  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3256  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 4C5C  
                                 _ipv4_setIPSourceAddress 44B8  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK3 0379  
                                             ?_updateTime 0001  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 0612  
           __end_of_ethernetController_newPacketAvailable 4C38  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4C26  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 3256  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 373E  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0066  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 2F64  
                     __size_of_enc424j600_writeSingleByte 0018  
                                           ??_parseNumber 000B  
                                               _main$2369 037D  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 02D7  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7AA8  
                                               _getMillis 4C4A  
                                               __ptext100 4BE0  
                                               __ptext101 489E  
                                               __ptext110 4466  
                                               __ptext102 41F8  
                                               __ptext111 38A2  
                                               __ptext103 40C0  
                                               __ptext104 4BAA  
                                               __ptext105 4C6E  
                                               __ptext107 4CA8  
                                               __ptext108 35CE  
                                               __ptext109 3D16  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01AC  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003C  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4B48  
                                               _arp_table 020F  
                                               _arp_probe 1C90  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 4CE8  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3583 008D  
                                      ipAdressToString@ip 0073  
                                     __end_of_intToString 4906  
                                             _macToString 2E5C  
                                       ??_UARTTransmitInt 009E  
                                        ___lwdiv@quotient 0065  
                                __size_of_ipv4_background 0194  
                                       _entireMemoryEmpty 4830  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 000E  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                                arp_setNewEntry@timestamp 006E  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 01E4  
                                  __end_of_arp_background 306A  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 1C90  
                                  _enc424j600_setTXLength 49BE  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u763_40 38FC  
                                                i2u764_40 38FE  
                                                i2u772_40 364A  
                                                i2u693_40 4488  
                                                i2u773_44 365A  
                                                i2u773_45 3656  
                                                i2u768_44 35DE  
                                                i2u768_45 35DA  
                                                i2u794_40 0060  
                                                i2u794_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 007B  
                                     __size_of_updateTime 000E  
                                             _hexToString 3168  
                                      _mac_setToBroadcast 4ADA  
                              __end_of_sevenSegmentUpdate 368C  
                                              ?_getMillis 0060  
                                                _UARTInit 4C6E  
                          ??_ipv4_calculateHeaderChecksum 0062  
                    __end_of_enc424j600_setTXStartAddress 49BE  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 4994  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                     __end_of_parseNumber 3D94  
                __end_of_enc424j600_setERXDATAReadPointer 47F8  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 47BC  
                                              ?_arp_probe 00FC  
                                               arp_init@i 0086  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 009E  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 01DB  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 0382  
                                               main@ipSrc 0386  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 3344  
                                 __end_of_arp_sendRequest 37F0  
                               __end_of_entireMemoryEmpty 4868  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 3B92  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 3B08  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0141  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3C2A  
                                               copy_data1 3C4A  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 02B1  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 25AA  
                                         ?_arp_background 0001  
                __end_of_ethernetController_checkDeviceId 45A4  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 4556  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 45F0  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 45A4  
                                      __CFG_BOREN$SBORDIS 000000  
                      __end_of_enc424j600_writeSingleByte 4C12  
                              _enc424j600_writeSingleByte 4BFA  
                                  macToString@secondDigit 0094  
                                  __size_of_arp_sendReply 016C  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 48D4  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 3E86  
                 __end_of_ethernetController_setLEDConfig 3A7E  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 39F0  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 394E  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 01F0  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 01D7  
                                                __ptext10 2416  
                                                __ptext11 00EC  
                                                __ptext20 3E86  
                                                __ptext12 226A  
                                                __ptext21 0EE8  
                                                __ptext13 1A46  
                                                __ptext30 2E5C  
                                                __ptext22 3FE0  
                                                __ptext14 3506  
                                                __ptext31 1ECE  
                                                __ptext23 4638  
                                                __ptext15 1204  
                                                __ptext40 4412  
                                                __ptext32 43BE  
                                                __ptext24 20BC  
                                                __ptext16 3168  
                                                __ptext41 306A  
                                                __ptext33 0AEE  
                                                __ptext25 4744  
                                                __ptext17 4B48  
                                                __ptext50 4C9A  
                                                __ptext42 412A  
                                                __ptext34 4906  
                                                __ptext26 4C8C  
                                                __ptext18 45F0  
                                                __ptext51 3B08  
                                                __ptext43 3B92  
                                                __ptext35 46C0  
                                                __ptext27 4CC0  
                                                __ptext19 3D94  
                                                __ptext60 4702  
                                                __ptext52 2F64  
                                                __ptext44 3A7E  
                                                __ptext36 4936  
                                                __ptext28 3256  
                                                __ptext61 467C  
                                                __ptext53 4C38  
                                                __ptext45 2B12  
                                                __ptext37 425C  
                                                __ptext29 2720  
                                                __ptext70 3344  
                                                __ptext62 25AA  
                                                __ptext54 4C12  
                                                __ptext46 39F0  
                                                __ptext38 4B6A  
                                                __ptext71 0612  
                                                __ptext63 4C4A  
                                                __ptext55 1C90  
                                                __ptext47 288C  
                                                __ptext39 48D4  
                                                __ptext80 4780  
                                                __ptext72 47F8  
                                                __ptext64 373E  
                                                __ptext56 4312  
                                                __ptext48 45A4  
                                                __ptext81 4A64  
                                                __ptext73 4830  
                                                __ptext65 4AB4  
                                                __ptext57 42BA  
                                                __ptext49 4C26  
                                                __ptext90 4556  
                                                __ptext82 4B00  
                                                __ptext74 2C34  
                                                __ptext66 4C5C  
                                                __ptext58 4B8C  
                                                __ptext91 49E8  
                                                __ptext83 4994  
                                                __ptext75 37F0  
                                                __ptext67 3EFA  
                                                __ptext59 368C  
                                                __ptext92 4A12  
                                                __ptext84 49BE  
                                                __ptext76 4A3C  
                                                __ptext68 17CE  
                                                __ptext93 4CCA  
                                                __ptext85 4050  
                                                __ptext77 4508  
                                                __ptext69 4ADA  
                                                __ptext94 4CD4  
                                                __ptext86 47BC  
                                                __ptext78 3C96  
                                                __ptext95 4BFA  
                                                __ptext87 4368  
                                                __ptext79 3E0E  
                                                __ptext96 4A8C  
                                                __ptext88 3F6E  
                                                __ptext97 4868  
                                                __ptext89 2D52  
                                                __ptext98 4B24  
                                                __ptext99 4CE2  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 4192  
                                                _arp_send 17CE  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 0526  
                                          _mac_setAllZero 4AB4  
                                  __end_of_arp_gratuitous 2720  
                                                _ipv4_cmp 4702  
                                                _ipSource 01DF  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                                      _ipProtocolToString 45F0  
                         __end_of_ipv4_getIPSourceAddress 4C6E  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 4508  
              __end_of_ipv4_getPreliminaryIPSourceAddress 4C4A  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 4C38  
                                           __size_of_main 02BE  
                                           __size_of_rand 0056  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 4BE0  
                                       ??_ipv4_background 009A  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01AE  
                 __end_of_enc424j600_getNextPacketPointer 4CCA  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 4CC0  
                 __end_of_enc424j600_setNextPacketPointer 4CD4  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 4CCA  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 2C34  
                                     ?_ipProtocolToString 0060  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 3D16  
                                             ??_getMillis 0064  
                                                int$flags 0050  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 4906  
                                     _ipv4_SrcAddrChanged 4C12  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0134  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 009A  
                               ethernet_rxGetNewFrame@err 0183  
                                        _UARTTransmitText 4368  
                                             ??_ipv4_init 0060  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 0087  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                    ??_ipProtocolToString 0062  
                                        ?_arp_setNewEntry 0064  
                                       arp_background@err 01ED  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 013C  
                                  __end_of_mac_setAllZero 4ADA  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 4B00  
                             __end_of_enc424j600_writeSPI 425C  
                                           _arp_sendReply 2720  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 00FC  
                           __end_of_arp_parseFromRXBuffer 0EE8  
                                                ltoa@base 0080  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_646 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                        macToString@F5943 02C5  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 0076  
                                              _OSCCONbits 000FD3  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 4CC0  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 4BC6  
                              __end_of_enc424j600_readSPI 412A  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 013D  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 00EC  
                                      __end_of_updateTime 4CB6  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 0145  
                                       arp_probe@ipTarget 00FC  
                                         _UARTTransmitInt 4B6A  
                                      arp_setNewEntry@mac 0064  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_enc424j600_updateReceiveStatusVector 1204  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 0EE8  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 01D3  
                __end_of_enc424j600_setGPDATAWritePointer 47BC  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 4780  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 2E5C  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 2D52  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 2416  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 2D52  
           __end_ofethernetController_getDeviceName@F5995 7AB4  
                   ethernetController_getDeviceName@F5995 7AA9  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                                 _sevenSegmentUpdate$2453 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
