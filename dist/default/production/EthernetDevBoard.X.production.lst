

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Mar 01 23:21:12 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1,group=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1,group=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   126                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   127                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   128  0000                     
   129                           ; Version 1.45
   130                           ; Generated 16/11/2017 GMT
   131                           ; 
   132                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   133                           ; All rights reserved.
   134                           ; 
   135                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   136                           ; 
   137                           ; Redistribution and use in source and binary forms, with or without modification, are
   138                           ; permitted provided that the following conditions are met:
   139                           ; 
   140                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   141                           ;        conditions and the following disclaimer.
   142                           ; 
   143                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   144                           ;        of conditions and the following disclaimer in the documentation and/or other
   145                           ;        materials provided with the distribution.
   146                           ; 
   147                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   148                           ;        software without specific prior written permission.
   149                           ; 
   150                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   151                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   152                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   153                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   154                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   155                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   156                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   157                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   158                           ; 
   159                           ; 
   160                           ; Code-generator required, PIC18F25K50 Definitions
   161                           ; 
   162                           ; SFR Addresses
   163  0000                     
   164                           	psect	idataCOMRAM
   165  004D00                     __pidataCOMRAM:
   166                           	opt stack 0
   167                           
   168                           ;initializer for ethernetController_softReset@F5837
   169  004D00  12                 	db	18
   170  004D01  34                 	db	52
   171                           
   172                           	psect	idataBANK1
   173  004BD4                     __pidataBANK1:
   174                           	opt stack 0
   175                           
   176                           ;initializer for _sevenSegCharacters
   177  004BD4  3F                 	db	63
   178  004BD5  06                 	db	6
   179  004BD6  5B                 	db	91
   180  004BD7  4F                 	db	79
   181  004BD8  66                 	db	102
   182  004BD9  6D                 	db	109
   183  004BDA  7D                 	db	125
   184  004BDB  07                 	db	7
   185  004BDC  7F                 	db	127
   186  004BDD  6F                 	db	111
   187  004BDE  00                 	db	0
   188  004BDF  40                 	db	64
   189                           
   190                           ;initializer for ipAdressToString@address
   191  004BE0  3F                 	db	63
   192  004BE1  3F                 	db	63
   193  004BE2  3F                 	db	63
   194  004BE3  2E                 	db	46
   195  004BE4  3F                 	db	63
   196  004BE5  3F                 	db	63
   197  004BE6  3F                 	db	63
   198  004BE7  2E                 	db	46
   199  004BE8  3F                 	db	63
   200  004BE9  3F                 	db	63
   201  004BEA  3F                 	db	63
   202  004BEB  2E                 	db	46
   203  004BEC  3F                 	db	63
   204  004BED  3F                 	db	63
   205  004BEE  3F                 	db	63
   206  004BEF  00                 	db	0
   207                           
   208                           	psect	idataBANK2
   209  004C58                     __pidataBANK2:
   210                           	opt stack 0
   211                           
   212                           ;initializer for macToString@F5802
   213  004C58  3F                 	db	63
   214  004C59  3F                 	db	63
   215  004C5A  3A                 	db	58
   216  004C5B  3F                 	db	63
   217  004C5C  3F                 	db	63
   218  004C5D  3A                 	db	58
   219  004C5E  3F                 	db	63
   220  004C5F  3F                 	db	63
   221  004C60  3A                 	db	58
   222  004C61  3F                 	db	63
   223  004C62  3F                 	db	63
   224  004C63  3A                 	db	58
   225  004C64  3F                 	db	63
   226  004C65  3F                 	db	63
   227  004C66  3A                 	db	58
   228  004C67  3F                 	db	63
   229  004C68  3F                 	db	63
   230  004C69  00                 	db	0
   231                           
   232                           	psect	mediumconst
   233  007C10                     __pmediumconst:
   234                           	opt stack 0
   235  007C10  00                 	db	0
   236  007C11                     ethernetController_getDeviceName@F5849:
   237                           	opt stack 0
   238  007C11  45                 	db	69
   239  007C12  4E                 	db	78
   240  007C13  43                 	db	67
   241  007C14  34                 	db	52
   242  007C15  32                 	db	50
   243  007C16  34                 	db	52
   244  007C17  4A                 	db	74
   245  007C18  36                 	db	54
   246  007C19  30                 	db	48
   247  007C1A  30                 	db	48
   248  007C1B  00                 	db	0
   249  007C1C                     __end_ofethernetController_getDeviceName@F5849:
   250                           	opt stack 0
   251  0000                     _ANSELC	set	3933
   252  0000                     _ANSELA	set	3931
   253  0000                     _ANSELB	set	3932
   254  0000                     _ANSELBbits	set	3932
   255  0000                     _TXREG1	set	4013
   256  0000                     _SPBRG	set	4015
   257  0000                     _RCSTA1bits	set	4011
   258  0000                     _TXSTA1bits	set	4012
   259  0000                     _PORTA	set	3968
   260  0000                     _TRISA	set	3986
   261  0000                     _TRISC	set	3988
   262  0000                     _PORTC	set	3970
   263  0000                     _PORTB	set	3969
   264  0000                     _TRISB	set	3987
   265  0000                     _T0CONbits	set	4053
   266  0000                     _INTCON3bits	set	4080
   267  0000                     _INTCONbits	set	4082
   268  0000                     _OSCCON2bits	set	4050
   269  0000                     _OSCCONbits	set	4051
   270  0000                     _SSP1BUF	set	4041
   271  0000                     _TRISBbits	set	3987
   272  0000                     _SSP1STATbits	set	4039
   273  0000                     _SSP1CON1bits	set	4038
   274  0000                     _PORTBbits	set	3969
   275  0000                     _TRMT	set	32097
   276  0000                     _RCIF	set	31989
   277  0000                     _RCIE	set	31981
   278  0000                     _RCIP	set	31997
   279  007C1C                     STR_51:
   280  007C1C  45                 	db	69	;'E'
   281  007C1D  74                 	db	116	;'t'
   282  007C1E  68                 	db	104	;'h'
   283  007C1F  65                 	db	101	;'e'
   284  007C20  72                 	db	114	;'r'
   285  007C21  6E                 	db	110	;'n'
   286  007C22  65                 	db	101	;'e'
   287  007C23  74                 	db	116	;'t'
   288  007C24  20                 	db	32
   289  007C25  63                 	db	99	;'c'
   290  007C26  6F                 	db	111	;'o'
   291  007C27  6E                 	db	110	;'n'
   292  007C28  74                 	db	116	;'t'
   293  007C29  72                 	db	114	;'r'
   294  007C2A  6F                 	db	111	;'o'
   295  007C2B  6C                 	db	108	;'l'
   296  007C2C  6C                 	db	108	;'l'
   297  007C2D  65                 	db	101	;'e'
   298  007C2E  72                 	db	114	;'r'
   299  007C2F  20                 	db	32
   300  007C30  68                 	db	104	;'h'
   301  007C31  61                 	db	97	;'a'
   302  007C32  73                 	db	115	;'s'
   303  007C33  20                 	db	32
   304  007C34  72                 	db	114	;'r'
   305  007C35  65                 	db	101	;'e'
   306  007C36  74                 	db	116	;'t'
   307  007C37  75                 	db	117	;'u'
   308  007C38  72                 	db	114	;'r'
   309  007C39  6E                 	db	110	;'n'
   310  007C3A  65                 	db	101	;'e'
   311  007C3B  64                 	db	100	;'d'
   312  007C3C  20                 	db	32
   313  007C3D  61                 	db	97	;'a'
   314  007C3E  6E                 	db	110	;'n'
   315  007C3F  20                 	db	32
   316  007C40  75                 	db	117	;'u'
   317  007C41  6E                 	db	110	;'n'
   318  007C42  6B                 	db	107	;'k'
   319  007C43  6E                 	db	110	;'n'
   320  007C44  6F                 	db	111	;'o'
   321  007C45  77                 	db	119	;'w'
   322  007C46  6E                 	db	110	;'n'
   323  007C47  20                 	db	32
   324  007C48  64                 	db	100	;'d'
   325  007C49  65                 	db	101	;'e'
   326  007C4A  76                 	db	118	;'v'
   327  007C4B  69                 	db	105	;'i'
   328  007C4C  63                 	db	99	;'c'
   329  007C4D  65                 	db	101	;'e'
   330  007C4E  20                 	db	32
   331  007C4F  49                 	db	73	;'I'
   332  007C50  44                 	db	68	;'D'
   333  007C51  2E                 	db	46
   334  007C52  00                 	db	0
   335  007C53                     STR_37:
   336  007C53  2D                 	db	45
   337  007C54  2D                 	db	45
   338  007C55  2D                 	db	45
   339  007C56  2D                 	db	45
   340  007C57  2D                 	db	45
   341  007C58  2D                 	db	45
   342  007C59  2D                 	db	45
   343  007C5A  2D                 	db	45
   344  007C5B  2D                 	db	45
   345  007C5C  2D                 	db	45
   346  007C5D  2D                 	db	45
   347  007C5E  2D                 	db	45
   348  007C5F  2D                 	db	45
   349  007C60  2D                 	db	45
   350  007C61  2D                 	db	45
   351  007C62  2D                 	db	45
   352  007C63  2D                 	db	45
   353  007C64  2D                 	db	45
   354  007C65  2D                 	db	45
   355  007C66  2D                 	db	45
   356  007C67  2D                 	db	45
   357  007C68  2D                 	db	45
   358  007C69  2D                 	db	45
   359  007C6A  2D                 	db	45
   360  007C6B  2D                 	db	45
   361  007C6C  2D                 	db	45
   362  007C6D  2D                 	db	45
   363  007C6E  2D                 	db	45
   364  007C6F  2D                 	db	45
   365  007C70  2D                 	db	45
   366  007C71  2D                 	db	45
   367  007C72  2D                 	db	45
   368  007C73  2D                 	db	45
   369  007C74  2D                 	db	45
   370  007C75  2D                 	db	45
   371  007C76  2D                 	db	45
   372  007C77  2D                 	db	45
   373  007C78  2D                 	db	45
   374  007C79  2D                 	db	45
   375  007C7A  2D                 	db	45
   376  007C7B  2D                 	db	45
   377  007C7C  2D                 	db	45
   378  007C7D  2D                 	db	45
   379  007C7E  2D                 	db	45
   380  007C7F  2D                 	db	45
   381  007C80  2D                 	db	45
   382  007C81  2D                 	db	45
   383  007C82  2D                 	db	45
   384  007C83  0A                 	db	10
   385  007C84  0D                 	db	13
   386  007C85  00                 	db	0
   387  007C86                     STR_63:
   388  007C86  5B                 	db	91	;'['
   389  007C87  49                 	db	73	;'I'
   390  007C88  6E                 	db	110	;'n'
   391  007C89  76                 	db	118	;'v'
   392  007C8A  61                 	db	97	;'a'
   393  007C8B  6C                 	db	108	;'l'
   394  007C8C  69                 	db	105	;'i'
   395  007C8D  64                 	db	100	;'d'
   396  007C8E  20                 	db	32
   397  007C8F  41                 	db	65	;'A'
   398  007C90  52                 	db	82	;'R'
   399  007C91  50                 	db	80	;'P'
   400  007C92  20                 	db	32
   401  007C93  4D                 	db	77	;'M'
   402  007C94  65                 	db	101	;'e'
   403  007C95  73                 	db	115	;'s'
   404  007C96  73                 	db	115	;'s'
   405  007C97  61                 	db	97	;'a'
   406  007C98  67                 	db	103	;'g'
   407  007C99  65                 	db	101	;'e'
   408  007C9A  20                 	db	32
   409  007C9B  77                 	db	119	;'w'
   410  007C9C  61                 	db	97	;'a'
   411  007C9D  73                 	db	115	;'s'
   412  007C9E  20                 	db	32
   413  007C9F  64                 	db	100	;'d'
   414  007CA0  69                 	db	105	;'i'
   415  007CA1  73                 	db	115	;'s'
   416  007CA2  63                 	db	99	;'c'
   417  007CA3  61                 	db	97	;'a'
   418  007CA4  72                 	db	114	;'r'
   419  007CA5  64                 	db	100	;'d'
   420  007CA6  65                 	db	101	;'e'
   421  007CA7  64                 	db	100	;'d'
   422  007CA8  2E                 	db	46
   423  007CA9  5D                 	db	93	;']'
   424  007CAA  0D                 	db	13
   425  007CAB  0A                 	db	10
   426  007CAC  00                 	db	0
   427  007CAD                     STR_30:
   428  007CAD  49                 	db	73	;'I'
   429  007CAE  6E                 	db	110	;'n'
   430  007CAF  69                 	db	105	;'i'
   431  007CB0  74                 	db	116	;'t'
   432  007CB1  69                 	db	105	;'i'
   433  007CB2  61                 	db	97	;'a'
   434  007CB3  6C                 	db	108	;'l'
   435  007CB4  69                 	db	105	;'i'
   436  007CB5  73                 	db	115	;'s'
   437  007CB6  69                 	db	105	;'i'
   438  007CB7  6E                 	db	110	;'n'
   439  007CB8  67                 	db	103	;'g'
   440  007CB9  20                 	db	32
   441  007CBA  45                 	db	69	;'E'
   442  007CBB  74                 	db	116	;'t'
   443  007CBC  68                 	db	104	;'h'
   444  007CBD  65                 	db	101	;'e'
   445  007CBE  72                 	db	114	;'r'
   446  007CBF  6E                 	db	110	;'n'
   447  007CC0  65                 	db	101	;'e'
   448  007CC1  74                 	db	116	;'t'
   449  007CC2  20                 	db	32
   450  007CC3  43                 	db	67	;'C'
   451  007CC4  6F                 	db	111	;'o'
   452  007CC5  6E                 	db	110	;'n'
   453  007CC6  74                 	db	116	;'t'
   454  007CC7  72                 	db	114	;'r'
   455  007CC8  6F                 	db	111	;'o'
   456  007CC9  6C                 	db	108	;'l'
   457  007CCA  6C                 	db	108	;'l'
   458  007CCB  65                 	db	101	;'e'
   459  007CCC  72                 	db	114	;'r'
   460  007CCD  2E                 	db	46
   461  007CCE  2E                 	db	46
   462  007CCF  2E                 	db	46
   463  007CD0  0A                 	db	10
   464  007CD1  0D                 	db	13
   465  007CD2  00                 	db	0
   466  007CD3                     STR_50:
   467  007CD3  45                 	db	69	;'E'
   468  007CD4  74                 	db	116	;'t'
   469  007CD5  68                 	db	104	;'h'
   470  007CD6  65                 	db	101	;'e'
   471  007CD7  72                 	db	114	;'r'
   472  007CD8  6E                 	db	110	;'n'
   473  007CD9  65                 	db	101	;'e'
   474  007CDA  74                 	db	116	;'t'
   475  007CDB  20                 	db	32
   476  007CDC  63                 	db	99	;'c'
   477  007CDD  6F                 	db	111	;'o'
   478  007CDE  6E                 	db	110	;'n'
   479  007CDF  74                 	db	116	;'t'
   480  007CE0  72                 	db	114	;'r'
   481  007CE1  6F                 	db	111	;'o'
   482  007CE2  6C                 	db	108	;'l'
   483  007CE3  6C                 	db	108	;'l'
   484  007CE4  65                 	db	101	;'e'
   485  007CE5  72                 	db	114	;'r'
   486  007CE6  20                 	db	32
   487  007CE7  69                 	db	105	;'i'
   488  007CE8  73                 	db	115	;'s'
   489  007CE9  20                 	db	32
   490  007CEA  75                 	db	117	;'u'
   491  007CEB  6E                 	db	110	;'n'
   492  007CEC  72                 	db	114	;'r'
   493  007CED  65                 	db	101	;'e'
   494  007CEE  73                 	db	115	;'s'
   495  007CEF  70                 	db	112	;'p'
   496  007CF0  6F                 	db	111	;'o'
   497  007CF1  6E                 	db	110	;'n'
   498  007CF2  73                 	db	115	;'s'
   499  007CF3  69                 	db	105	;'i'
   500  007CF4  76                 	db	118	;'v'
   501  007CF5  65                 	db	101	;'e'
   502  007CF6  2E                 	db	46
   503  007CF7  00                 	db	0
   504  007CF8                     STR_52:
   505  007CF8  49                 	db	73	;'I'
   506  007CF9  50                 	db	80	;'P'
   507  007CFA  20                 	db	32
   508  007CFB  61                 	db	97	;'a'
   509  007CFC  64                 	db	100	;'d'
   510  007CFD  64                 	db	100	;'d'
   511  007CFE  72                 	db	114	;'r'
   512  007CFF  65                 	db	101	;'e'
   513  007D00  73                 	db	115	;'s'
   514  007D01  73                 	db	115	;'s'
   515  007D02  20                 	db	32
   516  007D03  63                 	db	99	;'c'
   517  007D04  6F                 	db	111	;'o'
   518  007D05  75                 	db	117	;'u'
   519  007D06  6C                 	db	108	;'l'
   520  007D07  64                 	db	100	;'d'
   521  007D08  20                 	db	32
   522  007D09  6E                 	db	110	;'n'
   523  007D0A  6F                 	db	111	;'o'
   524  007D0B  74                 	db	116	;'t'
   525  007D0C  20                 	db	32
   526  007D0D  62                 	db	98	;'b'
   527  007D0E  65                 	db	101	;'e'
   528  007D0F  20                 	db	32
   529  007D10  72                 	db	114	;'r'
   530  007D11  65                 	db	101	;'e'
   531  007D12  73                 	db	115	;'s'
   532  007D13  6F                 	db	111	;'o'
   533  007D14  6C                 	db	108	;'l'
   534  007D15  76                 	db	118	;'v'
   535  007D16  65                 	db	101	;'e'
   536  007D17  64                 	db	100	;'d'
   537  007D18  2E                 	db	46
   538  007D19  00                 	db	0
   539  007D1A                     STR_46:
   540  007D1A  20                 	db	32
   541  007D1B  45                 	db	69	;'E'
   542  007D1C  54                 	db	84	;'T'
   543  007D1D  48                 	db	72	;'H'
   544  007D1E  45                 	db	69	;'E'
   545  007D1F  52                 	db	82	;'R'
   546  007D20  4E                 	db	78	;'N'
   547  007D21  45                 	db	69	;'E'
   548  007D22  54                 	db	84	;'T'
   549  007D23  20                 	db	32
   550  007D24  43                 	db	67	;'C'
   551  007D25  4F                 	db	79	;'O'
   552  007D26  4E                 	db	78	;'N'
   553  007D27  54                 	db	84	;'T'
   554  007D28  52                 	db	82	;'R'
   555  007D29  4F                 	db	79	;'O'
   556  007D2A  4C                 	db	76	;'L'
   557  007D2B  4C                 	db	76	;'L'
   558  007D2C  45                 	db	69	;'E'
   559  007D2D  52                 	db	82	;'R'
   560  007D2E  20                 	db	32
   561  007D2F  4D                 	db	77	;'M'
   562  007D30  4F                 	db	79	;'O'
   563  007D31  44                 	db	68	;'D'
   564  007D32  55                 	db	85	;'U'
   565  007D33  4C                 	db	76	;'L'
   566  007D34  45                 	db	69	;'E'
   567  007D35  3A                 	db	58	;':'
   568  007D36  20                 	db	32
   569  007D37  00                 	db	0
   570  007D38                     STR_53:
   571  007D38  41                 	db	65	;'A'
   572  007D39  6E                 	db	110	;'n'
   573  007D3A  20                 	db	32
   574  007D3B  75                 	db	117	;'u'
   575  007D3C  6E                 	db	110	;'n'
   576  007D3D  6B                 	db	107	;'k'
   577  007D3E  6E                 	db	110	;'n'
   578  007D3F  6F                 	db	111	;'o'
   579  007D40  77                 	db	119	;'w'
   580  007D41  6E                 	db	110	;'n'
   581  007D42  20                 	db	32
   582  007D43  65                 	db	101	;'e'
   583  007D44  72                 	db	114	;'r'
   584  007D45  72                 	db	114	;'r'
   585  007D46  6F                 	db	111	;'o'
   586  007D47  72                 	db	114	;'r'
   587  007D48  20                 	db	32
   588  007D49  68                 	db	104	;'h'
   589  007D4A  61                 	db	97	;'a'
   590  007D4B  73                 	db	115	;'s'
   591  007D4C  20                 	db	32
   592  007D4D  6F                 	db	111	;'o'
   593  007D4E  63                 	db	99	;'c'
   594  007D4F  63                 	db	99	;'c'
   595  007D50  75                 	db	117	;'u'
   596  007D51  72                 	db	114	;'r'
   597  007D52  65                 	db	101	;'e'
   598  007D53  64                 	db	100	;'d'
   599  007D54  2E                 	db	46
   600  007D55  00                 	db	0
   601  007D56                     STR_42:
   602  007D56  63                 	db	99	;'c'
   603  007D57  6F                 	db	111	;'o'
   604  007D58  6E                 	db	110	;'n'
   605  007D59  6E                 	db	110	;'n'
   606  007D5A  65                 	db	101	;'e'
   607  007D5B  63                 	db	99	;'c'
   608  007D5C  74                 	db	116	;'t'
   609  007D5D  69                 	db	105	;'i'
   610  007D5E  6F                 	db	111	;'o'
   611  007D5F  6E                 	db	110	;'n'
   612  007D60  20                 	db	32
   613  007D61  69                 	db	105	;'i'
   614  007D62  73                 	db	115	;'s'
   615  007D63  20                 	db	32
   616  007D64  48                 	db	72	;'H'
   617  007D65  61                 	db	97	;'a'
   618  007D66  6C                 	db	108	;'l'
   619  007D67  66                 	db	102	;'f'
   620  007D68  20                 	db	32
   621  007D69  44                 	db	68	;'D'
   622  007D6A  75                 	db	117	;'u'
   623  007D6B  70                 	db	112	;'p'
   624  007D6C  6C                 	db	108	;'l'
   625  007D6D  65                 	db	101	;'e'
   626  007D6E  78                 	db	120	;'x'
   627  007D6F  2E                 	db	46
   628  007D70  0A                 	db	10
   629  007D71  0D                 	db	13
   630  007D72  00                 	db	0
   631  007D73                     STR_43:
   632  007D73  63                 	db	99	;'c'
   633  007D74  6F                 	db	111	;'o'
   634  007D75  6E                 	db	110	;'n'
   635  007D76  6E                 	db	110	;'n'
   636  007D77  65                 	db	101	;'e'
   637  007D78  63                 	db	99	;'c'
   638  007D79  74                 	db	116	;'t'
   639  007D7A  69                 	db	105	;'i'
   640  007D7B  6F                 	db	111	;'o'
   641  007D7C  6E                 	db	110	;'n'
   642  007D7D  20                 	db	32
   643  007D7E  69                 	db	105	;'i'
   644  007D7F  73                 	db	115	;'s'
   645  007D80  20                 	db	32
   646  007D81  46                 	db	70	;'F'
   647  007D82  75                 	db	117	;'u'
   648  007D83  6C                 	db	108	;'l'
   649  007D84  6C                 	db	108	;'l'
   650  007D85  20                 	db	32
   651  007D86  44                 	db	68	;'D'
   652  007D87  75                 	db	117	;'u'
   653  007D88  70                 	db	112	;'p'
   654  007D89  6C                 	db	108	;'l'
   655  007D8A  65                 	db	101	;'e'
   656  007D8B  78                 	db	120	;'x'
   657  007D8C  2E                 	db	46
   658  007D8D  0A                 	db	10
   659  007D8E  0D                 	db	13
   660  007D8F  00                 	db	0
   661  007D90                     STR_1:
   662  007D90  57                 	db	87	;'W'
   663  007D91  72                 	db	114	;'r'
   664  007D92  69                 	db	105	;'i'
   665  007D93  74                 	db	116	;'t'
   666  007D94  69                 	db	105	;'i'
   667  007D95  6E                 	db	110	;'n'
   668  007D96  67                 	db	103	;'g'
   669  007D97  20                 	db	32
   670  007D98  30                 	db	48	;'0'
   671  007D99  78                 	db	120	;'x'
   672  007D9A  31                 	db	49	;'1'
   673  007D9B  32                 	db	50	;'2'
   674  007D9C  33                 	db	51	;'3'
   675  007D9D  34                 	db	52	;'4'
   676  007D9E  20                 	db	32
   677  007D9F  73                 	db	115	;'s'
   678  007DA0  75                 	db	117	;'u'
   679  007DA1  63                 	db	99	;'c'
   680  007DA2  63                 	db	99	;'c'
   681  007DA3  65                 	db	101	;'e'
   682  007DA4  73                 	db	115	;'s'
   683  007DA5  73                 	db	115	;'s'
   684  007DA6  66                 	db	102	;'f'
   685  007DA7  75                 	db	117	;'u'
   686  007DA8  6C                 	db	108	;'l'
   687  007DA9  2E                 	db	46
   688  007DAA  0A                 	db	10
   689  007DAB  0D                 	db	13
   690  007DAC  00                 	db	0
   691  007DAD                     STR_36:
   692  007DAD  49                 	db	73	;'I'
   693  007DAE  6E                 	db	110	;'n'
   694  007DAF  69                 	db	105	;'i'
   695  007DB0  74                 	db	116	;'t'
   696  007DB1  69                 	db	105	;'i'
   697  007DB2  61                 	db	97	;'a'
   698  007DB3  6C                 	db	108	;'l'
   699  007DB4  69                 	db	105	;'i'
   700  007DB5  73                 	db	115	;'s'
   701  007DB6  61                 	db	97	;'a'
   702  007DB7  74                 	db	116	;'t'
   703  007DB8  69                 	db	105	;'i'
   704  007DB9  6F                 	db	111	;'o'
   705  007DBA  6E                 	db	110	;'n'
   706  007DBB  20                 	db	32
   707  007DBC  63                 	db	99	;'c'
   708  007DBD  6F                 	db	111	;'o'
   709  007DBE  6D                 	db	109	;'m'
   710  007DBF  70                 	db	112	;'p'
   711  007DC0  6C                 	db	108	;'l'
   712  007DC1  65                 	db	101	;'e'
   713  007DC2  74                 	db	116	;'t'
   714  007DC3  65                 	db	101	;'e'
   715  007DC4  64                 	db	100	;'d'
   716  007DC5  2E                 	db	46
   717  007DC6  0A                 	db	10
   718  007DC7  0D                 	db	13
   719  007DC8  00                 	db	0
   720  007DC9                     STR_4:
   721  007DC9  57                 	db	87	;'W'
   722  007DCA  72                 	db	114	;'r'
   723  007DCB  69                 	db	105	;'i'
   724  007DCC  74                 	db	116	;'t'
   725  007DCD  69                 	db	105	;'i'
   726  007DCE  6E                 	db	110	;'n'
   727  007DCF  67                 	db	103	;'g'
   728  007DD0  20                 	db	32
   729  007DD1  30                 	db	48	;'0'
   730  007DD2  78                 	db	120	;'x'
   731  007DD3  31                 	db	49	;'1'
   732  007DD4  32                 	db	50	;'2'
   733  007DD5  33                 	db	51	;'3'
   734  007DD6  34                 	db	52	;'4'
   735  007DD7  20                 	db	32
   736  007DD8  66                 	db	102	;'f'
   737  007DD9  61                 	db	97	;'a'
   738  007DDA  69                 	db	105	;'i'
   739  007DDB  6C                 	db	108	;'l'
   740  007DDC  65                 	db	101	;'e'
   741  007DDD  64                 	db	100	;'d'
   742  007DDE  2E                 	db	46
   743  007DDF  0A                 	db	10
   744  007DE0  0D                 	db	13
   745  007DE1  00                 	db	0
   746  007DE2                     STR_25:
   747  007DE2  46                 	db	70	;'F'
   748  007DE3  49                 	db	73	;'I'
   749  007DE4  52                 	db	82	;'R'
   750  007DE5  4D                 	db	77	;'M'
   751  007DE6  57                 	db	87	;'W'
   752  007DE7  41                 	db	65	;'A'
   753  007DE8  52                 	db	82	;'R'
   754  007DE9  45                 	db	69	;'E'
   755  007DEA  20                 	db	32
   756  007DEB  42                 	db	66	;'B'
   757  007DEC  55                 	db	85	;'U'
   758  007DED  49                 	db	73	;'I'
   759  007DEE  4C                 	db	76	;'L'
   760  007DEF  44                 	db	68	;'D'
   761  007DF0  20                 	db	32
   762  007DF1  44                 	db	68	;'D'
   763  007DF2  41                 	db	65	;'A'
   764  007DF3  54                 	db	84	;'T'
   765  007DF4  45                 	db	69	;'E'
   766  007DF5  20                 	db	32
   767  007DF6  49                 	db	73	;'I'
   768  007DF7  53                 	db	83	;'S'
   769  007DF8  20                 	db	32
   770  007DF9  00                 	db	0
   771  007DFA                     STR_34:
   772  007DFA  53                 	db	83	;'S'
   773  007DFB  6F                 	db	111	;'o'
   774  007DFC  75                 	db	117	;'u'
   775  007DFD  72                 	db	114	;'r'
   776  007DFE  63                 	db	99	;'c'
   777  007DFF  65                 	db	101	;'e'
   778  007E00  20                 	db	32
   779  007E01  4D                 	db	77	;'M'
   780  007E02  41                 	db	65	;'A'
   781  007E03  43                 	db	67	;'C'
   782  007E04  20                 	db	32
   783  007E05  61                 	db	97	;'a'
   784  007E06  64                 	db	100	;'d'
   785  007E07  64                 	db	100	;'d'
   786  007E08  72                 	db	114	;'r'
   787  007E09  65                 	db	101	;'e'
   788  007E0A  73                 	db	115	;'s'
   789  007E0B  73                 	db	115	;'s'
   790  007E0C  20                 	db	32
   791  007E0D  69                 	db	105	;'i'
   792  007E0E  73                 	db	115	;'s'
   793  007E0F  20                 	db	32
   794  007E10  00                 	db	0
   795  007E11                     STR_32:
   796  007E11  53                 	db	83	;'S'
   797  007E12  69                 	db	105	;'i'
   798  007E13  6C                 	db	108	;'l'
   799  007E14  69                 	db	105	;'i'
   800  007E15  63                 	db	99	;'c'
   801  007E16  6F                 	db	111	;'o'
   802  007E17  6E                 	db	110	;'n'
   803  007E18  20                 	db	32
   804  007E19  72                 	db	114	;'r'
   805  007E1A  65                 	db	101	;'e'
   806  007E1B  76                 	db	118	;'v'
   807  007E1C  69                 	db	105	;'i'
   808  007E1D  73                 	db	115	;'s'
   809  007E1E  69                 	db	105	;'i'
   810  007E1F  6F                 	db	111	;'o'
   811  007E20  6E                 	db	110	;'n'
   812  007E21  20                 	db	32
   813  007E22  69                 	db	105	;'i'
   814  007E23  73                 	db	115	;'s'
   815  007E24  20                 	db	32
   816  007E25  00                 	db	0
   817  007E26                     STR_41:
   818  007E26  53                 	db	83	;'S'
   819  007E27  70                 	db	112	;'p'
   820  007E28  65                 	db	101	;'e'
   821  007E29  65                 	db	101	;'e'
   822  007E2A  64                 	db	100	;'d'
   823  007E2B  20                 	db	32
   824  007E2C  69                 	db	105	;'i'
   825  007E2D  73                 	db	115	;'s'
   826  007E2E  20                 	db	32
   827  007E2F  31                 	db	49	;'1'
   828  007E30  30                 	db	48	;'0'
   829  007E31  30                 	db	48	;'0'
   830  007E32  20                 	db	32
   831  007E33  4D                 	db	77	;'M'
   832  007E34  62                 	db	98	;'b'
   833  007E35  70                 	db	112	;'p'
   834  007E36  73                 	db	115	;'s'
   835  007E37  2C                 	db	44
   836  007E38  20                 	db	32
   837  007E39  00                 	db	0
   838  007E3A                     STR_82:
   839  007E3A  5B                 	db	91	;'['
   840  007E3B  49                 	db	73	;'I'
   841  007E3C  4E                 	db	78	;'N'
   842  007E3D  56                 	db	86	;'V'
   843  007E3E  41                 	db	65	;'A'
   844  007E3F  4C                 	db	76	;'L'
   845  007E40  49                 	db	73	;'I'
   846  007E41  44                 	db	68	;'D'
   847  007E42  20                 	db	32
   848  007E43  43                 	db	67	;'C'
   849  007E44  48                 	db	72	;'H'
   850  007E45  45                 	db	69	;'E'
   851  007E46  43                 	db	67	;'C'
   852  007E47  4B                 	db	75	;'K'
   853  007E48  53                 	db	83	;'S'
   854  007E49  55                 	db	85	;'U'
   855  007E4A  4D                 	db	77	;'M'
   856  007E4B  5D                 	db	93	;']'
   857  007E4C  00                 	db	0
   858  007E4D                     STR_40:
   859  007E4D  53                 	db	83	;'S'
   860  007E4E  70                 	db	112	;'p'
   861  007E4F  65                 	db	101	;'e'
   862  007E50  65                 	db	101	;'e'
   863  007E51  64                 	db	100	;'d'
   864  007E52  20                 	db	32
   865  007E53  69                 	db	105	;'i'
   866  007E54  73                 	db	115	;'s'
   867  007E55  20                 	db	32
   868  007E56  31                 	db	49	;'1'
   869  007E57  30                 	db	48	;'0'
   870  007E58  20                 	db	32
   871  007E59  4D                 	db	77	;'M'
   872  007E5A  62                 	db	98	;'b'
   873  007E5B  70                 	db	112	;'p'
   874  007E5C  73                 	db	115	;'s'
   875  007E5D  2C                 	db	44
   876  007E5E  20                 	db	32
   877  007E5F  00                 	db	0
   878  007E60                     STR_39:
   879  007E60  4C                 	db	76	;'L'
   880  007E61  69                 	db	105	;'i'
   881  007E62  6E                 	db	110	;'n'
   882  007E63  6B                 	db	107	;'k'
   883  007E64  20                 	db	32
   884  007E65  65                 	db	101	;'e'
   885  007E66  73                 	db	115	;'s'
   886  007E67  74                 	db	116	;'t'
   887  007E68  61                 	db	97	;'a'
   888  007E69  62                 	db	98	;'b'
   889  007E6A  6C                 	db	108	;'l'
   890  007E6B  69                 	db	105	;'i'
   891  007E6C  73                 	db	115	;'s'
   892  007E6D  68                 	db	104	;'h'
   893  007E6E  65                 	db	101	;'e'
   894  007E6F  64                 	db	100	;'d'
   895  007E70  2E                 	db	46
   896  007E71  20                 	db	32
   897  007E72  00                 	db	0
   898  007E73                     STR_47:
   899  007E73  20                 	db	32
   900  007E74  45                 	db	69	;'E'
   901  007E75  54                 	db	84	;'T'
   902  007E76  48                 	db	72	;'H'
   903  007E77  45                 	db	69	;'E'
   904  007E78  52                 	db	82	;'R'
   905  007E79  4E                 	db	78	;'N'
   906  007E7A  45                 	db	69	;'E'
   907  007E7B  54                 	db	84	;'T'
   908  007E7C  20                 	db	32
   909  007E7D  4D                 	db	77	;'M'
   910  007E7E  4F                 	db	79	;'O'
   911  007E7F  44                 	db	68	;'D'
   912  007E80  55                 	db	85	;'U'
   913  007E81  4C                 	db	76	;'L'
   914  007E82  45                 	db	69	;'E'
   915  007E83  3A                 	db	58	;':'
   916  007E84  20                 	db	32
   917  007E85  00                 	db	0
   918  007E86                     STR_22:
   919  007E86  43                 	db	67	;'C'
   920  007E87  6F                 	db	111	;'o'
   921  007E88  75                 	db	117	;'u'
   922  007E89  6C                 	db	108	;'l'
   923  007E8A  64                 	db	100	;'d'
   924  007E8B  20                 	db	32
   925  007E8C  6E                 	db	110	;'n'
   926  007E8D  6F                 	db	111	;'o'
   927  007E8E  74                 	db	116	;'t'
   928  007E8F  20                 	db	32
   929  007E90  72                 	db	114	;'r'
   930  007E91  65                 	db	101	;'e'
   931  007E92  73                 	db	115	;'s'
   932  007E93  6F                 	db	111	;'o'
   933  007E94  6C                 	db	108	;'l'
   934  007E95  76                 	db	118	;'v'
   935  007E96  65                 	db	101	;'e'
   936  007E97  20                 	db	32
   937  007E98  00                 	db	0
   938  007E99                     STR_58:
   939  007E99  55                 	db	85	;'U'
   940  007E9A  6E                 	db	110	;'n'
   941  007E9B  6B                 	db	107	;'k'
   942  007E9C  6E                 	db	110	;'n'
   943  007E9D  6F                 	db	111	;'o'
   944  007E9E  77                 	db	119	;'w'
   945  007E9F  6E                 	db	110	;'n'
   946  007EA0  20                 	db	32
   947  007EA1  45                 	db	69	;'E'
   948  007EA2  74                 	db	116	;'t'
   949  007EA3  68                 	db	104	;'h'
   950  007EA4  65                 	db	101	;'e'
   951  007EA5  72                 	db	114	;'r'
   952  007EA6  54                 	db	84	;'T'
   953  007EA7  79                 	db	121	;'y'
   954  007EA8  70                 	db	112	;'p'
   955  007EA9  65                 	db	101	;'e'
   956  007EAA  00                 	db	0
   957  007EAB                     STR_62:
   958  007EAB  55                 	db	85	;'U'
   959  007EAC  6E                 	db	110	;'n'
   960  007EAD  6B                 	db	107	;'k'
   961  007EAE  6E                 	db	110	;'n'
   962  007EAF  6F                 	db	111	;'o'
   963  007EB0  77                 	db	119	;'w'
   964  007EB1  6E                 	db	110	;'n'
   965  007EB2  20                 	db	32
   966  007EB3  50                 	db	80	;'P'
   967  007EB4  72                 	db	114	;'r'
   968  007EB5  6F                 	db	111	;'o'
   969  007EB6  74                 	db	116	;'t'
   970  007EB7  6F                 	db	111	;'o'
   971  007EB8  63                 	db	99	;'c'
   972  007EB9  6F                 	db	111	;'o'
   973  007EBA  6C                 	db	108	;'l'
   974  007EBB  00                 	db	0
   975  007EBC                     STR_45:
   976  007EBC  20                 	db	32
   977  007EBD  4D                 	db	77	;'M'
   978  007EBE  45                 	db	69	;'E'
   979  007EBF  4D                 	db	77	;'M'
   980  007EC0  4F                 	db	79	;'O'
   981  007EC1  52                 	db	82	;'R'
   982  007EC2  59                 	db	89	;'Y'
   983  007EC3  20                 	db	32
   984  007EC4  4D                 	db	77	;'M'
   985  007EC5  4F                 	db	79	;'O'
   986  007EC6  44                 	db	68	;'D'
   987  007EC7  55                 	db	85	;'U'
   988  007EC8  4C                 	db	76	;'L'
   989  007EC9  45                 	db	69	;'E'
   990  007ECA  3A                 	db	58	;':'
   991  007ECB  20                 	db	32
   992  007ECC  00                 	db	0
   993  007ECD                     STR_2:
   994  007ECD  52                 	db	82	;'R'
   995  007ECE  65                 	db	101	;'e'
   996  007ECF  73                 	db	115	;'s'
   997  007ED0  65                 	db	101	;'e'
   998  007ED1  74                 	db	116	;'t'
   999  007ED2  20                 	db	32
  1000  007ED3  73                 	db	115	;'s'
  1001  007ED4  75                 	db	117	;'u'
  1002  007ED5  63                 	db	99	;'c'
  1003  007ED6  63                 	db	99	;'c'
  1004  007ED7  65                 	db	101	;'e'
  1005  007ED8  73                 	db	115	;'s'
  1006  007ED9  73                 	db	115	;'s'
  1007  007EDA  2E                 	db	46
  1008  007EDB  0A                 	db	10
  1009  007EDC  0D                 	db	13
  1010  007EDD  00                 	db	0
  1011  007EDE                     STR_71:
  1012  007EDE  5B                 	db	91	;'['
  1013  007EDF  52                 	db	82	;'R'
  1014  007EE0  65                 	db	101	;'e'
  1015  007EE1  70                 	db	112	;'p'
  1016  007EE2  6C                 	db	108	;'l'
  1017  007EE3  79                 	db	121	;'y'
  1018  007EE4  20                 	db	32
  1019  007EE5  73                 	db	115	;'s'
  1020  007EE6  65                 	db	101	;'e'
  1021  007EE7  6E                 	db	110	;'n'
  1022  007EE8  74                 	db	116	;'t'
  1023  007EE9  20                 	db	32
  1024  007EEA  74                 	db	116	;'t'
  1025  007EEB  6F                 	db	111	;'o'
  1026  007EEC  20                 	db	32
  1027  007EED  00                 	db	0
  1028  007EEE                     STR_24:
  1029  007EEE  49                 	db	73	;'I'
  1030  007EEF  50                 	db	80	;'P'
  1031  007EF0  20                 	db	32
  1032  007EF1  70                 	db	112	;'p'
  1033  007EF2  61                 	db	97	;'a'
  1034  007EF3  63                 	db	99	;'c'
  1035  007EF4  6B                 	db	107	;'k'
  1036  007EF5  65                 	db	101	;'e'
  1037  007EF6  74                 	db	116	;'t'
  1038  007EF7  20                 	db	32
  1039  007EF8  73                 	db	115	;'s'
  1040  007EF9  65                 	db	101	;'e'
  1041  007EFA  6E                 	db	110	;'n'
  1042  007EFB  74                 	db	116	;'t'
  1043  007EFC  2E                 	db	46
  1044  007EFD  00                 	db	0
  1045  007EFE                     STR_9:
  1046  007EFE  5B                 	db	91	;'['
  1047  007EFF  53                 	db	83	;'S'
  1048  007F00  79                 	db	121	;'y'
  1049  007F01  6D                 	db	109	;'m'
  1050  007F02  62                 	db	98	;'b'
  1051  007F03  6F                 	db	111	;'o'
  1052  007F04  6C                 	db	108	;'l'
  1053  007F05  20                 	db	32
  1054  007F06  45                 	db	69	;'E'
  1055  007F07  72                 	db	114	;'r'
  1056  007F08  72                 	db	114	;'r'
  1057  007F09  6F                 	db	111	;'o'
  1058  007F0A  72                 	db	114	;'r'
  1059  007F0B  73                 	db	115	;'s'
  1060  007F0C  5D                 	db	93	;']'
  1061  007F0D  00                 	db	0
  1062  007F0E                     STR_3:
  1063  007F0E  52                 	db	82	;'R'
  1064  007F0F  65                 	db	101	;'e'
  1065  007F10  73                 	db	115	;'s'
  1066  007F11  65                 	db	101	;'e'
  1067  007F12  74                 	db	116	;'t'
  1068  007F13  20                 	db	32
  1069  007F14  66                 	db	102	;'f'
  1070  007F15  61                 	db	97	;'a'
  1071  007F16  69                 	db	105	;'i'
  1072  007F17  6C                 	db	108	;'l'
  1073  007F18  65                 	db	101	;'e'
  1074  007F19  64                 	db	100	;'d'
  1075  007F1A  2E                 	db	46
  1076  007F1B  0A                 	db	10
  1077  007F1C  0D                 	db	13
  1078  007F1D  00                 	db	0
  1079  007F1E                     STR_70:
  1080  007F1E  5B                 	db	91	;'['
  1081  007F1F  49                 	db	73	;'I'
  1082  007F20  73                 	db	115	;'s'
  1083  007F21  47                 	db	71	;'G'
  1084  007F22  72                 	db	114	;'r'
  1085  007F23  61                 	db	97	;'a'
  1086  007F24  74                 	db	116	;'t'
  1087  007F25  75                 	db	117	;'u'
  1088  007F26  69                 	db	105	;'i'
  1089  007F27  74                 	db	116	;'t'
  1090  007F28  6F                 	db	111	;'o'
  1091  007F29  75                 	db	117	;'u'
  1092  007F2A  73                 	db	115	;'s'
  1093  007F2B  5D                 	db	93	;']'
  1094  007F2C  00                 	db	0
  1095  007F2D                     STR_49:
  1096  007F2D  20                 	db	32
  1097  007F2E  49                 	db	73	;'I'
  1098  007F2F  50                 	db	80	;'P'
  1099  007F30  76                 	db	118	;'v'
  1100  007F31  34                 	db	52	;'4'
  1101  007F32  20                 	db	32
  1102  007F33  4D                 	db	77	;'M'
  1103  007F34  4F                 	db	79	;'O'
  1104  007F35  44                 	db	68	;'D'
  1105  007F36  55                 	db	85	;'U'
  1106  007F37  4C                 	db	76	;'L'
  1107  007F38  45                 	db	69	;'E'
  1108  007F39  3A                 	db	58	;':'
  1109  007F3A  20                 	db	32
  1110  007F3B  00                 	db	0
  1111  007F3C                     STR_48:
  1112  007F3C  20                 	db	32
  1113  007F3D  41                 	db	65	;'A'
  1114  007F3E  52                 	db	82	;'R'
  1115  007F3F  50                 	db	80	;'P'
  1116  007F40  20                 	db	32
  1117  007F41  4D                 	db	77	;'M'
  1118  007F42  4F                 	db	79	;'O'
  1119  007F43  44                 	db	68	;'D'
  1120  007F44  55                 	db	85	;'U'
  1121  007F45  4C                 	db	76	;'L'
  1122  007F46  45                 	db	69	;'E'
  1123  007F47  3A                 	db	58	;':'
  1124  007F48  20                 	db	32
  1125  007F49  00                 	db	0
  1126  007F4A                     STR_38:
  1127  007F4A  4C                 	db	76	;'L'
  1128  007F4B  69                 	db	105	;'i'
  1129  007F4C  6E                 	db	110	;'n'
  1130  007F4D  6B                 	db	107	;'k'
  1131  007F4E  20                 	db	32
  1132  007F4F  6C                 	db	108	;'l'
  1133  007F50  6F                 	db	111	;'o'
  1134  007F51  73                 	db	115	;'s'
  1135  007F52  74                 	db	116	;'t'
  1136  007F53  2E                 	db	46
  1137  007F54  0A                 	db	10
  1138  007F55  0D                 	db	13
  1139  007F56  00                 	db	0
  1140  007F57                     STR_31:
  1141  007F57  20                 	db	32
  1142  007F58  64                 	db	100	;'d'
  1143  007F59  65                 	db	101	;'e'
  1144  007F5A  74                 	db	116	;'t'
  1145  007F5B  65                 	db	101	;'e'
  1146  007F5C  63                 	db	99	;'c'
  1147  007F5D  74                 	db	116	;'t'
  1148  007F5E  65                 	db	101	;'e'
  1149  007F5F  64                 	db	100	;'d'
  1150  007F60  2E                 	db	46
  1151  007F61  20                 	db	32
  1152  007F62  00                 	db	0
  1153  007F63                     STR_26:
  1154  007F63  4D                 	db	77	;'M'
  1155  007F64  61                 	db	97	;'a'
  1156  007F65  72                 	db	114	;'r'
  1157  007F66  20                 	db	32
  1158  007F67  30                 	db	48	;'0'
  1159  007F68  31                 	db	49	;'1'
  1160  007F69  20                 	db	32
  1161  007F6A  32                 	db	50	;'2'
  1162  007F6B  30                 	db	48	;'0'
  1163  007F6C  31                 	db	49	;'1'
  1164  007F6D  39                 	db	57	;'9'
  1165  007F6E  00                 	db	0
  1166  007F6F                     STR_7:
  1167  007F6F  5B                 	db	91	;'['
  1168  007F70  42                 	db	66	;'B'
  1169  007F71  72                 	db	114	;'r'
  1170  007F72  6F                 	db	111	;'o'
  1171  007F73  61                 	db	97	;'a'
  1172  007F74  64                 	db	100	;'d'
  1173  007F75  63                 	db	99	;'c'
  1174  007F76  61                 	db	97	;'a'
  1175  007F77  73                 	db	115	;'s'
  1176  007F78  74                 	db	116	;'t'
  1177  007F79  5D                 	db	93	;']'
  1178  007F7A  00                 	db	0
  1179  007F7B                     STR_83:
  1180  007F7B  5B                 	db	91	;'['
  1181  007F7C  45                 	db	69	;'E'
  1182  007F7D  78                 	db	120	;'x'
  1183  007F7E  70                 	db	112	;'p'
  1184  007F7F  65                 	db	101	;'e'
  1185  007F80  63                 	db	99	;'c'
  1186  007F81  74                 	db	116	;'t'
  1187  007F82  65                 	db	101	;'e'
  1188  007F83  64                 	db	100	;'d'
  1189  007F84  20                 	db	32
  1190  007F85  00                 	db	0
  1191  007F86                     STR_69:
  1192  007F86  5B                 	db	91	;'['
  1193  007F87  49                 	db	73	;'I'
  1194  007F88  73                 	db	115	;'s'
  1195  007F89  50                 	db	80	;'P'
  1196  007F8A  72                 	db	114	;'r'
  1197  007F8B  6F                 	db	111	;'o'
  1198  007F8C  62                 	db	98	;'b'
  1199  007F8D  65                 	db	101	;'e'
  1200  007F8E  5D                 	db	93	;']'
  1201  007F8F  00                 	db	0
  1202  007F90                     STR_8:
  1203  007F90  5B                 	db	91	;'['
  1204  007F91  55                 	db	85	;'U'
  1205  007F92  6E                 	db	110	;'n'
  1206  007F93  69                 	db	105	;'i'
  1207  007F94  63                 	db	99	;'c'
  1208  007F95  61                 	db	97	;'a'
  1209  007F96  73                 	db	115	;'s'
  1210  007F97  74                 	db	116	;'t'
  1211  007F98  5D                 	db	93	;']'
  1212  007F99  00                 	db	0
  1213  007F9A                     STR_54:
  1214  007F9A  20                 	db	32
  1215  007F9B  28                 	db	40
  1216  007F9C  43                 	db	67	;'C'
  1217  007F9D  6F                 	db	111	;'o'
  1218  007F9E  64                 	db	100	;'d'
  1219  007F9F  65                 	db	101	;'e'
  1220  007FA0  3A                 	db	58	;':'
  1221  007FA1  20                 	db	32
  1222  007FA2  00                 	db	0
  1223  007FA3                     STR_28:
  1224  007FA3  32                 	db	50	;'2'
  1225  007FA4  33                 	db	51	;'3'
  1226  007FA5  3A                 	db	58	;':'
  1227  007FA6  32                 	db	50	;'2'
  1228  007FA7  31                 	db	49	;'1'
  1229  007FA8  3A                 	db	58	;':'
  1230  007FA9  30                 	db	48	;'0'
  1231  007FAA  37                 	db	55	;'7'
  1232  007FAB  00                 	db	0
  1233  007FAC                     STR_44:
  1234  007FAC  5B                 	db	91	;'['
  1235  007FAD  45                 	db	69	;'E'
  1236  007FAE  52                 	db	82	;'R'
  1237  007FAF  52                 	db	82	;'R'
  1238  007FB0  4F                 	db	79	;'O'
  1239  007FB1  52                 	db	82	;'R'
  1240  007FB2  5D                 	db	93	;']'
  1241  007FB3  00                 	db	0
  1242  007FB4                     STR_84:
  1243  007FB4  2C                 	db	44
  1244  007FB5  20                 	db	32
  1245  007FB6  67                 	db	103	;'g'
  1246  007FB7  6F                 	db	111	;'o'
  1247  007FB8  74                 	db	116	;'t'
  1248  007FB9  20                 	db	32
  1249  007FBA  00                 	db	0
  1250  007FBB                     STR_11:
  1251  007FBB  5B                 	db	91	;'['
  1252  007FBC  49                 	db	73	;'I'
  1253  007FBD  50                 	db	80	;'P'
  1254  007FBE  76                 	db	118	;'v'
  1255  007FBF  34                 	db	52	;'4'
  1256  007FC0  5D                 	db	93	;']'
  1257  007FC1  00                 	db	0
  1258  007FC2                     STR_10:
  1259  007FC2  5B                 	db	91	;'['
  1260  007FC3  41                 	db	65	;'A'
  1261  007FC4  52                 	db	82	;'R'
  1262  007FC5  50                 	db	80	;'P'
  1263  007FC6  5D                 	db	93	;']'
  1264  007FC7  00                 	db	0
  1265  007FC8                     STR_76:
  1266  007FC8  20                 	db	32
  1267  007FC9  2D                 	db	45
  1268  007FCA  3E                 	db	62	;'>'
  1269  007FCB  20                 	db	32
  1270  007FCC  00                 	db	0
  1271  007FCD                     STR_66:
  1272  007FCD  5D                 	db	93	;']'
  1273  007FCE  2D                 	db	45
  1274  007FCF  3E                 	db	62	;'>'
  1275  007FD0  5B                 	db	91	;'['
  1276  007FD1  00                 	db	0
  1277  007FD2                     STR_56:
  1278  007FD2  49                 	db	73	;'I'
  1279  007FD3  50                 	db	80	;'P'
  1280  007FD4  76                 	db	118	;'v'
  1281  007FD5  34                 	db	52	;'4'
  1282  007FD6  00                 	db	0
  1283  007FD7                     STR_59:
  1284  007FD7  49                 	db	73	;'I'
  1285  007FD8  43                 	db	67	;'C'
  1286  007FD9  4D                 	db	77	;'M'
  1287  007FDA  50                 	db	80	;'P'
  1288  007FDB  00                 	db	0
  1289  007FDC                     STR_55:
  1290  007FDC  29                 	db	41
  1291  007FDD  2E                 	db	46
  1292  007FDE  0A                 	db	10
  1293  007FDF  0D                 	db	13
  1294  007FE0  00                 	db	0
  1295  007FE1                     STR_15:
  1296  007FE1  5D                 	db	93	;']'
  1297  007FE2  5B                 	db	91	;'['
  1298  007FE3  4C                 	db	76	;'L'
  1299  007FE4  3D                 	db	61	;'='
  1300  007FE5  00                 	db	0
  1301  007FE6                     STR_60:
  1302  007FE6  54                 	db	84	;'T'
  1303  007FE7  43                 	db	67	;'C'
  1304  007FE8  50                 	db	80	;'P'
  1305  007FE9  00                 	db	0
  1306  007FEA                     STR_61:
  1307  007FEA  55                 	db	85	;'U'
  1308  007FEB  44                 	db	68	;'D'
  1309  007FEC  50                 	db	80	;'P'
  1310  007FED  00                 	db	0
  1311  007FEE                     STR_57:
  1312  007FEE  41                 	db	65	;'A'
  1313  007FEF  52                 	db	82	;'R'
  1314  007FF0  50                 	db	80	;'P'
  1315  007FF1  00                 	db	0
  1316  007FF2                     STR_19:
  1317  007FF2  20                 	db	32
  1318  007FF3  28                 	db	40
  1319  007FF4  00                 	db	0
  1320  007FF5                     STR_13:
  1321  007FF5  2D                 	db	45
  1322  007FF6  3E                 	db	62	;'>'
  1323  007FF7  00                 	db	0
  1324  007FF8                     STR_14:
  1325  007FF8  5D                 	db	93	;']'
  1326  007FF9  5B                 	db	91	;'['
  1327  007FFA  00                 	db	0
  1328  007FFB                     STR_20:
  1329  007FFB  29                 	db	41
  1330  007FFC  5D                 	db	93	;']'
  1331  007FFD  00                 	db	0
  1332  0000                     
  1333                           ; #config settings
  1334  007FFE  00                 	db	0	; dummy byte at the end
  1335  0000                     
  1336                           	psect	cinit
  1337  003B7A                     __pcinit:
  1338                           	opt stack 0
  1339  003B7A                     start_initialization:
  1340                           	opt stack 0
  1341  003B7A                     __initialization:
  1342                           	opt stack 0
  1343                           
  1344                           ; Initialize objects allocated to BANK2 (18 bytes)
  1345                           ; load TBLPTR registers with __pidataBANK2
  1346  003B7A  0E58               	movlw	low __pidataBANK2
  1347  003B7C  6EF6               	movwf	tblptrl,c
  1348  003B7E  0E4C               	movlw	high __pidataBANK2
  1349  003B80  6EF7               	movwf	tblptrh,c
  1350  003B82  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  1351  003B84  6EF8               	movwf	tblptru,c
  1352  003B86  EE02  F0C8         	lfsr	0,__pdataBANK2
  1353  003B8A  EE10 F012          	lfsr	1,18
  1354  003B8E                     copy_data0:
  1355  003B8E  0009               	tblrd		*+
  1356  003B90  CFF5 FFEE          	movff	tablat,postinc0
  1357  003B94  50E5               	movf	postdec1,w,c
  1358  003B96  50E1               	movf	fsr1l,w,c
  1359  003B98  E1FA               	bnz	copy_data0
  1360                           
  1361                           ; Initialize objects allocated to BANK1 (28 bytes)
  1362                           ; load TBLPTR registers with __pidataBANK1
  1363  003B9A  0ED4               	movlw	low __pidataBANK1
  1364  003B9C  6EF6               	movwf	tblptrl,c
  1365  003B9E  0E4B               	movlw	high __pidataBANK1
  1366  003BA0  6EF7               	movwf	tblptrh,c
  1367  003BA2  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1368  003BA4  6EF8               	movwf	tblptru,c
  1369  003BA6  EE01  F0E1         	lfsr	0,__pdataBANK1
  1370  003BAA  EE10 F01C          	lfsr	1,28
  1371  003BAE                     copy_data1:
  1372  003BAE  0009               	tblrd		*+
  1373  003BB0  CFF5 FFEE          	movff	tablat,postinc0
  1374  003BB4  50E5               	movf	postdec1,w,c
  1375  003BB6  50E1               	movf	fsr1l,w,c
  1376  003BB8  E1FA               	bnz	copy_data1
  1377                           
  1378                           ; Initialize objects allocated to COMRAM (2 bytes)
  1379                           ; load TBLPTR registers with __pidataCOMRAM
  1380  003BBA  0E00               	movlw	low __pidataCOMRAM
  1381  003BBC  6EF6               	movwf	tblptrl,c
  1382  003BBE  0E4D               	movlw	high __pidataCOMRAM
  1383  003BC0  6EF7               	movwf	tblptrh,c
  1384  003BC2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1385  003BC4  6EF8               	movwf	tblptru,c
  1386  003BC6  0009               	tblrd		*+	;fetch initializer
  1387  003BC8  CFF5 F04B          	movff	tablat,__pdataCOMRAM
  1388  003BCC  0009               	tblrd		*+	;fetch initializer
  1389  003BCE  CFF5 F04C          	movff	tablat,__pdataCOMRAM+1
  1390                           
  1391                           ; Clear objects allocated to BANK3 (162 bytes)
  1392  003BD2  EE03  F000         	lfsr	0,__pbssBANK3
  1393  003BD6  0EA2               	movlw	162
  1394  003BD8                     clear_0:
  1395  003BD8  6AEE               	clrf	postinc0,c
  1396  003BDA  06E8               	decf	wreg,f,c
  1397  003BDC  E1FD               	bnz	clear_0
  1398                           
  1399                           ; Clear objects allocated to BANK2 (200 bytes)
  1400  003BDE  EE02  F000         	lfsr	0,__pbssBANK2
  1401  003BE2  0EC8               	movlw	200
  1402  003BE4                     clear_1:
  1403  003BE4  6AEE               	clrf	postinc0,c
  1404  003BE6  06E8               	decf	wreg,f,c
  1405  003BE8  E1FD               	bnz	clear_1
  1406                           
  1407                           ; Clear objects allocated to BANK1 (36 bytes)
  1408  003BEA  EE01  F0BD         	lfsr	0,__pbssBANK1
  1409  003BEE  0E24               	movlw	36
  1410  003BF0                     clear_2:
  1411  003BF0  6AEE               	clrf	postinc0,c
  1412  003BF2  06E8               	decf	wreg,f,c
  1413  003BF4  E1FD               	bnz	clear_2
  1414                           
  1415                           ; Clear objects allocated to COMRAM (35 bytes)
  1416  003BF6  EE00  F028         	lfsr	0,__pbssCOMRAM
  1417  003BFA  0E23               	movlw	35
  1418  003BFC                     clear_3:
  1419  003BFC  6AEE               	clrf	postinc0,c
  1420  003BFE  06E8               	decf	wreg,f,c
  1421  003C00  E1FD               	bnz	clear_3
  1422  003C02                     end_of_initialization:
  1423                           	opt stack 0
  1424  003C02                     __end_of__initialization:
  1425                           	opt stack 0
  1426  003C02  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1427  003C04  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1428  003C06  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1429  003C08  6EF8               	movwf	tblptru,c
  1430  003C0A  0100               	movlb	0
  1431  003C0C  EF27  F007         	goto	_main	;jump to C main() function
  1432                           tblptru	equ	0xFF8
  1433                           tblptrh	equ	0xFF7
  1434                           tblptrl	equ	0xFF6
  1435                           tablat	equ	0xFF5
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1l	equ	0xFE1
  1440                           
  1441                           	psect	bssCOMRAM
  1442  000028                     __pbssCOMRAM:
  1443                           	opt stack 0
  1444  000028                     	ds	4
  1445  00002C                     _sourceIPAddress:
  1446                           	opt stack 0
  1447  00002C                     	ds	4
  1448  000030                     buttonHandler@debounceCounter:
  1449                           	opt stack 0
  1450  000030                     	ds	4
  1451  000034                     _numberToDisplay:
  1452                           	opt stack 0
  1453  000034                     	ds	4
  1454  000038                     _seconds:
  1455                           	opt stack 0
  1456  000038                     	ds	4
  1457  00003C                     sevenSegmentUpdate@digitsToDisplay:
  1458                           	opt stack 0
  1459  00003C                     	ds	3
  1460  00003F                     updateSeconds@prescaler_ms:
  1461                           	opt stack 0
  1462  00003F                     	ds	2
  1463  000041                     ethernetController_streamToTransmitBuffer@pointer:
  1464                           	opt stack 0
  1465  000041                     	ds	2
  1466  000043                     ethernetController_softReset@F5839:
  1467                           	opt stack 0
  1468  000043                     	ds	2
  1469  000045                     _nextPacketPointer:
  1470                           	opt stack 0
  1471  000045                     	ds	2
  1472  000047                     sevenSegmentUpdate@digitPointer:
  1473                           	opt stack 0
  1474  000047                     	ds	1
  1475  000048                     buttonHandler@newState:
  1476                           	opt stack 0
  1477  000048                     	ds	1
  1478  000049                     buttonHandler@oldState:
  1479                           	opt stack 0
  1480  000049                     	ds	1
  1481  00004A                     	ds	1
  1482                           tblptru	equ	0xFF8
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           postdec1	equ	0xFE5
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  00004B                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  00004B                     ethernetController_softReset@F5837:
  1495                           	opt stack 0
  1496  00004B                     	ds	2
  1497                           tblptru	equ	0xFF8
  1498                           tblptrh	equ	0xFF7
  1499                           tblptrl	equ	0xFF6
  1500                           tablat	equ	0xFF5
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           postdec1	equ	0xFE5
  1504                           fsr1l	equ	0xFE1
  1505                           
  1506                           	psect	bssBANK1
  1507  0001BD                     __pbssBANK1:
  1508                           	opt stack 0
  1509  0001BD                     ipv4_sendFrame@oldTime:
  1510                           	opt stack 0
  1511  0001BD                     	ds	4
  1512  0001C1                     ethernet_rxGetNewFrame@counter:
  1513                           	opt stack 0
  1514  0001C1                     	ds	4
  1515  0001C5                     ipv4_sendFrame@requestCounter:
  1516                           	opt stack 0
  1517  0001C5                     	ds	1
  1518  0001C6                     hexToString@number:
  1519                           	opt stack 0
  1520  0001C6                     	ds	10
  1521  0001D0                     intToString@number:
  1522                           	opt stack 0
  1523  0001D0                     	ds	10
  1524  0001DA                     ethernetController_getRSV@temp:
  1525                           	opt stack 0
  1526  0001DA                     	ds	6
  1527  0001E0                     _buttonState:
  1528                           	opt stack 0
  1529  0001E0                     	ds	1
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1l	equ	0xFE1
  1538                           
  1539                           	psect	dataBANK1
  1540  0001E1                     __pdataBANK1:
  1541                           	opt stack 0
  1542  0001E1                     _sevenSegCharacters:
  1543                           	opt stack 0
  1544  0001E1                     	ds	12
  1545  0001ED                     ipAdressToString@address:
  1546                           	opt stack 0
  1547  0001ED                     	ds	16
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           postinc0	equ	0xFEE
  1553                           wreg	equ	0xFE8
  1554                           postdec1	equ	0xFE5
  1555                           fsr1l	equ	0xFE1
  1556                           
  1557                           	psect	bssBANK2
  1558  000200                     __pbssBANK2:
  1559                           	opt stack 0
  1560  000200                     _occupiedMemory:
  1561                           	opt stack 0
  1562  000200                     	ds	72
  1563  000248                     printEthernetState@oldState:
  1564                           	opt stack 0
  1565  000248                     	ds	15
  1566  000257                     _stack:
  1567                           	opt stack 0
  1568  000257                     	ds	113
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1l	equ	0xFE1
  1577                           
  1578                           	psect	dataBANK2
  1579  0002C8                     __pdataBANK2:
  1580                           	opt stack 0
  1581  0002C8                     macToString@F5802:
  1582                           	opt stack 0
  1583  0002C8                     	ds	18
  1584                           tblptru	equ	0xFF8
  1585                           tblptrh	equ	0xFF7
  1586                           tblptrl	equ	0xFF6
  1587                           tablat	equ	0xFF5
  1588                           postinc0	equ	0xFEE
  1589                           wreg	equ	0xFE8
  1590                           postdec1	equ	0xFE5
  1591                           fsr1l	equ	0xFE1
  1592                           
  1593                           	psect	bssBANK3
  1594  000300                     __pbssBANK3:
  1595                           	opt stack 0
  1596  000300                     _ARP_table:
  1597                           	opt stack 0
  1598  000300                     	ds	112
  1599  000370                     arpEntryToString@string:
  1600                           	opt stack 0
  1601  000370                     	ds	50
  1602                           tblptru	equ	0xFF8
  1603                           tblptrh	equ	0xFF7
  1604                           tblptrl	equ	0xFF6
  1605                           tablat	equ	0xFF5
  1606                           postinc0	equ	0xFEE
  1607                           wreg	equ	0xFE8
  1608                           postdec1	equ	0xFE5
  1609                           fsr1l	equ	0xFE1
  1610                           
  1611                           	psect	cstackBANK1
  1612  000100                     __pcstackBANK1:
  1613                           	opt stack 0
  1614  000100                     ARP_sendRequest@senderMAC:
  1615                           	opt stack 0
  1616  000100                     ARP_replyIfNeeded@request:
  1617                           	opt stack 0
  1618                           
  1619                           ; 32 bytes @ 0x0
  1620  000100                     	ds	6
  1621  000106                     ARP_sendRequest@senderIP:
  1622                           	opt stack 0
  1623                           
  1624                           ; 4 bytes @ 0x6
  1625  000106                     	ds	4
  1626  00010A                     ARP_sendRequest@targetIP:
  1627                           	opt stack 0
  1628                           
  1629                           ; 4 bytes @ 0xA
  1630  00010A                     	ds	4
  1631  00010E                     ARP_sendRequest@targetMAC:
  1632                           	opt stack 0
  1633                           
  1634                           ; 6 bytes @ 0xE
  1635  00010E                     	ds	6
  1636  000114                     ARP_sendRequest@request:
  1637                           	opt stack 0
  1638                           
  1639                           ; 32 bytes @ 0x14
  1640  000114                     	ds	12
  1641  000120                     ARP_replyIfNeeded@senderMAC:
  1642                           	opt stack 0
  1643                           
  1644                           ; 6 bytes @ 0x20
  1645  000120                     	ds	6
  1646  000126                     ARP_replyIfNeeded@targetMAC:
  1647                           	opt stack 0
  1648                           
  1649                           ; 6 bytes @ 0x26
  1650  000126                     	ds	6
  1651  00012C                     ARP_replyIfNeeded@senderIP:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x2C
  1655  00012C                     	ds	4
  1656  000130                     ARP_replyIfNeeded@targetIP:
  1657                           	opt stack 0
  1658                           
  1659                           ; 4 bytes @ 0x30
  1660  000130                     	ds	4
  1661  000134                     ?_ipv4_sendFrame:
  1662                           	opt stack 0
  1663  000134                     ARP_replyIfNeeded@myIP:
  1664                           	opt stack 0
  1665  000134                     ipv4_sendFrame@ipPacket:
  1666                           	opt stack 0
  1667                           
  1668                           ; 62 bytes @ 0x34
  1669  000134                     	ds	4
  1670  000138                     ARP_replyIfNeeded@reply:
  1671                           	opt stack 0
  1672                           
  1673                           ; 32 bytes @ 0x38
  1674  000138                     	ds	32
  1675  000158                     ARP_handleNewPacket@arp:
  1676                           	opt stack 0
  1677                           
  1678                           ; 32 bytes @ 0x58
  1679  000158                     	ds	26
  1680  000172                     ??_ipv4_sendFrame:
  1681                           
  1682                           ; 1 bytes @ 0x72
  1683  000172                     	ds	6
  1684  000178                     ?_ethernet_rxGetNewFrame:
  1685                           	opt stack 0
  1686  000178                     ethernet_rxGetNewFrame@frame:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x78
  1690  000178                     	ds	3
  1691  00017B                     ??_ethernet_rxGetNewFrame:
  1692                           
  1693                           ; 1 bytes @ 0x7B
  1694  00017B                     	ds	3
  1695  00017E                     ipv4_sendFrame@numberOfRequests:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x7E
  1699  00017E                     	ds	1
  1700  00017F                     ipv4_sendFrame@requestTimeout:
  1701                           	opt stack 0
  1702                           
  1703                           ; 1 bytes @ 0x7F
  1704  00017F                     	ds	1
  1705  000180                     ipv4_sendFrame@index:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0x80
  1709  000180                     	ds	1
  1710  000181                     ipv4_sendFrame@err:
  1711                           	opt stack 0
  1712                           
  1713                           ; 3 bytes @ 0x81
  1714  000181                     	ds	3
  1715  000184                     handleStackBackgroundTasks@stack:
  1716                           	opt stack 0
  1717                           
  1718                           ; 2 bytes @ 0x84
  1719  000184                     	ds	2
  1720  000186                     
  1721                           ; 1 bytes @ 0x86
  1722  000186                     	ds	2
  1723  000188                     ??_main:
  1724                           
  1725                           ; 1 bytes @ 0x88
  1726  000188                     	ds	3
  1727  00018B                     main@prescaler:
  1728                           	opt stack 0
  1729                           
  1730                           ; 4 bytes @ 0x8B
  1731  00018B                     	ds	4
  1732  00018F                     main@headerBuf:
  1733                           	opt stack 0
  1734                           
  1735                           ; 32 bytes @ 0x8F
  1736  00018F                     	ds	32
  1737  0001AF                     _main$2013:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0xAF
  1741  0001AF                     	ds	2
  1742  0001B1                     main@i:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0xB1
  1746  0001B1                     	ds	1
  1747  0001B2                     main@err:
  1748                           	opt stack 0
  1749                           
  1750                           ; 3 bytes @ 0xB2
  1751  0001B2                     	ds	3
  1752  0001B5                     main@IPdestination:
  1753                           	opt stack 0
  1754                           
  1755                           ; 4 bytes @ 0xB5
  1756  0001B5                     	ds	4
  1757  0001B9                     main@IPsource:
  1758                           	opt stack 0
  1759                           
  1760                           ; 4 bytes @ 0xB9
  1761  0001B9                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1l	equ	0xFE1
  1770                           
  1771                           	psect	cstackBANK0
  1772  000060                     __pcstackBANK0:
  1773                           	opt stack 0
  1774  000060                     ?_ENC424J600_getNextPacketPointer:
  1775                           	opt stack 0
  1776  000060                     ?_ethernetController_getDeviceName:
  1777                           	opt stack 0
  1778  000060                     ?_etherTypeToString:
  1779                           	opt stack 0
  1780  000060                     ?_ipProtocolToString:
  1781                           	opt stack 0
  1782  000060                     ?___wmul:
  1783                           	opt stack 0
  1784  000060                     ?___lwdiv:
  1785                           	opt stack 0
  1786  000060                     ?___lwmod:
  1787                           	opt stack 0
  1788  000060                     ?_ipv4_getIPSourceAddress:
  1789                           	opt stack 0
  1790  000060                     ?_getSeconds:
  1791                           	opt stack 0
  1792  000060                     ?___llmod:
  1793                           	opt stack 0
  1794  000060                     ?_ENC424J600_updateReceiveStatusVector:
  1795                           	opt stack 0
  1796  000060                     ?_ARP_getEntryFromTable:
  1797                           	opt stack 0
  1798  000060                     entireMemoryEmpty@i:
  1799                           	opt stack 0
  1800  000060                     entireMemoryFull@i:
  1801                           	opt stack 0
  1802  000060                     memory_txFrameClear@index:
  1803                           	opt stack 0
  1804  000060                     hexToChar@val:
  1805                           	opt stack 0
  1806  000060                     ENC424J600_writeSPI@data:
  1807                           	opt stack 0
  1808  000060                     ENC424J600_readSPI@data:
  1809                           	opt stack 0
  1810  000060                     ENC424J600_setNextPacketPointer@ptr:
  1811                           	opt stack 0
  1812  000060                     ENC424J600_updateReceiveStatusVector@rsv:
  1813                           	opt stack 0
  1814  000060                     mac_setToBroadcast@mac:
  1815                           	opt stack 0
  1816  000060                     mac_isAllZero@mac:
  1817                           	opt stack 0
  1818  000060                     mac_cmp@a:
  1819                           	opt stack 0
  1820  000060                     mac_setAllZero@mac:
  1821                           	opt stack 0
  1822  000060                     etherTypeToString@ethertype:
  1823                           	opt stack 0
  1824  000060                     ipv4_calculateHeaderChecksum@header:
  1825                           	opt stack 0
  1826  000060                     ipv4_cmp@a:
  1827                           	opt stack 0
  1828  000060                     ipv4_isAllZero@ip:
  1829                           	opt stack 0
  1830  000060                     ipv4_setToAllZero@ip:
  1831                           	opt stack 0
  1832  000060                     ___wmul@multiplier:
  1833                           	opt stack 0
  1834  000060                     ___lwdiv@dividend:
  1835                           	opt stack 0
  1836  000060                     ___lwmod@dividend:
  1837                           	opt stack 0
  1838  000060                     ipv4_setIPSourceAddress@ip:
  1839                           	opt stack 0
  1840  000060                     ___llmod@dividend:
  1841                           	opt stack 0
  1842  000060                     checkForOverlapSwitched@a:
  1843                           	opt stack 0
  1844  000060                     ipv4_writeHeaderIntoBuffer@header:
  1845                           	opt stack 0
  1846                           
  1847                           ; 23 bytes @ 0x0
  1848  000060                     	ds	1
  1849  000061                     ?_hexToString:
  1850                           	opt stack 0
  1851  000061                     hexToString@val:
  1852                           	opt stack 0
  1853                           
  1854                           ; 4 bytes @ 0x1
  1855  000061                     	ds	1
  1856  000062                     ??_ENC424J600_writeSPI:
  1857  000062                     ??_ENC424J600_readSPI:
  1858  000062                     ??_etherTypeToString:
  1859  000062                     ??_ipv4_calculateHeaderChecksum:
  1860  000062                     ?_ethernetController_getNextPacketPointer:
  1861                           	opt stack 0
  1862  000062                     mac_setToBroadcast@i:
  1863                           	opt stack 0
  1864  000062                     mac_isAllZero@i:
  1865                           	opt stack 0
  1866  000062                     mac_setAllZero@i:
  1867                           	opt stack 0
  1868  000062                     ipProtocolToString@protocol:
  1869                           	opt stack 0
  1870  000062                     ipv4_isAllZero@i:
  1871                           	opt stack 0
  1872  000062                     ipv4_setToAllZero@i:
  1873                           	opt stack 0
  1874  000062                     mac_cmp@b:
  1875                           	opt stack 0
  1876  000062                     ipv4_cmp@b:
  1877                           	opt stack 0
  1878  000062                     ___wmul@multiplicand:
  1879                           	opt stack 0
  1880  000062                     ___lwdiv@divisor:
  1881                           	opt stack 0
  1882  000062                     ___lwmod@divisor:
  1883                           	opt stack 0
  1884  000062                     ethernetController_getDeviceName@string:
  1885                           	opt stack 0
  1886                           
  1887                           ; 11 bytes @ 0x2
  1888  000062                     	ds	2
  1889  000064                     ___lwdiv@counter:
  1890                           	opt stack 0
  1891  000064                     ___lwmod@counter:
  1892                           	opt stack 0
  1893  000064                     ___wmul@product:
  1894                           	opt stack 0
  1895  000064                     ___llmod@divisor:
  1896                           	opt stack 0
  1897  000064                     ARP_setNewEntry@mac:
  1898                           	opt stack 0
  1899                           
  1900                           ; 6 bytes @ 0x4
  1901  000064                     	ds	1
  1902  000065                     ??_ENC424J600_updateReceiveStatusVector:
  1903  000065                     ??_hexToString:
  1904  000065                     ___lwdiv@quotient:
  1905                           	opt stack 0
  1906                           
  1907                           ; 2 bytes @ 0x5
  1908  000065                     	ds	1
  1909  000066                     ?___lldiv:
  1910                           	opt stack 0
  1911  000066                     mac_cmp@i:
  1912                           	opt stack 0
  1913  000066                     ipv4_cmp@i:
  1914                           	opt stack 0
  1915  000066                     ENC424J600_writeSPI@timeoutCounter:
  1916                           	opt stack 0
  1917  000066                     ENC424J600_readSPI@timeoutCounter:
  1918                           	opt stack 0
  1919  000066                     ___lldiv@dividend:
  1920                           	opt stack 0
  1921                           
  1922                           ; 4 bytes @ 0x6
  1923  000066                     	ds	1
  1924  000067                     ?_ipAdressToString:
  1925                           	opt stack 0
  1926  000067                     ARP_getEntryFromTable@index:
  1927                           	opt stack 0
  1928  000067                     ipAdressToString@ip:
  1929                           	opt stack 0
  1930  000067                     ARP_checkForEntry@ip:
  1931                           	opt stack 0
  1932                           
  1933                           ; 4 bytes @ 0x7
  1934  000067                     	ds	1
  1935  000068                     ___llmod@counter:
  1936                           	opt stack 0
  1937                           
  1938                           ; 1 bytes @ 0x8
  1939  000068                     	ds	1
  1940  000069                     hexToString@pointer:
  1941                           	opt stack 0
  1942  000069                     checkForOverlapSwitched@b:
  1943                           	opt stack 0
  1944                           
  1945                           ; 9 bytes @ 0x9
  1946  000069                     	ds	1
  1947  00006A                     ENC424J600_writeSingleByte@opcode:
  1948                           	opt stack 0
  1949  00006A                     ENC424J600_writeControlRegisterUnbanked@data:
  1950                           	opt stack 0
  1951  00006A                     ENC424J600_readControlRegisterUnbanked@data:
  1952                           	opt stack 0
  1953  00006A                     ENC424J600_setGPDATAWritePointer@addr:
  1954                           	opt stack 0
  1955  00006A                     ENC424J600_setERXDATAReadPointer@addr:
  1956                           	opt stack 0
  1957  00006A                     ARP_setNewEntry@ip:
  1958                           	opt stack 0
  1959  00006A                     ___lldiv@divisor:
  1960                           	opt stack 0
  1961                           
  1962                           ; 4 bytes @ 0xA
  1963  00006A                     	ds	1
  1964  00006B                     ??_ipAdressToString:
  1965  00006B                     ARP_checkForEntry@index:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0xB
  1969  00006B                     	ds	1
  1970  00006C                     ENC424J600_writeControlRegisterUnbanked@addr:
  1971                           	opt stack 0
  1972  00006C                     ENC424J600_readControlRegisterUnbanked@addr:
  1973                           	opt stack 0
  1974  00006C                     ENC424J600_setGPDATAWritePointer@opcode:
  1975                           	opt stack 0
  1976  00006C                     ENC424J600_setERXDATAReadPointer@opcode:
  1977                           	opt stack 0
  1978  00006C                     ENC424J600_updateReceiveStatusVector@receiveStatusVector:
  1979                           	opt stack 0
  1980                           
  1981                           ; 5 bytes @ 0xC
  1982  00006C                     	ds	1
  1983  00006D                     ??_ARP_checkForEntry:
  1984  00006D                     ENC424J600_writeControlRegisterUnbanked@opcode:
  1985                           	opt stack 0
  1986  00006D                     ENC424J600_readControlRegisterUnbanked@opcode:
  1987                           	opt stack 0
  1988  00006D                     ENC424J600_setGPDATAWritePointer@lowByte:
  1989                           	opt stack 0
  1990  00006D                     ENC424J600_setERXDATAReadPointer@lowByte:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0xD
  1994  00006D                     	ds	1
  1995  00006E                     ??_ENC424J600_clearInterruptFlag:
  1996  00006E                     ?_ENC424J600_getInterruptFlags:
  1997                           	opt stack 0
  1998  00006E                     ?_ethernetController_checkDeviceId:
  1999                           	opt stack 0
  2000  00006E                     ?_ethernetController_getMacAddress:
  2001                           	opt stack 0
  2002  00006E                     ethernetController_getSiliconRevision@data:
  2003                           	opt stack 0
  2004  00006E                     ethernetController_setLEDConfig@conf:
  2005                           	opt stack 0
  2006  00006E                     ENC424J600_getPacketCount@lowByte:
  2007                           	opt stack 0
  2008  00006E                     ENC424J600_setGPDATAWritePointer@highByte:
  2009                           	opt stack 0
  2010  00006E                     ENC424J600_setERXDATAReadPointer@highByte:
  2011                           	opt stack 0
  2012  00006E                     ENC424J600_enableAutoMACInsertion@temp:
  2013                           	opt stack 0
  2014  00006E                     ENC424J600_readPHYRegister@data:
  2015                           	opt stack 0
  2016  00006E                     ENC424J600_setTXLength@len:
  2017                           	opt stack 0
  2018  00006E                     ENC424J600_setTXStartAddress@addr:
  2019                           	opt stack 0
  2020  00006E                     ENC424J600_setRXBufferStartAddress@addr:
  2021                           	opt stack 0
  2022  00006E                     ENC424J600_setRXTailPointer@addr:
  2023                           	opt stack 0
  2024  00006E                     ARP_setNewEntry@timestamp:
  2025                           	opt stack 0
  2026  00006E                     ipv4_calculateHeaderChecksum@sum:
  2027                           	opt stack 0
  2028  00006E                     ___lldiv@quotient:
  2029                           	opt stack 0
  2030                           
  2031                           ; 4 bytes @ 0xE
  2032  00006E                     	ds	1
  2033  00006F                     ??_ethernetController_updateNextPacketPointer:
  2034  00006F                     ?_ethernetController_getEtherTypeField:
  2035                           	opt stack 0
  2036  00006F                     ?_ethernetController_getSourceMACAddress:
  2037                           	opt stack 0
  2038  00006F                     ethernetController_setLEDConfig@LED:
  2039                           	opt stack 0
  2040  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  2041                           	opt stack 0
  2042  00006F                     ipAdressToString@ones:
  2043                           	opt stack 0
  2044  00006F                     ethernetController_writeDestinationMACAddress@addr:
  2045                           	opt stack 0
  2046  00006F                     ethernetController_streamToTransmitBuffer@field:
  2047                           	opt stack 0
  2048  00006F                     ethernetController_getSourceMACAddress@field:
  2049                           	opt stack 0
  2050  00006F                     ethernetController_getEtherTypeField@field:
  2051                           	opt stack 0
  2052                           
  2053                           ; 9 bytes @ 0xF
  2054  00006F                     	ds	1
  2055  000070                     ??_ENC424J600_getInterruptFlags:
  2056  000070                     ??_ENC424J600_readPHYRegister:
  2057  000070                     ethernetController_setLEDConfig@data:
  2058                           	opt stack 0
  2059  000070                     ENC424J600_setTXLength@lowByte:
  2060                           	opt stack 0
  2061  000070                     ENC424J600_setTXStartAddress@lowByte:
  2062                           	opt stack 0
  2063  000070                     ENC424J600_setRXBufferStartAddress@lowByte:
  2064                           	opt stack 0
  2065  000070                     ENC424J600_setRXTailPointer@lowByte:
  2066                           	opt stack 0
  2067  000070                     ENC424J600_clearInterruptFlag@flag:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x10
  2071  000070                     	ds	1
  2072  000071                     ?_ethernetController_getRSV:
  2073                           	opt stack 0
  2074  000071                     ethernetController_checkDeviceId@data:
  2075                           	opt stack 0
  2076  000071                     ENC424J600_setTXLength@highByte:
  2077                           	opt stack 0
  2078  000071                     ENC424J600_setTXStartAddress@highByte:
  2079                           	opt stack 0
  2080  000071                     ENC424J600_setRXBufferStartAddress@highByte:
  2081                           	opt stack 0
  2082  000071                     ENC424J600_setRXTailPointer@highByte:
  2083                           	opt stack 0
  2084  000071                     ENC424J600_clearInterruptFlag@temp:
  2085                           	opt stack 0
  2086  000071                     ethernetController_getRSV@address:
  2087                           	opt stack 0
  2088  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  2089                           	opt stack 0
  2090                           
  2091                           ; 9 bytes @ 0x11
  2092  000071                     	ds	1
  2093  000072                     ethernetController_clearInterruptFlag@flag:
  2094                           	opt stack 0
  2095  000072                     ___lldiv@counter:
  2096                           	opt stack 0
  2097  000072                     ethernetController_streamFromRXBuffer@startAddress:
  2098                           	opt stack 0
  2099  000072                     ethernetController_dropPacket@frame:
  2100                           	opt stack 0
  2101  000072                     ethernetController_checkDeviceId@err:
  2102                           	opt stack 0
  2103  000072                     ethernetController_sendPacket@field:
  2104                           	opt stack 0
  2105  000072                     checkForOverlap@a:
  2106                           	opt stack 0
  2107                           
  2108                           ; 9 bytes @ 0x12
  2109  000072                     	ds	1
  2110  000073                     ?_intToString:
  2111                           	opt stack 0
  2112  000073                     intToString@val:
  2113                           	opt stack 0
  2114  000073                     ipAdressToString@tens:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x13
  2118  000073                     	ds	1
  2119  000074                     ethernetController_streamFromRXBuffer@startEnd:
  2120                           	opt stack 0
  2121  000074                     ethernetController_getMacAddress@mac:
  2122                           	opt stack 0
  2123                           
  2124                           ; 6 bytes @ 0x14
  2125  000074                     	ds	1
  2126  000075                     ethernetController_streamFromRXBuffer@opcode:
  2127                           	opt stack 0
  2128  000075                     ARP_checkForEntry@i:
  2129                           	opt stack 0
  2130  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  2131                           	opt stack 0
  2132  000075                     ethernetController_writeDestinationMACAddress@field:
  2133                           	opt stack 0
  2134                           
  2135                           ; 9 bytes @ 0x15
  2136  000075                     	ds	1
  2137  000076                     ethernetController_getRSV@opcode:
  2138                           	opt stack 0
  2139  000076                     ethernetController_streamFromRXBuffer@temp:
  2140                           	opt stack 0
  2141  000076                     ENC424J600_readPHYRegister@addr:
  2142                           	opt stack 0
  2143  000076                     ENC424J600_getInterruptFlags@low:
  2144                           	opt stack 0
  2145  000076                     ARP_setNewEntry@maxSeconds:
  2146                           	opt stack 0
  2147                           
  2148                           ; 4 bytes @ 0x16
  2149  000076                     	ds	1
  2150  000077                     ??_intToString:
  2151  000077                     ?_ipv4_parseHeader:
  2152                           	opt stack 0
  2153  000077                     ?_ARP_parseFromRXBuffer:
  2154                           	opt stack 0
  2155  000077                     ethernetController_getRSV@i:
  2156                           	opt stack 0
  2157  000077                     ethernetController_updateNextPacketPointer@opcode:
  2158                           	opt stack 0
  2159  000077                     ENC424J600_readPHYRegister@PHYaddress:
  2160                           	opt stack 0
  2161  000077                     ENC424J600_getInterruptFlags@high:
  2162                           	opt stack 0
  2163  000077                     ARP_parseFromRXBuffer@frame:
  2164                           	opt stack 0
  2165  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  2166                           	opt stack 0
  2167  000077                     ipv4_parseHeader@field:
  2168                           	opt stack 0
  2169  000077                     ipAdressToString@hundreds:
  2170                           	opt stack 0
  2171                           
  2172                           ; 4 bytes @ 0x17
  2173  000077                     	ds	1
  2174  000078                     ??_ethernetController_streamToTransmitBuffer:
  2175  000078                     ??_ethernetController_getEtherTypeField:
  2176  000078                     ?_ethernetController_pollInterruptFlags:
  2177                           	opt stack 0
  2178  000078                     ethernetController_getSourceMACAddress@opcode:
  2179                           	opt stack 0
  2180  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  2181                           	opt stack 0
  2182  000078                     ENC424J600_readPHYRegister@unusedBits:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x18
  2186  000078                     	ds	1
  2187  000079                     ??_ipv4_writeHeaderIntoBuffer:
  2188  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  2189                           	opt stack 0
  2190  000079                     ENC424J600_readPHYRegister@timeoutCounter:
  2191                           	opt stack 0
  2192  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  2193                           	opt stack 0
  2194                           
  2195                           ; 6 bytes @ 0x19
  2196  000079                     	ds	1
  2197  00007A                     ??_ethernetController_pollInterruptFlags:
  2198  00007A                     ?_macToString:
  2199                           	opt stack 0
  2200  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  2201                           	opt stack 0
  2202  00007A                     ARP_setNewEntry@oldestIndex:
  2203                           	opt stack 0
  2204  00007A                     macToString@addr:
  2205                           	opt stack 0
  2206                           
  2207                           ; 6 bytes @ 0x1A
  2208  00007A                     	ds	1
  2209  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  2210                           	opt stack 0
  2211  00007B                     ipAdressToString@pointer:
  2212                           	opt stack 0
  2213  00007B                     ARP_setNewEntry@i:
  2214                           	opt stack 0
  2215  00007B                     ethernetController_pollInterruptFlags@flags:
  2216                           	opt stack 0
  2217  00007B                     checkForOverlap@b:
  2218                           	opt stack 0
  2219                           
  2220                           ; 9 bytes @ 0x1B
  2221  00007B                     	ds	1
  2222  00007C                     ethernetController_streamToTransmitBuffer@data:
  2223                           	opt stack 0
  2224  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  2225                           	opt stack 0
  2226  00007C                     ipAdressToString@i:
  2227                           	opt stack 0
  2228  00007C                     ethernetController_getEtherTypeField@ethertype:
  2229                           	opt stack 0
  2230  00007C                     ARP_initTable@mac:
  2231                           	opt stack 0
  2232                           
  2233                           ; 6 bytes @ 0x1C
  2234  00007C                     	ds	1
  2235  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  2236                           	opt stack 0
  2237  00007D                     ENC424J600_readPHYRegister@lowByte:
  2238                           	opt stack 0
  2239  00007D                     ethernetController_pollInterruptFlags@reg:
  2240                           	opt stack 0
  2241                           
  2242                           ; 2 bytes @ 0x1D
  2243  00007D                     	ds	1
  2244  00007E                     ethernetController_getEtherTypeField@opcode:
  2245                           	opt stack 0
  2246  00007E                     ENC424J600_readPHYRegister@highByte:
  2247                           	opt stack 0
  2248  00007E                     ethernetController_writeDestinationMACAddress@data:
  2249                           	opt stack 0
  2250  00007E                     ipv4_streamToTransmissionBuffer@packet:
  2251                           	opt stack 0
  2252                           
  2253                           ; 62 bytes @ 0x1E
  2254  00007E                     	ds	1
  2255  00007F                     ethernetController_getSourceMACAddress@temp:
  2256                           	opt stack 0
  2257  00007F                     ethernetController_getEtherTypeField@lowByte:
  2258                           	opt stack 0
  2259  00007F                     ENC424J600_readPHYRegister@temp:
  2260                           	opt stack 0
  2261                           
  2262                           ; 1 bytes @ 0x1F
  2263  00007F                     	ds	1
  2264  000080                     ??_macToString:
  2265  000080                     ethernetController_getSourceMACAddress@i:
  2266                           	opt stack 0
  2267  000080                     ethernetController_getEtherTypeField@highByte:
  2268                           	opt stack 0
  2269  000080                     ethernetController_updateLinkStatus@state:
  2270                           	opt stack 0
  2271                           
  2272                           ; 2 bytes @ 0x20
  2273  000080                     	ds	1
  2274  000081                     intToString@tens:
  2275                           	opt stack 0
  2276  000081                     macToString@address:
  2277                           	opt stack 0
  2278                           
  2279                           ; 18 bytes @ 0x21
  2280  000081                     	ds	1
  2281  000082                     ethernetController_updateLinkStatus@temp:
  2282                           	opt stack 0
  2283  000082                     intToString@ones:
  2284                           	opt stack 0
  2285  000082                     ARP_initTable@ip:
  2286                           	opt stack 0
  2287                           
  2288                           ; 4 bytes @ 0x22
  2289  000082                     	ds	1
  2290  000083                     ethernetController_updateLinkStatus@temp16:
  2291                           	opt stack 0
  2292  000083                     intToString@hundreds:
  2293                           	opt stack 0
  2294                           
  2295                           ; 1 bytes @ 0x23
  2296  000083                     	ds	1
  2297  000084                     ?_memory_txFrameRequest:
  2298                           	opt stack 0
  2299  000084                     ethernetController_writeDestinationMACAddress@opcode:
  2300                           	opt stack 0
  2301  000084                     intToString@thousands:
  2302                           	opt stack 0
  2303  000084                     memory_txFrameRequest@length:
  2304                           	opt stack 0
  2305                           
  2306                           ; 2 bytes @ 0x24
  2307  000084                     	ds	1
  2308  000085                     ethernetController_writeDestinationMACAddress@i_638:
  2309                           	opt stack 0
  2310  000085                     intToString@tenthousands:
  2311                           	opt stack 0
  2312                           
  2313                           ; 1 bytes @ 0x25
  2314  000085                     	ds	1
  2315  000086                     ethernetController_writeDestinationMACAddress@i:
  2316                           	opt stack 0
  2317  000086                     intToString@pointer:
  2318                           	opt stack 0
  2319  000086                     ARP_initTable@i:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x26
  2323  000086                     	ds	7
  2324  00008D                     ??_memory_txFrameRequest:
  2325                           
  2326                           ; 1 bytes @ 0x2D
  2327  00008D                     	ds	1
  2328  00008E                     ??_ipv4_parseHeader:
  2329                           
  2330                           ; 1 bytes @ 0x2E
  2331  00008E                     	ds	1
  2332  00008F                     ipv4_parseHeader@i:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x2F
  2336  00008F                     	ds	1
  2337  000090                     ipv4_parseHeader@i_3227:
  2338                           	opt stack 0
  2339                           
  2340                           ; 1 bytes @ 0x30
  2341  000090                     	ds	1
  2342  000091                     ipv4_parseHeader@temp:
  2343                           	opt stack 0
  2344                           
  2345                           ; 1 bytes @ 0x31
  2346  000091                     	ds	1
  2347  000092                     ipv4_parseHeader@ip:
  2348                           	opt stack 0
  2349                           
  2350                           ; 23 bytes @ 0x32
  2351  000092                     	ds	1
  2352  000093                     macToString@firstDigit:
  2353                           	opt stack 0
  2354  000093                     _memory_txFrameRequest$1158:
  2355                           	opt stack 0
  2356                           
  2357                           ; 2 bytes @ 0x33
  2358  000093                     	ds	1
  2359  000094                     macToString@secondDigit:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x34
  2363  000094                     	ds	1
  2364  000095                     memory_txFrameRequest@fNoOverlapMarker:
  2365                           	opt stack 0
  2366  000095                     macToString@i:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x35
  2370  000095                     	ds	1
  2371  000096                     memory_txFrameRequest@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 1 bytes @ 0x36
  2375  000096                     	ds	1
  2376  000097                     ??_ARP_parseFromRXBuffer:
  2377  000097                     memory_txFrameRequest@i_1162:
  2378                           	opt stack 0
  2379  000097                     macToString@j:
  2380                           	opt stack 0
  2381                           
  2382                           ; 1 bytes @ 0x37
  2383  000097                     	ds	1
  2384  000098                     UARTTransmitText@str:
  2385                           	opt stack 0
  2386  000098                     memory_txFrameRequest@field:
  2387                           	opt stack 0
  2388                           
  2389                           ; 9 bytes @ 0x38
  2390  000098                     	ds	2
  2391  00009A                     ?_ethernetController_softReset:
  2392                           	opt stack 0
  2393  00009A                     ARP_parseFromRXBuffer@i:
  2394                           	opt stack 0
  2395  00009A                     ipv4_checkHeaderChecksum@header:
  2396                           	opt stack 0
  2397  00009A                     printErrorMessage@err:
  2398                           	opt stack 0
  2399  00009A                     UARTTransmitInt@val:
  2400                           	opt stack 0
  2401  00009A                     printEthernetState@state:
  2402                           	opt stack 0
  2403                           
  2404                           ; 15 bytes @ 0x3A
  2405  00009A                     	ds	1
  2406  00009B                     ARP_parseFromRXBuffer@i_2603:
  2407                           	opt stack 0
  2408                           
  2409                           ; 1 bytes @ 0x3B
  2410  00009B                     	ds	1
  2411  00009C                     ??_ipv4_checkHeaderChecksum:
  2412  00009C                     ARP_parseFromRXBuffer@i_2604:
  2413                           	opt stack 0
  2414                           
  2415                           ; 1 bytes @ 0x3C
  2416  00009C                     	ds	1
  2417  00009D                     ??_ethernetController_softReset:
  2418  00009D                     ??_printErrorMessage:
  2419  00009D                     ARP_parseFromRXBuffer@i_2605:
  2420                           	opt stack 0
  2421                           
  2422                           ; 1 bytes @ 0x3D
  2423  00009D                     	ds	1
  2424  00009E                     ethernetController_softReset@comFailCount:
  2425                           	opt stack 0
  2426  00009E                     ARP_parseFromRXBuffer@offset:
  2427                           	opt stack 0
  2428  00009E                     ipv4_checkHeaderChecksum@testHeader:
  2429                           	opt stack 0
  2430                           
  2431                           ; 23 bytes @ 0x3E
  2432  00009E                     	ds	1
  2433  00009F                     ethernetController_softReset@dataToSend:
  2434                           	opt stack 0
  2435                           
  2436                           ; 2 bytes @ 0x3F
  2437  00009F                     	ds	1
  2438  0000A0                     ARP_parseFromRXBuffer@arp:
  2439                           	opt stack 0
  2440                           
  2441                           ; 32 bytes @ 0x40
  2442  0000A0                     	ds	1
  2443  0000A1                     memory_txFrameRequest@freeIndex:
  2444                           	opt stack 0
  2445  0000A1                     ethernetController_softReset@receivedData:
  2446                           	opt stack 0
  2447                           
  2448                           ; 2 bytes @ 0x41
  2449  0000A1                     	ds	1
  2450  0000A2                     ethernet_txFrameRequest@frame:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x42
  2454  0000A2                     	ds	1
  2455  0000A3                     ethernetController_softReset@err:
  2456                           	opt stack 0
  2457                           
  2458                           ; 3 bytes @ 0x43
  2459  0000A3                     	ds	1
  2460  0000A4                     ethernet_txFrameRequest@err:
  2461                           	opt stack 0
  2462                           
  2463                           ; 3 bytes @ 0x44
  2464  0000A4                     	ds	2
  2465  0000A6                     ?_ethernetController_init:
  2466                           	opt stack 0
  2467                           
  2468                           ; 3 bytes @ 0x46
  2469  0000A6                     	ds	1
  2470  0000A7                     ipv4_txFrameRequest@packet:
  2471                           	opt stack 0
  2472  0000A7                     ARP_send@arp:
  2473                           	opt stack 0
  2474                           
  2475                           ; 32 bytes @ 0x47
  2476  0000A7                     	ds	2
  2477  0000A9                     ??_ipv4_txFrameRequest:
  2478  0000A9                     ethernetController_init@err:
  2479                           	opt stack 0
  2480                           
  2481                           ; 3 bytes @ 0x49
  2482  0000A9                     	ds	12
  2483  0000B5                     ipv4_handleNewPacket@frame:
  2484                           	opt stack 0
  2485                           
  2486                           ; 2 bytes @ 0x55
  2487  0000B5                     	ds	2
  2488  0000B7                     ??_ipv4_handleNewPacket:
  2489                           
  2490                           ; 1 bytes @ 0x57
  2491  0000B7                     	ds	2
  2492  0000B9                     ipv4_handleNewPacket@headerField:
  2493                           	opt stack 0
  2494                           
  2495                           ; 9 bytes @ 0x59
  2496  0000B9                     	ds	3
  2497  0000BC                     ipv4_streamToTransmissionBuffer@ethernetPacketLength:
  2498                           	opt stack 0
  2499                           
  2500                           ; 2 bytes @ 0x5C
  2501  0000BC                     	ds	2
  2502  0000BE                     ipv4_streamToTransmissionBuffer@data:
  2503                           	opt stack 0
  2504                           
  2505                           ; 1 bytes @ 0x5E
  2506  0000BE                     	ds	4
  2507  0000C2                     ipv4_handleNewPacket@ip:
  2508                           	opt stack 0
  2509                           
  2510                           ; 23 bytes @ 0x62
  2511  0000C2                     	ds	5
  2512  0000C7                     ARP_send@destination:
  2513                           	opt stack 0
  2514                           
  2515                           ; 6 bytes @ 0x67
  2516  0000C7                     	ds	6
  2517  0000CD                     ARP_send@i:
  2518                           	opt stack 0
  2519                           
  2520                           ; 1 bytes @ 0x6D
  2521  0000CD                     	ds	1
  2522  0000CE                     ARP_send@i_2729:
  2523                           	opt stack 0
  2524                           
  2525                           ; 1 bytes @ 0x6E
  2526  0000CE                     	ds	1
  2527  0000CF                     ARP_send@i_2730:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x6F
  2531  0000CF                     	ds	1
  2532  0000D0                     ARP_send@i_2731:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x70
  2536  0000D0                     	ds	1
  2537  0000D1                     ARP_send@ethFrame:
  2538                           	opt stack 0
  2539                           
  2540                           ; 30 bytes @ 0x71
  2541  0000D1                     	ds	30
  2542  0000EF                     ARP_send@field:
  2543                           	opt stack 0
  2544                           
  2545                           ; 9 bytes @ 0x8F
  2546  0000EF                     	ds	9
  2547  0000F8                     ARP_handleNewPacket@frame:
  2548                           	opt stack 0
  2549  0000F8                     ARP_sendRequest@ip:
  2550                           	opt stack 0
  2551                           
  2552                           ; 4 bytes @ 0x98
  2553  0000F8                     	ds	2
  2554  0000FA                     
  2555                           ; 1 bytes @ 0x9A
  2556  0000FA                     	ds	2
  2557  0000FC                     ethernet_rxGetNewFrame@err:
  2558                           	opt stack 0
  2559                           
  2560                           ; 3 bytes @ 0x9C
  2561  0000FC                     	ds	3
  2562                           tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1l	equ	0xFE1
  2570                           
  2571                           	psect	cstackCOMRAM
  2572  000001                     __pcstackCOMRAM:
  2573                           	opt stack 0
  2574  000001                     ?i2___lwdiv:
  2575                           	opt stack 0
  2576  000001                     buttonHandler@state:
  2577                           	opt stack 0
  2578  000001                     i2___lwdiv@dividend:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x0
  2582  000001                     	ds	2
  2583  000003                     i2___lwdiv@divisor:
  2584                           	opt stack 0
  2585  000003                     buttonHandler@debounceValue:
  2586                           	opt stack 0
  2587                           
  2588                           ; 4 bytes @ 0x2
  2589  000003                     	ds	2
  2590  000005                     i2___lwdiv@quotient:
  2591                           	opt stack 0
  2592                           
  2593                           ; 2 bytes @ 0x4
  2594  000005                     	ds	2
  2595  000007                     i2___lwdiv@counter:
  2596                           	opt stack 0
  2597                           
  2598                           ; 1 bytes @ 0x6
  2599  000007                     	ds	1
  2600  000008                     parseNumber@numberToDisplay:
  2601                           	opt stack 0
  2602                           
  2603                           ; 2 bytes @ 0x7
  2604  000008                     	ds	2
  2605  00000A                     parseNumber@digit:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x9
  2609  00000A                     	ds	1
  2610  00000B                     ??_parseNumber:
  2611                           
  2612                           ; 1 bytes @ 0xA
  2613  00000B                     	ds	1
  2614  00000C                     parseNumber@ones:
  2615                           	opt stack 0
  2616                           
  2617                           ; 1 bytes @ 0xB
  2618  00000C                     	ds	1
  2619  00000D                     parseNumber@tens:
  2620                           	opt stack 0
  2621                           
  2622                           ; 1 bytes @ 0xC
  2623  00000D                     	ds	1
  2624  00000E                     parseNumber@hundreds:
  2625                           	opt stack 0
  2626                           
  2627                           ; 1 bytes @ 0xD
  2628  00000E                     	ds	1
  2629  00000F                     sevenSegmentUpdate@numberToDisplay:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0xE
  2633  00000F                     	ds	2
  2634  000011                     ??_sevenSegmentUpdate:
  2635                           
  2636                           ; 1 bytes @ 0x10
  2637  000011                     	ds	2
  2638  000013                     _sevenSegmentUpdate$2088:
  2639                           	opt stack 0
  2640                           
  2641                           ; 2 bytes @ 0x12
  2642  000013                     	ds	2
  2643  000015                     sevenSegmentUpdate@i:
  2644                           	opt stack 0
  2645                           
  2646                           ; 1 bytes @ 0x14
  2647  000015                     	ds	1
  2648  000016                     ??_ISR:
  2649                           
  2650                           ; 1 bytes @ 0x15
  2651  000016                     	ds	18
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           postinc0	equ	0xFEE
  2657                           wreg	equ	0xFE8
  2658                           postdec1	equ	0xFE5
  2659                           fsr1l	equ	0xFE1
  2660                           
  2661 ;;
  2662 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2663 ;;
  2664 ;; *************** function _main *****************
  2665 ;; Defined at:
  2666 ;;		line 32 in file "src/system/main.c"
  2667 ;; Parameters:    Size  Location     Type
  2668 ;;		None
  2669 ;; Auto vars:     Size  Location     Type
  2670 ;;  i               1  177[BANK1 ] unsigned char 
  2671 ;;  headerBuf      32  143[BANK1 ] unsigned char [32]
  2672 ;;  IPsource        4  185[BANK1 ] struct ipv4_address
  2673 ;;  IPdestinatio    4  181[BANK1 ] struct ipv4_address
  2674 ;;  prescaler       4  139[BANK1 ] unsigned long 
  2675 ;;  err             3  178[BANK1 ] struct error
  2676 ;;  oldState        1    0        unsigned char 
  2677 ;; Return value:  Size  Location     Type
  2678 ;;                  1    wreg      void 
  2679 ;; Registers used:
  2680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2681 ;; Tracked objects:
  2682 ;;		On entry : 0/0
  2683 ;;		On exit  : 0/0
  2684 ;;		Unchanged: 0/0
  2685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2686 ;;      Params:         0       0       0       0       0       0       0       0       0
  2687 ;;      Locals:         0       0      50       0       0       0       0       0       0
  2688 ;;      Temps:          0       0       3       0       0       0       0       0       0
  2689 ;;      Totals:         0       0      53       0       0       0       0       0       0
  2690 ;;Total ram usage:       53 bytes
  2691 ;; Hardware stack levels required when called:   14
  2692 ;; This function calls:
  2693 ;;		_ARP_initTable
  2694 ;;		_UARTInit
  2695 ;;		_UARTTransmitInt
  2696 ;;		_UARTTransmitText
  2697 ;;		_ethernetController_checkDeviceId
  2698 ;;		_ethernetController_getCurrentPacketCount
  2699 ;;		_ethernetController_getDeviceName
  2700 ;;		_ethernetController_getMacAddress
  2701 ;;		_ethernetController_getSiliconRevision
  2702 ;;		_ethernetController_init
  2703 ;;		_ethernetController_setLEDConfig
  2704 ;;		_handleStackBackgroundTasks
  2705 ;;		_ipv4_calculateHeaderChecksum
  2706 ;;		_ipv4_setIPSourceAddress
  2707 ;;		_ipv4_streamToTransmissionBuffer
  2708 ;;		_ipv4_txFrameRequest
  2709 ;;		_ipv4_writeHeaderIntoBuffer
  2710 ;;		_macToString
  2711 ;;		_printErrorMessage
  2712 ;;		_printEthernetState
  2713 ;;		_sevenSegmentInit
  2714 ;; This function is called by:
  2715 ;;		Startup code after reset
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           	psect	text0
  2720  000E4E                     __ptext0:
  2721                           	opt stack 0
  2722  000E4E                     _main:
  2723                           	opt stack 17
  2724                           
  2725                           ;main.c: 35: OSCCONbits.SCS = 0b00;
  2726                           
  2727                           ;incstack = 0
  2728  000E4E  0EFC               	movlw	-4
  2729  000E50  16D3               	andwf	4051,f,c	;volatile
  2730                           
  2731                           ;main.c: 36: OSCCONbits.IRCF = 0b1110;
  2732  000E52  50D3               	movf	4051,w,c	;volatile
  2733  000E54  0B8F               	andlw	-113
  2734  000E56  0960               	iorlw	96
  2735  000E58  6ED3               	movwf	4051,c	;volatile
  2736                           
  2737                           ;main.c: 37: OSCCON2bits.PLLEN = 0b1;
  2738  000E5A  88D2               	bsf	4050,4,c	;volatile
  2739                           
  2740                           ;main.c: 40: INTCONbits.GIE = 0;
  2741  000E5C  9EF2               	bcf	intcon,7,c	;volatile
  2742                           
  2743                           ;main.c: 41: INTCONbits.TMR0IE = 1;
  2744  000E5E  8AF2               	bsf	intcon,5,c	;volatile
  2745                           
  2746                           ;main.c: 42: INTCON3bits.INT2IE = 1;
  2747  000E60  88F0               	bsf	intcon3,4,c	;volatile
  2748                           
  2749                           ;main.c: 43: RCIP = 0;
  2750  000E62  9A9F               	bcf	3999,5,c	;volatile
  2751                           
  2752                           ;main.c: 44: RCIE = 1;
  2753  000E64  8A9D               	bsf	3997,5,c	;volatile
  2754                           
  2755                           ;main.c: 45: INTCONbits.PEIE = 1;
  2756  000E66  8CF2               	bsf	intcon,6,c	;volatile
  2757                           
  2758                           ;main.c: 49: T0CONbits.TMR0ON = 1;
  2759  000E68  8ED5               	bsf	4053,7,c	;volatile
  2760                           
  2761                           ;main.c: 50: T0CONbits.T08BIT = 1;
  2762  000E6A  8CD5               	bsf	4053,6,c	;volatile
  2763                           
  2764                           ;main.c: 51: T0CONbits.T0CS = 0;
  2765  000E6C  9AD5               	bcf	4053,5,c	;volatile
  2766                           
  2767                           ;main.c: 52: T0CONbits.PSA = 0;
  2768  000E6E  96D5               	bcf	4053,3,c	;volatile
  2769                           
  2770                           ;main.c: 53: T0CONbits.T0PS = 0b101;
  2771  000E70  50D5               	movf	4053,w,c	;volatile
  2772  000E72  0BF8               	andlw	-8
  2773  000E74  0905               	iorlw	5
  2774  000E76  6ED5               	movwf	4053,c	;volatile
  2775                           
  2776                           ;main.c: 55: UARTInit();
  2777  000E78  EC59  F026         	call	_UARTInit	;wreg free
  2778                           
  2779                           ;main.c: 56: sevenSegmentInit();
  2780  000E7C  EC06  F026         	call	_sevenSegmentInit	;wreg free
  2781                           
  2782                           ;main.c: 57: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  2783  000E80  0E68               	movlw	104
  2784  000E82  0101               	movlb	1	; () banked
  2785  000E84  6F88               	movwf	??_main& (0+255),b
  2786  000E86  0EE4               	movlw	228
  2787  000E88                     u11627:
  2788  000E88  2EE8               	decfsz	wreg,f,c
  2789  000E8A  D7FE               	bra	u11627
  2790  000E8C  2F88               	decfsz	??_main& (0+255),f,b
  2791  000E8E  D7FC               	bra	u11627
  2792  000E90  F000               	nop	
  2793                           
  2794                           ;main.c: 58: UARTTransmitText("FIRMWARE BUILD DATE IS ");
  2795  000E92  0EE2               	movlw	low STR_25
  2796  000E94  0100               	movlb	0	; () banked
  2797  000E96  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2798  000E98  0E7D               	movlw	high STR_25
  2799  000E9A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2800  000E9C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2801                           
  2802                           ;main.c: 59: UARTTransmitText("Mar 01 2019");
  2803  000EA0  0E63               	movlw	low STR_26
  2804  000EA2  0100               	movlb	0	; () banked
  2805  000EA4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2806  000EA6  0E7F               	movlw	high STR_26
  2807  000EA8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2808  000EAA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2809                           
  2810                           ;main.c: 60: UARTTransmitText(" ");
  2811  000EAE  0E38               	movlw	low (STR_41+18)
  2812  000EB0  0100               	movlb	0	; () banked
  2813  000EB2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2814  000EB4  0E7E               	movlw	high (STR_41+18)
  2815  000EB6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2816  000EB8  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2817                           
  2818                           ;main.c: 61: UARTTransmitText("23:21:07");
  2819  000EBC  0EA3               	movlw	low STR_28
  2820  000EBE  0100               	movlb	0	; () banked
  2821  000EC0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2822  000EC2  0E7F               	movlw	high STR_28
  2823  000EC4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2824  000EC6  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2825                           
  2826                           ;main.c: 62: UARTTransmitText("\n\r");
  2827  000ECA  0E83               	movlw	low (STR_37+48)
  2828  000ECC  0100               	movlb	0	; () banked
  2829  000ECE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2830  000ED0  0E7C               	movlw	high (STR_37+48)
  2831  000ED2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2832  000ED4  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2833                           
  2834                           ;main.c: 63: UARTTransmitText("Initialising Ethernet Controller...\n\r");
  2835  000ED8  0EAD               	movlw	low STR_30
  2836  000EDA  0100               	movlb	0	; () banked
  2837  000EDC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2838  000EDE  0E7C               	movlw	high STR_30
  2839  000EE0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2840  000EE2  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2841                           
  2842                           ;main.c: 64: error_t err;
  2843                           ;main.c: 65: err = ethernetController_init();
  2844  000EE6  EC87  F020         	call	_ethernetController_init	;wreg free
  2845  000EEA  C0A6  F1B2         	movff	?_ethernetController_init,main@err
  2846  000EEE  C0A7  F1B3         	movff	?_ethernetController_init+1,main@err+1
  2847  000EF2  C0A8  F1B4         	movff	?_ethernetController_init+2,main@err+2
  2848                           
  2849                           ;main.c: 66: if (err.code != (uint16_t)0)
  2850  000EF6  0101               	movlb	1	; () banked
  2851  000EF8  51B3               	movf	(main@err+1)& (0+255),w,b
  2852  000EFA  11B4               	iorwf	(main@err+2)& (0+255),w,b
  2853  000EFC  B4D8               	btfsc	status,2,c
  2854  000EFE  D008               	goto	l617
  2855                           
  2856                           ; BSR set to: 1
  2857                           ;main.c: 67: printErrorMessage(err);
  2858  000F00  C1B2  F09A         	movff	main@err,printErrorMessage@err
  2859  000F04  C1B3  F09B         	movff	main@err+1,printErrorMessage@err+1
  2860  000F08  C1B4  F09C         	movff	main@err+2,printErrorMessage@err+2
  2861  000F0C  ECD9  F016         	call	_printErrorMessage	;wreg free
  2862  000F10                     l617:
  2863                           
  2864                           ;main.c: 68: err = ethernetController_checkDeviceId();
  2865  000F10  ECA3  F022         	call	_ethernetController_checkDeviceId	;wreg free
  2866  000F14  C06E  F1B2         	movff	?_ethernetController_checkDeviceId,main@err
  2867  000F18  C06F  F1B3         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  2868  000F1C  C070  F1B4         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  2869                           
  2870                           ;main.c: 69: if (err.code == (uint16_t)0) {
  2871  000F20  0101               	movlb	1	; () banked
  2872  000F22  51B3               	movf	(main@err+1)& (0+255),w,b
  2873  000F24  11B4               	iorwf	(main@err+2)& (0+255),w,b
  2874  000F26  A4D8               	btfss	status,2,c
  2875  000F28  D00F               	goto	l618
  2876                           
  2877                           ; BSR set to: 1
  2878                           ;main.c: 70: UARTTransmitText(ethernetController_getDeviceName());
  2879  000F2A  EC98  F025         	call	_ethernetController_getDeviceName	;wreg free
  2880  000F2E  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  2881  000F32  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  2882  000F36  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2883                           
  2884                           ;main.c: 71: UARTTransmitText(" detected. ");
  2885  000F3A  0E57               	movlw	low STR_31
  2886  000F3C  0100               	movlb	0	; () banked
  2887  000F3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2888  000F40  0E7F               	movlw	high STR_31
  2889  000F42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2890  000F44  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2891  000F48                     l618:
  2892                           
  2893                           ;main.c: 72: }
  2894                           ;main.c: 73: UARTTransmitText("Silicon revision is ");
  2895  000F48  0E11               	movlw	low STR_32
  2896  000F4A  0100               	movlb	0	; () banked
  2897  000F4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2898  000F4E  0E7E               	movlw	high STR_32
  2899  000F50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2900  000F52  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2901                           
  2902                           ;main.c: 74: UARTTransmitInt(ethernetController_getSiliconRevision());
  2903  000F56  ECCC  F025         	call	_ethernetController_getSiliconRevision	;wreg free
  2904  000F5A  0101               	movlb	1	; () banked
  2905  000F5C  6F88               	movwf	??_main& (0+255),b
  2906  000F5E  5188               	movf	??_main& (0+255),w,b
  2907  000F60  0100               	movlb	0	; () banked
  2908  000F62  6F9A               	movwf	UARTTransmitInt@val& (0+255),b
  2909  000F64  6B9B               	clrf	(UARTTransmitInt@val+1)& (0+255),b
  2910  000F66  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  2911  000F68  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  2912  000F6A  ECBB  F025         	call	_UARTTransmitInt	;wreg free
  2913                           
  2914                           ;main.c: 75: UARTTransmitText(".\n\r");
  2915  000F6E  0EDD               	movlw	low (STR_55+1)
  2916  000F70  0100               	movlb	0	; () banked
  2917  000F72  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2918  000F74  0E7F               	movlw	high (STR_55+1)
  2919  000F76  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2920  000F78  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2921                           
  2922                           ;main.c: 76: UARTTransmitText("Source MAC address is ");
  2923  000F7C  0EFA               	movlw	low STR_34
  2924  000F7E  0100               	movlb	0	; () banked
  2925  000F80  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2926  000F82  0E7D               	movlw	high STR_34
  2927  000F84  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2928  000F86  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2929                           
  2930                           ;main.c: 77: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  2931  000F8A  EC4D  F020         	call	_ethernetController_getMacAddress	;wreg free
  2932  000F8E  CFE9 FFD9          	movff	fsr0l,fsr2l
  2933  000F92  CFEA FFDA          	movff	fsr0h,fsr2h
  2934  000F96  EE00  F07A         	lfsr	0,macToString@addr
  2935  000F9A  0E05               	movlw	5
  2936  000F9C                     u11491:
  2937  000F9C  CFDB FFEB          	movff	plusw2,plusw0
  2938  000FA0  06E8               	decf	wreg,f,c
  2939  000FA2  E2FC               	bc	u11491
  2940  000FA4  EC94  F018         	call	_macToString	;wreg free
  2941  000FA8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  2942  000FAC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  2943  000FB0  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2944                           
  2945                           ;main.c: 78: UARTTransmitText(".\n\r");
  2946  000FB4  0EDD               	movlw	low (STR_55+1)
  2947  000FB6  0100               	movlb	0	; () banked
  2948  000FB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2949  000FBA  0E7F               	movlw	high (STR_55+1)
  2950  000FBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2951  000FBE  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2952                           
  2953                           ;main.c: 79: UARTTransmitText("Initialisation completed.\n\r");
  2954  000FC2  0EAD               	movlw	low STR_36
  2955  000FC4  0100               	movlb	0	; () banked
  2956  000FC6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2957  000FC8  0E7D               	movlw	high STR_36
  2958  000FCA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2959  000FCC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2960                           
  2961                           ;main.c: 80: UARTTransmitText("------------------------------------------------\n\r");
  2962  000FD0  0E53               	movlw	low STR_37
  2963  000FD2  0100               	movlb	0	; () banked
  2964  000FD4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  2965  000FD6  0E7C               	movlw	high STR_37
  2966  000FD8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  2967  000FDA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  2968                           
  2969                           ;main.c: 82: ARP_initTable();
  2970  000FDE  EC99  F021         	call	_ARP_initTable	;wreg free
  2971                           
  2972                           ;main.c: 84: ethernetController_setLEDConfig(LEDA, LED_ON);
  2973  000FE2  0E00               	movlw	0
  2974  000FE4  0100               	movlb	0	; () banked
  2975  000FE6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2976  000FE8  0E00               	movlw	0
  2977  000FEA  EC08  F01E         	call	_ethernetController_setLEDConfig
  2978                           
  2979                           ;main.c: 85: ethernetController_setLEDConfig(LEDA, LED_ON);
  2980  000FEE  0E00               	movlw	0
  2981  000FF0  0100               	movlb	0	; () banked
  2982  000FF2  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  2983  000FF4  0E00               	movlw	0
  2984  000FF6  EC08  F01E         	call	_ethernetController_setLEDConfig
  2985                           
  2986                           ;main.c: 86: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  2987  000FFA  0E15               	movlw	21
  2988  000FFC  0101               	movlb	1	; () banked
  2989  000FFE  6F89               	movwf	(??_main+1)& (0+255),b
  2990  001000  0E4B               	movlw	75
  2991  001002  6F88               	movwf	??_main& (0+255),b
  2992  001004  0EBE               	movlw	190
  2993  001006                     u11637:
  2994  001006  2EE8               	decfsz	wreg,f,c
  2995  001008  D7FE               	bra	u11637
  2996  00100A  2F88               	decfsz	??_main& (0+255),f,b
  2997  00100C  D7FC               	bra	u11637
  2998  00100E  2F89               	decfsz	(??_main+1)& (0+255),f,b
  2999  001010  D7FA               	bra	u11637
  3000  001012  F000               	nop	
  3001                           
  3002                           ;main.c: 88: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3003  001014  0E01               	movlw	1
  3004  001016  0100               	movlb	0	; () banked
  3005  001018  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3006  00101A  0E00               	movlw	0
  3007  00101C  EC08  F01E         	call	_ethernetController_setLEDConfig
  3008                           
  3009                           ;main.c: 89: ethernetController_setLEDConfig(LEDA, LED_OFF);
  3010  001020  0E01               	movlw	1
  3011  001022  0100               	movlb	0	; () banked
  3012  001024  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  3013  001026  0E00               	movlw	0
  3014  001028  EC08  F01E         	call	_ethernetController_setLEDConfig
  3015                           
  3016                           ;main.c: 92: uint32_t prescaler = 0;
  3017  00102C  0E00               	movlw	0
  3018  00102E  0101               	movlb	1	; () banked
  3019  001030  6F8B               	movwf	main@prescaler& (0+255),b
  3020  001032  0E00               	movlw	0
  3021  001034  6F8C               	movwf	(main@prescaler+1)& (0+255),b
  3022  001036  0E00               	movlw	0
  3023  001038  6F8D               	movwf	(main@prescaler+2)& (0+255),b
  3024  00103A  0E00               	movlw	0
  3025  00103C  6F8E               	movwf	(main@prescaler+3)& (0+255),b
  3026                           
  3027                           ; BSR set to: 1
  3028                           ;main.c: 94: ANSELB &= ~(1<<5);
  3029  00103E  010F               	movlb	15	; () banked
  3030  001040  9B5C               	bcf	92,5,b	;volatile
  3031                           
  3032                           ; BSR set to: 15
  3033                           ;main.c: 95: TRISB |= (1<<5);
  3034  001042  8A93               	bsf	3987,5,c	;volatile
  3035                           
  3036                           ; BSR set to: 15
  3037                           ;main.c: 97: uint8_t oldState;
  3038                           ;main.c: 100: stack.ethernet.destination.address[0] = 0x80;
  3039  001044  0E80               	movlw	128
  3040  001046  0102               	movlb	2	; () banked
  3041  001048  6F60               	movwf	(_stack+9)& (0+255),b	;volatile
  3042                           
  3043                           ; BSR set to: 2
  3044                           ;main.c: 101: stack.ethernet.destination.address[1] = 0x1F;
  3045  00104A  0E1F               	movlw	31
  3046  00104C  6F61               	movwf	(_stack+10)& (0+255),b	;volatile
  3047                           
  3048                           ; BSR set to: 2
  3049                           ;main.c: 102: stack.ethernet.destination.address[2] = 0x12;
  3050  00104E  0E12               	movlw	18
  3051  001050  6F62               	movwf	(_stack+11)& (0+255),b	;volatile
  3052                           
  3053                           ; BSR set to: 2
  3054                           ;main.c: 103: stack.ethernet.destination.address[3] = 0x1B;
  3055  001052  0E1B               	movlw	27
  3056  001054  6F63               	movwf	(_stack+12)& (0+255),b	;volatile
  3057                           
  3058                           ; BSR set to: 2
  3059                           ;main.c: 104: stack.ethernet.destination.address[4] = 0x6A;
  3060  001056  0E6A               	movlw	106
  3061  001058  6F64               	movwf	(_stack+13)& (0+255),b	;volatile
  3062                           
  3063                           ; BSR set to: 2
  3064                           ;main.c: 105: stack.ethernet.destination.address[5] = 0x2F;
  3065  00105A  0E2F               	movlw	47
  3066  00105C  6F65               	movwf	(_stack+14)& (0+255),b	;volatile
  3067                           
  3068                           ; BSR set to: 2
  3069                           ;main.c: 120: ipv4_address_t IPsource;
  3070                           ;main.c: 121: IPsource.address[0] = 192;
  3071  00105E  0EC0               	movlw	192
  3072  001060  0101               	movlb	1	; () banked
  3073  001062  6FB9               	movwf	main@IPsource& (0+255),b
  3074                           
  3075                           ; BSR set to: 1
  3076                           ;main.c: 122: IPsource.address[1] = 168;
  3077  001064  0EA8               	movlw	168
  3078  001066  6FBA               	movwf	(main@IPsource+1)& (0+255),b
  3079                           
  3080                           ; BSR set to: 1
  3081                           ;main.c: 123: IPsource.address[2] = 0;
  3082  001068  0E00               	movlw	0
  3083  00106A  6FBB               	movwf	(main@IPsource+2)& (0+255),b
  3084                           
  3085                           ; BSR set to: 1
  3086                           ;main.c: 124: IPsource.address[3] = 4;
  3087  00106C  0E04               	movlw	4
  3088  00106E  6FBC               	movwf	(main@IPsource+3)& (0+255),b
  3089                           
  3090                           ; BSR set to: 1
  3091                           ;main.c: 126: ipv4_address_t IPdestination;
  3092                           ;main.c: 127: IPdestination.address[0] = 192;
  3093  001070  0EC0               	movlw	192
  3094  001072  6FB5               	movwf	main@IPdestination& (0+255),b
  3095                           
  3096                           ; BSR set to: 1
  3097                           ;main.c: 128: IPdestination.address[1] = 168;
  3098  001074  0EA8               	movlw	168
  3099  001076  6FB6               	movwf	(main@IPdestination+1)& (0+255),b
  3100                           
  3101                           ; BSR set to: 1
  3102                           ;main.c: 129: IPdestination.address[2] = 0;
  3103  001078  0E00               	movlw	0
  3104  00107A  6FB7               	movwf	(main@IPdestination+2)& (0+255),b
  3105                           
  3106                           ; BSR set to: 1
  3107                           ;main.c: 130: IPdestination.address[3] = 5;
  3108  00107C  0E05               	movlw	5
  3109  00107E  6FB8               	movwf	(main@IPdestination+3)& (0+255),b
  3110                           
  3111                           ; BSR set to: 1
  3112                           ;main.c: 133: ipv4_setIPSourceAddress(IPsource);
  3113  001080  C1B9  F060         	movff	main@IPsource,ipv4_setIPSourceAddress@ip
  3114  001084  C1BA  F061         	movff	main@IPsource+1,ipv4_setIPSourceAddress@ip+1
  3115  001088  C1BB  F062         	movff	main@IPsource+2,ipv4_setIPSourceAddress@ip+2
  3116  00108C  C1BC  F063         	movff	main@IPsource+3,ipv4_setIPSourceAddress@ip+3
  3117  001090  EC35  F026         	call	_ipv4_setIPSourceAddress	;wreg free
  3118                           
  3119                           ;main.c: 137: INTCONbits.GIE = 1;
  3120  001094  8EF2               	bsf	intcon,7,c	;volatile
  3121                           
  3122                           ;main.c: 138: INTCONbits.PEIE = 1;
  3123  001096  8CF2               	bsf	intcon,6,c	;volatile
  3124  001098                     l619:
  3125  001098  0004               	clrwdt		;# 
  3126                           
  3127                           ;main.c: 144: handleStackBackgroundTasks(&stack);
  3128  00109A  0E57               	movlw	low _stack
  3129  00109C  0101               	movlb	1	; () banked
  3130  00109E  6F84               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  3131  0010A0  0E02               	movlw	high _stack
  3132  0010A2  6F85               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  3133  0010A4  ECCE  F010         	call	_handleStackBackgroundTasks	;wreg free
  3134                           
  3135                           ;main.c: 147: printEthernetState(stack.ethernet);
  3136  0010A8  EE22  F057         	lfsr	2,_stack	;volatile
  3137  0010AC  EE00  F09A         	lfsr	0,printEthernetState@state
  3138  0010B0  0E0E               	movlw	14
  3139  0010B2                     u11501:
  3140  0010B2  CFDB FFEB          	movff	plusw2,plusw0
  3141  0010B6  06E8               	decf	wreg,f,c
  3142  0010B8  E2FC               	bc	u11501
  3143  0010BA  ECD4  F01C         	call	_printEthernetState	;wreg free
  3144                           
  3145                           ;main.c: 148: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  3146  0010BE  0102               	movlb	2	; () banked
  3147  0010C0  5157               	movf	_stack& (0+255),w,b	;volatile
  3148  0010C2  B4D8               	btfsc	status,2,c
  3149  0010C4  D008               	goto	l621
  3150                           
  3151                           ; BSR set to: 2
  3152  0010C6  EC7D  F026         	call	_ethernetController_getCurrentPacketCount	;wreg free
  3153  0010CA  0101               	movlb	1	; () banked
  3154  0010CC  6F88               	movwf	??_main& (0+255),b
  3155  0010CE  5188               	movf	??_main& (0+255),w,b
  3156  0010D0  6FAF               	movwf	_main$2013& (0+255),b
  3157  0010D2  6BB0               	clrf	(_main$2013+1)& (0+255),b
  3158  0010D4  D005               	goto	l623
  3159  0010D6                     l621:
  3160                           
  3161                           ; BSR set to: 1
  3162  0010D6  0E03               	movlw	3
  3163  0010D8  0101               	movlb	1	; () banked
  3164  0010DA  6FB0               	movwf	(_main$2013+1)& (0+255),b
  3165  0010DC  0EE8               	movlw	232
  3166  0010DE  6FAF               	movwf	_main$2013& (0+255),b
  3167  0010E0                     l623:
  3168                           
  3169                           ; BSR set to: 1
  3170                           
  3171                           ; BSR set to: 1
  3172  0010E0  C1AF  F034         	movff	_main$2013,_numberToDisplay	;volatile
  3173  0010E4  C1B0  F035         	movff	_main$2013+1,_numberToDisplay+1	;volatile
  3174  0010E8  0E00               	movlw	0
  3175  0010EA  BE35               	btfsc	_numberToDisplay+1,7,c	;volatile
  3176  0010EC  0EFF               	movlw	-1
  3177  0010EE  6E36               	movwf	_numberToDisplay+2,c	;volatile
  3178  0010F0  6E37               	movwf	_numberToDisplay+3,c	;volatile
  3179                           
  3180                           ; BSR set to: 1
  3181                           ;main.c: 150: if (buttonState) {
  3182  0010F2  51E0               	movf	_buttonState& (0+255),w,b	;volatile
  3183  0010F4  B4D8               	btfsc	status,2,c
  3184  0010F6  D7D0               	goto	l619
  3185                           
  3186                           ; BSR set to: 1
  3187                           ;main.c: 151: buttonState = 0;
  3188  0010F8  0E00               	movlw	0
  3189  0010FA  6FE0               	movwf	_buttonState& (0+255),b	;volatile
  3190                           
  3191                           ; BSR set to: 1
  3192                           ;main.c: 153: if (stack.ethernet.link == LINK_ESTABLISHED) {
  3193  0010FC  0102               	movlb	2	; () banked
  3194  0010FE  0557               	decf	_stack& (0+255),w,b	;volatile
  3195  001100  A4D8               	btfss	status,2,c
  3196  001102  D7CA               	goto	l619
  3197                           
  3198                           ; BSR set to: 2
  3199                           ;main.c: 156: uint8_t headerBuf[32];
  3200                           ;main.c: 157: stack.pendingPacketToSend.ipv4Header.destination = IPdestination;
  3201  001104  C1B5  F29D         	movff	main@IPdestination,_stack+70	;volatile
  3202  001108  C1B6  F29E         	movff	main@IPdestination+1,_stack+71	;volatile
  3203  00110C  C1B7  F29F         	movff	main@IPdestination+2,_stack+72	;volatile
  3204  001110  C1B8  F2A0         	movff	main@IPdestination+3,_stack+73	;volatile
  3205                           
  3206                           ;main.c: 158: stack.pendingPacketToSend.ipv4Header.source = IPsource;
  3207  001114  C1B9  F299         	movff	main@IPsource,_stack+66	;volatile
  3208  001118  C1BA  F29A         	movff	main@IPsource+1,_stack+67	;volatile
  3209  00111C  C1BB  F29B         	movff	main@IPsource+2,_stack+68	;volatile
  3210  001120  C1BC  F29C         	movff	main@IPsource+3,_stack+69	;volatile
  3211                           
  3212                           ; BSR set to: 2
  3213                           ;main.c: 159: stack.pendingPacketToSend.ipv4Header.totalLength = 120;
  3214  001124  0E00               	movlw	0
  3215  001126  6F8F               	movwf	(_stack+56)& (0+255),b	;volatile
  3216  001128  0E78               	movlw	120
  3217  00112A  6F8E               	movwf	(_stack+55)& (0+255),b	;volatile
  3218                           
  3219                           ; BSR set to: 2
  3220                           ;main.c: 160: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  3221  00112C  6995               	setf	(_stack+62)& (0+255),b	;volatile
  3222                           
  3223                           ;main.c: 161: stack.pendingPacketToSend.ipv4Header.version = 4;
  3224  00112E  0E04               	movlw	4
  3225  001130  6F8A               	movwf	(_stack+51)& (0+255),b	;volatile
  3226                           
  3227                           ; BSR set to: 2
  3228                           ;main.c: 162: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  3229  001132  0E8A               	movlw	low (_stack+51)
  3230  001134  0100               	movlb	0	; () banked
  3231  001136  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  3232  001138  0E02               	movlw	high (_stack+51)
  3233  00113A  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  3234  00113C  EC8D  F00A         	call	_ipv4_calculateHeaderChecksum	;wreg free
  3235                           
  3236                           ;main.c: 163: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, headerBuf
      +                          );
  3237  001140  EE22  F08A         	lfsr	2,_stack+51	;volatile
  3238  001144  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  3239  001148  0E16               	movlw	22
  3240  00114A                     u11541:
  3241  00114A  CFDB FFEB          	movff	plusw2,plusw0
  3242  00114E  06E8               	decf	wreg,f,c
  3243  001150  E2FC               	bc	u11541
  3244  001152  0E8F               	movlw	low main@headerBuf
  3245  001154  0100               	movlb	0	; () banked
  3246  001156  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  3247  001158  0E01               	movlw	high main@headerBuf
  3248  00115A  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  3249  00115C  EC32  F014         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  3250                           
  3251                           ;main.c: 165: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  3252  001160  0E8A               	movlw	low (_stack+51)
  3253  001162  0100               	movlb	0	; () banked
  3254  001164  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  3255  001166  0E02               	movlw	high (_stack+51)
  3256  001168  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  3257  00116A  EC3E  F016         	call	_ipv4_txFrameRequest	;wreg free
  3258                           
  3259                           ;main.c: 167: for (uint8_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength; 
      +                          i++) {
  3260  00116E  0E00               	movlw	0
  3261  001170  0101               	movlb	1	; () banked
  3262  001172  6FB1               	movwf	main@i& (0+255),b
  3263  001174  D034               	goto	l626
  3264  001176                     
  3265                           ; BSR set to: 1
  3266                           ;main.c: 168: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  3267                           
  3268                           ; BSR set to: 1
  3269  001176  0102               	movlb	2	; () banked
  3270  001178  518B               	movf	(_stack+52)& (0+255),w,b	;volatile
  3271  00117A  0D04               	mullw	4
  3272  00117C  0101               	movlb	1	; () banked
  3273  00117E  51B1               	movf	main@i& (0+255),w,b
  3274  001180  6F88               	movwf	??_main& (0+255),b
  3275  001182  6B89               	clrf	(??_main+1)& (0+255),b
  3276  001184  50F3               	movf	prodl,w,c
  3277  001186  5D88               	subwf	??_main& (0+255),w,b
  3278  001188  5189               	movf	(??_main+1)& (0+255),w,b
  3279  00118A  0A80               	xorlw	128
  3280  00118C  6F8A               	movwf	(??_main+2)& (0+255),b
  3281  00118E  50F4               	movf	prodh,w,c
  3282  001190  0A80               	xorlw	128
  3283  001192  598A               	subwfb	(??_main+2)& (0+255),w,b
  3284  001194  B0D8               	btfsc	status,0,c
  3285  001196  D015               	goto	l628
  3286                           
  3287                           ; BSR set to: 1
  3288                           ;main.c: 169: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  3289  001198  EE22  F08A         	lfsr	2,_stack+51	;volatile
  3290  00119C  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3291  0011A0  0E3D               	movlw	61
  3292  0011A2                     u11561:
  3293  0011A2  CFDB FFEB          	movff	plusw2,plusw0
  3294  0011A6  06E8               	decf	wreg,f,c
  3295  0011A8  E2FC               	bc	u11561
  3296  0011AA  51B1               	movf	main@i& (0+255),w,b
  3297  0011AC  0D01               	mullw	1
  3298  0011AE  0E8F               	movlw	low main@headerBuf
  3299  0011B0  24F3               	addwf	prodl,w,c
  3300  0011B2  6ED9               	movwf	fsr2l,c
  3301  0011B4  0E01               	movlw	high main@headerBuf
  3302  0011B6  20F4               	addwfc	prodh,w,c
  3303  0011B8  6EDA               	movwf	fsr2h,c
  3304  0011BA  50DF               	movf	indf2,w,c
  3305  0011BC  ECFD  F024         	call	_ipv4_streamToTransmissionBuffer
  3306                           
  3307                           ;main.c: 170: } else
  3308  0011C0  D00C               	goto	l629
  3309  0011C2                     l628:
  3310                           
  3311                           ;main.c: 171: ipv4_streamToTransmissionBuffer(0, stack.pendingPacketToSend);
  3312  0011C2  EE22  F08A         	lfsr	2,_stack+51	;volatile
  3313  0011C6  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  3314  0011CA  0E3D               	movlw	61
  3315  0011CC                     u11571:
  3316  0011CC  CFDB FFEB          	movff	plusw2,plusw0
  3317  0011D0  06E8               	decf	wreg,f,c
  3318  0011D2  E2FC               	bc	u11571
  3319  0011D4  0E00               	movlw	0
  3320  0011D6  ECFD  F024         	call	_ipv4_streamToTransmissionBuffer
  3321  0011DA                     l629:
  3322  0011DA  0101               	movlb	1	; () banked
  3323  0011DC  2BB1               	incf	main@i& (0+255),f,b
  3324  0011DE                     l626:
  3325                           
  3326                           ; BSR set to: 1
  3327                           
  3328                           ; BSR set to: 1
  3329  0011DE  51B1               	movf	main@i& (0+255),w,b
  3330  0011E0  6F88               	movwf	??_main& (0+255),b
  3331  0011E2  6B89               	clrf	(??_main+1)& (0+255),b
  3332  0011E4  0102               	movlb	2	; () banked
  3333  0011E6  518E               	movf	(_stack+55)& (0+255),w,b	;volatile
  3334  0011E8  0101               	movlb	1	; () banked
  3335  0011EA  5D88               	subwf	??_main& (0+255),w,b
  3336  0011EC  0102               	movlb	2	; () banked
  3337  0011EE  518F               	movf	(_stack+56)& (0+255),w,b	;volatile
  3338  0011F0  0101               	movlb	1	; () banked
  3339  0011F2  5989               	subwfb	(??_main+1)& (0+255),w,b
  3340  0011F4  A0D8               	btfss	status,0,c
  3341  0011F6  D7BF               	goto	l627
  3342                           
  3343                           ; BSR set to: 1
  3344                           ;main.c: 172: }
  3345                           ;main.c: 174: stack.background.fPacketPending = 1;
  3346  0011F8  0102               	movlb	2	; () banked
  3347  0011FA  816B               	bsf	(_stack+20)& (0+255),0,b	;volatile
  3348                           
  3349                           ; BSR set to: 2
  3350                           
  3351                           ; BSR set to: 2
  3352                           
  3353                           ; BSR set to: 2
  3354  0011FC  D74D               	goto	l619
  3355  0011FE                     __end_of_main:
  3356                           	opt stack 0
  3357                           tblptru	equ	0xFF8
  3358                           tblptrh	equ	0xFF7
  3359                           tblptrl	equ	0xFF6
  3360                           tablat	equ	0xFF5
  3361                           prodh	equ	0xFF4
  3362                           prodl	equ	0xFF3
  3363                           intcon	equ	0xFF2
  3364                           intcon3	equ	0xFF0
  3365                           postinc0	equ	0xFEE
  3366                           plusw0	equ	0xFEB
  3367                           fsr0h	equ	0xFEA
  3368                           fsr0l	equ	0xFE9
  3369                           wreg	equ	0xFE8
  3370                           postdec1	equ	0xFE5
  3371                           fsr1l	equ	0xFE1
  3372                           indf2	equ	0xFDF
  3373                           plusw2	equ	0xFDB
  3374                           fsr2h	equ	0xFDA
  3375                           fsr2l	equ	0xFD9
  3376                           status	equ	0xFD8
  3377                           
  3378 ;; *************** function _sevenSegmentInit *****************
  3379 ;; Defined at:
  3380 ;;		line 28 in file "src/system/sevenseg.c"
  3381 ;; Parameters:    Size  Location     Type
  3382 ;;		None
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  1    wreg      void 
  3387 ;; Registers used:
  3388 ;;		wreg, status,2, status,0
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3394 ;;      Params:         0       0       0       0       0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3396 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3397 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3398 ;;Total ram usage:        0 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    4
  3401 ;; This function calls:
  3402 ;;		Nothing
  3403 ;; This function is called by:
  3404 ;;		_main
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text1
  3409  004C0C                     __ptext1:
  3410                           	opt stack 0
  3411  004C0C                     _sevenSegmentInit:
  3412                           	opt stack 26
  3413                           
  3414                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  3415                           
  3416                           ; BSR set to: 2
  3417                           ;incstack = 0
  3418  004C0C  0EF8               	movlw	248
  3419  004C0E  1682               	andwf	3970,f,c	;volatile
  3420                           
  3421                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  3422  004C10  0EF8               	movlw	248
  3423  004C12  1694               	andwf	3988,f,c	;volatile
  3424                           
  3425                           ;sevenseg.c: 33: TRISA &=~0xff;;
  3426  004C14  0E00               	movlw	0
  3427  004C16  6E92               	movwf	3986,c	;volatile
  3428                           
  3429                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  3430  004C18  0E00               	movlw	0
  3431  004C1A  010F               	movlb	15	; () banked
  3432  004C1C  6F5B               	movwf	91,b	;volatile
  3433                           
  3434                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  3435  004C1E  0EF8               	movlw	248
  3436  004C20  175D               	andwf	93,f,b	;volatile
  3437                           
  3438                           ; BSR set to: 15
  3439                           ;sevenseg.c: 38: PORTA = 0xff;
  3440  004C22  6880               	setf	3968,c	;volatile
  3441                           
  3442                           ; BSR set to: 15
  3443  004C24  0012               	return		;funcret
  3444  004C26                     __end_of_sevenSegmentInit:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           intcon3	equ	0xFF0
  3454                           postinc0	equ	0xFEE
  3455                           plusw0	equ	0xFEB
  3456                           fsr0h	equ	0xFEA
  3457                           fsr0l	equ	0xFE9
  3458                           wreg	equ	0xFE8
  3459                           postdec1	equ	0xFE5
  3460                           fsr1l	equ	0xFE1
  3461                           indf2	equ	0xFDF
  3462                           plusw2	equ	0xFDB
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _printEthernetState *****************
  3468 ;; Defined at:
  3469 ;;		line 180 in file "src/system/main.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;		None
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         0      15       0       0       0       0       0       0       0
  3484 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3486 ;;      Totals:         0      15       0       0       0       0       0       0       0
  3487 ;;Total ram usage:       15 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; Hardware stack levels required when called:    5
  3490 ;; This function calls:
  3491 ;;		_UARTTransmitText
  3492 ;; This function is called by:
  3493 ;;		_main
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text2
  3498  0039A8                     __ptext2:
  3499                           	opt stack 0
  3500  0039A8                     _printEthernetState:
  3501                           	opt stack 25
  3502                           
  3503                           ;main.c: 181: static ethernetConnection_t oldState;
  3504                           ;main.c: 182: if (state.link != oldState.link) {
  3505                           
  3506                           ; BSR set to: 15
  3507                           ;incstack = 0
  3508  0039A8  0102               	movlb	2	; () banked
  3509  0039AA  5148               	movf	printEthernetState@oldState& (0+255),w,b
  3510  0039AC  0100               	movlb	0	; () banked
  3511  0039AE  199A               	xorwf	printEthernetState@state& (0+255),w,b
  3512  0039B0  B4D8               	btfsc	status,2,c
  3513  0039B2  D041               	goto	l648
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;main.c: 183: if (state.link == NO_LINK) {
  3517  0039B4  519A               	movf	printEthernetState@state& (0+255),w,b
  3518  0039B6  A4D8               	btfss	status,2,c
  3519  0039B8  D007               	goto	l639
  3520                           
  3521                           ; BSR set to: 0
  3522                           ;main.c: 184: UARTTransmitText("Link lost.\n\r");
  3523  0039BA  0E4A               	movlw	low STR_38
  3524  0039BC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3525  0039BE  0E7F               	movlw	high STR_38
  3526  0039C0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3527  0039C2  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3528                           
  3529                           ;main.c: 185: } else if (state.link == LINK_ESTABLISHED) {
  3530  0039C6  D00A               	goto	l641
  3531  0039C8                     l639:
  3532  0039C8  0100               	movlb	0	; () banked
  3533  0039CA  059A               	decf	printEthernetState@state& (0+255),w,b
  3534  0039CC  A4D8               	btfss	status,2,c
  3535  0039CE  D006               	goto	l641
  3536                           
  3537                           ; BSR set to: 0
  3538                           ;main.c: 186: UARTTransmitText("Link established. ");
  3539  0039D0  0E60               	movlw	low STR_39
  3540  0039D2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3541  0039D4  0E7E               	movlw	high STR_39
  3542  0039D6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3543  0039D8  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3544  0039DC                     l641:
  3545                           
  3546                           ;main.c: 187: }
  3547                           ;main.c: 189: if (state.link == LINK_ESTABLISHED) {
  3548  0039DC  0100               	movlb	0	; () banked
  3549  0039DE  059A               	decf	printEthernetState@state& (0+255),w,b
  3550  0039E0  A4D8               	btfss	status,2,c
  3551  0039E2  D029               	goto	l648
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;main.c: 190: if (state.speed == TEN_MBIT) {
  3555  0039E4  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  3556  0039E6  A4D8               	btfss	status,2,c
  3557  0039E8  D007               	goto	l643
  3558                           
  3559                           ; BSR set to: 0
  3560                           ;main.c: 191: UARTTransmitText("Speed is 10 Mbps, ");
  3561  0039EA  0E4D               	movlw	low STR_40
  3562  0039EC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3563  0039EE  0E7E               	movlw	high STR_40
  3564  0039F0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3565  0039F2  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3566                           
  3567                           ;main.c: 192: } else if (state.speed == HUNDRED_MBIT) {
  3568  0039F6  D00A               	goto	l645
  3569  0039F8                     l643:
  3570  0039F8  0100               	movlb	0	; () banked
  3571  0039FA  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  3572  0039FC  A4D8               	btfss	status,2,c
  3573  0039FE  D006               	goto	l645
  3574                           
  3575                           ; BSR set to: 0
  3576                           ;main.c: 193: UARTTransmitText("Speed is 100 Mbps, ");
  3577  003A00  0E26               	movlw	low STR_41
  3578  003A02  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3579  003A04  0E7E               	movlw	high STR_41
  3580  003A06  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3581  003A08  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3582  003A0C                     l645:
  3583                           
  3584                           ;main.c: 194: }
  3585                           ;main.c: 195: if (state.duplex == HALF_DUPLEX) {
  3586  003A0C  0100               	movlb	0	; () banked
  3587  003A0E  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  3588  003A10  A4D8               	btfss	status,2,c
  3589  003A12  D007               	goto	l646
  3590                           
  3591                           ; BSR set to: 0
  3592                           ;main.c: 196: UARTTransmitText("connection is Half Duplex.\n\r");
  3593  003A14  0E56               	movlw	low STR_42
  3594  003A16  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3595  003A18  0E7D               	movlw	high STR_42
  3596  003A1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3597  003A1C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3598                           
  3599                           ;main.c: 197: } else if (state.duplex == FULL_DUPLEX) {
  3600  003A20  D00A               	goto	l648
  3601  003A22                     l646:
  3602  003A22  0100               	movlb	0	; () banked
  3603  003A24  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  3604  003A26  A4D8               	btfss	status,2,c
  3605  003A28  D006               	goto	l648
  3606                           
  3607                           ; BSR set to: 0
  3608                           ;main.c: 199: UARTTransmitText("connection is Full Duplex.\n\r");
  3609  003A2A  0E73               	movlw	low STR_43
  3610  003A2C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3611  003A2E  0E7D               	movlw	high STR_43
  3612  003A30  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3613  003A32  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3614  003A36                     l648:
  3615                           
  3616                           ;main.c: 200: }
  3617                           ;main.c: 201: }
  3618                           ;main.c: 202: }
  3619                           ;main.c: 203: oldState = state;
  3620  003A36  EE20  F09A         	lfsr	2,printEthernetState@state
  3621  003A3A  EE12  F048         	lfsr	1,printEthernetState@oldState
  3622  003A3E  0E0E               	movlw	14
  3623  003A40                     u11391:
  3624  003A40  CFDB FFE3          	movff	plusw2,plusw1
  3625  003A44  06E8               	decf	wreg,f,c
  3626  003A46  E2FC               	bc	u11391
  3627  003A48  0012               	return		;funcret
  3628  003A4A                     __end_of_printEthernetState:
  3629                           	opt stack 0
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           prodh	equ	0xFF4
  3635                           prodl	equ	0xFF3
  3636                           intcon	equ	0xFF2
  3637                           intcon3	equ	0xFF0
  3638                           postinc0	equ	0xFEE
  3639                           plusw0	equ	0xFEB
  3640                           fsr0h	equ	0xFEA
  3641                           fsr0l	equ	0xFE9
  3642                           wreg	equ	0xFE8
  3643                           postdec1	equ	0xFE5
  3644                           plusw1	equ	0xFE3
  3645                           fsr1l	equ	0xFE1
  3646                           indf2	equ	0xFDF
  3647                           plusw2	equ	0xFDB
  3648                           fsr2h	equ	0xFDA
  3649                           fsr2l	equ	0xFD9
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _printErrorMessage *****************
  3653 ;; Defined at:
  3654 ;;		line 206 in file "src/system/main.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;  err             3   58[BANK0 ] struct error
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;                  1    wreg      void 
  3661 ;; Registers used:
  3662 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3668 ;;      Params:         0       3       0       0       0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3670 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3671 ;;      Totals:         0       5       0       0       0       0       0       0       0
  3672 ;;Total ram usage:        5 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    6
  3675 ;; This function calls:
  3676 ;;		_UARTTransmitText
  3677 ;;		_intToString
  3678 ;; This function is called by:
  3679 ;;		_main
  3680 ;; This function uses a non-reentrant model
  3681 ;;
  3682                           
  3683                           	psect	text3
  3684  002DB2                     __ptext3:
  3685                           	opt stack 0
  3686  002DB2                     _printErrorMessage:
  3687                           	opt stack 24
  3688                           
  3689                           ;main.c: 207: UARTTransmitText("[ERROR]");
  3690                           
  3691                           ;incstack = 0
  3692  002DB2  0EAC               	movlw	low STR_44
  3693  002DB4  0100               	movlb	0	; () banked
  3694  002DB6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3695  002DB8  0E7F               	movlw	high STR_44
  3696  002DBA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3697  002DBC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3698                           
  3699                           ;main.c: 208: switch (err.module) {
  3700  002DC0  D028               	goto	l652
  3701  002DC2                     
  3702                           ;main.c: 210: UARTTransmitText(" MEMORY MODULE: ");
  3703  002DC2  0EBC               	movlw	low STR_45
  3704  002DC4  0100               	movlb	0	; () banked
  3705  002DC6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3706  002DC8  0E7E               	movlw	high STR_45
  3707  002DCA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3708  002DCC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3709                           
  3710                           ;main.c: 211: break;
  3711  002DD0  D050               	goto	l660
  3712  002DD2                     
  3713                           ;main.c: 213: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  3714  002DD2  0E1A               	movlw	low STR_46
  3715  002DD4  0100               	movlb	0	; () banked
  3716  002DD6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3717  002DD8  0E7D               	movlw	high STR_46
  3718  002DDA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3719  002DDC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3720                           
  3721                           ;main.c: 214: break;
  3722  002DE0  D048               	goto	l660
  3723  002DE2                     
  3724                           ;main.c: 216: UARTTransmitText(" ETHERNET MODULE: ");
  3725  002DE2  0E73               	movlw	low STR_47
  3726  002DE4  0100               	movlb	0	; () banked
  3727  002DE6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3728  002DE8  0E7E               	movlw	high STR_47
  3729  002DEA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3730  002DEC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3731                           
  3732                           ;main.c: 217: break;
  3733  002DF0  D040               	goto	l660
  3734  002DF2                     
  3735                           ;main.c: 219: UARTTransmitText(" ARP MODULE: ");
  3736  002DF2  0E3C               	movlw	low STR_48
  3737  002DF4  0100               	movlb	0	; () banked
  3738  002DF6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3739  002DF8  0E7F               	movlw	high STR_48
  3740  002DFA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3741  002DFC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3742                           
  3743                           ;main.c: 220: break;
  3744  002E00  D038               	goto	l660
  3745  002E02                     
  3746                           ;main.c: 222: UARTTransmitText(" IPv4 MODULE: ");
  3747  002E02  0E2D               	movlw	low STR_49
  3748  002E04  0100               	movlb	0	; () banked
  3749  002E06  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3750  002E08  0E7F               	movlw	high STR_49
  3751  002E0A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3752  002E0C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3753                           
  3754                           ;main.c: 225: }
  3755                           
  3756                           ;main.c: 224: break;
  3757                           
  3758                           ;main.c: 223: default:
  3759  002E10  D030               	goto	l660
  3760  002E12                     l652:
  3761  002E12  0100               	movlb	0	; () banked
  3762  002E14  519A               	movf	printErrorMessage@err& (0+255),w,b
  3763                           
  3764                           ; Switch size 1, requested type "space"
  3765                           ; Number of cases is 5, Range of values is 0 to 4
  3766                           ; switch strategies available:
  3767                           ; Name         Instructions Cycles
  3768                           ; simple_byte           16     9 (average)
  3769                           ;	Chosen strategy is simple_byte
  3770  002E16  0A00               	xorlw	0	; case 0
  3771  002E18  B4D8               	btfsc	status,2,c
  3772  002E1A  D7D3               	goto	l653
  3773  002E1C  0A01               	xorlw	1	; case 1
  3774  002E1E  B4D8               	btfsc	status,2,c
  3775  002E20  D7D8               	goto	l655
  3776  002E22  0A03               	xorlw	3	; case 2
  3777  002E24  B4D8               	btfsc	status,2,c
  3778  002E26  D7DD               	goto	l656
  3779  002E28  0A01               	xorlw	1	; case 3
  3780  002E2A  B4D8               	btfsc	status,2,c
  3781  002E2C  D7E2               	goto	l657
  3782  002E2E  0A07               	xorlw	7	; case 4
  3783  002E30  B4D8               	btfsc	status,2,c
  3784  002E32  D7E7               	goto	l658
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;main.c: 226: switch (err.code) {
  3788  002E34  D01E               	goto	l660
  3789  002E36                     
  3790                           ; BSR set to: 0
  3791                           ;main.c: 228: UARTTransmitText("Ethernet controller is unresponsive.");
  3792                           
  3793                           ; BSR set to: 0
  3794  002E36  0ED3               	movlw	low STR_50
  3795  002E38  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3796  002E3A  0E7C               	movlw	high STR_50
  3797  002E3C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3798  002E3E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3799                           
  3800                           ;main.c: 229: break;
  3801  002E42  D030               	goto	l662
  3802  002E44                     
  3803                           ;main.c: 231: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  3804  002E44  0E1C               	movlw	low STR_51
  3805  002E46  0100               	movlb	0	; () banked
  3806  002E48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3807  002E4A  0E7C               	movlw	high STR_51
  3808  002E4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3809  002E4E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3810                           
  3811                           ;main.c: 232: break;
  3812  002E52  D028               	goto	l662
  3813  002E54                     
  3814                           ;main.c: 234: UARTTransmitText("IP address could not be resolved.");
  3815  002E54  0EF8               	movlw	low STR_52
  3816  002E56  0100               	movlb	0	; () banked
  3817  002E58  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3818  002E5A  0E7C               	movlw	high STR_52
  3819  002E5C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3820  002E5E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3821  002E62                     
  3822                           ;main.c: 237: UARTTransmitText("An unknown error has occured.");
  3823                           
  3824                           ;main.c: 236: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  3825  002E62  0E38               	movlw	low STR_53
  3826  002E64  0100               	movlb	0	; () banked
  3827  002E66  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3828  002E68  0E7D               	movlw	high STR_53
  3829  002E6A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3830  002E6C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3831                           
  3832                           ;main.c: 239: }
  3833                           
  3834                           ;main.c: 238: break;
  3835  002E70  D019               	goto	l662
  3836  002E72                     l660:
  3837  002E72  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  3838  002E76  CFDE F09D          	movff	postinc2,??_printErrorMessage
  3839  002E7A  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  3840                           
  3841                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3842                           ; Switch size 1, requested type "space"
  3843                           ; Number of cases is 1, Range of values is 1 to 1
  3844                           ; switch strategies available:
  3845                           ; Name         Instructions Cycles
  3846                           ; simple_byte            4     3 (average)
  3847                           ;	Chosen strategy is simple_byte
  3848  002E7E  0100               	movlb	0	; () banked
  3849  002E80  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  3850  002E82  0A01               	xorlw	1	; case 1
  3851  002E84  A4D8               	btfss	status,2,c
  3852  002E86  D7ED               	goto	l665
  3853                           
  3854                           ; BSR set to: 0
  3855                           ; Switch size 1, requested type "space"
  3856                           ; Number of cases is 4, Range of values is 45 to 146
  3857                           ; switch strategies available:
  3858                           ; Name         Instructions Cycles
  3859                           ; simple_byte           13     7 (average)
  3860                           ;	Chosen strategy is simple_byte
  3861  002E88  519D               	movf	??_printErrorMessage& (0+255),w,b
  3862  002E8A  0A2D               	xorlw	45	; case 45
  3863  002E8C  B4D8               	btfsc	status,2,c
  3864  002E8E  D7DA               	goto	l663
  3865  002E90  0A03               	xorlw	3	; case 46
  3866  002E92  B4D8               	btfsc	status,2,c
  3867  002E94  D7D0               	goto	l661
  3868  002E96  0AA1               	xorlw	161	; case 143
  3869  002E98  B4D8               	btfsc	status,2,c
  3870  002E9A  D7E3               	goto	l665
  3871  002E9C  0A1D               	xorlw	29	; case 146
  3872  002E9E  B4D8               	btfsc	status,2,c
  3873  002EA0  D7D9               	goto	l664
  3874  002EA2  D7DF               	goto	l665
  3875  002EA4                     l662:
  3876                           
  3877                           ;main.c: 241: UARTTransmitText(" (Code: ");
  3878                           
  3879                           ; BSR set to: 0
  3880  002EA4  0E9A               	movlw	low STR_54
  3881  002EA6  0100               	movlb	0	; () banked
  3882  002EA8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3883  002EAA  0E7F               	movlw	high STR_54
  3884  002EAC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3885  002EAE  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3886                           
  3887                           ;main.c: 242: UARTTransmitText(intToString(err.code));
  3888  002EB2  C09B  F073         	movff	printErrorMessage@err+1,intToString@val
  3889  002EB6  C09C  F074         	movff	printErrorMessage@err+2,intToString@val+1
  3890  002EBA  0100               	movlb	0	; () banked
  3891  002EBC  6B75               	clrf	(intToString@val+2)& (0+255),b
  3892  002EBE  6B76               	clrf	(intToString@val+3)& (0+255),b
  3893  002EC0  EC13  F00C         	call	_intToString	;wreg free
  3894  002EC4  C073  F098         	movff	?_intToString,UARTTransmitText@str
  3895  002EC8  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  3896  002ECC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3897                           
  3898                           ;main.c: 243: UARTTransmitText(").\n\r");
  3899  002ED0  0EDC               	movlw	low STR_55
  3900  002ED2  0100               	movlb	0	; () banked
  3901  002ED4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  3902  002ED6  0E7F               	movlw	high STR_55
  3903  002ED8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  3904  002EDA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  3905  002EDE  0012               	return		;funcret
  3906  002EE0                     __end_of_printErrorMessage:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           intcon	equ	0xFF2
  3915                           intcon3	equ	0xFF0
  3916                           postinc0	equ	0xFEE
  3917                           plusw0	equ	0xFEB
  3918                           fsr0h	equ	0xFEA
  3919                           fsr0l	equ	0xFE9
  3920                           wreg	equ	0xFE8
  3921                           postdec1	equ	0xFE5
  3922                           plusw1	equ	0xFE3
  3923                           fsr1l	equ	0xFE1
  3924                           indf2	equ	0xFDF
  3925                           postinc2	equ	0xFDE
  3926                           postdec2	equ	0xFDD
  3927                           plusw2	equ	0xFDB
  3928                           fsr2h	equ	0xFDA
  3929                           fsr2l	equ	0xFD9
  3930                           status	equ	0xFD8
  3931                           
  3932 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  3933 ;; Defined at:
  3934 ;;		line 110 in file "src/stack/protocols/ipv4.c"
  3935 ;; Parameters:    Size  Location     Type
  3936 ;;  header         23    0[BANK0 ] struct ipv4_header
  3937 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  3938 ;;		 -> main@headerBuf(32), 
  3939 ;; Auto vars:     Size  Location     Type
  3940 ;;		None
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  1    wreg      void 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3950 ;;      Params:         0      25       0       0       0       0       0       0       0
  3951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3952 ;;      Temps:          0       2       0       0       0       0       0       0       0
  3953 ;;      Totals:         0      27       0       0       0       0       0       0       0
  3954 ;;Total ram usage:       27 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    4
  3957 ;; This function calls:
  3958 ;;		Nothing
  3959 ;; This function is called by:
  3960 ;;		_main
  3961 ;; This function uses a non-reentrant model
  3962 ;;
  3963                           
  3964                           	psect	text4
  3965  002864                     __ptext4:
  3966                           	opt stack 0
  3967  002864                     _ipv4_writeHeaderIntoBuffer:
  3968                           	opt stack 26
  3969                           
  3970                           ;ipv4.c: 111: *ptr = (header.version << 4) | (header.headerLength);
  3971                           
  3972                           ;incstack = 0
  3973  002864  0100               	movlb	0	; () banked
  3974  002866  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  3975  002868  0BF0               	andlw	240
  3976  00286A  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  3977  00286C  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  3978  002870  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  3979  002874  6EDF               	movwf	indf2,c
  3980                           
  3981                           ;ipv4.c: 112: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  3982  002876  EE20 F001          	lfsr	2,1
  3983  00287A  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3984  00287C  26D9               	addwf	fsr2l,f,c
  3985  00287E  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  3986  002880  22DA               	addwfc	fsr2h,f,c
  3987  002882  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  3988  002886  0E03               	movlw	3
  3989  002888  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  3990  00288A  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  3991  00288C  46E8               	rlncf	wreg,f,c
  3992  00288E  0BFC               	andlw	252
  3993  002890  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  3994  002892  6EDF               	movwf	indf2,c
  3995                           
  3996                           ;ipv4.c: 113: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  3997  002894  EE20 F002          	lfsr	2,2
  3998  002898  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  3999  00289A  26D9               	addwf	fsr2l,f,c
  4000  00289C  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4001  00289E  22DA               	addwfc	fsr2h,f,c
  4002  0028A0  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  4003  0028A2  6EDF               	movwf	indf2,c
  4004                           
  4005                           ;ipv4.c: 114: *(ptr + 3) = header.totalLength & 0x00ff;
  4006  0028A4  EE20 F003          	lfsr	2,3
  4007  0028A8  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4008  0028AA  26D9               	addwf	fsr2l,f,c
  4009  0028AC  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4010  0028AE  22DA               	addwfc	fsr2h,f,c
  4011  0028B0  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  4012                           
  4013                           ;ipv4.c: 115: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  4014  0028B4  EE20 F004          	lfsr	2,4
  4015  0028B8  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4016  0028BA  26D9               	addwf	fsr2l,f,c
  4017  0028BC  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4018  0028BE  22DA               	addwfc	fsr2h,f,c
  4019  0028C0  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  4020  0028C2  6EDF               	movwf	indf2,c
  4021                           
  4022                           ;ipv4.c: 116: *(ptr + 5) = header.identification & 0x00ff;
  4023  0028C4  EE20 F005          	lfsr	2,5
  4024  0028C8  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4025  0028CA  26D9               	addwf	fsr2l,f,c
  4026  0028CC  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4027  0028CE  22DA               	addwfc	fsr2h,f,c
  4028  0028D0  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  4029                           
  4030                           ; BSR set to: 0
  4031                           ;ipv4.c: 117: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  4032  0028D4  EE20 F006          	lfsr	2,6
  4033  0028D8  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4034  0028DA  26D9               	addwf	fsr2l,f,c
  4035  0028DC  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4036  0028DE  22DA               	addwfc	fsr2h,f,c
  4037  0028E0  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  4038  0028E4  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  4039  0028E8  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  4040  0028EC  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  4041  0028F0  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  4042  0028F2  0E1F               	movlw	31
  4043  0028F4  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  4044  0028F6  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  4045  0028F8  46E8               	rlncf	wreg,f,c
  4046  0028FA  0BE0               	andlw	224
  4047  0028FC  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  4048  0028FE  6EDF               	movwf	indf2,c
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;ipv4.c: 118: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  4052  002900  EE20 F007          	lfsr	2,7
  4053  002904  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4054  002906  26D9               	addwf	fsr2l,f,c
  4055  002908  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4056  00290A  22DA               	addwfc	fsr2h,f,c
  4057  00290C  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  4058                           
  4059                           ; BSR set to: 0
  4060                           ;ipv4.c: 119: *(ptr + 8) = (header.timeToLive);
  4061  002910  EE20 F008          	lfsr	2,8
  4062  002914  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4063  002916  26D9               	addwf	fsr2l,f,c
  4064  002918  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4065  00291A  22DA               	addwfc	fsr2h,f,c
  4066  00291C  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;ipv4.c: 120: *(ptr + 9) = (header.protocol);
  4070  002920  EE20 F009          	lfsr	2,9
  4071  002924  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4072  002926  26D9               	addwf	fsr2l,f,c
  4073  002928  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4074  00292A  22DA               	addwfc	fsr2h,f,c
  4075  00292C  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;ipv4.c: 121: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  4079  002930  EE20 F00A          	lfsr	2,10
  4080  002934  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4081  002936  26D9               	addwf	fsr2l,f,c
  4082  002938  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4083  00293A  22DA               	addwfc	fsr2h,f,c
  4084  00293C  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  4085  00293E  6EDF               	movwf	indf2,c
  4086                           
  4087                           ; BSR set to: 0
  4088                           ;ipv4.c: 122: *(ptr + 11) = (header.checksum & 0x00ff);
  4089  002940  EE20 F00B          	lfsr	2,11
  4090  002944  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4091  002946  26D9               	addwf	fsr2l,f,c
  4092  002948  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4093  00294A  22DA               	addwfc	fsr2h,f,c
  4094  00294C  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;ipv4.c: 123: *(ptr + 12) = (header.source.address[0]);
  4098  002950  EE20 F00C          	lfsr	2,12
  4099  002954  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4100  002956  26D9               	addwf	fsr2l,f,c
  4101  002958  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4102  00295A  22DA               	addwfc	fsr2h,f,c
  4103  00295C  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;ipv4.c: 124: *(ptr + 13) = (header.source.address[1]);
  4107  002960  EE20 F00D          	lfsr	2,13
  4108  002964  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4109  002966  26D9               	addwf	fsr2l,f,c
  4110  002968  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4111  00296A  22DA               	addwfc	fsr2h,f,c
  4112  00296C  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;ipv4.c: 125: *(ptr + 14) = (header.source.address[2]);
  4116  002970  EE20 F00E          	lfsr	2,14
  4117  002974  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4118  002976  26D9               	addwf	fsr2l,f,c
  4119  002978  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4120  00297A  22DA               	addwfc	fsr2h,f,c
  4121  00297C  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;ipv4.c: 126: *(ptr + 15) = (header.source.address[3]);
  4125  002980  EE20 F00F          	lfsr	2,15
  4126  002984  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4127  002986  26D9               	addwf	fsr2l,f,c
  4128  002988  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4129  00298A  22DA               	addwfc	fsr2h,f,c
  4130  00298C  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  4131                           
  4132                           ; BSR set to: 0
  4133                           ;ipv4.c: 127: *(ptr + 16) = (header.destination.address[0]);
  4134  002990  EE20 F010          	lfsr	2,16
  4135  002994  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4136  002996  26D9               	addwf	fsr2l,f,c
  4137  002998  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4138  00299A  22DA               	addwfc	fsr2h,f,c
  4139  00299C  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;ipv4.c: 128: *(ptr + 17) = (header.destination.address[1]);
  4143  0029A0  EE20 F011          	lfsr	2,17
  4144  0029A4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4145  0029A6  26D9               	addwf	fsr2l,f,c
  4146  0029A8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4147  0029AA  22DA               	addwfc	fsr2h,f,c
  4148  0029AC  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;ipv4.c: 129: *(ptr + 18) = (header.destination.address[2]);
  4152  0029B0  EE20 F012          	lfsr	2,18
  4153  0029B4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4154  0029B6  26D9               	addwf	fsr2l,f,c
  4155  0029B8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4156  0029BA  22DA               	addwfc	fsr2h,f,c
  4157  0029BC  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;ipv4.c: 130: *(ptr + 19) = (header.destination.address[3]);
  4161  0029C0  EE20 F013          	lfsr	2,19
  4162  0029C4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  4163  0029C6  26D9               	addwf	fsr2l,f,c
  4164  0029C8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  4165  0029CA  22DA               	addwfc	fsr2h,f,c
  4166  0029CC  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  4167                           
  4168                           ; BSR set to: 0
  4169  0029D0  0012               	return		;funcret
  4170  0029D2                     __end_of_ipv4_writeHeaderIntoBuffer:
  4171                           	opt stack 0
  4172                           tblptru	equ	0xFF8
  4173                           tblptrh	equ	0xFF7
  4174                           tblptrl	equ	0xFF6
  4175                           tablat	equ	0xFF5
  4176                           prodh	equ	0xFF4
  4177                           prodl	equ	0xFF3
  4178                           intcon	equ	0xFF2
  4179                           intcon3	equ	0xFF0
  4180                           postinc0	equ	0xFEE
  4181                           plusw0	equ	0xFEB
  4182                           fsr0h	equ	0xFEA
  4183                           fsr0l	equ	0xFE9
  4184                           wreg	equ	0xFE8
  4185                           postinc1	equ	0xFE6
  4186                           postdec1	equ	0xFE5
  4187                           plusw1	equ	0xFE3
  4188                           fsr1l	equ	0xFE1
  4189                           indf2	equ	0xFDF
  4190                           postinc2	equ	0xFDE
  4191                           postdec2	equ	0xFDD
  4192                           plusw2	equ	0xFDB
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _ipv4_txFrameRequest *****************
  4198 ;; Defined at:
  4199 ;;		line 29 in file "src/stack/protocols/ipv4.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  4202 ;;		 -> stack(113), 
  4203 ;; Auto vars:     Size  Location     Type
  4204 ;;		None
  4205 ;; Return value:  Size  Location     Type
  4206 ;;                  1    wreg      void 
  4207 ;; Registers used:
  4208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4209 ;; Tracked objects:
  4210 ;;		On entry : 0/0
  4211 ;;		On exit  : 0/0
  4212 ;;		Unchanged: 0/0
  4213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4214 ;;      Params:         0       2       0       0       0       0       0       0       0
  4215 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4216 ;;      Temps:          0       4       0       0       0       0       0       0       0
  4217 ;;      Totals:         0       6       0       0       0       0       0       0       0
  4218 ;;Total ram usage:        6 bytes
  4219 ;; Hardware stack levels used:    1
  4220 ;; Hardware stack levels required when called:    9
  4221 ;; This function calls:
  4222 ;;		_ethernet_txFrameRequest
  4223 ;; This function is called by:
  4224 ;;		_main
  4225 ;; This function uses a non-reentrant model
  4226 ;;
  4227                           
  4228                           	psect	text5
  4229  002C7C                     __ptext5:
  4230                           	opt stack 0
  4231  002C7C                     _ipv4_txFrameRequest:
  4232                           	opt stack 21
  4233                           
  4234                           ;ipv4.c: 30: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  4235                           
  4236                           ; BSR set to: 0
  4237                           ;incstack = 0
  4238  002C7C  0100               	movlb	0	; () banked
  4239  002C7E  EE20 F004          	lfsr	2,4
  4240  002C82  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4241  002C84  26D9               	addwf	fsr2l,f,c
  4242  002C86  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4243  002C88  22DA               	addwfc	fsr2h,f,c
  4244  002C8A  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4245  002C8E  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4246  002C92  0E08               	movlw	8
  4247  002C94  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4248  002C96  0E00               	movlw	0
  4249  002C98  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4250  002C9A  EE20 F020          	lfsr	2,32
  4251  002C9E  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4252  002CA0  26D9               	addwf	fsr2l,f,c
  4253  002CA2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4254  002CA4  22DA               	addwfc	fsr2h,f,c
  4255  002CA6  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4256  002CAA  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4257                           
  4258                           ;ipv4.c: 31: packet->ethernet.ethertype = ETHERTYPE_IPv4;
  4259  002CAE  EE20 F02E          	lfsr	2,46
  4260  002CB2  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4261  002CB4  26D9               	addwf	fsr2l,f,c
  4262  002CB6  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4263  002CB8  22DA               	addwfc	fsr2h,f,c
  4264  002CBA  0E00               	movlw	0
  4265  002CBC  6EDE               	movwf	postinc2,c
  4266  002CBE  0E08               	movlw	8
  4267  002CC0  6EDD               	movwf	postdec2,c
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;ipv4.c: 32: ethernet_txFrameRequest(&packet->ethernet);
  4271  002CC2  0E20               	movlw	32
  4272  002CC4  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
  4273  002CC6  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
  4274  002CC8  0E00               	movlw	0
  4275  002CCA  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4276  002CCC  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
  4277  002CCE  EC8A  F01A         	call	_ethernet_txFrameRequest	;wreg free
  4278                           
  4279                           ;ipv4.c: 34: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
  4280  002CD2  0100               	movlb	0	; () banked
  4281  002CD4  EE20 F036          	lfsr	2,54
  4282  002CD8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4283  002CDA  26D9               	addwf	fsr2l,f,c
  4284  002CDC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4285  002CDE  22DA               	addwfc	fsr2h,f,c
  4286  002CE0  EE10 F01D          	lfsr	1,29
  4287  002CE4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4288  002CE6  26E1               	addwf	fsr1l,f,c
  4289  002CE8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4290  002CEA  22E2               	addwfc	fsr1h,f,c
  4291  002CEC  CFDF FFE7          	movff	indf2,indf1
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;ipv4.c: 35: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
  4295  002CF0  EE20 F037          	lfsr	2,55
  4296  002CF4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4297  002CF6  26D9               	addwf	fsr2l,f,c
  4298  002CF8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4299  002CFA  22DA               	addwfc	fsr2h,f,c
  4300  002CFC  EE10 F01E          	lfsr	1,30
  4301  002D00  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4302  002D02  26E1               	addwf	fsr1l,f,c
  4303  002D04  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4304  002D06  22E2               	addwfc	fsr1h,f,c
  4305  002D08  CFDF FFE7          	movff	indf2,indf1
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;ipv4.c: 36: packet->memory.index = packet->ethernet.memory.index;
  4309  002D0C  EE20 F038          	lfsr	2,56
  4310  002D10  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4311  002D12  26D9               	addwf	fsr2l,f,c
  4312  002D14  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4313  002D16  22DA               	addwfc	fsr2h,f,c
  4314  002D18  EE10 F01F          	lfsr	1,31
  4315  002D1C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4316  002D1E  26E1               	addwf	fsr1l,f,c
  4317  002D20  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4318  002D22  22E2               	addwfc	fsr1h,f,c
  4319  002D24  CFDF FFE7          	movff	indf2,indf1
  4320                           
  4321                           ; BSR set to: 0
  4322                           ;ipv4.c: 37: packet->memory.start = packet->ethernet.memory.start + 8;
  4323  002D28  EE20 F030          	lfsr	2,48
  4324  002D2C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4325  002D2E  26D9               	addwf	fsr2l,f,c
  4326  002D30  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4327  002D32  22DA               	addwfc	fsr2h,f,c
  4328  002D34  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  4329  002D38  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  4330  002D3C  0E08               	movlw	8
  4331  002D3E  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  4332  002D40  0E00               	movlw	0
  4333  002D42  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
  4334  002D44  EE20 F017          	lfsr	2,23
  4335  002D48  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4336  002D4A  26D9               	addwf	fsr2l,f,c
  4337  002D4C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4338  002D4E  22DA               	addwfc	fsr2h,f,c
  4339  002D50  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
  4340  002D54  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;ipv4.c: 38: packet->memory.end = packet->ethernet.memory.end;
  4344  002D58  EE20 F032          	lfsr	2,50
  4345  002D5C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4346  002D5E  26D9               	addwf	fsr2l,f,c
  4347  002D60  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4348  002D62  22DA               	addwfc	fsr2h,f,c
  4349  002D64  EE10 F019          	lfsr	1,25
  4350  002D68  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4351  002D6A  26E1               	addwf	fsr1l,f,c
  4352  002D6C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4353  002D6E  22E2               	addwfc	fsr1h,f,c
  4354  002D70  CFDE FFE6          	movff	postinc2,postinc1
  4355  002D74  CFDD FFE5          	movff	postdec2,postdec1
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;ipv4.c: 39: packet->memory.length = packet->ethernet.memory.length - 8;
  4359  002D78  0EF8               	movlw	248
  4360  002D7A  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
  4361  002D7C  0EFF               	movlw	255
  4362  002D7E  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
  4363  002D80  EE20 F034          	lfsr	2,52
  4364  002D84  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4365  002D86  26D9               	addwf	fsr2l,f,c
  4366  002D88  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4367  002D8A  22DA               	addwfc	fsr2h,f,c
  4368  002D8C  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
  4369  002D90  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
  4370  002D94  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
  4371  002D96  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
  4372  002D98  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
  4373  002D9A  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
  4374  002D9C  EE20 F01B          	lfsr	2,27
  4375  002DA0  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  4376  002DA2  26D9               	addwf	fsr2l,f,c
  4377  002DA4  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  4378  002DA6  22DA               	addwfc	fsr2h,f,c
  4379  002DA8  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
  4380  002DAC  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
  4381                           
  4382                           ; BSR set to: 0
  4383  002DB0  0012               	return		;funcret
  4384  002DB2                     __end_of_ipv4_txFrameRequest:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           intcon3	equ	0xFF0
  4394                           postinc0	equ	0xFEE
  4395                           plusw0	equ	0xFEB
  4396                           fsr0h	equ	0xFEA
  4397                           fsr0l	equ	0xFE9
  4398                           wreg	equ	0xFE8
  4399                           indf1	equ	0xFE7
  4400                           postinc1	equ	0xFE6
  4401                           postdec1	equ	0xFE5
  4402                           plusw1	equ	0xFE3
  4403                           fsr1h	equ	0xFE2
  4404                           fsr1l	equ	0xFE1
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           plusw2	equ	0xFDB
  4409                           fsr2h	equ	0xFDA
  4410                           fsr2l	equ	0xFD9
  4411                           status	equ	0xFD8
  4412                           
  4413 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
  4414 ;; Defined at:
  4415 ;;		line 81 in file "src/stack/protocols/ipv4.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;  data            1    wreg     unsigned char 
  4418 ;;  packet         62   30[BANK0 ] struct ipv4_packet
  4419 ;; Auto vars:     Size  Location     Type
  4420 ;;  data            1   94[BANK0 ] unsigned char 
  4421 ;;  ethernetPack    2   92[BANK0 ] unsigned int 
  4422 ;;  remainingLen    2    0        unsigned int 
  4423 ;; Return value:  Size  Location     Type
  4424 ;;                  1    wreg      void 
  4425 ;; Registers used:
  4426 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
  4427 ;; Tracked objects:
  4428 ;;		On entry : 0/0
  4429 ;;		On exit  : 0/0
  4430 ;;		Unchanged: 0/0
  4431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4432 ;;      Params:         0      62       0       0       0       0       0       0       0
  4433 ;;      Locals:         0       3       0       0       0       0       0       0       0
  4434 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4435 ;;      Totals:         0      65       0       0       0       0       0       0       0
  4436 ;;Total ram usage:       65 bytes
  4437 ;; Hardware stack levels used:    1
  4438 ;; Hardware stack levels required when called:    8
  4439 ;; This function calls:
  4440 ;;		_ethernetController_streamToTransmitBuffer
  4441 ;; This function is called by:
  4442 ;;		_main
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           	psect	text6
  4447  0049FA                     __ptext6:
  4448                           	opt stack 0
  4449  0049FA                     _ipv4_streamToTransmissionBuffer:
  4450                           	opt stack 22
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;incstack = 0
  4454                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
  4455  0049FA  0100               	movlb	0	; () banked
  4456  0049FC  6FBE               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
  4457                           
  4458                           ;ipv4.c: 82: uint16_t ethernetPacketLength = packet.ipv4Header.totalLength;
  4459  0049FE  C082  F0BC         	movff	ipv4_streamToTransmissionBuffer@packet+4,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength
  4460  004A02  C083  F0BD         	movff	ipv4_streamToTransmissionBuffer@packet+5,ipv4_streamToTransmissionBuffer@ethernet
      +                          PacketLength+1
  4461                           
  4462                           ;ipv4.c: 83: uint16_t remainingLength;
  4463                           ;ipv4.c: 87: ethernetController_streamToTransmitBuffer(data, packet.memory);
  4464  004A06  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
  4465  004A0A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
  4466  004A0E  0E08               	movlw	8
  4467  004A10                     u11401:
  4468  004A10  CFDB FFEB          	movff	plusw2,plusw0
  4469  004A14  06E8               	decf	wreg,f,c
  4470  004A16  E2FC               	bc	u11401
  4471  004A18  0100               	movlb	0	; () banked
  4472  004A1A  51BE               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
  4473  004A1C  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
  4474  004A20  0012               	return		;funcret
  4475  004A22                     __end_of_ipv4_streamToTransmissionBuffer:
  4476                           	opt stack 0
  4477                           tblptru	equ	0xFF8
  4478                           tblptrh	equ	0xFF7
  4479                           tblptrl	equ	0xFF6
  4480                           tablat	equ	0xFF5
  4481                           prodh	equ	0xFF4
  4482                           prodl	equ	0xFF3
  4483                           intcon	equ	0xFF2
  4484                           intcon3	equ	0xFF0
  4485                           postinc0	equ	0xFEE
  4486                           plusw0	equ	0xFEB
  4487                           fsr0h	equ	0xFEA
  4488                           fsr0l	equ	0xFE9
  4489                           wreg	equ	0xFE8
  4490                           indf1	equ	0xFE7
  4491                           postinc1	equ	0xFE6
  4492                           postdec1	equ	0xFE5
  4493                           plusw1	equ	0xFE3
  4494                           fsr1h	equ	0xFE2
  4495                           fsr1l	equ	0xFE1
  4496                           indf2	equ	0xFDF
  4497                           postinc2	equ	0xFDE
  4498                           postdec2	equ	0xFDD
  4499                           plusw2	equ	0xFDB
  4500                           fsr2h	equ	0xFDA
  4501                           fsr2l	equ	0xFD9
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function _ipv4_setIPSourceAddress *****************
  4505 ;; Defined at:
  4506 ;;		line 231 in file "src/stack/protocols/ipv4.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  ip              4    0[BANK0 ] struct ipv4_address
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;		None
  4511 ;; Return value:  Size  Location     Type
  4512 ;;                  1    wreg      void 
  4513 ;; Registers used:
  4514 ;;		None
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4520 ;;      Params:         0       4       0       0       0       0       0       0       0
  4521 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4522 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4523 ;;      Totals:         0       4       0       0       0       0       0       0       0
  4524 ;;Total ram usage:        4 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    4
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_main
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text7
  4535  004C6A                     __ptext7:
  4536                           	opt stack 0
  4537  004C6A                     _ipv4_setIPSourceAddress:
  4538                           	opt stack 26
  4539                           
  4540                           ;ipv4.c: 232: sourceIPAddress = ip;
  4541                           
  4542                           ;incstack = 0
  4543  004C6A  C060  F02C         	movff	ipv4_setIPSourceAddress@ip,_sourceIPAddress
  4544  004C6E  C061  F02D         	movff	ipv4_setIPSourceAddress@ip+1,_sourceIPAddress+1
  4545  004C72  C062  F02E         	movff	ipv4_setIPSourceAddress@ip+2,_sourceIPAddress+2
  4546  004C76  C063  F02F         	movff	ipv4_setIPSourceAddress@ip+3,_sourceIPAddress+3
  4547  004C7A  0012               	return		;funcret
  4548  004C7C                     __end_of_ipv4_setIPSourceAddress:
  4549                           	opt stack 0
  4550                           tblptru	equ	0xFF8
  4551                           tblptrh	equ	0xFF7
  4552                           tblptrl	equ	0xFF6
  4553                           tablat	equ	0xFF5
  4554                           prodh	equ	0xFF4
  4555                           prodl	equ	0xFF3
  4556                           intcon	equ	0xFF2
  4557                           intcon3	equ	0xFF0
  4558                           postinc0	equ	0xFEE
  4559                           plusw0	equ	0xFEB
  4560                           fsr0h	equ	0xFEA
  4561                           fsr0l	equ	0xFE9
  4562                           wreg	equ	0xFE8
  4563                           indf1	equ	0xFE7
  4564                           postinc1	equ	0xFE6
  4565                           postdec1	equ	0xFE5
  4566                           plusw1	equ	0xFE3
  4567                           fsr1h	equ	0xFE2
  4568                           fsr1l	equ	0xFE1
  4569                           indf2	equ	0xFDF
  4570                           postinc2	equ	0xFDE
  4571                           postdec2	equ	0xFDD
  4572                           plusw2	equ	0xFDB
  4573                           fsr2h	equ	0xFDA
  4574                           fsr2l	equ	0xFD9
  4575                           status	equ	0xFD8
  4576                           
  4577 ;; *************** function _handleStackBackgroundTasks *****************
  4578 ;; Defined at:
  4579 ;;		line 26 in file "src/stack/backgroundTasks.c"
  4580 ;; Parameters:    Size  Location     Type
  4581 ;;  stack           2  132[BANK1 ] PTR volatile struct stac
  4582 ;;		 -> stack(113), 
  4583 ;; Auto vars:     Size  Location     Type
  4584 ;;		None
  4585 ;; Return value:  Size  Location     Type
  4586 ;;                  1    wreg      void 
  4587 ;; Registers used:
  4588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4589 ;; Tracked objects:
  4590 ;;		On entry : 0/0
  4591 ;;		On exit  : 0/0
  4592 ;;		Unchanged: 0/0
  4593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4594 ;;      Params:         0       0       2       0       0       0       0       0       0
  4595 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4596 ;;      Temps:          0       0       2       0       0       0       0       0       0
  4597 ;;      Totals:         0       0       4       0       0       0       0       0       0
  4598 ;;Total ram usage:        4 bytes
  4599 ;; Hardware stack levels used:    1
  4600 ;; Hardware stack levels required when called:   13
  4601 ;; This function calls:
  4602 ;;		_UARTTransmitText
  4603 ;;		_ethernetController_clearInterruptFlag
  4604 ;;		_ethernetController_newPacketAvailable
  4605 ;;		_ethernetController_pollInterruptFlags
  4606 ;;		_ethernetController_setLEDConfig
  4607 ;;		_ethernetController_updateLinkStatus
  4608 ;;		_ethernet_rxGetNewFrame
  4609 ;;		_ipAdressToString
  4610 ;;		_ipv4_sendFrame
  4611 ;; This function is called by:
  4612 ;;		_main
  4613 ;; This function uses a non-reentrant model
  4614 ;;
  4615                           
  4616                           	psect	text8
  4617  00219C                     __ptext8:
  4618                           	opt stack 0
  4619  00219C                     _handleStackBackgroundTasks:
  4620                           	opt stack 17
  4621                           
  4622                           ;backgroundTasks.c: 27: stack->background.interruptFlags = ethernetController_pollInterr
      +                          uptFlags();
  4623                           
  4624                           ;incstack = 0
  4625  00219C  EC70  F017         	call	_ethernetController_pollInterruptFlags	;wreg free
  4626  0021A0  0101               	movlb	1	; () banked
  4627  0021A2  EE20 F012          	lfsr	2,18
  4628  0021A6  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4629  0021A8  26D9               	addwf	fsr2l,f,c
  4630  0021AA  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4631  0021AC  22DA               	addwfc	fsr2h,f,c
  4632  0021AE  0100               	movlb	0	; () banked
  4633  0021B0  C078  FFDE         	movff	?_ethernetController_pollInterruptFlags,postinc2
  4634  0021B4  C079  FFDD         	movff	?_ethernetController_pollInterruptFlags+1,postdec2
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;backgroundTasks.c: 28: if (stack->background.interruptFlags.PKTIF) {
  4638  0021B8  0101               	movlb	1	; () banked
  4639  0021BA  EE20 F012          	lfsr	2,18
  4640  0021BE  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4641  0021C0  26D9               	addwf	fsr2l,f,c
  4642  0021C2  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4643  0021C4  22DA               	addwfc	fsr2h,f,c
  4644  0021C6  A8DF               	btfss	indf2,4,c
  4645  0021C8  D018               	goto	l513
  4646                           
  4647                           ; BSR set to: 1
  4648                           ;backgroundTasks.c: 30: if (ethernetController_newPacketAvailable()) {
  4649  0021CA  EC50  F026         	call	_ethernetController_newPacketAvailable	;wreg free
  4650  0021CE  0900               	iorlw	0
  4651  0021D0  B4D8               	btfsc	status,2,c
  4652  0021D2  D013               	goto	l513
  4653                           
  4654                           ;backgroundTasks.c: 31: stack->background.err = ethernet_rxGetNewFrame(&stack->ethernet)
      +                          ;
  4655  0021D4  C184  F178         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  4656  0021D8  C185  F179         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  4657  0021DC  ECCF  F002         	call	_ethernet_rxGetNewFrame	;wreg free
  4658  0021E0  0101               	movlb	1	; () banked
  4659  0021E2  EE20 F00F          	lfsr	2,15
  4660  0021E6  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4661  0021E8  26D9               	addwf	fsr2l,f,c
  4662  0021EA  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4663  0021EC  22DA               	addwfc	fsr2h,f,c
  4664  0021EE  C178  FFDE         	movff	?_ethernet_rxGetNewFrame,postinc2
  4665  0021F2  C179  FFDE         	movff	?_ethernet_rxGetNewFrame+1,postinc2
  4666  0021F6  C17A  FFDE         	movff	?_ethernet_rxGetNewFrame+2,postinc2
  4667  0021FA                     l513:
  4668                           
  4669                           ;backgroundTasks.c: 32: }
  4670                           ;backgroundTasks.c: 33: }
  4671                           ;backgroundTasks.c: 35: if (stack->background.fPacketPending) {
  4672                           
  4673                           ; BSR set to: 1
  4674                           
  4675                           ; BSR set to: 1
  4676  0021FA  0101               	movlb	1	; () banked
  4677  0021FC  EE20 F014          	lfsr	2,20
  4678  002200  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4679  002202  26D9               	addwf	fsr2l,f,c
  4680  002204  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4681  002206  22DA               	addwfc	fsr2h,f,c
  4682  002208  A0DF               	btfss	indf2,0,c
  4683  00220A  D082               	goto	l516
  4684                           
  4685                           ; BSR set to: 1
  4686                           ;backgroundTasks.c: 37: stack->background.err = ipv4_sendFrame(stack->pendingPacketToSen
      +                          d);
  4687  00220C  EE20 F033          	lfsr	2,51
  4688  002210  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4689  002212  26D9               	addwf	fsr2l,f,c
  4690  002214  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4691  002216  22DA               	addwfc	fsr2h,f,c
  4692  002218  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  4693  00221C  0E3D               	movlw	61
  4694  00221E                     u11211:
  4695  00221E  CFDB FFEB          	movff	plusw2,plusw0
  4696  002222  06E8               	decf	wreg,f,c
  4697  002224  E2FC               	bc	u11211
  4698  002226  EC6D  F013         	call	_ipv4_sendFrame	;wreg free
  4699  00222A  0101               	movlb	1	; () banked
  4700  00222C  EE20 F00F          	lfsr	2,15
  4701  002230  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4702  002232  26D9               	addwf	fsr2l,f,c
  4703  002234  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4704  002236  22DA               	addwfc	fsr2h,f,c
  4705  002238  C134  FFDE         	movff	?_ipv4_sendFrame,postinc2
  4706  00223C  C135  FFDE         	movff	?_ipv4_sendFrame+1,postinc2
  4707  002240  C136  FFDE         	movff	?_ipv4_sendFrame+2,postinc2
  4708                           
  4709                           ; BSR set to: 1
  4710                           ;backgroundTasks.c: 38: if (stack->background.err.module == ERROR_MODULE_ARP &&
  4711                           ;backgroundTasks.c: 39: stack->background.err.code == ERROR_ARP_MAXIMUM_NUMBER_OF_REQUES
      +                          TS_REACHED) {
  4712  002244  EE20 F00F          	lfsr	2,15
  4713  002248  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4714  00224A  26D9               	addwf	fsr2l,f,c
  4715  00224C  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4716  00224E  22DA               	addwfc	fsr2h,f,c
  4717  002250  0E03               	movlw	3
  4718  002252  18DE               	xorwf	postinc2,w,c
  4719  002254  A4D8               	btfss	status,2,c
  4720  002256  D039               	goto	l515
  4721                           
  4722                           ; BSR set to: 1
  4723  002258  EE20 F010          	lfsr	2,16
  4724  00225C  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4725  00225E  26D9               	addwf	fsr2l,f,c
  4726  002260  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4727  002262  22DA               	addwfc	fsr2h,f,c
  4728  002264  0E92               	movlw	146
  4729  002266  18DE               	xorwf	postinc2,w,c
  4730  002268  E130               	bnz	l9025
  4731  00226A  04DE               	decf	postinc2,w,c
  4732  00226C  A4D8               	btfss	status,2,c
  4733  00226E  D02D               	goto	l515
  4734                           
  4735                           ; BSR set to: 1
  4736                           ;backgroundTasks.c: 40: UARTTransmitText("Could not resolve ");
  4737  002270  0E86               	movlw	low STR_22
  4738  002272  0100               	movlb	0	; () banked
  4739  002274  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4740  002276  0E7E               	movlw	high STR_22
  4741  002278  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4742  00227A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  4743                           
  4744                           ;backgroundTasks.c: 41: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ipv
      +                          4Header.destination));
  4745  00227E  0101               	movlb	1	; () banked
  4746  002280  EE20 F046          	lfsr	2,70
  4747  002284  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4748  002286  26D9               	addwf	fsr2l,f,c
  4749  002288  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4750  00228A  22DA               	addwfc	fsr2h,f,c
  4751  00228C  CFDE F067          	movff	postinc2,ipAdressToString@ip
  4752  002290  CFDE F068          	movff	postinc2,ipAdressToString@ip+1
  4753  002294  CFDE F069          	movff	postinc2,ipAdressToString@ip+2
  4754  002298  CFDE F06A          	movff	postinc2,ipAdressToString@ip+3
  4755  00229C  ECD7  F00F         	call	_ipAdressToString	;wreg free
  4756  0022A0  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  4757  0022A4  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  4758  0022A8  ECFE  F021         	call	_UARTTransmitText	;wreg free
  4759                           
  4760                           ;backgroundTasks.c: 42: UARTTransmitText("\n\r");
  4761  0022AC  0E83               	movlw	low (STR_37+48)
  4762  0022AE  0100               	movlb	0	; () banked
  4763  0022B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4764  0022B2  0E7C               	movlw	high (STR_37+48)
  4765  0022B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4766  0022B6  ECFE  F021         	call	_UARTTransmitText	;wreg free
  4767                           
  4768                           ;backgroundTasks.c: 43: stack->background.fPacketPending = 0;
  4769  0022BA  0101               	movlb	1	; () banked
  4770  0022BC  EE20 F014          	lfsr	2,20
  4771  0022C0  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4772  0022C2  26D9               	addwf	fsr2l,f,c
  4773  0022C4  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4774  0022C6  22DA               	addwfc	fsr2h,f,c
  4775  0022C8  90DF               	bcf	indf2,0,c
  4776  0022CA                     l515:
  4777  0022CA                     l9025:
  4778                           
  4779                           ; BSR set to: 1
  4780                           ;backgroundTasks.c: 44: }
  4781                           ;backgroundTasks.c: 45: if (stack->background.err.module == ERROR_MODULE_ARP &&
  4782                           ;backgroundTasks.c: 46: stack->background.err.code == (uint16_t)0) {
  4783  0022CA  EE20 F00F          	lfsr	2,15
  4784  0022CE  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4785  0022D0  26D9               	addwf	fsr2l,f,c
  4786  0022D2  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4787  0022D4  22DA               	addwfc	fsr2h,f,c
  4788  0022D6  0E03               	movlw	3
  4789  0022D8  18DE               	xorwf	postinc2,w,c
  4790  0022DA  A4D8               	btfss	status,2,c
  4791  0022DC  D019               	goto	l516
  4792                           
  4793                           ; BSR set to: 1
  4794  0022DE  EE20 F010          	lfsr	2,16
  4795  0022E2  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4796  0022E4  26D9               	addwf	fsr2l,f,c
  4797  0022E6  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4798  0022E8  22DA               	addwfc	fsr2h,f,c
  4799  0022EA  50DE               	movf	postinc2,w,c
  4800  0022EC  10DE               	iorwf	postinc2,w,c
  4801  0022EE  A4D8               	btfss	status,2,c
  4802  0022F0  D00F               	goto	l516
  4803                           
  4804                           ; BSR set to: 1
  4805                           ;backgroundTasks.c: 47: UARTTransmitText("IP packet sent.");
  4806  0022F2  0EEE               	movlw	low STR_24
  4807  0022F4  0100               	movlb	0	; () banked
  4808  0022F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4809  0022F8  0E7E               	movlw	high STR_24
  4810  0022FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4811  0022FC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  4812                           
  4813                           ;backgroundTasks.c: 49: stack->background.fPacketPending = 0;
  4814  002300  0101               	movlb	1	; () banked
  4815  002302  EE20 F014          	lfsr	2,20
  4816  002306  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4817  002308  26D9               	addwf	fsr2l,f,c
  4818  00230A  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4819  00230C  22DA               	addwfc	fsr2h,f,c
  4820  00230E  90DF               	bcf	indf2,0,c
  4821  002310                     l516:
  4822                           
  4823                           ; BSR set to: 1
  4824                           ;backgroundTasks.c: 50: }
  4825                           ;backgroundTasks.c: 51: }
  4826                           ;backgroundTasks.c: 52: if (stack->background.interruptFlags.LINKIF) {
  4827                           
  4828                           ; BSR set to: 1
  4829                           
  4830                           ; BSR set to: 1
  4831  002310  EE20 F012          	lfsr	2,18
  4832  002314  5184               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  4833  002316  26D9               	addwf	fsr2l,f,c
  4834  002318  5185               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  4835  00231A  22DA               	addwfc	fsr2h,f,c
  4836  00231C  A6DF               	btfss	indf2,3,c
  4837  00231E  0012               	return	
  4838                           
  4839                           ; BSR set to: 1
  4840                           ;backgroundTasks.c: 53: ethernetController_updateLinkStatus(&(stack->ethernet));
  4841  002320  C184  F080         	movff	handleStackBackgroundTasks@stack,ethernetController_updateLinkStatus@state
  4842  002324  C185  F081         	movff	handleStackBackgroundTasks@stack+1,ethernetController_updateLinkStatus@state+1
  4843  002328  EC4F  F01E         	call	_ethernetController_updateLinkStatus	;wreg free
  4844                           
  4845                           ;backgroundTasks.c: 55: if (stack->ethernet.link == LINK_ESTABLISHED) {
  4846  00232C  C184  FFD9         	movff	handleStackBackgroundTasks@stack,fsr2l
  4847  002330  C185  FFDA         	movff	handleStackBackgroundTasks@stack+1,fsr2h
  4848  002334  04DE               	decf	postinc2,w,c
  4849  002336  A4D8               	btfss	status,2,c
  4850  002338  D00D               	goto	l518
  4851                           
  4852                           ;backgroundTasks.c: 56: ethernetController_setLEDConfig(LEDA, LED_ON);
  4853  00233A  0E00               	movlw	0
  4854  00233C  0100               	movlb	0	; () banked
  4855  00233E  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4856  002340  0E00               	movlw	0
  4857  002342  EC08  F01E         	call	_ethernetController_setLEDConfig
  4858                           
  4859                           ;backgroundTasks.c: 57: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  4860  002346  0E02               	movlw	2
  4861  002348  0100               	movlb	0	; () banked
  4862  00234A  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4863  00234C  0E01               	movlw	1
  4864  00234E  EC08  F01E         	call	_ethernetController_setLEDConfig
  4865                           
  4866                           ;backgroundTasks.c: 58: } else {
  4867  002352  D00C               	goto	l519
  4868  002354                     l518:
  4869                           
  4870                           ;backgroundTasks.c: 59: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4871  002354  0E01               	movlw	1
  4872  002356  0100               	movlb	0	; () banked
  4873  002358  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4874  00235A  0E00               	movlw	0
  4875  00235C  EC08  F01E         	call	_ethernetController_setLEDConfig
  4876                           
  4877                           ;backgroundTasks.c: 60: ethernetController_setLEDConfig(LEDB, LED_OFF);
  4878  002360  0E01               	movlw	1
  4879  002362  0100               	movlb	0	; () banked
  4880  002364  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4881  002366  0E01               	movlw	1
  4882  002368  EC08  F01E         	call	_ethernetController_setLEDConfig
  4883  00236C                     l519:
  4884                           
  4885                           ;backgroundTasks.c: 61: }
  4886                           ;backgroundTasks.c: 62: ethernetController_clearInterruptFlag(LINKIF);
  4887  00236C  0E0B               	movlw	11
  4888  00236E  EC68  F026         	call	_ethernetController_clearInterruptFlag
  4889  002372  0012               	return	
  4890  002374                     __end_of_handleStackBackgroundTasks:
  4891                           	opt stack 0
  4892                           tblptru	equ	0xFF8
  4893                           tblptrh	equ	0xFF7
  4894                           tblptrl	equ	0xFF6
  4895                           tablat	equ	0xFF5
  4896                           prodh	equ	0xFF4
  4897                           prodl	equ	0xFF3
  4898                           intcon	equ	0xFF2
  4899                           intcon3	equ	0xFF0
  4900                           postinc0	equ	0xFEE
  4901                           plusw0	equ	0xFEB
  4902                           fsr0h	equ	0xFEA
  4903                           fsr0l	equ	0xFE9
  4904                           wreg	equ	0xFE8
  4905                           indf1	equ	0xFE7
  4906                           postinc1	equ	0xFE6
  4907                           postdec1	equ	0xFE5
  4908                           plusw1	equ	0xFE3
  4909                           fsr1h	equ	0xFE2
  4910                           fsr1l	equ	0xFE1
  4911                           indf2	equ	0xFDF
  4912                           postinc2	equ	0xFDE
  4913                           postdec2	equ	0xFDD
  4914                           plusw2	equ	0xFDB
  4915                           fsr2h	equ	0xFDA
  4916                           fsr2l	equ	0xFD9
  4917                           status	equ	0xFD8
  4918                           
  4919 ;; *************** function _ipv4_sendFrame *****************
  4920 ;; Defined at:
  4921 ;;		line 42 in file "src/stack/protocols/ipv4.c"
  4922 ;; Parameters:    Size  Location     Type
  4923 ;;  ipPacket       62   52[BANK1 ] struct ipv4_packet
  4924 ;; Auto vars:     Size  Location     Type
  4925 ;;  err             3  129[BANK1 ] struct error
  4926 ;;  index           1  128[BANK1 ] unsigned char 
  4927 ;;  requestTimeo    1  127[BANK1 ] const unsigned char 
  4928 ;;  numberOfRequ    1  126[BANK1 ] const unsigned char 
  4929 ;; Return value:  Size  Location     Type
  4930 ;;                  3   52[BANK1 ] struct error
  4931 ;; Registers used:
  4932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4938 ;;      Params:         0       0      62       0       0       0       0       0       0
  4939 ;;      Locals:         0       0       6       0       0       0       0       0       0
  4940 ;;      Temps:          0       0      12       0       0       0       0       0       0
  4941 ;;      Totals:         0       0      80       0       0       0       0       0       0
  4942 ;;Total ram usage:       80 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; Hardware stack levels required when called:   11
  4945 ;; This function calls:
  4946 ;;		_ARP_checkForEntry
  4947 ;;		_ARP_getEntryFromTable
  4948 ;;		_ARP_sendRequest
  4949 ;;		_ethernetController_getMacAddress
  4950 ;;		_ethernetController_sendPacket
  4951 ;;		_ethernetController_writeDestinationMACAddress
  4952 ;;		_getSeconds
  4953 ;; This function is called by:
  4954 ;;		_handleStackBackgroundTasks
  4955 ;; This function uses a non-reentrant model
  4956 ;;
  4957                           
  4958                           	psect	text9
  4959  0026DA                     __ptext9:
  4960                           	opt stack 0
  4961  0026DA                     _ipv4_sendFrame:
  4962                           	opt stack 18
  4963                           
  4964                           ;ipv4.c: 43: error_t err;
  4965                           ;ipv4.c: 44: err.module = ERROR_MODULE_ARP;
  4966                           
  4967                           ;incstack = 0
  4968  0026DA  0E03               	movlw	3
  4969  0026DC  0101               	movlb	1	; () banked
  4970  0026DE  6F81               	movwf	ipv4_sendFrame@err& (0+255),b
  4971                           
  4972                           ;ipv4.c: 45: uint8_t index;
  4973                           ;ipv4.c: 46: uint8_t static requestCounter = 0;
  4974                           ;ipv4.c: 47: uint8_t const numberOfRequests = 3;
  4975  0026E0  0E03               	movlw	3
  4976  0026E2  6F7E               	movwf	ipv4_sendFrame@numberOfRequests& (0+255),b
  4977                           
  4978                           ;ipv4.c: 48: uint8_t const requestTimeout = 2;
  4979  0026E4  0E02               	movlw	2
  4980  0026E6  6F7F               	movwf	ipv4_sendFrame@requestTimeout& (0+255),b
  4981                           
  4982                           ; BSR set to: 1
  4983                           ;ipv4.c: 49: uint32_t static oldTime = 0;
  4984                           ;ipv4.c: 52: if (ARP_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  4985  0026E8  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,ARP_checkForEntry@ip
  4986  0026EC  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,ARP_checkForEntry@ip+1
  4987  0026F0  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,ARP_checkForEntry@ip+2
  4988  0026F4  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,ARP_checkForEntry@ip+3
  4989  0026F8  0E80               	movlw	low ipv4_sendFrame@index
  4990  0026FA  0100               	movlb	0	; () banked
  4991  0026FC  6F6B               	movwf	ARP_checkForEntry@index& (0+255),b
  4992  0026FE  0E01               	movlw	high ipv4_sendFrame@index
  4993  002700  6F6C               	movwf	(ARP_checkForEntry@index+1)& (0+255),b
  4994  002702  EC22  F01C         	call	_ARP_checkForEntry	;wreg free
  4995  002706  0900               	iorlw	0
  4996  002708  B4D8               	btfsc	status,2,c
  4997  00270A  D03F               	goto	l1016
  4998                           
  4999                           ;ipv4.c: 54: ipPacket.ethernet.destination = ARP_getEntryFromTable(index);
  5000  00270C  0101               	movlb	1	; () banked
  5001  00270E  5180               	movf	ipv4_sendFrame@index& (0+255),w,b
  5002  002710  EC92  F024         	call	_ARP_getEntryFromTable
  5003  002714  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5004  002718  0E05               	movlw	5
  5005  00271A                     u11081:
  5006  00271A  CFEB FFDB          	movff	plusw0,plusw2
  5007  00271E  06E8               	decf	wreg,f,c
  5008  002720  E2FC               	bc	u11081
  5009                           
  5010                           ;ipv4.c: 56: ipPacket.ethernet.source = ethernetController_getMacAddress();
  5011  002722  EC4D  F020         	call	_ethernetController_getMacAddress	;wreg free
  5012  002726  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  5013  00272A  0E05               	movlw	5
  5014  00272C                     u11091:
  5015  00272C  CFEB FFDB          	movff	plusw0,plusw2
  5016  002730  06E8               	decf	wreg,f,c
  5017  002732  E2FC               	bc	u11091
  5018                           
  5019                           ;ipv4.c: 58: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  5020  002734  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  5021  002738  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  5022  00273C  0E05               	movlw	5
  5023  00273E                     u11101:
  5024  00273E  CFDB FFEB          	movff	plusw2,plusw0
  5025  002742  06E8               	decf	wreg,f,c
  5026  002744  E2FC               	bc	u11101
  5027  002746  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5028  00274A  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  5029  00274E  0E08               	movlw	8
  5030  002750                     u11111:
  5031  002750  CFDB FFEB          	movff	plusw2,plusw0
  5032  002754  06E8               	decf	wreg,f,c
  5033  002756  E2FC               	bc	u11111
  5034  002758  EC1B  F01F         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  5035                           
  5036                           ;ipv4.c: 59: ethernetController_sendPacket(ipPacket.ethernet.memory);
  5037  00275C  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  5038  002760  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  5039  002764  0E08               	movlw	8
  5040  002766                     u11121:
  5041  002766  CFDB FFEB          	movff	plusw2,plusw0
  5042  00276A  06E8               	decf	wreg,f,c
  5043  00276C  E2FC               	bc	u11121
  5044  00276E  EC25  F025         	call	_ethernetController_sendPacket	;wreg free
  5045                           
  5046                           ;ipv4.c: 60: err.code = (uint16_t)0;
  5047  002772  0E00               	movlw	0
  5048  002774  0101               	movlb	1	; () banked
  5049  002776  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5050  002778  0E00               	movlw	0
  5051  00277A  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5052                           
  5053                           ; BSR set to: 1
  5054                           ;ipv4.c: 61: return err;
  5055  00277C  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5056  002780  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5057  002784  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5058                           
  5059                           ; BSR set to: 1
  5060  002788  0012               	return	
  5061  00278A                     l1016:
  5062                           
  5063                           ;ipv4.c: 64: if (getSeconds() - oldTime >= requestTimeout) {
  5064                           
  5065                           ; BSR set to: 1
  5066  00278A  C17F  F172         	movff	ipv4_sendFrame@requestTimeout,??_ipv4_sendFrame
  5067  00278E  0101               	movlb	1	; () banked
  5068  002790  6B73               	clrf	(??_ipv4_sendFrame+1)& (0+255),b
  5069  002792  6B74               	clrf	(??_ipv4_sendFrame+2)& (0+255),b
  5070  002794  6B75               	clrf	(??_ipv4_sendFrame+3)& (0+255),b
  5071  002796  C1BD  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame+4
  5072  00279A  C1BE  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+5
  5073  00279E  C1BF  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+6
  5074  0027A2  C1C0  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+7
  5075  0027A6  1F76               	comf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5076  0027A8  1F77               	comf	(??_ipv4_sendFrame+5)& (0+255),f,b
  5077  0027AA  1F78               	comf	(??_ipv4_sendFrame+6)& (0+255),f,b
  5078  0027AC  1F79               	comf	(??_ipv4_sendFrame+7)& (0+255),f,b
  5079  0027AE  2B76               	incf	(??_ipv4_sendFrame+4)& (0+255),f,b
  5080  0027B0  0E00               	movlw	0
  5081  0027B2  2377               	addwfc	(??_ipv4_sendFrame+5)& (0+255),f,b
  5082  0027B4  2378               	addwfc	(??_ipv4_sendFrame+6)& (0+255),f,b
  5083  0027B6  2379               	addwfc	(??_ipv4_sendFrame+7)& (0+255),f,b
  5084  0027B8  EC3E  F026         	call	_getSeconds	;wreg free
  5085  0027BC  0101               	movlb	1	; () banked
  5086  0027BE  5176               	movf	(??_ipv4_sendFrame+4)& (0+255),w,b
  5087  0027C0  0100               	movlb	0	; () banked
  5088  0027C2  2560               	addwf	?_getSeconds& (0+255),w,b
  5089  0027C4  0101               	movlb	1	; () banked
  5090  0027C6  6F7A               	movwf	(??_ipv4_sendFrame+8)& (0+255),b
  5091  0027C8  5177               	movf	(??_ipv4_sendFrame+5)& (0+255),w,b
  5092  0027CA  0100               	movlb	0	; () banked
  5093  0027CC  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5094  0027CE  0101               	movlb	1	; () banked
  5095  0027D0  6F7B               	movwf	(??_ipv4_sendFrame+9)& (0+255),b
  5096  0027D2  5178               	movf	(??_ipv4_sendFrame+6)& (0+255),w,b
  5097  0027D4  0100               	movlb	0	; () banked
  5098  0027D6  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5099  0027D8  0101               	movlb	1	; () banked
  5100  0027DA  6F7C               	movwf	(??_ipv4_sendFrame+10)& (0+255),b
  5101  0027DC  5179               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  5102  0027DE  0100               	movlb	0	; () banked
  5103  0027E0  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5104  0027E2  0101               	movlb	1	; () banked
  5105  0027E4  6F7D               	movwf	(??_ipv4_sendFrame+11)& (0+255),b
  5106  0027E6  5172               	movf	??_ipv4_sendFrame& (0+255),w,b
  5107  0027E8  5D7A               	subwf	(??_ipv4_sendFrame+8)& (0+255),w,b
  5108  0027EA  5173               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  5109  0027EC  597B               	subwfb	(??_ipv4_sendFrame+9)& (0+255),w,b
  5110  0027EE  5174               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  5111  0027F0  597C               	subwfb	(??_ipv4_sendFrame+10)& (0+255),w,b
  5112  0027F2  5175               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  5113  0027F4  597D               	subwfb	(??_ipv4_sendFrame+11)& (0+255),w,b
  5114  0027F6  A0D8               	btfss	status,0,c
  5115  0027F8  D029               	goto	l1021
  5116                           
  5117                           ; BSR set to: 1
  5118                           ;ipv4.c: 65: oldTime = getSeconds();
  5119  0027FA  EC3E  F026         	call	_getSeconds	;wreg free
  5120  0027FE  C060  F1BD         	movff	?_getSeconds,ipv4_sendFrame@oldTime
  5121  002802  C061  F1BE         	movff	?_getSeconds+1,ipv4_sendFrame@oldTime+1
  5122  002806  C062  F1BF         	movff	?_getSeconds+2,ipv4_sendFrame@oldTime+2
  5123  00280A  C063  F1C0         	movff	?_getSeconds+3,ipv4_sendFrame@oldTime+3
  5124                           
  5125                           ;ipv4.c: 66: if (requestCounter < numberOfRequests) {
  5126  00280E  0101               	movlb	1	; () banked
  5127  002810  517E               	movf	ipv4_sendFrame@numberOfRequests& (0+255),w,b
  5128  002812  5DC5               	subwf	ipv4_sendFrame@requestCounter& (0+255),w,b
  5129  002814  B0D8               	btfsc	status,0,c
  5130  002816  D00C               	goto	l1020
  5131                           
  5132                           ; BSR set to: 1
  5133                           ;ipv4.c: 67: requestCounter++;
  5134  002818  2BC5               	incf	ipv4_sendFrame@requestCounter& (0+255),f,b
  5135                           
  5136                           ; BSR set to: 1
  5137                           ;ipv4.c: 68: ARP_sendRequest(ipPacket.ipv4Header.destination);
  5138  00281A  C147  F0F8         	movff	ipv4_sendFrame@ipPacket+19,ARP_sendRequest@ip
  5139  00281E  C148  F0F9         	movff	ipv4_sendFrame@ipPacket+20,ARP_sendRequest@ip+1
  5140  002822  C149  F0FA         	movff	ipv4_sendFrame@ipPacket+21,ARP_sendRequest@ip+2
  5141  002826  C14A  F0FB         	movff	ipv4_sendFrame@ipPacket+22,ARP_sendRequest@ip+3
  5142  00282A  EC62  F01B         	call	_ARP_sendRequest	;wreg free
  5143                           
  5144                           ;ipv4.c: 69: } else {
  5145  00282E  D00E               	goto	l1021
  5146  002830                     l1020:
  5147                           
  5148                           ;ipv4.c: 71: requestCounter = 0;
  5149  002830  0E00               	movlw	0
  5150  002832  0101               	movlb	1	; () banked
  5151  002834  6FC5               	movwf	ipv4_sendFrame@requestCounter& (0+255),b
  5152                           
  5153                           ;ipv4.c: 72: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  5154  002836  0E01               	movlw	1
  5155  002838  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5156  00283A  0E92               	movlw	146
  5157  00283C  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5158                           
  5159                           ; BSR set to: 1
  5160                           ;ipv4.c: 73: return err;
  5161  00283E  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5162  002842  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5163  002846  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5164                           
  5165                           ; BSR set to: 1
  5166  00284A  0012               	return	
  5167  00284C                     l1021:
  5168                           
  5169                           ;ipv4.c: 74: }
  5170                           ;ipv4.c: 75: }
  5171                           ;ipv4.c: 76: }
  5172                           ;ipv4.c: 77: err.code = ERROR_ARP_WAITING_FOR_REPLY;
  5173                           
  5174                           ; BSR set to: 1
  5175                           
  5176                           ; BSR set to: 1
  5177                           
  5178                           ; BSR set to: 1
  5179  00284C  0E01               	movlw	1
  5180  00284E  0101               	movlb	1	; () banked
  5181  002850  6F83               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  5182  002852  0E91               	movlw	145
  5183  002854  6F82               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  5184                           
  5185                           ; BSR set to: 1
  5186                           ;ipv4.c: 78: return err;
  5187  002856  C181  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  5188  00285A  C182  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  5189  00285E  C183  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  5190  002862  0012               	return	
  5191  002864                     __end_of_ipv4_sendFrame:
  5192                           	opt stack 0
  5193                           tblptru	equ	0xFF8
  5194                           tblptrh	equ	0xFF7
  5195                           tblptrl	equ	0xFF6
  5196                           tablat	equ	0xFF5
  5197                           prodh	equ	0xFF4
  5198                           prodl	equ	0xFF3
  5199                           intcon	equ	0xFF2
  5200                           intcon3	equ	0xFF0
  5201                           postinc0	equ	0xFEE
  5202                           plusw0	equ	0xFEB
  5203                           fsr0h	equ	0xFEA
  5204                           fsr0l	equ	0xFE9
  5205                           wreg	equ	0xFE8
  5206                           indf1	equ	0xFE7
  5207                           postinc1	equ	0xFE6
  5208                           postdec1	equ	0xFE5
  5209                           plusw1	equ	0xFE3
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           plusw2	equ	0xFDB
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _ARP_sendRequest *****************
  5221 ;; Defined at:
  5222 ;;		line 213 in file "src/stack/protocols/arp.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  ip              4  152[BANK0 ] struct ipv4_address
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  request        32   20[BANK1 ] struct ARP_message
  5227 ;;  targetMAC       6   14[BANK1 ] struct macaddress
  5228 ;;  senderMAC       6    0[BANK1 ] struct macaddress
  5229 ;;  targetIP        4   10[BANK1 ] struct ipv4_address
  5230 ;;  senderIP        4    6[BANK1 ] struct ipv4_address
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5240 ;;      Params:         0       4       0       0       0       0       0       0       0
  5241 ;;      Locals:         0       0      52       0       0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5243 ;;      Totals:         0       4      52       0       0       0       0       0       0
  5244 ;;Total ram usage:       56 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:   10
  5247 ;; This function calls:
  5248 ;;		_ARP_send
  5249 ;;		_ethernetController_getMacAddress
  5250 ;;		_ipv4_getIPSourceAddress
  5251 ;;		_mac_setToBroadcast
  5252 ;; This function is called by:
  5253 ;;		_ipv4_sendFrame
  5254 ;; This function uses a non-reentrant model
  5255 ;;
  5256                           
  5257                           	psect	text10
  5258  0036C4                     __ptext10:
  5259                           	opt stack 0
  5260  0036C4                     _ARP_sendRequest:
  5261                           	opt stack 18
  5262                           
  5263                           ;arp.c: 214: ARP_message_t request;
  5264                           ;arp.c: 215: ipv4_address_t senderIP;
  5265                           ;arp.c: 216: ipv4_address_t targetIP;
  5266                           ;arp.c: 217: macaddress_t senderMAC;
  5267                           ;arp.c: 218: macaddress_t targetMAC;
  5268                           ;arp.c: 220: senderMAC = ethernetController_getMacAddress();
  5269                           
  5270                           ; BSR set to: 1
  5271                           ;incstack = 0
  5272  0036C4  EC4D  F020         	call	_ethernetController_getMacAddress	;wreg free
  5273  0036C8  EE21  F000         	lfsr	2,ARP_sendRequest@senderMAC
  5274  0036CC  0E05               	movlw	5
  5275  0036CE                     u10551:
  5276  0036CE  CFEB FFDB          	movff	plusw0,plusw2
  5277  0036D2  06E8               	decf	wreg,f,c
  5278  0036D4  E2FC               	bc	u10551
  5279                           
  5280                           ;arp.c: 221: mac_setToBroadcast(&targetMAC);
  5281  0036D6  0E0E               	movlw	low ARP_sendRequest@targetMAC
  5282  0036D8  0100               	movlb	0	; () banked
  5283  0036DA  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
  5284  0036DC  0E01               	movlw	high ARP_sendRequest@targetMAC
  5285  0036DE  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
  5286  0036E0  EC4D  F025         	call	_mac_setToBroadcast	;wreg free
  5287                           
  5288                           ;arp.c: 222: senderIP = ipv4_getIPSourceAddress();
  5289  0036E4  EC47  F026         	call	_ipv4_getIPSourceAddress	;wreg free
  5290  0036E8  C060  F106         	movff	?_ipv4_getIPSourceAddress,ARP_sendRequest@senderIP
  5291  0036EC  C061  F107         	movff	?_ipv4_getIPSourceAddress+1,ARP_sendRequest@senderIP+1
  5292  0036F0  C062  F108         	movff	?_ipv4_getIPSourceAddress+2,ARP_sendRequest@senderIP+2
  5293  0036F4  C063  F109         	movff	?_ipv4_getIPSourceAddress+3,ARP_sendRequest@senderIP+3
  5294                           
  5295                           ;arp.c: 223: targetIP = ip;
  5296  0036F8  C0F8  F10A         	movff	ARP_sendRequest@ip,ARP_sendRequest@targetIP
  5297  0036FC  C0F9  F10B         	movff	ARP_sendRequest@ip+1,ARP_sendRequest@targetIP+1
  5298  003700  C0FA  F10C         	movff	ARP_sendRequest@ip+2,ARP_sendRequest@targetIP+2
  5299  003704  C0FB  F10D         	movff	ARP_sendRequest@ip+3,ARP_sendRequest@targetIP+3
  5300                           
  5301                           ;arp.c: 225: request.hlen = 6;
  5302  003708  0E06               	movlw	6
  5303  00370A  0101               	movlb	1	; () banked
  5304  00370C  6F18               	movwf	(ARP_sendRequest@request+4)& (0+255),b
  5305                           
  5306                           ; BSR set to: 1
  5307                           ;arp.c: 226: request.plen = 4;
  5308  00370E  0E04               	movlw	4
  5309  003710  6F19               	movwf	(ARP_sendRequest@request+5)& (0+255),b
  5310                           
  5311                           ; BSR set to: 1
  5312                           ;arp.c: 227: request.htype = ARP_HTYPE_ETHERNET;
  5313  003712  0E00               	movlw	0
  5314  003714  6F15               	movwf	(ARP_sendRequest@request+1)& (0+255),b
  5315  003716  0E01               	movlw	1
  5316  003718  6F14               	movwf	ARP_sendRequest@request& (0+255),b
  5317                           
  5318                           ; BSR set to: 1
  5319                           ;arp.c: 228: request.ptype = ARP_PTYPE_IPv4;
  5320  00371A  0E08               	movlw	8
  5321  00371C  6F17               	movwf	(ARP_sendRequest@request+3)& (0+255),b
  5322  00371E  0E00               	movlw	0
  5323  003720  6F16               	movwf	(ARP_sendRequest@request+2)& (0+255),b
  5324                           
  5325                           ; BSR set to: 1
  5326                           ;arp.c: 229: request.operation = ARP_REQUEST;
  5327  003722  0E00               	movlw	0
  5328  003724  6F1B               	movwf	(ARP_sendRequest@request+7)& (0+255),b
  5329  003726  0E01               	movlw	1
  5330  003728  6F1A               	movwf	(ARP_sendRequest@request+6)& (0+255),b
  5331                           
  5332                           ; BSR set to: 1
  5333                           ;arp.c: 230: request.senderIPAddress = senderIP;
  5334  00372A  C106  F122         	movff	ARP_sendRequest@senderIP,ARP_sendRequest@request+14
  5335  00372E  C107  F123         	movff	ARP_sendRequest@senderIP+1,ARP_sendRequest@request+15
  5336  003732  C108  F124         	movff	ARP_sendRequest@senderIP+2,ARP_sendRequest@request+16
  5337  003736  C109  F125         	movff	ARP_sendRequest@senderIP+3,ARP_sendRequest@request+17
  5338                           
  5339                           ; BSR set to: 1
  5340                           ;arp.c: 231: request.senderMACAddress = senderMAC;
  5341  00373A  EE21  F000         	lfsr	2,ARP_sendRequest@senderMAC
  5342  00373E  EE11  F01C         	lfsr	1,ARP_sendRequest@request+8
  5343  003742  0E05               	movlw	5
  5344  003744                     u10561:
  5345  003744  CFDB FFE3          	movff	plusw2,plusw1
  5346  003748  06E8               	decf	wreg,f,c
  5347  00374A  E2FC               	bc	u10561
  5348                           
  5349                           ; BSR set to: 1
  5350                           ;arp.c: 232: request.targetIPAddress = targetIP;
  5351  00374C  C10A  F12C         	movff	ARP_sendRequest@targetIP,ARP_sendRequest@request+24
  5352  003750  C10B  F12D         	movff	ARP_sendRequest@targetIP+1,ARP_sendRequest@request+25
  5353  003754  C10C  F12E         	movff	ARP_sendRequest@targetIP+2,ARP_sendRequest@request+26
  5354  003758  C10D  F12F         	movff	ARP_sendRequest@targetIP+3,ARP_sendRequest@request+27
  5355                           
  5356                           ; BSR set to: 1
  5357                           ;arp.c: 233: request.targetMACAddress = targetMAC;
  5358  00375C  EE21  F00E         	lfsr	2,ARP_sendRequest@targetMAC
  5359  003760  EE11  F026         	lfsr	1,ARP_sendRequest@request+18
  5360  003764  0E05               	movlw	5
  5361  003766                     u10571:
  5362  003766  CFDB FFE3          	movff	plusw2,plusw1
  5363  00376A  06E8               	decf	wreg,f,c
  5364  00376C  E2FC               	bc	u10571
  5365                           
  5366                           ; BSR set to: 1
  5367                           ;arp.c: 235: ARP_send(request);
  5368  00376E  EE21  F014         	lfsr	2,ARP_sendRequest@request
  5369  003772  EE00  F0A7         	lfsr	0,ARP_send@arp
  5370  003776  0E1F               	movlw	31
  5371  003778                     u10581:
  5372  003778  CFDB FFEB          	movff	plusw2,plusw0
  5373  00377C  06E8               	decf	wreg,f,c
  5374  00377E  E2FC               	bc	u10581
  5375  003780  EC76  F00D         	call	_ARP_send	;wreg free
  5376  003784  0012               	return		;funcret
  5377  003786                     __end_of_ARP_sendRequest:
  5378                           	opt stack 0
  5379                           tblptru	equ	0xFF8
  5380                           tblptrh	equ	0xFF7
  5381                           tblptrl	equ	0xFF6
  5382                           tablat	equ	0xFF5
  5383                           prodh	equ	0xFF4
  5384                           prodl	equ	0xFF3
  5385                           intcon	equ	0xFF2
  5386                           intcon3	equ	0xFF0
  5387                           postinc0	equ	0xFEE
  5388                           plusw0	equ	0xFEB
  5389                           fsr0h	equ	0xFEA
  5390                           fsr0l	equ	0xFE9
  5391                           wreg	equ	0xFE8
  5392                           indf1	equ	0xFE7
  5393                           postinc1	equ	0xFE6
  5394                           postdec1	equ	0xFE5
  5395                           plusw1	equ	0xFE3
  5396                           fsr1h	equ	0xFE2
  5397                           fsr1l	equ	0xFE1
  5398                           indf2	equ	0xFDF
  5399                           postinc2	equ	0xFDE
  5400                           postdec2	equ	0xFDD
  5401                           plusw2	equ	0xFDB
  5402                           fsr2h	equ	0xFDA
  5403                           fsr2l	equ	0xFD9
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _ARP_getEntryFromTable *****************
  5407 ;; Defined at:
  5408 ;;		line 251 in file "src/stack/protocols/arp.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;  index           1    wreg     unsigned char 
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;  index           1    7[BANK0 ] unsigned char 
  5413 ;; Return value:  Size  Location     Type
  5414 ;;                  6    0[BANK0 ] struct macaddress
  5415 ;; Registers used:
  5416 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5422 ;;      Params:         0       7       0       0       0       0       0       0       0
  5423 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5425 ;;      Totals:         0       8       0       0       0       0       0       0       0
  5426 ;;Total ram usage:        8 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:    4
  5429 ;; This function calls:
  5430 ;;		Nothing
  5431 ;; This function is called by:
  5432 ;;		_ipv4_sendFrame
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text11
  5437  004924                     __ptext11:
  5438                           	opt stack 0
  5439  004924                     _ARP_getEntryFromTable:
  5440                           	opt stack 24
  5441                           
  5442                           ;incstack = 0
  5443                           ;ARP_getEntryFromTable@index stored from wreg
  5444  004924  0100               	movlb	0	; () banked
  5445  004926  6F67               	movwf	ARP_getEntryFromTable@index& (0+255),b
  5446                           
  5447                           ;arp.c: 252: return ARP_table[index].mac;
  5448  004928  0100               	movlb	0	; () banked
  5449  00492A  5167               	movf	ARP_getEntryFromTable@index& (0+255),w,b
  5450  00492C  0D0E               	mullw	14
  5451  00492E  0E04               	movlw	4
  5452  004930  26F3               	addwf	prodl,f,c
  5453  004932  0E00               	movlw	0
  5454  004934  22F4               	addwfc	prodh,f,c
  5455  004936  0E00               	movlw	low _ARP_table
  5456  004938  24F3               	addwf	prodl,w,c
  5457  00493A  6ED9               	movwf	fsr2l,c
  5458  00493C  0E03               	movlw	high _ARP_table
  5459  00493E  20F4               	addwfc	prodh,w,c
  5460  004940  6EDA               	movwf	fsr2h,c
  5461  004942  EE00  F060         	lfsr	0,?_ARP_getEntryFromTable
  5462  004946  0E05               	movlw	5
  5463  004948                     u10631:
  5464  004948  CFDB FFEB          	movff	plusw2,plusw0
  5465  00494C  06E8               	decf	wreg,f,c
  5466  00494E  E2FC               	bc	u10631
  5467  004950  0012               	return	
  5468  004952                     __end_of_ARP_getEntryFromTable:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           intcon3	equ	0xFF0
  5478                           postinc0	equ	0xFEE
  5479                           plusw0	equ	0xFEB
  5480                           fsr0h	equ	0xFEA
  5481                           fsr0l	equ	0xFE9
  5482                           wreg	equ	0xFE8
  5483                           indf1	equ	0xFE7
  5484                           postinc1	equ	0xFE6
  5485                           postdec1	equ	0xFE5
  5486                           plusw1	equ	0xFE3
  5487                           fsr1h	equ	0xFE2
  5488                           fsr1l	equ	0xFE1
  5489                           indf2	equ	0xFDF
  5490                           postinc2	equ	0xFDE
  5491                           postdec2	equ	0xFDD
  5492                           plusw2	equ	0xFDB
  5493                           fsr2h	equ	0xFDA
  5494                           fsr2l	equ	0xFD9
  5495                           status	equ	0xFD8
  5496                           
  5497 ;; *************** function _ARP_checkForEntry *****************
  5498 ;; Defined at:
  5499 ;;		line 238 in file "src/stack/protocols/arp.c"
  5500 ;; Parameters:    Size  Location     Type
  5501 ;;  ip              4    7[BANK0 ] struct ipv4_address
  5502 ;;  index           2   11[BANK0 ] PTR unsigned char 
  5503 ;;		 -> ipv4_sendFrame@index(1), 
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;  i               1   21[BANK0 ] unsigned char 
  5506 ;; Return value:  Size  Location     Type
  5507 ;;                  1    wreg      unsigned char 
  5508 ;; Registers used:
  5509 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5515 ;;      Params:         0       6       0       0       0       0       0       0       0
  5516 ;;      Locals:         0       1       0       0       0       0       0       0       0
  5517 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5518 ;;      Totals:         0      15       0       0       0       0       0       0       0
  5519 ;;Total ram usage:       15 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; Hardware stack levels required when called:    5
  5522 ;; This function calls:
  5523 ;;		_getSeconds
  5524 ;;		_ipv4_cmp
  5525 ;; This function is called by:
  5526 ;;		_ipv4_sendFrame
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text12
  5531  003844                     __ptext12:
  5532                           	opt stack 0
  5533  003844                     _ARP_checkForEntry:
  5534                           	opt stack 23
  5535                           
  5536                           ;arp.c: 239: for (uint8_t i = 0; i < 8; i++) {
  5537                           
  5538                           ; BSR set to: 0
  5539                           ;incstack = 0
  5540  003844  0E00               	movlw	0
  5541  003846  0100               	movlb	0	; () banked
  5542  003848  6F75               	movwf	ARP_checkForEntry@i& (0+255),b
  5543  00384A                     l8593:
  5544                           
  5545                           ; BSR set to: 0
  5546  00384A  0E07               	movlw	7
  5547  00384C  6575               	cpfsgt	ARP_checkForEntry@i& (0+255),b
  5548  00384E  D001               	goto	l943
  5549  003850  D050               	goto	u10620
  5550  003852                     l943:
  5551                           
  5552                           ; BSR set to: 0
  5553                           ;arp.c: 240: if (ipv4_cmp(&ARP_table[i].ip, &ip)) {
  5554                           
  5555                           ; BSR set to: 0
  5556  003852  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5557  003854  0D0E               	mullw	14
  5558  003856  0E00               	movlw	low _ARP_table
  5559  003858  24F3               	addwf	prodl,w,c
  5560  00385A  6F60               	movwf	ipv4_cmp@a& (0+255),b
  5561  00385C  0E03               	movlw	high _ARP_table
  5562  00385E  20F4               	addwfc	prodh,w,c
  5563  003860  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
  5564  003862  0E67               	movlw	low ARP_checkForEntry@ip
  5565  003864  6F62               	movwf	ipv4_cmp@b& (0+255),b
  5566  003866  0E00               	movlw	high ARP_checkForEntry@ip
  5567  003868  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
  5568  00386A  EC79  F023         	call	_ipv4_cmp	;wreg free
  5569  00386E  0100               	movlb	0	; () banked
  5570  003870  A0D8               	btfss	status,0,c
  5571  003872  D03D               	goto	l946
  5572                           
  5573                           ; BSR set to: 0
  5574                           ;arp.c: 241: if (getSeconds() - ARP_table[i].secondsCreated < 300) {
  5575  003874  5175               	movf	ARP_checkForEntry@i& (0+255),w,b
  5576  003876  0D0E               	mullw	14
  5577  003878  0E0A               	movlw	10
  5578  00387A  26F3               	addwf	prodl,f,c
  5579  00387C  0E00               	movlw	0
  5580  00387E  22F4               	addwfc	prodh,f,c
  5581  003880  0E00               	movlw	low _ARP_table
  5582  003882  24F3               	addwf	prodl,w,c
  5583  003884  6ED9               	movwf	fsr2l,c
  5584  003886  0E03               	movlw	high _ARP_table
  5585  003888  20F4               	addwfc	prodh,w,c
  5586  00388A  6EDA               	movwf	fsr2h,c
  5587  00388C  CFDE F06D          	movff	postinc2,??_ARP_checkForEntry
  5588  003890  CFDE F06E          	movff	postinc2,??_ARP_checkForEntry+1
  5589  003894  CFDE F06F          	movff	postinc2,??_ARP_checkForEntry+2
  5590  003898  CFDE F070          	movff	postinc2,??_ARP_checkForEntry+3
  5591  00389C  1F6D               	comf	??_ARP_checkForEntry& (0+255),f,b
  5592  00389E  1F6E               	comf	(??_ARP_checkForEntry+1)& (0+255),f,b
  5593  0038A0  1F6F               	comf	(??_ARP_checkForEntry+2)& (0+255),f,b
  5594  0038A2  1F70               	comf	(??_ARP_checkForEntry+3)& (0+255),f,b
  5595  0038A4  2B6D               	incf	??_ARP_checkForEntry& (0+255),f,b
  5596  0038A6  0E00               	movlw	0
  5597  0038A8  236E               	addwfc	(??_ARP_checkForEntry+1)& (0+255),f,b
  5598  0038AA  236F               	addwfc	(??_ARP_checkForEntry+2)& (0+255),f,b
  5599  0038AC  2370               	addwfc	(??_ARP_checkForEntry+3)& (0+255),f,b
  5600  0038AE  EC3E  F026         	call	_getSeconds	;wreg free
  5601  0038B2  0100               	movlb	0	; () banked
  5602  0038B4  516D               	movf	??_ARP_checkForEntry& (0+255),w,b
  5603  0038B6  2560               	addwf	?_getSeconds& (0+255),w,b
  5604  0038B8  6F71               	movwf	(??_ARP_checkForEntry+4)& (0+255),b
  5605  0038BA  516E               	movf	(??_ARP_checkForEntry+1)& (0+255),w,b
  5606  0038BC  2161               	addwfc	(?_getSeconds+1)& (0+255),w,b
  5607  0038BE  6F72               	movwf	(??_ARP_checkForEntry+5)& (0+255),b
  5608  0038C0  516F               	movf	(??_ARP_checkForEntry+2)& (0+255),w,b
  5609  0038C2  2162               	addwfc	(?_getSeconds+2)& (0+255),w,b
  5610  0038C4  6F73               	movwf	(??_ARP_checkForEntry+6)& (0+255),b
  5611  0038C6  5170               	movf	(??_ARP_checkForEntry+3)& (0+255),w,b
  5612  0038C8  2163               	addwfc	(?_getSeconds+3)& (0+255),w,b
  5613  0038CA  6F74               	movwf	(??_ARP_checkForEntry+7)& (0+255),b
  5614  0038CC  5174               	movf	(??_ARP_checkForEntry+7)& (0+255),w,b
  5615  0038CE  1173               	iorwf	(??_ARP_checkForEntry+6)& (0+255),w,b
  5616  0038D0  E10E               	bnz	l8607
  5617  0038D2  0E2C               	movlw	44
  5618  0038D4  5D71               	subwf	(??_ARP_checkForEntry+4)& (0+255),w,b
  5619  0038D6  0E01               	movlw	1
  5620  0038D8  5972               	subwfb	(??_ARP_checkForEntry+5)& (0+255),w,b
  5621  0038DA  B0D8               	btfsc	status,0,c
  5622  0038DC  D008               	goto	l946
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;arp.c: 243: *index = i;
  5626  0038DE  C06B  FFD9         	movff	ARP_checkForEntry@index,fsr2l
  5627  0038E2  C06C  FFDA         	movff	ARP_checkForEntry@index+1,fsr2h
  5628  0038E6  C075  FFDF         	movff	ARP_checkForEntry@i,indf2
  5629                           
  5630                           ; BSR set to: 0
  5631                           ;arp.c: 244: return 1;
  5632  0038EA  0E01               	movlw	1
  5633                           
  5634                           ; BSR set to: 0
  5635  0038EC  0012               	return	
  5636  0038EE                     l946:
  5637  0038EE                     l8607:
  5638                           
  5639                           ; BSR set to: 0
  5640  0038EE  2B75               	incf	ARP_checkForEntry@i& (0+255),f,b
  5641  0038F0  D7AC               	goto	l8593
  5642  0038F2                     u10620:
  5643                           
  5644                           ; BSR set to: 0
  5645                           ;arp.c: 245: }
  5646                           ;arp.c: 246: }
  5647                           ;arp.c: 247: }
  5648                           ;arp.c: 248: return 0;
  5649                           
  5650                           ; BSR set to: 0
  5651  0038F2  0E00               	movlw	0
  5652  0038F4  0012               	return	
  5653  0038F6                     __end_of_ARP_checkForEntry:
  5654                           	opt stack 0
  5655                           tblptru	equ	0xFF8
  5656                           tblptrh	equ	0xFF7
  5657                           tblptrl	equ	0xFF6
  5658                           tablat	equ	0xFF5
  5659                           prodh	equ	0xFF4
  5660                           prodl	equ	0xFF3
  5661                           intcon	equ	0xFF2
  5662                           intcon3	equ	0xFF0
  5663                           postinc0	equ	0xFEE
  5664                           plusw0	equ	0xFEB
  5665                           fsr0h	equ	0xFEA
  5666                           fsr0l	equ	0xFE9
  5667                           wreg	equ	0xFE8
  5668                           indf1	equ	0xFE7
  5669                           postinc1	equ	0xFE6
  5670                           postdec1	equ	0xFE5
  5671                           plusw1	equ	0xFE3
  5672                           fsr1h	equ	0xFE2
  5673                           fsr1l	equ	0xFE1
  5674                           indf2	equ	0xFDF
  5675                           postinc2	equ	0xFDE
  5676                           postdec2	equ	0xFDD
  5677                           plusw2	equ	0xFDB
  5678                           fsr2h	equ	0xFDA
  5679                           fsr2l	equ	0xFD9
  5680                           status	equ	0xFD8
  5681                           
  5682 ;; *************** function _ethernet_rxGetNewFrame *****************
  5683 ;; Defined at:
  5684 ;;		line 53 in file "src/eth/ethernet.c"
  5685 ;; Parameters:    Size  Location     Type
  5686 ;;  frame           2  120[BANK1 ] PTR struct ethernetFrame
  5687 ;;		 -> stack.ethernet(15), stack(113), 
  5688 ;; Auto vars:     Size  Location     Type
  5689 ;;  err             3  156[BANK0 ] struct error
  5690 ;; Return value:  Size  Location     Type
  5691 ;;                  3  120[BANK1 ] struct error
  5692 ;; Registers used:
  5693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5694 ;; Tracked objects:
  5695 ;;		On entry : 0/0
  5696 ;;		On exit  : 0/0
  5697 ;;		Unchanged: 0/0
  5698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5699 ;;      Params:         0       0       3       0       0       0       0       0       0
  5700 ;;      Locals:         0       3       0       0       0       0       0       0       0
  5701 ;;      Temps:          0       0       8       0       0       0       0       0       0
  5702 ;;      Totals:         0       3      11       0       0       0       0       0       0
  5703 ;;Total ram usage:       14 bytes
  5704 ;; Hardware stack levels used:    1
  5705 ;; Hardware stack levels required when called:   12
  5706 ;; This function calls:
  5707 ;;		_ARP_handleNewPacket
  5708 ;;		_UARTTransmitInt
  5709 ;;		_UARTTransmitText
  5710 ;;		_etherTypeToString
  5711 ;;		_ethernetController_dropPacket
  5712 ;;		_ethernetController_getEtherTypeField
  5713 ;;		_ethernetController_getNextPacketPointer
  5714 ;;		_ethernetController_getRSV
  5715 ;;		_ethernetController_updateNextPacketPointer
  5716 ;;		_intToString
  5717 ;;		_ipv4_handleNewPacket
  5718 ;;		_macToString
  5719 ;; This function is called by:
  5720 ;;		_handleStackBackgroundTasks
  5721 ;; This function uses a non-reentrant model
  5722 ;;
  5723                           
  5724                           	psect	text13
  5725  00059E                     __ptext13:
  5726                           	opt stack 0
  5727  00059E                     _ethernet_rxGetNewFrame:
  5728                           	opt stack 17
  5729                           
  5730                           ;ethernet.c: 54: uint32_t static counter = 0;
  5731                           ;ethernet.c: 55: error_t err;
  5732                           ;ethernet.c: 56: err.module = ERROR_MODULE_ETHERNET;
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;incstack = 0
  5736  00059E  0E02               	movlw	2
  5737  0005A0  0100               	movlb	0	; () banked
  5738  0005A2  6FFC               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  5739                           
  5740                           ;ethernet.c: 57: err.code = (uint16_t)0;
  5741  0005A4  0E00               	movlw	0
  5742  0005A6  6FFE               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  5743  0005A8  0E00               	movlw	0
  5744  0005AA  6FFD               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;ethernet.c: 58: frame->memory.start = ethernetController_getNextPacketPointer();
  5748  0005AC  EC61  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
  5749  0005B0  0101               	movlb	1	; () banked
  5750  0005B2  EE20 F010          	lfsr	2,16
  5751  0005B6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5752  0005B8  26D9               	addwf	fsr2l,f,c
  5753  0005BA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5754  0005BC  22DA               	addwfc	fsr2h,f,c
  5755  0005BE  0100               	movlb	0	; () banked
  5756  0005C0  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  5757  0005C4  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;ethernet.c: 60: ethernetController_updateNextPacketPointer();
  5761  0005C8  EC9A  F01F         	call	_ethernetController_updateNextPacketPointer	;wreg free
  5762                           
  5763                           ;ethernet.c: 63: frame->memory.fIsAssigned = 1;
  5764  0005CC  0101               	movlb	1	; () banked
  5765  0005CE  EE20 F016          	lfsr	2,22
  5766  0005D2  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5767  0005D4  26D9               	addwf	fsr2l,f,c
  5768  0005D6  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5769  0005D8  22DA               	addwfc	fsr2h,f,c
  5770  0005DA  0E01               	movlw	1
  5771  0005DC  6EDF               	movwf	indf2,c
  5772                           
  5773                           ; BSR set to: 1
  5774                           ;ethernet.c: 64: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  5775  0005DE  EE20 F010          	lfsr	2,16
  5776  0005E2  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5777  0005E4  26D9               	addwf	fsr2l,f,c
  5778  0005E6  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5779  0005E8  22DA               	addwfc	fsr2h,f,c
  5780  0005EA  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  5781  0005EE  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  5782  0005F2  EC13  F020         	call	_ethernetController_getRSV	;wreg free
  5783  0005F6  0101               	movlb	1	; () banked
  5784  0005F8  EE20 F019          	lfsr	2,25
  5785  0005FC  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5786  0005FE  26D9               	addwf	fsr2l,f,c
  5787  000600  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5788  000602  22DA               	addwfc	fsr2h,f,c
  5789  000604  0E04               	movlw	4
  5790  000606                     u10971:
  5791  000606  CFEB FFDB          	movff	plusw0,plusw2
  5792  00060A  06E8               	decf	wreg,f,c
  5793  00060C  E2FC               	bc	u10971
  5794                           
  5795                           ; BSR set to: 1
  5796                           ;ethernet.c: 65: frame->memory.length = frame->receiveStatusVector.length;
  5797  00060E  EE20 F019          	lfsr	2,25
  5798  000612  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5799  000614  26D9               	addwf	fsr2l,f,c
  5800  000616  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5801  000618  22DA               	addwfc	fsr2h,f,c
  5802  00061A  EE10 F014          	lfsr	1,20
  5803  00061E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5804  000620  26E1               	addwf	fsr1l,f,c
  5805  000622  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5806  000624  22E2               	addwfc	fsr1h,f,c
  5807  000626  CFDE FFE6          	movff	postinc2,postinc1
  5808  00062A  CFDD FFE5          	movff	postdec2,postdec1
  5809                           
  5810                           ; BSR set to: 1
  5811                           ;ethernet.c: 68: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  5812  00062E  EE20 F014          	lfsr	2,20
  5813  000632  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5814  000634  26D9               	addwf	fsr2l,f,c
  5815  000636  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5816  000638  22DA               	addwfc	fsr2h,f,c
  5817  00063A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5818  00063E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5819  000642  EE20 F010          	lfsr	2,16
  5820  000646  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5821  000648  26D9               	addwf	fsr2l,f,c
  5822  00064A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5823  00064C  22DA               	addwfc	fsr2h,f,c
  5824  00064E  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5825  000652  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5826  000656  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5827  000658  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5828  00065A  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5829  00065C  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5830  00065E  0E60               	movlw	96
  5831  000660  5D7E               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5832  000662  A0D8               	btfss	status,0,c
  5833  000664  D03B               	goto	l362
  5834                           
  5835                           ; BSR set to: 1
  5836                           ;ethernet.c: 70: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  5837  000666  0E00               	movlw	0
  5838  000668  6F7B               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  5839  00066A  0E30               	movlw	48
  5840  00066C  6F7C               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  5841  00066E  EE20 F014          	lfsr	2,20
  5842  000672  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5843  000674  26D9               	addwf	fsr2l,f,c
  5844  000676  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5845  000678  22DA               	addwfc	fsr2h,f,c
  5846  00067A  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5847  00067E  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5848  000682  0EFF               	movlw	255
  5849  000684  6F7F               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  5850  000686  0E2F               	movlw	47
  5851  000688  6F80               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  5852  00068A  EE20 F010          	lfsr	2,16
  5853  00068E  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5854  000690  26D9               	addwf	fsr2l,f,c
  5855  000692  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5856  000694  22DA               	addwfc	fsr2h,f,c
  5857  000696  CFDE F181          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  5858  00069A  CFDD F182          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  5859  00069E  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5860  0006A0  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5861  0006A2  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5862  0006A4  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5863  0006A6  517F               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  5864  0006A8  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5865  0006AA  5180               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  5866  0006AC  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5867  0006AE  1F81               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5868  0006B0  1F82               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5869  0006B2  4B81               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5870  0006B4  2B82               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5871  0006B6  517D               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  5872  0006B8  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5873  0006BA  517E               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  5874  0006BC  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5875  0006BE  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5876  0006C0  2781               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  5877  0006C2  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5878  0006C4  2382               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  5879  0006C6  EE20 F012          	lfsr	2,18
  5880  0006CA  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5881  0006CC  26D9               	addwf	fsr2l,f,c
  5882  0006CE  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5883  0006D0  22DA               	addwfc	fsr2h,f,c
  5884  0006D2  C181  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  5885  0006D6  C182  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  5886                           
  5887                           ;ethernet.c: 71: } else {
  5888  0006DA  D022               	goto	l363
  5889  0006DC                     l362:
  5890                           
  5891                           ; BSR set to: 1
  5892                           ;ethernet.c: 72: frame->memory.end = frame->memory.start + frame->memory.length;
  5893                           
  5894                           ; BSR set to: 1
  5895  0006DC  EE20 F014          	lfsr	2,20
  5896  0006E0  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5897  0006E2  26D9               	addwf	fsr2l,f,c
  5898  0006E4  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5899  0006E6  22DA               	addwfc	fsr2h,f,c
  5900  0006E8  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  5901  0006EC  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  5902  0006F0  EE20 F010          	lfsr	2,16
  5903  0006F4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5904  0006F6  26D9               	addwf	fsr2l,f,c
  5905  0006F8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5906  0006FA  22DA               	addwfc	fsr2h,f,c
  5907  0006FC  CFDE F17D          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  5908  000700  CFDD F17E          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  5909  000704  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  5910  000706  277D               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  5911  000708  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  5912  00070A  237E               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  5913  00070C  EE20 F012          	lfsr	2,18
  5914  000710  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5915  000712  26D9               	addwf	fsr2l,f,c
  5916  000714  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5917  000716  22DA               	addwfc	fsr2h,f,c
  5918  000718  C17D  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  5919  00071C  C17E  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  5920  000720                     l363:
  5921                           
  5922                           ; BSR set to: 1
  5923                           ;ethernet.c: 73: }
  5924                           ;ethernet.c: 74: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  5925                           
  5926                           ; BSR set to: 1
  5927  000720  EE20 F010          	lfsr	2,16
  5928  000724  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5929  000726  26D9               	addwf	fsr2l,f,c
  5930  000728  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5931  00072A  22DA               	addwfc	fsr2h,f,c
  5932  00072C  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  5933  000730  0E08               	movlw	8
  5934  000732                     u10991:
  5935  000732  CFDB FFEB          	movff	plusw2,plusw0
  5936  000736  06E8               	decf	wreg,f,c
  5937  000738  E2FC               	bc	u10991
  5938  00073A  ECC0  F020         	call	_ethernetController_getEtherTypeField	;wreg free
  5939  00073E  0101               	movlb	1	; () banked
  5940  000740  EE20 F00E          	lfsr	2,14
  5941  000744  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5942  000746  26D9               	addwf	fsr2l,f,c
  5943  000748  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5944  00074A  22DA               	addwfc	fsr2h,f,c
  5945  00074C  0100               	movlb	0	; () banked
  5946  00074E  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  5947  000752  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  5948                           
  5949                           ; BSR set to: 0
  5950                           ;ethernet.c: 76: UARTTransmitText("[");
  5951  000756  0ED0               	movlw	low (STR_66+3)
  5952  000758  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5953  00075A  0E7F               	movlw	high (STR_66+3)
  5954  00075C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5955  00075E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  5956                           
  5957                           ;ethernet.c: 77: UARTTransmitText(intToString(counter++));
  5958  000762  C1C1  F073         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  5959  000766  C1C2  F074         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  5960  00076A  C1C3  F075         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  5961  00076E  C1C4  F076         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  5962  000772  EC13  F00C         	call	_intToString	;wreg free
  5963  000776  C073  F098         	movff	?_intToString,UARTTransmitText@str
  5964  00077A  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5965  00077E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  5966  000782  0E01               	movlw	1
  5967  000784  0101               	movlb	1	; () banked
  5968  000786  27C1               	addwf	ethernet_rxGetNewFrame@counter& (0+255),f,b
  5969  000788  0E00               	movlw	0
  5970  00078A  23C2               	addwfc	(ethernet_rxGetNewFrame@counter+1)& (0+255),f,b
  5971  00078C  23C3               	addwfc	(ethernet_rxGetNewFrame@counter+2)& (0+255),f,b
  5972  00078E  23C4               	addwfc	(ethernet_rxGetNewFrame@counter+3)& (0+255),f,b
  5973                           
  5974                           ; BSR set to: 1
  5975                           ;ethernet.c: 78: UARTTransmitText("]");
  5976  000790  0EFC               	movlw	low (STR_20+1)
  5977  000792  0100               	movlb	0	; () banked
  5978  000794  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5979  000796  0E7F               	movlw	high (STR_20+1)
  5980  000798  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5981  00079A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  5982                           
  5983                           ;ethernet.c: 80: if (frame->receiveStatusVector.broadcast)
  5984  00079E  0101               	movlb	1	; () banked
  5985  0007A0  EE20 F01B          	lfsr	2,27
  5986  0007A4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  5987  0007A6  26D9               	addwf	fsr2l,f,c
  5988  0007A8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  5989  0007AA  22DA               	addwfc	fsr2h,f,c
  5990  0007AC  AEDF               	btfss	indf2,7,c
  5991  0007AE  D007               	goto	l364
  5992                           
  5993                           ; BSR set to: 1
  5994                           ;ethernet.c: 81: UARTTransmitText("[Broadcast]");
  5995  0007B0  0E6F               	movlw	low STR_7
  5996  0007B2  0100               	movlb	0	; () banked
  5997  0007B4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5998  0007B6  0E7F               	movlw	high STR_7
  5999  0007B8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6000  0007BA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6001  0007BE                     l364:
  6002                           
  6003                           ;ethernet.c: 82: if (frame->receiveStatusVector.unicast)
  6004  0007BE  0101               	movlb	1	; () banked
  6005  0007C0  EE20 F01D          	lfsr	2,29
  6006  0007C4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6007  0007C6  26D9               	addwf	fsr2l,f,c
  6008  0007C8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6009  0007CA  22DA               	addwfc	fsr2h,f,c
  6010  0007CC  A4DF               	btfss	indf2,2,c
  6011  0007CE  D007               	goto	l365
  6012                           
  6013                           ; BSR set to: 1
  6014                           ;ethernet.c: 83: UARTTransmitText("[Unicast]");
  6015  0007D0  0E90               	movlw	low STR_8
  6016  0007D2  0100               	movlb	0	; () banked
  6017  0007D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6018  0007D6  0E7F               	movlw	high STR_8
  6019  0007D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6020  0007DA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6021  0007DE                     l365:
  6022                           
  6023                           ;ethernet.c: 84: if (!frame->receiveStatusVector.receivedOk)
  6024  0007DE  0101               	movlb	1	; () banked
  6025  0007E0  EE20 F01B          	lfsr	2,27
  6026  0007E4  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6027  0007E6  26D9               	addwf	fsr2l,f,c
  6028  0007E8  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6029  0007EA  22DA               	addwfc	fsr2h,f,c
  6030  0007EC  BADF               	btfsc	indf2,5,c
  6031  0007EE  D09E               	goto	l367
  6032                           
  6033                           ; BSR set to: 1
  6034                           ;ethernet.c: 85: UARTTransmitText("[Symbol Errors]");
  6035  0007F0  0EFE               	movlw	low STR_9
  6036  0007F2  0100               	movlb	0	; () banked
  6037  0007F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6038  0007F6  0E7E               	movlw	high STR_9
  6039  0007F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6040  0007FA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6041                           
  6042                           ;ethernet.c: 87: switch (frame->ethertype) {
  6043  0007FE  D096               	goto	l367
  6044  000800                     
  6045                           ;ethernet.c: 89: UARTTransmitText("[ARP]");
  6046  000800  0EC2               	movlw	low STR_10
  6047  000802  0100               	movlb	0	; () banked
  6048  000804  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6049  000806  0E7F               	movlw	high STR_10
  6050  000808  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6051  00080A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6052                           
  6053                           ;ethernet.c: 90: ARP_handleNewPacket(frame);
  6054  00080E  C178  F0F8         	movff	ethernet_rxGetNewFrame@frame,ARP_handleNewPacket@frame
  6055  000812  C179  F0F9         	movff	ethernet_rxGetNewFrame@frame+1,ARP_handleNewPacket@frame+1
  6056  000816  EC96  F012         	call	_ARP_handleNewPacket	;wreg free
  6057                           
  6058                           ;ethernet.c: 93: break;
  6059                           
  6060                           ;ethernet.c: 92: case ETHERTYPE_FLOW_CONTROL:
  6061                           
  6062                           ;ethernet.c: 91: break;
  6063  00081A  D0AA               	goto	l369
  6064  00081C                     
  6065                           ;ethernet.c: 95: UARTTransmitText("[IPv4]");
  6066  00081C  0EBB               	movlw	low STR_11
  6067  00081E  0100               	movlb	0	; () banked
  6068  000820  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6069  000822  0E7F               	movlw	high STR_11
  6070  000824  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6071  000826  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6072                           
  6073                           ;ethernet.c: 96: ipv4_handleNewPacket(frame);
  6074  00082A  C178  F0B5         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  6075  00082E  C179  F0B6         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  6076  000832  ECBA  F011         	call	_ipv4_handleNewPacket	;wreg free
  6077                           
  6078                           ;ethernet.c: 99: break;
  6079                           
  6080                           ;ethernet.c: 98: case ETHERTYPE_WOL:
  6081                           
  6082                           ;ethernet.c: 97: break;
  6083  000836  D09C               	goto	l369
  6084  000838                     
  6085                           ;ethernet.c: 101: UARTTransmitText("[");
  6086  000838  0ED0               	movlw	low (STR_66+3)
  6087  00083A  0100               	movlb	0	; () banked
  6088  00083C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6089  00083E  0E7F               	movlw	high (STR_66+3)
  6090  000840  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6091  000842  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6092                           
  6093                           ;ethernet.c: 102: UARTTransmitText(macToString(frame->source));
  6094  000846  0101               	movlb	1	; () banked
  6095  000848  EE20 F002          	lfsr	2,2
  6096  00084C  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6097  00084E  26D9               	addwf	fsr2l,f,c
  6098  000850  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6099  000852  22DA               	addwfc	fsr2h,f,c
  6100  000854  EE00  F07A         	lfsr	0,macToString@addr
  6101  000858  0E05               	movlw	5
  6102  00085A                     u11031:
  6103  00085A  CFDB FFEB          	movff	plusw2,plusw0
  6104  00085E  06E8               	decf	wreg,f,c
  6105  000860  E2FC               	bc	u11031
  6106  000862  EC94  F018         	call	_macToString	;wreg free
  6107  000866  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6108  00086A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6109  00086E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6110                           
  6111                           ;ethernet.c: 103: UARTTransmitText("->");
  6112  000872  0EF5               	movlw	low STR_13
  6113  000874  0100               	movlb	0	; () banked
  6114  000876  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6115  000878  0E7F               	movlw	high STR_13
  6116  00087A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6117  00087C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6118                           
  6119                           ;ethernet.c: 104: UARTTransmitText(macToString(frame->destination));
  6120  000880  0101               	movlb	1	; () banked
  6121  000882  EE20 F008          	lfsr	2,8
  6122  000886  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6123  000888  26D9               	addwf	fsr2l,f,c
  6124  00088A  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6125  00088C  22DA               	addwfc	fsr2h,f,c
  6126  00088E  EE00  F07A         	lfsr	0,macToString@addr
  6127  000892  0E05               	movlw	5
  6128  000894                     u11041:
  6129  000894  CFDB FFEB          	movff	plusw2,plusw0
  6130  000898  06E8               	decf	wreg,f,c
  6131  00089A  E2FC               	bc	u11041
  6132  00089C  EC94  F018         	call	_macToString	;wreg free
  6133  0008A0  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  6134  0008A4  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  6135  0008A8  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6136                           
  6137                           ;ethernet.c: 105: UARTTransmitText("][");
  6138  0008AC  0EF8               	movlw	low STR_14
  6139  0008AE  0100               	movlb	0	; () banked
  6140  0008B0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6141  0008B2  0E7F               	movlw	high STR_14
  6142  0008B4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6143  0008B6  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6144                           
  6145                           ;ethernet.c: 106: UARTTransmitText(etherTypeToString(frame->ethertype));
  6146  0008BA  0101               	movlb	1	; () banked
  6147  0008BC  EE20 F00E          	lfsr	2,14
  6148  0008C0  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6149  0008C2  26D9               	addwf	fsr2l,f,c
  6150  0008C4  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6151  0008C6  22DA               	addwfc	fsr2h,f,c
  6152  0008C8  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  6153  0008CC  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  6154  0008D0  EC14  F023         	call	_etherTypeToString	;wreg free
  6155  0008D4  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  6156  0008D8  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  6157  0008DC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6158                           
  6159                           ;ethernet.c: 107: UARTTransmitText("][L=");
  6160  0008E0  0EE1               	movlw	low STR_15
  6161  0008E2  0100               	movlb	0	; () banked
  6162  0008E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6163  0008E6  0E7F               	movlw	high STR_15
  6164  0008E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6165  0008EA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6166                           
  6167                           ;ethernet.c: 108: UARTTransmitInt(frame->length);
  6168  0008EE  C178  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  6169  0008F2  C179  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  6170  0008F6  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6171  0008FA  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6172  0008FE  C17B  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  6173  000902  C17C  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  6174  000906  0100               	movlb	0	; () banked
  6175  000908  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  6176  00090A  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  6177  00090C  ECBB  F025         	call	_UARTTransmitInt	;wreg free
  6178                           
  6179                           ;ethernet.c: 109: UARTTransmitText("]");
  6180  000910  0EFC               	movlw	low (STR_20+1)
  6181  000912  0100               	movlb	0	; () banked
  6182  000914  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6183  000916  0E7F               	movlw	high (STR_20+1)
  6184  000918  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6185  00091A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6186                           
  6187                           ;ethernet.c: 110: ethernetController_dropPacket(frame);
  6188  00091E  C178  F072         	movff	ethernet_rxGetNewFrame@frame,ethernetController_dropPacket@frame
  6189  000922  C179  F073         	movff	ethernet_rxGetNewFrame@frame+1,ethernetController_dropPacket@frame+1
  6190  000926  EC9A  F023         	call	_ethernetController_dropPacket	;wreg free
  6191                           
  6192                           ;ethernet.c: 111: break;
  6193  00092A  D022               	goto	l369
  6194  00092C                     l367:
  6195  00092C  0101               	movlb	1	; () banked
  6196  00092E  EE20 F00E          	lfsr	2,14
  6197  000932  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6198  000934  26D9               	addwf	fsr2l,f,c
  6199  000936  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6200  000938  22DA               	addwfc	fsr2h,f,c
  6201  00093A  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6202  00093E  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6203                           
  6204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6205                           ; Switch size 1, requested type "space"
  6206                           ; Number of cases is 2, Range of values is 8 to 136
  6207                           ; switch strategies available:
  6208                           ; Name         Instructions Cycles
  6209                           ; simple_byte            7     4 (average)
  6210                           ;	Chosen strategy is simple_byte
  6211  000942  517C               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  6212  000944  0A08               	xorlw	8	; case 8
  6213  000946  B4D8               	btfsc	status,2,c
  6214  000948  D004               	goto	l9561
  6215  00094A  0A80               	xorlw	128	; case 136
  6216  00094C  B4D8               	btfsc	status,2,c
  6217  00094E  D00C               	goto	l9563
  6218  000950  D773               	goto	l373
  6219  000952                     l9561:
  6220                           
  6221                           ; BSR set to: 1
  6222                           ; Switch size 1, requested type "space"
  6223                           ; Number of cases is 3, Range of values is 0 to 66
  6224                           ; switch strategies available:
  6225                           ; Name         Instructions Cycles
  6226                           ; simple_byte           10     6 (average)
  6227                           ;	Chosen strategy is simple_byte
  6228  000952  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6229  000954  0A00               	xorlw	0	; case 0
  6230  000956  B4D8               	btfsc	status,2,c
  6231  000958  D761               	goto	l371
  6232  00095A  0A06               	xorlw	6	; case 6
  6233  00095C  B4D8               	btfsc	status,2,c
  6234  00095E  D750               	goto	l368
  6235  000960  0A44               	xorlw	68	; case 66
  6236  000962  B4D8               	btfsc	status,2,c
  6237  000964  D005               	goto	l369
  6238  000966  D768               	goto	l373
  6239  000968                     l9563:
  6240                           
  6241                           ; BSR set to: 1
  6242                           ; Switch size 1, requested type "space"
  6243                           ; Number of cases is 1, Range of values is 8 to 8
  6244                           ; switch strategies available:
  6245                           ; Name         Instructions Cycles
  6246                           ; simple_byte            4     3 (average)
  6247                           ;	Chosen strategy is simple_byte
  6248  000968  517B               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  6249  00096A  0A08               	xorlw	8	; case 8
  6250  00096C  A4D8               	btfss	status,2,c
  6251  00096E  D764               	goto	l373
  6252  000970                     l369:
  6253                           
  6254                           ;ethernet.c: 115: UARTTransmitText("[");
  6255                           
  6256                           ; BSR set to: 1
  6257  000970  0ED0               	movlw	low (STR_66+3)
  6258  000972  0100               	movlb	0	; () banked
  6259  000974  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6260  000976  0E7F               	movlw	high (STR_66+3)
  6261  000978  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6262  00097A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6263                           
  6264                           ;ethernet.c: 116: UARTTransmitText(intToString(frame->memory.start));
  6265  00097E  0101               	movlb	1	; () banked
  6266  000980  EE20 F010          	lfsr	2,16
  6267  000984  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6268  000986  26D9               	addwf	fsr2l,f,c
  6269  000988  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6270  00098A  22DA               	addwfc	fsr2h,f,c
  6271  00098C  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6272  000990  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6273  000994  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6274  000998  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6275  00099C  0100               	movlb	0	; () banked
  6276  00099E  6B75               	clrf	(intToString@val+2)& (0+255),b
  6277  0009A0  6B76               	clrf	(intToString@val+3)& (0+255),b
  6278  0009A2  EC13  F00C         	call	_intToString	;wreg free
  6279  0009A6  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6280  0009AA  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6281  0009AE  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6282                           
  6283                           ;ethernet.c: 117: UARTTransmitText(" to ");
  6284  0009B2  0EE9               	movlw	low (STR_71+11)
  6285  0009B4  0100               	movlb	0	; () banked
  6286  0009B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6287  0009B8  0E7E               	movlw	high (STR_71+11)
  6288  0009BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6289  0009BC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6290                           
  6291                           ;ethernet.c: 118: UARTTransmitText(intToString(frame->memory.end));
  6292  0009C0  0101               	movlb	1	; () banked
  6293  0009C2  EE20 F012          	lfsr	2,18
  6294  0009C6  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6295  0009C8  26D9               	addwf	fsr2l,f,c
  6296  0009CA  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6297  0009CC  22DA               	addwfc	fsr2h,f,c
  6298  0009CE  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6299  0009D2  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6300  0009D6  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6301  0009DA  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6302  0009DE  0100               	movlb	0	; () banked
  6303  0009E0  6B75               	clrf	(intToString@val+2)& (0+255),b
  6304  0009E2  6B76               	clrf	(intToString@val+3)& (0+255),b
  6305  0009E4  EC13  F00C         	call	_intToString	;wreg free
  6306  0009E8  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6307  0009EC  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6308  0009F0  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6309                           
  6310                           ;ethernet.c: 119: UARTTransmitText(" (");
  6311  0009F4  0EF2               	movlw	low STR_19
  6312  0009F6  0100               	movlb	0	; () banked
  6313  0009F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6314  0009FA  0E7F               	movlw	high STR_19
  6315  0009FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6316  0009FE  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6317                           
  6318                           ;ethernet.c: 120: UARTTransmitText(intToString(frame->memory.length));
  6319  000A02  0101               	movlb	1	; () banked
  6320  000A04  EE20 F014          	lfsr	2,20
  6321  000A08  5178               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  6322  000A0A  26D9               	addwf	fsr2l,f,c
  6323  000A0C  5179               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  6324  000A0E  22DA               	addwfc	fsr2h,f,c
  6325  000A10  CFDE F17B          	movff	postinc2,??_ethernet_rxGetNewFrame
  6326  000A14  CFDD F17C          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  6327  000A18  C17B  F073         	movff	??_ethernet_rxGetNewFrame,intToString@val
  6328  000A1C  C17C  F074         	movff	??_ethernet_rxGetNewFrame+1,intToString@val+1
  6329  000A20  0100               	movlb	0	; () banked
  6330  000A22  6B75               	clrf	(intToString@val+2)& (0+255),b
  6331  000A24  6B76               	clrf	(intToString@val+3)& (0+255),b
  6332  000A26  EC13  F00C         	call	_intToString	;wreg free
  6333  000A2A  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6334  000A2E  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6335  000A32  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6336                           
  6337                           ;ethernet.c: 121: UARTTransmitText(")]");
  6338  000A36  0EFB               	movlw	low STR_20
  6339  000A38  0100               	movlb	0	; () banked
  6340  000A3A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6341  000A3C  0E7F               	movlw	high STR_20
  6342  000A3E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6343  000A40  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6344                           
  6345                           ;ethernet.c: 124: UARTTransmitText("\n\r");
  6346  000A44  0E83               	movlw	low (STR_37+48)
  6347  000A46  0100               	movlb	0	; () banked
  6348  000A48  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6349  000A4A  0E7C               	movlw	high (STR_37+48)
  6350  000A4C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6351  000A4E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6352  000A52  0012               	return		;funcret
  6353  000A54                     __end_of_ethernet_rxGetNewFrame:
  6354                           	opt stack 0
  6355                           tblptru	equ	0xFF8
  6356                           tblptrh	equ	0xFF7
  6357                           tblptrl	equ	0xFF6
  6358                           tablat	equ	0xFF5
  6359                           prodh	equ	0xFF4
  6360                           prodl	equ	0xFF3
  6361                           intcon	equ	0xFF2
  6362                           intcon3	equ	0xFF0
  6363                           postinc0	equ	0xFEE
  6364                           plusw0	equ	0xFEB
  6365                           fsr0h	equ	0xFEA
  6366                           fsr0l	equ	0xFE9
  6367                           wreg	equ	0xFE8
  6368                           indf1	equ	0xFE7
  6369                           postinc1	equ	0xFE6
  6370                           postdec1	equ	0xFE5
  6371                           plusw1	equ	0xFE3
  6372                           fsr1h	equ	0xFE2
  6373                           fsr1l	equ	0xFE1
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           plusw2	equ	0xFDB
  6378                           fsr2h	equ	0xFDA
  6379                           fsr2l	equ	0xFD9
  6380                           status	equ	0xFD8
  6381                           
  6382 ;; *************** function _ipv4_handleNewPacket *****************
  6383 ;; Defined at:
  6384 ;;		line 133 in file "src/stack/protocols/ipv4.c"
  6385 ;; Parameters:    Size  Location     Type
  6386 ;;  frame           2   85[BANK0 ] PTR struct ethernetFrame
  6387 ;;		 -> stack.ethernet(15), stack(113), 
  6388 ;; Auto vars:     Size  Location     Type
  6389 ;;  ip             23   98[BANK0 ] struct ipv4_header
  6390 ;;  headerField     9   89[BANK0 ] struct memoryField
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      void 
  6393 ;; Registers used:
  6394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6400 ;;      Params:         0       2       0       0       0       0       0       0       0
  6401 ;;      Locals:         0      32       0       0       0       0       0       0       0
  6402 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6403 ;;      Totals:         0      36       0       0       0       0       0       0       0
  6404 ;;Total ram usage:       36 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:   10
  6407 ;; This function calls:
  6408 ;;		_UARTTransmitText
  6409 ;;		_ethernetController_dropPacket
  6410 ;;		_intToString
  6411 ;;		_ipAdressToString
  6412 ;;		_ipProtocolToString
  6413 ;;		_ipv4_checkHeaderChecksum
  6414 ;;		_ipv4_parseHeader
  6415 ;; This function is called by:
  6416 ;;		_ethernet_rxGetNewFrame
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text14
  6421  002374                     __ptext14:
  6422                           	opt stack 0
  6423  002374                     _ipv4_handleNewPacket:
  6424                           	opt stack 18
  6425                           
  6426                           ;ipv4.c: 134: ipv4_header_t ip;
  6427                           ;ipv4.c: 135: memoryField_t headerField;
  6428                           ;ipv4.c: 136: if (frame->ethertype != ETHERTYPE_IPv4) {
  6429                           
  6430                           ;incstack = 0
  6431  002374  0100               	movlb	0	; () banked
  6432  002376  EE20 F00E          	lfsr	2,14
  6433  00237A  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6434  00237C  26D9               	addwf	fsr2l,f,c
  6435  00237E  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6436  002380  22DA               	addwfc	fsr2h,f,c
  6437  002382  50DE               	movf	postinc2,w,c
  6438  002384  E104               	bnz	u10510
  6439  002386  0E08               	movlw	8
  6440  002388  18DE               	xorwf	postinc2,w,c
  6441  00238A  B4D8               	btfsc	status,2,c
  6442  00238C  D007               	goto	l1033
  6443  00238E                     u10510:
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;ipv4.c: 137: ethernetController_dropPacket(frame);
  6447  00238E  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6448  002392  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6449  002396  EC9A  F023         	call	_ethernetController_dropPacket	;wreg free
  6450                           
  6451                           ;ipv4.c: 138: return;
  6452  00239A  0012               	return	
  6453  00239C                     l1033:
  6454                           
  6455                           ;ipv4.c: 139: }
  6456                           ;ipv4.c: 140: headerField = frame->memory;
  6457  00239C  0100               	movlb	0	; () banked
  6458  00239E  EE20 F010          	lfsr	2,16
  6459  0023A2  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6460  0023A4  26D9               	addwf	fsr2l,f,c
  6461  0023A6  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6462  0023A8  22DA               	addwfc	fsr2h,f,c
  6463  0023AA  EE10  F0B9         	lfsr	1,ipv4_handleNewPacket@headerField
  6464  0023AE  0E08               	movlw	8
  6465  0023B0                     u10521:
  6466  0023B0  CFDB FFE3          	movff	plusw2,plusw1
  6467  0023B4  06E8               	decf	wreg,f,c
  6468  0023B6  E2FC               	bc	u10521
  6469                           
  6470                           ; BSR set to: 0
  6471                           ;ipv4.c: 141: headerField.start = frame->memory.start + 22;
  6472  0023B8  EE20 F010          	lfsr	2,16
  6473  0023BC  51B5               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  6474  0023BE  26D9               	addwf	fsr2l,f,c
  6475  0023C0  51B6               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  6476  0023C2  22DA               	addwfc	fsr2h,f,c
  6477  0023C4  CFDE F0B7          	movff	postinc2,??_ipv4_handleNewPacket
  6478  0023C8  CFDD F0B8          	movff	postdec2,??_ipv4_handleNewPacket+1
  6479  0023CC  0E16               	movlw	22
  6480  0023CE  25B7               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  6481  0023D0  6FB9               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  6482  0023D2  0E00               	movlw	0
  6483  0023D4  21B8               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  6484  0023D6  6FBA               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;ipv4.c: 143: ip = ipv4_parseHeader(&headerField);
  6488  0023D8  0EB9               	movlw	low ipv4_handleNewPacket@headerField
  6489  0023DA  6F77               	movwf	ipv4_parseHeader@field& (0+255),b
  6490  0023DC  0E00               	movlw	high ipv4_handleNewPacket@headerField
  6491  0023DE  6F78               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  6492  0023E0  ECB2  F00E         	call	_ipv4_parseHeader	;wreg free
  6493  0023E4  EE20  F0C2         	lfsr	2,ipv4_handleNewPacket@ip
  6494  0023E8  0E16               	movlw	22
  6495  0023EA                     u10531:
  6496  0023EA  CFEB FFDB          	movff	plusw0,plusw2
  6497  0023EE  06E8               	decf	wreg,f,c
  6498  0023F0  E2FC               	bc	u10531
  6499                           
  6500                           ;ipv4.c: 144: UARTTransmitText("[");
  6501  0023F2  0ED0               	movlw	low (STR_66+3)
  6502  0023F4  0100               	movlb	0	; () banked
  6503  0023F6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6504  0023F8  0E7F               	movlw	high (STR_66+3)
  6505  0023FA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6506  0023FC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6507                           
  6508                           ;ipv4.c: 145: UARTTransmitText(ipAdressToString(ip.source));
  6509  002400  C0D1  F067         	movff	ipv4_handleNewPacket@ip+15,ipAdressToString@ip
  6510  002404  C0D2  F068         	movff	ipv4_handleNewPacket@ip+16,ipAdressToString@ip+1
  6511  002408  C0D3  F069         	movff	ipv4_handleNewPacket@ip+17,ipAdressToString@ip+2
  6512  00240C  C0D4  F06A         	movff	ipv4_handleNewPacket@ip+18,ipAdressToString@ip+3
  6513  002410  ECD7  F00F         	call	_ipAdressToString	;wreg free
  6514  002414  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6515  002418  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6516  00241C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6517                           
  6518                           ;ipv4.c: 146: UARTTransmitText(" -> ");
  6519  002420  0EC8               	movlw	low STR_76
  6520  002422  0100               	movlb	0	; () banked
  6521  002424  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6522  002426  0E7F               	movlw	high STR_76
  6523  002428  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6524  00242A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6525                           
  6526                           ;ipv4.c: 147: UARTTransmitText(ipAdressToString(ip.destination));
  6527  00242E  C0D5  F067         	movff	ipv4_handleNewPacket@ip+19,ipAdressToString@ip
  6528  002432  C0D6  F068         	movff	ipv4_handleNewPacket@ip+20,ipAdressToString@ip+1
  6529  002436  C0D7  F069         	movff	ipv4_handleNewPacket@ip+21,ipAdressToString@ip+2
  6530  00243A  C0D8  F06A         	movff	ipv4_handleNewPacket@ip+22,ipAdressToString@ip+3
  6531  00243E  ECD7  F00F         	call	_ipAdressToString	;wreg free
  6532  002442  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6533  002446  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6534  00244A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6535                           
  6536                           ;ipv4.c: 148: UARTTransmitText("][");
  6537  00244E  0EF8               	movlw	low STR_14
  6538  002450  0100               	movlb	0	; () banked
  6539  002452  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6540  002454  0E7F               	movlw	high STR_14
  6541  002456  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6542  002458  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6543                           
  6544                           ;ipv4.c: 149: UARTTransmitText((ipProtocolToString(ip.protocol)));
  6545  00245C  0100               	movlb	0	; () banked
  6546  00245E  51CE               	movf	(ipv4_handleNewPacket@ip+12)& (0+255),w,b
  6547  002460  ECF0  F022         	call	_ipProtocolToString
  6548  002464  C060  F098         	movff	?_ipProtocolToString,UARTTransmitText@str
  6549  002468  C061  F099         	movff	?_ipProtocolToString+1,UARTTransmitText@str+1
  6550  00246C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6551                           
  6552                           ;ipv4.c: 150: UARTTransmitText("][");
  6553  002470  0EF8               	movlw	low STR_14
  6554  002472  0100               	movlb	0	; () banked
  6555  002474  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6556  002476  0E7F               	movlw	high STR_14
  6557  002478  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6558  00247A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6559                           
  6560                           ;ipv4.c: 151: UARTTransmitText(intToString(ip.totalLength));
  6561  00247E  C0C6  F073         	movff	ipv4_handleNewPacket@ip+4,intToString@val
  6562  002482  C0C7  F074         	movff	ipv4_handleNewPacket@ip+5,intToString@val+1
  6563  002486  0100               	movlb	0	; () banked
  6564  002488  6B75               	clrf	(intToString@val+2)& (0+255),b
  6565  00248A  6B76               	clrf	(intToString@val+3)& (0+255),b
  6566  00248C  EC13  F00C         	call	_intToString	;wreg free
  6567  002490  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6568  002494  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6569  002498  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6570                           
  6571                           ;ipv4.c: 152: UARTTransmitText("][");
  6572  00249C  0EF8               	movlw	low STR_14
  6573  00249E  0100               	movlb	0	; () banked
  6574  0024A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6575  0024A2  0E7F               	movlw	high STR_14
  6576  0024A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6577  0024A6  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6578                           
  6579                           ;ipv4.c: 153: UARTTransmitText(intToString(ip.version));
  6580  0024AA  0100               	movlb	0	; () banked
  6581  0024AC  51C2               	movf	ipv4_handleNewPacket@ip& (0+255),w,b
  6582  0024AE  6F73               	movwf	intToString@val& (0+255),b
  6583  0024B0  6B74               	clrf	(intToString@val+1)& (0+255),b
  6584  0024B2  6B75               	clrf	(intToString@val+2)& (0+255),b
  6585  0024B4  6B76               	clrf	(intToString@val+3)& (0+255),b
  6586  0024B6  EC13  F00C         	call	_intToString	;wreg free
  6587  0024BA  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6588  0024BE  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6589  0024C2  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6590                           
  6591                           ;ipv4.c: 154: UARTTransmitText(", ");
  6592  0024C6  0E37               	movlw	low (STR_41+17)
  6593  0024C8  0100               	movlb	0	; () banked
  6594  0024CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6595  0024CC  0E7E               	movlw	high (STR_41+17)
  6596  0024CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6597  0024D0  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6598                           
  6599                           ;ipv4.c: 155: UARTTransmitText(intToString(ip.headerLength));
  6600  0024D4  0100               	movlb	0	; () banked
  6601  0024D6  51C3               	movf	(ipv4_handleNewPacket@ip+1)& (0+255),w,b
  6602  0024D8  6F73               	movwf	intToString@val& (0+255),b
  6603  0024DA  6B74               	clrf	(intToString@val+1)& (0+255),b
  6604  0024DC  6B75               	clrf	(intToString@val+2)& (0+255),b
  6605  0024DE  6B76               	clrf	(intToString@val+3)& (0+255),b
  6606  0024E0  EC13  F00C         	call	_intToString	;wreg free
  6607  0024E4  C073  F098         	movff	?_intToString,UARTTransmitText@str
  6608  0024E8  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  6609  0024EC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6610                           
  6611                           ;ipv4.c: 156: UARTTransmitText("]");
  6612  0024F0  0EFC               	movlw	low (STR_20+1)
  6613  0024F2  0100               	movlb	0	; () banked
  6614  0024F4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6615  0024F6  0E7F               	movlw	high (STR_20+1)
  6616  0024F8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6617  0024FA  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6618                           
  6619                           ;ipv4.c: 157: if (!ipv4_checkHeaderChecksum(&ip))
  6620  0024FE  0EC2               	movlw	low ipv4_handleNewPacket@ip
  6621  002500  0100               	movlb	0	; () banked
  6622  002502  6F9A               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  6623  002504  0E00               	movlw	high ipv4_handleNewPacket@ip
  6624  002506  6F9B               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  6625  002508  ECFE  F01A         	call	_ipv4_checkHeaderChecksum	;wreg free
  6626  00250C  0100               	movlb	0	; () banked
  6627  00250E  B0D8               	btfsc	status,0,c
  6628  002510  D006               	goto	l1035
  6629                           
  6630                           ; BSR set to: 0
  6631                           ;ipv4.c: 158: UARTTransmitText("[INVALID CHECKSUM]");
  6632  002512  0E3A               	movlw	low STR_82
  6633  002514  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6634  002516  0E7E               	movlw	high STR_82
  6635  002518  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6636  00251A  ECFE  F021         	call	_UARTTransmitText	;wreg free
  6637  00251E                     l1035:
  6638                           
  6639                           ;ipv4.c: 161: ethernetController_dropPacket(frame);
  6640  00251E  C0B5  F072         	movff	ipv4_handleNewPacket@frame,ethernetController_dropPacket@frame
  6641  002522  C0B6  F073         	movff	ipv4_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
  6642  002526  EC9A  F023         	call	_ethernetController_dropPacket	;wreg free
  6643  00252A  0012               	return		;funcret
  6644  00252C                     __end_of_ipv4_handleNewPacket:
  6645                           	opt stack 0
  6646                           tblptru	equ	0xFF8
  6647                           tblptrh	equ	0xFF7
  6648                           tblptrl	equ	0xFF6
  6649                           tablat	equ	0xFF5
  6650                           prodh	equ	0xFF4
  6651                           prodl	equ	0xFF3
  6652                           intcon	equ	0xFF2
  6653                           intcon3	equ	0xFF0
  6654                           postinc0	equ	0xFEE
  6655                           plusw0	equ	0xFEB
  6656                           fsr0h	equ	0xFEA
  6657                           fsr0l	equ	0xFE9
  6658                           wreg	equ	0xFE8
  6659                           indf1	equ	0xFE7
  6660                           postinc1	equ	0xFE6
  6661                           postdec1	equ	0xFE5
  6662                           plusw1	equ	0xFE3
  6663                           fsr1h	equ	0xFE2
  6664                           fsr1l	equ	0xFE1
  6665                           indf2	equ	0xFDF
  6666                           postinc2	equ	0xFDE
  6667                           postdec2	equ	0xFDD
  6668                           plusw2	equ	0xFDB
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _ipv4_parseHeader *****************
  6674 ;; Defined at:
  6675 ;;		line 167 in file "src/stack/protocols/ipv4.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  field           2   23[BANK0 ] PTR struct memoryField
  6678 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;  i               1   48[BANK0 ] unsigned char 
  6681 ;;  i               1   47[BANK0 ] unsigned char 
  6682 ;;  ip             23   50[BANK0 ] struct ipv4_header
  6683 ;;  temp            1   49[BANK0 ] unsigned char 
  6684 ;; Return value:  Size  Location     Type
  6685 ;;                  23   23[BANK0 ] struct ipv4_header
  6686 ;; Registers used:
  6687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6688 ;; Tracked objects:
  6689 ;;		On entry : 0/0
  6690 ;;		On exit  : 0/0
  6691 ;;		Unchanged: 0/0
  6692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6693 ;;      Params:         0      23       0       0       0       0       0       0       0
  6694 ;;      Locals:         0      26       0       0       0       0       0       0       0
  6695 ;;      Temps:          0       1       0       0       0       0       0       0       0
  6696 ;;      Totals:         0      50       0       0       0       0       0       0       0
  6697 ;;Total ram usage:       50 bytes
  6698 ;; Hardware stack levels used:    1
  6699 ;; Hardware stack levels required when called:    9
  6700 ;; This function calls:
  6701 ;;		_ethernetController_streamFromRXBuffer
  6702 ;; This function is called by:
  6703 ;;		_ipv4_handleNewPacket
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text15
  6708  001D64                     __ptext15:
  6709                           	opt stack 0
  6710  001D64                     _ipv4_parseHeader:
  6711                           	opt stack 18
  6712                           
  6713                           ;ipv4.c: 168: ipv4_header_t ip;
  6714                           ;ipv4.c: 169: uint8_t temp;
  6715                           ;ipv4.c: 171: ethernetController_streamFromRXBuffer(0, field->start);
  6716                           
  6717                           ;incstack = 0
  6718  001D64  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6719  001D68  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6720  001D6C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6721  001D70  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6722  001D74  0E00               	movlw	0
  6723  001D76  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6724                           
  6725                           ;ipv4.c: 173: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6726  001D7A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6727  001D7E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6728  001D82  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6729  001D86  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6730  001D8A  0E01               	movlw	1
  6731  001D8C  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6732  001D90  0100               	movlb	0	; () banked
  6733  001D92  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6734                           
  6735                           ; BSR set to: 0
  6736                           ;ipv4.c: 174: ip.version = (temp & 0xf0) >> 4;
  6737  001D94  3991               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  6738  001D96  0B0F               	andlw	15
  6739  001D98  0B0F               	andlw	15
  6740  001D9A  6F92               	movwf	ipv4_parseHeader@ip& (0+255),b
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;ipv4.c: 175: ip.headerLength = temp & 0x0f;
  6744  001D9C  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6745  001D9E  0B0F               	andlw	15
  6746  001DA0  6F93               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  6747                           
  6748                           ;ipv4.c: 177: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6749  001DA2  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6750  001DA6  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6751  001DAA  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6752  001DAE  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6753  001DB2  0E01               	movlw	1
  6754  001DB4  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6755  001DB8  0100               	movlb	0	; () banked
  6756  001DBA  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6757                           
  6758                           ; BSR set to: 0
  6759                           ;ipv4.c: 178: ip.dscp = (temp & 0x1f);
  6760  001DBC  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6761  001DBE  0B1F               	andlw	31
  6762  001DC0  6F94               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  6763                           
  6764                           ; BSR set to: 0
  6765                           ;ipv4.c: 179: ip.ecn = (temp & 0xC0) >> 6;
  6766  001DC2  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6767  001DC4  46E8               	rlncf	wreg,f,c
  6768  001DC6  0B03               	andlw	3
  6769  001DC8  0B03               	andlw	3
  6770  001DCA  6F95               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  6771                           
  6772                           ;ipv4.c: 181: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  6773  001DCC  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6774  001DD0  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6775  001DD4  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6776  001DD8  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6777  001DDC  0E01               	movlw	1
  6778  001DDE  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6779  001DE2  0100               	movlb	0	; () banked
  6780  001DE4  6F97               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  6781  001DE6  6B96               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  6782                           
  6783                           ;ipv4.c: 182: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  6784  001DE8  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6785  001DEC  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6786  001DF0  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6787  001DF4  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6788  001DF8  0E01               	movlw	1
  6789  001DFA  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6790  001DFE  0100               	movlb	0	; () banked
  6791  001E00  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6792  001E02  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6793  001E04  1396               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  6794                           
  6795                           ;ipv4.c: 184: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  6796  001E06  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6797  001E0A  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6798  001E0E  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6799  001E12  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6800  001E16  0E01               	movlw	1
  6801  001E18  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6802  001E1C  0100               	movlb	0	; () banked
  6803  001E1E  6F99               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  6804  001E20  6B98               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  6805                           
  6806                           ;ipv4.c: 185: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6807  001E22  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6808  001E26  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6809  001E2A  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6810  001E2E  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6811  001E32  0E01               	movlw	1
  6812  001E34  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6813  001E38  0100               	movlb	0	; () banked
  6814  001E3A  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6815  001E3C  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6816  001E3E  1398               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  6817                           
  6818                           ;ipv4.c: 187: temp = ethernetController_streamFromRXBuffer(1, field->start);
  6819  001E40  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6820  001E44  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6821  001E48  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6822  001E4C  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6823  001E50  0E01               	movlw	1
  6824  001E52  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6825  001E56  0100               	movlb	0	; () banked
  6826  001E58  6F91               	movwf	ipv4_parseHeader@temp& (0+255),b
  6827                           
  6828                           ; BSR set to: 0
  6829                           ;ipv4.c: 188: ip.flags = ((temp & 0xC0) >> 6);
  6830  001E5A  4591               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  6831  001E5C  46E8               	rlncf	wreg,f,c
  6832  001E5E  0B03               	andlw	3
  6833  001E60  0B03               	andlw	3
  6834  001E62  6F9A               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;ipv4.c: 189: ip.fragmentOffset = ((temp & 0x1f) << 8);
  6838  001E64  5191               	movf	ipv4_parseHeader@temp& (0+255),w,b
  6839  001E66  0B1F               	andlw	31
  6840  001E68  6F9C               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  6841  001E6A  6B9B               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  6842                           
  6843                           ;ipv4.c: 191: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  6844  001E6C  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6845  001E70  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6846  001E74  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6847  001E78  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6848  001E7C  0E01               	movlw	1
  6849  001E7E  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6850  001E82  0100               	movlb	0	; () banked
  6851  001E84  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6852  001E86  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6853  001E88  139B               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  6854                           
  6855                           ;ipv4.c: 193: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  6856  001E8A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6857  001E8E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6858  001E92  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6859  001E96  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6860  001E9A  0E01               	movlw	1
  6861  001E9C  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6862  001EA0  0100               	movlb	0	; () banked
  6863  001EA2  6F9D               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  6864                           
  6865                           ;ipv4.c: 195: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  6866  001EA4  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6867  001EA8  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6868  001EAC  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6869  001EB0  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6870  001EB4  0E01               	movlw	1
  6871  001EB6  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6872  001EBA  0100               	movlb	0	; () banked
  6873  001EBC  6F9E               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  6874                           
  6875                           ;ipv4.c: 197: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  6876  001EBE  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6877  001EC2  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6878  001EC6  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6879  001ECA  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6880  001ECE  0E01               	movlw	1
  6881  001ED0  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6882  001ED4  0100               	movlb	0	; () banked
  6883  001ED6  6FA0               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  6884  001ED8  6B9F               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  6885                           
  6886                           ;ipv4.c: 198: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  6887  001EDA  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6888  001EDE  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6889  001EE2  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6890  001EE6  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6891  001EEA  0E01               	movlw	1
  6892  001EEC  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6893  001EF0  0100               	movlb	0	; () banked
  6894  001EF2  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6895  001EF4  518E               	movf	??_ipv4_parseHeader& (0+255),w,b
  6896  001EF6  139F               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;ipv4.c: 200: for (uint8_t i = 0; i < 4; i++)
  6900  001EF8  0E00               	movlw	0
  6901  001EFA  6F8F               	movwf	ipv4_parseHeader@i& (0+255),b
  6902  001EFC                     l8277:
  6903                           
  6904                           ; BSR set to: 0
  6905  001EFC  0E03               	movlw	3
  6906  001EFE  658F               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  6907  001F00  D001               	goto	l1038
  6908  001F02  D01D               	goto	u10270
  6909  001F04                     l1038:
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;ipv4.c: 201: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  6913                           
  6914                           ; BSR set to: 0
  6915  001F04  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6916  001F08  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6917  001F0C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6918  001F10  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6919  001F14  0E01               	movlw	1
  6920  001F16  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6921  001F1A  0100               	movlb	0	; () banked
  6922  001F1C  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6923  001F1E  518F               	movf	ipv4_parseHeader@i& (0+255),w,b
  6924  001F20  0D01               	mullw	1
  6925  001F22  0E0F               	movlw	15
  6926  001F24  26F3               	addwf	prodl,f,c
  6927  001F26  0E00               	movlw	0
  6928  001F28  22F4               	addwfc	prodh,f,c
  6929  001F2A  0E92               	movlw	low ipv4_parseHeader@ip
  6930  001F2C  24F3               	addwf	prodl,w,c
  6931  001F2E  6ED9               	movwf	fsr2l,c
  6932  001F30  0E00               	movlw	high ipv4_parseHeader@ip
  6933  001F32  20F4               	addwfc	prodh,w,c
  6934  001F34  6EDA               	movwf	fsr2h,c
  6935  001F36  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  6936                           
  6937                           ; BSR set to: 0
  6938  001F3A  2B8F               	incf	ipv4_parseHeader@i& (0+255),f,b
  6939  001F3C  D7DF               	goto	l8277
  6940  001F3E                     u10270:
  6941                           
  6942                           ; BSR set to: 0
  6943                           ;ipv4.c: 203: for (uint8_t i = 0; i < 4; i++)
  6944                           
  6945                           ; BSR set to: 0
  6946  001F3E  0E00               	movlw	0
  6947  001F40  6F90               	movwf	ipv4_parseHeader@i_3227& (0+255),b
  6948  001F42                     l8289:
  6949                           
  6950                           ; BSR set to: 0
  6951  001F42  0E03               	movlw	3
  6952  001F44  6590               	cpfsgt	ipv4_parseHeader@i_3227& (0+255),b
  6953  001F46  D001               	goto	l1040
  6954  001F48  D01D               	goto	u10290
  6955  001F4A                     l1040:
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;ipv4.c: 204: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  6959                           
  6960                           ; BSR set to: 0
  6961  001F4A  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6962  001F4E  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6963  001F52  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6964  001F56  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6965  001F5A  0E01               	movlw	1
  6966  001F5C  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6967  001F60  0100               	movlb	0	; () banked
  6968  001F62  6F8E               	movwf	??_ipv4_parseHeader& (0+255),b
  6969  001F64  5190               	movf	ipv4_parseHeader@i_3227& (0+255),w,b
  6970  001F66  0D01               	mullw	1
  6971  001F68  0E13               	movlw	19
  6972  001F6A  26F3               	addwf	prodl,f,c
  6973  001F6C  0E00               	movlw	0
  6974  001F6E  22F4               	addwfc	prodh,f,c
  6975  001F70  0E92               	movlw	low ipv4_parseHeader@ip
  6976  001F72  24F3               	addwf	prodl,w,c
  6977  001F74  6ED9               	movwf	fsr2l,c
  6978  001F76  0E00               	movlw	high ipv4_parseHeader@ip
  6979  001F78  20F4               	addwfc	prodh,w,c
  6980  001F7A  6EDA               	movwf	fsr2h,c
  6981  001F7C  C08E  FFDF         	movff	??_ipv4_parseHeader,indf2
  6982                           
  6983                           ; BSR set to: 0
  6984  001F80  2B90               	incf	ipv4_parseHeader@i_3227& (0+255),f,b
  6985  001F82  D7DF               	goto	l8289
  6986  001F84                     u10290:
  6987                           
  6988                           ; BSR set to: 0
  6989                           ;ipv4.c: 206: ethernetController_streamFromRXBuffer(2, field->start);
  6990                           
  6991                           ; BSR set to: 0
  6992  001F84  C077  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  6993  001F88  C078  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  6994  001F8C  CFDE F072          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  6995  001F90  CFDD F073          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  6996  001F94  0E02               	movlw	2
  6997  001F96  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
  6998                           
  6999                           ;ipv4.c: 208: return ip;
  7000  001F9A  EE20  F092         	lfsr	2,ipv4_parseHeader@ip
  7001  001F9E  EE00  F077         	lfsr	0,?_ipv4_parseHeader
  7002  001FA2  0E16               	movlw	22
  7003  001FA4                     u10301:
  7004  001FA4  CFDB FFEB          	movff	plusw2,plusw0
  7005  001FA8  06E8               	decf	wreg,f,c
  7006  001FAA  E2FC               	bc	u10301
  7007  001FAC  0012               	return	
  7008  001FAE                     __end_of_ipv4_parseHeader:
  7009                           	opt stack 0
  7010                           tblptru	equ	0xFF8
  7011                           tblptrh	equ	0xFF7
  7012                           tblptrl	equ	0xFF6
  7013                           tablat	equ	0xFF5
  7014                           prodh	equ	0xFF4
  7015                           prodl	equ	0xFF3
  7016                           intcon	equ	0xFF2
  7017                           intcon3	equ	0xFF0
  7018                           postinc0	equ	0xFEE
  7019                           plusw0	equ	0xFEB
  7020                           fsr0h	equ	0xFEA
  7021                           fsr0l	equ	0xFE9
  7022                           wreg	equ	0xFE8
  7023                           indf1	equ	0xFE7
  7024                           postinc1	equ	0xFE6
  7025                           postdec1	equ	0xFE5
  7026                           plusw1	equ	0xFE3
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           postinc2	equ	0xFDE
  7031                           postdec2	equ	0xFDD
  7032                           plusw2	equ	0xFDB
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8
  7036                           
  7037 ;; *************** function _ipv4_checkHeaderChecksum *****************
  7038 ;; Defined at:
  7039 ;;		line 211 in file "src/stack/protocols/ipv4.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  header          2   58[BANK0 ] PTR struct ipv4_header
  7042 ;;		 -> ipv4_handleNewPacket@ip(23), 
  7043 ;; Auto vars:     Size  Location     Type
  7044 ;;  testHeader     23   62[BANK0 ] struct ipv4_header
  7045 ;; Return value:  Size  Location     Type
  7046 ;;		None               void
  7047 ;; Registers used:
  7048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7049 ;; Tracked objects:
  7050 ;;		On entry : 0/0
  7051 ;;		On exit  : 0/0
  7052 ;;		Unchanged: 0/0
  7053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7054 ;;      Params:         0       2       0       0       0       0       0       0       0
  7055 ;;      Locals:         0      23       0       0       0       0       0       0       0
  7056 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7057 ;;      Totals:         0      27       0       0       0       0       0       0       0
  7058 ;;Total ram usage:       27 bytes
  7059 ;; Hardware stack levels used:    1
  7060 ;; Hardware stack levels required when called:    6
  7061 ;; This function calls:
  7062 ;;		_UARTTransmitText
  7063 ;;		_hexToString
  7064 ;;		_ipv4_calculateHeaderChecksum
  7065 ;; This function is called by:
  7066 ;;		_ipv4_handleNewPacket
  7067 ;; This function uses a non-reentrant model
  7068 ;;
  7069                           
  7070                           	psect	text16
  7071  0035FC                     __ptext16:
  7072                           	opt stack 0
  7073  0035FC                     _ipv4_checkHeaderChecksum:
  7074                           	opt stack 21
  7075                           
  7076                           ;ipv4.c: 212: ipv4_header_t testHeader;
  7077                           ;ipv4.c: 213: testHeader = *header;
  7078                           
  7079                           ;incstack = 0
  7080  0035FC  C09A  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  7081  003600  C09B  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  7082  003604  EE10  F09E         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  7083  003608  0E16               	movlw	22
  7084  00360A                     u10311:
  7085  00360A  CFDB FFE3          	movff	plusw2,plusw1
  7086  00360E  06E8               	decf	wreg,f,c
  7087  003610  E2FC               	bc	u10311
  7088                           
  7089                           ;ipv4.c: 214: testHeader.checksum = 0x0000;
  7090  003612  0E00               	movlw	0
  7091  003614  0100               	movlb	0	; () banked
  7092  003616  6FAC               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  7093  003618  0E00               	movlw	0
  7094  00361A  6FAB               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  7095                           
  7096                           ; BSR set to: 0
  7097                           ;ipv4.c: 215: ipv4_calculateHeaderChecksum(&testHeader);
  7098  00361C  0E9E               	movlw	low ipv4_checkHeaderChecksum@testHeader
  7099  00361E  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  7100  003620  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  7101  003622  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  7102  003624  EC8D  F00A         	call	_ipv4_calculateHeaderChecksum	;wreg free
  7103                           
  7104                           ;ipv4.c: 216: if (testHeader.checksum == header->checksum) {
  7105  003628  0100               	movlb	0	; () banked
  7106  00362A  EE20 F00D          	lfsr	2,13
  7107  00362E  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  7108  003630  26D9               	addwf	fsr2l,f,c
  7109  003632  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  7110  003634  22DA               	addwfc	fsr2h,f,c
  7111  003636  50DE               	movf	postinc2,w,c
  7112  003638  19AB               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  7113  00363A  E106               	bnz	l8317
  7114  00363C  50DE               	movf	postinc2,w,c
  7115  00363E  19AC               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  7116  003640  A4D8               	btfss	status,2,c
  7117  003642  D002               	goto	l1045
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;ipv4.c: 217: return 1;
  7121  003644  80D8               	bsf	status,0,c
  7122                           
  7123                           ; BSR set to: 0
  7124  003646  0012               	return	
  7125  003648                     l1045:
  7126  003648                     l8317:
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;ipv4.c: 218: }
  7130                           ;ipv4.c: 219: UARTTransmitText("[Expected ");
  7131  003648  0E7B               	movlw	low STR_83
  7132  00364A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7133  00364C  0E7F               	movlw	high STR_83
  7134  00364E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7135  003650  ECFE  F021         	call	_UARTTransmitText	;wreg free
  7136                           
  7137                           ;ipv4.c: 220: UARTTransmitText(hexToString(testHeader.checksum));
  7138  003654  C0AB  F061         	movff	ipv4_checkHeaderChecksum@testHeader+13,hexToString@val
  7139  003658  C0AC  F062         	movff	ipv4_checkHeaderChecksum@testHeader+14,hexToString@val+1
  7140  00365C  0100               	movlb	0	; () banked
  7141  00365E  6B63               	clrf	(hexToString@val+2)& (0+255),b
  7142  003660  6B64               	clrf	(hexToString@val+3)& (0+255),b
  7143  003662  EC9C  F019         	call	_hexToString	;wreg free
  7144  003666  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  7145  00366A  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  7146  00366E  ECFE  F021         	call	_UARTTransmitText	;wreg free
  7147                           
  7148                           ;ipv4.c: 221: UARTTransmitText(", got ");
  7149  003672  0EB4               	movlw	low STR_84
  7150  003674  0100               	movlb	0	; () banked
  7151  003676  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7152  003678  0E7F               	movlw	high STR_84
  7153  00367A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7154  00367C  ECFE  F021         	call	_UARTTransmitText	;wreg free
  7155                           
  7156                           ;ipv4.c: 222: UARTTransmitText(hexToString(header->checksum));
  7157  003680  0100               	movlb	0	; () banked
  7158  003682  EE20 F00D          	lfsr	2,13
  7159  003686  519A               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  7160  003688  26D9               	addwf	fsr2l,f,c
  7161  00368A  519B               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  7162  00368C  22DA               	addwfc	fsr2h,f,c
  7163  00368E  CFDE F09C          	movff	postinc2,??_ipv4_checkHeaderChecksum
  7164  003692  CFDD F09D          	movff	postdec2,??_ipv4_checkHeaderChecksum+1
  7165  003696  C09C  F061         	movff	??_ipv4_checkHeaderChecksum,hexToString@val
  7166  00369A  C09D  F062         	movff	??_ipv4_checkHeaderChecksum+1,hexToString@val+1
  7167  00369E  6B63               	clrf	(hexToString@val+2)& (0+255),b
  7168  0036A0  6B64               	clrf	(hexToString@val+3)& (0+255),b
  7169  0036A2  EC9C  F019         	call	_hexToString	;wreg free
  7170  0036A6  C061  F098         	movff	?_hexToString,UARTTransmitText@str
  7171  0036AA  C062  F099         	movff	?_hexToString+1,UARTTransmitText@str+1
  7172  0036AE  ECFE  F021         	call	_UARTTransmitText	;wreg free
  7173                           
  7174                           ;ipv4.c: 223: UARTTransmitText("]");
  7175  0036B2  0EFC               	movlw	low (STR_20+1)
  7176  0036B4  0100               	movlb	0	; () banked
  7177  0036B6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7178  0036B8  0E7F               	movlw	high (STR_20+1)
  7179  0036BA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7180  0036BC  ECFE  F021         	call	_UARTTransmitText	;wreg free
  7181                           
  7182                           ;ipv4.c: 224: return 0;
  7183  0036C0  90D8               	bcf	status,0,c
  7184  0036C2  0012               	return	
  7185  0036C4                     __end_of_ipv4_checkHeaderChecksum:
  7186                           	opt stack 0
  7187                           tblptru	equ	0xFF8
  7188                           tblptrh	equ	0xFF7
  7189                           tblptrl	equ	0xFF6
  7190                           tablat	equ	0xFF5
  7191                           prodh	equ	0xFF4
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon3	equ	0xFF0
  7195                           postinc0	equ	0xFEE
  7196                           plusw0	equ	0xFEB
  7197                           fsr0h	equ	0xFEA
  7198                           fsr0l	equ	0xFE9
  7199                           wreg	equ	0xFE8
  7200                           indf1	equ	0xFE7
  7201                           postinc1	equ	0xFE6
  7202                           postdec1	equ	0xFE5
  7203                           plusw1	equ	0xFE3
  7204                           fsr1h	equ	0xFE2
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           plusw2	equ	0xFDB
  7210                           fsr2h	equ	0xFDA
  7211                           fsr2l	equ	0xFD9
  7212                           status	equ	0xFD8
  7213                           
  7214 ;; *************** function _ipv4_calculateHeaderChecksum *****************
  7215 ;; Defined at:
  7216 ;;		line 90 in file "src/stack/protocols/ipv4.c"
  7217 ;; Parameters:    Size  Location     Type
  7218 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
  7219 ;;		 -> ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(62), stack(113), 
  7220 ;; Auto vars:     Size  Location     Type
  7221 ;;  sum             4   14[BANK0 ] unsigned long 
  7222 ;; Return value:  Size  Location     Type
  7223 ;;                  1    wreg      void 
  7224 ;; Registers used:
  7225 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7226 ;; Tracked objects:
  7227 ;;		On entry : 0/0
  7228 ;;		On exit  : 0/0
  7229 ;;		Unchanged: 0/0
  7230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7231 ;;      Params:         0       2       0       0       0       0       0       0       0
  7232 ;;      Locals:         0       4       0       0       0       0       0       0       0
  7233 ;;      Temps:          0      12       0       0       0       0       0       0       0
  7234 ;;      Totals:         0      18       0       0       0       0       0       0       0
  7235 ;;Total ram usage:       18 bytes
  7236 ;; Hardware stack levels used:    1
  7237 ;; Hardware stack levels required when called:    4
  7238 ;; This function calls:
  7239 ;;		Nothing
  7240 ;; This function is called by:
  7241 ;;		_main
  7242 ;;		_ipv4_checkHeaderChecksum
  7243 ;; This function uses a non-reentrant model
  7244 ;;
  7245                           
  7246                           	psect	text17
  7247  00151A                     __ptext17:
  7248                           	opt stack 0
  7249  00151A                     _ipv4_calculateHeaderChecksum:
  7250                           	opt stack 26
  7251                           
  7252                           ;ipv4.c: 92: uint32_t sum = 0;
  7253                           
  7254                           ;incstack = 0
  7255  00151A  0E00               	movlw	0
  7256  00151C  0100               	movlb	0	; () banked
  7257  00151E  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7258  001520  0E00               	movlw	0
  7259  001522  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7260  001524  0E00               	movlw	0
  7261  001526  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7262  001528  0E00               	movlw	0
  7263  00152A  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;ipv4.c: 93: sum = ((header->version << 12) | (header->headerLength << 8) | (header->dsc
      +                          p << 2) | (header->ecn))&0xffff;
  7267  00152C  EE20 F002          	lfsr	2,2
  7268  001530  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7269  001532  26D9               	addwf	fsr2l,f,c
  7270  001534  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7271  001536  22DA               	addwfc	fsr2h,f,c
  7272  001538  50DF               	movf	indf2,w,c
  7273  00153A  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7274  00153C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7275  00153E  90D8               	bcf	status,0,c
  7276  001540  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7277  001542  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7278  001544  90D8               	bcf	status,0,c
  7279  001546  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7280  001548  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7281  00154A  EE20 F001          	lfsr	2,1
  7282  00154E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7283  001550  26D9               	addwf	fsr2l,f,c
  7284  001552  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7285  001554  22DA               	addwfc	fsr2h,f,c
  7286  001556  50DF               	movf	indf2,w,c
  7287  001558  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7288  00155A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7289  00155C  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7290  00155E  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7291  001560  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
  7292  001564  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
  7293  001568  50DF               	movf	indf2,w,c
  7294  00156A  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7295  00156C  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7296  00156E  0E0C               	movlw	12
  7297  001570                     u9165:
  7298  001570  90D8               	bcf	status,0,c
  7299  001572  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7300  001574  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7301  001576  2EE8               	decfsz	wreg,f,c
  7302  001578  D7FB               	goto	u9165
  7303  00157A  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7304  00157C  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7305  00157E  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7306  001580  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7307  001582  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7308  001584  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7309  001586  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7310  001588  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7311  00158A  EE20 F003          	lfsr	2,3
  7312  00158E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7313  001590  26D9               	addwf	fsr2l,f,c
  7314  001592  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7315  001594  22DA               	addwfc	fsr2h,f,c
  7316  001596  50DF               	movf	indf2,w,c
  7317  001598  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7318  00159A  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7319  00159C  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
  7320  00159E  0E00               	movlw	0
  7321  0015A0  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
  7322  0015A2  C067  F06E         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
  7323  0015A6  C068  F06F         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
  7324  0015AA  6B70               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7325  0015AC  6B71               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;ipv4.c: 94: sum += header->totalLength;
  7329  0015AE  EE20 F004          	lfsr	2,4
  7330  0015B2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7331  0015B4  26D9               	addwf	fsr2l,f,c
  7332  0015B6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7333  0015B8  22DA               	addwfc	fsr2h,f,c
  7334  0015BA  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7335  0015BE  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7336  0015C2  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7337  0015C4  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7338  0015C6  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7339  0015C8  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7340  0015CA  0E00               	movlw	0
  7341  0015CC  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7342  0015CE  0E00               	movlw	0
  7343  0015D0  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7344                           
  7345                           ; BSR set to: 0
  7346                           ;ipv4.c: 95: sum += header->identification;
  7347  0015D2  EE20 F006          	lfsr	2,6
  7348  0015D6  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7349  0015D8  26D9               	addwf	fsr2l,f,c
  7350  0015DA  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7351  0015DC  22DA               	addwfc	fsr2h,f,c
  7352  0015DE  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7353  0015E2  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7354  0015E6  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7355  0015E8  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7356  0015EA  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7357  0015EC  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7358  0015EE  0E00               	movlw	0
  7359  0015F0  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7360  0015F2  0E00               	movlw	0
  7361  0015F4  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;ipv4.c: 96: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
  7365  0015F6  EE20 F009          	lfsr	2,9
  7366  0015FA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7367  0015FC  26D9               	addwf	fsr2l,f,c
  7368  0015FE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7369  001600  22DA               	addwfc	fsr2h,f,c
  7370  001602  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
  7371  001606  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
  7372  00160A  EE20 F008          	lfsr	2,8
  7373  00160E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7374  001610  26D9               	addwf	fsr2l,f,c
  7375  001612  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7376  001614  22DA               	addwfc	fsr2h,f,c
  7377  001616  50DF               	movf	indf2,w,c
  7378  001618  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7379  00161A  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7380  00161C  0E0D               	movlw	13
  7381  00161E                     u9175:
  7382  00161E  90D8               	bcf	status,0,c
  7383  001620  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7384  001622  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7385  001624  2EE8               	decfsz	wreg,f,c
  7386  001626  D7FB               	goto	u9175
  7387  001628  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7388  00162A  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7389  00162C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7390  00162E  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7391  001630  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7392  001632  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7393  001634  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7394  001636  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7395  001638  0E00               	movlw	0
  7396  00163A  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7397  00163C  0E00               	movlw	0
  7398  00163E  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7399                           
  7400                           ; BSR set to: 0
  7401                           ;ipv4.c: 97: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
  7402  001640  EE20 F00B          	lfsr	2,11
  7403  001644  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7404  001646  26D9               	addwf	fsr2l,f,c
  7405  001648  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7406  00164A  22DA               	addwfc	fsr2h,f,c
  7407  00164C  50DF               	movf	indf2,w,c
  7408  00164E  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7409  001650  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7410  001652  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7411  001654  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7412  001656  EE20 F00C          	lfsr	2,12
  7413  00165A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7414  00165C  26D9               	addwf	fsr2l,f,c
  7415  00165E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7416  001660  22DA               	addwfc	fsr2h,f,c
  7417  001662  50DF               	movf	indf2,w,c
  7418  001664  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7419  001666  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7420  001668  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7421  00166A  0E00               	movlw	0
  7422  00166C  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7423  00166E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7424  001670  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7425  001672  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7426  001674  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7427  001676  0E00               	movlw	0
  7428  001678  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7429  00167A  0E00               	movlw	0
  7430  00167C  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7431                           
  7432                           ; BSR set to: 0
  7433                           ;ipv4.c: 99: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0xf
      +                          fff;
  7434  00167E  EE20 F00F          	lfsr	2,15
  7435  001682  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7436  001684  26D9               	addwf	fsr2l,f,c
  7437  001686  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7438  001688  22DA               	addwfc	fsr2h,f,c
  7439  00168A  50DF               	movf	indf2,w,c
  7440  00168C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7441  00168E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7442  001690  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7443  001692  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7444  001694  EE20 F010          	lfsr	2,16
  7445  001698  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7446  00169A  26D9               	addwf	fsr2l,f,c
  7447  00169C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7448  00169E  22DA               	addwfc	fsr2h,f,c
  7449  0016A0  50DF               	movf	indf2,w,c
  7450  0016A2  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7451  0016A4  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7452  0016A6  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7453  0016A8  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7454  0016AA  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7455  0016AC  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7456  0016AE  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7457  0016B0  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7458  0016B2  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7459  0016B4  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7460  0016B6  0E00               	movlw	0
  7461  0016B8  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7462  0016BA  0E00               	movlw	0
  7463  0016BC  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;ipv4.c: 100: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
  7467  0016BE  EE20 F011          	lfsr	2,17
  7468  0016C2  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7469  0016C4  26D9               	addwf	fsr2l,f,c
  7470  0016C6  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7471  0016C8  22DA               	addwfc	fsr2h,f,c
  7472  0016CA  50DF               	movf	indf2,w,c
  7473  0016CC  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7474  0016CE  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7475  0016D0  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7476  0016D2  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7477  0016D4  EE20 F012          	lfsr	2,18
  7478  0016D8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7479  0016DA  26D9               	addwf	fsr2l,f,c
  7480  0016DC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7481  0016DE  22DA               	addwfc	fsr2h,f,c
  7482  0016E0  50DF               	movf	indf2,w,c
  7483  0016E2  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7484  0016E4  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7485  0016E6  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7486  0016E8  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7487  0016EA  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7488  0016EC  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7489  0016EE  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7490  0016F0  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7491  0016F2  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7492  0016F4  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7493  0016F6  0E00               	movlw	0
  7494  0016F8  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7495  0016FA  0E00               	movlw	0
  7496  0016FC  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7497                           
  7498                           ; BSR set to: 0
  7499                           ;ipv4.c: 101: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
  7500  0016FE  EE20 F013          	lfsr	2,19
  7501  001702  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7502  001704  26D9               	addwf	fsr2l,f,c
  7503  001706  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7504  001708  22DA               	addwfc	fsr2h,f,c
  7505  00170A  50DF               	movf	indf2,w,c
  7506  00170C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7507  00170E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7508  001710  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7509  001712  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7510  001714  EE20 F014          	lfsr	2,20
  7511  001718  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7512  00171A  26D9               	addwf	fsr2l,f,c
  7513  00171C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7514  00171E  22DA               	addwfc	fsr2h,f,c
  7515  001720  50DF               	movf	indf2,w,c
  7516  001722  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7517  001724  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7518  001726  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7519  001728  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7520  00172A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7521  00172C  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7522  00172E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7523  001730  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7524  001732  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7525  001734  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7526  001736  0E00               	movlw	0
  7527  001738  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7528  00173A  0E00               	movlw	0
  7529  00173C  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;ipv4.c: 102: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
  7533  00173E  EE20 F015          	lfsr	2,21
  7534  001742  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7535  001744  26D9               	addwf	fsr2l,f,c
  7536  001746  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7537  001748  22DA               	addwfc	fsr2h,f,c
  7538  00174A  50DF               	movf	indf2,w,c
  7539  00174C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
  7540  00174E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7541  001750  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
  7542  001752  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
  7543  001754  EE20 F016          	lfsr	2,22
  7544  001758  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7545  00175A  26D9               	addwf	fsr2l,f,c
  7546  00175C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7547  00175E  22DA               	addwfc	fsr2h,f,c
  7548  001760  50DF               	movf	indf2,w,c
  7549  001762  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
  7550  001764  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7551  001766  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7552  001768  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7553  00176A  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7554  00176C  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
  7555  00176E  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7556  001770  276E               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
  7557  001772  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7558  001774  236F               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
  7559  001776  0E00               	movlw	0
  7560  001778  2370               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
  7561  00177A  0E00               	movlw	0
  7562  00177C  2371               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;ipv4.c: 104: sum = (sum & 0x0ffff)+((sum & 0xf0000) >> 16);
  7566  00177E  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7567  001782  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7568  001786  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7569  00178A  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7570  00178E  0E11               	movlw	17
  7571  001790  D005               	goto	u9180
  7572  001792                     u9185:
  7573  001792  90D8               	bcf	status,0,c
  7574  001794  3365               	rrcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7575  001796  3364               	rrcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7576  001798  3363               	rrcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7577  00179A  3362               	rrcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7578  00179C                     u9180:
  7579  00179C  2EE8               	decfsz	wreg,f,c
  7580  00179E  D7F9               	goto	u9185
  7581  0017A0  0E0F               	movlw	15
  7582  0017A2  1562               	andwf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
  7583  0017A4  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
  7584  0017A6  0E00               	movlw	0
  7585  0017A8  1563               	andwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
  7586  0017AA  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
  7587  0017AC  0E00               	movlw	0
  7588  0017AE  1564               	andwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
  7589  0017B0  6F68               	movwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
  7590  0017B2  0E00               	movlw	0
  7591  0017B4  1565               	andwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
  7592  0017B6  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
  7593  0017B8  0EFF               	movlw	255
  7594  0017BA  156E               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
  7595  0017BC  6F6A               	movwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),b
  7596  0017BE  0EFF               	movlw	255
  7597  0017C0  156F               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
  7598  0017C2  6F6B               	movwf	(??_ipv4_calculateHeaderChecksum+9)& (0+255),b
  7599  0017C4  0E00               	movlw	0
  7600  0017C6  1570               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
  7601  0017C8  6F6C               	movwf	(??_ipv4_calculateHeaderChecksum+10)& (0+255),b
  7602  0017CA  0E00               	movlw	0
  7603  0017CC  1571               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
  7604  0017CE  6F6D               	movwf	(??_ipv4_calculateHeaderChecksum+11)& (0+255),b
  7605  0017D0  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
  7606  0017D2  256A               	addwf	(??_ipv4_calculateHeaderChecksum+8)& (0+255),w,b
  7607  0017D4  6F6E               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
  7608  0017D6  5167               	movf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),w,b
  7609  0017D8  216B               	addwfc	(??_ipv4_calculateHeaderChecksum+9)& (0+255),w,b
  7610  0017DA  6F6F               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
  7611  0017DC  5168               	movf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),w,b
  7612  0017DE  216C               	addwfc	(??_ipv4_calculateHeaderChecksum+10)& (0+255),w,b
  7613  0017E0  6F70               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
  7614  0017E2  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
  7615  0017E4  216D               	addwfc	(??_ipv4_calculateHeaderChecksum+11)& (0+255),w,b
  7616  0017E6  6F71               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;ipv4.c: 105: sum = ~sum;
  7620  0017E8  C06E  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
  7621  0017EC  C06F  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
  7622  0017F0  C070  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
  7623  0017F4  C071  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
  7624  0017F8  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
  7625  0017FA  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
  7626  0017FC  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
  7627  0017FE  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
  7628  001800  C062  F06E         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
  7629  001804  C063  F06F         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
  7630  001808  C064  F070         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
  7631  00180C  C065  F071         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;ipv4.c: 107: header->checksum = sum;
  7635  001810  EE20 F00D          	lfsr	2,13
  7636  001814  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
  7637  001816  26D9               	addwf	fsr2l,f,c
  7638  001818  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
  7639  00181A  22DA               	addwfc	fsr2h,f,c
  7640  00181C  C06E  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
  7641  001820  C06F  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
  7642                           
  7643                           ; BSR set to: 0
  7644  001824  0012               	return		;funcret
  7645  001826                     __end_of_ipv4_calculateHeaderChecksum:
  7646                           	opt stack 0
  7647                           tblptru	equ	0xFF8
  7648                           tblptrh	equ	0xFF7
  7649                           tblptrl	equ	0xFF6
  7650                           tablat	equ	0xFF5
  7651                           prodh	equ	0xFF4
  7652                           prodl	equ	0xFF3
  7653                           intcon	equ	0xFF2
  7654                           intcon3	equ	0xFF0
  7655                           postinc0	equ	0xFEE
  7656                           plusw0	equ	0xFEB
  7657                           fsr0h	equ	0xFEA
  7658                           fsr0l	equ	0xFE9
  7659                           wreg	equ	0xFE8
  7660                           indf1	equ	0xFE7
  7661                           postinc1	equ	0xFE6
  7662                           postdec1	equ	0xFE5
  7663                           plusw1	equ	0xFE3
  7664                           fsr1h	equ	0xFE2
  7665                           fsr1l	equ	0xFE1
  7666                           indf2	equ	0xFDF
  7667                           postinc2	equ	0xFDE
  7668                           postdec2	equ	0xFDD
  7669                           plusw2	equ	0xFDB
  7670                           fsr2h	equ	0xFDA
  7671                           fsr2l	equ	0xFD9
  7672                           status	equ	0xFD8
  7673                           
  7674 ;; *************** function _hexToString *****************
  7675 ;; Defined at:
  7676 ;;		line 133 in file "src/system/uart.c"
  7677 ;; Parameters:    Size  Location     Type
  7678 ;;  val             4    1[BANK0 ] unsigned long 
  7679 ;; Auto vars:     Size  Location     Type
  7680 ;;  pointer         1    9[BANK0 ] unsigned char 
  7681 ;; Return value:  Size  Location     Type
  7682 ;;                  2    1[BANK0 ] PTR unsigned char 
  7683 ;; Registers used:
  7684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7685 ;; Tracked objects:
  7686 ;;		On entry : 0/0
  7687 ;;		On exit  : 0/0
  7688 ;;		Unchanged: 0/0
  7689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7690 ;;      Params:         0       4       0       0       0       0       0       0       0
  7691 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7692 ;;      Temps:          0       4       0       0       0       0       0       0       0
  7693 ;;      Totals:         0       9       0       0       0       0       0       0       0
  7694 ;;Total ram usage:        9 bytes
  7695 ;; Hardware stack levels used:    1
  7696 ;; Hardware stack levels required when called:    5
  7697 ;; This function calls:
  7698 ;;		_hexToChar
  7699 ;; This function is called by:
  7700 ;;		_ipv4_checkHeaderChecksum
  7701 ;; This function uses a non-reentrant model
  7702 ;;
  7703                           
  7704                           	psect	text18
  7705  003338                     __ptext18:
  7706                           	opt stack 0
  7707  003338                     _hexToString:
  7708                           	opt stack 21
  7709                           
  7710                           ;uart.c: 134: char static number [10];
  7711                           ;uart.c: 135: uint8_t pointer = 0;
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;incstack = 0
  7715  003338  0E00               	movlw	0
  7716  00333A  0100               	movlb	0	; () banked
  7717  00333C  6F69               	movwf	hexToString@pointer& (0+255),b
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;uart.c: 136: if (val > 0xff) {
  7721  00333E  5164               	movf	(hexToString@val+3)& (0+255),w,b
  7722  003340  1163               	iorwf	(hexToString@val+2)& (0+255),w,b
  7723  003342  E103               	bnz	u9190
  7724  003344  0562               	decf	(hexToString@val+1)& (0+255),w,b
  7725  003346  A0D8               	btfss	status,0,c
  7726  003348  D02F               	goto	l778
  7727  00334A                     u9190:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;uart.c: 137: number[pointer++] = hexToChar((val >> 12) & 0xf);
  7731  00334A  5169               	movf	hexToString@pointer& (0+255),w,b
  7732  00334C  0D01               	mullw	1
  7733  00334E  0EC6               	movlw	low hexToString@number
  7734  003350  24F3               	addwf	prodl,w,c
  7735  003352  6ED9               	movwf	fsr2l,c
  7736  003354  0E01               	movlw	high hexToString@number
  7737  003356  20F4               	addwfc	prodh,w,c
  7738  003358  6EDA               	movwf	fsr2h,c
  7739  00335A  C061  F065         	movff	hexToString@val,??_hexToString
  7740  00335E  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7741  003362  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7742  003366  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7743  00336A  0E0D               	movlw	13
  7744  00336C  D005               	goto	u9200
  7745  00336E                     u9205:
  7746  00336E  90D8               	bcf	status,0,c
  7747  003370  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7748  003372  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7749  003374  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7750  003376  3365               	rrcf	??_hexToString& (0+255),f,b
  7751  003378                     u9200:
  7752  003378  2EE8               	decfsz	wreg,f,c
  7753  00337A  D7F9               	goto	u9205
  7754  00337C  5165               	movf	??_hexToString& (0+255),w,b
  7755  00337E  0B0F               	andlw	15
  7756  003380  ECAA  F025         	call	_hexToChar
  7757  003384  6EDF               	movwf	indf2,c
  7758  003386  0100               	movlb	0	; () banked
  7759  003388  2B69               	incf	hexToString@pointer& (0+255),f,b
  7760                           
  7761                           ; BSR set to: 0
  7762                           ;uart.c: 138: number[pointer++] = hexToChar((val >> 8) & 0xf);
  7763  00338A  5169               	movf	hexToString@pointer& (0+255),w,b
  7764  00338C  0D01               	mullw	1
  7765  00338E  0EC6               	movlw	low hexToString@number
  7766  003390  24F3               	addwf	prodl,w,c
  7767  003392  6ED9               	movwf	fsr2l,c
  7768  003394  0E01               	movlw	high hexToString@number
  7769  003396  20F4               	addwfc	prodh,w,c
  7770  003398  6EDA               	movwf	fsr2h,c
  7771  00339A  5162               	movf	(hexToString@val+1)& (0+255),w,b
  7772  00339C  0B0F               	andlw	15
  7773  00339E  ECAA  F025         	call	_hexToChar
  7774  0033A2  6EDF               	movwf	indf2,c
  7775  0033A4  0100               	movlb	0	; () banked
  7776  0033A6  2B69               	incf	hexToString@pointer& (0+255),f,b
  7777  0033A8                     l778:
  7778                           
  7779                           ; BSR set to: 0
  7780                           ;uart.c: 139: }
  7781                           ;uart.c: 140: number[pointer++] = hexToChar((val >> 4) & 0xf);
  7782                           
  7783                           ; BSR set to: 0
  7784  0033A8  5169               	movf	hexToString@pointer& (0+255),w,b
  7785  0033AA  0D01               	mullw	1
  7786  0033AC  0EC6               	movlw	low hexToString@number
  7787  0033AE  24F3               	addwf	prodl,w,c
  7788  0033B0  6ED9               	movwf	fsr2l,c
  7789  0033B2  0E01               	movlw	high hexToString@number
  7790  0033B4  20F4               	addwfc	prodh,w,c
  7791  0033B6  6EDA               	movwf	fsr2h,c
  7792  0033B8  C061  F065         	movff	hexToString@val,??_hexToString
  7793  0033BC  C062  F066         	movff	hexToString@val+1,??_hexToString+1
  7794  0033C0  C063  F067         	movff	hexToString@val+2,??_hexToString+2
  7795  0033C4  C064  F068         	movff	hexToString@val+3,??_hexToString+3
  7796  0033C8  0E05               	movlw	5
  7797  0033CA  D005               	goto	u9210
  7798  0033CC                     u9215:
  7799  0033CC  90D8               	bcf	status,0,c
  7800  0033CE  3368               	rrcf	(??_hexToString+3)& (0+255),f,b
  7801  0033D0  3367               	rrcf	(??_hexToString+2)& (0+255),f,b
  7802  0033D2  3366               	rrcf	(??_hexToString+1)& (0+255),f,b
  7803  0033D4  3365               	rrcf	??_hexToString& (0+255),f,b
  7804  0033D6                     u9210:
  7805  0033D6  2EE8               	decfsz	wreg,f,c
  7806  0033D8  D7F9               	goto	u9215
  7807  0033DA  5165               	movf	??_hexToString& (0+255),w,b
  7808  0033DC  0B0F               	andlw	15
  7809  0033DE  ECAA  F025         	call	_hexToChar
  7810  0033E2  6EDF               	movwf	indf2,c
  7811  0033E4  0100               	movlb	0	; () banked
  7812  0033E6  2B69               	incf	hexToString@pointer& (0+255),f,b
  7813                           
  7814                           ;uart.c: 141: number[pointer++] = hexToChar(val & 0xf);
  7815  0033E8  5169               	movf	hexToString@pointer& (0+255),w,b
  7816  0033EA  0D01               	mullw	1
  7817  0033EC  0EC6               	movlw	low hexToString@number
  7818  0033EE  24F3               	addwf	prodl,w,c
  7819  0033F0  6ED9               	movwf	fsr2l,c
  7820  0033F2  0E01               	movlw	high hexToString@number
  7821  0033F4  20F4               	addwfc	prodh,w,c
  7822  0033F6  6EDA               	movwf	fsr2h,c
  7823  0033F8  5161               	movf	hexToString@val& (0+255),w,b
  7824  0033FA  0B0F               	andlw	15
  7825  0033FC  ECAA  F025         	call	_hexToChar
  7826  003400  6EDF               	movwf	indf2,c
  7827  003402  0100               	movlb	0	; () banked
  7828  003404  2B69               	incf	hexToString@pointer& (0+255),f,b
  7829                           
  7830                           ; BSR set to: 0
  7831                           ;uart.c: 143: number[pointer++] = '\0';
  7832  003406  5169               	movf	hexToString@pointer& (0+255),w,b
  7833  003408  0D01               	mullw	1
  7834  00340A  0EC6               	movlw	low hexToString@number
  7835  00340C  24F3               	addwf	prodl,w,c
  7836  00340E  6ED9               	movwf	fsr2l,c
  7837  003410  0E01               	movlw	high hexToString@number
  7838  003412  20F4               	addwfc	prodh,w,c
  7839  003414  6EDA               	movwf	fsr2h,c
  7840  003416  0E00               	movlw	0
  7841  003418  6EDF               	movwf	indf2,c
  7842                           
  7843                           ; BSR set to: 0
  7844  00341A  2B69               	incf	hexToString@pointer& (0+255),f,b
  7845                           
  7846                           ; BSR set to: 0
  7847                           ;uart.c: 144: return number;
  7848  00341C  0EC6               	movlw	low hexToString@number
  7849  00341E  6F61               	movwf	?_hexToString& (0+255),b
  7850  003420  0E01               	movlw	high hexToString@number
  7851  003422  6F62               	movwf	(?_hexToString+1)& (0+255),b
  7852  003424  0012               	return	
  7853  003426                     __end_of_hexToString:
  7854                           	opt stack 0
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           intcon3	equ	0xFF0
  7863                           postinc0	equ	0xFEE
  7864                           plusw0	equ	0xFEB
  7865                           fsr0h	equ	0xFEA
  7866                           fsr0l	equ	0xFE9
  7867                           wreg	equ	0xFE8
  7868                           indf1	equ	0xFE7
  7869                           postinc1	equ	0xFE6
  7870                           postdec1	equ	0xFE5
  7871                           plusw1	equ	0xFE3
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           plusw2	equ	0xFDB
  7878                           fsr2h	equ	0xFDA
  7879                           fsr2l	equ	0xFD9
  7880                           status	equ	0xFD8
  7881                           
  7882 ;; *************** function _hexToChar *****************
  7883 ;; Defined at:
  7884 ;;		line 124 in file "src/system/uart.c"
  7885 ;; Parameters:    Size  Location     Type
  7886 ;;  val             1    wreg     unsigned char 
  7887 ;; Auto vars:     Size  Location     Type
  7888 ;;  val             1    0[BANK0 ] unsigned char 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      unsigned char 
  7891 ;; Registers used:
  7892 ;;		wreg, status,2, status,0
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7898 ;;      Params:         0       0       0       0       0       0       0       0       0
  7899 ;;      Locals:         0       1       0       0       0       0       0       0       0
  7900 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7901 ;;      Totals:         0       1       0       0       0       0       0       0       0
  7902 ;;Total ram usage:        1 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    4
  7905 ;; This function calls:
  7906 ;;		Nothing
  7907 ;; This function is called by:
  7908 ;;		_hexToString
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text19
  7913  004B54                     __ptext19:
  7914                           	opt stack 0
  7915  004B54                     _hexToChar:
  7916                           	opt stack 21
  7917                           
  7918                           ; BSR set to: 0
  7919                           ;incstack = 0
  7920                           ;hexToChar@val stored from wreg
  7921  004B54  0100               	movlb	0	; () banked
  7922  004B56  6F60               	movwf	hexToChar@val& (0+255),b
  7923                           
  7924                           ;uart.c: 125: if (val < 10) {
  7925  004B58  0E0A               	movlw	10
  7926  004B5A  0100               	movlb	0	; () banked
  7927  004B5C  6160               	cpfslt	hexToChar@val& (0+255),b
  7928  004B5E  D003               	goto	l770
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;uart.c: 126: return val + 0x30u;
  7932  004B60  5160               	movf	hexToChar@val& (0+255),w,b
  7933  004B62  0F30               	addlw	48
  7934                           
  7935                           ; BSR set to: 0
  7936  004B64  0012               	return	
  7937  004B66                     l770:
  7938                           
  7939                           ; BSR set to: 0
  7940                           
  7941                           ; BSR set to: 0
  7942  004B66  0E10               	movlw	16
  7943  004B68  6160               	cpfslt	hexToChar@val& (0+255),b
  7944  004B6A  D003               	goto	l773
  7945                           
  7946                           ; BSR set to: 0
  7947                           ;uart.c: 128: return val + 0x41u - 10;
  7948  004B6C  5160               	movf	hexToChar@val& (0+255),w,b
  7949  004B6E  0F37               	addlw	55
  7950                           
  7951                           ; BSR set to: 0
  7952  004B70  0012               	return	
  7953  004B72                     l773:
  7954                           
  7955                           ; BSR set to: 0
  7956                           ;uart.c: 129: }
  7957                           ;uart.c: 130: return 0;
  7958                           
  7959                           ; BSR set to: 0
  7960                           
  7961                           ; BSR set to: 0
  7962  004B72  0E00               	movlw	0
  7963  004B74  0012               	return	
  7964  004B76                     __end_of_hexToChar:
  7965                           	opt stack 0
  7966                           tblptru	equ	0xFF8
  7967                           tblptrh	equ	0xFF7
  7968                           tblptrl	equ	0xFF6
  7969                           tablat	equ	0xFF5
  7970                           prodh	equ	0xFF4
  7971                           prodl	equ	0xFF3
  7972                           intcon	equ	0xFF2
  7973                           intcon3	equ	0xFF0
  7974                           postinc0	equ	0xFEE
  7975                           plusw0	equ	0xFEB
  7976                           fsr0h	equ	0xFEA
  7977                           fsr0l	equ	0xFE9
  7978                           wreg	equ	0xFE8
  7979                           indf1	equ	0xFE7
  7980                           postinc1	equ	0xFE6
  7981                           postdec1	equ	0xFE5
  7982                           plusw1	equ	0xFE3
  7983                           fsr1h	equ	0xFE2
  7984                           fsr1l	equ	0xFE1
  7985                           indf2	equ	0xFDF
  7986                           postinc2	equ	0xFDE
  7987                           postdec2	equ	0xFDD
  7988                           plusw2	equ	0xFDB
  7989                           fsr2h	equ	0xFDA
  7990                           fsr2l	equ	0xFD9
  7991                           status	equ	0xFD8
  7992                           
  7993 ;; *************** function _ipProtocolToString *****************
  7994 ;; Defined at:
  7995 ;;		line 189 in file "src/system/uart.c"
  7996 ;; Parameters:    Size  Location     Type
  7997 ;;  protocol        1    wreg     enum E5503
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  protocol        1    2[BANK0 ] enum E5503
  8000 ;; Return value:  Size  Location     Type
  8001 ;;                  2    0[BANK0 ] PTR unsigned char 
  8002 ;; Registers used:
  8003 ;;		wreg, status,2, status,0
  8004 ;; Tracked objects:
  8005 ;;		On entry : 0/0
  8006 ;;		On exit  : 0/0
  8007 ;;		Unchanged: 0/0
  8008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8009 ;;      Params:         0       2       0       0       0       0       0       0       0
  8010 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8011 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8012 ;;      Totals:         0       3       0       0       0       0       0       0       0
  8013 ;;Total ram usage:        3 bytes
  8014 ;; Hardware stack levels used:    1
  8015 ;; Hardware stack levels required when called:    4
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		_ipv4_handleNewPacket
  8020 ;; This function uses a non-reentrant model
  8021 ;;
  8022                           
  8023                           	psect	text20
  8024  0045E0                     __ptext20:
  8025                           	opt stack 0
  8026  0045E0                     _ipProtocolToString:
  8027                           	opt stack 23
  8028                           
  8029                           ; BSR set to: 0
  8030                           ;incstack = 0
  8031                           ;ipProtocolToString@protocol stored from wreg
  8032  0045E0  0100               	movlb	0	; () banked
  8033  0045E2  6F62               	movwf	ipProtocolToString@protocol& (0+255),b
  8034                           
  8035                           ;uart.c: 190: switch (protocol) {
  8036  0045E4  D015               	goto	l802
  8037  0045E6                     
  8038                           ;uart.c: 192: return "ICMP";
  8039  0045E6  0ED7               	movlw	low STR_59
  8040  0045E8  0100               	movlb	0	; () banked
  8041  0045EA  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8042  0045EC  0E7F               	movlw	high STR_59
  8043  0045EE  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8044                           
  8045                           ; BSR set to: 0
  8046  0045F0  0012               	return	
  8047  0045F2                     
  8048                           ; BSR set to: 0
  8049                           ;uart.c: 194: return "TCP";
  8050                           
  8051                           ; BSR set to: 0
  8052  0045F2  0EE6               	movlw	low STR_60
  8053  0045F4  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8054  0045F6  0E7F               	movlw	high STR_60
  8055  0045F8  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8056                           
  8057                           ; BSR set to: 0
  8058  0045FA  0012               	return	
  8059  0045FC                     
  8060                           ; BSR set to: 0
  8061                           ;uart.c: 196: return "UDP";
  8062                           
  8063                           ; BSR set to: 0
  8064  0045FC  0EEA               	movlw	low STR_61
  8065  0045FE  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8066  004600  0E7F               	movlw	high STR_61
  8067  004602  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8068                           
  8069                           ; BSR set to: 0
  8070  004604  0012               	return	
  8071  004606                     
  8072                           ; BSR set to: 0
  8073                           ;uart.c: 198: return "Unknown Protocol";
  8074                           
  8075                           ; BSR set to: 0
  8076  004606  0EAB               	movlw	low STR_62
  8077  004608  6F60               	movwf	?_ipProtocolToString& (0+255),b
  8078  00460A  0E7E               	movlw	high STR_62
  8079  00460C  6F61               	movwf	(?_ipProtocolToString+1)& (0+255),b
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;uart.c: 199: }
  8083                           
  8084                           ; BSR set to: 0
  8085  00460E  0012               	return	
  8086  004610                     l802:
  8087                           
  8088                           ; BSR set to: 0
  8089  004610  0100               	movlb	0	; () banked
  8090  004612  5162               	movf	ipProtocolToString@protocol& (0+255),w,b
  8091                           
  8092                           ; Switch size 1, requested type "space"
  8093                           ; Number of cases is 3, Range of values is 1 to 17
  8094                           ; switch strategies available:
  8095                           ; Name         Instructions Cycles
  8096                           ; simple_byte           10     6 (average)
  8097                           ;	Chosen strategy is simple_byte
  8098  004614  0A01               	xorlw	1	; case 1
  8099  004616  B4D8               	btfsc	status,2,c
  8100  004618  D7E6               	goto	l803
  8101  00461A  0A07               	xorlw	7	; case 6
  8102  00461C  B4D8               	btfsc	status,2,c
  8103  00461E  D7E9               	goto	l805
  8104  004620  0A17               	xorlw	23	; case 17
  8105  004622  B4D8               	btfsc	status,2,c
  8106  004624  D7EB               	goto	l806
  8107  004626  D7EF               	goto	l807
  8108  004628                     __end_of_ipProtocolToString:
  8109                           	opt stack 0
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           intcon	equ	0xFF2
  8117                           intcon3	equ	0xFF0
  8118                           postinc0	equ	0xFEE
  8119                           plusw0	equ	0xFEB
  8120                           fsr0h	equ	0xFEA
  8121                           fsr0l	equ	0xFE9
  8122                           wreg	equ	0xFE8
  8123                           indf1	equ	0xFE7
  8124                           postinc1	equ	0xFE6
  8125                           postdec1	equ	0xFE5
  8126                           plusw1	equ	0xFE3
  8127                           fsr1h	equ	0xFE2
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           postdec2	equ	0xFDD
  8132                           plusw2	equ	0xFDB
  8133                           fsr2h	equ	0xFDA
  8134                           fsr2l	equ	0xFD9
  8135                           status	equ	0xFD8
  8136                           
  8137 ;; *************** function _ethernetController_updateNextPacketPointer *****************
  8138 ;; Defined at:
  8139 ;;		line 337 in file "src/enc424j600/ENC424J600.c"
  8140 ;; Parameters:    Size  Location     Type
  8141 ;;		None
  8142 ;; Auto vars:     Size  Location     Type
  8143 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
  8144 ;;  newPointerH     1   25[BANK0 ] unsigned char 
  8145 ;;  newPointerL     1   24[BANK0 ] unsigned char 
  8146 ;;  opcode          1   23[BANK0 ] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  1    wreg      void 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : 0/0
  8153 ;;		On exit  : 0/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8156 ;;      Params:         0       0       0       0       0       0       0       0       0
  8157 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8158 ;;      Temps:          0       6       0       0       0       0       0       0       0
  8159 ;;      Totals:         0      11       0       0       0       0       0       0       0
  8160 ;;Total ram usage:       11 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    7
  8163 ;; This function calls:
  8164 ;;		_ENC424J600_getNextPacketPointer
  8165 ;;		_ENC424J600_readSPI
  8166 ;;		_ENC424J600_setERXDATAReadPointer
  8167 ;;		_ENC424J600_setNextPacketPointer
  8168 ;;		_ENC424J600_writeSPI
  8169 ;; This function is called by:
  8170 ;;		_ethernet_rxGetNewFrame
  8171 ;; This function uses a non-reentrant model
  8172 ;;
  8173                           
  8174                           	psect	text21
  8175  003F34                     __ptext21:
  8176                           	opt stack 0
  8177  003F34                     _ethernetController_updateNextPacketPointer:
  8178                           	opt stack 21
  8179                           
  8180                           ;ENC424J600.c: 338: uint16_t nextPktPointer;
  8181                           ;ENC424J600.c: 339: uint8_t opcode;
  8182                           ;ENC424J600.c: 340: uint8_t newPointerL, newPointerH;
  8183                           ;ENC424J600.c: 341: nextPktPointer = ENC424J600_getNextPacketPointer();
  8184                           
  8185                           ; BSR set to: 0
  8186                           ;incstack = 0
  8187  003F34  EC6F  F026         	call	_ENC424J600_getNextPacketPointer	;wreg free
  8188  003F38  C060  F075         	movff	?_ENC424J600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
  8189  003F3C  C061  F076         	movff	?_ENC424J600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
  8190                           
  8191                           ;ENC424J600.c: 342: ENC424J600_setERXDATAReadPointer(nextPktPointer);
  8192  003F40  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,ENC424J600_setERXDATARe
      +                          adPointer@addr
  8193  003F44  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,ENC424J600_setERXDATA
      +                          ReadPointer@addr+1
  8194  003F48  ECD6  F023         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  8195                           
  8196                           ;ENC424J600.c: 343: opcode = 0x2C;
  8197  003F4C  0E2C               	movlw	44
  8198  003F4E  0100               	movlb	0	; () banked
  8199  003F50  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
  8200                           
  8201                           ; BSR set to: 0
  8202                           ;ENC424J600.c: 344: PORTBbits.RB4=0;
  8203  003F52  9881               	bcf	3969,4,c	;volatile
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;ENC424J600.c: 345: ENC424J600_writeSPI(&opcode);
  8207  003F54  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
  8208  003F56  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  8209  003F58  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
  8210  003F5A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  8211  003F5C  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
  8212                           
  8213                           ;ENC424J600.c: 346: ENC424J600_readSPI(&newPointerL);
  8214  003F60  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
  8215  003F62  0100               	movlb	0	; () banked
  8216  003F64  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8217  003F66  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
  8218  003F68  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8219  003F6A  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
  8220                           
  8221                           ;ENC424J600.c: 347: ENC424J600_readSPI(&newPointerH);
  8222  003F6E  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
  8223  003F70  0100               	movlb	0	; () banked
  8224  003F72  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8225  003F74  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
  8226  003F76  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8227  003F78  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
  8228                           
  8229                           ;ENC424J600.c: 348: PORTBbits.RB4=1;
  8230  003F7C  8881               	bsf	3969,4,c	;volatile
  8231                           
  8232                           ;ENC424J600.c: 350: ENC424J600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
  8233  003F7E  0E00               	movlw	0
  8234  003F80  0100               	movlb	0	; () banked
  8235  003F82  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
  8236  003F84  0EFF               	movlw	255
  8237  003F86  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
  8238  003F88  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
  8239  003F8A  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
  8240  003F8C  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
  8241  003F8E  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
  8242  003F90  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
  8243  003F92  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
  8244  003F94  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
  8245  003F96  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
  8246  003F98  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
  8247  003F9A  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
  8248  003F9C  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
  8249  003F9E  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
  8250  003FA0  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
  8251  003FA2  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
  8252  003FA4  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
  8253  003FA6  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
  8254  003FA8  EC74  F026         	call	_ENC424J600_setNextPacketPointer	;wreg free
  8255  003FAC  0012               	return		;funcret
  8256  003FAE                     __end_of_ethernetController_updateNextPacketPointer:
  8257                           	opt stack 0
  8258                           tblptru	equ	0xFF8
  8259                           tblptrh	equ	0xFF7
  8260                           tblptrl	equ	0xFF6
  8261                           tablat	equ	0xFF5
  8262                           prodh	equ	0xFF4
  8263                           prodl	equ	0xFF3
  8264                           intcon	equ	0xFF2
  8265                           intcon3	equ	0xFF0
  8266                           postinc0	equ	0xFEE
  8267                           plusw0	equ	0xFEB
  8268                           fsr0h	equ	0xFEA
  8269                           fsr0l	equ	0xFE9
  8270                           wreg	equ	0xFE8
  8271                           indf1	equ	0xFE7
  8272                           postinc1	equ	0xFE6
  8273                           postdec1	equ	0xFE5
  8274                           plusw1	equ	0xFE3
  8275                           fsr1h	equ	0xFE2
  8276                           fsr1l	equ	0xFE1
  8277                           indf2	equ	0xFDF
  8278                           postinc2	equ	0xFDE
  8279                           postdec2	equ	0xFDD
  8280                           plusw2	equ	0xFDB
  8281                           fsr2h	equ	0xFDA
  8282                           fsr2l	equ	0xFD9
  8283                           status	equ	0xFD8
  8284                           
  8285 ;; *************** function _ethernetController_getRSV *****************
  8286 ;; Defined at:
  8287 ;;		line 302 in file "src/enc424j600/ENC424J600.c"
  8288 ;; Parameters:    Size  Location     Type
  8289 ;;  address         2   17[BANK0 ] unsigned int 
  8290 ;; Auto vars:     Size  Location     Type
  8291 ;;  i               1   23[BANK0 ] unsigned char 
  8292 ;;  opcode          1   22[BANK0 ] unsigned char 
  8293 ;; Return value:  Size  Location     Type
  8294 ;;                  5   17[BANK0 ] struct RSV
  8295 ;; Registers used:
  8296 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8297 ;; Tracked objects:
  8298 ;;		On entry : 0/0
  8299 ;;		On exit  : 0/0
  8300 ;;		Unchanged: 0/0
  8301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8302 ;;      Params:         0       5       0       0       0       0       0       0       0
  8303 ;;      Locals:         0       2       0       0       0       0       0       0       0
  8304 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8305 ;;      Totals:         0       7       0       0       0       0       0       0       0
  8306 ;;Total ram usage:        7 bytes
  8307 ;; Hardware stack levels used:    1
  8308 ;; Hardware stack levels required when called:    7
  8309 ;; This function calls:
  8310 ;;		_ENC424J600_readSPI
  8311 ;;		_ENC424J600_setERXDATAReadPointer
  8312 ;;		_ENC424J600_updateReceiveStatusVector
  8313 ;;		_ENC424J600_writeSPI
  8314 ;; This function is called by:
  8315 ;;		_ethernet_rxGetNewFrame
  8316 ;; This function uses a non-reentrant model
  8317 ;;
  8318                           
  8319                           	psect	text22
  8320  004026                     __ptext22:
  8321                           	opt stack 0
  8322  004026                     _ethernetController_getRSV:
  8323                           	opt stack 21
  8324                           
  8325                           ;ENC424J600.c: 303: uint8_t static temp[6];
  8326                           ;ENC424J600.c: 304: ENC424J600_setERXDATAReadPointer(address + 2);
  8327                           
  8328                           ;incstack = 0
  8329  004026  0E02               	movlw	2
  8330  004028  0100               	movlb	0	; () banked
  8331  00402A  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
  8332  00402C  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  8333  00402E  0E00               	movlw	0
  8334  004030  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
  8335  004032  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  8336  004034  ECD6  F023         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  8337                           
  8338                           ;ENC424J600.c: 305: uint8_t opcode = 0x2C;
  8339  004038  0E2C               	movlw	44
  8340  00403A  0100               	movlb	0	; () banked
  8341  00403C  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;ENC424J600.c: 306: PORTBbits.RB4=0;
  8345  00403E  9881               	bcf	3969,4,c	;volatile
  8346                           
  8347                           ; BSR set to: 0
  8348                           ;ENC424J600.c: 307: ENC424J600_writeSPI(&opcode);
  8349  004040  0E76               	movlw	low ethernetController_getRSV@opcode
  8350  004042  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  8351  004044  0E00               	movlw	high ethernetController_getRSV@opcode
  8352  004046  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  8353  004048  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
  8354                           
  8355                           ;ENC424J600.c: 308: for (uint8_t i = 0; i < 6; i++) {
  8356  00404C  0E00               	movlw	0
  8357  00404E  0100               	movlb	0	; () banked
  8358  004050  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
  8359  004052                     l8353:
  8360                           
  8361                           ; BSR set to: 0
  8362  004052  0E05               	movlw	5
  8363  004054  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
  8364  004056  D001               	goto	l163
  8365  004058  D00D               	goto	u10340
  8366  00405A                     l163:
  8367                           
  8368                           ; BSR set to: 0
  8369                           ;ENC424J600.c: 309: ENC424J600_readSPI(&temp[i]);
  8370                           
  8371                           ; BSR set to: 0
  8372  00405A  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
  8373  00405C  0D01               	mullw	1
  8374  00405E  0EDA               	movlw	low ethernetController_getRSV@temp
  8375  004060  24F3               	addwf	prodl,w,c
  8376  004062  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  8377  004064  0E01               	movlw	high ethernetController_getRSV@temp
  8378  004066  20F4               	addwfc	prodh,w,c
  8379  004068  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  8380  00406A  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
  8381  00406E  0100               	movlb	0	; () banked
  8382  004070  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
  8383  004072  D7EF               	goto	l8353
  8384  004074                     u10340:
  8385                           
  8386                           ; BSR set to: 0
  8387                           ;ENC424J600.c: 310: }
  8388                           ;ENC424J600.c: 311: PORTBbits.RB4=1;
  8389  004074  8881               	bsf	3969,4,c	;volatile
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;ENC424J600.c: 312: return ENC424J600_updateReceiveStatusVector(&temp[0]);
  8393  004076  0EDA               	movlw	low ethernetController_getRSV@temp
  8394  004078  6F60               	movwf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),b
  8395  00407A  0E01               	movlw	high ethernetController_getRSV@temp
  8396  00407C  6F61               	movwf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),b
  8397  00407E  ECFF  F008         	call	_ENC424J600_updateReceiveStatusVector	;wreg free
  8398  004082  CFE9 FFD9          	movff	fsr0l,fsr2l
  8399  004086  CFEA FFDA          	movff	fsr0h,fsr2h
  8400  00408A  EE00  F071         	lfsr	0,?_ethernetController_getRSV
  8401  00408E  0E04               	movlw	4
  8402  004090                     u10351:
  8403  004090  CFDB FFEB          	movff	plusw2,plusw0
  8404  004094  06E8               	decf	wreg,f,c
  8405  004096  E2FC               	bc	u10351
  8406  004098  0012               	return	
  8407  00409A                     __end_of_ethernetController_getRSV:
  8408                           	opt stack 0
  8409                           tblptru	equ	0xFF8
  8410                           tblptrh	equ	0xFF7
  8411                           tblptrl	equ	0xFF6
  8412                           tablat	equ	0xFF5
  8413                           prodh	equ	0xFF4
  8414                           prodl	equ	0xFF3
  8415                           intcon	equ	0xFF2
  8416                           intcon3	equ	0xFF0
  8417                           postinc0	equ	0xFEE
  8418                           plusw0	equ	0xFEB
  8419                           fsr0h	equ	0xFEA
  8420                           fsr0l	equ	0xFE9
  8421                           wreg	equ	0xFE8
  8422                           indf1	equ	0xFE7
  8423                           postinc1	equ	0xFE6
  8424                           postdec1	equ	0xFE5
  8425                           plusw1	equ	0xFE3
  8426                           fsr1h	equ	0xFE2
  8427                           fsr1l	equ	0xFE1
  8428                           indf2	equ	0xFDF
  8429                           postinc2	equ	0xFDE
  8430                           postdec2	equ	0xFDD
  8431                           plusw2	equ	0xFDB
  8432                           fsr2h	equ	0xFDA
  8433                           fsr2l	equ	0xFD9
  8434                           status	equ	0xFD8
  8435                           
  8436 ;; *************** function _ENC424J600_updateReceiveStatusVector *****************
  8437 ;; Defined at:
  8438 ;;		line 758 in file "src/enc424j600/ENC424J600.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
  8441 ;;		 -> ethernetController_getRSV@temp(6), 
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;  receiveStatu    5   12[BANK0 ] struct RSV
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  5    0[BANK0 ] struct RSV
  8446 ;; Registers used:
  8447 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
  8448 ;; Tracked objects:
  8449 ;;		On entry : 0/0
  8450 ;;		On exit  : 0/0
  8451 ;;		Unchanged: 0/0
  8452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8453 ;;      Params:         0       5       0       0       0       0       0       0       0
  8454 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8455 ;;      Temps:          0       7       0       0       0       0       0       0       0
  8456 ;;      Totals:         0      17       0       0       0       0       0       0       0
  8457 ;;Total ram usage:       17 bytes
  8458 ;; Hardware stack levels used:    1
  8459 ;; Hardware stack levels required when called:    4
  8460 ;; This function calls:
  8461 ;;		Nothing
  8462 ;; This function is called by:
  8463 ;;		_ethernetController_getRSV
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text23
  8468  0011FE                     __ptext23:
  8469                           	opt stack 0
  8470  0011FE                     _ENC424J600_updateReceiveStatusVector:
  8471                           	opt stack 23
  8472                           
  8473                           ;ENC424J600.c: 759: RSV_t receiveStatusVector;
  8474                           ;ENC424J600.c: 762: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
  8475                           
  8476                           ;incstack = 0
  8477  0011FE  0E00               	movlw	0
  8478  001200  0100               	movlb	0	; () banked
  8479  001202  6F65               	movwf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8480  001204  0EFF               	movlw	255
  8481  001206  6F66               	movwf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),b
  8482  001208  EE20 F001          	lfsr	2,1
  8483  00120C  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8484  00120E  26D9               	addwf	fsr2l,f,c
  8485  001210  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8486  001212  22DA               	addwfc	fsr2h,f,c
  8487  001214  50DF               	movf	indf2,w,c
  8488  001216  6F67               	movwf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),b
  8489  001218  5167               	movf	(??_ENC424J600_updateReceiveStatusVector+2)& (0+255),w,b
  8490  00121A  6F69               	movwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),b
  8491  00121C  6B68               	clrf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),b
  8492  00121E  5165               	movf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8493  001220  1768               	andwf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),f,b
  8494  001222  5166               	movf	(??_ENC424J600_updateReceiveStatusVector+1)& (0+255),w,b
  8495  001224  1769               	andwf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),f,b
  8496  001226  C060  FFD9         	movff	ENC424J600_updateReceiveStatusVector@rsv,fsr2l
  8497  00122A  C061  FFDA         	movff	ENC424J600_updateReceiveStatusVector@rsv+1,fsr2h
  8498  00122E  50DF               	movf	indf2,w,c
  8499  001230  6F6A               	movwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),b
  8500  001232  6B6B               	clrf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),b
  8501  001234  5168               	movf	(??_ENC424J600_updateReceiveStatusVector+3)& (0+255),w,b
  8502  001236  116A               	iorwf	(??_ENC424J600_updateReceiveStatusVector+5)& (0+255),w,b
  8503  001238  6F6C               	movwf	ENC424J600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
  8504  00123A  5169               	movf	(??_ENC424J600_updateReceiveStatusVector+4)& (0+255),w,b
  8505  00123C  116B               	iorwf	(??_ENC424J600_updateReceiveStatusVector+6)& (0+255),w,b
  8506  00123E  6F6D               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
  8507                           
  8508                           ;ENC424J600.c: 764: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
  8509  001240  EE20 F002          	lfsr	2,2
  8510  001244  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8511  001246  26D9               	addwf	fsr2l,f,c
  8512  001248  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8513  00124A  22DA               	addwfc	fsr2h,f,c
  8514  00124C  A0DF               	btfss	indf2,0,c
  8515  00124E  D003               	goto	u9550
  8516  001250  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8517  001252  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8518  001254  D002               	goto	u9568
  8519  001256                     u9550:
  8520  001256  0100               	movlb	0	; () banked
  8521  001258  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8522  00125A                     u9568:
  8523  00125A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8524  00125C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8525  00125E  0BFE               	andlw	-2
  8526  001260  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8527  001262  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8528                           
  8529                           ;ENC424J600.c: 765: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
  8530  001264  EE20 F002          	lfsr	2,2
  8531  001268  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8532  00126A  26D9               	addwf	fsr2l,f,c
  8533  00126C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8534  00126E  22DA               	addwfc	fsr2h,f,c
  8535  001270  A4DF               	btfss	indf2,2,c
  8536  001272  D003               	goto	u9570
  8537  001274  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8538  001276  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8539  001278  D002               	goto	u9588
  8540  00127A                     u9570:
  8541  00127A  0100               	movlb	0	; () banked
  8542  00127C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8543  00127E                     u9588:
  8544  00127E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8545  001280  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8546  001282  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8547  001284  0BFD               	andlw	-3
  8548  001286  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8549  001288  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8550                           
  8551                           ;ENC424J600.c: 766: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
  8552  00128A  EE20 F002          	lfsr	2,2
  8553  00128E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8554  001290  26D9               	addwf	fsr2l,f,c
  8555  001292  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8556  001294  22DA               	addwfc	fsr2h,f,c
  8557  001296  A8DF               	btfss	indf2,4,c
  8558  001298  D003               	goto	u9590
  8559  00129A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8560  00129C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8561  00129E  D002               	goto	u9608
  8562  0012A0                     u9590:
  8563  0012A0  0100               	movlb	0	; () banked
  8564  0012A2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8565  0012A4                     u9608:
  8566  0012A4  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8567  0012A6  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8568  0012A8  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8569  0012AA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8570  0012AC  0BFB               	andlw	-5
  8571  0012AE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8572  0012B0  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8573                           
  8574                           ;ENC424J600.c: 767: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
  8575  0012B2  EE20 F002          	lfsr	2,2
  8576  0012B6  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8577  0012B8  26D9               	addwf	fsr2l,f,c
  8578  0012BA  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8579  0012BC  22DA               	addwfc	fsr2h,f,c
  8580  0012BE  AADF               	btfss	indf2,5,c
  8581  0012C0  D003               	goto	u9610
  8582  0012C2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8583  0012C4  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8584  0012C6  D002               	goto	u9628
  8585  0012C8                     u9610:
  8586  0012C8  0100               	movlb	0	; () banked
  8587  0012CA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8588  0012CC                     u9628:
  8589  0012CC  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8590  0012CE  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8591  0012D0  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8592  0012D2  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8593  0012D4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8594  0012D6  0BF7               	andlw	-9
  8595  0012D8  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8596  0012DA  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8597                           
  8598                           ;ENC424J600.c: 768: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
  8599  0012DC  EE20 F002          	lfsr	2,2
  8600  0012E0  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8601  0012E2  26D9               	addwf	fsr2l,f,c
  8602  0012E4  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8603  0012E6  22DA               	addwfc	fsr2h,f,c
  8604  0012E8  ACDF               	btfss	indf2,6,c
  8605  0012EA  D003               	goto	u9630
  8606  0012EC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8607  0012EE  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8608  0012F0  D002               	goto	u9648
  8609  0012F2                     u9630:
  8610  0012F2  0100               	movlb	0	; () banked
  8611  0012F4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8612  0012F6                     u9648:
  8613  0012F6  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8614  0012F8  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8615  0012FA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8616  0012FC  0BEF               	andlw	-17
  8617  0012FE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8618  001300  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8619                           
  8620                           ;ENC424J600.c: 769: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8621  001302  EE20 F002          	lfsr	2,2
  8622  001306  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8623  001308  26D9               	addwf	fsr2l,f,c
  8624  00130A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8625  00130C  22DA               	addwfc	fsr2h,f,c
  8626  00130E  AEDF               	btfss	indf2,7,c
  8627  001310  D003               	goto	u9650
  8628  001312  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8629  001314  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8630  001316  D002               	goto	u9668
  8631  001318                     u9650:
  8632  001318  0100               	movlb	0	; () banked
  8633  00131A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8634  00131C                     u9668:
  8635  00131C  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8636  00131E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8637  001320  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8638  001322  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8639  001324  0BDF               	andlw	-33
  8640  001326  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8641  001328  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8642                           
  8643                           ;ENC424J600.c: 771: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
  8644  00132A  EE20 F003          	lfsr	2,3
  8645  00132E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8646  001330  26D9               	addwf	fsr2l,f,c
  8647  001332  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8648  001334  22DA               	addwfc	fsr2h,f,c
  8649  001336  A0DF               	btfss	indf2,0,c
  8650  001338  D003               	goto	u9670
  8651  00133A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8652  00133C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8653  00133E  D002               	goto	u9688
  8654  001340                     u9670:
  8655  001340  0100               	movlb	0	; () banked
  8656  001342  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8657  001344                     u9688:
  8658  001344  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8659  001346  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8660  001348  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8661  00134A  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8662  00134C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8663  00134E  0BBF               	andlw	-65
  8664  001350  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8665  001352  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8666                           
  8667                           ;ENC424J600.c: 772: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
  8668  001354  EE20 F003          	lfsr	2,3
  8669  001358  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8670  00135A  26D9               	addwf	fsr2l,f,c
  8671  00135C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8672  00135E  22DA               	addwfc	fsr2h,f,c
  8673  001360  A2DF               	btfss	indf2,1,c
  8674  001362  D003               	goto	u9690
  8675  001364  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8676  001366  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8677  001368  D002               	goto	u9708
  8678  00136A                     u9690:
  8679  00136A  0100               	movlb	0	; () banked
  8680  00136C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8681  00136E                     u9708:
  8682  00136E  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8683  001370  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8684  001372  516E               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
  8685  001374  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8686  001376  0B7F               	andlw	-129
  8687  001378  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8688  00137A  6F6E               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
  8689                           
  8690                           ;ENC424J600.c: 773: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8691  00137C  EE20 F003          	lfsr	2,3
  8692  001380  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8693  001382  26D9               	addwf	fsr2l,f,c
  8694  001384  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8695  001386  22DA               	addwfc	fsr2h,f,c
  8696  001388  A6DF               	btfss	indf2,3,c
  8697  00138A  D003               	goto	u9710
  8698  00138C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8699  00138E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8700  001390  D002               	goto	u9728
  8701  001392                     u9710:
  8702  001392  0100               	movlb	0	; () banked
  8703  001394  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8704  001396                     u9728:
  8705  001396  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8706  001398  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8707  00139A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8708  00139C  0BFD               	andlw	-3
  8709  00139E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8710  0013A0  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8711                           
  8712                           ;ENC424J600.c: 774: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
  8713  0013A2  EE20 F003          	lfsr	2,3
  8714  0013A6  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8715  0013A8  26D9               	addwf	fsr2l,f,c
  8716  0013AA  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8717  0013AC  22DA               	addwfc	fsr2h,f,c
  8718  0013AE  A8DF               	btfss	indf2,4,c
  8719  0013B0  D003               	goto	u9730
  8720  0013B2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8721  0013B4  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8722  0013B6  D002               	goto	u9748
  8723  0013B8                     u9730:
  8724  0013B8  0100               	movlb	0	; () banked
  8725  0013BA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8726  0013BC                     u9748:
  8727  0013BC  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8728  0013BE  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8729  0013C0  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8730  0013C2  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8731  0013C4  0BFB               	andlw	-5
  8732  0013C6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8733  0013C8  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8734                           
  8735                           ;ENC424J600.c: 775: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
  8736  0013CA  EE20 F003          	lfsr	2,3
  8737  0013CE  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8738  0013D0  26D9               	addwf	fsr2l,f,c
  8739  0013D2  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8740  0013D4  22DA               	addwfc	fsr2h,f,c
  8741  0013D6  AADF               	btfss	indf2,5,c
  8742  0013D8  D003               	goto	u9750
  8743  0013DA  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8744  0013DC  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8745  0013DE  D002               	goto	u9768
  8746  0013E0                     u9750:
  8747  0013E0  0100               	movlb	0	; () banked
  8748  0013E2  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8749  0013E4                     u9768:
  8750  0013E4  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8751  0013E6  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8752  0013E8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8753  0013EA  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8754  0013EC  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8755  0013EE  0BF7               	andlw	-9
  8756  0013F0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8757  0013F2  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8758                           
  8759                           ;ENC424J600.c: 776: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
  8760  0013F4  EE20 F003          	lfsr	2,3
  8761  0013F8  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8762  0013FA  26D9               	addwf	fsr2l,f,c
  8763  0013FC  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8764  0013FE  22DA               	addwfc	fsr2h,f,c
  8765  001400  ACDF               	btfss	indf2,6,c
  8766  001402  D003               	goto	u9770
  8767  001404  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8768  001406  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8769  001408  D002               	goto	u9788
  8770  00140A                     u9770:
  8771  00140A  0100               	movlb	0	; () banked
  8772  00140C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8773  00140E                     u9788:
  8774  00140E  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8775  001410  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8776  001412  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8777  001414  0BEF               	andlw	-17
  8778  001416  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8779  001418  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8780                           
  8781                           ;ENC424J600.c: 777: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
  8782  00141A  EE20 F003          	lfsr	2,3
  8783  00141E  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8784  001420  26D9               	addwf	fsr2l,f,c
  8785  001422  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8786  001424  22DA               	addwfc	fsr2h,f,c
  8787  001426  AEDF               	btfss	indf2,7,c
  8788  001428  D003               	goto	u9790
  8789  00142A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8790  00142C  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8791  00142E  D002               	goto	u9808
  8792  001430                     u9790:
  8793  001430  0100               	movlb	0	; () banked
  8794  001432  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8795  001434                     u9808:
  8796  001434  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8797  001436  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8798  001438  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8799  00143A  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8800  00143C  0BDF               	andlw	-33
  8801  00143E  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8802  001440  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8803                           
  8804                           ;ENC424J600.c: 779: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
  8805  001442  EE20 F004          	lfsr	2,4
  8806  001446  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8807  001448  26D9               	addwf	fsr2l,f,c
  8808  00144A  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8809  00144C  22DA               	addwfc	fsr2h,f,c
  8810  00144E  A0DF               	btfss	indf2,0,c
  8811  001450  D003               	goto	u9810
  8812  001452  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8813  001454  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8814  001456  D002               	goto	u9828
  8815  001458                     u9810:
  8816  001458  0100               	movlb	0	; () banked
  8817  00145A  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8818  00145C                     u9828:
  8819  00145C  3B65               	swapf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8820  00145E  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8821  001460  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8822  001462  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8823  001464  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8824  001466  0BBF               	andlw	-65
  8825  001468  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8826  00146A  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8827                           
  8828                           ;ENC424J600.c: 780: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
  8829  00146C  EE20 F004          	lfsr	2,4
  8830  001470  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8831  001472  26D9               	addwf	fsr2l,f,c
  8832  001474  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8833  001476  22DA               	addwfc	fsr2h,f,c
  8834  001478  A2DF               	btfss	indf2,1,c
  8835  00147A  D003               	goto	u9830
  8836  00147C  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8837  00147E  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8838  001480  D002               	goto	u9848
  8839  001482                     u9830:
  8840  001482  0100               	movlb	0	; () banked
  8841  001484  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8842  001486                     u9848:
  8843  001486  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8844  001488  3365               	rrcf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8845  00148A  516F               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
  8846  00148C  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8847  00148E  0B7F               	andlw	-129
  8848  001490  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8849  001492  6F6F               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
  8850                           
  8851                           ;ENC424J600.c: 781: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
  8852  001494  EE20 F004          	lfsr	2,4
  8853  001498  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8854  00149A  26D9               	addwf	fsr2l,f,c
  8855  00149C  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8856  00149E  22DA               	addwfc	fsr2h,f,c
  8857  0014A0  A4DF               	btfss	indf2,2,c
  8858  0014A2  D003               	goto	u9850
  8859  0014A4  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8860  0014A6  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8861  0014A8  D002               	goto	u9868
  8862  0014AA                     u9850:
  8863  0014AA  0100               	movlb	0	; () banked
  8864  0014AC  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8865  0014AE                     u9868:
  8866  0014AE  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8867  0014B0  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8868  0014B2  0BFE               	andlw	-2
  8869  0014B4  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8870  0014B6  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8871                           
  8872                           ;ENC424J600.c: 782: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
  8873  0014B8  EE20 F004          	lfsr	2,4
  8874  0014BC  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8875  0014BE  26D9               	addwf	fsr2l,f,c
  8876  0014C0  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8877  0014C2  22DA               	addwfc	fsr2h,f,c
  8878  0014C4  A6DF               	btfss	indf2,3,c
  8879  0014C6  D003               	goto	u9870
  8880  0014C8  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8881  0014CA  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8882  0014CC  D002               	goto	u9888
  8883  0014CE                     u9870:
  8884  0014CE  0100               	movlb	0	; () banked
  8885  0014D0  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8886  0014D2                     u9888:
  8887  0014D2  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8888  0014D4  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8889  0014D6  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8890  0014D8  0BFD               	andlw	-3
  8891  0014DA  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8892  0014DC  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8893                           
  8894                           ;ENC424J600.c: 783: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
  8895  0014DE  EE20 F004          	lfsr	2,4
  8896  0014E2  5160               	movf	ENC424J600_updateReceiveStatusVector@rsv& (0+255),w,b
  8897  0014E4  26D9               	addwf	fsr2l,f,c
  8898  0014E6  5161               	movf	(ENC424J600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
  8899  0014E8  22DA               	addwfc	fsr2h,f,c
  8900  0014EA  A8DF               	btfss	indf2,4,c
  8901  0014EC  D003               	goto	u9890
  8902  0014EE  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8903  0014F0  2B65               	incf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8904  0014F2  D002               	goto	u9908
  8905  0014F4                     u9890:
  8906  0014F4  0100               	movlb	0	; () banked
  8907  0014F6  6B65               	clrf	??_ENC424J600_updateReceiveStatusVector& (0+255),b
  8908  0014F8                     u9908:
  8909  0014F8  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8910  0014FA  4765               	rlncf	??_ENC424J600_updateReceiveStatusVector& (0+255),f,b
  8911  0014FC  5170               	movf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
  8912  0014FE  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8913  001500  0BFB               	andlw	-5
  8914  001502  1965               	xorwf	??_ENC424J600_updateReceiveStatusVector& (0+255),w,b
  8915  001504  6F70               	movwf	(ENC424J600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;ENC424J600.c: 785: return receiveStatusVector;
  8919  001506  EE20  F06C         	lfsr	2,ENC424J600_updateReceiveStatusVector@receiveStatusVector
  8920  00150A  EE00  F060         	lfsr	0,?_ENC424J600_updateReceiveStatusVector
  8921  00150E  0E04               	movlw	4
  8922  001510                     u9911:
  8923  001510  CFDB FFEB          	movff	plusw2,plusw0
  8924  001514  06E8               	decf	wreg,f,c
  8925  001516  E2FC               	bc	u9911
  8926  001518  0012               	return	
  8927  00151A                     __end_of_ENC424J600_updateReceiveStatusVector:
  8928                           	opt stack 0
  8929                           tblptru	equ	0xFF8
  8930                           tblptrh	equ	0xFF7
  8931                           tblptrl	equ	0xFF6
  8932                           tablat	equ	0xFF5
  8933                           prodh	equ	0xFF4
  8934                           prodl	equ	0xFF3
  8935                           intcon	equ	0xFF2
  8936                           intcon3	equ	0xFF0
  8937                           postinc0	equ	0xFEE
  8938                           plusw0	equ	0xFEB
  8939                           fsr0h	equ	0xFEA
  8940                           fsr0l	equ	0xFE9
  8941                           wreg	equ	0xFE8
  8942                           indf1	equ	0xFE7
  8943                           postinc1	equ	0xFE6
  8944                           postdec1	equ	0xFE5
  8945                           plusw1	equ	0xFE3
  8946                           fsr1h	equ	0xFE2
  8947                           fsr1l	equ	0xFE1
  8948                           indf2	equ	0xFDF
  8949                           postinc2	equ	0xFDE
  8950                           postdec2	equ	0xFDD
  8951                           plusw2	equ	0xFDB
  8952                           fsr2h	equ	0xFDA
  8953                           fsr2l	equ	0xFD9
  8954                           status	equ	0xFD8
  8955                           
  8956 ;; *************** function _ethernetController_getEtherTypeField *****************
  8957 ;; Defined at:
  8958 ;;		line 286 in file "src/enc424j600/ENC424J600.c"
  8959 ;; Parameters:    Size  Location     Type
  8960 ;;  field           9   15[BANK0 ] struct memoryField
  8961 ;; Auto vars:     Size  Location     Type
  8962 ;;  ethertype       2   28[BANK0 ] enum E5498
  8963 ;;  highByte        1   32[BANK0 ] unsigned char 
  8964 ;;  lowByte         1   31[BANK0 ] unsigned char 
  8965 ;;  opcode          1   30[BANK0 ] unsigned char 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  2   15[BANK0 ] enum E5498
  8968 ;; Registers used:
  8969 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8975 ;;      Params:         0       9       0       0       0       0       0       0       0
  8976 ;;      Locals:         0       5       0       0       0       0       0       0       0
  8977 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8978 ;;      Totals:         0      18       0       0       0       0       0       0       0
  8979 ;;Total ram usage:       18 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    7
  8982 ;; This function calls:
  8983 ;;		_ENC424J600_readSPI
  8984 ;;		_ENC424J600_setERXDATAReadPointer
  8985 ;;		_ENC424J600_writeSPI
  8986 ;; This function is called by:
  8987 ;;		_ethernet_rxGetNewFrame
  8988 ;; This function uses a non-reentrant model
  8989 ;;
  8990                           
  8991                           	psect	text24
  8992  004180                     __ptext24:
  8993                           	opt stack 0
  8994  004180                     _ethernetController_getEtherTypeField:
  8995                           	opt stack 21
  8996                           
  8997                           ;ENC424J600.c: 287: etherType_t ethertype = 0x0000;
  8998                           
  8999                           ; BSR set to: 0
  9000                           ;incstack = 0
  9001  004180  0E00               	movlw	0
  9002  004182  0100               	movlb	0	; () banked
  9003  004184  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  9004  004186  0E00               	movlw	0
  9005  004188  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  9006                           
  9007                           ; BSR set to: 0
  9008                           ;ENC424J600.c: 288: ENC424J600_setERXDATAReadPointer(field.start + 20);
  9009  00418A  0E14               	movlw	20
  9010  00418C  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
  9011  00418E  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
  9012  004190  0E00               	movlw	0
  9013  004192  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
  9014  004194  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
  9015  004196  ECD6  F023         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
  9016                           
  9017                           ;ENC424J600.c: 289: uint8_t opcode = 0x2C;
  9018  00419A  0E2C               	movlw	44
  9019  00419C  0100               	movlb	0	; () banked
  9020  00419E  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
  9021                           
  9022                           ; BSR set to: 0
  9023                           ;ENC424J600.c: 290: PORTBbits.RB4=0;
  9024  0041A0  9881               	bcf	3969,4,c	;volatile
  9025                           
  9026                           ;ENC424J600.c: 291: ENC424J600_writeSPI(&opcode);
  9027  0041A2  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
  9028  0041A4  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
  9029  0041A6  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
  9030  0041A8  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
  9031  0041AA  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
  9032                           
  9033                           ;ENC424J600.c: 293: uint8_t lowByte;
  9034                           ;ENC424J600.c: 294: uint8_t highByte;
  9035                           ;ENC424J600.c: 295: ENC424J600_readSPI(&highByte);
  9036  0041AE  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
  9037  0041B0  0100               	movlb	0	; () banked
  9038  0041B2  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9039  0041B4  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
  9040  0041B6  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9041  0041B8  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
  9042                           
  9043                           ;ENC424J600.c: 296: ENC424J600_readSPI(&lowByte);
  9044  0041BC  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
  9045  0041BE  0100               	movlb	0	; () banked
  9046  0041C0  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
  9047  0041C2  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
  9048  0041C4  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
  9049  0041C6  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
  9050                           
  9051                           ;ENC424J600.c: 297: ethertype = (uint16_t) (lowByte | (highByte << 8));
  9052  0041CA  0100               	movlb	0	; () banked
  9053  0041CC  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
  9054  0041CE  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
  9055  0041D0  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
  9056  0041D2  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
  9057  0041D4  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
  9058  0041D6  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
  9059  0041D8  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
  9060  0041DA  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
  9061  0041DC  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
  9062  0041DE  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
  9063  0041E0  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
  9064  0041E2  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;ENC424J600.c: 298: PORTBbits.RB4=1;
  9068  0041E4  8881               	bsf	3969,4,c	;volatile
  9069                           
  9070                           ; BSR set to: 0
  9071                           ;ENC424J600.c: 299: return ethertype;
  9072  0041E6  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
  9073  0041EA  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
  9074  0041EE  0012               	return	
  9075  0041F0                     __end_of_ethernetController_getEtherTypeField:
  9076                           	opt stack 0
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon3	equ	0xFF0
  9085                           postinc0	equ	0xFEE
  9086                           plusw0	equ	0xFEB
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           indf1	equ	0xFE7
  9091                           postinc1	equ	0xFE6
  9092                           postdec1	equ	0xFE5
  9093                           plusw1	equ	0xFE3
  9094                           fsr1h	equ	0xFE2
  9095                           fsr1l	equ	0xFE1
  9096                           indf2	equ	0xFDF
  9097                           postinc2	equ	0xFDE
  9098                           postdec2	equ	0xFDD
  9099                           plusw2	equ	0xFDB
  9100                           fsr2h	equ	0xFDA
  9101                           fsr2l	equ	0xFD9
  9102                           status	equ	0xFD8
  9103                           
  9104 ;; *************** function _etherTypeToString *****************
  9105 ;; Defined at:
  9106 ;;		line 178 in file "src/system/uart.c"
  9107 ;; Parameters:    Size  Location     Type
  9108 ;;  ethertype       2    0[BANK0 ] enum E5467
  9109 ;; Auto vars:     Size  Location     Type
  9110 ;;		None
  9111 ;; Return value:  Size  Location     Type
  9112 ;;                  2    0[BANK0 ] PTR unsigned char 
  9113 ;; Registers used:
  9114 ;;		wreg, status,2, status,0
  9115 ;; Tracked objects:
  9116 ;;		On entry : 0/0
  9117 ;;		On exit  : 0/0
  9118 ;;		Unchanged: 0/0
  9119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9120 ;;      Params:         0       2       0       0       0       0       0       0       0
  9121 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9122 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9123 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9124 ;;Total ram usage:        4 bytes
  9125 ;; Hardware stack levels used:    1
  9126 ;; Hardware stack levels required when called:    4
  9127 ;; This function calls:
  9128 ;;		Nothing
  9129 ;; This function is called by:
  9130 ;;		_ethernet_rxGetNewFrame
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           	psect	text25
  9135  004628                     __ptext25:
  9136                           	opt stack 0
  9137  004628                     _etherTypeToString:
  9138                           	opt stack 24
  9139                           
  9140                           ;uart.c: 179: switch (ethertype) {
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;incstack = 0
  9144  004628  D010               	goto	l794
  9145  00462A                     
  9146                           ;uart.c: 181: return "IPv4";
  9147  00462A  0ED2               	movlw	low STR_56
  9148  00462C  0100               	movlb	0	; () banked
  9149  00462E  6F60               	movwf	?_etherTypeToString& (0+255),b
  9150  004630  0E7F               	movlw	high STR_56
  9151  004632  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9152                           
  9153                           ; BSR set to: 0
  9154  004634  0012               	return	
  9155  004636                     
  9156                           ; BSR set to: 0
  9157                           ;uart.c: 183: return "ARP";
  9158                           
  9159                           ; BSR set to: 0
  9160  004636  0EEE               	movlw	low STR_57
  9161  004638  6F60               	movwf	?_etherTypeToString& (0+255),b
  9162  00463A  0E7F               	movlw	high STR_57
  9163  00463C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166  00463E  0012               	return	
  9167  004640                     
  9168                           ; BSR set to: 0
  9169                           ;uart.c: 185: return "Unknown EtherType";
  9170                           
  9171                           ; BSR set to: 0
  9172  004640  0E99               	movlw	low STR_58
  9173  004642  6F60               	movwf	?_etherTypeToString& (0+255),b
  9174  004644  0E7E               	movlw	high STR_58
  9175  004646  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
  9176                           
  9177                           ; BSR set to: 0
  9178                           ;uart.c: 186: }
  9179                           
  9180                           ; BSR set to: 0
  9181  004648  0012               	return	
  9182  00464A                     l794:
  9183                           
  9184                           ; BSR set to: 0
  9185  00464A  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
  9186  00464E  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
  9187                           
  9188                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9189                           ; Switch size 1, requested type "space"
  9190                           ; Number of cases is 1, Range of values is 8 to 8
  9191                           ; switch strategies available:
  9192                           ; Name         Instructions Cycles
  9193                           ; simple_byte            4     3 (average)
  9194                           ;	Chosen strategy is simple_byte
  9195  004652  0100               	movlb	0	; () banked
  9196  004654  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
  9197  004656  0A08               	xorlw	8	; case 8
  9198  004658  A4D8               	btfss	status,2,c
  9199  00465A  D7F2               	goto	l798
  9200                           
  9201                           ; BSR set to: 0
  9202                           ; Switch size 1, requested type "space"
  9203                           ; Number of cases is 2, Range of values is 0 to 6
  9204                           ; switch strategies available:
  9205                           ; Name         Instructions Cycles
  9206                           ; simple_byte            7     4 (average)
  9207                           ;	Chosen strategy is simple_byte
  9208  00465C  5162               	movf	??_etherTypeToString& (0+255),w,b
  9209  00465E  0A00               	xorlw	0	; case 0
  9210  004660  B4D8               	btfsc	status,2,c
  9211  004662  D7E3               	goto	l795
  9212  004664  0A06               	xorlw	6	; case 6
  9213  004666  B4D8               	btfsc	status,2,c
  9214  004668  D7E6               	goto	l797
  9215  00466A  D7EA               	goto	l798
  9216  00466C                     __end_of_etherTypeToString:
  9217                           	opt stack 0
  9218                           tblptru	equ	0xFF8
  9219                           tblptrh	equ	0xFF7
  9220                           tblptrl	equ	0xFF6
  9221                           tablat	equ	0xFF5
  9222                           prodh	equ	0xFF4
  9223                           prodl	equ	0xFF3
  9224                           intcon	equ	0xFF2
  9225                           intcon3	equ	0xFF0
  9226                           postinc0	equ	0xFEE
  9227                           plusw0	equ	0xFEB
  9228                           fsr0h	equ	0xFEA
  9229                           fsr0l	equ	0xFE9
  9230                           wreg	equ	0xFE8
  9231                           indf1	equ	0xFE7
  9232                           postinc1	equ	0xFE6
  9233                           postdec1	equ	0xFE5
  9234                           plusw1	equ	0xFE3
  9235                           fsr1h	equ	0xFE2
  9236                           fsr1l	equ	0xFE1
  9237                           indf2	equ	0xFDF
  9238                           postinc2	equ	0xFDE
  9239                           postdec2	equ	0xFDD
  9240                           plusw2	equ	0xFDB
  9241                           fsr2h	equ	0xFDA
  9242                           fsr2l	equ	0xFD9
  9243                           status	equ	0xFD8
  9244                           
  9245 ;; *************** function _UARTTransmitInt *****************
  9246 ;; Defined at:
  9247 ;;		line 60 in file "src/system/uart.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;  val             4   58[BANK0 ] unsigned long 
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;		None
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9261 ;;      Params:         0       4       0       0       0       0       0       0       0
  9262 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9263 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9264 ;;      Totals:         0       4       0       0       0       0       0       0       0
  9265 ;;Total ram usage:        4 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    6
  9268 ;; This function calls:
  9269 ;;		_UARTTransmitText
  9270 ;;		_intToString
  9271 ;; This function is called by:
  9272 ;;		_ethernet_rxGetNewFrame
  9273 ;;		_main
  9274 ;; This function uses a non-reentrant model
  9275 ;;
  9276                           
  9277                           	psect	text26
  9278  004B76                     __ptext26:
  9279                           	opt stack 0
  9280  004B76                     _UARTTransmitInt:
  9281                           	opt stack 22
  9282                           
  9283                           ;uart.c: 61: UARTTransmitText(intToString(val));
  9284                           
  9285                           ; BSR set to: 0
  9286                           ;incstack = 0
  9287  004B76  C09A  F073         	movff	UARTTransmitInt@val,intToString@val
  9288  004B7A  C09B  F074         	movff	UARTTransmitInt@val+1,intToString@val+1
  9289  004B7E  C09C  F075         	movff	UARTTransmitInt@val+2,intToString@val+2
  9290  004B82  C09D  F076         	movff	UARTTransmitInt@val+3,intToString@val+3
  9291  004B86  EC13  F00C         	call	_intToString	;wreg free
  9292  004B8A  C073  F098         	movff	?_intToString,UARTTransmitText@str
  9293  004B8E  C074  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  9294  004B92  ECFE  F021         	call	_UARTTransmitText	;wreg free
  9295  004B96  0012               	return		;funcret
  9296  004B98                     __end_of_UARTTransmitInt:
  9297                           	opt stack 0
  9298                           tblptru	equ	0xFF8
  9299                           tblptrh	equ	0xFF7
  9300                           tblptrl	equ	0xFF6
  9301                           tablat	equ	0xFF5
  9302                           prodh	equ	0xFF4
  9303                           prodl	equ	0xFF3
  9304                           intcon	equ	0xFF2
  9305                           intcon3	equ	0xFF0
  9306                           postinc0	equ	0xFEE
  9307                           plusw0	equ	0xFEB
  9308                           fsr0h	equ	0xFEA
  9309                           fsr0l	equ	0xFE9
  9310                           wreg	equ	0xFE8
  9311                           indf1	equ	0xFE7
  9312                           postinc1	equ	0xFE6
  9313                           postdec1	equ	0xFE5
  9314                           plusw1	equ	0xFE3
  9315                           fsr1h	equ	0xFE2
  9316                           fsr1l	equ	0xFE1
  9317                           indf2	equ	0xFDF
  9318                           postinc2	equ	0xFDE
  9319                           postdec2	equ	0xFDD
  9320                           plusw2	equ	0xFDB
  9321                           fsr2h	equ	0xFDA
  9322                           fsr2l	equ	0xFD9
  9323                           status	equ	0xFD8
  9324                           
  9325 ;; *************** function _intToString *****************
  9326 ;; Defined at:
  9327 ;;		line 92 in file "src/system/uart.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;  val             4   19[BANK0 ] unsigned long 
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  pointer         1   38[BANK0 ] unsigned char 
  9332 ;;  tenthousands    1   37[BANK0 ] unsigned char 
  9333 ;;  thousands       1   36[BANK0 ] unsigned char 
  9334 ;;  hundreds        1   35[BANK0 ] unsigned char 
  9335 ;;  ones            1   34[BANK0 ] unsigned char 
  9336 ;;  tens            1   33[BANK0 ] unsigned char 
  9337 ;; Return value:  Size  Location     Type
  9338 ;;                  2   19[BANK0 ] PTR unsigned char 
  9339 ;; Registers used:
  9340 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9341 ;; Tracked objects:
  9342 ;;		On entry : 0/0
  9343 ;;		On exit  : 0/0
  9344 ;;		Unchanged: 0/0
  9345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9346 ;;      Params:         0       4       0       0       0       0       0       0       0
  9347 ;;      Locals:         0       6       0       0       0       0       0       0       0
  9348 ;;      Temps:          0      10       0       0       0       0       0       0       0
  9349 ;;      Totals:         0      20       0       0       0       0       0       0       0
  9350 ;;Total ram usage:       20 bytes
  9351 ;; Hardware stack levels used:    1
  9352 ;; Hardware stack levels required when called:    5
  9353 ;; This function calls:
  9354 ;;		___lldiv
  9355 ;;		___llmod
  9356 ;;		___wmul
  9357 ;; This function is called by:
  9358 ;;		_ethernet_rxGetNewFrame
  9359 ;;		_printErrorMessage
  9360 ;;		_UARTTransmitInt
  9361 ;;		_ipv4_handleNewPacket
  9362 ;;		_arpEntryToString
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           	psect	text27
  9367  001826                     __ptext27:
  9368                           	opt stack 0
  9369  001826                     _intToString:
  9370                           	opt stack 24
  9371                           
  9372                           ;uart.c: 93: char static number [10];
  9373                           ;uart.c: 94: uint8_t pointer = 0;
  9374                           
  9375                           ;incstack = 0
  9376  001826  0E00               	movlw	0
  9377  001828  0100               	movlb	0	; () banked
  9378  00182A  6F86               	movwf	intToString@pointer& (0+255),b
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;uart.c: 96: uint8_t tenthousands = val / 10000u;
  9382  00182C  C073  F066         	movff	intToString@val,___lldiv@dividend
  9383  001830  C074  F067         	movff	intToString@val+1,___lldiv@dividend+1
  9384  001834  C075  F068         	movff	intToString@val+2,___lldiv@dividend+2
  9385  001838  C076  F069         	movff	intToString@val+3,___lldiv@dividend+3
  9386  00183C  0E10               	movlw	16
  9387  00183E  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9388  001840  0E27               	movlw	39
  9389  001842  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9390  001844  0E00               	movlw	0
  9391  001846  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9392  001848  0E00               	movlw	0
  9393  00184A  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9394  00184C  ECD9  F01E         	call	___lldiv	;wreg free
  9395  001850  0100               	movlb	0	; () banked
  9396  001852  5166               	movf	?___lldiv& (0+255),w,b
  9397  001854  6F85               	movwf	intToString@tenthousands& (0+255),b
  9398                           
  9399                           ; BSR set to: 0
  9400                           ;uart.c: 97: uint8_t thousands = (val - tenthousands * 10000u) / 1000u;
  9401  001856  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9402  00185A  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9403  00185C  0E27               	movlw	39
  9404  00185E  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9405  001860  0E10               	movlw	16
  9406  001862  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9407  001864  EC11  F025         	call	___wmul	;wreg free
  9408  001868  0100               	movlb	0	; () banked
  9409  00186A  5160               	movf	?___wmul& (0+255),w,b
  9410  00186C  6F77               	movwf	??_intToString& (0+255),b
  9411  00186E  5161               	movf	(?___wmul+1)& (0+255),w,b
  9412  001870  6F78               	movwf	(??_intToString+1)& (0+255),b
  9413  001872  6B79               	clrf	(??_intToString+2)& (0+255),b
  9414  001874  6B7A               	clrf	(??_intToString+3)& (0+255),b
  9415  001876  1F77               	comf	??_intToString& (0+255),f,b
  9416  001878  1F78               	comf	(??_intToString+1)& (0+255),f,b
  9417  00187A  1F79               	comf	(??_intToString+2)& (0+255),f,b
  9418  00187C  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  9419  00187E  2B77               	incf	??_intToString& (0+255),f,b
  9420  001880  0E00               	movlw	0
  9421  001882  2378               	addwfc	(??_intToString+1)& (0+255),f,b
  9422  001884  2379               	addwfc	(??_intToString+2)& (0+255),f,b
  9423  001886  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  9424  001888  5173               	movf	intToString@val& (0+255),w,b
  9425  00188A  2577               	addwf	??_intToString& (0+255),w,b
  9426  00188C  6F66               	movwf	___lldiv@dividend& (0+255),b
  9427  00188E  5174               	movf	(intToString@val+1)& (0+255),w,b
  9428  001890  2178               	addwfc	(??_intToString+1)& (0+255),w,b
  9429  001892  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9430  001894  5175               	movf	(intToString@val+2)& (0+255),w,b
  9431  001896  2179               	addwfc	(??_intToString+2)& (0+255),w,b
  9432  001898  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9433  00189A  5176               	movf	(intToString@val+3)& (0+255),w,b
  9434  00189C  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9435  00189E  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9436  0018A0  0EE8               	movlw	232
  9437  0018A2  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9438  0018A4  0E03               	movlw	3
  9439  0018A6  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9440  0018A8  0E00               	movlw	0
  9441  0018AA  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9442  0018AC  0E00               	movlw	0
  9443  0018AE  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9444  0018B0  ECD9  F01E         	call	___lldiv	;wreg free
  9445  0018B4  0100               	movlb	0	; () banked
  9446  0018B6  5166               	movf	?___lldiv& (0+255),w,b
  9447  0018B8  6F84               	movwf	intToString@thousands& (0+255),b
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;uart.c: 98: uint8_t hundreds = (val - tenthousands * 10000u - thousands * 1000u) / 100u
      +                          ;
  9451  0018BA  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9452  0018BE  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9453  0018C0  0E27               	movlw	39
  9454  0018C2  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9455  0018C4  0E10               	movlw	16
  9456  0018C6  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9457  0018C8  EC11  F025         	call	___wmul	;wreg free
  9458  0018CC  C060  F077         	movff	?___wmul,??_intToString
  9459  0018D0  C061  F078         	movff	?___wmul+1,??_intToString+1
  9460  0018D4  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  9461  0018D8  0100               	movlb	0	; () banked
  9462  0018DA  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9463  0018DC  0E03               	movlw	3
  9464  0018DE  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9465  0018E0  0EE8               	movlw	232
  9466  0018E2  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9467  0018E4  EC11  F025         	call	___wmul	;wreg free
  9468  0018E8  0100               	movlb	0	; () banked
  9469  0018EA  5177               	movf	??_intToString& (0+255),w,b
  9470  0018EC  2560               	addwf	?___wmul& (0+255),w,b
  9471  0018EE  6F79               	movwf	(??_intToString+2)& (0+255),b
  9472  0018F0  5178               	movf	(??_intToString+1)& (0+255),w,b
  9473  0018F2  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9474  0018F4  6F7A               	movwf	(??_intToString+3)& (0+255),b
  9475  0018F6  6B7B               	clrf	(??_intToString+4)& (0+255),b
  9476  0018F8  B0D8               	btfsc	status,0,c
  9477  0018FA  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  9478  0018FC  6B7C               	clrf	(??_intToString+5)& (0+255),b
  9479  0018FE  1F79               	comf	(??_intToString+2)& (0+255),f,b
  9480  001900  1F7A               	comf	(??_intToString+3)& (0+255),f,b
  9481  001902  1F7B               	comf	(??_intToString+4)& (0+255),f,b
  9482  001904  1F7C               	comf	(??_intToString+5)& (0+255),f,b
  9483  001906  2B79               	incf	(??_intToString+2)& (0+255),f,b
  9484  001908  0E00               	movlw	0
  9485  00190A  237A               	addwfc	(??_intToString+3)& (0+255),f,b
  9486  00190C  237B               	addwfc	(??_intToString+4)& (0+255),f,b
  9487  00190E  237C               	addwfc	(??_intToString+5)& (0+255),f,b
  9488  001910  5173               	movf	intToString@val& (0+255),w,b
  9489  001912  2579               	addwf	(??_intToString+2)& (0+255),w,b
  9490  001914  6F66               	movwf	___lldiv@dividend& (0+255),b
  9491  001916  5174               	movf	(intToString@val+1)& (0+255),w,b
  9492  001918  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9493  00191A  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9494  00191C  5175               	movf	(intToString@val+2)& (0+255),w,b
  9495  00191E  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  9496  001920  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9497  001922  5176               	movf	(intToString@val+3)& (0+255),w,b
  9498  001924  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  9499  001926  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9500  001928  0E64               	movlw	100
  9501  00192A  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9502  00192C  0E00               	movlw	0
  9503  00192E  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9504  001930  0E00               	movlw	0
  9505  001932  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9506  001934  0E00               	movlw	0
  9507  001936  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9508  001938  ECD9  F01E         	call	___lldiv	;wreg free
  9509  00193C  0100               	movlb	0	; () banked
  9510  00193E  5166               	movf	?___lldiv& (0+255),w,b
  9511  001940  6F83               	movwf	intToString@hundreds& (0+255),b
  9512                           
  9513                           ; BSR set to: 0
  9514                           ;uart.c: 99: uint8_t tens = (val - tenthousands * 10000u - thousands * 1000u - hundreds 
      +                          * 100u) / 10u;
  9515  001942  C085  F060         	movff	intToString@tenthousands,___wmul@multiplier
  9516  001946  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9517  001948  0E27               	movlw	39
  9518  00194A  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9519  00194C  0E10               	movlw	16
  9520  00194E  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9521  001950  EC11  F025         	call	___wmul	;wreg free
  9522  001954  C060  F077         	movff	?___wmul,??_intToString
  9523  001958  C061  F078         	movff	?___wmul+1,??_intToString+1
  9524  00195C  C084  F060         	movff	intToString@thousands,___wmul@multiplier
  9525  001960  0100               	movlb	0	; () banked
  9526  001962  6B61               	clrf	(___wmul@multiplier+1)& (0+255),b
  9527  001964  0E03               	movlw	3
  9528  001966  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9529  001968  0EE8               	movlw	232
  9530  00196A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  9531  00196C  EC11  F025         	call	___wmul	;wreg free
  9532  001970  0100               	movlb	0	; () banked
  9533  001972  5177               	movf	??_intToString& (0+255),w,b
  9534  001974  2560               	addwf	?___wmul& (0+255),w,b
  9535  001976  6F79               	movwf	(??_intToString+2)& (0+255),b
  9536  001978  5178               	movf	(??_intToString+1)& (0+255),w,b
  9537  00197A  2161               	addwfc	(?___wmul+1)& (0+255),w,b
  9538  00197C  6F7A               	movwf	(??_intToString+3)& (0+255),b
  9539  00197E  6B7B               	clrf	(??_intToString+4)& (0+255),b
  9540  001980  B0D8               	btfsc	status,0,c
  9541  001982  2B7B               	incf	(??_intToString+4)& (0+255),f,b
  9542  001984  6B7C               	clrf	(??_intToString+5)& (0+255),b
  9543  001986  5183               	movf	intToString@hundreds& (0+255),w,b
  9544  001988  0D64               	mullw	100
  9545  00198A  50F3               	movf	prodl,w,c
  9546  00198C  2579               	addwf	(??_intToString+2)& (0+255),w,b
  9547  00198E  6F7D               	movwf	(??_intToString+6)& (0+255),b
  9548  001990  50F4               	movf	prodh,w,c
  9549  001992  217A               	addwfc	(??_intToString+3)& (0+255),w,b
  9550  001994  6F7E               	movwf	(??_intToString+7)& (0+255),b
  9551  001996  0E00               	movlw	0
  9552  001998  217B               	addwfc	(??_intToString+4)& (0+255),w,b
  9553  00199A  6F7F               	movwf	(??_intToString+8)& (0+255),b
  9554  00199C  0E00               	movlw	0
  9555  00199E  217C               	addwfc	(??_intToString+5)& (0+255),w,b
  9556  0019A0  6F80               	movwf	(??_intToString+9)& (0+255),b
  9557  0019A2  1F7D               	comf	(??_intToString+6)& (0+255),f,b
  9558  0019A4  1F7E               	comf	(??_intToString+7)& (0+255),f,b
  9559  0019A6  1F7F               	comf	(??_intToString+8)& (0+255),f,b
  9560  0019A8  1F80               	comf	(??_intToString+9)& (0+255),f,b
  9561  0019AA  2B7D               	incf	(??_intToString+6)& (0+255),f,b
  9562  0019AC  0E00               	movlw	0
  9563  0019AE  237E               	addwfc	(??_intToString+7)& (0+255),f,b
  9564  0019B0  237F               	addwfc	(??_intToString+8)& (0+255),f,b
  9565  0019B2  2380               	addwfc	(??_intToString+9)& (0+255),f,b
  9566  0019B4  5173               	movf	intToString@val& (0+255),w,b
  9567  0019B6  257D               	addwf	(??_intToString+6)& (0+255),w,b
  9568  0019B8  6F66               	movwf	___lldiv@dividend& (0+255),b
  9569  0019BA  5174               	movf	(intToString@val+1)& (0+255),w,b
  9570  0019BC  217E               	addwfc	(??_intToString+7)& (0+255),w,b
  9571  0019BE  6F67               	movwf	(___lldiv@dividend+1)& (0+255),b
  9572  0019C0  5175               	movf	(intToString@val+2)& (0+255),w,b
  9573  0019C2  217F               	addwfc	(??_intToString+8)& (0+255),w,b
  9574  0019C4  6F68               	movwf	(___lldiv@dividend+2)& (0+255),b
  9575  0019C6  5176               	movf	(intToString@val+3)& (0+255),w,b
  9576  0019C8  2180               	addwfc	(??_intToString+9)& (0+255),w,b
  9577  0019CA  6F69               	movwf	(___lldiv@dividend+3)& (0+255),b
  9578  0019CC  0E0A               	movlw	10
  9579  0019CE  6F6A               	movwf	___lldiv@divisor& (0+255),b
  9580  0019D0  0E00               	movlw	0
  9581  0019D2  6F6B               	movwf	(___lldiv@divisor+1)& (0+255),b
  9582  0019D4  0E00               	movlw	0
  9583  0019D6  6F6C               	movwf	(___lldiv@divisor+2)& (0+255),b
  9584  0019D8  0E00               	movlw	0
  9585  0019DA  6F6D               	movwf	(___lldiv@divisor+3)& (0+255),b
  9586  0019DC  ECD9  F01E         	call	___lldiv	;wreg free
  9587  0019E0  0100               	movlb	0	; () banked
  9588  0019E2  5166               	movf	?___lldiv& (0+255),w,b
  9589  0019E4  6F81               	movwf	intToString@tens& (0+255),b
  9590                           
  9591                           ; BSR set to: 0
  9592                           ;uart.c: 100: uint8_t ones = val % 10u;
  9593  0019E6  C073  F060         	movff	intToString@val,___llmod@dividend
  9594  0019EA  C074  F061         	movff	intToString@val+1,___llmod@dividend+1
  9595  0019EE  C075  F062         	movff	intToString@val+2,___llmod@dividend+2
  9596  0019F2  C076  F063         	movff	intToString@val+3,___llmod@dividend+3
  9597  0019F6  0E0A               	movlw	10
  9598  0019F8  6F64               	movwf	___llmod@divisor& (0+255),b
  9599  0019FA  0E00               	movlw	0
  9600  0019FC  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  9601  0019FE  0E00               	movlw	0
  9602  001A00  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  9603  001A02  0E00               	movlw	0
  9604  001A04  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  9605  001A06  EC65  F021         	call	___llmod	;wreg free
  9606  001A0A  0100               	movlb	0	; () banked
  9607  001A0C  5160               	movf	?___llmod& (0+255),w,b
  9608  001A0E  6F82               	movwf	intToString@ones& (0+255),b
  9609                           
  9610                           ; BSR set to: 0
  9611                           ;uart.c: 102: if (val > 9999) {
  9612  001A10  5176               	movf	(intToString@val+3)& (0+255),w,b
  9613  001A12  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9614  001A14  E106               	bnz	u9930
  9615  001A16  0E10               	movlw	16
  9616  001A18  5D73               	subwf	intToString@val& (0+255),w,b
  9617  001A1A  0E27               	movlw	39
  9618  001A1C  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  9619  001A1E  A0D8               	btfss	status,0,c
  9620  001A20  D00C               	goto	l763
  9621  001A22                     u9930:
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;uart.c: 103: number[pointer++] = tenthousands + 0x30u;
  9625  001A22  5186               	movf	intToString@pointer& (0+255),w,b
  9626  001A24  0D01               	mullw	1
  9627  001A26  0ED0               	movlw	low intToString@number
  9628  001A28  24F3               	addwf	prodl,w,c
  9629  001A2A  6ED9               	movwf	fsr2l,c
  9630  001A2C  0E01               	movlw	high intToString@number
  9631  001A2E  20F4               	addwfc	prodh,w,c
  9632  001A30  6EDA               	movwf	fsr2h,c
  9633  001A32  5185               	movf	intToString@tenthousands& (0+255),w,b
  9634  001A34  0F30               	addlw	48
  9635  001A36  6EDF               	movwf	indf2,c
  9636                           
  9637                           ; BSR set to: 0
  9638  001A38  2B86               	incf	intToString@pointer& (0+255),f,b
  9639  001A3A                     l763:
  9640                           
  9641                           ; BSR set to: 0
  9642                           ;uart.c: 104: }
  9643                           ;uart.c: 106: if (val > 999) {
  9644                           
  9645                           ; BSR set to: 0
  9646  001A3A  5176               	movf	(intToString@val+3)& (0+255),w,b
  9647  001A3C  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9648  001A3E  E106               	bnz	u9940
  9649  001A40  0EE8               	movlw	232
  9650  001A42  5D73               	subwf	intToString@val& (0+255),w,b
  9651  001A44  0E03               	movlw	3
  9652  001A46  5974               	subwfb	(intToString@val+1)& (0+255),w,b
  9653  001A48  A0D8               	btfss	status,0,c
  9654  001A4A  D00C               	goto	l764
  9655  001A4C                     u9940:
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;uart.c: 107: number[pointer++] = thousands + 0x30u;
  9659  001A4C  5186               	movf	intToString@pointer& (0+255),w,b
  9660  001A4E  0D01               	mullw	1
  9661  001A50  0ED0               	movlw	low intToString@number
  9662  001A52  24F3               	addwf	prodl,w,c
  9663  001A54  6ED9               	movwf	fsr2l,c
  9664  001A56  0E01               	movlw	high intToString@number
  9665  001A58  20F4               	addwfc	prodh,w,c
  9666  001A5A  6EDA               	movwf	fsr2h,c
  9667  001A5C  5184               	movf	intToString@thousands& (0+255),w,b
  9668  001A5E  0F30               	addlw	48
  9669  001A60  6EDF               	movwf	indf2,c
  9670                           
  9671                           ; BSR set to: 0
  9672  001A62  2B86               	incf	intToString@pointer& (0+255),f,b
  9673  001A64                     l764:
  9674                           
  9675                           ; BSR set to: 0
  9676                           ;uart.c: 108: }
  9677                           ;uart.c: 110: if (val > 99) {
  9678                           
  9679                           ; BSR set to: 0
  9680  001A64  5176               	movf	(intToString@val+3)& (0+255),w,b
  9681  001A66  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9682  001A68  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  9683  001A6A  E104               	bnz	u9950
  9684  001A6C  0E64               	movlw	100
  9685  001A6E  5D73               	subwf	intToString@val& (0+255),w,b
  9686  001A70  A0D8               	btfss	status,0,c
  9687  001A72  D00C               	goto	l765
  9688  001A74                     u9950:
  9689                           
  9690                           ; BSR set to: 0
  9691                           ;uart.c: 111: number[pointer++] = hundreds + 0x30u;
  9692  001A74  5186               	movf	intToString@pointer& (0+255),w,b
  9693  001A76  0D01               	mullw	1
  9694  001A78  0ED0               	movlw	low intToString@number
  9695  001A7A  24F3               	addwf	prodl,w,c
  9696  001A7C  6ED9               	movwf	fsr2l,c
  9697  001A7E  0E01               	movlw	high intToString@number
  9698  001A80  20F4               	addwfc	prodh,w,c
  9699  001A82  6EDA               	movwf	fsr2h,c
  9700  001A84  5183               	movf	intToString@hundreds& (0+255),w,b
  9701  001A86  0F30               	addlw	48
  9702  001A88  6EDF               	movwf	indf2,c
  9703                           
  9704                           ; BSR set to: 0
  9705  001A8A  2B86               	incf	intToString@pointer& (0+255),f,b
  9706  001A8C                     l765:
  9707                           
  9708                           ; BSR set to: 0
  9709                           ;uart.c: 112: }
  9710                           ;uart.c: 114: if (val > 9) {
  9711                           
  9712                           ; BSR set to: 0
  9713  001A8C  5176               	movf	(intToString@val+3)& (0+255),w,b
  9714  001A8E  1175               	iorwf	(intToString@val+2)& (0+255),w,b
  9715  001A90  1174               	iorwf	(intToString@val+1)& (0+255),w,b
  9716  001A92  E104               	bnz	u9960
  9717  001A94  0E0A               	movlw	10
  9718  001A96  5D73               	subwf	intToString@val& (0+255),w,b
  9719  001A98  A0D8               	btfss	status,0,c
  9720  001A9A  D00C               	goto	l766
  9721  001A9C                     u9960:
  9722                           
  9723                           ; BSR set to: 0
  9724                           ;uart.c: 115: number[pointer++] = tens + 0x30u;
  9725  001A9C  5186               	movf	intToString@pointer& (0+255),w,b
  9726  001A9E  0D01               	mullw	1
  9727  001AA0  0ED0               	movlw	low intToString@number
  9728  001AA2  24F3               	addwf	prodl,w,c
  9729  001AA4  6ED9               	movwf	fsr2l,c
  9730  001AA6  0E01               	movlw	high intToString@number
  9731  001AA8  20F4               	addwfc	prodh,w,c
  9732  001AAA  6EDA               	movwf	fsr2h,c
  9733  001AAC  5181               	movf	intToString@tens& (0+255),w,b
  9734  001AAE  0F30               	addlw	48
  9735  001AB0  6EDF               	movwf	indf2,c
  9736                           
  9737                           ; BSR set to: 0
  9738  001AB2  2B86               	incf	intToString@pointer& (0+255),f,b
  9739  001AB4                     l766:
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;uart.c: 116: }
  9743                           ;uart.c: 118: number[pointer++] = ones + 0x30u;
  9744                           
  9745                           ; BSR set to: 0
  9746  001AB4  5186               	movf	intToString@pointer& (0+255),w,b
  9747  001AB6  0D01               	mullw	1
  9748  001AB8  0ED0               	movlw	low intToString@number
  9749  001ABA  24F3               	addwf	prodl,w,c
  9750  001ABC  6ED9               	movwf	fsr2l,c
  9751  001ABE  0E01               	movlw	high intToString@number
  9752  001AC0  20F4               	addwfc	prodh,w,c
  9753  001AC2  6EDA               	movwf	fsr2h,c
  9754  001AC4  5182               	movf	intToString@ones& (0+255),w,b
  9755  001AC6  0F30               	addlw	48
  9756  001AC8  6EDF               	movwf	indf2,c
  9757  001ACA  2B86               	incf	intToString@pointer& (0+255),f,b
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;uart.c: 119: number[pointer++] = '\0';
  9761  001ACC  5186               	movf	intToString@pointer& (0+255),w,b
  9762  001ACE  0D01               	mullw	1
  9763  001AD0  0ED0               	movlw	low intToString@number
  9764  001AD2  24F3               	addwf	prodl,w,c
  9765  001AD4  6ED9               	movwf	fsr2l,c
  9766  001AD6  0E01               	movlw	high intToString@number
  9767  001AD8  20F4               	addwfc	prodh,w,c
  9768  001ADA  6EDA               	movwf	fsr2h,c
  9769  001ADC  0E00               	movlw	0
  9770  001ADE  6EDF               	movwf	indf2,c
  9771                           
  9772                           ; BSR set to: 0
  9773  001AE0  2B86               	incf	intToString@pointer& (0+255),f,b
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;uart.c: 121: return number;
  9777  001AE2  0ED0               	movlw	low intToString@number
  9778  001AE4  6F73               	movwf	?_intToString& (0+255),b
  9779  001AE6  0E01               	movlw	high intToString@number
  9780  001AE8  6F74               	movwf	(?_intToString+1)& (0+255),b
  9781  001AEA  0012               	return	
  9782  001AEC                     __end_of_intToString:
  9783                           	opt stack 0
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon3	equ	0xFF0
  9792                           postinc0	equ	0xFEE
  9793                           plusw0	equ	0xFEB
  9794                           fsr0h	equ	0xFEA
  9795                           fsr0l	equ	0xFE9
  9796                           wreg	equ	0xFE8
  9797                           indf1	equ	0xFE7
  9798                           postinc1	equ	0xFE6
  9799                           postdec1	equ	0xFE5
  9800                           plusw1	equ	0xFE3
  9801                           fsr1h	equ	0xFE2
  9802                           fsr1l	equ	0xFE1
  9803                           indf2	equ	0xFDF
  9804                           postinc2	equ	0xFDE
  9805                           postdec2	equ	0xFDD
  9806                           plusw2	equ	0xFDB
  9807                           fsr2h	equ	0xFDA
  9808                           fsr2l	equ	0xFD9
  9809                           status	equ	0xFD8
  9810                           
  9811 ;; *************** function ___llmod *****************
  9812 ;; Defined at:
  9813 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9814 ;; Parameters:    Size  Location     Type
  9815 ;;  dividend        4    0[BANK0 ] unsigned long 
  9816 ;;  divisor         4    4[BANK0 ] unsigned long 
  9817 ;; Auto vars:     Size  Location     Type
  9818 ;;  counter         1    8[BANK0 ] unsigned char 
  9819 ;; Return value:  Size  Location     Type
  9820 ;;                  4    0[BANK0 ] unsigned long 
  9821 ;; Registers used:
  9822 ;;		wreg, status,2, status,0
  9823 ;; Tracked objects:
  9824 ;;		On entry : 0/0
  9825 ;;		On exit  : 0/0
  9826 ;;		Unchanged: 0/0
  9827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9828 ;;      Params:         0       8       0       0       0       0       0       0       0
  9829 ;;      Locals:         0       1       0       0       0       0       0       0       0
  9830 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9831 ;;      Totals:         0       9       0       0       0       0       0       0       0
  9832 ;;Total ram usage:        9 bytes
  9833 ;; Hardware stack levels used:    1
  9834 ;; Hardware stack levels required when called:    4
  9835 ;; This function calls:
  9836 ;;		Nothing
  9837 ;; This function is called by:
  9838 ;;		_intToString
  9839 ;;		_arpEntryToString
  9840 ;; This function uses a non-reentrant model
  9841 ;;
  9842                           
  9843                           	psect	text28
  9844  0042CA                     __ptext28:
  9845                           	opt stack 0
  9846  0042CA                     ___llmod:
  9847                           	opt stack 24
  9848                           
  9849                           ; BSR set to: 0
  9850                           ;incstack = 0
  9851  0042CA  0100               	movlb	0	; () banked
  9852  0042CC  5164               	movf	___llmod@divisor& (0+255),w,b
  9853  0042CE  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  9854  0042D0  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  9855  0042D2  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  9856  0042D4  B4D8               	btfsc	status,2,c
  9857  0042D6  D024               	goto	l1435
  9858                           
  9859                           ; BSR set to: 0
  9860  0042D8  0E01               	movlw	1
  9861  0042DA  6F68               	movwf	___llmod@counter& (0+255),b
  9862  0042DC  D006               	goto	l1430
  9863  0042DE                     
  9864                           ; BSR set to: 0
  9865                           
  9866                           ; BSR set to: 0
  9867  0042DE  90D8               	bcf	status,0,c
  9868  0042E0  3764               	rlcf	___llmod@divisor& (0+255),f,b
  9869  0042E2  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  9870  0042E4  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  9871  0042E6  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  9872  0042E8  2B68               	incf	___llmod@counter& (0+255),f,b
  9873  0042EA                     l1430:
  9874                           
  9875                           ; BSR set to: 0
  9876                           
  9877                           ; BSR set to: 0
  9878  0042EA  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  9879  0042EC  D7F8               	goto	l1431
  9880  0042EE                     u9530:
  9881                           
  9882                           ; BSR set to: 0
  9883                           
  9884                           ; BSR set to: 0
  9885                           
  9886                           ; BSR set to: 0
  9887  0042EE  5164               	movf	___llmod@divisor& (0+255),w,b
  9888  0042F0  5D60               	subwf	___llmod@dividend& (0+255),w,b
  9889  0042F2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9890  0042F4  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  9891  0042F6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9892  0042F8  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  9893  0042FA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9894  0042FC  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  9895  0042FE  A0D8               	btfss	status,0,c
  9896  004300  D008               	goto	l1434
  9897                           
  9898                           ; BSR set to: 0
  9899  004302  5164               	movf	___llmod@divisor& (0+255),w,b
  9900  004304  5F60               	subwf	___llmod@dividend& (0+255),f,b
  9901  004306  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  9902  004308  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  9903  00430A  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  9904  00430C  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  9905  00430E  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  9906  004310  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  9907  004312                     l1434:
  9908                           
  9909                           ; BSR set to: 0
  9910                           
  9911                           ; BSR set to: 0
  9912  004312  90D8               	bcf	status,0,c
  9913  004314  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  9914  004316  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  9915  004318  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  9916  00431A  3364               	rrcf	___llmod@divisor& (0+255),f,b
  9917                           
  9918                           ; BSR set to: 0
  9919  00431C  2F68               	decfsz	___llmod@counter& (0+255),f,b
  9920  00431E  D7E7               	goto	u9530
  9921  004320                     l1435:
  9922                           
  9923                           ; BSR set to: 0
  9924                           
  9925                           ; BSR set to: 0
  9926  004320  C060  F060         	movff	___llmod@dividend,?___llmod
  9927  004324  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  9928  004328  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  9929  00432C  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  9930                           
  9931                           ; BSR set to: 0
  9932  004330  0012               	return		;funcret
  9933  004332                     __end_of___llmod:
  9934                           	opt stack 0
  9935                           tblptru	equ	0xFF8
  9936                           tblptrh	equ	0xFF7
  9937                           tblptrl	equ	0xFF6
  9938                           tablat	equ	0xFF5
  9939                           prodh	equ	0xFF4
  9940                           prodl	equ	0xFF3
  9941                           intcon	equ	0xFF2
  9942                           intcon3	equ	0xFF0
  9943                           postinc0	equ	0xFEE
  9944                           plusw0	equ	0xFEB
  9945                           fsr0h	equ	0xFEA
  9946                           fsr0l	equ	0xFE9
  9947                           wreg	equ	0xFE8
  9948                           indf1	equ	0xFE7
  9949                           postinc1	equ	0xFE6
  9950                           postdec1	equ	0xFE5
  9951                           plusw1	equ	0xFE3
  9952                           fsr1h	equ	0xFE2
  9953                           fsr1l	equ	0xFE1
  9954                           indf2	equ	0xFDF
  9955                           postinc2	equ	0xFDE
  9956                           postdec2	equ	0xFDD
  9957                           plusw2	equ	0xFDB
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function ___lldiv *****************
  9963 ;; Defined at:
  9964 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  dividend        4    6[BANK0 ] unsigned long 
  9967 ;;  divisor         4   10[BANK0 ] unsigned long 
  9968 ;; Auto vars:     Size  Location     Type
  9969 ;;  quotient        4   14[BANK0 ] unsigned long 
  9970 ;;  counter         1   18[BANK0 ] unsigned char 
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  4    6[BANK0 ] unsigned long 
  9973 ;; Registers used:
  9974 ;;		wreg, status,2, status,0
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9980 ;;      Params:         0       8       0       0       0       0       0       0       0
  9981 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9982 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9983 ;;      Totals:         0      13       0       0       0       0       0       0       0
  9984 ;;Total ram usage:       13 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    4
  9987 ;; This function calls:
  9988 ;;		Nothing
  9989 ;; This function is called by:
  9990 ;;		_intToString
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text29
  9995  003DB2                     __ptext29:
  9996                           	opt stack 0
  9997  003DB2                     ___lldiv:
  9998                           	opt stack 24
  9999                           
 10000                           ; BSR set to: 0
 10001                           ;incstack = 0
 10002  003DB2  0E00               	movlw	0
 10003  003DB4  0100               	movlb	0	; () banked
 10004  003DB6  6F6E               	movwf	___lldiv@quotient& (0+255),b
 10005  003DB8  0E00               	movlw	0
 10006  003DBA  6F6F               	movwf	(___lldiv@quotient+1)& (0+255),b
 10007  003DBC  0E00               	movlw	0
 10008  003DBE  6F70               	movwf	(___lldiv@quotient+2)& (0+255),b
 10009  003DC0  0E00               	movlw	0
 10010  003DC2  6F71               	movwf	(___lldiv@quotient+3)& (0+255),b
 10011                           
 10012                           ; BSR set to: 0
 10013  003DC4  516A               	movf	___lldiv@divisor& (0+255),w,b
 10014  003DC6  116B               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10015  003DC8  116C               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10016  003DCA  116D               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10017  003DCC  B4D8               	btfsc	status,2,c
 10018  003DCE  D02A               	goto	l1425
 10019                           
 10020                           ; BSR set to: 0
 10021  003DD0  0E01               	movlw	1
 10022  003DD2  6F72               	movwf	___lldiv@counter& (0+255),b
 10023  003DD4  D006               	goto	l1420
 10024  003DD6                     
 10025                           ; BSR set to: 0
 10026                           
 10027                           ; BSR set to: 0
 10028  003DD6  90D8               	bcf	status,0,c
 10029  003DD8  376A               	rlcf	___lldiv@divisor& (0+255),f,b
 10030  003DDA  376B               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10031  003DDC  376C               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10032  003DDE  376D               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10033  003DE0  2B72               	incf	___lldiv@counter& (0+255),f,b
 10034  003DE2                     l1420:
 10035                           
 10036                           ; BSR set to: 0
 10037                           
 10038                           ; BSR set to: 0
 10039  003DE2  AF6D               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10040  003DE4  D7F8               	goto	l1421
 10041  003DE6                     u9500:
 10042                           
 10043                           ; BSR set to: 0
 10044                           
 10045                           ; BSR set to: 0
 10046                           
 10047                           ; BSR set to: 0
 10048  003DE6  90D8               	bcf	status,0,c
 10049  003DE8  376E               	rlcf	___lldiv@quotient& (0+255),f,b
 10050  003DEA  376F               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10051  003DEC  3770               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10052  003DEE  3771               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10053                           
 10054                           ; BSR set to: 0
 10055  003DF0  516A               	movf	___lldiv@divisor& (0+255),w,b
 10056  003DF2  5D66               	subwf	___lldiv@dividend& (0+255),w,b
 10057  003DF4  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10058  003DF6  5967               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10059  003DF8  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10060  003DFA  5968               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10061  003DFC  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10062  003DFE  5969               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10063  003E00  A0D8               	btfss	status,0,c
 10064  003E02  D009               	goto	l1424
 10065                           
 10066                           ; BSR set to: 0
 10067  003E04  516A               	movf	___lldiv@divisor& (0+255),w,b
 10068  003E06  5F66               	subwf	___lldiv@dividend& (0+255),f,b
 10069  003E08  516B               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10070  003E0A  5B67               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10071  003E0C  516C               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10072  003E0E  5B68               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10073  003E10  516D               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10074  003E12  5B69               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10075                           
 10076                           ; BSR set to: 0
 10077  003E14  816E               	bsf	___lldiv@quotient& (0+255),0,b
 10078  003E16                     l1424:
 10079                           
 10080                           ; BSR set to: 0
 10081                           
 10082                           ; BSR set to: 0
 10083  003E16  90D8               	bcf	status,0,c
 10084  003E18  336D               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10085  003E1A  336C               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10086  003E1C  336B               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10087  003E1E  336A               	rrcf	___lldiv@divisor& (0+255),f,b
 10088                           
 10089                           ; BSR set to: 0
 10090  003E20  2F72               	decfsz	___lldiv@counter& (0+255),f,b
 10091  003E22  D7E1               	goto	u9500
 10092  003E24                     l1425:
 10093                           
 10094                           ; BSR set to: 0
 10095                           
 10096                           ; BSR set to: 0
 10097  003E24  C06E  F066         	movff	___lldiv@quotient,?___lldiv
 10098  003E28  C06F  F067         	movff	___lldiv@quotient+1,?___lldiv+1
 10099  003E2C  C070  F068         	movff	___lldiv@quotient+2,?___lldiv+2
 10100  003E30  C071  F069         	movff	___lldiv@quotient+3,?___lldiv+3
 10101                           
 10102                           ; BSR set to: 0
 10103  003E34  0012               	return		;funcret
 10104  003E36                     __end_of___lldiv:
 10105                           	opt stack 0
 10106                           tblptru	equ	0xFF8
 10107                           tblptrh	equ	0xFF7
 10108                           tblptrl	equ	0xFF6
 10109                           tablat	equ	0xFF5
 10110                           prodh	equ	0xFF4
 10111                           prodl	equ	0xFF3
 10112                           intcon	equ	0xFF2
 10113                           intcon3	equ	0xFF0
 10114                           postinc0	equ	0xFEE
 10115                           plusw0	equ	0xFEB
 10116                           fsr0h	equ	0xFEA
 10117                           fsr0l	equ	0xFE9
 10118                           wreg	equ	0xFE8
 10119                           indf1	equ	0xFE7
 10120                           postinc1	equ	0xFE6
 10121                           postdec1	equ	0xFE5
 10122                           plusw1	equ	0xFE3
 10123                           fsr1h	equ	0xFE2
 10124                           fsr1l	equ	0xFE1
 10125                           indf2	equ	0xFDF
 10126                           postinc2	equ	0xFDE
 10127                           postdec2	equ	0xFDD
 10128                           plusw2	equ	0xFDB
 10129                           fsr2h	equ	0xFDA
 10130                           fsr2l	equ	0xFD9
 10131                           status	equ	0xFD8
 10132                           
 10133 ;; *************** function _ARP_handleNewPacket *****************
 10134 ;; Defined at:
 10135 ;;		line 28 in file "src/stack/protocols/arp.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;  frame           2  152[BANK0 ] PTR struct ethernetFrame
 10138 ;;		 -> stack.ethernet(15), stack(113), 
 10139 ;; Auto vars:     Size  Location     Type
 10140 ;;  arp            32   88[BANK1 ] struct ARP_message
 10141 ;; Return value:  Size  Location     Type
 10142 ;;                  1    wreg      void 
 10143 ;; Registers used:
 10144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10145 ;; Tracked objects:
 10146 ;;		On entry : 0/0
 10147 ;;		On exit  : 0/0
 10148 ;;		Unchanged: 0/0
 10149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10150 ;;      Params:         0       2       0       0       0       0       0       0       0
 10151 ;;      Locals:         0       0      32       0       0       0       0       0       0
 10152 ;;      Temps:          0       2       0       0       0       0       0       0       0
 10153 ;;      Totals:         0       4      32       0       0       0       0       0       0
 10154 ;;Total ram usage:       36 bytes
 10155 ;; Hardware stack levels used:    1
 10156 ;; Hardware stack levels required when called:   11
 10157 ;; This function calls:
 10158 ;;		_ARP_parseFromRXBuffer
 10159 ;;		_ARP_replyIfNeeded
 10160 ;;		_ARP_setNewEntry
 10161 ;;		_UARTTransmitText
 10162 ;;		_ethernetController_dropPacket
 10163 ;;		_getSeconds
 10164 ;;		_ipAdressToString
 10165 ;;		_macToString
 10166 ;; This function is called by:
 10167 ;;		_ethernet_rxGetNewFrame
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text30
 10172  00252C                     __ptext30:
 10173                           	opt stack 0
 10174  00252C                     _ARP_handleNewPacket:
 10175                           	opt stack 17
 10176                           
 10177                           ;arp.c: 29: ARP_message_t arp;
 10178                           ;arp.c: 30: if (frame->ethertype != ETHERTYPE_ARP) {
 10179                           
 10180                           ; BSR set to: 0
 10181                           ;incstack = 0
 10182  00252C  0100               	movlb	0	; () banked
 10183  00252E  EE20 F00E          	lfsr	2,14
 10184  002532  51F8               	movf	ARP_handleNewPacket@frame& (0+255),w,b
 10185  002534  26D9               	addwf	fsr2l,f,c
 10186  002536  51F9               	movf	(ARP_handleNewPacket@frame+1)& (0+255),w,b
 10187  002538  22DA               	addwfc	fsr2h,f,c
 10188  00253A  0E06               	movlw	6
 10189  00253C  18DE               	xorwf	postinc2,w,c
 10190  00253E  E104               	bnz	u10420
 10191  002540  0E08               	movlw	8
 10192  002542  18DE               	xorwf	postinc2,w,c
 10193  002544  B4D8               	btfsc	status,2,c
 10194  002546  D007               	goto	l887
 10195  002548                     u10420:
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;arp.c: 31: ethernetController_dropPacket(frame);
 10199  002548  C0F8  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
 10200  00254C  C0F9  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
 10201  002550  EC9A  F023         	call	_ethernetController_dropPacket	;wreg free
 10202                           
 10203                           ;arp.c: 32: return;
 10204  002554  0012               	return	
 10205  002556                     l887:
 10206                           
 10207                           ;arp.c: 33: }
 10208                           ;arp.c: 35: arp = ARP_parseFromRXBuffer(frame);
 10209  002556  C0F8  F077         	movff	ARP_handleNewPacket@frame,ARP_parseFromRXBuffer@frame
 10210  00255A  C0F9  F078         	movff	ARP_handleNewPacket@frame+1,ARP_parseFromRXBuffer@frame+1
 10211  00255E  EC2A  F005         	call	_ARP_parseFromRXBuffer	;wreg free
 10212  002562  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
 10213  002566  0E1F               	movlw	31
 10214  002568                     u10431:
 10215  002568  CFEB FFDB          	movff	plusw0,plusw2
 10216  00256C  06E8               	decf	wreg,f,c
 10217  00256E  E2FC               	bc	u10431
 10218                           
 10219                           ;arp.c: 36: if (arp.err.code != (uint16_t)0) {
 10220  002570  0101               	movlb	1	; () banked
 10221  002572  5176               	movf	(ARP_handleNewPacket@arp+30)& (0+255),w,b
 10222  002574  1177               	iorwf	(ARP_handleNewPacket@arp+31)& (0+255),w,b
 10223  002576  B4D8               	btfsc	status,2,c
 10224  002578  D00E               	goto	l889
 10225                           
 10226                           ; BSR set to: 1
 10227                           ;arp.c: 37: ethernetController_dropPacket(frame);
 10228  00257A  C0F8  F072         	movff	ARP_handleNewPacket@frame,ethernetController_dropPacket@frame
 10229  00257E  C0F9  F073         	movff	ARP_handleNewPacket@frame+1,ethernetController_dropPacket@frame+1
 10230  002582  EC9A  F023         	call	_ethernetController_dropPacket	;wreg free
 10231                           
 10232                           ;arp.c: 38: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 10233  002586  0E86               	movlw	low STR_63
 10234  002588  0100               	movlb	0	; () banked
 10235  00258A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10236  00258C  0E7C               	movlw	high STR_63
 10237  00258E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10238  002590  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10239                           
 10240                           ;arp.c: 39: return;
 10241  002594  0012               	return	
 10242  002596                     l889:
 10243                           
 10244                           ;arp.c: 40: }
 10245                           ;arp.c: 41: UARTTransmitText("[");
 10246  002596  0ED0               	movlw	low (STR_66+3)
 10247  002598  0100               	movlb	0	; () banked
 10248  00259A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10249  00259C  0E7F               	movlw	high (STR_66+3)
 10250  00259E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10251  0025A0  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10252                           
 10253                           ;arp.c: 42: UARTTransmitText(macToString(arp.senderMACAddress));
 10254  0025A4  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
 10255  0025A8  EE00  F07A         	lfsr	0,macToString@addr
 10256  0025AC  0E05               	movlw	5
 10257  0025AE                     u10451:
 10258  0025AE  CFDB FFEB          	movff	plusw2,plusw0
 10259  0025B2  06E8               	decf	wreg,f,c
 10260  0025B4  E2FC               	bc	u10451
 10261  0025B6  EC94  F018         	call	_macToString	;wreg free
 10262  0025BA  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10263  0025BE  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10264  0025C2  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10265                           
 10266                           ;arp.c: 43: UARTTransmitText(", ");
 10267  0025C6  0E37               	movlw	low (STR_41+17)
 10268  0025C8  0100               	movlb	0	; () banked
 10269  0025CA  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10270  0025CC  0E7E               	movlw	high (STR_41+17)
 10271  0025CE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10272  0025D0  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10273                           
 10274                           ;arp.c: 44: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 10275  0025D4  C166  F067         	movff	ARP_handleNewPacket@arp+14,ipAdressToString@ip
 10276  0025D8  C167  F068         	movff	ARP_handleNewPacket@arp+15,ipAdressToString@ip+1
 10277  0025DC  C168  F069         	movff	ARP_handleNewPacket@arp+16,ipAdressToString@ip+2
 10278  0025E0  C169  F06A         	movff	ARP_handleNewPacket@arp+17,ipAdressToString@ip+3
 10279  0025E4  ECD7  F00F         	call	_ipAdressToString	;wreg free
 10280  0025E8  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10281  0025EC  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10282  0025F0  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10283                           
 10284                           ;arp.c: 45: UARTTransmitText("]->[");
 10285  0025F4  0ECD               	movlw	low STR_66
 10286  0025F6  0100               	movlb	0	; () banked
 10287  0025F8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10288  0025FA  0E7F               	movlw	high STR_66
 10289  0025FC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10290  0025FE  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10291                           
 10292                           ;arp.c: 46: UARTTransmitText(macToString(arp.targetMACAddress));
 10293  002602  EE21  F06A         	lfsr	2,ARP_handleNewPacket@arp+18
 10294  002606  EE00  F07A         	lfsr	0,macToString@addr
 10295  00260A  0E05               	movlw	5
 10296  00260C                     u10461:
 10297  00260C  CFDB FFEB          	movff	plusw2,plusw0
 10298  002610  06E8               	decf	wreg,f,c
 10299  002612  E2FC               	bc	u10461
 10300  002614  EC94  F018         	call	_macToString	;wreg free
 10301  002618  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10302  00261C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10303  002620  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10304                           
 10305                           ;arp.c: 47: UARTTransmitText(", ");
 10306  002624  0E37               	movlw	low (STR_41+17)
 10307  002626  0100               	movlb	0	; () banked
 10308  002628  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10309  00262A  0E7E               	movlw	high (STR_41+17)
 10310  00262C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10311  00262E  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10312                           
 10313                           ;arp.c: 48: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 10314  002632  C170  F067         	movff	ARP_handleNewPacket@arp+24,ipAdressToString@ip
 10315  002636  C171  F068         	movff	ARP_handleNewPacket@arp+25,ipAdressToString@ip+1
 10316  00263A  C172  F069         	movff	ARP_handleNewPacket@arp+26,ipAdressToString@ip+2
 10317  00263E  C173  F06A         	movff	ARP_handleNewPacket@arp+27,ipAdressToString@ip+3
 10318  002642  ECD7  F00F         	call	_ipAdressToString	;wreg free
 10319  002646  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10320  00264A  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10321  00264E  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10322                           
 10323                           ;arp.c: 49: UARTTransmitText("]");
 10324  002652  0EFC               	movlw	low (STR_20+1)
 10325  002654  0100               	movlb	0	; () banked
 10326  002656  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10327  002658  0E7F               	movlw	high (STR_20+1)
 10328  00265A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10329  00265C  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10330                           
 10331                           ;arp.c: 50: if (arp.fIsProbe)
 10332  002660  0101               	movlb	1	; () banked
 10333  002662  A374               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),1,b
 10334  002664  D007               	goto	l890
 10335                           
 10336                           ; BSR set to: 1
 10337                           ;arp.c: 51: UARTTransmitText("[IsProbe]");
 10338  002666  0E86               	movlw	low STR_69
 10339  002668  0100               	movlb	0	; () banked
 10340  00266A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10341  00266C  0E7F               	movlw	high STR_69
 10342  00266E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10343  002670  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10344  002674                     l890:
 10345                           
 10346                           ;arp.c: 52: if (arp.fIsGratuitous)
 10347  002674  0101               	movlb	1	; () banked
 10348  002676  A174               	btfss	(ARP_handleNewPacket@arp+28)& (0+255),0,b
 10349  002678  D007               	goto	l891
 10350                           
 10351                           ; BSR set to: 1
 10352                           ;arp.c: 53: UARTTransmitText("[IsGratuitous]");
 10353  00267A  0E1E               	movlw	low STR_70
 10354  00267C  0100               	movlb	0	; () banked
 10355  00267E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10356  002680  0E7F               	movlw	high STR_70
 10357  002682  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10358  002684  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10359  002688                     l891:
 10360                           
 10361                           ;arp.c: 55: ARP_replyIfNeeded(arp);
 10362  002688  EE21  F058         	lfsr	2,ARP_handleNewPacket@arp
 10363  00268C  EE01  F000         	lfsr	0,ARP_replyIfNeeded@request
 10364  002690  0E1F               	movlw	31
 10365  002692                     u10491:
 10366  002692  CFDB FFEB          	movff	plusw2,plusw0
 10367  002696  06E8               	decf	wreg,f,c
 10368  002698  E2FC               	bc	u10491
 10369  00269A  ECE9  F014         	call	_ARP_replyIfNeeded	;wreg free
 10370                           
 10371                           ;arp.c: 56: ARP_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getSeconds());
 10372  00269E  EE21  F060         	lfsr	2,ARP_handleNewPacket@arp+8
 10373  0026A2  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 10374  0026A6  0E05               	movlw	5
 10375  0026A8                     u10501:
 10376  0026A8  CFDB FFEB          	movff	plusw2,plusw0
 10377  0026AC  06E8               	decf	wreg,f,c
 10378  0026AE  E2FC               	bc	u10501
 10379  0026B0  C166  F06A         	movff	ARP_handleNewPacket@arp+14,ARP_setNewEntry@ip
 10380  0026B4  C167  F06B         	movff	ARP_handleNewPacket@arp+15,ARP_setNewEntry@ip+1
 10381  0026B8  C168  F06C         	movff	ARP_handleNewPacket@arp+16,ARP_setNewEntry@ip+2
 10382  0026BC  C169  F06D         	movff	ARP_handleNewPacket@arp+17,ARP_setNewEntry@ip+3
 10383  0026C0  EC3E  F026         	call	_getSeconds	;wreg free
 10384  0026C4  C060  F06E         	movff	?_getSeconds,ARP_setNewEntry@timestamp
 10385  0026C8  C061  F06F         	movff	?_getSeconds+1,ARP_setNewEntry@timestamp+1
 10386  0026CC  C062  F070         	movff	?_getSeconds+2,ARP_setNewEntry@timestamp+2
 10387  0026D0  C063  F071         	movff	?_getSeconds+3,ARP_setNewEntry@timestamp+3
 10388  0026D4  EC13  F01A         	call	_ARP_setNewEntry	;wreg free
 10389  0026D8  0012               	return		;funcret
 10390  0026DA                     __end_of_ARP_handleNewPacket:
 10391                           	opt stack 0
 10392                           tblptru	equ	0xFF8
 10393                           tblptrh	equ	0xFF7
 10394                           tblptrl	equ	0xFF6
 10395                           tablat	equ	0xFF5
 10396                           prodh	equ	0xFF4
 10397                           prodl	equ	0xFF3
 10398                           intcon	equ	0xFF2
 10399                           intcon3	equ	0xFF0
 10400                           postinc0	equ	0xFEE
 10401                           plusw0	equ	0xFEB
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           indf1	equ	0xFE7
 10406                           postinc1	equ	0xFE6
 10407                           postdec1	equ	0xFE5
 10408                           plusw1	equ	0xFE3
 10409                           fsr1h	equ	0xFE2
 10410                           fsr1l	equ	0xFE1
 10411                           indf2	equ	0xFDF
 10412                           postinc2	equ	0xFDE
 10413                           postdec2	equ	0xFDD
 10414                           plusw2	equ	0xFDB
 10415                           fsr2h	equ	0xFDA
 10416                           fsr2l	equ	0xFD9
 10417                           status	equ	0xFD8
 10418                           
 10419 ;; *************** function _getSeconds *****************
 10420 ;; Defined at:
 10421 ;;		line 41 in file "src/stack/stack.c"
 10422 ;; Parameters:    Size  Location     Type
 10423 ;;		None
 10424 ;; Auto vars:     Size  Location     Type
 10425 ;;		None
 10426 ;; Return value:  Size  Location     Type
 10427 ;;                  4    0[BANK0 ] unsigned long 
 10428 ;; Registers used:
 10429 ;;		None
 10430 ;; Tracked objects:
 10431 ;;		On entry : 0/0
 10432 ;;		On exit  : 0/0
 10433 ;;		Unchanged: 0/0
 10434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10435 ;;      Params:         0       4       0       0       0       0       0       0       0
 10436 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10437 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10438 ;;      Totals:         0       4       0       0       0       0       0       0       0
 10439 ;;Total ram usage:        4 bytes
 10440 ;; Hardware stack levels used:    1
 10441 ;; Hardware stack levels required when called:    4
 10442 ;; This function calls:
 10443 ;;		Nothing
 10444 ;; This function is called by:
 10445 ;;		_ARP_handleNewPacket
 10446 ;;		_ARP_checkForEntry
 10447 ;;		_ipv4_sendFrame
 10448 ;; This function uses a non-reentrant model
 10449 ;;
 10450                           
 10451                           	psect	text31
 10452  004C7C                     __ptext31:
 10453                           	opt stack 0
 10454  004C7C                     _getSeconds:
 10455                           	opt stack 24
 10456                           
 10457                           ;stack.c: 42: return seconds;
 10458                           
 10459                           ;incstack = 0
 10460  004C7C  C038  F060         	movff	_seconds,?_getSeconds
 10461  004C80  C039  F061         	movff	_seconds+1,?_getSeconds+1
 10462  004C84  C03A  F062         	movff	_seconds+2,?_getSeconds+2
 10463  004C88  C03B  F063         	movff	_seconds+3,?_getSeconds+3
 10464  004C8C  0012               	return		;funcret
 10465  004C8E                     __end_of_getSeconds:
 10466                           	opt stack 0
 10467                           tblptru	equ	0xFF8
 10468                           tblptrh	equ	0xFF7
 10469                           tblptrl	equ	0xFF6
 10470                           tablat	equ	0xFF5
 10471                           prodh	equ	0xFF4
 10472                           prodl	equ	0xFF3
 10473                           intcon	equ	0xFF2
 10474                           intcon3	equ	0xFF0
 10475                           postinc0	equ	0xFEE
 10476                           plusw0	equ	0xFEB
 10477                           fsr0h	equ	0xFEA
 10478                           fsr0l	equ	0xFE9
 10479                           wreg	equ	0xFE8
 10480                           indf1	equ	0xFE7
 10481                           postinc1	equ	0xFE6
 10482                           postdec1	equ	0xFE5
 10483                           plusw1	equ	0xFE3
 10484                           fsr1h	equ	0xFE2
 10485                           fsr1l	equ	0xFE1
 10486                           indf2	equ	0xFDF
 10487                           postinc2	equ	0xFDE
 10488                           postdec2	equ	0xFDD
 10489                           plusw2	equ	0xFDB
 10490                           fsr2h	equ	0xFDA
 10491                           fsr2l	equ	0xFD9
 10492                           status	equ	0xFD8
 10493                           
 10494 ;; *************** function _ethernetController_dropPacket *****************
 10495 ;; Defined at:
 10496 ;;		line 382 in file "src/enc424j600/ENC424J600.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  frame           2   18[BANK0 ] PTR struct ethernetFrame
 10499 ;;		 -> stack.ethernet(15), stack(113), 
 10500 ;; Auto vars:     Size  Location     Type
 10501 ;;		None
 10502 ;; Return value:  Size  Location     Type
 10503 ;;                  1    wreg      void 
 10504 ;; Registers used:
 10505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10506 ;; Tracked objects:
 10507 ;;		On entry : 0/0
 10508 ;;		On exit  : 0/0
 10509 ;;		Unchanged: 0/0
 10510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10511 ;;      Params:         0       2       0       0       0       0       0       0       0
 10512 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10513 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10514 ;;      Totals:         0       2       0       0       0       0       0       0       0
 10515 ;;Total ram usage:        2 bytes
 10516 ;; Hardware stack levels used:    1
 10517 ;; Hardware stack levels required when called:    8
 10518 ;; This function calls:
 10519 ;;		_ENC424J600_setRXTailPointer
 10520 ;;		_ENC424J600_writeSingleByte
 10521 ;;		_ethernetController_getNextPacketPointer
 10522 ;; This function is called by:
 10523 ;;		_ethernet_rxGetNewFrame
 10524 ;;		_ARP_handleNewPacket
 10525 ;;		_ipv4_handleNewPacket
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           	psect	text32
 10530  004734                     __ptext32:
 10531                           	opt stack 0
 10532  004734                     _ethernetController_dropPacket:
 10533                           	opt stack 19
 10534                           
 10535                           ;ENC424J600.c: 397: if (ethernetController_getNextPacketPointer() == 0x3000) {
 10536                           
 10537                           ;incstack = 0
 10538  004734  EC61  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 10539  004738  0E30               	movlw	48
 10540  00473A  0100               	movlb	0	; () banked
 10541  00473C  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10542  00473E  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10543  004740  A4D8               	btfss	status,2,c
 10544  004742  D007               	goto	l187
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;ENC424J600.c: 398: ENC424J600_setRXTailPointer(0x5FFF - 1);
 10548  004744  0E5F               	movlw	95
 10549  004746  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10550  004748  0EFE               	movlw	254
 10551  00474A  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10552  00474C  ECD3  F024         	call	_ENC424J600_setRXTailPointer	;wreg free
 10553                           
 10554                           ;ENC424J600.c: 399: } else {
 10555  004750  D00B               	goto	l188
 10556  004752                     l187:
 10557                           
 10558                           ;ENC424J600.c: 400: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 10559  004752  EC61  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 10560  004756  0EFE               	movlw	254
 10561  004758  0100               	movlb	0	; () banked
 10562  00475A  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 10563  00475C  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 10564  00475E  0EFF               	movlw	255
 10565  004760  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 10566  004762  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 10567  004764  ECD3  F024         	call	_ENC424J600_setRXTailPointer	;wreg free
 10568  004768                     l188:
 10569                           
 10570                           ;ENC424J600.c: 401: }
 10571                           ;ENC424J600.c: 403: ENC424J600_writeSingleByte(0b11001100);
 10572  004768  0ECC               	movlw	204
 10573  00476A  EC20  F026         	call	_ENC424J600_writeSingleByte
 10574  00476E  0012               	return		;funcret
 10575  004770                     __end_of_ethernetController_dropPacket:
 10576                           	opt stack 0
 10577                           tblptru	equ	0xFF8
 10578                           tblptrh	equ	0xFF7
 10579                           tblptrl	equ	0xFF6
 10580                           tablat	equ	0xFF5
 10581                           prodh	equ	0xFF4
 10582                           prodl	equ	0xFF3
 10583                           intcon	equ	0xFF2
 10584                           intcon3	equ	0xFF0
 10585                           postinc0	equ	0xFEE
 10586                           plusw0	equ	0xFEB
 10587                           fsr0h	equ	0xFEA
 10588                           fsr0l	equ	0xFE9
 10589                           wreg	equ	0xFE8
 10590                           indf1	equ	0xFE7
 10591                           postinc1	equ	0xFE6
 10592                           postdec1	equ	0xFE5
 10593                           plusw1	equ	0xFE3
 10594                           fsr1h	equ	0xFE2
 10595                           fsr1l	equ	0xFE1
 10596                           indf2	equ	0xFDF
 10597                           postinc2	equ	0xFDE
 10598                           postdec2	equ	0xFDD
 10599                           plusw2	equ	0xFDB
 10600                           fsr2h	equ	0xFDA
 10601                           fsr2l	equ	0xFD9
 10602                           status	equ	0xFD8
 10603                           
 10604 ;; *************** function _ARP_replyIfNeeded *****************
 10605 ;; Defined at:
 10606 ;;		line 132 in file "src/stack/protocols/arp.c"
 10607 ;; Parameters:    Size  Location     Type
 10608 ;;  request        32    0[BANK1 ] struct ARP_message
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  reply          32   56[BANK1 ] struct ARP_message
 10611 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 10612 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 10613 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 10614 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 10615 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 10616 ;; Return value:  Size  Location     Type
 10617 ;;                  1    wreg      void 
 10618 ;; Registers used:
 10619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10620 ;; Tracked objects:
 10621 ;;		On entry : 0/0
 10622 ;;		On exit  : 0/0
 10623 ;;		Unchanged: 0/0
 10624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10625 ;;      Params:         0       0      32       0       0       0       0       0       0
 10626 ;;      Locals:         0       0      56       0       0       0       0       0       0
 10627 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10628 ;;      Totals:         0       0      88       0       0       0       0       0       0
 10629 ;;Total ram usage:       88 bytes
 10630 ;; Hardware stack levels used:    1
 10631 ;; Hardware stack levels required when called:   10
 10632 ;; This function calls:
 10633 ;;		_ARP_send
 10634 ;;		_UARTTransmitText
 10635 ;;		_ethernetController_getMacAddress
 10636 ;;		_ipAdressToString
 10637 ;;		_ipv4_cmp
 10638 ;;		_ipv4_getIPSourceAddress
 10639 ;;		_macToString
 10640 ;; This function is called by:
 10641 ;;		_ARP_handleNewPacket
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text33
 10646  0029D2                     __ptext33:
 10647                           	opt stack 0
 10648  0029D2                     _ARP_replyIfNeeded:
 10649                           	opt stack 17
 10650                           
 10651                           ;arp.c: 133: if (request.operation != ARP_REQUEST)
 10652                           
 10653                           ;incstack = 0
 10654  0029D2  0101               	movlb	1	; () banked
 10655  0029D4  0506               	decf	(ARP_replyIfNeeded@request+6)& (0+255),w,b
 10656  0029D6  1107               	iorwf	(ARP_replyIfNeeded@request+7)& (0+255),w,b
 10657  0029D8  A4D8               	btfss	status,2,c
 10658  0029DA  0012               	return	
 10659                           
 10660                           ; BSR set to: 1
 10661                           ;arp.c: 136: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 10662                           
 10663                           ; BSR set to: 1
 10664                           
 10665                           ; BSR set to: 1
 10666                           ;arp.c: 134: return;
 10667  0029DC  EC47  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 10668  0029E0  C060  F134         	movff	?_ipv4_getIPSourceAddress,ARP_replyIfNeeded@myIP
 10669  0029E4  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,ARP_replyIfNeeded@myIP+1
 10670  0029E8  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,ARP_replyIfNeeded@myIP+2
 10671  0029EC  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,ARP_replyIfNeeded@myIP+3
 10672                           
 10673                           ;arp.c: 137: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 10674  0029F0  0E18               	movlw	low (ARP_replyIfNeeded@request+24)
 10675  0029F2  0100               	movlb	0	; () banked
 10676  0029F4  6F60               	movwf	ipv4_cmp@a& (0+255),b
 10677  0029F6  0E01               	movlw	high (ARP_replyIfNeeded@request+24)
 10678  0029F8  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 10679  0029FA  0E34               	movlw	low ARP_replyIfNeeded@myIP
 10680  0029FC  6F62               	movwf	ipv4_cmp@b& (0+255),b
 10681  0029FE  0E01               	movlw	high ARP_replyIfNeeded@myIP
 10682  002A00  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 10683  002A02  EC79  F023         	call	_ipv4_cmp	;wreg free
 10684  002A06  0100               	movlb	0	; () banked
 10685  002A08  A0D8               	btfss	status,0,c
 10686  002A0A  0012               	return	
 10687                           
 10688                           ; BSR set to: 0
 10689                           ;arp.c: 140: ARP_message_t reply;
 10690                           ;arp.c: 141: ipv4_address_t senderIP;
 10691                           ;arp.c: 142: ipv4_address_t targetIP;
 10692                           ;arp.c: 143: macaddress_t senderMAC;
 10693                           ;arp.c: 144: macaddress_t targetMAC;
 10694                           ;arp.c: 146: senderMAC = ethernetController_getMacAddress();
 10695                           
 10696                           ; BSR set to: 0
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;arp.c: 138: return;
 10700  002A0C  EC4D  F020         	call	_ethernetController_getMacAddress	;wreg free
 10701  002A10  EE21  F020         	lfsr	2,ARP_replyIfNeeded@senderMAC
 10702  002A14  0E05               	movlw	5
 10703  002A16                     u10161:
 10704  002A16  CFEB FFDB          	movff	plusw0,plusw2
 10705  002A1A  06E8               	decf	wreg,f,c
 10706  002A1C  E2FC               	bc	u10161
 10707                           
 10708                           ;arp.c: 147: targetMAC = request.senderMACAddress;
 10709  002A1E  EE21  F008         	lfsr	2,ARP_replyIfNeeded@request+8
 10710  002A22  EE11  F026         	lfsr	1,ARP_replyIfNeeded@targetMAC
 10711  002A26  0E05               	movlw	5
 10712  002A28                     u10171:
 10713  002A28  CFDB FFE3          	movff	plusw2,plusw1
 10714  002A2C  06E8               	decf	wreg,f,c
 10715  002A2E  E2FC               	bc	u10171
 10716                           
 10717                           ;arp.c: 148: senderIP = ipv4_getIPSourceAddress();
 10718  002A30  EC47  F026         	call	_ipv4_getIPSourceAddress	;wreg free
 10719  002A34  C060  F12C         	movff	?_ipv4_getIPSourceAddress,ARP_replyIfNeeded@senderIP
 10720  002A38  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,ARP_replyIfNeeded@senderIP+1
 10721  002A3C  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,ARP_replyIfNeeded@senderIP+2
 10722  002A40  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,ARP_replyIfNeeded@senderIP+3
 10723                           
 10724                           ;arp.c: 149: targetIP = request.senderIPAddress;
 10725  002A44  C10E  F130         	movff	ARP_replyIfNeeded@request+14,ARP_replyIfNeeded@targetIP
 10726  002A48  C10F  F131         	movff	ARP_replyIfNeeded@request+15,ARP_replyIfNeeded@targetIP+1
 10727  002A4C  C110  F132         	movff	ARP_replyIfNeeded@request+16,ARP_replyIfNeeded@targetIP+2
 10728  002A50  C111  F133         	movff	ARP_replyIfNeeded@request+17,ARP_replyIfNeeded@targetIP+3
 10729                           
 10730                           ;arp.c: 151: reply.hlen = 6;
 10731  002A54  0E06               	movlw	6
 10732  002A56  0101               	movlb	1	; () banked
 10733  002A58  6F3C               	movwf	(ARP_replyIfNeeded@reply+4)& (0+255),b
 10734                           
 10735                           ; BSR set to: 1
 10736                           ;arp.c: 152: reply.plen = 4;
 10737  002A5A  0E04               	movlw	4
 10738  002A5C  6F3D               	movwf	(ARP_replyIfNeeded@reply+5)& (0+255),b
 10739                           
 10740                           ; BSR set to: 1
 10741                           ;arp.c: 153: reply.htype = ARP_HTYPE_ETHERNET;
 10742  002A5E  0E00               	movlw	0
 10743  002A60  6F39               	movwf	(ARP_replyIfNeeded@reply+1)& (0+255),b
 10744  002A62  0E01               	movlw	1
 10745  002A64  6F38               	movwf	ARP_replyIfNeeded@reply& (0+255),b
 10746                           
 10747                           ; BSR set to: 1
 10748                           ;arp.c: 154: reply.ptype = ARP_PTYPE_IPv4;
 10749  002A66  0E08               	movlw	8
 10750  002A68  6F3B               	movwf	(ARP_replyIfNeeded@reply+3)& (0+255),b
 10751  002A6A  0E00               	movlw	0
 10752  002A6C  6F3A               	movwf	(ARP_replyIfNeeded@reply+2)& (0+255),b
 10753                           
 10754                           ; BSR set to: 1
 10755                           ;arp.c: 155: reply.operation = ARP_REPLY;
 10756  002A6E  0E00               	movlw	0
 10757  002A70  6F3F               	movwf	(ARP_replyIfNeeded@reply+7)& (0+255),b
 10758  002A72  0E02               	movlw	2
 10759  002A74  6F3E               	movwf	(ARP_replyIfNeeded@reply+6)& (0+255),b
 10760                           
 10761                           ; BSR set to: 1
 10762                           ;arp.c: 156: reply.senderIPAddress = senderIP;
 10763  002A76  C12C  F146         	movff	ARP_replyIfNeeded@senderIP,ARP_replyIfNeeded@reply+14
 10764  002A7A  C12D  F147         	movff	ARP_replyIfNeeded@senderIP+1,ARP_replyIfNeeded@reply+15
 10765  002A7E  C12E  F148         	movff	ARP_replyIfNeeded@senderIP+2,ARP_replyIfNeeded@reply+16
 10766  002A82  C12F  F149         	movff	ARP_replyIfNeeded@senderIP+3,ARP_replyIfNeeded@reply+17
 10767                           
 10768                           ; BSR set to: 1
 10769                           ;arp.c: 157: reply.senderMACAddress = senderMAC;
 10770  002A86  EE21  F020         	lfsr	2,ARP_replyIfNeeded@senderMAC
 10771  002A8A  EE11  F040         	lfsr	1,ARP_replyIfNeeded@reply+8
 10772  002A8E  0E05               	movlw	5
 10773  002A90                     u10181:
 10774  002A90  CFDB FFE3          	movff	plusw2,plusw1
 10775  002A94  06E8               	decf	wreg,f,c
 10776  002A96  E2FC               	bc	u10181
 10777                           
 10778                           ; BSR set to: 1
 10779                           ;arp.c: 158: reply.targetIPAddress = targetIP;
 10780  002A98  C130  F150         	movff	ARP_replyIfNeeded@targetIP,ARP_replyIfNeeded@reply+24
 10781  002A9C  C131  F151         	movff	ARP_replyIfNeeded@targetIP+1,ARP_replyIfNeeded@reply+25
 10782  002AA0  C132  F152         	movff	ARP_replyIfNeeded@targetIP+2,ARP_replyIfNeeded@reply+26
 10783  002AA4  C133  F153         	movff	ARP_replyIfNeeded@targetIP+3,ARP_replyIfNeeded@reply+27
 10784                           
 10785                           ; BSR set to: 1
 10786                           ;arp.c: 159: reply.targetMACAddress = targetMAC;
 10787  002AA8  EE21  F026         	lfsr	2,ARP_replyIfNeeded@targetMAC
 10788  002AAC  EE11  F04A         	lfsr	1,ARP_replyIfNeeded@reply+18
 10789  002AB0  0E05               	movlw	5
 10790  002AB2                     u10191:
 10791  002AB2  CFDB FFE3          	movff	plusw2,plusw1
 10792  002AB6  06E8               	decf	wreg,f,c
 10793  002AB8  E2FC               	bc	u10191
 10794                           
 10795                           ; BSR set to: 1
 10796                           ;arp.c: 161: ARP_send(reply);
 10797  002ABA  EE21  F038         	lfsr	2,ARP_replyIfNeeded@reply
 10798  002ABE  EE00  F0A7         	lfsr	0,ARP_send@arp
 10799  002AC2  0E1F               	movlw	31
 10800  002AC4                     u10201:
 10801  002AC4  CFDB FFEB          	movff	plusw2,plusw0
 10802  002AC8  06E8               	decf	wreg,f,c
 10803  002ACA  E2FC               	bc	u10201
 10804  002ACC  EC76  F00D         	call	_ARP_send	;wreg free
 10805                           
 10806                           ;arp.c: 163: UARTTransmitText("[Reply sent to ");
 10807  002AD0  0EDE               	movlw	low STR_71
 10808  002AD2  0100               	movlb	0	; () banked
 10809  002AD4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10810  002AD6  0E7E               	movlw	high STR_71
 10811  002AD8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10812  002ADA  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10813                           
 10814                           ;arp.c: 164: UARTTransmitText(macToString(reply.targetMACAddress));
 10815  002ADE  EE21  F04A         	lfsr	2,ARP_replyIfNeeded@reply+18
 10816  002AE2  EE00  F07A         	lfsr	0,macToString@addr
 10817  002AE6  0E05               	movlw	5
 10818  002AE8                     u10211:
 10819  002AE8  CFDB FFEB          	movff	plusw2,plusw0
 10820  002AEC  06E8               	decf	wreg,f,c
 10821  002AEE  E2FC               	bc	u10211
 10822  002AF0  EC94  F018         	call	_macToString	;wreg free
 10823  002AF4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 10824  002AF8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 10825  002AFC  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10826                           
 10827                           ;arp.c: 165: UARTTransmitText(", ");
 10828  002B00  0E37               	movlw	low (STR_41+17)
 10829  002B02  0100               	movlb	0	; () banked
 10830  002B04  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10831  002B06  0E7E               	movlw	high (STR_41+17)
 10832  002B08  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10833  002B0A  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10834                           
 10835                           ;arp.c: 166: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 10836  002B0E  C150  F067         	movff	ARP_replyIfNeeded@reply+24,ipAdressToString@ip
 10837  002B12  C151  F068         	movff	ARP_replyIfNeeded@reply+25,ipAdressToString@ip+1
 10838  002B16  C152  F069         	movff	ARP_replyIfNeeded@reply+26,ipAdressToString@ip+2
 10839  002B1A  C153  F06A         	movff	ARP_replyIfNeeded@reply+27,ipAdressToString@ip+3
 10840  002B1E  ECD7  F00F         	call	_ipAdressToString	;wreg free
 10841  002B22  C067  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 10842  002B26  C068  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 10843  002B2A  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10844                           
 10845                           ;arp.c: 167: UARTTransmitText("]");
 10846  002B2E  0EFC               	movlw	low (STR_20+1)
 10847  002B30  0100               	movlb	0	; () banked
 10848  002B32  6F98               	movwf	UARTTransmitText@str& (0+255),b
 10849  002B34  0E7F               	movlw	high (STR_20+1)
 10850  002B36  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 10851  002B38  ECFE  F021         	call	_UARTTransmitText	;wreg free
 10852  002B3C  0012               	return		;funcret
 10853  002B3E                     __end_of_ARP_replyIfNeeded:
 10854                           	opt stack 0
 10855                           tblptru	equ	0xFF8
 10856                           tblptrh	equ	0xFF7
 10857                           tblptrl	equ	0xFF6
 10858                           tablat	equ	0xFF5
 10859                           prodh	equ	0xFF4
 10860                           prodl	equ	0xFF3
 10861                           intcon	equ	0xFF2
 10862                           intcon3	equ	0xFF0
 10863                           postinc0	equ	0xFEE
 10864                           plusw0	equ	0xFEB
 10865                           fsr0h	equ	0xFEA
 10866                           fsr0l	equ	0xFE9
 10867                           wreg	equ	0xFE8
 10868                           indf1	equ	0xFE7
 10869                           postinc1	equ	0xFE6
 10870                           postdec1	equ	0xFE5
 10871                           plusw1	equ	0xFE3
 10872                           fsr1h	equ	0xFE2
 10873                           fsr1l	equ	0xFE1
 10874                           indf2	equ	0xFDF
 10875                           postinc2	equ	0xFDE
 10876                           postdec2	equ	0xFDD
 10877                           plusw2	equ	0xFDB
 10878                           fsr2h	equ	0xFDA
 10879                           fsr2l	equ	0xFD9
 10880                           status	equ	0xFD8
 10881                           
 10882 ;; *************** function _macToString *****************
 10883 ;; Defined at:
 10884 ;;		line 147 in file "src/system/uart.c"
 10885 ;; Parameters:    Size  Location     Type
 10886 ;;  addr            6   26[BANK0 ] struct macaddress
 10887 ;; Auto vars:     Size  Location     Type
 10888 ;;  i               2   53[BANK0 ] int 
 10889 ;;  address        18   33[BANK0 ] unsigned char [18]
 10890 ;;  j               1   55[BANK0 ] unsigned char 
 10891 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 10892 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  2   26[BANK0 ] PTR unsigned char 
 10895 ;; Registers used:
 10896 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10902 ;;      Params:         0       6       0       0       0       0       0       0       0
 10903 ;;      Locals:         0      23       0       0       0       0       0       0       0
 10904 ;;      Temps:          0       1       0       0       0       0       0       0       0
 10905 ;;      Totals:         0      30       0       0       0       0       0       0       0
 10906 ;;Total ram usage:       30 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    4
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		_ethernet_rxGetNewFrame
 10913 ;;		_main
 10914 ;;		_ARP_handleNewPacket
 10915 ;;		_ARP_replyIfNeeded
 10916 ;;		_arpEntryToString
 10917 ;; This function uses a non-reentrant model
 10918 ;;
 10919                           
 10920                           	psect	text34
 10921  003128                     __ptext34:
 10922                           	opt stack 0
 10923  003128                     _macToString:
 10924                           	opt stack 26
 10925                           
 10926                           ;uart.c: 148: char address[] = "??:??:??:??:??:??";
 10927                           
 10928                           ;incstack = 0
 10929  003128  EE22  F0C8         	lfsr	2,macToString@F5802
 10930  00312C  EE10  F081         	lfsr	1,macToString@address
 10931  003130  0E11               	movlw	17
 10932  003132                     u8981:
 10933  003132  CFDB FFE3          	movff	plusw2,plusw1
 10934  003136  06E8               	decf	wreg,f,c
 10935  003138  E2FC               	bc	u8981
 10936                           
 10937                           ;uart.c: 149: uint8_t j = 0;
 10938  00313A  0E00               	movlw	0
 10939  00313C  0100               	movlb	0	; () banked
 10940  00313E  6F97               	movwf	macToString@j& (0+255),b
 10941                           
 10942                           ; BSR set to: 0
 10943                           ;uart.c: 150: uint8_t firstDigit;
 10944                           ;uart.c: 151: uint8_t secondDigit;
 10945                           ;uart.c: 153: for (int i = 0; i < 6; i++) {
 10946  003140  0E00               	movlw	0
 10947  003142  6F96               	movwf	(macToString@i+1)& (0+255),b
 10948  003144  0E00               	movlw	0
 10949  003146  6F95               	movwf	macToString@i& (0+255),b
 10950                           
 10951                           ; BSR set to: 0
 10952  003148  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 10953  00314A  D006               	goto	l784
 10954  00314C  5196               	movf	(macToString@i+1)& (0+255),w,b
 10955  00314E  E16B               	bnz	l785
 10956  003150  0E06               	movlw	6
 10957  003152  5D95               	subwf	macToString@i& (0+255),w,b
 10958  003154  B0D8               	btfsc	status,0,c
 10959  003156  D067               	goto	u9030
 10960  003158                     l784:
 10961                           
 10962                           ; BSR set to: 0
 10963                           ;uart.c: 154: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 10964                           
 10965                           ; BSR set to: 0
 10966  003158  0E7A               	movlw	low macToString@addr
 10967  00315A  2595               	addwf	macToString@i& (0+255),w,b
 10968  00315C  6ED9               	movwf	fsr2l,c
 10969  00315E  0E00               	movlw	high macToString@addr
 10970  003160  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 10971  003162  6EDA               	movwf	fsr2h,c
 10972  003164  50DF               	movf	indf2,w,c
 10973  003166  6F80               	movwf	??_macToString& (0+255),b
 10974  003168  3980               	swapf	??_macToString& (0+255),w,b
 10975  00316A  0B0F               	andlw	15
 10976  00316C  0B0F               	andlw	15
 10977  00316E  6F93               	movwf	macToString@firstDigit& (0+255),b
 10978                           
 10979                           ;uart.c: 155: secondDigit = addr.address[i] & 0x0F;
 10980  003170  0E7A               	movlw	low macToString@addr
 10981  003172  2595               	addwf	macToString@i& (0+255),w,b
 10982  003174  6ED9               	movwf	fsr2l,c
 10983  003176  0E00               	movlw	high macToString@addr
 10984  003178  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 10985  00317A  6EDA               	movwf	fsr2h,c
 10986  00317C  50DF               	movf	indf2,w,c
 10987  00317E  0B0F               	andlw	15
 10988  003180  6F94               	movwf	macToString@secondDigit& (0+255),b
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;uart.c: 157: firstDigit += 0x30;
 10992  003182  0E30               	movlw	48
 10993  003184  2793               	addwf	macToString@firstDigit& (0+255),f,b
 10994                           
 10995                           ; BSR set to: 0
 10996                           ;uart.c: 158: secondDigit += 0x30;
 10997  003186  0E30               	movlw	48
 10998  003188  2794               	addwf	macToString@secondDigit& (0+255),f,b
 10999                           
 11000                           ; BSR set to: 0
 11001                           ;uart.c: 160: if (firstDigit > '9') {
 11002  00318A  0E39               	movlw	57
 11003  00318C  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 11004  00318E  D00C               	goto	l786
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;uart.c: 161: address[j++] = firstDigit + 7;
 11008  003190  5197               	movf	macToString@j& (0+255),w,b
 11009  003192  0D01               	mullw	1
 11010  003194  0E81               	movlw	low macToString@address
 11011  003196  24F3               	addwf	prodl,w,c
 11012  003198  6ED9               	movwf	fsr2l,c
 11013  00319A  0E00               	movlw	high macToString@address
 11014  00319C  20F4               	addwfc	prodh,w,c
 11015  00319E  6EDA               	movwf	fsr2h,c
 11016  0031A0  5193               	movf	macToString@firstDigit& (0+255),w,b
 11017  0031A2  0F07               	addlw	7
 11018  0031A4  6EDF               	movwf	indf2,c
 11019  0031A6  D00A               	goto	l7707
 11020  0031A8                     l786:
 11021                           
 11022                           ; BSR set to: 0
 11023                           ;uart.c: 163: address[j++] = firstDigit;
 11024                           
 11025                           ; BSR set to: 0
 11026  0031A8  5197               	movf	macToString@j& (0+255),w,b
 11027  0031AA  0D01               	mullw	1
 11028  0031AC  0E81               	movlw	low macToString@address
 11029  0031AE  24F3               	addwf	prodl,w,c
 11030  0031B0  6ED9               	movwf	fsr2l,c
 11031  0031B2  0E00               	movlw	high macToString@address
 11032  0031B4  20F4               	addwfc	prodh,w,c
 11033  0031B6  6EDA               	movwf	fsr2h,c
 11034  0031B8  C093  FFDF         	movff	macToString@firstDigit,indf2
 11035  0031BC                     l7707:
 11036                           
 11037                           ; BSR set to: 0
 11038  0031BC  2B97               	incf	macToString@j& (0+255),f,b
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;uart.c: 164: }
 11042                           ;uart.c: 165: if (secondDigit > '9') {
 11043                           
 11044                           ; BSR set to: 0
 11045  0031BE  0E39               	movlw	57
 11046  0031C0  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 11047  0031C2  D00C               	goto	l788
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;uart.c: 166: address[j++] = secondDigit + 7;
 11051  0031C4  5197               	movf	macToString@j& (0+255),w,b
 11052  0031C6  0D01               	mullw	1
 11053  0031C8  0E81               	movlw	low macToString@address
 11054  0031CA  24F3               	addwf	prodl,w,c
 11055  0031CC  6ED9               	movwf	fsr2l,c
 11056  0031CE  0E00               	movlw	high macToString@address
 11057  0031D0  20F4               	addwfc	prodh,w,c
 11058  0031D2  6EDA               	movwf	fsr2h,c
 11059  0031D4  5194               	movf	macToString@secondDigit& (0+255),w,b
 11060  0031D6  0F07               	addlw	7
 11061  0031D8  6EDF               	movwf	indf2,c
 11062  0031DA  D00A               	goto	l7717
 11063  0031DC                     l788:
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;uart.c: 168: address[j++] = secondDigit;
 11067                           
 11068                           ; BSR set to: 0
 11069  0031DC  5197               	movf	macToString@j& (0+255),w,b
 11070  0031DE  0D01               	mullw	1
 11071  0031E0  0E81               	movlw	low macToString@address
 11072  0031E2  24F3               	addwf	prodl,w,c
 11073  0031E4  6ED9               	movwf	fsr2l,c
 11074  0031E6  0E00               	movlw	high macToString@address
 11075  0031E8  20F4               	addwfc	prodh,w,c
 11076  0031EA  6EDA               	movwf	fsr2h,c
 11077  0031EC  C094  FFDF         	movff	macToString@secondDigit,indf2
 11078  0031F0                     l7717:
 11079                           
 11080                           ; BSR set to: 0
 11081  0031F0  2B97               	incf	macToString@j& (0+255),f,b
 11082                           
 11083                           ; BSR set to: 0
 11084                           ;uart.c: 169: }
 11085                           ;uart.c: 171: if (i < 5) {
 11086                           
 11087                           ; BSR set to: 0
 11088  0031F2  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 11089  0031F4  D006               	goto	u9020
 11090  0031F6  5196               	movf	(macToString@i+1)& (0+255),w,b
 11091  0031F8  E10F               	bnz	l7725
 11092  0031FA  0E05               	movlw	5
 11093  0031FC  5D95               	subwf	macToString@i& (0+255),w,b
 11094  0031FE  B0D8               	btfsc	status,0,c
 11095  003200  D00B               	goto	l790
 11096  003202                     u9020:
 11097                           
 11098                           ; BSR set to: 0
 11099                           ;uart.c: 172: address[j++] = ':';
 11100  003202  5197               	movf	macToString@j& (0+255),w,b
 11101  003204  0D01               	mullw	1
 11102  003206  0E81               	movlw	low macToString@address
 11103  003208  24F3               	addwf	prodl,w,c
 11104  00320A  6ED9               	movwf	fsr2l,c
 11105  00320C  0E00               	movlw	high macToString@address
 11106  00320E  20F4               	addwfc	prodh,w,c
 11107  003210  6EDA               	movwf	fsr2h,c
 11108  003212  0E3A               	movlw	58
 11109  003214  6EDF               	movwf	indf2,c
 11110                           
 11111                           ; BSR set to: 0
 11112  003216  2B97               	incf	macToString@j& (0+255),f,b
 11113  003218                     l790:
 11114  003218                     l7725:
 11115                           
 11116                           ; BSR set to: 0
 11117  003218  4B95               	infsnz	macToString@i& (0+255),f,b
 11118  00321A  2B96               	incf	(macToString@i+1)& (0+255),f,b
 11119                           
 11120                           ; BSR set to: 0
 11121  00321C  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 11122  00321E  D79C               	goto	l784
 11123  003220  5196               	movf	(macToString@i+1)& (0+255),w,b
 11124  003222  E101               	bnz	l7729
 11125  003224  D795               	goto	L1
 11126  003226                     u9030:
 11127  003226                     l785:
 11128  003226                     l7729:
 11129                           
 11130                           ; BSR set to: 0
 11131                           ;uart.c: 173: }
 11132                           ;uart.c: 174: }
 11133                           ;uart.c: 175: return &address;
 11134  003226  0E81               	movlw	low macToString@address
 11135  003228  6F7A               	movwf	?_macToString& (0+255),b
 11136  00322A  0E00               	movlw	high macToString@address
 11137  00322C  6F7B               	movwf	(?_macToString+1)& (0+255),b
 11138  00322E  0012               	return	
 11139  003230                     __end_of_macToString:
 11140                           	opt stack 0
 11141                           tblptru	equ	0xFF8
 11142                           tblptrh	equ	0xFF7
 11143                           tblptrl	equ	0xFF6
 11144                           tablat	equ	0xFF5
 11145                           prodh	equ	0xFF4
 11146                           prodl	equ	0xFF3
 11147                           intcon	equ	0xFF2
 11148                           intcon3	equ	0xFF0
 11149                           postinc0	equ	0xFEE
 11150                           plusw0	equ	0xFEB
 11151                           fsr0h	equ	0xFEA
 11152                           fsr0l	equ	0xFE9
 11153                           wreg	equ	0xFE8
 11154                           indf1	equ	0xFE7
 11155                           postinc1	equ	0xFE6
 11156                           postdec1	equ	0xFE5
 11157                           plusw1	equ	0xFE3
 11158                           fsr1h	equ	0xFE2
 11159                           fsr1l	equ	0xFE1
 11160                           indf2	equ	0xFDF
 11161                           postinc2	equ	0xFDE
 11162                           postdec2	equ	0xFDD
 11163                           plusw2	equ	0xFDB
 11164                           fsr2h	equ	0xFDA
 11165                           fsr2l	equ	0xFD9
 11166                           status	equ	0xFD8
 11167                           
 11168 ;; *************** function _ipv4_getIPSourceAddress *****************
 11169 ;; Defined at:
 11170 ;;		line 227 in file "src/stack/protocols/ipv4.c"
 11171 ;; Parameters:    Size  Location     Type
 11172 ;;		None
 11173 ;; Auto vars:     Size  Location     Type
 11174 ;;		None
 11175 ;; Return value:  Size  Location     Type
 11176 ;;                  4    0[BANK0 ] struct ipv4_address
 11177 ;; Registers used:
 11178 ;;		None
 11179 ;; Tracked objects:
 11180 ;;		On entry : 0/0
 11181 ;;		On exit  : 0/0
 11182 ;;		Unchanged: 0/0
 11183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11184 ;;      Params:         0       4       0       0       0       0       0       0       0
 11185 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11186 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11187 ;;      Totals:         0       4       0       0       0       0       0       0       0
 11188 ;;Total ram usage:        4 bytes
 11189 ;; Hardware stack levels used:    1
 11190 ;; Hardware stack levels required when called:    4
 11191 ;; This function calls:
 11192 ;;		Nothing
 11193 ;; This function is called by:
 11194 ;;		_ARP_replyIfNeeded
 11195 ;;		_ARP_sendRequest
 11196 ;; This function uses a non-reentrant model
 11197 ;;
 11198                           
 11199                           	psect	text35
 11200  004C8E                     __ptext35:
 11201                           	opt stack 0
 11202  004C8E                     _ipv4_getIPSourceAddress:
 11203                           	opt stack 23
 11204                           
 11205                           ;ipv4.c: 228: return sourceIPAddress;
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;incstack = 0
 11209  004C8E  C02C  F060         	movff	_sourceIPAddress,?_ipv4_getIPSourceAddress
 11210  004C92  C02D  F061         	movff	_sourceIPAddress+1,?_ipv4_getIPSourceAddress+1
 11211  004C96  C02E  F062         	movff	_sourceIPAddress+2,?_ipv4_getIPSourceAddress+2
 11212  004C9A  C02F  F063         	movff	_sourceIPAddress+3,?_ipv4_getIPSourceAddress+3
 11213  004C9E  0012               	return		;funcret
 11214  004CA0                     __end_of_ipv4_getIPSourceAddress:
 11215                           	opt stack 0
 11216                           tblptru	equ	0xFF8
 11217                           tblptrh	equ	0xFF7
 11218                           tblptrl	equ	0xFF6
 11219                           tablat	equ	0xFF5
 11220                           prodh	equ	0xFF4
 11221                           prodl	equ	0xFF3
 11222                           intcon	equ	0xFF2
 11223                           intcon3	equ	0xFF0
 11224                           postinc0	equ	0xFEE
 11225                           plusw0	equ	0xFEB
 11226                           fsr0h	equ	0xFEA
 11227                           fsr0l	equ	0xFE9
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           plusw1	equ	0xFE3
 11233                           fsr1h	equ	0xFE2
 11234                           fsr1l	equ	0xFE1
 11235                           indf2	equ	0xFDF
 11236                           postinc2	equ	0xFDE
 11237                           postdec2	equ	0xFDD
 11238                           plusw2	equ	0xFDB
 11239                           fsr2h	equ	0xFDA
 11240                           fsr2l	equ	0xFD9
 11241                           status	equ	0xFD8
 11242                           
 11243 ;; *************** function _ipAdressToString *****************
 11244 ;; Defined at:
 11245 ;;		line 202 in file "src/system/uart.c"
 11246 ;; Parameters:    Size  Location     Type
 11247 ;;  ip              4    7[BANK0 ] struct ipv4_address
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;  i               1   28[BANK0 ] unsigned char 
 11250 ;;  hundreds        4   23[BANK0 ] unsigned char [4]
 11251 ;;  tens            4   19[BANK0 ] unsigned char [4]
 11252 ;;  ones            4   15[BANK0 ] unsigned char [4]
 11253 ;;  pointer         1   27[BANK0 ] unsigned char 
 11254 ;; Return value:  Size  Location     Type
 11255 ;;                  2    7[BANK0 ] PTR unsigned char 
 11256 ;; Registers used:
 11257 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11258 ;; Tracked objects:
 11259 ;;		On entry : 0/0
 11260 ;;		On exit  : 0/0
 11261 ;;		Unchanged: 0/0
 11262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11263 ;;      Params:         0       4       0       0       0       0       0       0       0
 11264 ;;      Locals:         0      14       0       0       0       0       0       0       0
 11265 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11266 ;;      Totals:         0      22       0       0       0       0       0       0       0
 11267 ;;Total ram usage:       22 bytes
 11268 ;; Hardware stack levels used:    1
 11269 ;; Hardware stack levels required when called:    5
 11270 ;; This function calls:
 11271 ;;		___lwdiv
 11272 ;;		___lwmod
 11273 ;; This function is called by:
 11274 ;;		_handleStackBackgroundTasks
 11275 ;;		_ARP_handleNewPacket
 11276 ;;		_ARP_replyIfNeeded
 11277 ;;		_ipv4_handleNewPacket
 11278 ;;		_arpEntryToString
 11279 ;; This function uses a non-reentrant model
 11280 ;;
 11281                           
 11282                           	psect	text36
 11283  001FAE                     __ptext36:
 11284                           	opt stack 0
 11285  001FAE                     _ipAdressToString:
 11286                           	opt stack 24
 11287                           
 11288                           ;uart.c: 203: char static address [] = "???.???.???.???";
 11289                           ;uart.c: 204: uint8_t hundreds[4];
 11290                           ;uart.c: 205: uint8_t tens[4];
 11291                           ;uart.c: 206: uint8_t ones[4];
 11292                           ;uart.c: 207: uint8_t pointer = 0;
 11293                           
 11294                           ;incstack = 0
 11295  001FAE  0E00               	movlw	0
 11296  001FB0  0100               	movlb	0	; () banked
 11297  001FB2  6F7B               	movwf	ipAdressToString@pointer& (0+255),b
 11298                           
 11299                           ;uart.c: 209: for (uint8_t i = 0; i < 4; i++) {
 11300  001FB4  0E00               	movlw	0
 11301  001FB6  6F7C               	movwf	ipAdressToString@i& (0+255),b
 11302  001FB8                     l7775:
 11303                           
 11304                           ; BSR set to: 0
 11305  001FB8  0E03               	movlw	3
 11306  001FBA  657C               	cpfsgt	ipAdressToString@i& (0+255),b
 11307  001FBC  D001               	goto	l813
 11308  001FBE  D0DF               	goto	u9150
 11309  001FC0                     l813:
 11310                           
 11311                           ; BSR set to: 0
 11312                           ;uart.c: 211: hundreds[i] = ip.address[i] / 100u;
 11313                           
 11314                           ; BSR set to: 0
 11315  001FC0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11316  001FC2  0D01               	mullw	1
 11317  001FC4  0E77               	movlw	low ipAdressToString@hundreds
 11318  001FC6  24F3               	addwf	prodl,w,c
 11319  001FC8  6ED9               	movwf	fsr2l,c
 11320  001FCA  0E00               	movlw	high ipAdressToString@hundreds
 11321  001FCC  20F4               	addwfc	prodh,w,c
 11322  001FCE  6EDA               	movwf	fsr2h,c
 11323  001FD0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11324  001FD2  0D01               	mullw	1
 11325  001FD4  0E67               	movlw	low ipAdressToString@ip
 11326  001FD6  24F3               	addwf	prodl,w,c
 11327  001FD8  6EE1               	movwf	fsr1l,c
 11328  001FDA  0E00               	movlw	high ipAdressToString@ip
 11329  001FDC  20F4               	addwfc	prodh,w,c
 11330  001FDE  6EE2               	movwf	fsr1h,c
 11331  001FE0  50E7               	movf	indf1,w,c
 11332  001FE2  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11333  001FE4  516B               	movf	??_ipAdressToString& (0+255),w,b
 11334  001FE6  6F60               	movwf	___lwdiv@dividend& (0+255),b
 11335  001FE8  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 11336  001FEA  0E00               	movlw	0
 11337  001FEC  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 11338  001FEE  0E64               	movlw	100
 11339  001FF0  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11340  001FF2  EC29  F022         	call	___lwdiv	;wreg free
 11341  001FF6  0100               	movlb	0	; () banked
 11342  001FF8  5160               	movf	?___lwdiv& (0+255),w,b
 11343  001FFA  6EDF               	movwf	indf2,c
 11344                           
 11345                           ;uart.c: 212: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 11346  001FFC  517C               	movf	ipAdressToString@i& (0+255),w,b
 11347  001FFE  0D01               	mullw	1
 11348  002000  0E73               	movlw	low ipAdressToString@tens
 11349  002002  24F3               	addwf	prodl,w,c
 11350  002004  6ED9               	movwf	fsr2l,c
 11351  002006  0E00               	movlw	high ipAdressToString@tens
 11352  002008  20F4               	addwfc	prodh,w,c
 11353  00200A  6EDA               	movwf	fsr2h,c
 11354  00200C  517C               	movf	ipAdressToString@i& (0+255),w,b
 11355  00200E  0D01               	mullw	1
 11356  002010  0E77               	movlw	low ipAdressToString@hundreds
 11357  002012  24F3               	addwf	prodl,w,c
 11358  002014  6EE1               	movwf	fsr1l,c
 11359  002016  0E00               	movlw	high ipAdressToString@hundreds
 11360  002018  20F4               	addwfc	prodh,w,c
 11361  00201A  6EE2               	movwf	fsr1h,c
 11362  00201C  50E7               	movf	indf1,w,c
 11363  00201E  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11364  002020  516B               	movf	??_ipAdressToString& (0+255),w,b
 11365  002022  0D64               	mullw	100
 11366  002024  CFF3 F06C          	movff	prodl,??_ipAdressToString+1
 11367  002028  CFF4 F06D          	movff	prodh,??_ipAdressToString+2
 11368  00202C  1F6C               	comf	(??_ipAdressToString+1)& (0+255),f,b
 11369  00202E  1F6D               	comf	(??_ipAdressToString+2)& (0+255),f,b
 11370  002030  4B6C               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 11371  002032  2B6D               	incf	(??_ipAdressToString+2)& (0+255),f,b
 11372  002034  517C               	movf	ipAdressToString@i& (0+255),w,b
 11373  002036  0D01               	mullw	1
 11374  002038  0E67               	movlw	low ipAdressToString@ip
 11375  00203A  24F3               	addwf	prodl,w,c
 11376  00203C  6EE1               	movwf	fsr1l,c
 11377  00203E  0E00               	movlw	high ipAdressToString@ip
 11378  002040  20F4               	addwfc	prodh,w,c
 11379  002042  6EE2               	movwf	fsr1h,c
 11380  002044  50E7               	movf	indf1,w,c
 11381  002046  6F6E               	movwf	(??_ipAdressToString+3)& (0+255),b
 11382  002048  516E               	movf	(??_ipAdressToString+3)& (0+255),w,b
 11383  00204A  256C               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 11384  00204C  6F60               	movwf	___lwdiv@dividend& (0+255),b
 11385  00204E  0E00               	movlw	0
 11386  002050  216D               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 11387  002052  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 11388  002054  0E00               	movlw	0
 11389  002056  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 11390  002058  0E0A               	movlw	10
 11391  00205A  6F62               	movwf	___lwdiv@divisor& (0+255),b
 11392  00205C  EC29  F022         	call	___lwdiv	;wreg free
 11393  002060  0100               	movlb	0	; () banked
 11394  002062  5160               	movf	?___lwdiv& (0+255),w,b
 11395  002064  6EDF               	movwf	indf2,c
 11396                           
 11397                           ;uart.c: 213: ones[i] = ip.address[i] % 10u;
 11398  002066  517C               	movf	ipAdressToString@i& (0+255),w,b
 11399  002068  0D01               	mullw	1
 11400  00206A  0E6F               	movlw	low ipAdressToString@ones
 11401  00206C  24F3               	addwf	prodl,w,c
 11402  00206E  6ED9               	movwf	fsr2l,c
 11403  002070  0E00               	movlw	high ipAdressToString@ones
 11404  002072  20F4               	addwfc	prodh,w,c
 11405  002074  6EDA               	movwf	fsr2h,c
 11406  002076  517C               	movf	ipAdressToString@i& (0+255),w,b
 11407  002078  0D01               	mullw	1
 11408  00207A  0E67               	movlw	low ipAdressToString@ip
 11409  00207C  24F3               	addwf	prodl,w,c
 11410  00207E  6EE1               	movwf	fsr1l,c
 11411  002080  0E00               	movlw	high ipAdressToString@ip
 11412  002082  20F4               	addwfc	prodh,w,c
 11413  002084  6EE2               	movwf	fsr1h,c
 11414  002086  50E7               	movf	indf1,w,c
 11415  002088  6F6B               	movwf	??_ipAdressToString& (0+255),b
 11416  00208A  516B               	movf	??_ipAdressToString& (0+255),w,b
 11417  00208C  6F60               	movwf	___lwmod@dividend& (0+255),b
 11418  00208E  6B61               	clrf	(___lwmod@dividend+1)& (0+255),b
 11419  002090  0E00               	movlw	0
 11420  002092  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
 11421  002094  0E0A               	movlw	10
 11422  002096  6F62               	movwf	___lwmod@divisor& (0+255),b
 11423  002098  EC36  F023         	call	___lwmod	;wreg free
 11424  00209C  0100               	movlb	0	; () banked
 11425  00209E  5160               	movf	?___lwmod& (0+255),w,b
 11426  0020A0  6EDF               	movwf	indf2,c
 11427                           
 11428                           ; BSR set to: 0
 11429                           ;uart.c: 215: if (hundreds[i] > 0)
 11430  0020A2  517C               	movf	ipAdressToString@i& (0+255),w,b
 11431  0020A4  0D01               	mullw	1
 11432  0020A6  0E77               	movlw	low ipAdressToString@hundreds
 11433  0020A8  24F3               	addwf	prodl,w,c
 11434  0020AA  6ED9               	movwf	fsr2l,c
 11435  0020AC  0E00               	movlw	high ipAdressToString@hundreds
 11436  0020AE  20F4               	addwfc	prodh,w,c
 11437  0020B0  6EDA               	movwf	fsr2h,c
 11438  0020B2  50DF               	movf	indf2,w,c
 11439  0020B4  B4D8               	btfsc	status,2,c
 11440  0020B6  D014               	goto	l815
 11441                           
 11442                           ; BSR set to: 0
 11443                           ;uart.c: 216: address[pointer++] = hundreds[i] + 0x30;
 11444  0020B8  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11445  0020BA  0D01               	mullw	1
 11446  0020BC  0EED               	movlw	low ipAdressToString@address
 11447  0020BE  24F3               	addwf	prodl,w,c
 11448  0020C0  6ED9               	movwf	fsr2l,c
 11449  0020C2  0E01               	movlw	high ipAdressToString@address
 11450  0020C4  20F4               	addwfc	prodh,w,c
 11451  0020C6  6EDA               	movwf	fsr2h,c
 11452  0020C8  517C               	movf	ipAdressToString@i& (0+255),w,b
 11453  0020CA  0D01               	mullw	1
 11454  0020CC  0E77               	movlw	low ipAdressToString@hundreds
 11455  0020CE  24F3               	addwf	prodl,w,c
 11456  0020D0  6EE1               	movwf	fsr1l,c
 11457  0020D2  0E00               	movlw	high ipAdressToString@hundreds
 11458  0020D4  20F4               	addwfc	prodh,w,c
 11459  0020D6  6EE2               	movwf	fsr1h,c
 11460  0020D8  50E7               	movf	indf1,w,c
 11461  0020DA  0F30               	addlw	48
 11462  0020DC  6EDF               	movwf	indf2,c
 11463                           
 11464                           ; BSR set to: 0
 11465  0020DE  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11466  0020E0                     l815:
 11467                           
 11468                           ; BSR set to: 0
 11469                           ;uart.c: 217: if ((tens[i] > 0) || hundreds[i] > 0)
 11470                           
 11471                           ; BSR set to: 0
 11472  0020E0  517C               	movf	ipAdressToString@i& (0+255),w,b
 11473  0020E2  0D01               	mullw	1
 11474  0020E4  0E73               	movlw	low ipAdressToString@tens
 11475  0020E6  24F3               	addwf	prodl,w,c
 11476  0020E8  6ED9               	movwf	fsr2l,c
 11477  0020EA  0E00               	movlw	high ipAdressToString@tens
 11478  0020EC  20F4               	addwfc	prodh,w,c
 11479  0020EE  6EDA               	movwf	fsr2h,c
 11480  0020F0  50DF               	movf	indf2,w,c
 11481  0020F2  A4D8               	btfss	status,2,c
 11482  0020F4  D00B               	goto	u9130
 11483                           
 11484                           ; BSR set to: 0
 11485  0020F6  517C               	movf	ipAdressToString@i& (0+255),w,b
 11486  0020F8  0D01               	mullw	1
 11487  0020FA  0E77               	movlw	low ipAdressToString@hundreds
 11488  0020FC  24F3               	addwf	prodl,w,c
 11489  0020FE  6ED9               	movwf	fsr2l,c
 11490  002100  0E00               	movlw	high ipAdressToString@hundreds
 11491  002102  20F4               	addwfc	prodh,w,c
 11492  002104  6EDA               	movwf	fsr2h,c
 11493  002106  50DF               	movf	indf2,w,c
 11494  002108  B4D8               	btfsc	status,2,c
 11495  00210A  D014               	goto	l816
 11496  00210C                     u9130:
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;uart.c: 218: address[pointer++] = tens[i] + 0x30;
 11500                           
 11501                           ; BSR set to: 0
 11502  00210C  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11503  00210E  0D01               	mullw	1
 11504  002110  0EED               	movlw	low ipAdressToString@address
 11505  002112  24F3               	addwf	prodl,w,c
 11506  002114  6ED9               	movwf	fsr2l,c
 11507  002116  0E01               	movlw	high ipAdressToString@address
 11508  002118  20F4               	addwfc	prodh,w,c
 11509  00211A  6EDA               	movwf	fsr2h,c
 11510  00211C  517C               	movf	ipAdressToString@i& (0+255),w,b
 11511  00211E  0D01               	mullw	1
 11512  002120  0E73               	movlw	low ipAdressToString@tens
 11513  002122  24F3               	addwf	prodl,w,c
 11514  002124  6EE1               	movwf	fsr1l,c
 11515  002126  0E00               	movlw	high ipAdressToString@tens
 11516  002128  20F4               	addwfc	prodh,w,c
 11517  00212A  6EE2               	movwf	fsr1h,c
 11518  00212C  50E7               	movf	indf1,w,c
 11519  00212E  0F30               	addlw	48
 11520  002130  6EDF               	movwf	indf2,c
 11521                           
 11522                           ; BSR set to: 0
 11523  002132  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11524  002134                     l816:
 11525                           
 11526                           ; BSR set to: 0
 11527                           ;uart.c: 219: address[pointer++] = ones[i] + 0x30;
 11528                           
 11529                           ; BSR set to: 0
 11530  002134  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11531  002136  0D01               	mullw	1
 11532  002138  0EED               	movlw	low ipAdressToString@address
 11533  00213A  24F3               	addwf	prodl,w,c
 11534  00213C  6ED9               	movwf	fsr2l,c
 11535  00213E  0E01               	movlw	high ipAdressToString@address
 11536  002140  20F4               	addwfc	prodh,w,c
 11537  002142  6EDA               	movwf	fsr2h,c
 11538  002144  517C               	movf	ipAdressToString@i& (0+255),w,b
 11539  002146  0D01               	mullw	1
 11540  002148  0E6F               	movlw	low ipAdressToString@ones
 11541  00214A  24F3               	addwf	prodl,w,c
 11542  00214C  6EE1               	movwf	fsr1l,c
 11543  00214E  0E00               	movlw	high ipAdressToString@ones
 11544  002150  20F4               	addwfc	prodh,w,c
 11545  002152  6EE2               	movwf	fsr1h,c
 11546  002154  50E7               	movf	indf1,w,c
 11547  002156  0F30               	addlw	48
 11548  002158  6EDF               	movwf	indf2,c
 11549  00215A  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11550                           
 11551                           ; BSR set to: 0
 11552                           ;uart.c: 220: if (i != 3)
 11553  00215C  0E03               	movlw	3
 11554  00215E  197C               	xorwf	ipAdressToString@i& (0+255),w,b
 11555  002160  B4D8               	btfsc	status,2,c
 11556  002162  D00B               	goto	l819
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;uart.c: 221: address[pointer++] = '.';
 11560  002164  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11561  002166  0D01               	mullw	1
 11562  002168  0EED               	movlw	low ipAdressToString@address
 11563  00216A  24F3               	addwf	prodl,w,c
 11564  00216C  6ED9               	movwf	fsr2l,c
 11565  00216E  0E01               	movlw	high ipAdressToString@address
 11566  002170  20F4               	addwfc	prodh,w,c
 11567  002172  6EDA               	movwf	fsr2h,c
 11568  002174  0E2E               	movlw	46
 11569  002176  6EDF               	movwf	indf2,c
 11570                           
 11571                           ; BSR set to: 0
 11572  002178  2B7B               	incf	ipAdressToString@pointer& (0+255),f,b
 11573  00217A                     l819:
 11574                           
 11575                           ; BSR set to: 0
 11576                           
 11577                           ; BSR set to: 0
 11578  00217A  2B7C               	incf	ipAdressToString@i& (0+255),f,b
 11579  00217C  D71D               	goto	l7775
 11580  00217E                     u9150:
 11581                           
 11582                           ; BSR set to: 0
 11583                           ;uart.c: 222: }
 11584                           ;uart.c: 223: address[pointer] = '\0';
 11585                           
 11586                           ; BSR set to: 0
 11587  00217E  517B               	movf	ipAdressToString@pointer& (0+255),w,b
 11588  002180  0D01               	mullw	1
 11589  002182  0EED               	movlw	low ipAdressToString@address
 11590  002184  24F3               	addwf	prodl,w,c
 11591  002186  6ED9               	movwf	fsr2l,c
 11592  002188  0E01               	movlw	high ipAdressToString@address
 11593  00218A  20F4               	addwfc	prodh,w,c
 11594  00218C  6EDA               	movwf	fsr2h,c
 11595  00218E  0E00               	movlw	0
 11596  002190  6EDF               	movwf	indf2,c
 11597                           
 11598                           ; BSR set to: 0
 11599                           ;uart.c: 224: return address;
 11600  002192  0EED               	movlw	low ipAdressToString@address
 11601  002194  6F67               	movwf	?_ipAdressToString& (0+255),b
 11602  002196  0E01               	movlw	high ipAdressToString@address
 11603  002198  6F68               	movwf	(?_ipAdressToString+1)& (0+255),b
 11604  00219A  0012               	return	
 11605  00219C                     __end_of_ipAdressToString:
 11606                           	opt stack 0
 11607                           tblptru	equ	0xFF8
 11608                           tblptrh	equ	0xFF7
 11609                           tblptrl	equ	0xFF6
 11610                           tablat	equ	0xFF5
 11611                           prodh	equ	0xFF4
 11612                           prodl	equ	0xFF3
 11613                           intcon	equ	0xFF2
 11614                           intcon3	equ	0xFF0
 11615                           postinc0	equ	0xFEE
 11616                           plusw0	equ	0xFEB
 11617                           fsr0h	equ	0xFEA
 11618                           fsr0l	equ	0xFE9
 11619                           wreg	equ	0xFE8
 11620                           indf1	equ	0xFE7
 11621                           postinc1	equ	0xFE6
 11622                           postdec1	equ	0xFE5
 11623                           plusw1	equ	0xFE3
 11624                           fsr1h	equ	0xFE2
 11625                           fsr1l	equ	0xFE1
 11626                           indf2	equ	0xFDF
 11627                           postinc2	equ	0xFDE
 11628                           postdec2	equ	0xFDD
 11629                           plusw2	equ	0xFDB
 11630                           fsr2h	equ	0xFDA
 11631                           fsr2l	equ	0xFD9
 11632                           status	equ	0xFD8
 11633                           
 11634 ;; *************** function ___lwmod *****************
 11635 ;; Defined at:
 11636 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;  dividend        2    0[BANK0 ] unsigned int 
 11639 ;;  divisor         2    2[BANK0 ] unsigned int 
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;  counter         1    4[BANK0 ] unsigned char 
 11642 ;; Return value:  Size  Location     Type
 11643 ;;                  2    0[BANK0 ] unsigned int 
 11644 ;; Registers used:
 11645 ;;		wreg, status,2, status,0
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11651 ;;      Params:         0       4       0       0       0       0       0       0       0
 11652 ;;      Locals:         0       1       0       0       0       0       0       0       0
 11653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11654 ;;      Totals:         0       5       0       0       0       0       0       0       0
 11655 ;;Total ram usage:        5 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    4
 11658 ;; This function calls:
 11659 ;;		Nothing
 11660 ;; This function is called by:
 11661 ;;		_ipAdressToString
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           	psect	text37
 11666  00466C                     __ptext37:
 11667                           	opt stack 0
 11668  00466C                     ___lwmod:
 11669                           	opt stack 24
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;incstack = 0
 11673  00466C  0100               	movlb	0	; () banked
 11674  00466E  5162               	movf	___lwmod@divisor& (0+255),w,b
 11675  004670  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 11676  004672  B4D8               	btfsc	status,2,c
 11677  004674  D018               	goto	l1488
 11678                           
 11679                           ; BSR set to: 0
 11680  004676  0E01               	movlw	1
 11681  004678  6F64               	movwf	___lwmod@counter& (0+255),b
 11682  00467A  D004               	goto	l1483
 11683  00467C                     
 11684                           ; BSR set to: 0
 11685                           
 11686                           ; BSR set to: 0
 11687  00467C  90D8               	bcf	status,0,c
 11688  00467E  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 11689  004680  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 11690  004682  2B64               	incf	___lwmod@counter& (0+255),f,b
 11691  004684                     l1483:
 11692                           
 11693                           ; BSR set to: 0
 11694                           
 11695                           ; BSR set to: 0
 11696  004684  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 11697  004686  D7FA               	goto	l1484
 11698  004688                     u8900:
 11699                           
 11700                           ; BSR set to: 0
 11701                           
 11702                           ; BSR set to: 0
 11703                           
 11704                           ; BSR set to: 0
 11705  004688  5162               	movf	___lwmod@divisor& (0+255),w,b
 11706  00468A  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 11707  00468C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11708  00468E  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 11709  004690  A0D8               	btfss	status,0,c
 11710  004692  D004               	goto	l1487
 11711                           
 11712                           ; BSR set to: 0
 11713  004694  5162               	movf	___lwmod@divisor& (0+255),w,b
 11714  004696  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 11715  004698  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 11716  00469A  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 11717  00469C                     l1487:
 11718                           
 11719                           ; BSR set to: 0
 11720                           
 11721                           ; BSR set to: 0
 11722  00469C  90D8               	bcf	status,0,c
 11723  00469E  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 11724  0046A0  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 11725                           
 11726                           ; BSR set to: 0
 11727  0046A2  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 11728  0046A4  D7F1               	goto	u8900
 11729  0046A6                     l1488:
 11730                           
 11731                           ; BSR set to: 0
 11732                           
 11733                           ; BSR set to: 0
 11734  0046A6  C060  F060         	movff	___lwmod@dividend,?___lwmod
 11735  0046AA  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 11736                           
 11737                           ; BSR set to: 0
 11738  0046AE  0012               	return		;funcret
 11739  0046B0                     __end_of___lwmod:
 11740                           	opt stack 0
 11741                           tblptru	equ	0xFF8
 11742                           tblptrh	equ	0xFF7
 11743                           tblptrl	equ	0xFF6
 11744                           tablat	equ	0xFF5
 11745                           prodh	equ	0xFF4
 11746                           prodl	equ	0xFF3
 11747                           intcon	equ	0xFF2
 11748                           intcon3	equ	0xFF0
 11749                           postinc0	equ	0xFEE
 11750                           plusw0	equ	0xFEB
 11751                           fsr0h	equ	0xFEA
 11752                           fsr0l	equ	0xFE9
 11753                           wreg	equ	0xFE8
 11754                           indf1	equ	0xFE7
 11755                           postinc1	equ	0xFE6
 11756                           postdec1	equ	0xFE5
 11757                           plusw1	equ	0xFE3
 11758                           fsr1h	equ	0xFE2
 11759                           fsr1l	equ	0xFE1
 11760                           indf2	equ	0xFDF
 11761                           postinc2	equ	0xFDE
 11762                           postdec2	equ	0xFDD
 11763                           plusw2	equ	0xFDB
 11764                           fsr2h	equ	0xFDA
 11765                           fsr2l	equ	0xFD9
 11766                           status	equ	0xFD8
 11767                           
 11768 ;; *************** function ___lwdiv *****************
 11769 ;; Defined at:
 11770 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 11771 ;; Parameters:    Size  Location     Type
 11772 ;;  dividend        2    0[BANK0 ] unsigned int 
 11773 ;;  divisor         2    2[BANK0 ] unsigned int 
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;  quotient        2    5[BANK0 ] unsigned int 
 11776 ;;  counter         1    4[BANK0 ] unsigned char 
 11777 ;; Return value:  Size  Location     Type
 11778 ;;                  2    0[BANK0 ] unsigned int 
 11779 ;; Registers used:
 11780 ;;		wreg, status,2, status,0
 11781 ;; Tracked objects:
 11782 ;;		On entry : 0/0
 11783 ;;		On exit  : 0/0
 11784 ;;		Unchanged: 0/0
 11785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11786 ;;      Params:         0       4       0       0       0       0       0       0       0
 11787 ;;      Locals:         0       3       0       0       0       0       0       0       0
 11788 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11789 ;;      Totals:         0       7       0       0       0       0       0       0       0
 11790 ;;Total ram usage:        7 bytes
 11791 ;; Hardware stack levels used:    1
 11792 ;; Hardware stack levels required when called:    4
 11793 ;; This function calls:
 11794 ;;		Nothing
 11795 ;; This function is called by:
 11796 ;;		_ipAdressToString
 11797 ;; This function uses a non-reentrant model
 11798 ;;
 11799                           
 11800                           	psect	text38
 11801  004452                     __ptext38:
 11802                           	opt stack 0
 11803  004452                     ___lwdiv:
 11804                           	opt stack 24
 11805                           
 11806                           ; BSR set to: 0
 11807                           ;incstack = 0
 11808  004452  0E00               	movlw	0
 11809  004454  0100               	movlb	0	; () banked
 11810  004456  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11811  004458  0E00               	movlw	0
 11812  00445A  6F65               	movwf	___lwdiv@quotient& (0+255),b
 11813                           
 11814                           ; BSR set to: 0
 11815  00445C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11816  00445E  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11817  004460  B4D8               	btfsc	status,2,c
 11818  004462  D01C               	goto	l1478
 11819                           
 11820                           ; BSR set to: 0
 11821  004464  0E01               	movlw	1
 11822  004466  6F64               	movwf	___lwdiv@counter& (0+255),b
 11823  004468  D004               	goto	l1473
 11824  00446A                     
 11825                           ; BSR set to: 0
 11826                           
 11827                           ; BSR set to: 0
 11828  00446A  90D8               	bcf	status,0,c
 11829  00446C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 11830  00446E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11831  004470  2B64               	incf	___lwdiv@counter& (0+255),f,b
 11832  004472                     l1473:
 11833                           
 11834                           ; BSR set to: 0
 11835                           
 11836                           ; BSR set to: 0
 11837  004472  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11838  004474  D7FA               	goto	l1474
 11839  004476                     u8870:
 11840                           
 11841                           ; BSR set to: 0
 11842                           
 11843                           ; BSR set to: 0
 11844                           
 11845                           ; BSR set to: 0
 11846  004476  90D8               	bcf	status,0,c
 11847  004478  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 11848  00447A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11849                           
 11850                           ; BSR set to: 0
 11851  00447C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11852  00447E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 11853  004480  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11854  004482  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11855  004484  A0D8               	btfss	status,0,c
 11856  004486  D005               	goto	l1477
 11857                           
 11858                           ; BSR set to: 0
 11859  004488  5162               	movf	___lwdiv@divisor& (0+255),w,b
 11860  00448A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 11861  00448C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11862  00448E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11863                           
 11864                           ; BSR set to: 0
 11865  004490  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 11866  004492                     l1477:
 11867                           
 11868                           ; BSR set to: 0
 11869                           
 11870                           ; BSR set to: 0
 11871  004492  90D8               	bcf	status,0,c
 11872  004494  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11873  004496  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 11874                           
 11875                           ; BSR set to: 0
 11876  004498  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 11877  00449A  D7ED               	goto	u8870
 11878  00449C                     l1478:
 11879                           
 11880                           ; BSR set to: 0
 11881                           
 11882                           ; BSR set to: 0
 11883  00449C  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 11884  0044A0  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11885                           
 11886                           ; BSR set to: 0
 11887  0044A4  0012               	return		;funcret
 11888  0044A6                     __end_of___lwdiv:
 11889                           	opt stack 0
 11890                           tblptru	equ	0xFF8
 11891                           tblptrh	equ	0xFF7
 11892                           tblptrl	equ	0xFF6
 11893                           tablat	equ	0xFF5
 11894                           prodh	equ	0xFF4
 11895                           prodl	equ	0xFF3
 11896                           intcon	equ	0xFF2
 11897                           intcon3	equ	0xFF0
 11898                           postinc0	equ	0xFEE
 11899                           plusw0	equ	0xFEB
 11900                           fsr0h	equ	0xFEA
 11901                           fsr0l	equ	0xFE9
 11902                           wreg	equ	0xFE8
 11903                           indf1	equ	0xFE7
 11904                           postinc1	equ	0xFE6
 11905                           postdec1	equ	0xFE5
 11906                           plusw1	equ	0xFE3
 11907                           fsr1h	equ	0xFE2
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           plusw2	equ	0xFDB
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _ethernetController_getMacAddress *****************
 11918 ;; Defined at:
 11919 ;;		line 160 in file "src/enc424j600/ENC424J600.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  mac             6   20[BANK0 ] struct macaddress
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  6   14[BANK0 ] struct macaddress
 11926 ;; Registers used:
 11927 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11933 ;;      Params:         0       6       0       0       0       0       0       0       0
 11934 ;;      Locals:         0       6       0       0       0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11936 ;;      Totals:         0      12       0       0       0       0       0       0       0
 11937 ;;Total ram usage:       12 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    7
 11940 ;; This function calls:
 11941 ;;		_ENC424J600_readControlRegisterUnbanked
 11942 ;; This function is called by:
 11943 ;;		_main
 11944 ;;		_ARP_replyIfNeeded
 11945 ;;		_ARP_sendRequest
 11946 ;;		_ipv4_sendFrame
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           	psect	text39
 11951  00409A                     __ptext39:
 11952                           	opt stack 0
 11953  00409A                     _ethernetController_getMacAddress:
 11954                           	opt stack 21
 11955                           
 11956                           ;ENC424J600.c: 161: macaddress_t mac;
 11957                           ;ENC424J600.c: 162: ENC424J600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;incstack = 0
 11961  00409A  0E74               	movlw	low ethernetController_getMacAddress@mac
 11962  00409C  0100               	movlb	0	; () banked
 11963  00409E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11964  0040A0  0E00               	movlw	high ethernetController_getMacAddress@mac
 11965  0040A2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11966  0040A4  0E64               	movlw	100
 11967  0040A6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11968                           
 11969                           ;ENC424J600.c: 163: ENC424J600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 11970  0040AA  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 11971  0040AC  0100               	movlb	0	; () banked
 11972  0040AE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11973  0040B0  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 11974  0040B2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11975  0040B4  0E65               	movlw	101
 11976  0040B6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11977                           
 11978                           ;ENC424J600.c: 164: ENC424J600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 11979  0040BA  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 11980  0040BC  0100               	movlb	0	; () banked
 11981  0040BE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11982  0040C0  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 11983  0040C2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11984  0040C4  0E62               	movlw	98
 11985  0040C6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11986                           
 11987                           ;ENC424J600.c: 165: ENC424J600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 11988  0040CA  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 11989  0040CC  0100               	movlb	0	; () banked
 11990  0040CE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 11991  0040D0  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 11992  0040D2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 11993  0040D4  0E63               	movlw	99
 11994  0040D6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 11995                           
 11996                           ;ENC424J600.c: 166: ENC424J600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 11997  0040DA  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 11998  0040DC  0100               	movlb	0	; () banked
 11999  0040DE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12000  0040E0  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 12001  0040E2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12002  0040E4  0E60               	movlw	96
 12003  0040E6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 12004                           
 12005                           ;ENC424J600.c: 167: ENC424J600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 12006  0040EA  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 12007  0040EC  0100               	movlb	0	; () banked
 12008  0040EE  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 12009  0040F0  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 12010  0040F2  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 12011  0040F4  0E61               	movlw	97
 12012  0040F6  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 12013                           
 12014                           ;ENC424J600.c: 168: return mac;
 12015  0040FA  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 12016  0040FE  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 12017  004102  0E05               	movlw	5
 12018  004104                     u8961:
 12019  004104  CFDB FFEB          	movff	plusw2,plusw0
 12020  004108  06E8               	decf	wreg,f,c
 12021  00410A  E2FC               	bc	u8961
 12022  00410C  0012               	return	
 12023  00410E                     __end_of_ethernetController_getMacAddress:
 12024                           	opt stack 0
 12025                           tblptru	equ	0xFF8
 12026                           tblptrh	equ	0xFF7
 12027                           tblptrl	equ	0xFF6
 12028                           tablat	equ	0xFF5
 12029                           prodh	equ	0xFF4
 12030                           prodl	equ	0xFF3
 12031                           intcon	equ	0xFF2
 12032                           intcon3	equ	0xFF0
 12033                           postinc0	equ	0xFEE
 12034                           plusw0	equ	0xFEB
 12035                           fsr0h	equ	0xFEA
 12036                           fsr0l	equ	0xFE9
 12037                           wreg	equ	0xFE8
 12038                           indf1	equ	0xFE7
 12039                           postinc1	equ	0xFE6
 12040                           postdec1	equ	0xFE5
 12041                           plusw1	equ	0xFE3
 12042                           fsr1h	equ	0xFE2
 12043                           fsr1l	equ	0xFE1
 12044                           indf2	equ	0xFDF
 12045                           postinc2	equ	0xFDE
 12046                           postdec2	equ	0xFDD
 12047                           plusw2	equ	0xFDB
 12048                           fsr2h	equ	0xFDA
 12049                           fsr2l	equ	0xFD9
 12050                           status	equ	0xFD8
 12051                           
 12052 ;; *************** function _ARP_send *****************
 12053 ;; Defined at:
 12054 ;;		line 170 in file "src/stack/protocols/arp.c"
 12055 ;; Parameters:    Size  Location     Type
 12056 ;;  arp            32   71[BANK0 ] struct ARP_message
 12057 ;; Auto vars:     Size  Location     Type
 12058 ;;  i               1  112[BANK0 ] unsigned char 
 12059 ;;  i               1  111[BANK0 ] unsigned char 
 12060 ;;  i               1  110[BANK0 ] unsigned char 
 12061 ;;  i               1  109[BANK0 ] unsigned char 
 12062 ;;  ethFrame       30  113[BANK0 ] struct ethernetFrame
 12063 ;;  field           9  143[BANK0 ] struct memoryField
 12064 ;;  destination     6  103[BANK0 ] struct macaddress
 12065 ;; Return value:  Size  Location     Type
 12066 ;;                  1    wreg      void 
 12067 ;; Registers used:
 12068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12074 ;;      Params:         0      32       0       0       0       0       0       0       0
 12075 ;;      Locals:         0      49       0       0       0       0       0       0       0
 12076 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12077 ;;      Totals:         0      81       0       0       0       0       0       0       0
 12078 ;;Total ram usage:       81 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    9
 12081 ;; This function calls:
 12082 ;;		_ethernetController_getSourceMACAddress
 12083 ;;		_ethernetController_sendPacket
 12084 ;;		_ethernetController_streamToTransmitBuffer
 12085 ;;		_ethernet_txFrameRequest
 12086 ;;		_mac_setToBroadcast
 12087 ;; This function is called by:
 12088 ;;		_ARP_replyIfNeeded
 12089 ;;		_ARP_sendRequest
 12090 ;; This function uses a non-reentrant model
 12091 ;;
 12092                           
 12093                           	psect	text40
 12094  001AEC                     __ptext40:
 12095                           	opt stack 0
 12096  001AEC                     _ARP_send:
 12097                           	opt stack 18
 12098                           
 12099                           ;arp.c: 171: memoryField_t field;
 12100                           ;arp.c: 172: macaddress_t destination;
 12101                           ;arp.c: 173: ethernetFrame_t ethFrame;
 12102                           ;arp.c: 174: mac_setToBroadcast(&destination);
 12103                           
 12104                           ;incstack = 0
 12105  001AEC  0EC7               	movlw	low ARP_send@destination
 12106  001AEE  0100               	movlb	0	; () banked
 12107  001AF0  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 12108  001AF2  0E00               	movlw	high ARP_send@destination
 12109  001AF4  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 12110  001AF6  EC4D  F025         	call	_mac_setToBroadcast	;wreg free
 12111                           
 12112                           ;arp.c: 176: ethFrame.length = 36;
 12113  001AFA  0E00               	movlw	0
 12114  001AFC  0100               	movlb	0	; () banked
 12115  001AFE  6FD2               	movwf	(ARP_send@ethFrame+1)& (0+255),b
 12116  001B00  0E24               	movlw	36
 12117  001B02  6FD1               	movwf	ARP_send@ethFrame& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;arp.c: 177: ethFrame.destination = arp.targetMACAddress;
 12121  001B04  EE20  F0B9         	lfsr	2,ARP_send@arp+18
 12122  001B08  EE10  F0D9         	lfsr	1,ARP_send@ethFrame+8
 12123  001B0C  0E05               	movlw	5
 12124  001B0E                     u9281:
 12125  001B0E  CFDB FFE3          	movff	plusw2,plusw1
 12126  001B12  06E8               	decf	wreg,f,c
 12127  001B14  E2FC               	bc	u9281
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;arp.c: 178: ethFrame.source = ethernetController_getSourceMACAddress(field);
 12131  001B16  EE20  F0EF         	lfsr	2,ARP_send@field
 12132  001B1A  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 12133  001B1E  0E08               	movlw	8
 12134  001B20                     u9291:
 12135  001B20  CFDB FFEB          	movff	plusw2,plusw0
 12136  001B24  06E8               	decf	wreg,f,c
 12137  001B26  E2FC               	bc	u9291
 12138  001B28  ECF8  F020         	call	_ethernetController_getSourceMACAddress	;wreg free
 12139  001B2C  EE20  F0D3         	lfsr	2,ARP_send@ethFrame+2
 12140  001B30  0E05               	movlw	5
 12141  001B32                     u9301:
 12142  001B32  CFEB FFDB          	movff	plusw0,plusw2
 12143  001B36  06E8               	decf	wreg,f,c
 12144  001B38  E2FC               	bc	u9301
 12145                           
 12146                           ;arp.c: 179: ethFrame.ethertype = ETHERTYPE_ARP;
 12147  001B3A  0E08               	movlw	8
 12148  001B3C  0100               	movlb	0	; () banked
 12149  001B3E  6FE0               	movwf	(ARP_send@ethFrame+15)& (0+255),b
 12150  001B40  0E06               	movlw	6
 12151  001B42  6FDF               	movwf	(ARP_send@ethFrame+14)& (0+255),b
 12152                           
 12153                           ; BSR set to: 0
 12154                           ;arp.c: 181: ethernet_txFrameRequest(&ethFrame);
 12155  001B44  0ED1               	movlw	low ARP_send@ethFrame
 12156  001B46  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 12157  001B48  0E00               	movlw	high ARP_send@ethFrame
 12158  001B4A  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 12159  001B4C  EC8A  F01A         	call	_ethernet_txFrameRequest	;wreg free
 12160                           
 12161                           ;arp.c: 183: if (ethFrame.memory.fOutOfMemory) {
 12162  001B50  0100               	movlb	0	; () banked
 12163  001B52  51E8               	movf	(ARP_send@ethFrame+23)& (0+255),w,b
 12164  001B54  A4D8               	btfss	status,2,c
 12165  001B56  0012               	return	
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;arp.c: 185: }
 12169                           ;arp.c: 187: field.start = ethFrame.memory.start + 8;
 12170                           
 12171                           ; BSR set to: 0
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;arp.c: 184: return;
 12175  001B58  0E08               	movlw	8
 12176  001B5A  25E1               	addwf	(ARP_send@ethFrame+16)& (0+255),w,b
 12177  001B5C  6FEF               	movwf	ARP_send@field& (0+255),b
 12178  001B5E  0E00               	movlw	0
 12179  001B60  21E2               	addwfc	(ARP_send@ethFrame+17)& (0+255),w,b
 12180  001B62  6FF0               	movwf	(ARP_send@field+1)& (0+255),b
 12181                           
 12182                           ; BSR set to: 0
 12183                           ;arp.c: 188: field.end = ethFrame.memory.end;
 12184  001B64  C0E3  F0F1         	movff	ARP_send@ethFrame+18,ARP_send@field+2
 12185  001B68  C0E4  F0F2         	movff	ARP_send@ethFrame+19,ARP_send@field+3
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;arp.c: 189: field.length = 28;
 12189  001B6C  0E00               	movlw	0
 12190  001B6E  6FF4               	movwf	(ARP_send@field+5)& (0+255),b
 12191  001B70  0E1C               	movlw	28
 12192  001B72  6FF3               	movwf	(ARP_send@field+4)& (0+255),b
 12193                           
 12194                           ; BSR set to: 0
 12195                           ;arp.c: 192: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 12196  001B74  EE20  F0EF         	lfsr	2,ARP_send@field
 12197  001B78  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12198  001B7C  0E08               	movlw	8
 12199  001B7E                     u9321:
 12200  001B7E  CFDB FFEB          	movff	plusw2,plusw0
 12201  001B82  06E8               	decf	wreg,f,c
 12202  001B84  E2FC               	bc	u9321
 12203  001B86  51A8               	movf	(ARP_send@arp+1)& (0+255),w,b
 12204  001B88  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12205                           
 12206                           ;arp.c: 193: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 12207  001B8C  EE20  F0EF         	lfsr	2,ARP_send@field
 12208  001B90  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12209  001B94  0E08               	movlw	8
 12210  001B96                     u9331:
 12211  001B96  CFDB FFEB          	movff	plusw2,plusw0
 12212  001B9A  06E8               	decf	wreg,f,c
 12213  001B9C  E2FC               	bc	u9331
 12214  001B9E  0100               	movlb	0	; () banked
 12215  001BA0  51A7               	movf	ARP_send@arp& (0+255),w,b
 12216  001BA2  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12217                           
 12218                           ;arp.c: 194: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 12219  001BA6  EE20  F0EF         	lfsr	2,ARP_send@field
 12220  001BAA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12221  001BAE  0E08               	movlw	8
 12222  001BB0                     u9341:
 12223  001BB0  CFDB FFEB          	movff	plusw2,plusw0
 12224  001BB4  06E8               	decf	wreg,f,c
 12225  001BB6  E2FC               	bc	u9341
 12226  001BB8  0100               	movlb	0	; () banked
 12227  001BBA  51AA               	movf	(ARP_send@arp+3)& (0+255),w,b
 12228  001BBC  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12229                           
 12230                           ;arp.c: 195: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 12231  001BC0  EE20  F0EF         	lfsr	2,ARP_send@field
 12232  001BC4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12233  001BC8  0E08               	movlw	8
 12234  001BCA                     u9351:
 12235  001BCA  CFDB FFEB          	movff	plusw2,plusw0
 12236  001BCE  06E8               	decf	wreg,f,c
 12237  001BD0  E2FC               	bc	u9351
 12238  001BD2  0100               	movlb	0	; () banked
 12239  001BD4  51A9               	movf	(ARP_send@arp+2)& (0+255),w,b
 12240  001BD6  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12241                           
 12242                           ;arp.c: 196: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 12243  001BDA  EE20  F0EF         	lfsr	2,ARP_send@field
 12244  001BDE  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12245  001BE2  0E08               	movlw	8
 12246  001BE4                     u9361:
 12247  001BE4  CFDB FFEB          	movff	plusw2,plusw0
 12248  001BE8  06E8               	decf	wreg,f,c
 12249  001BEA  E2FC               	bc	u9361
 12250  001BEC  0100               	movlb	0	; () banked
 12251  001BEE  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12252  001BF0  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12253                           
 12254                           ;arp.c: 197: ethernetController_streamToTransmitBuffer(arp.plen, field);
 12255  001BF4  EE20  F0EF         	lfsr	2,ARP_send@field
 12256  001BF8  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12257  001BFC  0E08               	movlw	8
 12258  001BFE                     u9371:
 12259  001BFE  CFDB FFEB          	movff	plusw2,plusw0
 12260  001C02  06E8               	decf	wreg,f,c
 12261  001C04  E2FC               	bc	u9371
 12262  001C06  0100               	movlb	0	; () banked
 12263  001C08  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12264  001C0A  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12265                           
 12266                           ;arp.c: 198: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 12267  001C0E  EE20  F0EF         	lfsr	2,ARP_send@field
 12268  001C12  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12269  001C16  0E08               	movlw	8
 12270  001C18                     u9381:
 12271  001C18  CFDB FFEB          	movff	plusw2,plusw0
 12272  001C1C  06E8               	decf	wreg,f,c
 12273  001C1E  E2FC               	bc	u9381
 12274  001C20  0100               	movlb	0	; () banked
 12275  001C22  51AE               	movf	(ARP_send@arp+7)& (0+255),w,b
 12276  001C24  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12277                           
 12278                           ;arp.c: 199: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 12279  001C28  EE20  F0EF         	lfsr	2,ARP_send@field
 12280  001C2C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12281  001C30  0E08               	movlw	8
 12282  001C32                     u9391:
 12283  001C32  CFDB FFEB          	movff	plusw2,plusw0
 12284  001C36  06E8               	decf	wreg,f,c
 12285  001C38  E2FC               	bc	u9391
 12286  001C3A  0100               	movlb	0	; () banked
 12287  001C3C  51AD               	movf	(ARP_send@arp+6)& (0+255),w,b
 12288  001C3E  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12289                           
 12290                           ;arp.c: 200: for (uint8_t i = 0; i < arp.hlen; i++)
 12291  001C42  0E00               	movlw	0
 12292  001C44  0100               	movlb	0	; () banked
 12293  001C46  6FCD               	movwf	ARP_send@i& (0+255),b
 12294  001C48  D01A               	goto	l926
 12295  001C4A                     
 12296                           ; BSR set to: 0
 12297                           ;arp.c: 201: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 12298                           
 12299                           ; BSR set to: 0
 12300  001C4A  EE20  F0EF         	lfsr	2,ARP_send@field
 12301  001C4E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12302  001C52  0E08               	movlw	8
 12303  001C54                     u9401:
 12304  001C54  CFDB FFEB          	movff	plusw2,plusw0
 12305  001C58  06E8               	decf	wreg,f,c
 12306  001C5A  E2FC               	bc	u9401
 12307  001C5C  51CD               	movf	ARP_send@i& (0+255),w,b
 12308  001C5E  0D01               	mullw	1
 12309  001C60  0E08               	movlw	8
 12310  001C62  26F3               	addwf	prodl,f,c
 12311  001C64  0E00               	movlw	0
 12312  001C66  22F4               	addwfc	prodh,f,c
 12313  001C68  0EA7               	movlw	low ARP_send@arp
 12314  001C6A  24F3               	addwf	prodl,w,c
 12315  001C6C  6ED9               	movwf	fsr2l,c
 12316  001C6E  0E00               	movlw	high ARP_send@arp
 12317  001C70  20F4               	addwfc	prodh,w,c
 12318  001C72  6EDA               	movwf	fsr2h,c
 12319  001C74  50DF               	movf	indf2,w,c
 12320  001C76  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12321  001C7A  0100               	movlb	0	; () banked
 12322  001C7C  2BCD               	incf	ARP_send@i& (0+255),f,b
 12323  001C7E                     l926:
 12324                           
 12325                           ; BSR set to: 0
 12326                           
 12327                           ; BSR set to: 0
 12328  001C7E  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12329  001C80  5DCD               	subwf	ARP_send@i& (0+255),w,b
 12330  001C82  A0D8               	btfss	status,0,c
 12331  001C84  D7E2               	goto	l927
 12332                           
 12333                           ; BSR set to: 0
 12334                           ;arp.c: 202: for (uint8_t i = 0; i < arp.plen; i++)
 12335                           
 12336                           ; BSR set to: 0
 12337  001C86  0E00               	movlw	0
 12338  001C88  6FCE               	movwf	ARP_send@i_2729& (0+255),b
 12339  001C8A  D01A               	goto	l929
 12340  001C8C                     
 12341                           ; BSR set to: 0
 12342                           ;arp.c: 203: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 12343                           
 12344                           ; BSR set to: 0
 12345  001C8C  EE20  F0EF         	lfsr	2,ARP_send@field
 12346  001C90  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12347  001C94  0E08               	movlw	8
 12348  001C96                     u9421:
 12349  001C96  CFDB FFEB          	movff	plusw2,plusw0
 12350  001C9A  06E8               	decf	wreg,f,c
 12351  001C9C  E2FC               	bc	u9421
 12352  001C9E  51CE               	movf	ARP_send@i_2729& (0+255),w,b
 12353  001CA0  0D01               	mullw	1
 12354  001CA2  0E0E               	movlw	14
 12355  001CA4  26F3               	addwf	prodl,f,c
 12356  001CA6  0E00               	movlw	0
 12357  001CA8  22F4               	addwfc	prodh,f,c
 12358  001CAA  0EA7               	movlw	low ARP_send@arp
 12359  001CAC  24F3               	addwf	prodl,w,c
 12360  001CAE  6ED9               	movwf	fsr2l,c
 12361  001CB0  0E00               	movlw	high ARP_send@arp
 12362  001CB2  20F4               	addwfc	prodh,w,c
 12363  001CB4  6EDA               	movwf	fsr2h,c
 12364  001CB6  50DF               	movf	indf2,w,c
 12365  001CB8  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12366  001CBC  0100               	movlb	0	; () banked
 12367  001CBE  2BCE               	incf	ARP_send@i_2729& (0+255),f,b
 12368  001CC0                     l929:
 12369                           
 12370                           ; BSR set to: 0
 12371                           
 12372                           ; BSR set to: 0
 12373  001CC0  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12374  001CC2  5DCE               	subwf	ARP_send@i_2729& (0+255),w,b
 12375  001CC4  A0D8               	btfss	status,0,c
 12376  001CC6  D7E2               	goto	l930
 12377                           
 12378                           ; BSR set to: 0
 12379                           ;arp.c: 204: for (uint8_t i = 0; i < arp.hlen; i++)
 12380                           
 12381                           ; BSR set to: 0
 12382  001CC8  0E00               	movlw	0
 12383  001CCA  6FCF               	movwf	ARP_send@i_2730& (0+255),b
 12384  001CCC  D01A               	goto	l932
 12385  001CCE                     
 12386                           ; BSR set to: 0
 12387                           ;arp.c: 205: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 12388                           
 12389                           ; BSR set to: 0
 12390  001CCE  EE20  F0EF         	lfsr	2,ARP_send@field
 12391  001CD2  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12392  001CD6  0E08               	movlw	8
 12393  001CD8                     u9441:
 12394  001CD8  CFDB FFEB          	movff	plusw2,plusw0
 12395  001CDC  06E8               	decf	wreg,f,c
 12396  001CDE  E2FC               	bc	u9441
 12397  001CE0  51CF               	movf	ARP_send@i_2730& (0+255),w,b
 12398  001CE2  0D01               	mullw	1
 12399  001CE4  0E12               	movlw	18
 12400  001CE6  26F3               	addwf	prodl,f,c
 12401  001CE8  0E00               	movlw	0
 12402  001CEA  22F4               	addwfc	prodh,f,c
 12403  001CEC  0EA7               	movlw	low ARP_send@arp
 12404  001CEE  24F3               	addwf	prodl,w,c
 12405  001CF0  6ED9               	movwf	fsr2l,c
 12406  001CF2  0E00               	movlw	high ARP_send@arp
 12407  001CF4  20F4               	addwfc	prodh,w,c
 12408  001CF6  6EDA               	movwf	fsr2h,c
 12409  001CF8  50DF               	movf	indf2,w,c
 12410  001CFA  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12411  001CFE  0100               	movlb	0	; () banked
 12412  001D00  2BCF               	incf	ARP_send@i_2730& (0+255),f,b
 12413  001D02                     l932:
 12414                           
 12415                           ; BSR set to: 0
 12416                           
 12417                           ; BSR set to: 0
 12418  001D02  51AB               	movf	(ARP_send@arp+4)& (0+255),w,b
 12419  001D04  5DCF               	subwf	ARP_send@i_2730& (0+255),w,b
 12420  001D06  A0D8               	btfss	status,0,c
 12421  001D08  D7E2               	goto	l933
 12422                           
 12423                           ; BSR set to: 0
 12424                           ;arp.c: 207: for (uint8_t i = 0; i < arp.plen; i++)
 12425                           
 12426                           ; BSR set to: 0
 12427  001D0A  0E00               	movlw	0
 12428  001D0C  6FD0               	movwf	ARP_send@i_2731& (0+255),b
 12429  001D0E  D01A               	goto	l935
 12430  001D10                     
 12431                           ; BSR set to: 0
 12432                           ;arp.c: 208: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 12433                           
 12434                           ; BSR set to: 0
 12435  001D10  EE20  F0EF         	lfsr	2,ARP_send@field
 12436  001D14  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 12437  001D18  0E08               	movlw	8
 12438  001D1A                     u9461:
 12439  001D1A  CFDB FFEB          	movff	plusw2,plusw0
 12440  001D1E  06E8               	decf	wreg,f,c
 12441  001D20  E2FC               	bc	u9461
 12442  001D22  51D0               	movf	ARP_send@i_2731& (0+255),w,b
 12443  001D24  0D01               	mullw	1
 12444  001D26  0E18               	movlw	24
 12445  001D28  26F3               	addwf	prodl,f,c
 12446  001D2A  0E00               	movlw	0
 12447  001D2C  22F4               	addwfc	prodh,f,c
 12448  001D2E  0EA7               	movlw	low ARP_send@arp
 12449  001D30  24F3               	addwf	prodl,w,c
 12450  001D32  6ED9               	movwf	fsr2l,c
 12451  001D34  0E00               	movlw	high ARP_send@arp
 12452  001D36  20F4               	addwfc	prodh,w,c
 12453  001D38  6EDA               	movwf	fsr2h,c
 12454  001D3A  50DF               	movf	indf2,w,c
 12455  001D3C  ECD7  F01F         	call	_ethernetController_streamToTransmitBuffer
 12456  001D40  0100               	movlb	0	; () banked
 12457  001D42  2BD0               	incf	ARP_send@i_2731& (0+255),f,b
 12458  001D44                     l935:
 12459                           
 12460                           ; BSR set to: 0
 12461                           
 12462                           ; BSR set to: 0
 12463  001D44  51AC               	movf	(ARP_send@arp+5)& (0+255),w,b
 12464  001D46  5DD0               	subwf	ARP_send@i_2731& (0+255),w,b
 12465  001D48  A0D8               	btfss	status,0,c
 12466  001D4A  D7E2               	goto	l936
 12467                           
 12468                           ; BSR set to: 0
 12469                           ;arp.c: 210: ethernetController_sendPacket(ethFrame.memory);
 12470                           
 12471                           ; BSR set to: 0
 12472  001D4C  EE20  F0E1         	lfsr	2,ARP_send@ethFrame+16
 12473  001D50  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 12474  001D54  0E08               	movlw	8
 12475  001D56                     u9481:
 12476  001D56  CFDB FFEB          	movff	plusw2,plusw0
 12477  001D5A  06E8               	decf	wreg,f,c
 12478  001D5C  E2FC               	bc	u9481
 12479  001D5E  EC25  F025         	call	_ethernetController_sendPacket	;wreg free
 12480  001D62  0012               	return		;funcret
 12481  001D64                     __end_of_ARP_send:
 12482                           	opt stack 0
 12483                           tblptru	equ	0xFF8
 12484                           tblptrh	equ	0xFF7
 12485                           tblptrl	equ	0xFF6
 12486                           tablat	equ	0xFF5
 12487                           prodh	equ	0xFF4
 12488                           prodl	equ	0xFF3
 12489                           intcon	equ	0xFF2
 12490                           intcon3	equ	0xFF0
 12491                           postinc0	equ	0xFEE
 12492                           plusw0	equ	0xFEB
 12493                           fsr0h	equ	0xFEA
 12494                           fsr0l	equ	0xFE9
 12495                           wreg	equ	0xFE8
 12496                           indf1	equ	0xFE7
 12497                           postinc1	equ	0xFE6
 12498                           postdec1	equ	0xFE5
 12499                           plusw1	equ	0xFE3
 12500                           fsr1h	equ	0xFE2
 12501                           fsr1l	equ	0xFE1
 12502                           indf2	equ	0xFDF
 12503                           postinc2	equ	0xFDE
 12504                           postdec2	equ	0xFDD
 12505                           plusw2	equ	0xFDB
 12506                           fsr2h	equ	0xFDA
 12507                           fsr2l	equ	0xFD9
 12508                           status	equ	0xFD8
 12509                           
 12510 ;; *************** function _mac_setToBroadcast *****************
 12511 ;; Defined at:
 12512 ;;		line 26 in file "src/eth/mac.c"
 12513 ;; Parameters:    Size  Location     Type
 12514 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 12515 ;;		 -> ARP_sendRequest@targetMAC(6), ARP_send@destination(6), 
 12516 ;; Auto vars:     Size  Location     Type
 12517 ;;  i               1    2[BANK0 ] unsigned char 
 12518 ;; Return value:  Size  Location     Type
 12519 ;;                  1    wreg      void 
 12520 ;; Registers used:
 12521 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12522 ;; Tracked objects:
 12523 ;;		On entry : 0/0
 12524 ;;		On exit  : 0/0
 12525 ;;		Unchanged: 0/0
 12526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12527 ;;      Params:         0       2       0       0       0       0       0       0       0
 12528 ;;      Locals:         0       1       0       0       0       0       0       0       0
 12529 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12530 ;;      Totals:         0       3       0       0       0       0       0       0       0
 12531 ;;Total ram usage:        3 bytes
 12532 ;; Hardware stack levels used:    1
 12533 ;; Hardware stack levels required when called:    4
 12534 ;; This function calls:
 12535 ;;		Nothing
 12536 ;; This function is called by:
 12537 ;;		_ARP_send
 12538 ;;		_ARP_sendRequest
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           	psect	text41
 12543  004A9A                     __ptext41:
 12544                           	opt stack 0
 12545  004A9A                     _mac_setToBroadcast:
 12546                           	opt stack 23
 12547                           
 12548                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 12549                           
 12550                           ;incstack = 0
 12551  004A9A  0E00               	movlw	0
 12552  004A9C  0100               	movlb	0	; () banked
 12553  004A9E  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 12554  004AA0                     l7565:
 12555                           
 12556                           ; BSR set to: 0
 12557  004AA0  0E05               	movlw	5
 12558  004AA2  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 12559  004AA4  D001               	goto	l377
 12560  004AA6  0012               	return	
 12561  004AA8                     l377:
 12562                           
 12563                           ; BSR set to: 0
 12564                           ;mac.c: 28: mac->address[i] = 0xff;
 12565                           
 12566                           ; BSR set to: 0
 12567  004AA8  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 12568  004AAA  0D01               	mullw	1
 12569  004AAC  50F3               	movf	prodl,w,c
 12570  004AAE  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 12571  004AB0  6ED9               	movwf	fsr2l,c
 12572  004AB2  50F4               	movf	prodh,w,c
 12573  004AB4  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 12574  004AB6  6EDA               	movwf	fsr2h,c
 12575  004AB8  0EFF               	movlw	255
 12576  004ABA  6EDF               	movwf	indf2,c
 12577                           
 12578                           ; BSR set to: 0
 12579  004ABC  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 12580  004ABE  D7F0               	goto	l7565
 12581  004AC0                     __end_of_mac_setToBroadcast:
 12582                           	opt stack 0
 12583                           tblptru	equ	0xFF8
 12584                           tblptrh	equ	0xFF7
 12585                           tblptrl	equ	0xFF6
 12586                           tablat	equ	0xFF5
 12587                           prodh	equ	0xFF4
 12588                           prodl	equ	0xFF3
 12589                           intcon	equ	0xFF2
 12590                           intcon3	equ	0xFF0
 12591                           postinc0	equ	0xFEE
 12592                           plusw0	equ	0xFEB
 12593                           fsr0h	equ	0xFEA
 12594                           fsr0l	equ	0xFE9
 12595                           wreg	equ	0xFE8
 12596                           indf1	equ	0xFE7
 12597                           postinc1	equ	0xFE6
 12598                           postdec1	equ	0xFE5
 12599                           plusw1	equ	0xFE3
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           plusw2	equ	0xFDB
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function _ethernet_txFrameRequest *****************
 12611 ;; Defined at:
 12612 ;;		line 28 in file "src/eth/ethernet.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 12615 ;;		 -> ARP_send@ethFrame(30), stack(113), 
 12616 ;; Auto vars:     Size  Location     Type
 12617 ;;  err             3   68[BANK0 ] struct error
 12618 ;; Return value:  Size  Location     Type
 12619 ;;                  3   66[BANK0 ] struct error
 12620 ;; Registers used:
 12621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12622 ;; Tracked objects:
 12623 ;;		On entry : 0/0
 12624 ;;		On exit  : 0/0
 12625 ;;		Unchanged: 0/0
 12626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12627 ;;      Params:         0       2       0       0       0       0       0       0       0
 12628 ;;      Locals:         0       3       0       0       0       0       0       0       0
 12629 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12630 ;;      Totals:         0       5       0       0       0       0       0       0       0
 12631 ;;Total ram usage:        5 bytes
 12632 ;; Hardware stack levels used:    1
 12633 ;; Hardware stack levels required when called:    8
 12634 ;; This function calls:
 12635 ;;		_ethernetController_writeDestinationMACAddress
 12636 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 12637 ;;		_memory_txFrameRequest
 12638 ;; This function is called by:
 12639 ;;		_ARP_send
 12640 ;;		_ipv4_txFrameRequest
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text42
 12645  003514                     __ptext42:
 12646                           	opt stack 0
 12647  003514                     _ethernet_txFrameRequest:
 12648                           	opt stack 21
 12649                           
 12650                           ;ethernet.c: 30: error_t err;
 12651                           ;ethernet.c: 31: err.module = ERROR_MODULE_ETHERNET;
 12652                           
 12653                           ; BSR set to: 0
 12654                           ;incstack = 0
 12655  003514  0E02               	movlw	2
 12656  003516  0100               	movlb	0	; () banked
 12657  003518  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12658                           
 12659                           ;ethernet.c: 32: err.code = (uint16_t)0;
 12660  00351A  0E00               	movlw	0
 12661  00351C  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12662  00351E  0E00               	movlw	0
 12663  003520  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12664                           
 12665                           ; BSR set to: 0
 12666                           ;ethernet.c: 33: frame->memory = memory_txFrameRequest(frame->length);
 12667  003522  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 12668  003526  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 12669  00352A  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 12670  00352E  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 12671  003532  EC64  F000         	call	_memory_txFrameRequest	;wreg free
 12672  003536  0100               	movlb	0	; () banked
 12673  003538  EE20 F010          	lfsr	2,16
 12674  00353C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12675  00353E  26D9               	addwf	fsr2l,f,c
 12676  003540  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12677  003542  22DA               	addwfc	fsr2h,f,c
 12678  003544  0E08               	movlw	8
 12679  003546                     u8761:
 12680  003546  CFEB FFDB          	movff	plusw0,plusw2
 12681  00354A  06E8               	decf	wreg,f,c
 12682  00354C  E2FC               	bc	u8761
 12683                           
 12684                           ; BSR set to: 0
 12685                           ;ethernet.c: 35: if (frame->memory.fOutOfMemory) {
 12686  00354E  EE20 F017          	lfsr	2,23
 12687  003552  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12688  003554  26D9               	addwf	fsr2l,f,c
 12689  003556  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12690  003558  22DA               	addwfc	fsr2h,f,c
 12691  00355A  50DF               	movf	indf2,w,c
 12692  00355C  B4D8               	btfsc	status,2,c
 12693  00355E  D007               	goto	l355
 12694                           
 12695                           ; BSR set to: 0
 12696                           ;ethernet.c: 37: err.module = ERROR_MODULE_MEMORY;
 12697  003560  0E00               	movlw	0
 12698  003562  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12699                           
 12700                           ;ethernet.c: 38: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 12701  003564  0E00               	movlw	0
 12702  003566  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12703  003568  0E65               	movlw	101
 12704  00356A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;ethernet.c: 39: return err;
 12708                           ;	Return value of _ethernet_txFrameRequest is never used
 12709  00356C  0012               	return	
 12710  00356E                     l355:
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;ethernet.c: 40: }
 12714                           ;ethernet.c: 41: if (!frame->memory.fIsAssigned) {
 12715                           
 12716                           ; BSR set to: 0
 12717  00356E  EE20 F016          	lfsr	2,22
 12718  003572  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12719  003574  26D9               	addwf	fsr2l,f,c
 12720  003576  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12721  003578  22DA               	addwfc	fsr2h,f,c
 12722  00357A  50DF               	movf	indf2,w,c
 12723  00357C  A4D8               	btfss	status,2,c
 12724  00357E  D007               	goto	l357
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;ethernet.c: 43: err.module = ERROR_MODULE_MEMORY;
 12728  003580  0E00               	movlw	0
 12729  003582  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 12730                           
 12731                           ;ethernet.c: 44: err.code = ERROR_MEMORY_UNKNOWN;
 12732  003584  0E00               	movlw	0
 12733  003586  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 12734  003588  0EC7               	movlw	199
 12735  00358A  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 12736                           
 12737                           ; BSR set to: 0
 12738                           ;ethernet.c: 45: return err;
 12739                           ;	Return value of _ethernet_txFrameRequest is never used
 12740  00358C  0012               	return	
 12741  00358E                     l357:
 12742                           
 12743                           ; BSR set to: 0
 12744                           ;ethernet.c: 46: }
 12745                           ;ethernet.c: 48: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 12746                           
 12747                           ; BSR set to: 0
 12748  00358E  EE20 F008          	lfsr	2,8
 12749  003592  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12750  003594  26D9               	addwf	fsr2l,f,c
 12751  003596  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12752  003598  22DA               	addwfc	fsr2h,f,c
 12753  00359A  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 12754  00359E  0E05               	movlw	5
 12755  0035A0                     u8791:
 12756  0035A0  CFDB FFEB          	movff	plusw2,plusw0
 12757  0035A4  06E8               	decf	wreg,f,c
 12758  0035A6  E2FC               	bc	u8791
 12759  0035A8  EE20 F010          	lfsr	2,16
 12760  0035AC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12761  0035AE  26D9               	addwf	fsr2l,f,c
 12762  0035B0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12763  0035B2  22DA               	addwfc	fsr2h,f,c
 12764  0035B4  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 12765  0035B8  0E08               	movlw	8
 12766  0035BA                     u8801:
 12767  0035BA  CFDB FFEB          	movff	plusw2,plusw0
 12768  0035BE  06E8               	decf	wreg,f,c
 12769  0035C0  E2FC               	bc	u8801
 12770  0035C2  EC1B  F01F         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 12771                           
 12772                           ;ethernet.c: 49: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 12773  0035C6  0100               	movlb	0	; () banked
 12774  0035C8  EE20 F00E          	lfsr	2,14
 12775  0035CC  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12776  0035CE  26D9               	addwf	fsr2l,f,c
 12777  0035D0  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12778  0035D2  22DA               	addwfc	fsr2h,f,c
 12779  0035D4  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 12780  0035D8  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 12781  0035DC  EE20 F010          	lfsr	2,16
 12782  0035E0  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 12783  0035E2  26D9               	addwf	fsr2l,f,c
 12784  0035E4  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 12785  0035E6  22DA               	addwfc	fsr2h,f,c
 12786  0035E8  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 12787  0035EC  0E08               	movlw	8
 12788  0035EE                     u8811:
 12789  0035EE  CFDB FFEB          	movff	plusw2,plusw0
 12790  0035F2  06E8               	decf	wreg,f,c
 12791  0035F4  E2FC               	bc	u8811
 12792  0035F6  EC7C  F022         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 12793  0035FA  0012               	return	
 12794  0035FC                     __end_of_ethernet_txFrameRequest:
 12795                           	opt stack 0
 12796                           tblptru	equ	0xFF8
 12797                           tblptrh	equ	0xFF7
 12798                           tblptrl	equ	0xFF6
 12799                           tablat	equ	0xFF5
 12800                           prodh	equ	0xFF4
 12801                           prodl	equ	0xFF3
 12802                           intcon	equ	0xFF2
 12803                           intcon3	equ	0xFF0
 12804                           postinc0	equ	0xFEE
 12805                           plusw0	equ	0xFEB
 12806                           fsr0h	equ	0xFEA
 12807                           fsr0l	equ	0xFE9
 12808                           wreg	equ	0xFE8
 12809                           indf1	equ	0xFE7
 12810                           postinc1	equ	0xFE6
 12811                           postdec1	equ	0xFE5
 12812                           plusw1	equ	0xFE3
 12813                           fsr1h	equ	0xFE2
 12814                           fsr1l	equ	0xFE1
 12815                           indf2	equ	0xFDF
 12816                           postinc2	equ	0xFDE
 12817                           postdec2	equ	0xFDD
 12818                           plusw2	equ	0xFDB
 12819                           fsr2h	equ	0xFDA
 12820                           fsr2l	equ	0xFD9
 12821                           status	equ	0xFD8
 12822                           
 12823 ;; *************** function _memory_txFrameRequest *****************
 12824 ;; Defined at:
 12825 ;;		line 136 in file "src/mem/memoryController.c"
 12826 ;; Parameters:    Size  Location     Type
 12827 ;;  length          2   36[BANK0 ] unsigned int 
 12828 ;; Auto vars:     Size  Location     Type
 12829 ;;  i               1   54[BANK0 ] unsigned char 
 12830 ;;  i               1   55[BANK0 ] unsigned char 
 12831 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 12832 ;;  field           9   56[BANK0 ] struct memoryField
 12833 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 12834 ;; Return value:  Size  Location     Type
 12835 ;;                  9   36[BANK0 ] struct memoryField
 12836 ;; Registers used:
 12837 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12838 ;; Tracked objects:
 12839 ;;		On entry : 0/0
 12840 ;;		On exit  : 0/0
 12841 ;;		Unchanged: 0/0
 12842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12843 ;;      Params:         0       9       0       0       0       0       0       0       0
 12844 ;;      Locals:         0      15       0       0       0       0       0       0       0
 12845 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12846 ;;      Totals:         0      30       0       0       0       0       0       0       0
 12847 ;;Total ram usage:       30 bytes
 12848 ;; Hardware stack levels used:    1
 12849 ;; Hardware stack levels required when called:    6
 12850 ;; This function calls:
 12851 ;;		___wmul
 12852 ;;		_checkForOverlap
 12853 ;;		_entireMemoryEmpty
 12854 ;;		_entireMemoryFull
 12855 ;; This function is called by:
 12856 ;;		_ethernet_txFrameRequest
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           	psect	text43
 12861  0000C8                     __ptext43:
 12862                           	opt stack 0
 12863  0000C8                     _memory_txFrameRequest:
 12864                           	opt stack 22
 12865                           
 12866                           ;memoryController.c: 137: memoryField_t field;
 12867                           ;memoryController.c: 138: uint8_t freeIndex = 0;
 12868                           
 12869                           ;incstack = 0
 12870  0000C8  0E00               	movlw	0
 12871  0000CA  0100               	movlb	0	; () banked
 12872  0000CC  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 12873                           
 12874                           ; BSR set to: 0
 12875                           ;memoryController.c: 140: if (length == 0) {
 12876  0000CE  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 12877  0000D0  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12878  0000D2  A4D8               	btfss	status,2,c
 12879  0000D4  D00C               	goto	l460
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;memoryController.c: 141: field.fOutOfMemory = 1;
 12883  0000D6  0E01               	movlw	1
 12884  0000D8  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12885                           
 12886                           ; BSR set to: 0
 12887                           ;memoryController.c: 142: return field;
 12888  0000DA  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12889  0000DE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12890  0000E2  0E08               	movlw	8
 12891  0000E4                     u8381:
 12892  0000E4  CFDB FFEB          	movff	plusw2,plusw0
 12893  0000E8  06E8               	decf	wreg,f,c
 12894  0000EA  E2FC               	bc	u8381
 12895                           
 12896                           ; BSR set to: 0
 12897  0000EC  0012               	return	
 12898  0000EE                     l460:
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;memoryController.c: 143: }
 12902                           ;memoryController.c: 145: if (entireMemoryFull()) {
 12903                           
 12904                           ; BSR set to: 0
 12905  0000EE  ECF4  F023         	call	_entireMemoryFull	;wreg free
 12906  0000F2  0900               	iorlw	0
 12907  0000F4  B4D8               	btfsc	status,2,c
 12908  0000F6  D00D               	goto	l462
 12909                           
 12910                           ;memoryController.c: 146: field.fOutOfMemory = 1;
 12911  0000F8  0E01               	movlw	1
 12912  0000FA  0100               	movlb	0	; () banked
 12913  0000FC  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12914                           
 12915                           ; BSR set to: 0
 12916                           ;memoryController.c: 147: return field;
 12917  0000FE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12918  000102  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12919  000106  0E08               	movlw	8
 12920  000108                     u8401:
 12921  000108  CFDB FFEB          	movff	plusw2,plusw0
 12922  00010C  06E8               	decf	wreg,f,c
 12923  00010E  E2FC               	bc	u8401
 12924                           
 12925                           ; BSR set to: 0
 12926  000110  0012               	return	
 12927  000112                     l462:
 12928                           
 12929                           ;memoryController.c: 148: }
 12930                           ;memoryController.c: 149: if (entireMemoryEmpty()) {
 12931                           
 12932                           ; BSR set to: 0
 12933  000112  EC10  F024         	call	_entireMemoryEmpty	;wreg free
 12934  000116  0900               	iorlw	0
 12935  000118  B4D8               	btfsc	status,2,c
 12936  00011A  D23C               	goto	l487
 12937                           
 12938                           ;memoryController.c: 151: if ((0x0000 + length) > 0x3000 - 1) {
 12939  00011C  0E30               	movlw	48
 12940  00011E  0100               	movlb	0	; () banked
 12941  000120  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 12942  000122  A0D8               	btfss	status,0,c
 12943  000124  D00C               	goto	l464
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;memoryController.c: 152: field.fOutOfMemory = 1;
 12947  000126  0E01               	movlw	1
 12948  000128  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 12949                           
 12950                           ; BSR set to: 0
 12951                           ;memoryController.c: 153: return field;
 12952  00012A  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 12953  00012E  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12954  000132  0E08               	movlw	8
 12955  000134                     u8431:
 12956  000134  CFDB FFEB          	movff	plusw2,plusw0
 12957  000138  06E8               	decf	wreg,f,c
 12958  00013A  E2FC               	bc	u8431
 12959                           
 12960                           ; BSR set to: 0
 12961  00013C  0012               	return	
 12962  00013E                     l464:
 12963                           
 12964                           ; BSR set to: 0
 12965                           ;memoryController.c: 155: else {
 12966                           ;memoryController.c: 156: occupiedMemory[0].start = 0x0000;
 12967                           
 12968                           ; BSR set to: 0
 12969  00013E  0E00               	movlw	0
 12970  000140  0102               	movlb	2	; () banked
 12971  000142  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 12972  000144  0E00               	movlw	0
 12973  000146  6F00               	movwf	_occupiedMemory& (0+255),b
 12974                           
 12975                           ; BSR set to: 2
 12976                           ;memoryController.c: 157: occupiedMemory[0].end = 0x0000 + length;
 12977  000148  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 12978  00014C  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 12979                           
 12980                           ; BSR set to: 2
 12981                           ;memoryController.c: 158: occupiedMemory[0].length = length;
 12982  000150  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 12983  000154  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 12984                           
 12985                           ;memoryController.c: 159: occupiedMemory[0].fIsAssigned = 1;
 12986  000158  0E01               	movlw	1
 12987  00015A  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 12988                           
 12989                           ;memoryController.c: 160: occupiedMemory[0].index=0;
 12990  00015C  0E00               	movlw	0
 12991  00015E  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 12992                           
 12993                           ; BSR set to: 2
 12994                           ;memoryController.c: 161: return occupiedMemory[0];
 12995  000160  EE22  F000         	lfsr	2,_occupiedMemory
 12996  000164  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 12997  000168  0E08               	movlw	8
 12998  00016A                     u8441:
 12999  00016A  CFDB FFEB          	movff	plusw2,plusw0
 13000  00016E  06E8               	decf	wreg,f,c
 13001  000170  E2FC               	bc	u8441
 13002                           
 13003                           ; BSR set to: 2
 13004  000172  0012               	return	
 13005  000174                     
 13006                           ;memoryController.c: 167: if (!occupiedMemory[freeIndex].fIsAssigned) {
 13007                           
 13008                           ; BSR set to: 2
 13009  000174  0100               	movlb	0	; () banked
 13010  000176  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13011  000178  0D09               	mullw	9
 13012  00017A  0E06               	movlw	6
 13013  00017C  26F3               	addwf	prodl,f,c
 13014  00017E  0E00               	movlw	0
 13015  000180  22F4               	addwfc	prodh,f,c
 13016  000182  0E00               	movlw	low _occupiedMemory
 13017  000184  24F3               	addwf	prodl,w,c
 13018  000186  6ED9               	movwf	fsr2l,c
 13019  000188  0E02               	movlw	high _occupiedMemory
 13020  00018A  20F4               	addwfc	prodh,w,c
 13021  00018C  6EDA               	movwf	fsr2h,c
 13022  00018E  50DF               	movf	indf2,w,c
 13023  000190  A4D8               	btfss	status,2,c
 13024  000192  D1EF               	goto	l486
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;memoryController.c: 171: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 13028  000194  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13029  000196  B4D8               	btfsc	status,2,c
 13030  000198  D007               	goto	l470
 13031                           
 13032                           ; BSR set to: 0
 13033  00019A  0EFF               	movlw	255
 13034  00019C  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13035  00019E  6F93               	movwf	_memory_txFrameRequest$1158& (0+255),b
 13036  0001A0  6B94               	clrf	(_memory_txFrameRequest$1158+1)& (0+255),b
 13037  0001A2  0EFF               	movlw	255
 13038  0001A4  2394               	addwfc	(_memory_txFrameRequest$1158+1)& (0+255),f,b
 13039  0001A6  D004               	goto	l472
 13040  0001A8                     l470:
 13041                           
 13042                           ; BSR set to: 0
 13043                           
 13044                           ; BSR set to: 0
 13045  0001A8  0E00               	movlw	0
 13046  0001AA  6F94               	movwf	(_memory_txFrameRequest$1158+1)& (0+255),b
 13047  0001AC  0E07               	movlw	7
 13048  0001AE  6F93               	movwf	_memory_txFrameRequest$1158& (0+255),b
 13049  0001B0                     l472:
 13050                           
 13051                           ; BSR set to: 0
 13052                           
 13053                           ; BSR set to: 0
 13054  0001B0  C093  F060         	movff	_memory_txFrameRequest$1158,___wmul@multiplier
 13055  0001B4  C094  F061         	movff	_memory_txFrameRequest$1158+1,___wmul@multiplier+1
 13056  0001B8  0E00               	movlw	0
 13057  0001BA  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 13058  0001BC  0E09               	movlw	9
 13059  0001BE  6F62               	movwf	___wmul@multiplicand& (0+255),b
 13060  0001C0  EC11  F025         	call	___wmul	;wreg free
 13061  0001C4  0E02               	movlw	2
 13062  0001C6  0100               	movlb	0	; () banked
 13063  0001C8  2760               	addwf	?___wmul& (0+255),f,b
 13064  0001CA  0E00               	movlw	0
 13065  0001CC  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 13066  0001CE  0E00               	movlw	low _occupiedMemory
 13067  0001D0  2560               	addwf	?___wmul& (0+255),w,b
 13068  0001D2  6ED9               	movwf	fsr2l,c
 13069  0001D4  0E02               	movlw	high _occupiedMemory
 13070  0001D6  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 13071  0001D8  6EDA               	movwf	fsr2h,c
 13072  0001DA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13073  0001DE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13074  0001E2  0E01               	movlw	1
 13075  0001E4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13076  0001E6  0E00               	movlw	0
 13077  0001E8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13078  0001EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13079  0001EC  0D09               	mullw	9
 13080  0001EE  0E00               	movlw	low _occupiedMemory
 13081  0001F0  24F3               	addwf	prodl,w,c
 13082  0001F2  6ED9               	movwf	fsr2l,c
 13083  0001F4  0E02               	movlw	high _occupiedMemory
 13084  0001F6  20F4               	addwfc	prodh,w,c
 13085  0001F8  6EDA               	movwf	fsr2h,c
 13086  0001FA  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13087  0001FE  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13088                           
 13089                           ; BSR set to: 0
 13090                           ;memoryController.c: 172: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 13091  000202  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13092  000204  0D09               	mullw	9
 13093  000206  0E00               	movlw	low _occupiedMemory
 13094  000208  24F3               	addwf	prodl,w,c
 13095  00020A  6ED9               	movwf	fsr2l,c
 13096  00020C  0E02               	movlw	high _occupiedMemory
 13097  00020E  20F4               	addwfc	prodh,w,c
 13098  000210  6EDA               	movwf	fsr2h,c
 13099  000212  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13100  000216  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13101  00021A  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13102  00021C  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13103  00021E  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13104  000220  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13105  000222  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 13106  000224  0E30               	movlw	48
 13107  000226  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 13108  000228  A0D8               	btfss	status,0,c
 13109  00022A  D0D1               	goto	l474
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;memoryController.c: 173: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 13113  00022C  0E07               	movlw	7
 13114  00022E  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13115  000230  A4D8               	btfss	status,2,c
 13116  000232  D0CD               	goto	l474
 13117                           
 13118                           ; BSR set to: 0
 13119  000234  0102               	movlb	2	; () banked
 13120  000236  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 13121  000238  A4D8               	btfss	status,2,c
 13122  00023A  D0C9               	goto	l474
 13123                           
 13124                           ; BSR set to: 2
 13125                           ;memoryController.c: 174: occupiedMemory[freeIndex].length = length;
 13126  00023C  0100               	movlb	0	; () banked
 13127  00023E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13128  000240  0D09               	mullw	9
 13129  000242  0E04               	movlw	4
 13130  000244  26F3               	addwf	prodl,f,c
 13131  000246  0E00               	movlw	0
 13132  000248  22F4               	addwfc	prodh,f,c
 13133  00024A  0E00               	movlw	low _occupiedMemory
 13134  00024C  24F3               	addwf	prodl,w,c
 13135  00024E  6ED9               	movwf	fsr2l,c
 13136  000250  0E02               	movlw	high _occupiedMemory
 13137  000252  20F4               	addwfc	prodh,w,c
 13138  000254  6EDA               	movwf	fsr2h,c
 13139  000256  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 13140  00025A  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 13141                           
 13142                           ;memoryController.c: 175: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 13143  00025E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13144  000260  0D09               	mullw	9
 13145  000262  0E04               	movlw	4
 13146  000264  26F3               	addwf	prodl,f,c
 13147  000266  0E00               	movlw	0
 13148  000268  22F4               	addwfc	prodh,f,c
 13149  00026A  0E00               	movlw	low _occupiedMemory
 13150  00026C  24F3               	addwf	prodl,w,c
 13151  00026E  6ED9               	movwf	fsr2l,c
 13152  000270  0E02               	movlw	high _occupiedMemory
 13153  000272  20F4               	addwfc	prodh,w,c
 13154  000274  6EDA               	movwf	fsr2h,c
 13155  000276  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13156  00027A  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13157  00027E  0EFF               	movlw	255
 13158  000280  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 13159  000282  0E2F               	movlw	47
 13160  000284  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 13161  000286  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13162  000288  0D09               	mullw	9
 13163  00028A  0E00               	movlw	low _occupiedMemory
 13164  00028C  24F3               	addwf	prodl,w,c
 13165  00028E  6ED9               	movwf	fsr2l,c
 13166  000290  0E02               	movlw	high _occupiedMemory
 13167  000292  20F4               	addwfc	prodh,w,c
 13168  000294  6EDA               	movwf	fsr2h,c
 13169  000296  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 13170  00029A  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 13171  00029E  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13172  0002A0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13173  0002A2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13174  0002A4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13175  0002A6  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 13176  0002A8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13177  0002AA  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 13178  0002AC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13179  0002AE  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13180  0002B0  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13181  0002B2  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 13182  0002B4  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 13183  0002B6  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 13184  0002B8  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 13185  0002BA  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 13186  0002BC  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 13187  0002BE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13188  0002C0  0D09               	mullw	9
 13189  0002C2  0E02               	movlw	2
 13190  0002C4  26F3               	addwf	prodl,f,c
 13191  0002C6  0E00               	movlw	0
 13192  0002C8  22F4               	addwfc	prodh,f,c
 13193  0002CA  0E00               	movlw	low _occupiedMemory
 13194  0002CC  24F3               	addwf	prodl,w,c
 13195  0002CE  6ED9               	movwf	fsr2l,c
 13196  0002D0  0E02               	movlw	high _occupiedMemory
 13197  0002D2  20F4               	addwfc	prodh,w,c
 13198  0002D4  6EDA               	movwf	fsr2h,c
 13199  0002D6  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 13200  0002DA  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 13201                           
 13202                           ; BSR set to: 0
 13203                           ;memoryController.c: 176: for (uint8_t i = 0; i < 8;i++) {
 13204  0002DE  0E00               	movlw	0
 13205  0002E0  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 13206  0002E2                     l7395:
 13207                           
 13208                           ; BSR set to: 0
 13209  0002E2  0E07               	movlw	7
 13210  0002E4  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 13211  0002E6  D001               	goto	l475
 13212  0002E8  D046               	goto	u8570
 13213  0002EA                     l475:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;memoryController.c: 177: if (i == freeIndex)
 13217                           
 13218                           ; BSR set to: 0
 13219  0002EA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13220  0002EC  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 13221  0002EE  B4D8               	btfsc	status,2,c
 13222  0002F0  D03F               	goto	l479
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;memoryController.c: 179: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 13226                           
 13227                           ; BSR set to: 0
 13228                           
 13229                           ; BSR set to: 0
 13230                           ;memoryController.c: 178: continue;
 13231  0002F2  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13232  0002F4  0D09               	mullw	9
 13233  0002F6  0E00               	movlw	low _occupiedMemory
 13234  0002F8  24F3               	addwf	prodl,w,c
 13235  0002FA  6ED9               	movwf	fsr2l,c
 13236  0002FC  0E02               	movlw	high _occupiedMemory
 13237  0002FE  20F4               	addwfc	prodh,w,c
 13238  000300  6EDA               	movwf	fsr2h,c
 13239  000302  EE00  F072         	lfsr	0,checkForOverlap@a
 13240  000306  0E08               	movlw	8
 13241  000308                     u8521:
 13242  000308  CFDB FFEB          	movff	plusw2,plusw0
 13243  00030C  06E8               	decf	wreg,f,c
 13244  00030E  E2FC               	bc	u8521
 13245  000310  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13246  000312  0D09               	mullw	9
 13247  000314  0E00               	movlw	low _occupiedMemory
 13248  000316  24F3               	addwf	prodl,w,c
 13249  000318  6ED9               	movwf	fsr2l,c
 13250  00031A  0E02               	movlw	high _occupiedMemory
 13251  00031C  20F4               	addwfc	prodh,w,c
 13252  00031E  6EDA               	movwf	fsr2h,c
 13253  000320  EE00  F07B         	lfsr	0,checkForOverlap@b
 13254  000324  0E08               	movlw	8
 13255  000326                     u8531:
 13256  000326  CFDB FFEB          	movff	plusw2,plusw0
 13257  00032A  06E8               	decf	wreg,f,c
 13258  00032C  E2FC               	bc	u8531
 13259  00032E  EC18  F019         	call	_checkForOverlap	;wreg free
 13260  000332  0900               	iorlw	0
 13261  000334  B4D8               	btfsc	status,2,c
 13262  000336  D01C               	goto	l479
 13263  000338  0100               	movlb	0	; () banked
 13264  00033A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 13265  00033C  0D09               	mullw	9
 13266  00033E  0E06               	movlw	6
 13267  000340  26F3               	addwf	prodl,f,c
 13268  000342  0E00               	movlw	0
 13269  000344  22F4               	addwfc	prodh,f,c
 13270  000346  0E00               	movlw	low _occupiedMemory
 13271  000348  24F3               	addwf	prodl,w,c
 13272  00034A  6ED9               	movwf	fsr2l,c
 13273  00034C  0E02               	movlw	high _occupiedMemory
 13274  00034E  20F4               	addwfc	prodh,w,c
 13275  000350  6EDA               	movwf	fsr2h,c
 13276  000352  50DF               	movf	indf2,w,c
 13277  000354  B4D8               	btfsc	status,2,c
 13278  000356  D00C               	goto	l479
 13279                           
 13280                           ; BSR set to: 0
 13281                           ;memoryController.c: 181: field.fOutOfMemory = 1;
 13282  000358  0E01               	movlw	1
 13283  00035A  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13284                           
 13285                           ; BSR set to: 0
 13286                           ;memoryController.c: 182: return field;
 13287  00035C  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13288  000360  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13289  000364  0E08               	movlw	8
 13290  000366                     u8561:
 13291  000366  CFDB FFEB          	movff	plusw2,plusw0
 13292  00036A  06E8               	decf	wreg,f,c
 13293  00036C  E2FC               	bc	u8561
 13294                           
 13295                           ; BSR set to: 0
 13296  00036E  0012               	return	
 13297  000370                     l479:
 13298                           
 13299                           ; BSR set to: 0
 13300                           
 13301                           ; BSR set to: 0
 13302  000370  0100               	movlb	0	; () banked
 13303  000372  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 13304  000374  D7B6               	goto	l7395
 13305  000376                     u8570:
 13306                           
 13307                           ; BSR set to: 0
 13308                           ;memoryController.c: 183: }
 13309                           ;memoryController.c: 184: }
 13310                           ;memoryController.c: 185: occupiedMemory[freeIndex].fIsAssigned = 1;
 13311                           
 13312                           ; BSR set to: 0
 13313  000376  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13314  000378  0D09               	mullw	9
 13315  00037A  0E06               	movlw	6
 13316  00037C  26F3               	addwf	prodl,f,c
 13317  00037E  0E00               	movlw	0
 13318  000380  22F4               	addwfc	prodh,f,c
 13319  000382  0E00               	movlw	low _occupiedMemory
 13320  000384  24F3               	addwf	prodl,w,c
 13321  000386  6ED9               	movwf	fsr2l,c
 13322  000388  0E02               	movlw	high _occupiedMemory
 13323  00038A  20F4               	addwfc	prodh,w,c
 13324  00038C  6EDA               	movwf	fsr2h,c
 13325  00038E  0E01               	movlw	1
 13326  000390  6EDF               	movwf	indf2,c
 13327                           
 13328                           ;memoryController.c: 186: occupiedMemory[freeIndex].index=freeIndex;
 13329  000392  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13330  000394  0D09               	mullw	9
 13331  000396  0E08               	movlw	8
 13332  000398  26F3               	addwf	prodl,f,c
 13333  00039A  0E00               	movlw	0
 13334  00039C  22F4               	addwfc	prodh,f,c
 13335  00039E  0E00               	movlw	low _occupiedMemory
 13336  0003A0  24F3               	addwf	prodl,w,c
 13337  0003A2  6ED9               	movwf	fsr2l,c
 13338  0003A4  0E02               	movlw	high _occupiedMemory
 13339  0003A6  20F4               	addwfc	prodh,w,c
 13340  0003A8  6EDA               	movwf	fsr2h,c
 13341  0003AA  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;memoryController.c: 187: return occupiedMemory[freeIndex];
 13345  0003AE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13346  0003B0  0D09               	mullw	9
 13347  0003B2  0E00               	movlw	low _occupiedMemory
 13348  0003B4  24F3               	addwf	prodl,w,c
 13349  0003B6  6ED9               	movwf	fsr2l,c
 13350  0003B8  0E02               	movlw	high _occupiedMemory
 13351  0003BA  20F4               	addwfc	prodh,w,c
 13352  0003BC  6EDA               	movwf	fsr2h,c
 13353  0003BE  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13354  0003C2  0E08               	movlw	8
 13355  0003C4                     u8581:
 13356  0003C4  CFDB FFEB          	movff	plusw2,plusw0
 13357  0003C8  06E8               	decf	wreg,f,c
 13358  0003CA  E2FC               	bc	u8581
 13359                           
 13360                           ; BSR set to: 0
 13361  0003CC  0012               	return	
 13362  0003CE                     l474:
 13363                           
 13364                           ;memoryController.c: 188: }
 13365                           ;memoryController.c: 189: }
 13366                           ;memoryController.c: 191: uint8_t fNoOverlapMarker = 1;
 13367                           
 13368                           ; BSR set to: 0
 13369                           
 13370                           ; BSR set to: 0
 13371  0003CE  0E01               	movlw	1
 13372  0003D0  0100               	movlb	0	; () banked
 13373  0003D2  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;memoryController.c: 192: uint8_t i;
 13377                           ;memoryController.c: 193: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13378  0003D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13379  0003D6  0D09               	mullw	9
 13380  0003D8  0E00               	movlw	low _occupiedMemory
 13381  0003DA  24F3               	addwf	prodl,w,c
 13382  0003DC  6ED9               	movwf	fsr2l,c
 13383  0003DE  0E02               	movlw	high _occupiedMemory
 13384  0003E0  20F4               	addwfc	prodh,w,c
 13385  0003E2  6EDA               	movwf	fsr2h,c
 13386  0003E4  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13387  0003E8  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13388  0003EC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13389  0003EE  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13390  0003F0  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13391  0003F2  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13392  0003F4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13393  0003F6  0D09               	mullw	9
 13394  0003F8  0E02               	movlw	2
 13395  0003FA  26F3               	addwf	prodl,f,c
 13396  0003FC  0E00               	movlw	0
 13397  0003FE  22F4               	addwfc	prodh,f,c
 13398  000400  0E00               	movlw	low _occupiedMemory
 13399  000402  24F3               	addwf	prodl,w,c
 13400  000404  6ED9               	movwf	fsr2l,c
 13401  000406  0E02               	movlw	high _occupiedMemory
 13402  000408  20F4               	addwfc	prodh,w,c
 13403  00040A  6EDA               	movwf	fsr2h,c
 13404  00040C  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13405  000410  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;memoryController.c: 194: for (i = 0; i < 8; i++) {
 13409  000414  0E00               	movlw	0
 13410  000416  6F97               	movwf	memory_txFrameRequest@i_1162& (0+255),b
 13411  000418                     l7429:
 13412                           
 13413                           ; BSR set to: 0
 13414  000418  0E07               	movlw	7
 13415  00041A  6597               	cpfsgt	memory_txFrameRequest@i_1162& (0+255),b
 13416  00041C  D001               	goto	l480
 13417  00041E  D03C               	goto	u8650
 13418  000420                     l480:
 13419                           
 13420                           ; BSR set to: 0
 13421                           ;memoryController.c: 195: if (i == freeIndex)
 13422                           
 13423                           ; BSR set to: 0
 13424  000420  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13425  000422  1997               	xorwf	memory_txFrameRequest@i_1162& (0+255),w,b
 13426  000424  B4D8               	btfsc	status,2,c
 13427  000426  D035               	goto	l485
 13428                           
 13429                           ; BSR set to: 0
 13430                           ;memoryController.c: 197: if (!occupiedMemory[i].fIsAssigned) {
 13431                           
 13432                           ; BSR set to: 0
 13433                           
 13434                           ; BSR set to: 0
 13435                           ;memoryController.c: 196: continue;
 13436  000428  5197               	movf	memory_txFrameRequest@i_1162& (0+255),w,b
 13437  00042A  0D09               	mullw	9
 13438  00042C  0E06               	movlw	6
 13439  00042E  26F3               	addwf	prodl,f,c
 13440  000430  0E00               	movlw	0
 13441  000432  22F4               	addwfc	prodh,f,c
 13442  000434  0E00               	movlw	low _occupiedMemory
 13443  000436  24F3               	addwf	prodl,w,c
 13444  000438  6ED9               	movwf	fsr2l,c
 13445  00043A  0E02               	movlw	high _occupiedMemory
 13446  00043C  20F4               	addwfc	prodh,w,c
 13447  00043E  6EDA               	movwf	fsr2h,c
 13448  000440  50DF               	movf	indf2,w,c
 13449  000442  B4D8               	btfsc	status,2,c
 13450  000444  D026               	goto	l485
 13451                           
 13452                           ; BSR set to: 0
 13453                           ;memoryController.c: 200: }
 13454                           ;memoryController.c: 202: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 13455                           
 13456                           ; BSR set to: 0
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;memoryController.c: 198: continue;
 13460  000446  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13461  000448  0D09               	mullw	9
 13462  00044A  0E00               	movlw	low _occupiedMemory
 13463  00044C  24F3               	addwf	prodl,w,c
 13464  00044E  6ED9               	movwf	fsr2l,c
 13465  000450  0E02               	movlw	high _occupiedMemory
 13466  000452  20F4               	addwfc	prodh,w,c
 13467  000454  6EDA               	movwf	fsr2h,c
 13468  000456  EE00  F072         	lfsr	0,checkForOverlap@a
 13469  00045A  0E08               	movlw	8
 13470  00045C                     u8621:
 13471  00045C  CFDB FFEB          	movff	plusw2,plusw0
 13472  000460  06E8               	decf	wreg,f,c
 13473  000462  E2FC               	bc	u8621
 13474  000464  5197               	movf	memory_txFrameRequest@i_1162& (0+255),w,b
 13475  000466  0D09               	mullw	9
 13476  000468  0E00               	movlw	low _occupiedMemory
 13477  00046A  24F3               	addwf	prodl,w,c
 13478  00046C  6ED9               	movwf	fsr2l,c
 13479  00046E  0E02               	movlw	high _occupiedMemory
 13480  000470  20F4               	addwfc	prodh,w,c
 13481  000472  6EDA               	movwf	fsr2h,c
 13482  000474  EE00  F07B         	lfsr	0,checkForOverlap@b
 13483  000478  0E08               	movlw	8
 13484  00047A                     u8631:
 13485  00047A  CFDB FFEB          	movff	plusw2,plusw0
 13486  00047E  06E8               	decf	wreg,f,c
 13487  000480  E2FC               	bc	u8631
 13488  000482  EC18  F019         	call	_checkForOverlap	;wreg free
 13489  000486  0900               	iorlw	0
 13490  000488  B4D8               	btfsc	status,2,c
 13491  00048A  D003               	goto	l485
 13492                           
 13493                           ;memoryController.c: 203: fNoOverlapMarker = 0;
 13494  00048C  0E00               	movlw	0
 13495  00048E  0100               	movlb	0	; () banked
 13496  000490  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 13497  000492                     l485:
 13498                           
 13499                           ; BSR set to: 0
 13500                           
 13501                           ; BSR set to: 0
 13502  000492  0100               	movlb	0	; () banked
 13503  000494  2B97               	incf	memory_txFrameRequest@i_1162& (0+255),f,b
 13504  000496  D7C0               	goto	l7429
 13505  000498                     u8650:
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;memoryController.c: 205: }
 13509                           ;memoryController.c: 206: if (fNoOverlapMarker) {
 13510                           
 13511                           ; BSR set to: 0
 13512  000498  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 13513  00049A  B4D8               	btfsc	status,2,c
 13514  00049C  D06A               	goto	l486
 13515                           
 13516                           ; BSR set to: 0
 13517                           ;memoryController.c: 207: occupiedMemory[freeIndex].fIsAssigned = 1;
 13518  00049E  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13519  0004A0  0D09               	mullw	9
 13520  0004A2  0E06               	movlw	6
 13521  0004A4  26F3               	addwf	prodl,f,c
 13522  0004A6  0E00               	movlw	0
 13523  0004A8  22F4               	addwfc	prodh,f,c
 13524  0004AA  0E00               	movlw	low _occupiedMemory
 13525  0004AC  24F3               	addwf	prodl,w,c
 13526  0004AE  6ED9               	movwf	fsr2l,c
 13527  0004B0  0E02               	movlw	high _occupiedMemory
 13528  0004B2  20F4               	addwfc	prodh,w,c
 13529  0004B4  6EDA               	movwf	fsr2h,c
 13530  0004B6  0E01               	movlw	1
 13531  0004B8  6EDF               	movwf	indf2,c
 13532                           
 13533                           ;memoryController.c: 208: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 13534  0004BA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13535  0004BC  0D09               	mullw	9
 13536  0004BE  0E00               	movlw	low _occupiedMemory
 13537  0004C0  24F3               	addwf	prodl,w,c
 13538  0004C2  6ED9               	movwf	fsr2l,c
 13539  0004C4  0E02               	movlw	high _occupiedMemory
 13540  0004C6  20F4               	addwfc	prodh,w,c
 13541  0004C8  6EDA               	movwf	fsr2h,c
 13542  0004CA  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 13543  0004CE  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 13544  0004D2  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 13545  0004D4  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 13546  0004D6  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 13547  0004D8  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 13548  0004DA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13549  0004DC  0D09               	mullw	9
 13550  0004DE  0E02               	movlw	2
 13551  0004E0  26F3               	addwf	prodl,f,c
 13552  0004E2  0E00               	movlw	0
 13553  0004E4  22F4               	addwfc	prodh,f,c
 13554  0004E6  0E00               	movlw	low _occupiedMemory
 13555  0004E8  24F3               	addwf	prodl,w,c
 13556  0004EA  6ED9               	movwf	fsr2l,c
 13557  0004EC  0E02               	movlw	high _occupiedMemory
 13558  0004EE  20F4               	addwfc	prodh,w,c
 13559  0004F0  6EDA               	movwf	fsr2h,c
 13560  0004F2  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 13561  0004F6  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 13562                           
 13563                           ;memoryController.c: 209: occupiedMemory[freeIndex].fOutOfMemory = 0;
 13564  0004FA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13565  0004FC  0D09               	mullw	9
 13566  0004FE  0E07               	movlw	7
 13567  000500  26F3               	addwf	prodl,f,c
 13568  000502  0E00               	movlw	0
 13569  000504  22F4               	addwfc	prodh,f,c
 13570  000506  0E00               	movlw	low _occupiedMemory
 13571  000508  24F3               	addwf	prodl,w,c
 13572  00050A  6ED9               	movwf	fsr2l,c
 13573  00050C  0E02               	movlw	high _occupiedMemory
 13574  00050E  20F4               	addwfc	prodh,w,c
 13575  000510  6EDA               	movwf	fsr2h,c
 13576  000512  0E00               	movlw	0
 13577  000514  6EDF               	movwf	indf2,c
 13578                           
 13579                           ;memoryController.c: 210: occupiedMemory[freeIndex].length = length;
 13580  000516  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13581  000518  0D09               	mullw	9
 13582  00051A  0E04               	movlw	4
 13583  00051C  26F3               	addwf	prodl,f,c
 13584  00051E  0E00               	movlw	0
 13585  000520  22F4               	addwfc	prodh,f,c
 13586  000522  0E00               	movlw	low _occupiedMemory
 13587  000524  24F3               	addwf	prodl,w,c
 13588  000526  6ED9               	movwf	fsr2l,c
 13589  000528  0E02               	movlw	high _occupiedMemory
 13590  00052A  20F4               	addwfc	prodh,w,c
 13591  00052C  6EDA               	movwf	fsr2h,c
 13592  00052E  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 13593  000532  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 13594                           
 13595                           ;memoryController.c: 211: occupiedMemory[freeIndex].index=freeIndex;
 13596  000536  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13597  000538  0D09               	mullw	9
 13598  00053A  0E08               	movlw	8
 13599  00053C  26F3               	addwf	prodl,f,c
 13600  00053E  0E00               	movlw	0
 13601  000540  22F4               	addwfc	prodh,f,c
 13602  000542  0E00               	movlw	low _occupiedMemory
 13603  000544  24F3               	addwf	prodl,w,c
 13604  000546  6ED9               	movwf	fsr2l,c
 13605  000548  0E02               	movlw	high _occupiedMemory
 13606  00054A  20F4               	addwfc	prodh,w,c
 13607  00054C  6EDA               	movwf	fsr2h,c
 13608  00054E  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;memoryController.c: 212: return occupiedMemory[freeIndex];
 13612  000552  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13613  000554  0D09               	mullw	9
 13614  000556  0E00               	movlw	low _occupiedMemory
 13615  000558  24F3               	addwf	prodl,w,c
 13616  00055A  6ED9               	movwf	fsr2l,c
 13617  00055C  0E02               	movlw	high _occupiedMemory
 13618  00055E  20F4               	addwfc	prodh,w,c
 13619  000560  6EDA               	movwf	fsr2h,c
 13620  000562  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13621  000566  0E08               	movlw	8
 13622  000568                     u8671:
 13623  000568  CFDB FFEB          	movff	plusw2,plusw0
 13624  00056C  06E8               	decf	wreg,f,c
 13625  00056E  E2FC               	bc	u8671
 13626                           
 13627                           ; BSR set to: 0
 13628  000570  0012               	return	
 13629  000572                     l486:
 13630                           
 13631                           ; BSR set to: 0
 13632                           ;memoryController.c: 213: }
 13633                           ;memoryController.c: 214: }
 13634                           ;memoryController.c: 215: freeIndex++;
 13635                           
 13636                           ; BSR set to: 0
 13637                           
 13638                           ; BSR set to: 0
 13639  000572  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 13640                           
 13641                           ; BSR set to: 0
 13642                           ;memoryController.c: 216: if (freeIndex == 8) {
 13643  000574  0E08               	movlw	8
 13644  000576  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 13645  000578  A4D8               	btfss	status,2,c
 13646  00057A  D00C               	goto	l487
 13647                           
 13648                           ; BSR set to: 0
 13649                           ;memoryController.c: 218: field.fOutOfMemory = 1;
 13650  00057C  0E01               	movlw	1
 13651  00057E  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 13652                           
 13653                           ; BSR set to: 0
 13654                           ;memoryController.c: 219: return field;
 13655  000580  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 13656  000584  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 13657  000588  0E08               	movlw	8
 13658  00058A                     u8691:
 13659  00058A  CFDB FFEB          	movff	plusw2,plusw0
 13660  00058E  06E8               	decf	wreg,f,c
 13661  000590  E2FC               	bc	u8691
 13662                           
 13663                           ; BSR set to: 0
 13664  000592  0012               	return	
 13665  000594                     l487:
 13666                           
 13667                           ; BSR set to: 0
 13668                           
 13669                           ; BSR set to: 0
 13670  000594  0E08               	movlw	8
 13671  000596  0100               	movlb	0	; () banked
 13672  000598  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 13673  00059A  D5EC               	goto	l467
 13674  00059C  0012               	return	
 13675  00059E                     __end_of_memory_txFrameRequest:
 13676                           	opt stack 0
 13677                           tblptru	equ	0xFF8
 13678                           tblptrh	equ	0xFF7
 13679                           tblptrl	equ	0xFF6
 13680                           tablat	equ	0xFF5
 13681                           prodh	equ	0xFF4
 13682                           prodl	equ	0xFF3
 13683                           intcon	equ	0xFF2
 13684                           intcon3	equ	0xFF0
 13685                           postinc0	equ	0xFEE
 13686                           plusw0	equ	0xFEB
 13687                           fsr0h	equ	0xFEA
 13688                           fsr0l	equ	0xFE9
 13689                           wreg	equ	0xFE8
 13690                           indf1	equ	0xFE7
 13691                           postinc1	equ	0xFE6
 13692                           postdec1	equ	0xFE5
 13693                           plusw1	equ	0xFE3
 13694                           fsr1h	equ	0xFE2
 13695                           fsr1l	equ	0xFE1
 13696                           indf2	equ	0xFDF
 13697                           postinc2	equ	0xFDE
 13698                           postdec2	equ	0xFDD
 13699                           plusw2	equ	0xFDB
 13700                           fsr2h	equ	0xFDA
 13701                           fsr2l	equ	0xFD9
 13702                           status	equ	0xFD8
 13703                           
 13704 ;; *************** function _entireMemoryFull *****************
 13705 ;; Defined at:
 13706 ;;		line 44 in file "src/mem/memoryController.c"
 13707 ;; Parameters:    Size  Location     Type
 13708 ;;		None
 13709 ;; Auto vars:     Size  Location     Type
 13710 ;;  i               1    0[BANK0 ] unsigned char 
 13711 ;; Return value:  Size  Location     Type
 13712 ;;                  1    wreg      unsigned char 
 13713 ;; Registers used:
 13714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13720 ;;      Params:         0       0       0       0       0       0       0       0       0
 13721 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13722 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13723 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13724 ;;Total ram usage:        1 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    4
 13727 ;; This function calls:
 13728 ;;		Nothing
 13729 ;; This function is called by:
 13730 ;;		_memory_txFrameRequest
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           	psect	text44
 13735  0047E8                     __ptext44:
 13736                           	opt stack 0
 13737  0047E8                     _entireMemoryFull:
 13738                           	opt stack 23
 13739                           
 13740                           ;memoryController.c: 45: for (uint8_t i = 0; i < 8;i++) {
 13741                           
 13742                           ;incstack = 0
 13743  0047E8  0E00               	movlw	0
 13744  0047EA  0100               	movlb	0	; () banked
 13745  0047EC  6F60               	movwf	entireMemoryFull@i& (0+255),b
 13746  0047EE                     l7155:
 13747                           
 13748                           ; BSR set to: 0
 13749  0047EE  0E07               	movlw	7
 13750  0047F0  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 13751  0047F2  D001               	goto	l416
 13752  0047F4  D013               	goto	u8120
 13753  0047F6                     l416:
 13754                           
 13755                           ; BSR set to: 0
 13756                           ;memoryController.c: 46: if (!occupiedMemory[i].fIsAssigned)
 13757                           
 13758                           ; BSR set to: 0
 13759  0047F6  5160               	movf	entireMemoryFull@i& (0+255),w,b
 13760  0047F8  0D09               	mullw	9
 13761  0047FA  0E06               	movlw	6
 13762  0047FC  26F3               	addwf	prodl,f,c
 13763  0047FE  0E00               	movlw	0
 13764  004800  22F4               	addwfc	prodh,f,c
 13765  004802  0E00               	movlw	low _occupiedMemory
 13766  004804  24F3               	addwf	prodl,w,c
 13767  004806  6ED9               	movwf	fsr2l,c
 13768  004808  0E02               	movlw	high _occupiedMemory
 13769  00480A  20F4               	addwfc	prodh,w,c
 13770  00480C  6EDA               	movwf	fsr2h,c
 13771  00480E  50DF               	movf	indf2,w,c
 13772  004810  A4D8               	btfss	status,2,c
 13773  004812  D002               	goto	l418
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;memoryController.c: 47: return 0;
 13777  004814  0E00               	movlw	0
 13778                           
 13779                           ; BSR set to: 0
 13780  004816  0012               	return	
 13781  004818                     l418:
 13782                           
 13783                           ; BSR set to: 0
 13784                           
 13785                           ; BSR set to: 0
 13786  004818  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 13787  00481A  D7E9               	goto	l7155
 13788  00481C                     u8120:
 13789                           
 13790                           ; BSR set to: 0
 13791                           ;memoryController.c: 48: }
 13792                           ;memoryController.c: 49: return 1;
 13793                           
 13794                           ; BSR set to: 0
 13795  00481C  0E01               	movlw	1
 13796  00481E  0012               	return	
 13797  004820                     __end_of_entireMemoryFull:
 13798                           	opt stack 0
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           intcon3	equ	0xFF0
 13807                           postinc0	equ	0xFEE
 13808                           plusw0	equ	0xFEB
 13809                           fsr0h	equ	0xFEA
 13810                           fsr0l	equ	0xFE9
 13811                           wreg	equ	0xFE8
 13812                           indf1	equ	0xFE7
 13813                           postinc1	equ	0xFE6
 13814                           postdec1	equ	0xFE5
 13815                           plusw1	equ	0xFE3
 13816                           fsr1h	equ	0xFE2
 13817                           fsr1l	equ	0xFE1
 13818                           indf2	equ	0xFDF
 13819                           postinc2	equ	0xFDE
 13820                           postdec2	equ	0xFDD
 13821                           plusw2	equ	0xFDB
 13822                           fsr2h	equ	0xFDA
 13823                           fsr2l	equ	0xFD9
 13824                           status	equ	0xFD8
 13825                           
 13826 ;; *************** function _entireMemoryEmpty *****************
 13827 ;; Defined at:
 13828 ;;		line 36 in file "src/mem/memoryController.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;		None
 13831 ;; Auto vars:     Size  Location     Type
 13832 ;;  i               1    0[BANK0 ] unsigned char 
 13833 ;; Return value:  Size  Location     Type
 13834 ;;                  1    wreg      unsigned char 
 13835 ;; Registers used:
 13836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13837 ;; Tracked objects:
 13838 ;;		On entry : 0/0
 13839 ;;		On exit  : 0/0
 13840 ;;		Unchanged: 0/0
 13841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13842 ;;      Params:         0       0       0       0       0       0       0       0       0
 13843 ;;      Locals:         0       1       0       0       0       0       0       0       0
 13844 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13845 ;;      Totals:         0       1       0       0       0       0       0       0       0
 13846 ;;Total ram usage:        1 bytes
 13847 ;; Hardware stack levels used:    1
 13848 ;; Hardware stack levels required when called:    4
 13849 ;; This function calls:
 13850 ;;		Nothing
 13851 ;; This function is called by:
 13852 ;;		_memory_txFrameRequest
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           	psect	text45
 13857  004820                     __ptext45:
 13858                           	opt stack 0
 13859  004820                     _entireMemoryEmpty:
 13860                           	opt stack 23
 13861                           
 13862                           ;memoryController.c: 37: for (uint8_t i = 0; i < 8;i++) {
 13863                           
 13864                           ; BSR set to: 0
 13865                           ;incstack = 0
 13866  004820  0E00               	movlw	0
 13867  004822  0100               	movlb	0	; () banked
 13868  004824  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 13869  004826                     l7135:
 13870                           
 13871                           ; BSR set to: 0
 13872  004826  0E07               	movlw	7
 13873  004828  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 13874  00482A  D001               	goto	l410
 13875  00482C  D013               	goto	u8090
 13876  00482E                     l410:
 13877                           
 13878                           ; BSR set to: 0
 13879                           ;memoryController.c: 38: if (occupiedMemory[i].fIsAssigned)
 13880                           
 13881                           ; BSR set to: 0
 13882  00482E  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 13883  004830  0D09               	mullw	9
 13884  004832  0E06               	movlw	6
 13885  004834  26F3               	addwf	prodl,f,c
 13886  004836  0E00               	movlw	0
 13887  004838  22F4               	addwfc	prodh,f,c
 13888  00483A  0E00               	movlw	low _occupiedMemory
 13889  00483C  24F3               	addwf	prodl,w,c
 13890  00483E  6ED9               	movwf	fsr2l,c
 13891  004840  0E02               	movlw	high _occupiedMemory
 13892  004842  20F4               	addwfc	prodh,w,c
 13893  004844  6EDA               	movwf	fsr2h,c
 13894  004846  50DF               	movf	indf2,w,c
 13895  004848  B4D8               	btfsc	status,2,c
 13896  00484A  D002               	goto	l412
 13897                           
 13898                           ; BSR set to: 0
 13899                           ;memoryController.c: 39: return 0;
 13900  00484C  0E00               	movlw	0
 13901                           
 13902                           ; BSR set to: 0
 13903  00484E  0012               	return	
 13904  004850                     l412:
 13905                           
 13906                           ; BSR set to: 0
 13907                           
 13908                           ; BSR set to: 0
 13909  004850  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 13910  004852  D7E9               	goto	l7135
 13911  004854                     u8090:
 13912                           
 13913                           ; BSR set to: 0
 13914                           ;memoryController.c: 40: }
 13915                           ;memoryController.c: 41: return 1;
 13916                           
 13917                           ; BSR set to: 0
 13918  004854  0E01               	movlw	1
 13919  004856  0012               	return	
 13920  004858                     __end_of_entireMemoryEmpty:
 13921                           	opt stack 0
 13922                           tblptru	equ	0xFF8
 13923                           tblptrh	equ	0xFF7
 13924                           tblptrl	equ	0xFF6
 13925                           tablat	equ	0xFF5
 13926                           prodh	equ	0xFF4
 13927                           prodl	equ	0xFF3
 13928                           intcon	equ	0xFF2
 13929                           intcon3	equ	0xFF0
 13930                           postinc0	equ	0xFEE
 13931                           plusw0	equ	0xFEB
 13932                           fsr0h	equ	0xFEA
 13933                           fsr0l	equ	0xFE9
 13934                           wreg	equ	0xFE8
 13935                           indf1	equ	0xFE7
 13936                           postinc1	equ	0xFE6
 13937                           postdec1	equ	0xFE5
 13938                           plusw1	equ	0xFE3
 13939                           fsr1h	equ	0xFE2
 13940                           fsr1l	equ	0xFE1
 13941                           indf2	equ	0xFDF
 13942                           postinc2	equ	0xFDE
 13943                           postdec2	equ	0xFDD
 13944                           plusw2	equ	0xFDB
 13945                           fsr2h	equ	0xFDA
 13946                           fsr2l	equ	0xFD9
 13947                           status	equ	0xFD8
 13948                           
 13949 ;; *************** function _checkForOverlap *****************
 13950 ;; Defined at:
 13951 ;;		line 62 in file "src/mem/memoryController.c"
 13952 ;; Parameters:    Size  Location     Type
 13953 ;;  a               9   18[BANK0 ] struct memoryField
 13954 ;;  b               9   27[BANK0 ] struct memoryField
 13955 ;; Auto vars:     Size  Location     Type
 13956 ;;		None
 13957 ;; Return value:  Size  Location     Type
 13958 ;;                  1    wreg      unsigned char 
 13959 ;; Registers used:
 13960 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 13961 ;; Tracked objects:
 13962 ;;		On entry : 0/0
 13963 ;;		On exit  : 0/0
 13964 ;;		Unchanged: 0/0
 13965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13966 ;;      Params:         0      18       0       0       0       0       0       0       0
 13967 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13968 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13969 ;;      Totals:         0      18       0       0       0       0       0       0       0
 13970 ;;Total ram usage:       18 bytes
 13971 ;; Hardware stack levels used:    1
 13972 ;; Hardware stack levels required when called:    5
 13973 ;; This function calls:
 13974 ;;		_checkForOverlapSwitched
 13975 ;; This function is called by:
 13976 ;;		_memory_txFrameRequest
 13977 ;; This function uses a non-reentrant model
 13978 ;;
 13979                           
 13980                           	psect	text46
 13981  003230                     __ptext46:
 13982                           	opt stack 0
 13983  003230                     _checkForOverlap:
 13984                           	opt stack 22
 13985                           
 13986                           ;memoryController.c: 63: if ((a.start == b.start) ||
 13987                           ;memoryController.c: 64: (a.end == b.end) ||
 13988                           ;memoryController.c: 65: (a.start == b.end) ||
 13989                           ;memoryController.c: 66: (a.end == b.start) ||
 13990                           ;memoryController.c: 67: (a.end > 0x3000) ||
 13991                           ;memoryController.c: 68: (a.start > 0x3000) ||
 13992                           ;memoryController.c: 69: (b.end > 0x3000) ||
 13993                           ;memoryController.c: 70: (b.start > 0x3000))
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;incstack = 0
 13997  003230  0100               	movlb	0	; () banked
 13998  003232  517B               	movf	checkForOverlap@b& (0+255),w,b
 13999  003234  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 14000  003236  E104               	bnz	u8130
 14001  003238  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14002  00323A  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 14003  00323C  B4D8               	btfsc	status,2,c
 14004  00323E  D029               	goto	u8200
 14005  003240                     u8130:
 14006                           
 14007                           ; BSR set to: 0
 14008  003240  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 14009  003242  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 14010  003244  E104               	bnz	u8140
 14011  003246  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 14012  003248  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 14013  00324A  B4D8               	btfsc	status,2,c
 14014  00324C  D022               	goto	u8200
 14015  00324E                     u8140:
 14016                           
 14017                           ; BSR set to: 0
 14018  00324E  5172               	movf	checkForOverlap@a& (0+255),w,b
 14019  003250  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 14020  003252  E104               	bnz	u8150
 14021  003254  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 14022  003256  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 14023  003258  B4D8               	btfsc	status,2,c
 14024  00325A  D01B               	goto	u8200
 14025  00325C                     u8150:
 14026                           
 14027                           ; BSR set to: 0
 14028  00325C  517B               	movf	checkForOverlap@b& (0+255),w,b
 14029  00325E  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 14030  003260  E104               	bnz	u8160
 14031  003262  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14032  003264  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 14033  003266  B4D8               	btfsc	status,2,c
 14034  003268  D014               	goto	u8200
 14035  00326A                     u8160:
 14036                           
 14037                           ; BSR set to: 0
 14038  00326A  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 14039  00326C  0E30               	movlw	48
 14040  00326E  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 14041  003270  B0D8               	btfsc	status,0,c
 14042  003272  D00F               	goto	u8200
 14043                           
 14044                           ; BSR set to: 0
 14045  003274  0572               	decf	checkForOverlap@a& (0+255),w,b
 14046  003276  0E30               	movlw	48
 14047  003278  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14048  00327A  B0D8               	btfsc	status,0,c
 14049  00327C  D00A               	goto	u8200
 14050                           
 14051                           ; BSR set to: 0
 14052  00327E  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 14053  003280  0E30               	movlw	48
 14054  003282  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14055  003284  B0D8               	btfsc	status,0,c
 14056  003286  D005               	goto	u8200
 14057                           
 14058                           ; BSR set to: 0
 14059  003288  057B               	decf	checkForOverlap@b& (0+255),w,b
 14060  00328A  0E30               	movlw	48
 14061  00328C  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14062  00328E  A0D8               	btfss	status,0,c
 14063  003290  D002               	goto	l430
 14064  003292                     u8200:
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;memoryController.c: 71: return 1;
 14068                           
 14069                           ; BSR set to: 0
 14070  003292  0E01               	movlw	1
 14071                           
 14072                           ; BSR set to: 0
 14073  003294  0012               	return	
 14074  003296                     l430:
 14075                           
 14076                           ; BSR set to: 0
 14077                           ;memoryController.c: 74: if (a.start < a.end) {
 14078                           
 14079                           ; BSR set to: 0
 14080  003296  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14081  003298  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14082  00329A  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14083  00329C  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14084  00329E  B0D8               	btfsc	status,0,c
 14085  0032A0  D036               	goto	l434
 14086                           
 14087                           ; BSR set to: 0
 14088                           ;memoryController.c: 75: if (b.start < b.end) {
 14089  0032A2  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 14090  0032A4  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14091  0032A6  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 14092  0032A8  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14093  0032AA  B0D8               	btfsc	status,0,c
 14094  0032AC  D025               	goto	l435
 14095                           
 14096                           ; BSR set to: 0
 14097                           ;memoryController.c: 77: if (a.start < b.start) {
 14098  0032AE  517B               	movf	checkForOverlap@b& (0+255),w,b
 14099  0032B0  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 14100  0032B2  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 14101  0032B4  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 14102  0032B6  B0D8               	btfsc	status,0,c
 14103  0032B8  D00A               	goto	l436
 14104                           
 14105                           ; BSR set to: 0
 14106                           ;memoryController.c: 78: if (a.end > b.start) {
 14107  0032BA  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 14108  0032BC  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 14109  0032BE  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 14110  0032C0  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 14111  0032C2  B0D8               	btfsc	status,0,c
 14112  0032C4  D002               	goto	l437
 14113                           
 14114                           ; BSR set to: 0
 14115                           ;memoryController.c: 79: return 1;
 14116  0032C6  0E01               	movlw	1
 14117                           
 14118                           ; BSR set to: 0
 14119                           ;memoryController.c: 80: }
 14120                           
 14121                           ; BSR set to: 0
 14122  0032C8  0012               	return	
 14123  0032CA                     l437:
 14124                           
 14125                           ; BSR set to: 0
 14126                           ;memoryController.c: 81: else {
 14127                           ;memoryController.c: 82: return 0;
 14128                           
 14129                           ; BSR set to: 0
 14130  0032CA  0E00               	movlw	0
 14131                           
 14132                           ; BSR set to: 0
 14133                           ;memoryController.c: 83: }
 14134                           ;memoryController.c: 84: }
 14135                           
 14136                           ; BSR set to: 0
 14137  0032CC  0012               	return	
 14138  0032CE                     l436:
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;memoryController.c: 85: else {
 14142                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 14143                           
 14144                           ; BSR set to: 0
 14145  0032CE  EE20  F07B         	lfsr	2,checkForOverlap@b
 14146  0032D2  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14147  0032D6  0E08               	movlw	8
 14148  0032D8                     u8251:
 14149  0032D8  CFDB FFEB          	movff	plusw2,plusw0
 14150  0032DC  06E8               	decf	wreg,f,c
 14151  0032DE  E2FC               	bc	u8251
 14152  0032E0  EE20  F072         	lfsr	2,checkForOverlap@a
 14153  0032E4  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14154  0032E8  0E08               	movlw	8
 14155  0032EA                     u8261:
 14156  0032EA  CFDB FFEB          	movff	plusw2,plusw0
 14157  0032EE  06E8               	decf	wreg,f,c
 14158  0032F0  E2FC               	bc	u8261
 14159  0032F2  EC7B  F01C         	call	_checkForOverlapSwitched	;wreg free
 14160                           
 14161                           ;memoryController.c: 87: }
 14162                           ;memoryController.c: 88: }
 14163  0032F6  0012               	return	
 14164  0032F8                     l435:
 14165                           
 14166                           ;memoryController.c: 89: else {
 14167                           ;memoryController.c: 90: if (b.end < a.start)
 14168  0032F8  0100               	movlb	0	; () banked
 14169  0032FA  5172               	movf	checkForOverlap@a& (0+255),w,b
 14170  0032FC  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 14171  0032FE  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 14172  003300  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 14173  003302  B0D8               	btfsc	status,0,c
 14174  003304  D002               	goto	l441
 14175                           
 14176                           ; BSR set to: 0
 14177                           ;memoryController.c: 91: return 0;
 14178  003306  0E00               	movlw	0
 14179                           
 14180                           ; BSR set to: 0
 14181                           
 14182                           ; BSR set to: 0
 14183  003308  0012               	return	
 14184  00330A                     l441:
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;memoryController.c: 92: else
 14188                           ;memoryController.c: 93: return 1;
 14189                           
 14190                           ; BSR set to: 0
 14191  00330A  0E01               	movlw	1
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;memoryController.c: 94: }
 14195                           ;memoryController.c: 95: }
 14196                           
 14197                           ; BSR set to: 0
 14198                           
 14199                           ; BSR set to: 0
 14200  00330C  0012               	return	
 14201  00330E                     l434:
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;memoryController.c: 96: else {
 14205                           ;memoryController.c: 97: return checkForOverlapSwitched(b, a);
 14206                           
 14207                           ; BSR set to: 0
 14208  00330E  EE20  F07B         	lfsr	2,checkForOverlap@b
 14209  003312  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 14210  003316  0E08               	movlw	8
 14211  003318                     u8281:
 14212  003318  CFDB FFEB          	movff	plusw2,plusw0
 14213  00331C  06E8               	decf	wreg,f,c
 14214  00331E  E2FC               	bc	u8281
 14215  003320  EE20  F072         	lfsr	2,checkForOverlap@a
 14216  003324  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 14217  003328  0E08               	movlw	8
 14218  00332A                     u8291:
 14219  00332A  CFDB FFEB          	movff	plusw2,plusw0
 14220  00332E  06E8               	decf	wreg,f,c
 14221  003330  E2FC               	bc	u8291
 14222  003332  EC7B  F01C         	call	_checkForOverlapSwitched	;wreg free
 14223  003336  0012               	return	
 14224  003338                     __end_of_checkForOverlap:
 14225                           	opt stack 0
 14226                           tblptru	equ	0xFF8
 14227                           tblptrh	equ	0xFF7
 14228                           tblptrl	equ	0xFF6
 14229                           tablat	equ	0xFF5
 14230                           prodh	equ	0xFF4
 14231                           prodl	equ	0xFF3
 14232                           intcon	equ	0xFF2
 14233                           intcon3	equ	0xFF0
 14234                           postinc0	equ	0xFEE
 14235                           plusw0	equ	0xFEB
 14236                           fsr0h	equ	0xFEA
 14237                           fsr0l	equ	0xFE9
 14238                           wreg	equ	0xFE8
 14239                           indf1	equ	0xFE7
 14240                           postinc1	equ	0xFE6
 14241                           postdec1	equ	0xFE5
 14242                           plusw1	equ	0xFE3
 14243                           fsr1h	equ	0xFE2
 14244                           fsr1l	equ	0xFE1
 14245                           indf2	equ	0xFDF
 14246                           postinc2	equ	0xFDE
 14247                           postdec2	equ	0xFDD
 14248                           plusw2	equ	0xFDB
 14249                           fsr2h	equ	0xFDA
 14250                           fsr2l	equ	0xFD9
 14251                           status	equ	0xFD8
 14252                           
 14253 ;; *************** function _checkForOverlapSwitched *****************
 14254 ;; Defined at:
 14255 ;;		line 101 in file "src/mem/memoryController.c"
 14256 ;; Parameters:    Size  Location     Type
 14257 ;;  a               9    0[BANK0 ] struct memoryField
 14258 ;;  b               9    9[BANK0 ] struct memoryField
 14259 ;; Auto vars:     Size  Location     Type
 14260 ;;		None
 14261 ;; Return value:  Size  Location     Type
 14262 ;;                  1    wreg      unsigned char 
 14263 ;; Registers used:
 14264 ;;		wreg, status,2, status,0
 14265 ;; Tracked objects:
 14266 ;;		On entry : 0/0
 14267 ;;		On exit  : 0/0
 14268 ;;		Unchanged: 0/0
 14269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14270 ;;      Params:         0      18       0       0       0       0       0       0       0
 14271 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14272 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14273 ;;      Totals:         0      18       0       0       0       0       0       0       0
 14274 ;;Total ram usage:       18 bytes
 14275 ;; Hardware stack levels used:    1
 14276 ;; Hardware stack levels required when called:    4
 14277 ;; This function calls:
 14278 ;;		Nothing
 14279 ;; This function is called by:
 14280 ;;		_checkForOverlap
 14281 ;; This function uses a non-reentrant model
 14282 ;;
 14283                           
 14284                           	psect	text47
 14285  0038F6                     __ptext47:
 14286                           	opt stack 0
 14287  0038F6                     _checkForOverlapSwitched:
 14288                           	opt stack 22
 14289                           
 14290                           ;memoryController.c: 104: if ((a.start == b.start) ||
 14291                           ;memoryController.c: 105: (a.end == b.end) ||
 14292                           ;memoryController.c: 106: (a.start == b.end) ||
 14293                           ;memoryController.c: 107: (a.end == b.start) ||
 14294                           ;memoryController.c: 108: (a.end > 0x3000) ||
 14295                           ;memoryController.c: 109: (a.start > 0x3000) ||
 14296                           ;memoryController.c: 110: (b.end > 0x3000) ||
 14297                           ;memoryController.c: 111: (b.start > 0x3000))
 14298                           
 14299                           ;incstack = 0
 14300  0038F6  0100               	movlb	0	; () banked
 14301  0038F8  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14302  0038FA  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 14303  0038FC  E104               	bnz	u7940
 14304  0038FE  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14305  003900  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14306  003902  B4D8               	btfsc	status,2,c
 14307  003904  D029               	goto	u8010
 14308  003906                     u7940:
 14309                           
 14310                           ; BSR set to: 0
 14311  003906  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14312  003908  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14313  00390A  E104               	bnz	u7950
 14314  00390C  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14315  00390E  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14316  003910  B4D8               	btfsc	status,2,c
 14317  003912  D022               	goto	u8010
 14318  003914                     u7950:
 14319                           
 14320                           ; BSR set to: 0
 14321  003914  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14322  003916  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14323  003918  E104               	bnz	u7960
 14324  00391A  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14325  00391C  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14326  00391E  B4D8               	btfsc	status,2,c
 14327  003920  D01B               	goto	u8010
 14328  003922                     u7960:
 14329                           
 14330                           ; BSR set to: 0
 14331  003922  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14332  003924  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14333  003926  E104               	bnz	u7970
 14334  003928  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14335  00392A  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14336  00392C  B4D8               	btfsc	status,2,c
 14337  00392E  D014               	goto	u8010
 14338  003930                     u7970:
 14339                           
 14340                           ; BSR set to: 0
 14341  003930  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14342  003932  0E30               	movlw	48
 14343  003934  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14344  003936  B0D8               	btfsc	status,0,c
 14345  003938  D00F               	goto	u8010
 14346                           
 14347                           ; BSR set to: 0
 14348  00393A  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 14349  00393C  0E30               	movlw	48
 14350  00393E  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14351  003940  B0D8               	btfsc	status,0,c
 14352  003942  D00A               	goto	u8010
 14353                           
 14354                           ; BSR set to: 0
 14355  003944  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14356  003946  0E30               	movlw	48
 14357  003948  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14358  00394A  B0D8               	btfsc	status,0,c
 14359  00394C  D005               	goto	u8010
 14360                           
 14361                           ; BSR set to: 0
 14362  00394E  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 14363  003950  0E30               	movlw	48
 14364  003952  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14365  003954  A0D8               	btfss	status,0,c
 14366  003956  D002               	goto	l446
 14367  003958                     u8010:
 14368                           
 14369                           ; BSR set to: 0
 14370                           ;memoryController.c: 112: return 1;
 14371                           
 14372                           ; BSR set to: 0
 14373  003958  0E01               	movlw	1
 14374                           
 14375                           ; BSR set to: 0
 14376  00395A  0012               	return	
 14377  00395C                     l446:
 14378                           
 14379                           ; BSR set to: 0
 14380                           ;memoryController.c: 115: if (a.start < a.end) {
 14381                           
 14382                           ; BSR set to: 0
 14383  00395C  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14384  00395E  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14385  003960  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14386  003962  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14387  003964  B0D8               	btfsc	status,0,c
 14388  003966  0012               	return	
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;memoryController.c: 116: if (b.start < b.end) {
 14392  003968  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14393  00396A  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14394  00396C  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14395  00396E  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14396  003970  B0D8               	btfsc	status,0,c
 14397  003972  D010               	goto	l451
 14398                           
 14399                           ; BSR set to: 0
 14400                           ;memoryController.c: 118: if (a.start < b.start) {
 14401  003974  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 14402  003976  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 14403  003978  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14404  00397A  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14405  00397C  B0D8               	btfsc	status,0,c
 14406  00397E  0012               	return	
 14407                           
 14408                           ; BSR set to: 0
 14409                           ;memoryController.c: 119: if (a.end > b.start) {
 14410  003980  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 14411  003982  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 14412  003984  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 14413  003986  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 14414  003988  B0D8               	btfsc	status,0,c
 14415  00398A  D002               	goto	l453
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;memoryController.c: 120: return 1;
 14419  00398C  0E01               	movlw	1
 14420                           
 14421                           ; BSR set to: 0
 14422                           ;memoryController.c: 121: }
 14423                           
 14424                           ; BSR set to: 0
 14425  00398E  0012               	return	
 14426  003990                     l453:
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;memoryController.c: 122: else {
 14430                           ;memoryController.c: 123: return 0;
 14431                           
 14432                           ; BSR set to: 0
 14433  003990  0E00               	movlw	0
 14434                           
 14435                           ; BSR set to: 0
 14436                           ;memoryController.c: 124: }
 14437                           ;memoryController.c: 125: }
 14438                           ;memoryController.c: 126: }
 14439                           
 14440                           ; BSR set to: 0
 14441                           
 14442                           ; BSR set to: 0
 14443  003992  0012               	return	
 14444  003994                     l451:
 14445                           
 14446                           ; BSR set to: 0
 14447                           ;memoryController.c: 127: else {
 14448                           ;memoryController.c: 128: if (b.end < a.start)
 14449                           
 14450                           ; BSR set to: 0
 14451  003994  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 14452  003996  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 14453  003998  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 14454  00399A  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 14455  00399C  B0D8               	btfsc	status,0,c
 14456  00399E  D002               	goto	l456
 14457                           
 14458                           ; BSR set to: 0
 14459                           ;memoryController.c: 129: return 0;
 14460  0039A0  0E00               	movlw	0
 14461                           
 14462                           ; BSR set to: 0
 14463                           
 14464                           ; BSR set to: 0
 14465  0039A2  0012               	return	
 14466  0039A4                     l456:
 14467                           
 14468                           ; BSR set to: 0
 14469                           ;memoryController.c: 130: else
 14470                           ;memoryController.c: 131: return 1;
 14471                           
 14472                           ; BSR set to: 0
 14473  0039A4  0E01               	movlw	1
 14474                           
 14475                           ; BSR set to: 0
 14476                           
 14477                           ; BSR set to: 0
 14478                           
 14479                           ; BSR set to: 0
 14480  0039A6  0012               	return	
 14481  0039A8                     __end_of_checkForOverlapSwitched:
 14482                           	opt stack 0
 14483                           tblptru	equ	0xFF8
 14484                           tblptrh	equ	0xFF7
 14485                           tblptrl	equ	0xFF6
 14486                           tablat	equ	0xFF5
 14487                           prodh	equ	0xFF4
 14488                           prodl	equ	0xFF3
 14489                           intcon	equ	0xFF2
 14490                           intcon3	equ	0xFF0
 14491                           postinc0	equ	0xFEE
 14492                           plusw0	equ	0xFEB
 14493                           fsr0h	equ	0xFEA
 14494                           fsr0l	equ	0xFE9
 14495                           wreg	equ	0xFE8
 14496                           indf1	equ	0xFE7
 14497                           postinc1	equ	0xFE6
 14498                           postdec1	equ	0xFE5
 14499                           plusw1	equ	0xFE3
 14500                           fsr1h	equ	0xFE2
 14501                           fsr1l	equ	0xFE1
 14502                           indf2	equ	0xFDF
 14503                           postinc2	equ	0xFDE
 14504                           postdec2	equ	0xFDD
 14505                           plusw2	equ	0xFDB
 14506                           fsr2h	equ	0xFDA
 14507                           fsr2l	equ	0xFD9
 14508                           status	equ	0xFD8
 14509                           
 14510 ;; *************** function ___wmul *****************
 14511 ;; Defined at:
 14512 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 14513 ;; Parameters:    Size  Location     Type
 14514 ;;  multiplier      2    0[BANK0 ] unsigned int 
 14515 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 14516 ;; Auto vars:     Size  Location     Type
 14517 ;;  product         2    4[BANK0 ] unsigned int 
 14518 ;; Return value:  Size  Location     Type
 14519 ;;                  2    0[BANK0 ] unsigned int 
 14520 ;; Registers used:
 14521 ;;		wreg, status,2, status,0, prodl, prodh
 14522 ;; Tracked objects:
 14523 ;;		On entry : 0/0
 14524 ;;		On exit  : 0/0
 14525 ;;		Unchanged: 0/0
 14526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14527 ;;      Params:         0       4       0       0       0       0       0       0       0
 14528 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14529 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14530 ;;      Totals:         0       6       0       0       0       0       0       0       0
 14531 ;;Total ram usage:        6 bytes
 14532 ;; Hardware stack levels used:    1
 14533 ;; Hardware stack levels required when called:    4
 14534 ;; This function calls:
 14535 ;;		Nothing
 14536 ;; This function is called by:
 14537 ;;		_memory_txFrameRequest
 14538 ;;		_intToString
 14539 ;; This function uses a non-reentrant model
 14540 ;;
 14541                           
 14542                           	psect	text48
 14543  004A22                     __ptext48:
 14544                           	opt stack 0
 14545  004A22                     ___wmul:
 14546                           	opt stack 24
 14547                           
 14548                           ; BSR set to: 0
 14549                           ;incstack = 0
 14550  004A22  0100               	movlb	0	; () banked
 14551  004A24  5160               	movf	___wmul@multiplier& (0+255),w,b
 14552  004A26  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14553  004A28  CFF3 F064          	movff	prodl,___wmul@product
 14554  004A2C  CFF4 F065          	movff	prodh,___wmul@product+1
 14555  004A30  5160               	movf	___wmul@multiplier& (0+255),w,b
 14556  004A32  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 14557  004A34  50F3               	movf	prodl,w,c
 14558  004A36  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14559  004A38  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 14560  004A3A  0362               	mulwf	___wmul@multiplicand& (0+255),b
 14561  004A3C  50F3               	movf	prodl,w,c
 14562  004A3E  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 14563                           
 14564                           ; BSR set to: 0
 14565  004A40  C064  F060         	movff	___wmul@product,?___wmul
 14566  004A44  C065  F061         	movff	___wmul@product+1,?___wmul+1
 14567  004A48  0012               	return	
 14568  004A4A                     __end_of___wmul:
 14569                           	opt stack 0
 14570                           tblptru	equ	0xFF8
 14571                           tblptrh	equ	0xFF7
 14572                           tblptrl	equ	0xFF6
 14573                           tablat	equ	0xFF5
 14574                           prodh	equ	0xFF4
 14575                           prodl	equ	0xFF3
 14576                           intcon	equ	0xFF2
 14577                           intcon3	equ	0xFF0
 14578                           postinc0	equ	0xFEE
 14579                           plusw0	equ	0xFEB
 14580                           fsr0h	equ	0xFEA
 14581                           fsr0l	equ	0xFE9
 14582                           wreg	equ	0xFE8
 14583                           indf1	equ	0xFE7
 14584                           postinc1	equ	0xFE6
 14585                           postdec1	equ	0xFE5
 14586                           plusw1	equ	0xFE3
 14587                           fsr1h	equ	0xFE2
 14588                           fsr1l	equ	0xFE1
 14589                           indf2	equ	0xFDF
 14590                           postinc2	equ	0xFDE
 14591                           postdec2	equ	0xFDD
 14592                           plusw2	equ	0xFDB
 14593                           fsr2h	equ	0xFDA
 14594                           fsr2l	equ	0xFD9
 14595                           status	equ	0xFD8
 14596                           
 14597 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 14598 ;; Defined at:
 14599 ;;		line 244 in file "src/enc424j600/ENC424J600.c"
 14600 ;; Parameters:    Size  Location     Type
 14601 ;;  ethtype         2   15[BANK0 ] enum E5498
 14602 ;;  field           9   17[BANK0 ] struct memoryField
 14603 ;; Auto vars:     Size  Location     Type
 14604 ;;  opcode          1   28[BANK0 ] unsigned char 
 14605 ;;  highByte        1   27[BANK0 ] unsigned char 
 14606 ;;  lowByte         1   26[BANK0 ] unsigned char 
 14607 ;; Return value:  Size  Location     Type
 14608 ;;                  1    wreg      void 
 14609 ;; Registers used:
 14610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14611 ;; Tracked objects:
 14612 ;;		On entry : 0/0
 14613 ;;		On exit  : 0/0
 14614 ;;		Unchanged: 0/0
 14615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14616 ;;      Params:         0      11       0       0       0       0       0       0       0
 14617 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14618 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14619 ;;      Totals:         0      14       0       0       0       0       0       0       0
 14620 ;;Total ram usage:       14 bytes
 14621 ;; Hardware stack levels used:    1
 14622 ;; Hardware stack levels required when called:    7
 14623 ;; This function calls:
 14624 ;;		_ENC424J600_setGPDATAWritePointer
 14625 ;;		_ENC424J600_writeSPI
 14626 ;; This function is called by:
 14627 ;;		_ethernet_txFrameRequest
 14628 ;; This function uses a non-reentrant model
 14629 ;;
 14630                           
 14631                           	psect	text49
 14632  0044F8                     __ptext49:
 14633                           	opt stack 0
 14634  0044F8                     _ethernetController_writeEtherTypeFieldToBuffer:
 14635                           	opt stack 21
 14636                           
 14637                           ;ENC424J600.c: 245: ENC424J600_setGPDATAWritePointer(field.start + 0x0006);
 14638                           
 14639                           ; BSR set to: 0
 14640                           ;incstack = 0
 14641  0044F8  0E06               	movlw	6
 14642  0044FA  0100               	movlb	0	; () banked
 14643  0044FC  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 14644  0044FE  6F6A               	movwf	ENC424J600_setGPDATAWritePointer@addr& (0+255),b
 14645  004500  0E00               	movlw	0
 14646  004502  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 14647  004504  6F6B               	movwf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),b
 14648  004506  ECB8  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14649                           
 14650                           ;ENC424J600.c: 246: uint8_t lowByte = ethtype & 0x00ff;
 14651  00450A  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 14652                           
 14653                           ;ENC424J600.c: 247: uint8_t highByte = (ethtype & 0xff00) >> 8;
 14654  00450E  0100               	movlb	0	; () banked
 14655  004510  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 14656  004512  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 14657                           
 14658                           ; BSR set to: 0
 14659                           ;ENC424J600.c: 248: uint8_t opcode = 0x2A;
 14660  004514  0E2A               	movlw	42
 14661  004516  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 14662                           
 14663                           ; BSR set to: 0
 14664                           ;ENC424J600.c: 249: PORTBbits.RB4=0;
 14665  004518  9881               	bcf	3969,4,c	;volatile
 14666                           
 14667                           ;ENC424J600.c: 250: ENC424J600_writeSPI(&opcode);
 14668  00451A  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 14669  00451C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14670  00451E  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 14671  004520  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14672  004522  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14673                           
 14674                           ;ENC424J600.c: 251: ENC424J600_writeSPI(&highByte);
 14675  004526  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 14676  004528  0100               	movlb	0	; () banked
 14677  00452A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14678  00452C  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 14679  00452E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14680  004530  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14681                           
 14682                           ;ENC424J600.c: 252: ENC424J600_writeSPI(&lowByte);
 14683  004534  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 14684  004536  0100               	movlb	0	; () banked
 14685  004538  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14686  00453A  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 14687  00453C  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14688  00453E  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14689                           
 14690                           ;ENC424J600.c: 253: PORTBbits.RB4=1;
 14691  004542  8881               	bsf	3969,4,c	;volatile
 14692  004544  0012               	return		;funcret
 14693  004546                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 14694                           	opt stack 0
 14695                           tblptru	equ	0xFF8
 14696                           tblptrh	equ	0xFF7
 14697                           tblptrl	equ	0xFF6
 14698                           tablat	equ	0xFF5
 14699                           prodh	equ	0xFF4
 14700                           prodl	equ	0xFF3
 14701                           intcon	equ	0xFF2
 14702                           intcon3	equ	0xFF0
 14703                           postinc0	equ	0xFEE
 14704                           plusw0	equ	0xFEB
 14705                           fsr0h	equ	0xFEA
 14706                           fsr0l	equ	0xFE9
 14707                           wreg	equ	0xFE8
 14708                           indf1	equ	0xFE7
 14709                           postinc1	equ	0xFE6
 14710                           postdec1	equ	0xFE5
 14711                           plusw1	equ	0xFE3
 14712                           fsr1h	equ	0xFE2
 14713                           fsr1l	equ	0xFE1
 14714                           indf2	equ	0xFDF
 14715                           postinc2	equ	0xFDE
 14716                           postdec2	equ	0xFDD
 14717                           plusw2	equ	0xFDB
 14718                           fsr2h	equ	0xFDA
 14719                           fsr2l	equ	0xFD9
 14720                           status	equ	0xFD8
 14721                           
 14722 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 14723 ;; Defined at:
 14724 ;;		line 231 in file "src/enc424j600/ENC424J600.c"
 14725 ;; Parameters:    Size  Location     Type
 14726 ;;  addr            6   15[BANK0 ] struct macaddress
 14727 ;;  field           9   21[BANK0 ] struct memoryField
 14728 ;; Auto vars:     Size  Location     Type
 14729 ;;  i               1   37[BANK0 ] unsigned char 
 14730 ;;  i               1   38[BANK0 ] unsigned char 
 14731 ;;  data            6   30[BANK0 ] unsigned char [6]
 14732 ;;  opcode          1   36[BANK0 ] unsigned char 
 14733 ;; Return value:  Size  Location     Type
 14734 ;;                  1    wreg      void 
 14735 ;; Registers used:
 14736 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14737 ;; Tracked objects:
 14738 ;;		On entry : 0/0
 14739 ;;		On exit  : 0/0
 14740 ;;		Unchanged: 0/0
 14741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14742 ;;      Params:         0      15       0       0       0       0       0       0       0
 14743 ;;      Locals:         0       9       0       0       0       0       0       0       0
 14744 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14745 ;;      Totals:         0      24       0       0       0       0       0       0       0
 14746 ;;Total ram usage:       24 bytes
 14747 ;; Hardware stack levels used:    1
 14748 ;; Hardware stack levels required when called:    7
 14749 ;; This function calls:
 14750 ;;		_ENC424J600_setGPDATAWritePointer
 14751 ;;		_ENC424J600_writeSPI
 14752 ;; This function is called by:
 14753 ;;		_ethernet_txFrameRequest
 14754 ;;		_ipv4_sendFrame
 14755 ;; This function uses a non-reentrant model
 14756 ;;
 14757                           
 14758                           	psect	text50
 14759  003E36                     __ptext50:
 14760                           	opt stack 0
 14761  003E36                     _ethernetController_writeDestinationMACAddress:
 14762                           	opt stack 21
 14763                           
 14764                           ;ENC424J600.c: 232: ENC424J600_setGPDATAWritePointer(field.start);
 14765                           
 14766                           ;incstack = 0
 14767  003E36  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,ENC424J600_setGPDATAWritePoin
      +                          ter@addr
 14768  003E3A  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,ENC424J600_setGPDATAWritePo
      +                          inter@addr+1
 14769  003E3E  ECB8  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14770                           
 14771                           ;ENC424J600.c: 233: uint8_t data[6];
 14772                           ;ENC424J600.c: 234: for (uint8_t i = 0; i < 6; i++)
 14773  003E42  0E00               	movlw	0
 14774  003E44  0100               	movlb	0	; () banked
 14775  003E46  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 14776  003E48                     l7265:
 14777                           
 14778                           ; BSR set to: 0
 14779  003E48  0E05               	movlw	5
 14780  003E4A  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 14781  003E4C  D001               	goto	l138
 14782  003E4E  D014               	goto	u8310
 14783  003E50                     l138:
 14784                           
 14785                           ; BSR set to: 0
 14786                           ;ENC424J600.c: 235: data[i] = addr.address[i];
 14787                           
 14788                           ; BSR set to: 0
 14789  003E50  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 14790  003E52  0D01               	mullw	1
 14791  003E54  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 14792  003E56  24F3               	addwf	prodl,w,c
 14793  003E58  6ED9               	movwf	fsr2l,c
 14794  003E5A  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 14795  003E5C  20F4               	addwfc	prodh,w,c
 14796  003E5E  6EDA               	movwf	fsr2h,c
 14797  003E60  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 14798  003E62  0D01               	mullw	1
 14799  003E64  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 14800  003E66  24F3               	addwf	prodl,w,c
 14801  003E68  6EE1               	movwf	fsr1l,c
 14802  003E6A  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 14803  003E6C  20F4               	addwfc	prodh,w,c
 14804  003E6E  6EE2               	movwf	fsr1h,c
 14805  003E70  CFDF FFE7          	movff	indf2,indf1
 14806                           
 14807                           ; BSR set to: 0
 14808  003E74  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 14809  003E76  D7E8               	goto	l7265
 14810  003E78                     u8310:
 14811                           
 14812                           ; BSR set to: 0
 14813                           ;ENC424J600.c: 236: uint8_t opcode = 0x2A;
 14814                           
 14815                           ; BSR set to: 0
 14816  003E78  0E2A               	movlw	42
 14817  003E7A  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;ENC424J600.c: 237: PORTBbits.RB4=0;
 14821  003E7C  9881               	bcf	3969,4,c	;volatile
 14822                           
 14823                           ; BSR set to: 0
 14824                           ;ENC424J600.c: 238: ENC424J600_writeSPI(&opcode);
 14825  003E7E  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 14826  003E80  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14827  003E82  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 14828  003E84  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14829  003E86  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14830                           
 14831                           ;ENC424J600.c: 239: for (uint8_t i = 0; i < 6; i++)
 14832  003E8A  0E00               	movlw	0
 14833  003E8C  0100               	movlb	0	; () banked
 14834  003E8E  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 14835  003E90                     l7283:
 14836                           
 14837                           ; BSR set to: 0
 14838  003E90  0E05               	movlw	5
 14839  003E92  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 14840  003E94  D001               	goto	l140
 14841  003E96  D00D               	goto	u8330
 14842  003E98                     l140:
 14843                           
 14844                           ; BSR set to: 0
 14845                           ;ENC424J600.c: 240: ENC424J600_writeSPI(&data[i]);
 14846                           
 14847                           ; BSR set to: 0
 14848  003E98  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 14849  003E9A  0D01               	mullw	1
 14850  003E9C  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 14851  003E9E  24F3               	addwf	prodl,w,c
 14852  003EA0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14853  003EA2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 14854  003EA4  20F4               	addwfc	prodh,w,c
 14855  003EA6  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14856  003EA8  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14857  003EAC  0100               	movlb	0	; () banked
 14858  003EAE  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 14859  003EB0  D7EF               	goto	l7283
 14860  003EB2                     u8330:
 14861                           
 14862                           ; BSR set to: 0
 14863                           ;ENC424J600.c: 241: PORTBbits.RB4=1;
 14864  003EB2  8881               	bsf	3969,4,c	;volatile
 14865                           
 14866                           ; BSR set to: 0
 14867  003EB4  0012               	return		;funcret
 14868  003EB6                     __end_of_ethernetController_writeDestinationMACAddress:
 14869                           	opt stack 0
 14870                           tblptru	equ	0xFF8
 14871                           tblptrh	equ	0xFF7
 14872                           tblptrl	equ	0xFF6
 14873                           tablat	equ	0xFF5
 14874                           prodh	equ	0xFF4
 14875                           prodl	equ	0xFF3
 14876                           intcon	equ	0xFF2
 14877                           intcon3	equ	0xFF0
 14878                           postinc0	equ	0xFEE
 14879                           plusw0	equ	0xFEB
 14880                           fsr0h	equ	0xFEA
 14881                           fsr0l	equ	0xFE9
 14882                           wreg	equ	0xFE8
 14883                           indf1	equ	0xFE7
 14884                           postinc1	equ	0xFE6
 14885                           postdec1	equ	0xFE5
 14886                           plusw1	equ	0xFE3
 14887                           fsr1h	equ	0xFE2
 14888                           fsr1l	equ	0xFE1
 14889                           indf2	equ	0xFDF
 14890                           postinc2	equ	0xFDE
 14891                           postdec2	equ	0xFDD
 14892                           plusw2	equ	0xFDB
 14893                           fsr2h	equ	0xFDA
 14894                           fsr2l	equ	0xFD9
 14895                           status	equ	0xFD8
 14896                           
 14897 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 14898 ;; Defined at:
 14899 ;;		line 211 in file "src/enc424j600/ENC424J600.c"
 14900 ;; Parameters:    Size  Location     Type
 14901 ;;  data            1    wreg     unsigned char 
 14902 ;;  field           9   15[BANK0 ] struct memoryField
 14903 ;; Auto vars:     Size  Location     Type
 14904 ;;  data            1   28[BANK0 ] unsigned char 
 14905 ;;  opcode          1   29[BANK0 ] unsigned char 
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14915 ;;      Params:         0       9       0       0       0       0       0       0       0
 14916 ;;      Locals:         0       2       0       0       0       0       0       0       0
 14917 ;;      Temps:          0       4       0       0       0       0       0       0       0
 14918 ;;      Totals:         0      15       0       0       0       0       0       0       0
 14919 ;;Total ram usage:       15 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:    7
 14922 ;; This function calls:
 14923 ;;		_ENC424J600_setGPDATAWritePointer
 14924 ;;		_ENC424J600_writeSPI
 14925 ;; This function is called by:
 14926 ;;		_ARP_send
 14927 ;;		_ipv4_streamToTransmissionBuffer
 14928 ;; This function uses a non-reentrant model
 14929 ;;
 14930                           
 14931                           	psect	text51
 14932  003FAE                     __ptext51:
 14933                           	opt stack 0
 14934  003FAE                     _ethernetController_streamToTransmitBuffer:
 14935                           	opt stack 22
 14936                           
 14937                           ; BSR set to: 0
 14938                           ;incstack = 0
 14939                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 14940  003FAE  0100               	movlb	0	; () banked
 14941  003FB0  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 14942                           
 14943                           ;ENC424J600.c: 212: uint8_t opcode;
 14944                           ;ENC424J600.c: 213: uint16_t static pointer = 0;
 14945                           ;ENC424J600.c: 214: if (pointer == 0) {
 14946  003FB2  5041               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 14947  003FB4  1042               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 14948  003FB6  A4D8               	btfss	status,2,c
 14949  003FB8  D010               	goto	l132
 14950                           
 14951                           ;ENC424J600.c: 215: ENC424J600_setGPDATAWritePointer(field.start);
 14952  003FBA  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,ENC424J600_setGPDATAWritePointer@
      +                          addr
 14953  003FBE  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,ENC424J600_setGPDATAWritePointe
      +                          r@addr+1
 14954  003FC2  ECB8  F023         	call	_ENC424J600_setGPDATAWritePointer	;wreg free
 14955                           
 14956                           ;ENC424J600.c: 216: opcode = 0x2A;
 14957  003FC6  0E2A               	movlw	42
 14958  003FC8  0100               	movlb	0	; () banked
 14959  003FCA  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 14960                           
 14961                           ; BSR set to: 0
 14962                           ;ENC424J600.c: 217: PORTBbits.RB4=0;
 14963  003FCC  9881               	bcf	3969,4,c	;volatile
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;ENC424J600.c: 218: ENC424J600_writeSPI(&opcode);
 14967  003FCE  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 14968  003FD0  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14969  003FD2  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 14970  003FD4  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14971  003FD6  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14972  003FDA                     l132:
 14973                           
 14974                           ;ENC424J600.c: 219: }
 14975                           ;ENC424J600.c: 221: ENC424J600_writeSPI(&data);
 14976  003FDA  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 14977  003FDC  0100               	movlb	0	; () banked
 14978  003FDE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 14979  003FE0  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 14980  003FE2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 14981  003FE4  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 14982                           
 14983                           ;ENC424J600.c: 223: if (pointer == field.length - 1) {
 14984  003FE8  0EFF               	movlw	255
 14985  003FEA  0100               	movlb	0	; () banked
 14986  003FEC  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 14987  003FEE  0EFF               	movlw	255
 14988  003FF0  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 14989  003FF2  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 14990  003FF6  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 14991  003FFA  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 14992  003FFE  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 14993  004000  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 14994  004002  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 14995  004004  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 14996  004006  5041               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 14997  004008  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 14998  00400A  E10A               	bnz	l7511
 14999  00400C  5042               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 15000  00400E  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 15001  004010  A4D8               	btfss	status,2,c
 15002  004012  D006               	goto	l133
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;ENC424J600.c: 224: PORTBbits.RB4=1;
 15006  004014  8881               	bsf	3969,4,c	;volatile
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;ENC424J600.c: 225: pointer = 0;
 15010  004016  0E00               	movlw	0
 15011  004018  6E42               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 15012  00401A  0E00               	movlw	0
 15013  00401C  6E41               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 15014                           
 15015                           ;ENC424J600.c: 226: } else {
 15016  00401E  0012               	return	
 15017  004020                     l133:
 15018  004020                     l7511:
 15019                           
 15020                           ; BSR set to: 0
 15021                           ;ENC424J600.c: 227: pointer++;
 15022  004020  4A41               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 15023  004022  2A42               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 15024  004024  0012               	return	
 15025  004026                     __end_of_ethernetController_streamToTransmitBuffer:
 15026                           	opt stack 0
 15027                           tblptru	equ	0xFF8
 15028                           tblptrh	equ	0xFF7
 15029                           tblptrl	equ	0xFF6
 15030                           tablat	equ	0xFF5
 15031                           prodh	equ	0xFF4
 15032                           prodl	equ	0xFF3
 15033                           intcon	equ	0xFF2
 15034                           intcon3	equ	0xFF0
 15035                           postinc0	equ	0xFEE
 15036                           plusw0	equ	0xFEB
 15037                           fsr0h	equ	0xFEA
 15038                           fsr0l	equ	0xFE9
 15039                           wreg	equ	0xFE8
 15040                           indf1	equ	0xFE7
 15041                           postinc1	equ	0xFE6
 15042                           postdec1	equ	0xFE5
 15043                           plusw1	equ	0xFE3
 15044                           fsr1h	equ	0xFE2
 15045                           fsr1l	equ	0xFE1
 15046                           indf2	equ	0xFDF
 15047                           postinc2	equ	0xFDE
 15048                           postdec2	equ	0xFDD
 15049                           plusw2	equ	0xFDB
 15050                           fsr2h	equ	0xFDA
 15051                           fsr2l	equ	0xFD9
 15052                           status	equ	0xFD8
 15053                           
 15054 ;; *************** function _ENC424J600_setGPDATAWritePointer *****************
 15055 ;; Defined at:
 15056 ;;		line 648 in file "src/enc424j600/ENC424J600.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;  addr            2   10[BANK0 ] unsigned int 
 15059 ;; Auto vars:     Size  Location     Type
 15060 ;;  highByte        1   14[BANK0 ] unsigned char 
 15061 ;;  lowByte         1   13[BANK0 ] unsigned char 
 15062 ;;  opcode          1   12[BANK0 ] unsigned char 
 15063 ;; Return value:  Size  Location     Type
 15064 ;;                  1    wreg      void 
 15065 ;; Registers used:
 15066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15067 ;; Tracked objects:
 15068 ;;		On entry : 0/0
 15069 ;;		On exit  : 0/0
 15070 ;;		Unchanged: 0/0
 15071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15072 ;;      Params:         0       2       0       0       0       0       0       0       0
 15073 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15074 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15075 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15076 ;;Total ram usage:        5 bytes
 15077 ;; Hardware stack levels used:    1
 15078 ;; Hardware stack levels required when called:    6
 15079 ;; This function calls:
 15080 ;;		_ENC424J600_writeSPI
 15081 ;; This function is called by:
 15082 ;;		_ethernetController_streamToTransmitBuffer
 15083 ;;		_ethernetController_writeDestinationMACAddress
 15084 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 15085 ;; This function uses a non-reentrant model
 15086 ;;
 15087                           
 15088                           	psect	text52
 15089  004770                     __ptext52:
 15090                           	opt stack 0
 15091  004770                     _ENC424J600_setGPDATAWritePointer:
 15092                           	opt stack 21
 15093                           
 15094                           ;ENC424J600.c: 649: uint8_t opcode = 0x6C;
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;incstack = 0
 15098  004770  0E6C               	movlw	108
 15099  004772  0100               	movlb	0	; () banked
 15100  004774  6F6C               	movwf	ENC424J600_setGPDATAWritePointer@opcode& (0+255),b
 15101                           
 15102                           ; BSR set to: 0
 15103                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 15104  004776  C06A  F06D         	movff	ENC424J600_setGPDATAWritePointer@addr,ENC424J600_setGPDATAWritePointer@lowByte
 15105                           
 15106                           ;ENC424J600.c: 651: uint8_t highByte = (addr & 0xff00) >> 8;
 15107  00477A  516B               	movf	(ENC424J600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 15108  00477C  6F6E               	movwf	ENC424J600_setGPDATAWritePointer@highByte& (0+255),b
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;ENC424J600.c: 652: PORTBbits.RB4=0;
 15112  00477E  9881               	bcf	3969,4,c	;volatile
 15113                           
 15114                           ; BSR set to: 0
 15115                           ;ENC424J600.c: 653: ENC424J600_writeSPI(&opcode);
 15116  004780  0E6C               	movlw	low ENC424J600_setGPDATAWritePointer@opcode
 15117  004782  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15118  004784  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@opcode
 15119  004786  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15120  004788  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 15121                           
 15122                           ;ENC424J600.c: 654: ENC424J600_writeSPI(&lowByte);
 15123  00478C  0E6D               	movlw	low ENC424J600_setGPDATAWritePointer@lowByte
 15124  00478E  0100               	movlb	0	; () banked
 15125  004790  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15126  004792  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@lowByte
 15127  004794  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15128  004796  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 15129                           
 15130                           ;ENC424J600.c: 655: ENC424J600_writeSPI(&highByte);
 15131  00479A  0E6E               	movlw	low ENC424J600_setGPDATAWritePointer@highByte
 15132  00479C  0100               	movlb	0	; () banked
 15133  00479E  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15134  0047A0  0E00               	movlw	high ENC424J600_setGPDATAWritePointer@highByte
 15135  0047A2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15136  0047A4  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 15137                           
 15138                           ;ENC424J600.c: 656: PORTBbits.RB4=1;
 15139  0047A8  8881               	bsf	3969,4,c	;volatile
 15140  0047AA  0012               	return		;funcret
 15141  0047AC                     __end_of_ENC424J600_setGPDATAWritePointer:
 15142                           	opt stack 0
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           intcon	equ	0xFF2
 15150                           intcon3	equ	0xFF0
 15151                           postinc0	equ	0xFEE
 15152                           plusw0	equ	0xFEB
 15153                           fsr0h	equ	0xFEA
 15154                           fsr0l	equ	0xFE9
 15155                           wreg	equ	0xFE8
 15156                           indf1	equ	0xFE7
 15157                           postinc1	equ	0xFE6
 15158                           postdec1	equ	0xFE5
 15159                           plusw1	equ	0xFE3
 15160                           fsr1h	equ	0xFE2
 15161                           fsr1l	equ	0xFE1
 15162                           indf2	equ	0xFDF
 15163                           postinc2	equ	0xFDE
 15164                           postdec2	equ	0xFDD
 15165                           plusw2	equ	0xFDB
 15166                           fsr2h	equ	0xFDA
 15167                           fsr2l	equ	0xFD9
 15168                           status	equ	0xFD8
 15169                           
 15170 ;; *************** function _ethernetController_sendPacket *****************
 15171 ;; Defined at:
 15172 ;;		line 204 in file "src/enc424j600/ENC424J600.c"
 15173 ;; Parameters:    Size  Location     Type
 15174 ;;  field           9   18[BANK0 ] struct memoryField
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;		None
 15177 ;; Return value:  Size  Location     Type
 15178 ;;                  1    wreg      void 
 15179 ;; Registers used:
 15180 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15186 ;;      Params:         0       9       0       0       0       0       0       0       0
 15187 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15188 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15189 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15190 ;;Total ram usage:        9 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; Hardware stack levels required when called:    8
 15193 ;; This function calls:
 15194 ;;		_ENC424J600_setTXLength
 15195 ;;		_ENC424J600_setTXStartAddress
 15196 ;;		_ENC424J600_writeSingleByte
 15197 ;;		_memory_txFrameClear
 15198 ;; This function is called by:
 15199 ;;		_ARP_send
 15200 ;;		_ipv4_sendFrame
 15201 ;; This function uses a non-reentrant model
 15202 ;;
 15203                           
 15204                           	psect	text53
 15205  004A4A                     __ptext53:
 15206                           	opt stack 0
 15207  004A4A                     _ethernetController_sendPacket:
 15208                           	opt stack 20
 15209                           
 15210                           ;ENC424J600.c: 205: ENC424J600_setTXStartAddress(field.start);
 15211                           
 15212                           ;incstack = 0
 15213  004A4A  C072  F06E         	movff	ethernetController_sendPacket@field,ENC424J600_setTXStartAddress@addr
 15214  004A4E  C073  F06F         	movff	ethernetController_sendPacket@field+1,ENC424J600_setTXStartAddress@addr+1
 15215  004A52  ECA9  F024         	call	_ENC424J600_setTXStartAddress	;wreg free
 15216                           
 15217                           ;ENC424J600.c: 206: ENC424J600_setTXLength(field.length);
 15218  004A56  C076  F06E         	movff	ethernetController_sendPacket@field+4,ENC424J600_setTXLength@len
 15219  004A5A  C077  F06F         	movff	ethernetController_sendPacket@field+5,ENC424J600_setTXLength@len+1
 15220  004A5E  ECBE  F024         	call	_ENC424J600_setTXLength	;wreg free
 15221                           
 15222                           ;ENC424J600.c: 207: ENC424J600_writeSingleByte(0b11010100);
 15223  004A62  0ED4               	movlw	212
 15224  004A64  EC20  F026         	call	_ENC424J600_writeSingleByte
 15225                           
 15226                           ;ENC424J600.c: 208: memory_txFrameClear(field.index);
 15227  004A68  0100               	movlb	0	; () banked
 15228  004A6A  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 15229  004A6C  EC86  F025         	call	_memory_txFrameClear
 15230  004A70  0012               	return		;funcret
 15231  004A72                     __end_of_ethernetController_sendPacket:
 15232                           	opt stack 0
 15233                           tblptru	equ	0xFF8
 15234                           tblptrh	equ	0xFF7
 15235                           tblptrl	equ	0xFF6
 15236                           tablat	equ	0xFF5
 15237                           prodh	equ	0xFF4
 15238                           prodl	equ	0xFF3
 15239                           intcon	equ	0xFF2
 15240                           intcon3	equ	0xFF0
 15241                           postinc0	equ	0xFEE
 15242                           plusw0	equ	0xFEB
 15243                           fsr0h	equ	0xFEA
 15244                           fsr0l	equ	0xFE9
 15245                           wreg	equ	0xFE8
 15246                           indf1	equ	0xFE7
 15247                           postinc1	equ	0xFE6
 15248                           postdec1	equ	0xFE5
 15249                           plusw1	equ	0xFE3
 15250                           fsr1h	equ	0xFE2
 15251                           fsr1l	equ	0xFE1
 15252                           indf2	equ	0xFDF
 15253                           postinc2	equ	0xFDE
 15254                           postdec2	equ	0xFDD
 15255                           plusw2	equ	0xFDB
 15256                           fsr2h	equ	0xFDA
 15257                           fsr2l	equ	0xFD9
 15258                           status	equ	0xFD8
 15259                           
 15260 ;; *************** function _memory_txFrameClear *****************
 15261 ;; Defined at:
 15262 ;;		line 224 in file "src/mem/memoryController.c"
 15263 ;; Parameters:    Size  Location     Type
 15264 ;;  index           1    wreg     unsigned char 
 15265 ;; Auto vars:     Size  Location     Type
 15266 ;;  index           1    0[BANK0 ] unsigned char 
 15267 ;; Return value:  Size  Location     Type
 15268 ;;                  1    wreg      void 
 15269 ;; Registers used:
 15270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 15271 ;; Tracked objects:
 15272 ;;		On entry : 0/0
 15273 ;;		On exit  : 0/0
 15274 ;;		Unchanged: 0/0
 15275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15276 ;;      Params:         0       0       0       0       0       0       0       0       0
 15277 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15278 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15279 ;;      Totals:         0       1       0       0       0       0       0       0       0
 15280 ;;Total ram usage:        1 bytes
 15281 ;; Hardware stack levels used:    1
 15282 ;; Hardware stack levels required when called:    4
 15283 ;; This function calls:
 15284 ;;		Nothing
 15285 ;; This function is called by:
 15286 ;;		_ethernetController_sendPacket
 15287 ;; This function uses a non-reentrant model
 15288 ;;
 15289                           
 15290                           	psect	text54
 15291  004B0C                     __ptext54:
 15292                           	opt stack 0
 15293  004B0C                     _memory_txFrameClear:
 15294                           	opt stack 23
 15295                           
 15296                           ;incstack = 0
 15297                           ;memory_txFrameClear@index stored from wreg
 15298  004B0C  0100               	movlb	0	; () banked
 15299  004B0E  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 15300                           
 15301                           ;memoryController.c: 225: occupiedMemory[index].fIsAssigned = 0;
 15302  004B10  0100               	movlb	0	; () banked
 15303  004B12  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 15304  004B14  0D09               	mullw	9
 15305  004B16  0E06               	movlw	6
 15306  004B18  26F3               	addwf	prodl,f,c
 15307  004B1A  0E00               	movlw	0
 15308  004B1C  22F4               	addwfc	prodh,f,c
 15309  004B1E  0E00               	movlw	low _occupiedMemory
 15310  004B20  24F3               	addwf	prodl,w,c
 15311  004B22  6ED9               	movwf	fsr2l,c
 15312  004B24  0E02               	movlw	high _occupiedMemory
 15313  004B26  20F4               	addwfc	prodh,w,c
 15314  004B28  6EDA               	movwf	fsr2h,c
 15315  004B2A  0E00               	movlw	0
 15316  004B2C  6EDF               	movwf	indf2,c
 15317                           
 15318                           ; BSR set to: 0
 15319  004B2E  0012               	return		;funcret
 15320  004B30                     __end_of_memory_txFrameClear:
 15321                           	opt stack 0
 15322                           tblptru	equ	0xFF8
 15323                           tblptrh	equ	0xFF7
 15324                           tblptrl	equ	0xFF6
 15325                           tablat	equ	0xFF5
 15326                           prodh	equ	0xFF4
 15327                           prodl	equ	0xFF3
 15328                           intcon	equ	0xFF2
 15329                           intcon3	equ	0xFF0
 15330                           postinc0	equ	0xFEE
 15331                           plusw0	equ	0xFEB
 15332                           fsr0h	equ	0xFEA
 15333                           fsr0l	equ	0xFE9
 15334                           wreg	equ	0xFE8
 15335                           indf1	equ	0xFE7
 15336                           postinc1	equ	0xFE6
 15337                           postdec1	equ	0xFE5
 15338                           plusw1	equ	0xFE3
 15339                           fsr1h	equ	0xFE2
 15340                           fsr1l	equ	0xFE1
 15341                           indf2	equ	0xFDF
 15342                           postinc2	equ	0xFDE
 15343                           postdec2	equ	0xFDD
 15344                           plusw2	equ	0xFDB
 15345                           fsr2h	equ	0xFDA
 15346                           fsr2l	equ	0xFD9
 15347                           status	equ	0xFD8
 15348                           
 15349 ;; *************** function _ENC424J600_setTXStartAddress *****************
 15350 ;; Defined at:
 15351 ;;		line 641 in file "src/enc424j600/ENC424J600.c"
 15352 ;; Parameters:    Size  Location     Type
 15353 ;;  addr            2   14[BANK0 ] unsigned int 
 15354 ;; Auto vars:     Size  Location     Type
 15355 ;;  highByte        1   17[BANK0 ] unsigned char 
 15356 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15357 ;; Return value:  Size  Location     Type
 15358 ;;                  1    wreg      void 
 15359 ;; Registers used:
 15360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15361 ;; Tracked objects:
 15362 ;;		On entry : 0/0
 15363 ;;		On exit  : 0/0
 15364 ;;		Unchanged: 0/0
 15365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15366 ;;      Params:         0       2       0       0       0       0       0       0       0
 15367 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15368 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15369 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15370 ;;Total ram usage:        4 bytes
 15371 ;; Hardware stack levels used:    1
 15372 ;; Hardware stack levels required when called:    7
 15373 ;; This function calls:
 15374 ;;		_ENC424J600_writeControlRegisterUnbanked
 15375 ;; This function is called by:
 15376 ;;		_ethernetController_sendPacket
 15377 ;; This function uses a non-reentrant model
 15378 ;;
 15379                           
 15380                           	psect	text55
 15381  004952                     __ptext55:
 15382                           	opt stack 0
 15383  004952                     _ENC424J600_setTXStartAddress:
 15384                           	opt stack 20
 15385                           
 15386                           ;ENC424J600.c: 642: uint8_t lowByte = addr & 0xff;
 15387                           
 15388                           ; BSR set to: 0
 15389                           ;incstack = 0
 15390  004952  C06E  F070         	movff	ENC424J600_setTXStartAddress@addr,ENC424J600_setTXStartAddress@lowByte
 15391                           
 15392                           ;ENC424J600.c: 643: uint8_t highByte = (addr & 0xff00) >> 8;
 15393  004956  0100               	movlb	0	; () banked
 15394  004958  516F               	movf	(ENC424J600_setTXStartAddress@addr+1)& (0+255),w,b
 15395  00495A  6F71               	movwf	ENC424J600_setTXStartAddress@highByte& (0+255),b
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;ENC424J600.c: 644: ENC424J600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 15399  00495C  0E70               	movlw	low ENC424J600_setTXStartAddress@lowByte
 15400  00495E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15401  004960  0E00               	movlw	high ENC424J600_setTXStartAddress@lowByte
 15402  004962  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15403  004964  0E00               	movlw	0
 15404  004966  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15405                           
 15406                           ;ENC424J600.c: 645: ENC424J600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 15407  00496A  0E71               	movlw	low ENC424J600_setTXStartAddress@highByte
 15408  00496C  0100               	movlb	0	; () banked
 15409  00496E  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15410  004970  0E00               	movlw	high ENC424J600_setTXStartAddress@highByte
 15411  004972  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15412  004974  0E01               	movlw	1
 15413  004976  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15414  00497A  0012               	return		;funcret
 15415  00497C                     __end_of_ENC424J600_setTXStartAddress:
 15416                           	opt stack 0
 15417                           tblptru	equ	0xFF8
 15418                           tblptrh	equ	0xFF7
 15419                           tblptrl	equ	0xFF6
 15420                           tablat	equ	0xFF5
 15421                           prodh	equ	0xFF4
 15422                           prodl	equ	0xFF3
 15423                           intcon	equ	0xFF2
 15424                           intcon3	equ	0xFF0
 15425                           postinc0	equ	0xFEE
 15426                           plusw0	equ	0xFEB
 15427                           fsr0h	equ	0xFEA
 15428                           fsr0l	equ	0xFE9
 15429                           wreg	equ	0xFE8
 15430                           indf1	equ	0xFE7
 15431                           postinc1	equ	0xFE6
 15432                           postdec1	equ	0xFE5
 15433                           plusw1	equ	0xFE3
 15434                           fsr1h	equ	0xFE2
 15435                           fsr1l	equ	0xFE1
 15436                           indf2	equ	0xFDF
 15437                           postinc2	equ	0xFDE
 15438                           postdec2	equ	0xFDD
 15439                           plusw2	equ	0xFDB
 15440                           fsr2h	equ	0xFDA
 15441                           fsr2l	equ	0xFD9
 15442                           status	equ	0xFD8
 15443                           
 15444 ;; *************** function _ENC424J600_setTXLength *****************
 15445 ;; Defined at:
 15446 ;;		line 616 in file "src/enc424j600/ENC424J600.c"
 15447 ;; Parameters:    Size  Location     Type
 15448 ;;  len             2   14[BANK0 ] unsigned int 
 15449 ;; Auto vars:     Size  Location     Type
 15450 ;;  highByte        1   17[BANK0 ] unsigned char 
 15451 ;;  lowByte         1   16[BANK0 ] unsigned char 
 15452 ;; Return value:  Size  Location     Type
 15453 ;;                  1    wreg      void 
 15454 ;; Registers used:
 15455 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15456 ;; Tracked objects:
 15457 ;;		On entry : 0/0
 15458 ;;		On exit  : 0/0
 15459 ;;		Unchanged: 0/0
 15460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15461 ;;      Params:         0       2       0       0       0       0       0       0       0
 15462 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15463 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15464 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15465 ;;Total ram usage:        4 bytes
 15466 ;; Hardware stack levels used:    1
 15467 ;; Hardware stack levels required when called:    7
 15468 ;; This function calls:
 15469 ;;		_ENC424J600_writeControlRegisterUnbanked
 15470 ;; This function is called by:
 15471 ;;		_ethernetController_sendPacket
 15472 ;; This function uses a non-reentrant model
 15473 ;;
 15474                           
 15475                           	psect	text56
 15476  00497C                     __ptext56:
 15477                           	opt stack 0
 15478  00497C                     _ENC424J600_setTXLength:
 15479                           	opt stack 20
 15480                           
 15481                           ;ENC424J600.c: 617: uint8_t lowByte = len & 0x00ff;
 15482                           
 15483                           ;incstack = 0
 15484  00497C  C06E  F070         	movff	ENC424J600_setTXLength@len,ENC424J600_setTXLength@lowByte
 15485                           
 15486                           ;ENC424J600.c: 618: uint8_t highByte = len >> 8;
 15487  004980  0100               	movlb	0	; () banked
 15488  004982  516F               	movf	(ENC424J600_setTXLength@len+1)& (0+255),w,b
 15489  004984  6F71               	movwf	ENC424J600_setTXLength@highByte& (0+255),b
 15490                           
 15491                           ; BSR set to: 0
 15492                           ;ENC424J600.c: 619: ENC424J600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 15493  004986  0E70               	movlw	low ENC424J600_setTXLength@lowByte
 15494  004988  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15495  00498A  0E00               	movlw	high ENC424J600_setTXLength@lowByte
 15496  00498C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15497  00498E  0E02               	movlw	2
 15498  004990  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15499                           
 15500                           ;ENC424J600.c: 620: ENC424J600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 15501  004994  0E71               	movlw	low ENC424J600_setTXLength@highByte
 15502  004996  0100               	movlb	0	; () banked
 15503  004998  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 15504  00499A  0E00               	movlw	high ENC424J600_setTXLength@highByte
 15505  00499C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 15506  00499E  0E03               	movlw	3
 15507  0049A0  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 15508  0049A4  0012               	return		;funcret
 15509  0049A6                     __end_of_ENC424J600_setTXLength:
 15510                           	opt stack 0
 15511                           tblptru	equ	0xFF8
 15512                           tblptrh	equ	0xFF7
 15513                           tblptrl	equ	0xFF6
 15514                           tablat	equ	0xFF5
 15515                           prodh	equ	0xFF4
 15516                           prodl	equ	0xFF3
 15517                           intcon	equ	0xFF2
 15518                           intcon3	equ	0xFF0
 15519                           postinc0	equ	0xFEE
 15520                           plusw0	equ	0xFEB
 15521                           fsr0h	equ	0xFEA
 15522                           fsr0l	equ	0xFE9
 15523                           wreg	equ	0xFE8
 15524                           indf1	equ	0xFE7
 15525                           postinc1	equ	0xFE6
 15526                           postdec1	equ	0xFE5
 15527                           plusw1	equ	0xFE3
 15528                           fsr1h	equ	0xFE2
 15529                           fsr1l	equ	0xFE1
 15530                           indf2	equ	0xFDF
 15531                           postinc2	equ	0xFDE
 15532                           postdec2	equ	0xFDD
 15533                           plusw2	equ	0xFDB
 15534                           fsr2h	equ	0xFDA
 15535                           fsr2l	equ	0xFD9
 15536                           status	equ	0xFD8
 15537                           
 15538 ;; *************** function _ethernetController_getSourceMACAddress *****************
 15539 ;; Defined at:
 15540 ;;		line 271 in file "src/enc424j600/ENC424J600.c"
 15541 ;; Parameters:    Size  Location     Type
 15542 ;;  field           9   15[BANK0 ] struct memoryField
 15543 ;; Auto vars:     Size  Location     Type
 15544 ;;  temp            1   31[BANK0 ] unsigned char 
 15545 ;;  i               1   32[BANK0 ] unsigned char 
 15546 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 15547 ;;  opcode          1   24[BANK0 ] unsigned char 
 15548 ;; Return value:  Size  Location     Type
 15549 ;;                  6   15[BANK0 ] struct macaddress
 15550 ;; Registers used:
 15551 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15552 ;; Tracked objects:
 15553 ;;		On entry : 0/0
 15554 ;;		On exit  : 0/0
 15555 ;;		Unchanged: 0/0
 15556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15557 ;;      Params:         0       9       0       0       0       0       0       0       0
 15558 ;;      Locals:         0       9       0       0       0       0       0       0       0
 15559 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15560 ;;      Totals:         0      18       0       0       0       0       0       0       0
 15561 ;;Total ram usage:       18 bytes
 15562 ;; Hardware stack levels used:    1
 15563 ;; Hardware stack levels required when called:    7
 15564 ;; This function calls:
 15565 ;;		_ENC424J600_readSPI
 15566 ;;		_ENC424J600_setERXDATAReadPointer
 15567 ;;		_ENC424J600_writeSPI
 15568 ;; This function is called by:
 15569 ;;		_ARP_send
 15570 ;; This function uses a non-reentrant model
 15571 ;;
 15572                           
 15573                           	psect	text57
 15574  0041F0                     __ptext57:
 15575                           	opt stack 0
 15576  0041F0                     _ethernetController_getSourceMACAddress:
 15577                           	opt stack 19
 15578                           
 15579                           ;ENC424J600.c: 272: macaddress_t sourceAddress;
 15580                           ;ENC424J600.c: 273: ENC424J600_setERXDATAReadPointer(field.start + 14);
 15581                           
 15582                           ;incstack = 0
 15583  0041F0  0E0E               	movlw	14
 15584  0041F2  0100               	movlb	0	; () banked
 15585  0041F4  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 15586  0041F6  6F6A               	movwf	ENC424J600_setERXDATAReadPointer@addr& (0+255),b
 15587  0041F8  0E00               	movlw	0
 15588  0041FA  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 15589  0041FC  6F6B               	movwf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),b
 15590  0041FE  ECD6  F023         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 15591                           
 15592                           ;ENC424J600.c: 274: uint8_t opcode = 0x2C;
 15593  004202  0E2C               	movlw	44
 15594  004204  0100               	movlb	0	; () banked
 15595  004206  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 15596                           
 15597                           ; BSR set to: 0
 15598                           ;ENC424J600.c: 275: PORTBbits.RB4=0;
 15599  004208  9881               	bcf	3969,4,c	;volatile
 15600                           
 15601                           ; BSR set to: 0
 15602                           ;ENC424J600.c: 276: ENC424J600_writeSPI(&opcode);
 15603  00420A  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 15604  00420C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 15605  00420E  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 15606  004210  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 15607  004212  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 15608                           
 15609                           ;ENC424J600.c: 277: for (uint8_t i = 0; i < 6; i++) {
 15610  004216  0E00               	movlw	0
 15611  004218  0100               	movlb	0	; () banked
 15612  00421A  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 15613  00421C                     l7521:
 15614                           
 15615                           ; BSR set to: 0
 15616  00421C  0E05               	movlw	5
 15617  00421E  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 15618  004220  D001               	goto	l153
 15619  004222  D013               	goto	u8740
 15620  004224                     l153:
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;ENC424J600.c: 278: uint8_t temp;
 15624                           ;ENC424J600.c: 279: ENC424J600_readSPI(&temp);
 15625                           
 15626                           ; BSR set to: 0
 15627  004224  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 15628  004226  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 15629  004228  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 15630  00422A  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 15631  00422C  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
 15632                           
 15633                           ;ENC424J600.c: 280: sourceAddress.address[i] = temp;
 15634  004230  0100               	movlb	0	; () banked
 15635  004232  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 15636  004234  0D01               	mullw	1
 15637  004236  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 15638  004238  24F3               	addwf	prodl,w,c
 15639  00423A  6ED9               	movwf	fsr2l,c
 15640  00423C  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 15641  00423E  20F4               	addwfc	prodh,w,c
 15642  004240  6EDA               	movwf	fsr2h,c
 15643  004242  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 15644                           
 15645                           ; BSR set to: 0
 15646  004246  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 15647  004248  D7E9               	goto	l7521
 15648  00424A                     u8740:
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;ENC424J600.c: 281: }
 15652                           ;ENC424J600.c: 282: PORTBbits.RB4=1;
 15653  00424A  8881               	bsf	3969,4,c	;volatile
 15654                           
 15655                           ; BSR set to: 0
 15656                           ;ENC424J600.c: 283: return sourceAddress;
 15657  00424C  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 15658  004250  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 15659  004254  0E05               	movlw	5
 15660  004256                     u8751:
 15661  004256  CFDB FFEB          	movff	plusw2,plusw0
 15662  00425A  06E8               	decf	wreg,f,c
 15663  00425C  E2FC               	bc	u8751
 15664  00425E  0012               	return	
 15665  004260                     __end_of_ethernetController_getSourceMACAddress:
 15666                           	opt stack 0
 15667                           tblptru	equ	0xFF8
 15668                           tblptrh	equ	0xFF7
 15669                           tblptrl	equ	0xFF6
 15670                           tablat	equ	0xFF5
 15671                           prodh	equ	0xFF4
 15672                           prodl	equ	0xFF3
 15673                           intcon	equ	0xFF2
 15674                           intcon3	equ	0xFF0
 15675                           postinc0	equ	0xFEE
 15676                           plusw0	equ	0xFEB
 15677                           fsr0h	equ	0xFEA
 15678                           fsr0l	equ	0xFE9
 15679                           wreg	equ	0xFE8
 15680                           indf1	equ	0xFE7
 15681                           postinc1	equ	0xFE6
 15682                           postdec1	equ	0xFE5
 15683                           plusw1	equ	0xFE3
 15684                           fsr1h	equ	0xFE2
 15685                           fsr1l	equ	0xFE1
 15686                           indf2	equ	0xFDF
 15687                           postinc2	equ	0xFDE
 15688                           postdec2	equ	0xFDD
 15689                           plusw2	equ	0xFDB
 15690                           fsr2h	equ	0xFDA
 15691                           fsr2l	equ	0xFD9
 15692                           status	equ	0xFD8
 15693                           
 15694 ;; *************** function _ARP_parseFromRXBuffer *****************
 15695 ;; Defined at:
 15696 ;;		line 62 in file "src/stack/protocols/arp.c"
 15697 ;; Parameters:    Size  Location     Type
 15698 ;;  frame           2   23[BANK0 ] PTR struct ethernetFrame
 15699 ;;		 -> stack.ethernet(15), stack(113), 
 15700 ;; Auto vars:     Size  Location     Type
 15701 ;;  i               1   61[BANK0 ] unsigned char 
 15702 ;;  i               1   60[BANK0 ] unsigned char 
 15703 ;;  i               1   59[BANK0 ] unsigned char 
 15704 ;;  i               1   58[BANK0 ] unsigned char 
 15705 ;;  arp            32   64[BANK0 ] struct ARP_message
 15706 ;;  offset          2   62[BANK0 ] const unsigned int 
 15707 ;; Return value:  Size  Location     Type
 15708 ;;                  32   23[BANK0 ] struct ARP_message
 15709 ;; Registers used:
 15710 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15711 ;; Tracked objects:
 15712 ;;		On entry : 0/0
 15713 ;;		On exit  : 0/0
 15714 ;;		Unchanged: 0/0
 15715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15716 ;;      Params:         0      32       0       0       0       0       0       0       0
 15717 ;;      Locals:         0      38       0       0       0       0       0       0       0
 15718 ;;      Temps:          0       3       0       0       0       0       0       0       0
 15719 ;;      Totals:         0      73       0       0       0       0       0       0       0
 15720 ;;Total ram usage:       73 bytes
 15721 ;; Hardware stack levels used:    1
 15722 ;; Hardware stack levels required when called:    9
 15723 ;; This function calls:
 15724 ;;		_ethernetController_streamFromRXBuffer
 15725 ;;		_ipv4_cmp
 15726 ;;		_ipv4_isAllZero
 15727 ;;		_mac_cmp
 15728 ;;		_mac_isAllZero
 15729 ;; This function is called by:
 15730 ;;		_ARP_handleNewPacket
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           	psect	text58
 15735  000A54                     __ptext58:
 15736                           	opt stack 0
 15737  000A54                     _ARP_parseFromRXBuffer:
 15738                           	opt stack 18
 15739                           
 15740                           ;arp.c: 63: ARP_message_t arp;
 15741                           ;arp.c: 64: uint16_t const offset = 22;
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;incstack = 0
 15745  000A54  0E00               	movlw	0
 15746  000A56  0100               	movlb	0	; () banked
 15747  000A58  6F9F               	movwf	(ARP_parseFromRXBuffer@offset+1)& (0+255),b
 15748  000A5A  0E16               	movlw	22
 15749  000A5C  6F9E               	movwf	ARP_parseFromRXBuffer@offset& (0+255),b
 15750                           
 15751                           ; BSR set to: 0
 15752                           ;arp.c: 66: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 15753  000A5E  EE20 F010          	lfsr	2,16
 15754  000A62  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15755  000A64  26D9               	addwf	fsr2l,f,c
 15756  000A66  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15757  000A68  22DA               	addwfc	fsr2h,f,c
 15758  000A6A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15759  000A6E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15760  000A72  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15761  000A74  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15762  000A76  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15763  000A78  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15764  000A7A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15765  000A7C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15766  000A7E  0E00               	movlw	0
 15767  000A80  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15768                           
 15769                           ;arp.c: 69: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 15770  000A84  0100               	movlb	0	; () banked
 15771  000A86  EE20 F010          	lfsr	2,16
 15772  000A8A  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15773  000A8C  26D9               	addwf	fsr2l,f,c
 15774  000A8E  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15775  000A90  22DA               	addwfc	fsr2h,f,c
 15776  000A92  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15777  000A96  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15778  000A9A  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15779  000A9C  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15780  000A9E  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15781  000AA0  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15782  000AA2  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15783  000AA4  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15784  000AA6  0E01               	movlw	1
 15785  000AA8  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15786  000AAC  0100               	movlb	0	; () banked
 15787  000AAE  6FA1               	movwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),b
 15788  000AB0  6BA0               	clrf	ARP_parseFromRXBuffer@arp& (0+255),b
 15789                           
 15790                           ; BSR set to: 0
 15791                           ;arp.c: 70: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 15792  000AB2  EE20 F010          	lfsr	2,16
 15793  000AB6  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15794  000AB8  26D9               	addwf	fsr2l,f,c
 15795  000ABA  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15796  000ABC  22DA               	addwfc	fsr2h,f,c
 15797  000ABE  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15798  000AC2  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15799  000AC6  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15800  000AC8  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15801  000ACA  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15802  000ACC  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15803  000ACE  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15804  000AD0  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15805  000AD2  0E01               	movlw	1
 15806  000AD4  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15807  000AD8  0100               	movlb	0	; () banked
 15808  000ADA  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15809  000ADC  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 15810  000ADE  13A0               	iorwf	ARP_parseFromRXBuffer@arp& (0+255),f,b
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;arp.c: 72: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 15814  000AE0  EE20 F010          	lfsr	2,16
 15815  000AE4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15816  000AE6  26D9               	addwf	fsr2l,f,c
 15817  000AE8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15818  000AEA  22DA               	addwfc	fsr2h,f,c
 15819  000AEC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15820  000AF0  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15821  000AF4  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15822  000AF6  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15823  000AF8  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15824  000AFA  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15825  000AFC  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15826  000AFE  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15827  000B00  0E01               	movlw	1
 15828  000B02  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15829  000B06  0100               	movlb	0	; () banked
 15830  000B08  6FA3               	movwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),b
 15831  000B0A  6BA2               	clrf	(ARP_parseFromRXBuffer@arp+2)& (0+255),b
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;arp.c: 73: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 15835  000B0C  EE20 F010          	lfsr	2,16
 15836  000B10  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15837  000B12  26D9               	addwf	fsr2l,f,c
 15838  000B14  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15839  000B16  22DA               	addwfc	fsr2h,f,c
 15840  000B18  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15841  000B1C  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15842  000B20  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15843  000B22  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15844  000B24  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15845  000B26  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15846  000B28  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15847  000B2A  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15848  000B2C  0E01               	movlw	1
 15849  000B2E  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15850  000B32  0100               	movlb	0	; () banked
 15851  000B34  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15852  000B36  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 15853  000B38  13A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),f,b
 15854                           
 15855                           ; BSR set to: 0
 15856                           ;arp.c: 75: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 15857  000B3A  EE20 F010          	lfsr	2,16
 15858  000B3E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15859  000B40  26D9               	addwf	fsr2l,f,c
 15860  000B42  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15861  000B44  22DA               	addwfc	fsr2h,f,c
 15862  000B46  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15863  000B4A  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15864  000B4E  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15865  000B50  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15866  000B52  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15867  000B54  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15868  000B56  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15869  000B58  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15870  000B5A  0E01               	movlw	1
 15871  000B5C  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15872  000B60  0100               	movlb	0	; () banked
 15873  000B62  6FA4               	movwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),b
 15874                           
 15875                           ; BSR set to: 0
 15876                           ;arp.c: 76: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 15877  000B64  EE20 F010          	lfsr	2,16
 15878  000B68  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15879  000B6A  26D9               	addwf	fsr2l,f,c
 15880  000B6C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15881  000B6E  22DA               	addwfc	fsr2h,f,c
 15882  000B70  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15883  000B74  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15884  000B78  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15885  000B7A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15886  000B7C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15887  000B7E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15888  000B80  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15889  000B82  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15890  000B84  0E01               	movlw	1
 15891  000B86  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15892  000B8A  0100               	movlb	0	; () banked
 15893  000B8C  6FA5               	movwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),b
 15894                           
 15895                           ; BSR set to: 0
 15896                           ;arp.c: 78: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 15897  000B8E  EE20 F010          	lfsr	2,16
 15898  000B92  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15899  000B94  26D9               	addwf	fsr2l,f,c
 15900  000B96  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15901  000B98  22DA               	addwfc	fsr2h,f,c
 15902  000B9A  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15903  000B9E  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15904  000BA2  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15905  000BA4  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15906  000BA6  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15907  000BA8  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15908  000BAA  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15909  000BAC  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15910  000BAE  0E01               	movlw	1
 15911  000BB0  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15912  000BB4  0100               	movlb	0	; () banked
 15913  000BB6  6FA7               	movwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),b
 15914  000BB8  6BA6               	clrf	(ARP_parseFromRXBuffer@arp+6)& (0+255),b
 15915                           
 15916                           ; BSR set to: 0
 15917                           ;arp.c: 79: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 15918  000BBA  EE20 F010          	lfsr	2,16
 15919  000BBE  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15920  000BC0  26D9               	addwf	fsr2l,f,c
 15921  000BC2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15922  000BC4  22DA               	addwfc	fsr2h,f,c
 15923  000BC6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15924  000BCA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15925  000BCE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15926  000BD0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15927  000BD2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15928  000BD4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15929  000BD6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15930  000BD8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15931  000BDA  0E01               	movlw	1
 15932  000BDC  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15933  000BE0  0100               	movlb	0	; () banked
 15934  000BE2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15935  000BE4  5199               	movf	(??_ARP_parseFromRXBuffer+2)& (0+255),w,b
 15936  000BE6  13A6               	iorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),f,b
 15937                           
 15938                           ; BSR set to: 0
 15939                           ;arp.c: 82: for (uint8_t i = 0; i < arp.hlen; i++)
 15940  000BE8  0E00               	movlw	0
 15941  000BEA  6F9A               	movwf	ARP_parseFromRXBuffer@i& (0+255),b
 15942  000BEC  D024               	goto	l894
 15943  000BEE                     
 15944                           ; BSR set to: 0
 15945                           ;arp.c: 83: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 15946                           
 15947                           ; BSR set to: 0
 15948  000BEE  EE20 F010          	lfsr	2,16
 15949  000BF2  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 15950  000BF4  26D9               	addwf	fsr2l,f,c
 15951  000BF6  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 15952  000BF8  22DA               	addwfc	fsr2h,f,c
 15953  000BFA  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 15954  000BFE  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 15955  000C02  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 15956  000C04  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 15957  000C06  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 15958  000C08  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 15959  000C0A  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 15960  000C0C  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 15961  000C0E  0E01               	movlw	1
 15962  000C10  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 15963  000C14  0100               	movlb	0	; () banked
 15964  000C16  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 15965  000C18  519A               	movf	ARP_parseFromRXBuffer@i& (0+255),w,b
 15966  000C1A  0D01               	mullw	1
 15967  000C1C  0E08               	movlw	8
 15968  000C1E  26F3               	addwf	prodl,f,c
 15969  000C20  0E00               	movlw	0
 15970  000C22  22F4               	addwfc	prodh,f,c
 15971  000C24  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 15972  000C26  24F3               	addwf	prodl,w,c
 15973  000C28  6ED9               	movwf	fsr2l,c
 15974  000C2A  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 15975  000C2C  20F4               	addwfc	prodh,w,c
 15976  000C2E  6EDA               	movwf	fsr2h,c
 15977  000C30  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 15978                           
 15979                           ; BSR set to: 0
 15980  000C34  2B9A               	incf	ARP_parseFromRXBuffer@i& (0+255),f,b
 15981  000C36                     l894:
 15982                           
 15983                           ; BSR set to: 0
 15984                           
 15985                           ; BSR set to: 0
 15986  000C36  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 15987  000C38  5D9A               	subwf	ARP_parseFromRXBuffer@i& (0+255),w,b
 15988  000C3A  A0D8               	btfss	status,0,c
 15989  000C3C  D7D8               	goto	l895
 15990                           
 15991                           ; BSR set to: 0
 15992                           ;arp.c: 84: for (uint8_t i = 0; i < arp.plen; i++)
 15993                           
 15994                           ; BSR set to: 0
 15995  000C3E  0E00               	movlw	0
 15996  000C40  6F9B               	movwf	ARP_parseFromRXBuffer@i_2603& (0+255),b
 15997  000C42  D024               	goto	l897
 15998  000C44                     
 15999                           ; BSR set to: 0
 16000                           ;arp.c: 85: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16001                           
 16002                           ; BSR set to: 0
 16003  000C44  EE20 F010          	lfsr	2,16
 16004  000C48  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16005  000C4A  26D9               	addwf	fsr2l,f,c
 16006  000C4C  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16007  000C4E  22DA               	addwfc	fsr2h,f,c
 16008  000C50  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16009  000C54  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16010  000C58  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16011  000C5A  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16012  000C5C  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16013  000C5E  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16014  000C60  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16015  000C62  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16016  000C64  0E01               	movlw	1
 16017  000C66  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 16018  000C6A  0100               	movlb	0	; () banked
 16019  000C6C  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16020  000C6E  519B               	movf	ARP_parseFromRXBuffer@i_2603& (0+255),w,b
 16021  000C70  0D01               	mullw	1
 16022  000C72  0E0E               	movlw	14
 16023  000C74  26F3               	addwf	prodl,f,c
 16024  000C76  0E00               	movlw	0
 16025  000C78  22F4               	addwfc	prodh,f,c
 16026  000C7A  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16027  000C7C  24F3               	addwf	prodl,w,c
 16028  000C7E  6ED9               	movwf	fsr2l,c
 16029  000C80  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16030  000C82  20F4               	addwfc	prodh,w,c
 16031  000C84  6EDA               	movwf	fsr2h,c
 16032  000C86  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16033                           
 16034                           ; BSR set to: 0
 16035  000C8A  2B9B               	incf	ARP_parseFromRXBuffer@i_2603& (0+255),f,b
 16036  000C8C                     l897:
 16037                           
 16038                           ; BSR set to: 0
 16039                           
 16040                           ; BSR set to: 0
 16041  000C8C  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16042  000C8E  5D9B               	subwf	ARP_parseFromRXBuffer@i_2603& (0+255),w,b
 16043  000C90  A0D8               	btfss	status,0,c
 16044  000C92  D7D8               	goto	l898
 16045                           
 16046                           ; BSR set to: 0
 16047                           ;arp.c: 87: for (uint8_t i = 0; i < arp.hlen; i++)
 16048                           
 16049                           ; BSR set to: 0
 16050  000C94  0E00               	movlw	0
 16051  000C96  6F9C               	movwf	ARP_parseFromRXBuffer@i_2604& (0+255),b
 16052  000C98  D024               	goto	l900
 16053  000C9A                     
 16054                           ; BSR set to: 0
 16055                           ;arp.c: 88: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 16056                           
 16057                           ; BSR set to: 0
 16058  000C9A  EE20 F010          	lfsr	2,16
 16059  000C9E  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16060  000CA0  26D9               	addwf	fsr2l,f,c
 16061  000CA2  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16062  000CA4  22DA               	addwfc	fsr2h,f,c
 16063  000CA6  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16064  000CAA  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16065  000CAE  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16066  000CB0  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16067  000CB2  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16068  000CB4  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16069  000CB6  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16070  000CB8  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16071  000CBA  0E01               	movlw	1
 16072  000CBC  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 16073  000CC0  0100               	movlb	0	; () banked
 16074  000CC2  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16075  000CC4  519C               	movf	ARP_parseFromRXBuffer@i_2604& (0+255),w,b
 16076  000CC6  0D01               	mullw	1
 16077  000CC8  0E12               	movlw	18
 16078  000CCA  26F3               	addwf	prodl,f,c
 16079  000CCC  0E00               	movlw	0
 16080  000CCE  22F4               	addwfc	prodh,f,c
 16081  000CD0  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16082  000CD2  24F3               	addwf	prodl,w,c
 16083  000CD4  6ED9               	movwf	fsr2l,c
 16084  000CD6  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16085  000CD8  20F4               	addwfc	prodh,w,c
 16086  000CDA  6EDA               	movwf	fsr2h,c
 16087  000CDC  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16088                           
 16089                           ; BSR set to: 0
 16090  000CE0  2B9C               	incf	ARP_parseFromRXBuffer@i_2604& (0+255),f,b
 16091  000CE2                     l900:
 16092                           
 16093                           ; BSR set to: 0
 16094                           
 16095                           ; BSR set to: 0
 16096  000CE2  51A4               	movf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16097  000CE4  5D9C               	subwf	ARP_parseFromRXBuffer@i_2604& (0+255),w,b
 16098  000CE6  A0D8               	btfss	status,0,c
 16099  000CE8  D7D8               	goto	l901
 16100                           
 16101                           ; BSR set to: 0
 16102                           ;arp.c: 89: for (uint8_t i = 0; i < arp.plen; i++)
 16103                           
 16104                           ; BSR set to: 0
 16105  000CEA  0E00               	movlw	0
 16106  000CEC  6F9D               	movwf	ARP_parseFromRXBuffer@i_2605& (0+255),b
 16107  000CEE  D024               	goto	l903
 16108  000CF0                     
 16109                           ; BSR set to: 0
 16110                           ;arp.c: 90: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 16111                           
 16112                           ; BSR set to: 0
 16113  000CF0  EE20 F010          	lfsr	2,16
 16114  000CF4  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16115  000CF6  26D9               	addwf	fsr2l,f,c
 16116  000CF8  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16117  000CFA  22DA               	addwfc	fsr2h,f,c
 16118  000CFC  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16119  000D00  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16120  000D04  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16121  000D06  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16122  000D08  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16123  000D0A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16124  000D0C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16125  000D0E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16126  000D10  0E01               	movlw	1
 16127  000D12  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 16128  000D16  0100               	movlb	0	; () banked
 16129  000D18  6F99               	movwf	(??_ARP_parseFromRXBuffer+2)& (0+255),b
 16130  000D1A  519D               	movf	ARP_parseFromRXBuffer@i_2605& (0+255),w,b
 16131  000D1C  0D01               	mullw	1
 16132  000D1E  0E18               	movlw	24
 16133  000D20  26F3               	addwf	prodl,f,c
 16134  000D22  0E00               	movlw	0
 16135  000D24  22F4               	addwfc	prodh,f,c
 16136  000D26  0EA0               	movlw	low ARP_parseFromRXBuffer@arp
 16137  000D28  24F3               	addwf	prodl,w,c
 16138  000D2A  6ED9               	movwf	fsr2l,c
 16139  000D2C  0E00               	movlw	high ARP_parseFromRXBuffer@arp
 16140  000D2E  20F4               	addwfc	prodh,w,c
 16141  000D30  6EDA               	movwf	fsr2h,c
 16142  000D32  C099  FFDF         	movff	??_ARP_parseFromRXBuffer+2,indf2
 16143                           
 16144                           ; BSR set to: 0
 16145  000D36  2B9D               	incf	ARP_parseFromRXBuffer@i_2605& (0+255),f,b
 16146  000D38                     l903:
 16147                           
 16148                           ; BSR set to: 0
 16149                           
 16150                           ; BSR set to: 0
 16151  000D38  51A5               	movf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16152  000D3A  5D9D               	subwf	ARP_parseFromRXBuffer@i_2605& (0+255),w,b
 16153  000D3C  A0D8               	btfss	status,0,c
 16154  000D3E  D7D8               	goto	l904
 16155                           
 16156                           ; BSR set to: 0
 16157                           ;arp.c: 92: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 16158                           
 16159                           ; BSR set to: 0
 16160  000D40  EE20 F010          	lfsr	2,16
 16161  000D44  5177               	movf	ARP_parseFromRXBuffer@frame& (0+255),w,b
 16162  000D46  26D9               	addwf	fsr2l,f,c
 16163  000D48  5178               	movf	(ARP_parseFromRXBuffer@frame+1)& (0+255),w,b
 16164  000D4A  22DA               	addwfc	fsr2h,f,c
 16165  000D4C  CFDE F097          	movff	postinc2,??_ARP_parseFromRXBuffer
 16166  000D50  CFDD F098          	movff	postdec2,??_ARP_parseFromRXBuffer+1
 16167  000D54  519E               	movf	ARP_parseFromRXBuffer@offset& (0+255),w,b
 16168  000D56  2597               	addwf	??_ARP_parseFromRXBuffer& (0+255),w,b
 16169  000D58  6F72               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 16170  000D5A  519F               	movf	(ARP_parseFromRXBuffer@offset+1)& (0+255),w,b
 16171  000D5C  2198               	addwfc	(??_ARP_parseFromRXBuffer+1)& (0+255),w,b
 16172  000D5E  6F73               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 16173  000D60  0E02               	movlw	2
 16174  000D62  EC25  F01D         	call	_ethernetController_streamFromRXBuffer
 16175                           
 16176                           ;arp.c: 94: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 16177  000D66  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16178  000D68  0100               	movlb	0	; () banked
 16179  000D6A  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 16180  000D6C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16181  000D6E  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 16182  000D70  EC7A  F024         	call	_ipv4_isAllZero	;wreg free
 16183  000D74  0100               	movlb	0	; () banked
 16184  000D76  A0D8               	btfss	status,0,c
 16185  000D78  D002               	goto	l906
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;arp.c: 95: arp.fIsProbe = 1;
 16189  000D7A  83BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16190  000D7C  D03C               	goto	l910
 16191  000D7E                     l906:
 16192                           
 16193                           ; BSR set to: 0
 16194                           ;arp.c: 98: arp.fIsProbe = 0;
 16195  000D7E  93BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),1,b
 16196                           
 16197                           ; BSR set to: 0
 16198                           ;arp.c: 100: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16199                           ;arp.c: 101: mac_isAllZero(&arp.targetMACAddress) &&
 16200                           ;arp.c: 102: arp.operation == ARP_REQUEST) {
 16201  000D80  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16202  000D82  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16203  000D84  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16204  000D86  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16205  000D88  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16206  000D8A  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16207  000D8C  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16208  000D8E  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16209  000D90  EC79  F023         	call	_ipv4_cmp	;wreg free
 16210  000D94  0100               	movlb	0	; () banked
 16211  000D96  A0D8               	btfss	status,0,c
 16212  000D98  D00D               	goto	l908
 16213                           
 16214                           ; BSR set to: 0
 16215  000D9A  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16216  000D9C  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 16217  000D9E  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16218  000DA0  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 16219  000DA2  EC62  F024         	call	_mac_isAllZero	;wreg free
 16220  000DA6  0100               	movlb	0	; () banked
 16221  000DA8  A0D8               	btfss	status,0,c
 16222  000DAA  D004               	goto	l908
 16223                           
 16224                           ; BSR set to: 0
 16225  000DAC  05A6               	decf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16226  000DAE  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16227  000DB0  B4D8               	btfsc	status,2,c
 16228  000DB2  D01F               	goto	u10070
 16229  000DB4                     l908:
 16230                           
 16231                           ; BSR set to: 0
 16232                           ;arp.c: 106: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 16233                           ;arp.c: 107: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 16234                           ;arp.c: 108: arp.operation == ARP_REPLY) {
 16235                           
 16236                           ; BSR set to: 0
 16237  000DB4  0EAE               	movlw	low (ARP_parseFromRXBuffer@arp+14)
 16238  000DB6  6F60               	movwf	ipv4_cmp@a& (0+255),b
 16239  000DB8  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+14)
 16240  000DBA  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 16241  000DBC  0EB8               	movlw	low (ARP_parseFromRXBuffer@arp+24)
 16242  000DBE  6F62               	movwf	ipv4_cmp@b& (0+255),b
 16243  000DC0  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+24)
 16244  000DC2  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 16245  000DC4  EC79  F023         	call	_ipv4_cmp	;wreg free
 16246  000DC8  0100               	movlb	0	; () banked
 16247  000DCA  A0D8               	btfss	status,0,c
 16248  000DCC  D014               	goto	l910
 16249                           
 16250                           ; BSR set to: 0
 16251  000DCE  0EA8               	movlw	low (ARP_parseFromRXBuffer@arp+8)
 16252  000DD0  6F60               	movwf	mac_cmp@a& (0+255),b
 16253  000DD2  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+8)
 16254  000DD4  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 16255  000DD6  0EB2               	movlw	low (ARP_parseFromRXBuffer@arp+18)
 16256  000DD8  6F62               	movwf	mac_cmp@b& (0+255),b
 16257  000DDA  0E00               	movlw	high (ARP_parseFromRXBuffer@arp+18)
 16258  000DDC  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 16259  000DDE  EC58  F023         	call	_mac_cmp	;wreg free
 16260  000DE2  0100               	movlb	0	; () banked
 16261  000DE4  A0D8               	btfss	status,0,c
 16262  000DE6  D007               	goto	l910
 16263                           
 16264                           ; BSR set to: 0
 16265  000DE8  0E02               	movlw	2
 16266  000DEA  19A6               	xorwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16267  000DEC  11A7               	iorwf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16268  000DEE  A4D8               	btfss	status,2,c
 16269  000DF0  D002               	goto	l910
 16270  000DF2                     u10070:
 16271                           
 16272                           ; BSR set to: 0
 16273                           ;arp.c: 109: arp.fIsGratuitous = 1;
 16274  000DF2  81BC               	bsf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16275                           
 16276                           ;arp.c: 110: } else {
 16277  000DF4  D001               	goto	l911
 16278  000DF6                     l910:
 16279                           
 16280                           ; BSR set to: 0
 16281                           ;arp.c: 111: arp.fIsGratuitous = 0;
 16282  000DF6  91BC               	bcf	(ARP_parseFromRXBuffer@arp+28)& (0+255),0,b
 16283  000DF8                     l911:
 16284                           
 16285                           ; BSR set to: 0
 16286                           ;arp.c: 112: }
 16287                           ;arp.c: 113: }
 16288                           ;arp.c: 114: }
 16289                           ;arp.c: 117: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 16290                           ;arp.c: 118: (arp.ptype != ARP_PTYPE_IPv4) ||
 16291                           ;arp.c: 119: (arp.operation > 2) ||
 16292                           ;arp.c: 120: (arp.hlen != 6) ||
 16293                           ;arp.c: 121: (arp.plen != 4)) {
 16294                           
 16295                           ; BSR set to: 0
 16296                           
 16297                           ; BSR set to: 0
 16298                           
 16299                           ; BSR set to: 0
 16300  000DF8  05A0               	decf	ARP_parseFromRXBuffer@arp& (0+255),w,b
 16301  000DFA  11A1               	iorwf	(ARP_parseFromRXBuffer@arp+1)& (0+255),w,b
 16302  000DFC  A4D8               	btfss	status,2,c
 16303  000DFE  D013               	goto	u10120
 16304                           
 16305                           ; BSR set to: 0
 16306  000E00  0E08               	movlw	8
 16307  000E02  19A3               	xorwf	(ARP_parseFromRXBuffer@arp+3)& (0+255),w,b
 16308  000E04  11A2               	iorwf	(ARP_parseFromRXBuffer@arp+2)& (0+255),w,b
 16309  000E06  A4D8               	btfss	status,2,c
 16310  000E08  D00E               	goto	u10120
 16311                           
 16312                           ; BSR set to: 0
 16313  000E0A  51A7               	movf	(ARP_parseFromRXBuffer@arp+7)& (0+255),w,b
 16314  000E0C  E10C               	bnz	l8183
 16315  000E0E  0E03               	movlw	3
 16316  000E10  5DA6               	subwf	(ARP_parseFromRXBuffer@arp+6)& (0+255),w,b
 16317  000E12  B0D8               	btfsc	status,0,c
 16318  000E14  D008               	goto	u10120
 16319                           
 16320                           ; BSR set to: 0
 16321  000E16  0E06               	movlw	6
 16322  000E18  19A4               	xorwf	(ARP_parseFromRXBuffer@arp+4)& (0+255),w,b
 16323  000E1A  A4D8               	btfss	status,2,c
 16324  000E1C  D004               	goto	u10120
 16325                           
 16326                           ; BSR set to: 0
 16327  000E1E  0E04               	movlw	4
 16328  000E20  19A5               	xorwf	(ARP_parseFromRXBuffer@arp+5)& (0+255),w,b
 16329  000E22  B4D8               	btfsc	status,2,c
 16330  000E24  D004               	goto	l912
 16331  000E26                     u10120:
 16332  000E26                     l8183:
 16333                           
 16334                           ; BSR set to: 0
 16335                           ;arp.c: 122: arp.err.code = ERROR_ARP_INVALID_VALUES;
 16336  000E26  0E01               	movlw	1
 16337  000E28  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16338  000E2A  0E93               	movlw	147
 16339  000E2C  D003               	goto	L2
 16340  000E2E                     l912:
 16341                           
 16342                           ; BSR set to: 0
 16343                           ;arp.c: 125: arp.err.code = (uint16_t)0;
 16344                           
 16345                           ; BSR set to: 0
 16346  000E2E  0E00               	movlw	0
 16347  000E30  6FBF               	movwf	(ARP_parseFromRXBuffer@arp+31)& (0+255),b
 16348  000E32  0E00               	movlw	0
 16349  000E34                     L2:
 16350  000E34  6FBE               	movwf	(ARP_parseFromRXBuffer@arp+30)& (0+255),b
 16351                           
 16352                           ;arp.c: 126: arp.err.module = ERROR_MODULE_ARP;
 16353  000E36  0E03               	movlw	3
 16354  000E38  6FBD               	movwf	(ARP_parseFromRXBuffer@arp+29)& (0+255),b
 16355                           
 16356                           ; BSR set to: 0
 16357                           ;arp.c: 127: }
 16358                           ;arp.c: 129: return arp;
 16359                           
 16360                           ; BSR set to: 0
 16361  000E3A  EE20  F0A0         	lfsr	2,ARP_parseFromRXBuffer@arp
 16362  000E3E  EE00  F077         	lfsr	0,?_ARP_parseFromRXBuffer
 16363  000E42  0E1F               	movlw	31
 16364  000E44                     u10131:
 16365  000E44  CFDB FFEB          	movff	plusw2,plusw0
 16366  000E48  06E8               	decf	wreg,f,c
 16367  000E4A  E2FC               	bc	u10131
 16368  000E4C  0012               	return	
 16369  000E4E                     __end_of_ARP_parseFromRXBuffer:
 16370                           	opt stack 0
 16371                           tblptru	equ	0xFF8
 16372                           tblptrh	equ	0xFF7
 16373                           tblptrl	equ	0xFF6
 16374                           tablat	equ	0xFF5
 16375                           prodh	equ	0xFF4
 16376                           prodl	equ	0xFF3
 16377                           intcon	equ	0xFF2
 16378                           intcon3	equ	0xFF0
 16379                           postinc0	equ	0xFEE
 16380                           plusw0	equ	0xFEB
 16381                           fsr0h	equ	0xFEA
 16382                           fsr0l	equ	0xFE9
 16383                           wreg	equ	0xFE8
 16384                           indf1	equ	0xFE7
 16385                           postinc1	equ	0xFE6
 16386                           postdec1	equ	0xFE5
 16387                           plusw1	equ	0xFE3
 16388                           fsr1h	equ	0xFE2
 16389                           fsr1l	equ	0xFE1
 16390                           indf2	equ	0xFDF
 16391                           postinc2	equ	0xFDE
 16392                           postdec2	equ	0xFDD
 16393                           plusw2	equ	0xFDB
 16394                           fsr2h	equ	0xFDA
 16395                           fsr2l	equ	0xFD9
 16396                           status	equ	0xFD8
 16397                           
 16398 ;; *************** function _mac_isAllZero *****************
 16399 ;; Defined at:
 16400 ;;		line 31 in file "src/eth/mac.c"
 16401 ;; Parameters:    Size  Location     Type
 16402 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 16403 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16404 ;; Auto vars:     Size  Location     Type
 16405 ;;  i               1    2[BANK0 ] unsigned char 
 16406 ;; Return value:  Size  Location     Type
 16407 ;;		None               void
 16408 ;; Registers used:
 16409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16410 ;; Tracked objects:
 16411 ;;		On entry : 0/0
 16412 ;;		On exit  : 0/0
 16413 ;;		Unchanged: 0/0
 16414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16415 ;;      Params:         0       2       0       0       0       0       0       0       0
 16416 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16417 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16418 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16419 ;;Total ram usage:        3 bytes
 16420 ;; Hardware stack levels used:    1
 16421 ;; Hardware stack levels required when called:    4
 16422 ;; This function calls:
 16423 ;;		Nothing
 16424 ;; This function is called by:
 16425 ;;		_ARP_parseFromRXBuffer
 16426 ;; This function uses a non-reentrant model
 16427 ;;
 16428                           
 16429                           	psect	text59
 16430  0048C4                     __ptext59:
 16431                           	opt stack 0
 16432  0048C4                     _mac_isAllZero:
 16433                           	opt stack 22
 16434                           
 16435                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 16436                           
 16437                           ; BSR set to: 0
 16438                           ;incstack = 0
 16439  0048C4  0E00               	movlw	0
 16440  0048C6  0100               	movlb	0	; () banked
 16441  0048C8  6F62               	movwf	mac_isAllZero@i& (0+255),b
 16442  0048CA                     l7735:
 16443                           
 16444                           ; BSR set to: 0
 16445  0048CA  0E05               	movlw	5
 16446  0048CC  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 16447  0048CE  D001               	goto	l382
 16448  0048D0  D00F               	goto	u9060
 16449  0048D2                     l382:
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;mac.c: 33: if (mac->address[i] != 0x00)
 16453                           
 16454                           ; BSR set to: 0
 16455  0048D2  5162               	movf	mac_isAllZero@i& (0+255),w,b
 16456  0048D4  0D01               	mullw	1
 16457  0048D6  50F3               	movf	prodl,w,c
 16458  0048D8  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 16459  0048DA  6ED9               	movwf	fsr2l,c
 16460  0048DC  50F4               	movf	prodh,w,c
 16461  0048DE  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 16462  0048E0  6EDA               	movwf	fsr2h,c
 16463  0048E2  50DF               	movf	indf2,w,c
 16464  0048E4  B4D8               	btfsc	status,2,c
 16465  0048E6  D002               	goto	l384
 16466                           
 16467                           ; BSR set to: 0
 16468                           ;mac.c: 34: return 0;
 16469  0048E8  90D8               	bcf	status,0,c
 16470                           
 16471                           ; BSR set to: 0
 16472  0048EA  0012               	return	
 16473  0048EC                     l384:
 16474                           
 16475                           ; BSR set to: 0
 16476                           
 16477                           ; BSR set to: 0
 16478  0048EC  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 16479  0048EE  D7ED               	goto	l7735
 16480  0048F0                     u9060:
 16481                           
 16482                           ; BSR set to: 0
 16483                           ;mac.c: 35: }
 16484                           ;mac.c: 36: return 1;
 16485                           
 16486                           ; BSR set to: 0
 16487  0048F0  80D8               	bsf	status,0,c
 16488  0048F2  0012               	return	
 16489  0048F4                     __end_of_mac_isAllZero:
 16490                           	opt stack 0
 16491                           tblptru	equ	0xFF8
 16492                           tblptrh	equ	0xFF7
 16493                           tblptrl	equ	0xFF6
 16494                           tablat	equ	0xFF5
 16495                           prodh	equ	0xFF4
 16496                           prodl	equ	0xFF3
 16497                           intcon	equ	0xFF2
 16498                           intcon3	equ	0xFF0
 16499                           postinc0	equ	0xFEE
 16500                           plusw0	equ	0xFEB
 16501                           fsr0h	equ	0xFEA
 16502                           fsr0l	equ	0xFE9
 16503                           wreg	equ	0xFE8
 16504                           indf1	equ	0xFE7
 16505                           postinc1	equ	0xFE6
 16506                           postdec1	equ	0xFE5
 16507                           plusw1	equ	0xFE3
 16508                           fsr1h	equ	0xFE2
 16509                           fsr1l	equ	0xFE1
 16510                           indf2	equ	0xFDF
 16511                           postinc2	equ	0xFDE
 16512                           postdec2	equ	0xFDD
 16513                           plusw2	equ	0xFDB
 16514                           fsr2h	equ	0xFDA
 16515                           fsr2l	equ	0xFD9
 16516                           status	equ	0xFD8
 16517                           
 16518 ;; *************** function _mac_cmp *****************
 16519 ;; Defined at:
 16520 ;;		line 39 in file "src/eth/mac.c"
 16521 ;; Parameters:    Size  Location     Type
 16522 ;;  a               2    0[BANK0 ] PTR struct macaddress
 16523 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16524 ;;  b               2    2[BANK0 ] PTR struct macaddress
 16525 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16526 ;; Auto vars:     Size  Location     Type
 16527 ;;  i               1    6[BANK0 ] unsigned char 
 16528 ;; Return value:  Size  Location     Type
 16529 ;;		None               void
 16530 ;; Registers used:
 16531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16532 ;; Tracked objects:
 16533 ;;		On entry : 0/0
 16534 ;;		On exit  : 0/0
 16535 ;;		Unchanged: 0/0
 16536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16537 ;;      Params:         0       4       0       0       0       0       0       0       0
 16538 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16539 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16540 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16541 ;;Total ram usage:        7 bytes
 16542 ;; Hardware stack levels used:    1
 16543 ;; Hardware stack levels required when called:    4
 16544 ;; This function calls:
 16545 ;;		Nothing
 16546 ;; This function is called by:
 16547 ;;		_ARP_parseFromRXBuffer
 16548 ;; This function uses a non-reentrant model
 16549 ;;
 16550                           
 16551                           	psect	text60
 16552  0046B0                     __ptext60:
 16553                           	opt stack 0
 16554  0046B0                     _mac_cmp:
 16555                           	opt stack 22
 16556                           
 16557                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 16558                           
 16559                           ; BSR set to: 0
 16560                           ;incstack = 0
 16561  0046B0  0E00               	movlw	0
 16562  0046B2  0100               	movlb	0	; () banked
 16563  0046B4  6F66               	movwf	mac_cmp@i& (0+255),b
 16564  0046B6                     l7755:
 16565                           
 16566                           ; BSR set to: 0
 16567  0046B6  0E05               	movlw	5
 16568  0046B8  6566               	cpfsgt	mac_cmp@i& (0+255),b
 16569  0046BA  D001               	goto	l388
 16570  0046BC  D018               	goto	u9090
 16571  0046BE                     l388:
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;mac.c: 41: if (a->address[i] != b->address[i])
 16575                           
 16576                           ; BSR set to: 0
 16577  0046BE  5166               	movf	mac_cmp@i& (0+255),w,b
 16578  0046C0  0D01               	mullw	1
 16579  0046C2  50F3               	movf	prodl,w,c
 16580  0046C4  2562               	addwf	mac_cmp@b& (0+255),w,b
 16581  0046C6  6ED9               	movwf	fsr2l,c
 16582  0046C8  50F4               	movf	prodh,w,c
 16583  0046CA  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 16584  0046CC  6EDA               	movwf	fsr2h,c
 16585  0046CE  5166               	movf	mac_cmp@i& (0+255),w,b
 16586  0046D0  0D01               	mullw	1
 16587  0046D2  50F3               	movf	prodl,w,c
 16588  0046D4  2560               	addwf	mac_cmp@a& (0+255),w,b
 16589  0046D6  6EE1               	movwf	fsr1l,c
 16590  0046D8  50F4               	movf	prodh,w,c
 16591  0046DA  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 16592  0046DC  6EE2               	movwf	fsr1h,c
 16593  0046DE  50DE               	movf	postinc2,w,c
 16594  0046E0  18E6               	xorwf	postinc1,w,c
 16595  0046E2  B4D8               	btfsc	status,2,c
 16596  0046E4  D002               	goto	l390
 16597                           
 16598                           ; BSR set to: 0
 16599                           ;mac.c: 42: return 0;
 16600  0046E6  90D8               	bcf	status,0,c
 16601                           
 16602                           ; BSR set to: 0
 16603  0046E8  0012               	return	
 16604  0046EA                     l390:
 16605                           
 16606                           ; BSR set to: 0
 16607                           
 16608                           ; BSR set to: 0
 16609  0046EA  2B66               	incf	mac_cmp@i& (0+255),f,b
 16610  0046EC  D7E4               	goto	l7755
 16611  0046EE                     u9090:
 16612                           
 16613                           ; BSR set to: 0
 16614                           ;mac.c: 43: }
 16615                           ;mac.c: 44: return 1;
 16616                           
 16617                           ; BSR set to: 0
 16618  0046EE  80D8               	bsf	status,0,c
 16619  0046F0  0012               	return	
 16620  0046F2                     __end_of_mac_cmp:
 16621                           	opt stack 0
 16622                           tblptru	equ	0xFF8
 16623                           tblptrh	equ	0xFF7
 16624                           tblptrl	equ	0xFF6
 16625                           tablat	equ	0xFF5
 16626                           prodh	equ	0xFF4
 16627                           prodl	equ	0xFF3
 16628                           intcon	equ	0xFF2
 16629                           intcon3	equ	0xFF0
 16630                           postinc0	equ	0xFEE
 16631                           plusw0	equ	0xFEB
 16632                           fsr0h	equ	0xFEA
 16633                           fsr0l	equ	0xFE9
 16634                           wreg	equ	0xFE8
 16635                           indf1	equ	0xFE7
 16636                           postinc1	equ	0xFE6
 16637                           postdec1	equ	0xFE5
 16638                           plusw1	equ	0xFE3
 16639                           fsr1h	equ	0xFE2
 16640                           fsr1l	equ	0xFE1
 16641                           indf2	equ	0xFDF
 16642                           postinc2	equ	0xFDE
 16643                           postdec2	equ	0xFDD
 16644                           plusw2	equ	0xFDB
 16645                           fsr2h	equ	0xFDA
 16646                           fsr2l	equ	0xFD9
 16647                           status	equ	0xFD8
 16648                           
 16649 ;; *************** function _ipv4_isAllZero *****************
 16650 ;; Defined at:
 16651 ;;		line 243 in file "src/stack/protocols/ipv4.c"
 16652 ;; Parameters:    Size  Location     Type
 16653 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 16654 ;;		 -> ARP_parseFromRXBuffer@arp(32), 
 16655 ;; Auto vars:     Size  Location     Type
 16656 ;;  i               1    2[BANK0 ] unsigned char 
 16657 ;; Return value:  Size  Location     Type
 16658 ;;		None               void
 16659 ;; Registers used:
 16660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16661 ;; Tracked objects:
 16662 ;;		On entry : 0/0
 16663 ;;		On exit  : 0/0
 16664 ;;		Unchanged: 0/0
 16665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16666 ;;      Params:         0       2       0       0       0       0       0       0       0
 16667 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16668 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16669 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16670 ;;Total ram usage:        3 bytes
 16671 ;; Hardware stack levels used:    1
 16672 ;; Hardware stack levels required when called:    4
 16673 ;; This function calls:
 16674 ;;		Nothing
 16675 ;; This function is called by:
 16676 ;;		_ARP_parseFromRXBuffer
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           	psect	text61
 16681  0048F4                     __ptext61:
 16682                           	opt stack 0
 16683  0048F4                     _ipv4_isAllZero:
 16684                           	opt stack 22
 16685                           
 16686                           ;ipv4.c: 244: for (uint8_t i = 0; i < 4; i++) {
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;incstack = 0
 16690  0048F4  0E00               	movlw	0
 16691  0048F6  0100               	movlb	0	; () banked
 16692  0048F8  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 16693  0048FA                     l7865:
 16694                           
 16695                           ; BSR set to: 0
 16696  0048FA  0E03               	movlw	3
 16697  0048FC  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 16698  0048FE  D001               	goto	l1061
 16699  004900  D00F               	goto	u9240
 16700  004902                     l1061:
 16701                           
 16702                           ; BSR set to: 0
 16703                           ;ipv4.c: 245: if (ip->address[i] != 0x00)
 16704                           
 16705                           ; BSR set to: 0
 16706  004902  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 16707  004904  0D01               	mullw	1
 16708  004906  50F3               	movf	prodl,w,c
 16709  004908  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 16710  00490A  6ED9               	movwf	fsr2l,c
 16711  00490C  50F4               	movf	prodh,w,c
 16712  00490E  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 16713  004910  6EDA               	movwf	fsr2h,c
 16714  004912  50DF               	movf	indf2,w,c
 16715  004914  B4D8               	btfsc	status,2,c
 16716  004916  D002               	goto	l1063
 16717                           
 16718                           ; BSR set to: 0
 16719                           ;ipv4.c: 246: return 0;
 16720  004918  90D8               	bcf	status,0,c
 16721                           
 16722                           ; BSR set to: 0
 16723  00491A  0012               	return	
 16724  00491C                     l1063:
 16725                           
 16726                           ; BSR set to: 0
 16727                           
 16728                           ; BSR set to: 0
 16729  00491C  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 16730  00491E  D7ED               	goto	l7865
 16731  004920                     u9240:
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;ipv4.c: 247: }
 16735                           ;ipv4.c: 248: return 1;
 16736                           
 16737                           ; BSR set to: 0
 16738  004920  80D8               	bsf	status,0,c
 16739  004922  0012               	return	
 16740  004924                     __end_of_ipv4_isAllZero:
 16741                           	opt stack 0
 16742                           tblptru	equ	0xFF8
 16743                           tblptrh	equ	0xFF7
 16744                           tblptrl	equ	0xFF6
 16745                           tablat	equ	0xFF5
 16746                           prodh	equ	0xFF4
 16747                           prodl	equ	0xFF3
 16748                           intcon	equ	0xFF2
 16749                           intcon3	equ	0xFF0
 16750                           postinc0	equ	0xFEE
 16751                           plusw0	equ	0xFEB
 16752                           fsr0h	equ	0xFEA
 16753                           fsr0l	equ	0xFE9
 16754                           wreg	equ	0xFE8
 16755                           indf1	equ	0xFE7
 16756                           postinc1	equ	0xFE6
 16757                           postdec1	equ	0xFE5
 16758                           plusw1	equ	0xFE3
 16759                           fsr1h	equ	0xFE2
 16760                           fsr1l	equ	0xFE1
 16761                           indf2	equ	0xFDF
 16762                           postinc2	equ	0xFDE
 16763                           postdec2	equ	0xFDD
 16764                           plusw2	equ	0xFDB
 16765                           fsr2h	equ	0xFDA
 16766                           fsr2l	equ	0xFD9
 16767                           status	equ	0xFD8
 16768                           
 16769 ;; *************** function _ipv4_cmp *****************
 16770 ;; Defined at:
 16771 ;;		line 235 in file "src/stack/protocols/ipv4.c"
 16772 ;; Parameters:    Size  Location     Type
 16773 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 16774 ;;		 -> ARP_table(112), ARP_replyIfNeeded@request(32), ARP_parseFromRXBuffer@arp(32), 
 16775 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 16776 ;;		 -> ARP_checkForEntry@ip(4), ARP_replyIfNeeded@myIP(4), ARP_parseFromRXBuffer@arp(32), 
 16777 ;; Auto vars:     Size  Location     Type
 16778 ;;  i               1    6[BANK0 ] unsigned char 
 16779 ;; Return value:  Size  Location     Type
 16780 ;;		None               void
 16781 ;; Registers used:
 16782 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16783 ;; Tracked objects:
 16784 ;;		On entry : 0/0
 16785 ;;		On exit  : 0/0
 16786 ;;		Unchanged: 0/0
 16787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16788 ;;      Params:         0       4       0       0       0       0       0       0       0
 16789 ;;      Locals:         0       1       0       0       0       0       0       0       0
 16790 ;;      Temps:          0       2       0       0       0       0       0       0       0
 16791 ;;      Totals:         0       7       0       0       0       0       0       0       0
 16792 ;;Total ram usage:        7 bytes
 16793 ;; Hardware stack levels used:    1
 16794 ;; Hardware stack levels required when called:    4
 16795 ;; This function calls:
 16796 ;;		Nothing
 16797 ;; This function is called by:
 16798 ;;		_ARP_parseFromRXBuffer
 16799 ;;		_ARP_replyIfNeeded
 16800 ;;		_ARP_checkForEntry
 16801 ;; This function uses a non-reentrant model
 16802 ;;
 16803                           
 16804                           	psect	text62
 16805  0046F2                     __ptext62:
 16806                           	opt stack 0
 16807  0046F2                     _ipv4_cmp:
 16808                           	opt stack 23
 16809                           
 16810                           ;ipv4.c: 236: for (uint8_t i = 0; i < 4; i++) {
 16811                           
 16812                           ; BSR set to: 0
 16813                           ;incstack = 0
 16814  0046F2  0E00               	movlw	0
 16815  0046F4  0100               	movlb	0	; () banked
 16816  0046F6  6F66               	movwf	ipv4_cmp@i& (0+255),b
 16817  0046F8                     l7885:
 16818                           
 16819                           ; BSR set to: 0
 16820  0046F8  0E03               	movlw	3
 16821  0046FA  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 16822  0046FC  D001               	goto	l1055
 16823  0046FE  D018               	goto	u9270
 16824  004700                     l1055:
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;ipv4.c: 237: if (a->address[i] != b->address[i])
 16828                           
 16829                           ; BSR set to: 0
 16830  004700  5166               	movf	ipv4_cmp@i& (0+255),w,b
 16831  004702  0D01               	mullw	1
 16832  004704  50F3               	movf	prodl,w,c
 16833  004706  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 16834  004708  6ED9               	movwf	fsr2l,c
 16835  00470A  50F4               	movf	prodh,w,c
 16836  00470C  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 16837  00470E  6EDA               	movwf	fsr2h,c
 16838  004710  5166               	movf	ipv4_cmp@i& (0+255),w,b
 16839  004712  0D01               	mullw	1
 16840  004714  50F3               	movf	prodl,w,c
 16841  004716  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 16842  004718  6EE1               	movwf	fsr1l,c
 16843  00471A  50F4               	movf	prodh,w,c
 16844  00471C  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 16845  00471E  6EE2               	movwf	fsr1h,c
 16846  004720  50DE               	movf	postinc2,w,c
 16847  004722  18E6               	xorwf	postinc1,w,c
 16848  004724  B4D8               	btfsc	status,2,c
 16849  004726  D002               	goto	l1057
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;ipv4.c: 238: return 0;
 16853  004728  90D8               	bcf	status,0,c
 16854                           
 16855                           ; BSR set to: 0
 16856  00472A  0012               	return	
 16857  00472C                     l1057:
 16858                           
 16859                           ; BSR set to: 0
 16860                           
 16861                           ; BSR set to: 0
 16862  00472C  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 16863  00472E  D7E4               	goto	l7885
 16864  004730                     u9270:
 16865                           
 16866                           ; BSR set to: 0
 16867                           ;ipv4.c: 239: }
 16868                           ;ipv4.c: 240: return 1;
 16869                           
 16870                           ; BSR set to: 0
 16871  004730  80D8               	bsf	status,0,c
 16872  004732  0012               	return	
 16873  004734                     __end_of_ipv4_cmp:
 16874                           	opt stack 0
 16875                           tblptru	equ	0xFF8
 16876                           tblptrh	equ	0xFF7
 16877                           tblptrl	equ	0xFF6
 16878                           tablat	equ	0xFF5
 16879                           prodh	equ	0xFF4
 16880                           prodl	equ	0xFF3
 16881                           intcon	equ	0xFF2
 16882                           intcon3	equ	0xFF0
 16883                           postinc0	equ	0xFEE
 16884                           plusw0	equ	0xFEB
 16885                           fsr0h	equ	0xFEA
 16886                           fsr0l	equ	0xFE9
 16887                           wreg	equ	0xFE8
 16888                           indf1	equ	0xFE7
 16889                           postinc1	equ	0xFE6
 16890                           postdec1	equ	0xFE5
 16891                           plusw1	equ	0xFE3
 16892                           fsr1h	equ	0xFE2
 16893                           fsr1l	equ	0xFE1
 16894                           indf2	equ	0xFDF
 16895                           postinc2	equ	0xFDE
 16896                           postdec2	equ	0xFDD
 16897                           plusw2	equ	0xFDB
 16898                           fsr2h	equ	0xFDA
 16899                           fsr2l	equ	0xFD9
 16900                           status	equ	0xFD8
 16901                           
 16902 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 16903 ;; Defined at:
 16904 ;;		line 353 in file "src/enc424j600/ENC424J600.c"
 16905 ;; Parameters:    Size  Location     Type
 16906 ;;  startEnd        1    wreg     unsigned char 
 16907 ;;  startAddress    2   18[BANK0 ] unsigned int 
 16908 ;; Auto vars:     Size  Location     Type
 16909 ;;  startEnd        1   20[BANK0 ] unsigned char 
 16910 ;;  temp            1   22[BANK0 ] unsigned char 
 16911 ;;  opcode          1   21[BANK0 ] unsigned char 
 16912 ;; Return value:  Size  Location     Type
 16913 ;;                  1    wreg      unsigned char 
 16914 ;; Registers used:
 16915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16916 ;; Tracked objects:
 16917 ;;		On entry : 0/0
 16918 ;;		On exit  : 0/0
 16919 ;;		Unchanged: 0/0
 16920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16921 ;;      Params:         0       2       0       0       0       0       0       0       0
 16922 ;;      Locals:         0       3       0       0       0       0       0       0       0
 16923 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16924 ;;      Totals:         0       5       0       0       0       0       0       0       0
 16925 ;;Total ram usage:        5 bytes
 16926 ;; Hardware stack levels used:    1
 16927 ;; Hardware stack levels required when called:    8
 16928 ;; This function calls:
 16929 ;;		_ENC424J600_readSPI
 16930 ;;		_ENC424J600_setERXDATAReadPointer
 16931 ;;		_ENC424J600_setRXTailPointer
 16932 ;;		_ENC424J600_writeSPI
 16933 ;;		_ENC424J600_writeSingleByte
 16934 ;;		_ethernetController_getNextPacketPointer
 16935 ;; This function is called by:
 16936 ;;		_ARP_parseFromRXBuffer
 16937 ;;		_ipv4_parseHeader
 16938 ;; This function uses a non-reentrant model
 16939 ;;
 16940                           
 16941                           	psect	text63
 16942  003A4A                     __ptext63:
 16943                           	opt stack 0
 16944  003A4A                     _ethernetController_streamFromRXBuffer:
 16945                           	opt stack 18
 16946                           
 16947                           ; BSR set to: 0
 16948                           ;incstack = 0
 16949                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 16950  003A4A  0100               	movlb	0	; () banked
 16951  003A4C  6F74               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 16952                           
 16953                           ;ENC424J600.c: 354: uint8_t temp;
 16954                           ;ENC424J600.c: 355: uint8_t opcode;
 16955                           ;ENC424J600.c: 356: switch (startEnd) {
 16956  003A4E  D03C               	goto	l177
 16957  003A50                     
 16958                           ;ENC424J600.c: 358: ENC424J600_setERXDATAReadPointer(startAddress);
 16959  003A50  C072  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,ENC424J600_setERXDATAReadPoint
      +                          er@addr
 16960  003A54  C073  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,ENC424J600_setERXDATAReadPoi
      +                          nter@addr+1
 16961  003A58  ECD6  F023         	call	_ENC424J600_setERXDATAReadPointer	;wreg free
 16962                           
 16963                           ;ENC424J600.c: 359: opcode = 0x2C;
 16964  003A5C  0E2C               	movlw	44
 16965  003A5E  0100               	movlb	0	; () banked
 16966  003A60  6F75               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 16967                           
 16968                           ; BSR set to: 0
 16969                           ;ENC424J600.c: 360: PORTBbits.RB4=0;
 16970  003A62  9881               	bcf	3969,4,c	;volatile
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;ENC424J600.c: 361: ENC424J600_writeSPI(&opcode);
 16974  003A64  0E75               	movlw	low ethernetController_streamFromRXBuffer@opcode
 16975  003A66  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 16976  003A68  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 16977  003A6A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 16978  003A6C  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 16979                           
 16980                           ;ENC424J600.c: 362: return 0;
 16981  003A70  0E00               	movlw	0
 16982  003A72  0012               	return	
 16983  003A74                     
 16984                           ;ENC424J600.c: 364: ENC424J600_readSPI(&temp);
 16985  003A74  0E76               	movlw	low ethernetController_streamFromRXBuffer@temp
 16986  003A76  0100               	movlb	0	; () banked
 16987  003A78  6F60               	movwf	ENC424J600_readSPI@data& (0+255),b
 16988  003A7A  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 16989  003A7C  6F61               	movwf	(ENC424J600_readSPI@data+1)& (0+255),b
 16990  003A7E  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
 16991                           
 16992                           ;ENC424J600.c: 365: return temp;
 16993  003A82  0100               	movlb	0	; () banked
 16994  003A84  5176               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 16995                           
 16996                           ; BSR set to: 0
 16997  003A86  0012               	return	
 16998  003A88                     l181:
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;ENC424J600.c: 367: PORTBbits.RB4=1;
 17002  003A88  8881               	bsf	3969,4,c	;volatile
 17003                           
 17004                           ; BSR set to: 0
 17005                           ;ENC424J600.c: 369: if (ethernetController_getNextPacketPointer() == 0x3000) {
 17006  003A8A  EC61  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 17007  003A8E  0E30               	movlw	48
 17008  003A90  0100               	movlb	0	; () banked
 17009  003A92  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17010  003A94  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17011  003A96  A4D8               	btfss	status,2,c
 17012  003A98  D007               	goto	l182
 17013                           
 17014                           ; BSR set to: 0
 17015                           ;ENC424J600.c: 370: ENC424J600_setRXTailPointer(0x55FE);
 17016  003A9A  0E55               	movlw	85
 17017  003A9C  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17018  003A9E  0EFE               	movlw	254
 17019  003AA0  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17020  003AA2  ECD3  F024         	call	_ENC424J600_setRXTailPointer	;wreg free
 17021                           
 17022                           ;ENC424J600.c: 371: } else {
 17023  003AA6  D00B               	goto	l183
 17024  003AA8                     l182:
 17025                           
 17026                           ;ENC424J600.c: 372: ENC424J600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 17027  003AA8  EC61  F026         	call	_ethernetController_getNextPacketPointer	;wreg free
 17028  003AAC  0EFE               	movlw	254
 17029  003AAE  0100               	movlb	0	; () banked
 17030  003AB0  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 17031  003AB2  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 17032  003AB4  0EFF               	movlw	255
 17033  003AB6  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 17034  003AB8  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 17035  003ABA  ECD3  F024         	call	_ENC424J600_setRXTailPointer	;wreg free
 17036  003ABE                     l183:
 17037                           
 17038                           ;ENC424J600.c: 373: }
 17039                           ;ENC424J600.c: 376: ENC424J600_writeSingleByte(0b11001100);
 17040  003ABE  0ECC               	movlw	204
 17041  003AC0  EC20  F026         	call	_ENC424J600_writeSingleByte
 17042                           
 17043                           ;ENC424J600.c: 377: return 0;
 17044  003AC4  0E00               	movlw	0
 17045  003AC6  0012               	return	
 17046  003AC8                     l177:
 17047  003AC8  0100               	movlb	0	; () banked
 17048  003ACA  5174               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 17049                           
 17050                           ; Switch size 1, requested type "space"
 17051                           ; Number of cases is 3, Range of values is 0 to 2
 17052                           ; switch strategies available:
 17053                           ; Name         Instructions Cycles
 17054                           ; simple_byte           10     6 (average)
 17055                           ;	Chosen strategy is simple_byte
 17056  003ACC  0A00               	xorlw	0	; case 0
 17057  003ACE  B4D8               	btfsc	status,2,c
 17058  003AD0  D7BF               	goto	l178
 17059  003AD2  0A01               	xorlw	1	; case 1
 17060  003AD4  B4D8               	btfsc	status,2,c
 17061  003AD6  D7CE               	goto	l180
 17062  003AD8  0A03               	xorlw	3	; case 2
 17063  003ADA  B4D8               	btfsc	status,2,c
 17064  003ADC  D7D5               	goto	l181
 17065                           
 17066                           ;ENC424J600.c: 379: return 0;
 17067                           
 17068                           ; BSR set to: 0
 17069  003ADE  0E00               	movlw	0
 17070  003AE0  0012               	return	
 17071  003AE2                     __end_of_ethernetController_streamFromRXBuffer:
 17072                           	opt stack 0
 17073                           tblptru	equ	0xFF8
 17074                           tblptrh	equ	0xFF7
 17075                           tblptrl	equ	0xFF6
 17076                           tablat	equ	0xFF5
 17077                           prodh	equ	0xFF4
 17078                           prodl	equ	0xFF3
 17079                           intcon	equ	0xFF2
 17080                           intcon3	equ	0xFF0
 17081                           postinc0	equ	0xFEE
 17082                           plusw0	equ	0xFEB
 17083                           fsr0h	equ	0xFEA
 17084                           fsr0l	equ	0xFE9
 17085                           wreg	equ	0xFE8
 17086                           indf1	equ	0xFE7
 17087                           postinc1	equ	0xFE6
 17088                           postdec1	equ	0xFE5
 17089                           plusw1	equ	0xFE3
 17090                           fsr1h	equ	0xFE2
 17091                           fsr1l	equ	0xFE1
 17092                           indf2	equ	0xFDF
 17093                           postinc2	equ	0xFDE
 17094                           postdec2	equ	0xFDD
 17095                           plusw2	equ	0xFDB
 17096                           fsr2h	equ	0xFDA
 17097                           fsr2l	equ	0xFD9
 17098                           status	equ	0xFD8
 17099                           
 17100 ;; *************** function _ethernetController_getNextPacketPointer *****************
 17101 ;; Defined at:
 17102 ;;		line 501 in file "src/enc424j600/ENC424J600.c"
 17103 ;; Parameters:    Size  Location     Type
 17104 ;;		None
 17105 ;; Auto vars:     Size  Location     Type
 17106 ;;		None
 17107 ;; Return value:  Size  Location     Type
 17108 ;;                  2    2[BANK0 ] unsigned int 
 17109 ;; Registers used:
 17110 ;;		cstack
 17111 ;; Tracked objects:
 17112 ;;		On entry : 0/0
 17113 ;;		On exit  : 0/0
 17114 ;;		Unchanged: 0/0
 17115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17116 ;;      Params:         0       2       0       0       0       0       0       0       0
 17117 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17118 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17119 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17120 ;;Total ram usage:        2 bytes
 17121 ;; Hardware stack levels used:    1
 17122 ;; Hardware stack levels required when called:    5
 17123 ;; This function calls:
 17124 ;;		_ENC424J600_getNextPacketPointer
 17125 ;; This function is called by:
 17126 ;;		_ethernetController_streamFromRXBuffer
 17127 ;;		_ethernetController_dropPacket
 17128 ;;		_ethernet_rxGetNewFrame
 17129 ;; This function uses a non-reentrant model
 17130 ;;
 17131                           
 17132                           	psect	text64
 17133  004CC2                     __ptext64:
 17134                           	opt stack 0
 17135  004CC2                     _ethernetController_getNextPacketPointer:
 17136                           	opt stack 20
 17137                           
 17138                           ;ENC424J600.c: 502: return ENC424J600_getNextPacketPointer();
 17139                           
 17140                           ;incstack = 0
 17141  004CC2  EC6F  F026         	call	_ENC424J600_getNextPacketPointer	;wreg free
 17142  004CC6  C060  F062         	movff	?_ENC424J600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 17143  004CCA  C061  F063         	movff	?_ENC424J600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 17144  004CCE  0012               	return	
 17145  004CD0                     __end_of_ethernetController_getNextPacketPointer:
 17146                           	opt stack 0
 17147                           tblptru	equ	0xFF8
 17148                           tblptrh	equ	0xFF7
 17149                           tblptrl	equ	0xFF6
 17150                           tablat	equ	0xFF5
 17151                           prodh	equ	0xFF4
 17152                           prodl	equ	0xFF3
 17153                           intcon	equ	0xFF2
 17154                           intcon3	equ	0xFF0
 17155                           postinc0	equ	0xFEE
 17156                           plusw0	equ	0xFEB
 17157                           fsr0h	equ	0xFEA
 17158                           fsr0l	equ	0xFE9
 17159                           wreg	equ	0xFE8
 17160                           indf1	equ	0xFE7
 17161                           postinc1	equ	0xFE6
 17162                           postdec1	equ	0xFE5
 17163                           plusw1	equ	0xFE3
 17164                           fsr1h	equ	0xFE2
 17165                           fsr1l	equ	0xFE1
 17166                           indf2	equ	0xFDF
 17167                           postinc2	equ	0xFDE
 17168                           postdec2	equ	0xFDD
 17169                           plusw2	equ	0xFDB
 17170                           fsr2h	equ	0xFDA
 17171                           fsr2l	equ	0xFD9
 17172                           status	equ	0xFD8
 17173                           
 17174 ;; *************** function _ENC424J600_getNextPacketPointer *****************
 17175 ;; Defined at:
 17176 ;;		line 629 in file "src/enc424j600/ENC424J600.c"
 17177 ;; Parameters:    Size  Location     Type
 17178 ;;		None
 17179 ;; Auto vars:     Size  Location     Type
 17180 ;;		None
 17181 ;; Return value:  Size  Location     Type
 17182 ;;                  2    0[BANK0 ] unsigned int 
 17183 ;; Registers used:
 17184 ;;		None
 17185 ;; Tracked objects:
 17186 ;;		On entry : 0/0
 17187 ;;		On exit  : 0/0
 17188 ;;		Unchanged: 0/0
 17189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17190 ;;      Params:         0       2       0       0       0       0       0       0       0
 17191 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17192 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17193 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17194 ;;Total ram usage:        2 bytes
 17195 ;; Hardware stack levels used:    1
 17196 ;; Hardware stack levels required when called:    4
 17197 ;; This function calls:
 17198 ;;		Nothing
 17199 ;; This function is called by:
 17200 ;;		_ethernetController_updateNextPacketPointer
 17201 ;;		_ethernetController_getNextPacketPointer
 17202 ;; This function uses a non-reentrant model
 17203 ;;
 17204                           
 17205                           	psect	text65
 17206  004CDE                     __ptext65:
 17207                           	opt stack 0
 17208  004CDE                     _ENC424J600_getNextPacketPointer:
 17209                           	opt stack 20
 17210                           
 17211                           ;ENC424J600.c: 630: return nextPacketPointer;
 17212                           
 17213                           ;incstack = 0
 17214  004CDE  C045  F060         	movff	_nextPacketPointer,?_ENC424J600_getNextPacketPointer
 17215  004CE2  C046  F061         	movff	_nextPacketPointer+1,?_ENC424J600_getNextPacketPointer+1
 17216  004CE6  0012               	return		;funcret
 17217  004CE8                     __end_of_ENC424J600_getNextPacketPointer:
 17218                           	opt stack 0
 17219                           tblptru	equ	0xFF8
 17220                           tblptrh	equ	0xFF7
 17221                           tblptrl	equ	0xFF6
 17222                           tablat	equ	0xFF5
 17223                           prodh	equ	0xFF4
 17224                           prodl	equ	0xFF3
 17225                           intcon	equ	0xFF2
 17226                           intcon3	equ	0xFF0
 17227                           postinc0	equ	0xFEE
 17228                           plusw0	equ	0xFEB
 17229                           fsr0h	equ	0xFEA
 17230                           fsr0l	equ	0xFE9
 17231                           wreg	equ	0xFE8
 17232                           indf1	equ	0xFE7
 17233                           postinc1	equ	0xFE6
 17234                           postdec1	equ	0xFE5
 17235                           plusw1	equ	0xFE3
 17236                           fsr1h	equ	0xFE2
 17237                           fsr1l	equ	0xFE1
 17238                           indf2	equ	0xFDF
 17239                           postinc2	equ	0xFDE
 17240                           postdec2	equ	0xFDD
 17241                           plusw2	equ	0xFDB
 17242                           fsr2h	equ	0xFDA
 17243                           fsr2l	equ	0xFD9
 17244                           status	equ	0xFD8
 17245                           
 17246 ;; *************** function _ENC424J600_setERXDATAReadPointer *****************
 17247 ;; Defined at:
 17248 ;;		line 670 in file "src/enc424j600/ENC424J600.c"
 17249 ;; Parameters:    Size  Location     Type
 17250 ;;  addr            2   10[BANK0 ] unsigned int 
 17251 ;; Auto vars:     Size  Location     Type
 17252 ;;  highByte        1   14[BANK0 ] unsigned char 
 17253 ;;  lowByte         1   13[BANK0 ] unsigned char 
 17254 ;;  opcode          1   12[BANK0 ] unsigned char 
 17255 ;; Return value:  Size  Location     Type
 17256 ;;                  1    wreg      void 
 17257 ;; Registers used:
 17258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17259 ;; Tracked objects:
 17260 ;;		On entry : 0/0
 17261 ;;		On exit  : 0/0
 17262 ;;		Unchanged: 0/0
 17263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17264 ;;      Params:         0       2       0       0       0       0       0       0       0
 17265 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17266 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17267 ;;      Totals:         0       5       0       0       0       0       0       0       0
 17268 ;;Total ram usage:        5 bytes
 17269 ;; Hardware stack levels used:    1
 17270 ;; Hardware stack levels required when called:    6
 17271 ;; This function calls:
 17272 ;;		_ENC424J600_writeSPI
 17273 ;; This function is called by:
 17274 ;;		_ethernetController_getSourceMACAddress
 17275 ;;		_ethernetController_getEtherTypeField
 17276 ;;		_ethernetController_getRSV
 17277 ;;		_ethernetController_updateNextPacketPointer
 17278 ;;		_ethernetController_streamFromRXBuffer
 17279 ;;		_ethernetController_getDestinationMACAddress
 17280 ;; This function uses a non-reentrant model
 17281 ;;
 17282                           
 17283                           	psect	text66
 17284  0047AC                     __ptext66:
 17285                           	opt stack 0
 17286  0047AC                     _ENC424J600_setERXDATAReadPointer:
 17287                           	opt stack 19
 17288                           
 17289                           ;ENC424J600.c: 671: uint8_t opcode = 0x64;
 17290                           
 17291                           ;incstack = 0
 17292  0047AC  0E64               	movlw	100
 17293  0047AE  0100               	movlb	0	; () banked
 17294  0047B0  6F6C               	movwf	ENC424J600_setERXDATAReadPointer@opcode& (0+255),b
 17295                           
 17296                           ; BSR set to: 0
 17297                           ;ENC424J600.c: 672: uint8_t lowByte = addr & 0x00ff;
 17298  0047B2  C06A  F06D         	movff	ENC424J600_setERXDATAReadPointer@addr,ENC424J600_setERXDATAReadPointer@lowByte
 17299                           
 17300                           ;ENC424J600.c: 673: uint8_t highByte = (addr >> 8) & 0xff;
 17301  0047B6  516B               	movf	(ENC424J600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 17302  0047B8  6F6E               	movwf	ENC424J600_setERXDATAReadPointer@highByte& (0+255),b
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;ENC424J600.c: 674: PORTBbits.RB4=0;
 17306  0047BA  9881               	bcf	3969,4,c	;volatile
 17307                           
 17308                           ; BSR set to: 0
 17309                           ;ENC424J600.c: 675: ENC424J600_writeSPI(&opcode);
 17310  0047BC  0E6C               	movlw	low ENC424J600_setERXDATAReadPointer@opcode
 17311  0047BE  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17312  0047C0  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@opcode
 17313  0047C2  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17314  0047C4  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 17315                           
 17316                           ;ENC424J600.c: 676: ENC424J600_writeSPI(&lowByte);
 17317  0047C8  0E6D               	movlw	low ENC424J600_setERXDATAReadPointer@lowByte
 17318  0047CA  0100               	movlb	0	; () banked
 17319  0047CC  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17320  0047CE  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@lowByte
 17321  0047D0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17322  0047D2  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 17323                           
 17324                           ;ENC424J600.c: 677: ENC424J600_writeSPI(&highByte);
 17325  0047D6  0E6E               	movlw	low ENC424J600_setERXDATAReadPointer@highByte
 17326  0047D8  0100               	movlb	0	; () banked
 17327  0047DA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 17328  0047DC  0E00               	movlw	high ENC424J600_setERXDATAReadPointer@highByte
 17329  0047DE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 17330  0047E0  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 17331                           
 17332                           ;ENC424J600.c: 678: PORTBbits.RB4=1;
 17333  0047E4  8881               	bsf	3969,4,c	;volatile
 17334  0047E6  0012               	return		;funcret
 17335  0047E8                     __end_of_ENC424J600_setERXDATAReadPointer:
 17336                           	opt stack 0
 17337                           tblptru	equ	0xFF8
 17338                           tblptrh	equ	0xFF7
 17339                           tblptrl	equ	0xFF6
 17340                           tablat	equ	0xFF5
 17341                           prodh	equ	0xFF4
 17342                           prodl	equ	0xFF3
 17343                           intcon	equ	0xFF2
 17344                           intcon3	equ	0xFF0
 17345                           postinc0	equ	0xFEE
 17346                           plusw0	equ	0xFEB
 17347                           fsr0h	equ	0xFEA
 17348                           fsr0l	equ	0xFE9
 17349                           wreg	equ	0xFE8
 17350                           indf1	equ	0xFE7
 17351                           postinc1	equ	0xFE6
 17352                           postdec1	equ	0xFE5
 17353                           plusw1	equ	0xFE3
 17354                           fsr1h	equ	0xFE2
 17355                           fsr1l	equ	0xFE1
 17356                           indf2	equ	0xFDF
 17357                           postinc2	equ	0xFDE
 17358                           postdec2	equ	0xFDD
 17359                           plusw2	equ	0xFDB
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364 ;; *************** function _ethernetController_updateLinkStatus *****************
 17365 ;; Defined at:
 17366 ;;		line 410 in file "src/enc424j600/ENC424J600.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 17369 ;;		 -> stack(113), 
 17370 ;; Auto vars:     Size  Location     Type
 17371 ;;  temp16          1   35[BANK0 ] unsigned char 
 17372 ;;  temp            1   34[BANK0 ] unsigned char 
 17373 ;; Return value:  Size  Location     Type
 17374 ;;                  1    wreg      void 
 17375 ;; Registers used:
 17376 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17377 ;; Tracked objects:
 17378 ;;		On entry : 0/0
 17379 ;;		On exit  : 0/0
 17380 ;;		Unchanged: 0/0
 17381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17382 ;;      Params:         0       2       0       0       0       0       0       0       0
 17383 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17384 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17385 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17386 ;;Total ram usage:        4 bytes
 17387 ;; Hardware stack levels used:    1
 17388 ;; Hardware stack levels required when called:    8
 17389 ;; This function calls:
 17390 ;;		_ENC424J600_readControlRegisterUnbanked
 17391 ;;		_ENC424J600_readPHYRegister
 17392 ;; This function is called by:
 17393 ;;		_handleStackBackgroundTasks
 17394 ;; This function uses a non-reentrant model
 17395 ;;
 17396                           
 17397                           	psect	text67
 17398  003C9E                     __ptext67:
 17399                           	opt stack 0
 17400  003C9E                     _ethernetController_updateLinkStatus:
 17401                           	opt stack 21
 17402                           
 17403                           ;ENC424J600.c: 411: uint8_t temp, temp16;
 17404                           ;ENC424J600.c: 412: ENC424J600_readControlRegisterUnbanked(0x1B, &temp);
 17405                           
 17406                           ;incstack = 0
 17407  003C9E  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 17408  003CA0  0100               	movlb	0	; () banked
 17409  003CA2  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17410  003CA4  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 17411  003CA6  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17412  003CA8  0E1B               	movlw	27
 17413  003CAA  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17414                           
 17415                           ;ENC424J600.c: 413: if (temp & 0x01) {
 17416  003CAE  0100               	movlb	0	; () banked
 17417  003CB0  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 17418  003CB2  D006               	goto	l195
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;ENC424J600.c: 414: state->link = LINK_ESTABLISHED;
 17422  003CB4  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 17423  003CB8  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 17424  003CBC  0E01               	movlw	1
 17425  003CBE  D005               	goto	L3
 17426  003CC0                     l195:
 17427                           
 17428                           ; BSR set to: 0
 17429                           ;ENC424J600.c: 416: state->link = NO_LINK;
 17430                           
 17431                           ; BSR set to: 0
 17432  003CC0  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 17433  003CC4  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 17434  003CC8  0E00               	movlw	0
 17435  003CCA                     L3:
 17436  003CCA  6EDF               	movwf	indf2,c
 17437                           
 17438                           ; BSR set to: 0
 17439                           ;ENC424J600.c: 417: }
 17440                           ;ENC424J600.c: 419: ENC424J600_readPHYRegister(0x1F, &temp16);
 17441                           
 17442                           ; BSR set to: 0
 17443  003CCC  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 17444  003CCE  6F6E               	movwf	ENC424J600_readPHYRegister@data& (0+255),b
 17445  003CD0  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 17446  003CD2  6F6F               	movwf	(ENC424J600_readPHYRegister@data+1)& (0+255),b
 17447  003CD4  0E1F               	movlw	31
 17448  003CD6  EC03  F018         	call	_ENC424J600_readPHYRegister
 17449                           
 17450                           ;ENC424J600.c: 421: if (temp16 & (1 << 3)) {
 17451  003CDA  0100               	movlb	0	; () banked
 17452  003CDC  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 17453  003CDE  D008               	goto	l197
 17454                           
 17455                           ; BSR set to: 0
 17456                           ;ENC424J600.c: 422: state->speed = HUNDRED_MBIT;
 17457  003CE0  EE20 F001          	lfsr	2,1
 17458  003CE4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17459  003CE6  26D9               	addwf	fsr2l,f,c
 17460  003CE8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17461  003CEA  22DA               	addwfc	fsr2h,f,c
 17462  003CEC  0E01               	movlw	1
 17463  003CEE  D007               	goto	L4
 17464  003CF0                     l197:
 17465                           
 17466                           ; BSR set to: 0
 17467                           ;ENC424J600.c: 424: state->speed = TEN_MBIT;
 17468                           
 17469                           ; BSR set to: 0
 17470  003CF0  EE20 F001          	lfsr	2,1
 17471  003CF4  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17472  003CF6  26D9               	addwf	fsr2l,f,c
 17473  003CF8  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17474  003CFA  22DA               	addwfc	fsr2h,f,c
 17475  003CFC  0E00               	movlw	0
 17476  003CFE                     L4:
 17477  003CFE  6EDF               	movwf	indf2,c
 17478                           
 17479                           ; BSR set to: 0
 17480                           ;ENC424J600.c: 425: }
 17481                           ;ENC424J600.c: 427: if (temp16 & (1 << 4)) {
 17482                           
 17483                           ; BSR set to: 0
 17484  003D00  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 17485  003D02  D009               	goto	l199
 17486                           
 17487                           ; BSR set to: 0
 17488                           ;ENC424J600.c: 428: state->duplex = FULL_DUPLEX;
 17489  003D04  EE20 F002          	lfsr	2,2
 17490  003D08  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17491  003D0A  26D9               	addwf	fsr2l,f,c
 17492  003D0C  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17493  003D0E  22DA               	addwfc	fsr2h,f,c
 17494  003D10  0E01               	movlw	1
 17495  003D12  6EDF               	movwf	indf2,c
 17496                           
 17497                           ;ENC424J600.c: 429: } else {
 17498  003D14  0012               	return	
 17499  003D16                     l199:
 17500                           
 17501                           ; BSR set to: 0
 17502                           ;ENC424J600.c: 430: state->duplex = HALF_DUPLEX;
 17503                           
 17504                           ; BSR set to: 0
 17505  003D16  EE20 F002          	lfsr	2,2
 17506  003D1A  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 17507  003D1C  26D9               	addwf	fsr2l,f,c
 17508  003D1E  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 17509  003D20  22DA               	addwfc	fsr2h,f,c
 17510  003D22  0E00               	movlw	0
 17511  003D24  6EDF               	movwf	indf2,c
 17512  003D26  0012               	return	
 17513  003D28                     __end_of_ethernetController_updateLinkStatus:
 17514                           	opt stack 0
 17515                           tblptru	equ	0xFF8
 17516                           tblptrh	equ	0xFF7
 17517                           tblptrl	equ	0xFF6
 17518                           tablat	equ	0xFF5
 17519                           prodh	equ	0xFF4
 17520                           prodl	equ	0xFF3
 17521                           intcon	equ	0xFF2
 17522                           intcon3	equ	0xFF0
 17523                           postinc0	equ	0xFEE
 17524                           plusw0	equ	0xFEB
 17525                           fsr0h	equ	0xFEA
 17526                           fsr0l	equ	0xFE9
 17527                           wreg	equ	0xFE8
 17528                           indf1	equ	0xFE7
 17529                           postinc1	equ	0xFE6
 17530                           postdec1	equ	0xFE5
 17531                           plusw1	equ	0xFE3
 17532                           fsr1h	equ	0xFE2
 17533                           fsr1l	equ	0xFE1
 17534                           indf2	equ	0xFDF
 17535                           postinc2	equ	0xFDE
 17536                           postdec2	equ	0xFDD
 17537                           plusw2	equ	0xFDB
 17538                           fsr2h	equ	0xFDA
 17539                           fsr2l	equ	0xFD9
 17540                           status	equ	0xFD8
 17541                           
 17542 ;; *************** function _ENC424J600_readPHYRegister *****************
 17543 ;; Defined at:
 17544 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 17545 ;; Parameters:    Size  Location     Type
 17546 ;;  addr            1    wreg     unsigned char 
 17547 ;;  data            2   14[BANK0 ] PTR unsigned int 
 17548 ;;		 -> ethernetController_updateLinkStatus@temp16(1), 
 17549 ;; Auto vars:     Size  Location     Type
 17550 ;;  addr            1   22[BANK0 ] unsigned char 
 17551 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 17552 ;;  temp            1   31[BANK0 ] unsigned char 
 17553 ;;  highByte        1   30[BANK0 ] unsigned char 
 17554 ;;  lowByte         1   29[BANK0 ] unsigned char 
 17555 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 17556 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 17557 ;; Return value:  Size  Location     Type
 17558 ;;                  1    wreg      void 
 17559 ;; Registers used:
 17560 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17561 ;; Tracked objects:
 17562 ;;		On entry : 0/0
 17563 ;;		On exit  : 0/0
 17564 ;;		Unchanged: 0/0
 17565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17566 ;;      Params:         0       2       0       0       0       0       0       0       0
 17567 ;;      Locals:         0      10       0       0       0       0       0       0       0
 17568 ;;      Temps:          0       6       0       0       0       0       0       0       0
 17569 ;;      Totals:         0      18       0       0       0       0       0       0       0
 17570 ;;Total ram usage:       18 bytes
 17571 ;; Hardware stack levels used:    1
 17572 ;; Hardware stack levels required when called:    7
 17573 ;; This function calls:
 17574 ;;		_ENC424J600_readControlRegisterUnbanked
 17575 ;;		_ENC424J600_writeControlRegisterUnbanked
 17576 ;; This function is called by:
 17577 ;;		_ethernetController_updateLinkStatus
 17578 ;; This function uses a non-reentrant model
 17579 ;;
 17580                           
 17581                           	psect	text68
 17582  003006                     __ptext68:
 17583                           	opt stack 0
 17584  003006                     _ENC424J600_readPHYRegister:
 17585                           	opt stack 21
 17586                           
 17587                           ; BSR set to: 0
 17588                           ;incstack = 0
 17589                           ;ENC424J600_readPHYRegister@addr stored from wreg
 17590  003006  0100               	movlb	0	; () banked
 17591  003008  6F76               	movwf	ENC424J600_readPHYRegister@addr& (0+255),b
 17592                           
 17593                           ;ENC424J600.c: 579: uint8_t PHYaddress = addr & 0x1F;
 17594  00300A  0100               	movlb	0	; () banked
 17595  00300C  5176               	movf	ENC424J600_readPHYRegister@addr& (0+255),w,b
 17596  00300E  0B1F               	andlw	31
 17597  003010  6F77               	movwf	ENC424J600_readPHYRegister@PHYaddress& (0+255),b
 17598                           
 17599                           ; BSR set to: 0
 17600                           ;ENC424J600.c: 580: uint8_t unusedBits = 0x01;
 17601  003012  0E01               	movlw	1
 17602  003014  6F78               	movwf	ENC424J600_readPHYRegister@unusedBits& (0+255),b
 17603                           
 17604                           ; BSR set to: 0
 17605                           ;ENC424J600.c: 581: uint8_t temp;
 17606                           ;ENC424J600.c: 582: uint8_t lowByte;
 17607                           ;ENC424J600.c: 583: uint8_t highByte;
 17608                           ;ENC424J600.c: 584: uint32_t timeoutCounter = 0;
 17609  003016  0E00               	movlw	0
 17610  003018  6F79               	movwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),b
 17611  00301A  0E00               	movlw	0
 17612  00301C  6F7A               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),b
 17613  00301E  0E00               	movlw	0
 17614  003020  6F7B               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),b
 17615  003022  0E00               	movlw	0
 17616  003024  6F7C               	movwf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),b
 17617                           
 17618                           ; BSR set to: 0
 17619                           ;ENC424J600.c: 586: ENC424J600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 17620  003026  0E77               	movlw	low ENC424J600_readPHYRegister@PHYaddress
 17621  003028  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17622  00302A  0E00               	movlw	high ENC424J600_readPHYRegister@PHYaddress
 17623  00302C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17624  00302E  0E54               	movlw	84
 17625  003030  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17626                           
 17627                           ;ENC424J600.c: 587: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 17628  003034  0E78               	movlw	low ENC424J600_readPHYRegister@unusedBits
 17629  003036  0100               	movlb	0	; () banked
 17630  003038  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17631  00303A  0E00               	movlw	high ENC424J600_readPHYRegister@unusedBits
 17632  00303C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17633  00303E  0E55               	movlw	85
 17634  003040  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17635                           
 17636                           ;ENC424J600.c: 590: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 17637  003044  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17638  003046  0100               	movlb	0	; () banked
 17639  003048  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17640  00304A  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17641  00304C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17642  00304E  0E52               	movlw	82
 17643  003050  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17644                           
 17645                           ;ENC424J600.c: 591: temp |= 0x01;
 17646  003054  0100               	movlb	0	; () banked
 17647  003056  817F               	bsf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17648                           
 17649                           ; BSR set to: 0
 17650                           ;ENC424J600.c: 592: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 17651  003058  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17652  00305A  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17653  00305C  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17654  00305E  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17655  003060  0E52               	movlw	82
 17656  003062  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17657                           
 17658                           ;ENC424J600.c: 594: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 17659  003066  0E45               	movlw	69
 17660  003068                     u11647:
 17661  003068  2EE8               	decfsz	wreg,f,c
 17662  00306A  D7FE               	bra	u11647
 17663  00306C  F000               	nop	
 17664  00306E                     
 17665                           ;ENC424J600.c: 597: ENC424J600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 17666  00306E  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17667  003070  0100               	movlb	0	; () banked
 17668  003072  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17669  003074  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17670  003076  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17671  003078  0E6A               	movlw	106
 17672  00307A  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17673                           
 17674                           ;ENC424J600.c: 598: timeoutCounter++;
 17675  00307E  0E01               	movlw	1
 17676  003080  0100               	movlb	0	; () banked
 17677  003082  2779               	addwf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),f,b
 17678  003084  0E00               	movlw	0
 17679  003086  237A               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 17680  003088  237B               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 17681  00308A  237C               	addwfc	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;ENC424J600.c: 599: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 17685  00308C  A17F               	btfss	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17686  00308E  D008               	goto	u10400
 17687                           
 17688                           ; BSR set to: 0
 17689  003090  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 17690  003092  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 17691  003094  E105               	bnz	l8437
 17692  003096  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 17693  003098  0E0F               	movlw	15
 17694  00309A  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 17695  00309C  A0D8               	btfss	status,0,c
 17696  00309E  D7E7               	goto	l258
 17697  0030A0                     u10400:
 17698  0030A0                     l8437:
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;ENC424J600.c: 600: if (timeoutCounter >= 0xfff)
 17702  0030A0  517C               	movf	(ENC424J600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 17703  0030A2  117B               	iorwf	(ENC424J600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 17704  0030A4  E140               	bnz	l263
 17705  0030A6  2979               	incf	ENC424J600_readPHYRegister@timeoutCounter& (0+255),w,b
 17706  0030A8  0E0F               	movlw	15
 17707  0030AA  597A               	subwfb	(ENC424J600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 17708  0030AC  B0D8               	btfsc	status,0,c
 17709  0030AE  0012               	return	
 17710                           
 17711                           ; BSR set to: 0
 17712                           ;ENC424J600.c: 604: ENC424J600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 17713                           
 17714                           ; BSR set to: 0
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;ENC424J600.c: 601: return;
 17718  0030B0  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17719  0030B2  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17720  0030B4  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17721  0030B6  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17722  0030B8  0E52               	movlw	82
 17723  0030BA  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17724                           
 17725                           ;ENC424J600.c: 605: temp &= ~0x01;
 17726  0030BE  0100               	movlb	0	; () banked
 17727  0030C0  917F               	bcf	ENC424J600_readPHYRegister@temp& (0+255),0,b
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;ENC424J600.c: 606: ENC424J600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 17731  0030C2  0E7F               	movlw	low ENC424J600_readPHYRegister@temp
 17732  0030C4  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 17733  0030C6  0E00               	movlw	high ENC424J600_readPHYRegister@temp
 17734  0030C8  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17735  0030CA  0E52               	movlw	82
 17736  0030CC  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 17737                           
 17738                           ;ENC424J600.c: 609: ENC424J600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 17739  0030D0  0E7D               	movlw	low ENC424J600_readPHYRegister@lowByte
 17740  0030D2  0100               	movlb	0	; () banked
 17741  0030D4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17742  0030D6  0E00               	movlw	high ENC424J600_readPHYRegister@lowByte
 17743  0030D8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17744  0030DA  0E68               	movlw	104
 17745  0030DC  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17746                           
 17747                           ;ENC424J600.c: 610: ENC424J600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 17748  0030E0  0E7E               	movlw	low ENC424J600_readPHYRegister@highByte
 17749  0030E2  0100               	movlb	0	; () banked
 17750  0030E4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17751  0030E6  0E00               	movlw	high ENC424J600_readPHYRegister@highByte
 17752  0030E8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17753  0030EA  0E69               	movlw	105
 17754  0030EC  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17755                           
 17756                           ;ENC424J600.c: 611: *data = (lowByte | ((highByte << 8)&0xff00));
 17757  0030F0  0E00               	movlw	0
 17758  0030F2  0100               	movlb	0	; () banked
 17759  0030F4  6F70               	movwf	??_ENC424J600_readPHYRegister& (0+255),b
 17760  0030F6  0EFF               	movlw	255
 17761  0030F8  6F71               	movwf	(??_ENC424J600_readPHYRegister+1)& (0+255),b
 17762  0030FA  517E               	movf	ENC424J600_readPHYRegister@highByte& (0+255),w,b
 17763  0030FC  6F73               	movwf	(??_ENC424J600_readPHYRegister+3)& (0+255),b
 17764  0030FE  6B72               	clrf	(??_ENC424J600_readPHYRegister+2)& (0+255),b
 17765  003100  5170               	movf	??_ENC424J600_readPHYRegister& (0+255),w,b
 17766  003102  1772               	andwf	(??_ENC424J600_readPHYRegister+2)& (0+255),f,b
 17767  003104  5171               	movf	(??_ENC424J600_readPHYRegister+1)& (0+255),w,b
 17768  003106  1773               	andwf	(??_ENC424J600_readPHYRegister+3)& (0+255),f,b
 17769  003108  517D               	movf	ENC424J600_readPHYRegister@lowByte& (0+255),w,b
 17770  00310A  6F74               	movwf	(??_ENC424J600_readPHYRegister+4)& (0+255),b
 17771  00310C  6B75               	clrf	(??_ENC424J600_readPHYRegister+5)& (0+255),b
 17772  00310E  5172               	movf	(??_ENC424J600_readPHYRegister+2)& (0+255),w,b
 17773  003110  1374               	iorwf	(??_ENC424J600_readPHYRegister+4)& (0+255),f,b
 17774  003112  5173               	movf	(??_ENC424J600_readPHYRegister+3)& (0+255),w,b
 17775  003114  1375               	iorwf	(??_ENC424J600_readPHYRegister+5)& (0+255),f,b
 17776  003116  C06E  FFD9         	movff	ENC424J600_readPHYRegister@data,fsr2l
 17777  00311A  C06F  FFDA         	movff	ENC424J600_readPHYRegister@data+1,fsr2h
 17778  00311E  C074  FFDE         	movff	??_ENC424J600_readPHYRegister+4,postinc2
 17779  003122  C075  FFDD         	movff	??_ENC424J600_readPHYRegister+5,postdec2
 17780  003126                     l263:
 17781                           
 17782                           ; BSR set to: 0
 17783  003126  0012               	return		;funcret
 17784  003128                     __end_of_ENC424J600_readPHYRegister:
 17785                           	opt stack 0
 17786                           tblptru	equ	0xFF8
 17787                           tblptrh	equ	0xFF7
 17788                           tblptrl	equ	0xFF6
 17789                           tablat	equ	0xFF5
 17790                           prodh	equ	0xFF4
 17791                           prodl	equ	0xFF3
 17792                           intcon	equ	0xFF2
 17793                           intcon3	equ	0xFF0
 17794                           postinc0	equ	0xFEE
 17795                           plusw0	equ	0xFEB
 17796                           fsr0h	equ	0xFEA
 17797                           fsr0l	equ	0xFE9
 17798                           wreg	equ	0xFE8
 17799                           indf1	equ	0xFE7
 17800                           postinc1	equ	0xFE6
 17801                           postdec1	equ	0xFE5
 17802                           plusw1	equ	0xFE3
 17803                           fsr1h	equ	0xFE2
 17804                           fsr1l	equ	0xFE1
 17805                           indf2	equ	0xFDF
 17806                           postinc2	equ	0xFDE
 17807                           postdec2	equ	0xFDD
 17808                           plusw2	equ	0xFDB
 17809                           fsr2h	equ	0xFDA
 17810                           fsr2l	equ	0xFD9
 17811                           status	equ	0xFD8
 17812                           
 17813 ;; *************** function _ethernetController_setLEDConfig *****************
 17814 ;; Defined at:
 17815 ;;		line 459 in file "src/enc424j600/ENC424J600.c"
 17816 ;; Parameters:    Size  Location     Type
 17817 ;;  LED             1    wreg     enum E5558
 17818 ;;  conf            1   14[BANK0 ] enum E5562
 17819 ;; Auto vars:     Size  Location     Type
 17820 ;;  LED             1   15[BANK0 ] enum E5558
 17821 ;;  data            1   16[BANK0 ] unsigned char 
 17822 ;; Return value:  Size  Location     Type
 17823 ;;                  1    wreg      void 
 17824 ;; Registers used:
 17825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17826 ;; Tracked objects:
 17827 ;;		On entry : 0/0
 17828 ;;		On exit  : 0/0
 17829 ;;		Unchanged: 0/0
 17830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17831 ;;      Params:         0       1       0       0       0       0       0       0       0
 17832 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17833 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17834 ;;      Totals:         0       3       0       0       0       0       0       0       0
 17835 ;;Total ram usage:        3 bytes
 17836 ;; Hardware stack levels used:    1
 17837 ;; Hardware stack levels required when called:    7
 17838 ;; This function calls:
 17839 ;;		_ENC424J600_readControlRegisterUnbanked
 17840 ;;		_ENC424J600_writeControlRegisterUnbanked
 17841 ;; This function is called by:
 17842 ;;		_handleStackBackgroundTasks
 17843 ;;		_main
 17844 ;; This function uses a non-reentrant model
 17845 ;;
 17846                           
 17847                           	psect	text69
 17848  003C10                     __ptext69:
 17849                           	opt stack 0
 17850  003C10                     _ethernetController_setLEDConfig:
 17851                           	opt stack 22
 17852                           
 17853                           ; BSR set to: 0
 17854                           ;incstack = 0
 17855                           ;ethernetController_setLEDConfig@LED stored from wreg
 17856  003C10  0100               	movlb	0	; () banked
 17857  003C12  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 17858                           
 17859                           ;ENC424J600.c: 460: uint8_t data;
 17860                           ;ENC424J600.c: 461: ENC424J600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 17861  003C14  0E70               	movlw	low ethernetController_setLEDConfig@data
 17862  003C16  0100               	movlb	0	; () banked
 17863  003C18  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 17864  003C1A  0E00               	movlw	high ethernetController_setLEDConfig@data
 17865  003C1C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 17866  003C1E  0E75               	movlw	117
 17867  003C20  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 17868                           
 17869                           ;ENC424J600.c: 462: if (LED == LEDB) {
 17870  003C24  0100               	movlb	0	; () banked
 17871  003C26  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 17872  003C28  B4D8               	btfsc	status,2,c
 17873  003C2A  D00B               	goto	l205
 17874  003C2C  D015               	goto	l204
 17875  003C2E                     
 17876                           ; BSR set to: 0
 17877                           ;ENC424J600.c: 467: data &= ~0x0f;
 17878                           
 17879                           ; BSR set to: 0
 17880                           
 17881                           ;ENC424J600.c: 466: case LED_OFF:
 17882                           
 17883                           ; BSR set to: 0
 17884  003C2E  0EF0               	movlw	240
 17885  003C30  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17886                           
 17887                           ; BSR set to: 0
 17888                           ;ENC424J600.c: 468: data |= 0x01;
 17889  003C32  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 17890                           
 17891                           ;ENC424J600.c: 469: break;
 17892  003C34  D02C               	goto	l216
 17893  003C36                     
 17894                           ; BSR set to: 0
 17895                           ;ENC424J600.c: 471: data &= ~0x0f;
 17896                           
 17897                           ; BSR set to: 0
 17898  003C36  0EF0               	movlw	240
 17899  003C38  D018               	goto	L5
 17900  003C3A                     
 17901                           ; BSR set to: 0
 17902                           ;ENC424J600.c: 474: data &= ~0x0f;
 17903                           
 17904                           ; BSR set to: 0
 17905  003C3A  0EF0               	movlw	240
 17906  003C3C  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17907                           
 17908                           ;ENC424J600.c: 475: data |= 0x06;
 17909  003C3E  0E06               	movlw	6
 17910  003C40  D019               	goto	L6
 17911  003C42                     l205:
 17912                           
 17913                           ; BSR set to: 0
 17914                           
 17915                           ; BSR set to: 0
 17916  003C42  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 17917                           
 17918                           ; Switch size 1, requested type "space"
 17919                           ; Number of cases is 3, Range of values is 0 to 2
 17920                           ; switch strategies available:
 17921                           ; Name         Instructions Cycles
 17922                           ; simple_byte           10     6 (average)
 17923                           ;	Chosen strategy is simple_byte
 17924  003C44  0A00               	xorlw	0	; case 0
 17925  003C46  B4D8               	btfsc	status,2,c
 17926  003C48  D7F6               	goto	l209
 17927  003C4A  0A01               	xorlw	1	; case 1
 17928  003C4C  B4D8               	btfsc	status,2,c
 17929  003C4E  D7EF               	goto	l206
 17930  003C50  0A03               	xorlw	3	; case 2
 17931  003C52  B4D8               	btfsc	status,2,c
 17932  003C54  D7F2               	goto	l210
 17933  003C56  D7EB               	goto	l206
 17934  003C58                     l204:
 17935                           
 17936                           ; BSR set to: 0
 17937                           
 17938                           ; BSR set to: 0
 17939  003C58  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 17940  003C5A  B4D8               	btfsc	status,2,c
 17941  003C5C  D00D               	goto	l213
 17942  003C5E  D017               	goto	l216
 17943  003C60                     
 17944                           ; BSR set to: 0
 17945                           ;ENC424J600.c: 482: data &= ~(0x0f << 4);
 17946                           
 17947                           ; BSR set to: 0
 17948                           
 17949                           ;ENC424J600.c: 481: case LED_OFF:
 17950                           
 17951                           ; BSR set to: 0
 17952  003C60  0E0F               	movlw	15
 17953  003C62  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17954                           
 17955                           ; BSR set to: 0
 17956                           ;ENC424J600.c: 483: data |= (0x01 << 4);
 17957  003C64  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 17958                           
 17959                           ;ENC424J600.c: 484: break;
 17960  003C66  D013               	goto	l216
 17961  003C68                     
 17962                           ; BSR set to: 0
 17963                           ;ENC424J600.c: 486: data &= ~(0x0f << 4);
 17964                           
 17965                           ; BSR set to: 0
 17966  003C68  0E0F               	movlw	15
 17967  003C6A                     L5:
 17968  003C6A  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17969                           
 17970                           ;ENC424J600.c: 487: break;
 17971  003C6C  D010               	goto	l216
 17972  003C6E                     
 17973                           ; BSR set to: 0
 17974                           ;ENC424J600.c: 489: data &= ~(0x0f << 4);
 17975                           
 17976                           ; BSR set to: 0
 17977  003C6E  0E0F               	movlw	15
 17978  003C70  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17979                           
 17980                           ;ENC424J600.c: 490: data |= (0x06 << 4);
 17981  003C72  0E60               	movlw	96
 17982  003C74                     L6:
 17983  003C74  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 17984                           
 17985                           ; BSR set to: 0
 17986                           ;ENC424J600.c: 492: }
 17987                           
 17988                           ;ENC424J600.c: 491: break;
 17989  003C76  D00B               	goto	l216
 17990  003C78                     l213:
 17991                           
 17992                           ; BSR set to: 0
 17993                           
 17994                           ; BSR set to: 0
 17995  003C78  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 17996                           
 17997                           ; Switch size 1, requested type "space"
 17998                           ; Number of cases is 3, Range of values is 0 to 2
 17999                           ; switch strategies available:
 18000                           ; Name         Instructions Cycles
 18001                           ; simple_byte           10     6 (average)
 18002                           ;	Chosen strategy is simple_byte
 18003  003C7A  0A00               	xorlw	0	; case 0
 18004  003C7C  B4D8               	btfsc	status,2,c
 18005  003C7E  D7F4               	goto	l217
 18006  003C80  0A01               	xorlw	1	; case 1
 18007  003C82  B4D8               	btfsc	status,2,c
 18008  003C84  D7ED               	goto	l214
 18009  003C86  0A03               	xorlw	3	; case 2
 18010  003C88  B4D8               	btfsc	status,2,c
 18011  003C8A  D7F1               	goto	l218
 18012  003C8C  D7E9               	goto	l214
 18013  003C8E                     l216:
 18014                           
 18015                           ; BSR set to: 0
 18016                           ;ENC424J600.c: 493: }
 18017                           ;ENC424J600.c: 494: ENC424J600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 18018                           
 18019                           ; BSR set to: 0
 18020                           
 18021                           ; BSR set to: 0
 18022                           
 18023                           ; BSR set to: 0
 18024  003C8E  0E70               	movlw	low ethernetController_setLEDConfig@data
 18025  003C90  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18026  003C92  0E00               	movlw	high ethernetController_setLEDConfig@data
 18027  003C94  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18028  003C96  0E75               	movlw	117
 18029  003C98  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18030  003C9C  0012               	return		;funcret
 18031  003C9E                     __end_of_ethernetController_setLEDConfig:
 18032                           	opt stack 0
 18033                           tblptru	equ	0xFF8
 18034                           tblptrh	equ	0xFF7
 18035                           tblptrl	equ	0xFF6
 18036                           tablat	equ	0xFF5
 18037                           prodh	equ	0xFF4
 18038                           prodl	equ	0xFF3
 18039                           intcon	equ	0xFF2
 18040                           intcon3	equ	0xFF0
 18041                           postinc0	equ	0xFEE
 18042                           plusw0	equ	0xFEB
 18043                           fsr0h	equ	0xFEA
 18044                           fsr0l	equ	0xFE9
 18045                           wreg	equ	0xFE8
 18046                           indf1	equ	0xFE7
 18047                           postinc1	equ	0xFE6
 18048                           postdec1	equ	0xFE5
 18049                           plusw1	equ	0xFE3
 18050                           fsr1h	equ	0xFE2
 18051                           fsr1l	equ	0xFE1
 18052                           indf2	equ	0xFDF
 18053                           postinc2	equ	0xFDE
 18054                           postdec2	equ	0xFDD
 18055                           plusw2	equ	0xFDB
 18056                           fsr2h	equ	0xFDA
 18057                           fsr2l	equ	0xFD9
 18058                           status	equ	0xFD8
 18059                           
 18060 ;; *************** function _ethernetController_pollInterruptFlags *****************
 18061 ;; Defined at:
 18062 ;;		line 315 in file "src/enc424j600/ENC424J600.c"
 18063 ;; Parameters:    Size  Location     Type
 18064 ;;		None
 18065 ;; Auto vars:     Size  Location     Type
 18066 ;;  reg             2   29[BANK0 ] unsigned int 
 18067 ;;  flags           2   27[BANK0 ] struct interruptFlags
 18068 ;; Return value:  Size  Location     Type
 18069 ;;                  2   24[BANK0 ] struct interruptFlags
 18070 ;; Registers used:
 18071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18072 ;; Tracked objects:
 18073 ;;		On entry : 0/0
 18074 ;;		On exit  : 0/0
 18075 ;;		Unchanged: 0/0
 18076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18077 ;;      Params:         0       2       0       0       0       0       0       0       0
 18078 ;;      Locals:         0       4       0       0       0       0       0       0       0
 18079 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18080 ;;      Totals:         0       7       0       0       0       0       0       0       0
 18081 ;;Total ram usage:        7 bytes
 18082 ;; Hardware stack levels used:    1
 18083 ;; Hardware stack levels required when called:    8
 18084 ;; This function calls:
 18085 ;;		_ENC424J600_getInterruptFlags
 18086 ;; This function is called by:
 18087 ;;		_handleStackBackgroundTasks
 18088 ;; This function uses a non-reentrant model
 18089 ;;
 18090                           
 18091                           	psect	text70
 18092  002EE0                     __ptext70:
 18093                           	opt stack 0
 18094  002EE0                     _ethernetController_pollInterruptFlags:
 18095                           	opt stack 21
 18096                           
 18097                           ;ENC424J600.c: 316: interruptFlags_t flags;
 18098                           ;ENC424J600.c: 317: uint16_t reg = ENC424J600_getInterruptFlags();
 18099                           
 18100                           ;incstack = 0
 18101  002EE0  ECCA  F022         	call	_ENC424J600_getInterruptFlags	;wreg free
 18102  002EE4  C06E  F07D         	movff	?_ENC424J600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 18103  002EE8  C06F  F07E         	movff	?_ENC424J600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 18104                           
 18105                           ;ENC424J600.c: 318: flags.MODEXIF = (reg & (1 << 14)) != 0 ? 1 : 0;
 18106  002EEC  0100               	movlb	0	; () banked
 18107  002EEE  AD7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 18108  002EF0  D003               	goto	u10700
 18109  002EF2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18110  002EF4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18111  002EF6  D002               	goto	u10718
 18112  002EF8                     u10700:
 18113  002EF8  0100               	movlb	0	; () banked
 18114  002EFA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18115  002EFC                     u10718:
 18116  002EFC  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18117  002EFE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18118  002F00  0BFE               	andlw	-2
 18119  002F02  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18120  002F04  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18121                           
 18122                           ; BSR set to: 0
 18123                           ;ENC424J600.c: 319: flags.HASHIF = (reg & (1 << 13)) != 0 ? 1 : 0;
 18124  002F06  AB7E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 18125  002F08  D003               	goto	u10720
 18126  002F0A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18127  002F0C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18128  002F0E  D002               	goto	u10738
 18129  002F10                     u10720:
 18130  002F10  0100               	movlb	0	; () banked
 18131  002F12  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18132  002F14                     u10738:
 18133  002F14  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18134  002F16  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18135  002F18  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18136  002F1A  0BFD               	andlw	-3
 18137  002F1C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18138  002F1E  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18139                           
 18140                           ; BSR set to: 0
 18141                           ;ENC424J600.c: 320: flags.AESIF = (reg & (1 << 12)) != 0 ? 1 : 0;
 18142  002F20  A97E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 18143  002F22  D003               	goto	u10740
 18144  002F24  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18145  002F26  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18146  002F28  D002               	goto	u10758
 18147  002F2A                     u10740:
 18148  002F2A  0100               	movlb	0	; () banked
 18149  002F2C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18150  002F2E                     u10758:
 18151  002F2E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18152  002F30  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18153  002F32  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18154  002F34  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18155  002F36  0BFB               	andlw	-5
 18156  002F38  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18157  002F3A  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18158                           
 18159                           ; BSR set to: 0
 18160                           ;ENC424J600.c: 321: flags.LINKIF = (reg & (1 << 11)) != 0 ? 1 : 0;
 18161  002F3C  A77E               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 18162  002F3E  D003               	goto	u10760
 18163  002F40  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18164  002F42  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18165  002F44  D002               	goto	u10778
 18166  002F46                     u10760:
 18167  002F46  0100               	movlb	0	; () banked
 18168  002F48  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18169  002F4A                     u10778:
 18170  002F4A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18171  002F4C  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18172  002F4E  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18173  002F50  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18174  002F52  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18175  002F54  0BF7               	andlw	-9
 18176  002F56  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18177  002F58  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18178                           
 18179                           ; BSR set to: 0
 18180                           ;ENC424J600.c: 323: flags.PKTIF = (reg & (1 << 6)) != 0 ? 1 : 0;
 18181  002F5A  AD7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 18182  002F5C  D003               	goto	u10780
 18183  002F5E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18184  002F60  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18185  002F62  D002               	goto	u10798
 18186  002F64                     u10780:
 18187  002F64  0100               	movlb	0	; () banked
 18188  002F66  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18189  002F68                     u10798:
 18190  002F68  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18191  002F6A  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18192  002F6C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18193  002F6E  0BEF               	andlw	-17
 18194  002F70  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18195  002F72  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18196                           
 18197                           ; BSR set to: 0
 18198                           ;ENC424J600.c: 324: flags.DMAIF = (reg & (1 << 5)) != 0 ? 1 : 0;
 18199  002F74  AB7D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 18200  002F76  D003               	goto	u10800
 18201  002F78  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18202  002F7A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18203  002F7C  D002               	goto	u10818
 18204  002F7E                     u10800:
 18205  002F7E  0100               	movlb	0	; () banked
 18206  002F80  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18207  002F82                     u10818:
 18208  002F82  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18209  002F84  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18210  002F86  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18211  002F88  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18212  002F8A  0BDF               	andlw	-33
 18213  002F8C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18214  002F8E  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18215                           
 18216                           ; BSR set to: 0
 18217                           ;ENC424J600.c: 326: flags.TXIF = (reg & (1 << 3)) != 0 ? 1 : 0;
 18218  002F90  A77D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),3,b
 18219  002F92  D003               	goto	u10820
 18220  002F94  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18221  002F96  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18222  002F98  D002               	goto	u10838
 18223  002F9A                     u10820:
 18224  002F9A  0100               	movlb	0	; () banked
 18225  002F9C  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18226  002F9E                     u10838:
 18227  002F9E  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18228  002FA0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18229  002FA2  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18230  002FA4  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18231  002FA6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18232  002FA8  0BBF               	andlw	-65
 18233  002FAA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18234  002FAC  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18235                           
 18236                           ; BSR set to: 0
 18237                           ;ENC424J600.c: 327: flags.TXABTIF = (reg & (1 << 2)) != 0 ? 1 : 0;
 18238  002FAE  A57D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 18239  002FB0  D003               	goto	u10840
 18240  002FB2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18241  002FB4  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18242  002FB6  D002               	goto	u10858
 18243  002FB8                     u10840:
 18244  002FB8  0100               	movlb	0	; () banked
 18245  002FBA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18246  002FBC                     u10858:
 18247  002FBC  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18248  002FBE  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18249  002FC0  517B               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 18250  002FC2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18251  002FC4  0B7F               	andlw	-129
 18252  002FC6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18253  002FC8  6F7B               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 18254                           
 18255                           ; BSR set to: 0
 18256                           ;ENC424J600.c: 328: flags.RXABTIF = (reg & (1 << 1)) != 0 ? 1 : 0;
 18257  002FCA  A37D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 18258  002FCC  D003               	goto	u10860
 18259  002FCE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18260  002FD0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18261  002FD2  D002               	goto	u10878
 18262  002FD4                     u10860:
 18263  002FD4  0100               	movlb	0	; () banked
 18264  002FD6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18265  002FD8                     u10878:
 18266  002FD8  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18267  002FDA  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18268  002FDC  0BFE               	andlw	-2
 18269  002FDE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18270  002FE0  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18271                           
 18272                           ; BSR set to: 0
 18273                           ;ENC424J600.c: 329: flags.PCFULIF = (reg & (1 << 0)) != 0 ? 1 : 0;
 18274  002FE2  A17D               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 18275  002FE4  D003               	goto	u10880
 18276  002FE6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18277  002FE8  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18278  002FEA  D002               	goto	u10898
 18279  002FEC                     u10880:
 18280  002FEC  0100               	movlb	0	; () banked
 18281  002FEE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 18282  002FF0                     u10898:
 18283  002FF0  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 18284  002FF2  517C               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 18285  002FF4  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18286  002FF6  0BFD               	andlw	-3
 18287  002FF8  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 18288  002FFA  6F7C               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 18289                           
 18290                           ; BSR set to: 0
 18291                           ;ENC424J600.c: 330: return flags;
 18292  002FFC  C07B  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 18293  003000  C07C  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 18294  003004  0012               	return	
 18295  003006                     __end_of_ethernetController_pollInterruptFlags:
 18296                           	opt stack 0
 18297                           tblptru	equ	0xFF8
 18298                           tblptrh	equ	0xFF7
 18299                           tblptrl	equ	0xFF6
 18300                           tablat	equ	0xFF5
 18301                           prodh	equ	0xFF4
 18302                           prodl	equ	0xFF3
 18303                           intcon	equ	0xFF2
 18304                           intcon3	equ	0xFF0
 18305                           postinc0	equ	0xFEE
 18306                           plusw0	equ	0xFEB
 18307                           fsr0h	equ	0xFEA
 18308                           fsr0l	equ	0xFE9
 18309                           wreg	equ	0xFE8
 18310                           indf1	equ	0xFE7
 18311                           postinc1	equ	0xFE6
 18312                           postdec1	equ	0xFE5
 18313                           plusw1	equ	0xFE3
 18314                           fsr1h	equ	0xFE2
 18315                           fsr1l	equ	0xFE1
 18316                           indf2	equ	0xFDF
 18317                           postinc2	equ	0xFDE
 18318                           postdec2	equ	0xFDD
 18319                           plusw2	equ	0xFDB
 18320                           fsr2h	equ	0xFDA
 18321                           fsr2l	equ	0xFD9
 18322                           status	equ	0xFD8
 18323                           
 18324 ;; *************** function _ENC424J600_getInterruptFlags *****************
 18325 ;; Defined at:
 18326 ;;		line 735 in file "src/enc424j600/ENC424J600.c"
 18327 ;; Parameters:    Size  Location     Type
 18328 ;;		None
 18329 ;; Auto vars:     Size  Location     Type
 18330 ;;  high            1   23[BANK0 ] unsigned char 
 18331 ;;  low             1   22[BANK0 ] unsigned char 
 18332 ;; Return value:  Size  Location     Type
 18333 ;;                  2   14[BANK0 ] unsigned int 
 18334 ;; Registers used:
 18335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18336 ;; Tracked objects:
 18337 ;;		On entry : 0/0
 18338 ;;		On exit  : 0/0
 18339 ;;		Unchanged: 0/0
 18340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18341 ;;      Params:         0       2       0       0       0       0       0       0       0
 18342 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18343 ;;      Temps:          0       6       0       0       0       0       0       0       0
 18344 ;;      Totals:         0      10       0       0       0       0       0       0       0
 18345 ;;Total ram usage:       10 bytes
 18346 ;; Hardware stack levels used:    1
 18347 ;; Hardware stack levels required when called:    7
 18348 ;; This function calls:
 18349 ;;		_ENC424J600_readControlRegisterUnbanked
 18350 ;; This function is called by:
 18351 ;;		_ethernetController_pollInterruptFlags
 18352 ;; This function uses a non-reentrant model
 18353 ;;
 18354                           
 18355                           	psect	text71
 18356  004594                     __ptext71:
 18357                           	opt stack 0
 18358  004594                     _ENC424J600_getInterruptFlags:
 18359                           	opt stack 21
 18360                           
 18361                           ;ENC424J600.c: 736: uint8_t low, high;
 18362                           ;ENC424J600.c: 737: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 18363                           
 18364                           ; BSR set to: 0
 18365                           ;incstack = 0
 18366  004594  0E77               	movlw	low ENC424J600_getInterruptFlags@high
 18367  004596  0100               	movlb	0	; () banked
 18368  004598  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18369  00459A  0E00               	movlw	high ENC424J600_getInterruptFlags@high
 18370  00459C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18371  00459E  0E1D               	movlw	29
 18372  0045A0  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18373                           
 18374                           ;ENC424J600.c: 738: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 18375  0045A4  0E76               	movlw	low ENC424J600_getInterruptFlags@low
 18376  0045A6  0100               	movlb	0	; () banked
 18377  0045A8  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18378  0045AA  0E00               	movlw	high ENC424J600_getInterruptFlags@low
 18379  0045AC  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18380  0045AE  0E1C               	movlw	28
 18381  0045B0  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18382                           
 18383                           ;ENC424J600.c: 739: return (((uint16_t) low & 0x00ff) | (((uint16_t) high << 8)&0xff00))
      +                          ;
 18384  0045B4  0E00               	movlw	0
 18385  0045B6  0100               	movlb	0	; () banked
 18386  0045B8  6F70               	movwf	??_ENC424J600_getInterruptFlags& (0+255),b
 18387  0045BA  0EFF               	movlw	255
 18388  0045BC  6F71               	movwf	(??_ENC424J600_getInterruptFlags+1)& (0+255),b
 18389  0045BE  5177               	movf	ENC424J600_getInterruptFlags@high& (0+255),w,b
 18390  0045C0  6F73               	movwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),b
 18391  0045C2  6B72               	clrf	(??_ENC424J600_getInterruptFlags+2)& (0+255),b
 18392  0045C4  5170               	movf	??_ENC424J600_getInterruptFlags& (0+255),w,b
 18393  0045C6  1772               	andwf	(??_ENC424J600_getInterruptFlags+2)& (0+255),f,b
 18394  0045C8  5171               	movf	(??_ENC424J600_getInterruptFlags+1)& (0+255),w,b
 18395  0045CA  1773               	andwf	(??_ENC424J600_getInterruptFlags+3)& (0+255),f,b
 18396  0045CC  5176               	movf	ENC424J600_getInterruptFlags@low& (0+255),w,b
 18397  0045CE  6F74               	movwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),b
 18398  0045D0  6B75               	clrf	(??_ENC424J600_getInterruptFlags+5)& (0+255),b
 18399  0045D2  5172               	movf	(??_ENC424J600_getInterruptFlags+2)& (0+255),w,b
 18400  0045D4  1174               	iorwf	(??_ENC424J600_getInterruptFlags+4)& (0+255),w,b
 18401  0045D6  6F6E               	movwf	?_ENC424J600_getInterruptFlags& (0+255),b
 18402  0045D8  5173               	movf	(??_ENC424J600_getInterruptFlags+3)& (0+255),w,b
 18403  0045DA  1175               	iorwf	(??_ENC424J600_getInterruptFlags+5)& (0+255),w,b
 18404  0045DC  6F6F               	movwf	(?_ENC424J600_getInterruptFlags+1)& (0+255),b
 18405  0045DE  0012               	return	
 18406  0045E0                     __end_of_ENC424J600_getInterruptFlags:
 18407                           	opt stack 0
 18408                           tblptru	equ	0xFF8
 18409                           tblptrh	equ	0xFF7
 18410                           tblptrl	equ	0xFF6
 18411                           tablat	equ	0xFF5
 18412                           prodh	equ	0xFF4
 18413                           prodl	equ	0xFF3
 18414                           intcon	equ	0xFF2
 18415                           intcon3	equ	0xFF0
 18416                           postinc0	equ	0xFEE
 18417                           plusw0	equ	0xFEB
 18418                           fsr0h	equ	0xFEA
 18419                           fsr0l	equ	0xFE9
 18420                           wreg	equ	0xFE8
 18421                           indf1	equ	0xFE7
 18422                           postinc1	equ	0xFE6
 18423                           postdec1	equ	0xFE5
 18424                           plusw1	equ	0xFE3
 18425                           fsr1h	equ	0xFE2
 18426                           fsr1l	equ	0xFE1
 18427                           indf2	equ	0xFDF
 18428                           postinc2	equ	0xFDE
 18429                           postdec2	equ	0xFDD
 18430                           plusw2	equ	0xFDB
 18431                           fsr2h	equ	0xFDA
 18432                           fsr2l	equ	0xFD9
 18433                           status	equ	0xFD8
 18434                           
 18435 ;; *************** function _ethernetController_newPacketAvailable *****************
 18436 ;; Defined at:
 18437 ;;		line 406 in file "src/enc424j600/ENC424J600.c"
 18438 ;; Parameters:    Size  Location     Type
 18439 ;;		None
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;		None
 18442 ;; Return value:  Size  Location     Type
 18443 ;;                  1    wreg      unsigned char 
 18444 ;; Registers used:
 18445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18451 ;;      Params:         0       0       0       0       0       0       0       0       0
 18452 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18453 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18454 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18455 ;;Total ram usage:        0 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; Hardware stack levels required when called:    8
 18458 ;; This function calls:
 18459 ;;		_ENC424J600_getPacketCount
 18460 ;; This function is called by:
 18461 ;;		_handleStackBackgroundTasks
 18462 ;; This function uses a non-reentrant model
 18463 ;;
 18464                           
 18465                           	psect	text72
 18466  004CA0                     __ptext72:
 18467                           	opt stack 0
 18468  004CA0                     _ethernetController_newPacketAvailable:
 18469                           	opt stack 21
 18470                           
 18471                           ;ENC424J600.c: 407: return (unsigned) (ENC424J600_getPacketCount() != 0);
 18472                           
 18473                           ; BSR set to: 0
 18474                           ;incstack = 0
 18475  004CA0  EC13  F026         	call	_ENC424J600_getPacketCount	;wreg free
 18476  004CA4  0900               	iorlw	0
 18477  004CA6  B4D8               	btfsc	status,2,c
 18478  004CA8  D002               	goto	u10900
 18479  004CAA  0E01               	movlw	1
 18480  004CAC  0012               	return	
 18481  004CAE                     u10900:
 18482  004CAE  0E00               	movlw	0
 18483  004CB0  0012               	return	
 18484  004CB2                     __end_of_ethernetController_newPacketAvailable:
 18485                           	opt stack 0
 18486                           tblptru	equ	0xFF8
 18487                           tblptrh	equ	0xFF7
 18488                           tblptrl	equ	0xFF6
 18489                           tablat	equ	0xFF5
 18490                           prodh	equ	0xFF4
 18491                           prodl	equ	0xFF3
 18492                           intcon	equ	0xFF2
 18493                           intcon3	equ	0xFF0
 18494                           postinc0	equ	0xFEE
 18495                           plusw0	equ	0xFEB
 18496                           fsr0h	equ	0xFEA
 18497                           fsr0l	equ	0xFE9
 18498                           wreg	equ	0xFE8
 18499                           indf1	equ	0xFE7
 18500                           postinc1	equ	0xFE6
 18501                           postdec1	equ	0xFE5
 18502                           plusw1	equ	0xFE3
 18503                           fsr1h	equ	0xFE2
 18504                           fsr1l	equ	0xFE1
 18505                           indf2	equ	0xFDF
 18506                           postinc2	equ	0xFDE
 18507                           postdec2	equ	0xFDD
 18508                           plusw2	equ	0xFDB
 18509                           fsr2h	equ	0xFDA
 18510                           fsr2l	equ	0xFD9
 18511                           status	equ	0xFD8
 18512                           
 18513 ;; *************** function _ethernetController_clearInterruptFlag *****************
 18514 ;; Defined at:
 18515 ;;		line 333 in file "src/enc424j600/ENC424J600.c"
 18516 ;; Parameters:    Size  Location     Type
 18517 ;;  flag            1    wreg     unsigned char 
 18518 ;; Auto vars:     Size  Location     Type
 18519 ;;  flag            1   18[BANK0 ] unsigned char 
 18520 ;; Return value:  Size  Location     Type
 18521 ;;                  1    wreg      void 
 18522 ;; Registers used:
 18523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18524 ;; Tracked objects:
 18525 ;;		On entry : 0/0
 18526 ;;		On exit  : 0/0
 18527 ;;		Unchanged: 0/0
 18528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18529 ;;      Params:         0       0       0       0       0       0       0       0       0
 18530 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18531 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18532 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18533 ;;Total ram usage:        1 bytes
 18534 ;; Hardware stack levels used:    1
 18535 ;; Hardware stack levels required when called:    8
 18536 ;; This function calls:
 18537 ;;		_ENC424J600_clearInterruptFlag
 18538 ;; This function is called by:
 18539 ;;		_handleStackBackgroundTasks
 18540 ;; This function uses a non-reentrant model
 18541 ;;
 18542                           
 18543                           	psect	text73
 18544  004CD0                     __ptext73:
 18545                           	opt stack 0
 18546  004CD0                     _ethernetController_clearInterruptFlag:
 18547                           	opt stack 21
 18548                           
 18549                           ;incstack = 0
 18550                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 18551  004CD0  0100               	movlb	0	; () banked
 18552  004CD2  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 18553                           
 18554                           ;ENC424J600.c: 334: ENC424J600_clearInterruptFlag(flag);
 18555  004CD4  0100               	movlb	0	; () banked
 18556  004CD6  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 18557  004CD8  EC94  F01E         	call	_ENC424J600_clearInterruptFlag
 18558  004CDC  0012               	return		;funcret
 18559  004CDE                     __end_of_ethernetController_clearInterruptFlag:
 18560                           	opt stack 0
 18561                           tblptru	equ	0xFF8
 18562                           tblptrh	equ	0xFF7
 18563                           tblptrl	equ	0xFF6
 18564                           tablat	equ	0xFF5
 18565                           prodh	equ	0xFF4
 18566                           prodl	equ	0xFF3
 18567                           intcon	equ	0xFF2
 18568                           intcon3	equ	0xFF0
 18569                           postinc0	equ	0xFEE
 18570                           plusw0	equ	0xFEB
 18571                           fsr0h	equ	0xFEA
 18572                           fsr0l	equ	0xFE9
 18573                           wreg	equ	0xFE8
 18574                           indf1	equ	0xFE7
 18575                           postinc1	equ	0xFE6
 18576                           postdec1	equ	0xFE5
 18577                           plusw1	equ	0xFE3
 18578                           fsr1h	equ	0xFE2
 18579                           fsr1l	equ	0xFE1
 18580                           indf2	equ	0xFDF
 18581                           postinc2	equ	0xFDE
 18582                           postdec2	equ	0xFDD
 18583                           plusw2	equ	0xFDB
 18584                           fsr2h	equ	0xFDA
 18585                           fsr2l	equ	0xFD9
 18586                           status	equ	0xFD8
 18587                           
 18588 ;; *************** function _ENC424J600_clearInterruptFlag *****************
 18589 ;; Defined at:
 18590 ;;		line 742 in file "src/enc424j600/ENC424J600.c"
 18591 ;; Parameters:    Size  Location     Type
 18592 ;;  flag            1    wreg     unsigned char 
 18593 ;; Auto vars:     Size  Location     Type
 18594 ;;  flag            1   16[BANK0 ] unsigned char 
 18595 ;;  temp            1   17[BANK0 ] unsigned char 
 18596 ;; Return value:  Size  Location     Type
 18597 ;;                  1    wreg      void 
 18598 ;; Registers used:
 18599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18600 ;; Tracked objects:
 18601 ;;		On entry : 0/0
 18602 ;;		On exit  : 0/0
 18603 ;;		Unchanged: 0/0
 18604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18605 ;;      Params:         0       0       0       0       0       0       0       0       0
 18606 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18607 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18608 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18609 ;;Total ram usage:        4 bytes
 18610 ;; Hardware stack levels used:    1
 18611 ;; Hardware stack levels required when called:    7
 18612 ;; This function calls:
 18613 ;;		_ENC424J600_readControlRegisterUnbanked
 18614 ;;		_ENC424J600_writeControlRegisterUnbanked
 18615 ;; This function is called by:
 18616 ;;		_ethernetController_clearInterruptFlag
 18617 ;; This function uses a non-reentrant model
 18618 ;;
 18619                           
 18620                           	psect	text74
 18621  003D28                     __ptext74:
 18622                           	opt stack 0
 18623  003D28                     _ENC424J600_clearInterruptFlag:
 18624                           	opt stack 21
 18625                           
 18626                           ;incstack = 0
 18627                           ;ENC424J600_clearInterruptFlag@flag stored from wreg
 18628  003D28  0100               	movlb	0	; () banked
 18629  003D2A  6F70               	movwf	ENC424J600_clearInterruptFlag@flag& (0+255),b
 18630                           
 18631                           ;ENC424J600.c: 743: uint8_t temp;
 18632                           ;ENC424J600.c: 744: if (flag < 8) {
 18633  003D2C  0E08               	movlw	8
 18634  003D2E  0100               	movlb	0	; () banked
 18635  003D30  6170               	cpfslt	ENC424J600_clearInterruptFlag@flag& (0+255),b
 18636  003D32  D01E               	goto	l317
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;ENC424J600.c: 745: ENC424J600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 18640  003D34  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18641  003D36  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18642  003D38  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18643  003D3A  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18644  003D3C  0E1C               	movlw	28
 18645  003D3E  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18646                           
 18647                           ;ENC424J600.c: 746: temp &= ~(1 << flag);
 18648  003D42  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 18649  003D46  0E01               	movlw	1
 18650  003D48  0100               	movlb	0	; () banked
 18651  003D4A  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 18652  003D4C  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18653  003D4E  D002               	goto	u10374
 18654  003D50                     u10375:
 18655  003D50  90D8               	bcf	status,0,c
 18656  003D52  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 18657  003D54                     u10374:
 18658  003D54  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18659  003D56  D7FC               	goto	u10375
 18660  003D58  0100               	movlb	0	; () banked
 18661  003D5A  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 18662  003D5C  0AFF               	xorlw	255
 18663  003D5E  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 18664                           
 18665                           ; BSR set to: 0
 18666                           ;ENC424J600.c: 747: ENC424J600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 18667  003D60  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18668  003D62  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18669  003D64  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18670  003D66  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18671  003D68  0E1C               	movlw	28
 18672  003D6A  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18673                           
 18674                           ;ENC424J600.c: 748: } else {
 18675  003D6E  0012               	return	
 18676  003D70                     l317:
 18677                           
 18678                           ;ENC424J600.c: 749: flag -= 8;
 18679  003D70  0E08               	movlw	8
 18680  003D72  0100               	movlb	0	; () banked
 18681  003D74  5F70               	subwf	ENC424J600_clearInterruptFlag@flag& (0+255),f,b
 18682                           
 18683                           ; BSR set to: 0
 18684                           ;ENC424J600.c: 750: ENC424J600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 18685  003D76  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18686  003D78  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18687  003D7A  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18688  003D7C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18689  003D7E  0E1D               	movlw	29
 18690  003D80  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18691                           
 18692                           ;ENC424J600.c: 751: temp &= ~(1 << flag);
 18693  003D84  C070  F06E         	movff	ENC424J600_clearInterruptFlag@flag,??_ENC424J600_clearInterruptFlag
 18694  003D88  0E01               	movlw	1
 18695  003D8A  0100               	movlb	0	; () banked
 18696  003D8C  6F6F               	movwf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),b
 18697  003D8E  2B6E               	incf	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18698  003D90  D002               	goto	u10384
 18699  003D92                     u10385:
 18700  003D92  90D8               	bcf	status,0,c
 18701  003D94  376F               	rlcf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),f,b
 18702  003D96                     u10384:
 18703  003D96  2F6E               	decfsz	??_ENC424J600_clearInterruptFlag& (0+255),f,b
 18704  003D98  D7FC               	goto	u10385
 18705  003D9A  0100               	movlb	0	; () banked
 18706  003D9C  516F               	movf	(??_ENC424J600_clearInterruptFlag+1)& (0+255),w,b
 18707  003D9E  0AFF               	xorlw	255
 18708  003DA0  1771               	andwf	ENC424J600_clearInterruptFlag@temp& (0+255),f,b
 18709                           
 18710                           ;ENC424J600.c: 752: ENC424J600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 18711  003DA2  0E71               	movlw	low ENC424J600_clearInterruptFlag@temp
 18712  003DA4  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18713  003DA6  0E00               	movlw	high ENC424J600_clearInterruptFlag@temp
 18714  003DA8  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18715  003DAA  0E1D               	movlw	29
 18716  003DAC  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18717  003DB0  0012               	return	
 18718  003DB2                     __end_of_ENC424J600_clearInterruptFlag:
 18719                           	opt stack 0
 18720                           tblptru	equ	0xFF8
 18721                           tblptrh	equ	0xFF7
 18722                           tblptrl	equ	0xFF6
 18723                           tablat	equ	0xFF5
 18724                           prodh	equ	0xFF4
 18725                           prodl	equ	0xFF3
 18726                           intcon	equ	0xFF2
 18727                           intcon3	equ	0xFF0
 18728                           postinc0	equ	0xFEE
 18729                           plusw0	equ	0xFEB
 18730                           fsr0h	equ	0xFEA
 18731                           fsr0l	equ	0xFE9
 18732                           wreg	equ	0xFE8
 18733                           indf1	equ	0xFE7
 18734                           postinc1	equ	0xFE6
 18735                           postdec1	equ	0xFE5
 18736                           plusw1	equ	0xFE3
 18737                           fsr1h	equ	0xFE2
 18738                           fsr1l	equ	0xFE1
 18739                           indf2	equ	0xFDF
 18740                           postinc2	equ	0xFDE
 18741                           postdec2	equ	0xFDD
 18742                           plusw2	equ	0xFDB
 18743                           fsr2h	equ	0xFDA
 18744                           fsr2l	equ	0xFD9
 18745                           status	equ	0xFD8
 18746                           
 18747 ;; *************** function _ethernetController_init *****************
 18748 ;; Defined at:
 18749 ;;		line 33 in file "src/enc424j600/ENC424J600.c"
 18750 ;; Parameters:    Size  Location     Type
 18751 ;;		None
 18752 ;; Auto vars:     Size  Location     Type
 18753 ;;  err             3   73[BANK0 ] struct error
 18754 ;; Return value:  Size  Location     Type
 18755 ;;                  3   70[BANK0 ] struct error
 18756 ;; Registers used:
 18757 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18758 ;; Tracked objects:
 18759 ;;		On entry : 0/0
 18760 ;;		On exit  : 0/0
 18761 ;;		Unchanged: 0/0
 18762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18763 ;;      Params:         0       3       0       0       0       0       0       0       0
 18764 ;;      Locals:         0       3       0       0       0       0       0       0       0
 18765 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18766 ;;      Totals:         0       6       0       0       0       0       0       0       0
 18767 ;;Total ram usage:        6 bytes
 18768 ;; Hardware stack levels used:    1
 18769 ;; Hardware stack levels required when called:    8
 18770 ;; This function calls:
 18771 ;;		_ENC424J600_enableAutoMACInsertion
 18772 ;;		_ENC424J600_enableReception
 18773 ;;		_ENC424J600_initSPI
 18774 ;;		_ENC424J600_setNextPacketPointer
 18775 ;;		_ENC424J600_setRXBufferStartAddress
 18776 ;;		_ENC424J600_setRXTailPointer
 18777 ;;		_ethernetController_checkDeviceId
 18778 ;;		_ethernetController_softReset
 18779 ;; This function is called by:
 18780 ;;		_main
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           	psect	text75
 18785  00410E                     __ptext75:
 18786                           	opt stack 0
 18787  00410E                     _ethernetController_init:
 18788                           	opt stack 22
 18789                           
 18790                           ;ENC424J600.c: 34: error_t err;
 18791                           ;ENC424J600.c: 35: ENC424J600_initSPI();
 18792                           
 18793                           ;incstack = 0
 18794  00410E  ECF8  F025         	call	_ENC424J600_initSPI	;wreg free
 18795                           
 18796                           ;ENC424J600.c: 36: err = ethernetController_softReset();
 18797  004112  EC9F  F015         	call	_ethernetController_softReset	;wreg free
 18798  004116  C09A  F0A9         	movff	?_ethernetController_softReset,ethernetController_init@err
 18799  00411A  C09B  F0AA         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 18800  00411E  C09C  F0AB         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 18801                           
 18802                           ;ENC424J600.c: 39: }
 18803                           ;ENC424J600.c: 40: err = ethernetController_checkDeviceId();
 18804  004122  ECA3  F022         	call	_ethernetController_checkDeviceId	;wreg free
 18805  004126  C06E  F0A9         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 18806  00412A  C06F  F0AA         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 18807  00412E  C070  F0AB         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 18808                           
 18809                           ;ENC424J600.c: 43: }
 18810                           ;ENC424J600.c: 62: ENC424J600_setRXBufferStartAddress(0x3000);
 18811  004132  0E30               	movlw	48
 18812  004134  0100               	movlb	0	; () banked
 18813  004136  6F6F               	movwf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),b
 18814  004138  0E00               	movlw	0
 18815  00413A  6F6E               	movwf	ENC424J600_setRXBufferStartAddress@addr& (0+255),b
 18816  00413C  ECE8  F024         	call	_ENC424J600_setRXBufferStartAddress	;wreg free
 18817                           
 18818                           ;ENC424J600.c: 63: ENC424J600_setNextPacketPointer(0x3000);
 18819  004140  0E30               	movlw	48
 18820  004142  0100               	movlb	0	; () banked
 18821  004144  6F61               	movwf	(ENC424J600_setNextPacketPointer@ptr+1)& (0+255),b
 18822  004146  0E00               	movlw	0
 18823  004148  6F60               	movwf	ENC424J600_setNextPacketPointer@ptr& (0+255),b
 18824  00414A  EC74  F026         	call	_ENC424J600_setNextPacketPointer	;wreg free
 18825                           
 18826                           ;ENC424J600.c: 64: ENC424J600_setRXTailPointer(0x5FFE);
 18827  00414E  0E5F               	movlw	95
 18828  004150  0100               	movlb	0	; () banked
 18829  004152  6F6F               	movwf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),b
 18830  004154  0EFE               	movlw	254
 18831  004156  6F6E               	movwf	ENC424J600_setRXTailPointer@addr& (0+255),b
 18832  004158  ECD3  F024         	call	_ENC424J600_setRXTailPointer	;wreg free
 18833                           
 18834                           ;ENC424J600.c: 66: ENC424J600_enableReception();
 18835  00415C  EC79  F026         	call	_ENC424J600_enableReception	;wreg free
 18836                           
 18837                           ;ENC424J600.c: 67: ENC424J600_enableAutoMACInsertion();
 18838  004160  EC39  F025         	call	_ENC424J600_enableAutoMACInsertion	;wreg free
 18839                           
 18840                           ;ENC424J600.c: 69: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 18841  004164  0E01               	movlw	1
 18842  004166  0100               	movlb	0	; () banked
 18843  004168  6FA9               	movwf	ethernetController_init@err& (0+255),b
 18844                           
 18845                           ; BSR set to: 0
 18846                           ;ENC424J600.c: 70: err.code = (uint16_t)0;
 18847  00416A  0E00               	movlw	0
 18848  00416C  6FAB               	movwf	(ethernetController_init@err+2)& (0+255),b
 18849  00416E  0E00               	movlw	0
 18850  004170  6FAA               	movwf	(ethernetController_init@err+1)& (0+255),b
 18851                           
 18852                           ; BSR set to: 0
 18853                           ;ENC424J600.c: 71: return err;
 18854  004172  C0A9  F0A6         	movff	ethernetController_init@err,?_ethernetController_init
 18855  004176  C0AA  F0A7         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 18856  00417A  C0AB  F0A8         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 18857  00417E  0012               	return	
 18858  004180                     __end_of_ethernetController_init:
 18859                           	opt stack 0
 18860                           tblptru	equ	0xFF8
 18861                           tblptrh	equ	0xFF7
 18862                           tblptrl	equ	0xFF6
 18863                           tablat	equ	0xFF5
 18864                           prodh	equ	0xFF4
 18865                           prodl	equ	0xFF3
 18866                           intcon	equ	0xFF2
 18867                           intcon3	equ	0xFF0
 18868                           postinc0	equ	0xFEE
 18869                           plusw0	equ	0xFEB
 18870                           fsr0h	equ	0xFEA
 18871                           fsr0l	equ	0xFE9
 18872                           wreg	equ	0xFE8
 18873                           indf1	equ	0xFE7
 18874                           postinc1	equ	0xFE6
 18875                           postdec1	equ	0xFE5
 18876                           plusw1	equ	0xFE3
 18877                           fsr1h	equ	0xFE2
 18878                           fsr1l	equ	0xFE1
 18879                           indf2	equ	0xFDF
 18880                           postinc2	equ	0xFDE
 18881                           postdec2	equ	0xFDD
 18882                           plusw2	equ	0xFDB
 18883                           fsr2h	equ	0xFDA
 18884                           fsr2l	equ	0xFD9
 18885                           status	equ	0xFD8
 18886                           
 18887 ;; *************** function _ethernetController_softReset *****************
 18888 ;; Defined at:
 18889 ;;		line 74 in file "src/enc424j600/ENC424J600.c"
 18890 ;; Parameters:    Size  Location     Type
 18891 ;;		None
 18892 ;; Auto vars:     Size  Location     Type
 18893 ;;  err             3   67[BANK0 ] struct error
 18894 ;;  receivedData    2   65[BANK0 ] unsigned char [2]
 18895 ;;  dataToSend      2   63[BANK0 ] unsigned char [2]
 18896 ;;  comFailCount    1   62[BANK0 ] unsigned char 
 18897 ;; Return value:  Size  Location     Type
 18898 ;;                  3   58[BANK0 ] struct error
 18899 ;; Registers used:
 18900 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18901 ;; Tracked objects:
 18902 ;;		On entry : 0/0
 18903 ;;		On exit  : 0/0
 18904 ;;		Unchanged: 0/0
 18905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18906 ;;      Params:         0       3       0       0       0       0       0       0       0
 18907 ;;      Locals:         0       8       0       0       0       0       0       0       0
 18908 ;;      Temps:          0       1       0       0       0       0       0       0       0
 18909 ;;      Totals:         0      12       0       0       0       0       0       0       0
 18910 ;;Total ram usage:       12 bytes
 18911 ;; Hardware stack levels used:    1
 18912 ;; Hardware stack levels required when called:    7
 18913 ;; This function calls:
 18914 ;;		_ENC424J600_readControlRegisterUnbanked
 18915 ;;		_ENC424J600_writeControlRegisterUnbanked
 18916 ;;		_ENC424J600_writeSingleByte
 18917 ;;		_UARTTransmitText
 18918 ;; This function is called by:
 18919 ;;		_ethernetController_init
 18920 ;; This function uses a non-reentrant model
 18921 ;;
 18922                           
 18923                           	psect	text76
 18924  002B3E                     __ptext76:
 18925                           	opt stack 0
 18926  002B3E                     _ethernetController_softReset:
 18927                           	opt stack 22
 18928                           
 18929                           ;ENC424J600.c: 92: uint8_t comFailCount = 0;
 18930                           
 18931                           ; BSR set to: 0
 18932                           ;incstack = 0
 18933  002B3E  0E00               	movlw	0
 18934  002B40  0100               	movlb	0	; () banked
 18935  002B42  6F9E               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 18936                           
 18937                           ; BSR set to: 0
 18938                           ;ENC424J600.c: 93: uint8_t dataToSend[2] = {0x12, 0x34};
 18939  002B44  C04B  F09F         	movff	ethernetController_softReset@F5837,ethernetController_softReset@dataToSend
 18940  002B48  C04C  F0A0         	movff	ethernetController_softReset@F5837+1,ethernetController_softReset@dataToSend+1
 18941                           
 18942                           ; BSR set to: 0
 18943                           ;ENC424J600.c: 94: uint8_t receivedData[2] = {0, 0};
 18944  002B4C  C043  F0A1         	movff	ethernetController_softReset@F5839,ethernetController_softReset@receivedData
 18945  002B50  C044  F0A2         	movff	ethernetController_softReset@F5839+1,ethernetController_softReset@receivedData+1
 18946                           
 18947                           ;ENC424J600.c: 95: error_t err;
 18948                           ;ENC424J600.c: 96: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 18949  002B54  0E01               	movlw	1
 18950  002B56  6FA3               	movwf	ethernetController_softReset@err& (0+255),b
 18951                           
 18952                           ;ENC424J600.c: 97: err.code = (uint16_t)0;
 18953  002B58  0E00               	movlw	0
 18954  002B5A  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 18955  002B5C  0E00               	movlw	0
 18956  002B5E  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 18957                           
 18958                           ; BSR set to: 0
 18959                           ;ENC424J600.c: 98: if (comFailCount < 5) {
 18960  002B60  0E05               	movlw	5
 18961  002B62  619E               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 18962  002B64  D072               	goto	l82
 18963                           
 18964                           ; BSR set to: 0
 18965                           ;ENC424J600.c: 100: ENC424J600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 18966  002B66  0E9F               	movlw	low ethernetController_softReset@dataToSend
 18967  002B68  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18968  002B6A  0E00               	movlw	high ethernetController_softReset@dataToSend
 18969  002B6C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18970  002B6E  0E16               	movlw	22
 18971  002B70  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18972                           
 18973                           ;ENC424J600.c: 101: ENC424J600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 18974  002B74  0EA0               	movlw	low (ethernetController_softReset@dataToSend+1)
 18975  002B76  0100               	movlb	0	; () banked
 18976  002B78  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 18977  002B7A  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 18978  002B7C  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18979  002B7E  0E17               	movlw	23
 18980  002B80  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 18981                           
 18982                           ;ENC424J600.c: 103: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 18983  002B84  0EA1               	movlw	low ethernetController_softReset@receivedData
 18984  002B86  0100               	movlb	0	; () banked
 18985  002B88  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18986  002B8A  0E00               	movlw	high ethernetController_softReset@receivedData
 18987  002B8C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18988  002B8E  0E16               	movlw	22
 18989  002B90  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18990                           
 18991                           ;ENC424J600.c: 104: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 18992  002B94  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 18993  002B96  0100               	movlb	0	; () banked
 18994  002B98  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 18995  002B9A  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 18996  002B9C  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 18997  002B9E  0E17               	movlw	23
 18998  002BA0  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 18999                           
 19000                           ;ENC424J600.c: 106: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 19001  002BA4  0100               	movlb	0	; () banked
 19002  002BA6  519F               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 19003  002BA8  19A1               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 19004  002BAA  A4D8               	btfss	status,2,c
 19005  002BAC  D04B               	goto	l86
 19006                           
 19007                           ; BSR set to: 0
 19008  002BAE  51A0               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 19009  002BB0  19A2               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19010  002BB2  A4D8               	btfss	status,2,c
 19011  002BB4  D047               	goto	l86
 19012                           
 19013                           ; BSR set to: 0
 19014                           ;ENC424J600.c: 108: UARTTransmitText("Writing 0x1234 successful.\n\r");
 19015  002BB6  0E90               	movlw	low STR_1
 19016  002BB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19017  002BBA  0E7D               	movlw	high STR_1
 19018  002BBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19019  002BBE  ECFE  F021         	call	_UARTTransmitText	;wreg free
 19020                           
 19021                           ;ENC424J600.c: 109: ENC424J600_writeSingleByte(0b11001010);
 19022  002BC2  0ECA               	movlw	202
 19023  002BC4  EC20  F026         	call	_ENC424J600_writeSingleByte
 19024                           
 19025                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 19026  002BC8  0E42               	movlw	66
 19027  002BCA                     u11657:
 19028  002BCA  2EE8               	decfsz	wreg,f,c
 19029  002BCC  D7FE               	bra	u11657
 19030  002BCE  D000               	nop2	
 19031                           
 19032                           ;ENC424J600.c: 112: ENC424J600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 19033  002BD0  0EA1               	movlw	low ethernetController_softReset@receivedData
 19034  002BD2  0100               	movlb	0	; () banked
 19035  002BD4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19036  002BD6  0E00               	movlw	high ethernetController_softReset@receivedData
 19037  002BD8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19038  002BDA  0E16               	movlw	22
 19039  002BDC  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19040                           
 19041                           ;ENC424J600.c: 113: ENC424J600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 19042  002BE0  0EA2               	movlw	low (ethernetController_softReset@receivedData+1)
 19043  002BE2  0100               	movlb	0	; () banked
 19044  002BE4  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19045  002BE6  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 19046  002BE8  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19047  002BEA  0E17               	movlw	23
 19048  002BEC  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19049                           
 19050                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 19051  002BF0  0100               	movlb	0	; () banked
 19052  002BF2  51A1               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 19053  002BF4  A4D8               	btfss	status,2,c
 19054  002BF6  D013               	goto	l84
 19055                           
 19056                           ; BSR set to: 0
 19057  002BF8  51A2               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 19058  002BFA  A4D8               	btfss	status,2,c
 19059  002BFC  D010               	goto	l84
 19060                           
 19061                           ; BSR set to: 0
 19062                           ;ENC424J600.c: 116: UARTTransmitText("Reset success.\n\r");
 19063  002BFE  0ECD               	movlw	low STR_2
 19064  002C00  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19065  002C02  0E7E               	movlw	high STR_2
 19066  002C04  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19067  002C06  ECFE  F021         	call	_UARTTransmitText	;wreg free
 19068                           
 19069                           ;ENC424J600.c: 118: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 19070  002C0A  0E03               	movlw	3
 19071  002C0C  0100               	movlb	0	; () banked
 19072  002C0E  6F9D               	movwf	??_ethernetController_softReset& (0+255),b
 19073  002C10  0EA7               	movlw	167
 19074  002C12                     u11667:
 19075  002C12  2EE8               	decfsz	wreg,f,c
 19076  002C14  D7FE               	bra	u11667
 19077  002C16  2F9D               	decfsz	??_ethernetController_softReset& (0+255),f,b
 19078  002C18  D7FC               	bra	u11667
 19079  002C1A  D000               	nop2	
 19080  002C1C  D00C               	goto	l8661
 19081  002C1E                     l84:
 19082                           
 19083                           ;ENC424J600.c: 121: UARTTransmitText("Reset failed.\n\r");
 19084  002C1E  0E0E               	movlw	low STR_3
 19085  002C20  0100               	movlb	0	; () banked
 19086  002C22  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19087  002C24  0E7F               	movlw	high STR_3
 19088  002C26  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19089  002C28  ECFE  F021         	call	_UARTTransmitText	;wreg free
 19090                           
 19091                           ;ENC424J600.c: 122: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19092  002C2C  0E01               	movlw	1
 19093  002C2E  0100               	movlb	0	; () banked
 19094  002C30  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19095  002C32  0E2E               	movlw	46
 19096  002C34  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19097  002C36                     l8661:
 19098                           
 19099                           ; BSR set to: 0
 19100                           ;ENC424J600.c: 123: return err;
 19101  002C36  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19102  002C3A  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19103  002C3E  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19104                           
 19105                           ; BSR set to: 0
 19106  002C42  0012               	return	
 19107  002C44                     l86:
 19108                           
 19109                           ;ENC424J600.c: 124: }
 19110                           ;ENC424J600.c: 125: }
 19111                           ;ENC424J600.c: 126: comFailCount++;
 19112                           
 19113                           ; BSR set to: 0
 19114                           
 19115                           ; BSR set to: 0
 19116  002C44  0100               	movlb	0	; () banked
 19117  002C46  2B9E               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 19118                           
 19119                           ;ENC424J600.c: 127: } else {
 19120  002C48  D012               	goto	l87
 19121  002C4A                     l82:
 19122                           
 19123                           ; BSR set to: 0
 19124                           ;ENC424J600.c: 128: UARTTransmitText("Writing 0x1234 failed.\n\r");
 19125                           
 19126                           ; BSR set to: 0
 19127  002C4A  0EC9               	movlw	low STR_4
 19128  002C4C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19129  002C4E  0E7D               	movlw	high STR_4
 19130  002C50  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19131  002C52  ECFE  F021         	call	_UARTTransmitText	;wreg free
 19132                           
 19133                           ;ENC424J600.c: 129: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 19134  002C56  0E01               	movlw	1
 19135  002C58  0100               	movlb	0	; () banked
 19136  002C5A  6FA5               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 19137  002C5C  0E2E               	movlw	46
 19138  002C5E  6FA4               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;ENC424J600.c: 130: return err;
 19142  002C60  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19143  002C64  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19144  002C68  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19145                           
 19146                           ; BSR set to: 0
 19147  002C6C  0012               	return	
 19148  002C6E                     l87:
 19149                           
 19150                           ; BSR set to: 0
 19151                           ;ENC424J600.c: 131: }
 19152                           ;ENC424J600.c: 132: return err;
 19153  002C6E  C0A3  F09A         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 19154  002C72  C0A4  F09B         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 19155  002C76  C0A5  F09C         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 19156  002C7A  0012               	return		;funcret
 19157  002C7C                     __end_of_ethernetController_softReset:
 19158                           	opt stack 0
 19159                           tblptru	equ	0xFF8
 19160                           tblptrh	equ	0xFF7
 19161                           tblptrl	equ	0xFF6
 19162                           tablat	equ	0xFF5
 19163                           prodh	equ	0xFF4
 19164                           prodl	equ	0xFF3
 19165                           intcon	equ	0xFF2
 19166                           intcon3	equ	0xFF0
 19167                           postinc0	equ	0xFEE
 19168                           plusw0	equ	0xFEB
 19169                           fsr0h	equ	0xFEA
 19170                           fsr0l	equ	0xFE9
 19171                           wreg	equ	0xFE8
 19172                           indf1	equ	0xFE7
 19173                           postinc1	equ	0xFE6
 19174                           postdec1	equ	0xFE5
 19175                           plusw1	equ	0xFE3
 19176                           fsr1h	equ	0xFE2
 19177                           fsr1l	equ	0xFE1
 19178                           indf2	equ	0xFDF
 19179                           postinc2	equ	0xFDE
 19180                           postdec2	equ	0xFDD
 19181                           plusw2	equ	0xFDB
 19182                           fsr2h	equ	0xFDA
 19183                           fsr2l	equ	0xFD9
 19184                           status	equ	0xFD8
 19185                           
 19186 ;; *************** function _UARTTransmitText *****************
 19187 ;; Defined at:
 19188 ;;		line 53 in file "src/system/uart.c"
 19189 ;; Parameters:    Size  Location     Type
 19190 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 19191 ;;		 -> STR_85(2), STR_84(7), STR_83(11), STR_82(19), 
 19192 ;;		 -> STR_81(2), STR_80(3), STR_79(3), STR_78(3), 
 19193 ;;		 -> STR_77(3), STR_76(5), STR_75(2), STR_74(3), 
 19194 ;;		 -> STR_73(2), STR_72(3), STR_71(16), STR_70(15), 
 19195 ;;		 -> STR_69(10), STR_68(2), STR_67(3), STR_66(5), 
 19196 ;;		 -> STR_65(3), STR_64(2), STR_63(39), arpEntryToString@string(50), 
 19197 ;;		 -> ipAdressToString@address(16), STR_62(17), STR_61(4), STR_60(4), 
 19198 ;;		 -> STR_59(5), STR_58(18), STR_57(4), STR_56(5), 
 19199 ;;		 -> macToString@address(18), hexToString@number(10), intToString@number(10), STR_55(5), 
 19200 ;;		 -> STR_54(9), STR_53(30), STR_52(34), STR_51(55), 
 19201 ;;		 -> STR_50(37), STR_49(15), STR_48(14), STR_47(19), 
 19202 ;;		 -> STR_46(30), STR_45(17), STR_44(8), STR_43(29), 
 19203 ;;		 -> STR_42(29), STR_41(20), STR_40(19), STR_39(19), 
 19204 ;;		 -> STR_38(13), STR_37(51), STR_36(28), STR_35(4), 
 19205 ;;		 -> STR_34(23), STR_33(4), STR_32(21), STR_31(12), 
 19206 ;;		 -> STR_30(38), STR_29(3), STR_28(9), STR_27(2), 
 19207 ;;		 -> STR_26(12), STR_25(24), STR_24(16), STR_23(3), 
 19208 ;;		 -> STR_22(19), STR_21(3), STR_20(3), STR_19(3), 
 19209 ;;		 -> STR_18(5), STR_17(2), STR_16(2), STR_15(5), 
 19210 ;;		 -> STR_14(3), STR_13(3), STR_12(2), STR_11(7), 
 19211 ;;		 -> STR_10(6), STR_9(16), STR_8(10), STR_7(12), 
 19212 ;;		 -> STR_6(2), STR_5(2), ethernetController_getDeviceName@string(11), STR_4(25), 
 19213 ;;		 -> STR_3(16), STR_2(17), STR_1(29), 
 19214 ;; Auto vars:     Size  Location     Type
 19215 ;;		None
 19216 ;; Return value:  Size  Location     Type
 19217 ;;                  1    wreg      void 
 19218 ;; Registers used:
 19219 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19220 ;; Tracked objects:
 19221 ;;		On entry : 0/0
 19222 ;;		On exit  : 0/0
 19223 ;;		Unchanged: 0/0
 19224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19225 ;;      Params:         0       2       0       0       0       0       0       0       0
 19226 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19227 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19228 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19229 ;;Total ram usage:        2 bytes
 19230 ;; Hardware stack levels used:    1
 19231 ;; Hardware stack levels required when called:    4
 19232 ;; This function calls:
 19233 ;;		Nothing
 19234 ;; This function is called by:
 19235 ;;		_ethernetController_softReset
 19236 ;;		_ethernet_rxGetNewFrame
 19237 ;;		_handleStackBackgroundTasks
 19238 ;;		_main
 19239 ;;		_printEthernetState
 19240 ;;		_printErrorMessage
 19241 ;;		_UARTTransmitInt
 19242 ;;		_ARP_handleNewPacket
 19243 ;;		_ARP_replyIfNeeded
 19244 ;;		_ipv4_handleNewPacket
 19245 ;;		_ipv4_checkHeaderChecksum
 19246 ;;		_printArpTable
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           	psect	text77
 19251  0043FC                     __ptext77:
 19252                           	opt stack 0
 19253  0043FC                     _UARTTransmitText:
 19254                           	opt stack 25
 19255                           
 19256                           ;uart.c: 54: while (*str) {
 19257                           
 19258                           ;incstack = 0
 19259  0043FC  D016               	goto	u8930
 19260  0043FE                     
 19261                           ;uart.c: 55: TXREG1 = *str++;
 19262  0043FE  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 19263  004402  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 19264  004406  6AF8               	clrf	tblptru,c
 19265  004408  0E07               	movlw	(high __ramtop+-1)
 19266  00440A  64F7               	cpfsgt	tblptrh,c
 19267  00440C  D003               	bra	u8927
 19268  00440E  0008               	tblrd		*
 19269  004410  50F5               	movf	tablat,w,c
 19270  004412  D005               	bra	u8920
 19271  004414                     u8927:
 19272  004414  CFF6 FFE9          	movff	tblptrl,fsr0l
 19273  004418  CFF7 FFEA          	movff	tblptrh,fsr0h
 19274  00441C  50EF               	movf	indf0,w,c
 19275  00441E                     u8920:
 19276  00441E  6EAD               	movwf	4013,c	;volatile
 19277  004420  0100               	movlb	0	; () banked
 19278  004422  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 19279  004424  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 19280  004426                     
 19281                           ; BSR set to: 0
 19282  004426  A2AC               	btfss	4012,1,c	;volatile
 19283  004428  D7FE               	goto	l752
 19284  00442A                     u8930:
 19285  00442A  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 19286  00442E  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 19287  004432  6AF8               	clrf	tblptru,c
 19288  004434  0E07               	movlw	(high __ramtop+-1)
 19289  004436  64F7               	cpfsgt	tblptrh,c
 19290  004438  D003               	bra	u8947
 19291  00443A  0008               	tblrd		*
 19292  00443C  50F5               	movf	tablat,w,c
 19293  00443E  D005               	bra	u8940
 19294  004440                     u8947:
 19295  004440  CFF6 FFE9          	movff	tblptrl,fsr0l
 19296  004444  CFF7 FFEA          	movff	tblptrh,fsr0h
 19297  004448  50EF               	movf	indf0,w,c
 19298  00444A                     u8940:
 19299  00444A  0900               	iorlw	0
 19300  00444C  B4D8               	btfsc	status,2,c
 19301  00444E  0012               	return	
 19302  004450  D7D6               	goto	l750
 19303  004452                     __end_of_UARTTransmitText:
 19304                           	opt stack 0
 19305                           tblptru	equ	0xFF8
 19306                           tblptrh	equ	0xFF7
 19307                           tblptrl	equ	0xFF6
 19308                           tablat	equ	0xFF5
 19309                           prodh	equ	0xFF4
 19310                           prodl	equ	0xFF3
 19311                           intcon	equ	0xFF2
 19312                           intcon3	equ	0xFF0
 19313                           indf0	equ	0xFEF
 19314                           postinc0	equ	0xFEE
 19315                           plusw0	equ	0xFEB
 19316                           fsr0h	equ	0xFEA
 19317                           fsr0l	equ	0xFE9
 19318                           wreg	equ	0xFE8
 19319                           indf1	equ	0xFE7
 19320                           postinc1	equ	0xFE6
 19321                           postdec1	equ	0xFE5
 19322                           plusw1	equ	0xFE3
 19323                           fsr1h	equ	0xFE2
 19324                           fsr1l	equ	0xFE1
 19325                           indf2	equ	0xFDF
 19326                           postinc2	equ	0xFDE
 19327                           postdec2	equ	0xFDD
 19328                           plusw2	equ	0xFDB
 19329                           fsr2h	equ	0xFDA
 19330                           fsr2l	equ	0xFD9
 19331                           status	equ	0xFD8
 19332                           
 19333 ;; *************** function _ethernetController_checkDeviceId *****************
 19334 ;; Defined at:
 19335 ;;		line 135 in file "src/enc424j600/ENC424J600.c"
 19336 ;; Parameters:    Size  Location     Type
 19337 ;;		None
 19338 ;; Auto vars:     Size  Location     Type
 19339 ;;  err             3   18[BANK0 ] struct error
 19340 ;;  data            1   17[BANK0 ] unsigned char 
 19341 ;; Return value:  Size  Location     Type
 19342 ;;                  3   14[BANK0 ] struct error
 19343 ;; Registers used:
 19344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19345 ;; Tracked objects:
 19346 ;;		On entry : 0/0
 19347 ;;		On exit  : 0/0
 19348 ;;		Unchanged: 0/0
 19349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19350 ;;      Params:         0       3       0       0       0       0       0       0       0
 19351 ;;      Locals:         0       4       0       0       0       0       0       0       0
 19352 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19353 ;;      Totals:         0       7       0       0       0       0       0       0       0
 19354 ;;Total ram usage:        7 bytes
 19355 ;; Hardware stack levels used:    1
 19356 ;; Hardware stack levels required when called:    7
 19357 ;; This function calls:
 19358 ;;		_ENC424J600_readControlRegisterUnbanked
 19359 ;; This function is called by:
 19360 ;;		_ethernetController_init
 19361 ;;		_main
 19362 ;; This function uses a non-reentrant model
 19363 ;;
 19364                           
 19365                           	psect	text78
 19366  004546                     __ptext78:
 19367                           	opt stack 0
 19368  004546                     _ethernetController_checkDeviceId:
 19369                           	opt stack 22
 19370                           
 19371                           ;ENC424J600.c: 136: error_t err;
 19372                           ;ENC424J600.c: 137: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 19373                           
 19374                           ;incstack = 0
 19375  004546  0E01               	movlw	1
 19376  004548  0100               	movlb	0	; () banked
 19377  00454A  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 19378                           
 19379                           ;ENC424J600.c: 138: err.code = (uint16_t)0;
 19380  00454C  0E00               	movlw	0
 19381  00454E  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19382  004550  0E00               	movlw	0
 19383  004552  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19384                           
 19385                           ;ENC424J600.c: 139: uint8_t data = 0;
 19386  004554  0E00               	movlw	0
 19387  004556  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 19388                           
 19389                           ; BSR set to: 0
 19390                           ;ENC424J600.c: 140: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 19391  004558  0E71               	movlw	low ethernetController_checkDeviceId@data
 19392  00455A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19393  00455C  0E00               	movlw	high ethernetController_checkDeviceId@data
 19394  00455E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19395  004560  0E74               	movlw	116
 19396  004562  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19397                           
 19398                           ;ENC424J600.c: 141: if (((data >> 5)&0x07) == 0b001)
 19399  004566  0100               	movlb	0	; () banked
 19400  004568  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 19401  00456A  42E8               	rrncf	wreg,f,c
 19402  00456C  0B07               	andlw	7
 19403  00456E  0B07               	andlw	7
 19404  004570  06E8               	decf	wreg,f,c
 19405  004572  A4D8               	btfss	status,2,c
 19406  004574  D004               	goto	l90
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;ENC424J600.c: 142: err.code = (uint16_t)0;
 19410  004576  0E00               	movlw	0
 19411  004578  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19412  00457A  0E00               	movlw	0
 19413  00457C  D003               	goto	L7
 19414  00457E                     l90:
 19415                           
 19416                           ; BSR set to: 0
 19417                           ;ENC424J600.c: 143: else
 19418                           ;ENC424J600.c: 144: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 19419                           
 19420                           ; BSR set to: 0
 19421  00457E  0E01               	movlw	1
 19422  004580  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 19423  004582  0E2D               	movlw	45
 19424  004584                     L7:
 19425  004584  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 19426                           
 19427                           ; BSR set to: 0
 19428                           ;ENC424J600.c: 145: return err;
 19429                           
 19430                           ; BSR set to: 0
 19431  004586  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 19432  00458A  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 19433  00458E  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 19434  004592  0012               	return	
 19435  004594                     __end_of_ethernetController_checkDeviceId:
 19436                           	opt stack 0
 19437                           tblptru	equ	0xFF8
 19438                           tblptrh	equ	0xFF7
 19439                           tblptrl	equ	0xFF6
 19440                           tablat	equ	0xFF5
 19441                           prodh	equ	0xFF4
 19442                           prodl	equ	0xFF3
 19443                           intcon	equ	0xFF2
 19444                           intcon3	equ	0xFF0
 19445                           indf0	equ	0xFEF
 19446                           postinc0	equ	0xFEE
 19447                           plusw0	equ	0xFEB
 19448                           fsr0h	equ	0xFEA
 19449                           fsr0l	equ	0xFE9
 19450                           wreg	equ	0xFE8
 19451                           indf1	equ	0xFE7
 19452                           postinc1	equ	0xFE6
 19453                           postdec1	equ	0xFE5
 19454                           plusw1	equ	0xFE3
 19455                           fsr1h	equ	0xFE2
 19456                           fsr1l	equ	0xFE1
 19457                           indf2	equ	0xFDF
 19458                           postinc2	equ	0xFDE
 19459                           postdec2	equ	0xFDD
 19460                           plusw2	equ	0xFDB
 19461                           fsr2h	equ	0xFDA
 19462                           fsr2l	equ	0xFD9
 19463                           status	equ	0xFD8
 19464                           
 19465 ;; *************** function _ENC424J600_setRXTailPointer *****************
 19466 ;; Defined at:
 19467 ;;		line 688 in file "src/enc424j600/ENC424J600.c"
 19468 ;; Parameters:    Size  Location     Type
 19469 ;;  addr            2   14[BANK0 ] unsigned int 
 19470 ;; Auto vars:     Size  Location     Type
 19471 ;;  highByte        1   17[BANK0 ] unsigned char 
 19472 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19473 ;; Return value:  Size  Location     Type
 19474 ;;                  1    wreg      void 
 19475 ;; Registers used:
 19476 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19477 ;; Tracked objects:
 19478 ;;		On entry : 0/0
 19479 ;;		On exit  : 0/0
 19480 ;;		Unchanged: 0/0
 19481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19482 ;;      Params:         0       2       0       0       0       0       0       0       0
 19483 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19484 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19485 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19486 ;;Total ram usage:        4 bytes
 19487 ;; Hardware stack levels used:    1
 19488 ;; Hardware stack levels required when called:    7
 19489 ;; This function calls:
 19490 ;;		_ENC424J600_writeControlRegisterUnbanked
 19491 ;; This function is called by:
 19492 ;;		_ethernetController_init
 19493 ;;		_ethernetController_streamFromRXBuffer
 19494 ;;		_ethernetController_dropPacket
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           	psect	text79
 19499  0049A6                     __ptext79:
 19500                           	opt stack 0
 19501  0049A6                     _ENC424J600_setRXTailPointer:
 19502                           	opt stack 18
 19503                           
 19504                           ;ENC424J600.c: 689: uint8_t lowByte = addr & 0x00ff;
 19505                           
 19506                           ; BSR set to: 0
 19507                           ;incstack = 0
 19508  0049A6  C06E  F070         	movff	ENC424J600_setRXTailPointer@addr,ENC424J600_setRXTailPointer@lowByte
 19509                           
 19510                           ;ENC424J600.c: 690: uint8_t highByte = (addr >> 8) & 0xff;
 19511  0049AA  0100               	movlb	0	; () banked
 19512  0049AC  516F               	movf	(ENC424J600_setRXTailPointer@addr+1)& (0+255),w,b
 19513  0049AE  6F71               	movwf	ENC424J600_setRXTailPointer@highByte& (0+255),b
 19514                           
 19515                           ; BSR set to: 0
 19516                           ;ENC424J600.c: 691: ENC424J600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 19517  0049B0  0E70               	movlw	low ENC424J600_setRXTailPointer@lowByte
 19518  0049B2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19519  0049B4  0E00               	movlw	high ENC424J600_setRXTailPointer@lowByte
 19520  0049B6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19521  0049B8  0E06               	movlw	6
 19522  0049BA  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19523                           
 19524                           ;ENC424J600.c: 692: ENC424J600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 19525  0049BE  0E71               	movlw	low ENC424J600_setRXTailPointer@highByte
 19526  0049C0  0100               	movlb	0	; () banked
 19527  0049C2  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19528  0049C4  0E00               	movlw	high ENC424J600_setRXTailPointer@highByte
 19529  0049C6  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19530  0049C8  0E07               	movlw	7
 19531  0049CA  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19532  0049CE  0012               	return		;funcret
 19533  0049D0                     __end_of_ENC424J600_setRXTailPointer:
 19534                           	opt stack 0
 19535                           tblptru	equ	0xFF8
 19536                           tblptrh	equ	0xFF7
 19537                           tblptrl	equ	0xFF6
 19538                           tablat	equ	0xFF5
 19539                           prodh	equ	0xFF4
 19540                           prodl	equ	0xFF3
 19541                           intcon	equ	0xFF2
 19542                           intcon3	equ	0xFF0
 19543                           indf0	equ	0xFEF
 19544                           postinc0	equ	0xFEE
 19545                           plusw0	equ	0xFEB
 19546                           fsr0h	equ	0xFEA
 19547                           fsr0l	equ	0xFE9
 19548                           wreg	equ	0xFE8
 19549                           indf1	equ	0xFE7
 19550                           postinc1	equ	0xFE6
 19551                           postdec1	equ	0xFE5
 19552                           plusw1	equ	0xFE3
 19553                           fsr1h	equ	0xFE2
 19554                           fsr1l	equ	0xFE1
 19555                           indf2	equ	0xFDF
 19556                           postinc2	equ	0xFDE
 19557                           postdec2	equ	0xFDD
 19558                           plusw2	equ	0xFDB
 19559                           fsr2h	equ	0xFDA
 19560                           fsr2l	equ	0xFD9
 19561                           status	equ	0xFD8
 19562                           
 19563 ;; *************** function _ENC424J600_setRXBufferStartAddress *****************
 19564 ;; Defined at:
 19565 ;;		line 681 in file "src/enc424j600/ENC424J600.c"
 19566 ;; Parameters:    Size  Location     Type
 19567 ;;  addr            2   14[BANK0 ] unsigned int 
 19568 ;; Auto vars:     Size  Location     Type
 19569 ;;  highByte        1   17[BANK0 ] unsigned char 
 19570 ;;  lowByte         1   16[BANK0 ] unsigned char 
 19571 ;; Return value:  Size  Location     Type
 19572 ;;                  1    wreg      void 
 19573 ;; Registers used:
 19574 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19575 ;; Tracked objects:
 19576 ;;		On entry : 0/0
 19577 ;;		On exit  : 0/0
 19578 ;;		Unchanged: 0/0
 19579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19580 ;;      Params:         0       2       0       0       0       0       0       0       0
 19581 ;;      Locals:         0       2       0       0       0       0       0       0       0
 19582 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19583 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19584 ;;Total ram usage:        4 bytes
 19585 ;; Hardware stack levels used:    1
 19586 ;; Hardware stack levels required when called:    7
 19587 ;; This function calls:
 19588 ;;		_ENC424J600_writeControlRegisterUnbanked
 19589 ;; This function is called by:
 19590 ;;		_ethernetController_init
 19591 ;; This function uses a non-reentrant model
 19592 ;;
 19593                           
 19594                           	psect	text80
 19595  0049D0                     __ptext80:
 19596                           	opt stack 0
 19597  0049D0                     _ENC424J600_setRXBufferStartAddress:
 19598                           	opt stack 22
 19599                           
 19600                           ;ENC424J600.c: 682: uint8_t lowByte = addr & 0x00ff;
 19601                           
 19602                           ;incstack = 0
 19603  0049D0  C06E  F070         	movff	ENC424J600_setRXBufferStartAddress@addr,ENC424J600_setRXBufferStartAddress@lowByt
      +                          e
 19604                           
 19605                           ;ENC424J600.c: 683: uint8_t highByte = (addr >> 8) & 0xff;
 19606  0049D4  0100               	movlb	0	; () banked
 19607  0049D6  516F               	movf	(ENC424J600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 19608  0049D8  6F71               	movwf	ENC424J600_setRXBufferStartAddress@highByte& (0+255),b
 19609                           
 19610                           ; BSR set to: 0
 19611                           ;ENC424J600.c: 684: ENC424J600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 19612  0049DA  0E70               	movlw	low ENC424J600_setRXBufferStartAddress@lowByte
 19613  0049DC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19614  0049DE  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@lowByte
 19615  0049E0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19616  0049E2  0E04               	movlw	4
 19617  0049E4  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19618                           
 19619                           ;ENC424J600.c: 685: ENC424J600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 19620  0049E8  0E71               	movlw	low ENC424J600_setRXBufferStartAddress@highByte
 19621  0049EA  0100               	movlb	0	; () banked
 19622  0049EC  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19623  0049EE  0E00               	movlw	high ENC424J600_setRXBufferStartAddress@highByte
 19624  0049F0  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19625  0049F2  0E05               	movlw	5
 19626  0049F4  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19627  0049F8  0012               	return		;funcret
 19628  0049FA                     __end_of_ENC424J600_setRXBufferStartAddress:
 19629                           	opt stack 0
 19630                           tblptru	equ	0xFF8
 19631                           tblptrh	equ	0xFF7
 19632                           tblptrl	equ	0xFF6
 19633                           tablat	equ	0xFF5
 19634                           prodh	equ	0xFF4
 19635                           prodl	equ	0xFF3
 19636                           intcon	equ	0xFF2
 19637                           intcon3	equ	0xFF0
 19638                           indf0	equ	0xFEF
 19639                           postinc0	equ	0xFEE
 19640                           plusw0	equ	0xFEB
 19641                           fsr0h	equ	0xFEA
 19642                           fsr0l	equ	0xFE9
 19643                           wreg	equ	0xFE8
 19644                           indf1	equ	0xFE7
 19645                           postinc1	equ	0xFE6
 19646                           postdec1	equ	0xFE5
 19647                           plusw1	equ	0xFE3
 19648                           fsr1h	equ	0xFE2
 19649                           fsr1l	equ	0xFE1
 19650                           indf2	equ	0xFDF
 19651                           postinc2	equ	0xFDE
 19652                           postdec2	equ	0xFDD
 19653                           plusw2	equ	0xFDB
 19654                           fsr2h	equ	0xFDA
 19655                           fsr2l	equ	0xFD9
 19656                           status	equ	0xFD8
 19657                           
 19658 ;; *************** function _ENC424J600_setNextPacketPointer *****************
 19659 ;; Defined at:
 19660 ;;		line 625 in file "src/enc424j600/ENC424J600.c"
 19661 ;; Parameters:    Size  Location     Type
 19662 ;;  ptr             2    0[BANK0 ] unsigned int 
 19663 ;; Auto vars:     Size  Location     Type
 19664 ;;		None
 19665 ;; Return value:  Size  Location     Type
 19666 ;;                  1    wreg      void 
 19667 ;; Registers used:
 19668 ;;		None
 19669 ;; Tracked objects:
 19670 ;;		On entry : 0/0
 19671 ;;		On exit  : 0/0
 19672 ;;		Unchanged: 0/0
 19673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19674 ;;      Params:         0       2       0       0       0       0       0       0       0
 19675 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19676 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19677 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19678 ;;Total ram usage:        2 bytes
 19679 ;; Hardware stack levels used:    1
 19680 ;; Hardware stack levels required when called:    4
 19681 ;; This function calls:
 19682 ;;		Nothing
 19683 ;; This function is called by:
 19684 ;;		_ethernetController_init
 19685 ;;		_ethernetController_updateNextPacketPointer
 19686 ;; This function uses a non-reentrant model
 19687 ;;
 19688                           
 19689                           	psect	text81
 19690  004CE8                     __ptext81:
 19691                           	opt stack 0
 19692  004CE8                     _ENC424J600_setNextPacketPointer:
 19693                           	opt stack 23
 19694                           
 19695                           ;ENC424J600.c: 626: nextPacketPointer = ptr;
 19696                           
 19697                           ;incstack = 0
 19698  004CE8  C060  F045         	movff	ENC424J600_setNextPacketPointer@ptr,_nextPacketPointer
 19699  004CEC  C061  F046         	movff	ENC424J600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 19700  004CF0  0012               	return		;funcret
 19701  004CF2                     __end_of_ENC424J600_setNextPacketPointer:
 19702                           	opt stack 0
 19703                           tblptru	equ	0xFF8
 19704                           tblptrh	equ	0xFF7
 19705                           tblptrl	equ	0xFF6
 19706                           tablat	equ	0xFF5
 19707                           prodh	equ	0xFF4
 19708                           prodl	equ	0xFF3
 19709                           intcon	equ	0xFF2
 19710                           intcon3	equ	0xFF0
 19711                           indf0	equ	0xFEF
 19712                           postinc0	equ	0xFEE
 19713                           plusw0	equ	0xFEB
 19714                           fsr0h	equ	0xFEA
 19715                           fsr0l	equ	0xFE9
 19716                           wreg	equ	0xFE8
 19717                           indf1	equ	0xFE7
 19718                           postinc1	equ	0xFE6
 19719                           postdec1	equ	0xFE5
 19720                           plusw1	equ	0xFE3
 19721                           fsr1h	equ	0xFE2
 19722                           fsr1l	equ	0xFE1
 19723                           indf2	equ	0xFDF
 19724                           postinc2	equ	0xFDE
 19725                           postdec2	equ	0xFDD
 19726                           plusw2	equ	0xFDB
 19727                           fsr2h	equ	0xFDA
 19728                           fsr2l	equ	0xFD9
 19729                           status	equ	0xFD8
 19730                           
 19731 ;; *************** function _ENC424J600_enableReception *****************
 19732 ;; Defined at:
 19733 ;;		line 711 in file "src/enc424j600/ENC424J600.c"
 19734 ;; Parameters:    Size  Location     Type
 19735 ;;		None
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;		None
 19738 ;; Return value:  Size  Location     Type
 19739 ;;                  1    wreg      void 
 19740 ;; Registers used:
 19741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19747 ;;      Params:         0       0       0       0       0       0       0       0       0
 19748 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19749 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19750 ;;      Totals:         0       0       0       0       0       0       0       0       0
 19751 ;;Total ram usage:        0 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    7
 19754 ;; This function calls:
 19755 ;;		_ENC424J600_writeSingleByte
 19756 ;; This function is called by:
 19757 ;;		_ethernetController_init
 19758 ;;		_ethernetController_enableReception
 19759 ;; This function uses a non-reentrant model
 19760 ;;
 19761                           
 19762                           	psect	text82
 19763  004CF2                     __ptext82:
 19764                           	opt stack 0
 19765  004CF2                     _ENC424J600_enableReception:
 19766                           	opt stack 22
 19767                           
 19768                           ;ENC424J600.c: 712: ENC424J600_writeSingleByte(0b11101000);
 19769                           
 19770                           ;incstack = 0
 19771  004CF2  0EE8               	movlw	232
 19772  004CF4  EC20  F026         	call	_ENC424J600_writeSingleByte
 19773  004CF8  0012               	return		;funcret
 19774  004CFA                     __end_of_ENC424J600_enableReception:
 19775                           	opt stack 0
 19776                           tblptru	equ	0xFF8
 19777                           tblptrh	equ	0xFF7
 19778                           tblptrl	equ	0xFF6
 19779                           tablat	equ	0xFF5
 19780                           prodh	equ	0xFF4
 19781                           prodl	equ	0xFF3
 19782                           intcon	equ	0xFF2
 19783                           intcon3	equ	0xFF0
 19784                           indf0	equ	0xFEF
 19785                           postinc0	equ	0xFEE
 19786                           plusw0	equ	0xFEB
 19787                           fsr0h	equ	0xFEA
 19788                           fsr0l	equ	0xFE9
 19789                           wreg	equ	0xFE8
 19790                           indf1	equ	0xFE7
 19791                           postinc1	equ	0xFE6
 19792                           postdec1	equ	0xFE5
 19793                           plusw1	equ	0xFE3
 19794                           fsr1h	equ	0xFE2
 19795                           fsr1l	equ	0xFE1
 19796                           indf2	equ	0xFDF
 19797                           postinc2	equ	0xFDE
 19798                           postdec2	equ	0xFDD
 19799                           plusw2	equ	0xFDB
 19800                           fsr2h	equ	0xFDA
 19801                           fsr2l	equ	0xFD9
 19802                           status	equ	0xFD8
 19803                           
 19804 ;; *************** function _ENC424J600_writeSingleByte *****************
 19805 ;; Defined at:
 19806 ;;		line 551 in file "src/enc424j600/ENC424J600.c"
 19807 ;; Parameters:    Size  Location     Type
 19808 ;;  opcode          1    wreg     unsigned char 
 19809 ;; Auto vars:     Size  Location     Type
 19810 ;;  opcode          1   10[BANK0 ] unsigned char 
 19811 ;; Return value:  Size  Location     Type
 19812 ;;                  1    wreg      void 
 19813 ;; Registers used:
 19814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19815 ;; Tracked objects:
 19816 ;;		On entry : 0/0
 19817 ;;		On exit  : 0/0
 19818 ;;		Unchanged: 0/0
 19819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19820 ;;      Params:         0       0       0       0       0       0       0       0       0
 19821 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19822 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19823 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19824 ;;Total ram usage:        1 bytes
 19825 ;; Hardware stack levels used:    1
 19826 ;; Hardware stack levels required when called:    6
 19827 ;; This function calls:
 19828 ;;		_ENC424J600_writeSPI
 19829 ;; This function is called by:
 19830 ;;		_ethernetController_softReset
 19831 ;;		_ethernetController_sendPacket
 19832 ;;		_ethernetController_streamFromRXBuffer
 19833 ;;		_ethernetController_dropPacket
 19834 ;;		_ENC424J600_enableReception
 19835 ;;		_ENC424J600_disableReception
 19836 ;; This function uses a non-reentrant model
 19837 ;;
 19838                           
 19839                           	psect	text83
 19840  004C40                     __ptext83:
 19841                           	opt stack 0
 19842  004C40                     _ENC424J600_writeSingleByte:
 19843                           	opt stack 21
 19844                           
 19845                           ;incstack = 0
 19846                           ;ENC424J600_writeSingleByte@opcode stored from wreg
 19847  004C40  0100               	movlb	0	; () banked
 19848  004C42  6F6A               	movwf	ENC424J600_writeSingleByte@opcode& (0+255),b
 19849                           
 19850                           ;ENC424J600.c: 552: PORTBbits.RB4=0;
 19851  004C44  9881               	bcf	3969,4,c	;volatile
 19852                           
 19853                           ;ENC424J600.c: 553: ENC424J600_writeSPI(&opcode);
 19854  004C46  0E6A               	movlw	low ENC424J600_writeSingleByte@opcode
 19855  004C48  0100               	movlb	0	; () banked
 19856  004C4A  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 19857  004C4C  0E00               	movlw	high ENC424J600_writeSingleByte@opcode
 19858  004C4E  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 19859  004C50  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 19860                           
 19861                           ;ENC424J600.c: 554: PORTBbits.RB4=1;
 19862  004C54  8881               	bsf	3969,4,c	;volatile
 19863  004C56  0012               	return		;funcret
 19864  004C58                     __end_of_ENC424J600_writeSingleByte:
 19865                           	opt stack 0
 19866                           tblptru	equ	0xFF8
 19867                           tblptrh	equ	0xFF7
 19868                           tblptrl	equ	0xFF6
 19869                           tablat	equ	0xFF5
 19870                           prodh	equ	0xFF4
 19871                           prodl	equ	0xFF3
 19872                           intcon	equ	0xFF2
 19873                           intcon3	equ	0xFF0
 19874                           indf0	equ	0xFEF
 19875                           postinc0	equ	0xFEE
 19876                           plusw0	equ	0xFEB
 19877                           fsr0h	equ	0xFEA
 19878                           fsr0l	equ	0xFE9
 19879                           wreg	equ	0xFE8
 19880                           indf1	equ	0xFE7
 19881                           postinc1	equ	0xFE6
 19882                           postdec1	equ	0xFE5
 19883                           plusw1	equ	0xFE3
 19884                           fsr1h	equ	0xFE2
 19885                           fsr1l	equ	0xFE1
 19886                           indf2	equ	0xFDF
 19887                           postinc2	equ	0xFDE
 19888                           postdec2	equ	0xFDD
 19889                           plusw2	equ	0xFDB
 19890                           fsr2h	equ	0xFDA
 19891                           fsr2l	equ	0xFD9
 19892                           status	equ	0xFD8
 19893                           
 19894 ;; *************** function _ENC424J600_enableAutoMACInsertion *****************
 19895 ;; Defined at:
 19896 ;;		line 697 in file "src/enc424j600/ENC424J600.c"
 19897 ;; Parameters:    Size  Location     Type
 19898 ;;		None
 19899 ;; Auto vars:     Size  Location     Type
 19900 ;;  temp            1   14[BANK0 ] unsigned char 
 19901 ;; Return value:  Size  Location     Type
 19902 ;;                  1    wreg      void 
 19903 ;; Registers used:
 19904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19905 ;; Tracked objects:
 19906 ;;		On entry : 0/0
 19907 ;;		On exit  : 0/0
 19908 ;;		Unchanged: 0/0
 19909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19910 ;;      Params:         0       0       0       0       0       0       0       0       0
 19911 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19912 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19913 ;;      Totals:         0       1       0       0       0       0       0       0       0
 19914 ;;Total ram usage:        1 bytes
 19915 ;; Hardware stack levels used:    1
 19916 ;; Hardware stack levels required when called:    7
 19917 ;; This function calls:
 19918 ;;		_ENC424J600_readControlRegisterUnbanked
 19919 ;;		_ENC424J600_writeControlRegisterUnbanked
 19920 ;; This function is called by:
 19921 ;;		_ethernetController_init
 19922 ;; This function uses a non-reentrant model
 19923 ;;
 19924                           
 19925                           	psect	text84
 19926  004A72                     __ptext84:
 19927                           	opt stack 0
 19928  004A72                     _ENC424J600_enableAutoMACInsertion:
 19929                           	opt stack 22
 19930                           
 19931                           ;ENC424J600.c: 698: uint8_t temp = 0;
 19932                           
 19933                           ;incstack = 0
 19934  004A72  0E00               	movlw	0
 19935  004A74  0100               	movlb	0	; () banked
 19936  004A76  6F6E               	movwf	ENC424J600_enableAutoMACInsertion@temp& (0+255),b
 19937                           
 19938                           ; BSR set to: 0
 19939                           ;ENC424J600.c: 699: ENC424J600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 19940  004A78  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 19941  004A7A  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 19942  004A7C  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 19943  004A7E  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 19944  004A80  0E6F               	movlw	111
 19945  004A82  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 19946                           
 19947                           ;ENC424J600.c: 700: temp |= (1 << 5);
 19948  004A86  0100               	movlb	0	; () banked
 19949  004A88  8B6E               	bsf	ENC424J600_enableAutoMACInsertion@temp& (0+255),5,b
 19950                           
 19951                           ; BSR set to: 0
 19952                           ;ENC424J600.c: 701: ENC424J600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 19953  004A8A  0E6E               	movlw	low ENC424J600_enableAutoMACInsertion@temp
 19954  004A8C  6F6A               	movwf	ENC424J600_writeControlRegisterUnbanked@data& (0+255),b
 19955  004A8E  0E00               	movlw	high ENC424J600_enableAutoMACInsertion@temp
 19956  004A90  6F6B               	movwf	(ENC424J600_writeControlRegisterUnbanked@data+1)& (0+255),b
 19957  004A92  0E6F               	movlw	111
 19958  004A94  EC2C  F024         	call	_ENC424J600_writeControlRegisterUnbanked
 19959  004A98  0012               	return		;funcret
 19960  004A9A                     __end_of_ENC424J600_enableAutoMACInsertion:
 19961                           	opt stack 0
 19962                           tblptru	equ	0xFF8
 19963                           tblptrh	equ	0xFF7
 19964                           tblptrl	equ	0xFF6
 19965                           tablat	equ	0xFF5
 19966                           prodh	equ	0xFF4
 19967                           prodl	equ	0xFF3
 19968                           intcon	equ	0xFF2
 19969                           intcon3	equ	0xFF0
 19970                           indf0	equ	0xFEF
 19971                           postinc0	equ	0xFEE
 19972                           plusw0	equ	0xFEB
 19973                           fsr0h	equ	0xFEA
 19974                           fsr0l	equ	0xFE9
 19975                           wreg	equ	0xFE8
 19976                           indf1	equ	0xFE7
 19977                           postinc1	equ	0xFE6
 19978                           postdec1	equ	0xFE5
 19979                           plusw1	equ	0xFE3
 19980                           fsr1h	equ	0xFE2
 19981                           fsr1l	equ	0xFE1
 19982                           indf2	equ	0xFDF
 19983                           postinc2	equ	0xFDE
 19984                           postdec2	equ	0xFDD
 19985                           plusw2	equ	0xFDB
 19986                           fsr2h	equ	0xFDA
 19987                           fsr2l	equ	0xFD9
 19988                           status	equ	0xFD8
 19989                           
 19990 ;; *************** function _ENC424J600_writeControlRegisterUnbanked *****************
 19991 ;; Defined at:
 19992 ;;		line 557 in file "src/enc424j600/ENC424J600.c"
 19993 ;; Parameters:    Size  Location     Type
 19994 ;;  addr            1    wreg     unsigned char 
 19995 ;;  data            2   10[BANK0 ] PTR unsigned char 
 19996 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 19997 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 19998 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setTXStartAddress@highByte(1), ENC424J600_setTXStartAd
      +dress@lowByte(1), ENC424J600_setTXLength@highByte(1), 
 19999 ;;		 -> ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC424J600_readPHYRegister@unusedBits(1),
      + ENC424J600_readPHYRegister@PHYaddress(1), 
 20000 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  addr            1   12[BANK0 ] unsigned char 
 20003 ;;  opcode          1   13[BANK0 ] unsigned char 
 20004 ;; Return value:  Size  Location     Type
 20005 ;;                  1    wreg      void 
 20006 ;; Registers used:
 20007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20008 ;; Tracked objects:
 20009 ;;		On entry : 0/0
 20010 ;;		On exit  : 0/0
 20011 ;;		Unchanged: 0/0
 20012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20013 ;;      Params:         0       2       0       0       0       0       0       0       0
 20014 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20015 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20016 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20017 ;;Total ram usage:        4 bytes
 20018 ;; Hardware stack levels used:    1
 20019 ;; Hardware stack levels required when called:    6
 20020 ;; This function calls:
 20021 ;;		_ENC424J600_writeSPI
 20022 ;; This function is called by:
 20023 ;;		_ethernetController_softReset
 20024 ;;		_ethernetController_setLEDConfig
 20025 ;;		_ENC424J600_readPHYRegister
 20026 ;;		_ENC424J600_setTXLength
 20027 ;;		_ENC424J600_setTXStartAddress
 20028 ;;		_ENC424J600_setRXBufferStartAddress
 20029 ;;		_ENC424J600_setRXTailPointer
 20030 ;;		_ENC424J600_enableAutoMACInsertion
 20031 ;;		_ENC424J600_clearInterruptFlag
 20032 ;;		_ethernetController_setMacAddress
 20033 ;;		_ENC424J600_disableAutoMACInsertion
 20034 ;;		_ENC424J600_enable
 20035 ;;		_ENC424J600_disable
 20036 ;; This function uses a non-reentrant model
 20037 ;;
 20038                           
 20039                           	psect	text85
 20040  004858                     __ptext85:
 20041                           	opt stack 0
 20042  004858                     _ENC424J600_writeControlRegisterUnbanked:
 20043                           	opt stack 20
 20044                           
 20045                           ;incstack = 0
 20046                           ;ENC424J600_writeControlRegisterUnbanked@addr stored from wreg
 20047  004858  0100               	movlb	0	; () banked
 20048  00485A  6F6C               	movwf	ENC424J600_writeControlRegisterUnbanked@addr& (0+255),b
 20049                           
 20050                           ;ENC424J600.c: 558: uint8_t opcode = 0x22;
 20051  00485C  0E22               	movlw	34
 20052  00485E  0100               	movlb	0	; () banked
 20053  004860  6F6D               	movwf	ENC424J600_writeControlRegisterUnbanked@opcode& (0+255),b
 20054                           
 20055                           ; BSR set to: 0
 20056                           ;ENC424J600.c: 559: PORTBbits.RB4=0;
 20057  004862  9881               	bcf	3969,4,c	;volatile
 20058                           
 20059                           ; BSR set to: 0
 20060                           ;ENC424J600.c: 560: ENC424J600_writeSPI(&opcode);
 20061  004864  0E6D               	movlw	low ENC424J600_writeControlRegisterUnbanked@opcode
 20062  004866  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20063  004868  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@opcode
 20064  00486A  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20065  00486C  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 20066                           
 20067                           ;ENC424J600.c: 561: ENC424J600_writeSPI(&addr);
 20068  004870  0E6C               	movlw	low ENC424J600_writeControlRegisterUnbanked@addr
 20069  004872  0100               	movlb	0	; () banked
 20070  004874  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20071  004876  0E00               	movlw	high ENC424J600_writeControlRegisterUnbanked@addr
 20072  004878  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20073  00487A  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 20074                           
 20075                           ;ENC424J600.c: 562: ENC424J600_writeSPI(data);
 20076  00487E  C06A  F060         	movff	ENC424J600_writeControlRegisterUnbanked@data,ENC424J600_writeSPI@data
 20077  004882  C06B  F061         	movff	ENC424J600_writeControlRegisterUnbanked@data+1,ENC424J600_writeSPI@data+1
 20078  004886  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 20079                           
 20080                           ;ENC424J600.c: 563: PORTBbits.RB4=1;
 20081  00488A  8881               	bsf	3969,4,c	;volatile
 20082  00488C  0012               	return		;funcret
 20083  00488E                     __end_of_ENC424J600_writeControlRegisterUnbanked:
 20084                           	opt stack 0
 20085                           tblptru	equ	0xFF8
 20086                           tblptrh	equ	0xFF7
 20087                           tblptrl	equ	0xFF6
 20088                           tablat	equ	0xFF5
 20089                           prodh	equ	0xFF4
 20090                           prodl	equ	0xFF3
 20091                           intcon	equ	0xFF2
 20092                           intcon3	equ	0xFF0
 20093                           indf0	equ	0xFEF
 20094                           postinc0	equ	0xFEE
 20095                           plusw0	equ	0xFEB
 20096                           fsr0h	equ	0xFEA
 20097                           fsr0l	equ	0xFE9
 20098                           wreg	equ	0xFE8
 20099                           indf1	equ	0xFE7
 20100                           postinc1	equ	0xFE6
 20101                           postdec1	equ	0xFE5
 20102                           plusw1	equ	0xFE3
 20103                           fsr1h	equ	0xFE2
 20104                           fsr1l	equ	0xFE1
 20105                           indf2	equ	0xFDF
 20106                           postinc2	equ	0xFDE
 20107                           postdec2	equ	0xFDD
 20108                           plusw2	equ	0xFDB
 20109                           fsr2h	equ	0xFDA
 20110                           fsr2l	equ	0xFD9
 20111                           status	equ	0xFD8
 20112                           
 20113 ;; *************** function _ethernetController_getSiliconRevision *****************
 20114 ;; Defined at:
 20115 ;;		line 153 in file "src/enc424j600/ENC424J600.c"
 20116 ;; Parameters:    Size  Location     Type
 20117 ;;		None
 20118 ;; Auto vars:     Size  Location     Type
 20119 ;;  data            1   14[BANK0 ] unsigned char 
 20120 ;; Return value:  Size  Location     Type
 20121 ;;                  1    wreg      unsigned char 
 20122 ;; Registers used:
 20123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20124 ;; Tracked objects:
 20125 ;;		On entry : 0/0
 20126 ;;		On exit  : 0/0
 20127 ;;		Unchanged: 0/0
 20128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20129 ;;      Params:         0       0       0       0       0       0       0       0       0
 20130 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20131 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20132 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20133 ;;Total ram usage:        1 bytes
 20134 ;; Hardware stack levels used:    1
 20135 ;; Hardware stack levels required when called:    7
 20136 ;; This function calls:
 20137 ;;		_ENC424J600_readControlRegisterUnbanked
 20138 ;; This function is called by:
 20139 ;;		_main
 20140 ;; This function uses a non-reentrant model
 20141 ;;
 20142                           
 20143                           	psect	text86
 20144  004B98                     __ptext86:
 20145                           	opt stack 0
 20146  004B98                     _ethernetController_getSiliconRevision:
 20147                           	opt stack 23
 20148                           
 20149                           ;ENC424J600.c: 154: uint8_t data = 0;
 20150                           
 20151                           ;incstack = 0
 20152  004B98  0E00               	movlw	0
 20153  004B9A  0100               	movlb	0	; () banked
 20154  004B9C  6F6E               	movwf	ethernetController_getSiliconRevision@data& (0+255),b
 20155                           
 20156                           ; BSR set to: 0
 20157                           ;ENC424J600.c: 155: ENC424J600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 20158  004B9E  0E6E               	movlw	low ethernetController_getSiliconRevision@data
 20159  004BA0  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20160  004BA2  0E00               	movlw	high ethernetController_getSiliconRevision@data
 20161  004BA4  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20162  004BA6  0E74               	movlw	116
 20163  004BA8  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 20164                           
 20165                           ;ENC424J600.c: 156: data &= 0x1F;
 20166  004BAC  0E1F               	movlw	31
 20167  004BAE  0100               	movlb	0	; () banked
 20168  004BB0  176E               	andwf	ethernetController_getSiliconRevision@data& (0+255),f,b
 20169                           
 20170                           ; BSR set to: 0
 20171                           ;ENC424J600.c: 157: return data;
 20172  004BB2  516E               	movf	ethernetController_getSiliconRevision@data& (0+255),w,b
 20173  004BB4  0012               	return	
 20174  004BB6                     __end_of_ethernetController_getSiliconRevision:
 20175                           	opt stack 0
 20176                           tblptru	equ	0xFF8
 20177                           tblptrh	equ	0xFF7
 20178                           tblptrl	equ	0xFF6
 20179                           tablat	equ	0xFF5
 20180                           prodh	equ	0xFF4
 20181                           prodl	equ	0xFF3
 20182                           intcon	equ	0xFF2
 20183                           intcon3	equ	0xFF0
 20184                           indf0	equ	0xFEF
 20185                           postinc0	equ	0xFEE
 20186                           plusw0	equ	0xFEB
 20187                           fsr0h	equ	0xFEA
 20188                           fsr0l	equ	0xFE9
 20189                           wreg	equ	0xFE8
 20190                           indf1	equ	0xFE7
 20191                           postinc1	equ	0xFE6
 20192                           postdec1	equ	0xFE5
 20193                           plusw1	equ	0xFE3
 20194                           fsr1h	equ	0xFE2
 20195                           fsr1l	equ	0xFE1
 20196                           indf2	equ	0xFDF
 20197                           postinc2	equ	0xFDE
 20198                           postdec2	equ	0xFDD
 20199                           plusw2	equ	0xFDB
 20200                           fsr2h	equ	0xFDA
 20201                           fsr2l	equ	0xFD9
 20202                           status	equ	0xFD8
 20203                           
 20204 ;; *************** function _ethernetController_getDeviceName *****************
 20205 ;; Defined at:
 20206 ;;		line 148 in file "src/enc424j600/ENC424J600.c"
 20207 ;; Parameters:    Size  Location     Type
 20208 ;;		None
 20209 ;; Auto vars:     Size  Location     Type
 20210 ;;  string         11    2[BANK0 ] const unsigned char [11]
 20211 ;; Return value:  Size  Location     Type
 20212 ;;                  2    0[BANK0 ] PTR unsigned char 
 20213 ;; Registers used:
 20214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 20215 ;; Tracked objects:
 20216 ;;		On entry : 0/0
 20217 ;;		On exit  : 0/0
 20218 ;;		Unchanged: 0/0
 20219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20220 ;;      Params:         0       2       0       0       0       0       0       0       0
 20221 ;;      Locals:         0      11       0       0       0       0       0       0       0
 20222 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20223 ;;      Totals:         0      13       0       0       0       0       0       0       0
 20224 ;;Total ram usage:       13 bytes
 20225 ;; Hardware stack levels used:    1
 20226 ;; Hardware stack levels required when called:    4
 20227 ;; This function calls:
 20228 ;;		Nothing
 20229 ;; This function is called by:
 20230 ;;		_main
 20231 ;; This function uses a non-reentrant model
 20232 ;;
 20233                           
 20234                           	psect	text87
 20235  004B30                     __ptext87:
 20236                           	opt stack 0
 20237  004B30                     _ethernetController_getDeviceName:
 20238                           	opt stack 26
 20239                           
 20240                           ;ENC424J600.c: 149: const char string [] = "ENC424J600";
 20241                           
 20242                           ; BSR set to: 0
 20243                           ;incstack = 0
 20244  004B30  0E11               	movlw	low ethernetController_getDeviceName@F5849
 20245  004B32  6EF6               	movwf	tblptrl,c
 20246  004B34                     	if	1	;There is more than 1 active tblptr byte
 20247  004B34  0E7C               	movlw	high ethernetController_getDeviceName@F5849
 20248  004B36  6EF7               	movwf	tblptrh,c
 20249  004B38                     	endif
 20250  004B38                     	if	0	;There are less than 3 active tblptr bytes
 20251  004B38                     	endif
 20252  004B38  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 20253  004B3C  0E0A               	movlw	10
 20254  004B3E                     u11170:
 20255  004B3E  0009               	tblrd		*+
 20256  004B40  CFF5 FFDE          	movff	tablat,postinc2
 20257  004B44  06E8               	decf	wreg,f,c
 20258  004B46  E2FB               	bc	u11170
 20259                           
 20260                           ;ENC424J600.c: 150: return string;
 20261  004B48  0E62               	movlw	low ethernetController_getDeviceName@string
 20262  004B4A  0100               	movlb	0	; () banked
 20263  004B4C  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 20264  004B4E  0E00               	movlw	high ethernetController_getDeviceName@string
 20265  004B50  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 20266  004B52  0012               	return	
 20267  004B54                     __end_of_ethernetController_getDeviceName:
 20268                           	opt stack 0
 20269                           tblptru	equ	0xFF8
 20270                           tblptrh	equ	0xFF7
 20271                           tblptrl	equ	0xFF6
 20272                           tablat	equ	0xFF5
 20273                           prodh	equ	0xFF4
 20274                           prodl	equ	0xFF3
 20275                           intcon	equ	0xFF2
 20276                           intcon3	equ	0xFF0
 20277                           indf0	equ	0xFEF
 20278                           postinc0	equ	0xFEE
 20279                           plusw0	equ	0xFEB
 20280                           fsr0h	equ	0xFEA
 20281                           fsr0l	equ	0xFE9
 20282                           wreg	equ	0xFE8
 20283                           indf1	equ	0xFE7
 20284                           postinc1	equ	0xFE6
 20285                           postdec1	equ	0xFE5
 20286                           plusw1	equ	0xFE3
 20287                           fsr1h	equ	0xFE2
 20288                           fsr1l	equ	0xFE1
 20289                           indf2	equ	0xFDF
 20290                           postinc2	equ	0xFDE
 20291                           postdec2	equ	0xFDD
 20292                           plusw2	equ	0xFDB
 20293                           fsr2h	equ	0xFDA
 20294                           fsr2l	equ	0xFD9
 20295                           status	equ	0xFD8
 20296                           
 20297 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 20298 ;; Defined at:
 20299 ;;		line 497 in file "src/enc424j600/ENC424J600.c"
 20300 ;; Parameters:    Size  Location     Type
 20301 ;;		None
 20302 ;; Auto vars:     Size  Location     Type
 20303 ;;		None
 20304 ;; Return value:  Size  Location     Type
 20305 ;;                  1    wreg      unsigned char 
 20306 ;; Registers used:
 20307 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20308 ;; Tracked objects:
 20309 ;;		On entry : 0/0
 20310 ;;		On exit  : 0/0
 20311 ;;		Unchanged: 0/0
 20312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20313 ;;      Params:         0       0       0       0       0       0       0       0       0
 20314 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20315 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20316 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20317 ;;Total ram usage:        0 bytes
 20318 ;; Hardware stack levels used:    1
 20319 ;; Hardware stack levels required when called:    8
 20320 ;; This function calls:
 20321 ;;		_ENC424J600_getPacketCount
 20322 ;; This function is called by:
 20323 ;;		_main
 20324 ;; This function uses a non-reentrant model
 20325 ;;
 20326                           
 20327                           	psect	text88
 20328  004CFA                     __ptext88:
 20329                           	opt stack 0
 20330  004CFA                     _ethernetController_getCurrentPacketCount:
 20331                           	opt stack 22
 20332                           
 20333                           ;ENC424J600.c: 498: return ENC424J600_getPacketCount();
 20334                           
 20335                           ; BSR set to: 0
 20336                           ;incstack = 0
 20337  004CFA  EC13  F026         	call	_ENC424J600_getPacketCount	;wreg free
 20338  004CFE  0012               	return	
 20339  004D00                     __end_of_ethernetController_getCurrentPacketCount:
 20340                           	opt stack 0
 20341                           tblptru	equ	0xFF8
 20342                           tblptrh	equ	0xFF7
 20343                           tblptrl	equ	0xFF6
 20344                           tablat	equ	0xFF5
 20345                           prodh	equ	0xFF4
 20346                           prodl	equ	0xFF3
 20347                           intcon	equ	0xFF2
 20348                           intcon3	equ	0xFF0
 20349                           indf0	equ	0xFEF
 20350                           postinc0	equ	0xFEE
 20351                           plusw0	equ	0xFEB
 20352                           fsr0h	equ	0xFEA
 20353                           fsr0l	equ	0xFE9
 20354                           wreg	equ	0xFE8
 20355                           indf1	equ	0xFE7
 20356                           postinc1	equ	0xFE6
 20357                           postdec1	equ	0xFE5
 20358                           plusw1	equ	0xFE3
 20359                           fsr1h	equ	0xFE2
 20360                           fsr1l	equ	0xFE1
 20361                           indf2	equ	0xFDF
 20362                           postinc2	equ	0xFDE
 20363                           postdec2	equ	0xFDD
 20364                           plusw2	equ	0xFDB
 20365                           fsr2h	equ	0xFDA
 20366                           fsr2l	equ	0xFD9
 20367                           status	equ	0xFD8
 20368                           
 20369 ;; *************** function _ENC424J600_getPacketCount *****************
 20370 ;; Defined at:
 20371 ;;		line 633 in file "src/enc424j600/ENC424J600.c"
 20372 ;; Parameters:    Size  Location     Type
 20373 ;;		None
 20374 ;; Auto vars:     Size  Location     Type
 20375 ;;  lowByte         1   14[BANK0 ] unsigned char 
 20376 ;; Return value:  Size  Location     Type
 20377 ;;                  1    wreg      unsigned char 
 20378 ;; Registers used:
 20379 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20380 ;; Tracked objects:
 20381 ;;		On entry : 0/0
 20382 ;;		On exit  : 0/0
 20383 ;;		Unchanged: 0/0
 20384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20385 ;;      Params:         0       0       0       0       0       0       0       0       0
 20386 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20387 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20388 ;;      Totals:         0       1       0       0       0       0       0       0       0
 20389 ;;Total ram usage:        1 bytes
 20390 ;; Hardware stack levels used:    1
 20391 ;; Hardware stack levels required when called:    7
 20392 ;; This function calls:
 20393 ;;		_ENC424J600_readControlRegisterUnbanked
 20394 ;; This function is called by:
 20395 ;;		_ethernetController_newPacketAvailable
 20396 ;;		_ethernetController_getCurrentPacketCount
 20397 ;; This function uses a non-reentrant model
 20398 ;;
 20399                           
 20400                           	psect	text89
 20401  004C26                     __ptext89:
 20402                           	opt stack 0
 20403  004C26                     _ENC424J600_getPacketCount:
 20404                           	opt stack 21
 20405                           
 20406                           ;ENC424J600.c: 634: uint8_t lowByte = 0;
 20407                           
 20408                           ;incstack = 0
 20409  004C26  0E00               	movlw	0
 20410  004C28  0100               	movlb	0	; () banked
 20411  004C2A  6F6E               	movwf	ENC424J600_getPacketCount@lowByte& (0+255),b
 20412                           
 20413                           ; BSR set to: 0
 20414                           ;ENC424J600.c: 635: ENC424J600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 20415  004C2C  0E6E               	movlw	low ENC424J600_getPacketCount@lowByte
 20416  004C2E  6F6A               	movwf	ENC424J600_readControlRegisterUnbanked@data& (0+255),b
 20417  004C30  0E00               	movlw	high ENC424J600_getPacketCount@lowByte
 20418  004C32  6F6B               	movwf	(ENC424J600_readControlRegisterUnbanked@data+1)& (0+255),b
 20419  004C34  0E1A               	movlw	26
 20420  004C36  EC47  F024         	call	_ENC424J600_readControlRegisterUnbanked
 20421                           
 20422                           ;ENC424J600.c: 636: return (uint32_t) lowByte;
 20423  004C3A  0100               	movlb	0	; () banked
 20424  004C3C  516E               	movf	ENC424J600_getPacketCount@lowByte& (0+255),w,b
 20425  004C3E  0012               	return	
 20426  004C40                     __end_of_ENC424J600_getPacketCount:
 20427                           	opt stack 0
 20428                           tblptru	equ	0xFF8
 20429                           tblptrh	equ	0xFF7
 20430                           tblptrl	equ	0xFF6
 20431                           tablat	equ	0xFF5
 20432                           prodh	equ	0xFF4
 20433                           prodl	equ	0xFF3
 20434                           intcon	equ	0xFF2
 20435                           intcon3	equ	0xFF0
 20436                           indf0	equ	0xFEF
 20437                           postinc0	equ	0xFEE
 20438                           plusw0	equ	0xFEB
 20439                           fsr0h	equ	0xFEA
 20440                           fsr0l	equ	0xFE9
 20441                           wreg	equ	0xFE8
 20442                           indf1	equ	0xFE7
 20443                           postinc1	equ	0xFE6
 20444                           postdec1	equ	0xFE5
 20445                           plusw1	equ	0xFE3
 20446                           fsr1h	equ	0xFE2
 20447                           fsr1l	equ	0xFE1
 20448                           indf2	equ	0xFDF
 20449                           postinc2	equ	0xFDE
 20450                           postdec2	equ	0xFDD
 20451                           plusw2	equ	0xFDB
 20452                           fsr2h	equ	0xFDA
 20453                           fsr2l	equ	0xFD9
 20454                           status	equ	0xFD8
 20455                           
 20456 ;; *************** function _ENC424J600_readControlRegisterUnbanked *****************
 20457 ;; Defined at:
 20458 ;;		line 566 in file "src/enc424j600/ENC424J600.c"
 20459 ;; Parameters:    Size  Location     Type
 20460 ;;  addr            1    wreg     unsigned char 
 20461 ;;  data            2   10[BANK0 ] PTR unsigned char 
 20462 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 20463 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 20464 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 20465 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 20466 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 20467 ;; Auto vars:     Size  Location     Type
 20468 ;;  addr            1   12[BANK0 ] unsigned char 
 20469 ;;  opcode          1   13[BANK0 ] unsigned char 
 20470 ;; Return value:  Size  Location     Type
 20471 ;;                  1    wreg      void 
 20472 ;; Registers used:
 20473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20474 ;; Tracked objects:
 20475 ;;		On entry : 0/0
 20476 ;;		On exit  : 0/0
 20477 ;;		Unchanged: 0/0
 20478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20479 ;;      Params:         0       2       0       0       0       0       0       0       0
 20480 ;;      Locals:         0       2       0       0       0       0       0       0       0
 20481 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20482 ;;      Totals:         0       4       0       0       0       0       0       0       0
 20483 ;;Total ram usage:        4 bytes
 20484 ;; Hardware stack levels used:    1
 20485 ;; Hardware stack levels required when called:    6
 20486 ;; This function calls:
 20487 ;;		_ENC424J600_readSPI
 20488 ;;		_ENC424J600_writeSPI
 20489 ;; This function is called by:
 20490 ;;		_ethernetController_softReset
 20491 ;;		_ethernetController_checkDeviceId
 20492 ;;		_ethernetController_getSiliconRevision
 20493 ;;		_ethernetController_getMacAddress
 20494 ;;		_ethernetController_updateLinkStatus
 20495 ;;		_ethernetController_setLEDConfig
 20496 ;;		_ENC424J600_readPHYRegister
 20497 ;;		_ENC424J600_getPacketCount
 20498 ;;		_ENC424J600_enableAutoMACInsertion
 20499 ;;		_ENC424J600_getInterruptFlags
 20500 ;;		_ENC424J600_clearInterruptFlag
 20501 ;;		_ENC424J600_disableAutoMACInsertion
 20502 ;;		_ENC424J600_enable
 20503 ;;		_ENC424J600_disable
 20504 ;; This function uses a non-reentrant model
 20505 ;;
 20506                           
 20507                           	psect	text90
 20508  00488E                     __ptext90:
 20509                           	opt stack 0
 20510  00488E                     _ENC424J600_readControlRegisterUnbanked:
 20511                           	opt stack 21
 20512                           
 20513                           ; BSR set to: 0
 20514                           ;incstack = 0
 20515                           ;ENC424J600_readControlRegisterUnbanked@addr stored from wreg
 20516  00488E  0100               	movlb	0	; () banked
 20517  004890  6F6C               	movwf	ENC424J600_readControlRegisterUnbanked@addr& (0+255),b
 20518                           
 20519                           ;ENC424J600.c: 567: uint8_t opcode = 0x20;
 20520  004892  0E20               	movlw	32
 20521  004894  0100               	movlb	0	; () banked
 20522  004896  6F6D               	movwf	ENC424J600_readControlRegisterUnbanked@opcode& (0+255),b
 20523                           
 20524                           ; BSR set to: 0
 20525                           ;ENC424J600.c: 568: PORTBbits.RB4=0;
 20526  004898  9881               	bcf	3969,4,c	;volatile
 20527                           
 20528                           ; BSR set to: 0
 20529                           ;ENC424J600.c: 569: ENC424J600_writeSPI(&opcode);
 20530  00489A  0E6D               	movlw	low ENC424J600_readControlRegisterUnbanked@opcode
 20531  00489C  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20532  00489E  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@opcode
 20533  0048A0  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20534  0048A2  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 20535                           
 20536                           ;ENC424J600.c: 570: ENC424J600_writeSPI(&addr);
 20537  0048A6  0E6C               	movlw	low ENC424J600_readControlRegisterUnbanked@addr
 20538  0048A8  0100               	movlb	0	; () banked
 20539  0048AA  6F60               	movwf	ENC424J600_writeSPI@data& (0+255),b
 20540  0048AC  0E00               	movlw	high ENC424J600_readControlRegisterUnbanked@addr
 20541  0048AE  6F61               	movwf	(ENC424J600_writeSPI@data+1)& (0+255),b
 20542  0048B0  ECCC  F021         	call	_ENC424J600_writeSPI	;wreg free
 20543                           
 20544                           ;ENC424J600.c: 571: ENC424J600_readSPI(data);
 20545  0048B4  C06A  F060         	movff	ENC424J600_readControlRegisterUnbanked@data,ENC424J600_readSPI@data
 20546  0048B8  C06B  F061         	movff	ENC424J600_readControlRegisterUnbanked@data+1,ENC424J600_readSPI@data+1
 20547  0048BC  EC30  F021         	call	_ENC424J600_readSPI	;wreg free
 20548                           
 20549                           ;ENC424J600.c: 572: PORTBbits.RB4=1;
 20550  0048C0  8881               	bsf	3969,4,c	;volatile
 20551  0048C2  0012               	return		;funcret
 20552  0048C4                     __end_of_ENC424J600_readControlRegisterUnbanked:
 20553                           	opt stack 0
 20554                           tblptru	equ	0xFF8
 20555                           tblptrh	equ	0xFF7
 20556                           tblptrl	equ	0xFF6
 20557                           tablat	equ	0xFF5
 20558                           prodh	equ	0xFF4
 20559                           prodl	equ	0xFF3
 20560                           intcon	equ	0xFF2
 20561                           intcon3	equ	0xFF0
 20562                           indf0	equ	0xFEF
 20563                           postinc0	equ	0xFEE
 20564                           plusw0	equ	0xFEB
 20565                           fsr0h	equ	0xFEA
 20566                           fsr0l	equ	0xFE9
 20567                           wreg	equ	0xFE8
 20568                           indf1	equ	0xFE7
 20569                           postinc1	equ	0xFE6
 20570                           postdec1	equ	0xFE5
 20571                           plusw1	equ	0xFE3
 20572                           fsr1h	equ	0xFE2
 20573                           fsr1l	equ	0xFE1
 20574                           indf2	equ	0xFDF
 20575                           postinc2	equ	0xFDE
 20576                           postdec2	equ	0xFDD
 20577                           plusw2	equ	0xFDB
 20578                           fsr2h	equ	0xFDA
 20579                           fsr2l	equ	0xFD9
 20580                           status	equ	0xFD8
 20581                           
 20582 ;; *************** function _ENC424J600_writeSPI *****************
 20583 ;; Defined at:
 20584 ;;		line 526 in file "src/enc424j600/ENC424J600.c"
 20585 ;; Parameters:    Size  Location     Type
 20586 ;;  data            2    0[BANK0 ] PTR unsigned char 
 20587 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_disable@temp(1), ENC424J600_enable@temp(1), ENC424J600_disable
      +AutoMACInsertion@temp(1), 
 20588 ;;		 -> ENC424J600_enableAutoMACInsertion@temp(1), ENC424J600_setRXTailPointer@highByte(1), ENC424J600_setRXTailPointer@
      +lowByte(1), ENC424J600_setRXBufferStartAddress@highByte(1), 
 20589 ;;		 -> ENC424J600_setRXBufferStartAddress@lowByte(1), ENC424J600_setERXDATAReadPointer@highByte(1), ENC424J600_setERXDA
      +TAReadPointer@lowByte(1), ENC424J600_setERXDATAReadPointer@opcode(1), 
 20590 ;;		 -> ENC424J600_setGPDATAReadPointer@highByte(1), ENC424J600_setGPDATAReadPointer@lowByte(1), ENC424J600_setGPDATARea
      +dPointer@opcode(1), ENC424J600_setGPDATAWritePointer@highByte(1), 
 20591 ;;		 -> ENC424J600_setGPDATAWritePointer@lowByte(1), ENC424J600_setGPDATAWritePointer@opcode(1), ENC424J600_setTXStartAd
      +dress@highByte(1), ENC424J600_setTXStartAddress@lowByte(1), 
 20592 ;;		 -> ENC424J600_setTXLength@highByte(1), ENC424J600_setTXLength@lowByte(1), ENC424J600_readPHYRegister@temp(1), ENC42
      +4J600_readPHYRegister@unusedBits(1), 
 20593 ;;		 -> ENC424J600_readPHYRegister@PHYaddress(1), ENC424J600_readControlRegisterUnbanked@addr(1), ENC424J600_readControl
      +RegisterUnbanked@opcode(1), ENC424J600_writeControlRegisterUnbanked@addr(1), 
 20594 ;;		 -> ENC424J600_writeControlRegisterUnbanked@opcode(1), ENC424J600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 20595 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 20596 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 20597 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 20598 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 20599 ;; Auto vars:     Size  Location     Type
 20600 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 20601 ;; Return value:  Size  Location     Type
 20602 ;;                  1    wreg      void 
 20603 ;; Registers used:
 20604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20605 ;; Tracked objects:
 20606 ;;		On entry : 0/0
 20607 ;;		On exit  : 0/0
 20608 ;;		Unchanged: 0/0
 20609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20610 ;;      Params:         0       2       0       0       0       0       0       0       0
 20611 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20612 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20613 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20614 ;;Total ram usage:       10 bytes
 20615 ;; Hardware stack levels used:    1
 20616 ;; Hardware stack levels required when called:    5
 20617 ;; This function calls:
 20618 ;;		_ENC424J600_initSPI
 20619 ;; This function is called by:
 20620 ;;		_ethernetController_streamToTransmitBuffer
 20621 ;;		_ethernetController_writeDestinationMACAddress
 20622 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 20623 ;;		_ethernetController_getSourceMACAddress
 20624 ;;		_ethernetController_getEtherTypeField
 20625 ;;		_ethernetController_getRSV
 20626 ;;		_ethernetController_updateNextPacketPointer
 20627 ;;		_ethernetController_streamFromRXBuffer
 20628 ;;		_ENC424J600_writeSingleByte
 20629 ;;		_ENC424J600_writeControlRegisterUnbanked
 20630 ;;		_ENC424J600_readControlRegisterUnbanked
 20631 ;;		_ENC424J600_setGPDATAWritePointer
 20632 ;;		_ENC424J600_setERXDATAReadPointer
 20633 ;;		_ethernetController_getDestinationMACAddress
 20634 ;;		_ENC424J600_setGPDATAReadPointer
 20635 ;; This function uses a non-reentrant model
 20636 ;;
 20637                           
 20638                           	psect	text91
 20639  004398                     __ptext91:
 20640                           	opt stack 0
 20641  004398                     _ENC424J600_writeSPI:
 20642                           	opt stack 22
 20643                           
 20644                           ;ENC424J600.c: 528: uint32_t timeoutCounter = 0;
 20645                           
 20646                           ;incstack = 0
 20647  004398  0E00               	movlw	0
 20648  00439A  0100               	movlb	0	; () banked
 20649  00439C  6F66               	movwf	ENC424J600_writeSPI@timeoutCounter& (0+255),b
 20650  00439E  0E00               	movlw	0
 20651  0043A0  6F67               	movwf	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),b
 20652  0043A2  0E00               	movlw	0
 20653  0043A4  6F68               	movwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),b
 20654  0043A6  0E00               	movlw	0
 20655  0043A8  6F69               	movwf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),b
 20656                           
 20657                           ; BSR set to: 0
 20658                           ;ENC424J600.c: 529: SSP1BUF = *data;
 20659  0043AA  C060  FFD9         	movff	ENC424J600_writeSPI@data,fsr2l
 20660  0043AE  C061  FFDA         	movff	ENC424J600_writeSPI@data+1,fsr2h
 20661  0043B2  50DF               	movf	indf2,w,c
 20662  0043B4  6EC9               	movwf	4041,c	;volatile
 20663  0043B6                     
 20664                           ; BSR set to: 0
 20665                           
 20666                           ; BSR set to: 0
 20667  0043B6  B0C7               	btfsc	4039,0,c	;volatile
 20668  0043B8  D015               	goto	u7920
 20669                           
 20670                           ; BSR set to: 0
 20671  0043BA  C066  F062         	movff	ENC424J600_writeSPI@timeoutCounter,??_ENC424J600_writeSPI
 20672  0043BE  C067  F063         	movff	ENC424J600_writeSPI@timeoutCounter+1,??_ENC424J600_writeSPI+1
 20673  0043C2  C068  F064         	movff	ENC424J600_writeSPI@timeoutCounter+2,??_ENC424J600_writeSPI+2
 20674  0043C6  C069  F065         	movff	ENC424J600_writeSPI@timeoutCounter+3,??_ENC424J600_writeSPI+3
 20675  0043CA  2B66               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),f,b
 20676  0043CC  0E00               	movlw	0
 20677  0043CE  2367               	addwfc	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),f,b
 20678  0043D0  2368               	addwfc	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),f,b
 20679  0043D2  2369               	addwfc	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),f,b
 20680  0043D4  5165               	movf	(??_ENC424J600_writeSPI+3)& (0+255),w,b
 20681  0043D6  1164               	iorwf	(??_ENC424J600_writeSPI+2)& (0+255),w,b
 20682  0043D8  E105               	bnz	l7049
 20683  0043DA  2962               	incf	??_ENC424J600_writeSPI& (0+255),w,b
 20684  0043DC  0E0F               	movlw	15
 20685  0043DE  5963               	subwfb	(??_ENC424J600_writeSPI+1)& (0+255),w,b
 20686  0043E0  A0D8               	btfss	status,0,c
 20687  0043E2  D7E9               	goto	l232
 20688  0043E4                     u7920:
 20689  0043E4                     l7049:
 20690                           
 20691                           ; BSR set to: 0
 20692                           ;ENC424J600.c: 531: if (timeoutCounter >= 0xfff) {
 20693  0043E4  5169               	movf	(ENC424J600_writeSPI@timeoutCounter+3)& (0+255),w,b
 20694  0043E6  1168               	iorwf	(ENC424J600_writeSPI@timeoutCounter+2)& (0+255),w,b
 20695  0043E8  E105               	bnz	u7930
 20696  0043EA  2966               	incf	ENC424J600_writeSPI@timeoutCounter& (0+255),w,b
 20697  0043EC  0E0F               	movlw	15
 20698  0043EE  5967               	subwfb	(ENC424J600_writeSPI@timeoutCounter+1)& (0+255),w,b
 20699  0043F0  A0D8               	btfss	status,0,c
 20700  0043F2  0012               	return	
 20701  0043F4                     u7930:
 20702                           
 20703                           ; BSR set to: 0
 20704                           ;ENC424J600.c: 532: PORTBbits.RB4=1;
 20705  0043F4  8881               	bsf	3969,4,c	;volatile
 20706                           
 20707                           ; BSR set to: 0
 20708                           ;ENC424J600.c: 533: ENC424J600_initSPI();
 20709  0043F6  ECF8  F025         	call	_ENC424J600_initSPI	;wreg free
 20710                           
 20711                           ;ENC424J600.c: 534: return;
 20712  0043FA  0012               	return	
 20713  0043FC                     __end_of_ENC424J600_writeSPI:
 20714                           	opt stack 0
 20715                           tblptru	equ	0xFF8
 20716                           tblptrh	equ	0xFF7
 20717                           tblptrl	equ	0xFF6
 20718                           tablat	equ	0xFF5
 20719                           prodh	equ	0xFF4
 20720                           prodl	equ	0xFF3
 20721                           intcon	equ	0xFF2
 20722                           intcon3	equ	0xFF0
 20723                           indf0	equ	0xFEF
 20724                           postinc0	equ	0xFEE
 20725                           plusw0	equ	0xFEB
 20726                           fsr0h	equ	0xFEA
 20727                           fsr0l	equ	0xFE9
 20728                           wreg	equ	0xFE8
 20729                           indf1	equ	0xFE7
 20730                           postinc1	equ	0xFE6
 20731                           postdec1	equ	0xFE5
 20732                           plusw1	equ	0xFE3
 20733                           fsr1h	equ	0xFE2
 20734                           fsr1l	equ	0xFE1
 20735                           indf2	equ	0xFDF
 20736                           postinc2	equ	0xFDE
 20737                           postdec2	equ	0xFDD
 20738                           plusw2	equ	0xFDB
 20739                           fsr2h	equ	0xFDA
 20740                           fsr2l	equ	0xFD9
 20741                           status	equ	0xFD8
 20742                           
 20743 ;; *************** function _ENC424J600_readSPI *****************
 20744 ;; Defined at:
 20745 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 20746 ;; Parameters:    Size  Location     Type
 20747 ;;  data            2    0[BANK0 ] PTR unsigned char 
 20748 ;;		 -> ENC424J600_clearInterruptFlag@temp(1), ENC424J600_getInterruptFlags@low(1), ENC424J600_getInterruptFlags@high(1)
      +, ENC424J600_disable@temp(1), 
 20749 ;;		 -> ENC424J600_enable@temp(1), ENC424J600_disableAutoMACInsertion@temp(1), ENC424J600_enableAutoMACInsertion@temp(1)
      +, ENC424J600_getPacketCount@lowByte(1), 
 20750 ;;		 -> ENC424J600_readPHYRegister@highByte(1), ENC424J600_readPHYRegister@lowByte(1), ENC424J600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 20751 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 20752 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 20753 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 20754 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 20755 ;; Auto vars:     Size  Location     Type
 20756 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 20757 ;; Return value:  Size  Location     Type
 20758 ;;                  1    wreg      void 
 20759 ;; Registers used:
 20760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20761 ;; Tracked objects:
 20762 ;;		On entry : 0/0
 20763 ;;		On exit  : 0/0
 20764 ;;		Unchanged: 0/0
 20765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20766 ;;      Params:         0       2       0       0       0       0       0       0       0
 20767 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20768 ;;      Temps:          0       4       0       0       0       0       0       0       0
 20769 ;;      Totals:         0      10       0       0       0       0       0       0       0
 20770 ;;Total ram usage:       10 bytes
 20771 ;; Hardware stack levels used:    1
 20772 ;; Hardware stack levels required when called:    5
 20773 ;; This function calls:
 20774 ;;		_ENC424J600_initSPI
 20775 ;; This function is called by:
 20776 ;;		_ethernetController_getSourceMACAddress
 20777 ;;		_ethernetController_getEtherTypeField
 20778 ;;		_ethernetController_getRSV
 20779 ;;		_ethernetController_updateNextPacketPointer
 20780 ;;		_ethernetController_streamFromRXBuffer
 20781 ;;		_ENC424J600_readControlRegisterUnbanked
 20782 ;;		_ethernetController_getDestinationMACAddress
 20783 ;; This function uses a non-reentrant model
 20784 ;;
 20785                           
 20786                           	psect	text92
 20787  004260                     __ptext92:
 20788                           	opt stack 0
 20789  004260                     _ENC424J600_readSPI:
 20790                           	opt stack 21
 20791                           
 20792                           ;ENC424J600.c: 540: uint32_t timeoutCounter = 0;
 20793                           
 20794                           ;incstack = 0
 20795  004260  0E00               	movlw	0
 20796  004262  0100               	movlb	0	; () banked
 20797  004264  6F66               	movwf	ENC424J600_readSPI@timeoutCounter& (0+255),b
 20798  004266  0E00               	movlw	0
 20799  004268  6F67               	movwf	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),b
 20800  00426A  0E00               	movlw	0
 20801  00426C  6F68               	movwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),b
 20802  00426E  0E00               	movlw	0
 20803  004270  6F69               	movwf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),b
 20804                           
 20805                           ;ENC424J600.c: 541: SSP1BUF = 0x00;
 20806  004272  0E00               	movlw	0
 20807  004274  6EC9               	movwf	4041,c	;volatile
 20808  004276                     
 20809                           ; BSR set to: 0
 20810                           
 20811                           ; BSR set to: 0
 20812  004276  B0C7               	btfsc	4039,0,c	;volatile
 20813  004278  D015               	goto	u8350
 20814                           
 20815                           ; BSR set to: 0
 20816  00427A  C066  F062         	movff	ENC424J600_readSPI@timeoutCounter,??_ENC424J600_readSPI
 20817  00427E  C067  F063         	movff	ENC424J600_readSPI@timeoutCounter+1,??_ENC424J600_readSPI+1
 20818  004282  C068  F064         	movff	ENC424J600_readSPI@timeoutCounter+2,??_ENC424J600_readSPI+2
 20819  004286  C069  F065         	movff	ENC424J600_readSPI@timeoutCounter+3,??_ENC424J600_readSPI+3
 20820  00428A  2B66               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),f,b
 20821  00428C  0E00               	movlw	0
 20822  00428E  2367               	addwfc	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),f,b
 20823  004290  2368               	addwfc	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),f,b
 20824  004292  2369               	addwfc	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),f,b
 20825  004294  5165               	movf	(??_ENC424J600_readSPI+3)& (0+255),w,b
 20826  004296  1164               	iorwf	(??_ENC424J600_readSPI+2)& (0+255),w,b
 20827  004298  E105               	bnz	l7323
 20828  00429A  2962               	incf	??_ENC424J600_readSPI& (0+255),w,b
 20829  00429C  0E0F               	movlw	15
 20830  00429E  5963               	subwfb	(??_ENC424J600_readSPI+1)& (0+255),w,b
 20831  0042A0  A0D8               	btfss	status,0,c
 20832  0042A2  D7E9               	goto	l241
 20833  0042A4                     u8350:
 20834  0042A4                     l7323:
 20835                           
 20836                           ; BSR set to: 0
 20837                           ;ENC424J600.c: 543: if (timeoutCounter >= 0xfff) {
 20838  0042A4  5169               	movf	(ENC424J600_readSPI@timeoutCounter+3)& (0+255),w,b
 20839  0042A6  1168               	iorwf	(ENC424J600_readSPI@timeoutCounter+2)& (0+255),w,b
 20840  0042A8  E105               	bnz	u8360
 20841  0042AA  2966               	incf	ENC424J600_readSPI@timeoutCounter& (0+255),w,b
 20842  0042AC  0E0F               	movlw	15
 20843  0042AE  5967               	subwfb	(ENC424J600_readSPI@timeoutCounter+1)& (0+255),w,b
 20844  0042B0  A0D8               	btfss	status,0,c
 20845  0042B2  D004               	goto	l245
 20846  0042B4                     u8360:
 20847                           
 20848                           ; BSR set to: 0
 20849                           ;ENC424J600.c: 544: PORTBbits.RB4=1;
 20850  0042B4  8881               	bsf	3969,4,c	;volatile
 20851                           
 20852                           ; BSR set to: 0
 20853                           ;ENC424J600.c: 545: ENC424J600_initSPI();
 20854  0042B6  ECF8  F025         	call	_ENC424J600_initSPI	;wreg free
 20855                           
 20856                           ;ENC424J600.c: 546: return;
 20857  0042BA  0012               	return	
 20858  0042BC                     l245:
 20859                           
 20860                           ;ENC424J600.c: 547: }
 20861                           ;ENC424J600.c: 548: *data = SSP1BUF;
 20862  0042BC  C060  FFD9         	movff	ENC424J600_readSPI@data,fsr2l
 20863  0042C0  C061  FFDA         	movff	ENC424J600_readSPI@data+1,fsr2h
 20864  0042C4  CFC9 FFDF          	movff	4041,indf2	;volatile
 20865  0042C8  0012               	return		;funcret
 20866  0042CA                     __end_of_ENC424J600_readSPI:
 20867                           	opt stack 0
 20868                           tblptru	equ	0xFF8
 20869                           tblptrh	equ	0xFF7
 20870                           tblptrl	equ	0xFF6
 20871                           tablat	equ	0xFF5
 20872                           prodh	equ	0xFF4
 20873                           prodl	equ	0xFF3
 20874                           intcon	equ	0xFF2
 20875                           intcon3	equ	0xFF0
 20876                           indf0	equ	0xFEF
 20877                           postinc0	equ	0xFEE
 20878                           plusw0	equ	0xFEB
 20879                           fsr0h	equ	0xFEA
 20880                           fsr0l	equ	0xFE9
 20881                           wreg	equ	0xFE8
 20882                           indf1	equ	0xFE7
 20883                           postinc1	equ	0xFE6
 20884                           postdec1	equ	0xFE5
 20885                           plusw1	equ	0xFE3
 20886                           fsr1h	equ	0xFE2
 20887                           fsr1l	equ	0xFE1
 20888                           indf2	equ	0xFDF
 20889                           postinc2	equ	0xFDE
 20890                           postdec2	equ	0xFDD
 20891                           plusw2	equ	0xFDB
 20892                           fsr2h	equ	0xFDA
 20893                           fsr2l	equ	0xFD9
 20894                           status	equ	0xFD8
 20895                           
 20896 ;; *************** function _ENC424J600_initSPI *****************
 20897 ;; Defined at:
 20898 ;;		line 508 in file "src/enc424j600/ENC424J600.c"
 20899 ;; Parameters:    Size  Location     Type
 20900 ;;		None
 20901 ;; Auto vars:     Size  Location     Type
 20902 ;;		None
 20903 ;; Return value:  Size  Location     Type
 20904 ;;                  1    wreg      void 
 20905 ;; Registers used:
 20906 ;;		None
 20907 ;; Tracked objects:
 20908 ;;		On entry : 0/0
 20909 ;;		On exit  : 0/0
 20910 ;;		Unchanged: 0/0
 20911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20912 ;;      Params:         0       0       0       0       0       0       0       0       0
 20913 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20914 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20915 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20916 ;;Total ram usage:        0 bytes
 20917 ;; Hardware stack levels used:    1
 20918 ;; Hardware stack levels required when called:    4
 20919 ;; This function calls:
 20920 ;;		Nothing
 20921 ;; This function is called by:
 20922 ;;		_ethernetController_init
 20923 ;;		_ENC424J600_writeSPI
 20924 ;;		_ENC424J600_readSPI
 20925 ;; This function uses a non-reentrant model
 20926 ;;
 20927                           
 20928                           	psect	text93
 20929  004BF0                     __ptext93:
 20930                           	opt stack 0
 20931  004BF0                     _ENC424J600_initSPI:
 20932                           	opt stack 22
 20933                           
 20934                           ;ENC424J600.c: 509: SSP1CON1bits.SSPEN = 0;
 20935                           
 20936                           ;incstack = 0
 20937  004BF0  9AC6               	bcf	4038,5,c	;volatile
 20938                           
 20939                           ;ENC424J600.c: 510: SSP1STATbits.CKE = 1;
 20940  004BF2  8CC7               	bsf	4039,6,c	;volatile
 20941                           
 20942                           ;ENC424J600.c: 512: TRISBbits.TRISB0 = 1;
 20943  004BF4  8093               	bsf	3987,0,c	;volatile
 20944                           
 20945                           ;ENC424J600.c: 513: ANSELBbits.ANSB0 = 0;
 20946  004BF6  010F               	movlb	15	; () banked
 20947  004BF8  915C               	bcf	92,0,b	;volatile
 20948                           
 20949                           ;ENC424J600.c: 514: TRISBbits.TRISB1 = 0;
 20950  004BFA  9293               	bcf	3987,1,c	;volatile
 20951                           
 20952                           ;ENC424J600.c: 515: ANSELBbits.ANSB1 = 0;
 20953  004BFC  935C               	bcf	92,1,b	;volatile
 20954                           
 20955                           ;ENC424J600.c: 516: TRISBbits.TRISB3 = 0;
 20956  004BFE  9693               	bcf	3987,3,c	;volatile
 20957                           
 20958                           ;ENC424J600.c: 517: ANSELBbits.ANSB3 = 0;
 20959  004C00  975C               	bcf	92,3,b	;volatile
 20960                           
 20961                           ;ENC424J600.c: 518: TRISBbits.TRISB4 = 0;
 20962  004C02  9893               	bcf	3987,4,c	;volatile
 20963                           
 20964                           ;ENC424J600.c: 519: ANSELBbits.ANSB4 = 0;
 20965  004C04  995C               	bcf	92,4,b	;volatile
 20966                           
 20967                           ;ENC424J600.c: 520: PORTBbits.RB4=1;
 20968  004C06  8881               	bsf	3969,4,c	;volatile
 20969                           
 20970                           ;ENC424J600.c: 521: SSP1CON1bits.SSPEN = 1;
 20971  004C08  8AC6               	bsf	4038,5,c	;volatile
 20972                           
 20973                           ; BSR set to: 15
 20974  004C0A  0012               	return		;funcret
 20975  004C0C                     __end_of_ENC424J600_initSPI:
 20976                           	opt stack 0
 20977                           tblptru	equ	0xFF8
 20978                           tblptrh	equ	0xFF7
 20979                           tblptrl	equ	0xFF6
 20980                           tablat	equ	0xFF5
 20981                           prodh	equ	0xFF4
 20982                           prodl	equ	0xFF3
 20983                           intcon	equ	0xFF2
 20984                           intcon3	equ	0xFF0
 20985                           indf0	equ	0xFEF
 20986                           postinc0	equ	0xFEE
 20987                           plusw0	equ	0xFEB
 20988                           fsr0h	equ	0xFEA
 20989                           fsr0l	equ	0xFE9
 20990                           wreg	equ	0xFE8
 20991                           indf1	equ	0xFE7
 20992                           postinc1	equ	0xFE6
 20993                           postdec1	equ	0xFE5
 20994                           plusw1	equ	0xFE3
 20995                           fsr1h	equ	0xFE2
 20996                           fsr1l	equ	0xFE1
 20997                           indf2	equ	0xFDF
 20998                           postinc2	equ	0xFDE
 20999                           postdec2	equ	0xFDD
 21000                           plusw2	equ	0xFDB
 21001                           fsr2h	equ	0xFDA
 21002                           fsr2l	equ	0xFD9
 21003                           status	equ	0xFD8
 21004                           
 21005 ;; *************** function _UARTInit *****************
 21006 ;; Defined at:
 21007 ;;		line 26 in file "src/system/uart.c"
 21008 ;; Parameters:    Size  Location     Type
 21009 ;;		None
 21010 ;; Auto vars:     Size  Location     Type
 21011 ;;		None
 21012 ;; Return value:  Size  Location     Type
 21013 ;;                  1    wreg      void 
 21014 ;; Registers used:
 21015 ;;		wreg, status,2
 21016 ;; Tracked objects:
 21017 ;;		On entry : 0/0
 21018 ;;		On exit  : 0/0
 21019 ;;		Unchanged: 0/0
 21020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21021 ;;      Params:         0       0       0       0       0       0       0       0       0
 21022 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21023 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21024 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21025 ;;Total ram usage:        0 bytes
 21026 ;; Hardware stack levels used:    1
 21027 ;; Hardware stack levels required when called:    4
 21028 ;; This function calls:
 21029 ;;		Nothing
 21030 ;; This function is called by:
 21031 ;;		_main
 21032 ;; This function uses a non-reentrant model
 21033 ;;
 21034                           
 21035                           	psect	text94
 21036  004CB2                     __ptext94:
 21037                           	opt stack 0
 21038  004CB2                     _UARTInit:
 21039                           	opt stack 26
 21040                           
 21041                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 21042                           
 21043                           ; BSR set to: 15
 21044                           ;incstack = 0
 21045  004CB2  8AAC               	bsf	4012,5,c	;volatile
 21046                           
 21047                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 21048  004CB4  98AC               	bcf	4012,4,c	;volatile
 21049                           
 21050                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 21051  004CB6  8EAB               	bsf	4011,7,c	;volatile
 21052                           
 21053                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 21054  004CB8  8CAC               	bsf	4012,6,c	;volatile
 21055                           
 21056                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 21057  004CBA  80AC               	bsf	4012,0,c	;volatile
 21058                           
 21059                           ;uart.c: 32: SPBRG = 3;
 21060  004CBC  0E03               	movlw	3
 21061  004CBE  6EAF               	movwf	4015,c	;volatile
 21062  004CC0  0012               	return		;funcret
 21063  004CC2                     __end_of_UARTInit:
 21064                           	opt stack 0
 21065                           tblptru	equ	0xFF8
 21066                           tblptrh	equ	0xFF7
 21067                           tblptrl	equ	0xFF6
 21068                           tablat	equ	0xFF5
 21069                           prodh	equ	0xFF4
 21070                           prodl	equ	0xFF3
 21071                           intcon	equ	0xFF2
 21072                           intcon3	equ	0xFF0
 21073                           indf0	equ	0xFEF
 21074                           postinc0	equ	0xFEE
 21075                           plusw0	equ	0xFEB
 21076                           fsr0h	equ	0xFEA
 21077                           fsr0l	equ	0xFE9
 21078                           wreg	equ	0xFE8
 21079                           indf1	equ	0xFE7
 21080                           postinc1	equ	0xFE6
 21081                           postdec1	equ	0xFE5
 21082                           plusw1	equ	0xFE3
 21083                           fsr1h	equ	0xFE2
 21084                           fsr1l	equ	0xFE1
 21085                           indf2	equ	0xFDF
 21086                           postinc2	equ	0xFDE
 21087                           postdec2	equ	0xFDD
 21088                           plusw2	equ	0xFDB
 21089                           fsr2h	equ	0xFDA
 21090                           fsr2l	equ	0xFD9
 21091                           status	equ	0xFD8
 21092                           
 21093 ;; *************** function _ARP_initTable *****************
 21094 ;; Defined at:
 21095 ;;		line 271 in file "src/stack/protocols/arp.c"
 21096 ;; Parameters:    Size  Location     Type
 21097 ;;		None
 21098 ;; Auto vars:     Size  Location     Type
 21099 ;;  i               1   38[BANK0 ] unsigned char 
 21100 ;;  mac             6   28[BANK0 ] struct macaddress
 21101 ;;  ip              4   34[BANK0 ] struct ipv4_address
 21102 ;; Return value:  Size  Location     Type
 21103 ;;                  1    wreg      void 
 21104 ;; Registers used:
 21105 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21106 ;; Tracked objects:
 21107 ;;		On entry : 0/0
 21108 ;;		On exit  : 0/0
 21109 ;;		Unchanged: 0/0
 21110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21111 ;;      Params:         0       0       0       0       0       0       0       0       0
 21112 ;;      Locals:         0      11       0       0       0       0       0       0       0
 21113 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21114 ;;      Totals:         0      11       0       0       0       0       0       0       0
 21115 ;;Total ram usage:       11 bytes
 21116 ;; Hardware stack levels used:    1
 21117 ;; Hardware stack levels required when called:    5
 21118 ;; This function calls:
 21119 ;;		_ARP_setNewEntry
 21120 ;;		_ipv4_setToAllZero
 21121 ;;		_mac_setAllZero
 21122 ;; This function is called by:
 21123 ;;		_main
 21124 ;; This function uses a non-reentrant model
 21125 ;;
 21126                           
 21127                           	psect	text95
 21128  004332                     __ptext95:
 21129                           	opt stack 0
 21130  004332                     _ARP_initTable:
 21131                           	opt stack 25
 21132                           
 21133                           ;arp.c: 272: macaddress_t mac;
 21134                           ;arp.c: 273: ipv4_address_t ip;
 21135                           ;arp.c: 274: mac_setAllZero(&mac);
 21136                           
 21137                           ;incstack = 0
 21138  004332  0E7C               	movlw	low ARP_initTable@mac
 21139  004334  0100               	movlb	0	; () banked
 21140  004336  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 21141  004338  0E00               	movlw	high ARP_initTable@mac
 21142  00433A  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 21143  00433C  EC60  F025         	call	_mac_setAllZero	;wreg free
 21144                           
 21145                           ;arp.c: 275: ipv4_setToAllZero(&ip);
 21146  004340  0E82               	movlw	low ARP_initTable@ip
 21147  004342  0100               	movlb	0	; () banked
 21148  004344  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 21149  004346  0E00               	movlw	high ARP_initTable@ip
 21150  004348  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 21151  00434A  ECDB  F025         	call	_ipv4_setToAllZero	;wreg free
 21152                           
 21153                           ;arp.c: 276: for (uint8_t i = 0; i < 8; i++)
 21154  00434E  0E00               	movlw	0
 21155  004350  0100               	movlb	0	; () banked
 21156  004352  6F86               	movwf	ARP_initTable@i& (0+255),b
 21157  004354                     l9097:
 21158                           
 21159                           ; BSR set to: 0
 21160  004354  0E07               	movlw	7
 21161  004356  6586               	cpfsgt	ARP_initTable@i& (0+255),b
 21162  004358  D001               	goto	l959
 21163  00435A  0012               	return	
 21164  00435C                     l959:
 21165                           
 21166                           ; BSR set to: 0
 21167                           ;arp.c: 277: ARP_setNewEntry(mac, ip, 0xffffffff);
 21168                           
 21169                           ; BSR set to: 0
 21170  00435C  EE20  F07C         	lfsr	2,ARP_initTable@mac
 21171  004360  EE00  F064         	lfsr	0,ARP_setNewEntry@mac
 21172  004364  0E05               	movlw	5
 21173  004366                     u11291:
 21174  004366  CFDB FFEB          	movff	plusw2,plusw0
 21175  00436A  06E8               	decf	wreg,f,c
 21176  00436C  E2FC               	bc	u11291
 21177  00436E  C082  F06A         	movff	ARP_initTable@ip,ARP_setNewEntry@ip
 21178  004372  C083  F06B         	movff	ARP_initTable@ip+1,ARP_setNewEntry@ip+1
 21179  004376  C084  F06C         	movff	ARP_initTable@ip+2,ARP_setNewEntry@ip+2
 21180  00437A  C085  F06D         	movff	ARP_initTable@ip+3,ARP_setNewEntry@ip+3
 21181  00437E  0EFF               	movlw	255
 21182  004380  6F6E               	movwf	ARP_setNewEntry@timestamp& (0+255),b
 21183  004382  0EFF               	movlw	255
 21184  004384  6F6F               	movwf	(ARP_setNewEntry@timestamp+1)& (0+255),b
 21185  004386  0EFF               	movlw	255
 21186  004388  6F70               	movwf	(ARP_setNewEntry@timestamp+2)& (0+255),b
 21187  00438A  0EFF               	movlw	255
 21188  00438C  6F71               	movwf	(ARP_setNewEntry@timestamp+3)& (0+255),b
 21189  00438E  EC13  F01A         	call	_ARP_setNewEntry	;wreg free
 21190  004392  0100               	movlb	0	; () banked
 21191  004394  2B86               	incf	ARP_initTable@i& (0+255),f,b
 21192  004396  D7DE               	goto	l9097
 21193  004398                     __end_of_ARP_initTable:
 21194                           	opt stack 0
 21195                           tblptru	equ	0xFF8
 21196                           tblptrh	equ	0xFF7
 21197                           tblptrl	equ	0xFF6
 21198                           tablat	equ	0xFF5
 21199                           prodh	equ	0xFF4
 21200                           prodl	equ	0xFF3
 21201                           intcon	equ	0xFF2
 21202                           intcon3	equ	0xFF0
 21203                           indf0	equ	0xFEF
 21204                           postinc0	equ	0xFEE
 21205                           plusw0	equ	0xFEB
 21206                           fsr0h	equ	0xFEA
 21207                           fsr0l	equ	0xFE9
 21208                           wreg	equ	0xFE8
 21209                           indf1	equ	0xFE7
 21210                           postinc1	equ	0xFE6
 21211                           postdec1	equ	0xFE5
 21212                           plusw1	equ	0xFE3
 21213                           fsr1h	equ	0xFE2
 21214                           fsr1l	equ	0xFE1
 21215                           indf2	equ	0xFDF
 21216                           postinc2	equ	0xFDE
 21217                           postdec2	equ	0xFDD
 21218                           plusw2	equ	0xFDB
 21219                           fsr2h	equ	0xFDA
 21220                           fsr2l	equ	0xFD9
 21221                           status	equ	0xFD8
 21222                           
 21223 ;; *************** function _mac_setAllZero *****************
 21224 ;; Defined at:
 21225 ;;		line 47 in file "src/eth/mac.c"
 21226 ;; Parameters:    Size  Location     Type
 21227 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 21228 ;;		 -> ARP_initTable@mac(6), 
 21229 ;; Auto vars:     Size  Location     Type
 21230 ;;  i               1    2[BANK0 ] unsigned char 
 21231 ;; Return value:  Size  Location     Type
 21232 ;;                  1    wreg      void 
 21233 ;; Registers used:
 21234 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21235 ;; Tracked objects:
 21236 ;;		On entry : 0/0
 21237 ;;		On exit  : 0/0
 21238 ;;		Unchanged: 0/0
 21239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21240 ;;      Params:         0       2       0       0       0       0       0       0       0
 21241 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21242 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21243 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21244 ;;Total ram usage:        3 bytes
 21245 ;; Hardware stack levels used:    1
 21246 ;; Hardware stack levels required when called:    4
 21247 ;; This function calls:
 21248 ;;		Nothing
 21249 ;; This function is called by:
 21250 ;;		_ARP_initTable
 21251 ;; This function uses a non-reentrant model
 21252 ;;
 21253                           
 21254                           	psect	text96
 21255  004AC0                     __ptext96:
 21256                           	opt stack 0
 21257  004AC0                     _mac_setAllZero:
 21258                           	opt stack 25
 21259                           
 21260                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 21261                           
 21262                           ; BSR set to: 0
 21263                           ;incstack = 0
 21264  004AC0  0E00               	movlw	0
 21265  004AC2  0100               	movlb	0	; () banked
 21266  004AC4  6F62               	movwf	mac_setAllZero@i& (0+255),b
 21267  004AC6                     l8889:
 21268                           
 21269                           ; BSR set to: 0
 21270  004AC6  0E05               	movlw	5
 21271  004AC8  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 21272  004ACA  D001               	goto	l394
 21273  004ACC  0012               	return	
 21274  004ACE                     l394:
 21275                           
 21276                           ; BSR set to: 0
 21277                           ;mac.c: 49: mac->address[i] = 0x00;
 21278                           
 21279                           ; BSR set to: 0
 21280  004ACE  5162               	movf	mac_setAllZero@i& (0+255),w,b
 21281  004AD0  0D01               	mullw	1
 21282  004AD2  50F3               	movf	prodl,w,c
 21283  004AD4  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 21284  004AD6  6ED9               	movwf	fsr2l,c
 21285  004AD8  50F4               	movf	prodh,w,c
 21286  004ADA  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 21287  004ADC  6EDA               	movwf	fsr2h,c
 21288  004ADE  0E00               	movlw	0
 21289  004AE0  6EDF               	movwf	indf2,c
 21290                           
 21291                           ; BSR set to: 0
 21292  004AE2  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 21293  004AE4  D7F0               	goto	l8889
 21294  004AE6                     __end_of_mac_setAllZero:
 21295                           	opt stack 0
 21296                           tblptru	equ	0xFF8
 21297                           tblptrh	equ	0xFF7
 21298                           tblptrl	equ	0xFF6
 21299                           tablat	equ	0xFF5
 21300                           prodh	equ	0xFF4
 21301                           prodl	equ	0xFF3
 21302                           intcon	equ	0xFF2
 21303                           intcon3	equ	0xFF0
 21304                           indf0	equ	0xFEF
 21305                           postinc0	equ	0xFEE
 21306                           plusw0	equ	0xFEB
 21307                           fsr0h	equ	0xFEA
 21308                           fsr0l	equ	0xFE9
 21309                           wreg	equ	0xFE8
 21310                           indf1	equ	0xFE7
 21311                           postinc1	equ	0xFE6
 21312                           postdec1	equ	0xFE5
 21313                           plusw1	equ	0xFE3
 21314                           fsr1h	equ	0xFE2
 21315                           fsr1l	equ	0xFE1
 21316                           indf2	equ	0xFDF
 21317                           postinc2	equ	0xFDE
 21318                           postdec2	equ	0xFDD
 21319                           plusw2	equ	0xFDB
 21320                           fsr2h	equ	0xFDA
 21321                           fsr2l	equ	0xFD9
 21322                           status	equ	0xFD8
 21323                           
 21324 ;; *************** function _ipv4_setToAllZero *****************
 21325 ;; Defined at:
 21326 ;;		line 251 in file "src/stack/protocols/ipv4.c"
 21327 ;; Parameters:    Size  Location     Type
 21328 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 21329 ;;		 -> ARP_initTable@ip(4), 
 21330 ;; Auto vars:     Size  Location     Type
 21331 ;;  i               1    2[BANK0 ] unsigned char 
 21332 ;; Return value:  Size  Location     Type
 21333 ;;                  1    wreg      void 
 21334 ;; Registers used:
 21335 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21336 ;; Tracked objects:
 21337 ;;		On entry : 0/0
 21338 ;;		On exit  : 0/0
 21339 ;;		Unchanged: 0/0
 21340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21341 ;;      Params:         0       2       0       0       0       0       0       0       0
 21342 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21343 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21344 ;;      Totals:         0       3       0       0       0       0       0       0       0
 21345 ;;Total ram usage:        3 bytes
 21346 ;; Hardware stack levels used:    1
 21347 ;; Hardware stack levels required when called:    4
 21348 ;; This function calls:
 21349 ;;		Nothing
 21350 ;; This function is called by:
 21351 ;;		_ARP_initTable
 21352 ;; This function uses a non-reentrant model
 21353 ;;
 21354                           
 21355                           	psect	text97
 21356  004BB6                     __ptext97:
 21357                           	opt stack 0
 21358  004BB6                     _ipv4_setToAllZero:
 21359                           	opt stack 25
 21360                           
 21361                           ;ipv4.c: 252: for (uint8_t i = 0; i < 4; i++) {
 21362                           
 21363                           ; BSR set to: 0
 21364                           ;incstack = 0
 21365  004BB6  0E00               	movlw	0
 21366  004BB8  0100               	movlb	0	; () banked
 21367  004BBA  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 21368  004BBC                     l8943:
 21369                           
 21370                           ; BSR set to: 0
 21371  004BBC  0E03               	movlw	3
 21372  004BBE  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 21373  004BC0  D001               	goto	l1067
 21374  004BC2  0012               	return	
 21375  004BC4                     l1067:
 21376                           
 21377                           ; BSR set to: 0
 21378                           ;ipv4.c: 253: ip->address[0] = 0x00;
 21379                           
 21380                           ; BSR set to: 0
 21381  004BC4  C060  FFD9         	movff	ipv4_setToAllZero@ip,fsr2l
 21382  004BC8  C061  FFDA         	movff	ipv4_setToAllZero@ip+1,fsr2h
 21383  004BCC  0E00               	movlw	0
 21384  004BCE  6EDF               	movwf	indf2,c
 21385                           
 21386                           ; BSR set to: 0
 21387  004BD0  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 21388  004BD2  D7F4               	goto	l8943
 21389  004BD4                     __end_of_ipv4_setToAllZero:
 21390                           	opt stack 0
 21391                           tblptru	equ	0xFF8
 21392                           tblptrh	equ	0xFF7
 21393                           tblptrl	equ	0xFF6
 21394                           tablat	equ	0xFF5
 21395                           prodh	equ	0xFF4
 21396                           prodl	equ	0xFF3
 21397                           intcon	equ	0xFF2
 21398                           intcon3	equ	0xFF0
 21399                           indf0	equ	0xFEF
 21400                           postinc0	equ	0xFEE
 21401                           plusw0	equ	0xFEB
 21402                           fsr0h	equ	0xFEA
 21403                           fsr0l	equ	0xFE9
 21404                           wreg	equ	0xFE8
 21405                           indf1	equ	0xFE7
 21406                           postinc1	equ	0xFE6
 21407                           postdec1	equ	0xFE5
 21408                           plusw1	equ	0xFE3
 21409                           fsr1h	equ	0xFE2
 21410                           fsr1l	equ	0xFE1
 21411                           indf2	equ	0xFDF
 21412                           postinc2	equ	0xFDE
 21413                           postdec2	equ	0xFDD
 21414                           plusw2	equ	0xFDB
 21415                           fsr2h	equ	0xFDA
 21416                           fsr2l	equ	0xFD9
 21417                           status	equ	0xFD8
 21418                           
 21419 ;; *************** function _ARP_setNewEntry *****************
 21420 ;; Defined at:
 21421 ;;		line 255 in file "src/stack/protocols/arp.c"
 21422 ;; Parameters:    Size  Location     Type
 21423 ;;  mac             6    4[BANK0 ] struct macaddress
 21424 ;;  ip              4   10[BANK0 ] struct ipv4_address
 21425 ;;  timestamp       4   14[BANK0 ] unsigned long 
 21426 ;; Auto vars:     Size  Location     Type
 21427 ;;  i               1   27[BANK0 ] unsigned char 
 21428 ;;  maxSeconds      4   22[BANK0 ] unsigned long 
 21429 ;;  oldestIndex     1   26[BANK0 ] unsigned char 
 21430 ;; Return value:  Size  Location     Type
 21431 ;;                  1    wreg      void 
 21432 ;; Registers used:
 21433 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 21434 ;; Tracked objects:
 21435 ;;		On entry : 0/0
 21436 ;;		On exit  : 0/0
 21437 ;;		Unchanged: 0/0
 21438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21439 ;;      Params:         0      14       0       0       0       0       0       0       0
 21440 ;;      Locals:         0       6       0       0       0       0       0       0       0
 21441 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21442 ;;      Totals:         0      24       0       0       0       0       0       0       0
 21443 ;;Total ram usage:       24 bytes
 21444 ;; Hardware stack levels used:    1
 21445 ;; Hardware stack levels required when called:    4
 21446 ;; This function calls:
 21447 ;;		Nothing
 21448 ;; This function is called by:
 21449 ;;		_ARP_handleNewPacket
 21450 ;;		_ARP_initTable
 21451 ;; This function uses a non-reentrant model
 21452 ;;
 21453                           
 21454                           	psect	text98
 21455  003426                     __ptext98:
 21456                           	opt stack 0
 21457  003426                     _ARP_setNewEntry:
 21458                           	opt stack 23
 21459                           
 21460                           ;arp.c: 256: uint32_t maxSeconds = 0;
 21461                           
 21462                           ; BSR set to: 0
 21463                           ;incstack = 0
 21464  003426  0E00               	movlw	0
 21465  003428  0100               	movlb	0	; () banked
 21466  00342A  6F76               	movwf	ARP_setNewEntry@maxSeconds& (0+255),b
 21467  00342C  0E00               	movlw	0
 21468  00342E  6F77               	movwf	(ARP_setNewEntry@maxSeconds+1)& (0+255),b
 21469  003430  0E00               	movlw	0
 21470  003432  6F78               	movwf	(ARP_setNewEntry@maxSeconds+2)& (0+255),b
 21471  003434  0E00               	movlw	0
 21472  003436  6F79               	movwf	(ARP_setNewEntry@maxSeconds+3)& (0+255),b
 21473                           
 21474                           ;arp.c: 257: uint8_t oldestIndex = 0;
 21475  003438  0E00               	movlw	0
 21476  00343A  6F7A               	movwf	ARP_setNewEntry@oldestIndex& (0+255),b
 21477                           
 21478                           ;arp.c: 259: for (uint8_t i = 0; i < 8; i++) {
 21479  00343C  0E00               	movlw	0
 21480  00343E  6F7B               	movwf	ARP_setNewEntry@i& (0+255),b
 21481  003440                     l8241:
 21482                           
 21483                           ; BSR set to: 0
 21484  003440  0E07               	movlw	7
 21485  003442  657B               	cpfsgt	ARP_setNewEntry@i& (0+255),b
 21486  003444  D001               	goto	l953
 21487  003446  D02E               	goto	u10240
 21488  003448                     l953:
 21489                           
 21490                           ; BSR set to: 0
 21491                           ;arp.c: 260: if (ARP_table[i].secondsCreated > maxSeconds) {
 21492                           
 21493                           ; BSR set to: 0
 21494  003448  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21495  00344A  0D0E               	mullw	14
 21496  00344C  0E0A               	movlw	10
 21497  00344E  26F3               	addwf	prodl,f,c
 21498  003450  0E00               	movlw	0
 21499  003452  22F4               	addwfc	prodh,f,c
 21500  003454  0E00               	movlw	low _ARP_table
 21501  003456  24F3               	addwf	prodl,w,c
 21502  003458  6ED9               	movwf	fsr2l,c
 21503  00345A  0E03               	movlw	high _ARP_table
 21504  00345C  20F4               	addwfc	prodh,w,c
 21505  00345E  6EDA               	movwf	fsr2h,c
 21506  003460  50DE               	movf	postinc2,w,c
 21507  003462  5D76               	subwf	ARP_setNewEntry@maxSeconds& (0+255),w,b
 21508  003464  50DE               	movf	postinc2,w,c
 21509  003466  5977               	subwfb	(ARP_setNewEntry@maxSeconds+1)& (0+255),w,b
 21510  003468  50DE               	movf	postinc2,w,c
 21511  00346A  5978               	subwfb	(ARP_setNewEntry@maxSeconds+2)& (0+255),w,b
 21512  00346C  50DE               	movf	postinc2,w,c
 21513  00346E  5979               	subwfb	(ARP_setNewEntry@maxSeconds+3)& (0+255),w,b
 21514  003470  B0D8               	btfsc	status,0,c
 21515  003472  D016               	goto	l955
 21516                           
 21517                           ; BSR set to: 0
 21518                           ;arp.c: 261: maxSeconds = ARP_table[i].secondsCreated;
 21519  003474  517B               	movf	ARP_setNewEntry@i& (0+255),w,b
 21520  003476  0D0E               	mullw	14
 21521  003478  0E0A               	movlw	10
 21522  00347A  26F3               	addwf	prodl,f,c
 21523  00347C  0E00               	movlw	0
 21524  00347E  22F4               	addwfc	prodh,f,c
 21525  003480  0E00               	movlw	low _ARP_table
 21526  003482  24F3               	addwf	prodl,w,c
 21527  003484  6ED9               	movwf	fsr2l,c
 21528  003486  0E03               	movlw	high _ARP_table
 21529  003488  20F4               	addwfc	prodh,w,c
 21530  00348A  6EDA               	movwf	fsr2h,c
 21531  00348C  CFDE F076          	movff	postinc2,ARP_setNewEntry@maxSeconds
 21532  003490  CFDE F077          	movff	postinc2,ARP_setNewEntry@maxSeconds+1
 21533  003494  CFDE F078          	movff	postinc2,ARP_setNewEntry@maxSeconds+2
 21534  003498  CFDE F079          	movff	postinc2,ARP_setNewEntry@maxSeconds+3
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;arp.c: 262: oldestIndex = i;
 21538  00349C  C07B  F07A         	movff	ARP_setNewEntry@i,ARP_setNewEntry@oldestIndex
 21539  0034A0                     l955:
 21540                           
 21541                           ; BSR set to: 0
 21542                           
 21543                           ; BSR set to: 0
 21544  0034A0  2B7B               	incf	ARP_setNewEntry@i& (0+255),f,b
 21545  0034A2  D7CE               	goto	l8241
 21546  0034A4                     u10240:
 21547                           
 21548                           ; BSR set to: 0
 21549                           ;arp.c: 263: }
 21550                           ;arp.c: 264: }
 21551                           ;arp.c: 266: ARP_table[oldestIndex].ip = ip;
 21552                           
 21553                           ; BSR set to: 0
 21554  0034A4  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21555  0034A6  0D0E               	mullw	14
 21556  0034A8  0E00               	movlw	low _ARP_table
 21557  0034AA  24F3               	addwf	prodl,w,c
 21558  0034AC  6ED9               	movwf	fsr2l,c
 21559  0034AE  0E03               	movlw	high _ARP_table
 21560  0034B0  20F4               	addwfc	prodh,w,c
 21561  0034B2  6EDA               	movwf	fsr2h,c
 21562  0034B4  C06A  FFDE         	movff	ARP_setNewEntry@ip,postinc2
 21563  0034B8  C06B  FFDE         	movff	ARP_setNewEntry@ip+1,postinc2
 21564  0034BC  C06C  FFDE         	movff	ARP_setNewEntry@ip+2,postinc2
 21565  0034C0  C06D  FFDE         	movff	ARP_setNewEntry@ip+3,postinc2
 21566                           
 21567                           ; BSR set to: 0
 21568                           ;arp.c: 267: ARP_table[oldestIndex].mac = mac;
 21569  0034C4  EE20  F064         	lfsr	2,ARP_setNewEntry@mac
 21570  0034C8  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21571  0034CA  0D0E               	mullw	14
 21572  0034CC  0E04               	movlw	4
 21573  0034CE  26F3               	addwf	prodl,f,c
 21574  0034D0  0E00               	movlw	0
 21575  0034D2  22F4               	addwfc	prodh,f,c
 21576  0034D4  0E00               	movlw	low _ARP_table
 21577  0034D6  24F3               	addwf	prodl,w,c
 21578  0034D8  6EE1               	movwf	fsr1l,c
 21579  0034DA  0E03               	movlw	high _ARP_table
 21580  0034DC  20F4               	addwfc	prodh,w,c
 21581  0034DE  6EE2               	movwf	fsr1h,c
 21582  0034E0  0E05               	movlw	5
 21583  0034E2                     u10251:
 21584  0034E2  CFDB FFE3          	movff	plusw2,plusw1
 21585  0034E6  06E8               	decf	wreg,f,c
 21586  0034E8  E2FC               	bc	u10251
 21587                           
 21588                           ; BSR set to: 0
 21589                           ;arp.c: 268: ARP_table[oldestIndex].secondsCreated = timestamp;
 21590  0034EA  517A               	movf	ARP_setNewEntry@oldestIndex& (0+255),w,b
 21591  0034EC  0D0E               	mullw	14
 21592  0034EE  0E0A               	movlw	10
 21593  0034F0  26F3               	addwf	prodl,f,c
 21594  0034F2  0E00               	movlw	0
 21595  0034F4  22F4               	addwfc	prodh,f,c
 21596  0034F6  0E00               	movlw	low _ARP_table
 21597  0034F8  24F3               	addwf	prodl,w,c
 21598  0034FA  6ED9               	movwf	fsr2l,c
 21599  0034FC  0E03               	movlw	high _ARP_table
 21600  0034FE  20F4               	addwfc	prodh,w,c
 21601  003500  6EDA               	movwf	fsr2h,c
 21602  003502  C06E  FFDE         	movff	ARP_setNewEntry@timestamp,postinc2
 21603  003506  C06F  FFDE         	movff	ARP_setNewEntry@timestamp+1,postinc2
 21604  00350A  C070  FFDE         	movff	ARP_setNewEntry@timestamp+2,postinc2
 21605  00350E  C071  FFDE         	movff	ARP_setNewEntry@timestamp+3,postinc2
 21606                           
 21607                           ; BSR set to: 0
 21608  003512  0012               	return		;funcret
 21609  003514                     __end_of_ARP_setNewEntry:
 21610                           	opt stack 0
 21611                           tblptru	equ	0xFF8
 21612                           tblptrh	equ	0xFF7
 21613                           tblptrl	equ	0xFF6
 21614                           tablat	equ	0xFF5
 21615                           prodh	equ	0xFF4
 21616                           prodl	equ	0xFF3
 21617                           intcon	equ	0xFF2
 21618                           intcon3	equ	0xFF0
 21619                           indf0	equ	0xFEF
 21620                           postinc0	equ	0xFEE
 21621                           plusw0	equ	0xFEB
 21622                           fsr0h	equ	0xFEA
 21623                           fsr0l	equ	0xFE9
 21624                           wreg	equ	0xFE8
 21625                           indf1	equ	0xFE7
 21626                           postinc1	equ	0xFE6
 21627                           postdec1	equ	0xFE5
 21628                           plusw1	equ	0xFE3
 21629                           fsr1h	equ	0xFE2
 21630                           fsr1l	equ	0xFE1
 21631                           indf2	equ	0xFDF
 21632                           postinc2	equ	0xFDE
 21633                           postdec2	equ	0xFDD
 21634                           plusw2	equ	0xFDB
 21635                           fsr2h	equ	0xFDA
 21636                           fsr2l	equ	0xFD9
 21637                           status	equ	0xFD8
 21638                           
 21639 ;; *************** function _ISR *****************
 21640 ;; Defined at:
 21641 ;;		line 267 in file "src/system/main.c"
 21642 ;; Parameters:    Size  Location     Type
 21643 ;;		None
 21644 ;; Auto vars:     Size  Location     Type
 21645 ;;		None
 21646 ;; Return value:  Size  Location     Type
 21647 ;;                  1    wreg      void 
 21648 ;; Registers used:
 21649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21650 ;; Tracked objects:
 21651 ;;		On entry : 0/0
 21652 ;;		On exit  : 0/0
 21653 ;;		Unchanged: 0/0
 21654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21655 ;;      Params:         0       0       0       0       0       0       0       0       0
 21656 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21657 ;;      Temps:         18       0       0       0       0       0       0       0       0
 21658 ;;      Totals:        18       0       0       0       0       0       0       0       0
 21659 ;;Total ram usage:       18 bytes
 21660 ;; Hardware stack levels used:    1
 21661 ;; Hardware stack levels required when called:    3
 21662 ;; This function calls:
 21663 ;;		_buttonHandler
 21664 ;;		_sevenSegmentUpdate
 21665 ;;		_updateSeconds
 21666 ;; This function is called by:
 21667 ;;		Interrupt level 2
 21668 ;; This function uses a non-reentrant model
 21669 ;;
 21670                           
 21671                           	psect	intcode
 21672  000008                     __pintcode:
 21673                           	opt stack 0
 21674  000008                     _ISR:
 21675                           	opt stack 17
 21676                           
 21677                           ; BSR set to: 0
 21678                           ;incstack = 0
 21679  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 21680  00000A  CFFA F016          	movff	pclath,??_ISR
 21681  00000E  CFFB F017          	movff	pclatu,??_ISR+1
 21682  000012  CFE9 F018          	movff	fsr0l,??_ISR+2
 21683  000016  CFEA F019          	movff	fsr0h,??_ISR+3
 21684  00001A  CFE1 F01A          	movff	fsr1l,??_ISR+4
 21685  00001E  CFE2 F01B          	movff	fsr1h,??_ISR+5
 21686  000022  CFD9 F01C          	movff	fsr2l,??_ISR+6
 21687  000026  CFDA F01D          	movff	fsr2h,??_ISR+7
 21688  00002A  CFF3 F01E          	movff	prodl,??_ISR+8
 21689  00002E  CFF4 F01F          	movff	prodh,??_ISR+9
 21690  000032  CFF6 F020          	movff	tblptrl,??_ISR+10
 21691  000036  CFF7 F021          	movff	tblptrh,??_ISR+11
 21692  00003A  CFF8 F022          	movff	tblptru,??_ISR+12
 21693  00003E  CFF5 F023          	movff	tablat,??_ISR+13
 21694  000042  C04D  F024         	movff	btemp,??_ISR+14
 21695  000046  C04E  F025         	movff	btemp+1,??_ISR+15
 21696  00004A  C04F  F026         	movff	btemp+2,??_ISR+16
 21697  00004E  C050  F027         	movff	btemp+3,??_ISR+17
 21698                           
 21699                           ;main.c: 268: if (INTCONbits.TMR0IF) {
 21700  000052  A4F2               	btfss	intcon,2,c	;volatile
 21701  000054  D00F               	goto	i2l686
 21702                           
 21703                           ;main.c: 269: INTCONbits.TMR0IF = 0;
 21704  000056  94F2               	bcf	intcon,2,c	;volatile
 21705                           
 21706                           ;main.c: 270: updateSeconds();
 21707  000058  EC73  F025         	call	_updateSeconds	;wreg free
 21708                           
 21709                           ;main.c: 271: sevenSegmentUpdate(numberToDisplay);
 21710  00005C  C034  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 21711  000060  C035  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 21712  000064  ECC3  F01B         	call	_sevenSegmentUpdate	;wreg free
 21713                           
 21714                           ;main.c: 272: buttonHandler(&buttonState);
 21715  000068  0EE0               	movlw	low _buttonState
 21716  00006A  6E01               	movwf	buttonHandler@state,c
 21717  00006C  0E01               	movlw	high _buttonState
 21718  00006E  6E02               	movwf	buttonHandler@state+1,c
 21719  000070  EC71  F01D         	call	_buttonHandler	;wreg free
 21720  000074                     i2l686:
 21721                           
 21722                           ;main.c: 273: }
 21723                           ;main.c: 274: if (INTCON3bits.INT2IF) {
 21724  000074  B2F0               	btfsc	intcon3,1,c	;volatile
 21725                           
 21726                           ;main.c: 275: INTCON3bits.INT2IF = 0;
 21727  000076  92F0               	bcf	intcon3,1,c	;volatile
 21728                           
 21729                           ;main.c: 282: }
 21730                           ;main.c: 283: if (RCIF) {
 21731  000078  C027  F050         	movff	??_ISR+17,btemp+3
 21732  00007C  C026  F04F         	movff	??_ISR+16,btemp+2
 21733  000080  C025  F04E         	movff	??_ISR+15,btemp+1
 21734  000084  C024  F04D         	movff	??_ISR+14,btemp
 21735  000088  C023  FFF5         	movff	??_ISR+13,tablat
 21736  00008C  C022  FFF8         	movff	??_ISR+12,tblptru
 21737  000090  C021  FFF7         	movff	??_ISR+11,tblptrh
 21738  000094  C020  FFF6         	movff	??_ISR+10,tblptrl
 21739  000098  C01F  FFF4         	movff	??_ISR+9,prodh
 21740  00009C  C01E  FFF3         	movff	??_ISR+8,prodl
 21741  0000A0  C01D  FFDA         	movff	??_ISR+7,fsr2h
 21742  0000A4  C01C  FFD9         	movff	??_ISR+6,fsr2l
 21743  0000A8  C01B  FFE2         	movff	??_ISR+5,fsr1h
 21744  0000AC  C01A  FFE1         	movff	??_ISR+4,fsr1l
 21745  0000B0  C019  FFEA         	movff	??_ISR+3,fsr0h
 21746  0000B4  C018  FFE9         	movff	??_ISR+2,fsr0l
 21747  0000B8  C017  FFFB         	movff	??_ISR+1,pclatu
 21748  0000BC  C016  FFFA         	movff	??_ISR,pclath
 21749  0000C0  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 21750  0000C2  0011               	retfie		f
 21751  0000C4                     __end_of_ISR:
 21752                           	opt stack 0
 21753                           pclatu	equ	0xFFB
 21754                           pclath	equ	0xFFA
 21755                           tblptru	equ	0xFF8
 21756                           tblptrh	equ	0xFF7
 21757                           tblptrl	equ	0xFF6
 21758                           tablat	equ	0xFF5
 21759                           prodh	equ	0xFF4
 21760                           prodl	equ	0xFF3
 21761                           intcon	equ	0xFF2
 21762                           intcon3	equ	0xFF0
 21763                           indf0	equ	0xFEF
 21764                           postinc0	equ	0xFEE
 21765                           plusw0	equ	0xFEB
 21766                           fsr0h	equ	0xFEA
 21767                           fsr0l	equ	0xFE9
 21768                           wreg	equ	0xFE8
 21769                           indf1	equ	0xFE7
 21770                           postinc1	equ	0xFE6
 21771                           postdec1	equ	0xFE5
 21772                           plusw1	equ	0xFE3
 21773                           fsr1h	equ	0xFE2
 21774                           fsr1l	equ	0xFE1
 21775                           indf2	equ	0xFDF
 21776                           postinc2	equ	0xFDE
 21777                           postdec2	equ	0xFDD
 21778                           plusw2	equ	0xFDB
 21779                           fsr2h	equ	0xFDA
 21780                           fsr2l	equ	0xFD9
 21781                           status	equ	0xFD8
 21782                           
 21783 ;; *************** function _updateSeconds *****************
 21784 ;; Defined at:
 21785 ;;		line 28 in file "src/stack/stack.c"
 21786 ;; Parameters:    Size  Location     Type
 21787 ;;		None
 21788 ;; Auto vars:     Size  Location     Type
 21789 ;;		None
 21790 ;; Return value:  Size  Location     Type
 21791 ;;                  1    wreg      void 
 21792 ;; Registers used:
 21793 ;;		wreg, status,2, status,0
 21794 ;; Tracked objects:
 21795 ;;		On entry : 0/0
 21796 ;;		On exit  : 0/0
 21797 ;;		Unchanged: 0/0
 21798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21799 ;;      Params:         0       0       0       0       0       0       0       0       0
 21800 ;;      Locals:         0       0       0       0       0       0       0       0       0
 21801 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21802 ;;      Totals:         0       0       0       0       0       0       0       0       0
 21803 ;;Total ram usage:        0 bytes
 21804 ;; Hardware stack levels used:    1
 21805 ;; This function calls:
 21806 ;;		Nothing
 21807 ;; This function is called by:
 21808 ;;		_ISR
 21809 ;; This function uses a non-reentrant model
 21810 ;;
 21811                           
 21812                           	psect	text100
 21813  004AE6                     __ptext100:
 21814                           	opt stack 0
 21815  004AE6                     _updateSeconds:
 21816                           	opt stack 19
 21817                           
 21818                           ;stack.c: 29: uint16_t static prescaler_ms = 0;
 21819                           ;stack.c: 33: if (prescaler_ms == 243) {
 21820                           
 21821                           ;incstack = 0
 21822  004AE6  0EF3               	movlw	243
 21823  004AE8  183F               	xorwf	updateSeconds@prescaler_ms,w,c
 21824  004AEA  1040               	iorwf	updateSeconds@prescaler_ms+1,w,c
 21825  004AEC  A4D8               	btfss	status,2,c
 21826  004AEE  D00B               	goto	i2l527
 21827                           
 21828                           ;stack.c: 34: prescaler_ms = 0;
 21829  004AF0  0E00               	movlw	0
 21830  004AF2  6E40               	movwf	updateSeconds@prescaler_ms+1,c
 21831  004AF4  0E00               	movlw	0
 21832  004AF6  6E3F               	movwf	updateSeconds@prescaler_ms,c
 21833                           
 21834                           ;stack.c: 35: seconds++;
 21835  004AF8  0E01               	movlw	1
 21836  004AFA  2638               	addwf	_seconds,f,c
 21837  004AFC  0E00               	movlw	0
 21838  004AFE  2239               	addwfc	_seconds+1,f,c
 21839  004B00  223A               	addwfc	_seconds+2,f,c
 21840  004B02  223B               	addwfc	_seconds+3,f,c
 21841                           
 21842                           ;stack.c: 36: } else {
 21843  004B04  0012               	return	
 21844  004B06                     i2l527:
 21845                           
 21846                           ;stack.c: 37: prescaler_ms++;
 21847  004B06  4A3F               	infsnz	updateSeconds@prescaler_ms,f,c
 21848  004B08  2A40               	incf	updateSeconds@prescaler_ms+1,f,c
 21849  004B0A  0012               	return	
 21850  004B0C                     __end_of_updateSeconds:
 21851                           	opt stack 0
 21852                           pclatu	equ	0xFFB
 21853                           pclath	equ	0xFFA
 21854                           tblptru	equ	0xFF8
 21855                           tblptrh	equ	0xFF7
 21856                           tblptrl	equ	0xFF6
 21857                           tablat	equ	0xFF5
 21858                           prodh	equ	0xFF4
 21859                           prodl	equ	0xFF3
 21860                           intcon	equ	0xFF2
 21861                           intcon3	equ	0xFF0
 21862                           indf0	equ	0xFEF
 21863                           postinc0	equ	0xFEE
 21864                           plusw0	equ	0xFEB
 21865                           fsr0h	equ	0xFEA
 21866                           fsr0l	equ	0xFE9
 21867                           wreg	equ	0xFE8
 21868                           indf1	equ	0xFE7
 21869                           postinc1	equ	0xFE6
 21870                           postdec1	equ	0xFE5
 21871                           plusw1	equ	0xFE3
 21872                           fsr1h	equ	0xFE2
 21873                           fsr1l	equ	0xFE1
 21874                           indf2	equ	0xFDF
 21875                           postinc2	equ	0xFDE
 21876                           postdec2	equ	0xFDD
 21877                           plusw2	equ	0xFDB
 21878                           fsr2h	equ	0xFDA
 21879                           fsr2l	equ	0xFD9
 21880                           status	equ	0xFD8
 21881                           
 21882 ;; *************** function _sevenSegmentUpdate *****************
 21883 ;; Defined at:
 21884 ;;		line 41 in file "src/system/sevenseg.c"
 21885 ;; Parameters:    Size  Location     Type
 21886 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 21887 ;; Auto vars:     Size  Location     Type
 21888 ;;  i               1   20[COMRAM] unsigned char 
 21889 ;; Return value:  Size  Location     Type
 21890 ;;                  1    wreg      void 
 21891 ;; Registers used:
 21892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21893 ;; Tracked objects:
 21894 ;;		On entry : 0/0
 21895 ;;		On exit  : 0/0
 21896 ;;		Unchanged: 0/0
 21897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21898 ;;      Params:         2       0       0       0       0       0       0       0       0
 21899 ;;      Locals:         3       0       0       0       0       0       0       0       0
 21900 ;;      Temps:          2       0       0       0       0       0       0       0       0
 21901 ;;      Totals:         7       0       0       0       0       0       0       0       0
 21902 ;;Total ram usage:        7 bytes
 21903 ;; Hardware stack levels used:    1
 21904 ;; Hardware stack levels required when called:    2
 21905 ;; This function calls:
 21906 ;;		_parseNumber
 21907 ;; This function is called by:
 21908 ;;		_ISR
 21909 ;; This function uses a non-reentrant model
 21910 ;;
 21911                           
 21912                           	psect	text101
 21913  003786                     __ptext101:
 21914                           	opt stack 0
 21915  003786                     _sevenSegmentUpdate:
 21916                           	opt stack 17
 21917                           
 21918                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 21919                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 21920                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 21921                           
 21922                           ;incstack = 0
 21923  003786  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 21924  00378A  0E01               	movlw	1
 21925  00378C  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 21926  00378E  2A11               	incf	??_sevenSegmentUpdate,f,c
 21927  003790  D002               	goto	i2u756_44
 21928  003792                     i2u756_45:
 21929  003792  90D8               	bcf	status,0,c
 21930  003794  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 21931  003796                     i2u756_44:
 21932  003796  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 21933  003798  D7FC               	goto	i2u756_45
 21934  00379A  5012               	movf	??_sevenSegmentUpdate+1,w,c
 21935  00379C  0AFF               	xorlw	255
 21936  00379E  1682               	andwf	3970,f,c	;volatile
 21937                           
 21938                           ;sevenseg.c: 46: PORTA = 0x00;
 21939  0037A0  0E00               	movlw	0
 21940  0037A2  6E80               	movwf	3968,c	;volatile
 21941                           
 21942                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 21943  0037A4  0E02               	movlw	2
 21944  0037A6  6047               	cpfslt	sevenSegmentUpdate@digitPointer,c
 21945  0037A8  D007               	goto	i2l716
 21946  0037AA  0E01               	movlw	1
 21947  0037AC  2447               	addwf	sevenSegmentUpdate@digitPointer,w,c
 21948  0037AE  6E13               	movwf	_sevenSegmentUpdate$2088,c
 21949  0037B0  6A14               	clrf	_sevenSegmentUpdate$2088+1,c
 21950  0037B2  0E00               	movlw	0
 21951  0037B4  2214               	addwfc	_sevenSegmentUpdate$2088+1,f,c
 21952  0037B6  D004               	goto	i2l718
 21953  0037B8                     i2l716:
 21954  0037B8  0E00               	movlw	0
 21955  0037BA  6E14               	movwf	_sevenSegmentUpdate$2088+1,c
 21956  0037BC  0E00               	movlw	0
 21957  0037BE  6E13               	movwf	_sevenSegmentUpdate$2088,c
 21958  0037C0                     i2l718:
 21959  0037C0  C013  F047         	movff	_sevenSegmentUpdate$2088,sevenSegmentUpdate@digitPointer
 21960                           
 21961                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 21962  0037C4  0EE8               	movlw	232
 21963  0037C6  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 21964  0037C8  0E03               	movlw	3
 21965  0037CA  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 21966  0037CC  B0D8               	btfsc	status,0,c
 21967  0037CE  0012               	return	
 21968                           
 21969                           ;sevenseg.c: 51: }
 21970                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 21971                           
 21972                           ;sevenseg.c: 50: return;
 21973  0037D0  0E00               	movlw	0
 21974  0037D2  6E15               	movwf	sevenSegmentUpdate@i,c
 21975  0037D4                     i2l6613:
 21976  0037D4  0E02               	movlw	2
 21977  0037D6  6415               	cpfsgt	sevenSegmentUpdate@i,c
 21978  0037D8  D001               	goto	i2l721
 21979  0037DA  D013               	goto	i2u760_40
 21980  0037DC                     i2l721:
 21981                           
 21982                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 21983  0037DC  5015               	movf	sevenSegmentUpdate@i,w,c
 21984  0037DE  0D01               	mullw	1
 21985  0037E0  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 21986  0037E2  24F3               	addwf	prodl,w,c
 21987  0037E4  6ED9               	movwf	fsr2l,c
 21988  0037E6  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 21989  0037E8  20F4               	addwfc	prodh,w,c
 21990  0037EA  6EDA               	movwf	fsr2h,c
 21991  0037EC  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 21992  0037F0  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 21993  0037F4  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 21994  0037F8  EC5B  F01F         	call	_parseNumber	;wreg free
 21995  0037FC  6EDF               	movwf	indf2,c
 21996  0037FE  2A15               	incf	sevenSegmentUpdate@i,f,c
 21997  003800  D7E9               	goto	i2l6613
 21998  003802                     i2u760_40:
 21999                           
 22000                           ;sevenseg.c: 54: }
 22001                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 22002  003802  C047  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 22003  003806  0E01               	movlw	1
 22004  003808  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 22005  00380A  2A11               	incf	??_sevenSegmentUpdate,f,c
 22006  00380C  D002               	goto	i2u761_44
 22007  00380E                     i2u761_45:
 22008  00380E  90D8               	bcf	status,0,c
 22009  003810  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 22010  003812                     i2u761_44:
 22011  003812  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 22012  003814  D7FC               	goto	i2u761_45
 22013  003816  5012               	movf	??_sevenSegmentUpdate+1,w,c
 22014  003818  1282               	iorwf	3970,f,c	;volatile
 22015                           
 22016                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 22017  00381A  5047               	movf	sevenSegmentUpdate@digitPointer,w,c
 22018  00381C  0D01               	mullw	1
 22019  00381E  0E3C               	movlw	low sevenSegmentUpdate@digitsToDisplay
 22020  003820  24F3               	addwf	prodl,w,c
 22021  003822  6ED9               	movwf	fsr2l,c
 22022  003824  0E00               	movlw	high sevenSegmentUpdate@digitsToDisplay
 22023  003826  20F4               	addwfc	prodh,w,c
 22024  003828  6EDA               	movwf	fsr2h,c
 22025  00382A  50DF               	movf	indf2,w,c
 22026  00382C  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 22027  00382E  5011               	movf	??_sevenSegmentUpdate,w,c
 22028  003830  0D01               	mullw	1
 22029  003832  0EE1               	movlw	low _sevenSegCharacters
 22030  003834  24F3               	addwf	prodl,w,c
 22031  003836  6ED9               	movwf	fsr2l,c
 22032  003838  0E01               	movlw	high _sevenSegCharacters
 22033  00383A  20F4               	addwfc	prodh,w,c
 22034  00383C  6EDA               	movwf	fsr2h,c
 22035  00383E  50DF               	movf	indf2,w,c
 22036  003840  6E80               	movwf	3968,c	;volatile
 22037  003842  0012               	return		;funcret
 22038  003844                     __end_of_sevenSegmentUpdate:
 22039                           	opt stack 0
 22040                           pclatu	equ	0xFFB
 22041                           pclath	equ	0xFFA
 22042                           tblptru	equ	0xFF8
 22043                           tblptrh	equ	0xFF7
 22044                           tblptrl	equ	0xFF6
 22045                           tablat	equ	0xFF5
 22046                           prodh	equ	0xFF4
 22047                           prodl	equ	0xFF3
 22048                           intcon	equ	0xFF2
 22049                           intcon3	equ	0xFF0
 22050                           indf0	equ	0xFEF
 22051                           postinc0	equ	0xFEE
 22052                           plusw0	equ	0xFEB
 22053                           fsr0h	equ	0xFEA
 22054                           fsr0l	equ	0xFE9
 22055                           wreg	equ	0xFE8
 22056                           indf1	equ	0xFE7
 22057                           postinc1	equ	0xFE6
 22058                           postdec1	equ	0xFE5
 22059                           plusw1	equ	0xFE3
 22060                           fsr1h	equ	0xFE2
 22061                           fsr1l	equ	0xFE1
 22062                           indf2	equ	0xFDF
 22063                           postinc2	equ	0xFDE
 22064                           postdec2	equ	0xFDD
 22065                           plusw2	equ	0xFDB
 22066                           fsr2h	equ	0xFDA
 22067                           fsr2l	equ	0xFD9
 22068                           status	equ	0xFD8
 22069                           
 22070 ;; *************** function _parseNumber *****************
 22071 ;; Defined at:
 22072 ;;		line 59 in file "src/system/sevenseg.c"
 22073 ;; Parameters:    Size  Location     Type
 22074 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 22075 ;;  digit           1    9[COMRAM] unsigned char 
 22076 ;; Auto vars:     Size  Location     Type
 22077 ;;  hundreds        1   13[COMRAM] unsigned char 
 22078 ;;  tens            1   12[COMRAM] unsigned char 
 22079 ;;  ones            1   11[COMRAM] unsigned char 
 22080 ;; Return value:  Size  Location     Type
 22081 ;;                  1    wreg      unsigned char 
 22082 ;; Registers used:
 22083 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 22084 ;; Tracked objects:
 22085 ;;		On entry : 0/0
 22086 ;;		On exit  : 0/0
 22087 ;;		Unchanged: 0/0
 22088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22089 ;;      Params:         3       0       0       0       0       0       0       0       0
 22090 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22091 ;;      Temps:          1       0       0       0       0       0       0       0       0
 22092 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22093 ;;Total ram usage:        7 bytes
 22094 ;; Hardware stack levels used:    1
 22095 ;; Hardware stack levels required when called:    1
 22096 ;; This function calls:
 22097 ;;		i2___lwdiv
 22098 ;; This function is called by:
 22099 ;;		_sevenSegmentUpdate
 22100 ;; This function uses a non-reentrant model
 22101 ;;
 22102                           
 22103                           	psect	text102
 22104  003EB6                     __ptext102:
 22105                           	opt stack 0
 22106  003EB6                     _parseNumber:
 22107                           	opt stack 17
 22108                           
 22109                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 22110                           
 22111                           ;incstack = 0
 22112  003EB6  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 22113  003EBA  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 22114  003EBE  0E00               	movlw	0
 22115  003EC0  6E04               	movwf	i2___lwdiv@divisor+1,c
 22116  003EC2  0E64               	movlw	100
 22117  003EC4  6E03               	movwf	i2___lwdiv@divisor,c
 22118  003EC6  EC53  F022         	call	i2___lwdiv	;wreg free
 22119  003ECA  5001               	movf	?i2___lwdiv,w,c
 22120  003ECC  6E0E               	movwf	parseNumber@hundreds,c
 22121                           
 22122                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 22123  003ECE  500E               	movf	parseNumber@hundreds,w,c
 22124  003ED0  0D64               	mullw	100
 22125  003ED2  1EF3               	comf	prodl,f,c
 22126  003ED4  1EF4               	comf	prodh,f,c
 22127  003ED6  4AF3               	infsnz	prodl,f,c
 22128  003ED8  2AF4               	incf	prodh,f,c
 22129  003EDA  5008               	movf	parseNumber@numberToDisplay,w,c
 22130  003EDC  24F3               	addwf	prodl,w,c
 22131  003EDE  6E01               	movwf	i2___lwdiv@dividend,c
 22132  003EE0  5009               	movf	parseNumber@numberToDisplay+1,w,c
 22133  003EE2  20F4               	addwfc	prodh,w,c
 22134  003EE4  6E02               	movwf	i2___lwdiv@dividend+1,c
 22135  003EE6  0E00               	movlw	0
 22136  003EE8  6E04               	movwf	i2___lwdiv@divisor+1,c
 22137  003EEA  0E0A               	movlw	10
 22138  003EEC  6E03               	movwf	i2___lwdiv@divisor,c
 22139  003EEE  EC53  F022         	call	i2___lwdiv	;wreg free
 22140  003EF2  5001               	movf	?i2___lwdiv,w,c
 22141  003EF4  6E0D               	movwf	parseNumber@tens,c
 22142                           
 22143                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 22144  003EF6  500D               	movf	parseNumber@tens,w,c
 22145  003EF8  0D0A               	mullw	10
 22146  003EFA  CFF3 F00B          	movff	prodl,??_parseNumber
 22147  003EFE  500E               	movf	parseNumber@hundreds,w,c
 22148  003F00  0D64               	mullw	100
 22149  003F02  50F3               	movf	prodl,w,c
 22150  003F04  240B               	addwf	??_parseNumber,w,c
 22151  003F06  0800               	sublw	0
 22152  003F08  2408               	addwf	parseNumber@numberToDisplay,w,c
 22153  003F0A  6E0C               	movwf	parseNumber@ones,c
 22154                           
 22155                           ;sevenseg.c: 64: switch (digit) {
 22156  003F0C  D008               	goto	i2l725
 22157  003F0E                     
 22158                           ;sevenseg.c: 66: return ones;
 22159  003F0E  500C               	movf	parseNumber@ones,w,c
 22160  003F10  0012               	return	
 22161  003F12                     
 22162                           ;sevenseg.c: 68: return tens;
 22163  003F12  500D               	movf	parseNumber@tens,w,c
 22164  003F14  0012               	return	
 22165  003F16                     
 22166                           ;sevenseg.c: 70: return hundreds;
 22167  003F16  500E               	movf	parseNumber@hundreds,w,c
 22168  003F18  0012               	return	
 22169  003F1A  0E00               	movlw	0
 22170                           
 22171                           ;sevenseg.c: 72: }
 22172  003F1C  0012               	return	
 22173  003F1E                     i2l725:
 22174  003F1E  500A               	movf	parseNumber@digit,w,c
 22175                           
 22176                           ; Switch size 1, requested type "space"
 22177                           ; Number of cases is 3, Range of values is 0 to 2
 22178                           ; switch strategies available:
 22179                           ; Name         Instructions Cycles
 22180                           ; simple_byte           10     6 (average)
 22181                           ;	Chosen strategy is simple_byte
 22182  003F20  0A00               	xorlw	0	; case 0
 22183  003F22  B4D8               	btfsc	status,2,c
 22184  003F24  D7F8               	goto	i2l729
 22185  003F26  0A01               	xorlw	1	; case 1
 22186  003F28  B4D8               	btfsc	status,2,c
 22187  003F2A  D7F3               	goto	i2l728
 22188  003F2C  0A03               	xorlw	3	; case 2
 22189  003F2E  B4D8               	btfsc	status,2,c
 22190  003F30  D7EE               	goto	i2l726
 22191  003F32  D7F3               	goto	i2l730
 22192  003F34                     __end_of_parseNumber:
 22193                           	opt stack 0
 22194                           pclatu	equ	0xFFB
 22195                           pclath	equ	0xFFA
 22196                           tblptru	equ	0xFF8
 22197                           tblptrh	equ	0xFF7
 22198                           tblptrl	equ	0xFF6
 22199                           tablat	equ	0xFF5
 22200                           prodh	equ	0xFF4
 22201                           prodl	equ	0xFF3
 22202                           intcon	equ	0xFF2
 22203                           intcon3	equ	0xFF0
 22204                           indf0	equ	0xFEF
 22205                           postinc0	equ	0xFEE
 22206                           plusw0	equ	0xFEB
 22207                           fsr0h	equ	0xFEA
 22208                           fsr0l	equ	0xFE9
 22209                           wreg	equ	0xFE8
 22210                           indf1	equ	0xFE7
 22211                           postinc1	equ	0xFE6
 22212                           postdec1	equ	0xFE5
 22213                           plusw1	equ	0xFE3
 22214                           fsr1h	equ	0xFE2
 22215                           fsr1l	equ	0xFE1
 22216                           indf2	equ	0xFDF
 22217                           postinc2	equ	0xFDE
 22218                           postdec2	equ	0xFDD
 22219                           plusw2	equ	0xFDB
 22220                           fsr2h	equ	0xFDA
 22221                           fsr2l	equ	0xFD9
 22222                           status	equ	0xFD8
 22223                           
 22224 ;; *************** function i2___lwdiv *****************
 22225 ;; Defined at:
 22226 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 22227 ;; Parameters:    Size  Location     Type
 22228 ;;  dividend        2    0[COMRAM] unsigned int 
 22229 ;;  divisor         2    2[COMRAM] unsigned int 
 22230 ;; Auto vars:     Size  Location     Type
 22231 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 22232 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 22233 ;; Return value:  Size  Location     Type
 22234 ;;                  2    0[COMRAM] unsigned int 
 22235 ;; Registers used:
 22236 ;;		wreg, status,2, status,0
 22237 ;; Tracked objects:
 22238 ;;		On entry : 0/0
 22239 ;;		On exit  : 0/0
 22240 ;;		Unchanged: 0/0
 22241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22242 ;;      Params:         4       0       0       0       0       0       0       0       0
 22243 ;;      Locals:         3       0       0       0       0       0       0       0       0
 22244 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22245 ;;      Totals:         7       0       0       0       0       0       0       0       0
 22246 ;;Total ram usage:        7 bytes
 22247 ;; Hardware stack levels used:    1
 22248 ;; This function calls:
 22249 ;;		Nothing
 22250 ;; This function is called by:
 22251 ;;		_parseNumber
 22252 ;; This function uses a non-reentrant model
 22253 ;;
 22254                           
 22255                           	psect	text103
 22256  0044A6                     __ptext103:
 22257                           	opt stack 0
 22258  0044A6                     i2___lwdiv:
 22259                           	opt stack 17
 22260                           
 22261                           ;incstack = 0
 22262  0044A6  0E00               	movlw	0
 22263  0044A8  6E06               	movwf	i2___lwdiv@quotient+1,c
 22264  0044AA  0E00               	movlw	0
 22265  0044AC  6E05               	movwf	i2___lwdiv@quotient,c
 22266  0044AE  5003               	movf	i2___lwdiv@divisor,w,c
 22267  0044B0  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 22268  0044B2  B4D8               	btfsc	status,2,c
 22269  0044B4  D01C               	goto	i2l1478
 22270  0044B6  0E01               	movlw	1
 22271  0044B8  6E07               	movwf	i2___lwdiv@counter,c
 22272  0044BA  D004               	goto	i2l1473
 22273  0044BC  90D8               	bcf	status,0,c
 22274  0044BE  3603               	rlcf	i2___lwdiv@divisor,f,c
 22275  0044C0  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 22276  0044C2  2A07               	incf	i2___lwdiv@counter,f,c
 22277  0044C4                     i2l1473:
 22278  0044C4  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 22279  0044C6  D7FA               	goto	i2l1474
 22280  0044C8                     i2u670_40:
 22281  0044C8  90D8               	bcf	status,0,c
 22282  0044CA  3605               	rlcf	i2___lwdiv@quotient,f,c
 22283  0044CC  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 22284  0044CE  5003               	movf	i2___lwdiv@divisor,w,c
 22285  0044D0  5C01               	subwf	i2___lwdiv@dividend,w,c
 22286  0044D2  5004               	movf	i2___lwdiv@divisor+1,w,c
 22287  0044D4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 22288  0044D6  A0D8               	btfss	status,0,c
 22289  0044D8  D005               	goto	i2l1477
 22290  0044DA  5003               	movf	i2___lwdiv@divisor,w,c
 22291  0044DC  5E01               	subwf	i2___lwdiv@dividend,f,c
 22292  0044DE  5004               	movf	i2___lwdiv@divisor+1,w,c
 22293  0044E0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 22294  0044E2  8005               	bsf	i2___lwdiv@quotient,0,c
 22295  0044E4                     i2l1477:
 22296  0044E4  90D8               	bcf	status,0,c
 22297  0044E6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 22298  0044E8  3203               	rrcf	i2___lwdiv@divisor,f,c
 22299  0044EA  2E07               	decfsz	i2___lwdiv@counter,f,c
 22300  0044EC  D7ED               	goto	i2u670_40
 22301  0044EE                     i2l1478:
 22302  0044EE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 22303  0044F2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 22304  0044F6  0012               	return		;funcret
 22305  0044F8                     __end_ofi2___lwdiv:
 22306                           	opt stack 0
 22307                           pclatu	equ	0xFFB
 22308                           pclath	equ	0xFFA
 22309                           tblptru	equ	0xFF8
 22310                           tblptrh	equ	0xFF7
 22311                           tblptrl	equ	0xFF6
 22312                           tablat	equ	0xFF5
 22313                           prodh	equ	0xFF4
 22314                           prodl	equ	0xFF3
 22315                           intcon	equ	0xFF2
 22316                           intcon3	equ	0xFF0
 22317                           indf0	equ	0xFEF
 22318                           postinc0	equ	0xFEE
 22319                           plusw0	equ	0xFEB
 22320                           fsr0h	equ	0xFEA
 22321                           fsr0l	equ	0xFE9
 22322                           wreg	equ	0xFE8
 22323                           indf1	equ	0xFE7
 22324                           postinc1	equ	0xFE6
 22325                           postdec1	equ	0xFE5
 22326                           plusw1	equ	0xFE3
 22327                           fsr1h	equ	0xFE2
 22328                           fsr1l	equ	0xFE1
 22329                           indf2	equ	0xFDF
 22330                           postinc2	equ	0xFDE
 22331                           postdec2	equ	0xFDD
 22332                           plusw2	equ	0xFDB
 22333                           fsr2h	equ	0xFDA
 22334                           fsr2l	equ	0xFD9
 22335                           status	equ	0xFD8
 22336                           
 22337 ;; *************** function _buttonHandler *****************
 22338 ;; Defined at:
 22339 ;;		line 246 in file "src/system/main.c"
 22340 ;; Parameters:    Size  Location     Type
 22341 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 22342 ;;		 -> buttonState(1), 
 22343 ;; Auto vars:     Size  Location     Type
 22344 ;;  debounceValu    4    2[COMRAM] const unsigned long 
 22345 ;; Return value:  Size  Location     Type
 22346 ;;                  1    wreg      void 
 22347 ;; Registers used:
 22348 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 22349 ;; Tracked objects:
 22350 ;;		On entry : 0/0
 22351 ;;		On exit  : 0/0
 22352 ;;		Unchanged: 0/0
 22353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22354 ;;      Params:         2       0       0       0       0       0       0       0       0
 22355 ;;      Locals:         4       0       0       0       0       0       0       0       0
 22356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22357 ;;      Totals:         6       0       0       0       0       0       0       0       0
 22358 ;;Total ram usage:        6 bytes
 22359 ;; Hardware stack levels used:    1
 22360 ;; This function calls:
 22361 ;;		Nothing
 22362 ;; This function is called by:
 22363 ;;		_ISR
 22364 ;; This function uses a non-reentrant model
 22365 ;;
 22366                           
 22367                           	psect	text104
 22368  003AE2                     __ptext104:
 22369                           	opt stack 0
 22370  003AE2                     _buttonHandler:
 22371                           	opt stack 19
 22372                           
 22373                           ;main.c: 247: uint8_t static oldState = 0;
 22374                           ;main.c: 248: uint8_t static newState = 0;
 22375                           ;main.c: 249: uint32_t static debounceCounter = 0;
 22376                           ;main.c: 250: const uint32_t debounceValue = 0x1f;
 22377                           
 22378                           ;incstack = 0
 22379  003AE2  0E1F               	movlw	31
 22380  003AE4  6E03               	movwf	buttonHandler@debounceValue,c
 22381  003AE6  0E00               	movlw	0
 22382  003AE8  6E04               	movwf	buttonHandler@debounceValue+1,c
 22383  003AEA  0E00               	movlw	0
 22384  003AEC  6E05               	movwf	buttonHandler@debounceValue+2,c
 22385  003AEE  0E00               	movlw	0
 22386  003AF0  6E06               	movwf	buttonHandler@debounceValue+3,c
 22387                           
 22388                           ;main.c: 251: if ((unsigned)(!(PORTB & (1<<5)))) {
 22389  003AF2  BA81               	btfsc	3969,5,c	;volatile
 22390  003AF4  D00F               	goto	i2l676
 22391                           
 22392                           ;main.c: 252: if (debounceCounter < 0xffff)
 22393  003AF6  5033               	movf	buttonHandler@debounceCounter+3,w,c
 22394  003AF8  1032               	iorwf	buttonHandler@debounceCounter+2,w,c
 22395  003AFA  E114               	bnz	i2l6581
 22396  003AFC  2830               	incf	buttonHandler@debounceCounter,w,c
 22397  003AFE  0EFF               	movlw	255
 22398  003B00  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 22399  003B02  B0D8               	btfsc	status,0,c
 22400  003B04  D00F               	goto	i2l678
 22401                           
 22402                           ;main.c: 253: debounceCounter++;
 22403  003B06  0E01               	movlw	1
 22404  003B08  2630               	addwf	buttonHandler@debounceCounter,f,c
 22405  003B0A  0E00               	movlw	0
 22406  003B0C  2231               	addwfc	buttonHandler@debounceCounter+1,f,c
 22407  003B0E  2232               	addwfc	buttonHandler@debounceCounter+2,f,c
 22408  003B10  2233               	addwfc	buttonHandler@debounceCounter+3,f,c
 22409                           
 22410                           ;main.c: 254: } else {
 22411  003B12  D008               	goto	i2l678
 22412  003B14                     i2l676:
 22413                           
 22414                           ;main.c: 255: debounceCounter = 0;
 22415  003B14  0E00               	movlw	0
 22416  003B16  6E30               	movwf	buttonHandler@debounceCounter,c
 22417  003B18  0E00               	movlw	0
 22418  003B1A  6E31               	movwf	buttonHandler@debounceCounter+1,c
 22419  003B1C  0E00               	movlw	0
 22420  003B1E  6E32               	movwf	buttonHandler@debounceCounter+2,c
 22421  003B20  0E00               	movlw	0
 22422  003B22  6E33               	movwf	buttonHandler@debounceCounter+3,c
 22423  003B24                     i2l678:
 22424  003B24                     i2l6581:
 22425                           
 22426                           ;main.c: 256: }
 22427                           ;main.c: 257: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 22428  003B24  5003               	movf	buttonHandler@debounceValue,w,c
 22429  003B26  5C30               	subwf	buttonHandler@debounceCounter,w,c
 22430  003B28  5004               	movf	buttonHandler@debounceValue+1,w,c
 22431  003B2A  5831               	subwfb	buttonHandler@debounceCounter+1,w,c
 22432  003B2C  5005               	movf	buttonHandler@debounceValue+2,w,c
 22433  003B2E  5832               	subwfb	buttonHandler@debounceCounter+2,w,c
 22434  003B30  5006               	movf	buttonHandler@debounceValue+3,w,c
 22435  003B32  5833               	subwfb	buttonHandler@debounceCounter+3,w,c
 22436  003B34  A0D8               	btfss	status,0,c
 22437  003B36  D002               	goto	i2u752_40
 22438  003B38  0E01               	movlw	1
 22439  003B3A  D001               	goto	i2u753_40
 22440  003B3C                     i2u752_40:
 22441  003B3C  0E00               	movlw	0
 22442  003B3E                     i2u753_40:
 22443  003B3E  6E48               	movwf	buttonHandler@newState,c
 22444                           
 22445                           ;main.c: 258: if (newState && !oldState) {
 22446  003B40  5048               	movf	buttonHandler@newState,w,c
 22447  003B42  B4D8               	btfsc	status,2,c
 22448  003B44  D011               	goto	i2l679
 22449  003B46  5049               	movf	buttonHandler@oldState,w,c
 22450  003B48  A4D8               	btfss	status,2,c
 22451  003B4A  D00E               	goto	i2l679
 22452                           
 22453                           ;main.c: 259: debounceCounter = debounceValue;
 22454  003B4C  C003  F030         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 22455  003B50  C004  F031         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 22456  003B54  C005  F032         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 22457  003B58  C006  F033         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 22458                           
 22459                           ;main.c: 260: *state = 1;
 22460  003B5C  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22461  003B60  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22462  003B64  0E01               	movlw	1
 22463  003B66  D005               	goto	L8
 22464  003B68                     i2l679:
 22465                           
 22466                           ;main.c: 262: *state = 0;
 22467  003B68  C001  FFD9         	movff	buttonHandler@state,fsr2l
 22468  003B6C  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 22469  003B70  0E00               	movlw	0
 22470  003B72                     L8:
 22471  003B72  6EDF               	movwf	indf2,c
 22472                           
 22473                           ;main.c: 263: }
 22474                           ;main.c: 264: oldState = newState;
 22475  003B74  C048  F049         	movff	buttonHandler@newState,buttonHandler@oldState
 22476  003B78  0012               	return		;funcret
 22477  003B7A                     __end_of_buttonHandler:
 22478                           	opt stack 0
 22479                           pclatu	equ	0xFFB
 22480                           pclath	equ	0xFFA
 22481                           tblptru	equ	0xFF8
 22482                           tblptrh	equ	0xFF7
 22483                           tblptrl	equ	0xFF6
 22484                           tablat	equ	0xFF5
 22485                           prodh	equ	0xFF4
 22486                           prodl	equ	0xFF3
 22487                           intcon	equ	0xFF2
 22488                           intcon3	equ	0xFF0
 22489                           indf0	equ	0xFEF
 22490                           postinc0	equ	0xFEE
 22491                           plusw0	equ	0xFEB
 22492                           fsr0h	equ	0xFEA
 22493                           fsr0l	equ	0xFE9
 22494                           wreg	equ	0xFE8
 22495                           indf1	equ	0xFE7
 22496                           postinc1	equ	0xFE6
 22497                           postdec1	equ	0xFE5
 22498                           plusw1	equ	0xFE3
 22499                           fsr1h	equ	0xFE2
 22500                           fsr1l	equ	0xFE1
 22501                           indf2	equ	0xFDF
 22502                           postinc2	equ	0xFDE
 22503                           postdec2	equ	0xFDD
 22504                           plusw2	equ	0xFDB
 22505                           fsr2h	equ	0xFDA
 22506                           fsr2l	equ	0xFD9
 22507                           status	equ	0xFD8
 22508                           pclatu	equ	0xFFB
 22509                           pclath	equ	0xFFA
 22510                           tblptru	equ	0xFF8
 22511                           tblptrh	equ	0xFF7
 22512                           tblptrl	equ	0xFF6
 22513                           tablat	equ	0xFF5
 22514                           prodh	equ	0xFF4
 22515                           prodl	equ	0xFF3
 22516                           intcon	equ	0xFF2
 22517                           intcon3	equ	0xFF0
 22518                           indf0	equ	0xFEF
 22519                           postinc0	equ	0xFEE
 22520                           plusw0	equ	0xFEB
 22521                           fsr0h	equ	0xFEA
 22522                           fsr0l	equ	0xFE9
 22523                           wreg	equ	0xFE8
 22524                           indf1	equ	0xFE7
 22525                           postinc1	equ	0xFE6
 22526                           postdec1	equ	0xFE5
 22527                           plusw1	equ	0xFE3
 22528                           fsr1h	equ	0xFE2
 22529                           fsr1l	equ	0xFE1
 22530                           indf2	equ	0xFDF
 22531                           postinc2	equ	0xFDE
 22532                           postdec2	equ	0xFDD
 22533                           plusw2	equ	0xFDB
 22534                           fsr2h	equ	0xFDA
 22535                           fsr2l	equ	0xFD9
 22536                           status	equ	0xFD8
 22537                           
 22538                           	psect	rparam
 22539  0000                     pclatu	equ	0xFFB
 22540                           pclath	equ	0xFFA
 22541                           tblptru	equ	0xFF8
 22542                           tblptrh	equ	0xFF7
 22543                           tblptrl	equ	0xFF6
 22544                           tablat	equ	0xFF5
 22545                           prodh	equ	0xFF4
 22546                           prodl	equ	0xFF3
 22547                           intcon	equ	0xFF2
 22548                           intcon3	equ	0xFF0
 22549                           indf0	equ	0xFEF
 22550                           postinc0	equ	0xFEE
 22551                           plusw0	equ	0xFEB
 22552                           fsr0h	equ	0xFEA
 22553                           fsr0l	equ	0xFE9
 22554                           wreg	equ	0xFE8
 22555                           indf1	equ	0xFE7
 22556                           postinc1	equ	0xFE6
 22557                           postdec1	equ	0xFE5
 22558                           plusw1	equ	0xFE3
 22559                           fsr1h	equ	0xFE2
 22560                           fsr1l	equ	0xFE1
 22561                           indf2	equ	0xFDF
 22562                           postinc2	equ	0xFDE
 22563                           postdec2	equ	0xFDD
 22564                           plusw2	equ	0xFDB
 22565                           fsr2h	equ	0xFDA
 22566                           fsr2l	equ	0xFD9
 22567                           status	equ	0xFD8
 22568                           
 22569                           	psect	temp
 22570  00004D                     btemp:
 22571                           	opt stack 0
 22572  00004D                     	ds	1
 22573  0000                     int$flags	set	btemp
 22574  0000                     wtemp6	set	btemp+1
 22575                           pclatu	equ	0xFFB
 22576                           pclath	equ	0xFFA
 22577                           tblptru	equ	0xFF8
 22578                           tblptrh	equ	0xFF7
 22579                           tblptrl	equ	0xFF6
 22580                           tablat	equ	0xFF5
 22581                           prodh	equ	0xFF4
 22582                           prodl	equ	0xFF3
 22583                           intcon	equ	0xFF2
 22584                           intcon3	equ	0xFF0
 22585                           indf0	equ	0xFEF
 22586                           postinc0	equ	0xFEE
 22587                           plusw0	equ	0xFEB
 22588                           fsr0h	equ	0xFEA
 22589                           fsr0l	equ	0xFE9
 22590                           wreg	equ	0xFE8
 22591                           indf1	equ	0xFE7
 22592                           postinc1	equ	0xFE6
 22593                           postdec1	equ	0xFE5
 22594                           plusw1	equ	0xFE3
 22595                           fsr1h	equ	0xFE2
 22596                           fsr1l	equ	0xFE1
 22597                           indf2	equ	0xFDF
 22598                           postinc2	equ	0xFDE
 22599                           postdec2	equ	0xFDD
 22600                           plusw2	equ	0xFDB
 22601                           fsr2h	equ	0xFDA
 22602                           fsr2l	equ	0xFD9
 22603                           status	equ	0xFD8


Data Sizes:
    Strings     994
    Constant    11
    Data        48
    BSS         433
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     39      76
    BANK0           160    159     159
    BANK1           256    189     253
    BANK2           256      0     218
    BANK3           256      0     162
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ethernetController_dropPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ARP_initTable@ip(BANK0[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> ARP_checkForEntry@ip(BANK0[4]), ARP_replyIfNeeded@myIP(BANK1[4]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> ARP_table(BANK3[112]), ARP_replyIfNeeded@request(BANK1[32]), ARP_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@ip(BANK0[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK0[9]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> main@headerBuf(BANK1[32]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 113
		 -> ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK2[62]), stack(BANK2[113]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    ARP_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK1[1]), 

    ARP_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ARP_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_62(CODE[17]), STR_61(CODE[4]), STR_60(CODE[4]), STR_59(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK1[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 55
		 -> STR_85(CODE[2]), STR_84(CODE[7]), STR_83(CODE[11]), STR_82(CODE[19]), 
		 -> STR_81(CODE[2]), STR_80(CODE[3]), STR_79(CODE[3]), STR_78(CODE[3]), 
		 -> STR_77(CODE[3]), STR_76(CODE[5]), STR_75(CODE[2]), STR_74(CODE[3]), 
		 -> STR_73(CODE[2]), STR_72(CODE[3]), STR_71(CODE[16]), STR_70(CODE[15]), 
		 -> STR_69(CODE[10]), STR_68(CODE[2]), STR_67(CODE[3]), STR_66(CODE[5]), 
		 -> STR_65(CODE[3]), STR_64(CODE[2]), STR_63(CODE[39]), arpEntryToString@string(BANK3[50]), 
		 -> ipAdressToString@address(BANK1[16]), STR_62(CODE[17]), STR_61(CODE[4]), STR_60(CODE[4]), 
		 -> STR_59(CODE[5]), STR_58(CODE[18]), STR_57(CODE[4]), STR_56(CODE[5]), 
		 -> macToString@address(BANK0[18]), hexToString@number(BANK1[10]), intToString@number(BANK1[10]), STR_55(CODE[5]), 
		 -> STR_54(CODE[9]), STR_53(CODE[30]), STR_52(CODE[34]), STR_51(CODE[55]), 
		 -> STR_50(CODE[37]), STR_49(CODE[15]), STR_48(CODE[14]), STR_47(CODE[19]), 
		 -> STR_46(CODE[30]), STR_45(CODE[17]), STR_44(CODE[8]), STR_43(CODE[29]), 
		 -> STR_42(CODE[29]), STR_41(CODE[20]), STR_40(CODE[19]), STR_39(CODE[19]), 
		 -> STR_38(CODE[13]), STR_37(CODE[51]), STR_36(CODE[28]), STR_35(CODE[4]), 
		 -> STR_34(CODE[23]), STR_33(CODE[4]), STR_32(CODE[21]), STR_31(CODE[12]), 
		 -> STR_30(CODE[38]), STR_29(CODE[3]), STR_28(CODE[9]), STR_27(CODE[2]), 
		 -> STR_26(CODE[12]), STR_25(CODE[24]), STR_24(CODE[16]), STR_23(CODE[3]), 
		 -> STR_22(CODE[19]), STR_21(CODE[3]), STR_20(CODE[3]), STR_19(CODE[3]), 
		 -> STR_18(CODE[5]), STR_17(CODE[2]), STR_16(CODE[2]), STR_15(CODE[5]), 
		 -> STR_14(CODE[3]), STR_13(CODE[3]), STR_12(CODE[2]), STR_11(CODE[7]), 
		 -> STR_10(CODE[6]), STR_9(CODE[16]), STR_8(CODE[10]), STR_7(CODE[12]), 
		 -> STR_6(CODE[2]), STR_5(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), STR_4(CODE[25]), 
		 -> STR_3(CODE[16]), STR_2(CODE[17]), STR_1(CODE[29]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK1[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK1[16]), 

    handleStackBackgroundTasks@stack	PTR volatile struct stack size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_initTable@mac(BANK0[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> ARP_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> ARP_sendRequest@targetMAC(BANK1[6]), ARP_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_58(CODE[18]), STR_57(CODE[4]), STR_56(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK1[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> stack.ethernet(BANK2[15]), stack(BANK2[113]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 113
		 -> ARP_send@ethFrame(BANK0[30]), stack(BANK2[113]), 

    ENC424J600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK1[6]), 

    ENC424J600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 1
		 -> ethernetController_updateLinkStatus@temp16(BANK0[1]), 

    ENC424J600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), ENC424J600_setTXLength@highByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ENC424J600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_getInterruptFlags@low(BANK0[1]), ENC424J600_getInterruptFlags@high(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), 
		 -> ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_getPacketCount@lowByte(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@highByte(BANK0[1]), ENC424J600_readPHYRegister@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK1[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(BANK0[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    ENC424J600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> ENC424J600_clearInterruptFlag@temp(BANK0[1]), ENC424J600_disable@temp(COMRAM[1]), ENC424J600_enable@temp(COMRAM[1]), ENC424J600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> ENC424J600_enableAutoMACInsertion@temp(BANK0[1]), ENC424J600_setRXTailPointer@highByte(BANK0[1]), ENC424J600_setRXTailPointer@lowByte(BANK0[1]), ENC424J600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> ENC424J600_setRXBufferStartAddress@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@highByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@lowByte(BANK0[1]), ENC424J600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> ENC424J600_setGPDATAReadPointer@highByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@lowByte(COMRAM[1]), ENC424J600_setGPDATAReadPointer@opcode(COMRAM[1]), ENC424J600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> ENC424J600_setGPDATAWritePointer@lowByte(BANK0[1]), ENC424J600_setGPDATAWritePointer@opcode(BANK0[1]), ENC424J600_setTXStartAddress@highByte(BANK0[1]), ENC424J600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> ENC424J600_setTXLength@highByte(BANK0[1]), ENC424J600_setTXLength@lowByte(BANK0[1]), ENC424J600_readPHYRegister@temp(BANK0[1]), ENC424J600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> ENC424J600_readPHYRegister@PHYaddress(BANK0[1]), ENC424J600_readControlRegisterUnbanked@addr(BANK0[1]), ENC424J600_readControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> ENC424J600_writeControlRegisterUnbanked@opcode(BANK0[1]), ENC424J600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 113
		 -> stack(BANK2[113]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ARP_sendRequest->_ARP_send
    _ARP_checkForEntry->_ipv4_cmp
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ipv4_handleNewPacket->_ipv4_checkHeaderChecksum
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_UARTTransmitText
    _hexToString->_hexToChar
    _ethernetController_updateNextPacketPointer->_ENC424J600_setERXDATAReadPointer
    _ethernetController_getRSV->_ENC424J600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_ENC424J600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->___lldiv
    ___lldiv->___wmul
    _ethernetController_dropPacket->_ENC424J600_setRXTailPointer
    _ARP_replyIfNeeded->_ARP_send
    _macToString->_ethernetController_getMacAddress
    _ipAdressToString->___lwdiv
    _ethernetController_getMacAddress->_ENC424J600_readControlRegisterUnbanked
    _ARP_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_ENC424J600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_ENC424J600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_ENC424J600_setGPDATAWritePointer
    _ENC424J600_setGPDATAWritePointer->_ENC424J600_writeSPI
    _ethernetController_sendPacket->_ENC424J600_setTXLength
    _ethernetController_sendPacket->_ENC424J600_setTXStartAddress
    _ENC424J600_setTXStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setTXLength->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_getSourceMACAddress->_ENC424J600_setERXDATAReadPointer
    _ARP_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_ENC424J600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_ENC424J600_getNextPacketPointer
    _ENC424J600_setERXDATAReadPointer->_ENC424J600_writeSPI
    _ethernetController_updateLinkStatus->_ENC424J600_readPHYRegister
    _ENC424J600_readPHYRegister->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readPHYRegister->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_ENC424J600_getInterruptFlags
    _ENC424J600_getInterruptFlags->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_ENC424J600_getPacketCount
    _ethernetController_clearInterruptFlag->_ENC424J600_clearInterruptFlag
    _ENC424J600_clearInterruptFlag->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_clearInterruptFlag->_ENC424J600_writeControlRegisterUnbanked
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_UARTTransmitText
    _UARTTransmitText->_macToString
    _ethernetController_checkDeviceId->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_setRXTailPointer->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_setRXBufferStartAddress->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_enableReception->_ENC424J600_writeSingleByte
    _ENC424J600_writeSingleByte->_ENC424J600_writeSPI
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_enableAutoMACInsertion->_ENC424J600_writeControlRegisterUnbanked
    _ENC424J600_writeControlRegisterUnbanked->_ENC424J600_writeSPI
    _ethernetController_getSiliconRevision->_ENC424J600_readControlRegisterUnbanked
    _ethernetController_getCurrentPacketCount->_ENC424J600_getPacketCount
    _ENC424J600_getPacketCount->_ENC424J600_readControlRegisterUnbanked
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_readSPI
    _ENC424J600_readControlRegisterUnbanked->_ENC424J600_writeSPI
    _ARP_initTable->_ARP_setNewEntry
    _ARP_setNewEntry->_getSeconds

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_sendFrame->_ARP_sendRequest
    _ethernet_rxGetNewFrame->_ARP_handleNewPacket
    _ARP_handleNewPacket->_ARP_replyIfNeeded

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                54    54      0  566122
                                            136 BANK1     53    53      0
                      _ARP_initTable
                           _UARTInit
                    _UARTTransmitInt
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
_ethernetController_getSiliconRevisi
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
       _ipv4_calculateHeaderChecksum
            _ipv4_setIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15    9896
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   14314
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1579
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   19470
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     67     5     62    7263
                                             30 BANK0     65     3     62
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _ipv4_setIPSourceAddress                              4     0      4     121
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                           4     2      2  391531
                                            132 BANK1      4     2      2
                   _UARTTransmitText
_ethernetController_clearInterruptFl
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                   _ipAdressToString
                     _ipv4_sendFrame
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      80    18     62   84806
                                             52 BANK1     80    18     62
                  _ARP_checkForEntry
              _ARP_getEntryFromTable
                    _ARP_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                         _getSeconds
 ---------------------------------------------------------------------------------
 (3) _ARP_sendRequest                                     56    52      4   56268
                                            152 BANK0      4     0      4
                                              0 BANK1     52    52      0
                           _ARP_send
   _ethernetController_getMacAddress
            _ipv4_getIPSourceAddress
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (3) _ARP_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (3) _ARP_checkForEntry                                   15     9      6    1318
                                              7 BANK0     15     9      6
                         _getSeconds
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              14    11      3  238371
                                            156 BANK0      3     3      0
                                            120 BANK1     11     8      3
                _ARP_handleNewPacket
                    _UARTTransmitInt
                   _UARTTransmitText
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                36    34      2   57712
                                             85 BANK0     36    34      2
                   _UARTTransmitText
      _ethernetController_dropPacket
                        _intToString
                   _ipAdressToString
                 _ipProtocolToString
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   19707
                                             23 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2   11458
                                             58 BANK0     27    25      2
                   _UARTTransmitText
                        _hexToString
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        18    16      2     929
                                              0 BANK0     18    16      2
 ---------------------------------------------------------------------------------
 (5) _hexToString                                          9     5      4     632
                                              1 BANK0      9     5      4
                          _hexToChar
 ---------------------------------------------------------------------------------
 (6) _hexToChar                                            1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ipProtocolToString                                   3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    7269
                                             15 BANK0     11    11      0
    _ENC424J600_getNextPacketPointer
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
    _ENC424J600_setNextPacketPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    8464
                                             17 BANK0      7     2      5
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
_ENC424J600_updateReceiveStatusVecto
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_updateReceiveStatusVector                17    12      5    1356
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    7182
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     121
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   14333
                                             58 BANK0      4     0      4
                   _UARTTransmitText
_ethernetController_getSiliconRevisi (ARG)
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                         20    16      4    4607
                                             19 BANK0     20    16      4
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     592
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     961
                                              6 BANK0     13     5      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ARP_handleNewPacket                                 36    34      2  117770
                                            152 BANK0      4     2      2
                                             88 BANK1     32    32      0
              _ARP_parseFromRXBuffer
                  _ARP_replyIfNeeded
                    _ARP_setNewEntry
                   _UARTTransmitText
      _ethernetController_dropPacket
                         _getSeconds
                   _ipAdressToString
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _getSeconds                                           4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    8834
                                             18 BANK0      2     0      2
        _ENC424J600_setRXTailPointer
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (4) _ARP_replyIfNeeded                                   88    56     32   71023
                                              0 BANK1     88    56     32
                           _ARP_send
                   _UARTTransmitText
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _macToString                                         30    24      6    1473
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipAdressToString                                    22    18      4    2986
                                              7 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     412
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     821
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    6367
                                             14 BANK0     12     6      6
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ARP_send                                            81    49     32   48973
                                             71 BANK0     81    49     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (4) _mac_setToBroadcast                                   3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   18884
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5819
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2268
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1072
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1312
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6059
                                             15 BANK0     14     3     11
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    6437
                                             15 BANK0     24     9     15
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    6981
                                             15 BANK0     15     6      9
   _ENC424J600_setGPDATAWritePointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setGPDATAWritePointer                     5     3      2    3059
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   13708
                                             18 BANK0      9     0      9
             _ENC424J600_setTXLength
       _ENC424J600_setTXStartAddress
         _ENC424J600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXStartAddress                         4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setTXLength                               4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    7244
                                             15 BANK0     18     9      9
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ARP_parseFromRXBuffer                               73    41     32   22455
                                             23 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_isAllZero                                        3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     372
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ipv4_isAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4     912
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   18102
                                             18 BANK0      5     3      2
                 _ENC424J600_readSPI
   _ENC424J600_setERXDATAReadPointer
        _ENC424J600_setRXTailPointer
                _ENC424J600_writeSPI
         _ENC424J600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (6) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _ENC424J600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (7) _ENC424J600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setERXDATAReadPointer                     5     3      2    3329
                                             10 BANK0      5     3      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  4     2      2   18510
                                             32 BANK0      4     2      2
_ENC424J600_readControlRegisterUnban
         _ENC424J600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_readPHYRegister                          18    16      2   11923
                                             14 BANK0     18    16      2
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   12237
                                             14 BANK0      3     2      1
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags                7     5      2    6716
                                             24 BANK0      7     5      2
       _ENC424J600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getInterruptFlags                        10     8      2    6280
                                             14 BANK0     10     8      2
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   11558
                                             18 BANK0      1     1      0
      _ENC424J600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_clearInterruptFlag                        4     4      0   11527
                                             14 BANK0      4     4      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (1) _ethernetController_init                              6     3      3   55971
                                             70 BANK0      6     3      3
  _ENC424J600_enableAutoMACInsertion
         _ENC424J600_enableReception
                 _ENC424J600_initSPI
    _ENC424J600_setNextPacketPointer
 _ENC424J600_setRXBufferStartAddress
        _ENC424J600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (2) _ethernetController_softReset                        12     9      3   24128
                                             58 BANK0     12     9      3
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
         _ENC424J600_writeSingleByte
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (2) _UARTTransmitText                                     2     0      2    9515
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _hexToString (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                 _ipProtocolToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (2) _ethernetController_checkDeviceId                     7     4      3    6360
                                             14 BANK0      7     4      3
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (6) _ENC424J600_setRXTailPointer                          4     2      2    5734
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_setRXBufferStartAddress                   4     2      2    5374
                                             14 BANK0      4     2      2
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_setNextPacketPointer                      2     0      2     211
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableReception                           0     0      0    2650
         _ENC424J600_writeSingleByte
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSingleByte                           1     1      0    2650
                                             10 BANK0      1     1      0
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ENC424J600_enableAutoMACInsertion                    1     1      0   11369
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
_ENC424J600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_writeControlRegisterUnbanked              4     2      2    5148
                                             10 BANK0      4     2      2
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getSiliconRevision                1     1      0    6218
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    6215
          _ENC424J600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _ENC424J600_getPacketCount                            1     1      0    6215
                                             14 BANK0      1     1      0
_ENC424J600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_readControlRegisterUnbanked               4     2      2    6144
                                             10 BANK0      4     2      2
                 _ENC424J600_readSPI
                _ENC424J600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _ENC424J600_writeSPI                                 10     8      2    2616
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_readSPI                                  10     8      2     906
                                              0 BANK0     10     8      2
                 _ENC424J600_initSPI
 ---------------------------------------------------------------------------------
 (5) _ENC424J600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ARP_initTable                                       11    11      0    1540
                                             28 BANK0     11    11      0
                    _ARP_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (2) _mac_setAllZero                                       3     1      2     220
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ipv4_setToAllZero                                    3     1      2     189
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _ARP_setNewEntry                                     24    10     14     930
                                              4 BANK0     24    10     14
                         _getSeconds (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                18    18      0    1040
                                             21 COMRAM    18    18      0
                      _buttonHandler
                 _sevenSegmentUpdate
                      _updateSeconds
 ---------------------------------------------------------------------------------
 (12) _updateSeconds                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _sevenSegmentUpdate                                  7     5      2     875
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (13) _parseNumber                                         7     4      3     641
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (12) _buttonHandler                                       6     4      2     165
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ARP_initTable
     _ARP_setNewEntry
       _getSeconds (ARG)
     _ipv4_setToAllZero
     _mac_setAllZero
   _UARTInit
   _UARTTransmitInt
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_getSiliconRevision (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _hexToString (ARG)
       _hexToChar
     _intToString (ARG)
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
     _ipProtocolToString (ARG)
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
   _ethernetController_checkDeviceId
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getCurrentPacketCount
     _ENC424J600_getPacketCount
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_getSiliconRevision
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ethernetController_init
     _ENC424J600_enableAutoMACInsertion
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_enableReception
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_initSPI
     _ENC424J600_setNextPacketPointer
     _ENC424J600_setRXBufferStartAddress
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ENC424J600_setRXTailPointer
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _ENC424J600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_softReset
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSingleByte
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
   _ethernetController_setLEDConfig
     _ENC424J600_readControlRegisterUnbanked
       _ENC424J600_readSPI
         _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
     _ENC424J600_writeControlRegisterUnbanked
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ethernetController_clearInterruptFlag
       _ENC424J600_clearInterruptFlag
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_newPacketAvailable
       _ENC424J600_getPacketCount
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_pollInterruptFlags
       _ENC424J600_getInterruptFlags
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernetController_setLEDConfig
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeControlRegisterUnbanked
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
     _ethernetController_updateLinkStatus
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_readPHYRegister
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeControlRegisterUnbanked
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
     _ethernet_rxGetNewFrame
       _ARP_handleNewPacket
         _ARP_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _ARP_replyIfNeeded
           _ARP_send
             _ethernetController_getSourceMACAddress
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_setERXDATAReadPointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_sendPacket
               _ENC424J600_setTXLength
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_setTXStartAddress
                 _ENC424J600_writeControlRegisterUnbanked
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
               _ENC424J600_writeSingleByte
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _ENC424J600_setGPDATAWritePointer
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _ethernetController_getMacAddress
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ARP_setNewEntry
           _getSeconds (ARG)
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _getSeconds
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _macToString
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_getSiliconRevision (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _hexToString (ARG)
           _hexToChar
         _intToString (ARG)
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
         _ipProtocolToString (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _ENC424J600_setRXTailPointer
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _ENC424J600_getNextPacketPointer
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ethernetController_getNextPacketPointer
           _ENC424J600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_getNextPacketPointer
         _ENC424J600_getNextPacketPointer
       _ethernetController_getRSV
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_updateReceiveStatusVector
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_updateNextPacketPointer
         _ENC424J600_getNextPacketPointer
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_setERXDATAReadPointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_setNextPacketPointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _intToString
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipv4_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _ENC424J600_readControlRegisterUnbanked
               _ENC424J600_readSPI
                 _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
           _hexToString (ARG)
             _hexToChar
           _intToString (ARG)
             ___lldiv
               ___wmul (ARG)
             ___llmod
             ___wmul
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
           _ipProtocolToString (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
         _ethernetController_dropPacket
           _ENC424J600_setRXTailPointer
             _ENC424J600_writeControlRegisterUnbanked
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _ENC424J600_getNextPacketPointer
           _ENC424J600_writeSingleByte
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_getNextPacketPointer
             _ENC424J600_getNextPacketPointer
         _intToString
           ___lldiv
             ___wmul (ARG)
           ___llmod
           ___wmul
         _ipAdressToString
           ___lwdiv
           ___lwmod
         _ipProtocolToString
         _ipv4_checkHeaderChecksum
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _ENC424J600_readControlRegisterUnbanked
                 _ENC424J600_readSPI
                   _ENC424J600_initSPI
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _hexToString (ARG)
               _hexToChar
             _intToString (ARG)
               ___lldiv
                 ___wmul (ARG)
               ___llmod
               ___wmul
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
             _ipProtocolToString (ARG)
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _ENC424J600_readControlRegisterUnbanked
                   _ENC424J600_readSPI
                     _ENC424J600_initSPI
                   _ENC424J600_writeSPI
                     _ENC424J600_initSPI
           _hexToString
             _hexToChar
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_setRXTailPointer
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ethernetController_getNextPacketPointer (ARG)
                 _ENC424J600_getNextPacketPointer
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_getNextPacketPointer
               _ENC424J600_getNextPacketPointer
       _macToString
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _ipAdressToString
       ___lwdiv
       ___lwmod
     _ipv4_sendFrame
       _ARP_checkForEntry
         _getSeconds
         _ipv4_cmp
       _ARP_getEntryFromTable
       _ARP_sendRequest
         _ARP_send
           _ethernetController_getSourceMACAddress
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_setERXDATAReadPointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernetController_sendPacket
             _ENC424J600_setTXLength
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_setTXStartAddress
               _ENC424J600_writeControlRegisterUnbanked
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
             _ENC424J600_writeSingleByte
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _ENC424J600_setGPDATAWritePointer
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _ENC424J600_setGPDATAWritePointer
                 _ENC424J600_writeSPI
                   _ENC424J600_initSPI
               _ENC424J600_writeSPI
                 _ENC424J600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ipv4_getIPSourceAddress
         _mac_setToBroadcast
       _ethernetController_getMacAddress
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _ethernetController_sendPacket
         _ENC424J600_setTXLength
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_setTXStartAddress
           _ENC424J600_writeControlRegisterUnbanked
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
         _ENC424J600_writeSingleByte
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _getSeconds
   _ipv4_calculateHeaderChecksum
   _ipv4_setIPSourceAddress
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _ENC424J600_setGPDATAWritePointer
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ENC424J600_writeSPI
         _ENC424J600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _ENC424J600_setGPDATAWritePointer
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _ENC424J600_readControlRegisterUnbanked
         _ENC424J600_readSPI
           _ENC424J600_initSPI
         _ENC424J600_writeSPI
           _ENC424J600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
     _intToString
       ___lldiv
         ___wmul (ARG)
       ___llmod
       ___wmul
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _ENC424J600_readControlRegisterUnbanked
           _ENC424J600_readSPI
             _ENC424J600_initSPI
           _ENC424J600_writeSPI
             _ENC424J600_initSPI
       _hexToString (ARG)
         _hexToChar
       _intToString (ARG)
         ___lldiv
           ___wmul (ARG)
         ___llmod
         ___wmul
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
       _ipProtocolToString (ARG)
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _ENC424J600_readControlRegisterUnbanked
             _ENC424J600_readSPI
               _ENC424J600_initSPI
             _ENC424J600_writeSPI
               _ENC424J600_initSPI
   _sevenSegmentInit

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateSeconds

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      A2      12       63.3%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      DA      10       85.2%
BITBANK1           100      0       0       7        0.0%
BANK1              100     BD      FD       8       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     9F      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     27      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     364       6        0.0%
DATA                 0      0     364       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Mar 01 23:21:12 2019

                                            main@IPsource 01B9  
                                            ?_hexToString 0061  
                __end_of_ethernetController_getMacAddress 410E  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 409A  
                                                      l90 457E  
                                                      l82 2C4A  
                                                      l84 2C1E  
                                                      l86 2C44  
                                                      l87 2C6E  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 36C4  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 3C3A  
                                                     l204 3C58  
                                                     l132 3FDA  
                                                     l140 3E98  
                                                     l213 3C78  
                                                     l205 3C42  
                                                     l133 4020  
                                                     l214 3C60  
                                                     l206 3C2E  
                                                     l232 43B6  
                                                     l216 3C8E  
                                                     l241 4276  
                                                     l217 3C68  
                                                     l209 3C36  
                                                     l153 4224  
                                                     l218 3C6E  
                                                     l138 3E50  
                                                     l410 482E  
                                                     l163 405A  
                                                     l180 3A74  
                                                     l412 4850  
                                                     l245 42BC  
                                                     l317 3D70  
                                                     l181 3A88  
                                                     l182 3AA8  
                                                     l430 3296  
                                                     l263 3126  
                                                     l183 3ABE  
                                                     l416 47F6  
                                                     l177 3AC8  
                                                     l441 330A  
                                                     l513 21FA  
                                                     l258 306E  
                                                     l178 3A50  
                                                     l434 330E  
                                                     l418 4818  
                                                     l362 06DC  
                                                     l195 3CC0  
                                                     l451 3994  
                                                     l435 32F8  
                                                     l355 356E  
                                                     l187 4752  
                                                     l371 081C  
                                                     l363 0720  
                                                     l515 22CA  
                                                     l436 32CE  
                                                     l460 00EE  
                                                     l188 4768  
                                                     l364 07BE  
                                                     l516 2310  
                                                     l197 3CF0  
                                                     l453 3990  
                                                     l437 32CA  
                                                     l357 358E  
                                                     l373 0838  
                                                     l365 07DE  
                                                     l621 10D6  
                                                     l390 46EA  
                                                     l382 48D2  
                                                     l446 395C  
                                                     l470 01A8  
                                                     l462 0112  
                                                     l518 2354  
                                                     l199 3D16  
                                                     l367 092C  
                                                     l519 236C  
                                                     l623 10E0  
                                                     l384 48EC  
                                                     l456 39A4  
                                                     l480 0420  
                                                     l472 01B0  
                                                     l464 013E  
                                                     l368 0800  
                                                     l377 4AA8  
                                                     l369 0970  
                                                     l641 39DC  
                                                     l617 0F10  
                                                     l394 4ACE  
                                                     l474 03CE  
                                                     l802 4610  
                                                     l626 11DE  
                                                     l618 0F48  
                                                     l475 02EA  
                                                     l467 0174  
                                                     l803 45E6  
                                                     l643 39F8  
                                                     l627 1176  
                                                     l619 1098  
                                                     l388 46BE  
                                                     l900 0CE2  
                                                     l660 2E72  
                                                     l652 2E12  
                                                     l628 11C2  
                                                     l901 0C9A  
                                                     l485 0492  
                                                     l813 1FC0  
                                                     l805 45F2  
                                                     l661 2E36  
                                                     l653 2DC2  
                                                     l645 3A0C  
                                                     l629 11DA  
                                                     l750 43FE  
                                                     l910 0DF6  
                                                     l486 0572  
                                                     l806 45FC  
                                                     l662 2EA4  
                                                     l646 3A22  
                                                     l911 0DF8  
                                                     l903 0D38  
                                                     l487 0594  
                                                     l479 0370  
                                                     l815 20E0  
                                                     l807 4606  
                                                     l663 2E44  
                                                     l655 2DD2  
                                                     l639 39C8  
                                                     l752 4426  
                                                     l912 0E2E  
                                                     l904 0CF0  
                                                     l816 2134  
                                                     l664 2E54  
                                                     l656 2DE2  
                                                     l648 3A36  
                                                     l665 2E62  
                                                     l657 2DF2  
                                                     l906 0D7E  
                                                     l930 1C8C  
                                                     l770 4B66  
                                                     l658 2E02  
                                                     l819 217A  
                                                     l763 1A3A  
                                                     l908 0DB4  
                                                     l932 1D02  
                                                     l764 1A64  
                                                     l933 1CCE  
                                                     l765 1A8C  
                                                     l773 4B72  
                                                     l926 1C7E  
                                                     l790 3218  
                                                     l766 1AB4  
                                                     l935 1D44  
                                                     l927 1C4A  
                                                     l943 3852  
                                                     l936 1D10  
                                                     l784 3158  
                                                     l953 3448  
                                                     l929 1CC0  
                                                     l785 3226  
                                                     l786 31A8  
                                                     l890 2674  
                                                     l794 464A  
                                                     l778 33A8  
                                                     l946 38EE  
                                                     l955 34A0  
                                                     l891 2688  
                                                     l795 462A  
                                                     l788 31DC  
                                                     l797 4636  
                                                     l894 0C36  
                                                     l798 4640  
                                                     l959 435C  
                                                     l895 0BEE  
                                                     l887 2556  
                                                     l897 0C8C  
                                                     l889 2596  
                                                     l898 0C44  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 2DB2  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           ENC424J600_writeControlRegisterUnbanked@opcode 006D  
                __end_of_ethernetController_getDeviceName 4B54  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                                       _ARP_replyIfNeeded 29D2  
                        _ethernetController_getDeviceName 4B30  
                                memory_txFrameClear@index 0060  
                    ENC424J600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                            ??_ENC424J600_enableReception 006B  
                                                     prod 000FF3  
                                            hexToChar@val 0060  
           ethernetController_streamFromRXBuffer@startEnd 0074  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 3786  
                                      ?_ARP_replyIfNeeded 0100  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004A  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getRSV 0074  
                            ipv4_sendFrame@requestCounter 01C5  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1020 2830  
                                                    l1021 284C  
                                                    l1040 1F4A  
                                                    l1016 278A  
                                                    l1033 239C  
                                                    l1035 251E  
                                                    l1061 4902  
                                                    l1045 3648  
                                                    l1038 1F04  
                                                    l1055 4700  
                                                    l1063 491C  
                                                    l1057 472C  
                                                    l1067 4BC4  
                                                    l1420 3DE2  
                                                    l1421 3DD6  
                                                    l1430 42EA  
                                                    l1431 42DE  
                                                    l1424 3E16  
                                                    l1425 3E24  
                                                    l1434 4312  
                                                    l1435 4320  
                                                    l1473 4472  
                                                    l1474 446A  
                                                    l1483 4684  
                                                    l1484 467C  
                                                    l1477 4492  
                                                    l1478 449C  
                                                    l1487 469C  
                                                    l1488 46A6  
                                                    l7135 4826  
                                                    l7049 43E4  
                                                    l7323 42A4  
                                                    l7155 47EE  
                                                    l7511 4020  
                                                    l8241 3440  
                                                    l7521 421C  
                                                    l7265 3E48  
                                                    l9025 22CA  
                                                    l7283 3E90  
                                                    l7429 0418  
                                                    l8317 3648  
                                                    l8183 0E26  
                                                    l8353 4052  
                                                    l7395 02E2  
                                                    l7707 31BC  
                                                    l8437 30A0  
                                                    l7565 4AA0  
                                                    l7725 3218  
                                                    l7717 31F0  
                                                    l8277 1EFC  
                                                    l7735 48CA  
                                                    l8607 38EE  
                                                    l9097 4354  
                                                    l7729 3226  
                                                    l8289 1F42  
                                                    l7755 46B6  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8661 2C36  
                                                    l7775 1FB8  
                                                    l7865 48FA  
                                                    l9561 0952  
                                                    l8593 384A  
                                                    l9563 0968  
                                                    l7885 46F8  
                                                    l8943 4BBC  
                                                    STR_1 7D90  
                                                    STR_2 7ECD  
                                                    l8889 4AC6  
                                                    STR_3 7F0E  
                                                    STR_4 7DC9  
                                                    STR_5 7FD0  
                           ?_ethernetController_softReset 009A  
                                                    STR_6 7FFC  
                                                    STR_7 7F6F  
                                                    STR_8 7F90  
                                                    STR_9 7EFE  
               ethernetController_clearInterruptFlag@flag 0072  
               ENC424J600_setRXBufferStartAddress@lowByte 0070  
                                                    u8010 3958  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    u8200 3292  
                                                    u8120 481C  
                                                    u8130 3240  
                                                    u8140 324E  
                                                    u9020 3202  
                                                    u8310 3E78  
                                                    u8150 325C  
                                                    u9030 3226  
                                                    _RCIP 007CFD  
                                                    u8160 326A  
                                                    u9200 3378  
                                                    u8401 0108  
                                                    u8330 3EB2  
                                                    u8090 4854  
                                                    u9130 210C  
                                                    u9210 33D6  
                                                    u8251 32D8  
                                                    u9060 48F0  
                                                    u8261 32EA  
                                                    u9301 1B32  
                                                    u9205 336E  
                                                    u8350 42A4  
                                                    u9150 217E  
                                                    u8431 0134  
                                                    u9215 33CC  
                                                    u8360 42B4  
                                                    u9240 4920  
                                                    u8281 3318  
                                                    u8521 0308  
                                                    u8441 016A  
                                                    u9401 1C54  
                                                    u9321 1B7E  
                                                    u9090 46EE  
                                                    u8291 332A  
                                                    u8531 0326  
                                                    u9331 1B96  
                                                    u9500 3DE6  
                                                    u9180 179C  
                                                    u8621 045C  
                                                    u8381 00E4  
                                                    u9421 1C96  
                                                    u9341 1BB0  
                                                    u9165 1570  
                                                    u9270 4730  
                                                    u9190 334A  
                                                    u8631 047A  
                                                    u9351 1BCA  
                                                    u9175 161E  
                                                    u7920 43E4  
                                                    u8561 0366  
                                                    u8801 35BA  
                                                    u9441 1CD8  
                                                    u9361 1BE4  
                                                    u9281 1B0E  
                                                    u9185 1792  
                                                    u7930 43F4  
                                                    u8650 0498  
                                                    u8570 0376  
                                                    u9530 42EE  
                                                    u9610 12C8  
                                                    u8811 35EE  
                                                    u9371 1BFE  
                                                    u9291 1B20  
                                                    u8740 424A  
                                                    u7940 3906  
                                                    u8900 4688  
                                                    u8581 03C4  
                                                    u9461 1D1A  
                                                    u9381 1C18  
                                                    u7950 3914  
                                                    u9710 1392  
                                                    u9630 12F2  
                                                    u9550 1256  
                                                    u8751 4256  
                                                    u8671 0568  
                                                    u9391 1C32  
                                                    u8920 441E  
                                                    u7960 3922  
                                                    u9608 12A4  
                                                    u8761 3546  
                                                    u9481 1D56  
                                                    u8930 442A  
                                                    u7970 3930  
                                                    u9810 1458  
                                                    u9730 13B8  
                                                    u9650 1318  
                                                    u9570 127A  
                                                    u8691 058A  
                                                    u8940 444A  
                                                    u9708 136E  
                                                    u9628 12CC  
                                                    u8870 4476  
                                                    u9830 1482  
                                                    u9750 13E0  
                                                    u9670 1340  
                                                    u9590 12A0  
                                                    u8927 4414  
                                                    u8791 35A0  
                                                    u9911 1510  
                                                    u9808 1434  
                                                    u9728 1396  
                                                    u9648 12F6  
                                                    u9568 125A  
                                                    u8961 4104  
                                                    u9930 1A22  
                                                    u9850 14AA  
                                                    u9770 140A  
                                                    u9690 136A  
                                                    u8947 4440  
                                                    u9940 1A4C  
                                                    u9908 14F8  
                                                    u9828 145C  
                                                    u9748 13BC  
                                                    u9668 131C  
                                                    u9588 127E  
                                                    u8981 3132  
                                                    u9950 1A74  
                                                    u9870 14CE  
                                                    u9790 1430  
                                                    u9960 1A9C  
                                                    u9848 1486  
                                                    u9768 13E4  
                                                    u9688 1344  
                                                    u9890 14F4  
                                                    u9868 14AE  
                                                    u9788 140E  
                                                    u9888 14D2  
                                                    _TRMT 007D61  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                     ??_ARP_replyIfNeeded 00F8  
                            ipv4_sendFrame@requestTimeout 017F  
                                       _ipv4_setToAllZero 4BB6  
                                                    _main 0E4E  
                                 printEthernetState@state 009A  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 004D  
                                           __CFG_BORV$190 000000  
                                      intToString@pointer 0086  
                                          ?_updateSeconds 0001  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 410E  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 01D8  
                                                    start 00C4  
          __end_of_ethernetController_getSourceMACAddress 4260  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 41F0  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 4B98  
                               _ENC424J600_getPacketCount 4C26  
                             __end_of_ENC424J600_writeSPI 43FC  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 01C1  
                                        ARP_setNewEntry@i 007B  
                                 _checkForOverlapSwitched 38F6  
              ENC424J600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 41F0  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 4180  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                     __size_of_ENC424J600_enableReception 0008  
                                          _ipv4_isAllZero 48F4  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0073  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 4D00  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 4CFA  
                                __size_of_ARP_setNewEntry 00EE  
                                        __end_of_ARP_send 1D64  
                               __end_of_ARP_replyIfNeeded 2B3E  
                                       _nextPacketPointer 0045  
                                __size_of_ARP_sendRequest 00C2  
                                                   ?_main 0001  
                                                   STR_10 7FC2  
                                                   STR_11 7FBB  
                                                   STR_12 7FD0  
                                                   STR_20 7FFB  
                                                   STR_21 7C83  
                                                   STR_13 7FF5  
                                                   STR_14 7FF8  
                                                   STR_22 7E86  
                                                   STR_30 7CAD  
                                                   STR_23 7C83  
                                                   STR_15 7FE1  
                                                   STR_31 7F57  
                                                   STR_16 7FFC  
                                                   STR_24 7EEE  
                                                   STR_40 7E4D  
                                                   STR_32 7E11  
                                                   STR_33 7FDD  
                                                   STR_17 7FD0  
                                                   STR_41 7E26  
                                                   STR_25 7DE2  
                                                   STR_18 7EE9  
                                                   STR_26 7F63  
                                                   STR_34 7DFA  
                                                   STR_42 7D56  
                                                   STR_50 7CD3  
                                                   STR_35 7FDD  
                                                   STR_27 7E38  
                                                   STR_19 7FF2  
                                                   STR_43 7D73  
                                                   STR_51 7C1C  
                                                   STR_60 7FE6  
                                                   STR_44 7FAC  
                                                   STR_28 7FA3  
                                                   STR_36 7DAD  
                                                   STR_52 7CF8  
                                                   STR_29 7C83  
                                                   STR_61 7FEA  
                                                   STR_45 7EBC  
                                                   STR_53 7D38  
                                                   STR_37 7C53  
                                                   STR_54 7F9A  
                                                   STR_38 7F4A  
                                                   STR_70 7F1E  
                                                   STR_62 7EAB  
                                                   STR_46 7D1A  
                                                   STR_55 7FDC  
                                                   STR_71 7EDE  
                                                   STR_47 7E73  
                                                   STR_39 7E60  
                                                   STR_63 7C86  
                                                   STR_80 7E37  
                                                   STR_72 7E37  
                                                   STR_64 7FD0  
                                                   STR_56 7FD2  
                                                   STR_48 7F3C  
                                                   STR_65 7E37  
                                                   STR_81 7FFC  
                                                   STR_73 7FFC  
                                                   STR_57 7FEE  
                                                   STR_49 7F2D  
                                                   STR_66 7FCD  
                                                   STR_58 7E99  
                                                   STR_82 7E3A  
                                                   STR_67 7E37  
                                                   STR_75 7FD0  
                                                   STR_59 7FD7  
                                                   STR_83 7F7B  
                                                   STR_68 7FFC  
                                                   STR_76 7FC8  
                                                   STR_84 7FB4  
                                                   STR_77 7FF8  
                                                   STR_85 7FFC  
                                                   STR_69 7F86  
                                                   STR_78 7FF8  
                                                   STR_79 7FF8  
                                         __end_of___lldiv 3E36  
                                                   u10120 0E26  
                                                   u10201 2AC4  
                                                   u10131 0E44  
                                                   u10211 2AE8  
                                                   u10301 1FA4  
                                                   u11101 273E  
                                                   u10070 0DF2  
                                                   u10311 360A  
                                                   u11031 085A  
                                                   u11111 2750  
                                                   u10240 34A4  
                                                   u10400 30A0  
                                                   u10161 2A16  
                                                   u11041 0894  
                                                   u11121 2766  
                                                   u10251 34E2  
                                                   u10171 2A28  
                                                   u11211 221E  
                                                   u10420 2548  
                                                   u10340 4074  
                                                   u10181 2A90  
                                                   u10501 26A8  
                                                   u10270 1F3E  
                                                   u10510 238E  
                                                   u10191 2AB2  
                                                   u10431 2568  
                                                   u10351 4090  
                                                   u10521 23B0  
                                                   u11081 271A  
                                                   u11401 4A10  
                                                   u11170 4B3E  
                                                   u10290 1F84  
                                                   u10451 25AE  
                                                   u10531 23EA  
                                                   u11091 272C  
                                                   u10700 2EF8  
                                                   u10620 38F2  
                                                   u10461 260C  
                                                   u11501 10B2  
                                                   u10374 3D54  
                                                   u10375 3D50  
                                                   u10631 4948  
                                                   u10551 36CE  
                                                   u10384 3D96  
                                                   u10800 2F7E  
                                                   u10720 2F10  
                                                   u10385 3D92  
                                         __end_of___llmod 4332  
                                                   u10561 3744  
                                                   u11291 4366  
                                                   u10491 2692  
                                                   u10571 3766  
                                                   u10900 4CAE  
                                                   u10820 2F9A  
                                                   u10740 2F2A  
                                                   u10581 3778  
                                                   u11541 114A  
                                                   u10718 2EFC  
                                                   u11391 3A40  
                                                   u10840 2FB8  
                                                   u10760 2F46  
                                                   u11561 11A2  
                                                   u10818 2F82  
                                                   u10738 2F14  
                                                   u11571 11CC  
                                                   u11491 0F9C  
                                                   u11627 0E88  
                                                   u10860 2FD4  
                                                   u10780 2F64  
                                                   u11637 1006  
                                                   u10838 2F9E  
                                                   u10758 2F2E  
                                                   u11647 3068  
                                                   u10880 2FEC  
                                                   u11657 2BCA  
                                                   u10858 2FBC  
                                                   u10778 2F4A  
                                                   u11667 2C12  
                                                   u10971 0606  
                                                   u10878 2FD8  
                                                   u10798 2F68  
                                                   u10991 0732  
                                                   u10898 2FF0  
                                         __end_of___lwdiv 44A6  
                              __end_of_printEthernetState 3A4A  
                                         __end_of___lwmod 46B0  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l527 4B06  
                                                   i2l721 37DC  
                                                   i2l730 3F1A  
        ethernetController_streamToTransmitBuffer@pointer 0041  
                                                   i2l716 37B8  
                                                   i2l725 3F1E  
                                                   i2l726 3F0E  
                                                   i2l718 37C0  
                                                   i2l728 3F12  
                                                   i2l729 3F16  
                                                   i2l676 3B14  
                                                   i2l678 3B24  
                                                   i2l686 0074  
                                                   i2l679 3B68  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
                        ENC424J600_setTXStartAddress@addr 006E  
         __end_of_ENC424J600_writeControlRegisterUnbanked 488E  
        __size_of_ENC424J600_writeControlRegisterUnbanked 0036  
               ??_ENC424J600_writeControlRegisterUnbanked 006C  
                ?_ENC424J600_writeControlRegisterUnbanked 006A  
                 _ENC424J600_writeControlRegisterUnbanked 4858  
                                ARP_parseFromRXBuffer@arp 00A0  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                           __CFG_WRT3$OFF 000000  
                                           _ARP_initTable 4332  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 46F2  
                                        __end_of_UARTInit 4CC2  
                                     intToString@hundreds 0083  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                __end_of_ENC424J600_setGPDATAWritePointer 47AC  
               __size_of_ENC424J600_setGPDATAWritePointer 003C  
                      ??_ENC424J600_setGPDATAWritePointer 006C  
                       ?_ENC424J600_setGPDATAWritePointer 006A  
                        _ENC424J600_setGPDATAWritePointer 4770  
                               __end_of_ipv4_setToAllZero 4BD4  
                                                   _stack 0257  
                                                   main@i 01B1  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 409A  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                            ethernet_txFrameRequest@frame 00A2  
                             ARP_parseFromRXBuffer@i_2603 009B  
                             ARP_parseFromRXBuffer@i_2604 009C  
                             ARP_parseFromRXBuffer@i_2605 009D  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                                  ENC424J600_readSPI@data 0060  
                             memory_txFrameRequest@i_1162 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 004E  
                       ENC424J600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                          __CFG_ICPRT$OFF 000000  
                       ENC424J600_clearInterruptFlag@temp 0071  
                                __end_of_UARTTransmitText 4452  
                                             ARP_send@arp 00A7  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 26DA  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                         intToString@ones 0082  
                                        _ipAdressToString 1FAE  
                                         intToString@tens 0081  
                             ARP_parseFromRXBuffer@offset 009E  
                             ?_ENC424J600_readPHYRegister 006E  
                                         __initialization 3B7A  
                       ethernetController_softReset@F5837 004B  
                       ethernetController_softReset@F5839 0043  
                             memory_txFrameRequest@length 0084  
                                       ARP_setNewEntry@ip 006A  
                          __size_of_ARP_getEntryFromTable 002E  
                                            __end_of_main 11FE  
                                  __end_of_ipv4_isAllZero 4924  
                           __end_of_ARP_getEntryFromTable 4952  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 0370  
                                ?_ipv4_setIPSourceAddress 0060  
                                    _ipv4_handleNewPacket 2374  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1158 0093  
                                           main@headerBuf 018F  
                                                  ??_main 0188  
                               __size_of_entireMemoryFull 0038  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 29D2  
                              _ipv4_writeHeaderIntoBuffer 2864  
                                          ?_ARP_initTable 0001  
                                       ARP_sendRequest@ip 00F8  
                         handleStackBackgroundTasks@stack 0184  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 007D  
                                        ___llmod@dividend 0060  
                                    __size_of_macToString 0108  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                    ipv4_parseHeader@temp 0091  
                       __size_of_ipv4_checkHeaderChecksum 00C8  
                              printEthernetState@oldState 0248  
                                                  i2l1473 44C4  
                                                  i2l1474 44BC  
                                                  i2l1477 44E4  
                                                  i2l1478 44EE  
                                  ARP_sendRequest@request 0114  
                                                  i2l6613 37D4  
                               ??_ethernetController_init 00A9  
                                                  i2l6581 3B24  
                               ?_ipv4_checkHeaderChecksum 009A  
                                         ??_updateSeconds 0001  
       __end_of_ethernetController_streamToTransmitBuffer 4026  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 3FAE  
                            __size_of_ARP_handleNewPacket 01AE  
                                  __end_of_ipv4_sendFrame 2864  
                                                  _TXREG1 000FAD  
                             __size_of_ENC424J600_initSPI 001C  
                             __size_of_ENC424J600_readSPI 006A  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 009D  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 00A9  
                                  __size_of_buttonHandler 0098  
                                 ?_ethernet_rxGetNewFrame 0178  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_ipv4_cmp 4734  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 4A22  
                                   ?_ipv4_handleNewPacket 00B5  
                      __end_of_handleStackBackgroundTasks 2374  
                              _handleStackBackgroundTasks 219C  
                                          __CFG_STVREN$ON 000000  
                                   buttonHandler@oldState 0049  
                                               ??___lldiv 006E  
             ENC424J600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 0048  
             ENC424J600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0064  
                                    __size_of_hexToString 00EE  
                            buttonHandler@debounceCounter 0030  
                                                  clear_0 3BD8  
                                                  clear_1 3BE4  
                                                  clear_2 3BF0  
                                                  clear_3 3BFC  
                              parseNumber@numberToDisplay 0008  
                          __size_of_ARP_parseFromRXBuffer 03FA  
                              __size_of_ARP_replyIfNeeded 016C  
                           __end_of_ARP_parseFromRXBuffer 0E4E  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 4546  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 44F8  
                                               ??_mac_cmp 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 018B  
                      __end_of_ENC424J600_enableReception 4CFA  
                              _ENC424J600_enableReception 4CF2  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_ENC424J600_readControlRegisterUnbanked 48C4  
         __size_of_ENC424J600_readControlRegisterUnbanked 0036  
                ??_ENC424J600_readControlRegisterUnbanked 006C  
                 ?_ENC424J600_readControlRegisterUnbanked 006A  
                  _ENC424J600_readControlRegisterUnbanked 488E  
                                            __pdataCOMRAM 004B  
                ethernetController_softReset@comFailCount 009E  
                                       __end_ofi2___lwdiv 44F8  
                    __end_of_ENC424J600_setTXStartAddress 497C  
                   __size_of_ENC424J600_setTXStartAddress 002A  
                            _ENC424J600_setTXStartAddress 4952  
                                            __mediumconst 7C10  
                             __size_of_ipProtocolToString 0048  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                       ??_ARP_setNewEntry 0072  
                          ipv4_sendFrame@numberOfRequests 017E  
           __end_of_ethernetController_clearInterruptFlag 4CDE  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 4CD0  
                                       ??_ARP_sendRequest 00FC  
                                    intToString@thousands 0084  
                                     mac_setToBroadcast@i 0062  
                              __size_of_ipv4_setToAllZero 001E  
                         ethernetController_softReset@err 00A3  
                                         _numberToDisplay 0034  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                 ipAdressToString@address 01ED  
      __end_of_ethernetController_updateNextPacketPointer 3FAE  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 3F34  
                       sevenSegmentUpdate@digitsToDisplay 003C  
                                              __accesstop 0060  
                                 __end_of__initialization 3C02  
                                       _printErrorMessage 2DB2  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                 ?_ENC424J600_setTXLength 006E  
                                               ?_ARP_send 00A7  
                          __end_of_ethernet_rxGetNewFrame 0A54  
                                        _sevenSegmentInit 4C0C  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                                      ?_printErrorMessage 009A  
               ethernetController_getSiliconRevision@data 006E  
              ethernetController_pollInterruptFlags@flags 007B  
                                          __pcstackCOMRAM 0001  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 007B  
 ENC424J600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK1 4BD4  
                                            __pidataBANK2 4C58  
                                       ipv4_parseHeader@i 008F  
                                               ?_UARTInit 0001  
                                      ARP_setNewEntry@mac 0064  
                                     ??_printErrorMessage 009D  
                         __end_of_ethernetController_init 4180  
                         ??_ethernetController_dropPacket 0074  
                                               ARP_send@i 00CD  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                                         ??_ARP_initTable 007C  
                                 _ethernet_txFrameRequest 3514  
                    __end_of_ENC424J600_getInterruptFlags 45E0  
                   __size_of_ENC424J600_getInterruptFlags 004C  
                            _ENC424J600_getInterruptFlags 4594  
                               __size_of_ipv4_parseHeader 024A  
                              ipProtocolToString@protocol 0062  
                                    __size_of_intToString 02C6  
                         __end_of_checkForOverlapSwitched 39A8  
                                           _buttonHandler 3AE2  
                      ethernetController_dropPacket@frame 0072  
                          __size_of_memory_txFrameRequest 04D6  
                           __end_of_memory_txFrameRequest 059E  
                                      __size_of_hexToChar 0022  
                           ?_ENC424J600_setTXStartAddress 006E  
                               __end_of_printErrorMessage 2EE0  
                                              __pbssBANK1 01BD  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                          __end_of_ENC424J600_setTXLength 49A6  
                             __end_of_memory_txFrameClear 4B30  
                                              ??_ARP_send 00C7  
                                       _etherTypeToString 4628  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00B7  
           __end_of_ethernetController_getSiliconRevision 4BB6  
          __size_of_ethernetController_getSiliconRevision 001E  
                  ?_ethernetController_getSiliconRevision 0001  
                 ??_ethernetController_getSiliconRevision 006E  
                   _ethernetController_getSiliconRevision 4B98  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                          hexToString@val 0061  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
                                              _getSeconds 4C7C  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        _entireMemoryFull 47E8  
                                   ipv4_parseHeader@field 0077  
                                 ARP_sendRequest@senderIP 0106  
                                 ARP_sendRequest@targetIP 010A  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                               updateSeconds@prescaler_ms 003F  
                 ENC424J600_updateReceiveStatusVector@rsv 0060  
                           ?_ENC424J600_getInterruptFlags 006E  
                       ENC424J600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 219C  
                ENC424J600_setERXDATAReadPointer@highByte 006E  
                                 ENC424J600_writeSPI@data 0060  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 0181  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                            __size_of_ipv4_txFrameRequest 0136  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 39A8  
                            ?_ENC424J600_setRXTailPointer 006E  
                               __end_of_etherTypeToString 466C  
                  ENC424J600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 3AE2  
          __size_of_ethernetController_streamFromRXBuffer 0098  
                 ??_ethernetController_streamFromRXBuffer 0074  
                  ?_ethernetController_streamFromRXBuffer 0072  
                   _ethernetController_streamFromRXBuffer 3A4A  
                          sevenSegmentUpdate@digitPointer 0047  
                                       ?_UARTTransmitText 0098  
                                                 __Hparam 0000  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       __end_of_hexToChar 4B76  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                      buttonHandler@state 0001  
                                   __end_of_mac_isAllZero 48F4  
                                                 ___lldiv 3DB2  
                                         __size_of___wmul 0028  
                                                 ___llmod 42CA  
                                                 ___lwdiv 4452  
                                                 ___lwmod 466C  
                    ENC424J600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 3B7A  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                                                 __ramtop 0800  
                            __size_of_ENC424J600_writeSPI 0064  
                                     _ARP_handleNewPacket 252C  
                                                 __ptext0 0E4E  
                                                 __ptext1 4C0C  
                                                 __ptext2 39A8  
                                                 __ptext3 2DB2  
                                                 __ptext4 2864  
                                                 __ptext5 2C7C  
                                                 __ptext6 49FA  
                                                 __ptext7 4C6A  
                                                 __ptext8 219C  
                                                 __ptext9 26DA  
                                                 _mac_cmp 46B0  
                                  ipv4_handleNewPacket@ip 00C2  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 0186  
                                            __size_of_ISR 00BC  
                  ENC424J600_setGPDATAWritePointer@opcode 006C  
                      ENC424J600_setRXTailPointer@lowByte 0070  
              __end_of_ENC424J600_setRXBufferStartAddress 49FA  
             __size_of_ENC424J600_setRXBufferStartAddress 002A  
                    ??_ENC424J600_setRXBufferStartAddress 0070  
                     ?_ENC424J600_setRXBufferStartAddress 006E  
                      _ENC424J600_setRXBufferStartAddress 49D0  
                         ENC424J600_setRXTailPointer@addr 006E  
                   __end_of_ethernetController_dropPacket 4770  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 4734  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                    ??_printEthernetState 00A9  
                                                 _seconds 0038  
           __end_of_ethernetController_pollInterruptFlags 3006  
          __size_of_ethernetController_pollInterruptFlags 0126  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 2EE0  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 ENC424J600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0012  
                                                 main@err 01B2  
                            ??_ENC424J600_writeSingleByte 006A  
                                    end_of_initialization 3C02  
                              __size_of_printErrorMessage 012E  
                                               _ARP_table 0300  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 4AC0  
                                    ?_ARP_handleNewPacket 00F8  
                              ?_ethernetController_getRSV 0071  
                                           __Lmediumconst 7C10  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006E  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0075  
                                         ___lldiv@divisor 006A  
                              ARP_getEntryFromTable@index 0067  
                                         ___lldiv@counter 0072  
                                      entireMemoryEmpty@i 0060  
                              ARP_setNewEntry@oldestIndex 007A  
                                __size_of_checkForOverlap 0108  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                             ?_handleStackBackgroundTasks 0184  
                                         _ARP_setNewEntry 3426  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    ENC424J600_readPHYRegister@PHYaddress 0077  
                                         _ARP_sendRequest 36C4  
                                   _ARP_getEntryFromTable 4924  
                          ENC424J600_setTXLength@highByte 0071  
                                             ?_getSeconds 0060  
                                         ??_buttonHandler 0003  
                   __end_of_ethernetController_sendPacket 4A72  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 4A4A  
                                               _PORTBbits 000F81  
                                        _ipv4_parseHeader 1D64  
                                     ipv4_sendFrame@index 0180  
                     __size_of_ENC424J600_writeSingleByte 0018  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 4C26  
                 __end_of_ipv4_streamToTransmissionBuffer 4A22  
                __size_of_ipv4_streamToTransmissionBuffer 0028  
                       ??_ipv4_streamToTransmissionBuffer 00BC  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 49FA  
                             ?_ENC424J600_enableReception 0001  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 009F  
                                           ARP_send@field 00EF  
                                               _TRISBbits 000F93  
         __end_of_ethernetController_getNextPacketPointer 4CD0  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 4CC2  
                                        ??_ipv4_sendFrame 0172  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 35FC  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 44A6  
                                       i2___lwdiv@counter 0007  
                                   ??_ARP_handleNewPacket 00FA  
                              __end_of_ENC424J600_initSPI 4C0C  
                              __end_of_ENC424J600_readSPI 42CA  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                    __end_of_ipv4_calculateHeaderChecksum 1826  
                   __size_of_ipv4_calculateHeaderChecksum 030C  
                            _ipv4_calculateHeaderChecksum 151A  
                    ENC424J600_setTXStartAddress@highByte 0071  
                                   __end_of_updateSeconds 4B0C  
                                  ARP_parseFromRXBuffer@i 009A  
                                       intToString@number 01D0  
                                ipAdressToString@hundreds 0077  
                                       __size_of_ARP_send 0278  
                                           ??_hexToString 0065  
                                      ipv4_parseHeader@ip 0092  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                          __end_of___wmul 4A4A  
                                           __pidataCOMRAM 4D00  
                                        parseNumber@digit 000A  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                    __size_of_ENC424J600_setRXTailPointer 002A  
                  ENC424J600_setERXDATAReadPointer@opcode 006C  
                              __end_of_ipProtocolToString 4628  
                                      hexToString@pointer 0069  
                      ipv4_checkHeaderChecksum@testHeader 009E  
                                   _ARP_parseFromRXBuffer 0A54  
             __end_of_ethernetController_updateLinkStatus 3D28  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 3C9E  
                                     start_initialization 3B7A  
                              ARP_parseFromRXBuffer@frame 0077  
                                             __end_of_ISR 00C4  
                                          intToString@val 0073  
                          ipv4_checkHeaderChecksum@header 009A  
                                ?_ethernetController_init 00A6  
                                _ipv4_checkHeaderChecksum 35FC  
                         ipv4_handleNewPacket@headerField 00B9  
                                              ?i2___lwdiv 0001  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 3230  
                                         __CFG_nLPBOR$OFF 000000  
                                     __size_of_getSeconds 0012  
                                __end_of_entireMemoryFull 4820  
   __end_of_ethernetController_writeDestinationMACAddress 3EB6  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 3E36  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                         ___llmod@counter 0068  
                         ??_ENC424J600_clearInterruptFlag 006E  
                                 __end_of_ARP_setNewEntry 3514  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 01DA  
                                 __end_of_ARP_sendRequest 3786  
                                ARP_setNewEntry@timestamp 006E  
                                    printErrorMessage@err 009A  
                                          _occupiedMemory 0200  
                                         _sourceIPAddress 002C  
                                                ??___wmul 0064  
                        ENC424J600_getPacketCount@lowByte 006E  
                                     _ipv4_txFrameRequest 2C7C  
                                  ?_ARP_getEntryFromTable 0060  
                  ethernetController_getDeviceName@string 0062  
                                    _destinationIPAddress 0028  
                                             __pdataBANK1 01E1  
                                             __pdataBANK2 02C8  
                                           ??_intToString 0077  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                                       ??_checkForOverlap 0084  
                                     __end_of_hexToString 3426  
                                   __end_of_ARP_initTable 4398  
                                             __pbssCOMRAM 0028  
                                 _ipv4_getIPSourceAddress 4C8E  
                                 _ipv4_setIPSourceAddress 4C6A  
                ethernetController_updateLinkStatus@state 0080  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                       ?_ipAdressToString 0067  
                      __end_of_ENC424J600_writeSingleByte 4C58  
                              _ENC424J600_writeSingleByte 4C40  
                                   _memory_txFrameRequest 00C8  
           __end_of_ethernetController_newPacketAvailable 4CB2  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 4CA0  
                                ARP_replyIfNeeded@request 0100  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 00A1  
                                      ??_ipAdressToString 006B  
                                 __size_of_mac_setAllZero 0026  
                                     _ENC424J600_writeSPI 4398  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                              buttonHandler@debounceValue 0003  
                                           ??_parseNumber 000B  
                                               _main$2013 01AF  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 01E1  
              ethernetController_getEtherTypeField@opcode 007E  
                                               __pintcode 0008  
                            ??_ENC424J600_readPHYRegister 0070  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 7C10  
                                               __ptext100 4AE6  
                                               __ptext101 3786  
                                               __ptext102 3EB6  
                                               __ptext103 44A6  
                                               __ptext104 3AE2  
                                                ?___lldiv 0066  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 01B8  
                                                ?___lwdiv 0060  
                                                ?___lwmod 0060  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _hexToChar 4B54  
                                    ?_ENC424J600_writeSPI 0060  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               ARP_setNewEntry@maxSeconds 0076  
                                  ?_ARP_parseFromRXBuffer 0077  
                               __size_of_UARTTransmitText 0056  
              ethernetController_getSourceMACAddress@temp 007F  
                    ENC424J600_setERXDATAReadPointer@addr 006A  
                      __size_of_ENC424J600_getPacketCount 001A  
                 ENC424J600_setERXDATAReadPointer@lowByte 006D  
                                  ipv4_parseHeader@i_3227 0090  
               __end_of_ENC424J600_enableAutoMACInsertion 4A9A  
              __size_of_ENC424J600_enableAutoMACInsertion 0028  
                      ?_ENC424J600_enableAutoMACInsertion 0001  
                     ??_ENC424J600_enableAutoMACInsertion 006E  
                       _ENC424J600_enableAutoMACInsertion 4A72  
                                      ipAdressToString@ip 0067  
                                     __end_of_intToString 1AEC  
                              ?_ENC424J600_getPacketCount 0001  
                                             _macToString 3128  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                       _entireMemoryEmpty 4820  
                                ??_ethernet_rxGetNewFrame 017B  
                                             ??i2___lwdiv 0005  
                                ARP_sendRequest@senderMAC 0100  
                                ARP_sendRequest@targetMAC 010E  
                      ENC424J600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                     __size_of_ENC424J600_readPHYRegister 0122  
                     ipv4_streamToTransmissionBuffer@data 00BE  
                             ??_ethernetController_getRSV 0076  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 0178  
                                __end_of_ipv4_parseHeader 1FAE  
                                                _ARP_send 1AEC  
                              ARP_replyIfNeeded@senderMAC 0120  
                       ENC424J600_writeSPI@timeoutCounter 0066  
                              ARP_replyIfNeeded@targetMAC 0126  
                                        ?_ARP_setNewEntry 0064  
                                     ??_entireMemoryEmpty 0060  
                                        ARP_initTable@mac 007C  
                                        ?_ARP_sendRequest 00F8  
                                       entireMemoryFull@i 0060  
                                                i2u670_40 44C8  
                                                i2u752_40 3B3C  
                                                i2u760_40 3802  
                                                i2u753_40 3B3E  
                                                i2u761_44 3812  
                                                i2u761_45 380E  
                                                i2u756_44 3796  
                                                i2u756_45 3792  
                                     ARP_checkForEntry@ip 0067  
                                        __CFG_WDTPS$32768 000000  
                                             _hexToString 3338  
                                      _mac_setToBroadcast 4A9A  
                              __end_of_sevenSegmentUpdate 3844  
                   __end_of_ENC424J600_clearInterruptFlag 3DB2  
                  __size_of_ENC424J600_clearInterruptFlag 008A  
                           _ENC424J600_clearInterruptFlag 3D28  
                                                _UARTInit 4CB2  
                          ??_ipv4_calculateHeaderChecksum 0062  
                                   ??_ENC424J600_writeSPI 0062  
                                      UARTTransmitInt@val 009A  
                                              ?_hexToChar 0001  
                                            ??_getSeconds 0064  
                                     __end_of_parseNumber 3F34  
                           ENC424J600_setTXLength@lowByte 0070  
                                       main@IPdestination 01B5  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                       ?_sevenSegmentInit 0001  
                               __end_of_entireMemoryEmpty 4858  
                                  ?_memory_txFrameRequest 0084  
                                ??_ENC424J600_setTXLength 0070  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                       __end_of_ENC424J600_getPacketCount 4C40  
                                      ??_sevenSegmentInit 0060  
                     ENC424J600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                             _INTCON3bits 000FF0  
                                               copy_data0 3B8E  
                                               copy_data1 3BAE  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 01C6  
                                  __size_of_mac_isAllZero 0030  
                                      macToString@address 0081  
                                    ipAdressToString@ones 006F  
                                    ipAdressToString@tens 0073  
                                    ??_mac_setToBroadcast 0062  
                                      __end_of_getSeconds 4C8E  
                __end_of_ethernetController_checkDeviceId 4594  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 4546  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                       _ARP_checkForEntry 3844  
                                      _ENC424J600_initSPI 4BF0  
                                      _ENC424J600_readSPI 4260  
                                  macToString@secondDigit 0094  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 1826  
                                        __size_of___lwdiv 0054  
                                      ?_ARP_checkForEntry 0067  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 009C  
                               _ethernetController_getRSV 4026  
                 __end_of_ethernetController_setLEDConfig 3C9E  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 3C10  
            ethernetController_getEtherTypeField@highByte 0080  
                                              _ANSELBbits 000F5C  
                               ENC424J600_setTXLength@len 006E  
                                   __end_of_buttonHandler 3B7A  
                                     ?_ENC424J600_initSPI 0001  
                                     ?_ENC424J600_readSPI 0060  
                                        __size_of_mac_cmp 0042  
                                 intToString@tenthousands 0085  
       ethernetController_streamFromRXBuffer@startAddress 0072  
                                             _buttonState 01E0  
                     ENC424J600_setRXTailPointer@highByte 0071  
                                     ??_ARP_checkForEntry 006D  
                                  memory_txFrameRequest@i 0096  
                             __end_of_ARP_handleNewPacket 26DA  
                                         ___lwdiv@divisor 0062  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                                __ptext10 36C4  
                                                __ptext11 4924  
                                                __ptext20 45E0  
                                                __ptext12 3844  
                                                __ptext21 3F34  
                                                __ptext13 059E  
                                                __ptext30 252C  
                                                __ptext22 4026  
                                                __ptext14 2374  
                                                __ptext31 4C7C  
                                                __ptext23 11FE  
                                                __ptext15 1D64  
                                                __ptext40 1AEC  
                                                __ptext32 4734  
                                                __ptext24 4180  
                                                __ptext16 35FC  
                                                __ptext41 4A9A  
                                                __ptext33 29D2  
                                                __ptext25 4628  
                                                __ptext17 151A  
                                                __ptext50 3E36  
                                                __ptext42 3514  
                                                __ptext34 3128  
                                                __ptext26 4B76  
                                                __ptext18 3338  
                                                __ptext51 3FAE  
                                                __ptext43 00C8  
                                                __ptext35 4C8E  
                                                __ptext27 1826  
                                                __ptext19 4B54  
                                                __ptext60 46B0  
                                                __ptext52 4770  
                                                __ptext44 47E8  
                                                __ptext36 1FAE  
                                                __ptext28 42CA  
                                                __ptext61 48F4  
                                                __ptext53 4A4A  
                                                __ptext45 4820  
                                                __ptext37 466C  
                                                __ptext29 3DB2  
                                                __ptext70 2EE0  
                                                __ptext62 46F2  
                                                __ptext54 4B0C  
                                                __ptext46 3230  
                                                __ptext38 4452  
                                                __ptext71 4594  
                                                __ptext63 3A4A  
                                                __ptext55 4952  
                                                __ptext47 38F6  
                                                __ptext39 409A  
                                                __ptext80 49D0  
                                                __ptext72 4CA0  
                                                __ptext64 4CC2  
                                                __ptext56 497C  
                                                __ptext48 4A22  
                                                __ptext81 4CE8  
                                                __ptext73 4CD0  
                                                __ptext65 4CDE  
                                                __ptext57 41F0  
                                                __ptext49 44F8  
                                                __ptext90 488E  
                                                __ptext82 4CF2  
                                                __ptext74 3D28  
                                                __ptext66 47AC  
                                                __ptext58 0A54  
                                                __ptext91 4398  
                                                __ptext83 4C40  
                                                __ptext75 410E  
                                                __ptext67 3C9E  
                                                __ptext59 48C4  
                                                __ptext92 4260  
                                                __ptext84 4A72  
                                                __ptext76 2B3E  
                                                __ptext68 3006  
                                                __ptext93 4BF0  
                                                __ptext85 4858  
                                                __ptext77 43FC  
                                                __ptext69 3C10  
                                                __ptext94 4CB2  
                                                __ptext86 4B98  
                                                __ptext78 4546  
                                                __ptext95 4332  
                                                __ptext87 4B30  
                                                __ptext79 49A6  
                                                __ptext96 4AC0  
                                                __ptext88 4CFA  
                                                __ptext97 4BB6  
                                                __ptext89 4C26  
                                                __ptext98 3426  
                                            _SSP1CON1bits 000FC6  
                   ENC424J600_enableAutoMACInsertion@temp 006E  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 04B6  
                                          _mac_setAllZero 4AC0  
                                                _ipv4_cmp 46F2  
                     __end_of_ENC424J600_setRXTailPointer 49D0  
                             _ENC424J600_setRXTailPointer 49A6  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 007C  
                                      _ipProtocolToString 45E0  
                         __end_of_ipv4_getIPSourceAddress 4CA0  
                ENC424J600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 4C7C  
                                           __size_of_main 03B0  
                                    ??_ENC424J600_initSPI 0060  
                                    ??_ENC424J600_readSPI 0062  
                                ARP_handleNewPacket@frame 00F8  
                                       ?_entireMemoryFull 0001  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                          ??_ENC424J600_setTXStartAddress 0070  
                               ARP_replyIfNeeded@senderIP 012C  
                        __size_of_ethernetController_init 0072  
                                         _checkForOverlap 3230  
                               ARP_replyIfNeeded@targetIP 0130  
                                     ?_ipProtocolToString 0060  
                                 ??_ARP_getEntryFromTable 0067  
                      __end_of_ENC424J600_readPHYRegister 3128  
                              _ENC424J600_readPHYRegister 3006  
                                      ??_entireMemoryFull 0060  
                               __end_of_ARP_checkForEntry 38F6  
                                             _parseNumber 3EB6  
                                         ARP_initTable@ip 0082  
                           ??_ENC424J600_setRXTailPointer 0070  
                                      ARP_checkForEntry@i 0075  
                                                int$flags 004D  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            ENC424J600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 48C4  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                            _SSP1STATbits 000FC7  
                                             ??_hexToChar 0060  
                              ethernet_txFrameRequest@err 00A4  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 00FC  
                          ?_ENC424J600_clearInterruptFlag 0001  
                                        _UARTTransmitText 43FC  
                                              _INTCONbits 000FF2  
                                  __size_of_updateSeconds 0026  
                                  ARP_checkForEntry@index 006B  
                                    ??_ipProtocolToString 0062  
                                  ipv4_sendFrame@ipPacket 0134  
                __end_of_ENC424J600_setERXDATAReadPointer 47E8  
               __size_of_ENC424J600_setERXDATAReadPointer 003C  
                      ??_ENC424J600_setERXDATAReadPointer 006C  
                       ?_ENC424J600_setERXDATAReadPointer 006A  
                        _ENC424J600_setERXDATAReadPointer 47AC  
                              __size_of_entireMemoryEmpty 0038  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                         __size_of_ENC424J600_setTXLength 002A  
                                  __end_of_mac_setAllZero 4AE6  
                             ?_ENC424J600_writeSingleByte 0001  
                                     _memory_txFrameClear 4B0C  
                                  ARP_replyIfNeeded@reply 0138  
                        ENC424J600_readSPI@timeoutCounter 0066  
     ipv4_streamToTransmissionBuffer@ethernetPacketLength 00BC  
                                                intlevel2 0000  
                                        ___lwmod@dividend 0060  
                          ??_ENC424J600_getInterruptFlags 0070  
                                        ___lldiv@dividend 0066  
             ethernetController_getEtherTypeField@lowByte 007F  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0076  
                        ENC424J600_writeSingleByte@opcode 006A  
                                              _RCSTA1bits 000FAB  
                                        macToString@F5802 02C8  
      ethernetController_writeDestinationMACAddress@field 0075  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 018A  
                 __end_of_ENC424J600_getNextPacketPointer 4CE8  
                __size_of_ENC424J600_getNextPacketPointer 000A  
                       ??_ENC424J600_getNextPacketPointer 0062  
                        ?_ENC424J600_getNextPacketPointer 0060  
                         _ENC424J600_getNextPacketPointer 4CDE  
                               __size_of_ipAdressToString 01EE  
                                          ARP_initTable@i 0086  
                                            macToString@i 0095  
                                            macToString@j 0097  
                ENC424J600_readPHYRegister@timeoutCounter 0079  
                 __end_of_ENC424J600_setNextPacketPointer 4CF2  
                __size_of_ENC424J600_setNextPacketPointer 000A  
                       ??_ENC424J600_setNextPacketPointer 0062  
                        ?_ENC424J600_setNextPacketPointer 0060  
                         _ENC424J600_setNextPacketPointer 4CE8  
                                    ?_memory_txFrameClear 0001  
                                     ARP_send@destination 00C7  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 059E  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                        ENC424J600_getInterruptFlags@high 0077  
                                 ??_ARP_parseFromRXBuffer 0097  
                                         _UARTTransmitInt 4B76  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
            __end_of_ENC424J600_updateReceiveStatusVector 151A  
           __size_of_ENC424J600_updateReceiveStatusVector 031C  
                  ??_ENC424J600_updateReceiveStatusVector 0065  
                   ?_ENC424J600_updateReceiveStatusVector 0060  
                    _ENC424J600_updateReceiveStatusVector 11FE  
                                   mac_setToBroadcast@mac 0060  
                                   ARP_replyIfNeeded@myIP 0134  
                               ipv4_handleNewPacket@frame 00B5  
                                   ipv4_sendFrame@oldTime 01BD  
                                        ___lldiv@quotient 006E  
                                         ___lwmod@divisor 0062  
                      ENC424J600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0064  
                                  ARP_handleNewPacket@arp 0158  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
                             ??_ENC424J600_getPacketCount 006E  
              ENC424J600_readControlRegisterUnbanked@addr 006C  
              ENC424J600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 2C7C  
                   __size_of_ethernetController_softReset 013E  
                            _ethernetController_softReset 2B3E  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 252C  
             ethernetController_getSourceMACAddress@field 006F  
                         ENC424J600_getInterruptFlags@low 0076  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 __end_of_checkForOverlap 3338  
           __end_ofethernetController_getDeviceName@F5849 7C1C  
                   ethernetController_getDeviceName@F5849 7C11  
                                          ARP_send@i_2730 00CF  
                                          ARP_send@i_2731 00D0  
                                          ARP_send@i_2729 00CE  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0077  
                                        ARP_send@ethFrame 00D1  
                                           _updateSeconds 4AE6  
                                 _sevenSegmentUpdate$2088 0013  
                              __size_of_ARP_checkForEntry 00B2  
                          ENC424J600_readPHYRegister@addr 0076  
                          ENC424J600_readPHYRegister@data 006E  
                                  _ENC424J600_setTXLength 497C  
                                  __size_of_ARP_initTable 0066  
                                      ??_ipv4_parseHeader 008E  
                                   ??_memory_txFrameClear 0060  
                          ENC424J600_readPHYRegister@temp 007F  
