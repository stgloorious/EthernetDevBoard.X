

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 22 17:51:08 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F25K50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK2,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK4,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1,group=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1,group=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1,group=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   147                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   148                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   149  0000                     
   150                           ; Version 1.45
   151                           ; Generated 16/11/2017 GMT
   152                           ; 
   153                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   154                           ; All rights reserved.
   155                           ; 
   156                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   157                           ; 
   158                           ; Redistribution and use in source and binary forms, with or without modification, are
   159                           ; permitted provided that the following conditions are met:
   160                           ; 
   161                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   162                           ;        conditions and the following disclaimer.
   163                           ; 
   164                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   165                           ;        of conditions and the following disclaimer in the documentation and/or other
   166                           ;        materials provided with the distribution.
   167                           ; 
   168                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   169                           ;        software without specific prior written permission.
   170                           ; 
   171                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   172                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   173                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   174                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   175                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   176                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   177                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   178                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   179                           ; 
   180                           ; 
   181                           ; Code-generator required, PIC18F25K50 Definitions
   182                           ; 
   183                           ; SFR Addresses
   184  0000                     
   185                           	psect	idataBANK2
   186  005DEE                     __pidataBANK2:
   187                           	opt stack 0
   188                           
   189                           ;initializer for macToString@F5948
   190  005DEE  3F                 	db	63
   191  005DEF  3F                 	db	63
   192  005DF0  3A                 	db	58
   193  005DF1  3F                 	db	63
   194  005DF2  3F                 	db	63
   195  005DF3  3A                 	db	58
   196  005DF4  3F                 	db	63
   197  005DF5  3F                 	db	63
   198  005DF6  3A                 	db	58
   199  005DF7  3F                 	db	63
   200  005DF8  3F                 	db	63
   201  005DF9  3A                 	db	58
   202  005DFA  3F                 	db	63
   203  005DFB  3F                 	db	63
   204  005DFC  3A                 	db	58
   205  005DFD  3F                 	db	63
   206  005DFE  3F                 	db	63
   207  005DFF  00                 	db	0
   208                           
   209                           ;initializer for _sevenSegCharacters
   210  005E00  3F                 	db	63
   211  005E01  06                 	db	6
   212  005E02  5B                 	db	91
   213  005E03  4F                 	db	79
   214  005E04  66                 	db	102
   215  005E05  6D                 	db	109
   216  005E06  7D                 	db	125
   217  005E07  07                 	db	7
   218  005E08  7F                 	db	127
   219  005E09  6F                 	db	111
   220  005E0A  00                 	db	0
   221  005E0B  40                 	db	64
   222                           
   223                           ;initializer for _randx
   224  005E0C  0001               	dw	1
   225  005E0E  0000               	dw	0
   226                           
   227                           ;initializer for ethernetController_softReset@F5988
   228  005E10  12                 	db	18
   229  005E11  34                 	db	52
   230                           
   231                           ;initializer for ipAdressToString@address
   232  005E12  3F                 	db	63
   233  005E13  3F                 	db	63
   234  005E14  3F                 	db	63
   235  005E15  2E                 	db	46
   236  005E16  3F                 	db	63
   237  005E17  3F                 	db	63
   238  005E18  3F                 	db	63
   239  005E19  2E                 	db	46
   240  005E1A  3F                 	db	63
   241  005E1B  3F                 	db	63
   242  005E1C  3F                 	db	63
   243  005E1D  2E                 	db	46
   244  005E1E  3F                 	db	63
   245  005E1F  3F                 	db	63
   246  005E20  3F                 	db	63
   247  005E21  00                 	db	0
   248                           
   249                           	psect	idataBANK4
   250  00611E                     __pidataBANK4:
   251                           	opt stack 0
   252                           
   253                           ;initializer for _icmpTxtMessages
   254  00611E  47                 	db	low STR_120
   255  00611F  7F                 	db	high STR_120
   256  006120  FE                 	db	low (STR_24+1)
   257  006121  7F                 	db	high (STR_24+1)
   258  006122  FE                 	db	low (STR_24+1)
   259  006123  7F                 	db	high (STR_24+1)
   260  006124  1E                 	db	low STR_123
   261  006125  7D                 	db	high STR_123
   262  006126  B1                 	db	low STR_124
   263  006127  7E                 	db	high STR_124
   264  006128  13                 	db	low STR_125
   265  006129  7E                 	db	high STR_125
   266  00612A  FE                 	db	low (STR_24+1)
   267  00612B  7F                 	db	high (STR_24+1)
   268  00612C  FE                 	db	low (STR_24+1)
   269  00612D  7F                 	db	high (STR_24+1)
   270  00612E  CD                 	db	low STR_128
   271  00612F  7E                 	db	high STR_128
   272  006130  62                 	db	low STR_129
   273  006131  7D                 	db	high STR_129
   274  006132  8C                 	db	low STR_130
   275  006133  7D                 	db	high STR_130
   276  006134  A3                 	db	low STR_131
   277  006135  7E                 	db	high STR_131
   278  006136  D0                 	db	low STR_132
   279  006137  7C                 	db	high STR_132
   280  006138  68                 	db	low STR_133
   281  006139  7F                 	db	high STR_133
   282  00613A  46                 	db	low STR_134
   283  00613B  7E                 	db	high STR_134
   284                           
   285                           	psect	mediumconst
   286  0078D2                     __pmediumconst:
   287                           	opt stack 0
   288  0078D2  00                 	db	0
   289  0078D3                     ethernetController_getDeviceName@F6000:
   290                           	opt stack 0
   291  0078D3  45                 	db	69
   292  0078D4  4E                 	db	78
   293  0078D5  43                 	db	67
   294  0078D6  34                 	db	52
   295  0078D7  32                 	db	50
   296  0078D8  34                 	db	52
   297  0078D9  4A                 	db	74
   298  0078DA  36                 	db	54
   299  0078DB  30                 	db	48
   300  0078DC  30                 	db	48
   301  0078DD  00                 	db	0
   302  0078DE                     __end_ofethernetController_getDeviceName@F6000:
   303                           	opt stack 0
   304  0000                     _ANSELC	set	3933
   305  0000                     _ANSELA	set	3931
   306  0000                     _ANSELB	set	3932
   307  0000                     _ANSELBbits	set	3932
   308  0000                     _CCPR1	set	4030
   309  0000                     _TXREG1	set	4013
   310  0000                     _SPBRG	set	4015
   311  0000                     _RCSTA1bits	set	4011
   312  0000                     _TXSTA1bits	set	4012
   313  0000                     _PORTA	set	3968
   314  0000                     _TRISA	set	3986
   315  0000                     _TRISC	set	3988
   316  0000                     _PORTC	set	3970
   317  0000                     _PIR1bits	set	3998
   318  0000                     _PORTB	set	3969
   319  0000                     _TRISB	set	3987
   320  0000                     _RCONbits	set	4048
   321  0000                     _PIE1bits	set	3997
   322  0000                     _CCP1CONbits	set	4029
   323  0000                     _T1CONbits	set	4045
   324  0000                     _T0CONbits	set	4053
   325  0000                     _INTCON3bits	set	4080
   326  0000                     _INTCONbits	set	4082
   327  0000                     _OSCCON2bits	set	4050
   328  0000                     _OSCCONbits	set	4051
   329  0000                     _SSP1BUF	set	4041
   330  0000                     _TRISBbits	set	3987
   331  0000                     _SSP1STATbits	set	4039
   332  0000                     _SSP1CON1bits	set	4038
   333  0000                     _PORTBbits	set	3969
   334  0000                     _TRMT	set	32097
   335  0000                     _RCIF	set	31989
   336  0000                     _RCIE	set	31981
   337  0000                     _RCIP	set	31997
   338  0000                     _TXIF	set	31988
   339  0078DE                     STR_25:
   340  0078DE  0A                 	db	10
   341  0078DF  0D                 	db	13
   342  0078E0  2D                 	db	45
   343  0078E1  2D                 	db	45
   344  0078E2  2D                 	db	45
   345  0078E3  2D                 	db	45
   346  0078E4  2D                 	db	45
   347  0078E5  2D                 	db	45
   348  0078E6  2D                 	db	45
   349  0078E7  2D                 	db	45
   350  0078E8  2D                 	db	45
   351  0078E9  2D                 	db	45
   352  0078EA  2D                 	db	45
   353  0078EB  2D                 	db	45
   354  0078EC  2D                 	db	45
   355  0078ED  2D                 	db	45
   356  0078EE  2D                 	db	45
   357  0078EF  2D                 	db	45
   358  0078F0  2D                 	db	45
   359  0078F1  2D                 	db	45
   360  0078F2  2D                 	db	45
   361  0078F3  2D                 	db	45
   362  0078F4  2D                 	db	45
   363  0078F5  2D                 	db	45
   364  0078F6  2D                 	db	45
   365  0078F7  2D                 	db	45
   366  0078F8  2D                 	db	45
   367  0078F9  2D                 	db	45
   368  0078FA  2D                 	db	45
   369  0078FB  2D                 	db	45
   370  0078FC  2D                 	db	45
   371  0078FD  2D                 	db	45
   372  0078FE  2D                 	db	45
   373  0078FF  2D                 	db	45
   374  007900  2D                 	db	45
   375  007901  2D                 	db	45
   376  007902  2D                 	db	45
   377  007903  2D                 	db	45
   378  007904  2D                 	db	45
   379  007905  2D                 	db	45
   380  007906  2D                 	db	45
   381  007907  2D                 	db	45
   382  007908  2D                 	db	45
   383  007909  2D                 	db	45
   384  00790A  2D                 	db	45
   385  00790B  2D                 	db	45
   386  00790C  2D                 	db	45
   387  00790D  2D                 	db	45
   388  00790E  2D                 	db	45
   389  00790F  2D                 	db	45
   390  007910  2D                 	db	45
   391  007911  2D                 	db	45
   392  007912  2D                 	db	45
   393  007913  2D                 	db	45
   394  007914  2D                 	db	45
   395  007915  2D                 	db	45
   396  007916  2D                 	db	45
   397  007917  2D                 	db	45
   398  007918  2D                 	db	45
   399  007919  0A                 	db	10
   400  00791A  0D                 	db	13
   401  00791B  00                 	db	0
   402  00791C                     STR_109:
   403  00791C  5B                 	db	91	;'['
   404  00791D  41                 	db	65	;'A'
   405  00791E  52                 	db	82	;'R'
   406  00791F  50                 	db	80	;'P'
   407  007920  5D                 	db	93	;']'
   408  007921  3A                 	db	58	;':'
   409  007922  20                 	db	32
   410  007923  4F                 	db	79	;'O'
   411  007924  70                 	db	112	;'p'
   412  007925  65                 	db	101	;'e'
   413  007926  72                 	db	114	;'r'
   414  007927  61                 	db	97	;'a'
   415  007928  74                 	db	116	;'t'
   416  007929  69                 	db	105	;'i'
   417  00792A  6F                 	db	111	;'o'
   418  00792B  6E                 	db	110	;'n'
   419  00792C  20                 	db	32
   420  00792D  77                 	db	119	;'w'
   421  00792E  61                 	db	97	;'a'
   422  00792F  73                 	db	115	;'s'
   423  007930  20                 	db	32
   424  007931  69                 	db	105	;'i'
   425  007932  6E                 	db	110	;'n'
   426  007933  74                 	db	116	;'t'
   427  007934  65                 	db	101	;'e'
   428  007935  72                 	db	114	;'r'
   429  007936  72                 	db	114	;'r'
   430  007937  75                 	db	117	;'u'
   431  007938  70                 	db	112	;'p'
   432  007939  74                 	db	116	;'t'
   433  00793A  65                 	db	101	;'e'
   434  00793B  64                 	db	100	;'d'
   435  00793C  20                 	db	32
   436  00793D  62                 	db	98	;'b'
   437  00793E  65                 	db	101	;'e'
   438  00793F  63                 	db	99	;'c'
   439  007940  61                 	db	97	;'a'
   440  007941  75                 	db	117	;'u'
   441  007942  73                 	db	115	;'s'
   442  007943  65                 	db	101	;'e'
   443  007944  20                 	db	32
   444  007945  6C                 	db	108	;'l'
   445  007946  69                 	db	105	;'i'
   446  007947  6E                 	db	110	;'n'
   447  007948  6B                 	db	107	;'k'
   448  007949  20                 	db	32
   449  00794A  77                 	db	119	;'w'
   450  00794B  61                 	db	97	;'a'
   451  00794C  73                 	db	115	;'s'
   452  00794D  20                 	db	32
   453  00794E  6C                 	db	108	;'l'
   454  00794F  6F                 	db	111	;'o'
   455  007950  73                 	db	115	;'s'
   456  007951  74                 	db	116	;'t'
   457  007952  2E                 	db	46
   458  007953  0A                 	db	10
   459  007954  0D                 	db	13
   460  007955  00                 	db	0
   461  007956                     STR_26:
   462  007956  2A                 	db	42
   463  007957  2A                 	db	42
   464  007958  2A                 	db	42
   465  007959  20                 	db	32
   466  00795A  43                 	db	67	;'C'
   467  00795B  52                 	db	82	;'R'
   468  00795C  49                 	db	73	;'I'
   469  00795D  54                 	db	84	;'T'
   470  00795E  49                 	db	73	;'I'
   471  00795F  43                 	db	67	;'C'
   472  007960  41                 	db	65	;'A'
   473  007961  4C                 	db	76	;'L'
   474  007962  20                 	db	32
   475  007963  45                 	db	69	;'E'
   476  007964  52                 	db	82	;'R'
   477  007965  52                 	db	82	;'R'
   478  007966  4F                 	db	79	;'O'
   479  007967  52                 	db	82	;'R'
   480  007968  3A                 	db	58	;':'
   481  007969  20                 	db	32
   482  00796A  52                 	db	82	;'R'
   483  00796B  58                 	db	88	;'X'
   484  00796C  20                 	db	32
   485  00796D  42                 	db	66	;'B'
   486  00796E  55                 	db	85	;'U'
   487  00796F  46                 	db	70	;'F'
   488  007970  20                 	db	32
   489  007971  4F                 	db	79	;'O'
   490  007972  56                 	db	86	;'V'
   491  007973  46                 	db	70	;'F'
   492  007974  4C                 	db	76	;'L'
   493  007975  20                 	db	32
   494  007976  43                 	db	67	;'C'
   495  007977  41                 	db	65	;'A'
   496  007978  55                 	db	85	;'U'
   497  007979  53                 	db	83	;'S'
   498  00797A  45                 	db	69	;'E'
   499  00797B  44                 	db	68	;'D'
   500  00797C  20                 	db	32
   501  00797D  53                 	db	83	;'S'
   502  00797E  59                 	db	89	;'Y'
   503  00797F  53                 	db	83	;'S'
   504  007980  54                 	db	84	;'T'
   505  007981  45                 	db	69	;'E'
   506  007982  4D                 	db	77	;'M'
   507  007983  20                 	db	32
   508  007984  52                 	db	82	;'R'
   509  007985  45                 	db	69	;'E'
   510  007986  53                 	db	83	;'S'
   511  007987  45                 	db	69	;'E'
   512  007988  54                 	db	84	;'T'
   513  007989  20                 	db	32
   514  00798A  2A                 	db	42
   515  00798B  2A                 	db	42
   516  00798C  2A                 	db	42
   517  00798D  0A                 	db	10
   518  00798E  0D                 	db	13
   519  00798F  00                 	db	0
   520  007990                     STR_27:
   521  007990  2D                 	db	45
   522  007991  2D                 	db	45
   523  007992  2D                 	db	45
   524  007993  2D                 	db	45
   525  007994  2D                 	db	45
   526  007995  2D                 	db	45
   527  007996  2D                 	db	45
   528  007997  2D                 	db	45
   529  007998  2D                 	db	45
   530  007999  2D                 	db	45
   531  00799A  2D                 	db	45
   532  00799B  2D                 	db	45
   533  00799C  2D                 	db	45
   534  00799D  2D                 	db	45
   535  00799E  2D                 	db	45
   536  00799F  2D                 	db	45
   537  0079A0  2D                 	db	45
   538  0079A1  2D                 	db	45
   539  0079A2  2D                 	db	45
   540  0079A3  2D                 	db	45
   541  0079A4  2D                 	db	45
   542  0079A5  2D                 	db	45
   543  0079A6  2D                 	db	45
   544  0079A7  2D                 	db	45
   545  0079A8  2D                 	db	45
   546  0079A9  2D                 	db	45
   547  0079AA  2D                 	db	45
   548  0079AB  2D                 	db	45
   549  0079AC  2D                 	db	45
   550  0079AD  2D                 	db	45
   551  0079AE  2D                 	db	45
   552  0079AF  2D                 	db	45
   553  0079B0  2D                 	db	45
   554  0079B1  2D                 	db	45
   555  0079B2  2D                 	db	45
   556  0079B3  2D                 	db	45
   557  0079B4  2D                 	db	45
   558  0079B5  2D                 	db	45
   559  0079B6  2D                 	db	45
   560  0079B7  2D                 	db	45
   561  0079B8  2D                 	db	45
   562  0079B9  2D                 	db	45
   563  0079BA  2D                 	db	45
   564  0079BB  2D                 	db	45
   565  0079BC  2D                 	db	45
   566  0079BD  2D                 	db	45
   567  0079BE  2D                 	db	45
   568  0079BF  2D                 	db	45
   569  0079C0  2D                 	db	45
   570  0079C1  2D                 	db	45
   571  0079C2  2D                 	db	45
   572  0079C3  2D                 	db	45
   573  0079C4  2D                 	db	45
   574  0079C5  2D                 	db	45
   575  0079C6  2D                 	db	45
   576  0079C7  2D                 	db	45
   577  0079C8  2D                 	db	45
   578  0079C9  00                 	db	0
   579  0079CA                     STR_75:
   580  0079CA  45                 	db	69	;'E'
   581  0079CB  74                 	db	116	;'t'
   582  0079CC  68                 	db	104	;'h'
   583  0079CD  65                 	db	101	;'e'
   584  0079CE  72                 	db	114	;'r'
   585  0079CF  6E                 	db	110	;'n'
   586  0079D0  65                 	db	101	;'e'
   587  0079D1  74                 	db	116	;'t'
   588  0079D2  20                 	db	32
   589  0079D3  63                 	db	99	;'c'
   590  0079D4  6F                 	db	111	;'o'
   591  0079D5  6E                 	db	110	;'n'
   592  0079D6  74                 	db	116	;'t'
   593  0079D7  72                 	db	114	;'r'
   594  0079D8  6F                 	db	111	;'o'
   595  0079D9  6C                 	db	108	;'l'
   596  0079DA  6C                 	db	108	;'l'
   597  0079DB  65                 	db	101	;'e'
   598  0079DC  72                 	db	114	;'r'
   599  0079DD  20                 	db	32
   600  0079DE  68                 	db	104	;'h'
   601  0079DF  61                 	db	97	;'a'
   602  0079E0  73                 	db	115	;'s'
   603  0079E1  20                 	db	32
   604  0079E2  72                 	db	114	;'r'
   605  0079E3  65                 	db	101	;'e'
   606  0079E4  74                 	db	116	;'t'
   607  0079E5  75                 	db	117	;'u'
   608  0079E6  72                 	db	114	;'r'
   609  0079E7  6E                 	db	110	;'n'
   610  0079E8  65                 	db	101	;'e'
   611  0079E9  64                 	db	100	;'d'
   612  0079EA  20                 	db	32
   613  0079EB  61                 	db	97	;'a'
   614  0079EC  6E                 	db	110	;'n'
   615  0079ED  20                 	db	32
   616  0079EE  75                 	db	117	;'u'
   617  0079EF  6E                 	db	110	;'n'
   618  0079F0  6B                 	db	107	;'k'
   619  0079F1  6E                 	db	110	;'n'
   620  0079F2  6F                 	db	111	;'o'
   621  0079F3  77                 	db	119	;'w'
   622  0079F4  6E                 	db	110	;'n'
   623  0079F5  20                 	db	32
   624  0079F6  64                 	db	100	;'d'
   625  0079F7  65                 	db	101	;'e'
   626  0079F8  76                 	db	118	;'v'
   627  0079F9  69                 	db	105	;'i'
   628  0079FA  63                 	db	99	;'c'
   629  0079FB  65                 	db	101	;'e'
   630  0079FC  20                 	db	32
   631  0079FD  49                 	db	73	;'I'
   632  0079FE  44                 	db	68	;'D'
   633  0079FF  2E                 	db	46
   634  007A00  00                 	db	0
   635  007A01                     STR_49:
   636  007A01  0A                 	db	10
   637  007A02  0D                 	db	13
   638  007A03  2D                 	db	45
   639  007A04  2D                 	db	45
   640  007A05  2D                 	db	45
   641  007A06  2D                 	db	45
   642  007A07  2D                 	db	45
   643  007A08  2D                 	db	45
   644  007A09  2D                 	db	45
   645  007A0A  2D                 	db	45
   646  007A0B  2D                 	db	45
   647  007A0C  2D                 	db	45
   648  007A0D  2D                 	db	45
   649  007A0E  2D                 	db	45
   650  007A0F  2D                 	db	45
   651  007A10  2D                 	db	45
   652  007A11  2D                 	db	45
   653  007A12  2D                 	db	45
   654  007A13  2D                 	db	45
   655  007A14  2D                 	db	45
   656  007A15  2D                 	db	45
   657  007A16  2D                 	db	45
   658  007A17  2D                 	db	45
   659  007A18  2D                 	db	45
   660  007A19  2D                 	db	45
   661  007A1A  2D                 	db	45
   662  007A1B  2D                 	db	45
   663  007A1C  2D                 	db	45
   664  007A1D  2D                 	db	45
   665  007A1E  2D                 	db	45
   666  007A1F  2D                 	db	45
   667  007A20  2D                 	db	45
   668  007A21  2D                 	db	45
   669  007A22  2D                 	db	45
   670  007A23  2D                 	db	45
   671  007A24  2D                 	db	45
   672  007A25  2D                 	db	45
   673  007A26  2D                 	db	45
   674  007A27  2D                 	db	45
   675  007A28  2D                 	db	45
   676  007A29  2D                 	db	45
   677  007A2A  2D                 	db	45
   678  007A2B  2D                 	db	45
   679  007A2C  2D                 	db	45
   680  007A2D  2D                 	db	45
   681  007A2E  2D                 	db	45
   682  007A2F  2D                 	db	45
   683  007A30  2D                 	db	45
   684  007A31  2D                 	db	45
   685  007A32  2D                 	db	45
   686  007A33  0A                 	db	10
   687  007A34  0D                 	db	13
   688  007A35  00                 	db	0
   689  007A36                     STR_50:
   690  007A36  2A                 	db	42
   691  007A37  2A                 	db	42
   692  007A38  2A                 	db	42
   693  007A39  20                 	db	32
   694  007A3A  43                 	db	67	;'C'
   695  007A3B  52                 	db	82	;'R'
   696  007A3C  49                 	db	73	;'I'
   697  007A3D  54                 	db	84	;'T'
   698  007A3E  49                 	db	73	;'I'
   699  007A3F  43                 	db	67	;'C'
   700  007A40  41                 	db	65	;'A'
   701  007A41  4C                 	db	76	;'L'
   702  007A42  20                 	db	32
   703  007A43  45                 	db	69	;'E'
   704  007A44  52                 	db	82	;'R'
   705  007A45  52                 	db	82	;'R'
   706  007A46  4F                 	db	79	;'O'
   707  007A47  52                 	db	82	;'R'
   708  007A48  3A                 	db	58	;':'
   709  007A49  20                 	db	32
   710  007A4A  57                 	db	87	;'W'
   711  007A4B  41                 	db	65	;'A'
   712  007A4C  54                 	db	84	;'T'
   713  007A4D  43                 	db	67	;'C'
   714  007A4E  48                 	db	72	;'H'
   715  007A4F  44                 	db	68	;'D'
   716  007A50  4F                 	db	79	;'O'
   717  007A51  47                 	db	71	;'G'
   718  007A52  20                 	db	32
   719  007A53  43                 	db	67	;'C'
   720  007A54  41                 	db	65	;'A'
   721  007A55  55                 	db	85	;'U'
   722  007A56  53                 	db	83	;'S'
   723  007A57  45                 	db	69	;'E'
   724  007A58  44                 	db	68	;'D'
   725  007A59  20                 	db	32
   726  007A5A  52                 	db	82	;'R'
   727  007A5B  45                 	db	69	;'E'
   728  007A5C  53                 	db	83	;'S'
   729  007A5D  45                 	db	69	;'E'
   730  007A5E  54                 	db	84	;'T'
   731  007A5F  20                 	db	32
   732  007A60  2A                 	db	42
   733  007A61  2A                 	db	42
   734  007A62  2A                 	db	42
   735  007A63  0A                 	db	10
   736  007A64  0D                 	db	13
   737  007A65  00                 	db	0
   738  007A66                     STR_105:
   739  007A66  5B                 	db	91	;'['
   740  007A67  41                 	db	65	;'A'
   741  007A68  52                 	db	82	;'R'
   742  007A69  50                 	db	80	;'P'
   743  007A6A  5D                 	db	93	;']'
   744  007A6B  3A                 	db	58	;':'
   745  007A6C  20                 	db	32
   746  007A6D  53                 	db	83	;'S'
   747  007A6E  65                 	db	101	;'e'
   748  007A6F  6E                 	db	110	;'n'
   749  007A70  64                 	db	100	;'d'
   750  007A71  69                 	db	105	;'i'
   751  007A72  6E                 	db	110	;'n'
   752  007A73  67                 	db	103	;'g'
   753  007A74  20                 	db	32
   754  007A75  47                 	db	71	;'G'
   755  007A76  72                 	db	114	;'r'
   756  007A77  61                 	db	97	;'a'
   757  007A78  74                 	db	116	;'t'
   758  007A79  75                 	db	117	;'u'
   759  007A7A  69                 	db	105	;'i'
   760  007A7B  74                 	db	116	;'t'
   761  007A7C  6F                 	db	111	;'o'
   762  007A7D  75                 	db	117	;'u'
   763  007A7E  73                 	db	115	;'s'
   764  007A7F  20                 	db	32
   765  007A80  41                 	db	65	;'A'
   766  007A81  52                 	db	82	;'R'
   767  007A82  50                 	db	80	;'P'
   768  007A83  20                 	db	32
   769  007A84  72                 	db	114	;'r'
   770  007A85  65                 	db	101	;'e'
   771  007A86  71                 	db	113	;'q'
   772  007A87  75                 	db	117	;'u'
   773  007A88  65                 	db	101	;'e'
   774  007A89  73                 	db	115	;'s'
   775  007A8A  74                 	db	116	;'t'
   776  007A8B  20                 	db	32
   777  007A8C  66                 	db	102	;'f'
   778  007A8D  6F                 	db	111	;'o'
   779  007A8E  72                 	db	114	;'r'
   780  007A8F  20                 	db	32
   781  007A90  00                 	db	0
   782  007A91                     STR_87:
   783  007A91  5B                 	db	91	;'['
   784  007A92  49                 	db	73	;'I'
   785  007A93  6E                 	db	110	;'n'
   786  007A94  76                 	db	118	;'v'
   787  007A95  61                 	db	97	;'a'
   788  007A96  6C                 	db	108	;'l'
   789  007A97  69                 	db	105	;'i'
   790  007A98  64                 	db	100	;'d'
   791  007A99  20                 	db	32
   792  007A9A  41                 	db	65	;'A'
   793  007A9B  52                 	db	82	;'R'
   794  007A9C  50                 	db	80	;'P'
   795  007A9D  20                 	db	32
   796  007A9E  4D                 	db	77	;'M'
   797  007A9F  65                 	db	101	;'e'
   798  007AA0  73                 	db	115	;'s'
   799  007AA1  73                 	db	115	;'s'
   800  007AA2  61                 	db	97	;'a'
   801  007AA3  67                 	db	103	;'g'
   802  007AA4  65                 	db	101	;'e'
   803  007AA5  20                 	db	32
   804  007AA6  77                 	db	119	;'w'
   805  007AA7  61                 	db	97	;'a'
   806  007AA8  73                 	db	115	;'s'
   807  007AA9  20                 	db	32
   808  007AAA  64                 	db	100	;'d'
   809  007AAB  69                 	db	105	;'i'
   810  007AAC  73                 	db	115	;'s'
   811  007AAD  63                 	db	99	;'c'
   812  007AAE  61                 	db	97	;'a'
   813  007AAF  72                 	db	114	;'r'
   814  007AB0  64                 	db	100	;'d'
   815  007AB1  65                 	db	101	;'e'
   816  007AB2  64                 	db	100	;'d'
   817  007AB3  2E                 	db	46
   818  007AB4  5D                 	db	93	;']'
   819  007AB5  0D                 	db	13
   820  007AB6  0A                 	db	10
   821  007AB7  00                 	db	0
   822  007AB8                     STR_111:
   823  007AB8  5B                 	db	91	;'['
   824  007AB9  41                 	db	65	;'A'
   825  007ABA  52                 	db	82	;'R'
   826  007ABB  50                 	db	80	;'P'
   827  007ABC  5D                 	db	93	;']'
   828  007ABD  3A                 	db	58	;':'
   829  007ABE  20                 	db	32
   830  007ABF  43                 	db	67	;'C'
   831  007AC0  6F                 	db	111	;'o'
   832  007AC1  6E                 	db	110	;'n'
   833  007AC2  66                 	db	102	;'f'
   834  007AC3  6C                 	db	108	;'l'
   835  007AC4  69                 	db	105	;'i'
   836  007AC5  63                 	db	99	;'c'
   837  007AC6  74                 	db	116	;'t'
   838  007AC7  20                 	db	32
   839  007AC8  64                 	db	100	;'d'
   840  007AC9  75                 	db	117	;'u'
   841  007ACA  72                 	db	114	;'r'
   842  007ACB  69                 	db	105	;'i'
   843  007ACC  6E                 	db	110	;'n'
   844  007ACD  67                 	db	103	;'g'
   845  007ACE  20                 	db	32
   846  007ACF  61                 	db	97	;'a'
   847  007AD0  6E                 	db	110	;'n'
   848  007AD1  6E                 	db	110	;'n'
   849  007AD2  6F                 	db	111	;'o'
   850  007AD3  75                 	db	117	;'u'
   851  007AD4  6E                 	db	110	;'n'
   852  007AD5  63                 	db	99	;'c'
   853  007AD6  65                 	db	101	;'e'
   854  007AD7  6D                 	db	109	;'m'
   855  007AD8  65                 	db	101	;'e'
   856  007AD9  6E                 	db	110	;'n'
   857  007ADA  74                 	db	116	;'t'
   858  007ADB  2E                 	db	46
   859  007ADC  0A                 	db	10
   860  007ADD  0D                 	db	13
   861  007ADE  00                 	db	0
   862  007ADF                     STR_118:
   863  007ADF  5B                 	db	91	;'['
   864  007AE0  41                 	db	65	;'A'
   865  007AE1  52                 	db	82	;'R'
   866  007AE2  50                 	db	80	;'P'
   867  007AE3  5D                 	db	93	;']'
   868  007AE4  3A                 	db	58	;':'
   869  007AE5  20                 	db	32
   870  007AE6  54                 	db	84	;'T'
   871  007AE7  61                 	db	97	;'a'
   872  007AE8  62                 	db	98	;'b'
   873  007AE9  6C                 	db	108	;'l'
   874  007AEA  65                 	db	101	;'e'
   875  007AEB  20                 	db	32
   876  007AEC  77                 	db	119	;'w'
   877  007AED  61                 	db	97	;'a'
   878  007AEE  73                 	db	115	;'s'
   879  007AEF  20                 	db	32
   880  007AF0  72                 	db	114	;'r'
   881  007AF1  65                 	db	101	;'e'
   882  007AF2  73                 	db	115	;'s'
   883  007AF3  65                 	db	101	;'e'
   884  007AF4  74                 	db	116	;'t'
   885  007AF5  20                 	db	32
   886  007AF6  73                 	db	115	;'s'
   887  007AF7  75                 	db	117	;'u'
   888  007AF8  63                 	db	99	;'c'
   889  007AF9  63                 	db	99	;'c'
   890  007AFA  65                 	db	101	;'e'
   891  007AFB  73                 	db	115	;'s'
   892  007AFC  73                 	db	115	;'s'
   893  007AFD  66                 	db	102	;'f'
   894  007AFE  75                 	db	117	;'u'
   895  007AFF  6C                 	db	108	;'l'
   896  007B00  6C                 	db	108	;'l'
   897  007B01  79                 	db	121	;'y'
   898  007B02  2E                 	db	46
   899  007B03  0A                 	db	10
   900  007B04  0D                 	db	13
   901  007B05  00                 	db	0
   902  007B06                     STR_74:
   903  007B06  45                 	db	69	;'E'
   904  007B07  74                 	db	116	;'t'
   905  007B08  68                 	db	104	;'h'
   906  007B09  65                 	db	101	;'e'
   907  007B0A  72                 	db	114	;'r'
   908  007B0B  6E                 	db	110	;'n'
   909  007B0C  65                 	db	101	;'e'
   910  007B0D  74                 	db	116	;'t'
   911  007B0E  20                 	db	32
   912  007B0F  63                 	db	99	;'c'
   913  007B10  6F                 	db	111	;'o'
   914  007B11  6E                 	db	110	;'n'
   915  007B12  74                 	db	116	;'t'
   916  007B13  72                 	db	114	;'r'
   917  007B14  6F                 	db	111	;'o'
   918  007B15  6C                 	db	108	;'l'
   919  007B16  6C                 	db	108	;'l'
   920  007B17  65                 	db	101	;'e'
   921  007B18  72                 	db	114	;'r'
   922  007B19  20                 	db	32
   923  007B1A  69                 	db	105	;'i'
   924  007B1B  73                 	db	115	;'s'
   925  007B1C  20                 	db	32
   926  007B1D  75                 	db	117	;'u'
   927  007B1E  6E                 	db	110	;'n'
   928  007B1F  72                 	db	114	;'r'
   929  007B20  65                 	db	101	;'e'
   930  007B21  73                 	db	115	;'s'
   931  007B22  70                 	db	112	;'p'
   932  007B23  6F                 	db	111	;'o'
   933  007B24  6E                 	db	110	;'n'
   934  007B25  73                 	db	115	;'s'
   935  007B26  69                 	db	105	;'i'
   936  007B27  76                 	db	118	;'v'
   937  007B28  65                 	db	101	;'e'
   938  007B29  2E                 	db	46
   939  007B2A  00                 	db	0
   940  007B2B                     STR_40:
   941  007B2B  5B                 	db	91	;'['
   942  007B2C  49                 	db	73	;'I'
   943  007B2D  50                 	db	80	;'P'
   944  007B2E  76                 	db	118	;'v'
   945  007B2F  34                 	db	52	;'4'
   946  007B30  5D                 	db	93	;']'
   947  007B31  3A                 	db	58	;':'
   948  007B32  20                 	db	32
   949  007B33  41                 	db	65	;'A'
   950  007B34  64                 	db	100	;'d'
   951  007B35  64                 	db	100	;'d'
   952  007B36  72                 	db	114	;'r'
   953  007B37  65                 	db	101	;'e'
   954  007B38  73                 	db	115	;'s'
   955  007B39  73                 	db	115	;'s'
   956  007B3A  20                 	db	32
   957  007B3B  63                 	db	99	;'c'
   958  007B3C  6F                 	db	111	;'o'
   959  007B3D  6E                 	db	110	;'n'
   960  007B3E  66                 	db	102	;'f'
   961  007B3F  6C                 	db	108	;'l'
   962  007B40  69                 	db	105	;'i'
   963  007B41  63                 	db	99	;'c'
   964  007B42  74                 	db	116	;'t'
   965  007B43  20                 	db	32
   966  007B44  64                 	db	100	;'d'
   967  007B45  65                 	db	101	;'e'
   968  007B46  74                 	db	116	;'t'
   969  007B47  65                 	db	101	;'e'
   970  007B48  63                 	db	99	;'c'
   971  007B49  74                 	db	116	;'t'
   972  007B4A  65                 	db	101	;'e'
   973  007B4B  64                 	db	100	;'d'
   974  007B4C  2E                 	db	46
   975  007B4D  0A                 	db	10
   976  007B4E  0D                 	db	13
   977  007B4F  00                 	db	0
   978  007B50                     STR_43:
   979  007B50  5B                 	db	91	;'['
   980  007B51  49                 	db	73	;'I'
   981  007B52  50                 	db	80	;'P'
   982  007B53  76                 	db	118	;'v'
   983  007B54  34                 	db	52	;'4'
   984  007B55  5D                 	db	93	;']'
   985  007B56  3A                 	db	58	;':'
   986  007B57  20                 	db	32
   987  007B58  53                 	db	83	;'S'
   988  007B59  65                 	db	101	;'e'
   989  007B5A  74                 	db	116	;'t'
   990  007B5B  74                 	db	116	;'t'
   991  007B5C  69                 	db	105	;'i'
   992  007B5D  6E                 	db	110	;'n'
   993  007B5E  67                 	db	103	;'g'
   994  007B5F  20                 	db	32
   995  007B60  49                 	db	73	;'I'
   996  007B61  50                 	db	80	;'P'
   997  007B62  76                 	db	118	;'v'
   998  007B63  34                 	db	52	;'4'
   999  007B64  20                 	db	32
  1000  007B65  53                 	db	83	;'S'
  1001  007B66  72                 	db	114	;'r'
  1002  007B67  63                 	db	99	;'c'
  1003  007B68  20                 	db	32
  1004  007B69  41                 	db	65	;'A'
  1005  007B6A  64                 	db	100	;'d'
  1006  007B6B  64                 	db	100	;'d'
  1007  007B6C  72                 	db	114	;'r'
  1008  007B6D  65                 	db	101	;'e'
  1009  007B6E  73                 	db	115	;'s'
  1010  007B6F  73                 	db	115	;'s'
  1011  007B70  20                 	db	32
  1012  007B71  74                 	db	116	;'t'
  1013  007B72  6F                 	db	111	;'o'
  1014  007B73  20                 	db	32
  1015  007B74  00                 	db	0
  1016  007B75                     STR_108:
  1017  007B75  5B                 	db	91	;'['
  1018  007B76  41                 	db	65	;'A'
  1019  007B77  52                 	db	82	;'R'
  1020  007B78  50                 	db	80	;'P'
  1021  007B79  5D                 	db	93	;']'
  1022  007B7A  3A                 	db	58	;':'
  1023  007B7B  20                 	db	32
  1024  007B7C  4E                 	db	78	;'N'
  1025  007B7D  6F                 	db	111	;'o'
  1026  007B7E  62                 	db	98	;'b'
  1027  007B7F  6F                 	db	111	;'o'
  1028  007B80  64                 	db	100	;'d'
  1029  007B81  79                 	db	121	;'y'
  1030  007B82  20                 	db	32
  1031  007B83  61                 	db	97	;'a'
  1032  007B84  6E                 	db	110	;'n'
  1033  007B85  73                 	db	115	;'s'
  1034  007B86  77                 	db	119	;'w'
  1035  007B87  65                 	db	101	;'e'
  1036  007B88  72                 	db	114	;'r'
  1037  007B89  65                 	db	101	;'e'
  1038  007B8A  64                 	db	100	;'d'
  1039  007B8B  20                 	db	32
  1040  007B8C  74                 	db	116	;'t'
  1041  007B8D  6F                 	db	111	;'o'
  1042  007B8E  20                 	db	32
  1043  007B8F  70                 	db	112	;'p'
  1044  007B90  72                 	db	114	;'r'
  1045  007B91  6F                 	db	111	;'o'
  1046  007B92  62                 	db	98	;'b'
  1047  007B93  65                 	db	101	;'e'
  1048  007B94  73                 	db	115	;'s'
  1049  007B95  2E                 	db	46
  1050  007B96  0A                 	db	10
  1051  007B97  0D                 	db	13
  1052  007B98  00                 	db	0
  1053  007B99                     STR_110:
  1054  007B99  5B                 	db	91	;'['
  1055  007B9A  41                 	db	65	;'A'
  1056  007B9B  52                 	db	82	;'R'
  1057  007B9C  50                 	db	80	;'P'
  1058  007B9D  5D                 	db	93	;']'
  1059  007B9E  3A                 	db	58	;':'
  1060  007B9F  20                 	db	32
  1061  007BA0  41                 	db	65	;'A'
  1062  007BA1  6E                 	db	110	;'n'
  1063  007BA2  20                 	db	32
  1064  007BA3  75                 	db	117	;'u'
  1065  007BA4  6E                 	db	110	;'n'
  1066  007BA5  6B                 	db	107	;'k'
  1067  007BA6  6E                 	db	110	;'n'
  1068  007BA7  6F                 	db	111	;'o'
  1069  007BA8  77                 	db	119	;'w'
  1070  007BA9  6E                 	db	110	;'n'
  1071  007BAA  20                 	db	32
  1072  007BAB  65                 	db	101	;'e'
  1073  007BAC  72                 	db	114	;'r'
  1074  007BAD  72                 	db	114	;'r'
  1075  007BAE  6F                 	db	111	;'o'
  1076  007BAF  72                 	db	114	;'r'
  1077  007BB0  20                 	db	32
  1078  007BB1  6F                 	db	111	;'o'
  1079  007BB2  63                 	db	99	;'c'
  1080  007BB3  63                 	db	99	;'c'
  1081  007BB4  75                 	db	117	;'u'
  1082  007BB5  72                 	db	114	;'r'
  1083  007BB6  65                 	db	101	;'e'
  1084  007BB7  64                 	db	100	;'d'
  1085  007BB8  2E                 	db	46
  1086  007BB9  0A                 	db	10
  1087  007BBA  0D                 	db	13
  1088  007BBB  00                 	db	0
  1089  007BBC                     STR_107:
  1090  007BBC  5B                 	db	91	;'['
  1091  007BBD  41                 	db	65	;'A'
  1092  007BBE  52                 	db	82	;'R'
  1093  007BBF  50                 	db	80	;'P'
  1094  007BC0  5D                 	db	93	;']'
  1095  007BC1  3A                 	db	58	;':'
  1096  007BC2  20                 	db	32
  1097  007BC3  43                 	db	67	;'C'
  1098  007BC4  6F                 	db	111	;'o'
  1099  007BC5  6E                 	db	110	;'n'
  1100  007BC6  66                 	db	102	;'f'
  1101  007BC7  6C                 	db	108	;'l'
  1102  007BC8  69                 	db	105	;'i'
  1103  007BC9  63                 	db	99	;'c'
  1104  007BCA  74                 	db	116	;'t'
  1105  007BCB  20                 	db	32
  1106  007BCC  64                 	db	100	;'d'
  1107  007BCD  75                 	db	117	;'u'
  1108  007BCE  72                 	db	114	;'r'
  1109  007BCF  69                 	db	105	;'i'
  1110  007BD0  6E                 	db	110	;'n'
  1111  007BD1  67                 	db	103	;'g'
  1112  007BD2  20                 	db	32
  1113  007BD3  70                 	db	112	;'p'
  1114  007BD4  72                 	db	114	;'r'
  1115  007BD5  6F                 	db	111	;'o'
  1116  007BD6  62                 	db	98	;'b'
  1117  007BD7  69                 	db	105	;'i'
  1118  007BD8  6E                 	db	110	;'n'
  1119  007BD9  67                 	db	103	;'g'
  1120  007BDA  2E                 	db	46
  1121  007BDB  0A                 	db	10
  1122  007BDC  0D                 	db	13
  1123  007BDD  00                 	db	0
  1124  007BDE                     STR_76:
  1125  007BDE  49                 	db	73	;'I'
  1126  007BDF  50                 	db	80	;'P'
  1127  007BE0  20                 	db	32
  1128  007BE1  61                 	db	97	;'a'
  1129  007BE2  64                 	db	100	;'d'
  1130  007BE3  64                 	db	100	;'d'
  1131  007BE4  72                 	db	114	;'r'
  1132  007BE5  65                 	db	101	;'e'
  1133  007BE6  73                 	db	115	;'s'
  1134  007BE7  73                 	db	115	;'s'
  1135  007BE8  20                 	db	32
  1136  007BE9  63                 	db	99	;'c'
  1137  007BEA  6F                 	db	111	;'o'
  1138  007BEB  75                 	db	117	;'u'
  1139  007BEC  6C                 	db	108	;'l'
  1140  007BED  64                 	db	100	;'d'
  1141  007BEE  20                 	db	32
  1142  007BEF  6E                 	db	110	;'n'
  1143  007BF0  6F                 	db	111	;'o'
  1144  007BF1  74                 	db	116	;'t'
  1145  007BF2  20                 	db	32
  1146  007BF3  62                 	db	98	;'b'
  1147  007BF4  65                 	db	101	;'e'
  1148  007BF5  20                 	db	32
  1149  007BF6  72                 	db	114	;'r'
  1150  007BF7  65                 	db	101	;'e'
  1151  007BF8  73                 	db	115	;'s'
  1152  007BF9  6F                 	db	111	;'o'
  1153  007BFA  6C                 	db	108	;'l'
  1154  007BFB  76                 	db	118	;'v'
  1155  007BFC  65                 	db	101	;'e'
  1156  007BFD  64                 	db	100	;'d'
  1157  007BFE  2E                 	db	46
  1158  007BFF  00                 	db	0
  1159  007C00                     STR_112:
  1160  007C00  5B                 	db	91	;'['
  1161  007C01  41                 	db	65	;'A'
  1162  007C02  52                 	db	82	;'R'
  1163  007C03  50                 	db	80	;'P'
  1164  007C04  5D                 	db	93	;']'
  1165  007C05  3A                 	db	58	;':'
  1166  007C06  20                 	db	32
  1167  007C07  41                 	db	65	;'A'
  1168  007C08  6C                 	db	108	;'l'
  1169  007C09  6C                 	db	108	;'l'
  1170  007C0A  20                 	db	32
  1171  007C0B  61                 	db	97	;'a'
  1172  007C0C  6E                 	db	110	;'n'
  1173  007C0D  6E                 	db	110	;'n'
  1174  007C0E  6F                 	db	111	;'o'
  1175  007C0F  75                 	db	117	;'u'
  1176  007C10  6E                 	db	110	;'n'
  1177  007C11  63                 	db	99	;'c'
  1178  007C12  65                 	db	101	;'e'
  1179  007C13  6D                 	db	109	;'m'
  1180  007C14  65                 	db	101	;'e'
  1181  007C15  6E                 	db	110	;'n'
  1182  007C16  74                 	db	116	;'t'
  1183  007C17  73                 	db	115	;'s'
  1184  007C18  20                 	db	32
  1185  007C19  73                 	db	115	;'s'
  1186  007C1A  65                 	db	101	;'e'
  1187  007C1B  6E                 	db	110	;'n'
  1188  007C1C  74                 	db	116	;'t'
  1189  007C1D  2E                 	db	46
  1190  007C1E  0A                 	db	10
  1191  007C1F  0D                 	db	13
  1192  007C20  00                 	db	0
  1193  007C21                     STR_114:
  1194  007C21  5B                 	db	91	;'['
  1195  007C22  41                 	db	65	;'A'
  1196  007C23  52                 	db	82	;'R'
  1197  007C24  50                 	db	80	;'P'
  1198  007C25  5D                 	db	93	;']'
  1199  007C26  3A                 	db	58	;':'
  1200  007C27  20                 	db	32
  1201  007C28  4E                 	db	78	;'N'
  1202  007C29  65                 	db	101	;'e'
  1203  007C2A  77                 	db	119	;'w'
  1204  007C2B  20                 	db	32
  1205  007C2C  65                 	db	101	;'e'
  1206  007C2D  6E                 	db	110	;'n'
  1207  007C2E  74                 	db	116	;'t'
  1208  007C2F  72                 	db	114	;'r'
  1209  007C30  79                 	db	121	;'y'
  1210  007C31  20                 	db	32
  1211  007C32  63                 	db	99	;'c'
  1212  007C33  72                 	db	114	;'r'
  1213  007C34  65                 	db	101	;'e'
  1214  007C35  61                 	db	97	;'a'
  1215  007C36  74                 	db	116	;'t'
  1216  007C37  65                 	db	101	;'e'
  1217  007C38  64                 	db	100	;'d'
  1218  007C39  20                 	db	32
  1219  007C3A  66                 	db	102	;'f'
  1220  007C3B  6F                 	db	111	;'o'
  1221  007C3C  72                 	db	114	;'r'
  1222  007C3D  20                 	db	32
  1223  007C3E  00                 	db	0
  1224  007C3F                     STR_70:
  1225  007C3F  20                 	db	32
  1226  007C40  45                 	db	69	;'E'
  1227  007C41  54                 	db	84	;'T'
  1228  007C42  48                 	db	72	;'H'
  1229  007C43  45                 	db	69	;'E'
  1230  007C44  52                 	db	82	;'R'
  1231  007C45  4E                 	db	78	;'N'
  1232  007C46  45                 	db	69	;'E'
  1233  007C47  54                 	db	84	;'T'
  1234  007C48  20                 	db	32
  1235  007C49  43                 	db	67	;'C'
  1236  007C4A  4F                 	db	79	;'O'
  1237  007C4B  4E                 	db	78	;'N'
  1238  007C4C  54                 	db	84	;'T'
  1239  007C4D  52                 	db	82	;'R'
  1240  007C4E  4F                 	db	79	;'O'
  1241  007C4F  4C                 	db	76	;'L'
  1242  007C50  4C                 	db	76	;'L'
  1243  007C51  45                 	db	69	;'E'
  1244  007C52  52                 	db	82	;'R'
  1245  007C53  20                 	db	32
  1246  007C54  4D                 	db	77	;'M'
  1247  007C55  4F                 	db	79	;'O'
  1248  007C56  44                 	db	68	;'D'
  1249  007C57  55                 	db	85	;'U'
  1250  007C58  4C                 	db	76	;'L'
  1251  007C59  45                 	db	69	;'E'
  1252  007C5A  3A                 	db	58	;':'
  1253  007C5B  20                 	db	32
  1254  007C5C  00                 	db	0
  1255  007C5D                     STR_77:
  1256  007C5D  41                 	db	65	;'A'
  1257  007C5E  6E                 	db	110	;'n'
  1258  007C5F  20                 	db	32
  1259  007C60  75                 	db	117	;'u'
  1260  007C61  6E                 	db	110	;'n'
  1261  007C62  6B                 	db	107	;'k'
  1262  007C63  6E                 	db	110	;'n'
  1263  007C64  6F                 	db	111	;'o'
  1264  007C65  77                 	db	119	;'w'
  1265  007C66  6E                 	db	110	;'n'
  1266  007C67  20                 	db	32
  1267  007C68  65                 	db	101	;'e'
  1268  007C69  72                 	db	114	;'r'
  1269  007C6A  72                 	db	114	;'r'
  1270  007C6B  6F                 	db	111	;'o'
  1271  007C6C  72                 	db	114	;'r'
  1272  007C6D  20                 	db	32
  1273  007C6E  68                 	db	104	;'h'
  1274  007C6F  61                 	db	97	;'a'
  1275  007C70  73                 	db	115	;'s'
  1276  007C71  20                 	db	32
  1277  007C72  6F                 	db	111	;'o'
  1278  007C73  63                 	db	99	;'c'
  1279  007C74  63                 	db	99	;'c'
  1280  007C75  75                 	db	117	;'u'
  1281  007C76  72                 	db	114	;'r'
  1282  007C77  65                 	db	101	;'e'
  1283  007C78  64                 	db	100	;'d'
  1284  007C79  2E                 	db	46
  1285  007C7A  00                 	db	0
  1286  007C7B                     STR_66:
  1287  007C7B  63                 	db	99	;'c'
  1288  007C7C  6F                 	db	111	;'o'
  1289  007C7D  6E                 	db	110	;'n'
  1290  007C7E  6E                 	db	110	;'n'
  1291  007C7F  65                 	db	101	;'e'
  1292  007C80  63                 	db	99	;'c'
  1293  007C81  74                 	db	116	;'t'
  1294  007C82  69                 	db	105	;'i'
  1295  007C83  6F                 	db	111	;'o'
  1296  007C84  6E                 	db	110	;'n'
  1297  007C85  20                 	db	32
  1298  007C86  69                 	db	105	;'i'
  1299  007C87  73                 	db	115	;'s'
  1300  007C88  20                 	db	32
  1301  007C89  48                 	db	72	;'H'
  1302  007C8A  61                 	db	97	;'a'
  1303  007C8B  6C                 	db	108	;'l'
  1304  007C8C  66                 	db	102	;'f'
  1305  007C8D  20                 	db	32
  1306  007C8E  44                 	db	68	;'D'
  1307  007C8F  75                 	db	117	;'u'
  1308  007C90  70                 	db	112	;'p'
  1309  007C91  6C                 	db	108	;'l'
  1310  007C92  65                 	db	101	;'e'
  1311  007C93  78                 	db	120	;'x'
  1312  007C94  2E                 	db	46
  1313  007C95  0A                 	db	10
  1314  007C96  0D                 	db	13
  1315  007C97  00                 	db	0
  1316  007C98                     STR_67:
  1317  007C98  63                 	db	99	;'c'
  1318  007C99  6F                 	db	111	;'o'
  1319  007C9A  6E                 	db	110	;'n'
  1320  007C9B  6E                 	db	110	;'n'
  1321  007C9C  65                 	db	101	;'e'
  1322  007C9D  63                 	db	99	;'c'
  1323  007C9E  74                 	db	116	;'t'
  1324  007C9F  69                 	db	105	;'i'
  1325  007CA0  6F                 	db	111	;'o'
  1326  007CA1  6E                 	db	110	;'n'
  1327  007CA2  20                 	db	32
  1328  007CA3  69                 	db	105	;'i'
  1329  007CA4  73                 	db	115	;'s'
  1330  007CA5  20                 	db	32
  1331  007CA6  46                 	db	70	;'F'
  1332  007CA7  75                 	db	117	;'u'
  1333  007CA8  6C                 	db	108	;'l'
  1334  007CA9  6C                 	db	108	;'l'
  1335  007CAA  20                 	db	32
  1336  007CAB  44                 	db	68	;'D'
  1337  007CAC  75                 	db	117	;'u'
  1338  007CAD  70                 	db	112	;'p'
  1339  007CAE  6C                 	db	108	;'l'
  1340  007CAF  65                 	db	101	;'e'
  1341  007CB0  78                 	db	120	;'x'
  1342  007CB1  2E                 	db	46
  1343  007CB2  0A                 	db	10
  1344  007CB3  0D                 	db	13
  1345  007CB4  00                 	db	0
  1346  007CB5                     STR_36:
  1347  007CB5  5B                 	db	91	;'['
  1348  007CB6  49                 	db	73	;'I'
  1349  007CB7  50                 	db	80	;'P'
  1350  007CB8  76                 	db	118	;'v'
  1351  007CB9  34                 	db	52	;'4'
  1352  007CBA  5D                 	db	93	;']'
  1353  007CBB  3A                 	db	58	;':'
  1354  007CBC  20                 	db	32
  1355  007CBD  46                 	db	70	;'F'
  1356  007CBE  61                 	db	97	;'a'
  1357  007CBF  69                 	db	105	;'i'
  1358  007CC0  6C                 	db	108	;'l'
  1359  007CC1  65                 	db	101	;'e'
  1360  007CC2  64                 	db	100	;'d'
  1361  007CC3  20                 	db	32
  1362  007CC4  74                 	db	116	;'t'
  1363  007CC5  6F                 	db	111	;'o'
  1364  007CC6  20                 	db	32
  1365  007CC7  72                 	db	114	;'r'
  1366  007CC8  65                 	db	101	;'e'
  1367  007CC9  73                 	db	115	;'s'
  1368  007CCA  6F                 	db	111	;'o'
  1369  007CCB  6C                 	db	108	;'l'
  1370  007CCC  76                 	db	118	;'v'
  1371  007CCD  65                 	db	101	;'e'
  1372  007CCE  20                 	db	32
  1373  007CCF  00                 	db	0
  1374  007CD0                     STR_132:
  1375  007CD0  50                 	db	80	;'P'
  1376  007CD1  41                 	db	65	;'A'
  1377  007CD2  52                 	db	82	;'R'
  1378  007CD3  41                 	db	65	;'A'
  1379  007CD4  4D                 	db	77	;'M'
  1380  007CD5  20                 	db	32
  1381  007CD6  50                 	db	80	;'P'
  1382  007CD7  52                 	db	82	;'R'
  1383  007CD8  4F                 	db	79	;'O'
  1384  007CD9  42                 	db	66	;'B'
  1385  007CDA  4C                 	db	76	;'L'
  1386  007CDB  45                 	db	69	;'E'
  1387  007CDC  4D                 	db	77	;'M'
  1388  007CDD  3A                 	db	58	;':'
  1389  007CDE  20                 	db	32
  1390  007CDF  42                 	db	66	;'B'
  1391  007CE0  41                 	db	65	;'A'
  1392  007CE1  44                 	db	68	;'D'
  1393  007CE2  20                 	db	32
  1394  007CE3  48                 	db	72	;'H'
  1395  007CE4  45                 	db	69	;'E'
  1396  007CE5  41                 	db	65	;'A'
  1397  007CE6  44                 	db	68	;'D'
  1398  007CE7  45                 	db	69	;'E'
  1399  007CE8  52                 	db	82	;'R'
  1400  007CE9  00                 	db	0
  1401  007CEA                     STR_102:
  1402  007CEA  5B                 	db	91	;'['
  1403  007CEB  41                 	db	65	;'A'
  1404  007CEC  52                 	db	82	;'R'
  1405  007CED  50                 	db	80	;'P'
  1406  007CEE  5D                 	db	93	;']'
  1407  007CEF  3A                 	db	58	;':'
  1408  007CF0  20                 	db	32
  1409  007CF1  53                 	db	83	;'S'
  1410  007CF2  65                 	db	101	;'e'
  1411  007CF3  6E                 	db	110	;'n'
  1412  007CF4  64                 	db	100	;'d'
  1413  007CF5  69                 	db	105	;'i'
  1414  007CF6  6E                 	db	110	;'n'
  1415  007CF7  67                 	db	103	;'g'
  1416  007CF8  20                 	db	32
  1417  007CF9  50                 	db	80	;'P'
  1418  007CFA  72                 	db	114	;'r'
  1419  007CFB  6F                 	db	111	;'o'
  1420  007CFC  62                 	db	98	;'b'
  1421  007CFD  65                 	db	101	;'e'
  1422  007CFE  20                 	db	32
  1423  007CFF  66                 	db	102	;'f'
  1424  007D00  6F                 	db	111	;'o'
  1425  007D01  72                 	db	114	;'r'
  1426  007D02  20                 	db	32
  1427  007D03  00                 	db	0
  1428  007D04                     STR_53:
  1429  007D04  0A                 	db	10
  1430  007D05  0D                 	db	13
  1431  007D06  46                 	db	70	;'F'
  1432  007D07  49                 	db	73	;'I'
  1433  007D08  52                 	db	82	;'R'
  1434  007D09  4D                 	db	77	;'M'
  1435  007D0A  57                 	db	87	;'W'
  1436  007D0B  41                 	db	65	;'A'
  1437  007D0C  52                 	db	82	;'R'
  1438  007D0D  45                 	db	69	;'E'
  1439  007D0E  20                 	db	32
  1440  007D0F  42                 	db	66	;'B'
  1441  007D10  55                 	db	85	;'U'
  1442  007D11  49                 	db	73	;'I'
  1443  007D12  4C                 	db	76	;'L'
  1444  007D13  44                 	db	68	;'D'
  1445  007D14  20                 	db	32
  1446  007D15  44                 	db	68	;'D'
  1447  007D16  41                 	db	65	;'A'
  1448  007D17  54                 	db	84	;'T'
  1449  007D18  45                 	db	69	;'E'
  1450  007D19  20                 	db	32
  1451  007D1A  49                 	db	73	;'I'
  1452  007D1B  53                 	db	83	;'S'
  1453  007D1C  20                 	db	32
  1454  007D1D  00                 	db	0
  1455  007D1E                     STR_123:
  1456  007D1E  44                 	db	68	;'D'
  1457  007D1F  45                 	db	69	;'E'
  1458  007D20  53                 	db	83	;'S'
  1459  007D21  54                 	db	84	;'T'
  1460  007D22  49                 	db	73	;'I'
  1461  007D23  4E                 	db	78	;'N'
  1462  007D24  41                 	db	65	;'A'
  1463  007D25  54                 	db	84	;'T'
  1464  007D26  49                 	db	73	;'I'
  1465  007D27  4F                 	db	79	;'O'
  1466  007D28  4E                 	db	78	;'N'
  1467  007D29  20                 	db	32
  1468  007D2A  55                 	db	85	;'U'
  1469  007D2B  4E                 	db	78	;'N'
  1470  007D2C  52                 	db	82	;'R'
  1471  007D2D  45                 	db	69	;'E'
  1472  007D2E  41                 	db	65	;'A'
  1473  007D2F  43                 	db	67	;'C'
  1474  007D30  48                 	db	72	;'H'
  1475  007D31  41                 	db	65	;'A'
  1476  007D32  42                 	db	66	;'B'
  1477  007D33  4C                 	db	76	;'L'
  1478  007D34  45                 	db	69	;'E'
  1479  007D35  00                 	db	0
  1480  007D36                     STR_59:
  1481  007D36  53                 	db	83	;'S'
  1482  007D37  6F                 	db	111	;'o'
  1483  007D38  75                 	db	117	;'u'
  1484  007D39  72                 	db	114	;'r'
  1485  007D3A  63                 	db	99	;'c'
  1486  007D3B  65                 	db	101	;'e'
  1487  007D3C  20                 	db	32
  1488  007D3D  4D                 	db	77	;'M'
  1489  007D3E  41                 	db	65	;'A'
  1490  007D3F  43                 	db	67	;'C'
  1491  007D40  20                 	db	32
  1492  007D41  61                 	db	97	;'a'
  1493  007D42  64                 	db	100	;'d'
  1494  007D43  64                 	db	100	;'d'
  1495  007D44  72                 	db	114	;'r'
  1496  007D45  65                 	db	101	;'e'
  1497  007D46  73                 	db	115	;'s'
  1498  007D47  73                 	db	115	;'s'
  1499  007D48  20                 	db	32
  1500  007D49  69                 	db	105	;'i'
  1501  007D4A  73                 	db	115	;'s'
  1502  007D4B  20                 	db	32
  1503  007D4C  00                 	db	0
  1504  007D4D                     STR_161:
  1505  007D4D  5B                 	db	91	;'['
  1506  007D4E  45                 	db	69	;'E'
  1507  007D4F  43                 	db	67	;'C'
  1508  007D50  48                 	db	72	;'H'
  1509  007D51  4F                 	db	79	;'O'
  1510  007D52  20                 	db	32
  1511  007D53  52                 	db	82	;'R'
  1512  007D54  45                 	db	69	;'E'
  1513  007D55  50                 	db	80	;'P'
  1514  007D56  4C                 	db	76	;'L'
  1515  007D57  59                 	db	89	;'Y'
  1516  007D58  20                 	db	32
  1517  007D59  53                 	db	83	;'S'
  1518  007D5A  45                 	db	69	;'E'
  1519  007D5B  4E                 	db	78	;'N'
  1520  007D5C  54                 	db	84	;'T'
  1521  007D5D  20                 	db	32
  1522  007D5E  54                 	db	84	;'T'
  1523  007D5F  4F                 	db	79	;'O'
  1524  007D60  20                 	db	32
  1525  007D61  00                 	db	0
  1526  007D62                     STR_129:
  1527  007D62  52                 	db	82	;'R'
  1528  007D63  4F                 	db	79	;'O'
  1529  007D64  55                 	db	85	;'U'
  1530  007D65  54                 	db	84	;'T'
  1531  007D66  45                 	db	69	;'E'
  1532  007D67  52                 	db	82	;'R'
  1533  007D68  20                 	db	32
  1534  007D69  41                 	db	65	;'A'
  1535  007D6A  44                 	db	68	;'D'
  1536  007D6B  56                 	db	86	;'V'
  1537  007D6C  45                 	db	69	;'E'
  1538  007D6D  52                 	db	82	;'R'
  1539  007D6E  54                 	db	84	;'T'
  1540  007D6F  49                 	db	73	;'I'
  1541  007D70  53                 	db	83	;'S'
  1542  007D71  45                 	db	69	;'E'
  1543  007D72  4D                 	db	77	;'M'
  1544  007D73  45                 	db	69	;'E'
  1545  007D74  4E                 	db	78	;'N'
  1546  007D75  54                 	db	84	;'T'
  1547  007D76  00                 	db	0
  1548  007D77                     STR_33:
  1549  007D77  52                 	db	82	;'R'
  1550  007D78  65                 	db	101	;'e'
  1551  007D79  6D                 	db	109	;'m'
  1552  007D7A  61                 	db	97	;'a'
  1553  007D7B  69                 	db	105	;'i'
  1554  007D7C  6E                 	db	110	;'n'
  1555  007D7D  69                 	db	105	;'i'
  1556  007D7E  6E                 	db	110	;'n'
  1557  007D7F  67                 	db	103	;'g'
  1558  007D80  20                 	db	32
  1559  007D81  4C                 	db	76	;'L'
  1560  007D82  65                 	db	101	;'e'
  1561  007D83  6E                 	db	110	;'n'
  1562  007D84  67                 	db	103	;'g'
  1563  007D85  74                 	db	116	;'t'
  1564  007D86  68                 	db	104	;'h'
  1565  007D87  20                 	db	32
  1566  007D88  69                 	db	105	;'i'
  1567  007D89  73                 	db	115	;'s'
  1568  007D8A  20                 	db	32
  1569  007D8B  00                 	db	0
  1570  007D8C                     STR_130:
  1571  007D8C  52                 	db	82	;'R'
  1572  007D8D  4F                 	db	79	;'O'
  1573  007D8E  55                 	db	85	;'U'
  1574  007D8F  54                 	db	84	;'T'
  1575  007D90  45                 	db	69	;'E'
  1576  007D91  52                 	db	82	;'R'
  1577  007D92  20                 	db	32
  1578  007D93  53                 	db	83	;'S'
  1579  007D94  4F                 	db	79	;'O'
  1580  007D95  4C                 	db	76	;'L'
  1581  007D96  49                 	db	73	;'I'
  1582  007D97  43                 	db	67	;'C'
  1583  007D98  49                 	db	73	;'I'
  1584  007D99  54                 	db	84	;'T'
  1585  007D9A  41                 	db	65	;'A'
  1586  007D9B  54                 	db	84	;'T'
  1587  007D9C  49                 	db	73	;'I'
  1588  007D9D  4F                 	db	79	;'O'
  1589  007D9E  4E                 	db	78	;'N'
  1590  007D9F  00                 	db	0
  1591  007DA0                     STR_65:
  1592  007DA0  53                 	db	83	;'S'
  1593  007DA1  70                 	db	112	;'p'
  1594  007DA2  65                 	db	101	;'e'
  1595  007DA3  65                 	db	101	;'e'
  1596  007DA4  64                 	db	100	;'d'
  1597  007DA5  20                 	db	32
  1598  007DA6  69                 	db	105	;'i'
  1599  007DA7  73                 	db	115	;'s'
  1600  007DA8  20                 	db	32
  1601  007DA9  31                 	db	49	;'1'
  1602  007DAA  30                 	db	48	;'0'
  1603  007DAB  30                 	db	48	;'0'
  1604  007DAC  20                 	db	32
  1605  007DAD  4D                 	db	77	;'M'
  1606  007DAE  62                 	db	98	;'b'
  1607  007DAF  70                 	db	112	;'p'
  1608  007DB0  73                 	db	115	;'s'
  1609  007DB1  2C                 	db	44
  1610  007DB2  20                 	db	32
  1611  007DB3  00                 	db	0
  1612  007DB4                     STR_15:
  1613  007DB4  5B                 	db	91	;'['
  1614  007DB5  55                 	db	85	;'U'
  1615  007DB6  6E                 	db	110	;'n'
  1616  007DB7  6B                 	db	107	;'k'
  1617  007DB8  6E                 	db	110	;'n'
  1618  007DB9  6F                 	db	111	;'o'
  1619  007DBA  77                 	db	119	;'w'
  1620  007DBB  6E                 	db	110	;'n'
  1621  007DBC  20                 	db	32
  1622  007DBD  45                 	db	69	;'E'
  1623  007DBE  74                 	db	116	;'t'
  1624  007DBF  68                 	db	104	;'h'
  1625  007DC0  65                 	db	101	;'e'
  1626  007DC1  72                 	db	114	;'r'
  1627  007DC2  54                 	db	84	;'T'
  1628  007DC3  79                 	db	121	;'y'
  1629  007DC4  70                 	db	112	;'p'
  1630  007DC5  65                 	db	101	;'e'
  1631  007DC6  5D                 	db	93	;']'
  1632  007DC7  00                 	db	0
  1633  007DC8                     STR_64:
  1634  007DC8  53                 	db	83	;'S'
  1635  007DC9  70                 	db	112	;'p'
  1636  007DCA  65                 	db	101	;'e'
  1637  007DCB  65                 	db	101	;'e'
  1638  007DCC  64                 	db	100	;'d'
  1639  007DCD  20                 	db	32
  1640  007DCE  69                 	db	105	;'i'
  1641  007DCF  73                 	db	115	;'s'
  1642  007DD0  20                 	db	32
  1643  007DD1  31                 	db	49	;'1'
  1644  007DD2  30                 	db	48	;'0'
  1645  007DD3  20                 	db	32
  1646  007DD4  4D                 	db	77	;'M'
  1647  007DD5  62                 	db	98	;'b'
  1648  007DD6  70                 	db	112	;'p'
  1649  007DD7  73                 	db	115	;'s'
  1650  007DD8  2C                 	db	44
  1651  007DD9  20                 	db	32
  1652  007DDA  00                 	db	0
  1653  007DDB                     STR_63:
  1654  007DDB  4C                 	db	76	;'L'
  1655  007DDC  69                 	db	105	;'i'
  1656  007DDD  6E                 	db	110	;'n'
  1657  007DDE  6B                 	db	107	;'k'
  1658  007DDF  20                 	db	32
  1659  007DE0  65                 	db	101	;'e'
  1660  007DE1  73                 	db	115	;'s'
  1661  007DE2  74                 	db	116	;'t'
  1662  007DE3  61                 	db	97	;'a'
  1663  007DE4  62                 	db	98	;'b'
  1664  007DE5  6C                 	db	108	;'l'
  1665  007DE6  69                 	db	105	;'i'
  1666  007DE7  73                 	db	115	;'s'
  1667  007DE8  68                 	db	104	;'h'
  1668  007DE9  65                 	db	101	;'e'
  1669  007DEA  64                 	db	100	;'d'
  1670  007DEB  2E                 	db	46
  1671  007DEC  20                 	db	32
  1672  007DED  00                 	db	0
  1673  007DEE                     STR_71:
  1674  007DEE  20                 	db	32
  1675  007DEF  45                 	db	69	;'E'
  1676  007DF0  54                 	db	84	;'T'
  1677  007DF1  48                 	db	72	;'H'
  1678  007DF2  45                 	db	69	;'E'
  1679  007DF3  52                 	db	82	;'R'
  1680  007DF4  4E                 	db	78	;'N'
  1681  007DF5  45                 	db	69	;'E'
  1682  007DF6  54                 	db	84	;'T'
  1683  007DF7  20                 	db	32
  1684  007DF8  4D                 	db	77	;'M'
  1685  007DF9  4F                 	db	79	;'O'
  1686  007DFA  44                 	db	68	;'D'
  1687  007DFB  55                 	db	85	;'U'
  1688  007DFC  4C                 	db	76	;'L'
  1689  007DFD  45                 	db	69	;'E'
  1690  007DFE  3A                 	db	58	;':'
  1691  007DFF  20                 	db	32
  1692  007E00  00                 	db	0
  1693  007E01                     STR_82:
  1694  007E01  55                 	db	85	;'U'
  1695  007E02  6E                 	db	110	;'n'
  1696  007E03  6B                 	db	107	;'k'
  1697  007E04  6E                 	db	110	;'n'
  1698  007E05  6F                 	db	111	;'o'
  1699  007E06  77                 	db	119	;'w'
  1700  007E07  6E                 	db	110	;'n'
  1701  007E08  20                 	db	32
  1702  007E09  45                 	db	69	;'E'
  1703  007E0A  74                 	db	116	;'t'
  1704  007E0B  68                 	db	104	;'h'
  1705  007E0C  65                 	db	101	;'e'
  1706  007E0D  72                 	db	114	;'r'
  1707  007E0E  54                 	db	84	;'T'
  1708  007E0F  79                 	db	121	;'y'
  1709  007E10  70                 	db	112	;'p'
  1710  007E11  65                 	db	101	;'e'
  1711  007E12  00                 	db	0
  1712  007E13                     STR_125:
  1713  007E13  52                 	db	82	;'R'
  1714  007E14  45                 	db	69	;'E'
  1715  007E15  44                 	db	68	;'D'
  1716  007E16  49                 	db	73	;'I'
  1717  007E17  52                 	db	82	;'R'
  1718  007E18  45                 	db	69	;'E'
  1719  007E19  43                 	db	67	;'C'
  1720  007E1A  54                 	db	84	;'T'
  1721  007E1B  20                 	db	32
  1722  007E1C  4D                 	db	77	;'M'
  1723  007E1D  45                 	db	69	;'E'
  1724  007E1E  53                 	db	83	;'S'
  1725  007E1F  53                 	db	83	;'S'
  1726  007E20  41                 	db	65	;'A'
  1727  007E21  47                 	db	71	;'G'
  1728  007E22  45                 	db	69	;'E'
  1729  007E23  00                 	db	0
  1730  007E24  55                 	db	85	;'U'
  1731  007E25  6E                 	db	110	;'n'
  1732  007E26  6B                 	db	107	;'k'
  1733  007E27  6E                 	db	110	;'n'
  1734  007E28  6F                 	db	111	;'o'
  1735  007E29  77                 	db	119	;'w'
  1736  007E2A  6E                 	db	110	;'n'
  1737  007E2B  20                 	db	32
  1738  007E2C  50                 	db	80	;'P'
  1739  007E2D  72                 	db	114	;'r'
  1740  007E2E  6F                 	db	111	;'o'
  1741  007E2F  74                 	db	116	;'t'
  1742  007E30  6F                 	db	111	;'o'
  1743  007E31  63                 	db	99	;'c'
  1744  007E32  6F                 	db	111	;'o'
  1745  007E33  6C                 	db	108	;'l'
  1746  007E34  00                 	db	0
  1747  007E35                     STR_69:
  1748  007E35  20                 	db	32
  1749  007E36  4D                 	db	77	;'M'
  1750  007E37  45                 	db	69	;'E'
  1751  007E38  4D                 	db	77	;'M'
  1752  007E39  4F                 	db	79	;'O'
  1753  007E3A  52                 	db	82	;'R'
  1754  007E3B  59                 	db	89	;'Y'
  1755  007E3C  20                 	db	32
  1756  007E3D  4D                 	db	77	;'M'
  1757  007E3E  4F                 	db	79	;'O'
  1758  007E3F  44                 	db	68	;'D'
  1759  007E40  55                 	db	85	;'U'
  1760  007E41  4C                 	db	76	;'L'
  1761  007E42  45                 	db	69	;'E'
  1762  007E43  3A                 	db	58	;':'
  1763  007E44  20                 	db	32
  1764  007E45  00                 	db	0
  1765  007E46                     STR_134:
  1766  007E46  54                 	db	84	;'T'
  1767  007E47  49                 	db	73	;'I'
  1768  007E48  4D                 	db	77	;'M'
  1769  007E49  45                 	db	69	;'E'
  1770  007E4A  53                 	db	83	;'S'
  1771  007E4B  54                 	db	84	;'T'
  1772  007E4C  41                 	db	65	;'A'
  1773  007E4D  4D                 	db	77	;'M'
  1774  007E4E  50                 	db	80	;'P'
  1775  007E4F  20                 	db	32
  1776  007E50  52                 	db	82	;'R'
  1777  007E51  45                 	db	69	;'E'
  1778  007E52  50                 	db	80	;'P'
  1779  007E53  4C                 	db	76	;'L'
  1780  007E54  59                 	db	89	;'Y'
  1781  007E55  00                 	db	0
  1782  007E56                     STR_98:
  1783  007E56  5B                 	db	91	;'['
  1784  007E57  52                 	db	82	;'R'
  1785  007E58  65                 	db	101	;'e'
  1786  007E59  70                 	db	112	;'p'
  1787  007E5A  6C                 	db	108	;'l'
  1788  007E5B  79                 	db	121	;'y'
  1789  007E5C  20                 	db	32
  1790  007E5D  73                 	db	115	;'s'
  1791  007E5E  65                 	db	101	;'e'
  1792  007E5F  6E                 	db	110	;'n'
  1793  007E60  74                 	db	116	;'t'
  1794  007E61  20                 	db	32
  1795  007E62  74                 	db	116	;'t'
  1796  007E63  6F                 	db	111	;'o'
  1797  007E64  20                 	db	32
  1798  007E65  00                 	db	0
  1799  007E66                     STR_6:
  1800  007E66  5B                 	db	91	;'['
  1801  007E67  53                 	db	83	;'S'
  1802  007E68  79                 	db	121	;'y'
  1803  007E69  6D                 	db	109	;'m'
  1804  007E6A  62                 	db	98	;'b'
  1805  007E6B  6F                 	db	111	;'o'
  1806  007E6C  6C                 	db	108	;'l'
  1807  007E6D  20                 	db	32
  1808  007E6E  45                 	db	69	;'E'
  1809  007E6F  72                 	db	114	;'r'
  1810  007E70  72                 	db	114	;'r'
  1811  007E71  6F                 	db	111	;'o'
  1812  007E72  72                 	db	114	;'r'
  1813  007E73  73                 	db	115	;'s'
  1814  007E74  5D                 	db	93	;']'
  1815  007E75  00                 	db	0
  1816  007E76                     STR_155:
  1817  007E76  5B                 	db	91	;'['
  1818  007E77  42                 	db	66	;'B'
  1819  007E78  41                 	db	65	;'A'
  1820  007E79  44                 	db	68	;'D'
  1821  007E7A  20                 	db	32
  1822  007E7B  43                 	db	67	;'C'
  1823  007E7C  48                 	db	72	;'H'
  1824  007E7D  45                 	db	69	;'E'
  1825  007E7E  43                 	db	67	;'C'
  1826  007E7F  4B                 	db	75	;'K'
  1827  007E80  53                 	db	83	;'S'
  1828  007E81  55                 	db	85	;'U'
  1829  007E82  4D                 	db	77	;'M'
  1830  007E83  5D                 	db	93	;']'
  1831  007E84  00                 	db	0
  1832  007E85                     STR_95:
  1833  007E85  5B                 	db	91	;'['
  1834  007E86  49                 	db	73	;'I'
  1835  007E87  73                 	db	115	;'s'
  1836  007E88  47                 	db	71	;'G'
  1837  007E89  72                 	db	114	;'r'
  1838  007E8A  61                 	db	97	;'a'
  1839  007E8B  74                 	db	116	;'t'
  1840  007E8C  75                 	db	117	;'u'
  1841  007E8D  69                 	db	105	;'i'
  1842  007E8E  74                 	db	116	;'t'
  1843  007E8F  6F                 	db	111	;'o'
  1844  007E90  75                 	db	117	;'u'
  1845  007E91  73                 	db	115	;'s'
  1846  007E92  5D                 	db	93	;']'
  1847  007E93  00                 	db	0
  1848  007E94                     STR_73:
  1849  007E94  20                 	db	32
  1850  007E95  49                 	db	73	;'I'
  1851  007E96  50                 	db	80	;'P'
  1852  007E97  76                 	db	118	;'v'
  1853  007E98  34                 	db	52	;'4'
  1854  007E99  20                 	db	32
  1855  007E9A  4D                 	db	77	;'M'
  1856  007E9B  4F                 	db	79	;'O'
  1857  007E9C  44                 	db	68	;'D'
  1858  007E9D  55                 	db	85	;'U'
  1859  007E9E  4C                 	db	76	;'L'
  1860  007E9F  45                 	db	69	;'E'
  1861  007EA0  3A                 	db	58	;':'
  1862  007EA1  20                 	db	32
  1863  007EA2  00                 	db	0
  1864  007EA3                     STR_131:
  1865  007EA3  54                 	db	84	;'T'
  1866  007EA4  49                 	db	73	;'I'
  1867  007EA5  4D                 	db	77	;'M'
  1868  007EA6  45                 	db	69	;'E'
  1869  007EA7  20                 	db	32
  1870  007EA8  45                 	db	69	;'E'
  1871  007EA9  58                 	db	88	;'X'
  1872  007EAA  43                 	db	67	;'C'
  1873  007EAB  45                 	db	69	;'E'
  1874  007EAC  45                 	db	69	;'E'
  1875  007EAD  44                 	db	68	;'D'
  1876  007EAE  45                 	db	69	;'E'
  1877  007EAF  44                 	db	68	;'D'
  1878  007EB0  00                 	db	0
  1879  007EB1                     STR_124:
  1880  007EB1  53                 	db	83	;'S'
  1881  007EB2  4F                 	db	79	;'O'
  1882  007EB3  55                 	db	85	;'U'
  1883  007EB4  52                 	db	82	;'R'
  1884  007EB5  43                 	db	67	;'C'
  1885  007EB6  45                 	db	69	;'E'
  1886  007EB7  20                 	db	32
  1887  007EB8  51                 	db	81	;'Q'
  1888  007EB9  55                 	db	85	;'U'
  1889  007EBA  45                 	db	69	;'E'
  1890  007EBB  4E                 	db	78	;'N'
  1891  007EBC  43                 	db	67	;'C'
  1892  007EBD  48                 	db	72	;'H'
  1893  007EBE  00                 	db	0
  1894  007EBF                     STR_72:
  1895  007EBF  20                 	db	32
  1896  007EC0  41                 	db	65	;'A'
  1897  007EC1  52                 	db	82	;'R'
  1898  007EC2  50                 	db	80	;'P'
  1899  007EC3  20                 	db	32
  1900  007EC4  4D                 	db	77	;'M'
  1901  007EC5  4F                 	db	79	;'O'
  1902  007EC6  44                 	db	68	;'D'
  1903  007EC7  55                 	db	85	;'U'
  1904  007EC8  4C                 	db	76	;'L'
  1905  007EC9  45                 	db	69	;'E'
  1906  007ECA  3A                 	db	58	;':'
  1907  007ECB  20                 	db	32
  1908  007ECC  00                 	db	0
  1909  007ECD                     STR_128:
  1910  007ECD  45                 	db	69	;'E'
  1911  007ECE  43                 	db	67	;'C'
  1912  007ECF  48                 	db	72	;'H'
  1913  007ED0  4F                 	db	79	;'O'
  1914  007ED1  20                 	db	32
  1915  007ED2  52                 	db	82	;'R'
  1916  007ED3  45                 	db	69	;'E'
  1917  007ED4  51                 	db	81	;'Q'
  1918  007ED5  55                 	db	85	;'U'
  1919  007ED6  45                 	db	69	;'E'
  1920  007ED7  53                 	db	83	;'S'
  1921  007ED8  54                 	db	84	;'T'
  1922  007ED9  00                 	db	0
  1923  007EDA                     STR_62:
  1924  007EDA  4C                 	db	76	;'L'
  1925  007EDB  69                 	db	105	;'i'
  1926  007EDC  6E                 	db	110	;'n'
  1927  007EDD  6B                 	db	107	;'k'
  1928  007EDE  20                 	db	32
  1929  007EDF  6C                 	db	108	;'l'
  1930  007EE0  6F                 	db	111	;'o'
  1931  007EE1  73                 	db	115	;'s'
  1932  007EE2  74                 	db	116	;'t'
  1933  007EE3  2E                 	db	46
  1934  007EE4  0A                 	db	10
  1935  007EE5  0D                 	db	13
  1936  007EE6  00                 	db	0
  1937  007EE7                     STR_150:
  1938  007EE7  1B                 	db	27
  1939  007EE8  5B                 	db	91	;'['
  1940  007EE9  34                 	db	52	;'4'
  1941  007EEA  30                 	db	48	;'0'
  1942  007EEB  3B                 	db	59	;';'
  1943  007EEC  33                 	db	51	;'3'
  1944  007EED  33                 	db	51	;'3'
  1945  007EEE  3B                 	db	59	;';'
  1946  007EEF  31                 	db	49	;'1'
  1947  007EF0  30                 	db	48	;'0'
  1948  007EF1  6D                 	db	109	;'m'
  1949  007EF2  00                 	db	0
  1950  007EF3                     STR_103:
  1951  007EF3  20                 	db	32
  1952  007EF4  28                 	db	40
  1953  007EF5  72                 	db	114	;'r'
  1954  007EF6  65                 	db	101	;'e'
  1955  007EF7  70                 	db	112	;'p'
  1956  007EF8  6C                 	db	108	;'l'
  1957  007EF9  79                 	db	121	;'y'
  1958  007EFA  20                 	db	32
  1959  007EFB  74                 	db	116	;'t'
  1960  007EFC  6F                 	db	111	;'o'
  1961  007EFD  20                 	db	32
  1962  007EFE  00                 	db	0
  1963  007EFF                     STR_58:
  1964  007EFF  20                 	db	32
  1965  007F00  64                 	db	100	;'d'
  1966  007F01  65                 	db	101	;'e'
  1967  007F02  74                 	db	116	;'t'
  1968  007F03  65                 	db	101	;'e'
  1969  007F04  63                 	db	99	;'c'
  1970  007F05  74                 	db	116	;'t'
  1971  007F06  65                 	db	101	;'e'
  1972  007F07  64                 	db	100	;'d'
  1973  007F08  2E                 	db	46
  1974  007F09  20                 	db	32
  1975  007F0A  00                 	db	0
  1976  007F0B                     STR_54:
  1977  007F0B  41                 	db	65	;'A'
  1978  007F0C  70                 	db	112	;'p'
  1979  007F0D  72                 	db	114	;'r'
  1980  007F0E  20                 	db	32
  1981  007F0F  32                 	db	50	;'2'
  1982  007F10  32                 	db	50	;'2'
  1983  007F11  20                 	db	32
  1984  007F12  32                 	db	50	;'2'
  1985  007F13  30                 	db	48	;'0'
  1986  007F14  31                 	db	49	;'1'
  1987  007F15  39                 	db	57	;'9'
  1988  007F16  00                 	db	0
  1989  007F17                     STR_23:
  1990  007F17  1B                 	db	27
  1991  007F18  5B                 	db	91	;'['
  1992  007F19  34                 	db	52	;'4'
  1993  007F1A  31                 	db	49	;'1'
  1994  007F1B  3B                 	db	59	;';'
  1995  007F1C  31                 	db	49	;'1'
  1996  007F1D  30                 	db	48	;'0'
  1997  007F1E  3B                 	db	59	;';'
  1998  007F1F  31                 	db	49	;'1'
  1999  007F20  30                 	db	48	;'0'
  2000  007F21  6D                 	db	109	;'m'
  2001  007F22  00                 	db	0
  2002  007F23                     STR_3:
  2003  007F23  5B                 	db	91	;'['
  2004  007F24  42                 	db	66	;'B'
  2005  007F25  72                 	db	114	;'r'
  2006  007F26  6F                 	db	111	;'o'
  2007  007F27  61                 	db	97	;'a'
  2008  007F28  64                 	db	100	;'d'
  2009  007F29  63                 	db	99	;'c'
  2010  007F2A  61                 	db	97	;'a'
  2011  007F2B  73                 	db	115	;'s'
  2012  007F2C  74                 	db	116	;'t'
  2013  007F2D  5D                 	db	93	;']'
  2014  007F2E  00                 	db	0
  2015  007F2F                     STR_8:
  2016  007F2F  1B                 	db	27
  2017  007F30  5B                 	db	91	;'['
  2018  007F31  34                 	db	52	;'4'
  2019  007F32  34                 	db	52	;'4'
  2020  007F33  3B                 	db	59	;';'
  2021  007F34  31                 	db	49	;'1'
  2022  007F35  30                 	db	48	;'0'
  2023  007F36  3B                 	db	59	;';'
  2024  007F37  31                 	db	49	;'1'
  2025  007F38  30                 	db	48	;'0'
  2026  007F39  6D                 	db	109	;'m'
  2027  007F3A  00                 	db	0
  2028  007F3B                     STR_11:
  2029  007F3B  1B                 	db	27
  2030  007F3C  5B                 	db	91	;'['
  2031  007F3D  34                 	db	52	;'4'
  2032  007F3E  35                 	db	53	;'5'
  2033  007F3F  3B                 	db	59	;';'
  2034  007F40  31                 	db	49	;'1'
  2035  007F41  30                 	db	48	;'0'
  2036  007F42  3B                 	db	59	;';'
  2037  007F43  31                 	db	49	;'1'
  2038  007F44  30                 	db	48	;'0'
  2039  007F45  6D                 	db	109	;'m'
  2040  007F46  00                 	db	0
  2041  007F47                     STR_120:
  2042  007F47  45                 	db	69	;'E'
  2043  007F48  43                 	db	67	;'C'
  2044  007F49  48                 	db	72	;'H'
  2045  007F4A  4F                 	db	79	;'O'
  2046  007F4B  20                 	db	32
  2047  007F4C  52                 	db	82	;'R'
  2048  007F4D  45                 	db	69	;'E'
  2049  007F4E  50                 	db	80	;'P'
  2050  007F4F  4C                 	db	76	;'L'
  2051  007F50  59                 	db	89	;'Y'
  2052  007F51  00                 	db	0
  2053  007F52                     STR_93:
  2054  007F52  1B                 	db	27
  2055  007F53  5B                 	db	91	;'['
  2056  007F54  39                 	db	57	;'9'
  2057  007F55  34                 	db	52	;'4'
  2058  007F56  3B                 	db	59	;';'
  2059  007F57  34                 	db	52	;'4'
  2060  007F58  3B                 	db	59	;';'
  2061  007F59  31                 	db	49	;'1'
  2062  007F5A  30                 	db	48	;'0'
  2063  007F5B  6D                 	db	109	;'m'
  2064  007F5C  00                 	db	0
  2065  007F5D                     STR_5:
  2066  007F5D  1B                 	db	27
  2067  007F5E  5B                 	db	91	;'['
  2068  007F5F  34                 	db	52	;'4'
  2069  007F60  31                 	db	49	;'1'
  2070  007F61  3B                 	db	59	;';'
  2071  007F62  31                 	db	49	;'1'
  2072  007F63  3B                 	db	59	;';'
  2073  007F64  31                 	db	49	;'1'
  2074  007F65  30                 	db	48	;'0'
  2075  007F66  6D                 	db	109	;'m'
  2076  007F67  00                 	db	0
  2077  007F68                     STR_133:
  2078  007F68  54                 	db	84	;'T'
  2079  007F69  49                 	db	73	;'I'
  2080  007F6A  4D                 	db	77	;'M'
  2081  007F6B  45                 	db	69	;'E'
  2082  007F6C  53                 	db	83	;'S'
  2083  007F6D  54                 	db	84	;'T'
  2084  007F6E  41                 	db	65	;'A'
  2085  007F6F  4D                 	db	77	;'M'
  2086  007F70  50                 	db	80	;'P'
  2087  007F71  00                 	db	0
  2088  007F72                     STR_94:
  2089  007F72  5B                 	db	91	;'['
  2090  007F73  49                 	db	73	;'I'
  2091  007F74  73                 	db	115	;'s'
  2092  007F75  50                 	db	80	;'P'
  2093  007F76  72                 	db	114	;'r'
  2094  007F77  6F                 	db	111	;'o'
  2095  007F78  62                 	db	98	;'b'
  2096  007F79  65                 	db	101	;'e'
  2097  007F7A  5D                 	db	93	;']'
  2098  007F7B  00                 	db	0
  2099  007F7C                     STR_4:
  2100  007F7C  5B                 	db	91	;'['
  2101  007F7D  55                 	db	85	;'U'
  2102  007F7E  6E                 	db	110	;'n'
  2103  007F7F  69                 	db	105	;'i'
  2104  007F80  63                 	db	99	;'c'
  2105  007F81  61                 	db	97	;'a'
  2106  007F82  73                 	db	115	;'s'
  2107  007F83  74                 	db	116	;'t'
  2108  007F84  5D                 	db	93	;']'
  2109  007F85  00                 	db	0
  2110  007F86                     STR_78:
  2111  007F86  20                 	db	32
  2112  007F87  28                 	db	40
  2113  007F88  43                 	db	67	;'C'
  2114  007F89  6F                 	db	111	;'o'
  2115  007F8A  64                 	db	100	;'d'
  2116  007F8B  65                 	db	101	;'e'
  2117  007F8C  3A                 	db	58	;':'
  2118  007F8D  20                 	db	32
  2119  007F8E  00                 	db	0
  2120  007F8F                     STR_56:
  2121  007F8F  31                 	db	49	;'1'
  2122  007F90  36                 	db	54	;'6'
  2123  007F91  3A                 	db	58	;':'
  2124  007F92  35                 	db	53	;'5'
  2125  007F93  35                 	db	53	;'5'
  2126  007F94  3A                 	db	58	;':'
  2127  007F95  32                 	db	50	;'2'
  2128  007F96  37                 	db	55	;'7'
  2129  007F97  00                 	db	0
  2130  007F98                     STR_68:
  2131  007F98  5B                 	db	91	;'['
  2132  007F99  45                 	db	69	;'E'
  2133  007F9A  52                 	db	82	;'R'
  2134  007F9B  52                 	db	82	;'R'
  2135  007F9C  4F                 	db	79	;'O'
  2136  007F9D  52                 	db	82	;'R'
  2137  007F9E  5D                 	db	93	;']'
  2138  007F9F  00                 	db	0
  2139  007FA0                     STR_158:
  2140  007FA0  5D                 	db	93	;']'
  2141  007FA1  5B                 	db	91	;'['
  2142  007FA2  73                 	db	115	;'s'
  2143  007FA3  65                 	db	101	;'e'
  2144  007FA4  71                 	db	113	;'q'
  2145  007FA5  3D                 	db	61	;'='
  2146  007FA6  00                 	db	0
  2147  007FA7                     STR_12:
  2148  007FA7  5B                 	db	91	;'['
  2149  007FA8  49                 	db	73	;'I'
  2150  007FA9  50                 	db	80	;'P'
  2151  007FAA  76                 	db	118	;'v'
  2152  007FAB  34                 	db	52	;'4'
  2153  007FAC  5D                 	db	93	;']'
  2154  007FAD  00                 	db	0
  2155  007FAE                     STR_9:
  2156  007FAE  5B                 	db	91	;'['
  2157  007FAF  41                 	db	65	;'A'
  2158  007FB0  52                 	db	82	;'R'
  2159  007FB1  50                 	db	80	;'P'
  2160  007FB2  5D                 	db	93	;']'
  2161  007FB3  00                 	db	0
  2162  007FB4                     STR_157:
  2163  007FB4  5B                 	db	91	;'['
  2164  007FB5  69                 	db	105	;'i'
  2165  007FB6  64                 	db	100	;'d'
  2166  007FB7  3D                 	db	61	;'='
  2167  007FB8  00                 	db	0
  2168  007FB9                     STR_90:
  2169  007FB9  5D                 	db	93	;']'
  2170  007FBA  2D                 	db	45
  2171  007FBB  3E                 	db	62	;'>'
  2172  007FBC  5B                 	db	91	;'['
  2173  007FBD  00                 	db	0
  2174  007FBE                     STR_80:
  2175  007FBE  49                 	db	73	;'I'
  2176  007FBF  50                 	db	80	;'P'
  2177  007FC0  76                 	db	118	;'v'
  2178  007FC1  34                 	db	52	;'4'
  2179  007FC2  00                 	db	0
  2180  007FC3  49                 	db	73	;'I'
  2181  007FC4  43                 	db	67	;'C'
  2182  007FC5  4D                 	db	77	;'M'
  2183  007FC6  50                 	db	80	;'P'
  2184  007FC7  00                 	db	0
  2185  007FC8                     STR_79:
  2186  007FC8  29                 	db	41
  2187  007FC9  2E                 	db	46
  2188  007FCA  0A                 	db	10
  2189  007FCB  0D                 	db	13
  2190  007FCC  00                 	db	0
  2191  007FCD                     STR_30:
  2192  007FCD  20                 	db	32
  2193  007FCE  2D                 	db	45
  2194  007FCF  3E                 	db	62	;'>'
  2195  007FD0  20                 	db	32
  2196  007FD1  00                 	db	0
  2197  007FD2                     STR_19:
  2198  007FD2  5D                 	db	93	;']'
  2199  007FD3  5B                 	db	91	;'['
  2200  007FD4  4C                 	db	76	;'L'
  2201  007FD5  3D                 	db	61	;'='
  2202  007FD6  00                 	db	0
  2203  007FD7                     STR_7:
  2204  007FD7  1B                 	db	27
  2205  007FD8  5B                 	db	91	;'['
  2206  007FD9  30                 	db	48	;'0'
  2207  007FDA  6D                 	db	109	;'m'
  2208  007FDB  00                 	db	0
  2209  007FDC                     STR_104:
  2210  007FDC  29                 	db	41
  2211  007FDD  0A                 	db	10
  2212  007FDE  0D                 	db	13
  2213  007FDF  00                 	db	0
  2214  007FE0  54                 	db	84	;'T'
  2215  007FE1  43                 	db	67	;'C'
  2216  007FE2  50                 	db	80	;'P'
  2217  007FE3  00                 	db	0
  2218  007FE4  55                 	db	85	;'U'
  2219  007FE5  44                 	db	68	;'D'
  2220  007FE6  50                 	db	80	;'P'
  2221  007FE7  00                 	db	0
  2222  007FE8                     STR_81:
  2223  007FE8  41                 	db	65	;'A'
  2224  007FE9  52                 	db	82	;'R'
  2225  007FEA  50                 	db	80	;'P'
  2226  007FEB  00                 	db	0
  2227  007FEC                     STR_32:
  2228  007FEC  29                 	db	41
  2229  007FED  20                 	db	32
  2230  007FEE  00                 	db	0
  2231  007FEF                     STR_31:
  2232  007FEF  20                 	db	32
  2233  007FF0  28                 	db	40
  2234  007FF1  00                 	db	0
  2235  007FF2                     STR_20:
  2236  007FF2  5D                 	db	93	;']'
  2237  007FF3  20                 	db	32
  2238  007FF4  00                 	db	0
  2239  007FF5                     STR_17:
  2240  007FF5  2D                 	db	45
  2241  007FF6  3E                 	db	62	;'>'
  2242  007FF7  00                 	db	0
  2243  007FF8                     STR_18:
  2244  007FF8  5D                 	db	93	;']'
  2245  007FF9  5B                 	db	91	;'['
  2246  007FFA  00                 	db	0
  2247  007FFB                     STR_46:
  2248  007FFB  12                 	db	18
  2249  007FFC  00                 	db	0
  2250  007FFD                     STR_24:
  2251  007FFD  07                 	db	7
  2252  007FFE  00                 	db	0
  2253  0000                     
  2254                           ; #config settings
  2255  007FFF  00                 	db	0	; dummy byte at the end
  2256  0000                     
  2257                           	psect	cinit
  2258  005096                     __pcinit:
  2259                           	opt stack 0
  2260  005096                     start_initialization:
  2261                           	opt stack 0
  2262  005096                     __initialization:
  2263                           	opt stack 0
  2264                           
  2265                           ; Initialize objects allocated to BANK4 (30 bytes)
  2266                           ; load TBLPTR registers with __pidataBANK4
  2267  005096  0E1E               	movlw	low __pidataBANK4
  2268  005098  6EF6               	movwf	tblptrl,c
  2269  00509A  0E61               	movlw	high __pidataBANK4
  2270  00509C  6EF7               	movwf	tblptrh,c
  2271  00509E  0E00               	movlw	low (__pidataBANK4 shr (0+16))
  2272  0050A0  6EF8               	movwf	tblptru,c
  2273  0050A2  EE04  F09F         	lfsr	0,__pdataBANK4
  2274  0050A6  EE10 F01E          	lfsr	1,30
  2275  0050AA                     copy_data0:
  2276  0050AA  0009               	tblrd		*+
  2277  0050AC  CFF5 FFEE          	movff	tablat,postinc0
  2278  0050B0  50E5               	movf	postdec1,w,c
  2279  0050B2  50E1               	movf	fsr1l,w,c
  2280  0050B4  E1FA               	bnz	copy_data0
  2281                           
  2282                           ; Initialize objects allocated to BANK2 (52 bytes)
  2283                           ; load TBLPTR registers with __pidataBANK2
  2284  0050B6  0EEE               	movlw	low __pidataBANK2
  2285  0050B8  6EF6               	movwf	tblptrl,c
  2286  0050BA  0E5D               	movlw	high __pidataBANK2
  2287  0050BC  6EF7               	movwf	tblptrh,c
  2288  0050BE  0E00               	movlw	low (__pidataBANK2 shr (0+16))
  2289  0050C0  6EF8               	movwf	tblptru,c
  2290  0050C2  EE02  F08B         	lfsr	0,__pdataBANK2
  2291  0050C6  EE10 F034          	lfsr	1,52
  2292  0050CA                     copy_data1:
  2293  0050CA  0009               	tblrd		*+
  2294  0050CC  CFF5 FFEE          	movff	tablat,postinc0
  2295  0050D0  50E5               	movf	postdec1,w,c
  2296  0050D2  50E1               	movf	fsr1l,w,c
  2297  0050D4  E1FA               	bnz	copy_data1
  2298                           
  2299                           ; Clear objects allocated to BANK4 (112 bytes)
  2300  0050D6  EE04  F000         	lfsr	0,__pbssBANK4
  2301  0050DA  0E70               	movlw	112
  2302  0050DC                     clear_0:
  2303  0050DC  6AEE               	clrf	postinc0,c
  2304  0050DE  06E8               	decf	wreg,f,c
  2305  0050E0  E1FD               	bnz	clear_0
  2306                           
  2307                           ; Clear objects allocated to BANK3 (239 bytes)
  2308  0050E2  EE03  F000         	lfsr	0,__pbssBANK3
  2309  0050E6  0EEF               	movlw	239
  2310  0050E8                     clear_1:
  2311  0050E8  6AEE               	clrf	postinc0,c
  2312  0050EA  06E8               	decf	wreg,f,c
  2313  0050EC  E1FD               	bnz	clear_1
  2314                           
  2315                           ; Clear objects allocated to BANK2 (139 bytes)
  2316  0050EE  EE02  F000         	lfsr	0,__pbssBANK2
  2317  0050F2  0E8B               	movlw	139
  2318  0050F4                     clear_2:
  2319  0050F4  6AEE               	clrf	postinc0,c
  2320  0050F6  06E8               	decf	wreg,f,c
  2321  0050F8  E1FD               	bnz	clear_2
  2322                           
  2323                           ; Clear objects allocated to BANK1 (1 bytes)
  2324  0050FA  0101               	movlb	1
  2325  0050FC  6BFE               	clrf	__pbssBANK1& (0+255),b
  2326                           
  2327                           ; Clear objects allocated to BITCOMRAM (1 bytes)
  2328  0050FE  6A50               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
  2329                           
  2330                           ; Clear objects allocated to COMRAM (39 bytes)
  2331  005100  EE00  F029         	lfsr	0,__pbssCOMRAM
  2332  005104  0E27               	movlw	39
  2333  005106                     clear_3:
  2334  005106  6AEE               	clrf	postinc0,c
  2335  005108  06E8               	decf	wreg,f,c
  2336  00510A  E1FD               	bnz	clear_3
  2337  00510C                     end_of_initialization:
  2338                           	opt stack 0
  2339  00510C                     __end_of__initialization:
  2340                           	opt stack 0
  2341  00510C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  2342  00510E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  2343  005110  0E00               	movlw	low (__Lmediumconst shr (0+16))
  2344  005112  6EF8               	movwf	tblptru,c
  2345  005114  0100               	movlb	0
  2346  005116  EFD1  F00B         	goto	_main	;jump to C main() function
  2347                           tblptru	equ	0xFF8
  2348                           tblptrh	equ	0xFF7
  2349                           tblptrl	equ	0xFF6
  2350                           tablat	equ	0xFF5
  2351                           postinc0	equ	0xFEE
  2352                           wreg	equ	0xFE8
  2353                           postdec1	equ	0xFE5
  2354                           fsr1l	equ	0xFE1
  2355                           
  2356                           	psect	bitbssCOMRAM
  2357  000280                     __pbitbssCOMRAM:
  2358                           	opt stack 0
  2359  000280                     _fSrcAddrChanged:
  2360                           	opt stack 0
  2361  000280                     	ds	1
  2362  000281                     	ds	1
  2363  000282                     	ds	1
  2364  000283                     	ds	1
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           postinc0	equ	0xFEE
  2370                           wreg	equ	0xFE8
  2371                           postdec1	equ	0xFE5
  2372                           fsr1l	equ	0xFE1
  2373                           
  2374                           	psect	bssCOMRAM
  2375  000029                     __pbssCOMRAM:
  2376                           	opt stack 0
  2377  000029                     _time:
  2378                           	opt stack 0
  2379  000029                     	ds	4
  2380  00002D                     ipv4_sendFrame@oldTime:
  2381                           	opt stack 0
  2382  00002D                     	ds	4
  2383  000031                     arp_gratuitous@timeStart:
  2384                           	opt stack 0
  2385  000031                     	ds	4
  2386  000035                     buttonHandler@debounceCounter:
  2387                           	opt stack 0
  2388  000035                     	ds	4
  2389  000039                     _numberToDisplay:
  2390                           	opt stack 0
  2391  000039                     	ds	4
  2392  00003D                     _arpStatus:
  2393                           	opt stack 0
  2394  00003D                     	ds	2
  2395  00003F                     ethernetController_streamToTransmitBuffer@pointer:
  2396                           	opt stack 0
  2397  00003F                     	ds	2
  2398  000041                     _nextPacketPointer:
  2399                           	opt stack 0
  2400  000041                     	ds	2
  2401  000043                     ipv4_sendFrame@failedResolveCounter:
  2402                           	opt stack 0
  2403  000043                     	ds	1
  2404  000044                     arp_background@state:
  2405                           	opt stack 0
  2406  000044                     	ds	1
  2407  000045                     arp_gratuitous@state:
  2408                           	opt stack 0
  2409  000045                     	ds	1
  2410  000046                     arp_gratuitous@announceCounter:
  2411                           	opt stack 0
  2412  000046                     	ds	1
  2413  000047                     arp_probe@state:
  2414                           	opt stack 0
  2415  000047                     	ds	1
  2416  000048                     arp_probe@probeCounter:
  2417                           	opt stack 0
  2418  000048                     	ds	1
  2419  000049                     sevenSegmentUpdate@digitPointer:
  2420                           	opt stack 0
  2421  000049                     	ds	1
  2422  00004A                     buttonHandler@newState:
  2423                           	opt stack 0
  2424  00004A                     	ds	1
  2425  00004B                     buttonHandler@oldState:
  2426                           	opt stack 0
  2427  00004B                     	ds	1
  2428  00004C                     	ds	1
  2429  00004D                     arp_background@err:
  2430                           	opt stack 0
  2431  00004D                     	ds	3
  2432                           tblptru	equ	0xFF8
  2433                           tblptrh	equ	0xFF7
  2434                           tblptrl	equ	0xFF6
  2435                           tablat	equ	0xFF5
  2436                           postinc0	equ	0xFEE
  2437                           wreg	equ	0xFE8
  2438                           postdec1	equ	0xFE5
  2439                           fsr1l	equ	0xFE1
  2440                           
  2441                           	psect	bssBANK1
  2442  0001FE                     __pbssBANK1:
  2443                           	opt stack 0
  2444  0001FE                     handleStackBackgroundTasks@remainingLength:
  2445                           	opt stack 0
  2446  0001FE                     	ds	1
  2447                           tblptru	equ	0xFF8
  2448                           tblptrh	equ	0xFF7
  2449                           tblptrl	equ	0xFF6
  2450                           tablat	equ	0xFF5
  2451                           postinc0	equ	0xFEE
  2452                           wreg	equ	0xFE8
  2453                           postdec1	equ	0xFE5
  2454                           fsr1l	equ	0xFE1
  2455                           
  2456                           	psect	bssBANK2
  2457  000200                     __pbssBANK2:
  2458                           	opt stack 0
  2459  000200                     _occupiedMemory:
  2460                           	opt stack 0
  2461  000200                     	ds	72
  2462  000248                     printEthernetState@oldState:
  2463                           	opt stack 0
  2464  000248                     	ds	15
  2465  000257                     arp_background@ipPreliminary:
  2466                           	opt stack 0
  2467  000257                     	ds	4
  2468  00025B                     ethernet_rxGetNewFrame@counter:
  2469                           	opt stack 0
  2470  00025B                     	ds	4
  2471  00025F                     sevenSegmentUpdate@digitsToDisplay:
  2472                           	opt stack 0
  2473  00025F                     	ds	3
  2474  000262                     handleStackBackgroundTasks@lastEndAddress:
  2475                           	opt stack 0
  2476  000262                     	ds	2
  2477  000264                     ethernetController_softReset@F5990:
  2478                           	opt stack 0
  2479  000264                     	ds	2
  2480  000266                     handleStackBackgroundTasks@numberOfPacketsSent:
  2481                           	opt stack 0
  2482  000266                     	ds	1
  2483  000267                     handleStackBackgroundTasks@state:
  2484                           	opt stack 0
  2485  000267                     	ds	1
  2486  000268                     hexToString@number:
  2487                           	opt stack 0
  2488  000268                     	ds	10
  2489  000272                     intToString@number:
  2490                           	opt stack 0
  2491  000272                     	ds	10
  2492  00027C                     ethernetController_getRSV@temp:
  2493                           	opt stack 0
  2494  00027C                     	ds	6
  2495  000282                     _ipPreliminarySource:
  2496                           	opt stack 0
  2497  000282                     	ds	4
  2498  000286                     _ipSource:
  2499                           	opt stack 0
  2500  000286                     	ds	4
  2501  00028A                     _buttonState:
  2502                           	opt stack 0
  2503  00028A                     	ds	1
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           
  2513                           	psect	dataBANK2
  2514  00028B                     __pdataBANK2:
  2515                           	opt stack 0
  2516  00028B                     macToString@F5948:
  2517                           	opt stack 0
  2518  00028B                     	ds	18
  2519  00029D                     _sevenSegCharacters:
  2520                           	opt stack 0
  2521  00029D                     	ds	12
  2522  0002A9                     _randx:
  2523                           	opt stack 0
  2524  0002A9                     	ds	4
  2525  0002AD                     ethernetController_softReset@F5988:
  2526                           	opt stack 0
  2527  0002AD                     	ds	2
  2528  0002AF                     ipAdressToString@address:
  2529                           	opt stack 0
  2530  0002AF                     	ds	16
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           postinc0	equ	0xFEE
  2536                           wreg	equ	0xFE8
  2537                           postdec1	equ	0xFE5
  2538                           fsr1l	equ	0xFE1
  2539                           
  2540                           	psect	bssBANK3
  2541  000300                     __pbssBANK3:
  2542                           	opt stack 0
  2543  000300                     handleStackBackgroundTasks@currentPacket:
  2544                           	opt stack 0
  2545  000300                     	ds	66
  2546  000342                     _stack:
  2547                           	opt stack 0
  2548  000342                     	ds	123
  2549  0003BD                     arpEntryToString@string:
  2550                           	opt stack 0
  2551  0003BD                     	ds	50
  2552                           tblptru	equ	0xFF8
  2553                           tblptrh	equ	0xFF7
  2554                           tblptrl	equ	0xFF6
  2555                           tablat	equ	0xFF5
  2556                           postinc0	equ	0xFEE
  2557                           wreg	equ	0xFE8
  2558                           postdec1	equ	0xFE5
  2559                           fsr1l	equ	0xFE1
  2560                           
  2561                           	psect	bssBANK4
  2562  000400                     __pbssBANK4:
  2563                           	opt stack 0
  2564  000400                     _arp_table:
  2565                           	opt stack 0
  2566  000400                     	ds	112
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           postdec1	equ	0xFE5
  2574                           fsr1l	equ	0xFE1
  2575                           
  2576                           	psect	dataBANK4
  2577  00049F                     __pdataBANK4:
  2578                           	opt stack 0
  2579  00049F                     _icmpTxtMessages:
  2580                           	opt stack 0
  2581  00049F                     	ds	30
  2582                           tblptru	equ	0xFF8
  2583                           tblptrh	equ	0xFF7
  2584                           tblptrl	equ	0xFF6
  2585                           tablat	equ	0xFF5
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           postdec1	equ	0xFE5
  2589                           fsr1l	equ	0xFE1
  2590                           
  2591                           	psect	cstackBANK4
  2592  000470                     __pcstackBANK4:
  2593                           	opt stack 0
  2594  000470                     main@prescaler:
  2595                           	opt stack 0
  2596                           
  2597                           ; 4 bytes @ 0x0
  2598  000470                     	ds	4
  2599  000474                     main@headerBuf:
  2600                           	opt stack 0
  2601                           
  2602                           ; 32 bytes @ 0x4
  2603  000474                     	ds	32
  2604  000494                     _main$2589:
  2605                           	opt stack 0
  2606                           
  2607                           ; 2 bytes @ 0x24
  2608  000494                     	ds	2
  2609  000496                     main@err:
  2610                           	opt stack 0
  2611                           
  2612                           ; 3 bytes @ 0x26
  2613  000496                     	ds	3
  2614  000499                     main@i:
  2615                           	opt stack 0
  2616                           
  2617                           ; 2 bytes @ 0x29
  2618  000499                     	ds	2
  2619  00049B                     main@ipDst:
  2620                           	opt stack 0
  2621                           
  2622                           ; 4 bytes @ 0x2B
  2623  00049B                     	ds	4
  2624                           tblptru	equ	0xFF8
  2625                           tblptrh	equ	0xFF7
  2626                           tblptrl	equ	0xFF6
  2627                           tablat	equ	0xFF5
  2628                           postinc0	equ	0xFEE
  2629                           wreg	equ	0xFE8
  2630                           postdec1	equ	0xFE5
  2631                           fsr1l	equ	0xFE1
  2632                           
  2633                           	psect	cstackBANK2
  2634  0002BF                     __pcstackBANK2:
  2635                           	opt stack 0
  2636  0002BF                     ??_ethernet_rxGetNewFrame:
  2637                           
  2638                           ; 1 bytes @ 0x0
  2639  0002BF                     	ds	8
  2640  0002C7                     ethernet_rxGetNewFrame@err:
  2641                           	opt stack 0
  2642                           
  2643                           ; 3 bytes @ 0x8
  2644  0002C7                     	ds	3
  2645  0002CA                     handleStackBackgroundTasks@stack:
  2646                           	opt stack 0
  2647                           
  2648                           ; 2 bytes @ 0xB
  2649  0002CA                     	ds	2
  2650  0002CC                     ??_handleStackBackgroundTasks:
  2651                           
  2652                           ; 1 bytes @ 0xD
  2653  0002CC                     	ds	2
  2654  0002CE                     handleStackBackgroundTasks@errArp:
  2655                           	opt stack 0
  2656                           
  2657                           ; 3 bytes @ 0xF
  2658  0002CE                     	ds	3
  2659  0002D1                     handleStackBackgroundTasks@intf:
  2660                           	opt stack 0
  2661                           
  2662                           ; 2 bytes @ 0x12
  2663  0002D1                     	ds	2
  2664  0002D3                     handleStackBackgroundTasks@errIPv4:
  2665                           	opt stack 0
  2666                           
  2667                           ; 3 bytes @ 0x14
  2668  0002D3                     	ds	3
  2669  0002D6                     ??_main:
  2670                           
  2671                           ; 1 bytes @ 0x17
  2672  0002D6                     	ds	2
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           postinc0	equ	0xFEE
  2678                           wreg	equ	0xFE8
  2679                           postdec1	equ	0xFE5
  2680                           fsr1l	equ	0xFE1
  2681                           
  2682                           	psect	cstackBANK1
  2683  000100                     __pcstackBANK1:
  2684                           	opt stack 0
  2685  000100                     arp_sendRequest@ipSender:
  2686                           	opt stack 0
  2687  000100                     arp_sendReply@request:
  2688                           	opt stack 0
  2689  000100                     icmp_sendEchoReply@icmpMessage:
  2690                           	opt stack 0
  2691                           
  2692                           ; 64 bytes @ 0x0
  2693  000100                     	ds	4
  2694  000104                     arp_sendRequest@ipTarget:
  2695                           	opt stack 0
  2696                           
  2697                           ; 4 bytes @ 0x4
  2698  000104                     	ds	4
  2699  000108                     arp_sendRequest@senderMAC:
  2700                           	opt stack 0
  2701                           
  2702                           ; 6 bytes @ 0x8
  2703  000108                     	ds	6
  2704  00010E                     arp_sendRequest@targetMAC:
  2705                           	opt stack 0
  2706                           
  2707                           ; 6 bytes @ 0xE
  2708  00010E                     	ds	6
  2709  000114                     arp_sendRequest@request:
  2710                           	opt stack 0
  2711                           
  2712                           ; 32 bytes @ 0x14
  2713  000114                     	ds	12
  2714  000120                     arp_sendReply@senderMAC:
  2715                           	opt stack 0
  2716                           
  2717                           ; 6 bytes @ 0x20
  2718  000120                     	ds	6
  2719  000126                     arp_sendReply@targetMAC:
  2720                           	opt stack 0
  2721                           
  2722                           ; 6 bytes @ 0x26
  2723  000126                     	ds	6
  2724  00012C                     arp_sendReply@senderIP:
  2725                           	opt stack 0
  2726                           
  2727                           ; 4 bytes @ 0x2C
  2728  00012C                     	ds	4
  2729  000130                     arp_sendReply@targetIP:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x30
  2733  000130                     	ds	4
  2734  000134                     ?_ipv4_sendFrame:
  2735                           	opt stack 0
  2736  000134                     ?_arp_probe:
  2737                           	opt stack 0
  2738  000134                     ?_arp_gratuitous:
  2739                           	opt stack 0
  2740  000134                     arp_sendReply@myIP:
  2741                           	opt stack 0
  2742  000134                     arp_probe@ipTarget:
  2743                           	opt stack 0
  2744  000134                     arp_gratuitous@ip:
  2745                           	opt stack 0
  2746  000134                     ipv4_sendFrame@ipPacket:
  2747                           	opt stack 0
  2748                           
  2749                           ; 66 bytes @ 0x34
  2750  000134                     	ds	4
  2751  000138                     arp_probe@link:
  2752                           	opt stack 0
  2753  000138                     arp_gratuitous@link:
  2754                           	opt stack 0
  2755  000138                     arp_sendReply@reply:
  2756                           	opt stack 0
  2757                           
  2758                           ; 32 bytes @ 0x38
  2759  000138                     	ds	1
  2760  000139                     ??_arp_probe:
  2761  000139                     ??_arp_gratuitous:
  2762                           
  2763                           ; 1 bytes @ 0x39
  2764  000139                     	ds	7
  2765  000140                     icmp_sendEchoReply@headerBuf:
  2766                           	opt stack 0
  2767                           
  2768                           ; 32 bytes @ 0x40
  2769  000140                     	ds	1
  2770  000141                     arp_probe@index:
  2771                           	opt stack 0
  2772                           
  2773                           ; 1 bytes @ 0x41
  2774  000141                     	ds	1
  2775  000142                     arp_probe@timeStart:
  2776                           	opt stack 0
  2777                           
  2778                           ; 4 bytes @ 0x42
  2779  000142                     	ds	4
  2780  000146                     arp_probe@waitingTime:
  2781                           	opt stack 0
  2782                           
  2783                           ; 4 bytes @ 0x46
  2784  000146                     	ds	4
  2785  00014A                     arp_probe@ipSender:
  2786                           	opt stack 0
  2787                           
  2788                           ; 4 bytes @ 0x4A
  2789  00014A                     	ds	4
  2790  00014E                     arp_probe@err:
  2791                           	opt stack 0
  2792                           
  2793                           ; 3 bytes @ 0x4E
  2794  00014E                     	ds	3
  2795  000151                     ?_arp_background:
  2796                           	opt stack 0
  2797                           
  2798                           ; 3 bytes @ 0x51
  2799  000151                     	ds	3
  2800  000154                     ??_arp_background:
  2801                           
  2802                           ; 1 bytes @ 0x54
  2803  000154                     	ds	2
  2804  000156                     arp_background@link:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x56
  2808  000156                     	ds	1
  2809  000157                     arp_background@errAnnounce:
  2810                           	opt stack 0
  2811                           
  2812                           ; 3 bytes @ 0x57
  2813  000157                     	ds	1
  2814  000158                     arp_handleNewPacket@arp:
  2815                           	opt stack 0
  2816                           
  2817                           ; 32 bytes @ 0x58
  2818  000158                     	ds	2
  2819  00015A                     arp_background@errProbe:
  2820                           	opt stack 0
  2821                           
  2822                           ; 3 bytes @ 0x5A
  2823  00015A                     	ds	6
  2824  000160                     icmp_sendEchoReply@checksum:
  2825                           	opt stack 0
  2826                           
  2827                           ; 2 bytes @ 0x60
  2828  000160                     	ds	2
  2829  000162                     icmp_sendEchoReply@i:
  2830                           	opt stack 0
  2831                           
  2832                           ; 1 bytes @ 0x62
  2833  000162                     	ds	1
  2834  000163                     icmp_sendEchoReply@i_4342:
  2835                           	opt stack 0
  2836                           
  2837                           ; 2 bytes @ 0x63
  2838  000163                     	ds	2
  2839  000165                     icmp_sendEchoReply@icmpHeader:
  2840                           	opt stack 0
  2841                           
  2842                           ; 8 bytes @ 0x65
  2843  000165                     	ds	8
  2844  00016D                     icmp_sendEchoReply@ipReply:
  2845                           	opt stack 0
  2846                           
  2847                           ; 66 bytes @ 0x6D
  2848  00016D                     	ds	9
  2849  000176                     ??_ipv4_sendFrame:
  2850                           
  2851                           ; 1 bytes @ 0x76
  2852  000176                     	ds	57
  2853  0001AF                     icmp_handleNewPacket@ipHeader:
  2854                           	opt stack 0
  2855                           
  2856                           ; 23 bytes @ 0xAF
  2857  0001AF                     	ds	23
  2858  0001C6                     icmp_handleNewPacket@ipPayload:
  2859                           	opt stack 0
  2860                           
  2861                           ; 9 bytes @ 0xC6
  2862  0001C6                     	ds	9
  2863  0001CF                     ipv4_handleNewPacket@frame:
  2864                           	opt stack 0
  2865                           
  2866                           ; 2 bytes @ 0xCF
  2867  0001CF                     	ds	2
  2868  0001D1                     _ipv4_handleNewPacket$3967:
  2869                           	opt stack 0
  2870                           
  2871                           ; 2 bytes @ 0xD1
  2872  0001D1                     	ds	2
  2873  0001D3                     ipv4_handleNewPacket@header:
  2874                           	opt stack 0
  2875                           
  2876                           ; 23 bytes @ 0xD3
  2877  0001D3                     	ds	23
  2878  0001EA                     ipv4_handleNewPacket@payloadField:
  2879                           	opt stack 0
  2880                           
  2881                           ; 9 bytes @ 0xEA
  2882  0001EA                     	ds	9
  2883  0001F3                     ipv4_handleNewPacket@headerField:
  2884                           	opt stack 0
  2885                           
  2886                           ; 9 bytes @ 0xF3
  2887  0001F3                     	ds	9
  2888  0001FC                     ethernet_rxGetNewFrame@frame:
  2889                           	opt stack 0
  2890                           
  2891                           ; 2 bytes @ 0xFC
  2892  0001FC                     	ds	2
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1l	equ	0xFE1
  2901                           
  2902                           	psect	cstackBANK0
  2903  000060                     __pcstackBANK0:
  2904                           	opt stack 0
  2905  000060                     ?_enc424j600_getNextPacketPointer:
  2906                           	opt stack 0
  2907  000060                     ?_ethernetController_getDeviceName:
  2908                           	opt stack 0
  2909  000060                     ?_etherTypeToString:
  2910                           	opt stack 0
  2911  000060                     ?_ethernetController_getMTU:
  2912                           	opt stack 0
  2913  000060                     ?_icmp_calculateChecksumBuf:
  2914                           	opt stack 0
  2915  000060                     ?___wmul:
  2916                           	opt stack 0
  2917  000060                     ?___lwdiv:
  2918                           	opt stack 0
  2919  000060                     ?_ipv4_background:
  2920                           	opt stack 0
  2921  000060                     ?_getMillis:
  2922                           	opt stack 0
  2923  000060                     ?_ipv4_getIPSourceAddress:
  2924                           	opt stack 0
  2925  000060                     ?_ipv4_getPreliminaryIPSourceAddress:
  2926                           	opt stack 0
  2927  000060                     ?___lmul:
  2928                           	opt stack 0
  2929  000060                     ?___lldiv:
  2930                           	opt stack 0
  2931  000060                     ?___llmod:
  2932                           	opt stack 0
  2933  000060                     ?_enc424j600_updateReceiveStatusVector:
  2934                           	opt stack 0
  2935  000060                     ?_arp_getEntryFromTable:
  2936                           	opt stack 0
  2937  000060                     entireMemoryEmpty@i:
  2938                           	opt stack 0
  2939  000060                     entireMemoryFull@i:
  2940                           	opt stack 0
  2941  000060                     memory_txFrameClear@index:
  2942                           	opt stack 0
  2943  000060                     enc424j600_writeSPI@data:
  2944                           	opt stack 0
  2945  000060                     enc424j600_readSPI@data:
  2946                           	opt stack 0
  2947  000060                     enc424j600_setNextPacketPointer@ptr:
  2948                           	opt stack 0
  2949  000060                     enc424j600_updateReceiveStatusVector@rsv:
  2950                           	opt stack 0
  2951  000060                     mac_setToBroadcast@mac:
  2952                           	opt stack 0
  2953  000060                     mac_isAllZero@mac:
  2954                           	opt stack 0
  2955  000060                     mac_cmp@a:
  2956                           	opt stack 0
  2957  000060                     mac_setAllZero@mac:
  2958                           	opt stack 0
  2959  000060                     etherTypeToString@ethertype:
  2960                           	opt stack 0
  2961  000060                     ipv4_calculateHeaderChecksum@header:
  2962                           	opt stack 0
  2963  000060                     ipv4_SrcAddrChanged@err:
  2964                           	opt stack 0
  2965  000060                     ipv4_cmp@a:
  2966                           	opt stack 0
  2967  000060                     ipv4_isAllZero@ip:
  2968                           	opt stack 0
  2969  000060                     ipv4_setToAllZero@ip:
  2970                           	opt stack 0
  2971  000060                     icmp_calculateChecksumBuf@buf:
  2972                           	opt stack 0
  2973  000060                     icmp_writeHeaderIntoBuffer@buf:
  2974                           	opt stack 0
  2975  000060                     ___wmul@multiplier:
  2976                           	opt stack 0
  2977  000060                     ___lwdiv@dividend:
  2978                           	opt stack 0
  2979  000060                     ipv4_setIPSourceAddress@ip:
  2980                           	opt stack 0
  2981  000060                     ___lmul@multiplier:
  2982                           	opt stack 0
  2983  000060                     ___lldiv@dividend:
  2984                           	opt stack 0
  2985  000060                     ___llmod@dividend:
  2986                           	opt stack 0
  2987  000060                     checkForOverlapSwitched@a:
  2988                           	opt stack 0
  2989  000060                     ipv4_writeHeaderIntoBuffer@header:
  2990                           	opt stack 0
  2991                           
  2992                           ; 23 bytes @ 0x0
  2993  000060                     	ds	2
  2994  000062                     ??_enc424j600_writeSPI:
  2995  000062                     ??_enc424j600_readSPI:
  2996  000062                     ??_etherTypeToString:
  2997  000062                     ??_ipv4_calculateHeaderChecksum:
  2998  000062                     ?_ethernetController_getNextPacketPointer:
  2999                           	opt stack 0
  3000  000062                     mac_setToBroadcast@i:
  3001                           	opt stack 0
  3002  000062                     mac_isAllZero@i:
  3003                           	opt stack 0
  3004  000062                     mac_setAllZero@i:
  3005                           	opt stack 0
  3006  000062                     ipv4_isAllZero@i:
  3007                           	opt stack 0
  3008  000062                     ipv4_setToAllZero@i:
  3009                           	opt stack 0
  3010  000062                     mac_cmp@b:
  3011                           	opt stack 0
  3012  000062                     ipv4_cmp@b:
  3013                           	opt stack 0
  3014  000062                     icmp_calculateChecksumBuf@ipPayloadLength:
  3015                           	opt stack 0
  3016  000062                     ___wmul@multiplicand:
  3017                           	opt stack 0
  3018  000062                     ___lwdiv@divisor:
  3019                           	opt stack 0
  3020  000062                     icmp_writeHeaderIntoBuffer@header:
  3021                           	opt stack 0
  3022  000062                     ethernetController_getDeviceName@string:
  3023                           	opt stack 0
  3024                           
  3025                           ; 11 bytes @ 0x2
  3026  000062                     	ds	1
  3027  000063                     ??_ipv4_background:
  3028  000063                     
  3029                           ; 1 bytes @ 0x3
  3030  000063                     	ds	1
  3031  000064                     ??_icmp_calculateChecksumBuf:
  3032  000064                     ___lwdiv@counter:
  3033                           	opt stack 0
  3034  000064                     ___wmul@product:
  3035                           	opt stack 0
  3036  000064                     ___lmul@multiplicand:
  3037                           	opt stack 0
  3038  000064                     ___lldiv@divisor:
  3039                           	opt stack 0
  3040  000064                     ___llmod@divisor:
  3041                           	opt stack 0
  3042                           
  3043                           ; 4 bytes @ 0x4
  3044  000064                     	ds	1
  3045  000065                     ??_enc424j600_updateReceiveStatusVector:
  3046  000065                     ___lwdiv@quotient:
  3047                           	opt stack 0
  3048  000065                     ipv4_background@err:
  3049                           	opt stack 0
  3050                           
  3051                           ; 3 bytes @ 0x5
  3052  000065                     	ds	1
  3053  000066                     mac_cmp@i:
  3054                           	opt stack 0
  3055  000066                     ipv4_cmp@i:
  3056                           	opt stack 0
  3057  000066                     enc424j600_writeSPI@timeoutCounter:
  3058                           	opt stack 0
  3059  000066                     enc424j600_readSPI@timeoutCounter:
  3060                           	opt stack 0
  3061                           
  3062                           ; 4 bytes @ 0x6
  3063  000066                     	ds	1
  3064  000067                     arp_getEntryFromTable@index:
  3065                           	opt stack 0
  3066  000067                     arp_checkForEntry@ip:
  3067                           	opt stack 0
  3068                           
  3069                           ; 4 bytes @ 0x7
  3070  000067                     	ds	1
  3071  000068                     icmp_calculateChecksumBuf@carry:
  3072                           	opt stack 0
  3073  000068                     ___llmod@counter:
  3074                           	opt stack 0
  3075  000068                     ___lmul@product:
  3076                           	opt stack 0
  3077  000068                     ___lldiv@quotient:
  3078                           	opt stack 0
  3079                           
  3080                           ; 4 bytes @ 0x8
  3081  000068                     	ds	1
  3082  000069                     icmp_calculateChecksumBuf@foo:
  3083                           	opt stack 0
  3084  000069                     checkForOverlapSwitched@b:
  3085                           	opt stack 0
  3086                           
  3087                           ; 9 bytes @ 0x9
  3088  000069                     	ds	1
  3089  00006A                     ??_icmp_writeHeaderIntoBuffer:
  3090  00006A                     enc424j600_writeSingleByte@opcode:
  3091                           	opt stack 0
  3092  00006A                     ipv4_calculateHeaderChecksum@carry:
  3093                           	opt stack 0
  3094  00006A                     enc424j600_writeControlRegisterUnbanked@data:
  3095                           	opt stack 0
  3096  00006A                     enc424j600_readControlRegisterUnbanked@data:
  3097                           	opt stack 0
  3098  00006A                     enc424j600_setGPDATAWritePointer@addr:
  3099                           	opt stack 0
  3100  00006A                     enc424j600_setERXDATAReadPointer@addr:
  3101                           	opt stack 0
  3102                           
  3103                           ; 2 bytes @ 0xA
  3104  00006A                     	ds	1
  3105  00006B                     arp_checkForEntry@index:
  3106                           	opt stack 0
  3107  00006B                     icmp_calculateChecksumBuf@i:
  3108                           	opt stack 0
  3109  00006B                     ipv4_calculateHeaderChecksum@sum:
  3110                           	opt stack 0
  3111                           
  3112                           ; 4 bytes @ 0xB
  3113  00006B                     	ds	1
  3114  00006C                     ?_rand:
  3115                           	opt stack 0
  3116  00006C                     enc424j600_writeControlRegisterUnbanked@addr:
  3117                           	opt stack 0
  3118  00006C                     enc424j600_readControlRegisterUnbanked@addr:
  3119                           	opt stack 0
  3120  00006C                     enc424j600_setGPDATAWritePointer@opcode:
  3121                           	opt stack 0
  3122  00006C                     enc424j600_setERXDATAReadPointer@opcode:
  3123                           	opt stack 0
  3124  00006C                     ___lldiv@counter:
  3125                           	opt stack 0
  3126  00006C                     enc424j600_updateReceiveStatusVector@receiveStatusVector:
  3127                           	opt stack 0
  3128                           
  3129                           ; 5 bytes @ 0xC
  3130  00006C                     	ds	1
  3131  00006D                     ??_arp_checkForEntry:
  3132  00006D                     enc424j600_writeControlRegisterUnbanked@opcode:
  3133                           	opt stack 0
  3134  00006D                     enc424j600_readControlRegisterUnbanked@opcode:
  3135                           	opt stack 0
  3136  00006D                     enc424j600_setGPDATAWritePointer@lowByte:
  3137                           	opt stack 0
  3138  00006D                     enc424j600_setERXDATAReadPointer@lowByte:
  3139                           	opt stack 0
  3140  00006D                     ultoa@buf:
  3141                           	opt stack 0
  3142  00006D                     icmp_calculateChecksumBuf@sum:
  3143                           	opt stack 0
  3144                           
  3145                           ; 4 bytes @ 0xD
  3146  00006D                     	ds	1
  3147  00006E                     ??_enc424j600_clearInterruptFlag:
  3148  00006E                     ?_enc424j600_getInterruptFlags:
  3149                           	opt stack 0
  3150  00006E                     ?___awmod:
  3151                           	opt stack 0
  3152  00006E                     ?___lwmod:
  3153                           	opt stack 0
  3154  00006E                     ?_ethernetController_softReset:
  3155                           	opt stack 0
  3156  00006E                     ?_ethernetController_checkDeviceId:
  3157                           	opt stack 0
  3158  00006E                     ?_ethernetController_getMacAddress:
  3159                           	opt stack 0
  3160  00006E                     ethernetController_setLEDConfig@conf:
  3161                           	opt stack 0
  3162  00006E                     enc424j600_getPacketCount@lowByte:
  3163                           	opt stack 0
  3164  00006E                     enc424j600_setGPDATAWritePointer@highByte:
  3165                           	opt stack 0
  3166  00006E                     enc424j600_setERXDATAReadPointer@highByte:
  3167                           	opt stack 0
  3168  00006E                     enc424j600_enableAutoMACInsertion@temp:
  3169                           	opt stack 0
  3170  00006E                     enc424j600_readPHYRegister@data:
  3171                           	opt stack 0
  3172  00006E                     enc424j600_setTXLength@len:
  3173                           	opt stack 0
  3174  00006E                     enc424j600_setTXStartAddress@addr:
  3175                           	opt stack 0
  3176  00006E                     enc424j600_setRXBufferStartAddress@addr:
  3177                           	opt stack 0
  3178  00006E                     enc424j600_setRXTailPointer@addr:
  3179                           	opt stack 0
  3180  00006E                     ___awmod@dividend:
  3181                           	opt stack 0
  3182  00006E                     ___lwmod@dividend:
  3183                           	opt stack 0
  3184                           
  3185                           ; 2 bytes @ 0xE
  3186  00006E                     	ds	1
  3187  00006F                     ??_ethernetController_updateNextPacketPointer:
  3188  00006F                     ?_ethernetController_getEtherTypeField:
  3189                           	opt stack 0
  3190  00006F                     ?_ethernetController_getSourceMACAddress:
  3191                           	opt stack 0
  3192  00006F                     ethernetController_setLEDConfig@LED:
  3193                           	opt stack 0
  3194  00006F                     ethernetController_writeEtherTypeFieldToBuffer@ethtype:
  3195                           	opt stack 0
  3196  00006F                     ethernetController_streamFromRXBuffer@startAddress:
  3197                           	opt stack 0
  3198  00006F                     ipv4_checkHeaderChecksum@header:
  3199                           	opt stack 0
  3200  00006F                     ultoa@val:
  3201                           	opt stack 0
  3202  00006F                     ethernetController_writeDestinationMACAddress@addr:
  3203                           	opt stack 0
  3204  00006F                     ethernetController_streamToTransmitBuffer@field:
  3205                           	opt stack 0
  3206  00006F                     ethernetController_getSourceMACAddress@field:
  3207                           	opt stack 0
  3208  00006F                     ethernetController_getEtherTypeField@field:
  3209                           	opt stack 0
  3210                           
  3211                           ; 9 bytes @ 0xF
  3212  00006F                     	ds	1
  3213  000070                     ??_enc424j600_getInterruptFlags:
  3214  000070                     ??_enc424j600_readPHYRegister:
  3215  000070                     ethernetController_setLEDConfig@data:
  3216                           	opt stack 0
  3217  000070                     enc424j600_setTXLength@lowByte:
  3218                           	opt stack 0
  3219  000070                     enc424j600_setTXStartAddress@lowByte:
  3220                           	opt stack 0
  3221  000070                     enc424j600_setRXBufferStartAddress@lowByte:
  3222                           	opt stack 0
  3223  000070                     enc424j600_setRXTailPointer@lowByte:
  3224                           	opt stack 0
  3225  000070                     enc424j600_clearInterruptFlag@flag:
  3226                           	opt stack 0
  3227  000070                     ___awmod@divisor:
  3228                           	opt stack 0
  3229  000070                     ___lwmod@divisor:
  3230                           	opt stack 0
  3231                           
  3232                           ; 2 bytes @ 0x10
  3233  000070                     	ds	1
  3234  000071                     ??_ethernetController_softReset:
  3235  000071                     ?_ethernetController_getRSV:
  3236                           	opt stack 0
  3237  000071                     ethernetController_checkDeviceId@data:
  3238                           	opt stack 0
  3239  000071                     ethernetController_streamFromRXBuffer@startEnd:
  3240                           	opt stack 0
  3241  000071                     enc424j600_setTXLength@highByte:
  3242                           	opt stack 0
  3243  000071                     enc424j600_setTXStartAddress@highByte:
  3244                           	opt stack 0
  3245  000071                     enc424j600_setRXBufferStartAddress@highByte:
  3246                           	opt stack 0
  3247  000071                     enc424j600_setRXTailPointer@highByte:
  3248                           	opt stack 0
  3249  000071                     enc424j600_clearInterruptFlag@temp:
  3250                           	opt stack 0
  3251  000071                     ethernetController_getRSV@address:
  3252                           	opt stack 0
  3253  000071                     ethernetController_writeEtherTypeFieldToBuffer@field:
  3254                           	opt stack 0
  3255                           
  3256                           ; 9 bytes @ 0x11
  3257  000071                     	ds	1
  3258  000072                     ?_ethernetController_dropPacket:
  3259                           	opt stack 0
  3260  000072                     ethernetController_softReset@comFailCount:
  3261                           	opt stack 0
  3262  000072                     ethernetController_clearInterruptFlag@flag:
  3263                           	opt stack 0
  3264  000072                     ethernetController_streamFromRXBuffer@opcode:
  3265                           	opt stack 0
  3266  000072                     ___awmod@counter:
  3267                           	opt stack 0
  3268  000072                     ___lwmod@counter:
  3269                           	opt stack 0
  3270  000072                     ethernetController_checkDeviceId@err:
  3271                           	opt stack 0
  3272  000072                     ethernetController_sendPacket@field:
  3273                           	opt stack 0
  3274  000072                     checkForOverlap@a:
  3275                           	opt stack 0
  3276                           
  3277                           ; 9 bytes @ 0x12
  3278  000072                     	ds	1
  3279  000073                     ?_ipAdressToString:
  3280                           	opt stack 0
  3281  000073                     ethernetController_streamFromRXBuffer@temp:
  3282                           	opt stack 0
  3283  000073                     ___awmod@sign:
  3284                           	opt stack 0
  3285  000073                     ethernetController_softReset@dataToSend:
  3286                           	opt stack 0
  3287  000073                     ultoa@base:
  3288                           	opt stack 0
  3289  000073                     ipAdressToString@ip:
  3290                           	opt stack 0
  3291  000073                     ipv4_checkHeaderChecksum@testHeader:
  3292                           	opt stack 0
  3293                           
  3294                           ; 23 bytes @ 0x13
  3295  000073                     	ds	1
  3296  000074                     ?_icmp_calculateChecksum:
  3297                           	opt stack 0
  3298  000074                     ?_ipv4_generateAutoIP:
  3299                           	opt stack 0
  3300  000074                     ?_ipv4_parseHeader:
  3301                           	opt stack 0
  3302  000074                     ?_arp_parseFromRXBuffer:
  3303                           	opt stack 0
  3304  000074                     arp_parseFromRXBuffer@frame:
  3305                           	opt stack 0
  3306  000074                     ipv4_parseHeader@field:
  3307                           	opt stack 0
  3308  000074                     ethernetController_getMacAddress@mac:
  3309                           	opt stack 0
  3310  000074                     icmp_parseHeader@ipPayload:
  3311                           	opt stack 0
  3312  000074                     icmp_calculateChecksum@ipPayload:
  3313                           	opt stack 0
  3314                           
  3315                           ; 9 bytes @ 0x14
  3316  000074                     	ds	1
  3317  000075                     arp_checkForEntry@i:
  3318                           	opt stack 0
  3319  000075                     ethernetController_softReset@receivedData:
  3320                           	opt stack 0
  3321  000075                     ethernetController_updateNextPacketPointer@nextPktPointer:
  3322                           	opt stack 0
  3323  000075                     ultoa@v:
  3324                           	opt stack 0
  3325  000075                     ethernetController_writeDestinationMACAddress@field:
  3326                           	opt stack 0
  3327                           
  3328                           ; 9 bytes @ 0x15
  3329  000075                     	ds	1
  3330  000076                     ethernetController_getRSV@opcode:
  3331                           	opt stack 0
  3332  000076                     enc424j600_readPHYRegister@addr:
  3333                           	opt stack 0
  3334  000076                     enc424j600_getInterruptFlags@low:
  3335                           	opt stack 0
  3336                           
  3337                           ; 1 bytes @ 0x16
  3338  000076                     	ds	1
  3339  000077                     ??_ipAdressToString:
  3340  000077                     ethernetController_getRSV@i:
  3341                           	opt stack 0
  3342  000077                     ethernetController_updateNextPacketPointer@opcode:
  3343                           	opt stack 0
  3344  000077                     enc424j600_readPHYRegister@PHYaddress:
  3345                           	opt stack 0
  3346  000077                     enc424j600_getInterruptFlags@high:
  3347                           	opt stack 0
  3348  000077                     ipv4_writeHeaderIntoBuffer@ptr:
  3349                           	opt stack 0
  3350  000077                     ethernetController_softReset@err:
  3351                           	opt stack 0
  3352                           
  3353                           ; 3 bytes @ 0x17
  3354  000077                     	ds	1
  3355  000078                     ??_ethernetController_streamToTransmitBuffer:
  3356  000078                     ??_ethernetController_getEtherTypeField:
  3357  000078                     ?_ethernetController_pollInterruptFlags:
  3358                           	opt stack 0
  3359  000078                     ethernetController_getSourceMACAddress@opcode:
  3360                           	opt stack 0
  3361  000078                     ethernetController_updateNextPacketPointer@newPointerL:
  3362                           	opt stack 0
  3363  000078                     enc424j600_readPHYRegister@unusedBits:
  3364                           	opt stack 0
  3365  000078                     ipv4_generateAutoIP@ip:
  3366                           	opt stack 0
  3367                           
  3368                           ; 4 bytes @ 0x18
  3369  000078                     	ds	1
  3370  000079                     ??_ipv4_writeHeaderIntoBuffer:
  3371  000079                     ethernetController_updateNextPacketPointer@newPointerH:
  3372                           	opt stack 0
  3373  000079                     ultoa@c:
  3374                           	opt stack 0
  3375  000079                     enc424j600_readPHYRegister@timeoutCounter:
  3376                           	opt stack 0
  3377  000079                     ethernetController_getSourceMACAddress@sourceAddress:
  3378                           	opt stack 0
  3379                           
  3380                           ; 6 bytes @ 0x19
  3381  000079                     	ds	1
  3382  00007A                     ??_ethernetController_pollInterruptFlags:
  3383  00007A                     ?_macToString:
  3384                           	opt stack 0
  3385  00007A                     ?_ethernetController_init:
  3386                           	opt stack 0
  3387  00007A                     ethernetController_writeEtherTypeFieldToBuffer@lowByte:
  3388                           	opt stack 0
  3389  00007A                     ltoa@buf:
  3390                           	opt stack 0
  3391  00007A                     srand@x:
  3392                           	opt stack 0
  3393  00007A                     macToString@addr:
  3394                           	opt stack 0
  3395                           
  3396                           ; 6 bytes @ 0x1A
  3397  00007A                     	ds	1
  3398  00007B                     ethernetController_writeEtherTypeFieldToBuffer@highByte:
  3399                           	opt stack 0
  3400  00007B                     ipAdressToString@ones:
  3401                           	opt stack 0
  3402  00007B                     checkForOverlap@b:
  3403                           	opt stack 0
  3404                           
  3405                           ; 9 bytes @ 0x1B
  3406  00007B                     	ds	1
  3407  00007C                     ethernetController_streamToTransmitBuffer@data:
  3408                           	opt stack 0
  3409  00007C                     ethernetController_writeEtherTypeFieldToBuffer@opcode:
  3410                           	opt stack 0
  3411  00007C                     ethernetController_getEtherTypeField@ethertype:
  3412                           	opt stack 0
  3413  00007C                     ltoa@val:
  3414                           	opt stack 0
  3415                           
  3416                           ; 4 bytes @ 0x1C
  3417  00007C                     	ds	1
  3418  00007D                     ??_icmp_calculateChecksum:
  3419  00007D                     ethernetController_streamToTransmitBuffer@opcode:
  3420                           	opt stack 0
  3421  00007D                     enc424j600_readPHYRegister@lowByte:
  3422                           	opt stack 0
  3423  00007D                     icmp_parseHeader@icmpHeader:
  3424                           	opt stack 0
  3425  00007D                     ethernetController_init@err:
  3426                           	opt stack 0
  3427                           
  3428                           ; 3 bytes @ 0x1D
  3429  00007D                     	ds	1
  3430  00007E                     ethernetController_getEtherTypeField@opcode:
  3431                           	opt stack 0
  3432  00007E                     enc424j600_readPHYRegister@highByte:
  3433                           	opt stack 0
  3434  00007E                     ethernetController_pollInterruptFlags@flags:
  3435                           	opt stack 0
  3436  00007E                     ethernetController_writeDestinationMACAddress@data:
  3437                           	opt stack 0
  3438  00007E                     ipv4_streamToTransmissionBuffer@packet:
  3439                           	opt stack 0
  3440                           
  3441                           ; 66 bytes @ 0x1E
  3442  00007E                     	ds	1
  3443  00007F                     ??_icmp_parseHeader:
  3444  00007F                     ethernetController_getSourceMACAddress@temp:
  3445                           	opt stack 0
  3446  00007F                     ethernetController_getEtherTypeField@lowByte:
  3447                           	opt stack 0
  3448  00007F                     enc424j600_readPHYRegister@temp:
  3449                           	opt stack 0
  3450  00007F                     ipAdressToString@tens:
  3451                           	opt stack 0
  3452                           
  3453                           ; 4 bytes @ 0x1F
  3454  00007F                     	ds	1
  3455  000080                     ??_macToString:
  3456  000080                     ethernetController_getSourceMACAddress@i:
  3457                           	opt stack 0
  3458  000080                     ethernetController_getEtherTypeField@highByte:
  3459                           	opt stack 0
  3460  000080                     ethernetController_pollInterruptFlags@reg:
  3461                           	opt stack 0
  3462  000080                     ethernetController_updateLinkStatus@state:
  3463                           	opt stack 0
  3464  000080                     ltoa@base:
  3465                           	opt stack 0
  3466                           
  3467                           ; 2 bytes @ 0x20
  3468  000080                     	ds	1
  3469  000081                     icmp_calculateChecksum@carry:
  3470                           	opt stack 0
  3471  000081                     macToString@address:
  3472                           	opt stack 0
  3473                           
  3474                           ; 18 bytes @ 0x21
  3475  000081                     	ds	1
  3476  000082                     ethernetController_updateLinkStatus@temp:
  3477                           	opt stack 0
  3478  000082                     icmp_calculateChecksum@foo:
  3479                           	opt stack 0
  3480  000082                     ltoa@cp:
  3481                           	opt stack 0
  3482                           
  3483                           ; 2 bytes @ 0x22
  3484  000082                     	ds	1
  3485  000083                     ethernetController_updateLinkStatus@temp16:
  3486                           	opt stack 0
  3487  000083                     ipAdressToString@hundreds:
  3488                           	opt stack 0
  3489                           
  3490                           ; 4 bytes @ 0x23
  3491  000083                     	ds	1
  3492  000084                     ?_intToString:
  3493                           	opt stack 0
  3494  000084                     ?_memory_txFrameRequest:
  3495                           	opt stack 0
  3496  000084                     ethernetController_writeDestinationMACAddress@opcode:
  3497                           	opt stack 0
  3498  000084                     memory_txFrameRequest@length:
  3499                           	opt stack 0
  3500  000084                     icmp_calculateChecksum@i:
  3501                           	opt stack 0
  3502  000084                     intToString@val:
  3503                           	opt stack 0
  3504                           
  3505                           ; 4 bytes @ 0x24
  3506  000084                     	ds	1
  3507  000085                     ethernetController_writeDestinationMACAddress@i_638:
  3508                           	opt stack 0
  3509                           
  3510                           ; 1 bytes @ 0x25
  3511  000085                     	ds	1
  3512  000086                     ethernetController_writeDestinationMACAddress@i:
  3513                           	opt stack 0
  3514  000086                     icmp_calculateChecksum@sum:
  3515                           	opt stack 0
  3516                           
  3517                           ; 4 bytes @ 0x26
  3518  000086                     	ds	1
  3519  000087                     ipAdressToString@pointer:
  3520                           	opt stack 0
  3521                           
  3522                           ; 1 bytes @ 0x27
  3523  000087                     	ds	1
  3524  000088                     ipAdressToString@i:
  3525                           	opt stack 0
  3526                           
  3527                           ; 1 bytes @ 0x28
  3528  000088                     	ds	3
  3529  00008B                     ??_ipv4_parseHeader:
  3530                           
  3531                           ; 1 bytes @ 0x2B
  3532  00008B                     	ds	1
  3533  00008C                     ipv4_parseHeader@i:
  3534                           	opt stack 0
  3535                           
  3536                           ; 1 bytes @ 0x2C
  3537  00008C                     	ds	1
  3538  00008D                     ??_memory_txFrameRequest:
  3539  00008D                     ipv4_parseHeader@i_3863:
  3540                           	opt stack 0
  3541                           
  3542                           ; 1 bytes @ 0x2D
  3543  00008D                     	ds	1
  3544  00008E                     ipv4_parseHeader@temp:
  3545                           	opt stack 0
  3546                           
  3547                           ; 1 bytes @ 0x2E
  3548  00008E                     	ds	1
  3549  00008F                     ipv4_parseHeader@ip:
  3550                           	opt stack 0
  3551                           
  3552                           ; 23 bytes @ 0x2F
  3553  00008F                     	ds	4
  3554  000093                     macToString@firstDigit:
  3555                           	opt stack 0
  3556  000093                     _memory_txFrameRequest$1179:
  3557                           	opt stack 0
  3558                           
  3559                           ; 2 bytes @ 0x33
  3560  000093                     	ds	1
  3561  000094                     ??_arp_parseFromRXBuffer:
  3562  000094                     macToString@secondDigit:
  3563                           	opt stack 0
  3564                           
  3565                           ; 1 bytes @ 0x34
  3566  000094                     	ds	1
  3567  000095                     memory_txFrameRequest@fNoOverlapMarker:
  3568                           	opt stack 0
  3569  000095                     macToString@i:
  3570                           	opt stack 0
  3571                           
  3572                           ; 2 bytes @ 0x35
  3573  000095                     	ds	1
  3574  000096                     memory_txFrameRequest@i:
  3575                           	opt stack 0
  3576                           
  3577                           ; 1 bytes @ 0x36
  3578  000096                     	ds	1
  3579  000097                     memory_txFrameRequest@i_1183:
  3580                           	opt stack 0
  3581  000097                     macToString@j:
  3582                           	opt stack 0
  3583  000097                     arp_parseFromRXBuffer@i:
  3584                           	opt stack 0
  3585                           
  3586                           ; 1 bytes @ 0x37
  3587  000097                     	ds	1
  3588  000098                     arp_parseFromRXBuffer@i_3215:
  3589                           	opt stack 0
  3590  000098                     UARTTransmitText@str:
  3591                           	opt stack 0
  3592  000098                     memory_txFrameRequest@field:
  3593                           	opt stack 0
  3594                           
  3595                           ; 9 bytes @ 0x38
  3596  000098                     	ds	1
  3597  000099                     arp_parseFromRXBuffer@i_3216:
  3598                           	opt stack 0
  3599                           
  3600                           ; 1 bytes @ 0x39
  3601  000099                     	ds	1
  3602  00009A                     arp_parseFromRXBuffer@i_3217:
  3603                           	opt stack 0
  3604  00009A                     printErrorMessage@err:
  3605                           	opt stack 0
  3606  00009A                     UARTTransmitInt@val:
  3607                           	opt stack 0
  3608  00009A                     arp_setNewEntry@mac:
  3609                           	opt stack 0
  3610  00009A                     printEthernetState@state:
  3611                           	opt stack 0
  3612                           
  3613                           ; 15 bytes @ 0x3A
  3614  00009A                     	ds	1
  3615  00009B                     arp_parseFromRXBuffer@offset:
  3616                           	opt stack 0
  3617                           
  3618                           ; 2 bytes @ 0x3B
  3619  00009B                     	ds	2
  3620  00009D                     ??_printErrorMessage:
  3621  00009D                     arp_parseFromRXBuffer@arp:
  3622                           	opt stack 0
  3623                           
  3624                           ; 32 bytes @ 0x3D
  3625  00009D                     	ds	1
  3626  00009E                     
  3627                           ; 1 bytes @ 0x3E
  3628  00009E                     	ds	2
  3629  0000A0                     arp_setNewEntry@ip:
  3630                           	opt stack 0
  3631                           
  3632                           ; 4 bytes @ 0x40
  3633  0000A0                     	ds	1
  3634  0000A1                     memory_txFrameRequest@freeIndex:
  3635                           	opt stack 0
  3636                           
  3637                           ; 1 bytes @ 0x41
  3638  0000A1                     	ds	1
  3639  0000A2                     ethernet_txFrameRequest@frame:
  3640                           	opt stack 0
  3641                           
  3642                           ; 2 bytes @ 0x42
  3643  0000A2                     	ds	2
  3644  0000A4                     ethernet_txFrameRequest@err:
  3645                           	opt stack 0
  3646  0000A4                     arp_setNewEntry@timestamp:
  3647                           	opt stack 0
  3648                           
  3649                           ; 4 bytes @ 0x44
  3650  0000A4                     	ds	3
  3651  0000A7                     ipv4_txFrameRequest@packet:
  3652                           	opt stack 0
  3653  0000A7                     arp_send@arp:
  3654                           	opt stack 0
  3655                           
  3656                           ; 32 bytes @ 0x47
  3657  0000A7                     	ds	1
  3658  0000A8                     
  3659                           ; 1 bytes @ 0x48
  3660  0000A8                     	ds	1
  3661  0000A9                     ??_ipv4_txFrameRequest:
  3662                           
  3663                           ; 1 bytes @ 0x49
  3664  0000A9                     	ds	3
  3665  0000AC                     arp_setNewEntry@maxSeconds:
  3666                           	opt stack 0
  3667                           
  3668                           ; 4 bytes @ 0x4C
  3669  0000AC                     	ds	4
  3670  0000B0                     arp_setNewEntry@oldestIndex:
  3671                           	opt stack 0
  3672                           
  3673                           ; 1 bytes @ 0x50
  3674  0000B0                     	ds	1
  3675  0000B1                     arp_setNewEntry@i:
  3676                           	opt stack 0
  3677                           
  3678                           ; 1 bytes @ 0x51
  3679  0000B1                     	ds	1
  3680  0000B2                     arp_init@mac:
  3681                           	opt stack 0
  3682                           
  3683                           ; 6 bytes @ 0x52
  3684  0000B2                     	ds	6
  3685  0000B8                     arp_init@ip:
  3686                           	opt stack 0
  3687                           
  3688                           ; 4 bytes @ 0x58
  3689  0000B8                     	ds	4
  3690  0000BC                     arp_init@i:
  3691                           	opt stack 0
  3692                           
  3693                           ; 1 bytes @ 0x5C
  3694  0000BC                     	ds	1
  3695  0000BD                     
  3696                           ; 1 bytes @ 0x5D
  3697  0000BD                     	ds	3
  3698  0000C0                     ipv4_streamToTransmissionBuffer@data:
  3699                           	opt stack 0
  3700                           
  3701                           ; 1 bytes @ 0x60
  3702  0000C0                     	ds	1
  3703  0000C1                     icmp_sendEchoReply@ipHeader:
  3704                           	opt stack 0
  3705                           
  3706                           ; 23 bytes @ 0x61
  3707  0000C1                     	ds	6
  3708  0000C7                     arp_send@destination:
  3709                           	opt stack 0
  3710                           
  3711                           ; 6 bytes @ 0x67
  3712  0000C7                     	ds	6
  3713  0000CD                     arp_send@i:
  3714                           	opt stack 0
  3715                           
  3716                           ; 1 bytes @ 0x6D
  3717  0000CD                     	ds	1
  3718  0000CE                     arp_send@i_3290:
  3719                           	opt stack 0
  3720                           
  3721                           ; 1 bytes @ 0x6E
  3722  0000CE                     	ds	1
  3723  0000CF                     arp_send@i_3291:
  3724                           	opt stack 0
  3725                           
  3726                           ; 1 bytes @ 0x6F
  3727  0000CF                     	ds	1
  3728  0000D0                     arp_send@i_3292:
  3729                           	opt stack 0
  3730                           
  3731                           ; 1 bytes @ 0x70
  3732  0000D0                     	ds	1
  3733  0000D1                     arp_send@ethFrame:
  3734                           	opt stack 0
  3735                           
  3736                           ; 34 bytes @ 0x71
  3737  0000D1                     	ds	7
  3738  0000D8                     icmp_sendEchoReply@icmpRequestHeader:
  3739                           	opt stack 0
  3740                           
  3741                           ; 8 bytes @ 0x78
  3742  0000D8                     	ds	8
  3743  0000E0                     icmp_sendEchoReply@ipPayload:
  3744                           	opt stack 0
  3745                           
  3746                           ; 9 bytes @ 0x80
  3747  0000E0                     	ds	9
  3748  0000E9                     ??_icmp_sendEchoReply:
  3749                           
  3750                           ; 1 bytes @ 0x89
  3751  0000E9                     	ds	4
  3752  0000ED                     ??_icmp_handleNewPacket:
  3753                           
  3754                           ; 1 bytes @ 0x8D
  3755  0000ED                     	ds	4
  3756  0000F1                     icmp_handleNewPacket@icmpHeader:
  3757                           	opt stack 0
  3758                           
  3759                           ; 8 bytes @ 0x91
  3760  0000F1                     	ds	2
  3761  0000F3                     arp_send@field:
  3762                           	opt stack 0
  3763                           
  3764                           ; 9 bytes @ 0x93
  3765  0000F3                     	ds	6
  3766  0000F9                     ??_ipv4_handleNewPacket:
  3767                           
  3768                           ; 1 bytes @ 0x99
  3769  0000F9                     	ds	3
  3770  0000FC                     arp_gratuitous@index:
  3771                           	opt stack 0
  3772  0000FC                     ipv4_sendFrame@index:
  3773                           	opt stack 0
  3774  0000FC                     arp_handleNewPacket@frame:
  3775                           	opt stack 0
  3776                           
  3777                           ; 2 bytes @ 0x9C
  3778  0000FC                     	ds	1
  3779  0000FD                     arp_gratuitous@err:
  3780                           	opt stack 0
  3781  0000FD                     ipv4_sendFrame@err:
  3782                           	opt stack 0
  3783                           
  3784                           ; 3 bytes @ 0x9D
  3785  0000FD                     	ds	1
  3786  0000FE                     
  3787                           ; 1 bytes @ 0x9E
  3788  0000FE                     	ds	2
  3789                           tblptru	equ	0xFF8
  3790                           tblptrh	equ	0xFF7
  3791                           tblptrl	equ	0xFF6
  3792                           tablat	equ	0xFF5
  3793                           postinc0	equ	0xFEE
  3794                           wreg	equ	0xFE8
  3795                           postdec1	equ	0xFE5
  3796                           fsr1l	equ	0xFE1
  3797                           
  3798                           	psect	cstackCOMRAM
  3799  000001                     __pcstackCOMRAM:
  3800                           	opt stack 0
  3801  000001                     ?i2___lwdiv:
  3802                           	opt stack 0
  3803  000001                     buttonHandler@state:
  3804                           	opt stack 0
  3805  000001                     i2___lwdiv@dividend:
  3806                           	opt stack 0
  3807                           
  3808                           ; 2 bytes @ 0x0
  3809  000001                     	ds	2
  3810  000003                     i2___lwdiv@divisor:
  3811                           	opt stack 0
  3812  000003                     buttonHandler@resetValue:
  3813                           	opt stack 0
  3814                           
  3815                           ; 4 bytes @ 0x2
  3816  000003                     	ds	2
  3817  000005                     i2___lwdiv@quotient:
  3818                           	opt stack 0
  3819                           
  3820                           ; 2 bytes @ 0x4
  3821  000005                     	ds	2
  3822  000007                     i2___lwdiv@counter:
  3823                           	opt stack 0
  3824  000007                     buttonHandler@debounceValue:
  3825                           	opt stack 0
  3826                           
  3827                           ; 4 bytes @ 0x6
  3828  000007                     	ds	1
  3829  000008                     parseNumber@numberToDisplay:
  3830                           	opt stack 0
  3831                           
  3832                           ; 2 bytes @ 0x7
  3833  000008                     	ds	2
  3834  00000A                     parseNumber@digit:
  3835                           	opt stack 0
  3836                           
  3837                           ; 1 bytes @ 0x9
  3838  00000A                     	ds	1
  3839  00000B                     ??_parseNumber:
  3840                           
  3841                           ; 1 bytes @ 0xA
  3842  00000B                     	ds	1
  3843  00000C                     parseNumber@ones:
  3844                           	opt stack 0
  3845                           
  3846                           ; 1 bytes @ 0xB
  3847  00000C                     	ds	1
  3848  00000D                     parseNumber@tens:
  3849                           	opt stack 0
  3850                           
  3851                           ; 1 bytes @ 0xC
  3852  00000D                     	ds	1
  3853  00000E                     parseNumber@hundreds:
  3854                           	opt stack 0
  3855                           
  3856                           ; 1 bytes @ 0xD
  3857  00000E                     	ds	1
  3858  00000F                     sevenSegmentUpdate@numberToDisplay:
  3859                           	opt stack 0
  3860                           
  3861                           ; 2 bytes @ 0xE
  3862  00000F                     	ds	2
  3863  000011                     ??_sevenSegmentUpdate:
  3864                           
  3865                           ; 1 bytes @ 0x10
  3866  000011                     	ds	2
  3867  000013                     _sevenSegmentUpdate$2675:
  3868                           	opt stack 0
  3869                           
  3870                           ; 2 bytes @ 0x12
  3871  000013                     	ds	2
  3872  000015                     sevenSegmentUpdate@i:
  3873                           	opt stack 0
  3874                           
  3875                           ; 1 bytes @ 0x14
  3876  000015                     	ds	1
  3877  000016                     ??_ISR:
  3878                           
  3879                           ; 1 bytes @ 0x15
  3880  000016                     	ds	19
  3881                           tblptru	equ	0xFF8
  3882                           tblptrh	equ	0xFF7
  3883                           tblptrl	equ	0xFF6
  3884                           tablat	equ	0xFF5
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1l	equ	0xFE1
  3889                           
  3890 ;;
  3891 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3892 ;;
  3893 ;; *************** function _main *****************
  3894 ;; Defined at:
  3895 ;;		line 34 in file "src/system/main.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  i               2   41[BANK4 ] unsigned int 
  3900 ;;  headerBuf      32    4[BANK4 ] unsigned char [32]
  3901 ;;  ipDst           4   43[BANK4 ] struct ipv4_address
  3902 ;;  prescaler       4    0[BANK4 ] unsigned long 
  3903 ;;  err             3   38[BANK4 ] struct error
  3904 ;;  oldState        1    0        unsigned char 
  3905 ;; Return value:  Size  Location     Type
  3906 ;;                  1    wreg      void 
  3907 ;; Registers used:
  3908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3909 ;; Tracked objects:
  3910 ;;		On entry : 0/0
  3911 ;;		On exit  : 0/0
  3912 ;;		Unchanged: 0/0
  3913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3914 ;;      Params:         0       0       0       0       0       0       0       0       0
  3915 ;;      Locals:         0       0       0       0       0      47       0       0       0
  3916 ;;      Temps:          0       0       0       2       0       0       0       0       0
  3917 ;;      Totals:         0       0       0       2       0      47       0       0       0
  3918 ;;Total ram usage:       49 bytes
  3919 ;; Hardware stack levels required when called:   15
  3920 ;; This function calls:
  3921 ;;		_UARTInit
  3922 ;;		_UARTTransmitText
  3923 ;;		_ethernetController_checkDeviceId
  3924 ;;		_ethernetController_getCurrentPacketCount
  3925 ;;		_ethernetController_getDeviceName
  3926 ;;		_ethernetController_getMacAddress
  3927 ;;		_ethernetController_init
  3928 ;;		_ethernetController_setLEDConfig
  3929 ;;		_handleStackBackgroundTasks
  3930 ;;		_ipv4_calculateHeaderChecksum
  3931 ;;		_ipv4_generateAutoIP
  3932 ;;		_ipv4_getIPSourceAddress
  3933 ;;		_ipv4_streamToTransmissionBuffer
  3934 ;;		_ipv4_txFrameRequest
  3935 ;;		_ipv4_writeHeaderIntoBuffer
  3936 ;;		_macToString
  3937 ;;		_printErrorMessage
  3938 ;;		_printEthernetState
  3939 ;;		_sevenSegmentInit
  3940 ;;		_srand
  3941 ;;		_stack_init
  3942 ;; This function is called by:
  3943 ;;		Startup code after reset
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text0
  3948  0017A2                     __ptext0:
  3949                           	opt stack 0
  3950  0017A2                     _main:
  3951                           	opt stack 16
  3952                           
  3953                           ;main.c: 37: OSCCONbits.SCS = 0b00;
  3954                           
  3955                           ;incstack = 0
  3956  0017A2  0EFC               	movlw	-4
  3957  0017A4  16D3               	andwf	4051,f,c	;volatile
  3958                           
  3959                           ;main.c: 38: OSCCONbits.IRCF = 0b1110;
  3960  0017A6  50D3               	movf	4051,w,c	;volatile
  3961  0017A8  0B8F               	andlw	-113
  3962  0017AA  0960               	iorlw	96
  3963  0017AC  6ED3               	movwf	4051,c	;volatile
  3964                           
  3965                           ;main.c: 39: OSCCON2bits.PLLEN = 0b1;
  3966  0017AE  88D2               	bsf	4050,4,c	;volatile
  3967                           
  3968                           ;main.c: 42: INTCONbits.GIE = 0;
  3969  0017B0  9EF2               	bcf	intcon,7,c	;volatile
  3970                           
  3971                           ;main.c: 43: INTCONbits.TMR0IE = 1;
  3972  0017B2  8AF2               	bsf	intcon,5,c	;volatile
  3973                           
  3974                           ;main.c: 44: INTCON3bits.INT2IE = 1;
  3975  0017B4  88F0               	bsf	intcon3,4,c	;volatile
  3976                           
  3977                           ;main.c: 45: RCIP = 0;
  3978  0017B6  9A9F               	bcf	3999,5,c	;volatile
  3979                           
  3980                           ;main.c: 46: RCIE = 1;
  3981  0017B8  8A9D               	bsf	3997,5,c	;volatile
  3982                           
  3983                           ;main.c: 47: INTCONbits.PEIE = 1;
  3984  0017BA  8CF2               	bsf	intcon,6,c	;volatile
  3985                           
  3986                           ;main.c: 51: T0CONbits.TMR0ON = 1;
  3987  0017BC  8ED5               	bsf	4053,7,c	;volatile
  3988                           
  3989                           ;main.c: 52: T0CONbits.T08BIT = 1;
  3990  0017BE  8CD5               	bsf	4053,6,c	;volatile
  3991                           
  3992                           ;main.c: 53: T0CONbits.T0CS = 0;
  3993  0017C0  9AD5               	bcf	4053,5,c	;volatile
  3994                           
  3995                           ;main.c: 54: T0CONbits.PSA = 0;
  3996  0017C2  96D5               	bcf	4053,3,c	;volatile
  3997                           
  3998                           ;main.c: 55: T0CONbits.T0PS = 0b101;
  3999  0017C4  50D5               	movf	4053,w,c	;volatile
  4000  0017C6  0BF8               	andlw	-8
  4001  0017C8  0905               	iorlw	5
  4002  0017CA  6ED5               	movwf	4053,c	;volatile
  4003                           
  4004                           ;main.c: 59: T1CONbits.TMR1ON = 1;
  4005  0017CC  80CD               	bsf	4045,0,c	;volatile
  4006                           
  4007                           ;main.c: 60: CCP1CONbits.CCP1M = 0b1011;
  4008  0017CE  50BD               	movf	4029,w,c	;volatile
  4009  0017D0  0BF0               	andlw	-16
  4010  0017D2  090B               	iorlw	11
  4011  0017D4  6EBD               	movwf	4029,c	;volatile
  4012                           
  4013                           ;main.c: 61: CCPR1 = 8000;
  4014  0017D6  0E1F               	movlw	31
  4015  0017D8  6EBF               	movwf	4031,c	;volatile
  4016  0017DA  0E40               	movlw	64
  4017  0017DC  6EBE               	movwf	4030,c	;volatile
  4018                           
  4019                           ;main.c: 62: PIE1bits.CCP1IE = 1;
  4020  0017DE  849D               	bsf	3997,2,c	;volatile
  4021                           
  4022                           ;main.c: 63: INTCONbits.PEIE = 1;
  4023  0017E0  8CF2               	bsf	intcon,6,c	;volatile
  4024                           
  4025                           ;main.c: 65: TRISBbits.RB6 = 0;
  4026  0017E2  9C93               	bcf	3987,6,c	;volatile
  4027                           
  4028                           ;main.c: 68: UARTInit();
  4029  0017E4  EC12  F031         	call	_UARTInit	;wreg free
  4030                           
  4031                           ;main.c: 69: sevenSegmentInit();
  4032  0017E8  ECAC  F030         	call	_sevenSegmentInit	;wreg free
  4033                           
  4034                           ;main.c: 70: _delay((unsigned long)((10)*(32000000UL/4000.0)));
  4035  0017EC  0E68               	movlw	104
  4036  0017EE  0102               	movlb	2	; () banked
  4037  0017F0  6FD6               	movwf	??_main& (0+255),b
  4038  0017F2  0EE4               	movlw	228
  4039  0017F4                     u14207:
  4040  0017F4  2EE8               	decfsz	wreg,f,c
  4041  0017F6  D7FE               	bra	u14207
  4042  0017F8  2FD6               	decfsz	??_main& (0+255),f,b
  4043  0017FA  D7FC               	bra	u14207
  4044  0017FC  F000               	nop	
  4045                           
  4046                           ;main.c: 71: UARTTransmitText("\x12");
  4047  0017FE  0EFB               	movlw	low STR_46
  4048  001800  0100               	movlb	0	; () banked
  4049  001802  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4050  001804  0E7F               	movlw	high STR_46
  4051  001806  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4052  001808  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4053                           
  4054                           ;main.c: 72: if (!RCONbits.TO) {
  4055  00180C  B6D0               	btfsc	4048,3,c	;volatile
  4056  00180E  D02A               	goto	l685
  4057                           
  4058                           ;main.c: 73: UARTTransmitText("\033[41;10;10m");
  4059  001810  0E17               	movlw	low STR_23
  4060  001812  0100               	movlb	0	; () banked
  4061  001814  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4062  001816  0E7F               	movlw	high STR_23
  4063  001818  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4064  00181A  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4065                           
  4066                           ;main.c: 74: UARTTransmitText("\a");
  4067  00181E  0EFD               	movlw	low STR_24
  4068  001820  0100               	movlb	0	; () banked
  4069  001822  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4070  001824  0E7F               	movlw	high STR_24
  4071  001826  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4072  001828  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4073                           
  4074                           ;main.c: 75: UARTTransmitText("\n\r------------------------------------------------\n\r"
      +                          );
  4075  00182C  0E01               	movlw	low STR_49
  4076  00182E  0100               	movlb	0	; () banked
  4077  001830  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4078  001832  0E7A               	movlw	high STR_49
  4079  001834  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4080  001836  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4081                           
  4082                           ;main.c: 76: UARTTransmitText("*** CRITICAL ERROR: WATCHDOG CAUSED RESET ***\n\r");
  4083  00183A  0E36               	movlw	low STR_50
  4084  00183C  0100               	movlb	0	; () banked
  4085  00183E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4086  001840  0E7A               	movlw	high STR_50
  4087  001842  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4088  001844  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4089                           
  4090                           ;main.c: 77: UARTTransmitText("------------------------------------------------");
  4091  001848  0E99               	movlw	low (STR_27+9)
  4092  00184A  0100               	movlb	0	; () banked
  4093  00184C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4094  00184E  0E79               	movlw	high (STR_27+9)
  4095  001850  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4096  001852  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4097                           
  4098                           ;main.c: 78: UARTTransmitText("\033[0m");
  4099  001856  0ED7               	movlw	low STR_7
  4100  001858  0100               	movlb	0	; () banked
  4101  00185A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4102  00185C  0E7F               	movlw	high STR_7
  4103  00185E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4104  001860  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4105  001864                     l685:
  4106                           
  4107                           ;main.c: 79: }
  4108                           ;main.c: 80: UARTTransmitText("\n\rFIRMWARE BUILD DATE IS ");
  4109  001864  0E04               	movlw	low STR_53
  4110  001866  0100               	movlb	0	; () banked
  4111  001868  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4112  00186A  0E7D               	movlw	high STR_53
  4113  00186C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4114  00186E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4115                           
  4116                           ;main.c: 81: UARTTransmitText("Apr 22 2019");
  4117  001872  0E0B               	movlw	low STR_54
  4118  001874  0100               	movlb	0	; () banked
  4119  001876  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4120  001878  0E7F               	movlw	high STR_54
  4121  00187A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4122  00187C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4123                           
  4124                           ;main.c: 82: UARTTransmitText(" ");
  4125  001880  0EED               	movlw	low (STR_32+1)
  4126  001882  0100               	movlb	0	; () banked
  4127  001884  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4128  001886  0E7F               	movlw	high (STR_32+1)
  4129  001888  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4130  00188A  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4131                           
  4132                           ;main.c: 83: UARTTransmitText("16:55:27");
  4133  00188E  0E8F               	movlw	low STR_56
  4134  001890  0100               	movlb	0	; () banked
  4135  001892  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4136  001894  0E7F               	movlw	high STR_56
  4137  001896  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4138  001898  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4139                           
  4140                           ;main.c: 84: UARTTransmitText(".\n\r");
  4141  00189C  0EC9               	movlw	low (STR_79+1)
  4142  00189E  0100               	movlb	0	; () banked
  4143  0018A0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4144  0018A2  0E7F               	movlw	high (STR_79+1)
  4145  0018A4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4146  0018A6  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4147                           
  4148                           ;main.c: 85: error_t err;
  4149                           ;main.c: 86: err = ethernetController_init();
  4150  0018AA  ECDB  F026         	call	_ethernetController_init	;wreg free
  4151  0018AE  C07A  F496         	movff	?_ethernetController_init,main@err
  4152  0018B2  C07B  F497         	movff	?_ethernetController_init+1,main@err+1
  4153  0018B6  C07C  F498         	movff	?_ethernetController_init+2,main@err+2
  4154                           
  4155                           ;main.c: 87: if (err.code != (uint16_t)0)
  4156  0018BA  0104               	movlb	4	; () banked
  4157  0018BC  5197               	movf	(main@err+1)& (0+255),w,b
  4158  0018BE  1198               	iorwf	(main@err+2)& (0+255),w,b
  4159  0018C0  B4D8               	btfsc	status,2,c
  4160  0018C2  D008               	goto	l686
  4161                           
  4162                           ; BSR set to: 4
  4163                           ;main.c: 88: printErrorMessage(err);
  4164  0018C4  C496  F09A         	movff	main@err,printErrorMessage@err
  4165  0018C8  C497  F09B         	movff	main@err+1,printErrorMessage@err+1
  4166  0018CC  C498  F09C         	movff	main@err+2,printErrorMessage@err+2
  4167  0018D0  EC19  F021         	call	_printErrorMessage	;wreg free
  4168  0018D4                     l686:
  4169                           
  4170                           ;main.c: 89: err = ethernetController_checkDeviceId();
  4171  0018D4  EC12  F02D         	call	_ethernetController_checkDeviceId	;wreg free
  4172  0018D8  C06E  F496         	movff	?_ethernetController_checkDeviceId,main@err
  4173  0018DC  C06F  F497         	movff	?_ethernetController_checkDeviceId+1,main@err+1
  4174  0018E0  C070  F498         	movff	?_ethernetController_checkDeviceId+2,main@err+2
  4175                           
  4176                           ;main.c: 90: if (err.code == (uint16_t)0) {
  4177  0018E4  0104               	movlb	4	; () banked
  4178  0018E6  5197               	movf	(main@err+1)& (0+255),w,b
  4179  0018E8  1198               	iorwf	(main@err+2)& (0+255),w,b
  4180  0018EA  A4D8               	btfss	status,2,c
  4181  0018EC  D00F               	goto	l687
  4182                           
  4183                           ; BSR set to: 4
  4184                           ;main.c: 91: UARTTransmitText(ethernetController_getDeviceName());
  4185  0018EE  EC4C  F030         	call	_ethernetController_getDeviceName	;wreg free
  4186  0018F2  C060  F098         	movff	?_ethernetController_getDeviceName,UARTTransmitText@str
  4187  0018F6  C061  F099         	movff	?_ethernetController_getDeviceName+1,UARTTransmitText@str+1
  4188  0018FA  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4189                           
  4190                           ;main.c: 92: UARTTransmitText(" detected. ");
  4191  0018FE  0EFF               	movlw	low STR_58
  4192  001900  0100               	movlb	0	; () banked
  4193  001902  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4194  001904  0E7E               	movlw	high STR_58
  4195  001906  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4196  001908  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4197  00190C                     l687:
  4198                           
  4199                           ;main.c: 93: }
  4200                           ;main.c: 94: UARTTransmitText("Source MAC address is ");
  4201  00190C  0E36               	movlw	low STR_59
  4202  00190E  0100               	movlb	0	; () banked
  4203  001910  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4204  001912  0E7D               	movlw	high STR_59
  4205  001914  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4206  001916  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4207                           
  4208                           ;main.c: 95: UARTTransmitText(macToString(ethernetController_getMacAddress()));
  4209  00191A  EC3B  F02A         	call	_ethernetController_getMacAddress	;wreg free
  4210  00191E  CFE9 FFD9          	movff	fsr0l,fsr2l
  4211  001922  CFEA FFDA          	movff	fsr0h,fsr2h
  4212  001926  EE00  F07A         	lfsr	0,macToString@addr
  4213  00192A  0E05               	movlw	5
  4214  00192C                     u14071:
  4215  00192C  CFDB FFEB          	movff	plusw2,plusw0
  4216  001930  06E8               	decf	wreg,f,c
  4217  001932  E2FC               	bc	u14071
  4218  001934  EC55  F023         	call	_macToString	;wreg free
  4219  001938  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  4220  00193C  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  4221  001940  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4222                           
  4223                           ;main.c: 96: UARTTransmitText(".\n\r");
  4224  001944  0EC9               	movlw	low (STR_79+1)
  4225  001946  0100               	movlb	0	; () banked
  4226  001948  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4227  00194A  0E7F               	movlw	high (STR_79+1)
  4228  00194C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4229  00194E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4230                           
  4231                           ;main.c: 97: UARTTransmitText("------------------------------------------------\n\r");
  4232  001952  0E03               	movlw	low (STR_49+2)
  4233  001954  0100               	movlb	0	; () banked
  4234  001956  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4235  001958  0E7A               	movlw	high (STR_49+2)
  4236  00195A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4237  00195C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4238                           
  4239                           ;main.c: 99: stack_init();
  4240  001960  EC35  F031         	call	_stack_init	;wreg free
  4241                           
  4242                           ;main.c: 101: ethernetController_setLEDConfig(LEDA, LED_ON);
  4243  001964  0E00               	movlw	0
  4244  001966  0100               	movlb	0	; () banked
  4245  001968  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4246  00196A  0E00               	movlw	0
  4247  00196C  EC7A  F027         	call	_ethernetController_setLEDConfig
  4248                           
  4249                           ;main.c: 102: ethernetController_setLEDConfig(LEDA, LED_ON);
  4250  001970  0E00               	movlw	0
  4251  001972  0100               	movlb	0	; () banked
  4252  001974  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4253  001976  0E00               	movlw	0
  4254  001978  EC7A  F027         	call	_ethernetController_setLEDConfig
  4255                           
  4256                           ;main.c: 103: _delay((unsigned long)((500)*(32000000UL/4000.0)));
  4257  00197C  0E15               	movlw	21
  4258  00197E  0102               	movlb	2	; () banked
  4259  001980  6FD7               	movwf	(??_main+1)& (0+255),b
  4260  001982  0E4B               	movlw	75
  4261  001984  6FD6               	movwf	??_main& (0+255),b
  4262  001986  0EBE               	movlw	190
  4263  001988                     u14217:
  4264  001988  2EE8               	decfsz	wreg,f,c
  4265  00198A  D7FE               	bra	u14217
  4266  00198C  2FD6               	decfsz	??_main& (0+255),f,b
  4267  00198E  D7FC               	bra	u14217
  4268  001990  2FD7               	decfsz	(??_main+1)& (0+255),f,b
  4269  001992  D7FA               	bra	u14217
  4270  001994  F000               	nop	
  4271                           
  4272                           ;main.c: 105: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4273  001996  0E01               	movlw	1
  4274  001998  0100               	movlb	0	; () banked
  4275  00199A  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4276  00199C  0E00               	movlw	0
  4277  00199E  EC7A  F027         	call	_ethernetController_setLEDConfig
  4278                           
  4279                           ;main.c: 106: ethernetController_setLEDConfig(LEDA, LED_OFF);
  4280  0019A2  0E01               	movlw	1
  4281  0019A4  0100               	movlb	0	; () banked
  4282  0019A6  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  4283  0019A8  0E00               	movlw	0
  4284  0019AA  EC7A  F027         	call	_ethernetController_setLEDConfig
  4285                           
  4286                           ;main.c: 109: uint32_t prescaler = 0;
  4287  0019AE  0E00               	movlw	0
  4288  0019B0  0104               	movlb	4	; () banked
  4289  0019B2  6F70               	movwf	main@prescaler& (0+255),b
  4290  0019B4  0E00               	movlw	0
  4291  0019B6  6F71               	movwf	(main@prescaler+1)& (0+255),b
  4292  0019B8  0E00               	movlw	0
  4293  0019BA  6F72               	movwf	(main@prescaler+2)& (0+255),b
  4294  0019BC  0E00               	movlw	0
  4295  0019BE  6F73               	movwf	(main@prescaler+3)& (0+255),b
  4296                           
  4297                           ; BSR set to: 4
  4298                           ;main.c: 111: ANSELB &= ~(1<<5);
  4299  0019C0  010F               	movlb	15	; () banked
  4300  0019C2  9B5C               	bcf	92,5,b	;volatile
  4301                           
  4302                           ; BSR set to: 15
  4303                           ;main.c: 112: TRISB |= (1<<5);
  4304  0019C4  8A93               	bsf	3987,5,c	;volatile
  4305                           
  4306                           ; BSR set to: 15
  4307                           ;main.c: 114: uint8_t oldState;
  4308                           ;main.c: 116: ipv4_address_t ipDst;
  4309                           ;main.c: 117: ipDst.address[0] = 169;
  4310  0019C6  0EA9               	movlw	169
  4311  0019C8  0104               	movlb	4	; () banked
  4312  0019CA  6F9B               	movwf	main@ipDst& (0+255),b
  4313                           
  4314                           ; BSR set to: 4
  4315                           ;main.c: 118: ipDst.address[1] = 254;
  4316  0019CC  0EFE               	movlw	254
  4317  0019CE  6F9C               	movwf	(main@ipDst+1)& (0+255),b
  4318                           
  4319                           ; BSR set to: 4
  4320                           ;main.c: 119: ipDst.address[2] = 108;
  4321  0019D0  0E6C               	movlw	108
  4322  0019D2  6F9D               	movwf	(main@ipDst+2)& (0+255),b
  4323                           
  4324                           ; BSR set to: 4
  4325                           ;main.c: 120: ipDst.address[3] = 135;
  4326  0019D4  0E87               	movlw	135
  4327  0019D6  6F9E               	movwf	(main@ipDst+3)& (0+255),b
  4328                           
  4329                           ; BSR set to: 4
  4330                           ;main.c: 123: INTCONbits.GIE = 1;
  4331  0019D8  8EF2               	bsf	intcon,7,c	;volatile
  4332                           
  4333                           ; BSR set to: 4
  4334                           ;main.c: 124: INTCONbits.PEIE = 1;
  4335  0019DA  8CF2               	bsf	intcon,6,c	;volatile
  4336                           
  4337                           ; BSR set to: 4
  4338                           ;main.c: 126: srand(ethernetController_getMacAddress().address[5]);
  4339  0019DC  EC3B  F02A         	call	_ethernetController_getMacAddress	;wreg free
  4340  0019E0  0E05               	movlw	5
  4341  0019E2  26E9               	addwf	fsr0l,f,c
  4342  0019E4  0E00               	movlw	0
  4343  0019E6  22EA               	addwfc	fsr0h,f,c
  4344  0019E8  50EF               	movf	indf0,w,c
  4345  0019EA  0102               	movlb	2	; () banked
  4346  0019EC  6FD6               	movwf	??_main& (0+255),b
  4347  0019EE  51D6               	movf	??_main& (0+255),w,b
  4348  0019F0  0100               	movlb	0	; () banked
  4349  0019F2  6F7A               	movwf	srand@x& (0+255),b
  4350  0019F4  6B7B               	clrf	(srand@x+1)& (0+255),b
  4351  0019F6  EC0A  F031         	call	_srand	;wreg free
  4352                           
  4353                           ;main.c: 127: stack.source = ipv4_generateAutoIP();
  4354  0019FA  EC86  F02D         	call	_ipv4_generateAutoIP	;wreg free
  4355  0019FE  C074  F3B9         	movff	?_ipv4_generateAutoIP,_stack+119
  4356  001A02  C075  F3BA         	movff	?_ipv4_generateAutoIP+1,_stack+120
  4357  001A06  C076  F3BB         	movff	?_ipv4_generateAutoIP+2,_stack+121
  4358  001A0A  C077  F3BC         	movff	?_ipv4_generateAutoIP+3,_stack+122
  4359  001A0E                     l692:
  4360  001A0E  0004               	clrwdt		;# 
  4361                           
  4362                           ;main.c: 135: handleStackBackgroundTasks(&stack);
  4363  001A10  0E42               	movlw	low _stack
  4364  001A12  0102               	movlb	2	; () banked
  4365  001A14  6FCA               	movwf	handleStackBackgroundTasks@stack& (0+255),b
  4366  001A16  0E03               	movlw	high _stack
  4367  001A18  6FCB               	movwf	(handleStackBackgroundTasks@stack+1)& (0+255),b
  4368  001A1A  EC76  F000         	call	_handleStackBackgroundTasks	;wreg free
  4369                           
  4370                           ;main.c: 137: printEthernetState(stack.ethernet);
  4371  001A1E  EE23  F064         	lfsr	2,_stack+34
  4372  001A22  EE00  F09A         	lfsr	0,printEthernetState@state
  4373  001A26  0E0E               	movlw	14
  4374  001A28                     u14081:
  4375  001A28  CFDB FFEB          	movff	plusw2,plusw0
  4376  001A2C  06E8               	decf	wreg,f,c
  4377  001A2E  E2FC               	bc	u14081
  4378  001A30  EC8A  F026         	call	_printEthernetState	;wreg free
  4379                           
  4380                           ;main.c: 138: numberToDisplay = (stack.ethernet.link == NO_LINK) ? 1000 : ethernetContro
      +                          ller_getCurrentPacketCount();
  4381  001A34  0103               	movlb	3	; () banked
  4382  001A36  5164               	movf	(_stack+34)& (0+255),w,b
  4383  001A38  B4D8               	btfsc	status,2,c
  4384  001A3A  D009               	goto	l694
  4385                           
  4386                           ; BSR set to: 3
  4387  001A3C  EC48  F031         	call	_ethernetController_getCurrentPacketCount	;wreg free
  4388  001A40  0102               	movlb	2	; () banked
  4389  001A42  6FD6               	movwf	??_main& (0+255),b
  4390  001A44  51D6               	movf	??_main& (0+255),w,b
  4391  001A46  0104               	movlb	4	; () banked
  4392  001A48  6F94               	movwf	_main$2589& (0+255),b
  4393  001A4A  6B95               	clrf	(_main$2589+1)& (0+255),b
  4394  001A4C  D005               	goto	l696
  4395  001A4E                     l694:
  4396                           
  4397                           ; BSR set to: 4
  4398  001A4E  0E03               	movlw	3
  4399  001A50  0104               	movlb	4	; () banked
  4400  001A52  6F95               	movwf	(_main$2589+1)& (0+255),b
  4401  001A54  0EE8               	movlw	232
  4402  001A56  6F94               	movwf	_main$2589& (0+255),b
  4403  001A58                     l696:
  4404                           
  4405                           ; BSR set to: 4
  4406                           
  4407                           ; BSR set to: 4
  4408  001A58  C494  F039         	movff	_main$2589,_numberToDisplay	;volatile
  4409  001A5C  C495  F03A         	movff	_main$2589+1,_numberToDisplay+1	;volatile
  4410  001A60  0E00               	movlw	0
  4411  001A62  BE3A               	btfsc	_numberToDisplay+1,7,c	;volatile
  4412  001A64  0EFF               	movlw	-1
  4413  001A66  6E3B               	movwf	_numberToDisplay+2,c	;volatile
  4414  001A68  6E3C               	movwf	_numberToDisplay+3,c	;volatile
  4415                           
  4416                           ; BSR set to: 4
  4417                           ;main.c: 141: if (buttonState) {
  4418  001A6A  0102               	movlb	2	; () banked
  4419  001A6C  518A               	movf	_buttonState& (0+255),w,b	;volatile
  4420  001A6E  B4D8               	btfsc	status,2,c
  4421  001A70  D7CE               	goto	l692
  4422                           
  4423                           ; BSR set to: 2
  4424                           ;main.c: 142: buttonState = 0;
  4425  001A72  0E00               	movlw	0
  4426  001A74  6F8A               	movwf	_buttonState& (0+255),b	;volatile
  4427                           
  4428                           ; BSR set to: 2
  4429                           ;main.c: 159: if (stack.ethernet.link == LINK_ESTABLISHED) {
  4430  001A76  0103               	movlb	3	; () banked
  4431  001A78  0564               	decf	(_stack+34)& (0+255),w,b
  4432  001A7A  A4D8               	btfss	status,2,c
  4433  001A7C  D7C8               	goto	l692
  4434                           
  4435                           ; BSR set to: 3
  4436                           ;main.c: 162: uint8_t headerBuf[32];
  4437                           ;main.c: 163: stack.pendingPacketToSend.ipv4Header.headerLength = 5;
  4438  001A7E  0E05               	movlw	5
  4439  001A80  6F78               	movwf	(_stack+54)& (0+255),b
  4440                           
  4441                           ;main.c: 164: stack.pendingPacketToSend.ipv4Header.protocol = IPv4_PROTOCOL_UDP;
  4442  001A82  0E11               	movlw	17
  4443  001A84  6F83               	movwf	(_stack+65)& (0+255),b
  4444                           
  4445                           ; BSR set to: 3
  4446                           ;main.c: 165: stack.pendingPacketToSend.ipv4Header.destination = ipDst;
  4447  001A86  C49B  F38A         	movff	main@ipDst,_stack+72
  4448  001A8A  C49C  F38B         	movff	main@ipDst+1,_stack+73
  4449  001A8E  C49D  F38C         	movff	main@ipDst+2,_stack+74
  4450  001A92  C49E  F38D         	movff	main@ipDst+3,_stack+75
  4451                           
  4452                           ; BSR set to: 3
  4453                           ;main.c: 166: stack.pendingPacketToSend.ipv4Header.source = ipv4_getIPSourceAddress();
  4454  001A96  ECE6  F030         	call	_ipv4_getIPSourceAddress	;wreg free
  4455  001A9A  C060  F386         	movff	?_ipv4_getIPSourceAddress,_stack+68
  4456  001A9E  C061  F387         	movff	?_ipv4_getIPSourceAddress+1,_stack+69
  4457  001AA2  C062  F388         	movff	?_ipv4_getIPSourceAddress+2,_stack+70
  4458  001AA6  C063  F389         	movff	?_ipv4_getIPSourceAddress+3,_stack+71
  4459                           
  4460                           ;main.c: 167: stack.pendingPacketToSend.ipv4Header.totalLength = 1500;
  4461  001AAA  0E05               	movlw	5
  4462  001AAC  0103               	movlb	3	; () banked
  4463  001AAE  6F7C               	movwf	(_stack+58)& (0+255),b
  4464  001AB0  0EDC               	movlw	220
  4465  001AB2  6F7B               	movwf	(_stack+57)& (0+255),b
  4466                           
  4467                           ; BSR set to: 3
  4468                           ;main.c: 168: stack.pendingPacketToSend.ipv4Header.timeToLive = 255;
  4469  001AB4  6982               	setf	(_stack+64)& (0+255),b
  4470                           
  4471                           ; BSR set to: 3
  4472                           ;main.c: 169: stack.pendingPacketToSend.ipv4Header.version = 4;
  4473  001AB6  0E04               	movlw	4
  4474  001AB8  6F77               	movwf	(_stack+53)& (0+255),b
  4475                           
  4476                           ; BSR set to: 3
  4477                           ;main.c: 171: ipv4_calculateHeaderChecksum(&stack.pendingPacketToSend.ipv4Header);
  4478  001ABA  0E77               	movlw	low (_stack+53)
  4479  001ABC  0100               	movlb	0	; () banked
  4480  001ABE  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  4481  001AC0  0E03               	movlw	high (_stack+53)
  4482  001AC2  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  4483  001AC4  ECA6  F007         	call	_ipv4_calculateHeaderChecksum	;wreg free
  4484                           
  4485                           ;main.c: 172: ipv4_writeHeaderIntoBuffer(stack.pendingPacketToSend.ipv4Header, &headerBu
      +                          f);
  4486  001AC8  EE23  F077         	lfsr	2,_stack+53
  4487  001ACC  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  4488  001AD0  0E16               	movlw	22
  4489  001AD2                     u14121:
  4490  001AD2  CFDB FFEB          	movff	plusw2,plusw0
  4491  001AD6  06E8               	decf	wreg,f,c
  4492  001AD8  E2FC               	bc	u14121
  4493  001ADA  0E74               	movlw	low main@headerBuf
  4494  001ADC  0100               	movlb	0	; () banked
  4495  001ADE  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  4496  001AE0  0E04               	movlw	high main@headerBuf
  4497  001AE2  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  4498  001AE4  EC30  F01D         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  4499                           
  4500                           ;main.c: 174: ipv4_txFrameRequest(&stack.pendingPacketToSend);
  4501  001AE8  0E77               	movlw	low (_stack+53)
  4502  001AEA  0100               	movlb	0	; () banked
  4503  001AEC  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  4504  001AEE  0E03               	movlw	high (_stack+53)
  4505  001AF0  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  4506  001AF2  ECE4  F01F         	call	_ipv4_txFrameRequest	;wreg free
  4507                           
  4508                           ;main.c: 175: for (uint16_t i = 0; i < stack.pendingPacketToSend.ipv4Header.totalLength;
      +                           i++) {
  4509  001AF6  0E00               	movlw	0
  4510  001AF8  0104               	movlb	4	; () banked
  4511  001AFA  6F9A               	movwf	(main@i+1)& (0+255),b
  4512  001AFC  0E00               	movlw	0
  4513  001AFE  6F99               	movwf	main@i& (0+255),b
  4514  001B00  D02E               	goto	l699
  4515  001B02                     
  4516                           ; BSR set to: 4
  4517                           ;main.c: 176: if (i < stack.pendingPacketToSend.ipv4Header.headerLength * 4) {
  4518                           
  4519                           ; BSR set to: 4
  4520  001B02  0103               	movlb	3	; () banked
  4521  001B04  5178               	movf	(_stack+54)& (0+255),w,b
  4522  001B06  0D04               	mullw	4
  4523  001B08  50F3               	movf	prodl,w,c
  4524  001B0A  0104               	movlb	4	; () banked
  4525  001B0C  5D99               	subwf	main@i& (0+255),w,b
  4526  001B0E  50F4               	movf	prodh,w,c
  4527  001B10  599A               	subwfb	(main@i+1)& (0+255),w,b
  4528  001B12  B0D8               	btfsc	status,0,c
  4529  001B14  D013               	goto	l701
  4530                           
  4531                           ; BSR set to: 4
  4532                           ;main.c: 177: ipv4_streamToTransmissionBuffer(headerBuf[i], stack.pendingPacketToSend);
  4533  001B16  EE23  F077         	lfsr	2,_stack+53
  4534  001B1A  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4535  001B1E  0E41               	movlw	65
  4536  001B20                     u14141:
  4537  001B20  CFDB FFEB          	movff	plusw2,plusw0
  4538  001B24  06E8               	decf	wreg,f,c
  4539  001B26  E2FC               	bc	u14141
  4540  001B28  0E74               	movlw	low main@headerBuf
  4541  001B2A  2599               	addwf	main@i& (0+255),w,b
  4542  001B2C  6ED9               	movwf	fsr2l,c
  4543  001B2E  0E04               	movlw	high main@headerBuf
  4544  001B30  219A               	addwfc	(main@i+1)& (0+255),w,b
  4545  001B32  6EDA               	movwf	fsr2h,c
  4546  001B34  50DF               	movf	indf2,w,c
  4547  001B36  EC7F  F030         	call	_ipv4_streamToTransmissionBuffer
  4548                           
  4549                           ;main.c: 178: } else
  4550  001B3A  D00E               	goto	l702
  4551  001B3C                     l701:
  4552                           
  4553                           ;main.c: 179: ipv4_streamToTransmissionBuffer(i - 20, stack.pendingPacketToSend);
  4554  001B3C  EE23  F077         	lfsr	2,_stack+53
  4555  001B40  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  4556  001B44  0E41               	movlw	65
  4557  001B46                     u14151:
  4558  001B46  CFDB FFEB          	movff	plusw2,plusw0
  4559  001B4A  06E8               	decf	wreg,f,c
  4560  001B4C  E2FC               	bc	u14151
  4561  001B4E  0104               	movlb	4	; () banked
  4562  001B50  5199               	movf	main@i& (0+255),w,b
  4563  001B52  0FEC               	addlw	236
  4564  001B54  EC7F  F030         	call	_ipv4_streamToTransmissionBuffer
  4565  001B58                     l702:
  4566  001B58  0104               	movlb	4	; () banked
  4567  001B5A  4B99               	infsnz	main@i& (0+255),f,b
  4568  001B5C  2B9A               	incf	(main@i+1)& (0+255),f,b
  4569  001B5E                     l699:
  4570                           
  4571                           ; BSR set to: 4
  4572                           
  4573                           ; BSR set to: 4
  4574  001B5E  0103               	movlb	3	; () banked
  4575  001B60  517B               	movf	(_stack+57)& (0+255),w,b
  4576  001B62  0104               	movlb	4	; () banked
  4577  001B64  5D99               	subwf	main@i& (0+255),w,b
  4578  001B66  0103               	movlb	3	; () banked
  4579  001B68  517C               	movf	(_stack+58)& (0+255),w,b
  4580  001B6A  0104               	movlb	4	; () banked
  4581  001B6C  599A               	subwfb	(main@i+1)& (0+255),w,b
  4582  001B6E  A0D8               	btfss	status,0,c
  4583  001B70  D7C8               	goto	l700
  4584                           
  4585                           ; BSR set to: 4
  4586                           ;main.c: 180: }
  4587                           ;main.c: 190: stack.background.fPacketPending = 1;
  4588                           
  4589                           ; BSR set to: 4
  4590  001B72  0E01               	movlw	1
  4591  001B74  0103               	movlb	3	; () banked
  4592  001B76  6F76               	movwf	(_stack+52)& (0+255),b
  4593                           
  4594                           ; BSR set to: 3
  4595                           
  4596                           ; BSR set to: 3
  4597                           
  4598                           ; BSR set to: 3
  4599  001B78  D74A               	goto	l692
  4600  001B7A                     __end_of_main:
  4601                           	opt stack 0
  4602                           tblptru	equ	0xFF8
  4603                           tblptrh	equ	0xFF7
  4604                           tblptrl	equ	0xFF6
  4605                           tablat	equ	0xFF5
  4606                           prodh	equ	0xFF4
  4607                           prodl	equ	0xFF3
  4608                           intcon	equ	0xFF2
  4609                           intcon3	equ	0xFF0
  4610                           indf0	equ	0xFEF
  4611                           postinc0	equ	0xFEE
  4612                           plusw0	equ	0xFEB
  4613                           fsr0h	equ	0xFEA
  4614                           fsr0l	equ	0xFE9
  4615                           wreg	equ	0xFE8
  4616                           postdec1	equ	0xFE5
  4617                           fsr1l	equ	0xFE1
  4618                           indf2	equ	0xFDF
  4619                           plusw2	equ	0xFDB
  4620                           fsr2h	equ	0xFDA
  4621                           fsr2l	equ	0xFD9
  4622                           status	equ	0xFD8
  4623                           
  4624 ;; *************** function _stack_init *****************
  4625 ;; Defined at:
  4626 ;;		line 27 in file "src/stack/stack.c"
  4627 ;; Parameters:    Size  Location     Type
  4628 ;;		None
  4629 ;; Auto vars:     Size  Location     Type
  4630 ;;		None
  4631 ;; Return value:  Size  Location     Type
  4632 ;;                  3  581[None  ] struct error
  4633 ;; Registers used:
  4634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4635 ;; Tracked objects:
  4636 ;;		On entry : 0/0
  4637 ;;		On exit  : 0/0
  4638 ;;		Unchanged: 0/0
  4639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4640 ;;      Params:         0       0       0       0       0       0       0       0       0
  4641 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4642 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4643 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4644 ;;Total ram usage:        0 bytes
  4645 ;; Hardware stack levels used:    1
  4646 ;; Hardware stack levels required when called:    8
  4647 ;; This function calls:
  4648 ;;		_arp_init
  4649 ;;		_ipv4_init
  4650 ;; This function is called by:
  4651 ;;		_main
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text1
  4656  00626A                     __ptext1:
  4657                           	opt stack 0
  4658  00626A                     _stack_init:
  4659                           	opt stack 22
  4660                           
  4661                           ;stack.c: 28: arp_init();
  4662                           
  4663                           ; BSR set to: 3
  4664                           ;incstack = 0
  4665  00626A  EC01  F02A         	call	_arp_init	;wreg free
  4666                           
  4667                           ;stack.c: 29: ipv4_init();
  4668  00626E  EC6F  F030         	call	_ipv4_init	;wreg free
  4669  006272  0012               	return		;funcret
  4670  006274                     __end_of_stack_init:
  4671                           	opt stack 0
  4672                           tblptru	equ	0xFF8
  4673                           tblptrh	equ	0xFF7
  4674                           tblptrl	equ	0xFF6
  4675                           tablat	equ	0xFF5
  4676                           prodh	equ	0xFF4
  4677                           prodl	equ	0xFF3
  4678                           intcon	equ	0xFF2
  4679                           intcon3	equ	0xFF0
  4680                           indf0	equ	0xFEF
  4681                           postinc0	equ	0xFEE
  4682                           plusw0	equ	0xFEB
  4683                           fsr0h	equ	0xFEA
  4684                           fsr0l	equ	0xFE9
  4685                           wreg	equ	0xFE8
  4686                           postdec1	equ	0xFE5
  4687                           fsr1l	equ	0xFE1
  4688                           indf2	equ	0xFDF
  4689                           plusw2	equ	0xFDB
  4690                           fsr2h	equ	0xFDA
  4691                           fsr2l	equ	0xFD9
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _ipv4_init *****************
  4695 ;; Defined at:
  4696 ;;		line 477 in file "src/stack/protocols/ipv4.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;		None
  4699 ;; Auto vars:     Size  Location     Type
  4700 ;;		None
  4701 ;; Return value:  Size  Location     Type
  4702 ;;                  1    wreg      void 
  4703 ;; Registers used:
  4704 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4705 ;; Tracked objects:
  4706 ;;		On entry : 0/0
  4707 ;;		On exit  : 0/0
  4708 ;;		Unchanged: 0/0
  4709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4710 ;;      Params:         0       0       0       0       0       0       0       0       0
  4711 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4712 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4713 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4714 ;;Total ram usage:        0 bytes
  4715 ;; Hardware stack levels used:    1
  4716 ;; Hardware stack levels required when called:    5
  4717 ;; This function calls:
  4718 ;;		_ipv4_setToAllZero
  4719 ;; This function is called by:
  4720 ;;		_stack_init
  4721 ;; This function uses a non-reentrant model
  4722 ;;
  4723                           
  4724                           	psect	text2
  4725  0060DE                     __ptext2:
  4726                           	opt stack 0
  4727  0060DE                     _ipv4_init:
  4728                           	opt stack 24
  4729                           
  4730                           ;ipv4.c: 478: fSrcAddrChanged = 0;
  4731                           
  4732                           ;incstack = 0
  4733  0060DE  9050               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  4734                           
  4735                           ;ipv4.c: 479: ipv4_setToAllZero(&ipSource);
  4736  0060E0  0E86               	movlw	low _ipSource
  4737  0060E2  0100               	movlb	0	; () banked
  4738  0060E4  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  4739  0060E6  0E02               	movlw	high _ipSource
  4740  0060E8  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  4741  0060EA  EC01  F030         	call	_ipv4_setToAllZero	;wreg free
  4742                           
  4743                           ;ipv4.c: 480: ipv4_setToAllZero(&ipPreliminarySource);
  4744  0060EE  0E82               	movlw	low _ipPreliminarySource
  4745  0060F0  0100               	movlb	0	; () banked
  4746  0060F2  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
  4747  0060F4  0E02               	movlw	high _ipPreliminarySource
  4748  0060F6  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
  4749  0060F8  EC01  F030         	call	_ipv4_setToAllZero	;wreg free
  4750  0060FC  0012               	return		;funcret
  4751  0060FE                     __end_of_ipv4_init:
  4752                           	opt stack 0
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           prodh	equ	0xFF4
  4758                           prodl	equ	0xFF3
  4759                           intcon	equ	0xFF2
  4760                           intcon3	equ	0xFF0
  4761                           indf0	equ	0xFEF
  4762                           postinc0	equ	0xFEE
  4763                           plusw0	equ	0xFEB
  4764                           fsr0h	equ	0xFEA
  4765                           fsr0l	equ	0xFE9
  4766                           wreg	equ	0xFE8
  4767                           postdec1	equ	0xFE5
  4768                           fsr1l	equ	0xFE1
  4769                           indf2	equ	0xFDF
  4770                           plusw2	equ	0xFDB
  4771                           fsr2h	equ	0xFDA
  4772                           fsr2l	equ	0xFD9
  4773                           status	equ	0xFD8
  4774                           
  4775 ;; *************** function _srand *****************
  4776 ;; Defined at:
  4777 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
  4778 ;; Parameters:    Size  Location     Type
  4779 ;;  x               2   26[BANK0 ] unsigned int 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;		None
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  1    wreg      void 
  4784 ;; Registers used:
  4785 ;;		status,2
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4791 ;;      Params:         0       2       0       0       0       0       0       0       0
  4792 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4793 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4794 ;;      Totals:         0       2       0       0       0       0       0       0       0
  4795 ;;Total ram usage:        2 bytes
  4796 ;; Hardware stack levels used:    1
  4797 ;; Hardware stack levels required when called:    4
  4798 ;; This function calls:
  4799 ;;		Nothing
  4800 ;; This function is called by:
  4801 ;;		_main
  4802 ;; This function uses a non-reentrant model
  4803 ;;
  4804                           
  4805                           	psect	text3
  4806  006214                     __ptext3:
  4807                           	opt stack 0
  4808  006214                     _srand:
  4809                           	opt stack 26
  4810                           
  4811                           ;incstack = 0
  4812  006214  C07A  F2A9         	movff	srand@x,_randx
  4813  006218  C07B  F2AA         	movff	srand@x+1,_randx+1
  4814  00621C  0102               	movlb	2	; () banked
  4815  00621E  6BAB               	clrf	(_randx+2)& (0+255),b
  4816  006220  6BAC               	clrf	(_randx+3)& (0+255),b
  4817                           
  4818                           ; BSR set to: 2
  4819  006222  0012               	return		;funcret
  4820  006224                     __end_of_srand:
  4821                           	opt stack 0
  4822                           tblptru	equ	0xFF8
  4823                           tblptrh	equ	0xFF7
  4824                           tblptrl	equ	0xFF6
  4825                           tablat	equ	0xFF5
  4826                           prodh	equ	0xFF4
  4827                           prodl	equ	0xFF3
  4828                           intcon	equ	0xFF2
  4829                           intcon3	equ	0xFF0
  4830                           indf0	equ	0xFEF
  4831                           postinc0	equ	0xFEE
  4832                           plusw0	equ	0xFEB
  4833                           fsr0h	equ	0xFEA
  4834                           fsr0l	equ	0xFE9
  4835                           wreg	equ	0xFE8
  4836                           postdec1	equ	0xFE5
  4837                           fsr1l	equ	0xFE1
  4838                           indf2	equ	0xFDF
  4839                           plusw2	equ	0xFDB
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _sevenSegmentInit *****************
  4845 ;; Defined at:
  4846 ;;		line 28 in file "src/system/sevenseg.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      void 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2, status,0
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    4
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;; This function uses a non-reentrant model
  4872 ;;
  4873                           
  4874                           	psect	text4
  4875  006158                     __ptext4:
  4876                           	opt stack 0
  4877  006158                     _sevenSegmentInit:
  4878                           	opt stack 26
  4879                           
  4880                           ;sevenseg.c: 30: PORTC &= ~(0x07);
  4881                           
  4882                           ; BSR set to: 2
  4883                           ;incstack = 0
  4884  006158  0EF8               	movlw	248
  4885  00615A  1682               	andwf	3970,f,c	;volatile
  4886                           
  4887                           ;sevenseg.c: 32: TRISC&= ~0x07;;
  4888  00615C  0EF8               	movlw	248
  4889  00615E  1694               	andwf	3988,f,c	;volatile
  4890                           
  4891                           ;sevenseg.c: 33: TRISA &=~0xff;;
  4892  006160  0E00               	movlw	0
  4893  006162  6E92               	movwf	3986,c	;volatile
  4894                           
  4895                           ;sevenseg.c: 35: ANSELA&=~0xff;;
  4896  006164  0E00               	movlw	0
  4897  006166  010F               	movlb	15	; () banked
  4898  006168  6F5B               	movwf	91,b	;volatile
  4899                           
  4900                           ;sevenseg.c: 36: ANSELC&= ~0x07;;
  4901  00616A  0EF8               	movlw	248
  4902  00616C  175D               	andwf	93,f,b	;volatile
  4903                           
  4904                           ; BSR set to: 15
  4905                           ;sevenseg.c: 38: PORTA = 0xff;
  4906  00616E  6880               	setf	3968,c	;volatile
  4907                           
  4908                           ; BSR set to: 15
  4909  006170  0012               	return		;funcret
  4910  006172                     __end_of_sevenSegmentInit:
  4911                           	opt stack 0
  4912                           tblptru	equ	0xFF8
  4913                           tblptrh	equ	0xFF7
  4914                           tblptrl	equ	0xFF6
  4915                           tablat	equ	0xFF5
  4916                           prodh	equ	0xFF4
  4917                           prodl	equ	0xFF3
  4918                           intcon	equ	0xFF2
  4919                           intcon3	equ	0xFF0
  4920                           indf0	equ	0xFEF
  4921                           postinc0	equ	0xFEE
  4922                           plusw0	equ	0xFEB
  4923                           fsr0h	equ	0xFEA
  4924                           fsr0l	equ	0xFE9
  4925                           wreg	equ	0xFE8
  4926                           postdec1	equ	0xFE5
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           plusw2	equ	0xFDB
  4930                           fsr2h	equ	0xFDA
  4931                           fsr2l	equ	0xFD9
  4932                           status	equ	0xFD8
  4933                           
  4934 ;; *************** function _printEthernetState *****************
  4935 ;; Defined at:
  4936 ;;		line 197 in file "src/system/main.c"
  4937 ;; Parameters:    Size  Location     Type
  4938 ;;  state          15   58[BANK0 ] struct ethernetConnectio
  4939 ;; Auto vars:     Size  Location     Type
  4940 ;;		None
  4941 ;; Return value:  Size  Location     Type
  4942 ;;                  1    wreg      void 
  4943 ;; Registers used:
  4944 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4945 ;; Tracked objects:
  4946 ;;		On entry : 0/0
  4947 ;;		On exit  : 0/0
  4948 ;;		Unchanged: 0/0
  4949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4950 ;;      Params:         0      15       0       0       0       0       0       0       0
  4951 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4952 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4953 ;;      Totals:         0      15       0       0       0       0       0       0       0
  4954 ;;Total ram usage:       15 bytes
  4955 ;; Hardware stack levels used:    1
  4956 ;; Hardware stack levels required when called:    5
  4957 ;; This function calls:
  4958 ;;		_UARTTransmitText
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;; This function uses a non-reentrant model
  4962 ;;
  4963                           
  4964                           	psect	text5
  4965  004D14                     __ptext5:
  4966                           	opt stack 0
  4967  004D14                     _printEthernetState:
  4968                           	opt stack 25
  4969                           
  4970                           ;main.c: 198: static ethernetConnection_t oldState;
  4971                           ;main.c: 199: if (state.link != oldState.link) {
  4972                           
  4973                           ; BSR set to: 15
  4974                           ;incstack = 0
  4975  004D14  0102               	movlb	2	; () banked
  4976  004D16  5148               	movf	printEthernetState@oldState& (0+255),w,b
  4977  004D18  0100               	movlb	0	; () banked
  4978  004D1A  199A               	xorwf	printEthernetState@state& (0+255),w,b
  4979  004D1C  B4D8               	btfsc	status,2,c
  4980  004D1E  D041               	goto	l721
  4981                           
  4982                           ; BSR set to: 0
  4983                           ;main.c: 200: if (state.link == NO_LINK) {
  4984  004D20  519A               	movf	printEthernetState@state& (0+255),w,b
  4985  004D22  A4D8               	btfss	status,2,c
  4986  004D24  D007               	goto	l712
  4987                           
  4988                           ; BSR set to: 0
  4989                           ;main.c: 201: UARTTransmitText("Link lost.\n\r");
  4990  004D26  0EDA               	movlw	low STR_62
  4991  004D28  6F98               	movwf	UARTTransmitText@str& (0+255),b
  4992  004D2A  0E7E               	movlw	high STR_62
  4993  004D2C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  4994  004D2E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  4995                           
  4996                           ;main.c: 202: } else if (state.link == LINK_ESTABLISHED) {
  4997  004D32  D00A               	goto	l714
  4998  004D34                     l712:
  4999  004D34  0100               	movlb	0	; () banked
  5000  004D36  059A               	decf	printEthernetState@state& (0+255),w,b
  5001  004D38  A4D8               	btfss	status,2,c
  5002  004D3A  D006               	goto	l714
  5003                           
  5004                           ; BSR set to: 0
  5005                           ;main.c: 203: UARTTransmitText("Link established. ");
  5006  004D3C  0EDB               	movlw	low STR_63
  5007  004D3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5008  004D40  0E7D               	movlw	high STR_63
  5009  004D42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5010  004D44  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5011  004D48                     l714:
  5012                           
  5013                           ;main.c: 204: }
  5014                           ;main.c: 206: if (state.link == LINK_ESTABLISHED) {
  5015  004D48  0100               	movlb	0	; () banked
  5016  004D4A  059A               	decf	printEthernetState@state& (0+255),w,b
  5017  004D4C  A4D8               	btfss	status,2,c
  5018  004D4E  D029               	goto	l721
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;main.c: 207: if (state.speed == TEN_MBIT) {
  5022  004D50  519B               	movf	(printEthernetState@state+1)& (0+255),w,b
  5023  004D52  A4D8               	btfss	status,2,c
  5024  004D54  D007               	goto	l716
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;main.c: 208: UARTTransmitText("Speed is 10 Mbps, ");
  5028  004D56  0EC8               	movlw	low STR_64
  5029  004D58  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5030  004D5A  0E7D               	movlw	high STR_64
  5031  004D5C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5032  004D5E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5033                           
  5034                           ;main.c: 209: } else if (state.speed == HUNDRED_MBIT) {
  5035  004D62  D00A               	goto	l718
  5036  004D64                     l716:
  5037  004D64  0100               	movlb	0	; () banked
  5038  004D66  059B               	decf	(printEthernetState@state+1)& (0+255),w,b
  5039  004D68  A4D8               	btfss	status,2,c
  5040  004D6A  D006               	goto	l718
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;main.c: 210: UARTTransmitText("Speed is 100 Mbps, ");
  5044  004D6C  0EA0               	movlw	low STR_65
  5045  004D6E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5046  004D70  0E7D               	movlw	high STR_65
  5047  004D72  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5048  004D74  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5049  004D78                     l718:
  5050                           
  5051                           ;main.c: 211: }
  5052                           ;main.c: 212: if (state.duplex == HALF_DUPLEX) {
  5053  004D78  0100               	movlb	0	; () banked
  5054  004D7A  519C               	movf	(printEthernetState@state+2)& (0+255),w,b
  5055  004D7C  A4D8               	btfss	status,2,c
  5056  004D7E  D007               	goto	l719
  5057                           
  5058                           ; BSR set to: 0
  5059                           ;main.c: 213: UARTTransmitText("connection is Half Duplex.\n\r");
  5060  004D80  0E7B               	movlw	low STR_66
  5061  004D82  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5062  004D84  0E7C               	movlw	high STR_66
  5063  004D86  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5064  004D88  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5065                           
  5066                           ;main.c: 214: } else if (state.duplex == FULL_DUPLEX) {
  5067  004D8C  D00A               	goto	l721
  5068  004D8E                     l719:
  5069  004D8E  0100               	movlb	0	; () banked
  5070  004D90  059C               	decf	(printEthernetState@state+2)& (0+255),w,b
  5071  004D92  A4D8               	btfss	status,2,c
  5072  004D94  D006               	goto	l721
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;main.c: 216: UARTTransmitText("connection is Full Duplex.\n\r");
  5076  004D96  0E98               	movlw	low STR_67
  5077  004D98  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5078  004D9A  0E7C               	movlw	high STR_67
  5079  004D9C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5080  004D9E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5081  004DA2                     l721:
  5082                           
  5083                           ;main.c: 217: }
  5084                           ;main.c: 218: }
  5085                           ;main.c: 219: }
  5086                           ;main.c: 220: oldState = state;
  5087  004DA2  EE20  F09A         	lfsr	2,printEthernetState@state
  5088  004DA6  EE12  F048         	lfsr	1,printEthernetState@oldState
  5089  004DAA  0E0E               	movlw	14
  5090  004DAC                     u13971:
  5091  004DAC  CFDB FFE3          	movff	plusw2,plusw1
  5092  004DB0  06E8               	decf	wreg,f,c
  5093  004DB2  E2FC               	bc	u13971
  5094  004DB4  0012               	return		;funcret
  5095  004DB6                     __end_of_printEthernetState:
  5096                           	opt stack 0
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodh	equ	0xFF4
  5102                           prodl	equ	0xFF3
  5103                           intcon	equ	0xFF2
  5104                           intcon3	equ	0xFF0
  5105                           indf0	equ	0xFEF
  5106                           postinc0	equ	0xFEE
  5107                           plusw0	equ	0xFEB
  5108                           fsr0h	equ	0xFEA
  5109                           fsr0l	equ	0xFE9
  5110                           wreg	equ	0xFE8
  5111                           postdec1	equ	0xFE5
  5112                           plusw1	equ	0xFE3
  5113                           fsr1l	equ	0xFE1
  5114                           indf2	equ	0xFDF
  5115                           plusw2	equ	0xFDB
  5116                           fsr2h	equ	0xFDA
  5117                           fsr2l	equ	0xFD9
  5118                           status	equ	0xFD8
  5119                           
  5120 ;; *************** function _printErrorMessage *****************
  5121 ;; Defined at:
  5122 ;;		line 223 in file "src/system/main.c"
  5123 ;; Parameters:    Size  Location     Type
  5124 ;;  err             3   58[BANK0 ] struct error
  5125 ;; Auto vars:     Size  Location     Type
  5126 ;;		None
  5127 ;; Return value:  Size  Location     Type
  5128 ;;                  1    wreg      void 
  5129 ;; Registers used:
  5130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5131 ;; Tracked objects:
  5132 ;;		On entry : 0/0
  5133 ;;		On exit  : 0/0
  5134 ;;		Unchanged: 0/0
  5135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5136 ;;      Params:         0       3       0       0       0       0       0       0       0
  5137 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5138 ;;      Temps:          0       2       0       0       0       0       0       0       0
  5139 ;;      Totals:         0       5       0       0       0       0       0       0       0
  5140 ;;Total ram usage:        5 bytes
  5141 ;; Hardware stack levels used:    1
  5142 ;; Hardware stack levels required when called:    8
  5143 ;; This function calls:
  5144 ;;		_UARTTransmitText
  5145 ;;		_intToString
  5146 ;; This function is called by:
  5147 ;;		_main
  5148 ;; This function uses a non-reentrant model
  5149 ;;
  5150                           
  5151                           	psect	text6
  5152  004232                     __ptext6:
  5153                           	opt stack 0
  5154  004232                     _printErrorMessage:
  5155                           	opt stack 22
  5156                           
  5157                           ;main.c: 224: UARTTransmitText("[ERROR]");
  5158                           
  5159                           ;incstack = 0
  5160  004232  0E98               	movlw	low STR_68
  5161  004234  0100               	movlb	0	; () banked
  5162  004236  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5163  004238  0E7F               	movlw	high STR_68
  5164  00423A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5165  00423C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5166                           
  5167                           ;main.c: 225: switch (err.module) {
  5168  004240  D028               	goto	l725
  5169  004242                     
  5170                           ;main.c: 227: UARTTransmitText(" MEMORY MODULE: ");
  5171  004242  0E35               	movlw	low STR_69
  5172  004244  0100               	movlb	0	; () banked
  5173  004246  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5174  004248  0E7E               	movlw	high STR_69
  5175  00424A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5176  00424C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5177                           
  5178                           ;main.c: 228: break;
  5179  004250  D050               	goto	l733
  5180  004252                     
  5181                           ;main.c: 230: UARTTransmitText(" ETHERNET CONTROLLER MODULE: ");
  5182  004252  0E3F               	movlw	low STR_70
  5183  004254  0100               	movlb	0	; () banked
  5184  004256  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5185  004258  0E7C               	movlw	high STR_70
  5186  00425A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5187  00425C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5188                           
  5189                           ;main.c: 231: break;
  5190  004260  D048               	goto	l733
  5191  004262                     
  5192                           ;main.c: 233: UARTTransmitText(" ETHERNET MODULE: ");
  5193  004262  0EEE               	movlw	low STR_71
  5194  004264  0100               	movlb	0	; () banked
  5195  004266  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5196  004268  0E7D               	movlw	high STR_71
  5197  00426A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5198  00426C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5199                           
  5200                           ;main.c: 234: break;
  5201  004270  D040               	goto	l733
  5202  004272                     
  5203                           ;main.c: 236: UARTTransmitText(" ARP MODULE: ");
  5204  004272  0EBF               	movlw	low STR_72
  5205  004274  0100               	movlb	0	; () banked
  5206  004276  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5207  004278  0E7E               	movlw	high STR_72
  5208  00427A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5209  00427C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5210                           
  5211                           ;main.c: 237: break;
  5212  004280  D038               	goto	l733
  5213  004282                     
  5214                           ;main.c: 239: UARTTransmitText(" IPv4 MODULE: ");
  5215  004282  0E94               	movlw	low STR_73
  5216  004284  0100               	movlb	0	; () banked
  5217  004286  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5218  004288  0E7E               	movlw	high STR_73
  5219  00428A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5220  00428C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5221                           
  5222                           ;main.c: 242: }
  5223                           
  5224                           ;main.c: 241: break;
  5225                           
  5226                           ;main.c: 240: default:
  5227  004290  D030               	goto	l733
  5228  004292                     l725:
  5229  004292  0100               	movlb	0	; () banked
  5230  004294  519A               	movf	printErrorMessage@err& (0+255),w,b
  5231                           
  5232                           ; Switch size 1, requested type "space"
  5233                           ; Number of cases is 5, Range of values is 0 to 4
  5234                           ; switch strategies available:
  5235                           ; Name         Instructions Cycles
  5236                           ; simple_byte           16     9 (average)
  5237                           ;	Chosen strategy is simple_byte
  5238  004296  0A00               	xorlw	0	; case 0
  5239  004298  B4D8               	btfsc	status,2,c
  5240  00429A  D7D3               	goto	l726
  5241  00429C  0A01               	xorlw	1	; case 1
  5242  00429E  B4D8               	btfsc	status,2,c
  5243  0042A0  D7D8               	goto	l728
  5244  0042A2  0A03               	xorlw	3	; case 2
  5245  0042A4  B4D8               	btfsc	status,2,c
  5246  0042A6  D7DD               	goto	l729
  5247  0042A8  0A01               	xorlw	1	; case 3
  5248  0042AA  B4D8               	btfsc	status,2,c
  5249  0042AC  D7E2               	goto	l730
  5250  0042AE  0A07               	xorlw	7	; case 4
  5251  0042B0  B4D8               	btfsc	status,2,c
  5252  0042B2  D7E7               	goto	l731
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;main.c: 243: switch (err.code) {
  5256  0042B4  D01E               	goto	l733
  5257  0042B6                     
  5258                           ; BSR set to: 0
  5259                           ;main.c: 245: UARTTransmitText("Ethernet controller is unresponsive.");
  5260                           
  5261                           ; BSR set to: 0
  5262  0042B6  0E06               	movlw	low STR_74
  5263  0042B8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5264  0042BA  0E7B               	movlw	high STR_74
  5265  0042BC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5266  0042BE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5267                           
  5268                           ;main.c: 246: break;
  5269  0042C2  D030               	goto	l735
  5270  0042C4                     
  5271                           ;main.c: 248: UARTTransmitText("Ethernet controller has returned an unknown device ID.")
      +                          ;
  5272  0042C4  0ECA               	movlw	low STR_75
  5273  0042C6  0100               	movlb	0	; () banked
  5274  0042C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5275  0042CA  0E79               	movlw	high STR_75
  5276  0042CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5277  0042CE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5278                           
  5279                           ;main.c: 249: break;
  5280  0042D2  D028               	goto	l735
  5281  0042D4                     
  5282                           ;main.c: 251: UARTTransmitText("IP address could not be resolved.");
  5283  0042D4  0EDE               	movlw	low STR_76
  5284  0042D6  0100               	movlb	0	; () banked
  5285  0042D8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5286  0042DA  0E7B               	movlw	high STR_76
  5287  0042DC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5288  0042DE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5289  0042E2                     
  5290                           ;main.c: 254: UARTTransmitText("An unknown error has occured.");
  5291                           
  5292                           ;main.c: 253: case ERROR_ETHERNET_CONTROLLER_UNKNOWN:
  5293  0042E2  0E5D               	movlw	low STR_77
  5294  0042E4  0100               	movlb	0	; () banked
  5295  0042E6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5296  0042E8  0E7C               	movlw	high STR_77
  5297  0042EA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5298  0042EC  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5299                           
  5300                           ;main.c: 256: }
  5301                           
  5302                           ;main.c: 255: break;
  5303  0042F0  D019               	goto	l735
  5304  0042F2                     l733:
  5305  0042F2  EE20  F09B         	lfsr	2,printErrorMessage@err+1
  5306  0042F6  CFDE F09D          	movff	postinc2,??_printErrorMessage
  5307  0042FA  CFDD F09E          	movff	postdec2,??_printErrorMessage+1
  5308                           
  5309                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5310                           ; Switch size 1, requested type "space"
  5311                           ; Number of cases is 1, Range of values is 1 to 1
  5312                           ; switch strategies available:
  5313                           ; Name         Instructions Cycles
  5314                           ; simple_byte            4     3 (average)
  5315                           ;	Chosen strategy is simple_byte
  5316  0042FE  0100               	movlb	0	; () banked
  5317  004300  519E               	movf	(??_printErrorMessage+1)& (0+255),w,b
  5318  004302  0A01               	xorlw	1	; case 1
  5319  004304  A4D8               	btfss	status,2,c
  5320  004306  D7ED               	goto	l738
  5321                           
  5322                           ; BSR set to: 0
  5323                           ; Switch size 1, requested type "space"
  5324                           ; Number of cases is 4, Range of values is 45 to 147
  5325                           ; switch strategies available:
  5326                           ; Name         Instructions Cycles
  5327                           ; simple_byte           13     7 (average)
  5328                           ;	Chosen strategy is simple_byte
  5329  004308  519D               	movf	??_printErrorMessage& (0+255),w,b
  5330  00430A  0A2D               	xorlw	45	; case 45
  5331  00430C  B4D8               	btfsc	status,2,c
  5332  00430E  D7DA               	goto	l736
  5333  004310  0A03               	xorlw	3	; case 46
  5334  004312  B4D8               	btfsc	status,2,c
  5335  004314  D7D0               	goto	l734
  5336  004316  0AA1               	xorlw	161	; case 143
  5337  004318  B4D8               	btfsc	status,2,c
  5338  00431A  D7E3               	goto	l738
  5339  00431C  0A1C               	xorlw	28	; case 147
  5340  00431E  B4D8               	btfsc	status,2,c
  5341  004320  D7D9               	goto	l737
  5342  004322  D7DF               	goto	l738
  5343  004324                     l735:
  5344                           
  5345                           ;main.c: 258: UARTTransmitText(" (Code: ");
  5346                           
  5347                           ; BSR set to: 0
  5348  004324  0E86               	movlw	low STR_78
  5349  004326  0100               	movlb	0	; () banked
  5350  004328  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5351  00432A  0E7F               	movlw	high STR_78
  5352  00432C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5353  00432E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5354                           
  5355                           ;main.c: 259: UARTTransmitText(intToString(err.code));
  5356  004332  C09B  F084         	movff	printErrorMessage@err+1,intToString@val
  5357  004336  C09C  F085         	movff	printErrorMessage@err+2,intToString@val+1
  5358  00433A  0100               	movlb	0	; () banked
  5359  00433C  6B86               	clrf	(intToString@val+2)& (0+255),b
  5360  00433E  6B87               	clrf	(intToString@val+3)& (0+255),b
  5361  004340  EC11  F02F         	call	_intToString	;wreg free
  5362  004344  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5363  004348  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5364  00434C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5365                           
  5366                           ;main.c: 260: UARTTransmitText(").\n\r");
  5367  004350  0EC8               	movlw	low STR_79
  5368  004352  0100               	movlb	0	; () banked
  5369  004354  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5370  004356  0E7F               	movlw	high STR_79
  5371  004358  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5372  00435A  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5373  00435E  0012               	return		;funcret
  5374  004360                     __end_of_printErrorMessage:
  5375                           	opt stack 0
  5376                           tblptru	equ	0xFF8
  5377                           tblptrh	equ	0xFF7
  5378                           tblptrl	equ	0xFF6
  5379                           tablat	equ	0xFF5
  5380                           prodh	equ	0xFF4
  5381                           prodl	equ	0xFF3
  5382                           intcon	equ	0xFF2
  5383                           intcon3	equ	0xFF0
  5384                           indf0	equ	0xFEF
  5385                           postinc0	equ	0xFEE
  5386                           plusw0	equ	0xFEB
  5387                           fsr0h	equ	0xFEA
  5388                           fsr0l	equ	0xFE9
  5389                           wreg	equ	0xFE8
  5390                           postdec1	equ	0xFE5
  5391                           plusw1	equ	0xFE3
  5392                           fsr1l	equ	0xFE1
  5393                           indf2	equ	0xFDF
  5394                           postinc2	equ	0xFDE
  5395                           postdec2	equ	0xFDD
  5396                           plusw2	equ	0xFDB
  5397                           fsr2h	equ	0xFDA
  5398                           fsr2l	equ	0xFD9
  5399                           status	equ	0xFD8
  5400                           
  5401 ;; *************** function _handleStackBackgroundTasks *****************
  5402 ;; Defined at:
  5403 ;;		line 40 in file "src/stack/backgroundTasks.c"
  5404 ;; Parameters:    Size  Location     Type
  5405 ;;  stack           2   11[BANK2 ] PTR struct stack
  5406 ;;		 -> stack(123), 
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;  foo            10    0        unsigned char [10]
  5409 ;;  errIPv4         3   20[BANK2 ] struct error
  5410 ;;  errArp          3   15[BANK2 ] struct error
  5411 ;;  intf            2   18[BANK2 ] struct interruptFlags
  5412 ;; Return value:  Size  Location     Type
  5413 ;;                  1    wreg      void 
  5414 ;; Registers used:
  5415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5416 ;; Tracked objects:
  5417 ;;		On entry : 0/0
  5418 ;;		On exit  : 0/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5421 ;;      Params:         0       0       0       2       0       0       0       0       0
  5422 ;;      Locals:         0       0       0       8       0       0       0       0       0
  5423 ;;      Temps:          0       0       0       2       0       0       0       0       0
  5424 ;;      Totals:         0       0       0      12       0       0       0       0       0
  5425 ;;Total ram usage:       12 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:   14
  5428 ;; This function calls:
  5429 ;;		_UARTTransmitText
  5430 ;;		_arp_background
  5431 ;;		_arp_init
  5432 ;;		_ethernetController_clearInterruptFlag
  5433 ;;		_ethernetController_disableEthernet
  5434 ;;		_ethernetController_getMTU
  5435 ;;		_ethernetController_init
  5436 ;;		_ethernetController_newPacketAvailable
  5437 ;;		_ethernetController_pollInterruptFlags
  5438 ;;		_ethernetController_setLEDConfig
  5439 ;;		_ethernetController_updateLinkStatus
  5440 ;;		_ethernet_rxGetNewFrame
  5441 ;;		_intToString
  5442 ;;		_ipAdressToString
  5443 ;;		_ipv4_background
  5444 ;;		_ipv4_generateAutoIP
  5445 ;;		_ipv4_sendFrame
  5446 ;;		_ipv4_setIPSourceAddress
  5447 ;; This function is called by:
  5448 ;;		_main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           	psect	text7
  5453  0000EC                     __ptext7:
  5454                           	opt stack 0
  5455  0000EC                     _handleStackBackgroundTasks:
  5456                           	opt stack 16
  5457                           
  5458                           ;backgroundTasks.c: 41: unsigned char foo[10];
  5459                           ;backgroundTasks.c: 42: error_t errArp;
  5460                           ;backgroundTasks.c: 43: error_t errIPv4;
  5461                           ;backgroundTasks.c: 44: interruptFlags_t intf;
  5462                           ;backgroundTasks.c: 46: intf = ethernetController_pollInterruptFlags();
  5463                           
  5464                           ;incstack = 0
  5465  0000EC  EC93  F01E         	call	_ethernetController_pollInterruptFlags	;wreg free
  5466  0000F0  C078  F2D1         	movff	?_ethernetController_pollInterruptFlags,handleStackBackgroundTasks@intf
  5467  0000F4  C079  F2D2         	movff	?_ethernetController_pollInterruptFlags+1,handleStackBackgroundTasks@intf+1
  5468                           
  5469                           ;backgroundTasks.c: 49: if (intf.LINKIF) {
  5470  0000F8  0102               	movlb	2	; () banked
  5471  0000FA  A7D1               	btfss	handleStackBackgroundTasks@intf& (0+255),3,b
  5472  0000FC  D044               	goto	l536
  5473                           
  5474                           ; BSR set to: 2
  5475                           ;backgroundTasks.c: 51: ethernetController_updateLinkStatus(&(stack->ethernet));
  5476  0000FE  0E22               	movlw	34
  5477  000100  25CA               	addwf	handleStackBackgroundTasks@stack& (0+255),w,b
  5478  000102  0100               	movlb	0	; () banked
  5479  000104  6F80               	movwf	ethernetController_updateLinkStatus@state& (0+255),b
  5480  000106  0E00               	movlw	0
  5481  000108  0102               	movlb	2	; () banked
  5482  00010A  21CB               	addwfc	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5483  00010C  0100               	movlb	0	; () banked
  5484  00010E  6F81               	movwf	(ethernetController_updateLinkStatus@state+1)& (0+255),b
  5485  000110  ECC1  F027         	call	_ethernetController_updateLinkStatus	;wreg free
  5486                           
  5487                           ;backgroundTasks.c: 53: if (stack->ethernet.link == LINK_ESTABLISHED) {
  5488  000114  0102               	movlb	2	; () banked
  5489  000116  EE20 F022          	lfsr	2,34
  5490  00011A  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5491  00011C  26D9               	addwf	fsr2l,f,c
  5492  00011E  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5493  000120  22DA               	addwfc	fsr2h,f,c
  5494  000122  04DE               	decf	postinc2,w,c
  5495  000124  A4D8               	btfss	status,2,c
  5496  000126  D01E               	goto	l537
  5497                           
  5498                           ; BSR set to: 2
  5499                           ;backgroundTasks.c: 54: ethernetController_setLEDConfig(LEDA, LED_ON);
  5500  000128  0E00               	movlw	0
  5501  00012A  0100               	movlb	0	; () banked
  5502  00012C  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5503  00012E  0E00               	movlw	0
  5504  000130  EC7A  F027         	call	_ethernetController_setLEDConfig
  5505                           
  5506                           ;backgroundTasks.c: 55: ethernetController_setLEDConfig(LEDB, LED_TRANSMIT_RECEIVE_EVENT
      +                          S);
  5507  000134  0E02               	movlw	2
  5508  000136  0100               	movlb	0	; () banked
  5509  000138  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5510  00013A  0E01               	movlw	1
  5511  00013C  EC7A  F027         	call	_ethernetController_setLEDConfig
  5512                           
  5513                           ;backgroundTasks.c: 56: ipv4_setIPSourceAddress(stack->source);
  5514  000140  0102               	movlb	2	; () banked
  5515  000142  EE20 F077          	lfsr	2,119
  5516  000146  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5517  000148  26D9               	addwf	fsr2l,f,c
  5518  00014A  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5519  00014C  22DA               	addwfc	fsr2h,f,c
  5520  00014E  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  5521  000152  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  5522  000156  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  5523  00015A  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  5524  00015E  ECD2  F030         	call	_ipv4_setIPSourceAddress	;wreg free
  5525                           
  5526                           ;backgroundTasks.c: 57: } else {
  5527  000162  D00E               	goto	l538
  5528  000164                     l537:
  5529                           
  5530                           ;backgroundTasks.c: 58: ethernetController_setLEDConfig(LEDA, LED_OFF);
  5531  000164  0E01               	movlw	1
  5532  000166  0100               	movlb	0	; () banked
  5533  000168  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5534  00016A  0E00               	movlw	0
  5535  00016C  EC7A  F027         	call	_ethernetController_setLEDConfig
  5536                           
  5537                           ;backgroundTasks.c: 59: ethernetController_setLEDConfig(LEDB, LED_OFF);
  5538  000170  0E01               	movlw	1
  5539  000172  0100               	movlb	0	; () banked
  5540  000174  6F6E               	movwf	ethernetController_setLEDConfig@conf& (0+255),b
  5541  000176  0E01               	movlw	1
  5542  000178  EC7A  F027         	call	_ethernetController_setLEDConfig
  5543                           
  5544                           ;backgroundTasks.c: 60: arp_init();
  5545  00017C  EC01  F02A         	call	_arp_init	;wreg free
  5546  000180                     l538:
  5547                           
  5548                           ;backgroundTasks.c: 61: }
  5549                           ;backgroundTasks.c: 62: ethernetController_clearInterruptFlag(LINKIF);
  5550  000180  0E0B               	movlw	11
  5551  000182  EC21  F031         	call	_ethernetController_clearInterruptFlag
  5552  000186                     l536:
  5553                           
  5554                           ;backgroundTasks.c: 63: }
  5555                           ;backgroundTasks.c: 66: if (intf.PKTIF) {
  5556  000186  0102               	movlb	2	; () banked
  5557  000188  A9D1               	btfss	handleStackBackgroundTasks@intf& (0+255),4,b
  5558  00018A  D00B               	goto	l540
  5559                           
  5560                           ; BSR set to: 2
  5561                           ;backgroundTasks.c: 68: if (ethernetController_newPacketAvailable()) {
  5562  00018C  ECEF  F030         	call	_ethernetController_newPacketAvailable	;wreg free
  5563  000190  0900               	iorlw	0
  5564  000192  B4D8               	btfsc	status,2,c
  5565  000194  D006               	goto	l540
  5566                           
  5567                           ;backgroundTasks.c: 70: ethernet_rxGetNewFrame(&stack->newReceivedFrame);
  5568  000196  C2CA  F1FC         	movff	handleStackBackgroundTasks@stack,ethernet_rxGetNewFrame@frame
  5569  00019A  C2CB  F1FD         	movff	handleStackBackgroundTasks@stack+1,ethernet_rxGetNewFrame@frame+1
  5570  00019E  EC69  F005         	call	_ethernet_rxGetNewFrame	;wreg free
  5571  0001A2                     l540:
  5572                           
  5573                           ;backgroundTasks.c: 71: }
  5574                           ;backgroundTasks.c: 72: }
  5575                           ;backgroundTasks.c: 75: if (intf.PCFULIF) {
  5576  0001A2  0102               	movlb	2	; () banked
  5577  0001A4  A3D2               	btfss	(handleStackBackgroundTasks@intf+1)& (0+255),1,b
  5578  0001A6  D036               	goto	l541
  5579                           
  5580                           ; BSR set to: 2
  5581                           ;backgroundTasks.c: 76: UARTTransmitText("\033[41;10;10m");
  5582  0001A8  0E17               	movlw	low STR_23
  5583  0001AA  0100               	movlb	0	; () banked
  5584  0001AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5585  0001AE  0E7F               	movlw	high STR_23
  5586  0001B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5587  0001B2  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5588                           
  5589                           ;backgroundTasks.c: 77: UARTTransmitText("\a");
  5590  0001B6  0EFD               	movlw	low STR_24
  5591  0001B8  0100               	movlb	0	; () banked
  5592  0001BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5593  0001BC  0E7F               	movlw	high STR_24
  5594  0001BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5595  0001C0  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5596                           
  5597                           ;backgroundTasks.c: 78: UARTTransmitText("\n\r------------------------------------------
      +                          ---------------\n\r");
  5598  0001C4  0EDE               	movlw	low STR_25
  5599  0001C6  0100               	movlb	0	; () banked
  5600  0001C8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5601  0001CA  0E78               	movlw	high STR_25
  5602  0001CC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5603  0001CE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5604                           
  5605                           ;backgroundTasks.c: 79: UARTTransmitText("*** CRITICAL ERROR: RX BUF OVFL CAUSED SYSTEM 
      +                          RESET ***\n\r");
  5606  0001D2  0E56               	movlw	low STR_26
  5607  0001D4  0100               	movlb	0	; () banked
  5608  0001D6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5609  0001D8  0E79               	movlw	high STR_26
  5610  0001DA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5611  0001DC  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5612                           
  5613                           ;backgroundTasks.c: 80: UARTTransmitText("----------------------------------------------
      +                          -----------");
  5614  0001E0  0E90               	movlw	low STR_27
  5615  0001E2  0100               	movlb	0	; () banked
  5616  0001E4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5617  0001E6  0E79               	movlw	high STR_27
  5618  0001E8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5619  0001EA  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5620                           
  5621                           ;backgroundTasks.c: 81: UARTTransmitText("\033[0m");
  5622  0001EE  0ED7               	movlw	low STR_7
  5623  0001F0  0100               	movlb	0	; () banked
  5624  0001F2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5625  0001F4  0E7F               	movlw	high STR_7
  5626  0001F6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5627  0001F8  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5628                           
  5629                           ;backgroundTasks.c: 82: UARTTransmitText("\n\r");
  5630  0001FC  0EDD               	movlw	low (STR_104+1)
  5631  0001FE  0100               	movlb	0	; () banked
  5632  000200  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5633  000202  0E7F               	movlw	high (STR_104+1)
  5634  000204  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5635  000206  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5636                           
  5637                           ;backgroundTasks.c: 83: ethernetController_disableEthernet();
  5638  00020A  EC4B  F031         	call	_ethernetController_disableEthernet	;wreg free
  5639                           
  5640                           ;backgroundTasks.c: 84: ethernetController_init();
  5641  00020E  ECDB  F026         	call	_ethernetController_init	;wreg free
  5642  000212  00FF               	reset		;# 
  5643  000214                     l541:
  5644                           
  5645                           ;backgroundTasks.c: 86: }
  5646                           ;backgroundTasks.c: 93: if (stack->background.fPacketPending == 1) {
  5647  000214  0102               	movlb	2	; () banked
  5648  000216  EE20 F034          	lfsr	2,52
  5649  00021A  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5650  00021C  26D9               	addwf	fsr2l,f,c
  5651  00021E  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5652  000220  22DA               	addwfc	fsr2h,f,c
  5653  000222  04DE               	decf	postinc2,w,c
  5654  000224  B4D8               	btfsc	status,2,c
  5655  000226  D147               	goto	l553
  5656  000228  D150               	goto	l557
  5657  00022A                     
  5658                           ; BSR set to: 2
  5659                           ;backgroundTasks.c: 107: if (stack->pendingPacketToSend.ipv4Header.totalLength > etherne
      +                          tController_getMTU()) {
  5660                           
  5661                           ; BSR set to: 2
  5662  00022A  EE20 F039          	lfsr	2,57
  5663  00022E  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5664  000230  26D9               	addwf	fsr2l,f,c
  5665  000232  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5666  000234  22DA               	addwfc	fsr2h,f,c
  5667  000236  EC2F  F031         	call	_ethernetController_getMTU	;wreg free
  5668  00023A  50DE               	movf	postinc2,w,c
  5669  00023C  0100               	movlb	0	; () banked
  5670  00023E  5D60               	subwf	?_ethernetController_getMTU& (0+255),w,b
  5671  000240  50DE               	movf	postinc2,w,c
  5672  000242  5961               	subwfb	(?_ethernetController_getMTU+1)& (0+255),w,b
  5673  000244  B0D8               	btfsc	status,0,c
  5674  000246  D002               	goto	l555
  5675                           
  5676                           ; BSR set to: 0
  5677                           ;backgroundTasks.c: 117: state = PREPARE_FRAGMENTING;
  5678  000248  0E01               	movlw	1
  5679  00024A  D0B4               	goto	L1
  5680  00024C                     l555:
  5681                           
  5682                           ;backgroundTasks.c: 119: state = SEND_FRAME;
  5683                           
  5684                           ; BSR set to: 2
  5685  00024C  0E02               	movlw	2
  5686  00024E  0102               	movlb	2	; () banked
  5687  000250  6F67               	movwf	handleStackBackgroundTasks@state& (0+255),b
  5688                           
  5689                           ; BSR set to: 2
  5690                           ;backgroundTasks.c: 120: currentPacket = stack->pendingPacketToSend;
  5691  000252  EE20 F035          	lfsr	2,53
  5692  000256  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5693  000258  26D9               	addwf	fsr2l,f,c
  5694  00025A  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5695  00025C  22DA               	addwfc	fsr2h,f,c
  5696  00025E  EE13  F000         	lfsr	1,handleStackBackgroundTasks@currentPacket
  5697  000262  0E41               	movlw	65
  5698  000264                     u13811:
  5699  000264  CFDB FFE3          	movff	plusw2,plusw1
  5700  000268  06E8               	decf	wreg,f,c
  5701  00026A  E2FC               	bc	u13811
  5702                           
  5703                           ; BSR set to: 2
  5704                           ;backgroundTasks.c: 121: }
  5705                           ;backgroundTasks.c: 122: break;
  5706  00026C  D12E               	goto	l557
  5707  00026E                     
  5708                           ; BSR set to: 2
  5709                           ;backgroundTasks.c: 124: currentPacket = stack->pendingPacketToSend;
  5710                           
  5711                           ; BSR set to: 2
  5712  00026E  EE20 F035          	lfsr	2,53
  5713  000272  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5714  000274  26D9               	addwf	fsr2l,f,c
  5715  000276  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5716  000278  22DA               	addwfc	fsr2h,f,c
  5717  00027A  EE13  F000         	lfsr	1,handleStackBackgroundTasks@currentPacket
  5718  00027E  0E41               	movlw	65
  5719  000280                     u13821:
  5720  000280  CFDB FFE3          	movff	plusw2,plusw1
  5721  000284  06E8               	decf	wreg,f,c
  5722  000286  E2FC               	bc	u13821
  5723                           
  5724                           ; BSR set to: 2
  5725                           ;backgroundTasks.c: 125: if (numberOfPacketsSent == 0) {
  5726  000288  5166               	movf	handleStackBackgroundTasks@numberOfPacketsSent& (0+255),w,b
  5727  00028A  A4D8               	btfss	status,2,c
  5728  00028C  D007               	goto	l559
  5729                           
  5730                           ; BSR set to: 2
  5731                           ;backgroundTasks.c: 127: currentPacket.ethernet.memory.length = ethernetController_getMT
      +                          U();
  5732  00028E  EC2F  F031         	call	_ethernetController_getMTU	;wreg free
  5733  000292  C060  F334         	movff	?_ethernetController_getMTU,handleStackBackgroundTasks@currentPacket+52
  5734  000296  C061  F335         	movff	?_ethernetController_getMTU+1,handleStackBackgroundTasks@currentPacket+53
  5735  00029A  D01C               	goto	l562
  5736  00029C                     l559:
  5737                           
  5738                           ;backgroundTasks.c: 132: if (remainingLength >= ethernetController_getMTU())
  5739                           
  5740                           ; BSR set to: 1
  5741  00029C  EC2F  F031         	call	_ethernetController_getMTU	;wreg free
  5742  0002A0  0101               	movlb	1	; () banked
  5743  0002A2  51FE               	movf	handleStackBackgroundTasks@remainingLength& (0+255),w,b
  5744  0002A4  0102               	movlb	2	; () banked
  5745  0002A6  6FCC               	movwf	??_handleStackBackgroundTasks& (0+255),b
  5746  0002A8  6BCD               	clrf	(??_handleStackBackgroundTasks+1)& (0+255),b
  5747  0002AA  0100               	movlb	0	; () banked
  5748  0002AC  5160               	movf	?_ethernetController_getMTU& (0+255),w,b
  5749  0002AE  0102               	movlb	2	; () banked
  5750  0002B0  5DCC               	subwf	??_handleStackBackgroundTasks& (0+255),w,b
  5751  0002B2  0100               	movlb	0	; () banked
  5752  0002B4  5161               	movf	(?_ethernetController_getMTU+1)& (0+255),w,b
  5753  0002B6  0102               	movlb	2	; () banked
  5754  0002B8  59CD               	subwfb	(??_handleStackBackgroundTasks+1)& (0+255),w,b
  5755  0002BA  A0D8               	btfss	status,0,c
  5756  0002BC  D007               	goto	l561
  5757                           
  5758                           ; BSR set to: 2
  5759                           ;backgroundTasks.c: 133: currentPacket.ethernet.memory.length = ethernetController_getMT
      +                          U();
  5760  0002BE  EC2F  F031         	call	_ethernetController_getMTU	;wreg free
  5761  0002C2  C060  F334         	movff	?_ethernetController_getMTU,handleStackBackgroundTasks@currentPacket+52
  5762  0002C6  C061  F335         	movff	?_ethernetController_getMTU+1,handleStackBackgroundTasks@currentPacket+53
  5763  0002CA  D004               	goto	l562
  5764  0002CC                     l561:
  5765                           
  5766                           ; BSR set to: 2
  5767                           ;backgroundTasks.c: 134: else
  5768                           ;backgroundTasks.c: 135: currentPacket.ethernet.memory.length = remainingLength;
  5769  0002CC  C1FE  F334         	movff	handleStackBackgroundTasks@remainingLength,handleStackBackgroundTasks@currentPack
      +                          et+52
  5770  0002D0  0103               	movlb	3	; () banked
  5771  0002D2  6B35               	clrf	(handleStackBackgroundTasks@currentPacket+53)& (0+255),b
  5772  0002D4                     l562:
  5773                           
  5774                           ;backgroundTasks.c: 136: currentPacket.ethernet.memory.end = currentPacket.ethernet.memo
      +                          ry.start + currentPacket.ethernet.memory.length;
  5775                           
  5776                           ; BSR set to: 3
  5777  0002D4  0103               	movlb	3	; () banked
  5778  0002D6  5134               	movf	(handleStackBackgroundTasks@currentPacket+52)& (0+255),w,b
  5779  0002D8  2530               	addwf	(handleStackBackgroundTasks@currentPacket+48)& (0+255),w,b
  5780  0002DA  6F32               	movwf	(handleStackBackgroundTasks@currentPacket+50)& (0+255),b
  5781  0002DC  5135               	movf	(handleStackBackgroundTasks@currentPacket+53)& (0+255),w,b
  5782  0002DE  2131               	addwfc	(handleStackBackgroundTasks@currentPacket+49)& (0+255),w,b
  5783  0002E0  6F33               	movwf	(handleStackBackgroundTasks@currentPacket+51)& (0+255),b
  5784                           
  5785                           ;backgroundTasks.c: 137: remainingLength = currentPacket.ipv4Header.totalLength - curren
      +                          tPacket.ethernet.memory.length;
  5786  0002E2  5134               	movf	(handleStackBackgroundTasks@currentPacket+52)& (0+255),w,b
  5787  0002E4  0800               	sublw	0
  5788  0002E6  2504               	addwf	(handleStackBackgroundTasks@currentPacket+4)& (0+255),w,b
  5789  0002E8  0101               	movlb	1	; () banked
  5790  0002EA  6FFE               	movwf	handleStackBackgroundTasks@remainingLength& (0+255),b
  5791                           
  5792                           ; BSR set to: 1
  5793                           ;backgroundTasks.c: 138: lastEndAddress = currentPacket.ethernet.memory.end;
  5794  0002EC  C332  F262         	movff	handleStackBackgroundTasks@currentPacket+50,handleStackBackgroundTasks@lastEndAdd
      +                          ress
  5795  0002F0  C333  F263         	movff	handleStackBackgroundTasks@currentPacket+51,handleStackBackgroundTasks@lastEndAdd
      +                          ress+1
  5796                           
  5797                           ; BSR set to: 1
  5798                           ;backgroundTasks.c: 139: }
  5799                           ;backgroundTasks.c: 140: UARTTransmitText(intToString(currentPacket.ethernet.memory.star
      +                          t));
  5800                           
  5801                           ; BSR set to: 1
  5802  0002F4  C330  F084         	movff	handleStackBackgroundTasks@currentPacket+48,intToString@val
  5803  0002F8  C331  F085         	movff	handleStackBackgroundTasks@currentPacket+49,intToString@val+1
  5804  0002FC  0100               	movlb	0	; () banked
  5805  0002FE  6B86               	clrf	(intToString@val+2)& (0+255),b
  5806  000300  6B87               	clrf	(intToString@val+3)& (0+255),b
  5807  000302  EC11  F02F         	call	_intToString	;wreg free
  5808  000306  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5809  00030A  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5810  00030E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5811                           
  5812                           ;backgroundTasks.c: 141: UARTTransmitText(" -> ");
  5813  000312  0ECD               	movlw	low STR_30
  5814  000314  0100               	movlb	0	; () banked
  5815  000316  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5816  000318  0E7F               	movlw	high STR_30
  5817  00031A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5818  00031C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5819                           
  5820                           ;backgroundTasks.c: 142: UARTTransmitText(intToString(currentPacket.ethernet.memory.end)
      +                          );
  5821  000320  C332  F084         	movff	handleStackBackgroundTasks@currentPacket+50,intToString@val
  5822  000324  C333  F085         	movff	handleStackBackgroundTasks@currentPacket+51,intToString@val+1
  5823  000328  0100               	movlb	0	; () banked
  5824  00032A  6B86               	clrf	(intToString@val+2)& (0+255),b
  5825  00032C  6B87               	clrf	(intToString@val+3)& (0+255),b
  5826  00032E  EC11  F02F         	call	_intToString	;wreg free
  5827  000332  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5828  000336  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5829  00033A  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5830                           
  5831                           ;backgroundTasks.c: 143: UARTTransmitText(" (");
  5832  00033E  0EEF               	movlw	low STR_31
  5833  000340  0100               	movlb	0	; () banked
  5834  000342  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5835  000344  0E7F               	movlw	high STR_31
  5836  000346  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5837  000348  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5838                           
  5839                           ;backgroundTasks.c: 144: UARTTransmitText(intToString(currentPacket.ethernet.memory.leng
      +                          th));
  5840  00034C  C334  F084         	movff	handleStackBackgroundTasks@currentPacket+52,intToString@val
  5841  000350  C335  F085         	movff	handleStackBackgroundTasks@currentPacket+53,intToString@val+1
  5842  000354  0100               	movlb	0	; () banked
  5843  000356  6B86               	clrf	(intToString@val+2)& (0+255),b
  5844  000358  6B87               	clrf	(intToString@val+3)& (0+255),b
  5845  00035A  EC11  F02F         	call	_intToString	;wreg free
  5846  00035E  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5847  000362  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5848  000366  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5849                           
  5850                           ;backgroundTasks.c: 145: UARTTransmitText(") ");
  5851  00036A  0EEC               	movlw	low STR_32
  5852  00036C  0100               	movlb	0	; () banked
  5853  00036E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5854  000370  0E7F               	movlw	high STR_32
  5855  000372  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5856  000374  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5857                           
  5858                           ;backgroundTasks.c: 146: UARTTransmitText("Remaining Length is ");
  5859  000378  0E77               	movlw	low STR_33
  5860  00037A  0100               	movlb	0	; () banked
  5861  00037C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5862  00037E  0E7D               	movlw	high STR_33
  5863  000380  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5864  000382  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5865                           
  5866                           ;backgroundTasks.c: 147: UARTTransmitText(intToString(remainingLength));
  5867  000386  0101               	movlb	1	; () banked
  5868  000388  51FE               	movf	handleStackBackgroundTasks@remainingLength& (0+255),w,b
  5869  00038A  0100               	movlb	0	; () banked
  5870  00038C  6F84               	movwf	intToString@val& (0+255),b
  5871  00038E  6B85               	clrf	(intToString@val+1)& (0+255),b
  5872  000390  6B86               	clrf	(intToString@val+2)& (0+255),b
  5873  000392  6B87               	clrf	(intToString@val+3)& (0+255),b
  5874  000394  EC11  F02F         	call	_intToString	;wreg free
  5875  000398  C084  F098         	movff	?_intToString,UARTTransmitText@str
  5876  00039C  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  5877  0003A0  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5878                           
  5879                           ;backgroundTasks.c: 148: UARTTransmitText("\n\r");
  5880  0003A4  0EDD               	movlw	low (STR_104+1)
  5881  0003A6  0100               	movlb	0	; () banked
  5882  0003A8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5883  0003AA  0E7F               	movlw	high (STR_104+1)
  5884  0003AC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5885  0003AE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5886                           
  5887                           ;backgroundTasks.c: 149: state = SEND_FRAME;
  5888  0003B2  0E02               	movlw	2
  5889  0003B4                     L1:
  5890  0003B4  0102               	movlb	2	; () banked
  5891  0003B6  D025               	goto	L2
  5892  0003B8                     
  5893                           ; BSR set to: 2
  5894                           ;backgroundTasks.c: 152: errIPv4 = ipv4_sendFrame(stack->pendingPacketToSend);
  5895                           
  5896                           ; BSR set to: 2
  5897  0003B8  EE20 F035          	lfsr	2,53
  5898  0003BC  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5899  0003BE  26D9               	addwf	fsr2l,f,c
  5900  0003C0  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5901  0003C2  22DA               	addwfc	fsr2h,f,c
  5902  0003C4  EE01  F034         	lfsr	0,ipv4_sendFrame@ipPacket
  5903  0003C8  0E41               	movlw	65
  5904  0003CA                     u13851:
  5905  0003CA  CFDB FFEB          	movff	plusw2,plusw0
  5906  0003CE  06E8               	decf	wreg,f,c
  5907  0003D0  E2FC               	bc	u13851
  5908  0003D2  ECB3  F01B         	call	_ipv4_sendFrame	;wreg free
  5909  0003D6  C134  F2D3         	movff	?_ipv4_sendFrame,handleStackBackgroundTasks@errIPv4
  5910  0003DA  C135  F2D4         	movff	?_ipv4_sendFrame+1,handleStackBackgroundTasks@errIPv4+1
  5911  0003DE  C136  F2D5         	movff	?_ipv4_sendFrame+2,handleStackBackgroundTasks@errIPv4+2
  5912                           
  5913                           ;backgroundTasks.c: 153: numberOfPacketsSent++;
  5914  0003E2  0102               	movlb	2	; () banked
  5915  0003E4  2B66               	incf	handleStackBackgroundTasks@numberOfPacketsSent& (0+255),f,b
  5916                           
  5917                           ; BSR set to: 2
  5918                           ;backgroundTasks.c: 154: if (errIPv4.module == ERROR_MODULE_ARP) {
  5919  0003E6  0E03               	movlw	3
  5920  0003E8  19D3               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  5921  0003EA  B4D8               	btfsc	status,2,c
  5922  0003EC  D049               	goto	l565
  5923  0003EE  D06D               	goto	l557
  5924  0003F0                     
  5925                           ; BSR set to: 2
  5926                           ;backgroundTasks.c: 162: stack->background.fPacketPending = 0;
  5927                           
  5928                           ; BSR set to: 2
  5929  0003F0  EE20 F034          	lfsr	2,52
  5930  0003F4  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5931  0003F6  26D9               	addwf	fsr2l,f,c
  5932  0003F8  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5933  0003FA  22DA               	addwfc	fsr2h,f,c
  5934  0003FC  0E00               	movlw	0
  5935  0003FE  6EDF               	movwf	indf2,c
  5936                           
  5937                           ; BSR set to: 2
  5938                           ;backgroundTasks.c: 163: state = INIT;
  5939  000400  0E00               	movlw	0
  5940  000402                     L2:
  5941  000402  6F67               	movwf	handleStackBackgroundTasks@state& (0+255),b
  5942                           
  5943                           ;backgroundTasks.c: 164: break;
  5944  000404  D062               	goto	l557
  5945  000406                     
  5946                           ; BSR set to: 2
  5947                           ;backgroundTasks.c: 167: UARTTransmitText("\033[41;10;10m");
  5948                           
  5949                           ; BSR set to: 2
  5950  000406  0E17               	movlw	low STR_23
  5951  000408  0100               	movlb	0	; () banked
  5952  00040A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5953  00040C  0E7F               	movlw	high STR_23
  5954  00040E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5955  000410  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5956                           
  5957                           ;backgroundTasks.c: 168: UARTTransmitText("[IPv4]: Failed to resolve ");
  5958  000414  0EB5               	movlw	low STR_36
  5959  000416  0100               	movlb	0	; () banked
  5960  000418  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5961  00041A  0E7C               	movlw	high STR_36
  5962  00041C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5963  00041E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5964                           
  5965                           ;backgroundTasks.c: 169: UARTTransmitText(ipAdressToString(stack->pendingPacketToSend.ip
      +                          v4Header.destination));
  5966  000422  0102               	movlb	2	; () banked
  5967  000424  EE20 F048          	lfsr	2,72
  5968  000428  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  5969  00042A  26D9               	addwf	fsr2l,f,c
  5970  00042C  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  5971  00042E  22DA               	addwfc	fsr2h,f,c
  5972  000430  CFDE F073          	movff	postinc2,ipAdressToString@ip
  5973  000434  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  5974  000438  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  5975  00043C  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  5976  000440  EC96  F016         	call	_ipAdressToString	;wreg free
  5977  000444  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  5978  000448  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  5979  00044C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5980                           
  5981                           ;backgroundTasks.c: 170: UARTTransmitText("\033[0m");
  5982  000450  0ED7               	movlw	low STR_7
  5983  000452  0100               	movlb	0	; () banked
  5984  000454  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5985  000456  0E7F               	movlw	high STR_7
  5986  000458  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5987  00045A  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5988                           
  5989                           ;backgroundTasks.c: 171: UARTTransmitText("\n\r");
  5990  00045E  0EDD               	movlw	low (STR_104+1)
  5991  000460  0100               	movlb	0	; () banked
  5992  000462  6F98               	movwf	UARTTransmitText@str& (0+255),b
  5993  000464  0E7F               	movlw	high (STR_104+1)
  5994  000466  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  5995  000468  EC42  F02C         	call	_UARTTransmitText	;wreg free
  5996                           
  5997                           ;backgroundTasks.c: 174: stack->background.fPacketPending = 0;
  5998  00046C  0102               	movlb	2	; () banked
  5999  00046E  EE20 F034          	lfsr	2,52
  6000  000472  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6001  000474  26D9               	addwf	fsr2l,f,c
  6002  000476  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6003  000478  22DA               	addwfc	fsr2h,f,c
  6004  00047A  0E00               	movlw	0
  6005  00047C  6EDF               	movwf	indf2,c
  6006                           
  6007                           ; BSR set to: 2
  6008                           ;backgroundTasks.c: 178: }
  6009                           
  6010                           ; BSR set to: 2
  6011                           ;backgroundTasks.c: 177: break;
  6012                           
  6013                           ;backgroundTasks.c: 176: default:
  6014                           
  6015                           ;backgroundTasks.c: 175: break;
  6016  00047E  D025               	goto	l557
  6017  000480                     l565:
  6018                           
  6019                           ; BSR set to: 2
  6020                           
  6021                           ; BSR set to: 2
  6022  000480  EE22  F0D4         	lfsr	2,handleStackBackgroundTasks@errIPv4+1
  6023  000484  CFDE F2CC          	movff	postinc2,??_handleStackBackgroundTasks
  6024  000488  CFDD F2CD          	movff	postdec2,??_handleStackBackgroundTasks+1
  6025                           
  6026                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  6027                           ; Switch size 1, requested type "space"
  6028                           ; Number of cases is 2, Range of values is 0 to 1
  6029                           ; switch strategies available:
  6030                           ; Name         Instructions Cycles
  6031                           ; simple_byte            7     4 (average)
  6032                           ;	Chosen strategy is simple_byte
  6033  00048C  51CD               	movf	(??_handleStackBackgroundTasks+1)& (0+255),w,b
  6034  00048E  0A00               	xorlw	0	; case 0
  6035  000490  B4D8               	btfsc	status,2,c
  6036  000492  D004               	goto	l12087
  6037  000494  0A01               	xorlw	1	; case 1
  6038  000496  B4D8               	btfsc	status,2,c
  6039  000498  D006               	goto	l12089
  6040  00049A  D017               	goto	l557
  6041  00049C                     l12087:
  6042                           
  6043                           ; BSR set to: 2
  6044                           ; Switch size 1, requested type "space"
  6045                           ; Number of cases is 1, Range of values is 0 to 0
  6046                           ; switch strategies available:
  6047                           ; Name         Instructions Cycles
  6048                           ; simple_byte            4     3 (average)
  6049                           ;	Chosen strategy is simple_byte
  6050  00049C  51CC               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  6051  00049E  0A00               	xorlw	0	; case 0
  6052  0004A0  B4D8               	btfsc	status,2,c
  6053  0004A2  D7A6               	goto	l568
  6054  0004A4  D012               	goto	l557
  6055  0004A6                     l12089:
  6056                           
  6057                           ; BSR set to: 2
  6058                           ; Switch size 1, requested type "space"
  6059                           ; Number of cases is 2, Range of values is 145 to 148
  6060                           ; switch strategies available:
  6061                           ; Name         Instructions Cycles
  6062                           ; simple_byte            7     4 (average)
  6063                           ;	Chosen strategy is simple_byte
  6064  0004A6  51CC               	movf	??_handleStackBackgroundTasks& (0+255),w,b
  6065  0004A8  0A91               	xorlw	145	; case 145
  6066  0004AA  B4D8               	btfsc	status,2,c
  6067  0004AC  D00E               	goto	l557
  6068  0004AE  0A05               	xorlw	5	; case 148
  6069  0004B0  B4D8               	btfsc	status,2,c
  6070  0004B2  D7A9               	goto	l569
  6071                           
  6072                           ; BSR set to: 2
  6073                           ;backgroundTasks.c: 183: }
  6074                           
  6075                           ; BSR set to: 2
  6076                           ;backgroundTasks.c: 181: }
  6077                           ;backgroundTasks.c: 182: break;
  6078                           
  6079                           ; BSR set to: 2
  6080                           
  6081                           ; BSR set to: 2
  6082                           ;backgroundTasks.c: 179: } else {
  6083  0004B4  D00A               	goto	l557
  6084  0004B6                     l553:
  6085                           
  6086                           ; BSR set to: 2
  6087                           
  6088                           ; BSR set to: 2
  6089  0004B6  5167               	movf	handleStackBackgroundTasks@state& (0+255),w,b
  6090                           
  6091                           ; Switch size 1, requested type "space"
  6092                           ; Number of cases is 3, Range of values is 0 to 2
  6093                           ; switch strategies available:
  6094                           ; Name         Instructions Cycles
  6095                           ; simple_byte           10     6 (average)
  6096                           ;	Chosen strategy is simple_byte
  6097  0004B8  0A00               	xorlw	0	; case 0
  6098  0004BA  B4D8               	btfsc	status,2,c
  6099  0004BC  D6B6               	goto	l554
  6100  0004BE  0A01               	xorlw	1	; case 1
  6101  0004C0  B4D8               	btfsc	status,2,c
  6102  0004C2  D6D5               	goto	l558
  6103  0004C4  0A03               	xorlw	3	; case 2
  6104  0004C6  B4D8               	btfsc	status,2,c
  6105  0004C8  D777               	goto	l563
  6106  0004CA                     l557:
  6107                           
  6108                           ; BSR set to: 2
  6109                           ;backgroundTasks.c: 186: }
  6110                           ;backgroundTasks.c: 189: errArp = arp_background(stack->ethernet.link);
  6111                           
  6112                           ; BSR set to: 2
  6113                           
  6114                           ; BSR set to: 2
  6115  0004CA  EE20 F022          	lfsr	2,34
  6116  0004CE  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6117  0004D0  26D9               	addwf	fsr2l,f,c
  6118  0004D2  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6119  0004D4  22DA               	addwfc	fsr2h,f,c
  6120  0004D6  50DF               	movf	indf2,w,c
  6121  0004D8  EC74  F01C         	call	_arp_background
  6122  0004DC  C151  F2CE         	movff	?_arp_background,handleStackBackgroundTasks@errArp
  6123  0004E0  C152  F2CF         	movff	?_arp_background+1,handleStackBackgroundTasks@errArp+1
  6124  0004E4  C153  F2D0         	movff	?_arp_background+2,handleStackBackgroundTasks@errArp+2
  6125                           
  6126                           ;backgroundTasks.c: 190: errIPv4 = ipv4_background(stack->ethernet.link);
  6127  0004E8  0102               	movlb	2	; () banked
  6128  0004EA  EE20 F022          	lfsr	2,34
  6129  0004EE  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6130  0004F0  26D9               	addwf	fsr2l,f,c
  6131  0004F2  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6132  0004F4  22DA               	addwfc	fsr2h,f,c
  6133  0004F6  50DF               	movf	indf2,w,c
  6134  0004F8  EC3F  F01F         	call	_ipv4_background
  6135  0004FC  C060  F2D3         	movff	?_ipv4_background,handleStackBackgroundTasks@errIPv4
  6136  000500  C061  F2D4         	movff	?_ipv4_background+1,handleStackBackgroundTasks@errIPv4+1
  6137  000504  C062  F2D5         	movff	?_ipv4_background+2,handleStackBackgroundTasks@errIPv4+2
  6138                           
  6139                           ;backgroundTasks.c: 192: if (errIPv4.module == ERROR_MODULE_IPv4 &&
  6140                           ;backgroundTasks.c: 193: errIPv4.code == ERROR_IPv4_ADDRESS_ALREADY_IN_USE) {
  6141  000508  0E04               	movlw	4
  6142  00050A  0102               	movlb	2	; () banked
  6143  00050C  19D3               	xorwf	handleStackBackgroundTasks@errIPv4& (0+255),w,b
  6144  00050E  A4D8               	btfss	status,2,c
  6145  000510  0012               	return	
  6146                           
  6147                           ; BSR set to: 2
  6148  000512  0EF5               	movlw	245
  6149  000514  19D4               	xorwf	(handleStackBackgroundTasks@errIPv4+1)& (0+255),w,b
  6150  000516  E16E               	bnz	l573
  6151  000518  05D5               	decf	(handleStackBackgroundTasks@errIPv4+2)& (0+255),w,b
  6152  00051A  A4D8               	btfss	status,2,c
  6153  00051C  0012               	return	
  6154                           
  6155                           ; BSR set to: 2
  6156                           ;backgroundTasks.c: 195: UARTTransmitText("\033[41;10;10m");
  6157  00051E  0E17               	movlw	low STR_23
  6158  000520  0100               	movlb	0	; () banked
  6159  000522  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6160  000524  0E7F               	movlw	high STR_23
  6161  000526  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6162  000528  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6163                           
  6164                           ;backgroundTasks.c: 196: UARTTransmitText("[IPv4]: Address conflict detected.\n\r");
  6165  00052C  0E2B               	movlw	low STR_40
  6166  00052E  0100               	movlb	0	; () banked
  6167  000530  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6168  000532  0E7B               	movlw	high STR_40
  6169  000534  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6170  000536  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6171                           
  6172                           ;backgroundTasks.c: 197: UARTTransmitText("\033[0m");
  6173  00053A  0ED7               	movlw	low STR_7
  6174  00053C  0100               	movlb	0	; () banked
  6175  00053E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6176  000540  0E7F               	movlw	high STR_7
  6177  000542  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6178  000544  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6179                           
  6180                           ;backgroundTasks.c: 199: stack->source = ipv4_generateAutoIP();
  6181  000548  EC86  F02D         	call	_ipv4_generateAutoIP	;wreg free
  6182  00054C  0102               	movlb	2	; () banked
  6183  00054E  EE20 F077          	lfsr	2,119
  6184  000552  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6185  000554  26D9               	addwf	fsr2l,f,c
  6186  000556  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6187  000558  22DA               	addwfc	fsr2h,f,c
  6188  00055A  0100               	movlb	0	; () banked
  6189  00055C  C074  FFDE         	movff	?_ipv4_generateAutoIP,postinc2
  6190  000560  C075  FFDE         	movff	?_ipv4_generateAutoIP+1,postinc2
  6191  000564  C076  FFDE         	movff	?_ipv4_generateAutoIP+2,postinc2
  6192  000568  C077  FFDE         	movff	?_ipv4_generateAutoIP+3,postinc2
  6193                           
  6194                           ; BSR set to: 0
  6195                           ;backgroundTasks.c: 201: UARTTransmitText("\033[41;10;10m");
  6196  00056C  0E17               	movlw	low STR_23
  6197  00056E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6198  000570  0E7F               	movlw	high STR_23
  6199  000572  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6200  000574  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6201                           
  6202                           ;backgroundTasks.c: 202: UARTTransmitText("[IPv4]: Setting IPv4 Src Address to ");
  6203  000578  0E50               	movlw	low STR_43
  6204  00057A  0100               	movlb	0	; () banked
  6205  00057C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6206  00057E  0E7B               	movlw	high STR_43
  6207  000580  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6208  000582  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6209                           
  6210                           ;backgroundTasks.c: 203: UARTTransmitText(ipAdressToString(stack->source));
  6211  000586  0102               	movlb	2	; () banked
  6212  000588  EE20 F077          	lfsr	2,119
  6213  00058C  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6214  00058E  26D9               	addwf	fsr2l,f,c
  6215  000590  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6216  000592  22DA               	addwfc	fsr2h,f,c
  6217  000594  CFDE F073          	movff	postinc2,ipAdressToString@ip
  6218  000598  CFDE F074          	movff	postinc2,ipAdressToString@ip+1
  6219  00059C  CFDE F075          	movff	postinc2,ipAdressToString@ip+2
  6220  0005A0  CFDE F076          	movff	postinc2,ipAdressToString@ip+3
  6221  0005A4  EC96  F016         	call	_ipAdressToString	;wreg free
  6222  0005A8  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  6223  0005AC  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  6224  0005B0  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6225                           
  6226                           ;backgroundTasks.c: 204: UARTTransmitText("\n\r");
  6227  0005B4  0EDD               	movlw	low (STR_104+1)
  6228  0005B6  0100               	movlb	0	; () banked
  6229  0005B8  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6230  0005BA  0E7F               	movlw	high (STR_104+1)
  6231  0005BC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6232  0005BE  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6233                           
  6234                           ;backgroundTasks.c: 205: UARTTransmitText("\033[0m");
  6235  0005C2  0ED7               	movlw	low STR_7
  6236  0005C4  0100               	movlb	0	; () banked
  6237  0005C6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  6238  0005C8  0E7F               	movlw	high STR_7
  6239  0005CA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  6240  0005CC  EC42  F02C         	call	_UARTTransmitText	;wreg free
  6241                           
  6242                           ;backgroundTasks.c: 207: ipv4_setIPSourceAddress(stack->source);
  6243  0005D0  0102               	movlb	2	; () banked
  6244  0005D2  EE20 F077          	lfsr	2,119
  6245  0005D6  51CA               	movf	handleStackBackgroundTasks@stack& (0+255),w,b
  6246  0005D8  26D9               	addwf	fsr2l,f,c
  6247  0005DA  51CB               	movf	(handleStackBackgroundTasks@stack+1)& (0+255),w,b
  6248  0005DC  22DA               	addwfc	fsr2h,f,c
  6249  0005DE  CFDE F060          	movff	postinc2,ipv4_setIPSourceAddress@ip
  6250  0005E2  CFDE F061          	movff	postinc2,ipv4_setIPSourceAddress@ip+1
  6251  0005E6  CFDE F062          	movff	postinc2,ipv4_setIPSourceAddress@ip+2
  6252  0005EA  CFDE F063          	movff	postinc2,ipv4_setIPSourceAddress@ip+3
  6253  0005EE  ECD2  F030         	call	_ipv4_setIPSourceAddress	;wreg free
  6254  0005F2  0012               	return	
  6255  0005F4                     l573:
  6256  0005F4  0012               	return		;funcret
  6257  0005F6                     __end_of_handleStackBackgroundTasks:
  6258                           	opt stack 0
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           intcon	equ	0xFF2
  6266                           intcon3	equ	0xFF0
  6267                           indf0	equ	0xFEF
  6268                           postinc0	equ	0xFEE
  6269                           plusw0	equ	0xFEB
  6270                           fsr0h	equ	0xFEA
  6271                           fsr0l	equ	0xFE9
  6272                           wreg	equ	0xFE8
  6273                           postdec1	equ	0xFE5
  6274                           plusw1	equ	0xFE3
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           plusw2	equ	0xFDB
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _ipv4_setIPSourceAddress *****************
  6285 ;; Defined at:
  6286 ;;		line 400 in file "src/stack/protocols/ipv4.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;  ip              4    0[BANK0 ] struct ipv4_address
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		None
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6300 ;;      Params:         0       4       0       0       0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6303 ;;      Totals:         0       4       0       0       0       0       0       0       0
  6304 ;;Total ram usage:        4 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    4
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_handleStackBackgroundTasks
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           	psect	text8
  6315  0061A4                     __ptext8:
  6316                           	opt stack 0
  6317  0061A4                     _ipv4_setIPSourceAddress:
  6318                           	opt stack 25
  6319                           
  6320                           ;ipv4.c: 401: ipPreliminarySource = ip;
  6321                           
  6322                           ;incstack = 0
  6323  0061A4  C060  F282         	movff	ipv4_setIPSourceAddress@ip,_ipPreliminarySource
  6324  0061A8  C061  F283         	movff	ipv4_setIPSourceAddress@ip+1,_ipPreliminarySource+1
  6325  0061AC  C062  F284         	movff	ipv4_setIPSourceAddress@ip+2,_ipPreliminarySource+2
  6326  0061B0  C063  F285         	movff	ipv4_setIPSourceAddress@ip+3,_ipPreliminarySource+3
  6327                           
  6328                           ;ipv4.c: 402: fSrcAddrChanged = 1;
  6329  0061B4  8050               	bsf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  6330  0061B6  0012               	return		;funcret
  6331  0061B8                     __end_of_ipv4_setIPSourceAddress:
  6332                           	opt stack 0
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           intcon	equ	0xFF2
  6340                           intcon3	equ	0xFF0
  6341                           indf0	equ	0xFEF
  6342                           postinc0	equ	0xFEE
  6343                           plusw0	equ	0xFEB
  6344                           fsr0h	equ	0xFEA
  6345                           fsr0l	equ	0xFE9
  6346                           wreg	equ	0xFE8
  6347                           postdec1	equ	0xFE5
  6348                           plusw1	equ	0xFE3
  6349                           fsr1l	equ	0xFE1
  6350                           indf2	equ	0xFDF
  6351                           postinc2	equ	0xFDE
  6352                           postdec2	equ	0xFDD
  6353                           plusw2	equ	0xFDB
  6354                           fsr2h	equ	0xFDA
  6355                           fsr2l	equ	0xFD9
  6356                           status	equ	0xFD8
  6357                           
  6358 ;; *************** function _ipv4_sendFrame *****************
  6359 ;; Defined at:
  6360 ;;		line 53 in file "src/stack/protocols/ipv4.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;  ipPacket       66   52[BANK1 ] struct ipv4_packet
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;  err             3  157[BANK0 ] struct error
  6365 ;;  index           1  156[BANK0 ] unsigned char 
  6366 ;; Return value:  Size  Location     Type
  6367 ;;                  3   52[BANK1 ] struct error
  6368 ;; Registers used:
  6369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6370 ;; Tracked objects:
  6371 ;;		On entry : 0/0
  6372 ;;		On exit  : 0/0
  6373 ;;		Unchanged: 0/0
  6374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6375 ;;      Params:         0       0      66       0       0       0       0       0       0
  6376 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6377 ;;      Temps:          0       0       8       0       0       0       0       0       0
  6378 ;;      Totals:         0       4      74       0       0       0       0       0       0
  6379 ;;Total ram usage:       78 bytes
  6380 ;; Hardware stack levels used:    1
  6381 ;; Hardware stack levels required when called:   11
  6382 ;; This function calls:
  6383 ;;		_arp_checkForEntry
  6384 ;;		_arp_getEntryFromTable
  6385 ;;		_arp_sendRequest
  6386 ;;		_ethernetController_getMacAddress
  6387 ;;		_ethernetController_sendPacket
  6388 ;;		_ethernetController_writeDestinationMACAddress
  6389 ;;		_getMillis
  6390 ;; This function is called by:
  6391 ;;		_handleStackBackgroundTasks
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text9
  6396  003766                     __ptext9:
  6397                           	opt stack 0
  6398  003766                     _ipv4_sendFrame:
  6399                           	opt stack 18
  6400                           
  6401                           ;ipv4.c: 54: error_t err;
  6402                           ;ipv4.c: 55: err.module = ERROR_MODULE_ARP;
  6403                           
  6404                           ;incstack = 0
  6405  003766  0E03               	movlw	3
  6406  003768  0100               	movlb	0	; () banked
  6407  00376A  6FFD               	movwf	ipv4_sendFrame@err& (0+255),b
  6408                           
  6409                           ;ipv4.c: 56: err.code = ERROR_ARP_WAITING;
  6410  00376C  0E01               	movlw	1
  6411  00376E  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6412  003770  0E91               	movlw	145
  6413  003772  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6414                           
  6415                           ; BSR set to: 0
  6416                           ;ipv4.c: 57: uint8_t index;
  6417                           ;ipv4.c: 58: uint8_t static failedResolveCounter = 0;
  6418                           ;ipv4.c: 59: time_t static oldTime = 0;
  6419                           ;ipv4.c: 63: if (arp_checkForEntry(ipPacket.ipv4Header.destination, &index)) {
  6420  003774  C147  F067         	movff	ipv4_sendFrame@ipPacket+19,arp_checkForEntry@ip
  6421  003778  C148  F068         	movff	ipv4_sendFrame@ipPacket+20,arp_checkForEntry@ip+1
  6422  00377C  C149  F069         	movff	ipv4_sendFrame@ipPacket+21,arp_checkForEntry@ip+2
  6423  003780  C14A  F06A         	movff	ipv4_sendFrame@ipPacket+22,arp_checkForEntry@ip+3
  6424  003784  0EFC               	movlw	low ipv4_sendFrame@index
  6425  003786  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
  6426  003788  0E00               	movlw	high ipv4_sendFrame@index
  6427  00378A  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
  6428  00378C  EC84  F025         	call	_arp_checkForEntry	;wreg free
  6429  003790  0900               	iorlw	0
  6430  003792  B4D8               	btfsc	status,2,c
  6431  003794  D043               	goto	l1169
  6432                           
  6433                           ;ipv4.c: 65: ipPacket.ethernet.destination = arp_getEntryFromTable(index);
  6434  003796  0100               	movlb	0	; () banked
  6435  003798  51FC               	movf	ipv4_sendFrame@index& (0+255),w,b
  6436  00379A  EC5A  F02F         	call	_arp_getEntryFromTable
  6437  00379E  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6438  0037A2  0E05               	movlw	5
  6439  0037A4                     u13591:
  6440  0037A4  CFEB FFDB          	movff	plusw0,plusw2
  6441  0037A8  06E8               	decf	wreg,f,c
  6442  0037AA  E2FC               	bc	u13591
  6443                           
  6444                           ;ipv4.c: 74: ipPacket.ethernet.source = ethernetController_getMacAddress();
  6445  0037AC  EC3B  F02A         	call	_ethernetController_getMacAddress	;wreg free
  6446  0037B0  EE21  F056         	lfsr	2,ipv4_sendFrame@ipPacket+34
  6447  0037B4  0E05               	movlw	5
  6448  0037B6                     u13601:
  6449  0037B6  CFEB FFDB          	movff	plusw0,plusw2
  6450  0037BA  06E8               	decf	wreg,f,c
  6451  0037BC  E2FC               	bc	u13601
  6452                           
  6453                           ;ipv4.c: 76: ethernetController_writeDestinationMACAddress(ipPacket.ethernet.destination
      +                          , ipPacket.ethernet.memory);
  6454  0037BE  EE21  F05C         	lfsr	2,ipv4_sendFrame@ipPacket+40
  6455  0037C2  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
  6456  0037C6  0E05               	movlw	5
  6457  0037C8                     u13611:
  6458  0037C8  CFDB FFEB          	movff	plusw2,plusw0
  6459  0037CC  06E8               	decf	wreg,f,c
  6460  0037CE  E2FC               	bc	u13611
  6461  0037D0  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6462  0037D4  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
  6463  0037D8  0E08               	movlw	8
  6464  0037DA                     u13621:
  6465  0037DA  CFDB FFEB          	movff	plusw2,plusw0
  6466  0037DE  06E8               	decf	wreg,f,c
  6467  0037E0  E2FC               	bc	u13621
  6468  0037E2  ECCF  F028         	call	_ethernetController_writeDestinationMACAddress	;wreg free
  6469                           
  6470                           ;ipv4.c: 77: ethernetController_sendPacket(ipPacket.ethernet.memory);
  6471  0037E6  EE21  F064         	lfsr	2,ipv4_sendFrame@ipPacket+48
  6472  0037EA  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
  6473  0037EE  0E08               	movlw	8
  6474  0037F0                     u13631:
  6475  0037F0  CFDB FFEB          	movff	plusw2,plusw0
  6476  0037F4  06E8               	decf	wreg,f,c
  6477  0037F6  E2FC               	bc	u13631
  6478  0037F8  ECED  F02F         	call	_ethernetController_sendPacket	;wreg free
  6479                           
  6480                           ;ipv4.c: 78: err.code = (uint16_t)0;
  6481  0037FC  0E00               	movlw	0
  6482  0037FE  0100               	movlb	0	; () banked
  6483  003800  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6484  003802  0E00               	movlw	0
  6485  003804  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6486                           
  6487                           ; BSR set to: 0
  6488                           ;ipv4.c: 79: oldTime = 0;
  6489  003806  0E00               	movlw	0
  6490  003808  6E2D               	movwf	ipv4_sendFrame@oldTime,c
  6491  00380A  0E00               	movlw	0
  6492  00380C  6E2E               	movwf	ipv4_sendFrame@oldTime+1,c
  6493  00380E  0E00               	movlw	0
  6494  003810  6E2F               	movwf	ipv4_sendFrame@oldTime+2,c
  6495  003812  0E00               	movlw	0
  6496  003814  6E30               	movwf	ipv4_sendFrame@oldTime+3,c
  6497                           
  6498                           ; BSR set to: 0
  6499                           ;ipv4.c: 80: failedResolveCounter = 0;
  6500  003816  0E00               	movlw	0
  6501  003818  6E43               	movwf	ipv4_sendFrame@failedResolveCounter,c
  6502                           
  6503                           ;ipv4.c: 81: } else if ((getMillis() - oldTime) > 2000u || oldTime == 0) {
  6504  00381A  D05F               	goto	l1174
  6505  00381C                     l1169:
  6506                           
  6507                           ; BSR set to: 0
  6508  00381C  C02D  F176         	movff	ipv4_sendFrame@oldTime,??_ipv4_sendFrame
  6509  003820  C02E  F177         	movff	ipv4_sendFrame@oldTime+1,??_ipv4_sendFrame+1
  6510  003824  C02F  F178         	movff	ipv4_sendFrame@oldTime+2,??_ipv4_sendFrame+2
  6511  003828  C030  F179         	movff	ipv4_sendFrame@oldTime+3,??_ipv4_sendFrame+3
  6512  00382C  0101               	movlb	1	; () banked
  6513  00382E  1F76               	comf	??_ipv4_sendFrame& (0+255),f,b
  6514  003830  1F77               	comf	(??_ipv4_sendFrame+1)& (0+255),f,b
  6515  003832  1F78               	comf	(??_ipv4_sendFrame+2)& (0+255),f,b
  6516  003834  1F79               	comf	(??_ipv4_sendFrame+3)& (0+255),f,b
  6517  003836  2B76               	incf	??_ipv4_sendFrame& (0+255),f,b
  6518  003838  0E00               	movlw	0
  6519  00383A  2377               	addwfc	(??_ipv4_sendFrame+1)& (0+255),f,b
  6520  00383C  2378               	addwfc	(??_ipv4_sendFrame+2)& (0+255),f,b
  6521  00383E  2379               	addwfc	(??_ipv4_sendFrame+3)& (0+255),f,b
  6522  003840  EC01  F031         	call	_getMillis	;wreg free
  6523  003844  0101               	movlb	1	; () banked
  6524  003846  5176               	movf	??_ipv4_sendFrame& (0+255),w,b
  6525  003848  0100               	movlb	0	; () banked
  6526  00384A  2560               	addwf	?_getMillis& (0+255),w,b
  6527  00384C  0101               	movlb	1	; () banked
  6528  00384E  6F7A               	movwf	(??_ipv4_sendFrame+4)& (0+255),b
  6529  003850  5177               	movf	(??_ipv4_sendFrame+1)& (0+255),w,b
  6530  003852  0100               	movlb	0	; () banked
  6531  003854  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
  6532  003856  0101               	movlb	1	; () banked
  6533  003858  6F7B               	movwf	(??_ipv4_sendFrame+5)& (0+255),b
  6534  00385A  5178               	movf	(??_ipv4_sendFrame+2)& (0+255),w,b
  6535  00385C  0100               	movlb	0	; () banked
  6536  00385E  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
  6537  003860  0101               	movlb	1	; () banked
  6538  003862  6F7C               	movwf	(??_ipv4_sendFrame+6)& (0+255),b
  6539  003864  5179               	movf	(??_ipv4_sendFrame+3)& (0+255),w,b
  6540  003866  0100               	movlb	0	; () banked
  6541  003868  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
  6542  00386A  0101               	movlb	1	; () banked
  6543  00386C  6F7D               	movwf	(??_ipv4_sendFrame+7)& (0+255),b
  6544  00386E  517D               	movf	(??_ipv4_sendFrame+7)& (0+255),w,b
  6545  003870  117C               	iorwf	(??_ipv4_sendFrame+6)& (0+255),w,b
  6546  003872  E10C               	bnz	l11229
  6547  003874  0ED1               	movlw	209
  6548  003876  5D7A               	subwf	(??_ipv4_sendFrame+4)& (0+255),w,b
  6549  003878  0E07               	movlw	7
  6550  00387A  597B               	subwfb	(??_ipv4_sendFrame+5)& (0+255),w,b
  6551  00387C  B0D8               	btfsc	status,0,c
  6552  00387E  D006               	goto	u13650
  6553                           
  6554                           ; BSR set to: 1
  6555  003880  502D               	movf	ipv4_sendFrame@oldTime,w,c
  6556  003882  102E               	iorwf	ipv4_sendFrame@oldTime+1,w,c
  6557  003884  102F               	iorwf	ipv4_sendFrame@oldTime+2,w,c
  6558  003886  1030               	iorwf	ipv4_sendFrame@oldTime+3,w,c
  6559  003888  A4D8               	btfss	status,2,c
  6560  00388A  D027               	goto	l1174
  6561  00388C                     u13650:
  6562  00388C                     l11229:
  6563                           
  6564                           ; BSR set to: 1
  6565                           ;ipv4.c: 82: failedResolveCounter++;
  6566  00388C  2A43               	incf	ipv4_sendFrame@failedResolveCounter,f,c
  6567                           
  6568                           ; BSR set to: 1
  6569                           ;ipv4.c: 88: oldTime = getMillis();
  6570  00388E  EC01  F031         	call	_getMillis	;wreg free
  6571  003892  C060  F02D         	movff	?_getMillis,ipv4_sendFrame@oldTime
  6572  003896  C061  F02E         	movff	?_getMillis+1,ipv4_sendFrame@oldTime+1
  6573  00389A  C062  F02F         	movff	?_getMillis+2,ipv4_sendFrame@oldTime+2
  6574  00389E  C063  F030         	movff	?_getMillis+3,ipv4_sendFrame@oldTime+3
  6575                           
  6576                           ;ipv4.c: 89: arp_sendRequest(ipPacket.ipv4Header.source, ipPacket.ipv4Header.destination
      +                          );
  6577  0038A2  C143  F100         	movff	ipv4_sendFrame@ipPacket+15,arp_sendRequest@ipSender
  6578  0038A6  C144  F101         	movff	ipv4_sendFrame@ipPacket+16,arp_sendRequest@ipSender+1
  6579  0038AA  C145  F102         	movff	ipv4_sendFrame@ipPacket+17,arp_sendRequest@ipSender+2
  6580  0038AE  C146  F103         	movff	ipv4_sendFrame@ipPacket+18,arp_sendRequest@ipSender+3
  6581  0038B2  C147  F104         	movff	ipv4_sendFrame@ipPacket+19,arp_sendRequest@ipTarget
  6582  0038B6  C148  F105         	movff	ipv4_sendFrame@ipPacket+20,arp_sendRequest@ipTarget+1
  6583  0038BA  C149  F106         	movff	ipv4_sendFrame@ipPacket+21,arp_sendRequest@ipTarget+2
  6584  0038BE  C14A  F107         	movff	ipv4_sendFrame@ipPacket+22,arp_sendRequest@ipTarget+3
  6585  0038C2  EC2B  F027         	call	_arp_sendRequest	;wreg free
  6586                           
  6587                           ;ipv4.c: 90: if (failedResolveCounter >= 3u) {
  6588  0038C6  0E02               	movlw	2
  6589  0038C8  6443               	cpfsgt	ipv4_sendFrame@failedResolveCounter,c
  6590  0038CA  D007               	goto	l1174
  6591                           
  6592                           ;ipv4.c: 91: failedResolveCounter = 0;
  6593  0038CC  0E00               	movlw	0
  6594  0038CE  6E43               	movwf	ipv4_sendFrame@failedResolveCounter,c
  6595                           
  6596                           ;ipv4.c: 92: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_REQUESTS_REACHED;
  6597  0038D0  0E01               	movlw	1
  6598  0038D2  0100               	movlb	0	; () banked
  6599  0038D4  6FFF               	movwf	(ipv4_sendFrame@err+2)& (0+255),b
  6600  0038D6  0E94               	movlw	148
  6601  0038D8  6FFE               	movwf	(ipv4_sendFrame@err+1)& (0+255),b
  6602  0038DA                     l1174:
  6603                           
  6604                           ;ipv4.c: 93: }
  6605                           ;ipv4.c: 94: }
  6606                           ;ipv4.c: 95: return err;
  6607                           
  6608                           ; BSR set to: 0
  6609                           
  6610                           ; BSR set to: 0
  6611                           
  6612                           ; BSR set to: 0
  6613  0038DA  C0FD  F134         	movff	ipv4_sendFrame@err,?_ipv4_sendFrame
  6614  0038DE  C0FE  F135         	movff	ipv4_sendFrame@err+1,?_ipv4_sendFrame+1
  6615  0038E2  C0FF  F136         	movff	ipv4_sendFrame@err+2,?_ipv4_sendFrame+2
  6616  0038E6  0012               	return	
  6617  0038E8                     __end_of_ipv4_sendFrame:
  6618                           	opt stack 0
  6619                           tblptru	equ	0xFF8
  6620                           tblptrh	equ	0xFF7
  6621                           tblptrl	equ	0xFF6
  6622                           tablat	equ	0xFF5
  6623                           prodh	equ	0xFF4
  6624                           prodl	equ	0xFF3
  6625                           intcon	equ	0xFF2
  6626                           intcon3	equ	0xFF0
  6627                           indf0	equ	0xFEF
  6628                           postinc0	equ	0xFEE
  6629                           plusw0	equ	0xFEB
  6630                           fsr0h	equ	0xFEA
  6631                           fsr0l	equ	0xFE9
  6632                           wreg	equ	0xFE8
  6633                           postdec1	equ	0xFE5
  6634                           plusw1	equ	0xFE3
  6635                           fsr1l	equ	0xFE1
  6636                           indf2	equ	0xFDF
  6637                           postinc2	equ	0xFDE
  6638                           postdec2	equ	0xFDD
  6639                           plusw2	equ	0xFDB
  6640                           fsr2h	equ	0xFDA
  6641                           fsr2l	equ	0xFD9
  6642                           status	equ	0xFD8
  6643                           
  6644 ;; *************** function _arp_getEntryFromTable *****************
  6645 ;; Defined at:
  6646 ;;		line 478 in file "src/stack/protocols/arp.c"
  6647 ;; Parameters:    Size  Location     Type
  6648 ;;  index           1    wreg     unsigned char 
  6649 ;; Auto vars:     Size  Location     Type
  6650 ;;  index           1    7[BANK0 ] unsigned char 
  6651 ;; Return value:  Size  Location     Type
  6652 ;;                  6    0[BANK0 ] struct macaddress
  6653 ;; Registers used:
  6654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6655 ;; Tracked objects:
  6656 ;;		On entry : 0/0
  6657 ;;		On exit  : 0/0
  6658 ;;		Unchanged: 0/0
  6659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6660 ;;      Params:         0       7       0       0       0       0       0       0       0
  6661 ;;      Locals:         0       1       0       0       0       0       0       0       0
  6662 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6663 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6664 ;;Total ram usage:        8 bytes
  6665 ;; Hardware stack levels used:    1
  6666 ;; Hardware stack levels required when called:    4
  6667 ;; This function calls:
  6668 ;;		Nothing
  6669 ;; This function is called by:
  6670 ;;		_ipv4_sendFrame
  6671 ;; This function uses a non-reentrant model
  6672 ;;
  6673                           
  6674                           	psect	text10
  6675  005EB4                     __ptext10:
  6676                           	opt stack 0
  6677  005EB4                     _arp_getEntryFromTable:
  6678                           	opt stack 24
  6679                           
  6680                           ;incstack = 0
  6681                           ;arp_getEntryFromTable@index stored from wreg
  6682  005EB4  0100               	movlb	0	; () banked
  6683  005EB6  6F67               	movwf	arp_getEntryFromTable@index& (0+255),b
  6684                           
  6685                           ;arp.c: 479: return arp_table[index].mac;
  6686  005EB8  0100               	movlb	0	; () banked
  6687  005EBA  5167               	movf	arp_getEntryFromTable@index& (0+255),w,b
  6688  005EBC  0D0E               	mullw	14
  6689  005EBE  0E04               	movlw	4
  6690  005EC0  26F3               	addwf	prodl,f,c
  6691  005EC2  0E00               	movlw	0
  6692  005EC4  22F4               	addwfc	prodh,f,c
  6693  005EC6  0E00               	movlw	low _arp_table
  6694  005EC8  24F3               	addwf	prodl,w,c
  6695  005ECA  6ED9               	movwf	fsr2l,c
  6696  005ECC  0E04               	movlw	high _arp_table
  6697  005ECE  20F4               	addwfc	prodh,w,c
  6698  005ED0  6EDA               	movwf	fsr2h,c
  6699  005ED2  EE00  F060         	lfsr	0,?_arp_getEntryFromTable
  6700  005ED6  0E05               	movlw	5
  6701  005ED8                     u13081:
  6702  005ED8  CFDB FFEB          	movff	plusw2,plusw0
  6703  005EDC  06E8               	decf	wreg,f,c
  6704  005EDE  E2FC               	bc	u13081
  6705  005EE0  0012               	return	
  6706  005EE2                     __end_of_arp_getEntryFromTable:
  6707                           	opt stack 0
  6708                           tblptru	equ	0xFF8
  6709                           tblptrh	equ	0xFF7
  6710                           tblptrl	equ	0xFF6
  6711                           tablat	equ	0xFF5
  6712                           prodh	equ	0xFF4
  6713                           prodl	equ	0xFF3
  6714                           intcon	equ	0xFF2
  6715                           intcon3	equ	0xFF0
  6716                           indf0	equ	0xFEF
  6717                           postinc0	equ	0xFEE
  6718                           plusw0	equ	0xFEB
  6719                           fsr0h	equ	0xFEA
  6720                           fsr0l	equ	0xFE9
  6721                           wreg	equ	0xFE8
  6722                           postdec1	equ	0xFE5
  6723                           plusw1	equ	0xFE3
  6724                           fsr1l	equ	0xFE1
  6725                           indf2	equ	0xFDF
  6726                           postinc2	equ	0xFDE
  6727                           postdec2	equ	0xFDD
  6728                           plusw2	equ	0xFDB
  6729                           fsr2h	equ	0xFDA
  6730                           fsr2l	equ	0xFD9
  6731                           status	equ	0xFD8
  6732                           
  6733 ;; *************** function _ipv4_generateAutoIP *****************
  6734 ;; Defined at:
  6735 ;;		line 483 in file "src/stack/protocols/ipv4.c"
  6736 ;; Parameters:    Size  Location     Type
  6737 ;;		None
  6738 ;; Auto vars:     Size  Location     Type
  6739 ;;  ip              4   24[BANK0 ] struct ipv4_address
  6740 ;; Return value:  Size  Location     Type
  6741 ;;                  4   20[BANK0 ] struct ipv4_address
  6742 ;; Registers used:
  6743 ;;		wreg, status,2, status,0, cstack
  6744 ;; Tracked objects:
  6745 ;;		On entry : 0/0
  6746 ;;		On exit  : 0/0
  6747 ;;		Unchanged: 0/0
  6748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6749 ;;      Params:         0       4       0       0       0       0       0       0       0
  6750 ;;      Locals:         0       4       0       0       0       0       0       0       0
  6751 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6752 ;;      Totals:         0       8       0       0       0       0       0       0       0
  6753 ;;Total ram usage:        8 bytes
  6754 ;; Hardware stack levels used:    1
  6755 ;; Hardware stack levels required when called:    6
  6756 ;; This function calls:
  6757 ;;		___awmod
  6758 ;;		_rand
  6759 ;; This function is called by:
  6760 ;;		_handleStackBackgroundTasks
  6761 ;;		_main
  6762 ;; This function uses a non-reentrant model
  6763 ;;
  6764                           
  6765                           	psect	text11
  6766  005B0C                     __ptext11:
  6767                           	opt stack 0
  6768  005B0C                     _ipv4_generateAutoIP:
  6769                           	opt stack 24
  6770                           
  6771                           ;ipv4.c: 484: ipv4_address_t ip;
  6772                           ;ipv4.c: 486: ip.address[0] = 169;
  6773                           
  6774                           ; BSR set to: 0
  6775                           ;incstack = 0
  6776  005B0C  0EA9               	movlw	169
  6777  005B0E  0100               	movlb	0	; () banked
  6778  005B10  6F78               	movwf	ipv4_generateAutoIP@ip& (0+255),b
  6779                           
  6780                           ;ipv4.c: 487: ip.address[1] = 254;
  6781  005B12  0EFE               	movlw	254
  6782  005B14  6F79               	movwf	(ipv4_generateAutoIP@ip+1)& (0+255),b
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;ipv4.c: 488: ip.address[2] = (rand() % 253) + 1;
  6786  005B16  ECE8  F02B         	call	_rand	;wreg free
  6787  005B1A  C06C  F06E         	movff	?_rand,___awmod@dividend
  6788  005B1E  C06D  F06F         	movff	?_rand+1,___awmod@dividend+1
  6789  005B22  0E00               	movlw	0
  6790  005B24  0100               	movlb	0	; () banked
  6791  005B26  6F71               	movwf	(___awmod@divisor+1)& (0+255),b
  6792  005B28  0EFD               	movlw	253
  6793  005B2A  6F70               	movwf	___awmod@divisor& (0+255),b
  6794  005B2C  EC75  F02A         	call	___awmod	;wreg free
  6795  005B30  0100               	movlb	0	; () banked
  6796  005B32  296E               	incf	?___awmod& (0+255),w,b
  6797  005B34  6F7A               	movwf	(ipv4_generateAutoIP@ip+2)& (0+255),b
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;ipv4.c: 489: ip.address[3] = (rand() % 256);
  6801  005B36  ECE8  F02B         	call	_rand	;wreg free
  6802  005B3A  0100               	movlb	0	; () banked
  6803  005B3C  516C               	movf	?_rand& (0+255),w,b
  6804  005B3E  6F7B               	movwf	(ipv4_generateAutoIP@ip+3)& (0+255),b
  6805                           
  6806                           ; BSR set to: 0
  6807                           ;ipv4.c: 490: return ip;
  6808  005B40  C078  F074         	movff	ipv4_generateAutoIP@ip,?_ipv4_generateAutoIP
  6809  005B44  C079  F075         	movff	ipv4_generateAutoIP@ip+1,?_ipv4_generateAutoIP+1
  6810  005B48  C07A  F076         	movff	ipv4_generateAutoIP@ip+2,?_ipv4_generateAutoIP+2
  6811  005B4C  C07B  F077         	movff	ipv4_generateAutoIP@ip+3,?_ipv4_generateAutoIP+3
  6812  005B50  0012               	return	
  6813  005B52                     __end_of_ipv4_generateAutoIP:
  6814                           	opt stack 0
  6815                           tblptru	equ	0xFF8
  6816                           tblptrh	equ	0xFF7
  6817                           tblptrl	equ	0xFF6
  6818                           tablat	equ	0xFF5
  6819                           prodh	equ	0xFF4
  6820                           prodl	equ	0xFF3
  6821                           intcon	equ	0xFF2
  6822                           intcon3	equ	0xFF0
  6823                           indf0	equ	0xFEF
  6824                           postinc0	equ	0xFEE
  6825                           plusw0	equ	0xFEB
  6826                           fsr0h	equ	0xFEA
  6827                           fsr0l	equ	0xFE9
  6828                           wreg	equ	0xFE8
  6829                           postdec1	equ	0xFE5
  6830                           plusw1	equ	0xFE3
  6831                           fsr1l	equ	0xFE1
  6832                           indf2	equ	0xFDF
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           plusw2	equ	0xFDB
  6836                           fsr2h	equ	0xFDA
  6837                           fsr2l	equ	0xFD9
  6838                           status	equ	0xFD8
  6839                           
  6840 ;; *************** function ___awmod *****************
  6841 ;; Defined at:
  6842 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  6843 ;; Parameters:    Size  Location     Type
  6844 ;;  dividend        2   14[BANK0 ] int 
  6845 ;;  divisor         2   16[BANK0 ] int 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;  sign            1   19[BANK0 ] unsigned char 
  6848 ;;  counter         1   18[BANK0 ] unsigned char 
  6849 ;; Return value:  Size  Location     Type
  6850 ;;                  2   14[BANK0 ] int 
  6851 ;; Registers used:
  6852 ;;		wreg, status,2, status,0
  6853 ;; Tracked objects:
  6854 ;;		On entry : 0/0
  6855 ;;		On exit  : 0/0
  6856 ;;		Unchanged: 0/0
  6857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6858 ;;      Params:         0       4       0       0       0       0       0       0       0
  6859 ;;      Locals:         0       2       0       0       0       0       0       0       0
  6860 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6861 ;;      Totals:         0       6       0       0       0       0       0       0       0
  6862 ;;Total ram usage:        6 bytes
  6863 ;; Hardware stack levels used:    1
  6864 ;; Hardware stack levels required when called:    4
  6865 ;; This function calls:
  6866 ;;		Nothing
  6867 ;; This function is called by:
  6868 ;;		_ipv4_generateAutoIP
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text12
  6873  0054EA                     __ptext12:
  6874                           	opt stack 0
  6875  0054EA                     ___awmod:
  6876                           	opt stack 25
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;incstack = 0
  6880  0054EA  0E00               	movlw	0
  6881  0054EC  0100               	movlb	0	; () banked
  6882  0054EE  6F73               	movwf	___awmod@sign& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885  0054F0  AF6F               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6886  0054F2  D006               	goto	l1532
  6887                           
  6888                           ; BSR set to: 0
  6889  0054F4  6D6E               	negf	___awmod@dividend& (0+255),b
  6890  0054F6  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  6891  0054F8  B0D8               	btfsc	status,0,c
  6892  0054FA  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  6893                           
  6894                           ; BSR set to: 0
  6895  0054FC  0E01               	movlw	1
  6896  0054FE  6F73               	movwf	___awmod@sign& (0+255),b
  6897  005500                     l1532:
  6898                           
  6899                           ; BSR set to: 0
  6900                           
  6901                           ; BSR set to: 0
  6902  005500  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6903  005502  D004               	goto	l1533
  6904                           
  6905                           ; BSR set to: 0
  6906  005504  6D70               	negf	___awmod@divisor& (0+255),b
  6907  005506  1F71               	comf	(___awmod@divisor+1)& (0+255),f,b
  6908  005508  B0D8               	btfsc	status,0,c
  6909  00550A  2B71               	incf	(___awmod@divisor+1)& (0+255),f,b
  6910  00550C                     l1533:
  6911                           
  6912                           ; BSR set to: 0
  6913                           
  6914                           ; BSR set to: 0
  6915  00550C  5170               	movf	___awmod@divisor& (0+255),w,b
  6916  00550E  1171               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6917  005510  B4D8               	btfsc	status,2,c
  6918  005512  D018               	goto	l1540
  6919                           
  6920                           ; BSR set to: 0
  6921  005514  0E01               	movlw	1
  6922  005516  6F72               	movwf	___awmod@counter& (0+255),b
  6923  005518  D004               	goto	l1535
  6924  00551A                     
  6925                           ; BSR set to: 0
  6926                           
  6927                           ; BSR set to: 0
  6928  00551A  90D8               	bcf	status,0,c
  6929  00551C  3770               	rlcf	___awmod@divisor& (0+255),f,b
  6930  00551E  3771               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6931  005520  2B72               	incf	___awmod@counter& (0+255),f,b
  6932  005522                     l1535:
  6933                           
  6934                           ; BSR set to: 0
  6935                           
  6936                           ; BSR set to: 0
  6937  005522  AF71               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6938  005524  D7FA               	goto	l1536
  6939  005526                     u13120:
  6940                           
  6941                           ; BSR set to: 0
  6942                           
  6943                           ; BSR set to: 0
  6944                           
  6945                           ; BSR set to: 0
  6946  005526  5170               	movf	___awmod@divisor& (0+255),w,b
  6947  005528  5D6E               	subwf	___awmod@dividend& (0+255),w,b
  6948  00552A  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  6949  00552C  596F               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6950  00552E  A0D8               	btfss	status,0,c
  6951  005530  D004               	goto	l1539
  6952                           
  6953                           ; BSR set to: 0
  6954  005532  5170               	movf	___awmod@divisor& (0+255),w,b
  6955  005534  5F6E               	subwf	___awmod@dividend& (0+255),f,b
  6956  005536  5171               	movf	(___awmod@divisor+1)& (0+255),w,b
  6957  005538  5B6F               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6958  00553A                     l1539:
  6959                           
  6960                           ; BSR set to: 0
  6961                           
  6962                           ; BSR set to: 0
  6963  00553A  90D8               	bcf	status,0,c
  6964  00553C  3371               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6965  00553E  3370               	rrcf	___awmod@divisor& (0+255),f,b
  6966                           
  6967                           ; BSR set to: 0
  6968  005540  2F72               	decfsz	___awmod@counter& (0+255),f,b
  6969  005542  D7F1               	goto	u13120
  6970  005544                     l1540:
  6971                           
  6972                           ; BSR set to: 0
  6973                           
  6974                           ; BSR set to: 0
  6975                           
  6976                           ; BSR set to: 0
  6977  005544  5173               	movf	___awmod@sign& (0+255),w,b
  6978  005546  B4D8               	btfsc	status,2,c
  6979  005548  D004               	goto	l1541
  6980                           
  6981                           ; BSR set to: 0
  6982  00554A  6D6E               	negf	___awmod@dividend& (0+255),b
  6983  00554C  1F6F               	comf	(___awmod@dividend+1)& (0+255),f,b
  6984  00554E  B0D8               	btfsc	status,0,c
  6985  005550  2B6F               	incf	(___awmod@dividend+1)& (0+255),f,b
  6986  005552                     l1541:
  6987                           
  6988                           ; BSR set to: 0
  6989                           
  6990                           ; BSR set to: 0
  6991  005552  C06E  F06E         	movff	___awmod@dividend,?___awmod
  6992  005556  C06F  F06F         	movff	___awmod@dividend+1,?___awmod+1
  6993  00555A  0012               	return	
  6994  00555C                     __end_of___awmod:
  6995                           	opt stack 0
  6996                           tblptru	equ	0xFF8
  6997                           tblptrh	equ	0xFF7
  6998                           tblptrl	equ	0xFF6
  6999                           tablat	equ	0xFF5
  7000                           prodh	equ	0xFF4
  7001                           prodl	equ	0xFF3
  7002                           intcon	equ	0xFF2
  7003                           intcon3	equ	0xFF0
  7004                           indf0	equ	0xFEF
  7005                           postinc0	equ	0xFEE
  7006                           plusw0	equ	0xFEB
  7007                           fsr0h	equ	0xFEA
  7008                           fsr0l	equ	0xFE9
  7009                           wreg	equ	0xFE8
  7010                           postdec1	equ	0xFE5
  7011                           plusw1	equ	0xFE3
  7012                           fsr1l	equ	0xFE1
  7013                           indf2	equ	0xFDF
  7014                           postinc2	equ	0xFDE
  7015                           postdec2	equ	0xFDD
  7016                           plusw2	equ	0xFDB
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           
  7021 ;; *************** function _ipv4_background *****************
  7022 ;; Defined at:
  7023 ;;		line 407 in file "src/stack/protocols/ipv4.c"
  7024 ;; Parameters:    Size  Location     Type
  7025 ;;  link            1    wreg     enum E72
  7026 ;; Auto vars:     Size  Location     Type
  7027 ;;  link            1    0[COMRAM] enum E72
  7028 ;;  err             3    5[BANK0 ] struct error
  7029 ;; Return value:  Size  Location     Type
  7030 ;;                  3    0[BANK0 ] struct error
  7031 ;; Registers used:
  7032 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7033 ;; Tracked objects:
  7034 ;;		On entry : 0/0
  7035 ;;		On exit  : 0/0
  7036 ;;		Unchanged: 0/0
  7037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7038 ;;      Params:         0       3       0       0       0       0       0       0       0
  7039 ;;      Locals:         0       3       0       0       0       0       0       0       0
  7040 ;;      Temps:          0       2       0       0       0       0       0       0       0
  7041 ;;      Totals:         0       8       0       0       0       0       0       0       0
  7042 ;;Total ram usage:        8 bytes
  7043 ;; Hardware stack levels used:    1
  7044 ;; Hardware stack levels required when called:    4
  7045 ;; This function calls:
  7046 ;;		Nothing
  7047 ;; This function is called by:
  7048 ;;		_handleStackBackgroundTasks
  7049 ;; This function uses a non-reentrant model
  7050 ;;
  7051                           
  7052                           	psect	text13
  7053  003E7E                     __ptext13:
  7054                           	opt stack 0
  7055  003E7E                     _ipv4_background:
  7056                           	opt stack 25
  7057                           
  7058                           ;ipv4.c: 408: error_t err;
  7059                           ;ipv4.c: 409: err.module = ERROR_MODULE_IPv4;
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;incstack = 0
  7063  003E7E  0E04               	movlw	4
  7064  003E80  0100               	movlb	0	; () banked
  7065  003E82  6F65               	movwf	ipv4_background@err& (0+255),b
  7066                           
  7067                           ;ipv4.c: 410: err.code = (uint16_t)0;
  7068  003E84  0E00               	movlw	0
  7069  003E86  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  7070  003E88  0E00               	movlw	0
  7071  003E8A  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;ipv4.c: 411: if ((*arpStatus).module == ERROR_MODULE_ARP && fSrcAddrChanged) {
  7075  003E8C  C03D  FFD9         	movff	_arpStatus,fsr2l
  7076  003E90  C03E  FFDA         	movff	_arpStatus+1,fsr2h
  7077  003E94  0E03               	movlw	3
  7078  003E96  18DE               	xorwf	postinc2,w,c
  7079  003E98  A4D8               	btfss	status,2,c
  7080  003E9A  D08B               	goto	l1236
  7081                           
  7082                           ; BSR set to: 0
  7083  003E9C  B050               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  7084  003E9E  D063               	goto	l1237
  7085  003EA0  D088               	goto	l1236
  7086  003EA2                     
  7087                           ; BSR set to: 0
  7088                           ;ipv4.c: 414: err = (*arpStatus);
  7089                           
  7090                           ; BSR set to: 0
  7091  003EA2  C03D  FFD9         	movff	_arpStatus,fsr2l
  7092  003EA6  C03E  FFDA         	movff	_arpStatus+1,fsr2h
  7093  003EAA  CFDE F065          	movff	postinc2,ipv4_background@err
  7094  003EAE  CFDE F066          	movff	postinc2,ipv4_background@err+1
  7095  003EB2  CFDD F067          	movff	postdec2,ipv4_background@err+2
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;ipv4.c: 418: ipSource = ipPreliminarySource;
  7099  003EB6  C282  F286         	movff	_ipPreliminarySource,_ipSource
  7100  003EBA  C283  F287         	movff	_ipPreliminarySource+1,_ipSource+1
  7101  003EBE  C284  F288         	movff	_ipPreliminarySource+2,_ipSource+2
  7102  003EC2  C285  F289         	movff	_ipPreliminarySource+3,_ipSource+3
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;ipv4.c: 419: fSrcAddrChanged = 0;
  7106  003EC6  9050               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;ipv4.c: 420: return err;
  7110  003EC8  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7111  003ECC  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7112  003ED0  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7113                           
  7114                           ; BSR set to: 0
  7115  003ED4  0012               	return	
  7116  003ED6                     
  7117                           ; BSR set to: 0
  7118                           ;ipv4.c: 422: err = (*arpStatus);
  7119                           
  7120                           ; BSR set to: 0
  7121  003ED6  C03D  FFD9         	movff	_arpStatus,fsr2l
  7122  003EDA  C03E  FFDA         	movff	_arpStatus+1,fsr2h
  7123  003EDE  CFDE F065          	movff	postinc2,ipv4_background@err
  7124  003EE2  CFDE F066          	movff	postinc2,ipv4_background@err+1
  7125  003EE6  CFDD F067          	movff	postdec2,ipv4_background@err+2
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;ipv4.c: 423: return err;
  7129  003EEA  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7130  003EEE  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7131  003EF2  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7132                           
  7133                           ; BSR set to: 0
  7134  003EF6  0012               	return	
  7135  003EF8                     
  7136                           ; BSR set to: 0
  7137                           ;ipv4.c: 425: err.code = ERROR_IPv4_ADDRESS_ALREADY_IN_USE;
  7138                           
  7139                           ; BSR set to: 0
  7140  003EF8  0E01               	movlw	1
  7141  003EFA  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  7142  003EFC  0EF5               	movlw	245
  7143  003EFE  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  7144                           
  7145                           ; BSR set to: 0
  7146                           ;ipv4.c: 426: fSrcAddrChanged = 0;
  7147  003F00  9050               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  7148                           
  7149                           ; BSR set to: 0
  7150                           ;ipv4.c: 427: return err;
  7151  003F02  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7152  003F06  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7153  003F0A  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7154                           
  7155                           ; BSR set to: 0
  7156  003F0E  0012               	return	
  7157  003F10                     l1242:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;ipv4.c: 431: return err;
  7161  003F10  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7162  003F14  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7163  003F18  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7164  003F1C  0012               	return	
  7165  003F1E                     
  7166                           ; BSR set to: 0
  7167                           ;ipv4.c: 433: err = (*arpStatus);
  7168                           
  7169                           ; BSR set to: 0
  7170  003F1E  C03D  FFD9         	movff	_arpStatus,fsr2l
  7171  003F22  C03E  FFDA         	movff	_arpStatus+1,fsr2h
  7172  003F26  CFDE F065          	movff	postinc2,ipv4_background@err
  7173  003F2A  CFDE F066          	movff	postinc2,ipv4_background@err+1
  7174  003F2E  CFDD F067          	movff	postdec2,ipv4_background@err+2
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;ipv4.c: 434: fSrcAddrChanged = 0;
  7178  003F32  9050               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;ipv4.c: 435: return err;
  7182  003F34  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7183  003F38  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7184  003F3C  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7185                           
  7186                           ; BSR set to: 0
  7187  003F40  0012               	return	
  7188  003F42                     
  7189                           ; BSR set to: 0
  7190                           ;ipv4.c: 438: fSrcAddrChanged = 0;
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;ipv4.c: 437: case ERROR_ARP_UNKNOWN:
  7194  003F42  9050               	bcf	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;ipv4.c: 439: err = (*arpStatus);
  7198  003F44  C03D  FFD9         	movff	_arpStatus,fsr2l
  7199  003F48  C03E  FFDA         	movff	_arpStatus+1,fsr2h
  7200  003F4C  CFDE F065          	movff	postinc2,ipv4_background@err
  7201  003F50  CFDE F066          	movff	postinc2,ipv4_background@err+1
  7202  003F54  CFDD F067          	movff	postdec2,ipv4_background@err+2
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;ipv4.c: 440: return err;
  7206  003F58  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7207  003F5C  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7208  003F60  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7209                           
  7210                           ; BSR set to: 0
  7211  003F64  0012               	return	
  7212  003F66                     l1237:
  7213                           
  7214                           ; BSR set to: 0
  7215                           
  7216                           ; BSR set to: 0
  7217  003F66  EE20 F001          	lfsr	2,1
  7218  003F6A  503D               	movf	_arpStatus,w,c
  7219  003F6C  26D9               	addwf	fsr2l,f,c
  7220  003F6E  503E               	movf	_arpStatus+1,w,c
  7221  003F70  22DA               	addwfc	fsr2h,f,c
  7222  003F72  CFDE F063          	movff	postinc2,??_ipv4_background
  7223  003F76  CFDD F064          	movff	postdec2,??_ipv4_background+1
  7224                           
  7225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  7226                           ; Switch size 1, requested type "space"
  7227                           ; Number of cases is 2, Range of values is 0 to 1
  7228                           ; switch strategies available:
  7229                           ; Name         Instructions Cycles
  7230                           ; simple_byte            7     4 (average)
  7231                           ;	Chosen strategy is simple_byte
  7232  003F7A  5164               	movf	(??_ipv4_background+1)& (0+255),w,b
  7233  003F7C  0A00               	xorlw	0	; case 0
  7234  003F7E  B4D8               	btfsc	status,2,c
  7235  003F80  D004               	goto	l12091
  7236  003F82  0A01               	xorlw	1	; case 1
  7237  003F84  B4D8               	btfsc	status,2,c
  7238  003F86  D006               	goto	l12093
  7239  003F88  D7DC               	goto	l1244
  7240  003F8A                     l12091:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ; Switch size 1, requested type "space"
  7244                           ; Number of cases is 1, Range of values is 0 to 0
  7245                           ; switch strategies available:
  7246                           ; Name         Instructions Cycles
  7247                           ; simple_byte            4     3 (average)
  7248                           ;	Chosen strategy is simple_byte
  7249  003F8A  5163               	movf	??_ipv4_background& (0+255),w,b
  7250  003F8C  0A00               	xorlw	0	; case 0
  7251  003F8E  B4D8               	btfsc	status,2,c
  7252  003F90  D788               	goto	l1238
  7253  003F92  D7D7               	goto	l1244
  7254  003F94                     l12093:
  7255                           
  7256                           ; BSR set to: 0
  7257                           ; Switch size 1, requested type "space"
  7258                           ; Number of cases is 5, Range of values is 145 to 243
  7259                           ; switch strategies available:
  7260                           ; Name         Instructions Cycles
  7261                           ; simple_byte           16     9 (average)
  7262                           ;	Chosen strategy is simple_byte
  7263  003F94  5163               	movf	??_ipv4_background& (0+255),w,b
  7264  003F96  0A91               	xorlw	145	; case 145
  7265  003F98  B4D8               	btfsc	status,2,c
  7266  003F9A  D79D               	goto	l1240
  7267  003F9C  0A02               	xorlw	2	; case 147
  7268  003F9E  B4D8               	btfsc	status,2,c
  7269  003FA0  D7B7               	goto	l1242
  7270  003FA2  0A05               	xorlw	5	; case 150
  7271  003FA4  B4D8               	btfsc	status,2,c
  7272  003FA6  D7A8               	goto	l1241
  7273  003FA8  0A01               	xorlw	1	; case 151
  7274  003FAA  B4D8               	btfsc	status,2,c
  7275  003FAC  D7B8               	goto	l1243
  7276  003FAE  0A64               	xorlw	100	; case 243
  7277  003FB0  D7C8               	goto	l1244
  7278  003FB2                     l1236:
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;ipv4.c: 443: err.code = ERROR_IPv4_UNKNOWN;
  7282                           
  7283                           ; BSR set to: 0
  7284  003FB2  0E02               	movlw	2
  7285  003FB4  6F67               	movwf	(ipv4_background@err+2)& (0+255),b
  7286  003FB6  0E57               	movlw	87
  7287  003FB8  6F66               	movwf	(ipv4_background@err+1)& (0+255),b
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;ipv4.c: 444: return err;
  7291                           
  7292                           ; BSR set to: 0
  7293  003FBA  C065  F060         	movff	ipv4_background@err,?_ipv4_background
  7294  003FBE  C066  F061         	movff	ipv4_background@err+1,?_ipv4_background+1
  7295  003FC2  C067  F062         	movff	ipv4_background@err+2,?_ipv4_background+2
  7296  003FC6  0012               	return	
  7297  003FC8                     __end_of_ipv4_background:
  7298                           	opt stack 0
  7299                           tblptru	equ	0xFF8
  7300                           tblptrh	equ	0xFF7
  7301                           tblptrl	equ	0xFF6
  7302                           tablat	equ	0xFF5
  7303                           prodh	equ	0xFF4
  7304                           prodl	equ	0xFF3
  7305                           intcon	equ	0xFF2
  7306                           intcon3	equ	0xFF0
  7307                           indf0	equ	0xFEF
  7308                           postinc0	equ	0xFEE
  7309                           plusw0	equ	0xFEB
  7310                           fsr0h	equ	0xFEA
  7311                           fsr0l	equ	0xFE9
  7312                           wreg	equ	0xFE8
  7313                           postdec1	equ	0xFE5
  7314                           plusw1	equ	0xFE3
  7315                           fsr1l	equ	0xFE1
  7316                           indf2	equ	0xFDF
  7317                           postinc2	equ	0xFDE
  7318                           postdec2	equ	0xFDD
  7319                           plusw2	equ	0xFDB
  7320                           fsr2h	equ	0xFDA
  7321                           fsr2l	equ	0xFD9
  7322                           status	equ	0xFD8
  7323                           
  7324 ;; *************** function _ethernet_rxGetNewFrame *****************
  7325 ;; Defined at:
  7326 ;;		line 55 in file "src/eth/ethernet.c"
  7327 ;; Parameters:    Size  Location     Type
  7328 ;;  frame           2  252[BANK1 ] PTR struct ethernetFrame
  7329 ;;		 -> stack(123), 
  7330 ;; Auto vars:     Size  Location     Type
  7331 ;;  err             3    8[BANK2 ] struct error
  7332 ;; Return value:  Size  Location     Type
  7333 ;;                  3  252[BANK1 ] struct error
  7334 ;; Registers used:
  7335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7336 ;; Tracked objects:
  7337 ;;		On entry : 0/0
  7338 ;;		On exit  : 0/0
  7339 ;;		Unchanged: 0/0
  7340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7341 ;;      Params:         0       0       2       0       0       0       0       0       0
  7342 ;;      Locals:         0       0       0       3       0       0       0       0       0
  7343 ;;      Temps:          0       0       0       8       0       0       0       0       0
  7344 ;;      Totals:         0       0       2      11       0       0       0       0       0
  7345 ;;Total ram usage:       13 bytes
  7346 ;; Hardware stack levels used:    1
  7347 ;; Hardware stack levels required when called:   13
  7348 ;; This function calls:
  7349 ;;		_UARTTransmitInt
  7350 ;;		_UARTTransmitText
  7351 ;;		_arp_handleNewPacket
  7352 ;;		_etherTypeToString
  7353 ;;		_ethernetController_dropPacket
  7354 ;;		_ethernetController_getEtherTypeField
  7355 ;;		_ethernetController_getNextPacketPointer
  7356 ;;		_ethernetController_getRSV
  7357 ;;		_ethernetController_updateNextPacketPointer
  7358 ;;		_getMillis
  7359 ;;		_intToString
  7360 ;;		_ipv4_handleNewPacket
  7361 ;;		_macToString
  7362 ;; This function is called by:
  7363 ;;		_handleStackBackgroundTasks
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text14
  7368  000AD2                     __ptext14:
  7369                           	opt stack 0
  7370  000AD2                     _ethernet_rxGetNewFrame:
  7371                           	opt stack 16
  7372                           
  7373                           ;ethernet.c: 56: uint32_t static counter = 0;
  7374                           ;ethernet.c: 57: error_t err;
  7375                           ;ethernet.c: 58: err.module = ERROR_MODULE_ETHERNET;
  7376                           
  7377                           ; BSR set to: 0
  7378                           ;incstack = 0
  7379  000AD2  0E02               	movlw	2
  7380  000AD4  0102               	movlb	2	; () banked
  7381  000AD6  6FC7               	movwf	ethernet_rxGetNewFrame@err& (0+255),b
  7382                           
  7383                           ;ethernet.c: 59: err.code = (uint16_t)0;
  7384  000AD8  0E00               	movlw	0
  7385  000ADA  6FC9               	movwf	(ethernet_rxGetNewFrame@err+2)& (0+255),b
  7386  000ADC  0E00               	movlw	0
  7387  000ADE  6FC8               	movwf	(ethernet_rxGetNewFrame@err+1)& (0+255),b
  7388                           
  7389                           ; BSR set to: 2
  7390                           ;ethernet.c: 62: frame->tReceived = getMillis();
  7391  000AE0  EC01  F031         	call	_getMillis	;wreg free
  7392  000AE4  0101               	movlb	1	; () banked
  7393  000AE6  EE20 F01E          	lfsr	2,30
  7394  000AEA  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7395  000AEC  26D9               	addwf	fsr2l,f,c
  7396  000AEE  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7397  000AF0  22DA               	addwfc	fsr2h,f,c
  7398  000AF2  0100               	movlb	0	; () banked
  7399  000AF4  C060  FFDE         	movff	?_getMillis,postinc2
  7400  000AF8  C061  FFDE         	movff	?_getMillis+1,postinc2
  7401  000AFC  C062  FFDE         	movff	?_getMillis+2,postinc2
  7402  000B00  C063  FFDE         	movff	?_getMillis+3,postinc2
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;ethernet.c: 63: frame->memory.start = ethernetController_getNextPacketPointer();
  7406  000B04  EC1A  F031         	call	_ethernetController_getNextPacketPointer	;wreg free
  7407  000B08  0101               	movlb	1	; () banked
  7408  000B0A  EE20 F010          	lfsr	2,16
  7409  000B0E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7410  000B10  26D9               	addwf	fsr2l,f,c
  7411  000B12  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7412  000B14  22DA               	addwfc	fsr2h,f,c
  7413  000B16  0100               	movlb	0	; () banked
  7414  000B18  C062  FFDE         	movff	?_ethernetController_getNextPacketPointer,postinc2
  7415  000B1C  C063  FFDD         	movff	?_ethernetController_getNextPacketPointer+1,postdec2
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;ethernet.c: 64: ethernetController_updateNextPacketPointer();
  7419  000B20  EC4E  F029         	call	_ethernetController_updateNextPacketPointer	;wreg free
  7420                           
  7421                           ;ethernet.c: 65: frame->memory.fIsAssigned = 1;
  7422  000B24  0101               	movlb	1	; () banked
  7423  000B26  EE20 F016          	lfsr	2,22
  7424  000B2A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7425  000B2C  26D9               	addwf	fsr2l,f,c
  7426  000B2E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7427  000B30  22DA               	addwfc	fsr2h,f,c
  7428  000B32  0E01               	movlw	1
  7429  000B34  6EDF               	movwf	indf2,c
  7430                           
  7431                           ; BSR set to: 1
  7432                           ;ethernet.c: 66: frame->receiveStatusVector = ethernetController_getRSV(frame->memory.st
      +                          art);
  7433  000B36  EE20 F010          	lfsr	2,16
  7434  000B3A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7435  000B3C  26D9               	addwf	fsr2l,f,c
  7436  000B3E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7437  000B40  22DA               	addwfc	fsr2h,f,c
  7438  000B42  CFDE F071          	movff	postinc2,ethernetController_getRSV@address
  7439  000B46  CFDD F072          	movff	postdec2,ethernetController_getRSV@address+1
  7440  000B4A  ECC7  F029         	call	_ethernetController_getRSV	;wreg free
  7441  000B4E  0101               	movlb	1	; () banked
  7442  000B50  EE20 F019          	lfsr	2,25
  7443  000B54  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7444  000B56  26D9               	addwf	fsr2l,f,c
  7445  000B58  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7446  000B5A  22DA               	addwfc	fsr2h,f,c
  7447  000B5C  0E04               	movlw	4
  7448  000B5E                     u13471:
  7449  000B5E  CFEB FFDB          	movff	plusw0,plusw2
  7450  000B62  06E8               	decf	wreg,f,c
  7451  000B64  E2FC               	bc	u13471
  7452                           
  7453                           ; BSR set to: 1
  7454                           ;ethernet.c: 67: frame->memory.length = frame->receiveStatusVector.length;
  7455  000B66  EE20 F019          	lfsr	2,25
  7456  000B6A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7457  000B6C  26D9               	addwf	fsr2l,f,c
  7458  000B6E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7459  000B70  22DA               	addwfc	fsr2h,f,c
  7460  000B72  EE10 F014          	lfsr	1,20
  7461  000B76  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7462  000B78  26E1               	addwf	fsr1l,f,c
  7463  000B7A  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7464  000B7C  22E2               	addwfc	fsr1h,f,c
  7465  000B7E  CFDE FFE6          	movff	postinc2,postinc1
  7466  000B82  CFDD FFE5          	movff	postdec2,postdec1
  7467                           
  7468                           ; BSR set to: 1
  7469                           ;ethernet.c: 71: if (frame->memory.start + frame->memory.length > 0x5FFF) {
  7470  000B86  EE20 F014          	lfsr	2,20
  7471  000B8A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7472  000B8C  26D9               	addwf	fsr2l,f,c
  7473  000B8E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7474  000B90  22DA               	addwfc	fsr2h,f,c
  7475  000B92  CFDE F2BF          	movff	postinc2,??_ethernet_rxGetNewFrame
  7476  000B96  CFDD F2C0          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7477  000B9A  EE20 F010          	lfsr	2,16
  7478  000B9E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7479  000BA0  26D9               	addwf	fsr2l,f,c
  7480  000BA2  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7481  000BA4  22DA               	addwfc	fsr2h,f,c
  7482  000BA6  CFDE F2C1          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7483  000BAA  CFDD F2C2          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7484  000BAE  0102               	movlb	2	; () banked
  7485  000BB0  51BF               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7486  000BB2  27C1               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  7487  000BB4  51C0               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7488  000BB6  23C2               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  7489  000BB8  0E60               	movlw	96
  7490  000BBA  5DC2               	subwf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  7491  000BBC  A0D8               	btfss	status,0,c
  7492  000BBE  D040               	goto	l366
  7493                           
  7494                           ; BSR set to: 2
  7495                           ;ethernet.c: 73: frame->memory.end = frame->memory.length - ((0x5FFF - 0x3000) - frame->
      +                          memory.start) + 0x3000;
  7496  000BC0  0E00               	movlw	0
  7497  000BC2  6FBF               	movwf	??_ethernet_rxGetNewFrame& (0+255),b
  7498  000BC4  0E30               	movlw	48
  7499  000BC6  6FC0               	movwf	(??_ethernet_rxGetNewFrame+1)& (0+255),b
  7500  000BC8  0101               	movlb	1	; () banked
  7501  000BCA  EE20 F014          	lfsr	2,20
  7502  000BCE  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7503  000BD0  26D9               	addwf	fsr2l,f,c
  7504  000BD2  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7505  000BD4  22DA               	addwfc	fsr2h,f,c
  7506  000BD6  CFDE F2C1          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7507  000BDA  CFDD F2C2          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7508  000BDE  0EFF               	movlw	255
  7509  000BE0  0102               	movlb	2	; () banked
  7510  000BE2  6FC3               	movwf	(??_ethernet_rxGetNewFrame+4)& (0+255),b
  7511  000BE4  0E2F               	movlw	47
  7512  000BE6  6FC4               	movwf	(??_ethernet_rxGetNewFrame+5)& (0+255),b
  7513  000BE8  0101               	movlb	1	; () banked
  7514  000BEA  EE20 F010          	lfsr	2,16
  7515  000BEE  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7516  000BF0  26D9               	addwf	fsr2l,f,c
  7517  000BF2  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7518  000BF4  22DA               	addwfc	fsr2h,f,c
  7519  000BF6  CFDE F2C5          	movff	postinc2,??_ethernet_rxGetNewFrame+6
  7520  000BFA  CFDD F2C6          	movff	postdec2,??_ethernet_rxGetNewFrame+7
  7521  000BFE  0102               	movlb	2	; () banked
  7522  000C00  1FC5               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7523  000C02  1FC6               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7524  000C04  4BC5               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7525  000C06  2BC6               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7526  000C08  51C3               	movf	(??_ethernet_rxGetNewFrame+4)& (0+255),w,b
  7527  000C0A  27C5               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7528  000C0C  51C4               	movf	(??_ethernet_rxGetNewFrame+5)& (0+255),w,b
  7529  000C0E  23C6               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7530  000C10  1FC5               	comf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7531  000C12  1FC6               	comf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7532  000C14  4BC5               	infsnz	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7533  000C16  2BC6               	incf	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7534  000C18  51C1               	movf	(??_ethernet_rxGetNewFrame+2)& (0+255),w,b
  7535  000C1A  27C5               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7536  000C1C  51C2               	movf	(??_ethernet_rxGetNewFrame+3)& (0+255),w,b
  7537  000C1E  23C6               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7538  000C20  51BF               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7539  000C22  27C5               	addwf	(??_ethernet_rxGetNewFrame+6)& (0+255),f,b
  7540  000C24  51C0               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7541  000C26  23C6               	addwfc	(??_ethernet_rxGetNewFrame+7)& (0+255),f,b
  7542  000C28  0101               	movlb	1	; () banked
  7543  000C2A  EE20 F012          	lfsr	2,18
  7544  000C2E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7545  000C30  26D9               	addwf	fsr2l,f,c
  7546  000C32  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7547  000C34  22DA               	addwfc	fsr2h,f,c
  7548  000C36  C2C5  FFDE         	movff	??_ethernet_rxGetNewFrame+6,postinc2
  7549  000C3A  C2C6  FFDD         	movff	??_ethernet_rxGetNewFrame+7,postdec2
  7550                           
  7551                           ;ethernet.c: 74: } else {
  7552  000C3E  D025               	goto	l367
  7553  000C40                     l366:
  7554                           
  7555                           ;ethernet.c: 75: frame->memory.end = frame->memory.start + frame->memory.length;
  7556                           
  7557                           ; BSR set to: 1
  7558  000C40  0101               	movlb	1	; () banked
  7559  000C42  EE20 F014          	lfsr	2,20
  7560  000C46  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7561  000C48  26D9               	addwf	fsr2l,f,c
  7562  000C4A  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7563  000C4C  22DA               	addwfc	fsr2h,f,c
  7564  000C4E  CFDE F2BF          	movff	postinc2,??_ethernet_rxGetNewFrame
  7565  000C52  CFDD F2C0          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7566  000C56  EE20 F010          	lfsr	2,16
  7567  000C5A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7568  000C5C  26D9               	addwf	fsr2l,f,c
  7569  000C5E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7570  000C60  22DA               	addwfc	fsr2h,f,c
  7571  000C62  CFDE F2C1          	movff	postinc2,??_ethernet_rxGetNewFrame+2
  7572  000C66  CFDD F2C2          	movff	postdec2,??_ethernet_rxGetNewFrame+3
  7573  000C6A  0102               	movlb	2	; () banked
  7574  000C6C  51BF               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7575  000C6E  27C1               	addwf	(??_ethernet_rxGetNewFrame+2)& (0+255),f,b
  7576  000C70  51C0               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7577  000C72  23C2               	addwfc	(??_ethernet_rxGetNewFrame+3)& (0+255),f,b
  7578  000C74  0101               	movlb	1	; () banked
  7579  000C76  EE20 F012          	lfsr	2,18
  7580  000C7A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7581  000C7C  26D9               	addwf	fsr2l,f,c
  7582  000C7E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7583  000C80  22DA               	addwfc	fsr2h,f,c
  7584  000C82  C2C1  FFDE         	movff	??_ethernet_rxGetNewFrame+2,postinc2
  7585  000C86  C2C2  FFDD         	movff	??_ethernet_rxGetNewFrame+3,postdec2
  7586  000C8A                     l367:
  7587                           
  7588                           ; BSR set to: 1
  7589                           ;ethernet.c: 76: }
  7590                           ;ethernet.c: 77: frame->ethertype = ethernetController_getEtherTypeField(frame->memory);
  7591                           
  7592                           ; BSR set to: 1
  7593  000C8A  EE20 F010          	lfsr	2,16
  7594  000C8E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7595  000C90  26D9               	addwf	fsr2l,f,c
  7596  000C92  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7597  000C94  22DA               	addwfc	fsr2h,f,c
  7598  000C96  EE00  F06F         	lfsr	0,ethernetController_getEtherTypeField@field
  7599  000C9A  0E08               	movlw	8
  7600  000C9C                     u13491:
  7601  000C9C  CFDB FFEB          	movff	plusw2,plusw0
  7602  000CA0  06E8               	decf	wreg,f,c
  7603  000CA2  E2FC               	bc	u13491
  7604  000CA4  ECAE  F02A         	call	_ethernetController_getEtherTypeField	;wreg free
  7605  000CA8  0101               	movlb	1	; () banked
  7606  000CAA  EE20 F00E          	lfsr	2,14
  7607  000CAE  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7608  000CB0  26D9               	addwf	fsr2l,f,c
  7609  000CB2  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7610  000CB4  22DA               	addwfc	fsr2h,f,c
  7611  000CB6  0100               	movlb	0	; () banked
  7612  000CB8  C06F  FFDE         	movff	?_ethernetController_getEtherTypeField,postinc2
  7613  000CBC  C070  FFDD         	movff	?_ethernetController_getEtherTypeField+1,postdec2
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;ethernet.c: 79: UARTTransmitText("[");
  7617  000CC0  0EBC               	movlw	low (STR_90+3)
  7618  000CC2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7619  000CC4  0E7F               	movlw	high (STR_90+3)
  7620  000CC6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7621  000CC8  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7622                           
  7623                           ;ethernet.c: 80: UARTTransmitText(intToString(counter++));
  7624  000CCC  C25B  F084         	movff	ethernet_rxGetNewFrame@counter,intToString@val
  7625  000CD0  C25C  F085         	movff	ethernet_rxGetNewFrame@counter+1,intToString@val+1
  7626  000CD4  C25D  F086         	movff	ethernet_rxGetNewFrame@counter+2,intToString@val+2
  7627  000CD8  C25E  F087         	movff	ethernet_rxGetNewFrame@counter+3,intToString@val+3
  7628  000CDC  EC11  F02F         	call	_intToString	;wreg free
  7629  000CE0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  7630  000CE4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  7631  000CE8  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7632  000CEC  0E01               	movlw	1
  7633  000CEE  0102               	movlb	2	; () banked
  7634  000CF0  275B               	addwf	ethernet_rxGetNewFrame@counter& (0+255),f,b
  7635  000CF2  0E00               	movlw	0
  7636  000CF4  235C               	addwfc	(ethernet_rxGetNewFrame@counter+1)& (0+255),f,b
  7637  000CF6  235D               	addwfc	(ethernet_rxGetNewFrame@counter+2)& (0+255),f,b
  7638  000CF8  235E               	addwfc	(ethernet_rxGetNewFrame@counter+3)& (0+255),f,b
  7639                           
  7640                           ; BSR set to: 2
  7641                           ;ethernet.c: 81: UARTTransmitText("]");
  7642  000CFA  0EAC               	movlw	low (STR_12+5)
  7643  000CFC  0100               	movlb	0	; () banked
  7644  000CFE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7645  000D00  0E7F               	movlw	high (STR_12+5)
  7646  000D02  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7647  000D04  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7648                           
  7649                           ;ethernet.c: 85: if (frame->receiveStatusVector.broadcast)
  7650  000D08  0101               	movlb	1	; () banked
  7651  000D0A  EE20 F01B          	lfsr	2,27
  7652  000D0E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7653  000D10  26D9               	addwf	fsr2l,f,c
  7654  000D12  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7655  000D14  22DA               	addwfc	fsr2h,f,c
  7656  000D16  AEDF               	btfss	indf2,7,c
  7657  000D18  D007               	goto	l368
  7658                           
  7659                           ; BSR set to: 1
  7660                           ;ethernet.c: 86: UARTTransmitText("[Broadcast]");
  7661  000D1A  0E23               	movlw	low STR_3
  7662  000D1C  0100               	movlb	0	; () banked
  7663  000D1E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7664  000D20  0E7F               	movlw	high STR_3
  7665  000D22  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7666  000D24  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7667  000D28                     l368:
  7668                           
  7669                           ;ethernet.c: 87: if (frame->receiveStatusVector.unicast)
  7670  000D28  0101               	movlb	1	; () banked
  7671  000D2A  EE20 F01D          	lfsr	2,29
  7672  000D2E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7673  000D30  26D9               	addwf	fsr2l,f,c
  7674  000D32  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7675  000D34  22DA               	addwfc	fsr2h,f,c
  7676  000D36  A4DF               	btfss	indf2,2,c
  7677  000D38  D007               	goto	l369
  7678                           
  7679                           ; BSR set to: 1
  7680                           ;ethernet.c: 88: UARTTransmitText("[Unicast]");
  7681  000D3A  0E7C               	movlw	low STR_4
  7682  000D3C  0100               	movlb	0	; () banked
  7683  000D3E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7684  000D40  0E7F               	movlw	high STR_4
  7685  000D42  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7686  000D44  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7687  000D48                     l369:
  7688                           
  7689                           ;ethernet.c: 89: if (!frame->receiveStatusVector.receivedOk) {
  7690  000D48  0101               	movlb	1	; () banked
  7691  000D4A  EE20 F01B          	lfsr	2,27
  7692  000D4E  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7693  000D50  26D9               	addwf	fsr2l,f,c
  7694  000D52  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7695  000D54  22DA               	addwfc	fsr2h,f,c
  7696  000D56  BADF               	btfsc	indf2,5,c
  7697  000D58  D0D9               	goto	l371
  7698                           
  7699                           ; BSR set to: 1
  7700                           ;ethernet.c: 90: UARTTransmitText("\033[41;1;10m");
  7701  000D5A  0E5D               	movlw	low STR_5
  7702  000D5C  0100               	movlb	0	; () banked
  7703  000D5E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7704  000D60  0E7F               	movlw	high STR_5
  7705  000D62  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7706  000D64  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7707                           
  7708                           ;ethernet.c: 91: UARTTransmitText("[Symbol Errors]");
  7709  000D68  0E66               	movlw	low STR_6
  7710  000D6A  0100               	movlb	0	; () banked
  7711  000D6C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7712  000D6E  0E7E               	movlw	high STR_6
  7713  000D70  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7714  000D72  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7715                           
  7716                           ;ethernet.c: 92: UARTTransmitText("\033[0m");
  7717  000D76  0ED7               	movlw	low STR_7
  7718  000D78  0100               	movlb	0	; () banked
  7719  000D7A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7720  000D7C  0E7F               	movlw	high STR_7
  7721  000D7E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7722  000D80  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7723                           
  7724                           ;ethernet.c: 93: }
  7725                           ;ethernet.c: 98: switch (frame->ethertype) {
  7726  000D84  D0C3               	goto	l371
  7727  000D86                     
  7728                           ;ethernet.c: 100: UARTTransmitText("\033[44;10;10m");
  7729  000D86  0E2F               	movlw	low STR_8
  7730  000D88  0100               	movlb	0	; () banked
  7731  000D8A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7732  000D8C  0E7F               	movlw	high STR_8
  7733  000D8E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7734  000D90  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7735                           
  7736                           ;ethernet.c: 101: UARTTransmitText("[ARP]");
  7737  000D94  0EAE               	movlw	low STR_9
  7738  000D96  0100               	movlb	0	; () banked
  7739  000D98  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7740  000D9A  0E7F               	movlw	high STR_9
  7741  000D9C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7742  000D9E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7743                           
  7744                           ;ethernet.c: 102: UARTTransmitText("\033[0m");
  7745  000DA2  0ED7               	movlw	low STR_7
  7746  000DA4  0100               	movlb	0	; () banked
  7747  000DA6  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7748  000DA8  0E7F               	movlw	high STR_7
  7749  000DAA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7750  000DAC  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7751                           
  7752                           ;ethernet.c: 103: arp_handleNewPacket(frame);
  7753  000DB0  C1FC  F0FC         	movff	ethernet_rxGetNewFrame@frame,arp_handleNewPacket@frame
  7754  000DB4  C1FD  F0FD         	movff	ethernet_rxGetNewFrame@frame+1,arp_handleNewPacket@frame+1
  7755  000DB8  EC8D  F017         	call	_arp_handleNewPacket	;wreg free
  7756                           
  7757                           ;ethernet.c: 105: break;
  7758  000DBC  D0BF               	goto	l373
  7759  000DBE                     
  7760                           ;ethernet.c: 107: UARTTransmitText("\033[45;10;10m");
  7761  000DBE  0E3B               	movlw	low STR_11
  7762  000DC0  0100               	movlb	0	; () banked
  7763  000DC2  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7764  000DC4  0E7F               	movlw	high STR_11
  7765  000DC6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7766  000DC8  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7767                           
  7768                           ;ethernet.c: 108: UARTTransmitText("[IPv4]");
  7769  000DCC  0EA7               	movlw	low STR_12
  7770  000DCE  0100               	movlb	0	; () banked
  7771  000DD0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7772  000DD2  0E7F               	movlw	high STR_12
  7773  000DD4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7774  000DD6  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7775                           
  7776                           ;ethernet.c: 109: UARTTransmitText("\033[0m");
  7777  000DDA  0ED7               	movlw	low STR_7
  7778  000DDC  0100               	movlb	0	; () banked
  7779  000DDE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7780  000DE0  0E7F               	movlw	high STR_7
  7781  000DE2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7782  000DE4  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7783                           
  7784                           ;ethernet.c: 110: ipv4_handleNewPacket(frame);
  7785  000DE8  C1FC  F1CF         	movff	ethernet_rxGetNewFrame@frame,ipv4_handleNewPacket@frame
  7786  000DEC  C1FD  F1D0         	movff	ethernet_rxGetNewFrame@frame+1,ipv4_handleNewPacket@frame+1
  7787  000DF0  EC2B  F013         	call	_ipv4_handleNewPacket	;wreg free
  7788                           
  7789                           ;ethernet.c: 111: break;
  7790  000DF4  D0A3               	goto	l373
  7791  000DF6                     
  7792                           ;ethernet.c: 113: UARTTransmitText("\033[41;1;10m");
  7793  000DF6  0E5D               	movlw	low STR_5
  7794  000DF8  0100               	movlb	0	; () banked
  7795  000DFA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7796  000DFC  0E7F               	movlw	high STR_5
  7797  000DFE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7798  000E00  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7799                           
  7800                           ;ethernet.c: 114: UARTTransmitText("[Unknown EtherType]");
  7801  000E04  0EB4               	movlw	low STR_15
  7802  000E06  0100               	movlb	0	; () banked
  7803  000E08  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7804  000E0A  0E7D               	movlw	high STR_15
  7805  000E0C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7806  000E0E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7807                           
  7808                           ;ethernet.c: 115: UARTTransmitText("[");
  7809  000E12  0EBC               	movlw	low (STR_90+3)
  7810  000E14  0100               	movlb	0	; () banked
  7811  000E16  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7812  000E18  0E7F               	movlw	high (STR_90+3)
  7813  000E1A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7814  000E1C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7815                           
  7816                           ;ethernet.c: 116: UARTTransmitText(macToString(frame->source));
  7817  000E20  0101               	movlb	1	; () banked
  7818  000E22  EE20 F002          	lfsr	2,2
  7819  000E26  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7820  000E28  26D9               	addwf	fsr2l,f,c
  7821  000E2A  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7822  000E2C  22DA               	addwfc	fsr2h,f,c
  7823  000E2E  EE00  F07A         	lfsr	0,macToString@addr
  7824  000E32  0E05               	movlw	5
  7825  000E34                     u13531:
  7826  000E34  CFDB FFEB          	movff	plusw2,plusw0
  7827  000E38  06E8               	decf	wreg,f,c
  7828  000E3A  E2FC               	bc	u13531
  7829  000E3C  EC55  F023         	call	_macToString	;wreg free
  7830  000E40  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7831  000E44  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7832  000E48  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7833                           
  7834                           ;ethernet.c: 117: UARTTransmitText("->");
  7835  000E4C  0EF5               	movlw	low STR_17
  7836  000E4E  0100               	movlb	0	; () banked
  7837  000E50  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7838  000E52  0E7F               	movlw	high STR_17
  7839  000E54  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7840  000E56  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7841                           
  7842                           ;ethernet.c: 118: UARTTransmitText(macToString(frame->destination));
  7843  000E5A  0101               	movlb	1	; () banked
  7844  000E5C  EE20 F008          	lfsr	2,8
  7845  000E60  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7846  000E62  26D9               	addwf	fsr2l,f,c
  7847  000E64  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7848  000E66  22DA               	addwfc	fsr2h,f,c
  7849  000E68  EE00  F07A         	lfsr	0,macToString@addr
  7850  000E6C  0E05               	movlw	5
  7851  000E6E                     u13541:
  7852  000E6E  CFDB FFEB          	movff	plusw2,plusw0
  7853  000E72  06E8               	decf	wreg,f,c
  7854  000E74  E2FC               	bc	u13541
  7855  000E76  EC55  F023         	call	_macToString	;wreg free
  7856  000E7A  C07A  F098         	movff	?_macToString,UARTTransmitText@str
  7857  000E7E  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
  7858  000E82  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7859                           
  7860                           ;ethernet.c: 119: UARTTransmitText("][");
  7861  000E86  0EF8               	movlw	low STR_18
  7862  000E88  0100               	movlb	0	; () banked
  7863  000E8A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7864  000E8C  0E7F               	movlw	high STR_18
  7865  000E8E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7866  000E90  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7867                           
  7868                           ;ethernet.c: 120: UARTTransmitText(etherTypeToString(frame->ethertype));
  7869  000E94  0101               	movlb	1	; () banked
  7870  000E96  EE20 F00E          	lfsr	2,14
  7871  000E9A  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7872  000E9C  26D9               	addwf	fsr2l,f,c
  7873  000E9E  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7874  000EA0  22DA               	addwfc	fsr2h,f,c
  7875  000EA2  CFDE F060          	movff	postinc2,etherTypeToString@ethertype
  7876  000EA6  CFDD F061          	movff	postdec2,etherTypeToString@ethertype+1
  7877  000EAA  ECA9  F02D         	call	_etherTypeToString	;wreg free
  7878  000EAE  C060  F098         	movff	?_etherTypeToString,UARTTransmitText@str
  7879  000EB2  C061  F099         	movff	?_etherTypeToString+1,UARTTransmitText@str+1
  7880  000EB6  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7881                           
  7882                           ;ethernet.c: 121: UARTTransmitText("][L=");
  7883  000EBA  0ED2               	movlw	low STR_19
  7884  000EBC  0100               	movlb	0	; () banked
  7885  000EBE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7886  000EC0  0E7F               	movlw	high STR_19
  7887  000EC2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7888  000EC4  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7889                           
  7890                           ;ethernet.c: 122: UARTTransmitInt(frame->length);
  7891  000EC8  C1FC  FFD9         	movff	ethernet_rxGetNewFrame@frame,fsr2l
  7892  000ECC  C1FD  FFDA         	movff	ethernet_rxGetNewFrame@frame+1,fsr2h
  7893  000ED0  CFDE F2BF          	movff	postinc2,??_ethernet_rxGetNewFrame
  7894  000ED4  CFDD F2C0          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7895  000ED8  C2BF  F09A         	movff	??_ethernet_rxGetNewFrame,UARTTransmitInt@val
  7896  000EDC  C2C0  F09B         	movff	??_ethernet_rxGetNewFrame+1,UARTTransmitInt@val+1
  7897  000EE0  0100               	movlb	0	; () banked
  7898  000EE2  6B9C               	clrf	(UARTTransmitInt@val+2)& (0+255),b
  7899  000EE4  6B9D               	clrf	(UARTTransmitInt@val+3)& (0+255),b
  7900  000EE6  EC5E  F030         	call	_UARTTransmitInt	;wreg free
  7901                           
  7902                           ;ethernet.c: 123: UARTTransmitText("] ");
  7903  000EEA  0EF2               	movlw	low STR_20
  7904  000EEC  0100               	movlb	0	; () banked
  7905  000EEE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7906  000EF0  0E7F               	movlw	high STR_20
  7907  000EF2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7908  000EF4  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7909                           
  7910                           ;ethernet.c: 124: UARTTransmitText("\033[0m");
  7911  000EF8  0ED7               	movlw	low STR_7
  7912  000EFA  0100               	movlb	0	; () banked
  7913  000EFC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7914  000EFE  0E7F               	movlw	high STR_7
  7915  000F00  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7916  000F02  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7917                           
  7918                           ;ethernet.c: 125: ethernetController_dropPacket();
  7919  000F06  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  7920                           
  7921                           ;ethernet.c: 127: }
  7922                           
  7923                           ;ethernet.c: 126: break;
  7924  000F0A  D018               	goto	l373
  7925  000F0C                     l371:
  7926  000F0C  0101               	movlb	1	; () banked
  7927  000F0E  EE20 F00E          	lfsr	2,14
  7928  000F12  51FC               	movf	ethernet_rxGetNewFrame@frame& (0+255),w,b
  7929  000F14  26D9               	addwf	fsr2l,f,c
  7930  000F16  51FD               	movf	(ethernet_rxGetNewFrame@frame+1)& (0+255),w,b
  7931  000F18  22DA               	addwfc	fsr2h,f,c
  7932  000F1A  CFDE F2BF          	movff	postinc2,??_ethernet_rxGetNewFrame
  7933  000F1E  CFDD F2C0          	movff	postdec2,??_ethernet_rxGetNewFrame+1
  7934                           
  7935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7936                           ; Switch size 1, requested type "space"
  7937                           ; Number of cases is 1, Range of values is 8 to 8
  7938                           ; switch strategies available:
  7939                           ; Name         Instructions Cycles
  7940                           ; simple_byte            4     3 (average)
  7941                           ;	Chosen strategy is simple_byte
  7942  000F22  0102               	movlb	2	; () banked
  7943  000F24  51C0               	movf	(??_ethernet_rxGetNewFrame+1)& (0+255),w,b
  7944  000F26  0A08               	xorlw	8	; case 8
  7945  000F28  A4D8               	btfss	status,2,c
  7946  000F2A  D765               	goto	l375
  7947                           
  7948                           ; BSR set to: 2
  7949                           ; Switch size 1, requested type "space"
  7950                           ; Number of cases is 2, Range of values is 0 to 6
  7951                           ; switch strategies available:
  7952                           ; Name         Instructions Cycles
  7953                           ; simple_byte            7     4 (average)
  7954                           ;	Chosen strategy is simple_byte
  7955  000F2C  51BF               	movf	??_ethernet_rxGetNewFrame& (0+255),w,b
  7956  000F2E  0A00               	xorlw	0	; case 0
  7957  000F30  B4D8               	btfsc	status,2,c
  7958  000F32  D745               	goto	l374
  7959  000F34  0A06               	xorlw	6	; case 6
  7960  000F36  B4D8               	btfsc	status,2,c
  7961  000F38  D726               	goto	l372
  7962  000F3A  D75D               	goto	l375
  7963  000F3C                     l373:
  7964                           
  7965                           ;ethernet.c: 140: UARTTransmitText("\n\r");
  7966                           
  7967                           ; BSR set to: 2
  7968  000F3C  0EDD               	movlw	low (STR_104+1)
  7969  000F3E  0100               	movlb	0	; () banked
  7970  000F40  6F98               	movwf	UARTTransmitText@str& (0+255),b
  7971  000F42  0E7F               	movlw	high (STR_104+1)
  7972  000F44  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  7973  000F46  EC42  F02C         	call	_UARTTransmitText	;wreg free
  7974  000F4A  0012               	return	
  7975  000F4C                     __end_of_ethernet_rxGetNewFrame:
  7976                           	opt stack 0
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           intcon	equ	0xFF2
  7984                           intcon3	equ	0xFF0
  7985                           indf0	equ	0xFEF
  7986                           postinc0	equ	0xFEE
  7987                           plusw0	equ	0xFEB
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           postinc1	equ	0xFE6
  7992                           postdec1	equ	0xFE5
  7993                           plusw1	equ	0xFE3
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           plusw2	equ	0xFDB
  8000                           fsr2h	equ	0xFDA
  8001                           fsr2l	equ	0xFD9
  8002                           status	equ	0xFD8
  8003                           
  8004 ;; *************** function _ipv4_handleNewPacket *****************
  8005 ;; Defined at:
  8006 ;;		line 250 in file "src/stack/protocols/ipv4.c"
  8007 ;; Parameters:    Size  Location     Type
  8008 ;;  frame           2  207[BANK1 ] PTR struct ethernetFrame
  8009 ;;		 -> stack(123), 
  8010 ;; Auto vars:     Size  Location     Type
  8011 ;;  header         23  211[BANK1 ] struct ipv4_header
  8012 ;;  headerField     9  243[BANK1 ] struct memoryField
  8013 ;;  payloadField    9  234[BANK1 ] struct memoryField
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      void 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8023 ;;      Params:         0       0       2       0       0       0       0       0       0
  8024 ;;      Locals:         0       0      43       0       0       0       0       0       0
  8025 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8026 ;;      Totals:         0       4      45       0       0       0       0       0       0
  8027 ;;Total ram usage:       49 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:   12
  8030 ;; This function calls:
  8031 ;;		_ethernetController_dropPacket
  8032 ;;		_icmp_handleNewPacket
  8033 ;;		_ipv4_checkHeaderChecksum
  8034 ;;		_ipv4_parseHeader
  8035 ;; This function is called by:
  8036 ;;		_ethernet_rxGetNewFrame
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text15
  8041  002656                     __ptext15:
  8042                           	opt stack 0
  8043  002656                     _ipv4_handleNewPacket:
  8044                           	opt stack 16
  8045                           
  8046                           ;ipv4.c: 251: ipv4_header_t header;
  8047                           ;ipv4.c: 252: memoryField_t headerField;
  8048                           ;ipv4.c: 253: memoryField_t payloadField;
  8049                           ;ipv4.c: 255: if (frame->ethertype != ETHERTYPE_IPv4) {
  8050                           
  8051                           ;incstack = 0
  8052  002656  0101               	movlb	1	; () banked
  8053  002658  EE20 F00E          	lfsr	2,14
  8054  00265C  51CF               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8055  00265E  26D9               	addwf	fsr2l,f,c
  8056  002660  51D0               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8057  002662  22DA               	addwfc	fsr2h,f,c
  8058  002664  50DE               	movf	postinc2,w,c
  8059  002666  E104               	bnz	u12830
  8060  002668  0E08               	movlw	8
  8061  00266A  18DE               	xorwf	postinc2,w,c
  8062  00266C  B4D8               	btfsc	status,2,c
  8063  00266E  D007               	goto	l1207
  8064  002670                     u12830:
  8065                           
  8066                           ; BSR set to: 1
  8067                           ;ipv4.c: 256: ethernetController_dropPacket(frame);
  8068  002670  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8069  002674  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8070  002678  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8071                           
  8072                           ;ipv4.c: 257: return;
  8073  00267C  0012               	return	
  8074  00267E                     l1207:
  8075                           
  8076                           ;ipv4.c: 258: }
  8077                           ;ipv4.c: 260: headerField = frame->memory;
  8078  00267E  0101               	movlb	1	; () banked
  8079  002680  EE20 F010          	lfsr	2,16
  8080  002684  51CF               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8081  002686  26D9               	addwf	fsr2l,f,c
  8082  002688  51D0               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8083  00268A  22DA               	addwfc	fsr2h,f,c
  8084  00268C  EE11  F0F3         	lfsr	1,ipv4_handleNewPacket@headerField
  8085  002690  0E08               	movlw	8
  8086  002692                     u12841:
  8087  002692  CFDB FFE3          	movff	plusw2,plusw1
  8088  002696  06E8               	decf	wreg,f,c
  8089  002698  E2FC               	bc	u12841
  8090                           
  8091                           ; BSR set to: 1
  8092                           ;ipv4.c: 261: headerField.start = frame->memory.start + 22;
  8093  00269A  EE20 F010          	lfsr	2,16
  8094  00269E  51CF               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8095  0026A0  26D9               	addwf	fsr2l,f,c
  8096  0026A2  51D0               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8097  0026A4  22DA               	addwfc	fsr2h,f,c
  8098  0026A6  CFDE F0F9          	movff	postinc2,??_ipv4_handleNewPacket
  8099  0026AA  CFDD F0FA          	movff	postdec2,??_ipv4_handleNewPacket+1
  8100  0026AE  0E16               	movlw	22
  8101  0026B0  0100               	movlb	0	; () banked
  8102  0026B2  25F9               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8103  0026B4  0101               	movlb	1	; () banked
  8104  0026B6  6FF3               	movwf	ipv4_handleNewPacket@headerField& (0+255),b
  8105  0026B8  0E00               	movlw	0
  8106  0026BA  0100               	movlb	0	; () banked
  8107  0026BC  21FA               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8108  0026BE  0101               	movlb	1	; () banked
  8109  0026C0  6FF4               	movwf	(ipv4_handleNewPacket@headerField+1)& (0+255),b
  8110                           
  8111                           ; BSR set to: 1
  8112                           ;ipv4.c: 263: header = ipv4_parseHeader(&headerField);
  8113  0026C2  0EF3               	movlw	low ipv4_handleNewPacket@headerField
  8114  0026C4  0100               	movlb	0	; () banked
  8115  0026C6  6F74               	movwf	ipv4_parseHeader@field& (0+255),b
  8116  0026C8  0E01               	movlw	high ipv4_handleNewPacket@headerField
  8117  0026CA  6F75               	movwf	(ipv4_parseHeader@field+1)& (0+255),b
  8118  0026CC  EC54  F014         	call	_ipv4_parseHeader	;wreg free
  8119  0026D0  EE21  F0D3         	lfsr	2,ipv4_handleNewPacket@header
  8120  0026D4  0E16               	movlw	22
  8121  0026D6                     u12851:
  8122  0026D6  CFEB FFDB          	movff	plusw0,plusw2
  8123  0026DA  06E8               	decf	wreg,f,c
  8124  0026DC  E2FC               	bc	u12851
  8125                           
  8126                           ;ipv4.c: 265: headerField.length = header.headerLength * 4;
  8127  0026DE  0101               	movlb	1	; () banked
  8128  0026E0  51D4               	movf	(ipv4_handleNewPacket@header+1)& (0+255),w,b
  8129  0026E2  0D04               	mullw	4
  8130  0026E4  CFF3 F1F7          	movff	prodl,ipv4_handleNewPacket@headerField+4
  8131  0026E8  CFF4 F1F8          	movff	prodh,ipv4_handleNewPacket@headerField+5
  8132                           
  8133                           ; BSR set to: 1
  8134                           ;ipv4.c: 266: if (headerField.start + headerField.length > 0x5FFF) {
  8135  0026EC  51F3               	movf	ipv4_handleNewPacket@headerField& (0+255),w,b
  8136  0026EE  25F7               	addwf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8137  0026F0  0100               	movlb	0	; () banked
  8138  0026F2  6FF9               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8139  0026F4  0101               	movlb	1	; () banked
  8140  0026F6  51F4               	movf	(ipv4_handleNewPacket@headerField+1)& (0+255),w,b
  8141  0026F8  21F8               	addwfc	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8142  0026FA  0100               	movlb	0	; () banked
  8143  0026FC  6FFA               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8144  0026FE  0E60               	movlw	96
  8145  002700  5DFA               	subwf	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8146  002702  A0D8               	btfss	status,0,c
  8147  002704  D024               	goto	l1209
  8148                           
  8149                           ; BSR set to: 0
  8150                           ;ipv4.c: 267: headerField.end = headerField.length - (0x5FFF - headerField.start) - 1;
  8151  002706  0EFF               	movlw	255
  8152  002708  6FF9               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8153  00270A  0E5F               	movlw	95
  8154  00270C  6FFA               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8155  00270E  C1F3  F0FB         	movff	ipv4_handleNewPacket@headerField,??_ipv4_handleNewPacket+2
  8156  002712  C1F4  F0FC         	movff	ipv4_handleNewPacket@headerField+1,??_ipv4_handleNewPacket+3
  8157  002716  1FFB               	comf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8158  002718  1FFC               	comf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8159  00271A  4BFB               	infsnz	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8160  00271C  2BFC               	incf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8161  00271E  51F9               	movf	??_ipv4_handleNewPacket& (0+255),w,b
  8162  002720  27FB               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8163  002722  51FA               	movf	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8164  002724  23FC               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8165  002726  1FFB               	comf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8166  002728  1FFC               	comf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8167  00272A  4BFB               	infsnz	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8168  00272C  2BFC               	incf	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8169  00272E  0101               	movlb	1	; () banked
  8170  002730  51F7               	movf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8171  002732  0100               	movlb	0	; () banked
  8172  002734  27FB               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),f,b
  8173  002736  0101               	movlb	1	; () banked
  8174  002738  51F8               	movf	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8175  00273A  0100               	movlb	0	; () banked
  8176  00273C  23FC               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),f,b
  8177  00273E  0EFF               	movlw	255
  8178  002740  25FB               	addwf	(??_ipv4_handleNewPacket+2)& (0+255),w,b
  8179  002742  0101               	movlb	1	; () banked
  8180  002744  6FF5               	movwf	(ipv4_handleNewPacket@headerField+2)& (0+255),b
  8181  002746  0EFF               	movlw	255
  8182  002748  0100               	movlb	0	; () banked
  8183  00274A  21FC               	addwfc	(??_ipv4_handleNewPacket+3)& (0+255),w,b
  8184  00274C  D011               	goto	L3
  8185  00274E                     l1209:
  8186                           
  8187                           ;ipv4.c: 269: headerField.end = headerField.start + headerField.length - 1;
  8188                           
  8189                           ; BSR set to: 1
  8190  00274E  0101               	movlb	1	; () banked
  8191  002750  51F3               	movf	ipv4_handleNewPacket@headerField& (0+255),w,b
  8192  002752  25F7               	addwf	(ipv4_handleNewPacket@headerField+4)& (0+255),w,b
  8193  002754  0100               	movlb	0	; () banked
  8194  002756  6FF9               	movwf	??_ipv4_handleNewPacket& (0+255),b
  8195  002758  0101               	movlb	1	; () banked
  8196  00275A  51F4               	movf	(ipv4_handleNewPacket@headerField+1)& (0+255),w,b
  8197  00275C  21F8               	addwfc	(ipv4_handleNewPacket@headerField+5)& (0+255),w,b
  8198  00275E  0100               	movlb	0	; () banked
  8199  002760  6FFA               	movwf	(??_ipv4_handleNewPacket+1)& (0+255),b
  8200  002762  0EFF               	movlw	255
  8201  002764  25F9               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8202  002766  0101               	movlb	1	; () banked
  8203  002768  6FF5               	movwf	(ipv4_handleNewPacket@headerField+2)& (0+255),b
  8204  00276A  0EFF               	movlw	255
  8205  00276C  0100               	movlb	0	; () banked
  8206  00276E  21FA               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8207  002770                     L3:
  8208  002770  0101               	movlb	1	; () banked
  8209  002772  6FF6               	movwf	(ipv4_handleNewPacket@headerField+3)& (0+255),b
  8210                           
  8211                           ; BSR set to: 1
  8212                           ;ipv4.c: 271: payloadField.start = headerField.end + 1;
  8213  002774  0E01               	movlw	1
  8214  002776  25F5               	addwf	(ipv4_handleNewPacket@headerField+2)& (0+255),w,b
  8215  002778  6FEA               	movwf	ipv4_handleNewPacket@payloadField& (0+255),b
  8216  00277A  0E00               	movlw	0
  8217  00277C  21F6               	addwfc	(ipv4_handleNewPacket@headerField+3)& (0+255),w,b
  8218  00277E  6FEB               	movwf	(ipv4_handleNewPacket@payloadField+1)& (0+255),b
  8219                           
  8220                           ; BSR set to: 1
  8221                           ;ipv4.c: 272: payloadField.end = frame->memory.end;
  8222  002780  EE20 F012          	lfsr	2,18
  8223  002784  51CF               	movf	ipv4_handleNewPacket@frame& (0+255),w,b
  8224  002786  26D9               	addwf	fsr2l,f,c
  8225  002788  51D0               	movf	(ipv4_handleNewPacket@frame+1)& (0+255),w,b
  8226  00278A  22DA               	addwfc	fsr2h,f,c
  8227  00278C  CFDE F1EC          	movff	postinc2,ipv4_handleNewPacket@payloadField+2
  8228  002790  CFDD F1ED          	movff	postdec2,ipv4_handleNewPacket@payloadField+3
  8229                           
  8230                           ; BSR set to: 1
  8231                           ;ipv4.c: 274: payloadField.length = (payloadField.start < payloadField.end) ? (payloadFi
      +                          eld.end - payloadField.start) : ((0x5FFF - payloadField.start) + payloadField.end);
  8232  002794  51EC               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8233  002796  5DEA               	subwf	ipv4_handleNewPacket@payloadField& (0+255),w,b
  8234  002798  51ED               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8235  00279A  59EB               	subwfb	(ipv4_handleNewPacket@payloadField+1)& (0+255),w,b
  8236  00279C  A0D8               	btfss	status,0,c
  8237  00279E  D017               	goto	l1212
  8238                           
  8239                           ; BSR set to: 1
  8240  0027A0  C1EA  F0F9         	movff	ipv4_handleNewPacket@payloadField,??_ipv4_handleNewPacket
  8241  0027A4  C1EB  F0FA         	movff	ipv4_handleNewPacket@payloadField+1,??_ipv4_handleNewPacket+1
  8242  0027A8  0100               	movlb	0	; () banked
  8243  0027AA  1FF9               	comf	??_ipv4_handleNewPacket& (0+255),f,b
  8244  0027AC  1FFA               	comf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8245  0027AE  4BF9               	infsnz	??_ipv4_handleNewPacket& (0+255),f,b
  8246  0027B0  2BFA               	incf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8247  0027B2  0101               	movlb	1	; () banked
  8248  0027B4  51EC               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8249  0027B6  0100               	movlb	0	; () banked
  8250  0027B8  27F9               	addwf	??_ipv4_handleNewPacket& (0+255),f,b
  8251  0027BA  0101               	movlb	1	; () banked
  8252  0027BC  51ED               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8253  0027BE  0100               	movlb	0	; () banked
  8254  0027C0  23FA               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8255  0027C2  0EFF               	movlw	255
  8256  0027C4  25F9               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8257  0027C6  0101               	movlb	1	; () banked
  8258  0027C8  6FD1               	movwf	_ipv4_handleNewPacket$3967& (0+255),b
  8259  0027CA  0E5F               	movlw	95
  8260  0027CC  D010               	goto	L4
  8261  0027CE                     l1212:
  8262                           
  8263                           ; BSR set to: 1
  8264                           
  8265                           ; BSR set to: 1
  8266  0027CE  C1EA  F0F9         	movff	ipv4_handleNewPacket@payloadField,??_ipv4_handleNewPacket
  8267  0027D2  C1EB  F0FA         	movff	ipv4_handleNewPacket@payloadField+1,??_ipv4_handleNewPacket+1
  8268  0027D6  0100               	movlb	0	; () banked
  8269  0027D8  1FF9               	comf	??_ipv4_handleNewPacket& (0+255),f,b
  8270  0027DA  1FFA               	comf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8271  0027DC  4BF9               	infsnz	??_ipv4_handleNewPacket& (0+255),f,b
  8272  0027DE  2BFA               	incf	(??_ipv4_handleNewPacket+1)& (0+255),f,b
  8273  0027E0  0101               	movlb	1	; () banked
  8274  0027E2  51EC               	movf	(ipv4_handleNewPacket@payloadField+2)& (0+255),w,b
  8275  0027E4  0100               	movlb	0	; () banked
  8276  0027E6  25F9               	addwf	??_ipv4_handleNewPacket& (0+255),w,b
  8277  0027E8  0101               	movlb	1	; () banked
  8278  0027EA  6FD1               	movwf	_ipv4_handleNewPacket$3967& (0+255),b
  8279  0027EC  51ED               	movf	(ipv4_handleNewPacket@payloadField+3)& (0+255),w,b
  8280  0027EE                     L4:
  8281  0027EE  0100               	movlb	0	; () banked
  8282  0027F0  21FA               	addwfc	(??_ipv4_handleNewPacket+1)& (0+255),w,b
  8283  0027F2  0101               	movlb	1	; () banked
  8284  0027F4  6FD2               	movwf	(_ipv4_handleNewPacket$3967+1)& (0+255),b
  8285                           
  8286                           ; BSR set to: 1
  8287                           
  8288                           ; BSR set to: 1
  8289  0027F6  C1D1  F1EE         	movff	_ipv4_handleNewPacket$3967,ipv4_handleNewPacket@payloadField+4
  8290  0027FA  C1D2  F1EF         	movff	_ipv4_handleNewPacket$3967+1,ipv4_handleNewPacket@payloadField+5
  8291                           
  8292                           ; BSR set to: 1
  8293                           ;ipv4.c: 301: if (!ipv4_checkHeaderChecksum(&header)) {
  8294  0027FE  0ED3               	movlw	low ipv4_handleNewPacket@header
  8295  002800  0100               	movlb	0	; () banked
  8296  002802  6F6F               	movwf	ipv4_checkHeaderChecksum@header& (0+255),b
  8297  002804  0E01               	movlw	high ipv4_handleNewPacket@header
  8298  002806  6F70               	movwf	(ipv4_checkHeaderChecksum@header+1)& (0+255),b
  8299  002808  ECEA  F02C         	call	_ipv4_checkHeaderChecksum	;wreg free
  8300  00280C  0100               	movlb	0	; () banked
  8301  00280E  B0D8               	btfsc	status,0,c
  8302  002810  D006               	goto	l1215
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;ipv4.c: 307: ethernetController_dropPacket(frame);
  8306  002812  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8307  002816  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8308  00281A  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8309  00281E                     l1215:
  8310                           
  8311                           ;ipv4.c: 308: }
  8312                           ;ipv4.c: 309: if (header.version != 4) {
  8313  00281E  0E04               	movlw	4
  8314  002820  0101               	movlb	1	; () banked
  8315  002822  19D3               	xorwf	ipv4_handleNewPacket@header& (0+255),w,b
  8316  002824  B4D8               	btfsc	status,2,c
  8317  002826  D006               	goto	l1216
  8318                           
  8319                           ; BSR set to: 1
  8320                           ;ipv4.c: 310: ethernetController_dropPacket(frame);
  8321  002828  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8322  00282C  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8323  002830  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8324  002834                     l1216:
  8325                           
  8326                           ;ipv4.c: 316: }
  8327                           ;ipv4.c: 317: if (header.timeToLive == 0) {
  8328  002834  0101               	movlb	1	; () banked
  8329  002836  51DE               	movf	(ipv4_handleNewPacket@header+11)& (0+255),w,b
  8330  002838  A4D8               	btfss	status,2,c
  8331  00283A  D006               	goto	l1217
  8332                           
  8333                           ; BSR set to: 1
  8334                           ;ipv4.c: 318: ethernetController_dropPacket(frame);
  8335  00283C  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8336  002840  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8337  002844  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8338  002848                     l1217:
  8339                           
  8340                           ;ipv4.c: 324: }
  8341                           ;ipv4.c: 325: if (header.totalLength == 0) {
  8342  002848  0101               	movlb	1	; () banked
  8343  00284A  51D7               	movf	(ipv4_handleNewPacket@header+4)& (0+255),w,b
  8344  00284C  11D8               	iorwf	(ipv4_handleNewPacket@header+5)& (0+255),w,b
  8345  00284E  A4D8               	btfss	status,2,c
  8346  002850  D01C               	goto	l1219
  8347                           
  8348                           ; BSR set to: 1
  8349                           ;ipv4.c: 326: ethernetController_dropPacket(frame);
  8350  002852  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8351  002856  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8352  00285A  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8353                           
  8354                           ;ipv4.c: 332: }
  8355                           ;ipv4.c: 343: switch (header.protocol) {
  8356  00285E  D015               	goto	l1219
  8357  002860                     
  8358                           ;ipv4.c: 352: icmp_handleNewPacket(header, payloadField);
  8359  002860  EE21  F0D3         	lfsr	2,ipv4_handleNewPacket@header
  8360  002864  EE01  F0AF         	lfsr	0,icmp_handleNewPacket@ipHeader
  8361  002868  0E16               	movlw	22
  8362  00286A                     u12921:
  8363  00286A  CFDB FFEB          	movff	plusw2,plusw0
  8364  00286E  06E8               	decf	wreg,f,c
  8365  002870  E2FC               	bc	u12921
  8366  002872  EE21  F0EA         	lfsr	2,ipv4_handleNewPacket@payloadField
  8367  002876  EE01  F0C6         	lfsr	0,icmp_handleNewPacket@ipPayload
  8368  00287A  0E08               	movlw	8
  8369  00287C                     u12931:
  8370  00287C  CFDB FFEB          	movff	plusw2,plusw0
  8371  002880  06E8               	decf	wreg,f,c
  8372  002882  E2FC               	bc	u12931
  8373  002884  EC56  F019         	call	_icmp_handleNewPacket	;wreg free
  8374                           
  8375                           ;ipv4.c: 380: }
  8376                           
  8377                           ;ipv4.c: 379: break;
  8378                           
  8379                           ;ipv4.c: 372: default:
  8380                           
  8381                           ;ipv4.c: 371: break;
  8382                           
  8383                           ;ipv4.c: 363: case IPv4_PROTOCOL_UDP:
  8384                           
  8385                           ;ipv4.c: 362: break;
  8386                           
  8387                           ;ipv4.c: 354: case IPv4_PROTOCOL_TCP:
  8388                           
  8389                           ;ipv4.c: 353: break;
  8390  002888  D008               	goto	l1221
  8391  00288A                     l1219:
  8392  00288A  0101               	movlb	1	; () banked
  8393  00288C  51DF               	movf	(ipv4_handleNewPacket@header+12)& (0+255),w,b
  8394                           
  8395                           ; Switch size 1, requested type "space"
  8396                           ; Number of cases is 3, Range of values is 1 to 17
  8397                           ; switch strategies available:
  8398                           ; Name         Instructions Cycles
  8399                           ; simple_byte           10     6 (average)
  8400                           ;	Chosen strategy is simple_byte
  8401  00288E  0A01               	xorlw	1	; case 1
  8402  002890  B4D8               	btfsc	status,2,c
  8403  002892  D7E6               	goto	l1220
  8404  002894  0A07               	xorlw	7	; case 6
  8405  002896  A4D8               	btfss	status,2,c
  8406  002898  0A17               	xorlw	23	; case 17
  8407  00289A                     l1221:
  8408                           
  8409                           ;ipv4.c: 381: ethernetController_dropPacket(frame);
  8410                           
  8411                           ; BSR set to: 1
  8412  00289A  C1CF  F072         	movff	ipv4_handleNewPacket@frame,?_ethernetController_dropPacket
  8413  00289E  C1D0  F073         	movff	ipv4_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
  8414  0028A2  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
  8415  0028A6  0012               	return		;funcret
  8416  0028A8                     __end_of_ipv4_handleNewPacket:
  8417                           	opt stack 0
  8418                           tblptru	equ	0xFF8
  8419                           tblptrh	equ	0xFF7
  8420                           tblptrl	equ	0xFF6
  8421                           tablat	equ	0xFF5
  8422                           prodh	equ	0xFF4
  8423                           prodl	equ	0xFF3
  8424                           intcon	equ	0xFF2
  8425                           intcon3	equ	0xFF0
  8426                           indf0	equ	0xFEF
  8427                           postinc0	equ	0xFEE
  8428                           plusw0	equ	0xFEB
  8429                           fsr0h	equ	0xFEA
  8430                           fsr0l	equ	0xFE9
  8431                           wreg	equ	0xFE8
  8432                           postinc1	equ	0xFE6
  8433                           postdec1	equ	0xFE5
  8434                           plusw1	equ	0xFE3
  8435                           fsr1h	equ	0xFE2
  8436                           fsr1l	equ	0xFE1
  8437                           indf2	equ	0xFDF
  8438                           postinc2	equ	0xFDE
  8439                           postdec2	equ	0xFDD
  8440                           plusw2	equ	0xFDB
  8441                           fsr2h	equ	0xFDA
  8442                           fsr2l	equ	0xFD9
  8443                           status	equ	0xFD8
  8444                           
  8445 ;; *************** function _ipv4_parseHeader *****************
  8446 ;; Defined at:
  8447 ;;		line 186 in file "src/stack/protocols/ipv4.c"
  8448 ;; Parameters:    Size  Location     Type
  8449 ;;  field           2   20[BANK0 ] PTR struct memoryField
  8450 ;;		 -> ipv4_handleNewPacket@headerField(9), 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  i               1   45[BANK0 ] unsigned char 
  8453 ;;  i               1   44[BANK0 ] unsigned char 
  8454 ;;  ip             23   47[BANK0 ] struct ipv4_header
  8455 ;;  temp            1   46[BANK0 ] unsigned char 
  8456 ;; Return value:  Size  Location     Type
  8457 ;;                  23   20[BANK0 ] struct ipv4_header
  8458 ;; Registers used:
  8459 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8460 ;; Tracked objects:
  8461 ;;		On entry : 0/0
  8462 ;;		On exit  : 0/0
  8463 ;;		Unchanged: 0/0
  8464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8465 ;;      Params:         0      23       0       0       0       0       0       0       0
  8466 ;;      Locals:         0      26       0       0       0       0       0       0       0
  8467 ;;      Temps:          0       1       0       0       0       0       0       0       0
  8468 ;;      Totals:         0      50       0       0       0       0       0       0       0
  8469 ;;Total ram usage:       50 bytes
  8470 ;; Hardware stack levels used:    1
  8471 ;; Hardware stack levels required when called:    8
  8472 ;; This function calls:
  8473 ;;		_ethernetController_streamFromRXBuffer
  8474 ;; This function is called by:
  8475 ;;		_ipv4_handleNewPacket
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           	psect	text16
  8480  0028A8                     __ptext16:
  8481                           	opt stack 0
  8482  0028A8                     _ipv4_parseHeader:
  8483                           	opt stack 19
  8484                           
  8485                           ;ipv4.c: 187: ipv4_header_t ip;
  8486                           ;ipv4.c: 188: uint8_t temp;
  8487                           ;ipv4.c: 190: ethernetController_streamFromRXBuffer(0, field->start);
  8488                           
  8489                           ;incstack = 0
  8490  0028A8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8491  0028AC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8492  0028B0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8493  0028B4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8494  0028B8  0E00               	movlw	0
  8495  0028BA  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8496                           
  8497                           ;ipv4.c: 192: temp = ethernetController_streamFromRXBuffer(1, field->start);
  8498  0028BE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8499  0028C2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8500  0028C6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8501  0028CA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8502  0028CE  0E01               	movlw	1
  8503  0028D0  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8504  0028D4  0100               	movlb	0	; () banked
  8505  0028D6  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  8506                           
  8507                           ; BSR set to: 0
  8508                           ;ipv4.c: 193: ip.version = (temp & 0xf0) >> 4;
  8509  0028D8  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  8510  0028DA  0B0F               	andlw	15
  8511  0028DC  0B0F               	andlw	15
  8512  0028DE  6F8F               	movwf	ipv4_parseHeader@ip& (0+255),b
  8513                           
  8514                           ; BSR set to: 0
  8515                           ;ipv4.c: 194: ip.headerLength = temp & 0x0f;
  8516  0028E0  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  8517  0028E2  0B0F               	andlw	15
  8518  0028E4  6F90               	movwf	(ipv4_parseHeader@ip+1)& (0+255),b
  8519                           
  8520                           ;ipv4.c: 196: temp = ethernetController_streamFromRXBuffer(1, field->start);
  8521  0028E6  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8522  0028EA  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8523  0028EE  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8524  0028F2  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8525  0028F6  0E01               	movlw	1
  8526  0028F8  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8527  0028FC  0100               	movlb	0	; () banked
  8528  0028FE  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  8529                           
  8530                           ; BSR set to: 0
  8531                           ;ipv4.c: 197: ip.dscp = (temp & 0x1f);
  8532  002900  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  8533  002902  0B1F               	andlw	31
  8534  002904  6F91               	movwf	(ipv4_parseHeader@ip+2)& (0+255),b
  8535                           
  8536                           ; BSR set to: 0
  8537                           ;ipv4.c: 198: ip.ecn = (temp & 0xC0) >> 6;
  8538  002906  458E               	rlncf	ipv4_parseHeader@temp& (0+255),w,b
  8539  002908  46E8               	rlncf	wreg,f,c
  8540  00290A  0B03               	andlw	3
  8541  00290C  0B03               	andlw	3
  8542  00290E  6F92               	movwf	(ipv4_parseHeader@ip+3)& (0+255),b
  8543                           
  8544                           ;ipv4.c: 200: ip.totalLength = (ethernetController_streamFromRXBuffer(1, field->start) <
      +                          < 8);
  8545  002910  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8546  002914  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8547  002918  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8548  00291C  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8549  002920  0E01               	movlw	1
  8550  002922  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8551  002926  0100               	movlb	0	; () banked
  8552  002928  6F94               	movwf	(ipv4_parseHeader@ip+5)& (0+255),b
  8553  00292A  6B93               	clrf	(ipv4_parseHeader@ip+4)& (0+255),b
  8554                           
  8555                           ;ipv4.c: 201: ip.totalLength |= ethernetController_streamFromRXBuffer(1, field->start);
  8556  00292C  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8557  002930  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8558  002934  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8559  002938  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8560  00293C  0E01               	movlw	1
  8561  00293E  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8562  002942  0100               	movlb	0	; () banked
  8563  002944  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8564  002946  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  8565  002948  1393               	iorwf	(ipv4_parseHeader@ip+4)& (0+255),f,b
  8566                           
  8567                           ;ipv4.c: 203: ip.identification = (ethernetController_streamFromRXBuffer(1, field->start
      +                          ) << 8);
  8568  00294A  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8569  00294E  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8570  002952  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8571  002956  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8572  00295A  0E01               	movlw	1
  8573  00295C  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8574  002960  0100               	movlb	0	; () banked
  8575  002962  6F96               	movwf	(ipv4_parseHeader@ip+7)& (0+255),b
  8576  002964  6B95               	clrf	(ipv4_parseHeader@ip+6)& (0+255),b
  8577                           
  8578                           ;ipv4.c: 204: ip.identification |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  8579  002966  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8580  00296A  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8581  00296E  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8582  002972  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8583  002976  0E01               	movlw	1
  8584  002978  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8585  00297C  0100               	movlb	0	; () banked
  8586  00297E  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8587  002980  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  8588  002982  1395               	iorwf	(ipv4_parseHeader@ip+6)& (0+255),f,b
  8589                           
  8590                           ;ipv4.c: 206: temp = ethernetController_streamFromRXBuffer(1, field->start);
  8591  002984  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8592  002988  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8593  00298C  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8594  002990  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8595  002994  0E01               	movlw	1
  8596  002996  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8597  00299A  0100               	movlb	0	; () banked
  8598  00299C  6F8E               	movwf	ipv4_parseHeader@temp& (0+255),b
  8599                           
  8600                           ; BSR set to: 0
  8601                           ;ipv4.c: 207: ip.flags = ((temp & 0xE0) >> 5);
  8602  00299E  398E               	swapf	ipv4_parseHeader@temp& (0+255),w,b
  8603  0029A0  42E8               	rrncf	wreg,f,c
  8604  0029A2  0B07               	andlw	7
  8605  0029A4  0B07               	andlw	7
  8606  0029A6  6F97               	movwf	(ipv4_parseHeader@ip+8)& (0+255),b
  8607                           
  8608                           ; BSR set to: 0
  8609                           ;ipv4.c: 208: ip.fragmentOffset = ((temp & 0x1f) << 8);
  8610  0029A8  518E               	movf	ipv4_parseHeader@temp& (0+255),w,b
  8611  0029AA  0B1F               	andlw	31
  8612  0029AC  6F99               	movwf	(ipv4_parseHeader@ip+10)& (0+255),b
  8613  0029AE  6B98               	clrf	(ipv4_parseHeader@ip+9)& (0+255),b
  8614                           
  8615                           ;ipv4.c: 210: ip.fragmentOffset |= ethernetController_streamFromRXBuffer(1, field->start
      +                          );
  8616  0029B0  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8617  0029B4  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8618  0029B8  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8619  0029BC  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8620  0029C0  0E01               	movlw	1
  8621  0029C2  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8622  0029C6  0100               	movlb	0	; () banked
  8623  0029C8  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8624  0029CA  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  8625  0029CC  1398               	iorwf	(ipv4_parseHeader@ip+9)& (0+255),f,b
  8626                           
  8627                           ;ipv4.c: 212: ip.timeToLive = ethernetController_streamFromRXBuffer(1, field->start);
  8628  0029CE  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8629  0029D2  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8630  0029D6  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8631  0029DA  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8632  0029DE  0E01               	movlw	1
  8633  0029E0  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8634  0029E4  0100               	movlb	0	; () banked
  8635  0029E6  6F9A               	movwf	(ipv4_parseHeader@ip+11)& (0+255),b
  8636                           
  8637                           ;ipv4.c: 214: ip.protocol = ethernetController_streamFromRXBuffer(1, field->start);
  8638  0029E8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8639  0029EC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8640  0029F0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8641  0029F4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8642  0029F8  0E01               	movlw	1
  8643  0029FA  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8644  0029FE  0100               	movlb	0	; () banked
  8645  002A00  6F9B               	movwf	(ipv4_parseHeader@ip+12)& (0+255),b
  8646                           
  8647                           ;ipv4.c: 216: ip.checksum = (ethernetController_streamFromRXBuffer(1, field->start) << 8
      +                          );
  8648  002A02  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8649  002A06  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8650  002A0A  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8651  002A0E  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8652  002A12  0E01               	movlw	1
  8653  002A14  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8654  002A18  0100               	movlb	0	; () banked
  8655  002A1A  6F9D               	movwf	(ipv4_parseHeader@ip+14)& (0+255),b
  8656  002A1C  6B9C               	clrf	(ipv4_parseHeader@ip+13)& (0+255),b
  8657                           
  8658                           ;ipv4.c: 217: ip.checksum |= ethernetController_streamFromRXBuffer(1, field->start);
  8659  002A1E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8660  002A22  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8661  002A26  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8662  002A2A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8663  002A2E  0E01               	movlw	1
  8664  002A30  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8665  002A34  0100               	movlb	0	; () banked
  8666  002A36  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8667  002A38  518B               	movf	??_ipv4_parseHeader& (0+255),w,b
  8668  002A3A  139C               	iorwf	(ipv4_parseHeader@ip+13)& (0+255),f,b
  8669                           
  8670                           ; BSR set to: 0
  8671                           ;ipv4.c: 219: for (uint8_t i = 0; i < 4; i++)
  8672  002A3C  0E00               	movlw	0
  8673  002A3E  6F8C               	movwf	ipv4_parseHeader@i& (0+255),b
  8674  002A40                     l10417:
  8675                           
  8676                           ; BSR set to: 0
  8677  002A40  0E03               	movlw	3
  8678  002A42  658C               	cpfsgt	ipv4_parseHeader@i& (0+255),b
  8679  002A44  D001               	goto	l1196
  8680  002A46  D01D               	goto	u12450
  8681  002A48                     l1196:
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;ipv4.c: 220: ip.source.address[i] = ethernetController_streamFromRXBuffer(1, field->sta
      +                          rt);
  8685                           
  8686                           ; BSR set to: 0
  8687  002A48  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8688  002A4C  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8689  002A50  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8690  002A54  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8691  002A58  0E01               	movlw	1
  8692  002A5A  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8693  002A5E  0100               	movlb	0	; () banked
  8694  002A60  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8695  002A62  518C               	movf	ipv4_parseHeader@i& (0+255),w,b
  8696  002A64  0D01               	mullw	1
  8697  002A66  0E0F               	movlw	15
  8698  002A68  26F3               	addwf	prodl,f,c
  8699  002A6A  0E00               	movlw	0
  8700  002A6C  22F4               	addwfc	prodh,f,c
  8701  002A6E  0E8F               	movlw	low ipv4_parseHeader@ip
  8702  002A70  24F3               	addwf	prodl,w,c
  8703  002A72  6ED9               	movwf	fsr2l,c
  8704  002A74  0E00               	movlw	high ipv4_parseHeader@ip
  8705  002A76  20F4               	addwfc	prodh,w,c
  8706  002A78  6EDA               	movwf	fsr2h,c
  8707  002A7A  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8708                           
  8709                           ; BSR set to: 0
  8710  002A7E  2B8C               	incf	ipv4_parseHeader@i& (0+255),f,b
  8711  002A80  D7DF               	goto	l10417
  8712  002A82                     u12450:
  8713                           
  8714                           ; BSR set to: 0
  8715                           ;ipv4.c: 222: for (uint8_t i = 0; i < 4; i++)
  8716                           
  8717                           ; BSR set to: 0
  8718  002A82  0E00               	movlw	0
  8719  002A84  6F8D               	movwf	ipv4_parseHeader@i_3863& (0+255),b
  8720  002A86                     l10429:
  8721                           
  8722                           ; BSR set to: 0
  8723  002A86  0E03               	movlw	3
  8724  002A88  658D               	cpfsgt	ipv4_parseHeader@i_3863& (0+255),b
  8725  002A8A  D001               	goto	l1198
  8726  002A8C  D01D               	goto	u12470
  8727  002A8E                     l1198:
  8728                           
  8729                           ; BSR set to: 0
  8730                           ;ipv4.c: 223: ip.destination.address[i] = ethernetController_streamFromRXBuffer(1, field
      +                          ->start);
  8731                           
  8732                           ; BSR set to: 0
  8733  002A8E  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8734  002A92  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8735  002A96  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8736  002A9A  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8737  002A9E  0E01               	movlw	1
  8738  002AA0  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8739  002AA4  0100               	movlb	0	; () banked
  8740  002AA6  6F8B               	movwf	??_ipv4_parseHeader& (0+255),b
  8741  002AA8  518D               	movf	ipv4_parseHeader@i_3863& (0+255),w,b
  8742  002AAA  0D01               	mullw	1
  8743  002AAC  0E13               	movlw	19
  8744  002AAE  26F3               	addwf	prodl,f,c
  8745  002AB0  0E00               	movlw	0
  8746  002AB2  22F4               	addwfc	prodh,f,c
  8747  002AB4  0E8F               	movlw	low ipv4_parseHeader@ip
  8748  002AB6  24F3               	addwf	prodl,w,c
  8749  002AB8  6ED9               	movwf	fsr2l,c
  8750  002ABA  0E00               	movlw	high ipv4_parseHeader@ip
  8751  002ABC  20F4               	addwfc	prodh,w,c
  8752  002ABE  6EDA               	movwf	fsr2h,c
  8753  002AC0  C08B  FFDF         	movff	??_ipv4_parseHeader,indf2
  8754                           
  8755                           ; BSR set to: 0
  8756  002AC4  2B8D               	incf	ipv4_parseHeader@i_3863& (0+255),f,b
  8757  002AC6  D7DF               	goto	l10429
  8758  002AC8                     u12470:
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;ipv4.c: 225: ethernetController_streamFromRXBuffer(2, field->start);
  8762                           
  8763                           ; BSR set to: 0
  8764  002AC8  C074  FFD9         	movff	ipv4_parseHeader@field,fsr2l
  8765  002ACC  C075  FFDA         	movff	ipv4_parseHeader@field+1,fsr2h
  8766  002AD0  CFDE F06F          	movff	postinc2,ethernetController_streamFromRXBuffer@startAddress
  8767  002AD4  CFDD F070          	movff	postdec2,ethernetController_streamFromRXBuffer@startAddress+1
  8768  002AD8  0E02               	movlw	2
  8769  002ADA  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  8770                           
  8771                           ;ipv4.c: 227: return ip;
  8772  002ADE  EE20  F08F         	lfsr	2,ipv4_parseHeader@ip
  8773  002AE2  EE00  F074         	lfsr	0,?_ipv4_parseHeader
  8774  002AE6  0E16               	movlw	22
  8775  002AE8                     u12481:
  8776  002AE8  CFDB FFEB          	movff	plusw2,plusw0
  8777  002AEC  06E8               	decf	wreg,f,c
  8778  002AEE  E2FC               	bc	u12481
  8779  002AF0  0012               	return	
  8780  002AF2                     __end_of_ipv4_parseHeader:
  8781                           	opt stack 0
  8782                           tblptru	equ	0xFF8
  8783                           tblptrh	equ	0xFF7
  8784                           tblptrl	equ	0xFF6
  8785                           tablat	equ	0xFF5
  8786                           prodh	equ	0xFF4
  8787                           prodl	equ	0xFF3
  8788                           intcon	equ	0xFF2
  8789                           intcon3	equ	0xFF0
  8790                           indf0	equ	0xFEF
  8791                           postinc0	equ	0xFEE
  8792                           plusw0	equ	0xFEB
  8793                           fsr0h	equ	0xFEA
  8794                           fsr0l	equ	0xFE9
  8795                           wreg	equ	0xFE8
  8796                           postinc1	equ	0xFE6
  8797                           postdec1	equ	0xFE5
  8798                           plusw1	equ	0xFE3
  8799                           fsr1h	equ	0xFE2
  8800                           fsr1l	equ	0xFE1
  8801                           indf2	equ	0xFDF
  8802                           postinc2	equ	0xFDE
  8803                           postdec2	equ	0xFDD
  8804                           plusw2	equ	0xFDB
  8805                           fsr2h	equ	0xFDA
  8806                           fsr2l	equ	0xFD9
  8807                           status	equ	0xFD8
  8808                           
  8809 ;; *************** function _ipv4_checkHeaderChecksum *****************
  8810 ;; Defined at:
  8811 ;;		line 230 in file "src/stack/protocols/ipv4.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;  header          2   15[BANK0 ] PTR struct ipv4_header
  8814 ;;		 -> ipv4_handleNewPacket@header(23), 
  8815 ;; Auto vars:     Size  Location     Type
  8816 ;;  testHeader     23   19[BANK0 ] struct ipv4_header
  8817 ;; Return value:  Size  Location     Type
  8818 ;;		None               void
  8819 ;; Registers used:
  8820 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8821 ;; Tracked objects:
  8822 ;;		On entry : 0/0
  8823 ;;		On exit  : 0/0
  8824 ;;		Unchanged: 0/0
  8825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8826 ;;      Params:         0       2       0       0       0       0       0       0       0
  8827 ;;      Locals:         0      23       0       0       0       0       0       0       0
  8828 ;;      Temps:          0       2       0       0       0       0       0       0       0
  8829 ;;      Totals:         0      27       0       0       0       0       0       0       0
  8830 ;;Total ram usage:       27 bytes
  8831 ;; Hardware stack levels used:    1
  8832 ;; Hardware stack levels required when called:    5
  8833 ;; This function calls:
  8834 ;;		_ipv4_calculateHeaderChecksum
  8835 ;; This function is called by:
  8836 ;;		_ipv4_handleNewPacket
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           	psect	text17
  8841  0059D4                     __ptext17:
  8842                           	opt stack 0
  8843  0059D4                     _ipv4_checkHeaderChecksum:
  8844                           	opt stack 22
  8845                           
  8846                           ;ipv4.c: 231: ipv4_header_t testHeader;
  8847                           ;ipv4.c: 232: testHeader = *header;
  8848                           
  8849                           ;incstack = 0
  8850  0059D4  C06F  FFD9         	movff	ipv4_checkHeaderChecksum@header,fsr2l
  8851  0059D8  C070  FFDA         	movff	ipv4_checkHeaderChecksum@header+1,fsr2h
  8852  0059DC  EE10  F073         	lfsr	1,ipv4_checkHeaderChecksum@testHeader
  8853  0059E0  0E16               	movlw	22
  8854  0059E2                     u12491:
  8855  0059E2  CFDB FFE3          	movff	plusw2,plusw1
  8856  0059E6  06E8               	decf	wreg,f,c
  8857  0059E8  E2FC               	bc	u12491
  8858                           
  8859                           ;ipv4.c: 233: testHeader.checksum = 0x0000;
  8860  0059EA  0E00               	movlw	0
  8861  0059EC  0100               	movlb	0	; () banked
  8862  0059EE  6F81               	movwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),b
  8863  0059F0  0E00               	movlw	0
  8864  0059F2  6F80               	movwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),b
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;ipv4.c: 234: ipv4_calculateHeaderChecksum(&testHeader);
  8868  0059F4  0E73               	movlw	low ipv4_checkHeaderChecksum@testHeader
  8869  0059F6  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  8870  0059F8  0E00               	movlw	high ipv4_checkHeaderChecksum@testHeader
  8871  0059FA  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  8872  0059FC  ECA6  F007         	call	_ipv4_calculateHeaderChecksum	;wreg free
  8873                           
  8874                           ;ipv4.c: 235: if (testHeader.checksum == header->checksum) {
  8875  005A00  0100               	movlb	0	; () banked
  8876  005A02  EE20 F00D          	lfsr	2,13
  8877  005A06  516F               	movf	ipv4_checkHeaderChecksum@header& (0+255),w,b
  8878  005A08  26D9               	addwf	fsr2l,f,c
  8879  005A0A  5170               	movf	(ipv4_checkHeaderChecksum@header+1)& (0+255),w,b
  8880  005A0C  22DA               	addwfc	fsr2h,f,c
  8881  005A0E  50DE               	movf	postinc2,w,c
  8882  005A10  1980               	xorwf	(ipv4_checkHeaderChecksum@testHeader+13)& (0+255),w,b
  8883  005A12  E106               	bnz	l10457
  8884  005A14  50DE               	movf	postinc2,w,c
  8885  005A16  1981               	xorwf	(ipv4_checkHeaderChecksum@testHeader+14)& (0+255),w,b
  8886  005A18  A4D8               	btfss	status,2,c
  8887  005A1A  D002               	goto	l1203
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;ipv4.c: 236: return 1;
  8891  005A1C  80D8               	bsf	status,0,c
  8892                           
  8893                           ; BSR set to: 0
  8894  005A1E  0012               	return	
  8895  005A20                     l1203:
  8896  005A20                     l10457:
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;ipv4.c: 237: }
  8900                           ;ipv4.c: 245: return 0;
  8901  005A20  90D8               	bcf	status,0,c
  8902  005A22  0012               	return	
  8903  005A24                     __end_of_ipv4_checkHeaderChecksum:
  8904                           	opt stack 0
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           intcon3	equ	0xFF0
  8913                           indf0	equ	0xFEF
  8914                           postinc0	equ	0xFEE
  8915                           plusw0	equ	0xFEB
  8916                           fsr0h	equ	0xFEA
  8917                           fsr0l	equ	0xFE9
  8918                           wreg	equ	0xFE8
  8919                           postinc1	equ	0xFE6
  8920                           postdec1	equ	0xFE5
  8921                           plusw1	equ	0xFE3
  8922                           fsr1h	equ	0xFE2
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           plusw2	equ	0xFDB
  8928                           fsr2h	equ	0xFDA
  8929                           fsr2l	equ	0xFD9
  8930                           status	equ	0xFD8
  8931                           
  8932 ;; *************** function _icmp_handleNewPacket *****************
  8933 ;; Defined at:
  8934 ;;		line 30 in file "src/stack/protocols/icmp.c"
  8935 ;; Parameters:    Size  Location     Type
  8936 ;;  ipHeader       23  175[BANK1 ] struct ipv4_header
  8937 ;;  ipPayload       9  198[BANK1 ] struct memoryField
  8938 ;; Auto vars:     Size  Location     Type
  8939 ;;  icmpHeader      8  145[BANK0 ] struct icmpHeader
  8940 ;; Return value:  Size  Location     Type
  8941 ;;                  3  175[BANK1 ] struct error
  8942 ;; Registers used:
  8943 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8944 ;; Tracked objects:
  8945 ;;		On entry : 0/0
  8946 ;;		On exit  : 0/0
  8947 ;;		Unchanged: 0/0
  8948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8949 ;;      Params:         0       0      32       0       0       0       0       0       0
  8950 ;;      Locals:         0       8       0       0       0       0       0       0       0
  8951 ;;      Temps:          0       4       0       0       0       0       0       0       0
  8952 ;;      Totals:         0      12      32       0       0       0       0       0       0
  8953 ;;Total ram usage:       44 bytes
  8954 ;; Hardware stack levels used:    1
  8955 ;; Hardware stack levels required when called:   11
  8956 ;; This function calls:
  8957 ;;		_UARTTransmitText
  8958 ;;		_icmp_calculateChecksum
  8959 ;;		_icmp_parseHeader
  8960 ;;		_icmp_sendEchoReply
  8961 ;;		_intToString
  8962 ;; This function is called by:
  8963 ;;		_ipv4_handleNewPacket
  8964 ;; This function uses a non-reentrant model
  8965 ;;
  8966                           
  8967                           	psect	text18
  8968  0032AC                     __ptext18:
  8969                           	opt stack 0
  8970  0032AC                     _icmp_handleNewPacket:
  8971                           	opt stack 16
  8972                           
  8973                           ;icmp.c: 31: icmpHeader_t icmpHeader;
  8974                           ;icmp.c: 32: icmp_parseHeader(ipPayload, &icmpHeader);
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;incstack = 0
  8978  0032AC  EE21  F0C6         	lfsr	2,icmp_handleNewPacket@ipPayload
  8979  0032B0  EE00  F074         	lfsr	0,icmp_parseHeader@ipPayload
  8980  0032B4  0E08               	movlw	8
  8981  0032B6                     u12511:
  8982  0032B6  CFDB FFEB          	movff	plusw2,plusw0
  8983  0032BA  06E8               	decf	wreg,f,c
  8984  0032BC  E2FC               	bc	u12511
  8985  0032BE  0EF1               	movlw	low icmp_handleNewPacket@icmpHeader
  8986  0032C0  0100               	movlb	0	; () banked
  8987  0032C2  6F7D               	movwf	icmp_parseHeader@icmpHeader& (0+255),b
  8988  0032C4  0E00               	movlw	high icmp_handleNewPacket@icmpHeader
  8989  0032C6  6F7E               	movwf	(icmp_parseHeader@icmpHeader+1)& (0+255),b
  8990  0032C8  EC7E  F018         	call	_icmp_parseHeader	;wreg free
  8991                           
  8992                           ;icmp.c: 34: UARTTransmitText("\033[40;33;10m");
  8993  0032CC  0EE7               	movlw	low STR_150
  8994  0032CE  0100               	movlb	0	; () banked
  8995  0032D0  6F98               	movwf	UARTTransmitText@str& (0+255),b
  8996  0032D2  0E7E               	movlw	high STR_150
  8997  0032D4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  8998  0032D6  EC42  F02C         	call	_UARTTransmitText	;wreg free
  8999                           
  9000                           ;icmp.c: 35: UARTTransmitText("[");
  9001  0032DA  0EBC               	movlw	low (STR_90+3)
  9002  0032DC  0100               	movlb	0	; () banked
  9003  0032DE  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9004  0032E0  0E7F               	movlw	high (STR_90+3)
  9005  0032E2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9006  0032E4  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9007                           
  9008                           ;icmp.c: 36: UARTTransmitText(icmpTxtMessages[icmpHeader.typeOfMessage]);
  9009  0032E8  0100               	movlb	0	; () banked
  9010  0032EA  51F1               	movf	icmp_handleNewPacket@icmpHeader& (0+255),w,b
  9011  0032EC  0D02               	mullw	2
  9012  0032EE  0E9F               	movlw	low _icmpTxtMessages
  9013  0032F0  24F3               	addwf	prodl,w,c
  9014  0032F2  6ED9               	movwf	fsr2l,c
  9015  0032F4  0E04               	movlw	high _icmpTxtMessages
  9016  0032F6  20F4               	addwfc	prodh,w,c
  9017  0032F8  6EDA               	movwf	fsr2h,c
  9018  0032FA  CFDE F098          	movff	postinc2,UARTTransmitText@str
  9019  0032FE  CFDD F099          	movff	postdec2,UARTTransmitText@str+1
  9020  003302  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9021                           
  9022                           ;icmp.c: 37: UARTTransmitText("]");
  9023  003306  0EAC               	movlw	low (STR_12+5)
  9024  003308  0100               	movlb	0	; () banked
  9025  00330A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9026  00330C  0E7F               	movlw	high (STR_12+5)
  9027  00330E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9028  003310  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9029                           
  9030                           ;icmp.c: 38: UARTTransmitText("\033[0m");
  9031  003314  0ED7               	movlw	low STR_7
  9032  003316  0100               	movlb	0	; () banked
  9033  003318  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9034  00331A  0E7F               	movlw	high STR_7
  9035  00331C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9036  00331E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9037                           
  9038                           ;icmp.c: 40: if (icmp_calculateChecksum(ipPayload) != icmpHeader.checksum) {
  9039  003322  EE21  F0C6         	lfsr	2,icmp_handleNewPacket@ipPayload
  9040  003326  EE00  F074         	lfsr	0,icmp_calculateChecksum@ipPayload
  9041  00332A  0E08               	movlw	8
  9042  00332C                     u12521:
  9043  00332C  CFDB FFEB          	movff	plusw2,plusw0
  9044  003330  06E8               	decf	wreg,f,c
  9045  003332  E2FC               	bc	u12521
  9046  003334  ECE7  F01D         	call	_icmp_calculateChecksum	;wreg free
  9047  003338  0100               	movlb	0	; () banked
  9048  00333A  51F3               	movf	(icmp_handleNewPacket@icmpHeader+2)& (0+255),w,b
  9049  00333C  1974               	xorwf	?_icmp_calculateChecksum& (0+255),w,b
  9050  00333E  E104               	bnz	u12530
  9051  003340  51F4               	movf	(icmp_handleNewPacket@icmpHeader+3)& (0+255),w,b
  9052  003342  1975               	xorwf	(?_icmp_calculateChecksum+1)& (0+255),w,b
  9053  003344  B4D8               	btfsc	status,2,c
  9054  003346  D014               	goto	l1316
  9055  003348                     u12530:
  9056                           
  9057                           ; BSR set to: 0
  9058                           ;icmp.c: 41: UARTTransmitText("\033[41;10;10m");
  9059  003348  0E17               	movlw	low STR_23
  9060  00334A  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9061  00334C  0E7F               	movlw	high STR_23
  9062  00334E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9063  003350  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9064                           
  9065                           ;icmp.c: 42: UARTTransmitText("[BAD CHECKSUM]");
  9066  003354  0E76               	movlw	low STR_155
  9067  003356  0100               	movlb	0	; () banked
  9068  003358  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9069  00335A  0E7E               	movlw	high STR_155
  9070  00335C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9071  00335E  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9072                           
  9073                           ;icmp.c: 43: UARTTransmitText("\033[0m");
  9074  003362  0ED7               	movlw	low STR_7
  9075  003364  0100               	movlb	0	; () banked
  9076  003366  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9077  003368  0E7F               	movlw	high STR_7
  9078  00336A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9079  00336C  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9080  003370                     l1316:
  9081                           
  9082                           ;icmp.c: 44: }
  9083                           ;icmp.c: 46: if (icmpHeader.typeOfMessage == ICMP_ECHO_REQUEST) {
  9084  003370  0E08               	movlw	8
  9085  003372  0100               	movlb	0	; () banked
  9086  003374  19F1               	xorwf	icmp_handleNewPacket@icmpHeader& (0+255),w,b
  9087  003376  A4D8               	btfss	status,2,c
  9088  003378  0012               	return	
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;icmp.c: 47: UARTTransmitText("[id=");
  9092  00337A  0EB4               	movlw	low STR_157
  9093  00337C  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9094  00337E  0E7F               	movlw	high STR_157
  9095  003380  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9096  003382  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9097                           
  9098                           ;icmp.c: 48: UARTTransmitText(intToString((icmpHeader.headerData & 0xffff0000) >> 16));
  9099  003386  EE20  F0F5         	lfsr	2,icmp_handleNewPacket@icmpHeader+4
  9100  00338A  0E00               	movlw	0
  9101  00338C  14DE               	andwf	postinc2,w,c
  9102  00338E  0100               	movlb	0	; () banked
  9103  003390  6FED               	movwf	??_icmp_handleNewPacket& (0+255),b
  9104  003392  0E00               	movlw	0
  9105  003394  14DE               	andwf	postinc2,w,c
  9106  003396  6FEE               	movwf	(??_icmp_handleNewPacket+1)& (0+255),b
  9107  003398  0EFF               	movlw	255
  9108  00339A  14DE               	andwf	postinc2,w,c
  9109  00339C  6FEF               	movwf	(??_icmp_handleNewPacket+2)& (0+255),b
  9110  00339E  0EFF               	movlw	255
  9111  0033A0  14DE               	andwf	postinc2,w,c
  9112  0033A2  6FF0               	movwf	(??_icmp_handleNewPacket+3)& (0+255),b
  9113  0033A4  C0EF  F084         	movff	??_icmp_handleNewPacket+2,intToString@val
  9114  0033A8  C0F0  F085         	movff	??_icmp_handleNewPacket+3,intToString@val+1
  9115  0033AC  6B86               	clrf	(intToString@val+2)& (0+255),b
  9116  0033AE  6B87               	clrf	(intToString@val+3)& (0+255),b
  9117  0033B0  EC11  F02F         	call	_intToString	;wreg free
  9118  0033B4  C084  F098         	movff	?_intToString,UARTTransmitText@str
  9119  0033B8  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  9120  0033BC  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9121                           
  9122                           ;icmp.c: 49: UARTTransmitText("][seq=");
  9123  0033C0  0EA0               	movlw	low STR_158
  9124  0033C2  0100               	movlb	0	; () banked
  9125  0033C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9126  0033C6  0E7F               	movlw	high STR_158
  9127  0033C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9128  0033CA  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9129                           
  9130                           ;icmp.c: 50: UARTTransmitText(intToString(icmpHeader.headerData & 0x0000ffff));
  9131  0033CE  EE20  F0F5         	lfsr	2,icmp_handleNewPacket@icmpHeader+4
  9132  0033D2  0EFF               	movlw	255
  9133  0033D4  14DE               	andwf	postinc2,w,c
  9134  0033D6  0100               	movlb	0	; () banked
  9135  0033D8  6F84               	movwf	intToString@val& (0+255),b
  9136  0033DA  0EFF               	movlw	255
  9137  0033DC  14DE               	andwf	postinc2,w,c
  9138  0033DE  6F85               	movwf	(intToString@val+1)& (0+255),b
  9139  0033E0  0E00               	movlw	0
  9140  0033E2  14DE               	andwf	postinc2,w,c
  9141  0033E4  6F86               	movwf	(intToString@val+2)& (0+255),b
  9142  0033E6  0E00               	movlw	0
  9143  0033E8  14DE               	andwf	postinc2,w,c
  9144  0033EA  6F87               	movwf	(intToString@val+3)& (0+255),b
  9145  0033EC  EC11  F02F         	call	_intToString	;wreg free
  9146  0033F0  C084  F098         	movff	?_intToString,UARTTransmitText@str
  9147  0033F4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
  9148  0033F8  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9149                           
  9150                           ;icmp.c: 51: UARTTransmitText("]");
  9151  0033FC  0EAC               	movlw	low (STR_12+5)
  9152  0033FE  0100               	movlb	0	; () banked
  9153  003400  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9154  003402  0E7F               	movlw	high (STR_12+5)
  9155  003404  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9156  003406  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9157                           
  9158                           ;icmp.c: 53: icmp_sendEchoReply(ipHeader, icmpHeader, ipPayload);
  9159  00340A  EE21  F0AF         	lfsr	2,icmp_handleNewPacket@ipHeader
  9160  00340E  EE00  F0C1         	lfsr	0,icmp_sendEchoReply@ipHeader
  9161  003412  0E16               	movlw	22
  9162  003414                     u12551:
  9163  003414  CFDB FFEB          	movff	plusw2,plusw0
  9164  003418  06E8               	decf	wreg,f,c
  9165  00341A  E2FC               	bc	u12551
  9166  00341C  EE20  F0F1         	lfsr	2,icmp_handleNewPacket@icmpHeader
  9167  003420  EE00  F0D8         	lfsr	0,icmp_sendEchoReply@icmpRequestHeader
  9168  003424  0E07               	movlw	7
  9169  003426                     u12561:
  9170  003426  CFDB FFEB          	movff	plusw2,plusw0
  9171  00342A  06E8               	decf	wreg,f,c
  9172  00342C  E2FC               	bc	u12561
  9173  00342E  EE21  F0C6         	lfsr	2,icmp_handleNewPacket@ipPayload
  9174  003432  EE00  F0E0         	lfsr	0,icmp_sendEchoReply@ipPayload
  9175  003436  0E08               	movlw	8
  9176  003438                     u12571:
  9177  003438  CFDB FFEB          	movff	plusw2,plusw0
  9178  00343C  06E8               	decf	wreg,f,c
  9179  00343E  E2FC               	bc	u12571
  9180  003440  ECB2  F010         	call	_icmp_sendEchoReply	;wreg free
  9181  003444  0012               	return	
  9182  003446                     __end_of_icmp_handleNewPacket:
  9183                           	opt stack 0
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodh	equ	0xFF4
  9189                           prodl	equ	0xFF3
  9190                           intcon	equ	0xFF2
  9191                           intcon3	equ	0xFF0
  9192                           indf0	equ	0xFEF
  9193                           postinc0	equ	0xFEE
  9194                           plusw0	equ	0xFEB
  9195                           fsr0h	equ	0xFEA
  9196                           fsr0l	equ	0xFE9
  9197                           wreg	equ	0xFE8
  9198                           postinc1	equ	0xFE6
  9199                           postdec1	equ	0xFE5
  9200                           plusw1	equ	0xFE3
  9201                           fsr1h	equ	0xFE2
  9202                           fsr1l	equ	0xFE1
  9203                           indf2	equ	0xFDF
  9204                           postinc2	equ	0xFDE
  9205                           postdec2	equ	0xFDD
  9206                           plusw2	equ	0xFDB
  9207                           fsr2h	equ	0xFDA
  9208                           fsr2l	equ	0xFD9
  9209                           status	equ	0xFD8
  9210                           
  9211 ;; *************** function _icmp_sendEchoReply *****************
  9212 ;; Defined at:
  9213 ;;		line 125 in file "src/stack/protocols/icmp.c"
  9214 ;; Parameters:    Size  Location     Type
  9215 ;;  ipHeader       23   97[BANK0 ] struct ipv4_header
  9216 ;;  icmpRequestH    8  120[BANK0 ] struct icmpHeader
  9217 ;;  ipPayload       9  128[BANK0 ] struct memoryField
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  i               2   99[BANK1 ] unsigned int 
  9220 ;;  i               1   98[BANK1 ] unsigned char 
  9221 ;;  ipReply        66  109[BANK1 ] struct ipv4_packet
  9222 ;;  icmpMessage    64    0[BANK1 ] unsigned char [64]
  9223 ;;  headerBuf      32   64[BANK1 ] unsigned char [32]
  9224 ;;  icmpHeader      8  101[BANK1 ] struct icmpHeader
  9225 ;;  checksum        2   96[BANK1 ] unsigned int 
  9226 ;; Return value:  Size  Location     Type
  9227 ;;                  1    wreg      void 
  9228 ;; Registers used:
  9229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9230 ;; Tracked objects:
  9231 ;;		On entry : 0/0
  9232 ;;		On exit  : 0/0
  9233 ;;		Unchanged: 0/0
  9234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9235 ;;      Params:         0      40       0       0       0       0       0       0       0
  9236 ;;      Locals:         0       0     175       0       0       0       0       0       0
  9237 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9238 ;;      Totals:         0      44     175       0       0       0       0       0       0
  9239 ;;Total ram usage:      219 bytes
  9240 ;; Hardware stack levels used:    1
  9241 ;; Hardware stack levels required when called:   10
  9242 ;; This function calls:
  9243 ;;		_UARTTransmitText
  9244 ;;		_ethernetController_streamFromRXBuffer
  9245 ;;		_icmp_calculateChecksumBuf
  9246 ;;		_icmp_writeHeaderIntoBuffer
  9247 ;;		_ipAdressToString
  9248 ;;		_ipv4_calculateHeaderChecksum
  9249 ;;		_ipv4_getIPSourceAddress
  9250 ;;		_ipv4_streamToTransmissionBuffer
  9251 ;;		_ipv4_txFrameRequest
  9252 ;;		_ipv4_writeHeaderIntoBuffer
  9253 ;; This function is called by:
  9254 ;;		_icmp_handleNewPacket
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text19
  9259  002164                     __ptext19:
  9260                           	opt stack 0
  9261  002164                     _icmp_sendEchoReply:
  9262                           	opt stack 16
  9263                           
  9264                           ;icmp.c: 126: ipv4_packet_t ipReply;
  9265                           ;icmp.c: 127: icmpHeader_t icmpHeader;
  9266                           ;icmp.c: 129: uint8_t headerBuf[32];
  9267                           ;icmp.c: 130: ipReply.ipv4Header.headerLength = 5;
  9268                           
  9269                           ;incstack = 0
  9270  002164  0E05               	movlw	5
  9271  002166  0101               	movlb	1	; () banked
  9272  002168  6F6E               	movwf	(icmp_sendEchoReply@ipReply+1)& (0+255),b
  9273                           
  9274                           ;icmp.c: 131: ipReply.ipv4Header.dscp = 0x00;
  9275  00216A  0E00               	movlw	0
  9276  00216C  6F6F               	movwf	(icmp_sendEchoReply@ipReply+2)& (0+255),b
  9277                           
  9278                           ;icmp.c: 132: ipReply.ipv4Header.ecn = 0x00;
  9279  00216E  0E00               	movlw	0
  9280  002170  6F70               	movwf	(icmp_sendEchoReply@ipReply+3)& (0+255),b
  9281                           
  9282                           ;icmp.c: 133: ipReply.ipv4Header.flags = 0x00;
  9283  002172  0E00               	movlw	0
  9284  002174  6F75               	movwf	(icmp_sendEchoReply@ipReply+8)& (0+255),b
  9285                           
  9286                           ;icmp.c: 134: ipReply.ipv4Header.fragmentOffset = 0x0000;
  9287  002176  0E00               	movlw	0
  9288  002178  6F77               	movwf	(icmp_sendEchoReply@ipReply+10)& (0+255),b
  9289  00217A  0E00               	movlw	0
  9290  00217C  6F76               	movwf	(icmp_sendEchoReply@ipReply+9)& (0+255),b
  9291                           
  9292                           ;icmp.c: 135: ipReply.ipv4Header.protocol = IPv4_PROTOCOL_ICMP;
  9293  00217E  0E01               	movlw	1
  9294  002180  6F79               	movwf	(icmp_sendEchoReply@ipReply+12)& (0+255),b
  9295                           
  9296                           ; BSR set to: 1
  9297                           ;icmp.c: 136: ipReply.ipv4Header.destination = ipHeader.source;
  9298  002182  C0D0  F180         	movff	icmp_sendEchoReply@ipHeader+15,icmp_sendEchoReply@ipReply+19
  9299  002186  C0D1  F181         	movff	icmp_sendEchoReply@ipHeader+16,icmp_sendEchoReply@ipReply+20
  9300  00218A  C0D2  F182         	movff	icmp_sendEchoReply@ipHeader+17,icmp_sendEchoReply@ipReply+21
  9301  00218E  C0D3  F183         	movff	icmp_sendEchoReply@ipHeader+18,icmp_sendEchoReply@ipReply+22
  9302                           
  9303                           ; BSR set to: 1
  9304                           ;icmp.c: 137: ipReply.ipv4Header.source = ipv4_getIPSourceAddress();
  9305  002192  ECE6  F030         	call	_ipv4_getIPSourceAddress	;wreg free
  9306  002196  C060  F17C         	movff	?_ipv4_getIPSourceAddress,icmp_sendEchoReply@ipReply+15
  9307  00219A  C061  F17D         	movff	?_ipv4_getIPSourceAddress+1,icmp_sendEchoReply@ipReply+16
  9308  00219E  C062  F17E         	movff	?_ipv4_getIPSourceAddress+2,icmp_sendEchoReply@ipReply+17
  9309  0021A2  C063  F17F         	movff	?_ipv4_getIPSourceAddress+3,icmp_sendEchoReply@ipReply+18
  9310                           
  9311                           ;icmp.c: 138: ipReply.ipv4Header.totalLength = ipHeader.totalLength;
  9312  0021A6  C0C5  F171         	movff	icmp_sendEchoReply@ipHeader+4,icmp_sendEchoReply@ipReply+4
  9313  0021AA  C0C6  F172         	movff	icmp_sendEchoReply@ipHeader+5,icmp_sendEchoReply@ipReply+5
  9314                           
  9315                           ;icmp.c: 139: ipReply.ipv4Header.timeToLive = 255;
  9316  0021AE  0101               	movlb	1	; () banked
  9317  0021B0  6978               	setf	(icmp_sendEchoReply@ipReply+11)& (0+255),b
  9318                           
  9319                           ; BSR set to: 1
  9320                           ;icmp.c: 140: ipReply.ipv4Header.version = 4;
  9321  0021B2  0E04               	movlw	4
  9322  0021B4  6F6D               	movwf	icmp_sendEchoReply@ipReply& (0+255),b
  9323                           
  9324                           ; BSR set to: 1
  9325                           ;icmp.c: 142: ipv4_calculateHeaderChecksum(&ipReply.ipv4Header);
  9326  0021B6  0E6D               	movlw	low icmp_sendEchoReply@ipReply
  9327  0021B8  0100               	movlb	0	; () banked
  9328  0021BA  6F60               	movwf	ipv4_calculateHeaderChecksum@header& (0+255),b
  9329  0021BC  0E01               	movlw	high icmp_sendEchoReply@ipReply
  9330  0021BE  6F61               	movwf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),b
  9331  0021C0  ECA6  F007         	call	_ipv4_calculateHeaderChecksum	;wreg free
  9332                           
  9333                           ;icmp.c: 143: ipv4_writeHeaderIntoBuffer(ipReply.ipv4Header, &headerBuf);
  9334  0021C4  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
  9335  0021C8  EE00  F060         	lfsr	0,ipv4_writeHeaderIntoBuffer@header
  9336  0021CC  0E16               	movlw	22
  9337  0021CE                     u11541:
  9338  0021CE  CFDB FFEB          	movff	plusw2,plusw0
  9339  0021D2  06E8               	decf	wreg,f,c
  9340  0021D4  E2FC               	bc	u11541
  9341  0021D6  0E40               	movlw	low icmp_sendEchoReply@headerBuf
  9342  0021D8  0100               	movlb	0	; () banked
  9343  0021DA  6F77               	movwf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),b
  9344  0021DC  0E01               	movlw	high icmp_sendEchoReply@headerBuf
  9345  0021DE  6F78               	movwf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),b
  9346  0021E0  EC30  F01D         	call	_ipv4_writeHeaderIntoBuffer	;wreg free
  9347                           
  9348                           ;icmp.c: 145: icmpHeader.typeOfMessage = ICMP_ECHO_REPLY;
  9349  0021E4  0E00               	movlw	0
  9350  0021E6  0101               	movlb	1	; () banked
  9351  0021E8  6F65               	movwf	icmp_sendEchoReply@icmpHeader& (0+255),b
  9352                           
  9353                           ; BSR set to: 1
  9354                           ;icmp.c: 146: icmpHeader.code = 0x00;
  9355  0021EA  0E00               	movlw	0
  9356  0021EC  6F66               	movwf	(icmp_sendEchoReply@icmpHeader+1)& (0+255),b
  9357                           
  9358                           ; BSR set to: 1
  9359                           ;icmp.c: 147: icmpHeader.headerData = icmpRequestHeader.headerData;
  9360  0021EE  C0DC  F169         	movff	icmp_sendEchoReply@icmpRequestHeader+4,icmp_sendEchoReply@icmpHeader+4
  9361  0021F2  C0DD  F16A         	movff	icmp_sendEchoReply@icmpRequestHeader+5,icmp_sendEchoReply@icmpHeader+5
  9362  0021F6  C0DE  F16B         	movff	icmp_sendEchoReply@icmpRequestHeader+6,icmp_sendEchoReply@icmpHeader+6
  9363  0021FA  C0DF  F16C         	movff	icmp_sendEchoReply@icmpRequestHeader+7,icmp_sendEchoReply@icmpHeader+7
  9364                           
  9365                           ; BSR set to: 1
  9366                           ;icmp.c: 148: icmpHeader.checksum = icmpRequestHeader.checksum;
  9367  0021FE  C0DA  F167         	movff	icmp_sendEchoReply@icmpRequestHeader+2,icmp_sendEchoReply@icmpHeader+2
  9368  002202  C0DB  F168         	movff	icmp_sendEchoReply@icmpRequestHeader+3,icmp_sendEchoReply@icmpHeader+3
  9369                           
  9370                           ; BSR set to: 1
  9371                           ;icmp.c: 150: uint8_t icmpMessage[64];
  9372                           ;icmp.c: 151: icmp_writeHeaderIntoBuffer(&icmpMessage[0], icmpHeader);
  9373  002206  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
  9374  002208  0100               	movlb	0	; () banked
  9375  00220A  6F60               	movwf	icmp_writeHeaderIntoBuffer@buf& (0+255),b
  9376  00220C  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
  9377  00220E  6F61               	movwf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),b
  9378  002210  EE21  F065         	lfsr	2,icmp_sendEchoReply@icmpHeader
  9379  002214  EE00  F062         	lfsr	0,icmp_writeHeaderIntoBuffer@header
  9380  002218  0E07               	movlw	7
  9381  00221A                     u11551:
  9382  00221A  CFDB FFEB          	movff	plusw2,plusw0
  9383  00221E  06E8               	decf	wreg,f,c
  9384  002220  E2FC               	bc	u11551
  9385  002222  ECDD  F025         	call	_icmp_writeHeaderIntoBuffer	;wreg free
  9386                           
  9387                           ;icmp.c: 153: ethernetController_streamFromRXBuffer(0, ipPayload.start + 8);
  9388  002226  0E08               	movlw	8
  9389  002228  0100               	movlb	0	; () banked
  9390  00222A  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
  9391  00222C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
  9392  00222E  0E00               	movlw	0
  9393  002230  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
  9394  002232  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
  9395  002234  0E00               	movlw	0
  9396  002236  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  9397                           
  9398                           ;icmp.c: 154: for (uint8_t i = 8; i < ipPayload.length + 4; i++) {
  9399  00223A  0E08               	movlw	8
  9400  00223C  0101               	movlb	1	; () banked
  9401  00223E  6F62               	movwf	icmp_sendEchoReply@i& (0+255),b
  9402  002240  D018               	goto	l1340
  9403  002242                     
  9404                           ;icmp.c: 155: icmpMessage[i] = ethernetController_streamFromRXBuffer(1, ipPayload.start 
      +                          + 8);
  9405                           
  9406                           ; BSR set to: 1
  9407  002242  0E08               	movlw	8
  9408  002244  0100               	movlb	0	; () banked
  9409  002246  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
  9410  002248  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
  9411  00224A  0E00               	movlw	0
  9412  00224C  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
  9413  00224E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
  9414  002250  0E01               	movlw	1
  9415  002252  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  9416  002256  0100               	movlb	0	; () banked
  9417  002258  6FE9               	movwf	??_icmp_sendEchoReply& (0+255),b
  9418  00225A  0101               	movlb	1	; () banked
  9419  00225C  5162               	movf	icmp_sendEchoReply@i& (0+255),w,b
  9420  00225E  0D01               	mullw	1
  9421  002260  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
  9422  002262  24F3               	addwf	prodl,w,c
  9423  002264  6ED9               	movwf	fsr2l,c
  9424  002266  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
  9425  002268  20F4               	addwfc	prodh,w,c
  9426  00226A  6EDA               	movwf	fsr2h,c
  9427  00226C  C0E9  FFDF         	movff	??_icmp_sendEchoReply,indf2
  9428                           
  9429                           ; BSR set to: 1
  9430  002270  2B62               	incf	icmp_sendEchoReply@i& (0+255),f,b
  9431  002272                     l1340:
  9432                           
  9433                           ; BSR set to: 1
  9434                           
  9435                           ; BSR set to: 1
  9436  002272  0E04               	movlw	4
  9437  002274  0100               	movlb	0	; () banked
  9438  002276  25E4               	addwf	(icmp_sendEchoReply@ipPayload+4)& (0+255),w,b
  9439  002278  6FE9               	movwf	??_icmp_sendEchoReply& (0+255),b
  9440  00227A  0E00               	movlw	0
  9441  00227C  21E5               	addwfc	(icmp_sendEchoReply@ipPayload+5)& (0+255),w,b
  9442  00227E  6FEA               	movwf	(??_icmp_sendEchoReply+1)& (0+255),b
  9443  002280  0101               	movlb	1	; () banked
  9444  002282  5162               	movf	icmp_sendEchoReply@i& (0+255),w,b
  9445  002284  0100               	movlb	0	; () banked
  9446  002286  6FEB               	movwf	(??_icmp_sendEchoReply+2)& (0+255),b
  9447  002288  6BEC               	clrf	(??_icmp_sendEchoReply+3)& (0+255),b
  9448  00228A  51E9               	movf	??_icmp_sendEchoReply& (0+255),w,b
  9449  00228C  5DEB               	subwf	(??_icmp_sendEchoReply+2)& (0+255),w,b
  9450  00228E  51EA               	movf	(??_icmp_sendEchoReply+1)& (0+255),w,b
  9451  002290  59EC               	subwfb	(??_icmp_sendEchoReply+3)& (0+255),w,b
  9452  002292  A0D8               	btfss	status,0,c
  9453  002294  D7D6               	goto	l1341
  9454                           
  9455                           ; BSR set to: 0
  9456                           ;icmp.c: 156: }
  9457                           ;icmp.c: 157: ethernetController_streamFromRXBuffer(2, ipPayload.start + 8);
  9458                           
  9459                           ; BSR set to: 0
  9460  002296  0E08               	movlw	8
  9461  002298  25E0               	addwf	icmp_sendEchoReply@ipPayload& (0+255),w,b
  9462  00229A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
  9463  00229C  0E00               	movlw	0
  9464  00229E  21E1               	addwfc	(icmp_sendEchoReply@ipPayload+1)& (0+255),w,b
  9465  0022A0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
  9466  0022A2  0E02               	movlw	2
  9467  0022A4  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
  9468                           
  9469                           ;icmp.c: 159: uint16_t checksum = icmp_calculateChecksumBuf(&icmpMessage[0], ipPayload.l
      +                          ength);
  9470  0022A8  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
  9471  0022AA  0100               	movlb	0	; () banked
  9472  0022AC  6F60               	movwf	icmp_calculateChecksumBuf@buf& (0+255),b
  9473  0022AE  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
  9474  0022B0  6F61               	movwf	(icmp_calculateChecksumBuf@buf+1)& (0+255),b
  9475  0022B2  C0E4  F062         	movff	icmp_sendEchoReply@ipPayload+4,icmp_calculateChecksumBuf@ipPayloadLength
  9476  0022B6  C0E5  F063         	movff	icmp_sendEchoReply@ipPayload+5,icmp_calculateChecksumBuf@ipPayloadLength+1
  9477  0022BA  EC7F  F020         	call	_icmp_calculateChecksumBuf	;wreg free
  9478  0022BE  C060  F160         	movff	?_icmp_calculateChecksumBuf,icmp_sendEchoReply@checksum
  9479  0022C2  C061  F161         	movff	?_icmp_calculateChecksumBuf+1,icmp_sendEchoReply@checksum+1
  9480                           
  9481                           ;icmp.c: 160: icmpMessage [2] = (checksum & 0xff00) >> 8;
  9482  0022C6  0101               	movlb	1	; () banked
  9483  0022C8  5161               	movf	(icmp_sendEchoReply@checksum+1)& (0+255),w,b
  9484  0022CA  6F02               	movwf	(icmp_sendEchoReply@icmpMessage+2)& (0+255),b
  9485                           
  9486                           ; BSR set to: 1
  9487                           ;icmp.c: 161: icmpMessage [3] = checksum & 0x00ff;
  9488  0022CC  C160  F103         	movff	icmp_sendEchoReply@checksum,icmp_sendEchoReply@icmpMessage+3
  9489                           
  9490                           ; BSR set to: 1
  9491                           ;icmp.c: 163: ipv4_txFrameRequest(&ipReply);
  9492  0022D0  0E6D               	movlw	low icmp_sendEchoReply@ipReply
  9493  0022D2  0100               	movlb	0	; () banked
  9494  0022D4  6FA7               	movwf	ipv4_txFrameRequest@packet& (0+255),b
  9495  0022D6  0E01               	movlw	high icmp_sendEchoReply@ipReply
  9496  0022D8  6FA8               	movwf	(ipv4_txFrameRequest@packet+1)& (0+255),b
  9497  0022DA  ECE4  F01F         	call	_ipv4_txFrameRequest	;wreg free
  9498                           
  9499                           ;icmp.c: 165: for (uint16_t i = 0; i < ipReply.ipv4Header.totalLength; i++) {
  9500  0022DE  0E00               	movlw	0
  9501  0022E0  0101               	movlb	1	; () banked
  9502  0022E2  6F64               	movwf	(icmp_sendEchoReply@i_4342+1)& (0+255),b
  9503  0022E4  0E00               	movlw	0
  9504  0022E6  6F63               	movwf	icmp_sendEchoReply@i_4342& (0+255),b
  9505  0022E8  D03B               	goto	l1343
  9506  0022EA                     
  9507                           ; BSR set to: 1
  9508                           ;icmp.c: 166: if (i < ipReply.ipv4Header.headerLength * 4) {
  9509                           
  9510                           ; BSR set to: 1
  9511  0022EA  516E               	movf	(icmp_sendEchoReply@ipReply+1)& (0+255),w,b
  9512  0022EC  0D04               	mullw	4
  9513  0022EE  50F3               	movf	prodl,w,c
  9514  0022F0  5D63               	subwf	icmp_sendEchoReply@i_4342& (0+255),w,b
  9515  0022F2  50F4               	movf	prodh,w,c
  9516  0022F4  5964               	subwfb	(icmp_sendEchoReply@i_4342+1)& (0+255),w,b
  9517  0022F6  B0D8               	btfsc	status,0,c
  9518  0022F8  D013               	goto	l1345
  9519                           
  9520                           ; BSR set to: 1
  9521                           ;icmp.c: 167: ipv4_streamToTransmissionBuffer(headerBuf[i], ipReply);
  9522  0022FA  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
  9523  0022FE  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  9524  002302  0E41               	movlw	65
  9525  002304                     u11581:
  9526  002304  CFDB FFEB          	movff	plusw2,plusw0
  9527  002308  06E8               	decf	wreg,f,c
  9528  00230A  E2FC               	bc	u11581
  9529  00230C  0E40               	movlw	low icmp_sendEchoReply@headerBuf
  9530  00230E  2563               	addwf	icmp_sendEchoReply@i_4342& (0+255),w,b
  9531  002310  6ED9               	movwf	fsr2l,c
  9532  002312  0E01               	movlw	high icmp_sendEchoReply@headerBuf
  9533  002314  2164               	addwfc	(icmp_sendEchoReply@i_4342+1)& (0+255),w,b
  9534  002316  6EDA               	movwf	fsr2h,c
  9535  002318  50DF               	movf	indf2,w,c
  9536  00231A  EC7F  F030         	call	_ipv4_streamToTransmissionBuffer
  9537                           
  9538                           ;icmp.c: 168: } else {
  9539  00231E  D01D               	goto	l1346
  9540  002320                     l1345:
  9541                           
  9542                           ;icmp.c: 169: ipv4_streamToTransmissionBuffer(icmpMessage[i - (ipReply.ipv4Header.header
      +                          Length * 4)], ipReply);
  9543  002320  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
  9544  002324  EE00  F07E         	lfsr	0,ipv4_streamToTransmissionBuffer@packet
  9545  002328  0E41               	movlw	65
  9546  00232A                     u11591:
  9547  00232A  CFDB FFEB          	movff	plusw2,plusw0
  9548  00232E  06E8               	decf	wreg,f,c
  9549  002330  E2FC               	bc	u11591
  9550  002332  0101               	movlb	1	; () banked
  9551  002334  516E               	movf	(icmp_sendEchoReply@ipReply+1)& (0+255),w,b
  9552  002336  0D04               	mullw	4
  9553  002338  1EF3               	comf	prodl,f,c
  9554  00233A  1EF4               	comf	prodh,f,c
  9555  00233C  4AF3               	infsnz	prodl,f,c
  9556  00233E  2AF4               	incf	prodh,f,c
  9557  002340  5163               	movf	icmp_sendEchoReply@i_4342& (0+255),w,b
  9558  002342  26F3               	addwf	prodl,f,c
  9559  002344  5164               	movf	(icmp_sendEchoReply@i_4342+1)& (0+255),w,b
  9560  002346  22F4               	addwfc	prodh,f,c
  9561  002348  0E00               	movlw	low icmp_sendEchoReply@icmpMessage
  9562  00234A  24F3               	addwf	prodl,w,c
  9563  00234C  6ED9               	movwf	fsr2l,c
  9564  00234E  0E01               	movlw	high icmp_sendEchoReply@icmpMessage
  9565  002350  20F4               	addwfc	prodh,w,c
  9566  002352  6EDA               	movwf	fsr2h,c
  9567  002354  50DF               	movf	indf2,w,c
  9568  002356  EC7F  F030         	call	_ipv4_streamToTransmissionBuffer
  9569  00235A                     l1346:
  9570  00235A  0101               	movlb	1	; () banked
  9571  00235C  4B63               	infsnz	icmp_sendEchoReply@i_4342& (0+255),f,b
  9572  00235E  2B64               	incf	(icmp_sendEchoReply@i_4342+1)& (0+255),f,b
  9573  002360                     l1343:
  9574                           
  9575                           ; BSR set to: 1
  9576                           
  9577                           ; BSR set to: 1
  9578  002360  5171               	movf	(icmp_sendEchoReply@ipReply+4)& (0+255),w,b
  9579  002362  5D63               	subwf	icmp_sendEchoReply@i_4342& (0+255),w,b
  9580  002364  5172               	movf	(icmp_sendEchoReply@ipReply+5)& (0+255),w,b
  9581  002366  5964               	subwfb	(icmp_sendEchoReply@i_4342+1)& (0+255),w,b
  9582  002368  A0D8               	btfss	status,0,c
  9583  00236A  D7BF               	goto	l1344
  9584                           
  9585                           ; BSR set to: 1
  9586                           ;icmp.c: 170: }
  9587                           ;icmp.c: 171: }
  9588                           ;icmp.c: 173: UARTTransmitText("\033[40;33;10m");
  9589                           
  9590                           ; BSR set to: 1
  9591  00236C  0EE7               	movlw	low STR_150
  9592  00236E  0100               	movlb	0	; () banked
  9593  002370  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9594  002372  0E7E               	movlw	high STR_150
  9595  002374  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9596  002376  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9597                           
  9598                           ;icmp.c: 174: UARTTransmitText("[ECHO REPLY SENT TO ");
  9599  00237A  0E4D               	movlw	low STR_161
  9600  00237C  0100               	movlb	0	; () banked
  9601  00237E  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9602  002380  0E7D               	movlw	high STR_161
  9603  002382  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9604  002384  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9605                           
  9606                           ;icmp.c: 175: UARTTransmitText(ipAdressToString(ipHeader.source));
  9607  002388  C0D0  F073         	movff	icmp_sendEchoReply@ipHeader+15,ipAdressToString@ip
  9608  00238C  C0D1  F074         	movff	icmp_sendEchoReply@ipHeader+16,ipAdressToString@ip+1
  9609  002390  C0D2  F075         	movff	icmp_sendEchoReply@ipHeader+17,ipAdressToString@ip+2
  9610  002394  C0D3  F076         	movff	icmp_sendEchoReply@ipHeader+18,ipAdressToString@ip+3
  9611  002398  EC96  F016         	call	_ipAdressToString	;wreg free
  9612  00239C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
  9613  0023A0  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
  9614  0023A4  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9615                           
  9616                           ;icmp.c: 176: UARTTransmitText("]");
  9617  0023A8  0EAC               	movlw	low (STR_12+5)
  9618  0023AA  0100               	movlb	0	; () banked
  9619  0023AC  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9620  0023AE  0E7F               	movlw	high (STR_12+5)
  9621  0023B0  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9622  0023B2  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9623                           
  9624                           ;icmp.c: 177: UARTTransmitText("\033[0m");
  9625  0023B6  0ED7               	movlw	low STR_7
  9626  0023B8  0100               	movlb	0	; () banked
  9627  0023BA  6F98               	movwf	UARTTransmitText@str& (0+255),b
  9628  0023BC  0E7F               	movlw	high STR_7
  9629  0023BE  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
  9630  0023C0  EC42  F02C         	call	_UARTTransmitText	;wreg free
  9631                           
  9632                           ;icmp.c: 179: stack.pendingPacketToSend = ipReply;
  9633  0023C4  EE21  F06D         	lfsr	2,icmp_sendEchoReply@ipReply
  9634  0023C8  EE13  F077         	lfsr	1,_stack+53
  9635  0023CC  0E41               	movlw	65
  9636  0023CE                     u11611:
  9637  0023CE  CFDB FFE3          	movff	plusw2,plusw1
  9638  0023D2  06E8               	decf	wreg,f,c
  9639  0023D4  E2FC               	bc	u11611
  9640                           
  9641                           ;icmp.c: 180: stack.background.fPacketPending = 1;
  9642  0023D6  0E01               	movlw	1
  9643  0023D8  0103               	movlb	3	; () banked
  9644  0023DA  6F76               	movwf	(_stack+52)& (0+255),b
  9645                           
  9646                           ; BSR set to: 3
  9647  0023DC  0012               	return		;funcret
  9648  0023DE                     __end_of_icmp_sendEchoReply:
  9649                           	opt stack 0
  9650                           tblptru	equ	0xFF8
  9651                           tblptrh	equ	0xFF7
  9652                           tblptrl	equ	0xFF6
  9653                           tablat	equ	0xFF5
  9654                           prodh	equ	0xFF4
  9655                           prodl	equ	0xFF3
  9656                           intcon	equ	0xFF2
  9657                           intcon3	equ	0xFF0
  9658                           indf0	equ	0xFEF
  9659                           postinc0	equ	0xFEE
  9660                           plusw0	equ	0xFEB
  9661                           fsr0h	equ	0xFEA
  9662                           fsr0l	equ	0xFE9
  9663                           wreg	equ	0xFE8
  9664                           postinc1	equ	0xFE6
  9665                           postdec1	equ	0xFE5
  9666                           plusw1	equ	0xFE3
  9667                           fsr1h	equ	0xFE2
  9668                           fsr1l	equ	0xFE1
  9669                           indf2	equ	0xFDF
  9670                           postinc2	equ	0xFDE
  9671                           postdec2	equ	0xFDD
  9672                           plusw2	equ	0xFDB
  9673                           fsr2h	equ	0xFDA
  9674                           fsr2l	equ	0xFD9
  9675                           status	equ	0xFD8
  9676                           
  9677 ;; *************** function _ipv4_writeHeaderIntoBuffer *****************
  9678 ;; Defined at:
  9679 ;;		line 104 in file "src/stack/protocols/ipv4.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  header         23    0[BANK0 ] struct ipv4_header
  9682 ;;  ptr             2   23[BANK0 ] PTR unsigned char 
  9683 ;;		 -> icmp_sendEchoReply@headerBuf(32), main@headerBuf(32), 
  9684 ;; Auto vars:     Size  Location     Type
  9685 ;;		None
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      void 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9695 ;;      Params:         0      25       0       0       0       0       0       0       0
  9696 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9697 ;;      Temps:          0       2       0       0       0       0       0       0       0
  9698 ;;      Totals:         0      27       0       0       0       0       0       0       0
  9699 ;;Total ram usage:       27 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    4
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_main
  9706 ;;		_icmp_sendEchoReply
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           	psect	text20
  9711  003A60                     __ptext20:
  9712                           	opt stack 0
  9713  003A60                     _ipv4_writeHeaderIntoBuffer:
  9714                           	opt stack 26
  9715                           
  9716                           ;ipv4.c: 105: *ptr = (header.version << 4) | (header.headerLength);
  9717                           
  9718                           ; BSR set to: 3
  9719                           ;incstack = 0
  9720  003A60  0100               	movlb	0	; () banked
  9721  003A62  3960               	swapf	ipv4_writeHeaderIntoBuffer@header& (0+255),w,b
  9722  003A64  0BF0               	andlw	240
  9723  003A66  1161               	iorwf	(ipv4_writeHeaderIntoBuffer@header+1)& (0+255),w,b
  9724  003A68  C077  FFD9         	movff	ipv4_writeHeaderIntoBuffer@ptr,fsr2l
  9725  003A6C  C078  FFDA         	movff	ipv4_writeHeaderIntoBuffer@ptr+1,fsr2h
  9726  003A70  6EDF               	movwf	indf2,c
  9727                           
  9728                           ;ipv4.c: 106: *(ptr + 1) = (header.dscp << 2) | (header.ecn & 0x03);
  9729  003A72  EE20 F001          	lfsr	2,1
  9730  003A76  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9731  003A78  26D9               	addwf	fsr2l,f,c
  9732  003A7A  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9733  003A7C  22DA               	addwfc	fsr2h,f,c
  9734  003A7E  C063  F079         	movff	ipv4_writeHeaderIntoBuffer@header+3,??_ipv4_writeHeaderIntoBuffer
  9735  003A82  0E03               	movlw	3
  9736  003A84  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  9737  003A86  4562               	rlncf	(ipv4_writeHeaderIntoBuffer@header+2)& (0+255),w,b
  9738  003A88  46E8               	rlncf	wreg,f,c
  9739  003A8A  0BFC               	andlw	252
  9740  003A8C  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  9741  003A8E  6EDF               	movwf	indf2,c
  9742                           
  9743                           ;ipv4.c: 107: *(ptr + 2) = (header.totalLength & 0xff00) >> 8;
  9744  003A90  EE20 F002          	lfsr	2,2
  9745  003A94  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9746  003A96  26D9               	addwf	fsr2l,f,c
  9747  003A98  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9748  003A9A  22DA               	addwfc	fsr2h,f,c
  9749  003A9C  5165               	movf	(ipv4_writeHeaderIntoBuffer@header+5)& (0+255),w,b
  9750  003A9E  6EDF               	movwf	indf2,c
  9751                           
  9752                           ;ipv4.c: 108: *(ptr + 3) = header.totalLength & 0x00ff;
  9753  003AA0  EE20 F003          	lfsr	2,3
  9754  003AA4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9755  003AA6  26D9               	addwf	fsr2l,f,c
  9756  003AA8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9757  003AAA  22DA               	addwfc	fsr2h,f,c
  9758  003AAC  C064  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+4,indf2
  9759                           
  9760                           ;ipv4.c: 109: *(ptr + 4) = (header.identification & 0xff00) >> 8;
  9761  003AB0  EE20 F004          	lfsr	2,4
  9762  003AB4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9763  003AB6  26D9               	addwf	fsr2l,f,c
  9764  003AB8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9765  003ABA  22DA               	addwfc	fsr2h,f,c
  9766  003ABC  5167               	movf	(ipv4_writeHeaderIntoBuffer@header+7)& (0+255),w,b
  9767  003ABE  6EDF               	movwf	indf2,c
  9768                           
  9769                           ;ipv4.c: 110: *(ptr + 5) = header.identification & 0x00ff;
  9770  003AC0  EE20 F005          	lfsr	2,5
  9771  003AC4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9772  003AC6  26D9               	addwf	fsr2l,f,c
  9773  003AC8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9774  003ACA  22DA               	addwfc	fsr2h,f,c
  9775  003ACC  C066  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+6,indf2
  9776                           
  9777                           ; BSR set to: 0
  9778                           ;ipv4.c: 111: *(ptr + 6) = (header.flags << 5) | ((header.fragmentOffset & 0x1f00) >> 8)
      +                          ;
  9779  003AD0  EE20 F006          	lfsr	2,6
  9780  003AD4  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9781  003AD6  26D9               	addwf	fsr2l,f,c
  9782  003AD8  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9783  003ADA  22DA               	addwfc	fsr2h,f,c
  9784  003ADC  EE10  F069         	lfsr	1,ipv4_writeHeaderIntoBuffer@header+9
  9785  003AE0  CFE6 F079          	movff	postinc1,??_ipv4_writeHeaderIntoBuffer
  9786  003AE4  CFE5 F07A          	movff	postdec1,??_ipv4_writeHeaderIntoBuffer+1
  9787  003AE8  C07A  F079         	movff	??_ipv4_writeHeaderIntoBuffer+1,??_ipv4_writeHeaderIntoBuffer
  9788  003AEC  6B7A               	clrf	(??_ipv4_writeHeaderIntoBuffer+1)& (0+255),b
  9789  003AEE  0E1F               	movlw	31
  9790  003AF0  1779               	andwf	??_ipv4_writeHeaderIntoBuffer& (0+255),f,b
  9791  003AF2  3968               	swapf	(ipv4_writeHeaderIntoBuffer@header+8)& (0+255),w,b
  9792  003AF4  46E8               	rlncf	wreg,f,c
  9793  003AF6  0BE0               	andlw	224
  9794  003AF8  1179               	iorwf	??_ipv4_writeHeaderIntoBuffer& (0+255),w,b
  9795  003AFA  6EDF               	movwf	indf2,c
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;ipv4.c: 112: *(ptr + 7) = (header.fragmentOffset & 0x00ff);
  9799  003AFC  EE20 F007          	lfsr	2,7
  9800  003B00  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9801  003B02  26D9               	addwf	fsr2l,f,c
  9802  003B04  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9803  003B06  22DA               	addwfc	fsr2h,f,c
  9804  003B08  C069  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+9,indf2
  9805                           
  9806                           ; BSR set to: 0
  9807                           ;ipv4.c: 113: *(ptr + 8) = (header.timeToLive);
  9808  003B0C  EE20 F008          	lfsr	2,8
  9809  003B10  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9810  003B12  26D9               	addwf	fsr2l,f,c
  9811  003B14  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9812  003B16  22DA               	addwfc	fsr2h,f,c
  9813  003B18  C06B  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+11,indf2
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;ipv4.c: 114: *(ptr + 9) = (header.protocol);
  9817  003B1C  EE20 F009          	lfsr	2,9
  9818  003B20  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9819  003B22  26D9               	addwf	fsr2l,f,c
  9820  003B24  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9821  003B26  22DA               	addwfc	fsr2h,f,c
  9822  003B28  C06C  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+12,indf2
  9823                           
  9824                           ; BSR set to: 0
  9825                           ;ipv4.c: 115: *(ptr + 10) = (header.checksum & 0xff00) >> 8;
  9826  003B2C  EE20 F00A          	lfsr	2,10
  9827  003B30  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9828  003B32  26D9               	addwf	fsr2l,f,c
  9829  003B34  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9830  003B36  22DA               	addwfc	fsr2h,f,c
  9831  003B38  516E               	movf	(ipv4_writeHeaderIntoBuffer@header+14)& (0+255),w,b
  9832  003B3A  6EDF               	movwf	indf2,c
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;ipv4.c: 116: *(ptr + 11) = (header.checksum & 0x00ff);
  9836  003B3C  EE20 F00B          	lfsr	2,11
  9837  003B40  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9838  003B42  26D9               	addwf	fsr2l,f,c
  9839  003B44  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9840  003B46  22DA               	addwfc	fsr2h,f,c
  9841  003B48  C06D  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+13,indf2
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;ipv4.c: 117: *(ptr + 12) = (header.source.address[0]);
  9845  003B4C  EE20 F00C          	lfsr	2,12
  9846  003B50  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9847  003B52  26D9               	addwf	fsr2l,f,c
  9848  003B54  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9849  003B56  22DA               	addwfc	fsr2h,f,c
  9850  003B58  C06F  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+15,indf2
  9851                           
  9852                           ; BSR set to: 0
  9853                           ;ipv4.c: 118: *(ptr + 13) = (header.source.address[1]);
  9854  003B5C  EE20 F00D          	lfsr	2,13
  9855  003B60  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9856  003B62  26D9               	addwf	fsr2l,f,c
  9857  003B64  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9858  003B66  22DA               	addwfc	fsr2h,f,c
  9859  003B68  C070  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+16,indf2
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;ipv4.c: 119: *(ptr + 14) = (header.source.address[2]);
  9863  003B6C  EE20 F00E          	lfsr	2,14
  9864  003B70  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9865  003B72  26D9               	addwf	fsr2l,f,c
  9866  003B74  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9867  003B76  22DA               	addwfc	fsr2h,f,c
  9868  003B78  C071  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+17,indf2
  9869                           
  9870                           ; BSR set to: 0
  9871                           ;ipv4.c: 120: *(ptr + 15) = (header.source.address[3]);
  9872  003B7C  EE20 F00F          	lfsr	2,15
  9873  003B80  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9874  003B82  26D9               	addwf	fsr2l,f,c
  9875  003B84  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9876  003B86  22DA               	addwfc	fsr2h,f,c
  9877  003B88  C072  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+18,indf2
  9878                           
  9879                           ; BSR set to: 0
  9880                           ;ipv4.c: 121: *(ptr + 16) = (header.destination.address[0]);
  9881  003B8C  EE20 F010          	lfsr	2,16
  9882  003B90  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9883  003B92  26D9               	addwf	fsr2l,f,c
  9884  003B94  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9885  003B96  22DA               	addwfc	fsr2h,f,c
  9886  003B98  C073  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+19,indf2
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;ipv4.c: 122: *(ptr + 17) = (header.destination.address[1]);
  9890  003B9C  EE20 F011          	lfsr	2,17
  9891  003BA0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9892  003BA2  26D9               	addwf	fsr2l,f,c
  9893  003BA4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9894  003BA6  22DA               	addwfc	fsr2h,f,c
  9895  003BA8  C074  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+20,indf2
  9896                           
  9897                           ; BSR set to: 0
  9898                           ;ipv4.c: 123: *(ptr + 18) = (header.destination.address[2]);
  9899  003BAC  EE20 F012          	lfsr	2,18
  9900  003BB0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9901  003BB2  26D9               	addwf	fsr2l,f,c
  9902  003BB4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9903  003BB6  22DA               	addwfc	fsr2h,f,c
  9904  003BB8  C075  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+21,indf2
  9905                           
  9906                           ; BSR set to: 0
  9907                           ;ipv4.c: 124: *(ptr + 19) = (header.destination.address[3]);
  9908  003BBC  EE20 F013          	lfsr	2,19
  9909  003BC0  5177               	movf	ipv4_writeHeaderIntoBuffer@ptr& (0+255),w,b
  9910  003BC2  26D9               	addwf	fsr2l,f,c
  9911  003BC4  5178               	movf	(ipv4_writeHeaderIntoBuffer@ptr+1)& (0+255),w,b
  9912  003BC6  22DA               	addwfc	fsr2h,f,c
  9913  003BC8  C076  FFDF         	movff	ipv4_writeHeaderIntoBuffer@header+22,indf2
  9914                           
  9915                           ; BSR set to: 0
  9916  003BCC  0012               	return		;funcret
  9917  003BCE                     __end_of_ipv4_writeHeaderIntoBuffer:
  9918                           	opt stack 0
  9919                           tblptru	equ	0xFF8
  9920                           tblptrh	equ	0xFF7
  9921                           tblptrl	equ	0xFF6
  9922                           tablat	equ	0xFF5
  9923                           prodh	equ	0xFF4
  9924                           prodl	equ	0xFF3
  9925                           intcon	equ	0xFF2
  9926                           intcon3	equ	0xFF0
  9927                           indf0	equ	0xFEF
  9928                           postinc0	equ	0xFEE
  9929                           plusw0	equ	0xFEB
  9930                           fsr0h	equ	0xFEA
  9931                           fsr0l	equ	0xFE9
  9932                           wreg	equ	0xFE8
  9933                           postinc1	equ	0xFE6
  9934                           postdec1	equ	0xFE5
  9935                           plusw1	equ	0xFE3
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           plusw2	equ	0xFDB
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function _ipv4_txFrameRequest *****************
  9947 ;; Defined at:
  9948 ;;		line 40 in file "src/stack/protocols/ipv4.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  packet          2   71[BANK0 ] PTR struct ipv4_packet
  9951 ;;		 -> icmp_sendEchoReply@ipReply(66), stack(123), 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;		None
  9954 ;; Return value:  Size  Location     Type
  9955 ;;                  1    wreg      void 
  9956 ;; Registers used:
  9957 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9958 ;; Tracked objects:
  9959 ;;		On entry : 0/0
  9960 ;;		On exit  : 0/0
  9961 ;;		Unchanged: 0/0
  9962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9963 ;;      Params:         0       2       0       0       0       0       0       0       0
  9964 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9965 ;;      Temps:          0       4       0       0       0       0       0       0       0
  9966 ;;      Totals:         0       6       0       0       0       0       0       0       0
  9967 ;;Total ram usage:        6 bytes
  9968 ;; Hardware stack levels used:    1
  9969 ;; Hardware stack levels required when called:    9
  9970 ;; This function calls:
  9971 ;;		_ethernet_txFrameRequest
  9972 ;; This function is called by:
  9973 ;;		_main
  9974 ;;		_icmp_sendEchoReply
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text21
  9979  003FC8                     __ptext21:
  9980                           	opt stack 0
  9981  003FC8                     _ipv4_txFrameRequest:
  9982                           	opt stack 21
  9983                           
  9984                           ;ipv4.c: 41: packet->ethernet.length = packet->ipv4Header.totalLength + 8;
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;incstack = 0
  9988  003FC8  0100               	movlb	0	; () banked
  9989  003FCA  EE20 F004          	lfsr	2,4
  9990  003FCE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
  9991  003FD0  26D9               	addwf	fsr2l,f,c
  9992  003FD2  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
  9993  003FD4  22DA               	addwfc	fsr2h,f,c
  9994  003FD6  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
  9995  003FDA  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
  9996  003FDE  0E08               	movlw	8
  9997  003FE0  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
  9998  003FE2  0E00               	movlw	0
  9999  003FE4  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
 10000  003FE6  EE20 F020          	lfsr	2,32
 10001  003FEA  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10002  003FEC  26D9               	addwf	fsr2l,f,c
 10003  003FEE  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10004  003FF0  22DA               	addwfc	fsr2h,f,c
 10005  003FF2  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
 10006  003FF6  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
 10007                           
 10008                           ;ipv4.c: 42: packet->ethernet.ethertype = ETHERTYPE_IPv4;
 10009  003FFA  EE20 F02E          	lfsr	2,46
 10010  003FFE  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10011  004000  26D9               	addwf	fsr2l,f,c
 10012  004002  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10013  004004  22DA               	addwfc	fsr2h,f,c
 10014  004006  0E00               	movlw	0
 10015  004008  6EDE               	movwf	postinc2,c
 10016  00400A  0E08               	movlw	8
 10017  00400C  6EDD               	movwf	postdec2,c
 10018                           
 10019                           ; BSR set to: 0
 10020                           ;ipv4.c: 43: ethernet_txFrameRequest(&packet->ethernet);
 10021  00400E  0E20               	movlw	32
 10022  004010  25A7               	addwf	ipv4_txFrameRequest@packet& (0+255),w,b
 10023  004012  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 10024  004014  0E00               	movlw	0
 10025  004016  21A8               	addwfc	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10026  004018  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 10027  00401A  EC58  F024         	call	_ethernet_txFrameRequest	;wreg free
 10028                           
 10029                           ;ipv4.c: 45: packet->memory.fIsAssigned = packet->ethernet.memory.fIsAssigned;
 10030  00401E  0100               	movlb	0	; () banked
 10031  004020  EE20 F036          	lfsr	2,54
 10032  004024  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10033  004026  26D9               	addwf	fsr2l,f,c
 10034  004028  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10035  00402A  22DA               	addwfc	fsr2h,f,c
 10036  00402C  EE10 F01D          	lfsr	1,29
 10037  004030  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10038  004032  26E1               	addwf	fsr1l,f,c
 10039  004034  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10040  004036  22E2               	addwfc	fsr1h,f,c
 10041  004038  CFDF FFE7          	movff	indf2,indf1
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;ipv4.c: 46: packet->memory.fOutOfMemory = packet->ethernet.memory.fOutOfMemory;
 10045  00403C  EE20 F037          	lfsr	2,55
 10046  004040  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10047  004042  26D9               	addwf	fsr2l,f,c
 10048  004044  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10049  004046  22DA               	addwfc	fsr2h,f,c
 10050  004048  EE10 F01E          	lfsr	1,30
 10051  00404C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10052  00404E  26E1               	addwf	fsr1l,f,c
 10053  004050  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10054  004052  22E2               	addwfc	fsr1h,f,c
 10055  004054  CFDF FFE7          	movff	indf2,indf1
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;ipv4.c: 47: packet->memory.index = packet->ethernet.memory.index;
 10059  004058  EE20 F038          	lfsr	2,56
 10060  00405C  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10061  00405E  26D9               	addwf	fsr2l,f,c
 10062  004060  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10063  004062  22DA               	addwfc	fsr2h,f,c
 10064  004064  EE10 F01F          	lfsr	1,31
 10065  004068  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10066  00406A  26E1               	addwf	fsr1l,f,c
 10067  00406C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10068  00406E  22E2               	addwfc	fsr1h,f,c
 10069  004070  CFDF FFE7          	movff	indf2,indf1
 10070                           
 10071                           ; BSR set to: 0
 10072                           ;ipv4.c: 48: packet->memory.start = packet->ethernet.memory.start + 8;
 10073  004074  EE20 F030          	lfsr	2,48
 10074  004078  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10075  00407A  26D9               	addwf	fsr2l,f,c
 10076  00407C  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10077  00407E  22DA               	addwfc	fsr2h,f,c
 10078  004080  CFDE F0A9          	movff	postinc2,??_ipv4_txFrameRequest
 10079  004084  CFDD F0AA          	movff	postdec2,??_ipv4_txFrameRequest+1
 10080  004088  0E08               	movlw	8
 10081  00408A  27A9               	addwf	??_ipv4_txFrameRequest& (0+255),f,b
 10082  00408C  0E00               	movlw	0
 10083  00408E  23AA               	addwfc	(??_ipv4_txFrameRequest+1)& (0+255),f,b
 10084  004090  EE20 F017          	lfsr	2,23
 10085  004094  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10086  004096  26D9               	addwf	fsr2l,f,c
 10087  004098  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10088  00409A  22DA               	addwfc	fsr2h,f,c
 10089  00409C  C0A9  FFDE         	movff	??_ipv4_txFrameRequest,postinc2
 10090  0040A0  C0AA  FFDD         	movff	??_ipv4_txFrameRequest+1,postdec2
 10091                           
 10092                           ; BSR set to: 0
 10093                           ;ipv4.c: 49: packet->memory.end = packet->ethernet.memory.end;
 10094  0040A4  EE20 F032          	lfsr	2,50
 10095  0040A8  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10096  0040AA  26D9               	addwf	fsr2l,f,c
 10097  0040AC  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10098  0040AE  22DA               	addwfc	fsr2h,f,c
 10099  0040B0  EE10 F019          	lfsr	1,25
 10100  0040B4  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10101  0040B6  26E1               	addwf	fsr1l,f,c
 10102  0040B8  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10103  0040BA  22E2               	addwfc	fsr1h,f,c
 10104  0040BC  CFDE FFE6          	movff	postinc2,postinc1
 10105  0040C0  CFDD FFE5          	movff	postdec2,postdec1
 10106                           
 10107                           ; BSR set to: 0
 10108                           ;ipv4.c: 50: packet->memory.length = packet->ethernet.memory.length - 8;
 10109  0040C4  0EF8               	movlw	248
 10110  0040C6  6FA9               	movwf	??_ipv4_txFrameRequest& (0+255),b
 10111  0040C8  0EFF               	movlw	255
 10112  0040CA  6FAA               	movwf	(??_ipv4_txFrameRequest+1)& (0+255),b
 10113  0040CC  EE20 F034          	lfsr	2,52
 10114  0040D0  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10115  0040D2  26D9               	addwf	fsr2l,f,c
 10116  0040D4  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10117  0040D6  22DA               	addwfc	fsr2h,f,c
 10118  0040D8  CFDE F0AB          	movff	postinc2,??_ipv4_txFrameRequest+2
 10119  0040DC  CFDD F0AC          	movff	postdec2,??_ipv4_txFrameRequest+3
 10120  0040E0  51A9               	movf	??_ipv4_txFrameRequest& (0+255),w,b
 10121  0040E2  27AB               	addwf	(??_ipv4_txFrameRequest+2)& (0+255),f,b
 10122  0040E4  51AA               	movf	(??_ipv4_txFrameRequest+1)& (0+255),w,b
 10123  0040E6  23AC               	addwfc	(??_ipv4_txFrameRequest+3)& (0+255),f,b
 10124  0040E8  EE20 F01B          	lfsr	2,27
 10125  0040EC  51A7               	movf	ipv4_txFrameRequest@packet& (0+255),w,b
 10126  0040EE  26D9               	addwf	fsr2l,f,c
 10127  0040F0  51A8               	movf	(ipv4_txFrameRequest@packet+1)& (0+255),w,b
 10128  0040F2  22DA               	addwfc	fsr2h,f,c
 10129  0040F4  C0AB  FFDE         	movff	??_ipv4_txFrameRequest+2,postinc2
 10130  0040F8  C0AC  FFDD         	movff	??_ipv4_txFrameRequest+3,postdec2
 10131                           
 10132                           ; BSR set to: 0
 10133  0040FC  0012               	return		;funcret
 10134  0040FE                     __end_of_ipv4_txFrameRequest:
 10135                           	opt stack 0
 10136                           tblptru	equ	0xFF8
 10137                           tblptrh	equ	0xFF7
 10138                           tblptrl	equ	0xFF6
 10139                           tablat	equ	0xFF5
 10140                           prodh	equ	0xFF4
 10141                           prodl	equ	0xFF3
 10142                           intcon	equ	0xFF2
 10143                           intcon3	equ	0xFF0
 10144                           indf0	equ	0xFEF
 10145                           postinc0	equ	0xFEE
 10146                           plusw0	equ	0xFEB
 10147                           fsr0h	equ	0xFEA
 10148                           fsr0l	equ	0xFE9
 10149                           wreg	equ	0xFE8
 10150                           indf1	equ	0xFE7
 10151                           postinc1	equ	0xFE6
 10152                           postdec1	equ	0xFE5
 10153                           plusw1	equ	0xFE3
 10154                           fsr1h	equ	0xFE2
 10155                           fsr1l	equ	0xFE1
 10156                           indf2	equ	0xFDF
 10157                           postinc2	equ	0xFDE
 10158                           postdec2	equ	0xFDD
 10159                           plusw2	equ	0xFDB
 10160                           fsr2h	equ	0xFDA
 10161                           fsr2l	equ	0xFD9
 10162                           status	equ	0xFD8
 10163                           
 10164 ;; *************** function _ipv4_streamToTransmissionBuffer *****************
 10165 ;; Defined at:
 10166 ;;		line 98 in file "src/stack/protocols/ipv4.c"
 10167 ;; Parameters:    Size  Location     Type
 10168 ;;  data            1    wreg     unsigned char 
 10169 ;;  packet         66   30[BANK0 ] struct ipv4_packet
 10170 ;; Auto vars:     Size  Location     Type
 10171 ;;  data            1   96[BANK0 ] unsigned char 
 10172 ;; Return value:  Size  Location     Type
 10173 ;;                  1    wreg      void 
 10174 ;; Registers used:
 10175 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 10176 ;; Tracked objects:
 10177 ;;		On entry : 0/0
 10178 ;;		On exit  : 0/0
 10179 ;;		Unchanged: 0/0
 10180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10181 ;;      Params:         0      66       0       0       0       0       0       0       0
 10182 ;;      Locals:         0       1       0       0       0       0       0       0       0
 10183 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10184 ;;      Totals:         0      67       0       0       0       0       0       0       0
 10185 ;;Total ram usage:       67 bytes
 10186 ;; Hardware stack levels used:    1
 10187 ;; Hardware stack levels required when called:    8
 10188 ;; This function calls:
 10189 ;;		_ethernetController_streamToTransmitBuffer
 10190 ;; This function is called by:
 10191 ;;		_main
 10192 ;;		_icmp_sendEchoReply
 10193 ;; This function uses a non-reentrant model
 10194 ;;
 10195                           
 10196                           	psect	text22
 10197  0060FE                     __ptext22:
 10198                           	opt stack 0
 10199  0060FE                     _ipv4_streamToTransmissionBuffer:
 10200                           	opt stack 22
 10201                           
 10202                           ; BSR set to: 0
 10203                           ;incstack = 0
 10204                           ;ipv4_streamToTransmissionBuffer@data stored from wreg
 10205  0060FE  0100               	movlb	0	; () banked
 10206  006100  6FC0               	movwf	ipv4_streamToTransmissionBuffer@data& (0+255),b
 10207                           
 10208                           ;ipv4.c: 99: ethernetController_streamToTransmitBuffer(data, packet.memory);
 10209  006102  EE20  F095         	lfsr	2,ipv4_streamToTransmissionBuffer@packet+23
 10210  006106  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 10211  00610A  0E08               	movlw	8
 10212  00610C                     u10991:
 10213  00610C  CFDB FFEB          	movff	plusw2,plusw0
 10214  006110  06E8               	decf	wreg,f,c
 10215  006112  E2FC               	bc	u10991
 10216  006114  0100               	movlb	0	; () banked
 10217  006116  51C0               	movf	ipv4_streamToTransmissionBuffer@data& (0+255),w,b
 10218  006118  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 10219  00611C  0012               	return		;funcret
 10220  00611E                     __end_of_ipv4_streamToTransmissionBuffer:
 10221                           	opt stack 0
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           intcon3	equ	0xFF0
 10230                           indf0	equ	0xFEF
 10231                           postinc0	equ	0xFEE
 10232                           plusw0	equ	0xFEB
 10233                           fsr0h	equ	0xFEA
 10234                           fsr0l	equ	0xFE9
 10235                           wreg	equ	0xFE8
 10236                           indf1	equ	0xFE7
 10237                           postinc1	equ	0xFE6
 10238                           postdec1	equ	0xFE5
 10239                           plusw1	equ	0xFE3
 10240                           fsr1h	equ	0xFE2
 10241                           fsr1l	equ	0xFE1
 10242                           indf2	equ	0xFDF
 10243                           postinc2	equ	0xFDE
 10244                           postdec2	equ	0xFDD
 10245                           plusw2	equ	0xFDB
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _ipv4_calculateHeaderChecksum *****************
 10251 ;; Defined at:
 10252 ;;		line 127 in file "src/stack/protocols/ipv4.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  header          2    0[BANK0 ] PTR struct ipv4_header
 10255 ;;		 -> icmp_sendEchoReply@ipReply(66), ipv4_checkHeaderChecksum@testHeader(23), stack.pendingPacketToSend(66), stack(12
      +3), 
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;  sum             4   11[BANK0 ] unsigned long 
 10258 ;;  carry           1   10[BANK0 ] unsigned char 
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  1    wreg      void 
 10261 ;; Registers used:
 10262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10268 ;;      Params:         0       2       0       0       0       0       0       0       0
 10269 ;;      Locals:         0       5       0       0       0       0       0       0       0
 10270 ;;      Temps:          0       8       0       0       0       0       0       0       0
 10271 ;;      Totals:         0      15       0       0       0       0       0       0       0
 10272 ;;Total ram usage:       15 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    4
 10275 ;; This function calls:
 10276 ;;		Nothing
 10277 ;; This function is called by:
 10278 ;;		_main
 10279 ;;		_ipv4_checkHeaderChecksum
 10280 ;;		_icmp_sendEchoReply
 10281 ;; This function uses a non-reentrant model
 10282 ;;
 10283                           
 10284                           	psect	text23
 10285  000F4C                     __ptext23:
 10286                           	opt stack 0
 10287  000F4C                     _ipv4_calculateHeaderChecksum:
 10288                           	opt stack 26
 10289                           
 10290                           ;ipv4.c: 132: uint32_t sum = 0;
 10291                           
 10292                           ;incstack = 0
 10293  000F4C  0E00               	movlw	0
 10294  000F4E  0100               	movlb	0	; () banked
 10295  000F50  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10296  000F52  0E00               	movlw	0
 10297  000F54  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10298  000F56  0E00               	movlw	0
 10299  000F58  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10300  000F5A  0E00               	movlw	0
 10301  000F5C  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10302                           
 10303                           ;ipv4.c: 133: uint8_t carry = 0;
 10304  000F5E  0E00               	movlw	0
 10305  000F60  6F6A               	movwf	ipv4_calculateHeaderChecksum@carry& (0+255),b
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;ipv4.c: 134: sum = ((header->version << 12) | (header->headerLength << 8) | (header->ds
      +                          cp << 2) | (header->ecn))&0xffff;
 10309  000F62  EE20 F002          	lfsr	2,2
 10310  000F66  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10311  000F68  26D9               	addwf	fsr2l,f,c
 10312  000F6A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10313  000F6C  22DA               	addwfc	fsr2h,f,c
 10314  000F6E  50DF               	movf	indf2,w,c
 10315  000F70  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10316  000F72  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10317  000F74  90D8               	bcf	status,0,c
 10318  000F76  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 10319  000F78  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 10320  000F7A  90D8               	bcf	status,0,c
 10321  000F7C  3762               	rlcf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 10322  000F7E  3763               	rlcf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 10323  000F80  EE20 F001          	lfsr	2,1
 10324  000F84  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10325  000F86  26D9               	addwf	fsr2l,f,c
 10326  000F88  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10327  000F8A  22DA               	addwfc	fsr2h,f,c
 10328  000F8C  50DF               	movf	indf2,w,c
 10329  000F8E  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10330  000F90  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10331  000F92  6F66               	movwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 10332  000F94  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10333  000F96  C060  FFD9         	movff	ipv4_calculateHeaderChecksum@header,fsr2l
 10334  000F9A  C061  FFDA         	movff	ipv4_calculateHeaderChecksum@header+1,fsr2h
 10335  000F9E  50DF               	movf	indf2,w,c
 10336  000FA0  6F67               	movwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),b
 10337  000FA2  6B68               	clrf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),b
 10338  000FA4  0E0C               	movlw	12
 10339  000FA6                     u10885:
 10340  000FA6  90D8               	bcf	status,0,c
 10341  000FA8  3767               	rlcf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 10342  000FAA  3768               	rlcf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 10343  000FAC  2EE8               	decfsz	wreg,f,c
 10344  000FAE  D7FB               	goto	u10885
 10345  000FB0  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10346  000FB2  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 10347  000FB4  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 10348  000FB6  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 10349  000FB8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10350  000FBA  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 10351  000FBC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10352  000FBE  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 10353  000FC0  EE20 F003          	lfsr	2,3
 10354  000FC4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10355  000FC6  26D9               	addwf	fsr2l,f,c
 10356  000FC8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10357  000FCA  22DA               	addwfc	fsr2h,f,c
 10358  000FCC  50DF               	movf	indf2,w,c
 10359  000FCE  6F69               	movwf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),b
 10360  000FD0  5169               	movf	(??_ipv4_calculateHeaderChecksum+7)& (0+255),w,b
 10361  000FD2  1367               	iorwf	(??_ipv4_calculateHeaderChecksum+5)& (0+255),f,b
 10362  000FD4  0E00               	movlw	0
 10363  000FD6  1368               	iorwf	(??_ipv4_calculateHeaderChecksum+6)& (0+255),f,b
 10364  000FD8  C067  F06B         	movff	??_ipv4_calculateHeaderChecksum+5,ipv4_calculateHeaderChecksum@sum
 10365  000FDC  C068  F06C         	movff	??_ipv4_calculateHeaderChecksum+6,ipv4_calculateHeaderChecksum@sum+1
 10366  000FE0  6B6D               	clrf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10367  000FE2  6B6E               	clrf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10368                           
 10369                           ; BSR set to: 0
 10370                           ;ipv4.c: 135: if (sum > 0xffff) {
 10371  000FE4  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10372  000FE6  E103               	bnz	u10890
 10373  000FE8  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10374  000FEA  A0D8               	btfss	status,0,c
 10375  000FEC  D012               	goto	l1184
 10376  000FEE                     u10890:
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;ipv4.c: 136: sum = sum & 0xffff;
 10380  000FEE  0EFF               	movlw	255
 10381  000FF0  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10382  000FF2  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10383  000FF4  0EFF               	movlw	255
 10384  000FF6  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10385  000FF8  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10386  000FFA  0E00               	movlw	0
 10387  000FFC  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10388  000FFE  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10389  001000  0E00               	movlw	0
 10390  001002  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10391  001004  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10392                           
 10393                           ;ipv4.c: 137: sum++;
 10394  001006  0E01               	movlw	1
 10395  001008  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10396  00100A  0E00               	movlw	0
 10397  00100C  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10398  00100E  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10399  001010  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10400  001012                     l1184:
 10401                           
 10402                           ; BSR set to: 0
 10403                           ;ipv4.c: 138: }
 10404                           ;ipv4.c: 139: sum += header->totalLength;
 10405                           
 10406                           ; BSR set to: 0
 10407  001012  EE20 F004          	lfsr	2,4
 10408  001016  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10409  001018  26D9               	addwf	fsr2l,f,c
 10410  00101A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10411  00101C  22DA               	addwfc	fsr2h,f,c
 10412  00101E  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 10413  001022  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 10414  001026  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10415  001028  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10416  00102A  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10417  00102C  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10418  00102E  0E00               	movlw	0
 10419  001030  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10420  001032  0E00               	movlw	0
 10421  001034  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;ipv4.c: 140: if (sum > 0xffff) {
 10425  001036  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10426  001038  E103               	bnz	u10900
 10427  00103A  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10428  00103C  A0D8               	btfss	status,0,c
 10429  00103E  D012               	goto	l1185
 10430  001040                     u10900:
 10431                           
 10432                           ; BSR set to: 0
 10433                           ;ipv4.c: 141: sum = sum & 0xffff;
 10434  001040  0EFF               	movlw	255
 10435  001042  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10436  001044  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10437  001046  0EFF               	movlw	255
 10438  001048  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10439  00104A  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10440  00104C  0E00               	movlw	0
 10441  00104E  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10442  001050  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10443  001052  0E00               	movlw	0
 10444  001054  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10445  001056  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10446                           
 10447                           ;ipv4.c: 142: sum++;
 10448  001058  0E01               	movlw	1
 10449  00105A  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10450  00105C  0E00               	movlw	0
 10451  00105E  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10452  001060  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10453  001062  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10454  001064                     l1185:
 10455                           
 10456                           ; BSR set to: 0
 10457                           ;ipv4.c: 143: }
 10458                           ;ipv4.c: 144: sum += header->identification;
 10459                           
 10460                           ; BSR set to: 0
 10461  001064  EE20 F006          	lfsr	2,6
 10462  001068  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10463  00106A  26D9               	addwf	fsr2l,f,c
 10464  00106C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10465  00106E  22DA               	addwfc	fsr2h,f,c
 10466  001070  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 10467  001074  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 10468  001078  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10469  00107A  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10470  00107C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10471  00107E  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10472  001080  0E00               	movlw	0
 10473  001082  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10474  001084  0E00               	movlw	0
 10475  001086  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;ipv4.c: 145: if (sum > 0xffff) {
 10479  001088  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10480  00108A  E103               	bnz	u10910
 10481  00108C  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10482  00108E  A0D8               	btfss	status,0,c
 10483  001090  D012               	goto	l1186
 10484  001092                     u10910:
 10485                           
 10486                           ; BSR set to: 0
 10487                           ;ipv4.c: 146: sum = sum & 0xffff;
 10488  001092  0EFF               	movlw	255
 10489  001094  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10490  001096  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10491  001098  0EFF               	movlw	255
 10492  00109A  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10493  00109C  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10494  00109E  0E00               	movlw	0
 10495  0010A0  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10496  0010A2  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10497  0010A4  0E00               	movlw	0
 10498  0010A6  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10499  0010A8  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10500                           
 10501                           ;ipv4.c: 147: sum++;
 10502  0010AA  0E01               	movlw	1
 10503  0010AC  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10504  0010AE  0E00               	movlw	0
 10505  0010B0  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10506  0010B2  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10507  0010B4  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10508  0010B6                     l1186:
 10509                           
 10510                           ; BSR set to: 0
 10511                           ;ipv4.c: 148: }
 10512                           ;ipv4.c: 149: sum += ((header->flags << 13) | (header->fragmentOffset))&0xffff;
 10513                           
 10514                           ; BSR set to: 0
 10515  0010B6  EE20 F009          	lfsr	2,9
 10516  0010BA  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10517  0010BC  26D9               	addwf	fsr2l,f,c
 10518  0010BE  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10519  0010C0  22DA               	addwfc	fsr2h,f,c
 10520  0010C2  CFDE F062          	movff	postinc2,??_ipv4_calculateHeaderChecksum
 10521  0010C6  CFDD F063          	movff	postdec2,??_ipv4_calculateHeaderChecksum+1
 10522  0010CA  EE20 F008          	lfsr	2,8
 10523  0010CE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10524  0010D0  26D9               	addwf	fsr2l,f,c
 10525  0010D2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10526  0010D4  22DA               	addwfc	fsr2h,f,c
 10527  0010D6  50DF               	movf	indf2,w,c
 10528  0010D8  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10529  0010DA  6B65               	clrf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10530  0010DC  0E0D               	movlw	13
 10531  0010DE                     u10925:
 10532  0010DE  90D8               	bcf	status,0,c
 10533  0010E0  3764               	rlcf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 10534  0010E2  3765               	rlcf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10535  0010E4  2EE8               	decfsz	wreg,f,c
 10536  0010E6  D7FB               	goto	u10925
 10537  0010E8  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10538  0010EA  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 10539  0010EC  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10540  0010EE  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10541  0010F0  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10542  0010F2  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10543  0010F4  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10544  0010F6  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10545  0010F8  0E00               	movlw	0
 10546  0010FA  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10547  0010FC  0E00               	movlw	0
 10548  0010FE  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10549                           
 10550                           ; BSR set to: 0
 10551                           ;ipv4.c: 150: if (sum > 0xffff) {
 10552  001100  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10553  001102  E103               	bnz	u10930
 10554  001104  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10555  001106  A0D8               	btfss	status,0,c
 10556  001108  D012               	goto	l1187
 10557  00110A                     u10930:
 10558                           
 10559                           ; BSR set to: 0
 10560                           ;ipv4.c: 151: sum = sum & 0xffff;
 10561  00110A  0EFF               	movlw	255
 10562  00110C  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10563  00110E  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10564  001110  0EFF               	movlw	255
 10565  001112  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10566  001114  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10567  001116  0E00               	movlw	0
 10568  001118  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10569  00111A  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10570  00111C  0E00               	movlw	0
 10571  00111E  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10572  001120  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10573                           
 10574                           ;ipv4.c: 152: sum++;
 10575  001122  0E01               	movlw	1
 10576  001124  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10577  001126  0E00               	movlw	0
 10578  001128  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10579  00112A  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10580  00112C  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10581  00112E                     l1187:
 10582                           
 10583                           ; BSR set to: 0
 10584                           ;ipv4.c: 153: }
 10585                           ;ipv4.c: 154: sum += ((header->timeToLive << 8) | (header->protocol))&0xffff;
 10586                           
 10587                           ; BSR set to: 0
 10588  00112E  EE20 F00B          	lfsr	2,11
 10589  001132  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10590  001134  26D9               	addwf	fsr2l,f,c
 10591  001136  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10592  001138  22DA               	addwfc	fsr2h,f,c
 10593  00113A  50DF               	movf	indf2,w,c
 10594  00113C  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10595  00113E  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10596  001140  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10597  001142  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10598  001144  EE20 F00C          	lfsr	2,12
 10599  001148  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10600  00114A  26D9               	addwf	fsr2l,f,c
 10601  00114C  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10602  00114E  22DA               	addwfc	fsr2h,f,c
 10603  001150  50DF               	movf	indf2,w,c
 10604  001152  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10605  001154  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10606  001156  1363               	iorwf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 10607  001158  0E00               	movlw	0
 10608  00115A  1364               	iorwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 10609  00115C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10610  00115E  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10611  001160  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10612  001162  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10613  001164  0E00               	movlw	0
 10614  001166  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10615  001168  0E00               	movlw	0
 10616  00116A  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10617                           
 10618                           ; BSR set to: 0
 10619                           ;ipv4.c: 155: if (sum > 0xffff) {
 10620  00116C  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10621  00116E  E103               	bnz	u10940
 10622  001170  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10623  001172  A0D8               	btfss	status,0,c
 10624  001174  D012               	goto	l1188
 10625  001176                     u10940:
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;ipv4.c: 156: sum = sum & 0xffff;
 10629  001176  0EFF               	movlw	255
 10630  001178  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10631  00117A  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10632  00117C  0EFF               	movlw	255
 10633  00117E  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10634  001180  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10635  001182  0E00               	movlw	0
 10636  001184  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10637  001186  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10638  001188  0E00               	movlw	0
 10639  00118A  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10640  00118C  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10641                           
 10642                           ;ipv4.c: 157: sum++;
 10643  00118E  0E01               	movlw	1
 10644  001190  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10645  001192  0E00               	movlw	0
 10646  001194  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10647  001196  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10648  001198  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10649  00119A                     l1188:
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;ipv4.c: 158: }
 10653                           ;ipv4.c: 160: sum += ((header->source.address[1] | (header->source.address[0] << 8)))&0x
      +                          ffff;
 10654                           
 10655                           ; BSR set to: 0
 10656  00119A  EE20 F00F          	lfsr	2,15
 10657  00119E  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10658  0011A0  26D9               	addwf	fsr2l,f,c
 10659  0011A2  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10660  0011A4  22DA               	addwfc	fsr2h,f,c
 10661  0011A6  50DF               	movf	indf2,w,c
 10662  0011A8  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10663  0011AA  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10664  0011AC  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10665  0011AE  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10666  0011B0  EE20 F010          	lfsr	2,16
 10667  0011B4  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10668  0011B6  26D9               	addwf	fsr2l,f,c
 10669  0011B8  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10670  0011BA  22DA               	addwfc	fsr2h,f,c
 10671  0011BC  50DF               	movf	indf2,w,c
 10672  0011BE  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10673  0011C0  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 10674  0011C2  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10675  0011C4  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10676  0011C6  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10677  0011C8  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 10678  0011CA  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10679  0011CC  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10680  0011CE  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 10681  0011D0  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10682  0011D2  0E00               	movlw	0
 10683  0011D4  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10684  0011D6  0E00               	movlw	0
 10685  0011D8  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;ipv4.c: 161: if (sum > 0xffff) {
 10689  0011DA  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10690  0011DC  E103               	bnz	u10950
 10691  0011DE  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10692  0011E0  A0D8               	btfss	status,0,c
 10693  0011E2  D012               	goto	l1189
 10694  0011E4                     u10950:
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;ipv4.c: 162: sum = sum & 0xffff;
 10698  0011E4  0EFF               	movlw	255
 10699  0011E6  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10700  0011E8  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10701  0011EA  0EFF               	movlw	255
 10702  0011EC  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10703  0011EE  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10704  0011F0  0E00               	movlw	0
 10705  0011F2  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10706  0011F4  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10707  0011F6  0E00               	movlw	0
 10708  0011F8  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10709  0011FA  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10710                           
 10711                           ;ipv4.c: 163: sum++;
 10712  0011FC  0E01               	movlw	1
 10713  0011FE  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10714  001200  0E00               	movlw	0
 10715  001202  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10716  001204  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10717  001206  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10718  001208                     l1189:
 10719                           
 10720                           ; BSR set to: 0
 10721                           ;ipv4.c: 164: }
 10722                           ;ipv4.c: 165: sum += ((header->source.address[3] | (header->source.address[2] << 8)))&0x
      +                          ffff;
 10723                           
 10724                           ; BSR set to: 0
 10725  001208  EE20 F011          	lfsr	2,17
 10726  00120C  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10727  00120E  26D9               	addwf	fsr2l,f,c
 10728  001210  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10729  001212  22DA               	addwfc	fsr2h,f,c
 10730  001214  50DF               	movf	indf2,w,c
 10731  001216  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10732  001218  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10733  00121A  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10734  00121C  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10735  00121E  EE20 F012          	lfsr	2,18
 10736  001222  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10737  001224  26D9               	addwf	fsr2l,f,c
 10738  001226  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10739  001228  22DA               	addwfc	fsr2h,f,c
 10740  00122A  50DF               	movf	indf2,w,c
 10741  00122C  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10742  00122E  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 10743  001230  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10744  001232  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10745  001234  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10746  001236  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 10747  001238  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10748  00123A  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10749  00123C  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 10750  00123E  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10751  001240  0E00               	movlw	0
 10752  001242  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10753  001244  0E00               	movlw	0
 10754  001246  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;ipv4.c: 166: if (sum > 0xffff) {
 10758  001248  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10759  00124A  E103               	bnz	u10960
 10760  00124C  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10761  00124E  A0D8               	btfss	status,0,c
 10762  001250  D012               	goto	l1190
 10763  001252                     u10960:
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;ipv4.c: 167: sum = sum & 0xffff;
 10767  001252  0EFF               	movlw	255
 10768  001254  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10769  001256  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10770  001258  0EFF               	movlw	255
 10771  00125A  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10772  00125C  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10773  00125E  0E00               	movlw	0
 10774  001260  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10775  001262  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10776  001264  0E00               	movlw	0
 10777  001266  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10778  001268  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10779                           
 10780                           ;ipv4.c: 168: sum++;
 10781  00126A  0E01               	movlw	1
 10782  00126C  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10783  00126E  0E00               	movlw	0
 10784  001270  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10785  001272  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10786  001274  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10787  001276                     l1190:
 10788                           
 10789                           ; BSR set to: 0
 10790                           ;ipv4.c: 169: }
 10791                           ;ipv4.c: 170: sum += ((header->destination.address[1] | (header->destination.address[0] 
      +                          << 8)))&0xffff;
 10792                           
 10793                           ; BSR set to: 0
 10794  001276  EE20 F013          	lfsr	2,19
 10795  00127A  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10796  00127C  26D9               	addwf	fsr2l,f,c
 10797  00127E  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10798  001280  22DA               	addwfc	fsr2h,f,c
 10799  001282  50DF               	movf	indf2,w,c
 10800  001284  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10801  001286  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10802  001288  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10803  00128A  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10804  00128C  EE20 F014          	lfsr	2,20
 10805  001290  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10806  001292  26D9               	addwf	fsr2l,f,c
 10807  001294  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10808  001296  22DA               	addwfc	fsr2h,f,c
 10809  001298  50DF               	movf	indf2,w,c
 10810  00129A  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10811  00129C  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 10812  00129E  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10813  0012A0  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10814  0012A2  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10815  0012A4  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 10816  0012A6  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10817  0012A8  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10818  0012AA  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 10819  0012AC  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10820  0012AE  0E00               	movlw	0
 10821  0012B0  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10822  0012B2  0E00               	movlw	0
 10823  0012B4  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10824                           
 10825                           ; BSR set to: 0
 10826                           ;ipv4.c: 171: if (sum > 0xffff) {
 10827  0012B6  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10828  0012B8  E103               	bnz	u10970
 10829  0012BA  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10830  0012BC  A0D8               	btfss	status,0,c
 10831  0012BE  D012               	goto	l1191
 10832  0012C0                     u10970:
 10833                           
 10834                           ; BSR set to: 0
 10835                           ;ipv4.c: 172: sum = sum & 0xffff;
 10836  0012C0  0EFF               	movlw	255
 10837  0012C2  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10838  0012C4  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10839  0012C6  0EFF               	movlw	255
 10840  0012C8  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10841  0012CA  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10842  0012CC  0E00               	movlw	0
 10843  0012CE  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10844  0012D0  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10845  0012D2  0E00               	movlw	0
 10846  0012D4  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10847  0012D6  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10848                           
 10849                           ;ipv4.c: 173: sum++;
 10850  0012D8  0E01               	movlw	1
 10851  0012DA  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10852  0012DC  0E00               	movlw	0
 10853  0012DE  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10854  0012E0  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10855  0012E2  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10856  0012E4                     l1191:
 10857                           
 10858                           ; BSR set to: 0
 10859                           ;ipv4.c: 174: }
 10860                           ;ipv4.c: 175: sum += ((header->destination.address[3] | (header->destination.address[2] 
      +                          << 8)))&0xffff;
 10861                           
 10862                           ; BSR set to: 0
 10863  0012E4  EE20 F015          	lfsr	2,21
 10864  0012E8  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10865  0012EA  26D9               	addwf	fsr2l,f,c
 10866  0012EC  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10867  0012EE  22DA               	addwfc	fsr2h,f,c
 10868  0012F0  50DF               	movf	indf2,w,c
 10869  0012F2  6F62               	movwf	??_ipv4_calculateHeaderChecksum& (0+255),b
 10870  0012F4  5162               	movf	??_ipv4_calculateHeaderChecksum& (0+255),w,b
 10871  0012F6  6F64               	movwf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),b
 10872  0012F8  6B63               	clrf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),b
 10873  0012FA  EE20 F016          	lfsr	2,22
 10874  0012FE  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10875  001300  26D9               	addwf	fsr2l,f,c
 10876  001302  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10877  001304  22DA               	addwfc	fsr2h,f,c
 10878  001306  50DF               	movf	indf2,w,c
 10879  001308  6F65               	movwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),b
 10880  00130A  6B66               	clrf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),b
 10881  00130C  5163               	movf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),w,b
 10882  00130E  1365               	iorwf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10883  001310  5164               	movf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),w,b
 10884  001312  1366               	iorwf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),f,b
 10885  001314  5165               	movf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),w,b
 10886  001316  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10887  001318  5166               	movf	(??_ipv4_calculateHeaderChecksum+4)& (0+255),w,b
 10888  00131A  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10889  00131C  0E00               	movlw	0
 10890  00131E  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10891  001320  0E00               	movlw	0
 10892  001322  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;ipv4.c: 176: if (sum > 0xffff) {
 10896  001324  516E               	movf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10897  001326  E103               	bnz	u10980
 10898  001328  056D               	decf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10899  00132A  A0D8               	btfss	status,0,c
 10900  00132C  D012               	goto	l1192
 10901  00132E                     u10980:
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;ipv4.c: 177: sum = sum & 0xffff;
 10905  00132E  0EFF               	movlw	255
 10906  001330  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10907  001332  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10908  001334  0EFF               	movlw	255
 10909  001336  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10910  001338  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10911  00133A  0E00               	movlw	0
 10912  00133C  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10913  00133E  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10914  001340  0E00               	movlw	0
 10915  001342  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10916  001344  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10917                           
 10918                           ;ipv4.c: 178: sum++;
 10919  001346  0E01               	movlw	1
 10920  001348  276B               	addwf	ipv4_calculateHeaderChecksum@sum& (0+255),f,b
 10921  00134A  0E00               	movlw	0
 10922  00134C  236C               	addwfc	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),f,b
 10923  00134E  236D               	addwfc	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),f,b
 10924  001350  236E               	addwfc	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),f,b
 10925  001352                     l1192:
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;ipv4.c: 179: }
 10929                           ;ipv4.c: 180: sum = (sum & 0xffff);
 10930  001352  0EFF               	movlw	255
 10931  001354  156B               	andwf	ipv4_calculateHeaderChecksum@sum& (0+255),w,b
 10932  001356  6F6B               	movwf	ipv4_calculateHeaderChecksum@sum& (0+255),b
 10933  001358  0EFF               	movlw	255
 10934  00135A  156C               	andwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),w,b
 10935  00135C  6F6C               	movwf	(ipv4_calculateHeaderChecksum@sum+1)& (0+255),b
 10936  00135E  0E00               	movlw	0
 10937  001360  156D               	andwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),w,b
 10938  001362  6F6D               	movwf	(ipv4_calculateHeaderChecksum@sum+2)& (0+255),b
 10939  001364  0E00               	movlw	0
 10940  001366  156E               	andwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),w,b
 10941  001368  6F6E               	movwf	(ipv4_calculateHeaderChecksum@sum+3)& (0+255),b
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;ipv4.c: 181: sum = ~sum;
 10945  00136A  C06B  F062         	movff	ipv4_calculateHeaderChecksum@sum,??_ipv4_calculateHeaderChecksum
 10946  00136E  C06C  F063         	movff	ipv4_calculateHeaderChecksum@sum+1,??_ipv4_calculateHeaderChecksum+1
 10947  001372  C06D  F064         	movff	ipv4_calculateHeaderChecksum@sum+2,??_ipv4_calculateHeaderChecksum+2
 10948  001376  C06E  F065         	movff	ipv4_calculateHeaderChecksum@sum+3,??_ipv4_calculateHeaderChecksum+3
 10949  00137A  1F62               	comf	??_ipv4_calculateHeaderChecksum& (0+255),f,b
 10950  00137C  1F63               	comf	(??_ipv4_calculateHeaderChecksum+1)& (0+255),f,b
 10951  00137E  1F64               	comf	(??_ipv4_calculateHeaderChecksum+2)& (0+255),f,b
 10952  001380  1F65               	comf	(??_ipv4_calculateHeaderChecksum+3)& (0+255),f,b
 10953  001382  C062  F06B         	movff	??_ipv4_calculateHeaderChecksum,ipv4_calculateHeaderChecksum@sum
 10954  001386  C063  F06C         	movff	??_ipv4_calculateHeaderChecksum+1,ipv4_calculateHeaderChecksum@sum+1
 10955  00138A  C064  F06D         	movff	??_ipv4_calculateHeaderChecksum+2,ipv4_calculateHeaderChecksum@sum+2
 10956  00138E  C065  F06E         	movff	??_ipv4_calculateHeaderChecksum+3,ipv4_calculateHeaderChecksum@sum+3
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;ipv4.c: 183: header->checksum = sum;
 10960  001392  EE20 F00D          	lfsr	2,13
 10961  001396  5160               	movf	ipv4_calculateHeaderChecksum@header& (0+255),w,b
 10962  001398  26D9               	addwf	fsr2l,f,c
 10963  00139A  5161               	movf	(ipv4_calculateHeaderChecksum@header+1)& (0+255),w,b
 10964  00139C  22DA               	addwfc	fsr2h,f,c
 10965  00139E  C06B  FFDE         	movff	ipv4_calculateHeaderChecksum@sum,postinc2
 10966  0013A2  C06C  FFDD         	movff	ipv4_calculateHeaderChecksum@sum+1,postdec2
 10967                           
 10968                           ; BSR set to: 0
 10969  0013A6  0012               	return		;funcret
 10970  0013A8                     __end_of_ipv4_calculateHeaderChecksum:
 10971                           	opt stack 0
 10972                           tblptru	equ	0xFF8
 10973                           tblptrh	equ	0xFF7
 10974                           tblptrl	equ	0xFF6
 10975                           tablat	equ	0xFF5
 10976                           prodh	equ	0xFF4
 10977                           prodl	equ	0xFF3
 10978                           intcon	equ	0xFF2
 10979                           intcon3	equ	0xFF0
 10980                           indf0	equ	0xFEF
 10981                           postinc0	equ	0xFEE
 10982                           plusw0	equ	0xFEB
 10983                           fsr0h	equ	0xFEA
 10984                           fsr0l	equ	0xFE9
 10985                           wreg	equ	0xFE8
 10986                           indf1	equ	0xFE7
 10987                           postinc1	equ	0xFE6
 10988                           postdec1	equ	0xFE5
 10989                           plusw1	equ	0xFE3
 10990                           fsr1h	equ	0xFE2
 10991                           fsr1l	equ	0xFE1
 10992                           indf2	equ	0xFDF
 10993                           postinc2	equ	0xFDE
 10994                           postdec2	equ	0xFDD
 10995                           plusw2	equ	0xFDB
 10996                           fsr2h	equ	0xFDA
 10997                           fsr2l	equ	0xFD9
 10998                           status	equ	0xFD8
 10999                           
 11000 ;; *************** function _icmp_writeHeaderIntoBuffer *****************
 11001 ;; Defined at:
 11002 ;;		line 183 in file "src/stack/protocols/icmp.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 11005 ;;		 -> icmp_sendEchoReply@icmpMessage(64), 
 11006 ;;  header          8    2[BANK0 ] struct icmpHeader
 11007 ;; Auto vars:     Size  Location     Type
 11008 ;;		None
 11009 ;; Return value:  Size  Location     Type
 11010 ;;                  1    wreg      void 
 11011 ;; Registers used:
 11012 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 11013 ;; Tracked objects:
 11014 ;;		On entry : 0/0
 11015 ;;		On exit  : 0/0
 11016 ;;		Unchanged: 0/0
 11017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11018 ;;      Params:         0      10       0       0       0       0       0       0       0
 11019 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11020 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11021 ;;      Totals:         0      14       0       0       0       0       0       0       0
 11022 ;;Total ram usage:       14 bytes
 11023 ;; Hardware stack levels used:    1
 11024 ;; Hardware stack levels required when called:    4
 11025 ;; This function calls:
 11026 ;;		Nothing
 11027 ;; This function is called by:
 11028 ;;		_icmp_sendEchoReply
 11029 ;; This function uses a non-reentrant model
 11030 ;;
 11031                           
 11032                           	psect	text24
 11033  004BBA                     __ptext24:
 11034                           	opt stack 0
 11035  004BBA                     _icmp_writeHeaderIntoBuffer:
 11036                           	opt stack 21
 11037                           
 11038                           ;icmp.c: 184: *buf = header.typeOfMessage;
 11039                           
 11040                           ; BSR set to: 0
 11041                           ;incstack = 0
 11042  004BBA  C060  FFD9         	movff	icmp_writeHeaderIntoBuffer@buf,fsr2l
 11043  004BBE  C061  FFDA         	movff	icmp_writeHeaderIntoBuffer@buf+1,fsr2h
 11044  004BC2  C062  FFDF         	movff	icmp_writeHeaderIntoBuffer@header,indf2
 11045                           
 11046                           ;icmp.c: 185: *(buf + 1) = header.code;
 11047  004BC6  0100               	movlb	0	; () banked
 11048  004BC8  EE20 F001          	lfsr	2,1
 11049  004BCC  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11050  004BCE  26D9               	addwf	fsr2l,f,c
 11051  004BD0  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11052  004BD2  22DA               	addwfc	fsr2h,f,c
 11053  004BD4  C063  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+1,indf2
 11054                           
 11055                           ; BSR set to: 0
 11056                           ;icmp.c: 186: *(buf + 2) = (header.checksum & 0xff00) >> 8;
 11057  004BD8  EE20 F002          	lfsr	2,2
 11058  004BDC  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11059  004BDE  26D9               	addwf	fsr2l,f,c
 11060  004BE0  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11061  004BE2  22DA               	addwfc	fsr2h,f,c
 11062  004BE4  5165               	movf	(icmp_writeHeaderIntoBuffer@header+3)& (0+255),w,b
 11063  004BE6  6EDF               	movwf	indf2,c
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;icmp.c: 187: *(buf + 3) = header.checksum & 0xff;
 11067  004BE8  EE20 F003          	lfsr	2,3
 11068  004BEC  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11069  004BEE  26D9               	addwf	fsr2l,f,c
 11070  004BF0  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11071  004BF2  22DA               	addwfc	fsr2h,f,c
 11072  004BF4  C064  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+2,indf2
 11073                           
 11074                           ; BSR set to: 0
 11075                           ;icmp.c: 188: *(buf + 4) = (header.headerData & 0xff000000) >> 24;
 11076  004BF8  EE20 F004          	lfsr	2,4
 11077  004BFC  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11078  004BFE  26D9               	addwf	fsr2l,f,c
 11079  004C00  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11080  004C02  22DA               	addwfc	fsr2h,f,c
 11081  004C04  EE10  F066         	lfsr	1,icmp_writeHeaderIntoBuffer@header+4
 11082  004C08  0E00               	movlw	0
 11083  004C0A  14E6               	andwf	postinc1,w,c
 11084  004C0C  6F6A               	movwf	??_icmp_writeHeaderIntoBuffer& (0+255),b
 11085  004C0E  0E00               	movlw	0
 11086  004C10  14E6               	andwf	postinc1,w,c
 11087  004C12  6F6B               	movwf	(??_icmp_writeHeaderIntoBuffer+1)& (0+255),b
 11088  004C14  0E00               	movlw	0
 11089  004C16  14E6               	andwf	postinc1,w,c
 11090  004C18  6F6C               	movwf	(??_icmp_writeHeaderIntoBuffer+2)& (0+255),b
 11091  004C1A  0EFF               	movlw	255
 11092  004C1C  14E6               	andwf	postinc1,w,c
 11093  004C1E  6F6D               	movwf	(??_icmp_writeHeaderIntoBuffer+3)& (0+255),b
 11094  004C20  0E19               	movlw	25
 11095  004C22  D005               	goto	u11060
 11096  004C24                     u11065:
 11097  004C24  90D8               	bcf	status,0,c
 11098  004C26  336D               	rrcf	(??_icmp_writeHeaderIntoBuffer+3)& (0+255),f,b
 11099  004C28  336C               	rrcf	(??_icmp_writeHeaderIntoBuffer+2)& (0+255),f,b
 11100  004C2A  336B               	rrcf	(??_icmp_writeHeaderIntoBuffer+1)& (0+255),f,b
 11101  004C2C  336A               	rrcf	??_icmp_writeHeaderIntoBuffer& (0+255),f,b
 11102  004C2E                     u11060:
 11103  004C2E  2EE8               	decfsz	wreg,f,c
 11104  004C30  D7F9               	goto	u11065
 11105  004C32  516A               	movf	??_icmp_writeHeaderIntoBuffer& (0+255),w,b
 11106  004C34  6EDF               	movwf	indf2,c
 11107                           
 11108                           ; BSR set to: 0
 11109                           ;icmp.c: 189: *(buf + 5) = (header.headerData & 0x00ff0000) >> 16;
 11110  004C36  EE20 F005          	lfsr	2,5
 11111  004C3A  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11112  004C3C  26D9               	addwf	fsr2l,f,c
 11113  004C3E  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11114  004C40  22DA               	addwfc	fsr2h,f,c
 11115  004C42  C068  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+6,indf2
 11116                           
 11117                           ; BSR set to: 0
 11118                           ;icmp.c: 190: *(buf + 6) = (header.headerData & 0x0000ff00) >> 8;
 11119  004C46  EE20 F006          	lfsr	2,6
 11120  004C4A  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11121  004C4C  26D9               	addwf	fsr2l,f,c
 11122  004C4E  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11123  004C50  22DA               	addwfc	fsr2h,f,c
 11124  004C52  C067  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+5,indf2
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;icmp.c: 191: *(buf + 7) = (header.headerData & 0x000000ff);
 11128  004C56  EE20 F007          	lfsr	2,7
 11129  004C5A  5160               	movf	icmp_writeHeaderIntoBuffer@buf& (0+255),w,b
 11130  004C5C  26D9               	addwf	fsr2l,f,c
 11131  004C5E  5161               	movf	(icmp_writeHeaderIntoBuffer@buf+1)& (0+255),w,b
 11132  004C60  22DA               	addwfc	fsr2h,f,c
 11133  004C62  C066  FFDF         	movff	icmp_writeHeaderIntoBuffer@header+4,indf2
 11134                           
 11135                           ; BSR set to: 0
 11136  004C66  0012               	return		;funcret
 11137  004C68                     __end_of_icmp_writeHeaderIntoBuffer:
 11138                           	opt stack 0
 11139                           tblptru	equ	0xFF8
 11140                           tblptrh	equ	0xFF7
 11141                           tblptrl	equ	0xFF6
 11142                           tablat	equ	0xFF5
 11143                           prodh	equ	0xFF4
 11144                           prodl	equ	0xFF3
 11145                           intcon	equ	0xFF2
 11146                           intcon3	equ	0xFF0
 11147                           indf0	equ	0xFEF
 11148                           postinc0	equ	0xFEE
 11149                           plusw0	equ	0xFEB
 11150                           fsr0h	equ	0xFEA
 11151                           fsr0l	equ	0xFE9
 11152                           wreg	equ	0xFE8
 11153                           indf1	equ	0xFE7
 11154                           postinc1	equ	0xFE6
 11155                           postdec1	equ	0xFE5
 11156                           plusw1	equ	0xFE3
 11157                           fsr1h	equ	0xFE2
 11158                           fsr1l	equ	0xFE1
 11159                           indf2	equ	0xFDF
 11160                           postinc2	equ	0xFDE
 11161                           postdec2	equ	0xFDD
 11162                           plusw2	equ	0xFDB
 11163                           fsr2h	equ	0xFDA
 11164                           fsr2l	equ	0xFD9
 11165                           status	equ	0xFD8
 11166                           
 11167 ;; *************** function _icmp_calculateChecksumBuf *****************
 11168 ;; Defined at:
 11169 ;;		line 100 in file "src/stack/protocols/icmp.c"
 11170 ;; Parameters:    Size  Location     Type
 11171 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 11172 ;;		 -> icmp_sendEchoReply@icmpMessage(64), 
 11173 ;;  ipPayloadLen    2    2[BANK0 ] unsigned int 
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;  foo             2    9[BANK0 ] unsigned int 
 11176 ;;  i               2   11[BANK0 ] unsigned int 
 11177 ;;  sum             4   13[BANK0 ] unsigned long 
 11178 ;;  carry           1    8[BANK0 ] unsigned char 
 11179 ;; Return value:  Size  Location     Type
 11180 ;;                  2    0[BANK0 ] unsigned int 
 11181 ;; Registers used:
 11182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11183 ;; Tracked objects:
 11184 ;;		On entry : 0/0
 11185 ;;		On exit  : 0/0
 11186 ;;		Unchanged: 0/0
 11187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11188 ;;      Params:         0       4       0       0       0       0       0       0       0
 11189 ;;      Locals:         0       9       0       0       0       0       0       0       0
 11190 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11191 ;;      Totals:         0      17       0       0       0       0       0       0       0
 11192 ;;Total ram usage:       17 bytes
 11193 ;; Hardware stack levels used:    1
 11194 ;; Hardware stack levels required when called:    4
 11195 ;; This function calls:
 11196 ;;		Nothing
 11197 ;; This function is called by:
 11198 ;;		_icmp_sendEchoReply
 11199 ;; This function uses a non-reentrant model
 11200 ;;
 11201                           
 11202                           	psect	text25
 11203  0040FE                     __ptext25:
 11204                           	opt stack 0
 11205  0040FE                     _icmp_calculateChecksumBuf:
 11206                           	opt stack 21
 11207                           
 11208                           ;icmp.c: 101: ipPayloadLength += 4;
 11209                           
 11210                           ; BSR set to: 0
 11211                           ;incstack = 0
 11212  0040FE  0E04               	movlw	4
 11213  004100  0100               	movlb	0	; () banked
 11214  004102  2762               	addwf	icmp_calculateChecksumBuf@ipPayloadLength& (0+255),f,b
 11215  004104  0E00               	movlw	0
 11216  004106  2363               	addwfc	(icmp_calculateChecksumBuf@ipPayloadLength+1)& (0+255),f,b
 11217                           
 11218                           ; BSR set to: 0
 11219                           ;icmp.c: 102: uint32_t sum = 0;
 11220  004108  0E00               	movlw	0
 11221  00410A  6F6D               	movwf	icmp_calculateChecksumBuf@sum& (0+255),b
 11222  00410C  0E00               	movlw	0
 11223  00410E  6F6E               	movwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),b
 11224  004110  0E00               	movlw	0
 11225  004112  6F6F               	movwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),b
 11226  004114  0E00               	movlw	0
 11227  004116  6F70               	movwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),b
 11228                           
 11229                           ; BSR set to: 0
 11230                           ;icmp.c: 104: for (uint16_t i = 0; i < ipPayloadLength / 2; i++) {
 11231  004118  0E00               	movlw	0
 11232  00411A  6F6C               	movwf	(icmp_calculateChecksumBuf@i+1)& (0+255),b
 11233  00411C  0E00               	movlw	0
 11234  00411E  6F6B               	movwf	icmp_calculateChecksumBuf@i& (0+255),b
 11235  004120  D029               	goto	l1332
 11236  004122                     
 11237                           ; BSR set to: 0
 11238                           ;icmp.c: 105: uint16_t foo = 0;
 11239                           
 11240                           ; BSR set to: 0
 11241  004122  0E00               	movlw	0
 11242  004124  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 11243  004126  0E00               	movlw	0
 11244  004128  6F69               	movwf	icmp_calculateChecksumBuf@foo& (0+255),b
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;icmp.c: 106: foo = (uint16_t) (*(buf++) << 8);
 11248  00412A  C060  FFD9         	movff	icmp_calculateChecksumBuf@buf,fsr2l
 11249  00412E  C061  FFDA         	movff	icmp_calculateChecksumBuf@buf+1,fsr2h
 11250  004132  50DF               	movf	indf2,w,c
 11251  004134  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 11252  004136  6B69               	clrf	icmp_calculateChecksumBuf@foo& (0+255),b
 11253                           
 11254                           ; BSR set to: 0
 11255  004138  4B60               	infsnz	icmp_calculateChecksumBuf@buf& (0+255),f,b
 11256  00413A  2B61               	incf	(icmp_calculateChecksumBuf@buf+1)& (0+255),f,b
 11257                           
 11258                           ; BSR set to: 0
 11259                           ;icmp.c: 107: foo |= *(buf++);
 11260  00413C  C060  FFD9         	movff	icmp_calculateChecksumBuf@buf,fsr2l
 11261  004140  C061  FFDA         	movff	icmp_calculateChecksumBuf@buf+1,fsr2h
 11262  004144  50DF               	movf	indf2,w,c
 11263  004146  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 11264  004148  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 11265  00414A  1369               	iorwf	icmp_calculateChecksumBuf@foo& (0+255),f,b
 11266                           
 11267                           ; BSR set to: 0
 11268  00414C  4B60               	infsnz	icmp_calculateChecksumBuf@buf& (0+255),f,b
 11269  00414E  2B61               	incf	(icmp_calculateChecksumBuf@buf+1)& (0+255),f,b
 11270                           
 11271                           ;icmp.c: 108: if (i == 1) {
 11272  004150  056B               	decf	icmp_calculateChecksumBuf@i& (0+255),w,b
 11273  004152  116C               	iorwf	(icmp_calculateChecksumBuf@i+1)& (0+255),w,b
 11274  004154  A4D8               	btfss	status,2,c
 11275  004156  D004               	goto	l1334
 11276                           
 11277                           ; BSR set to: 0
 11278                           ;icmp.c: 109: foo = 0x0000;
 11279  004158  0E00               	movlw	0
 11280  00415A  6F6A               	movwf	(icmp_calculateChecksumBuf@foo+1)& (0+255),b
 11281  00415C  0E00               	movlw	0
 11282  00415E  6F69               	movwf	icmp_calculateChecksumBuf@foo& (0+255),b
 11283  004160                     l1334:
 11284                           
 11285                           ; BSR set to: 0
 11286                           ;icmp.c: 110: }
 11287                           ;icmp.c: 111: sum += foo;
 11288                           
 11289                           ; BSR set to: 0
 11290  004160  5169               	movf	icmp_calculateChecksumBuf@foo& (0+255),w,b
 11291  004162  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 11292  004164  516A               	movf	(icmp_calculateChecksumBuf@foo+1)& (0+255),w,b
 11293  004166  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 11294  004168  0E00               	movlw	0
 11295  00416A  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 11296  00416C  0E00               	movlw	0
 11297  00416E  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 11298                           
 11299                           ; BSR set to: 0
 11300  004170  4B6B               	infsnz	icmp_calculateChecksumBuf@i& (0+255),f,b
 11301  004172  2B6C               	incf	(icmp_calculateChecksumBuf@i+1)& (0+255),f,b
 11302  004174                     l1332:
 11303                           
 11304                           ; BSR set to: 0
 11305                           
 11306                           ; BSR set to: 0
 11307  004174  90D8               	bcf	status,0,c
 11308  004176  3163               	rrcf	(icmp_calculateChecksumBuf@ipPayloadLength+1)& (0+255),w,b
 11309  004178  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 11310  00417A  3162               	rrcf	icmp_calculateChecksumBuf@ipPayloadLength& (0+255),w,b
 11311  00417C  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 11312  00417E  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 11313  004180  5D6B               	subwf	icmp_calculateChecksumBuf@i& (0+255),w,b
 11314  004182  5165               	movf	(??_icmp_calculateChecksumBuf+1)& (0+255),w,b
 11315  004184  596C               	subwfb	(icmp_calculateChecksumBuf@i+1)& (0+255),w,b
 11316  004186  A0D8               	btfss	status,0,c
 11317  004188  D7CC               	goto	l1333
 11318                           
 11319                           ; BSR set to: 0
 11320                           ;icmp.c: 112: }
 11321                           ;icmp.c: 114: uint8_t carry = (sum & 0xffff0000) >> 16;
 11322                           
 11323                           ; BSR set to: 0
 11324  00418A  0E00               	movlw	0
 11325  00418C  156D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 11326  00418E  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 11327  004190  0E00               	movlw	0
 11328  004192  156E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 11329  004194  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 11330  004196  0EFF               	movlw	255
 11331  004198  156F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 11332  00419A  6F66               	movwf	(??_icmp_calculateChecksumBuf+2)& (0+255),b
 11333  00419C  0EFF               	movlw	255
 11334  00419E  1570               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 11335  0041A0  6F67               	movwf	(??_icmp_calculateChecksumBuf+3)& (0+255),b
 11336  0041A2  0E11               	movlw	17
 11337  0041A4  D005               	goto	u11030
 11338  0041A6                     u11035:
 11339  0041A6  90D8               	bcf	status,0,c
 11340  0041A8  3367               	rrcf	(??_icmp_calculateChecksumBuf+3)& (0+255),f,b
 11341  0041AA  3366               	rrcf	(??_icmp_calculateChecksumBuf+2)& (0+255),f,b
 11342  0041AC  3365               	rrcf	(??_icmp_calculateChecksumBuf+1)& (0+255),f,b
 11343  0041AE  3364               	rrcf	??_icmp_calculateChecksumBuf& (0+255),f,b
 11344  0041B0                     u11030:
 11345  0041B0  2EE8               	decfsz	wreg,f,c
 11346  0041B2  D7F9               	goto	u11035
 11347  0041B4  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 11348  0041B6  6F68               	movwf	icmp_calculateChecksumBuf@carry& (0+255),b
 11349                           
 11350                           ;icmp.c: 115: sum &= 0xffff;
 11351  0041B8  0EFF               	movlw	255
 11352  0041BA  176D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 11353  0041BC  0EFF               	movlw	255
 11354  0041BE  176E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 11355  0041C0  0E00               	movlw	0
 11356  0041C2  176F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 11357  0041C4  0E00               	movlw	0
 11358  0041C6  1770               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 11359                           
 11360                           ;icmp.c: 116: sum += carry;
 11361  0041C8  5168               	movf	icmp_calculateChecksumBuf@carry& (0+255),w,b
 11362  0041CA  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 11363  0041CC  0E00               	movlw	0
 11364  0041CE  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 11365  0041D0  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 11366  0041D2  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 11367                           
 11368                           ;icmp.c: 117: if (sum > 0xffff) {
 11369  0041D4  5170               	movf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 11370  0041D6  E103               	bnz	u11040
 11371  0041D8  056F               	decf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 11372  0041DA  A0D8               	btfss	status,0,c
 11373  0041DC  D025               	goto	l1336
 11374  0041DE                     u11040:
 11375                           
 11376                           ; BSR set to: 0
 11377                           ;icmp.c: 118: sum += ((sum & 0xffff0000) >> 16);
 11378  0041DE  0E00               	movlw	0
 11379  0041E0  156D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 11380  0041E2  6F64               	movwf	??_icmp_calculateChecksumBuf& (0+255),b
 11381  0041E4  0E00               	movlw	0
 11382  0041E6  156E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 11383  0041E8  6F65               	movwf	(??_icmp_calculateChecksumBuf+1)& (0+255),b
 11384  0041EA  0EFF               	movlw	255
 11385  0041EC  156F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),w,b
 11386  0041EE  6F66               	movwf	(??_icmp_calculateChecksumBuf+2)& (0+255),b
 11387  0041F0  0EFF               	movlw	255
 11388  0041F2  1570               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),w,b
 11389  0041F4  6F67               	movwf	(??_icmp_calculateChecksumBuf+3)& (0+255),b
 11390  0041F6  0E11               	movlw	17
 11391  0041F8  D005               	goto	u11050
 11392  0041FA                     u11055:
 11393  0041FA  90D8               	bcf	status,0,c
 11394  0041FC  3367               	rrcf	(??_icmp_calculateChecksumBuf+3)& (0+255),f,b
 11395  0041FE  3366               	rrcf	(??_icmp_calculateChecksumBuf+2)& (0+255),f,b
 11396  004200  3365               	rrcf	(??_icmp_calculateChecksumBuf+1)& (0+255),f,b
 11397  004202  3364               	rrcf	??_icmp_calculateChecksumBuf& (0+255),f,b
 11398  004204                     u11050:
 11399  004204  2EE8               	decfsz	wreg,f,c
 11400  004206  D7F9               	goto	u11055
 11401  004208  5164               	movf	??_icmp_calculateChecksumBuf& (0+255),w,b
 11402  00420A  276D               	addwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 11403  00420C  5165               	movf	(??_icmp_calculateChecksumBuf+1)& (0+255),w,b
 11404  00420E  236E               	addwfc	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 11405  004210  5166               	movf	(??_icmp_calculateChecksumBuf+2)& (0+255),w,b
 11406  004212  236F               	addwfc	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 11407  004214  5167               	movf	(??_icmp_calculateChecksumBuf+3)& (0+255),w,b
 11408  004216  2370               	addwfc	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 11409                           
 11410                           ;icmp.c: 119: sum &= 0xffff;
 11411  004218  0EFF               	movlw	255
 11412  00421A  176D               	andwf	icmp_calculateChecksumBuf@sum& (0+255),f,b
 11413  00421C  0EFF               	movlw	255
 11414  00421E  176E               	andwf	(icmp_calculateChecksumBuf@sum+1)& (0+255),f,b
 11415  004220  0E00               	movlw	0
 11416  004222  176F               	andwf	(icmp_calculateChecksumBuf@sum+2)& (0+255),f,b
 11417  004224  0E00               	movlw	0
 11418  004226  1770               	andwf	(icmp_calculateChecksumBuf@sum+3)& (0+255),f,b
 11419  004228                     l1336:
 11420                           
 11421                           ; BSR set to: 0
 11422                           ;icmp.c: 120: }
 11423                           ;icmp.c: 122: return ~sum;
 11424  004228  1D6D               	comf	icmp_calculateChecksumBuf@sum& (0+255),w,b
 11425  00422A  6F60               	movwf	?_icmp_calculateChecksumBuf& (0+255),b
 11426  00422C  1D6E               	comf	(icmp_calculateChecksumBuf@sum+1)& (0+255),w,b
 11427  00422E  6F61               	movwf	(?_icmp_calculateChecksumBuf+1)& (0+255),b
 11428  004230  0012               	return	
 11429  004232                     __end_of_icmp_calculateChecksumBuf:
 11430                           	opt stack 0
 11431                           tblptru	equ	0xFF8
 11432                           tblptrh	equ	0xFF7
 11433                           tblptrl	equ	0xFF6
 11434                           tablat	equ	0xFF5
 11435                           prodh	equ	0xFF4
 11436                           prodl	equ	0xFF3
 11437                           intcon	equ	0xFF2
 11438                           intcon3	equ	0xFF0
 11439                           indf0	equ	0xFEF
 11440                           postinc0	equ	0xFEE
 11441                           plusw0	equ	0xFEB
 11442                           fsr0h	equ	0xFEA
 11443                           fsr0l	equ	0xFE9
 11444                           wreg	equ	0xFE8
 11445                           indf1	equ	0xFE7
 11446                           postinc1	equ	0xFE6
 11447                           postdec1	equ	0xFE5
 11448                           plusw1	equ	0xFE3
 11449                           fsr1h	equ	0xFE2
 11450                           fsr1l	equ	0xFE1
 11451                           indf2	equ	0xFDF
 11452                           postinc2	equ	0xFDE
 11453                           postdec2	equ	0xFDD
 11454                           plusw2	equ	0xFDB
 11455                           fsr2h	equ	0xFDA
 11456                           fsr2l	equ	0xFD9
 11457                           status	equ	0xFD8
 11458                           
 11459 ;; *************** function _icmp_parseHeader *****************
 11460 ;; Defined at:
 11461 ;;		line 58 in file "src/stack/protocols/icmp.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;  ipPayload       9   20[BANK0 ] struct memoryField
 11464 ;;  icmpHeader      2   29[BANK0 ] PTR struct icmpHeader
 11465 ;;		 -> icmp_handleNewPacket@icmpHeader(8), 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;		None
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  3   20[BANK0 ] struct error
 11470 ;; Registers used:
 11471 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11477 ;;      Params:         0      11       0       0       0       0       0       0       0
 11478 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11479 ;;      Temps:          0       5       0       0       0       0       0       0       0
 11480 ;;      Totals:         0      16       0       0       0       0       0       0       0
 11481 ;;Total ram usage:       16 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; Hardware stack levels required when called:    8
 11484 ;; This function calls:
 11485 ;;		_ethernetController_streamFromRXBuffer
 11486 ;; This function is called by:
 11487 ;;		_icmp_handleNewPacket
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           	psect	text26
 11492  0030FC                     __ptext26:
 11493                           	opt stack 0
 11494  0030FC                     _icmp_parseHeader:
 11495                           	opt stack 18
 11496                           
 11497                           ;icmp.c: 59: ethernetController_streamFromRXBuffer(0, ipPayload.start);
 11498                           
 11499                           ; BSR set to: 0
 11500                           ;incstack = 0
 11501  0030FC  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11502  003100  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11503  003104  0E00               	movlw	0
 11504  003106  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11505                           
 11506                           ;icmp.c: 60: icmpHeader->typeOfMessage = ethernetController_streamFromRXBuffer(1, ipPayl
      +                          oad.start);
 11507  00310A  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11508  00310E  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11509  003112  0E01               	movlw	1
 11510  003114  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11511  003118  C07D  FFD9         	movff	icmp_parseHeader@icmpHeader,fsr2l
 11512  00311C  C07E  FFDA         	movff	icmp_parseHeader@icmpHeader+1,fsr2h
 11513  003120  6EDF               	movwf	indf2,c
 11514                           
 11515                           ;icmp.c: 61: icmpHeader->code = ethernetController_streamFromRXBuffer(1, ipPayload.start
      +                          );
 11516  003122  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11517  003126  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11518  00312A  0E01               	movlw	1
 11519  00312C  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11520  003130  0100               	movlb	0	; () banked
 11521  003132  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11522  003134  EE20 F001          	lfsr	2,1
 11523  003138  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11524  00313A  26D9               	addwf	fsr2l,f,c
 11525  00313C  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11526  00313E  22DA               	addwfc	fsr2h,f,c
 11527  003140  C07F  FFDF         	movff	??_icmp_parseHeader,indf2
 11528                           
 11529                           ;icmp.c: 62: icmpHeader->checksum = ((uint32_t) ethernetController_streamFromRXBuffer(1,
      +                           ipPayload.start) << 8);
 11530  003144  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11531  003148  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11532  00314C  0E01               	movlw	1
 11533  00314E  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11534  003152  0100               	movlb	0	; () banked
 11535  003154  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11536  003156  517F               	movf	??_icmp_parseHeader& (0+255),w,b
 11537  003158  6F81               	movwf	(??_icmp_parseHeader+2)& (0+255),b
 11538  00315A  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 11539  00315C  EE20 F002          	lfsr	2,2
 11540  003160  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11541  003162  26D9               	addwf	fsr2l,f,c
 11542  003164  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11543  003166  22DA               	addwfc	fsr2h,f,c
 11544  003168  C080  FFDE         	movff	??_icmp_parseHeader+1,postinc2
 11545  00316C  C081  FFDD         	movff	??_icmp_parseHeader+2,postdec2
 11546                           
 11547                           ;icmp.c: 63: icmpHeader->checksum |= ethernetController_streamFromRXBuffer(1, ipPayload.
      +                          start);
 11548  003170  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11549  003174  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11550  003178  0E01               	movlw	1
 11551  00317A  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11552  00317E  0100               	movlb	0	; () banked
 11553  003180  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11554  003182  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 11555  003184  EE20 F002          	lfsr	2,2
 11556  003188  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11557  00318A  26D9               	addwf	fsr2l,f,c
 11558  00318C  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11559  00318E  22DA               	addwfc	fsr2h,f,c
 11560  003190  517F               	movf	??_icmp_parseHeader& (0+255),w,b
 11561  003192  12DE               	iorwf	postinc2,f,c
 11562  003194  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 11563  003196  12DD               	iorwf	postdec2,f,c
 11564                           
 11565                           ;icmp.c: 65: icmpHeader->headerData = ((uint32_t) ethernetController_streamFromRXBuffer(
      +                          1, ipPayload.start) << 24);
 11566  003198  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11567  00319C  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11568  0031A0  0E01               	movlw	1
 11569  0031A2  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11570  0031A6  0100               	movlb	0	; () banked
 11571  0031A8  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11572  0031AA  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 11573  0031AE  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11574  0031B0  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 11575  0031B2  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 11576  0031B4  C080  F083         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+4
 11577  0031B8  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 11578  0031BA  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11579  0031BC  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 11580  0031BE  EE20 F004          	lfsr	2,4
 11581  0031C2  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11582  0031C4  26D9               	addwf	fsr2l,f,c
 11583  0031C6  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11584  0031C8  22DA               	addwfc	fsr2h,f,c
 11585  0031CA  C080  FFDE         	movff	??_icmp_parseHeader+1,postinc2
 11586  0031CE  C081  FFDE         	movff	??_icmp_parseHeader+2,postinc2
 11587  0031D2  C082  FFDE         	movff	??_icmp_parseHeader+3,postinc2
 11588  0031D6  C083  FFDE         	movff	??_icmp_parseHeader+4,postinc2
 11589                           
 11590                           ;icmp.c: 66: icmpHeader->headerData |= ((uint32_t) ethernetController_streamFromRXBuffer
      +                          (1, ipPayload.start) << 16);
 11591  0031DA  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11592  0031DE  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11593  0031E2  0E01               	movlw	1
 11594  0031E4  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11595  0031E8  0100               	movlb	0	; () banked
 11596  0031EA  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11597  0031EC  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 11598  0031F0  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11599  0031F2  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 11600  0031F4  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 11601  0031F6  C081  F083         	movff	??_icmp_parseHeader+2,??_icmp_parseHeader+4
 11602  0031FA  C080  F082         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+3
 11603  0031FE  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11604  003200  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 11605  003202  EE20 F004          	lfsr	2,4
 11606  003206  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11607  003208  26D9               	addwf	fsr2l,f,c
 11608  00320A  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11609  00320C  22DA               	addwfc	fsr2h,f,c
 11610  00320E  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 11611  003210  12DE               	iorwf	postinc2,f,c
 11612  003212  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 11613  003214  12DE               	iorwf	postinc2,f,c
 11614  003216  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 11615  003218  12DE               	iorwf	postinc2,f,c
 11616  00321A  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 11617  00321C  12DE               	iorwf	postinc2,f,c
 11618                           
 11619                           ;icmp.c: 67: icmpHeader->headerData |= ((uint32_t) ethernetController_streamFromRXBuffer
      +                          (1, ipPayload.start) << 8);
 11620  00321E  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11621  003222  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11622  003226  0E01               	movlw	1
 11623  003228  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11624  00322C  0100               	movlb	0	; () banked
 11625  00322E  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11626  003230  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 11627  003234  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11628  003236  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 11629  003238  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 11630  00323A  C082  F083         	movff	??_icmp_parseHeader+3,??_icmp_parseHeader+4
 11631  00323E  C081  F082         	movff	??_icmp_parseHeader+2,??_icmp_parseHeader+3
 11632  003242  C080  F081         	movff	??_icmp_parseHeader+1,??_icmp_parseHeader+2
 11633  003246  6B80               	clrf	(??_icmp_parseHeader+1)& (0+255),b
 11634  003248  EE20 F004          	lfsr	2,4
 11635  00324C  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11636  00324E  26D9               	addwf	fsr2l,f,c
 11637  003250  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11638  003252  22DA               	addwfc	fsr2h,f,c
 11639  003254  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 11640  003256  12DE               	iorwf	postinc2,f,c
 11641  003258  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 11642  00325A  12DE               	iorwf	postinc2,f,c
 11643  00325C  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 11644  00325E  12DE               	iorwf	postinc2,f,c
 11645  003260  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 11646  003262  12DE               	iorwf	postinc2,f,c
 11647                           
 11648                           ;icmp.c: 68: icmpHeader->headerData |= ethernetController_streamFromRXBuffer(1, ipPayloa
      +                          d.start);
 11649  003264  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11650  003268  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11651  00326C  0E01               	movlw	1
 11652  00326E  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11653  003272  0100               	movlb	0	; () banked
 11654  003274  6F7F               	movwf	??_icmp_parseHeader& (0+255),b
 11655  003276  C07F  F080         	movff	??_icmp_parseHeader,??_icmp_parseHeader+1
 11656  00327A  6B81               	clrf	(??_icmp_parseHeader+2)& (0+255),b
 11657  00327C  6B82               	clrf	(??_icmp_parseHeader+3)& (0+255),b
 11658  00327E  6B83               	clrf	(??_icmp_parseHeader+4)& (0+255),b
 11659  003280  EE20 F004          	lfsr	2,4
 11660  003284  517D               	movf	icmp_parseHeader@icmpHeader& (0+255),w,b
 11661  003286  26D9               	addwf	fsr2l,f,c
 11662  003288  517E               	movf	(icmp_parseHeader@icmpHeader+1)& (0+255),w,b
 11663  00328A  22DA               	addwfc	fsr2h,f,c
 11664  00328C  5180               	movf	(??_icmp_parseHeader+1)& (0+255),w,b
 11665  00328E  12DE               	iorwf	postinc2,f,c
 11666  003290  5181               	movf	(??_icmp_parseHeader+2)& (0+255),w,b
 11667  003292  12DE               	iorwf	postinc2,f,c
 11668  003294  5182               	movf	(??_icmp_parseHeader+3)& (0+255),w,b
 11669  003296  12DE               	iorwf	postinc2,f,c
 11670  003298  5183               	movf	(??_icmp_parseHeader+4)& (0+255),w,b
 11671  00329A  12DE               	iorwf	postinc2,f,c
 11672                           
 11673                           ;icmp.c: 70: ethernetController_streamFromRXBuffer(2, ipPayload.start);
 11674  00329C  C074  F06F         	movff	icmp_parseHeader@ipPayload,ethernetController_streamFromRXBuffer@startAddress
 11675  0032A0  C075  F070         	movff	icmp_parseHeader@ipPayload+1,ethernetController_streamFromRXBuffer@startAddress+1
 11676  0032A4  0E02               	movlw	2
 11677  0032A6  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11678  0032AA  0012               	return		;funcret
 11679  0032AC                     __end_of_icmp_parseHeader:
 11680                           	opt stack 0
 11681                           tblptru	equ	0xFF8
 11682                           tblptrh	equ	0xFF7
 11683                           tblptrl	equ	0xFF6
 11684                           tablat	equ	0xFF5
 11685                           prodh	equ	0xFF4
 11686                           prodl	equ	0xFF3
 11687                           intcon	equ	0xFF2
 11688                           intcon3	equ	0xFF0
 11689                           indf0	equ	0xFEF
 11690                           postinc0	equ	0xFEE
 11691                           plusw0	equ	0xFEB
 11692                           fsr0h	equ	0xFEA
 11693                           fsr0l	equ	0xFE9
 11694                           wreg	equ	0xFE8
 11695                           indf1	equ	0xFE7
 11696                           postinc1	equ	0xFE6
 11697                           postdec1	equ	0xFE5
 11698                           plusw1	equ	0xFE3
 11699                           fsr1h	equ	0xFE2
 11700                           fsr1l	equ	0xFE1
 11701                           indf2	equ	0xFDF
 11702                           postinc2	equ	0xFDE
 11703                           postdec2	equ	0xFDD
 11704                           plusw2	equ	0xFDB
 11705                           fsr2h	equ	0xFDA
 11706                           fsr2l	equ	0xFD9
 11707                           status	equ	0xFD8
 11708                           
 11709 ;; *************** function _icmp_calculateChecksum *****************
 11710 ;; Defined at:
 11711 ;;		line 73 in file "src/stack/protocols/icmp.c"
 11712 ;; Parameters:    Size  Location     Type
 11713 ;;  ipPayload       9   20[BANK0 ] struct memoryField
 11714 ;; Auto vars:     Size  Location     Type
 11715 ;;  foo             2   34[BANK0 ] unsigned int 
 11716 ;;  i               2   36[BANK0 ] unsigned int 
 11717 ;;  sum             4   38[BANK0 ] unsigned long 
 11718 ;;  carry           1   33[BANK0 ] unsigned char 
 11719 ;; Return value:  Size  Location     Type
 11720 ;;                  2   20[BANK0 ] unsigned int 
 11721 ;; Registers used:
 11722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11723 ;; Tracked objects:
 11724 ;;		On entry : 0/0
 11725 ;;		On exit  : 0/0
 11726 ;;		Unchanged: 0/0
 11727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11728 ;;      Params:         0       9       0       0       0       0       0       0       0
 11729 ;;      Locals:         0       9       0       0       0       0       0       0       0
 11730 ;;      Temps:          0       4       0       0       0       0       0       0       0
 11731 ;;      Totals:         0      22       0       0       0       0       0       0       0
 11732 ;;Total ram usage:       22 bytes
 11733 ;; Hardware stack levels used:    1
 11734 ;; Hardware stack levels required when called:    8
 11735 ;; This function calls:
 11736 ;;		_ethernetController_streamFromRXBuffer
 11737 ;; This function is called by:
 11738 ;;		_icmp_handleNewPacket
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text27
 11743  003BCE                     __ptext27:
 11744                           	opt stack 0
 11745  003BCE                     _icmp_calculateChecksum:
 11746                           	opt stack 18
 11747                           
 11748                           ;icmp.c: 74: ipPayload.length += 4;
 11749                           
 11750                           ;incstack = 0
 11751  003BCE  0E04               	movlw	4
 11752  003BD0  0100               	movlb	0	; () banked
 11753  003BD2  2778               	addwf	(icmp_calculateChecksum@ipPayload+4)& (0+255),f,b
 11754  003BD4  0E00               	movlw	0
 11755  003BD6  2379               	addwfc	(icmp_calculateChecksum@ipPayload+5)& (0+255),f,b
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;icmp.c: 75: uint32_t sum = 0;
 11759  003BD8  0E00               	movlw	0
 11760  003BDA  6F86               	movwf	icmp_calculateChecksum@sum& (0+255),b
 11761  003BDC  0E00               	movlw	0
 11762  003BDE  6F87               	movwf	(icmp_calculateChecksum@sum+1)& (0+255),b
 11763  003BE0  0E00               	movlw	0
 11764  003BE2  6F88               	movwf	(icmp_calculateChecksum@sum+2)& (0+255),b
 11765  003BE4  0E00               	movlw	0
 11766  003BE6  6F89               	movwf	(icmp_calculateChecksum@sum+3)& (0+255),b
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;icmp.c: 77: ethernetController_streamFromRXBuffer(0, ipPayload.start);
 11770  003BE8  C074  F06F         	movff	icmp_calculateChecksum@ipPayload,ethernetController_streamFromRXBuffer@startAddre
      +                          ss
 11771  003BEC  C075  F070         	movff	icmp_calculateChecksum@ipPayload+1,ethernetController_streamFromRXBuffer@startAdd
      +                          ress+1
 11772  003BF0  0E00               	movlw	0
 11773  003BF2  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11774                           
 11775                           ;icmp.c: 78: for (uint16_t i = 0; i < ipPayload.length / 2; i++) {
 11776  003BF6  0E00               	movlw	0
 11777  003BF8  0100               	movlb	0	; () banked
 11778  003BFA  6F85               	movwf	(icmp_calculateChecksum@i+1)& (0+255),b
 11779  003BFC  0E00               	movlw	0
 11780  003BFE  6F84               	movwf	icmp_calculateChecksum@i& (0+255),b
 11781  003C00  D02B               	goto	l1324
 11782  003C02                     
 11783                           ; BSR set to: 0
 11784                           ;icmp.c: 79: uint16_t foo = 0;
 11785                           
 11786                           ; BSR set to: 0
 11787  003C02  0E00               	movlw	0
 11788  003C04  6F83               	movwf	(icmp_calculateChecksum@foo+1)& (0+255),b
 11789  003C06  0E00               	movlw	0
 11790  003C08  6F82               	movwf	icmp_calculateChecksum@foo& (0+255),b
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;icmp.c: 80: foo = ((uint16_t) ethernetController_streamFromRXBuffer(1, ipPayload.start)
      +                           << 8);
 11794  003C0A  C074  F06F         	movff	icmp_calculateChecksum@ipPayload,ethernetController_streamFromRXBuffer@startAddre
      +                          ss
 11795  003C0E  C075  F070         	movff	icmp_calculateChecksum@ipPayload+1,ethernetController_streamFromRXBuffer@startAdd
      +                          ress+1
 11796  003C12  0E01               	movlw	1
 11797  003C14  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11798  003C18  0100               	movlb	0	; () banked
 11799  003C1A  6F83               	movwf	(icmp_calculateChecksum@foo+1)& (0+255),b
 11800  003C1C  6B82               	clrf	icmp_calculateChecksum@foo& (0+255),b
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;icmp.c: 81: foo |= ethernetController_streamFromRXBuffer(1, ipPayload.start);
 11804  003C1E  C074  F06F         	movff	icmp_calculateChecksum@ipPayload,ethernetController_streamFromRXBuffer@startAddre
      +                          ss
 11805  003C22  C075  F070         	movff	icmp_calculateChecksum@ipPayload+1,ethernetController_streamFromRXBuffer@startAdd
      +                          ress+1
 11806  003C26  0E01               	movlw	1
 11807  003C28  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11808  003C2C  0100               	movlb	0	; () banked
 11809  003C2E  6F7D               	movwf	??_icmp_calculateChecksum& (0+255),b
 11810  003C30  517D               	movf	??_icmp_calculateChecksum& (0+255),w,b
 11811  003C32  1382               	iorwf	icmp_calculateChecksum@foo& (0+255),f,b
 11812                           
 11813                           ; BSR set to: 0
 11814                           ;icmp.c: 82: if (i == 1) {
 11815  003C34  0584               	decf	icmp_calculateChecksum@i& (0+255),w,b
 11816  003C36  1185               	iorwf	(icmp_calculateChecksum@i+1)& (0+255),w,b
 11817  003C38  A4D8               	btfss	status,2,c
 11818  003C3A  D004               	goto	l1326
 11819                           
 11820                           ; BSR set to: 0
 11821                           ;icmp.c: 83: foo = 0x0000;
 11822  003C3C  0E00               	movlw	0
 11823  003C3E  6F83               	movwf	(icmp_calculateChecksum@foo+1)& (0+255),b
 11824  003C40  0E00               	movlw	0
 11825  003C42  6F82               	movwf	icmp_calculateChecksum@foo& (0+255),b
 11826  003C44                     l1326:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;icmp.c: 84: }
 11830                           ;icmp.c: 85: sum += foo;
 11831                           
 11832                           ; BSR set to: 0
 11833  003C44  5182               	movf	icmp_calculateChecksum@foo& (0+255),w,b
 11834  003C46  2786               	addwf	icmp_calculateChecksum@sum& (0+255),f,b
 11835  003C48  5183               	movf	(icmp_calculateChecksum@foo+1)& (0+255),w,b
 11836  003C4A  2387               	addwfc	(icmp_calculateChecksum@sum+1)& (0+255),f,b
 11837  003C4C  0E00               	movlw	0
 11838  003C4E  2388               	addwfc	(icmp_calculateChecksum@sum+2)& (0+255),f,b
 11839  003C50  0E00               	movlw	0
 11840  003C52  2389               	addwfc	(icmp_calculateChecksum@sum+3)& (0+255),f,b
 11841                           
 11842                           ; BSR set to: 0
 11843  003C54  4B84               	infsnz	icmp_calculateChecksum@i& (0+255),f,b
 11844  003C56  2B85               	incf	(icmp_calculateChecksum@i+1)& (0+255),f,b
 11845  003C58                     l1324:
 11846                           
 11847                           ; BSR set to: 0
 11848                           
 11849                           ; BSR set to: 0
 11850  003C58  90D8               	bcf	status,0,c
 11851  003C5A  3179               	rrcf	(icmp_calculateChecksum@ipPayload+5)& (0+255),w,b
 11852  003C5C  6F7E               	movwf	(??_icmp_calculateChecksum+1)& (0+255),b
 11853  003C5E  3178               	rrcf	(icmp_calculateChecksum@ipPayload+4)& (0+255),w,b
 11854  003C60  6F7D               	movwf	??_icmp_calculateChecksum& (0+255),b
 11855  003C62  517D               	movf	??_icmp_calculateChecksum& (0+255),w,b
 11856  003C64  5D84               	subwf	icmp_calculateChecksum@i& (0+255),w,b
 11857  003C66  517E               	movf	(??_icmp_calculateChecksum+1)& (0+255),w,b
 11858  003C68  5985               	subwfb	(icmp_calculateChecksum@i+1)& (0+255),w,b
 11859  003C6A  A0D8               	btfss	status,0,c
 11860  003C6C  D7CA               	goto	l1325
 11861                           
 11862                           ; BSR set to: 0
 11863                           ;icmp.c: 86: }
 11864                           ;icmp.c: 87: ethernetController_streamFromRXBuffer(2, ipPayload.start);
 11865                           
 11866                           ; BSR set to: 0
 11867  003C6E  C074  F06F         	movff	icmp_calculateChecksum@ipPayload,ethernetController_streamFromRXBuffer@startAddre
      +                          ss
 11868  003C72  C075  F070         	movff	icmp_calculateChecksum@ipPayload+1,ethernetController_streamFromRXBuffer@startAdd
      +                          ress+1
 11869  003C76  0E02               	movlw	2
 11870  003C78  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 11871                           
 11872                           ;icmp.c: 89: uint8_t carry = (sum & 0xffff0000) >> 16;
 11873  003C7C  0E00               	movlw	0
 11874  003C7E  0100               	movlb	0	; () banked
 11875  003C80  1586               	andwf	icmp_calculateChecksum@sum& (0+255),w,b
 11876  003C82  6F7D               	movwf	??_icmp_calculateChecksum& (0+255),b
 11877  003C84  0E00               	movlw	0
 11878  003C86  1587               	andwf	(icmp_calculateChecksum@sum+1)& (0+255),w,b
 11879  003C88  6F7E               	movwf	(??_icmp_calculateChecksum+1)& (0+255),b
 11880  003C8A  0EFF               	movlw	255
 11881  003C8C  1588               	andwf	(icmp_calculateChecksum@sum+2)& (0+255),w,b
 11882  003C8E  6F7F               	movwf	(??_icmp_calculateChecksum+2)& (0+255),b
 11883  003C90  0EFF               	movlw	255
 11884  003C92  1589               	andwf	(icmp_calculateChecksum@sum+3)& (0+255),w,b
 11885  003C94  6F80               	movwf	(??_icmp_calculateChecksum+3)& (0+255),b
 11886  003C96  0E11               	movlw	17
 11887  003C98  D005               	goto	u11510
 11888  003C9A                     u11515:
 11889  003C9A  90D8               	bcf	status,0,c
 11890  003C9C  3380               	rrcf	(??_icmp_calculateChecksum+3)& (0+255),f,b
 11891  003C9E  337F               	rrcf	(??_icmp_calculateChecksum+2)& (0+255),f,b
 11892  003CA0  337E               	rrcf	(??_icmp_calculateChecksum+1)& (0+255),f,b
 11893  003CA2  337D               	rrcf	??_icmp_calculateChecksum& (0+255),f,b
 11894  003CA4                     u11510:
 11895  003CA4  2EE8               	decfsz	wreg,f,c
 11896  003CA6  D7F9               	goto	u11515
 11897  003CA8  517D               	movf	??_icmp_calculateChecksum& (0+255),w,b
 11898  003CAA  6F81               	movwf	icmp_calculateChecksum@carry& (0+255),b
 11899                           
 11900                           ; BSR set to: 0
 11901                           ;icmp.c: 90: sum &= 0xffff;
 11902  003CAC  0EFF               	movlw	255
 11903  003CAE  1786               	andwf	icmp_calculateChecksum@sum& (0+255),f,b
 11904  003CB0  0EFF               	movlw	255
 11905  003CB2  1787               	andwf	(icmp_calculateChecksum@sum+1)& (0+255),f,b
 11906  003CB4  0E00               	movlw	0
 11907  003CB6  1788               	andwf	(icmp_calculateChecksum@sum+2)& (0+255),f,b
 11908  003CB8  0E00               	movlw	0
 11909  003CBA  1789               	andwf	(icmp_calculateChecksum@sum+3)& (0+255),f,b
 11910                           
 11911                           ; BSR set to: 0
 11912                           ;icmp.c: 91: sum += carry;
 11913  003CBC  5181               	movf	icmp_calculateChecksum@carry& (0+255),w,b
 11914  003CBE  2786               	addwf	icmp_calculateChecksum@sum& (0+255),f,b
 11915  003CC0  0E00               	movlw	0
 11916  003CC2  2387               	addwfc	(icmp_calculateChecksum@sum+1)& (0+255),f,b
 11917  003CC4  2388               	addwfc	(icmp_calculateChecksum@sum+2)& (0+255),f,b
 11918  003CC6  2389               	addwfc	(icmp_calculateChecksum@sum+3)& (0+255),f,b
 11919                           
 11920                           ; BSR set to: 0
 11921                           ;icmp.c: 92: if (sum > 0xffff) {
 11922  003CC8  5189               	movf	(icmp_calculateChecksum@sum+3)& (0+255),w,b
 11923  003CCA  E103               	bnz	u11520
 11924  003CCC  0588               	decf	(icmp_calculateChecksum@sum+2)& (0+255),w,b
 11925  003CCE  A0D8               	btfss	status,0,c
 11926  003CD0  D025               	goto	l1328
 11927  003CD2                     u11520:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;icmp.c: 93: sum += ((sum & 0xffff0000) >> 16);
 11931  003CD2  0E00               	movlw	0
 11932  003CD4  1586               	andwf	icmp_calculateChecksum@sum& (0+255),w,b
 11933  003CD6  6F7D               	movwf	??_icmp_calculateChecksum& (0+255),b
 11934  003CD8  0E00               	movlw	0
 11935  003CDA  1587               	andwf	(icmp_calculateChecksum@sum+1)& (0+255),w,b
 11936  003CDC  6F7E               	movwf	(??_icmp_calculateChecksum+1)& (0+255),b
 11937  003CDE  0EFF               	movlw	255
 11938  003CE0  1588               	andwf	(icmp_calculateChecksum@sum+2)& (0+255),w,b
 11939  003CE2  6F7F               	movwf	(??_icmp_calculateChecksum+2)& (0+255),b
 11940  003CE4  0EFF               	movlw	255
 11941  003CE6  1589               	andwf	(icmp_calculateChecksum@sum+3)& (0+255),w,b
 11942  003CE8  6F80               	movwf	(??_icmp_calculateChecksum+3)& (0+255),b
 11943  003CEA  0E11               	movlw	17
 11944  003CEC  D005               	goto	u11530
 11945  003CEE                     u11535:
 11946  003CEE  90D8               	bcf	status,0,c
 11947  003CF0  3380               	rrcf	(??_icmp_calculateChecksum+3)& (0+255),f,b
 11948  003CF2  337F               	rrcf	(??_icmp_calculateChecksum+2)& (0+255),f,b
 11949  003CF4  337E               	rrcf	(??_icmp_calculateChecksum+1)& (0+255),f,b
 11950  003CF6  337D               	rrcf	??_icmp_calculateChecksum& (0+255),f,b
 11951  003CF8                     u11530:
 11952  003CF8  2EE8               	decfsz	wreg,f,c
 11953  003CFA  D7F9               	goto	u11535
 11954  003CFC  517D               	movf	??_icmp_calculateChecksum& (0+255),w,b
 11955  003CFE  2786               	addwf	icmp_calculateChecksum@sum& (0+255),f,b
 11956  003D00  517E               	movf	(??_icmp_calculateChecksum+1)& (0+255),w,b
 11957  003D02  2387               	addwfc	(icmp_calculateChecksum@sum+1)& (0+255),f,b
 11958  003D04  517F               	movf	(??_icmp_calculateChecksum+2)& (0+255),w,b
 11959  003D06  2388               	addwfc	(icmp_calculateChecksum@sum+2)& (0+255),f,b
 11960  003D08  5180               	movf	(??_icmp_calculateChecksum+3)& (0+255),w,b
 11961  003D0A  2389               	addwfc	(icmp_calculateChecksum@sum+3)& (0+255),f,b
 11962                           
 11963                           ;icmp.c: 94: sum &= 0xffff;
 11964  003D0C  0EFF               	movlw	255
 11965  003D0E  1786               	andwf	icmp_calculateChecksum@sum& (0+255),f,b
 11966  003D10  0EFF               	movlw	255
 11967  003D12  1787               	andwf	(icmp_calculateChecksum@sum+1)& (0+255),f,b
 11968  003D14  0E00               	movlw	0
 11969  003D16  1788               	andwf	(icmp_calculateChecksum@sum+2)& (0+255),f,b
 11970  003D18  0E00               	movlw	0
 11971  003D1A  1789               	andwf	(icmp_calculateChecksum@sum+3)& (0+255),f,b
 11972  003D1C                     l1328:
 11973                           
 11974                           ; BSR set to: 0
 11975                           ;icmp.c: 95: }
 11976                           ;icmp.c: 97: return ~sum;
 11977  003D1C  1D86               	comf	icmp_calculateChecksum@sum& (0+255),w,b
 11978  003D1E  6F74               	movwf	?_icmp_calculateChecksum& (0+255),b
 11979  003D20  1D87               	comf	(icmp_calculateChecksum@sum+1)& (0+255),w,b
 11980  003D22  6F75               	movwf	(?_icmp_calculateChecksum+1)& (0+255),b
 11981  003D24  0012               	return	
 11982  003D26                     __end_of_icmp_calculateChecksum:
 11983                           	opt stack 0
 11984                           tblptru	equ	0xFF8
 11985                           tblptrh	equ	0xFF7
 11986                           tblptrl	equ	0xFF6
 11987                           tablat	equ	0xFF5
 11988                           prodh	equ	0xFF4
 11989                           prodl	equ	0xFF3
 11990                           intcon	equ	0xFF2
 11991                           intcon3	equ	0xFF0
 11992                           indf0	equ	0xFEF
 11993                           postinc0	equ	0xFEE
 11994                           plusw0	equ	0xFEB
 11995                           fsr0h	equ	0xFEA
 11996                           fsr0l	equ	0xFE9
 11997                           wreg	equ	0xFE8
 11998                           indf1	equ	0xFE7
 11999                           postinc1	equ	0xFE6
 12000                           postdec1	equ	0xFE5
 12001                           plusw1	equ	0xFE3
 12002                           fsr1h	equ	0xFE2
 12003                           fsr1l	equ	0xFE1
 12004                           indf2	equ	0xFDF
 12005                           postinc2	equ	0xFDE
 12006                           postdec2	equ	0xFDD
 12007                           plusw2	equ	0xFDB
 12008                           fsr2h	equ	0xFDA
 12009                           fsr2l	equ	0xFD9
 12010                           status	equ	0xFD8
 12011                           
 12012 ;; *************** function _ethernetController_updateNextPacketPointer *****************
 12013 ;; Defined at:
 12014 ;;		line 334 in file "src/enc424j600/ENC424J600.c"
 12015 ;; Parameters:    Size  Location     Type
 12016 ;;		None
 12017 ;; Auto vars:     Size  Location     Type
 12018 ;;  nextPktPoint    2   21[BANK0 ] unsigned int 
 12019 ;;  newPointerH     1   25[BANK0 ] unsigned char 
 12020 ;;  newPointerL     1   24[BANK0 ] unsigned char 
 12021 ;;  opcode          1   23[BANK0 ] unsigned char 
 12022 ;; Return value:  Size  Location     Type
 12023 ;;                  1    wreg      void 
 12024 ;; Registers used:
 12025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12026 ;; Tracked objects:
 12027 ;;		On entry : 0/0
 12028 ;;		On exit  : 0/0
 12029 ;;		Unchanged: 0/0
 12030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12031 ;;      Params:         0       0       0       0       0       0       0       0       0
 12032 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12033 ;;      Temps:          0       6       0       0       0       0       0       0       0
 12034 ;;      Totals:         0      11       0       0       0       0       0       0       0
 12035 ;;Total ram usage:       11 bytes
 12036 ;; Hardware stack levels used:    1
 12037 ;; Hardware stack levels required when called:    7
 12038 ;; This function calls:
 12039 ;;		_enc424j600_getNextPacketPointer
 12040 ;;		_enc424j600_readSPI
 12041 ;;		_enc424j600_setERXDATAReadPointer
 12042 ;;		_enc424j600_setNextPacketPointer
 12043 ;;		_enc424j600_writeSPI
 12044 ;; This function is called by:
 12045 ;;		_ethernet_rxGetNewFrame
 12046 ;; This function uses a non-reentrant model
 12047 ;;
 12048                           
 12049                           	psect	text28
 12050  00529C                     __ptext28:
 12051                           	opt stack 0
 12052  00529C                     _ethernetController_updateNextPacketPointer:
 12053                           	opt stack 21
 12054                           
 12055                           ;ENC424J600.c: 335: uint16_t nextPktPointer;
 12056                           ;ENC424J600.c: 336: uint8_t opcode;
 12057                           ;ENC424J600.c: 337: uint8_t newPointerL, newPointerH;
 12058                           ;ENC424J600.c: 338: nextPktPointer = enc424j600_getNextPacketPointer();
 12059                           
 12060                           ; BSR set to: 0
 12061                           ;incstack = 0
 12062  00529C  EC3A  F031         	call	_enc424j600_getNextPacketPointer	;wreg free
 12063  0052A0  C060  F075         	movff	?_enc424j600_getNextPacketPointer,ethernetController_updateNextPacketPointer@next
      +                          PktPointer
 12064  0052A4  C061  F076         	movff	?_enc424j600_getNextPacketPointer+1,ethernetController_updateNextPacketPointer@ne
      +                          xtPktPointer+1
 12065                           
 12066                           ;ENC424J600.c: 339: enc424j600_setERXDATAReadPointer(nextPktPointer);
 12067  0052A8  C075  F06A         	movff	ethernetController_updateNextPacketPointer@nextPktPointer,enc424j600_setERXDATARe
      +                          adPointer@addr
 12068  0052AC  C076  F06B         	movff	ethernetController_updateNextPacketPointer@nextPktPointer+1,enc424j600_setERXDATA
      +                          ReadPointer@addr+1
 12069  0052B0  EC6B  F02E         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12070                           
 12071                           ;ENC424J600.c: 340: opcode = 0x2C;
 12072  0052B4  0E2C               	movlw	44
 12073  0052B6  0100               	movlb	0	; () banked
 12074  0052B8  6F77               	movwf	ethernetController_updateNextPacketPointer@opcode& (0+255),b
 12075                           
 12076                           ; BSR set to: 0
 12077                           ;ENC424J600.c: 341: PORTBbits.RB4=0;
 12078  0052BA  9881               	bcf	3969,4,c	;volatile
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;ENC424J600.c: 342: enc424j600_writeSPI(&opcode);
 12082  0052BC  0E77               	movlw	low ethernetController_updateNextPacketPointer@opcode
 12083  0052BE  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12084  0052C0  0E00               	movlw	high ethernetController_updateNextPacketPointer@opcode
 12085  0052C2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12086  0052C4  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 12087                           
 12088                           ;ENC424J600.c: 343: enc424j600_readSPI(&newPointerL);
 12089  0052C8  0E78               	movlw	low ethernetController_updateNextPacketPointer@newPointerL
 12090  0052CA  0100               	movlb	0	; () banked
 12091  0052CC  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12092  0052CE  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerL
 12093  0052D0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12094  0052D2  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 12095                           
 12096                           ;ENC424J600.c: 344: enc424j600_readSPI(&newPointerH);
 12097  0052D6  0E79               	movlw	low ethernetController_updateNextPacketPointer@newPointerH
 12098  0052D8  0100               	movlb	0	; () banked
 12099  0052DA  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12100  0052DC  0E00               	movlw	high ethernetController_updateNextPacketPointer@newPointerH
 12101  0052DE  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12102  0052E0  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 12103                           
 12104                           ;ENC424J600.c: 345: PORTBbits.RB4=1;
 12105  0052E4  8881               	bsf	3969,4,c	;volatile
 12106                           
 12107                           ;ENC424J600.c: 347: enc424j600_setNextPacketPointer((uint16_t) ((newPointerL & (unsigned
      +                          ) 0x00ff) | ((unsigned) (newPointerH << 8)&(unsigned) 0xff00)));
 12108  0052E6  0E00               	movlw	0
 12109  0052E8  0100               	movlb	0	; () banked
 12110  0052EA  6F6F               	movwf	??_ethernetController_updateNextPacketPointer& (0+255),b
 12111  0052EC  0EFF               	movlw	255
 12112  0052EE  6F70               	movwf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),b
 12113  0052F0  5179               	movf	ethernetController_updateNextPacketPointer@newPointerH& (0+255),w,b
 12114  0052F2  6F72               	movwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),b
 12115  0052F4  6B71               	clrf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),b
 12116  0052F6  516F               	movf	??_ethernetController_updateNextPacketPointer& (0+255),w,b
 12117  0052F8  1771               	andwf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),f,b
 12118  0052FA  5170               	movf	(??_ethernetController_updateNextPacketPointer+1)& (0+255),w,b
 12119  0052FC  1772               	andwf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),f,b
 12120  0052FE  5178               	movf	ethernetController_updateNextPacketPointer@newPointerL& (0+255),w,b
 12121  005300  6F73               	movwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),b
 12122  005302  6B74               	clrf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),b
 12123  005304  5171               	movf	(??_ethernetController_updateNextPacketPointer+2)& (0+255),w,b
 12124  005306  1173               	iorwf	(??_ethernetController_updateNextPacketPointer+4)& (0+255),w,b
 12125  005308  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 12126  00530A  5172               	movf	(??_ethernetController_updateNextPacketPointer+3)& (0+255),w,b
 12127  00530C  1174               	iorwf	(??_ethernetController_updateNextPacketPointer+5)& (0+255),w,b
 12128  00530E  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 12129  005310  EC3F  F031         	call	_enc424j600_setNextPacketPointer	;wreg free
 12130  005314  0012               	return		;funcret
 12131  005316                     __end_of_ethernetController_updateNextPacketPointer:
 12132                           	opt stack 0
 12133                           tblptru	equ	0xFF8
 12134                           tblptrh	equ	0xFF7
 12135                           tblptrl	equ	0xFF6
 12136                           tablat	equ	0xFF5
 12137                           prodh	equ	0xFF4
 12138                           prodl	equ	0xFF3
 12139                           intcon	equ	0xFF2
 12140                           intcon3	equ	0xFF0
 12141                           indf0	equ	0xFEF
 12142                           postinc0	equ	0xFEE
 12143                           plusw0	equ	0xFEB
 12144                           fsr0h	equ	0xFEA
 12145                           fsr0l	equ	0xFE9
 12146                           wreg	equ	0xFE8
 12147                           indf1	equ	0xFE7
 12148                           postinc1	equ	0xFE6
 12149                           postdec1	equ	0xFE5
 12150                           plusw1	equ	0xFE3
 12151                           fsr1h	equ	0xFE2
 12152                           fsr1l	equ	0xFE1
 12153                           indf2	equ	0xFDF
 12154                           postinc2	equ	0xFDE
 12155                           postdec2	equ	0xFDD
 12156                           plusw2	equ	0xFDB
 12157                           fsr2h	equ	0xFDA
 12158                           fsr2l	equ	0xFD9
 12159                           status	equ	0xFD8
 12160                           
 12161 ;; *************** function _ethernetController_getRSV *****************
 12162 ;; Defined at:
 12163 ;;		line 299 in file "src/enc424j600/ENC424J600.c"
 12164 ;; Parameters:    Size  Location     Type
 12165 ;;  address         2   17[BANK0 ] unsigned int 
 12166 ;; Auto vars:     Size  Location     Type
 12167 ;;  i               1   23[BANK0 ] unsigned char 
 12168 ;;  opcode          1   22[BANK0 ] unsigned char 
 12169 ;; Return value:  Size  Location     Type
 12170 ;;                  5   17[BANK0 ] struct RSV
 12171 ;; Registers used:
 12172 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12173 ;; Tracked objects:
 12174 ;;		On entry : 0/0
 12175 ;;		On exit  : 0/0
 12176 ;;		Unchanged: 0/0
 12177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12178 ;;      Params:         0       5       0       0       0       0       0       0       0
 12179 ;;      Locals:         0       2       0       0       0       0       0       0       0
 12180 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12181 ;;      Totals:         0       7       0       0       0       0       0       0       0
 12182 ;;Total ram usage:        7 bytes
 12183 ;; Hardware stack levels used:    1
 12184 ;; Hardware stack levels required when called:    7
 12185 ;; This function calls:
 12186 ;;		_enc424j600_readSPI
 12187 ;;		_enc424j600_setERXDATAReadPointer
 12188 ;;		_enc424j600_updateReceiveStatusVector
 12189 ;;		_enc424j600_writeSPI
 12190 ;; This function is called by:
 12191 ;;		_ethernet_rxGetNewFrame
 12192 ;; This function uses a non-reentrant model
 12193 ;;
 12194                           
 12195                           	psect	text29
 12196  00538E                     __ptext29:
 12197                           	opt stack 0
 12198  00538E                     _ethernetController_getRSV:
 12199                           	opt stack 21
 12200                           
 12201                           ;ENC424J600.c: 300: uint8_t static temp[6];
 12202                           ;ENC424J600.c: 301: enc424j600_setERXDATAReadPointer(address + 2);
 12203                           
 12204                           ;incstack = 0
 12205  00538E  0E02               	movlw	2
 12206  005390  0100               	movlb	0	; () banked
 12207  005392  2571               	addwf	ethernetController_getRSV@address& (0+255),w,b
 12208  005394  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 12209  005396  0E00               	movlw	0
 12210  005398  2172               	addwfc	(ethernetController_getRSV@address+1)& (0+255),w,b
 12211  00539A  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 12212  00539C  EC6B  F02E         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12213                           
 12214                           ;ENC424J600.c: 302: uint8_t opcode = 0x2C;
 12215  0053A0  0E2C               	movlw	44
 12216  0053A2  0100               	movlb	0	; () banked
 12217  0053A4  6F76               	movwf	ethernetController_getRSV@opcode& (0+255),b
 12218                           
 12219                           ; BSR set to: 0
 12220                           ;ENC424J600.c: 303: PORTBbits.RB4=0;
 12221  0053A6  9881               	bcf	3969,4,c	;volatile
 12222                           
 12223                           ; BSR set to: 0
 12224                           ;ENC424J600.c: 304: enc424j600_writeSPI(&opcode);
 12225  0053A8  0E76               	movlw	low ethernetController_getRSV@opcode
 12226  0053AA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12227  0053AC  0E00               	movlw	high ethernetController_getRSV@opcode
 12228  0053AE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12229  0053B0  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 12230                           
 12231                           ;ENC424J600.c: 305: for (uint8_t i = 0; i < 6; i++) {
 12232  0053B4  0E00               	movlw	0
 12233  0053B6  0100               	movlb	0	; () banked
 12234  0053B8  6F77               	movwf	ethernetController_getRSV@i& (0+255),b
 12235  0053BA                     l10593:
 12236                           
 12237                           ; BSR set to: 0
 12238  0053BA  0E05               	movlw	5
 12239  0053BC  6577               	cpfsgt	ethernetController_getRSV@i& (0+255),b
 12240  0053BE  D001               	goto	l165
 12241  0053C0  D00D               	goto	u12650
 12242  0053C2                     l165:
 12243                           
 12244                           ; BSR set to: 0
 12245                           ;ENC424J600.c: 306: enc424j600_readSPI(&temp[i]);
 12246                           
 12247                           ; BSR set to: 0
 12248  0053C2  5177               	movf	ethernetController_getRSV@i& (0+255),w,b
 12249  0053C4  0D01               	mullw	1
 12250  0053C6  0E7C               	movlw	low ethernetController_getRSV@temp
 12251  0053C8  24F3               	addwf	prodl,w,c
 12252  0053CA  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12253  0053CC  0E02               	movlw	high ethernetController_getRSV@temp
 12254  0053CE  20F4               	addwfc	prodh,w,c
 12255  0053D0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12256  0053D2  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 12257  0053D6  0100               	movlb	0	; () banked
 12258  0053D8  2B77               	incf	ethernetController_getRSV@i& (0+255),f,b
 12259  0053DA  D7EF               	goto	l10593
 12260  0053DC                     u12650:
 12261                           
 12262                           ; BSR set to: 0
 12263                           ;ENC424J600.c: 307: }
 12264                           ;ENC424J600.c: 308: PORTBbits.RB4=1;
 12265  0053DC  8881               	bsf	3969,4,c	;volatile
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;ENC424J600.c: 309: return enc424j600_updateReceiveStatusVector(&temp[0]);
 12269  0053DE  0E7C               	movlw	low ethernetController_getRSV@temp
 12270  0053E0  6F60               	movwf	enc424j600_updateReceiveStatusVector@rsv& (0+255),b
 12271  0053E2  0E02               	movlw	high ethernetController_getRSV@temp
 12272  0053E4  6F61               	movwf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),b
 12273  0053E6  ECBD  F00D         	call	_enc424j600_updateReceiveStatusVector	;wreg free
 12274  0053EA  CFE9 FFD9          	movff	fsr0l,fsr2l
 12275  0053EE  CFEA FFDA          	movff	fsr0h,fsr2h
 12276  0053F2  EE00  F071         	lfsr	0,?_ethernetController_getRSV
 12277  0053F6  0E04               	movlw	4
 12278  0053F8                     u12661:
 12279  0053F8  CFDB FFEB          	movff	plusw2,plusw0
 12280  0053FC  06E8               	decf	wreg,f,c
 12281  0053FE  E2FC               	bc	u12661
 12282  005400  0012               	return	
 12283  005402                     __end_of_ethernetController_getRSV:
 12284                           	opt stack 0
 12285                           tblptru	equ	0xFF8
 12286                           tblptrh	equ	0xFF7
 12287                           tblptrl	equ	0xFF6
 12288                           tablat	equ	0xFF5
 12289                           prodh	equ	0xFF4
 12290                           prodl	equ	0xFF3
 12291                           intcon	equ	0xFF2
 12292                           intcon3	equ	0xFF0
 12293                           indf0	equ	0xFEF
 12294                           postinc0	equ	0xFEE
 12295                           plusw0	equ	0xFEB
 12296                           fsr0h	equ	0xFEA
 12297                           fsr0l	equ	0xFE9
 12298                           wreg	equ	0xFE8
 12299                           indf1	equ	0xFE7
 12300                           postinc1	equ	0xFE6
 12301                           postdec1	equ	0xFE5
 12302                           plusw1	equ	0xFE3
 12303                           fsr1h	equ	0xFE2
 12304                           fsr1l	equ	0xFE1
 12305                           indf2	equ	0xFDF
 12306                           postinc2	equ	0xFDE
 12307                           postdec2	equ	0xFDD
 12308                           plusw2	equ	0xFDB
 12309                           fsr2h	equ	0xFDA
 12310                           fsr2l	equ	0xFD9
 12311                           status	equ	0xFD8
 12312                           
 12313 ;; *************** function _enc424j600_updateReceiveStatusVector *****************
 12314 ;; Defined at:
 12315 ;;		line 719 in file "src/enc424j600/ENC424J600.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;  rsv             2    0[BANK0 ] PTR unsigned char 
 12318 ;;		 -> ethernetController_getRSV@temp(6), 
 12319 ;; Auto vars:     Size  Location     Type
 12320 ;;  receiveStatu    5   12[BANK0 ] struct RSV
 12321 ;; Return value:  Size  Location     Type
 12322 ;;                  5    0[BANK0 ] struct RSV
 12323 ;; Registers used:
 12324 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0
 12325 ;; Tracked objects:
 12326 ;;		On entry : 0/0
 12327 ;;		On exit  : 0/0
 12328 ;;		Unchanged: 0/0
 12329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12330 ;;      Params:         0       5       0       0       0       0       0       0       0
 12331 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12332 ;;      Temps:          0       7       0       0       0       0       0       0       0
 12333 ;;      Totals:         0      17       0       0       0       0       0       0       0
 12334 ;;Total ram usage:       17 bytes
 12335 ;; Hardware stack levels used:    1
 12336 ;; Hardware stack levels required when called:    4
 12337 ;; This function calls:
 12338 ;;		Nothing
 12339 ;; This function is called by:
 12340 ;;		_ethernetController_getRSV
 12341 ;; This function uses a non-reentrant model
 12342 ;;
 12343                           
 12344                           	psect	text30
 12345  001B7A                     __ptext30:
 12346                           	opt stack 0
 12347  001B7A                     _enc424j600_updateReceiveStatusVector:
 12348                           	opt stack 23
 12349                           
 12350                           ;ENC424J600.c: 720: RSV_t receiveStatusVector;
 12351                           ;ENC424J600.c: 723: receiveStatusVector.length = (uint16_t) ((*(rsv + 0)) | (uint16_t) (
      +                          ((*(rsv + 1)) << 8)&0xff00));
 12352                           
 12353                           ;incstack = 0
 12354  001B7A  0E00               	movlw	0
 12355  001B7C  0100               	movlb	0	; () banked
 12356  001B7E  6F65               	movwf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12357  001B80  0EFF               	movlw	255
 12358  001B82  6F66               	movwf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),b
 12359  001B84  EE20 F001          	lfsr	2,1
 12360  001B88  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12361  001B8A  26D9               	addwf	fsr2l,f,c
 12362  001B8C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12363  001B8E  22DA               	addwfc	fsr2h,f,c
 12364  001B90  50DF               	movf	indf2,w,c
 12365  001B92  6F67               	movwf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),b
 12366  001B94  5167               	movf	(??_enc424j600_updateReceiveStatusVector+2)& (0+255),w,b
 12367  001B96  6F69               	movwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),b
 12368  001B98  6B68               	clrf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),b
 12369  001B9A  5165               	movf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12370  001B9C  1768               	andwf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),f,b
 12371  001B9E  5166               	movf	(??_enc424j600_updateReceiveStatusVector+1)& (0+255),w,b
 12372  001BA0  1769               	andwf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),f,b
 12373  001BA2  C060  FFD9         	movff	enc424j600_updateReceiveStatusVector@rsv,fsr2l
 12374  001BA6  C061  FFDA         	movff	enc424j600_updateReceiveStatusVector@rsv+1,fsr2h
 12375  001BAA  50DF               	movf	indf2,w,c
 12376  001BAC  6F6A               	movwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),b
 12377  001BAE  6B6B               	clrf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),b
 12378  001BB0  5168               	movf	(??_enc424j600_updateReceiveStatusVector+3)& (0+255),w,b
 12379  001BB2  116A               	iorwf	(??_enc424j600_updateReceiveStatusVector+5)& (0+255),w,b
 12380  001BB4  6F6C               	movwf	enc424j600_updateReceiveStatusVector@receiveStatusVector& (0+255),b
 12381  001BB6  5169               	movf	(??_enc424j600_updateReceiveStatusVector+4)& (0+255),w,b
 12382  001BB8  116B               	iorwf	(??_enc424j600_updateReceiveStatusVector+6)& (0+255),w,b
 12383  001BBA  6F6D               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+1)& (0+255),b
 12384                           
 12385                           ;ENC424J600.c: 725: receiveStatusVector.packetPreviouslyIgnored = (uint8_t) (*(rsv + 2) 
      +                          & 0b00000001) != 0 ? 1 : 0;
 12386  001BBC  EE20 F002          	lfsr	2,2
 12387  001BC0  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12388  001BC2  26D9               	addwf	fsr2l,f,c
 12389  001BC4  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12390  001BC6  22DA               	addwfc	fsr2h,f,c
 12391  001BC8  A0DF               	btfss	indf2,0,c
 12392  001BCA  D003               	goto	u11640
 12393  001BCC  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12394  001BCE  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12395  001BD0  D002               	goto	u11658
 12396  001BD2                     u11640:
 12397  001BD2  0100               	movlb	0	; () banked
 12398  001BD4  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12399  001BD6                     u11658:
 12400  001BD6  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12401  001BD8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12402  001BDA  0BFE               	andlw	-2
 12403  001BDC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12404  001BDE  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12405                           
 12406                           ;ENC424J600.c: 726: receiveStatusVector.carrierEventPreviouslySeen = (uint8_t) (*(rsv + 
      +                          2) & 0b00000100) != 0 ? 1 : 0;
 12407  001BE0  EE20 F002          	lfsr	2,2
 12408  001BE4  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12409  001BE6  26D9               	addwf	fsr2l,f,c
 12410  001BE8  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12411  001BEA  22DA               	addwfc	fsr2h,f,c
 12412  001BEC  A4DF               	btfss	indf2,2,c
 12413  001BEE  D003               	goto	u11660
 12414  001BF0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12415  001BF2  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12416  001BF4  D002               	goto	u11678
 12417  001BF6                     u11660:
 12418  001BF6  0100               	movlb	0	; () banked
 12419  001BF8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12420  001BFA                     u11678:
 12421  001BFA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12422  001BFC  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12423  001BFE  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12424  001C00  0BFD               	andlw	-3
 12425  001C02  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12426  001C04  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12427                           
 12428                           ;ENC424J600.c: 727: receiveStatusVector.CRCError = (uint8_t) (*(rsv + 2) & 0b00010000) !
      +                          = 0 ? 1 : 0;
 12429  001C06  EE20 F002          	lfsr	2,2
 12430  001C0A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12431  001C0C  26D9               	addwf	fsr2l,f,c
 12432  001C0E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12433  001C10  22DA               	addwfc	fsr2h,f,c
 12434  001C12  A8DF               	btfss	indf2,4,c
 12435  001C14  D003               	goto	u11680
 12436  001C16  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12437  001C18  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12438  001C1A  D002               	goto	u11698
 12439  001C1C                     u11680:
 12440  001C1C  0100               	movlb	0	; () banked
 12441  001C1E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12442  001C20                     u11698:
 12443  001C20  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12444  001C22  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12445  001C24  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12446  001C26  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12447  001C28  0BFB               	andlw	-5
 12448  001C2A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12449  001C2C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12450                           
 12451                           ;ENC424J600.c: 728: receiveStatusVector.lengthCheckError = (uint8_t) (*(rsv + 2) & 0b001
      +                          00000) != 0 ? 1 : 0;
 12452  001C2E  EE20 F002          	lfsr	2,2
 12453  001C32  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12454  001C34  26D9               	addwf	fsr2l,f,c
 12455  001C36  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12456  001C38  22DA               	addwfc	fsr2h,f,c
 12457  001C3A  AADF               	btfss	indf2,5,c
 12458  001C3C  D003               	goto	u11700
 12459  001C3E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12460  001C40  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12461  001C42  D002               	goto	u11718
 12462  001C44                     u11700:
 12463  001C44  0100               	movlb	0	; () banked
 12464  001C46  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12465  001C48                     u11718:
 12466  001C48  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12467  001C4A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12468  001C4C  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12469  001C4E  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12470  001C50  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12471  001C52  0BF7               	andlw	-9
 12472  001C54  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12473  001C56  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12474                           
 12475                           ;ENC424J600.c: 729: receiveStatusVector.lengthOutOfRange = (uint8_t) (*(rsv + 2) & 0b010
      +                          00000) != 0 ? 1 : 0;
 12476  001C58  EE20 F002          	lfsr	2,2
 12477  001C5C  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12478  001C5E  26D9               	addwf	fsr2l,f,c
 12479  001C60  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12480  001C62  22DA               	addwfc	fsr2h,f,c
 12481  001C64  ACDF               	btfss	indf2,6,c
 12482  001C66  D003               	goto	u11720
 12483  001C68  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12484  001C6A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12485  001C6C  D002               	goto	u11738
 12486  001C6E                     u11720:
 12487  001C6E  0100               	movlb	0	; () banked
 12488  001C70  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12489  001C72                     u11738:
 12490  001C72  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12491  001C74  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12492  001C76  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12493  001C78  0BEF               	andlw	-17
 12494  001C7A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12495  001C7C  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12496                           
 12497                           ;ENC424J600.c: 730: receiveStatusVector.receivedOk = (uint8_t) (*(rsv + 2) & 0b10000000)
      +                           != 0 ? 1 : 0;
 12498  001C7E  EE20 F002          	lfsr	2,2
 12499  001C82  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12500  001C84  26D9               	addwf	fsr2l,f,c
 12501  001C86  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12502  001C88  22DA               	addwfc	fsr2h,f,c
 12503  001C8A  AEDF               	btfss	indf2,7,c
 12504  001C8C  D003               	goto	u11740
 12505  001C8E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12506  001C90  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12507  001C92  D002               	goto	u11758
 12508  001C94                     u11740:
 12509  001C94  0100               	movlb	0	; () banked
 12510  001C96  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12511  001C98                     u11758:
 12512  001C98  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12513  001C9A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12514  001C9C  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12515  001C9E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12516  001CA0  0BDF               	andlw	-33
 12517  001CA2  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12518  001CA4  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12519                           
 12520                           ;ENC424J600.c: 732: receiveStatusVector.multicast = (uint8_t) (*(rsv + 3) & 0b00000001) 
      +                          != 0 ? 1 : 0;
 12521  001CA6  EE20 F003          	lfsr	2,3
 12522  001CAA  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12523  001CAC  26D9               	addwf	fsr2l,f,c
 12524  001CAE  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12525  001CB0  22DA               	addwfc	fsr2h,f,c
 12526  001CB2  A0DF               	btfss	indf2,0,c
 12527  001CB4  D003               	goto	u11760
 12528  001CB6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12529  001CB8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12530  001CBA  D002               	goto	u11778
 12531  001CBC                     u11760:
 12532  001CBC  0100               	movlb	0	; () banked
 12533  001CBE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12534  001CC0                     u11778:
 12535  001CC0  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12536  001CC2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12537  001CC4  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12538  001CC6  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12539  001CC8  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12540  001CCA  0BBF               	andlw	-65
 12541  001CCC  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12542  001CCE  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12543                           
 12544                           ;ENC424J600.c: 733: receiveStatusVector.broadcast = (uint8_t) (*(rsv + 3) & 0b00000010) 
      +                          != 0 ? 1 : 0;
 12545  001CD0  EE20 F003          	lfsr	2,3
 12546  001CD4  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12547  001CD6  26D9               	addwf	fsr2l,f,c
 12548  001CD8  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12549  001CDA  22DA               	addwfc	fsr2h,f,c
 12550  001CDC  A2DF               	btfss	indf2,1,c
 12551  001CDE  D003               	goto	u11780
 12552  001CE0  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12553  001CE2  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12554  001CE4  D002               	goto	u11798
 12555  001CE6                     u11780:
 12556  001CE6  0100               	movlb	0	; () banked
 12557  001CE8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12558  001CEA                     u11798:
 12559  001CEA  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12560  001CEC  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12561  001CEE  516E               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),w,b
 12562  001CF0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12563  001CF2  0B7F               	andlw	-129
 12564  001CF4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12565  001CF6  6F6E               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+2)& (0+255),b
 12566                           
 12567                           ;ENC424J600.c: 734: receiveStatusVector.controlFrame = (uint8_t) (*(rsv + 3) & 0b0000100
      +                          0) != 0 ? 1 : 0;
 12568  001CF8  EE20 F003          	lfsr	2,3
 12569  001CFC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12570  001CFE  26D9               	addwf	fsr2l,f,c
 12571  001D00  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12572  001D02  22DA               	addwfc	fsr2h,f,c
 12573  001D04  A6DF               	btfss	indf2,3,c
 12574  001D06  D003               	goto	u11800
 12575  001D08  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12576  001D0A  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12577  001D0C  D002               	goto	u11818
 12578  001D0E                     u11800:
 12579  001D0E  0100               	movlb	0	; () banked
 12580  001D10  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12581  001D12                     u11818:
 12582  001D12  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12583  001D14  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12584  001D16  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12585  001D18  0BFD               	andlw	-3
 12586  001D1A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12587  001D1C  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12588                           
 12589                           ;ENC424J600.c: 735: receiveStatusVector.pauseFrame = (uint8_t) (*(rsv + 3) & 0b00010000)
      +                           != 0 ? 1 : 0;
 12590  001D1E  EE20 F003          	lfsr	2,3
 12591  001D22  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12592  001D24  26D9               	addwf	fsr2l,f,c
 12593  001D26  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12594  001D28  22DA               	addwfc	fsr2h,f,c
 12595  001D2A  A8DF               	btfss	indf2,4,c
 12596  001D2C  D003               	goto	u11820
 12597  001D2E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12598  001D30  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12599  001D32  D002               	goto	u11838
 12600  001D34                     u11820:
 12601  001D34  0100               	movlb	0	; () banked
 12602  001D36  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12603  001D38                     u11838:
 12604  001D38  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12605  001D3A  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12606  001D3C  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12607  001D3E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12608  001D40  0BFB               	andlw	-5
 12609  001D42  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12610  001D44  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12611                           
 12612                           ;ENC424J600.c: 736: receiveStatusVector.unknownOpcode = (uint8_t) (*(rsv + 3) & 0b001000
      +                          00) != 0 ? 1 : 0;
 12613  001D46  EE20 F003          	lfsr	2,3
 12614  001D4A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12615  001D4C  26D9               	addwf	fsr2l,f,c
 12616  001D4E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12617  001D50  22DA               	addwfc	fsr2h,f,c
 12618  001D52  AADF               	btfss	indf2,5,c
 12619  001D54  D003               	goto	u11840
 12620  001D56  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12621  001D58  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12622  001D5A  D002               	goto	u11858
 12623  001D5C                     u11840:
 12624  001D5C  0100               	movlb	0	; () banked
 12625  001D5E  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12626  001D60                     u11858:
 12627  001D60  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12628  001D62  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12629  001D64  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12630  001D66  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12631  001D68  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12632  001D6A  0BF7               	andlw	-9
 12633  001D6C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12634  001D6E  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12635                           
 12636                           ;ENC424J600.c: 737: receiveStatusVector.vlan = (uint8_t) (*(rsv + 3) & 0b01000000) != 0 
      +                          ? 1 : 0;
 12637  001D70  EE20 F003          	lfsr	2,3
 12638  001D74  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12639  001D76  26D9               	addwf	fsr2l,f,c
 12640  001D78  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12641  001D7A  22DA               	addwfc	fsr2h,f,c
 12642  001D7C  ACDF               	btfss	indf2,6,c
 12643  001D7E  D003               	goto	u11860
 12644  001D80  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12645  001D82  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12646  001D84  D002               	goto	u11878
 12647  001D86                     u11860:
 12648  001D86  0100               	movlb	0	; () banked
 12649  001D88  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12650  001D8A                     u11878:
 12651  001D8A  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12652  001D8C  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12653  001D8E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12654  001D90  0BEF               	andlw	-17
 12655  001D92  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12656  001D94  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12657                           
 12658                           ;ENC424J600.c: 738: receiveStatusVector.runtFilter = (uint8_t) (*(rsv + 3) & 0b10000000)
      +                           != 0 ? 1 : 0;
 12659  001D96  EE20 F003          	lfsr	2,3
 12660  001D9A  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12661  001D9C  26D9               	addwf	fsr2l,f,c
 12662  001D9E  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12663  001DA0  22DA               	addwfc	fsr2h,f,c
 12664  001DA2  AEDF               	btfss	indf2,7,c
 12665  001DA4  D003               	goto	u11880
 12666  001DA6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12667  001DA8  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12668  001DAA  D002               	goto	u11898
 12669  001DAC                     u11880:
 12670  001DAC  0100               	movlb	0	; () banked
 12671  001DAE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12672  001DB0                     u11898:
 12673  001DB0  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12674  001DB2  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12675  001DB4  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12676  001DB6  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12677  001DB8  0BDF               	andlw	-33
 12678  001DBA  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12679  001DBC  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12680                           
 12681                           ;ENC424J600.c: 740: receiveStatusVector.notMeFilter = (uint8_t) (*(rsv + 4) & 0b00000001
      +                          ) != 0 ? 1 : 0;
 12682  001DBE  EE20 F004          	lfsr	2,4
 12683  001DC2  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12684  001DC4  26D9               	addwf	fsr2l,f,c
 12685  001DC6  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12686  001DC8  22DA               	addwfc	fsr2h,f,c
 12687  001DCA  A0DF               	btfss	indf2,0,c
 12688  001DCC  D003               	goto	u11900
 12689  001DCE  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12690  001DD0  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12691  001DD2  D002               	goto	u11918
 12692  001DD4                     u11900:
 12693  001DD4  0100               	movlb	0	; () banked
 12694  001DD6  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12695  001DD8                     u11918:
 12696  001DD8  3B65               	swapf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12697  001DDA  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12698  001DDC  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12699  001DDE  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12700  001DE0  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12701  001DE2  0BBF               	andlw	-65
 12702  001DE4  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12703  001DE6  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12704                           
 12705                           ;ENC424J600.c: 741: receiveStatusVector.hashFilter = (uint8_t) (*(rsv + 4) & 0b00000010)
      +                           != 0 ? 1 : 0;
 12706  001DE8  EE20 F004          	lfsr	2,4
 12707  001DEC  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12708  001DEE  26D9               	addwf	fsr2l,f,c
 12709  001DF0  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12710  001DF2  22DA               	addwfc	fsr2h,f,c
 12711  001DF4  A2DF               	btfss	indf2,1,c
 12712  001DF6  D003               	goto	u11920
 12713  001DF8  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12714  001DFA  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12715  001DFC  D002               	goto	u11938
 12716  001DFE                     u11920:
 12717  001DFE  0100               	movlb	0	; () banked
 12718  001E00  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12719  001E02                     u11938:
 12720  001E02  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12721  001E04  3365               	rrcf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12722  001E06  516F               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),w,b
 12723  001E08  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12724  001E0A  0B7F               	andlw	-129
 12725  001E0C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12726  001E0E  6F6F               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+3)& (0+255),b
 12727                           
 12728                           ;ENC424J600.c: 742: receiveStatusVector.magicFilter = (uint8_t) (*(rsv + 4) & 0b00000100
      +                          ) != 0 ? 1 : 0;
 12729  001E10  EE20 F004          	lfsr	2,4
 12730  001E14  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12731  001E16  26D9               	addwf	fsr2l,f,c
 12732  001E18  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12733  001E1A  22DA               	addwfc	fsr2h,f,c
 12734  001E1C  A4DF               	btfss	indf2,2,c
 12735  001E1E  D003               	goto	u11940
 12736  001E20  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12737  001E22  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12738  001E24  D002               	goto	u11958
 12739  001E26                     u11940:
 12740  001E26  0100               	movlb	0	; () banked
 12741  001E28  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12742  001E2A                     u11958:
 12743  001E2A  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 12744  001E2C  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12745  001E2E  0BFE               	andlw	-2
 12746  001E30  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12747  001E32  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 12748                           
 12749                           ;ENC424J600.c: 743: receiveStatusVector.patternMatch = (uint8_t) (*(rsv + 4) & 0b0000100
      +                          0) != 0 ? 1 : 0;
 12750  001E34  EE20 F004          	lfsr	2,4
 12751  001E38  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12752  001E3A  26D9               	addwf	fsr2l,f,c
 12753  001E3C  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12754  001E3E  22DA               	addwfc	fsr2h,f,c
 12755  001E40  A6DF               	btfss	indf2,3,c
 12756  001E42  D003               	goto	u11960
 12757  001E44  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12758  001E46  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12759  001E48  D002               	goto	u11978
 12760  001E4A                     u11960:
 12761  001E4A  0100               	movlb	0	; () banked
 12762  001E4C  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12763  001E4E                     u11978:
 12764  001E4E  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12765  001E50  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 12766  001E52  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12767  001E54  0BFD               	andlw	-3
 12768  001E56  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12769  001E58  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 12770                           
 12771                           ;ENC424J600.c: 744: receiveStatusVector.unicast = (uint8_t) (*(rsv + 4) & 0b00010000) !=
      +                           0 ? 1 : 0;
 12772  001E5A  EE20 F004          	lfsr	2,4
 12773  001E5E  5160               	movf	enc424j600_updateReceiveStatusVector@rsv& (0+255),w,b
 12774  001E60  26D9               	addwf	fsr2l,f,c
 12775  001E62  5161               	movf	(enc424j600_updateReceiveStatusVector@rsv+1)& (0+255),w,b
 12776  001E64  22DA               	addwfc	fsr2h,f,c
 12777  001E66  A8DF               	btfss	indf2,4,c
 12778  001E68  D003               	goto	u11980
 12779  001E6A  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12780  001E6C  2B65               	incf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12781  001E6E  D002               	goto	u11998
 12782  001E70                     u11980:
 12783  001E70  0100               	movlb	0	; () banked
 12784  001E72  6B65               	clrf	??_enc424j600_updateReceiveStatusVector& (0+255),b
 12785  001E74                     u11998:
 12786  001E74  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12787  001E76  4765               	rlncf	??_enc424j600_updateReceiveStatusVector& (0+255),f,b
 12788  001E78  5170               	movf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),w,b
 12789  001E7A  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12790  001E7C  0BFB               	andlw	-5
 12791  001E7E  1965               	xorwf	??_enc424j600_updateReceiveStatusVector& (0+255),w,b
 12792  001E80  6F70               	movwf	(enc424j600_updateReceiveStatusVector@receiveStatusVector+4)& (0+255),b
 12793                           
 12794                           ; BSR set to: 0
 12795                           ;ENC424J600.c: 746: return receiveStatusVector;
 12796  001E82  EE20  F06C         	lfsr	2,enc424j600_updateReceiveStatusVector@receiveStatusVector
 12797  001E86  EE00  F060         	lfsr	0,?_enc424j600_updateReceiveStatusVector
 12798  001E8A  0E04               	movlw	4
 12799  001E8C                     u12001:
 12800  001E8C  CFDB FFEB          	movff	plusw2,plusw0
 12801  001E90  06E8               	decf	wreg,f,c
 12802  001E92  E2FC               	bc	u12001
 12803  001E94  0012               	return	
 12804  001E96                     __end_of_enc424j600_updateReceiveStatusVector:
 12805                           	opt stack 0
 12806                           tblptru	equ	0xFF8
 12807                           tblptrh	equ	0xFF7
 12808                           tblptrl	equ	0xFF6
 12809                           tablat	equ	0xFF5
 12810                           prodh	equ	0xFF4
 12811                           prodl	equ	0xFF3
 12812                           intcon	equ	0xFF2
 12813                           intcon3	equ	0xFF0
 12814                           indf0	equ	0xFEF
 12815                           postinc0	equ	0xFEE
 12816                           plusw0	equ	0xFEB
 12817                           fsr0h	equ	0xFEA
 12818                           fsr0l	equ	0xFE9
 12819                           wreg	equ	0xFE8
 12820                           indf1	equ	0xFE7
 12821                           postinc1	equ	0xFE6
 12822                           postdec1	equ	0xFE5
 12823                           plusw1	equ	0xFE3
 12824                           fsr1h	equ	0xFE2
 12825                           fsr1l	equ	0xFE1
 12826                           indf2	equ	0xFDF
 12827                           postinc2	equ	0xFDE
 12828                           postdec2	equ	0xFDD
 12829                           plusw2	equ	0xFDB
 12830                           fsr2h	equ	0xFDA
 12831                           fsr2l	equ	0xFD9
 12832                           status	equ	0xFD8
 12833                           
 12834 ;; *************** function _ethernetController_getEtherTypeField *****************
 12835 ;; Defined at:
 12836 ;;		line 283 in file "src/enc424j600/ENC424J600.c"
 12837 ;; Parameters:    Size  Location     Type
 12838 ;;  field           9   15[BANK0 ] struct memoryField
 12839 ;; Auto vars:     Size  Location     Type
 12840 ;;  ethertype       2   28[BANK0 ] enum E5509
 12841 ;;  highByte        1   32[BANK0 ] unsigned char 
 12842 ;;  lowByte         1   31[BANK0 ] unsigned char 
 12843 ;;  opcode          1   30[BANK0 ] unsigned char 
 12844 ;; Return value:  Size  Location     Type
 12845 ;;                  2   15[BANK0 ] enum E5509
 12846 ;; Registers used:
 12847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12848 ;; Tracked objects:
 12849 ;;		On entry : 0/0
 12850 ;;		On exit  : 0/0
 12851 ;;		Unchanged: 0/0
 12852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12853 ;;      Params:         0       9       0       0       0       0       0       0       0
 12854 ;;      Locals:         0       5       0       0       0       0       0       0       0
 12855 ;;      Temps:          0       4       0       0       0       0       0       0       0
 12856 ;;      Totals:         0      18       0       0       0       0       0       0       0
 12857 ;;Total ram usage:       18 bytes
 12858 ;; Hardware stack levels used:    1
 12859 ;; Hardware stack levels required when called:    7
 12860 ;; This function calls:
 12861 ;;		_enc424j600_readSPI
 12862 ;;		_enc424j600_setERXDATAReadPointer
 12863 ;;		_enc424j600_writeSPI
 12864 ;; This function is called by:
 12865 ;;		_ethernet_rxGetNewFrame
 12866 ;; This function uses a non-reentrant model
 12867 ;;
 12868                           
 12869                           	psect	text31
 12870  00555C                     __ptext31:
 12871                           	opt stack 0
 12872  00555C                     _ethernetController_getEtherTypeField:
 12873                           	opt stack 21
 12874                           
 12875                           ;ENC424J600.c: 284: etherType_t ethertype = 0x0000;
 12876                           
 12877                           ; BSR set to: 0
 12878                           ;incstack = 0
 12879  00555C  0E00               	movlw	0
 12880  00555E  0100               	movlb	0	; () banked
 12881  005560  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 12882  005562  0E00               	movlw	0
 12883  005564  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 12884                           
 12885                           ; BSR set to: 0
 12886                           ;ENC424J600.c: 285: enc424j600_setERXDATAReadPointer(field.start + 20);
 12887  005566  0E14               	movlw	20
 12888  005568  256F               	addwf	ethernetController_getEtherTypeField@field& (0+255),w,b
 12889  00556A  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 12890  00556C  0E00               	movlw	0
 12891  00556E  2170               	addwfc	(ethernetController_getEtherTypeField@field+1)& (0+255),w,b
 12892  005570  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 12893  005572  EC6B  F02E         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 12894                           
 12895                           ;ENC424J600.c: 286: uint8_t opcode = 0x2C;
 12896  005576  0E2C               	movlw	44
 12897  005578  0100               	movlb	0	; () banked
 12898  00557A  6F7E               	movwf	ethernetController_getEtherTypeField@opcode& (0+255),b
 12899                           
 12900                           ; BSR set to: 0
 12901                           ;ENC424J600.c: 287: PORTBbits.RB4=0;
 12902  00557C  9881               	bcf	3969,4,c	;volatile
 12903                           
 12904                           ;ENC424J600.c: 288: enc424j600_writeSPI(&opcode);
 12905  00557E  0E7E               	movlw	low ethernetController_getEtherTypeField@opcode
 12906  005580  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 12907  005582  0E00               	movlw	high ethernetController_getEtherTypeField@opcode
 12908  005584  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 12909  005586  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 12910                           
 12911                           ;ENC424J600.c: 290: uint8_t lowByte;
 12912                           ;ENC424J600.c: 291: uint8_t highByte;
 12913                           ;ENC424J600.c: 292: enc424j600_readSPI(&highByte);
 12914  00558A  0E80               	movlw	low ethernetController_getEtherTypeField@highByte
 12915  00558C  0100               	movlb	0	; () banked
 12916  00558E  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12917  005590  0E00               	movlw	high ethernetController_getEtherTypeField@highByte
 12918  005592  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12919  005594  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 12920                           
 12921                           ;ENC424J600.c: 293: enc424j600_readSPI(&lowByte);
 12922  005598  0E7F               	movlw	low ethernetController_getEtherTypeField@lowByte
 12923  00559A  0100               	movlb	0	; () banked
 12924  00559C  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 12925  00559E  0E00               	movlw	high ethernetController_getEtherTypeField@lowByte
 12926  0055A0  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 12927  0055A2  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 12928                           
 12929                           ;ENC424J600.c: 294: ethertype = (uint16_t) (lowByte | (highByte << 8));
 12930  0055A6  0100               	movlb	0	; () banked
 12931  0055A8  5180               	movf	ethernetController_getEtherTypeField@highByte& (0+255),w,b
 12932  0055AA  6F79               	movwf	(??_ethernetController_getEtherTypeField+1)& (0+255),b
 12933  0055AC  6B78               	clrf	??_ethernetController_getEtherTypeField& (0+255),b
 12934  0055AE  517F               	movf	ethernetController_getEtherTypeField@lowByte& (0+255),w,b
 12935  0055B0  6F7A               	movwf	(??_ethernetController_getEtherTypeField+2)& (0+255),b
 12936  0055B2  6B7B               	clrf	(??_ethernetController_getEtherTypeField+3)& (0+255),b
 12937  0055B4  5178               	movf	??_ethernetController_getEtherTypeField& (0+255),w,b
 12938  0055B6  117A               	iorwf	(??_ethernetController_getEtherTypeField+2)& (0+255),w,b
 12939  0055B8  6F7C               	movwf	ethernetController_getEtherTypeField@ethertype& (0+255),b
 12940  0055BA  5179               	movf	(??_ethernetController_getEtherTypeField+1)& (0+255),w,b
 12941  0055BC  117B               	iorwf	(??_ethernetController_getEtherTypeField+3)& (0+255),w,b
 12942  0055BE  6F7D               	movwf	(ethernetController_getEtherTypeField@ethertype+1)& (0+255),b
 12943                           
 12944                           ; BSR set to: 0
 12945                           ;ENC424J600.c: 295: PORTBbits.RB4=1;
 12946  0055C0  8881               	bsf	3969,4,c	;volatile
 12947                           
 12948                           ; BSR set to: 0
 12949                           ;ENC424J600.c: 296: return ethertype;
 12950  0055C2  C07C  F06F         	movff	ethernetController_getEtherTypeField@ethertype,?_ethernetController_getEtherTypeF
      +                          ield
 12951  0055C6  C07D  F070         	movff	ethernetController_getEtherTypeField@ethertype+1,?_ethernetController_getEtherTyp
      +                          eField+1
 12952  0055CA  0012               	return	
 12953  0055CC                     __end_of_ethernetController_getEtherTypeField:
 12954                           	opt stack 0
 12955                           tblptru	equ	0xFF8
 12956                           tblptrh	equ	0xFF7
 12957                           tblptrl	equ	0xFF6
 12958                           tablat	equ	0xFF5
 12959                           prodh	equ	0xFF4
 12960                           prodl	equ	0xFF3
 12961                           intcon	equ	0xFF2
 12962                           intcon3	equ	0xFF0
 12963                           indf0	equ	0xFEF
 12964                           postinc0	equ	0xFEE
 12965                           plusw0	equ	0xFEB
 12966                           fsr0h	equ	0xFEA
 12967                           fsr0l	equ	0xFE9
 12968                           wreg	equ	0xFE8
 12969                           indf1	equ	0xFE7
 12970                           postinc1	equ	0xFE6
 12971                           postdec1	equ	0xFE5
 12972                           plusw1	equ	0xFE3
 12973                           fsr1h	equ	0xFE2
 12974                           fsr1l	equ	0xFE1
 12975                           indf2	equ	0xFDF
 12976                           postinc2	equ	0xFDE
 12977                           postdec2	equ	0xFDD
 12978                           plusw2	equ	0xFDB
 12979                           fsr2h	equ	0xFDA
 12980                           fsr2l	equ	0xFD9
 12981                           status	equ	0xFD8
 12982                           
 12983 ;; *************** function _etherTypeToString *****************
 12984 ;; Defined at:
 12985 ;;		line 138 in file "src/system/uart.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;  ethertype       2    0[BANK0 ] enum E5590
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;		None
 12990 ;; Return value:  Size  Location     Type
 12991 ;;                  2    0[BANK0 ] PTR unsigned char 
 12992 ;; Registers used:
 12993 ;;		wreg, status,2, status,0
 12994 ;; Tracked objects:
 12995 ;;		On entry : 0/0
 12996 ;;		On exit  : 0/0
 12997 ;;		Unchanged: 0/0
 12998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12999 ;;      Params:         0       2       0       0       0       0       0       0       0
 13000 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13001 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13002 ;;      Totals:         0       4       0       0       0       0       0       0       0
 13003 ;;Total ram usage:        4 bytes
 13004 ;; Hardware stack levels used:    1
 13005 ;; Hardware stack levels required when called:    4
 13006 ;; This function calls:
 13007 ;;		Nothing
 13008 ;; This function is called by:
 13009 ;;		_ethernet_rxGetNewFrame
 13010 ;; This function uses a non-reentrant model
 13011 ;;
 13012                           
 13013                           	psect	text32
 13014  005B52                     __ptext32:
 13015                           	opt stack 0
 13016  005B52                     _etherTypeToString:
 13017                           	opt stack 24
 13018                           
 13019                           ;uart.c: 139: switch (ethertype) {
 13020                           
 13021                           ; BSR set to: 0
 13022                           ;incstack = 0
 13023  005B52  D010               	goto	l870
 13024  005B54                     
 13025                           ;uart.c: 141: return "IPv4";
 13026  005B54  0EBE               	movlw	low STR_80
 13027  005B56  0100               	movlb	0	; () banked
 13028  005B58  6F60               	movwf	?_etherTypeToString& (0+255),b
 13029  005B5A  0E7F               	movlw	high STR_80
 13030  005B5C  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 13031                           
 13032                           ; BSR set to: 0
 13033  005B5E  0012               	return	
 13034  005B60                     
 13035                           ; BSR set to: 0
 13036                           ;uart.c: 143: return "ARP";
 13037                           
 13038                           ; BSR set to: 0
 13039  005B60  0EE8               	movlw	low STR_81
 13040  005B62  6F60               	movwf	?_etherTypeToString& (0+255),b
 13041  005B64  0E7F               	movlw	high STR_81
 13042  005B66  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 13043                           
 13044                           ; BSR set to: 0
 13045  005B68  0012               	return	
 13046  005B6A                     
 13047                           ; BSR set to: 0
 13048                           ;uart.c: 145: return "Unknown EtherType";
 13049                           
 13050                           ; BSR set to: 0
 13051  005B6A  0E01               	movlw	low STR_82
 13052  005B6C  6F60               	movwf	?_etherTypeToString& (0+255),b
 13053  005B6E  0E7E               	movlw	high STR_82
 13054  005B70  6F61               	movwf	(?_etherTypeToString+1)& (0+255),b
 13055                           
 13056                           ; BSR set to: 0
 13057                           ;uart.c: 146: }
 13058                           
 13059                           ; BSR set to: 0
 13060  005B72  0012               	return	
 13061  005B74                     l870:
 13062                           
 13063                           ; BSR set to: 0
 13064  005B74  C060  F062         	movff	etherTypeToString@ethertype,??_etherTypeToString
 13065  005B78  C061  F063         	movff	etherTypeToString@ethertype+1,??_etherTypeToString+1
 13066                           
 13067                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13068                           ; Switch size 1, requested type "space"
 13069                           ; Number of cases is 1, Range of values is 8 to 8
 13070                           ; switch strategies available:
 13071                           ; Name         Instructions Cycles
 13072                           ; simple_byte            4     3 (average)
 13073                           ;	Chosen strategy is simple_byte
 13074  005B7C  0100               	movlb	0	; () banked
 13075  005B7E  5163               	movf	(??_etherTypeToString+1)& (0+255),w,b
 13076  005B80  0A08               	xorlw	8	; case 8
 13077  005B82  A4D8               	btfss	status,2,c
 13078  005B84  D7F2               	goto	l874
 13079                           
 13080                           ; BSR set to: 0
 13081                           ; Switch size 1, requested type "space"
 13082                           ; Number of cases is 2, Range of values is 0 to 6
 13083                           ; switch strategies available:
 13084                           ; Name         Instructions Cycles
 13085                           ; simple_byte            7     4 (average)
 13086                           ;	Chosen strategy is simple_byte
 13087  005B86  5162               	movf	??_etherTypeToString& (0+255),w,b
 13088  005B88  0A00               	xorlw	0	; case 0
 13089  005B8A  B4D8               	btfsc	status,2,c
 13090  005B8C  D7E3               	goto	l871
 13091  005B8E  0A06               	xorlw	6	; case 6
 13092  005B90  B4D8               	btfsc	status,2,c
 13093  005B92  D7E6               	goto	l873
 13094  005B94  D7EA               	goto	l874
 13095  005B96                     __end_of_etherTypeToString:
 13096                           	opt stack 0
 13097                           tblptru	equ	0xFF8
 13098                           tblptrh	equ	0xFF7
 13099                           tblptrl	equ	0xFF6
 13100                           tablat	equ	0xFF5
 13101                           prodh	equ	0xFF4
 13102                           prodl	equ	0xFF3
 13103                           intcon	equ	0xFF2
 13104                           intcon3	equ	0xFF0
 13105                           indf0	equ	0xFEF
 13106                           postinc0	equ	0xFEE
 13107                           plusw0	equ	0xFEB
 13108                           fsr0h	equ	0xFEA
 13109                           fsr0l	equ	0xFE9
 13110                           wreg	equ	0xFE8
 13111                           indf1	equ	0xFE7
 13112                           postinc1	equ	0xFE6
 13113                           postdec1	equ	0xFE5
 13114                           plusw1	equ	0xFE3
 13115                           fsr1h	equ	0xFE2
 13116                           fsr1l	equ	0xFE1
 13117                           indf2	equ	0xFDF
 13118                           postinc2	equ	0xFDE
 13119                           postdec2	equ	0xFDD
 13120                           plusw2	equ	0xFDB
 13121                           fsr2h	equ	0xFDA
 13122                           fsr2l	equ	0xFD9
 13123                           status	equ	0xFD8
 13124                           
 13125 ;; *************** function _arp_handleNewPacket *****************
 13126 ;; Defined at:
 13127 ;;		line 33 in file "src/stack/protocols/arp.c"
 13128 ;; Parameters:    Size  Location     Type
 13129 ;;  frame           2  156[BANK0 ] PTR struct ethernetFrame
 13130 ;;		 -> stack(123), 
 13131 ;; Auto vars:     Size  Location     Type
 13132 ;;  arp            32   88[BANK1 ] struct arp_message
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  1    wreg      void 
 13135 ;; Registers used:
 13136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13142 ;;      Params:         0       2       0       0       0       0       0       0       0
 13143 ;;      Locals:         0       0      32       0       0       0       0       0       0
 13144 ;;      Temps:          0       2       0       0       0       0       0       0       0
 13145 ;;      Totals:         0       4      32       0       0       0       0       0       0
 13146 ;;Total ram usage:       36 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:   11
 13149 ;; This function calls:
 13150 ;;		_UARTTransmitText
 13151 ;;		_arp_parseFromRXBuffer
 13152 ;;		_arp_sendReply
 13153 ;;		_arp_setNewEntry
 13154 ;;		_ethernetController_dropPacket
 13155 ;;		_getMillis
 13156 ;;		_ipAdressToString
 13157 ;;		_ipv4_isAllZero
 13158 ;;		_macToString
 13159 ;; This function is called by:
 13160 ;;		_ethernet_rxGetNewFrame
 13161 ;; This function uses a non-reentrant model
 13162 ;;
 13163                           
 13164                           	psect	text33
 13165  002F1A                     __ptext33:
 13166                           	opt stack 0
 13167  002F1A                     _arp_handleNewPacket:
 13168                           	opt stack 17
 13169                           
 13170                           ;arp.c: 34: arp_message_t arp;
 13171                           ;arp.c: 35: if (frame->ethertype != ETHERTYPE_ARP) {
 13172                           
 13173                           ; BSR set to: 0
 13174                           ;incstack = 0
 13175  002F1A  0100               	movlb	0	; () banked
 13176  002F1C  EE20 F00E          	lfsr	2,14
 13177  002F20  51FC               	movf	arp_handleNewPacket@frame& (0+255),w,b
 13178  002F22  26D9               	addwf	fsr2l,f,c
 13179  002F24  51FD               	movf	(arp_handleNewPacket@frame+1)& (0+255),w,b
 13180  002F26  22DA               	addwfc	fsr2h,f,c
 13181  002F28  0E06               	movlw	6
 13182  002F2A  18DE               	xorwf	postinc2,w,c
 13183  002F2C  E104               	bnz	u12730
 13184  002F2E  0E08               	movlw	8
 13185  002F30  18DE               	xorwf	postinc2,w,c
 13186  002F32  B4D8               	btfsc	status,2,c
 13187  002F34  D007               	goto	l971
 13188  002F36                     u12730:
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;arp.c: 36: ethernetController_dropPacket(frame);
 13192  002F36  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 13193  002F3A  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 13194  002F3E  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
 13195                           
 13196                           ;arp.c: 37: return;
 13197  002F42  0012               	return	
 13198  002F44                     l971:
 13199                           
 13200                           ;arp.c: 38: }
 13201                           ;arp.c: 40: arp = arp_parseFromRXBuffer(frame);
 13202  002F44  C0FC  F074         	movff	arp_handleNewPacket@frame,arp_parseFromRXBuffer@frame
 13203  002F48  C0FD  F075         	movff	arp_handleNewPacket@frame+1,arp_parseFromRXBuffer@frame+1
 13204  002F4C  ECD4  F009         	call	_arp_parseFromRXBuffer	;wreg free
 13205  002F50  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 13206  002F54  0E1F               	movlw	31
 13207  002F56                     u12741:
 13208  002F56  CFEB FFDB          	movff	plusw0,plusw2
 13209  002F5A  06E8               	decf	wreg,f,c
 13210  002F5C  E2FC               	bc	u12741
 13211                           
 13212                           ;arp.c: 41: if (arp.err.code != (uint16_t)0) {
 13213  002F5E  0101               	movlb	1	; () banked
 13214  002F60  5176               	movf	(arp_handleNewPacket@arp+30)& (0+255),w,b
 13215  002F62  1177               	iorwf	(arp_handleNewPacket@arp+31)& (0+255),w,b
 13216  002F64  B4D8               	btfsc	status,2,c
 13217  002F66  D00E               	goto	l973
 13218                           
 13219                           ; BSR set to: 1
 13220                           ;arp.c: 42: ethernetController_dropPacket(frame);
 13221  002F68  C0FC  F072         	movff	arp_handleNewPacket@frame,?_ethernetController_dropPacket
 13222  002F6C  C0FD  F073         	movff	arp_handleNewPacket@frame+1,?_ethernetController_dropPacket+1
 13223  002F70  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
 13224                           
 13225                           ;arp.c: 44: UARTTransmitText("[Invalid ARP Message was discarded.]\r\n");
 13226  002F74  0E91               	movlw	low STR_87
 13227  002F76  0100               	movlb	0	; () banked
 13228  002F78  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13229  002F7A  0E7A               	movlw	high STR_87
 13230  002F7C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13231  002F7E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13232                           
 13233                           ;arp.c: 46: return;
 13234  002F82  0012               	return	
 13235  002F84                     l973:
 13236                           
 13237                           ;arp.c: 47: }
 13238                           ;arp.c: 49: UARTTransmitText("[");
 13239  002F84  0EBC               	movlw	low (STR_90+3)
 13240  002F86  0100               	movlb	0	; () banked
 13241  002F88  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13242  002F8A  0E7F               	movlw	high (STR_90+3)
 13243  002F8C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13244  002F8E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13245                           
 13246                           ;arp.c: 50: UARTTransmitText(macToString(arp.senderMACAddress));
 13247  002F92  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 13248  002F96  EE00  F07A         	lfsr	0,macToString@addr
 13249  002F9A  0E05               	movlw	5
 13250  002F9C                     u12761:
 13251  002F9C  CFDB FFEB          	movff	plusw2,plusw0
 13252  002FA0  06E8               	decf	wreg,f,c
 13253  002FA2  E2FC               	bc	u12761
 13254  002FA4  EC55  F023         	call	_macToString	;wreg free
 13255  002FA8  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 13256  002FAC  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 13257  002FB0  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13258                           
 13259                           ;arp.c: 51: UARTTransmitText(", ");
 13260  002FB4  0EB1               	movlw	low (STR_65+17)
 13261  002FB6  0100               	movlb	0	; () banked
 13262  002FB8  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13263  002FBA  0E7D               	movlw	high (STR_65+17)
 13264  002FBC  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13265  002FBE  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13266                           
 13267                           ;arp.c: 52: UARTTransmitText(ipAdressToString(arp.senderIPAddress));
 13268  002FC2  C166  F073         	movff	arp_handleNewPacket@arp+14,ipAdressToString@ip
 13269  002FC6  C167  F074         	movff	arp_handleNewPacket@arp+15,ipAdressToString@ip+1
 13270  002FCA  C168  F075         	movff	arp_handleNewPacket@arp+16,ipAdressToString@ip+2
 13271  002FCE  C169  F076         	movff	arp_handleNewPacket@arp+17,ipAdressToString@ip+3
 13272  002FD2  EC96  F016         	call	_ipAdressToString	;wreg free
 13273  002FD6  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 13274  002FDA  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 13275  002FDE  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13276                           
 13277                           ;arp.c: 53: UARTTransmitText("]->[");
 13278  002FE2  0EB9               	movlw	low STR_90
 13279  002FE4  0100               	movlb	0	; () banked
 13280  002FE6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13281  002FE8  0E7F               	movlw	high STR_90
 13282  002FEA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13283  002FEC  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13284                           
 13285                           ;arp.c: 54: UARTTransmitText(macToString(arp.targetMACAddress));
 13286  002FF0  EE21  F06A         	lfsr	2,arp_handleNewPacket@arp+18
 13287  002FF4  EE00  F07A         	lfsr	0,macToString@addr
 13288  002FF8  0E05               	movlw	5
 13289  002FFA                     u12771:
 13290  002FFA  CFDB FFEB          	movff	plusw2,plusw0
 13291  002FFE  06E8               	decf	wreg,f,c
 13292  003000  E2FC               	bc	u12771
 13293  003002  EC55  F023         	call	_macToString	;wreg free
 13294  003006  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 13295  00300A  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 13296  00300E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13297                           
 13298                           ;arp.c: 55: UARTTransmitText(", ");
 13299  003012  0EB1               	movlw	low (STR_65+17)
 13300  003014  0100               	movlb	0	; () banked
 13301  003016  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13302  003018  0E7D               	movlw	high (STR_65+17)
 13303  00301A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13304  00301C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13305                           
 13306                           ;arp.c: 56: UARTTransmitText(ipAdressToString(arp.targetIPAddress));
 13307  003020  C170  F073         	movff	arp_handleNewPacket@arp+24,ipAdressToString@ip
 13308  003024  C171  F074         	movff	arp_handleNewPacket@arp+25,ipAdressToString@ip+1
 13309  003028  C172  F075         	movff	arp_handleNewPacket@arp+26,ipAdressToString@ip+2
 13310  00302C  C173  F076         	movff	arp_handleNewPacket@arp+27,ipAdressToString@ip+3
 13311  003030  EC96  F016         	call	_ipAdressToString	;wreg free
 13312  003034  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 13313  003038  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 13314  00303C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13315                           
 13316                           ;arp.c: 57: UARTTransmitText("]");
 13317  003040  0EAC               	movlw	low (STR_12+5)
 13318  003042  0100               	movlb	0	; () banked
 13319  003044  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13320  003046  0E7F               	movlw	high (STR_12+5)
 13321  003048  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13322  00304A  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13323                           
 13324                           ;arp.c: 58: UARTTransmitText("\033[94;4;10m");
 13325  00304E  0E52               	movlw	low STR_93
 13326  003050  0100               	movlb	0	; () banked
 13327  003052  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13328  003054  0E7F               	movlw	high STR_93
 13329  003056  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13330  003058  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13331                           
 13332                           ;arp.c: 59: if (arp.fIsProbe)
 13333  00305C  0101               	movlb	1	; () banked
 13334  00305E  A374               	btfss	(arp_handleNewPacket@arp+28)& (0+255),1,b
 13335  003060  D007               	goto	l974
 13336                           
 13337                           ; BSR set to: 1
 13338                           ;arp.c: 60: UARTTransmitText("[IsProbe]");
 13339  003062  0E72               	movlw	low STR_94
 13340  003064  0100               	movlb	0	; () banked
 13341  003066  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13342  003068  0E7F               	movlw	high STR_94
 13343  00306A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13344  00306C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13345  003070                     l974:
 13346                           
 13347                           ;arp.c: 61: if (arp.fIsGratuitous)
 13348  003070  0101               	movlb	1	; () banked
 13349  003072  A174               	btfss	(arp_handleNewPacket@arp+28)& (0+255),0,b
 13350  003074  D007               	goto	l975
 13351                           
 13352                           ; BSR set to: 1
 13353                           ;arp.c: 62: UARTTransmitText("[IsGratuitous]");
 13354  003076  0E85               	movlw	low STR_95
 13355  003078  0100               	movlb	0	; () banked
 13356  00307A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13357  00307C  0E7E               	movlw	high STR_95
 13358  00307E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13359  003080  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13360  003084                     l975:
 13361                           
 13362                           ;arp.c: 63: UARTTransmitText("\033[0m");
 13363  003084  0ED7               	movlw	low STR_7
 13364  003086  0100               	movlb	0	; () banked
 13365  003088  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13366  00308A  0E7F               	movlw	high STR_7
 13367  00308C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13368  00308E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13369                           
 13370                           ;arp.c: 65: arp_sendReply(arp);
 13371  003092  EE21  F058         	lfsr	2,arp_handleNewPacket@arp
 13372  003096  EE01  F000         	lfsr	0,arp_sendReply@request
 13373  00309A  0E1F               	movlw	31
 13374  00309C                     u12801:
 13375  00309C  CFDB FFEB          	movff	plusw2,plusw0
 13376  0030A0  06E8               	decf	wreg,f,c
 13377  0030A2  E2FC               	bc	u12801
 13378  0030A4  ECEF  F01A         	call	_arp_sendReply	;wreg free
 13379                           
 13380                           ;arp.c: 66: if (!ipv4_isAllZero(&arp.senderIPAddress)) {
 13381  0030A8  0E66               	movlw	low (arp_handleNewPacket@arp+14)
 13382  0030AA  0100               	movlb	0	; () banked
 13383  0030AC  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 13384  0030AE  0E01               	movlw	high (arp_handleNewPacket@arp+14)
 13385  0030B0  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 13386  0030B2  EC42  F02F         	call	_ipv4_isAllZero	;wreg free
 13387  0030B6  0100               	movlb	0	; () banked
 13388  0030B8  B0D8               	btfsc	status,0,c
 13389  0030BA  D01D               	goto	l976
 13390                           
 13391                           ; BSR set to: 0
 13392                           ;arp.c: 67: arp_setNewEntry(arp.senderMACAddress, arp.senderIPAddress, getMillis());
 13393  0030BC  EE21  F060         	lfsr	2,arp_handleNewPacket@arp+8
 13394  0030C0  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 13395  0030C4  0E05               	movlw	5
 13396  0030C6                     u12821:
 13397  0030C6  CFDB FFEB          	movff	plusw2,plusw0
 13398  0030CA  06E8               	decf	wreg,f,c
 13399  0030CC  E2FC               	bc	u12821
 13400  0030CE  C166  F0A0         	movff	arp_handleNewPacket@arp+14,arp_setNewEntry@ip
 13401  0030D2  C167  F0A1         	movff	arp_handleNewPacket@arp+15,arp_setNewEntry@ip+1
 13402  0030D6  C168  F0A2         	movff	arp_handleNewPacket@arp+16,arp_setNewEntry@ip+2
 13403  0030DA  C169  F0A3         	movff	arp_handleNewPacket@arp+17,arp_setNewEntry@ip+3
 13404  0030DE  EC01  F031         	call	_getMillis	;wreg free
 13405  0030E2  C060  F0A4         	movff	?_getMillis,arp_setNewEntry@timestamp
 13406  0030E6  C061  F0A5         	movff	?_getMillis+1,arp_setNewEntry@timestamp+1
 13407  0030EA  C062  F0A6         	movff	?_getMillis+2,arp_setNewEntry@timestamp+2
 13408  0030EE  C063  F0A7         	movff	?_getMillis+3,arp_setNewEntry@timestamp+3
 13409  0030F2  EC23  F01A         	call	_arp_setNewEntry	;wreg free
 13410  0030F6                     l976:
 13411                           
 13412                           ;arp.c: 68: }
 13413                           ;arp.c: 69: ethernetController_dropPacket();
 13414  0030F6  EC2F  F02E         	call	_ethernetController_dropPacket	;wreg free
 13415  0030FA  0012               	return		;funcret
 13416  0030FC                     __end_of_arp_handleNewPacket:
 13417                           	opt stack 0
 13418                           tblptru	equ	0xFF8
 13419                           tblptrh	equ	0xFF7
 13420                           tblptrl	equ	0xFF6
 13421                           tablat	equ	0xFF5
 13422                           prodh	equ	0xFF4
 13423                           prodl	equ	0xFF3
 13424                           intcon	equ	0xFF2
 13425                           intcon3	equ	0xFF0
 13426                           indf0	equ	0xFEF
 13427                           postinc0	equ	0xFEE
 13428                           plusw0	equ	0xFEB
 13429                           fsr0h	equ	0xFEA
 13430                           fsr0l	equ	0xFE9
 13431                           wreg	equ	0xFE8
 13432                           indf1	equ	0xFE7
 13433                           postinc1	equ	0xFE6
 13434                           postdec1	equ	0xFE5
 13435                           plusw1	equ	0xFE3
 13436                           fsr1h	equ	0xFE2
 13437                           fsr1l	equ	0xFE1
 13438                           indf2	equ	0xFDF
 13439                           postinc2	equ	0xFDE
 13440                           postdec2	equ	0xFDD
 13441                           plusw2	equ	0xFDB
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function _ethernetController_dropPacket *****************
 13447 ;; Defined at:
 13448 ;;		line 379 in file "src/enc424j600/ENC424J600.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;		None
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;		None
 13453 ;; Return value:  Size  Location     Type
 13454 ;;                  1    wreg      void 
 13455 ;; Registers used:
 13456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13457 ;; Tracked objects:
 13458 ;;		On entry : 0/0
 13459 ;;		On exit  : 0/0
 13460 ;;		Unchanged: 0/0
 13461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13462 ;;      Params:         0       2       0       0       0       0       0       0       0
 13463 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13464 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13465 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13466 ;;Total ram usage:        2 bytes
 13467 ;; Hardware stack levels used:    1
 13468 ;; Hardware stack levels required when called:    8
 13469 ;; This function calls:
 13470 ;;		_enc424j600_setRXTailPointer
 13471 ;;		_enc424j600_writeSingleByte
 13472 ;;		_ethernetController_getNextPacketPointer
 13473 ;; This function is called by:
 13474 ;;		_ethernet_rxGetNewFrame
 13475 ;;		_arp_handleNewPacket
 13476 ;;		_ipv4_handleNewPacket
 13477 ;; This function uses a non-reentrant model
 13478 ;;
 13479                           
 13480                           	psect	text34
 13481  005C5E                     __ptext34:
 13482                           	opt stack 0
 13483  005C5E                     _ethernetController_dropPacket:
 13484                           	opt stack 19
 13485                           
 13486                           ;ENC424J600.c: 381: if (ethernetController_getNextPacketPointer() == 0x3000) {
 13487                           
 13488                           ;incstack = 0
 13489  005C5E  EC1A  F031         	call	_ethernetController_getNextPacketPointer	;wreg free
 13490  005C62  0E30               	movlw	48
 13491  005C64  0100               	movlb	0	; () banked
 13492  005C66  1963               	xorwf	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 13493  005C68  1162               	iorwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 13494  005C6A  A4D8               	btfss	status,2,c
 13495  005C6C  D007               	goto	l187
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;ENC424J600.c: 382: enc424j600_setRXTailPointer(0x5FFF - 1);
 13499  005C6E  0E5F               	movlw	95
 13500  005C70  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 13501  005C72  0EFE               	movlw	254
 13502  005C74  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 13503  005C76  EC71  F02F         	call	_enc424j600_setRXTailPointer	;wreg free
 13504                           
 13505                           ;ENC424J600.c: 383: } else {
 13506  005C7A  D00B               	goto	l188
 13507  005C7C                     l187:
 13508                           
 13509                           ;ENC424J600.c: 384: enc424j600_setRXTailPointer(ethernetController_getNextPacketPointer(
      +                          ) - 2);
 13510  005C7C  EC1A  F031         	call	_ethernetController_getNextPacketPointer	;wreg free
 13511  005C80  0EFE               	movlw	254
 13512  005C82  0100               	movlb	0	; () banked
 13513  005C84  2562               	addwf	?_ethernetController_getNextPacketPointer& (0+255),w,b
 13514  005C86  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 13515  005C88  0EFF               	movlw	255
 13516  005C8A  2163               	addwfc	(?_ethernetController_getNextPacketPointer+1)& (0+255),w,b
 13517  005C8C  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 13518  005C8E  EC71  F02F         	call	_enc424j600_setRXTailPointer	;wreg free
 13519  005C92                     l188:
 13520                           
 13521                           ;ENC424J600.c: 385: }
 13522                           ;ENC424J600.c: 387: enc424j600_writeSingleByte(0b11001100);
 13523  005C92  0ECC               	movlw	204
 13524  005C94  ECC6  F030         	call	_enc424j600_writeSingleByte
 13525  005C98  0012               	return		;funcret
 13526  005C9A                     __end_of_ethernetController_dropPacket:
 13527                           	opt stack 0
 13528                           tblptru	equ	0xFF8
 13529                           tblptrh	equ	0xFF7
 13530                           tblptrl	equ	0xFF6
 13531                           tablat	equ	0xFF5
 13532                           prodh	equ	0xFF4
 13533                           prodl	equ	0xFF3
 13534                           intcon	equ	0xFF2
 13535                           intcon3	equ	0xFF0
 13536                           indf0	equ	0xFEF
 13537                           postinc0	equ	0xFEE
 13538                           plusw0	equ	0xFEB
 13539                           fsr0h	equ	0xFEA
 13540                           fsr0l	equ	0xFE9
 13541                           wreg	equ	0xFE8
 13542                           indf1	equ	0xFE7
 13543                           postinc1	equ	0xFE6
 13544                           postdec1	equ	0xFE5
 13545                           plusw1	equ	0xFE3
 13546                           fsr1h	equ	0xFE2
 13547                           fsr1l	equ	0xFE1
 13548                           indf2	equ	0xFDF
 13549                           postinc2	equ	0xFDE
 13550                           postdec2	equ	0xFDD
 13551                           plusw2	equ	0xFDB
 13552                           fsr2h	equ	0xFDA
 13553                           fsr2l	equ	0xFD9
 13554                           status	equ	0xFD8
 13555                           
 13556 ;; *************** function _ethernetController_getNextPacketPointer *****************
 13557 ;; Defined at:
 13558 ;;		line 461 in file "src/enc424j600/ENC424J600.c"
 13559 ;; Parameters:    Size  Location     Type
 13560 ;;		None
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;		None
 13563 ;; Return value:  Size  Location     Type
 13564 ;;                  2    2[BANK0 ] unsigned int 
 13565 ;; Registers used:
 13566 ;;		cstack
 13567 ;; Tracked objects:
 13568 ;;		On entry : 0/0
 13569 ;;		On exit  : 0/0
 13570 ;;		Unchanged: 0/0
 13571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13572 ;;      Params:         0       2       0       0       0       0       0       0       0
 13573 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13574 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13575 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13576 ;;Total ram usage:        2 bytes
 13577 ;; Hardware stack levels used:    1
 13578 ;; Hardware stack levels required when called:    5
 13579 ;; This function calls:
 13580 ;;		_enc424j600_getNextPacketPointer
 13581 ;; This function is called by:
 13582 ;;		_ethernetController_dropPacket
 13583 ;;		_ethernet_rxGetNewFrame
 13584 ;; This function uses a non-reentrant model
 13585 ;;
 13586                           
 13587                           	psect	text35
 13588  006234                     __ptext35:
 13589                           	opt stack 0
 13590  006234                     _ethernetController_getNextPacketPointer:
 13591                           	opt stack 21
 13592                           
 13593                           ;ENC424J600.c: 462: return enc424j600_getNextPacketPointer();
 13594                           
 13595                           ;incstack = 0
 13596  006234  EC3A  F031         	call	_enc424j600_getNextPacketPointer	;wreg free
 13597  006238  C060  F062         	movff	?_enc424j600_getNextPacketPointer,?_ethernetController_getNextPacketPointer
 13598  00623C  C061  F063         	movff	?_enc424j600_getNextPacketPointer+1,?_ethernetController_getNextPacketPointer+1
 13599  006240  0012               	return	
 13600  006242                     __end_of_ethernetController_getNextPacketPointer:
 13601                           	opt stack 0
 13602                           tblptru	equ	0xFF8
 13603                           tblptrh	equ	0xFF7
 13604                           tblptrl	equ	0xFF6
 13605                           tablat	equ	0xFF5
 13606                           prodh	equ	0xFF4
 13607                           prodl	equ	0xFF3
 13608                           intcon	equ	0xFF2
 13609                           intcon3	equ	0xFF0
 13610                           indf0	equ	0xFEF
 13611                           postinc0	equ	0xFEE
 13612                           plusw0	equ	0xFEB
 13613                           fsr0h	equ	0xFEA
 13614                           fsr0l	equ	0xFE9
 13615                           wreg	equ	0xFE8
 13616                           indf1	equ	0xFE7
 13617                           postinc1	equ	0xFE6
 13618                           postdec1	equ	0xFE5
 13619                           plusw1	equ	0xFE3
 13620                           fsr1h	equ	0xFE2
 13621                           fsr1l	equ	0xFE1
 13622                           indf2	equ	0xFDF
 13623                           postinc2	equ	0xFDE
 13624                           postdec2	equ	0xFDD
 13625                           plusw2	equ	0xFDB
 13626                           fsr2h	equ	0xFDA
 13627                           fsr2l	equ	0xFD9
 13628                           status	equ	0xFD8
 13629                           
 13630 ;; *************** function _enc424j600_getNextPacketPointer *****************
 13631 ;; Defined at:
 13632 ;;		line 590 in file "src/enc424j600/ENC424J600.c"
 13633 ;; Parameters:    Size  Location     Type
 13634 ;;		None
 13635 ;; Auto vars:     Size  Location     Type
 13636 ;;		None
 13637 ;; Return value:  Size  Location     Type
 13638 ;;                  2    0[BANK0 ] unsigned int 
 13639 ;; Registers used:
 13640 ;;		None
 13641 ;; Tracked objects:
 13642 ;;		On entry : 0/0
 13643 ;;		On exit  : 0/0
 13644 ;;		Unchanged: 0/0
 13645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13646 ;;      Params:         0       2       0       0       0       0       0       0       0
 13647 ;;      Locals:         0       0       0       0       0       0       0       0       0
 13648 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13649 ;;      Totals:         0       2       0       0       0       0       0       0       0
 13650 ;;Total ram usage:        2 bytes
 13651 ;; Hardware stack levels used:    1
 13652 ;; Hardware stack levels required when called:    4
 13653 ;; This function calls:
 13654 ;;		Nothing
 13655 ;; This function is called by:
 13656 ;;		_ethernetController_updateNextPacketPointer
 13657 ;;		_ethernetController_getNextPacketPointer
 13658 ;; This function uses a non-reentrant model
 13659 ;;
 13660                           
 13661                           	psect	text36
 13662  006274                     __ptext36:
 13663                           	opt stack 0
 13664  006274                     _enc424j600_getNextPacketPointer:
 13665                           	opt stack 21
 13666                           
 13667                           ;ENC424J600.c: 591: return nextPacketPointer;
 13668                           
 13669                           ;incstack = 0
 13670  006274  C041  F060         	movff	_nextPacketPointer,?_enc424j600_getNextPacketPointer
 13671  006278  C042  F061         	movff	_nextPacketPointer+1,?_enc424j600_getNextPacketPointer+1
 13672  00627C  0012               	return		;funcret
 13673  00627E                     __end_of_enc424j600_getNextPacketPointer:
 13674                           	opt stack 0
 13675                           tblptru	equ	0xFF8
 13676                           tblptrh	equ	0xFF7
 13677                           tblptrl	equ	0xFF6
 13678                           tablat	equ	0xFF5
 13679                           prodh	equ	0xFF4
 13680                           prodl	equ	0xFF3
 13681                           intcon	equ	0xFF2
 13682                           intcon3	equ	0xFF0
 13683                           indf0	equ	0xFEF
 13684                           postinc0	equ	0xFEE
 13685                           plusw0	equ	0xFEB
 13686                           fsr0h	equ	0xFEA
 13687                           fsr0l	equ	0xFE9
 13688                           wreg	equ	0xFE8
 13689                           indf1	equ	0xFE7
 13690                           postinc1	equ	0xFE6
 13691                           postdec1	equ	0xFE5
 13692                           plusw1	equ	0xFE3
 13693                           fsr1h	equ	0xFE2
 13694                           fsr1l	equ	0xFE1
 13695                           indf2	equ	0xFDF
 13696                           postinc2	equ	0xFDE
 13697                           postdec2	equ	0xFDD
 13698                           plusw2	equ	0xFDB
 13699                           fsr2h	equ	0xFDA
 13700                           fsr2l	equ	0xFD9
 13701                           status	equ	0xFD8
 13702                           
 13703 ;; *************** function _arp_sendReply *****************
 13704 ;; Defined at:
 13705 ;;		line 211 in file "src/stack/protocols/arp.c"
 13706 ;; Parameters:    Size  Location     Type
 13707 ;;  request        32    0[BANK1 ] struct arp_message
 13708 ;; Auto vars:     Size  Location     Type
 13709 ;;  reply          32   56[BANK1 ] struct arp_message
 13710 ;;  targetMAC       6   38[BANK1 ] struct macaddress
 13711 ;;  senderMAC       6   32[BANK1 ] struct macaddress
 13712 ;;  myIP            4   52[BANK1 ] struct ipv4_address
 13713 ;;  targetIP        4   48[BANK1 ] struct ipv4_address
 13714 ;;  senderIP        4   44[BANK1 ] struct ipv4_address
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  1    wreg      void 
 13717 ;; Registers used:
 13718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13724 ;;      Params:         0       0      32       0       0       0       0       0       0
 13725 ;;      Locals:         0       0      56       0       0       0       0       0       0
 13726 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13727 ;;      Totals:         0       0      88       0       0       0       0       0       0
 13728 ;;Total ram usage:       88 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:   10
 13731 ;; This function calls:
 13732 ;;		_UARTTransmitText
 13733 ;;		_arp_send
 13734 ;;		_ethernetController_getMacAddress
 13735 ;;		_ipAdressToString
 13736 ;;		_ipv4_cmp
 13737 ;;		_ipv4_getIPSourceAddress
 13738 ;;		_macToString
 13739 ;; This function is called by:
 13740 ;;		_arp_handleNewPacket
 13741 ;; This function uses a non-reentrant model
 13742 ;;
 13743                           
 13744                           	psect	text37
 13745  0035DE                     __ptext37:
 13746                           	opt stack 0
 13747  0035DE                     _arp_sendReply:
 13748                           	opt stack 17
 13749                           
 13750                           ;arp.c: 212: if (request.operation != ARP_REQUEST)
 13751                           
 13752                           ;incstack = 0
 13753  0035DE  0101               	movlb	1	; () banked
 13754  0035E0  0506               	decf	(arp_sendReply@request+6)& (0+255),w,b
 13755  0035E2  1107               	iorwf	(arp_sendReply@request+7)& (0+255),w,b
 13756  0035E4  A4D8               	btfss	status,2,c
 13757  0035E6  0012               	return	
 13758                           
 13759                           ; BSR set to: 1
 13760                           ;arp.c: 215: ipv4_address_t myIP = ipv4_getIPSourceAddress();
 13761                           
 13762                           ; BSR set to: 1
 13763                           
 13764                           ; BSR set to: 1
 13765                           ;arp.c: 213: return;
 13766  0035E8  ECE6  F030         	call	_ipv4_getIPSourceAddress	;wreg free
 13767  0035EC  C060  F134         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@myIP
 13768  0035F0  C061  F135         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@myIP+1
 13769  0035F4  C062  F136         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@myIP+2
 13770  0035F8  C063  F137         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@myIP+3
 13771                           
 13772                           ;arp.c: 216: if (!(ipv4_cmp(&request.targetIPAddress, &myIP)))
 13773  0035FC  0E18               	movlw	low (arp_sendReply@request+24)
 13774  0035FE  0100               	movlb	0	; () banked
 13775  003600  6F60               	movwf	ipv4_cmp@a& (0+255),b
 13776  003602  0E01               	movlw	high (arp_sendReply@request+24)
 13777  003604  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 13778  003606  0E34               	movlw	low arp_sendReply@myIP
 13779  003608  6F62               	movwf	ipv4_cmp@b& (0+255),b
 13780  00360A  0E01               	movlw	high arp_sendReply@myIP
 13781  00360C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 13782  00360E  EC0E  F02E         	call	_ipv4_cmp	;wreg free
 13783  003612  0100               	movlb	0	; () banked
 13784  003614  A0D8               	btfss	status,0,c
 13785  003616  0012               	return	
 13786                           
 13787                           ; BSR set to: 0
 13788                           ;arp.c: 219: arp_message_t reply;
 13789                           ;arp.c: 220: ipv4_address_t senderIP;
 13790                           ;arp.c: 221: ipv4_address_t targetIP;
 13791                           ;arp.c: 222: macaddress_t senderMAC;
 13792                           ;arp.c: 223: macaddress_t targetMAC;
 13793                           ;arp.c: 225: senderMAC = ethernetController_getMacAddress();
 13794                           
 13795                           ; BSR set to: 0
 13796                           
 13797                           ; BSR set to: 0
 13798                           ;arp.c: 217: return;
 13799  003618  EC3B  F02A         	call	_ethernetController_getMacAddress	;wreg free
 13800  00361C  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 13801  003620  0E05               	movlw	5
 13802  003622                     u12211:
 13803  003622  CFEB FFDB          	movff	plusw0,plusw2
 13804  003626  06E8               	decf	wreg,f,c
 13805  003628  E2FC               	bc	u12211
 13806                           
 13807                           ;arp.c: 226: targetMAC = request.senderMACAddress;
 13808  00362A  EE21  F008         	lfsr	2,arp_sendReply@request+8
 13809  00362E  EE11  F026         	lfsr	1,arp_sendReply@targetMAC
 13810  003632  0E05               	movlw	5
 13811  003634                     u12221:
 13812  003634  CFDB FFE3          	movff	plusw2,plusw1
 13813  003638  06E8               	decf	wreg,f,c
 13814  00363A  E2FC               	bc	u12221
 13815                           
 13816                           ;arp.c: 227: senderIP = ipv4_getIPSourceAddress();
 13817  00363C  ECE6  F030         	call	_ipv4_getIPSourceAddress	;wreg free
 13818  003640  C060  F12C         	movff	?_ipv4_getIPSourceAddress,arp_sendReply@senderIP
 13819  003644  C061  F12D         	movff	?_ipv4_getIPSourceAddress+1,arp_sendReply@senderIP+1
 13820  003648  C062  F12E         	movff	?_ipv4_getIPSourceAddress+2,arp_sendReply@senderIP+2
 13821  00364C  C063  F12F         	movff	?_ipv4_getIPSourceAddress+3,arp_sendReply@senderIP+3
 13822                           
 13823                           ;arp.c: 228: targetIP = request.senderIPAddress;
 13824  003650  C10E  F130         	movff	arp_sendReply@request+14,arp_sendReply@targetIP
 13825  003654  C10F  F131         	movff	arp_sendReply@request+15,arp_sendReply@targetIP+1
 13826  003658  C110  F132         	movff	arp_sendReply@request+16,arp_sendReply@targetIP+2
 13827  00365C  C111  F133         	movff	arp_sendReply@request+17,arp_sendReply@targetIP+3
 13828                           
 13829                           ;arp.c: 230: reply.hlen = 6u;
 13830  003660  0E06               	movlw	6
 13831  003662  0101               	movlb	1	; () banked
 13832  003664  6F3C               	movwf	(arp_sendReply@reply+4)& (0+255),b
 13833                           
 13834                           ; BSR set to: 1
 13835                           ;arp.c: 231: reply.plen = 4u;
 13836  003666  0E04               	movlw	4
 13837  003668  6F3D               	movwf	(arp_sendReply@reply+5)& (0+255),b
 13838                           
 13839                           ; BSR set to: 1
 13840                           ;arp.c: 232: reply.htype = ARP_HTYPE_ETHERNET;
 13841  00366A  0E00               	movlw	0
 13842  00366C  6F39               	movwf	(arp_sendReply@reply+1)& (0+255),b
 13843  00366E  0E01               	movlw	1
 13844  003670  6F38               	movwf	arp_sendReply@reply& (0+255),b
 13845                           
 13846                           ; BSR set to: 1
 13847                           ;arp.c: 233: reply.ptype = ARP_PTYPE_IPv4;
 13848  003672  0E08               	movlw	8
 13849  003674  6F3B               	movwf	(arp_sendReply@reply+3)& (0+255),b
 13850  003676  0E00               	movlw	0
 13851  003678  6F3A               	movwf	(arp_sendReply@reply+2)& (0+255),b
 13852                           
 13853                           ; BSR set to: 1
 13854                           ;arp.c: 234: reply.operation = ARP_REPLY;
 13855  00367A  0E00               	movlw	0
 13856  00367C  6F3F               	movwf	(arp_sendReply@reply+7)& (0+255),b
 13857  00367E  0E02               	movlw	2
 13858  003680  6F3E               	movwf	(arp_sendReply@reply+6)& (0+255),b
 13859                           
 13860                           ; BSR set to: 1
 13861                           ;arp.c: 235: reply.senderIPAddress = senderIP;
 13862  003682  C12C  F146         	movff	arp_sendReply@senderIP,arp_sendReply@reply+14
 13863  003686  C12D  F147         	movff	arp_sendReply@senderIP+1,arp_sendReply@reply+15
 13864  00368A  C12E  F148         	movff	arp_sendReply@senderIP+2,arp_sendReply@reply+16
 13865  00368E  C12F  F149         	movff	arp_sendReply@senderIP+3,arp_sendReply@reply+17
 13866                           
 13867                           ; BSR set to: 1
 13868                           ;arp.c: 236: reply.senderMACAddress = senderMAC;
 13869  003692  EE21  F020         	lfsr	2,arp_sendReply@senderMAC
 13870  003696  EE11  F040         	lfsr	1,arp_sendReply@reply+8
 13871  00369A  0E05               	movlw	5
 13872  00369C                     u12231:
 13873  00369C  CFDB FFE3          	movff	plusw2,plusw1
 13874  0036A0  06E8               	decf	wreg,f,c
 13875  0036A2  E2FC               	bc	u12231
 13876                           
 13877                           ; BSR set to: 1
 13878                           ;arp.c: 237: reply.targetIPAddress = targetIP;
 13879  0036A4  C130  F150         	movff	arp_sendReply@targetIP,arp_sendReply@reply+24
 13880  0036A8  C131  F151         	movff	arp_sendReply@targetIP+1,arp_sendReply@reply+25
 13881  0036AC  C132  F152         	movff	arp_sendReply@targetIP+2,arp_sendReply@reply+26
 13882  0036B0  C133  F153         	movff	arp_sendReply@targetIP+3,arp_sendReply@reply+27
 13883                           
 13884                           ; BSR set to: 1
 13885                           ;arp.c: 238: reply.targetMACAddress = targetMAC;
 13886  0036B4  EE21  F026         	lfsr	2,arp_sendReply@targetMAC
 13887  0036B8  EE11  F04A         	lfsr	1,arp_sendReply@reply+18
 13888  0036BC  0E05               	movlw	5
 13889  0036BE                     u12241:
 13890  0036BE  CFDB FFE3          	movff	plusw2,plusw1
 13891  0036C2  06E8               	decf	wreg,f,c
 13892  0036C4  E2FC               	bc	u12241
 13893                           
 13894                           ; BSR set to: 1
 13895                           ;arp.c: 240: arp_send(reply);
 13896  0036C6  EE21  F038         	lfsr	2,arp_sendReply@reply
 13897  0036CA  EE00  F0A7         	lfsr	0,arp_send@arp
 13898  0036CE  0E1F               	movlw	31
 13899  0036D0                     u12251:
 13900  0036D0  CFDB FFEB          	movff	plusw2,plusw0
 13901  0036D4  06E8               	decf	wreg,f,c
 13902  0036D6  E2FC               	bc	u12251
 13903  0036D8  ECEF  F011         	call	_arp_send	;wreg free
 13904                           
 13905                           ;arp.c: 242: UARTTransmitText("\033[44;10;10m");
 13906  0036DC  0E2F               	movlw	low STR_8
 13907  0036DE  0100               	movlb	0	; () banked
 13908  0036E0  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13909  0036E2  0E7F               	movlw	high STR_8
 13910  0036E4  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13911  0036E6  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13912                           
 13913                           ;arp.c: 243: UARTTransmitText("[Reply sent to ");
 13914  0036EA  0E56               	movlw	low STR_98
 13915  0036EC  0100               	movlb	0	; () banked
 13916  0036EE  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13917  0036F0  0E7E               	movlw	high STR_98
 13918  0036F2  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13919  0036F4  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13920                           
 13921                           ;arp.c: 244: UARTTransmitText(macToString(reply.targetMACAddress));
 13922  0036F8  EE21  F04A         	lfsr	2,arp_sendReply@reply+18
 13923  0036FC  EE00  F07A         	lfsr	0,macToString@addr
 13924  003700  0E05               	movlw	5
 13925  003702                     u12261:
 13926  003702  CFDB FFEB          	movff	plusw2,plusw0
 13927  003706  06E8               	decf	wreg,f,c
 13928  003708  E2FC               	bc	u12261
 13929  00370A  EC55  F023         	call	_macToString	;wreg free
 13930  00370E  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 13931  003712  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 13932  003716  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13933                           
 13934                           ;arp.c: 245: UARTTransmitText(", ");
 13935  00371A  0EB1               	movlw	low (STR_65+17)
 13936  00371C  0100               	movlb	0	; () banked
 13937  00371E  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13938  003720  0E7D               	movlw	high (STR_65+17)
 13939  003722  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13940  003724  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13941                           
 13942                           ;arp.c: 246: UARTTransmitText(ipAdressToString(reply.targetIPAddress));
 13943  003728  C150  F073         	movff	arp_sendReply@reply+24,ipAdressToString@ip
 13944  00372C  C151  F074         	movff	arp_sendReply@reply+25,ipAdressToString@ip+1
 13945  003730  C152  F075         	movff	arp_sendReply@reply+26,ipAdressToString@ip+2
 13946  003734  C153  F076         	movff	arp_sendReply@reply+27,ipAdressToString@ip+3
 13947  003738  EC96  F016         	call	_ipAdressToString	;wreg free
 13948  00373C  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 13949  003740  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 13950  003744  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13951                           
 13952                           ;arp.c: 247: UARTTransmitText("]");
 13953  003748  0EAC               	movlw	low (STR_12+5)
 13954  00374A  0100               	movlb	0	; () banked
 13955  00374C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13956  00374E  0E7F               	movlw	high (STR_12+5)
 13957  003750  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13958  003752  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13959                           
 13960                           ;arp.c: 248: UARTTransmitText("\033[0m");
 13961  003756  0ED7               	movlw	low STR_7
 13962  003758  0100               	movlb	0	; () banked
 13963  00375A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 13964  00375C  0E7F               	movlw	high STR_7
 13965  00375E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 13966  003760  EC42  F02C         	call	_UARTTransmitText	;wreg free
 13967  003764  0012               	return		;funcret
 13968  003766                     __end_of_arp_sendReply:
 13969                           	opt stack 0
 13970                           tblptru	equ	0xFF8
 13971                           tblptrh	equ	0xFF7
 13972                           tblptrl	equ	0xFF6
 13973                           tablat	equ	0xFF5
 13974                           prodh	equ	0xFF4
 13975                           prodl	equ	0xFF3
 13976                           intcon	equ	0xFF2
 13977                           intcon3	equ	0xFF0
 13978                           indf0	equ	0xFEF
 13979                           postinc0	equ	0xFEE
 13980                           plusw0	equ	0xFEB
 13981                           fsr0h	equ	0xFEA
 13982                           fsr0l	equ	0xFE9
 13983                           wreg	equ	0xFE8
 13984                           indf1	equ	0xFE7
 13985                           postinc1	equ	0xFE6
 13986                           postdec1	equ	0xFE5
 13987                           plusw1	equ	0xFE3
 13988                           fsr1h	equ	0xFE2
 13989                           fsr1l	equ	0xFE1
 13990                           indf2	equ	0xFDF
 13991                           postinc2	equ	0xFDE
 13992                           postdec2	equ	0xFDD
 13993                           plusw2	equ	0xFDB
 13994                           fsr2h	equ	0xFDA
 13995                           fsr2l	equ	0xFD9
 13996                           status	equ	0xFD8
 13997                           
 13998 ;; *************** function _ipv4_getIPSourceAddress *****************
 13999 ;; Defined at:
 14000 ;;		line 392 in file "src/stack/protocols/ipv4.c"
 14001 ;; Parameters:    Size  Location     Type
 14002 ;;		None
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;		None
 14005 ;; Return value:  Size  Location     Type
 14006 ;;                  4    0[BANK0 ] struct ipv4_address
 14007 ;; Registers used:
 14008 ;;		None
 14009 ;; Tracked objects:
 14010 ;;		On entry : 0/0
 14011 ;;		On exit  : 0/0
 14012 ;;		Unchanged: 0/0
 14013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14014 ;;      Params:         0       4       0       0       0       0       0       0       0
 14015 ;;      Locals:         0       0       0       0       0       0       0       0       0
 14016 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14017 ;;      Totals:         0       4       0       0       0       0       0       0       0
 14018 ;;Total ram usage:        4 bytes
 14019 ;; Hardware stack levels used:    1
 14020 ;; Hardware stack levels required when called:    4
 14021 ;; This function calls:
 14022 ;;		Nothing
 14023 ;; This function is called by:
 14024 ;;		_main
 14025 ;;		_arp_sendReply
 14026 ;;		_icmp_sendEchoReply
 14027 ;; This function uses a non-reentrant model
 14028 ;;
 14029                           
 14030                           	psect	text38
 14031  0061CC                     __ptext38:
 14032                           	opt stack 0
 14033  0061CC                     _ipv4_getIPSourceAddress:
 14034                           	opt stack 26
 14035                           
 14036                           ;ipv4.c: 393: return ipSource;
 14037                           
 14038                           ;incstack = 0
 14039  0061CC  C286  F060         	movff	_ipSource,?_ipv4_getIPSourceAddress
 14040  0061D0  C287  F061         	movff	_ipSource+1,?_ipv4_getIPSourceAddress+1
 14041  0061D4  C288  F062         	movff	_ipSource+2,?_ipv4_getIPSourceAddress+2
 14042  0061D8  C289  F063         	movff	_ipSource+3,?_ipv4_getIPSourceAddress+3
 14043  0061DC  0012               	return		;funcret
 14044  0061DE                     __end_of_ipv4_getIPSourceAddress:
 14045                           	opt stack 0
 14046                           tblptru	equ	0xFF8
 14047                           tblptrh	equ	0xFF7
 14048                           tblptrl	equ	0xFF6
 14049                           tablat	equ	0xFF5
 14050                           prodh	equ	0xFF4
 14051                           prodl	equ	0xFF3
 14052                           intcon	equ	0xFF2
 14053                           intcon3	equ	0xFF0
 14054                           indf0	equ	0xFEF
 14055                           postinc0	equ	0xFEE
 14056                           plusw0	equ	0xFEB
 14057                           fsr0h	equ	0xFEA
 14058                           fsr0l	equ	0xFE9
 14059                           wreg	equ	0xFE8
 14060                           indf1	equ	0xFE7
 14061                           postinc1	equ	0xFE6
 14062                           postdec1	equ	0xFE5
 14063                           plusw1	equ	0xFE3
 14064                           fsr1h	equ	0xFE2
 14065                           fsr1l	equ	0xFE1
 14066                           indf2	equ	0xFDF
 14067                           postinc2	equ	0xFDE
 14068                           postdec2	equ	0xFDD
 14069                           plusw2	equ	0xFDB
 14070                           fsr2h	equ	0xFDA
 14071                           fsr2l	equ	0xFD9
 14072                           status	equ	0xFD8
 14073                           
 14074 ;; *************** function _arp_parseFromRXBuffer *****************
 14075 ;; Defined at:
 14076 ;;		line 72 in file "src/stack/protocols/arp.c"
 14077 ;; Parameters:    Size  Location     Type
 14078 ;;  frame           2   20[BANK0 ] PTR struct ethernetFrame
 14079 ;;		 -> stack(123), 
 14080 ;; Auto vars:     Size  Location     Type
 14081 ;;  i               1   58[BANK0 ] unsigned char 
 14082 ;;  i               1   57[BANK0 ] unsigned char 
 14083 ;;  i               1   56[BANK0 ] unsigned char 
 14084 ;;  i               1   55[BANK0 ] unsigned char 
 14085 ;;  arp            32   61[BANK0 ] struct arp_message
 14086 ;;  offset          2   59[BANK0 ] const unsigned int 
 14087 ;; Return value:  Size  Location     Type
 14088 ;;                  32   20[BANK0 ] struct arp_message
 14089 ;; Registers used:
 14090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14091 ;; Tracked objects:
 14092 ;;		On entry : 0/0
 14093 ;;		On exit  : 0/0
 14094 ;;		Unchanged: 0/0
 14095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14096 ;;      Params:         0      32       0       0       0       0       0       0       0
 14097 ;;      Locals:         0      38       0       0       0       0       0       0       0
 14098 ;;      Temps:          0       3       0       0       0       0       0       0       0
 14099 ;;      Totals:         0      73       0       0       0       0       0       0       0
 14100 ;;Total ram usage:       73 bytes
 14101 ;; Hardware stack levels used:    1
 14102 ;; Hardware stack levels required when called:    8
 14103 ;; This function calls:
 14104 ;;		_ethernetController_streamFromRXBuffer
 14105 ;;		_ipv4_cmp
 14106 ;;		_ipv4_isAllZero
 14107 ;;		_mac_cmp
 14108 ;;		_mac_isAllZero
 14109 ;; This function is called by:
 14110 ;;		_arp_handleNewPacket
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           	psect	text39
 14115  0013A8                     __ptext39:
 14116                           	opt stack 0
 14117  0013A8                     _arp_parseFromRXBuffer:
 14118                           	opt stack 19
 14119                           
 14120                           ;arp.c: 73: arp_message_t arp;
 14121                           ;arp.c: 74: uint16_t const offset = 22;
 14122                           
 14123                           ;incstack = 0
 14124  0013A8  0E00               	movlw	0
 14125  0013AA  0100               	movlb	0	; () banked
 14126  0013AC  6F9C               	movwf	(arp_parseFromRXBuffer@offset+1)& (0+255),b
 14127  0013AE  0E16               	movlw	22
 14128  0013B0  6F9B               	movwf	arp_parseFromRXBuffer@offset& (0+255),b
 14129                           
 14130                           ; BSR set to: 0
 14131                           ;arp.c: 76: ethernetController_streamFromRXBuffer(0, frame->memory.start + offset);
 14132  0013B2  EE20 F010          	lfsr	2,16
 14133  0013B6  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14134  0013B8  26D9               	addwf	fsr2l,f,c
 14135  0013BA  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14136  0013BC  22DA               	addwfc	fsr2h,f,c
 14137  0013BE  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14138  0013C2  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14139  0013C6  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14140  0013C8  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14141  0013CA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14142  0013CC  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14143  0013CE  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14144  0013D0  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14145  0013D2  0E00               	movlw	0
 14146  0013D4  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14147                           
 14148                           ;arp.c: 79: arp.htype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14149  0013D8  0100               	movlb	0	; () banked
 14150  0013DA  EE20 F010          	lfsr	2,16
 14151  0013DE  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14152  0013E0  26D9               	addwf	fsr2l,f,c
 14153  0013E2  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14154  0013E4  22DA               	addwfc	fsr2h,f,c
 14155  0013E6  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14156  0013EA  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14157  0013EE  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14158  0013F0  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14159  0013F2  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14160  0013F4  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14161  0013F6  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14162  0013F8  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14163  0013FA  0E01               	movlw	1
 14164  0013FC  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14165  001400  0100               	movlb	0	; () banked
 14166  001402  6F9E               	movwf	(arp_parseFromRXBuffer@arp+1)& (0+255),b
 14167  001404  6B9D               	clrf	arp_parseFromRXBuffer@arp& (0+255),b
 14168                           
 14169                           ; BSR set to: 0
 14170                           ;arp.c: 80: arp.htype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14171  001406  EE20 F010          	lfsr	2,16
 14172  00140A  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14173  00140C  26D9               	addwf	fsr2l,f,c
 14174  00140E  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14175  001410  22DA               	addwfc	fsr2h,f,c
 14176  001412  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14177  001416  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14178  00141A  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14179  00141C  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14180  00141E  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14181  001420  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14182  001422  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14183  001424  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14184  001426  0E01               	movlw	1
 14185  001428  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14186  00142C  0100               	movlb	0	; () banked
 14187  00142E  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14188  001430  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 14189  001432  139D               	iorwf	arp_parseFromRXBuffer@arp& (0+255),f,b
 14190                           
 14191                           ; BSR set to: 0
 14192                           ;arp.c: 82: arp.ptype = (ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset) << 8);
 14193  001434  EE20 F010          	lfsr	2,16
 14194  001438  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14195  00143A  26D9               	addwf	fsr2l,f,c
 14196  00143C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14197  00143E  22DA               	addwfc	fsr2h,f,c
 14198  001440  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14199  001444  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14200  001448  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14201  00144A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14202  00144C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14203  00144E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14204  001450  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14205  001452  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14206  001454  0E01               	movlw	1
 14207  001456  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14208  00145A  0100               	movlb	0	; () banked
 14209  00145C  6FA0               	movwf	(arp_parseFromRXBuffer@arp+3)& (0+255),b
 14210  00145E  6B9F               	clrf	(arp_parseFromRXBuffer@arp+2)& (0+255),b
 14211                           
 14212                           ; BSR set to: 0
 14213                           ;arp.c: 83: arp.ptype |= ethernetController_streamFromRXBuffer(1, frame->memory.start + 
      +                          offset);
 14214  001460  EE20 F010          	lfsr	2,16
 14215  001464  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14216  001466  26D9               	addwf	fsr2l,f,c
 14217  001468  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14218  00146A  22DA               	addwfc	fsr2h,f,c
 14219  00146C  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14220  001470  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14221  001474  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14222  001476  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14223  001478  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14224  00147A  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14225  00147C  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14226  00147E  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14227  001480  0E01               	movlw	1
 14228  001482  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14229  001486  0100               	movlb	0	; () banked
 14230  001488  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14231  00148A  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 14232  00148C  139F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),f,b
 14233                           
 14234                           ; BSR set to: 0
 14235                           ;arp.c: 85: arp.hlen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14236  00148E  EE20 F010          	lfsr	2,16
 14237  001492  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14238  001494  26D9               	addwf	fsr2l,f,c
 14239  001496  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14240  001498  22DA               	addwfc	fsr2h,f,c
 14241  00149A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14242  00149E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14243  0014A2  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14244  0014A4  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14245  0014A6  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14246  0014A8  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14247  0014AA  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14248  0014AC  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14249  0014AE  0E01               	movlw	1
 14250  0014B0  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14251  0014B4  0100               	movlb	0	; () banked
 14252  0014B6  6FA1               	movwf	(arp_parseFromRXBuffer@arp+4)& (0+255),b
 14253                           
 14254                           ; BSR set to: 0
 14255                           ;arp.c: 86: arp.plen = ethernetController_streamFromRXBuffer(1, frame->memory.start + of
      +                          fset);
 14256  0014B8  EE20 F010          	lfsr	2,16
 14257  0014BC  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14258  0014BE  26D9               	addwf	fsr2l,f,c
 14259  0014C0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14260  0014C2  22DA               	addwfc	fsr2h,f,c
 14261  0014C4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14262  0014C8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14263  0014CC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14264  0014CE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14265  0014D0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14266  0014D2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14267  0014D4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14268  0014D6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14269  0014D8  0E01               	movlw	1
 14270  0014DA  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14271  0014DE  0100               	movlb	0	; () banked
 14272  0014E0  6FA2               	movwf	(arp_parseFromRXBuffer@arp+5)& (0+255),b
 14273                           
 14274                           ; BSR set to: 0
 14275                           ;arp.c: 88: arp.operation = (ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset) << 8);
 14276  0014E2  EE20 F010          	lfsr	2,16
 14277  0014E6  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14278  0014E8  26D9               	addwf	fsr2l,f,c
 14279  0014EA  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14280  0014EC  22DA               	addwfc	fsr2h,f,c
 14281  0014EE  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14282  0014F2  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14283  0014F6  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14284  0014F8  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14285  0014FA  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14286  0014FC  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14287  0014FE  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14288  001500  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14289  001502  0E01               	movlw	1
 14290  001504  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14291  001508  0100               	movlb	0	; () banked
 14292  00150A  6FA4               	movwf	(arp_parseFromRXBuffer@arp+7)& (0+255),b
 14293  00150C  6BA3               	clrf	(arp_parseFromRXBuffer@arp+6)& (0+255),b
 14294                           
 14295                           ; BSR set to: 0
 14296                           ;arp.c: 89: arp.operation |= ethernetController_streamFromRXBuffer(1, frame->memory.star
      +                          t + offset);
 14297  00150E  EE20 F010          	lfsr	2,16
 14298  001512  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14299  001514  26D9               	addwf	fsr2l,f,c
 14300  001516  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14301  001518  22DA               	addwfc	fsr2h,f,c
 14302  00151A  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14303  00151E  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14304  001522  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14305  001524  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14306  001526  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14307  001528  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14308  00152A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14309  00152C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14310  00152E  0E01               	movlw	1
 14311  001530  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14312  001534  0100               	movlb	0	; () banked
 14313  001536  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14314  001538  5196               	movf	(??_arp_parseFromRXBuffer+2)& (0+255),w,b
 14315  00153A  13A3               	iorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),f,b
 14316                           
 14317                           ; BSR set to: 0
 14318                           ;arp.c: 92: for (uint8_t i = 0; i < arp.hlen; i++)
 14319  00153C  0E00               	movlw	0
 14320  00153E  6F97               	movwf	arp_parseFromRXBuffer@i& (0+255),b
 14321  001540  D024               	goto	l979
 14322  001542                     
 14323                           ; BSR set to: 0
 14324                           ;arp.c: 93: arp.senderMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14325                           
 14326                           ; BSR set to: 0
 14327  001542  EE20 F010          	lfsr	2,16
 14328  001546  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14329  001548  26D9               	addwf	fsr2l,f,c
 14330  00154A  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14331  00154C  22DA               	addwfc	fsr2h,f,c
 14332  00154E  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14333  001552  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14334  001556  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14335  001558  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14336  00155A  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14337  00155C  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14338  00155E  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14339  001560  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14340  001562  0E01               	movlw	1
 14341  001564  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14342  001568  0100               	movlb	0	; () banked
 14343  00156A  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14344  00156C  5197               	movf	arp_parseFromRXBuffer@i& (0+255),w,b
 14345  00156E  0D01               	mullw	1
 14346  001570  0E08               	movlw	8
 14347  001572  26F3               	addwf	prodl,f,c
 14348  001574  0E00               	movlw	0
 14349  001576  22F4               	addwfc	prodh,f,c
 14350  001578  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 14351  00157A  24F3               	addwf	prodl,w,c
 14352  00157C  6ED9               	movwf	fsr2l,c
 14353  00157E  0E00               	movlw	high arp_parseFromRXBuffer@arp
 14354  001580  20F4               	addwfc	prodh,w,c
 14355  001582  6EDA               	movwf	fsr2h,c
 14356  001584  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 14357                           
 14358                           ; BSR set to: 0
 14359  001588  2B97               	incf	arp_parseFromRXBuffer@i& (0+255),f,b
 14360  00158A                     l979:
 14361                           
 14362                           ; BSR set to: 0
 14363                           
 14364                           ; BSR set to: 0
 14365  00158A  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 14366  00158C  5D97               	subwf	arp_parseFromRXBuffer@i& (0+255),w,b
 14367  00158E  A0D8               	btfss	status,0,c
 14368  001590  D7D8               	goto	l980
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;arp.c: 94: for (uint8_t i = 0; i < arp.plen; i++)
 14372                           
 14373                           ; BSR set to: 0
 14374  001592  0E00               	movlw	0
 14375  001594  6F98               	movwf	arp_parseFromRXBuffer@i_3215& (0+255),b
 14376  001596  D024               	goto	l982
 14377  001598                     
 14378                           ; BSR set to: 0
 14379                           ;arp.c: 95: arp.senderIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, fr
      +                          ame->memory.start + offset);
 14380                           
 14381                           ; BSR set to: 0
 14382  001598  EE20 F010          	lfsr	2,16
 14383  00159C  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14384  00159E  26D9               	addwf	fsr2l,f,c
 14385  0015A0  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14386  0015A2  22DA               	addwfc	fsr2h,f,c
 14387  0015A4  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14388  0015A8  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14389  0015AC  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14390  0015AE  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14391  0015B0  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14392  0015B2  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14393  0015B4  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14394  0015B6  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14395  0015B8  0E01               	movlw	1
 14396  0015BA  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14397  0015BE  0100               	movlb	0	; () banked
 14398  0015C0  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14399  0015C2  5198               	movf	arp_parseFromRXBuffer@i_3215& (0+255),w,b
 14400  0015C4  0D01               	mullw	1
 14401  0015C6  0E0E               	movlw	14
 14402  0015C8  26F3               	addwf	prodl,f,c
 14403  0015CA  0E00               	movlw	0
 14404  0015CC  22F4               	addwfc	prodh,f,c
 14405  0015CE  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 14406  0015D0  24F3               	addwf	prodl,w,c
 14407  0015D2  6ED9               	movwf	fsr2l,c
 14408  0015D4  0E00               	movlw	high arp_parseFromRXBuffer@arp
 14409  0015D6  20F4               	addwfc	prodh,w,c
 14410  0015D8  6EDA               	movwf	fsr2h,c
 14411  0015DA  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 14412                           
 14413                           ; BSR set to: 0
 14414  0015DE  2B98               	incf	arp_parseFromRXBuffer@i_3215& (0+255),f,b
 14415  0015E0                     l982:
 14416                           
 14417                           ; BSR set to: 0
 14418                           
 14419                           ; BSR set to: 0
 14420  0015E0  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 14421  0015E2  5D98               	subwf	arp_parseFromRXBuffer@i_3215& (0+255),w,b
 14422  0015E4  A0D8               	btfss	status,0,c
 14423  0015E6  D7D8               	goto	l983
 14424                           
 14425                           ; BSR set to: 0
 14426                           ;arp.c: 97: for (uint8_t i = 0; i < arp.hlen; i++)
 14427                           
 14428                           ; BSR set to: 0
 14429  0015E8  0E00               	movlw	0
 14430  0015EA  6F99               	movwf	arp_parseFromRXBuffer@i_3216& (0+255),b
 14431  0015EC  D024               	goto	l985
 14432  0015EE                     
 14433                           ; BSR set to: 0
 14434                           ;arp.c: 98: arp.targetMACAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14435                           
 14436                           ; BSR set to: 0
 14437  0015EE  EE20 F010          	lfsr	2,16
 14438  0015F2  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14439  0015F4  26D9               	addwf	fsr2l,f,c
 14440  0015F6  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14441  0015F8  22DA               	addwfc	fsr2h,f,c
 14442  0015FA  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14443  0015FE  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14444  001602  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14445  001604  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14446  001606  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14447  001608  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14448  00160A  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14449  00160C  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14450  00160E  0E01               	movlw	1
 14451  001610  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14452  001614  0100               	movlb	0	; () banked
 14453  001616  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14454  001618  5199               	movf	arp_parseFromRXBuffer@i_3216& (0+255),w,b
 14455  00161A  0D01               	mullw	1
 14456  00161C  0E12               	movlw	18
 14457  00161E  26F3               	addwf	prodl,f,c
 14458  001620  0E00               	movlw	0
 14459  001622  22F4               	addwfc	prodh,f,c
 14460  001624  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 14461  001626  24F3               	addwf	prodl,w,c
 14462  001628  6ED9               	movwf	fsr2l,c
 14463  00162A  0E00               	movlw	high arp_parseFromRXBuffer@arp
 14464  00162C  20F4               	addwfc	prodh,w,c
 14465  00162E  6EDA               	movwf	fsr2h,c
 14466  001630  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 14467                           
 14468                           ; BSR set to: 0
 14469  001634  2B99               	incf	arp_parseFromRXBuffer@i_3216& (0+255),f,b
 14470  001636                     l985:
 14471                           
 14472                           ; BSR set to: 0
 14473                           
 14474                           ; BSR set to: 0
 14475  001636  51A1               	movf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 14476  001638  5D99               	subwf	arp_parseFromRXBuffer@i_3216& (0+255),w,b
 14477  00163A  A0D8               	btfss	status,0,c
 14478  00163C  D7D8               	goto	l986
 14479                           
 14480                           ; BSR set to: 0
 14481                           ;arp.c: 99: for (uint8_t i = 0; i < arp.plen; i++)
 14482                           
 14483                           ; BSR set to: 0
 14484  00163E  0E00               	movlw	0
 14485  001640  6F9A               	movwf	arp_parseFromRXBuffer@i_3217& (0+255),b
 14486  001642  D024               	goto	l988
 14487  001644                     
 14488                           ; BSR set to: 0
 14489                           ;arp.c: 100: arp.targetIPAddress.address[i] = ethernetController_streamFromRXBuffer(1, f
      +                          rame->memory.start + offset);
 14490                           
 14491                           ; BSR set to: 0
 14492  001644  EE20 F010          	lfsr	2,16
 14493  001648  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14494  00164A  26D9               	addwf	fsr2l,f,c
 14495  00164C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14496  00164E  22DA               	addwfc	fsr2h,f,c
 14497  001650  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14498  001654  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14499  001658  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14500  00165A  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14501  00165C  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14502  00165E  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14503  001660  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14504  001662  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14505  001664  0E01               	movlw	1
 14506  001666  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14507  00166A  0100               	movlb	0	; () banked
 14508  00166C  6F96               	movwf	(??_arp_parseFromRXBuffer+2)& (0+255),b
 14509  00166E  519A               	movf	arp_parseFromRXBuffer@i_3217& (0+255),w,b
 14510  001670  0D01               	mullw	1
 14511  001672  0E18               	movlw	24
 14512  001674  26F3               	addwf	prodl,f,c
 14513  001676  0E00               	movlw	0
 14514  001678  22F4               	addwfc	prodh,f,c
 14515  00167A  0E9D               	movlw	low arp_parseFromRXBuffer@arp
 14516  00167C  24F3               	addwf	prodl,w,c
 14517  00167E  6ED9               	movwf	fsr2l,c
 14518  001680  0E00               	movlw	high arp_parseFromRXBuffer@arp
 14519  001682  20F4               	addwfc	prodh,w,c
 14520  001684  6EDA               	movwf	fsr2h,c
 14521  001686  C096  FFDF         	movff	??_arp_parseFromRXBuffer+2,indf2
 14522                           
 14523                           ; BSR set to: 0
 14524  00168A  2B9A               	incf	arp_parseFromRXBuffer@i_3217& (0+255),f,b
 14525  00168C                     l988:
 14526                           
 14527                           ; BSR set to: 0
 14528                           
 14529                           ; BSR set to: 0
 14530  00168C  51A2               	movf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 14531  00168E  5D9A               	subwf	arp_parseFromRXBuffer@i_3217& (0+255),w,b
 14532  001690  A0D8               	btfss	status,0,c
 14533  001692  D7D8               	goto	l989
 14534                           
 14535                           ; BSR set to: 0
 14536                           ;arp.c: 102: ethernetController_streamFromRXBuffer(2, frame->memory.start + offset);
 14537                           
 14538                           ; BSR set to: 0
 14539  001694  EE20 F010          	lfsr	2,16
 14540  001698  5174               	movf	arp_parseFromRXBuffer@frame& (0+255),w,b
 14541  00169A  26D9               	addwf	fsr2l,f,c
 14542  00169C  5175               	movf	(arp_parseFromRXBuffer@frame+1)& (0+255),w,b
 14543  00169E  22DA               	addwfc	fsr2h,f,c
 14544  0016A0  CFDE F094          	movff	postinc2,??_arp_parseFromRXBuffer
 14545  0016A4  CFDD F095          	movff	postdec2,??_arp_parseFromRXBuffer+1
 14546  0016A8  519B               	movf	arp_parseFromRXBuffer@offset& (0+255),w,b
 14547  0016AA  2594               	addwf	??_arp_parseFromRXBuffer& (0+255),w,b
 14548  0016AC  6F6F               	movwf	ethernetController_streamFromRXBuffer@startAddress& (0+255),b
 14549  0016AE  519C               	movf	(arp_parseFromRXBuffer@offset+1)& (0+255),w,b
 14550  0016B0  2195               	addwfc	(??_arp_parseFromRXBuffer+1)& (0+255),w,b
 14551  0016B2  6F70               	movwf	(ethernetController_streamFromRXBuffer@startAddress+1)& (0+255),b
 14552  0016B4  0E02               	movlw	2
 14553  0016B6  ECB9  F02B         	call	_ethernetController_streamFromRXBuffer
 14554                           
 14555                           ;arp.c: 104: if (ipv4_isAllZero(&arp.senderIPAddress)) {
 14556  0016BA  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 14557  0016BC  0100               	movlb	0	; () banked
 14558  0016BE  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 14559  0016C0  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 14560  0016C2  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 14561  0016C4  EC42  F02F         	call	_ipv4_isAllZero	;wreg free
 14562  0016C8  0100               	movlb	0	; () banked
 14563  0016CA  A0D8               	btfss	status,0,c
 14564  0016CC  D002               	goto	l991
 14565                           
 14566                           ; BSR set to: 0
 14567                           ;arp.c: 105: arp.fIsProbe = 1;
 14568  0016CE  83B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 14569  0016D0  D03C               	goto	l995
 14570  0016D2                     l991:
 14571                           
 14572                           ; BSR set to: 0
 14573                           ;arp.c: 108: arp.fIsProbe = 0;
 14574  0016D2  93B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),1,b
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;arp.c: 110: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14578                           ;arp.c: 111: mac_isAllZero(&arp.targetMACAddress) &&
 14579                           ;arp.c: 112: arp.operation == ARP_REQUEST) {
 14580  0016D4  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 14581  0016D6  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14582  0016D8  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 14583  0016DA  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14584  0016DC  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 14585  0016DE  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14586  0016E0  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 14587  0016E2  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14588  0016E4  EC0E  F02E         	call	_ipv4_cmp	;wreg free
 14589  0016E8  0100               	movlb	0	; () banked
 14590  0016EA  A0D8               	btfss	status,0,c
 14591  0016EC  D00D               	goto	l993
 14592                           
 14593                           ; BSR set to: 0
 14594  0016EE  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 14595  0016F0  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 14596  0016F2  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 14597  0016F4  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 14598  0016F6  EC2A  F02F         	call	_mac_isAllZero	;wreg free
 14599  0016FA  0100               	movlb	0	; () banked
 14600  0016FC  A0D8               	btfss	status,0,c
 14601  0016FE  D004               	goto	l993
 14602                           
 14603                           ; BSR set to: 0
 14604  001700  05A3               	decf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 14605  001702  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 14606  001704  B4D8               	btfsc	status,2,c
 14607  001706  D01F               	goto	u12120
 14608  001708                     l993:
 14609                           
 14610                           ; BSR set to: 0
 14611                           ;arp.c: 116: if (ipv4_cmp(&arp.senderIPAddress, &arp.targetIPAddress) &&
 14612                           ;arp.c: 117: mac_cmp(&arp.senderMACAddress, &arp.targetMACAddress) &&
 14613                           ;arp.c: 118: arp.operation == ARP_REPLY) {
 14614                           
 14615                           ; BSR set to: 0
 14616  001708  0EAB               	movlw	low (arp_parseFromRXBuffer@arp+14)
 14617  00170A  6F60               	movwf	ipv4_cmp@a& (0+255),b
 14618  00170C  0E00               	movlw	high (arp_parseFromRXBuffer@arp+14)
 14619  00170E  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 14620  001710  0EB5               	movlw	low (arp_parseFromRXBuffer@arp+24)
 14621  001712  6F62               	movwf	ipv4_cmp@b& (0+255),b
 14622  001714  0E00               	movlw	high (arp_parseFromRXBuffer@arp+24)
 14623  001716  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 14624  001718  EC0E  F02E         	call	_ipv4_cmp	;wreg free
 14625  00171C  0100               	movlb	0	; () banked
 14626  00171E  A0D8               	btfss	status,0,c
 14627  001720  D014               	goto	l995
 14628                           
 14629                           ; BSR set to: 0
 14630  001722  0EA5               	movlw	low (arp_parseFromRXBuffer@arp+8)
 14631  001724  6F60               	movwf	mac_cmp@a& (0+255),b
 14632  001726  0E00               	movlw	high (arp_parseFromRXBuffer@arp+8)
 14633  001728  6F61               	movwf	(mac_cmp@a+1)& (0+255),b
 14634  00172A  0EAF               	movlw	low (arp_parseFromRXBuffer@arp+18)
 14635  00172C  6F62               	movwf	mac_cmp@b& (0+255),b
 14636  00172E  0E00               	movlw	high (arp_parseFromRXBuffer@arp+18)
 14637  001730  6F63               	movwf	(mac_cmp@b+1)& (0+255),b
 14638  001732  ECED  F02D         	call	_mac_cmp	;wreg free
 14639  001736  0100               	movlb	0	; () banked
 14640  001738  A0D8               	btfss	status,0,c
 14641  00173A  D007               	goto	l995
 14642                           
 14643                           ; BSR set to: 0
 14644  00173C  0E02               	movlw	2
 14645  00173E  19A3               	xorwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 14646  001740  11A4               	iorwf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 14647  001742  A4D8               	btfss	status,2,c
 14648  001744  D002               	goto	l995
 14649  001746                     u12120:
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;arp.c: 119: arp.fIsGratuitous = 1;
 14653  001746  81B9               	bsf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 14654                           
 14655                           ;arp.c: 120: } else {
 14656  001748  D001               	goto	l996
 14657  00174A                     l995:
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;arp.c: 121: arp.fIsGratuitous = 0;
 14661  00174A  91B9               	bcf	(arp_parseFromRXBuffer@arp+28)& (0+255),0,b
 14662  00174C                     l996:
 14663                           
 14664                           ; BSR set to: 0
 14665                           ;arp.c: 122: }
 14666                           ;arp.c: 123: }
 14667                           ;arp.c: 124: }
 14668                           ;arp.c: 127: if ((arp.htype != ARP_HTYPE_ETHERNET) ||
 14669                           ;arp.c: 128: (arp.ptype != ARP_PTYPE_IPv4) ||
 14670                           ;arp.c: 129: (arp.operation > 2) ||
 14671                           ;arp.c: 130: (arp.hlen != 6u) ||
 14672                           ;arp.c: 131: (arp.plen != 4u)) {
 14673                           
 14674                           ; BSR set to: 0
 14675                           
 14676                           ; BSR set to: 0
 14677                           
 14678                           ; BSR set to: 0
 14679  00174C  059D               	decf	arp_parseFromRXBuffer@arp& (0+255),w,b
 14680  00174E  119E               	iorwf	(arp_parseFromRXBuffer@arp+1)& (0+255),w,b
 14681  001750  A4D8               	btfss	status,2,c
 14682  001752  D013               	goto	u12170
 14683                           
 14684                           ; BSR set to: 0
 14685  001754  0E08               	movlw	8
 14686  001756  19A0               	xorwf	(arp_parseFromRXBuffer@arp+3)& (0+255),w,b
 14687  001758  119F               	iorwf	(arp_parseFromRXBuffer@arp+2)& (0+255),w,b
 14688  00175A  A4D8               	btfss	status,2,c
 14689  00175C  D00E               	goto	u12170
 14690                           
 14691                           ; BSR set to: 0
 14692  00175E  51A4               	movf	(arp_parseFromRXBuffer@arp+7)& (0+255),w,b
 14693  001760  E10C               	bnz	l10237
 14694  001762  0E03               	movlw	3
 14695  001764  5DA3               	subwf	(arp_parseFromRXBuffer@arp+6)& (0+255),w,b
 14696  001766  B0D8               	btfsc	status,0,c
 14697  001768  D008               	goto	u12170
 14698                           
 14699                           ; BSR set to: 0
 14700  00176A  0E06               	movlw	6
 14701  00176C  19A1               	xorwf	(arp_parseFromRXBuffer@arp+4)& (0+255),w,b
 14702  00176E  A4D8               	btfss	status,2,c
 14703  001770  D004               	goto	u12170
 14704                           
 14705                           ; BSR set to: 0
 14706  001772  0E04               	movlw	4
 14707  001774  19A2               	xorwf	(arp_parseFromRXBuffer@arp+5)& (0+255),w,b
 14708  001776  B4D8               	btfsc	status,2,c
 14709  001778  D004               	goto	l997
 14710  00177A                     u12170:
 14711  00177A                     l10237:
 14712                           
 14713                           ; BSR set to: 0
 14714                           ;arp.c: 132: arp.err.code = ERROR_ARP_INVALID_VALUES;
 14715  00177A  0E01               	movlw	1
 14716  00177C  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 14717  00177E  0E95               	movlw	149
 14718  001780  D003               	goto	L5
 14719  001782                     l997:
 14720                           
 14721                           ; BSR set to: 0
 14722                           ;arp.c: 135: arp.err.code = (uint16_t)0;
 14723                           
 14724                           ; BSR set to: 0
 14725  001782  0E00               	movlw	0
 14726  001784  6FBC               	movwf	(arp_parseFromRXBuffer@arp+31)& (0+255),b
 14727  001786  0E00               	movlw	0
 14728  001788                     L5:
 14729  001788  6FBB               	movwf	(arp_parseFromRXBuffer@arp+30)& (0+255),b
 14730                           
 14731                           ;arp.c: 136: arp.err.module = ERROR_MODULE_ARP;
 14732  00178A  0E03               	movlw	3
 14733  00178C  6FBA               	movwf	(arp_parseFromRXBuffer@arp+29)& (0+255),b
 14734                           
 14735                           ; BSR set to: 0
 14736                           ;arp.c: 137: }
 14737                           ;arp.c: 139: return arp;
 14738                           
 14739                           ; BSR set to: 0
 14740  00178E  EE20  F09D         	lfsr	2,arp_parseFromRXBuffer@arp
 14741  001792  EE00  F074         	lfsr	0,?_arp_parseFromRXBuffer
 14742  001796  0E1F               	movlw	31
 14743  001798                     u12181:
 14744  001798  CFDB FFEB          	movff	plusw2,plusw0
 14745  00179C  06E8               	decf	wreg,f,c
 14746  00179E  E2FC               	bc	u12181
 14747  0017A0  0012               	return	
 14748  0017A2                     __end_of_arp_parseFromRXBuffer:
 14749                           	opt stack 0
 14750                           tblptru	equ	0xFF8
 14751                           tblptrh	equ	0xFF7
 14752                           tblptrl	equ	0xFF6
 14753                           tablat	equ	0xFF5
 14754                           prodh	equ	0xFF4
 14755                           prodl	equ	0xFF3
 14756                           intcon	equ	0xFF2
 14757                           intcon3	equ	0xFF0
 14758                           indf0	equ	0xFEF
 14759                           postinc0	equ	0xFEE
 14760                           plusw0	equ	0xFEB
 14761                           fsr0h	equ	0xFEA
 14762                           fsr0l	equ	0xFE9
 14763                           wreg	equ	0xFE8
 14764                           indf1	equ	0xFE7
 14765                           postinc1	equ	0xFE6
 14766                           postdec1	equ	0xFE5
 14767                           plusw1	equ	0xFE3
 14768                           fsr1h	equ	0xFE2
 14769                           fsr1l	equ	0xFE1
 14770                           indf2	equ	0xFDF
 14771                           postinc2	equ	0xFDE
 14772                           postdec2	equ	0xFDD
 14773                           plusw2	equ	0xFDB
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function _mac_cmp *****************
 14779 ;; Defined at:
 14780 ;;		line 39 in file "src/eth/mac.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  a               2    0[BANK0 ] PTR struct macaddress
 14783 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 14784 ;;  b               2    2[BANK0 ] PTR struct macaddress
 14785 ;;		 -> arp_parseFromRXBuffer@arp(32), 
 14786 ;; Auto vars:     Size  Location     Type
 14787 ;;  i               1    6[BANK0 ] unsigned char 
 14788 ;; Return value:  Size  Location     Type
 14789 ;;		None               void
 14790 ;; Registers used:
 14791 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14792 ;; Tracked objects:
 14793 ;;		On entry : 0/0
 14794 ;;		On exit  : 0/0
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14797 ;;      Params:         0       4       0       0       0       0       0       0       0
 14798 ;;      Locals:         0       1       0       0       0       0       0       0       0
 14799 ;;      Temps:          0       2       0       0       0       0       0       0       0
 14800 ;;      Totals:         0       7       0       0       0       0       0       0       0
 14801 ;;Total ram usage:        7 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    4
 14804 ;; This function calls:
 14805 ;;		Nothing
 14806 ;; This function is called by:
 14807 ;;		_arp_parseFromRXBuffer
 14808 ;; This function uses a non-reentrant model
 14809 ;;
 14810                           
 14811                           	psect	text40
 14812  005BDA                     __ptext40:
 14813                           	opt stack 0
 14814  005BDA                     _mac_cmp:
 14815                           	opt stack 22
 14816                           
 14817                           ;mac.c: 40: for (uint8_t i = 0; i < 6; i++) {
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;incstack = 0
 14821  005BDA  0E00               	movlw	0
 14822  005BDC  0100               	movlb	0	; () banked
 14823  005BDE  6F66               	movwf	mac_cmp@i& (0+255),b
 14824  005BE0                     l9879:
 14825                           
 14826                           ; BSR set to: 0
 14827  005BE0  0E05               	movlw	5
 14828  005BE2  6566               	cpfsgt	mac_cmp@i& (0+255),b
 14829  005BE4  D001               	goto	l390
 14830  005BE6  D018               	goto	u11190
 14831  005BE8                     l390:
 14832                           
 14833                           ; BSR set to: 0
 14834                           ;mac.c: 41: if (a->address[i] != b->address[i])
 14835                           
 14836                           ; BSR set to: 0
 14837  005BE8  5166               	movf	mac_cmp@i& (0+255),w,b
 14838  005BEA  0D01               	mullw	1
 14839  005BEC  50F3               	movf	prodl,w,c
 14840  005BEE  2562               	addwf	mac_cmp@b& (0+255),w,b
 14841  005BF0  6ED9               	movwf	fsr2l,c
 14842  005BF2  50F4               	movf	prodh,w,c
 14843  005BF4  2163               	addwfc	(mac_cmp@b+1)& (0+255),w,b
 14844  005BF6  6EDA               	movwf	fsr2h,c
 14845  005BF8  5166               	movf	mac_cmp@i& (0+255),w,b
 14846  005BFA  0D01               	mullw	1
 14847  005BFC  50F3               	movf	prodl,w,c
 14848  005BFE  2560               	addwf	mac_cmp@a& (0+255),w,b
 14849  005C00  6EE1               	movwf	fsr1l,c
 14850  005C02  50F4               	movf	prodh,w,c
 14851  005C04  2161               	addwfc	(mac_cmp@a+1)& (0+255),w,b
 14852  005C06  6EE2               	movwf	fsr1h,c
 14853  005C08  50DE               	movf	postinc2,w,c
 14854  005C0A  18E6               	xorwf	postinc1,w,c
 14855  005C0C  B4D8               	btfsc	status,2,c
 14856  005C0E  D002               	goto	l392
 14857                           
 14858                           ; BSR set to: 0
 14859                           ;mac.c: 42: return 0;
 14860  005C10  90D8               	bcf	status,0,c
 14861                           
 14862                           ; BSR set to: 0
 14863  005C12  0012               	return	
 14864  005C14                     l392:
 14865                           
 14866                           ; BSR set to: 0
 14867                           
 14868                           ; BSR set to: 0
 14869  005C14  2B66               	incf	mac_cmp@i& (0+255),f,b
 14870  005C16  D7E4               	goto	l9879
 14871  005C18                     u11190:
 14872                           
 14873                           ; BSR set to: 0
 14874                           ;mac.c: 43: }
 14875                           ;mac.c: 44: return 1;
 14876                           
 14877                           ; BSR set to: 0
 14878  005C18  80D8               	bsf	status,0,c
 14879  005C1A  0012               	return	
 14880  005C1C                     __end_of_mac_cmp:
 14881                           	opt stack 0
 14882                           tblptru	equ	0xFF8
 14883                           tblptrh	equ	0xFF7
 14884                           tblptrl	equ	0xFF6
 14885                           tablat	equ	0xFF5
 14886                           prodh	equ	0xFF4
 14887                           prodl	equ	0xFF3
 14888                           intcon	equ	0xFF2
 14889                           intcon3	equ	0xFF0
 14890                           indf0	equ	0xFEF
 14891                           postinc0	equ	0xFEE
 14892                           plusw0	equ	0xFEB
 14893                           fsr0h	equ	0xFEA
 14894                           fsr0l	equ	0xFE9
 14895                           wreg	equ	0xFE8
 14896                           indf1	equ	0xFE7
 14897                           postinc1	equ	0xFE6
 14898                           postdec1	equ	0xFE5
 14899                           plusw1	equ	0xFE3
 14900                           fsr1h	equ	0xFE2
 14901                           fsr1l	equ	0xFE1
 14902                           indf2	equ	0xFDF
 14903                           postinc2	equ	0xFDE
 14904                           postdec2	equ	0xFDD
 14905                           plusw2	equ	0xFDB
 14906                           fsr2h	equ	0xFDA
 14907                           fsr2l	equ	0xFD9
 14908                           status	equ	0xFD8
 14909                           
 14910 ;; *************** function _ethernetController_streamFromRXBuffer *****************
 14911 ;; Defined at:
 14912 ;;		line 350 in file "src/enc424j600/ENC424J600.c"
 14913 ;; Parameters:    Size  Location     Type
 14914 ;;  startEnd        1    wreg     unsigned char 
 14915 ;;  startAddress    2   15[BANK0 ] unsigned int 
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;  startEnd        1   17[BANK0 ] unsigned char 
 14918 ;;  temp            1   19[BANK0 ] unsigned char 
 14919 ;;  opcode          1   18[BANK0 ] unsigned char 
 14920 ;; Return value:  Size  Location     Type
 14921 ;;                  1    wreg      unsigned char 
 14922 ;; Registers used:
 14923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14924 ;; Tracked objects:
 14925 ;;		On entry : 0/0
 14926 ;;		On exit  : 0/0
 14927 ;;		Unchanged: 0/0
 14928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14929 ;;      Params:         0       2       0       0       0       0       0       0       0
 14930 ;;      Locals:         0       3       0       0       0       0       0       0       0
 14931 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14932 ;;      Totals:         0       5       0       0       0       0       0       0       0
 14933 ;;Total ram usage:        5 bytes
 14934 ;; Hardware stack levels used:    1
 14935 ;; Hardware stack levels required when called:    7
 14936 ;; This function calls:
 14937 ;;		_enc424j600_readSPI
 14938 ;;		_enc424j600_setERXDATAReadPointer
 14939 ;;		_enc424j600_writeSPI
 14940 ;; This function is called by:
 14941 ;;		_arp_parseFromRXBuffer
 14942 ;;		_ipv4_parseHeader
 14943 ;;		_icmp_parseHeader
 14944 ;;		_icmp_calculateChecksum
 14945 ;;		_icmp_sendEchoReply
 14946 ;; This function uses a non-reentrant model
 14947 ;;
 14948                           
 14949                           	psect	text41
 14950  005772                     __ptext41:
 14951                           	opt stack 0
 14952  005772                     _ethernetController_streamFromRXBuffer:
 14953                           	opt stack 19
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;incstack = 0
 14957                           ;ethernetController_streamFromRXBuffer@startEnd stored from wreg
 14958  005772  0100               	movlb	0	; () banked
 14959  005774  6F71               	movwf	ethernetController_streamFromRXBuffer@startEnd& (0+255),b
 14960                           
 14961                           ;ENC424J600.c: 351: uint8_t temp;
 14962                           ;ENC424J600.c: 352: uint8_t opcode;
 14963                           ;ENC424J600.c: 353: switch (startEnd) {
 14964  005776  D01F               	goto	l179
 14965  005778                     
 14966                           ;ENC424J600.c: 355: enc424j600_setERXDATAReadPointer(startAddress);
 14967  005778  C06F  F06A         	movff	ethernetController_streamFromRXBuffer@startAddress,enc424j600_setERXDATAReadPoint
      +                          er@addr
 14968  00577C  C070  F06B         	movff	ethernetController_streamFromRXBuffer@startAddress+1,enc424j600_setERXDATAReadPoi
      +                          nter@addr+1
 14969  005780  EC6B  F02E         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 14970                           
 14971                           ;ENC424J600.c: 356: opcode = 0x2C;
 14972  005784  0E2C               	movlw	44
 14973  005786  0100               	movlb	0	; () banked
 14974  005788  6F72               	movwf	ethernetController_streamFromRXBuffer@opcode& (0+255),b
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;ENC424J600.c: 357: PORTBbits.RB4=0;
 14978  00578A  9881               	bcf	3969,4,c	;volatile
 14979                           
 14980                           ; BSR set to: 0
 14981                           ;ENC424J600.c: 358: enc424j600_writeSPI(&opcode);
 14982  00578C  0E72               	movlw	low ethernetController_streamFromRXBuffer@opcode
 14983  00578E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 14984  005790  0E00               	movlw	high ethernetController_streamFromRXBuffer@opcode
 14985  005792  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 14986  005794  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 14987                           
 14988                           ;ENC424J600.c: 359: return 0;
 14989  005798  0E00               	movlw	0
 14990  00579A  0012               	return	
 14991  00579C                     
 14992                           ;ENC424J600.c: 361: enc424j600_readSPI(&temp);
 14993  00579C  0E73               	movlw	low ethernetController_streamFromRXBuffer@temp
 14994  00579E  0100               	movlb	0	; () banked
 14995  0057A0  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 14996  0057A2  0E00               	movlw	high ethernetController_streamFromRXBuffer@temp
 14997  0057A4  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 14998  0057A6  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 14999                           
 15000                           ;ENC424J600.c: 362: return temp;
 15001  0057AA  0100               	movlb	0	; () banked
 15002  0057AC  5173               	movf	ethernetController_streamFromRXBuffer@temp& (0+255),w,b
 15003                           
 15004                           ; BSR set to: 0
 15005  0057AE  0012               	return	
 15006  0057B0                     l183:
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;ENC424J600.c: 364: PORTBbits.RB4=1;
 15010  0057B0  8881               	bsf	3969,4,c	;volatile
 15011                           
 15012                           ; BSR set to: 0
 15013                           ;ENC424J600.c: 374: return 0;
 15014  0057B2  0E00               	movlw	0
 15015                           
 15016                           ; BSR set to: 0
 15017  0057B4  0012               	return	
 15018  0057B6                     l179:
 15019                           
 15020                           ; BSR set to: 0
 15021  0057B6  0100               	movlb	0	; () banked
 15022  0057B8  5171               	movf	ethernetController_streamFromRXBuffer@startEnd& (0+255),w,b
 15023                           
 15024                           ; Switch size 1, requested type "space"
 15025                           ; Number of cases is 3, Range of values is 0 to 2
 15026                           ; switch strategies available:
 15027                           ; Name         Instructions Cycles
 15028                           ; simple_byte           10     6 (average)
 15029                           ;	Chosen strategy is simple_byte
 15030  0057BA  0A00               	xorlw	0	; case 0
 15031  0057BC  B4D8               	btfsc	status,2,c
 15032  0057BE  D7DC               	goto	l180
 15033  0057C0  0A01               	xorlw	1	; case 1
 15034  0057C2  B4D8               	btfsc	status,2,c
 15035  0057C4  D7EB               	goto	l182
 15036  0057C6  0A03               	xorlw	3	; case 2
 15037  0057C8  B4D8               	btfsc	status,2,c
 15038  0057CA  D7F2               	goto	l183
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;ENC424J600.c: 376: return 0;
 15042                           
 15043                           ; BSR set to: 0
 15044  0057CC  0E00               	movlw	0
 15045  0057CE  0012               	return	
 15046  0057D0                     __end_of_ethernetController_streamFromRXBuffer:
 15047                           	opt stack 0
 15048                           tblptru	equ	0xFF8
 15049                           tblptrh	equ	0xFF7
 15050                           tblptrl	equ	0xFF6
 15051                           tablat	equ	0xFF5
 15052                           prodh	equ	0xFF4
 15053                           prodl	equ	0xFF3
 15054                           intcon	equ	0xFF2
 15055                           intcon3	equ	0xFF0
 15056                           indf0	equ	0xFEF
 15057                           postinc0	equ	0xFEE
 15058                           plusw0	equ	0xFEB
 15059                           fsr0h	equ	0xFEA
 15060                           fsr0l	equ	0xFE9
 15061                           wreg	equ	0xFE8
 15062                           indf1	equ	0xFE7
 15063                           postinc1	equ	0xFE6
 15064                           postdec1	equ	0xFE5
 15065                           plusw1	equ	0xFE3
 15066                           fsr1h	equ	0xFE2
 15067                           fsr1l	equ	0xFE1
 15068                           indf2	equ	0xFDF
 15069                           postinc2	equ	0xFDE
 15070                           postdec2	equ	0xFDD
 15071                           plusw2	equ	0xFDB
 15072                           fsr2h	equ	0xFDA
 15073                           fsr2l	equ	0xFD9
 15074                           status	equ	0xFD8
 15075                           
 15076 ;; *************** function _UARTTransmitInt *****************
 15077 ;; Defined at:
 15078 ;;		line 43 in file "src/system/uart.c"
 15079 ;; Parameters:    Size  Location     Type
 15080 ;;  val             4   58[BANK0 ] unsigned long 
 15081 ;; Auto vars:     Size  Location     Type
 15082 ;;		None
 15083 ;; Return value:  Size  Location     Type
 15084 ;;                  1    wreg      void 
 15085 ;; Registers used:
 15086 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 15087 ;; Tracked objects:
 15088 ;;		On entry : 0/0
 15089 ;;		On exit  : 0/0
 15090 ;;		Unchanged: 0/0
 15091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15092 ;;      Params:         0       4       0       0       0       0       0       0       0
 15093 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15094 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15095 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15096 ;;Total ram usage:        4 bytes
 15097 ;; Hardware stack levels used:    1
 15098 ;; Hardware stack levels required when called:    8
 15099 ;; This function calls:
 15100 ;;		_UARTTransmitText
 15101 ;;		_intToString
 15102 ;; This function is called by:
 15103 ;;		_ethernet_rxGetNewFrame
 15104 ;; This function uses a non-reentrant model
 15105 ;;
 15106                           
 15107                           	psect	text42
 15108  0060BC                     __ptext42:
 15109                           	opt stack 0
 15110  0060BC                     _UARTTransmitInt:
 15111                           	opt stack 20
 15112                           
 15113                           ;uart.c: 44: UARTTransmitText(intToString(val));
 15114                           
 15115                           ;incstack = 0
 15116  0060BC  C09A  F084         	movff	UARTTransmitInt@val,intToString@val
 15117  0060C0  C09B  F085         	movff	UARTTransmitInt@val+1,intToString@val+1
 15118  0060C4  C09C  F086         	movff	UARTTransmitInt@val+2,intToString@val+2
 15119  0060C8  C09D  F087         	movff	UARTTransmitInt@val+3,intToString@val+3
 15120  0060CC  EC11  F02F         	call	_intToString	;wreg free
 15121  0060D0  C084  F098         	movff	?_intToString,UARTTransmitText@str
 15122  0060D4  C085  F099         	movff	?_intToString+1,UARTTransmitText@str+1
 15123  0060D8  EC42  F02C         	call	_UARTTransmitText	;wreg free
 15124  0060DC  0012               	return		;funcret
 15125  0060DE                     __end_of_UARTTransmitInt:
 15126                           	opt stack 0
 15127                           tblptru	equ	0xFF8
 15128                           tblptrh	equ	0xFF7
 15129                           tblptrl	equ	0xFF6
 15130                           tablat	equ	0xFF5
 15131                           prodh	equ	0xFF4
 15132                           prodl	equ	0xFF3
 15133                           intcon	equ	0xFF2
 15134                           intcon3	equ	0xFF0
 15135                           indf0	equ	0xFEF
 15136                           postinc0	equ	0xFEE
 15137                           plusw0	equ	0xFEB
 15138                           fsr0h	equ	0xFEA
 15139                           fsr0l	equ	0xFE9
 15140                           wreg	equ	0xFE8
 15141                           indf1	equ	0xFE7
 15142                           postinc1	equ	0xFE6
 15143                           postdec1	equ	0xFE5
 15144                           plusw1	equ	0xFE3
 15145                           fsr1h	equ	0xFE2
 15146                           fsr1l	equ	0xFE1
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           plusw2	equ	0xFDB
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function _intToString *****************
 15156 ;; Defined at:
 15157 ;;		line 75 in file "src/system/uart.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;  val             4   36[BANK0 ] unsigned long 
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;		None
 15162 ;; Return value:  Size  Location     Type
 15163 ;;                  2   36[BANK0 ] PTR unsigned char 
 15164 ;; Registers used:
 15165 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : 0/0
 15168 ;;		On exit  : 0/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15171 ;;      Params:         0       4       0       0       0       0       0       0       0
 15172 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15173 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15174 ;;      Totals:         0       4       0       0       0       0       0       0       0
 15175 ;;Total ram usage:        4 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    7
 15178 ;; This function calls:
 15179 ;;		_ltoa
 15180 ;; This function is called by:
 15181 ;;		_ethernet_rxGetNewFrame
 15182 ;;		_handleStackBackgroundTasks
 15183 ;;		_printErrorMessage
 15184 ;;		_UARTTransmitInt
 15185 ;;		_icmp_handleNewPacket
 15186 ;;		_arpEntryToString
 15187 ;; This function uses a non-reentrant model
 15188 ;;
 15189                           
 15190                           	psect	text43
 15191  005E22                     __ptext43:
 15192                           	opt stack 0
 15193  005E22                     _intToString:
 15194                           	opt stack 22
 15195                           
 15196                           ;uart.c: 76: char static number [10];
 15197                           ;uart.c: 77: ltoa(&number[0], (long) val, 10);
 15198                           
 15199                           ;incstack = 0
 15200  005E22  0E72               	movlw	low intToString@number
 15201  005E24  0100               	movlb	0	; () banked
 15202  005E26  6F7A               	movwf	ltoa@buf& (0+255),b
 15203  005E28  0E02               	movlw	high intToString@number
 15204  005E2A  6F7B               	movwf	(ltoa@buf+1)& (0+255),b
 15205  005E2C  C084  F07C         	movff	intToString@val,ltoa@val
 15206  005E30  C085  F07D         	movff	intToString@val+1,ltoa@val+1
 15207  005E34  C086  F07E         	movff	intToString@val+2,ltoa@val+2
 15208  005E38  C087  F07F         	movff	intToString@val+3,ltoa@val+3
 15209  005E3C  0E00               	movlw	0
 15210  005E3E  6F81               	movwf	(ltoa@base+1)& (0+255),b
 15211  005E40  0E0A               	movlw	10
 15212  005E42  6F80               	movwf	ltoa@base& (0+255),b
 15213  005E44  EC6D  F02C         	call	_ltoa	;wreg free
 15214                           
 15215                           ;uart.c: 81: return number;
 15216  005E48  0E72               	movlw	low intToString@number
 15217  005E4A  0100               	movlb	0	; () banked
 15218  005E4C  6F84               	movwf	?_intToString& (0+255),b
 15219  005E4E  0E02               	movlw	high intToString@number
 15220  005E50  6F85               	movwf	(?_intToString+1)& (0+255),b
 15221  005E52  0012               	return	
 15222  005E54                     __end_of_intToString:
 15223                           	opt stack 0
 15224                           tblptru	equ	0xFF8
 15225                           tblptrh	equ	0xFF7
 15226                           tblptrl	equ	0xFF6
 15227                           tablat	equ	0xFF5
 15228                           prodh	equ	0xFF4
 15229                           prodl	equ	0xFF3
 15230                           intcon	equ	0xFF2
 15231                           intcon3	equ	0xFF0
 15232                           indf0	equ	0xFEF
 15233                           postinc0	equ	0xFEE
 15234                           plusw0	equ	0xFEB
 15235                           fsr0h	equ	0xFEA
 15236                           fsr0l	equ	0xFE9
 15237                           wreg	equ	0xFE8
 15238                           indf1	equ	0xFE7
 15239                           postinc1	equ	0xFE6
 15240                           postdec1	equ	0xFE5
 15241                           plusw1	equ	0xFE3
 15242                           fsr1h	equ	0xFE2
 15243                           fsr1l	equ	0xFE1
 15244                           indf2	equ	0xFDF
 15245                           postinc2	equ	0xFDE
 15246                           postdec2	equ	0xFDD
 15247                           plusw2	equ	0xFDB
 15248                           fsr2h	equ	0xFDA
 15249                           fsr2l	equ	0xFD9
 15250                           status	equ	0xFD8
 15251                           
 15252 ;; *************** function _ltoa *****************
 15253 ;; Defined at:
 15254 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 15255 ;; Parameters:    Size  Location     Type
 15256 ;;  buf             2   26[BANK0 ] PTR unsigned char 
 15257 ;;		 -> intToString@number(10), 
 15258 ;;  val             4   28[BANK0 ] long 
 15259 ;;  base            2   32[BANK0 ] int 
 15260 ;; Auto vars:     Size  Location     Type
 15261 ;;  cp              2   34[BANK0 ] PTR unsigned char 
 15262 ;;		 -> intToString@number(10), 
 15263 ;; Return value:  Size  Location     Type
 15264 ;;                  2   26[BANK0 ] PTR unsigned char 
 15265 ;; Registers used:
 15266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15267 ;; Tracked objects:
 15268 ;;		On entry : 0/0
 15269 ;;		On exit  : 0/0
 15270 ;;		Unchanged: 0/0
 15271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15272 ;;      Params:         0       8       0       0       0       0       0       0       0
 15273 ;;      Locals:         0       2       0       0       0       0       0       0       0
 15274 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15275 ;;      Totals:         0      10       0       0       0       0       0       0       0
 15276 ;;Total ram usage:       10 bytes
 15277 ;; Hardware stack levels used:    1
 15278 ;; Hardware stack levels required when called:    6
 15279 ;; This function calls:
 15280 ;;		_ultoa
 15281 ;; This function is called by:
 15282 ;;		_intToString
 15283 ;; This function uses a non-reentrant model
 15284 ;;
 15285                           
 15286                           	psect	text44
 15287  0058DA                     __ptext44:
 15288                           	opt stack 0
 15289  0058DA                     _ltoa:
 15290                           	opt stack 22
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;incstack = 0
 15294  0058DA  C07A  F082         	movff	ltoa@buf,ltoa@cp
 15295  0058DE  C07B  F083         	movff	ltoa@buf+1,ltoa@cp+1
 15296  0058E2  0100               	movlb	0	; () banked
 15297  0058E4  AF7F               	btfss	(ltoa@val+3)& (0+255),7,b
 15298  0058E6  D010               	goto	l1751
 15299                           
 15300                           ; BSR set to: 0
 15301  0058E8  C07A  FFD9         	movff	ltoa@buf,fsr2l
 15302  0058EC  C07B  FFDA         	movff	ltoa@buf+1,fsr2h
 15303  0058F0  0E2D               	movlw	45
 15304  0058F2  6EDF               	movwf	indf2,c
 15305                           
 15306                           ; BSR set to: 0
 15307  0058F4  4B7A               	infsnz	ltoa@buf& (0+255),f,b
 15308  0058F6  2B7B               	incf	(ltoa@buf+1)& (0+255),f,b
 15309                           
 15310                           ; BSR set to: 0
 15311  0058F8  1F7F               	comf	(ltoa@val+3)& (0+255),f,b
 15312  0058FA  1F7E               	comf	(ltoa@val+2)& (0+255),f,b
 15313  0058FC  1F7D               	comf	(ltoa@val+1)& (0+255),f,b
 15314  0058FE  6D7C               	negf	ltoa@val& (0+255),b
 15315  005900  0E00               	movlw	0
 15316  005902  237D               	addwfc	(ltoa@val+1)& (0+255),f,b
 15317  005904  237E               	addwfc	(ltoa@val+2)& (0+255),f,b
 15318  005906  237F               	addwfc	(ltoa@val+3)& (0+255),f,b
 15319  005908                     l1751:
 15320                           
 15321                           ; BSR set to: 0
 15322                           
 15323                           ; BSR set to: 0
 15324  005908  C07A  F06D         	movff	ltoa@buf,ultoa@buf
 15325  00590C  C07B  F06E         	movff	ltoa@buf+1,ultoa@buf+1
 15326  005910  C07C  F06F         	movff	ltoa@val,ultoa@val
 15327  005914  C07D  F070         	movff	ltoa@val+1,ultoa@val+1
 15328  005918  C07E  F071         	movff	ltoa@val+2,ultoa@val+2
 15329  00591C  C07F  F072         	movff	ltoa@val+3,ultoa@val+3
 15330  005920  C080  F073         	movff	ltoa@base,ultoa@base
 15331  005924  C081  F074         	movff	ltoa@base+1,ultoa@base+1
 15332  005928  ECD9  F023         	call	_ultoa	;wreg free
 15333  00592C  0012               	return	
 15334  00592E                     __end_of_ltoa:
 15335                           	opt stack 0
 15336                           tblptru	equ	0xFF8
 15337                           tblptrh	equ	0xFF7
 15338                           tblptrl	equ	0xFF6
 15339                           tablat	equ	0xFF5
 15340                           prodh	equ	0xFF4
 15341                           prodl	equ	0xFF3
 15342                           intcon	equ	0xFF2
 15343                           intcon3	equ	0xFF0
 15344                           indf0	equ	0xFEF
 15345                           postinc0	equ	0xFEE
 15346                           plusw0	equ	0xFEB
 15347                           fsr0h	equ	0xFEA
 15348                           fsr0l	equ	0xFE9
 15349                           wreg	equ	0xFE8
 15350                           indf1	equ	0xFE7
 15351                           postinc1	equ	0xFE6
 15352                           postdec1	equ	0xFE5
 15353                           plusw1	equ	0xFE3
 15354                           fsr1h	equ	0xFE2
 15355                           fsr1l	equ	0xFE1
 15356                           indf2	equ	0xFDF
 15357                           postinc2	equ	0xFDE
 15358                           postdec2	equ	0xFDD
 15359                           plusw2	equ	0xFDB
 15360                           fsr2h	equ	0xFDA
 15361                           fsr2l	equ	0xFD9
 15362                           status	equ	0xFD8
 15363                           
 15364 ;; *************** function _ultoa *****************
 15365 ;; Defined at:
 15366 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ltoa.c"
 15367 ;; Parameters:    Size  Location     Type
 15368 ;;  buf             2   13[BANK0 ] PTR unsigned char 
 15369 ;;		 -> intToString@number(10), 
 15370 ;;  val             4   15[BANK0 ] unsigned long 
 15371 ;;  base            2   19[BANK0 ] int 
 15372 ;; Auto vars:     Size  Location     Type
 15373 ;;  v               4   21[BANK0 ] unsigned long 
 15374 ;;  c               1   25[BANK0 ] unsigned char 
 15375 ;; Return value:  Size  Location     Type
 15376 ;;                  2   13[BANK0 ] PTR unsigned char 
 15377 ;; Registers used:
 15378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15379 ;; Tracked objects:
 15380 ;;		On entry : 0/0
 15381 ;;		On exit  : 0/0
 15382 ;;		Unchanged: 0/0
 15383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15384 ;;      Params:         0       8       0       0       0       0       0       0       0
 15385 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15386 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15387 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15388 ;;Total ram usage:       13 bytes
 15389 ;; Hardware stack levels used:    1
 15390 ;; Hardware stack levels required when called:    5
 15391 ;; This function calls:
 15392 ;;		___lldiv
 15393 ;;		___llmod
 15394 ;; This function is called by:
 15395 ;;		_ltoa
 15396 ;; This function uses a non-reentrant model
 15397 ;;
 15398                           
 15399                           	psect	text45
 15400  0047B2                     __ptext45:
 15401                           	opt stack 0
 15402  0047B2                     _ultoa:
 15403                           	opt stack 22
 15404                           
 15405                           ;incstack = 0
 15406  0047B2  C06F  F075         	movff	ultoa@val,ultoa@v
 15407  0047B6  C070  F076         	movff	ultoa@val+1,ultoa@v+1
 15408  0047BA  C071  F077         	movff	ultoa@val+2,ultoa@v+2
 15409  0047BE  C072  F078         	movff	ultoa@val+3,ultoa@v+3
 15410  0047C2  C075  F060         	movff	ultoa@v,___lldiv@dividend
 15411  0047C6  C076  F061         	movff	ultoa@v+1,___lldiv@dividend+1
 15412  0047CA  C077  F062         	movff	ultoa@v+2,___lldiv@dividend+2
 15413  0047CE  C078  F063         	movff	ultoa@v+3,___lldiv@dividend+3
 15414  0047D2  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15415  0047D6  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15416  0047DA  0100               	movlb	0	; () banked
 15417  0047DC  0E00               	movlw	0
 15418  0047DE  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15419  0047E0  0EFF               	movlw	-1
 15420  0047E2  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15421  0047E4  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15422  0047E6  EC8D  F028         	call	___lldiv	;wreg free
 15423  0047EA  C060  F075         	movff	?___lldiv,ultoa@v
 15424  0047EE  C061  F076         	movff	?___lldiv+1,ultoa@v+1
 15425  0047F2  C062  F077         	movff	?___lldiv+2,ultoa@v+2
 15426  0047F6  C063  F078         	movff	?___lldiv+3,ultoa@v+3
 15427  0047FA  0100               	movlb	0	; () banked
 15428  0047FC  4B6D               	infsnz	ultoa@buf& (0+255),f,b
 15429  0047FE  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
 15430                           
 15431                           ; BSR set to: 0
 15432  004800  5175               	movf	ultoa@v& (0+255),w,b
 15433  004802  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
 15434  004804  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
 15435  004806  1178               	iorwf	(ultoa@v+3)& (0+255),w,b
 15436  004808  A4D8               	btfss	status,2,c
 15437  00480A  D7DB               	goto	l1755
 15438                           
 15439                           ; BSR set to: 0
 15440                           
 15441                           ; BSR set to: 0
 15442  00480C  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15443  004810  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15444  004814  0E00               	movlw	0
 15445  004816  6EDF               	movwf	indf2,c
 15446                           
 15447                           ; BSR set to: 0
 15448  004818  076D               	decf	ultoa@buf& (0+255),f,b
 15449  00481A  A0D8               	btfss	status,0,c
 15450  00481C  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15451  00481E                     
 15452                           ; BSR set to: 0
 15453                           
 15454                           ; BSR set to: 0
 15455  00481E  C06F  F060         	movff	ultoa@val,___llmod@dividend
 15456  004822  C070  F061         	movff	ultoa@val+1,___llmod@dividend+1
 15457  004826  C071  F062         	movff	ultoa@val+2,___llmod@dividend+2
 15458  00482A  C072  F063         	movff	ultoa@val+3,___llmod@dividend+3
 15459  00482E  C073  F064         	movff	ultoa@base,___llmod@divisor
 15460  004832  C074  F065         	movff	ultoa@base+1,___llmod@divisor+1
 15461  004836  0E00               	movlw	0
 15462  004838  BF65               	btfsc	(___llmod@divisor+1)& (0+255),7,b
 15463  00483A  0EFF               	movlw	-1
 15464  00483C  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
 15465  00483E  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
 15466  004840  EC53  F02B         	call	___llmod	;wreg free
 15467  004844  0100               	movlb	0	; () banked
 15468  004846  5160               	movf	?___llmod& (0+255),w,b
 15469  004848  6F79               	movwf	ultoa@c& (0+255),b
 15470                           
 15471                           ; BSR set to: 0
 15472  00484A  C06F  F060         	movff	ultoa@val,___lldiv@dividend
 15473  00484E  C070  F061         	movff	ultoa@val+1,___lldiv@dividend+1
 15474  004852  C071  F062         	movff	ultoa@val+2,___lldiv@dividend+2
 15475  004856  C072  F063         	movff	ultoa@val+3,___lldiv@dividend+3
 15476  00485A  C073  F064         	movff	ultoa@base,___lldiv@divisor
 15477  00485E  C074  F065         	movff	ultoa@base+1,___lldiv@divisor+1
 15478  004862  0E00               	movlw	0
 15479  004864  BF65               	btfsc	(___lldiv@divisor+1)& (0+255),7,b
 15480  004866  0EFF               	movlw	-1
 15481  004868  6F66               	movwf	(___lldiv@divisor+2)& (0+255),b
 15482  00486A  6F67               	movwf	(___lldiv@divisor+3)& (0+255),b
 15483  00486C  EC8D  F028         	call	___lldiv	;wreg free
 15484  004870  C060  F06F         	movff	?___lldiv,ultoa@val
 15485  004874  C061  F070         	movff	?___lldiv+1,ultoa@val+1
 15486  004878  C062  F071         	movff	?___lldiv+2,ultoa@val+2
 15487  00487C  C063  F072         	movff	?___lldiv+3,ultoa@val+3
 15488  004880  0E09               	movlw	9
 15489  004882  0100               	movlb	0	; () banked
 15490  004884  6579               	cpfsgt	ultoa@c& (0+255),b
 15491  004886  D002               	goto	l1758
 15492                           
 15493                           ; BSR set to: 0
 15494  004888  0E07               	movlw	7
 15495  00488A  2779               	addwf	ultoa@c& (0+255),f,b
 15496  00488C                     l1758:
 15497                           
 15498                           ; BSR set to: 0
 15499  00488C  0E30               	movlw	48
 15500  00488E  2779               	addwf	ultoa@c& (0+255),f,b
 15501                           
 15502                           ; BSR set to: 0
 15503  004890  C06D  FFD9         	movff	ultoa@buf,fsr2l
 15504  004894  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
 15505  004898  C079  FFDF         	movff	ultoa@c,indf2
 15506                           
 15507                           ; BSR set to: 0
 15508  00489C  076D               	decf	ultoa@buf& (0+255),f,b
 15509  00489E  A0D8               	btfss	status,0,c
 15510  0048A0  076E               	decf	(ultoa@buf+1)& (0+255),f,b
 15511                           
 15512                           ; BSR set to: 0
 15513  0048A2  516F               	movf	ultoa@val& (0+255),w,b
 15514  0048A4  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
 15515  0048A6  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
 15516  0048A8  1172               	iorwf	(ultoa@val+3)& (0+255),w,b
 15517  0048AA  B4D8               	btfsc	status,2,c
 15518  0048AC  0012               	return	
 15519  0048AE  D7B7               	goto	l1757
 15520  0048B0                     __end_of_ultoa:
 15521                           	opt stack 0
 15522                           tblptru	equ	0xFF8
 15523                           tblptrh	equ	0xFF7
 15524                           tblptrl	equ	0xFF6
 15525                           tablat	equ	0xFF5
 15526                           prodh	equ	0xFF4
 15527                           prodl	equ	0xFF3
 15528                           intcon	equ	0xFF2
 15529                           intcon3	equ	0xFF0
 15530                           indf0	equ	0xFEF
 15531                           postinc0	equ	0xFEE
 15532                           plusw0	equ	0xFEB
 15533                           fsr0h	equ	0xFEA
 15534                           fsr0l	equ	0xFE9
 15535                           wreg	equ	0xFE8
 15536                           indf1	equ	0xFE7
 15537                           postinc1	equ	0xFE6
 15538                           postdec1	equ	0xFE5
 15539                           plusw1	equ	0xFE3
 15540                           fsr1h	equ	0xFE2
 15541                           fsr1l	equ	0xFE1
 15542                           indf2	equ	0xFDF
 15543                           postinc2	equ	0xFDE
 15544                           postdec2	equ	0xFDD
 15545                           plusw2	equ	0xFDB
 15546                           fsr2h	equ	0xFDA
 15547                           fsr2l	equ	0xFD9
 15548                           status	equ	0xFD8
 15549                           
 15550 ;; *************** function ___llmod *****************
 15551 ;; Defined at:
 15552 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
 15553 ;; Parameters:    Size  Location     Type
 15554 ;;  dividend        4    0[BANK0 ] unsigned long 
 15555 ;;  divisor         4    4[BANK0 ] unsigned long 
 15556 ;; Auto vars:     Size  Location     Type
 15557 ;;  counter         1    8[BANK0 ] unsigned char 
 15558 ;; Return value:  Size  Location     Type
 15559 ;;                  4    0[BANK0 ] unsigned long 
 15560 ;; Registers used:
 15561 ;;		wreg, status,2, status,0
 15562 ;; Tracked objects:
 15563 ;;		On entry : 0/0
 15564 ;;		On exit  : 0/0
 15565 ;;		Unchanged: 0/0
 15566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15567 ;;      Params:         0       8       0       0       0       0       0       0       0
 15568 ;;      Locals:         0       1       0       0       0       0       0       0       0
 15569 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15570 ;;      Totals:         0       9       0       0       0       0       0       0       0
 15571 ;;Total ram usage:        9 bytes
 15572 ;; Hardware stack levels used:    1
 15573 ;; Hardware stack levels required when called:    4
 15574 ;; This function calls:
 15575 ;;		Nothing
 15576 ;; This function is called by:
 15577 ;;		_ultoa
 15578 ;;		_arpEntryToString
 15579 ;; This function uses a non-reentrant model
 15580 ;;
 15581                           
 15582                           	psect	text46
 15583  0056A6                     __ptext46:
 15584                           	opt stack 0
 15585  0056A6                     ___llmod:
 15586                           	opt stack 22
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;incstack = 0
 15590  0056A6  0100               	movlb	0	; () banked
 15591  0056A8  5164               	movf	___llmod@divisor& (0+255),w,b
 15592  0056AA  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 15593  0056AC  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 15594  0056AE  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 15595  0056B0  B4D8               	btfsc	status,2,c
 15596  0056B2  D024               	goto	l1717
 15597                           
 15598                           ; BSR set to: 0
 15599  0056B4  0E01               	movlw	1
 15600  0056B6  6F68               	movwf	___llmod@counter& (0+255),b
 15601  0056B8  D006               	goto	l1712
 15602  0056BA                     
 15603                           ; BSR set to: 0
 15604                           
 15605                           ; BSR set to: 0
 15606  0056BA  90D8               	bcf	status,0,c
 15607  0056BC  3764               	rlcf	___llmod@divisor& (0+255),f,b
 15608  0056BE  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 15609  0056C0  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 15610  0056C2  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 15611  0056C4  2B68               	incf	___llmod@counter& (0+255),f,b
 15612  0056C6                     l1712:
 15613                           
 15614                           ; BSR set to: 0
 15615                           
 15616                           ; BSR set to: 0
 15617  0056C6  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
 15618  0056C8  D7F8               	goto	l1713
 15619  0056CA                     u10510:
 15620                           
 15621                           ; BSR set to: 0
 15622                           
 15623                           ; BSR set to: 0
 15624                           
 15625                           ; BSR set to: 0
 15626  0056CA  5164               	movf	___llmod@divisor& (0+255),w,b
 15627  0056CC  5D60               	subwf	___llmod@dividend& (0+255),w,b
 15628  0056CE  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 15629  0056D0  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 15630  0056D2  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 15631  0056D4  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 15632  0056D6  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 15633  0056D8  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 15634  0056DA  A0D8               	btfss	status,0,c
 15635  0056DC  D008               	goto	l1716
 15636                           
 15637                           ; BSR set to: 0
 15638  0056DE  5164               	movf	___llmod@divisor& (0+255),w,b
 15639  0056E0  5F60               	subwf	___llmod@dividend& (0+255),f,b
 15640  0056E2  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
 15641  0056E4  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 15642  0056E6  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
 15643  0056E8  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 15644  0056EA  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
 15645  0056EC  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 15646  0056EE                     l1716:
 15647                           
 15648                           ; BSR set to: 0
 15649                           
 15650                           ; BSR set to: 0
 15651  0056EE  90D8               	bcf	status,0,c
 15652  0056F0  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 15653  0056F2  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 15654  0056F4  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 15655  0056F6  3364               	rrcf	___llmod@divisor& (0+255),f,b
 15656                           
 15657                           ; BSR set to: 0
 15658  0056F8  2F68               	decfsz	___llmod@counter& (0+255),f,b
 15659  0056FA  D7E7               	goto	u10510
 15660  0056FC                     l1717:
 15661                           
 15662                           ; BSR set to: 0
 15663                           
 15664                           ; BSR set to: 0
 15665  0056FC  C060  F060         	movff	___llmod@dividend,?___llmod
 15666  005700  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
 15667  005704  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
 15668  005708  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
 15669                           
 15670                           ; BSR set to: 0
 15671  00570C  0012               	return		;funcret
 15672  00570E                     __end_of___llmod:
 15673                           	opt stack 0
 15674                           tblptru	equ	0xFF8
 15675                           tblptrh	equ	0xFF7
 15676                           tblptrl	equ	0xFF6
 15677                           tablat	equ	0xFF5
 15678                           prodh	equ	0xFF4
 15679                           prodl	equ	0xFF3
 15680                           intcon	equ	0xFF2
 15681                           intcon3	equ	0xFF0
 15682                           indf0	equ	0xFEF
 15683                           postinc0	equ	0xFEE
 15684                           plusw0	equ	0xFEB
 15685                           fsr0h	equ	0xFEA
 15686                           fsr0l	equ	0xFE9
 15687                           wreg	equ	0xFE8
 15688                           indf1	equ	0xFE7
 15689                           postinc1	equ	0xFE6
 15690                           postdec1	equ	0xFE5
 15691                           plusw1	equ	0xFE3
 15692                           fsr1h	equ	0xFE2
 15693                           fsr1l	equ	0xFE1
 15694                           indf2	equ	0xFDF
 15695                           postinc2	equ	0xFDE
 15696                           postdec2	equ	0xFDD
 15697                           plusw2	equ	0xFDB
 15698                           fsr2h	equ	0xFDA
 15699                           fsr2l	equ	0xFD9
 15700                           status	equ	0xFD8
 15701                           
 15702 ;; *************** function ___lldiv *****************
 15703 ;; Defined at:
 15704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
 15705 ;; Parameters:    Size  Location     Type
 15706 ;;  dividend        4    0[BANK0 ] unsigned long 
 15707 ;;  divisor         4    4[BANK0 ] unsigned long 
 15708 ;; Auto vars:     Size  Location     Type
 15709 ;;  quotient        4    8[BANK0 ] unsigned long 
 15710 ;;  counter         1   12[BANK0 ] unsigned char 
 15711 ;; Return value:  Size  Location     Type
 15712 ;;                  4    0[BANK0 ] unsigned long 
 15713 ;; Registers used:
 15714 ;;		wreg, status,2, status,0
 15715 ;; Tracked objects:
 15716 ;;		On entry : 0/0
 15717 ;;		On exit  : 0/0
 15718 ;;		Unchanged: 0/0
 15719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15720 ;;      Params:         0       8       0       0       0       0       0       0       0
 15721 ;;      Locals:         0       5       0       0       0       0       0       0       0
 15722 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15723 ;;      Totals:         0      13       0       0       0       0       0       0       0
 15724 ;;Total ram usage:       13 bytes
 15725 ;; Hardware stack levels used:    1
 15726 ;; Hardware stack levels required when called:    4
 15727 ;; This function calls:
 15728 ;;		Nothing
 15729 ;; This function is called by:
 15730 ;;		_ultoa
 15731 ;; This function uses a non-reentrant model
 15732 ;;
 15733                           
 15734                           	psect	text47
 15735  00511A                     __ptext47:
 15736                           	opt stack 0
 15737  00511A                     ___lldiv:
 15738                           	opt stack 22
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;incstack = 0
 15742  00511A  0E00               	movlw	0
 15743  00511C  0100               	movlb	0	; () banked
 15744  00511E  6F68               	movwf	___lldiv@quotient& (0+255),b
 15745  005120  0E00               	movlw	0
 15746  005122  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 15747  005124  0E00               	movlw	0
 15748  005126  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 15749  005128  0E00               	movlw	0
 15750  00512A  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 15751                           
 15752                           ; BSR set to: 0
 15753  00512C  5164               	movf	___lldiv@divisor& (0+255),w,b
 15754  00512E  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 15755  005130  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 15756  005132  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 15757  005134  B4D8               	btfsc	status,2,c
 15758  005136  D02A               	goto	l1707
 15759                           
 15760                           ; BSR set to: 0
 15761  005138  0E01               	movlw	1
 15762  00513A  6F6C               	movwf	___lldiv@counter& (0+255),b
 15763  00513C  D006               	goto	l1702
 15764  00513E                     
 15765                           ; BSR set to: 0
 15766                           
 15767                           ; BSR set to: 0
 15768  00513E  90D8               	bcf	status,0,c
 15769  005140  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 15770  005142  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 15771  005144  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 15772  005146  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 15773  005148  2B6C               	incf	___lldiv@counter& (0+255),f,b
 15774  00514A                     l1702:
 15775                           
 15776                           ; BSR set to: 0
 15777                           
 15778                           ; BSR set to: 0
 15779  00514A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 15780  00514C  D7F8               	goto	l1703
 15781  00514E                     u10480:
 15782                           
 15783                           ; BSR set to: 0
 15784                           
 15785                           ; BSR set to: 0
 15786                           
 15787                           ; BSR set to: 0
 15788  00514E  90D8               	bcf	status,0,c
 15789  005150  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 15790  005152  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 15791  005154  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 15792  005156  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 15793                           
 15794                           ; BSR set to: 0
 15795  005158  5164               	movf	___lldiv@divisor& (0+255),w,b
 15796  00515A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 15797  00515C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15798  00515E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 15799  005160  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15800  005162  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 15801  005164  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15802  005166  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 15803  005168  A0D8               	btfss	status,0,c
 15804  00516A  D009               	goto	l1706
 15805                           
 15806                           ; BSR set to: 0
 15807  00516C  5164               	movf	___lldiv@divisor& (0+255),w,b
 15808  00516E  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 15809  005170  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 15810  005172  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 15811  005174  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 15812  005176  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 15813  005178  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 15814  00517A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 15815                           
 15816                           ; BSR set to: 0
 15817  00517C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 15818  00517E                     l1706:
 15819                           
 15820                           ; BSR set to: 0
 15821                           
 15822                           ; BSR set to: 0
 15823  00517E  90D8               	bcf	status,0,c
 15824  005180  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 15825  005182  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 15826  005184  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 15827  005186  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 15828                           
 15829                           ; BSR set to: 0
 15830  005188  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 15831  00518A  D7E1               	goto	u10480
 15832  00518C                     l1707:
 15833                           
 15834                           ; BSR set to: 0
 15835                           
 15836                           ; BSR set to: 0
 15837  00518C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 15838  005190  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 15839  005194  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 15840  005198  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 15841                           
 15842                           ; BSR set to: 0
 15843  00519C  0012               	return		;funcret
 15844  00519E                     __end_of___lldiv:
 15845                           	opt stack 0
 15846                           tblptru	equ	0xFF8
 15847                           tblptrh	equ	0xFF7
 15848                           tblptrl	equ	0xFF6
 15849                           tablat	equ	0xFF5
 15850                           prodh	equ	0xFF4
 15851                           prodl	equ	0xFF3
 15852                           intcon	equ	0xFF2
 15853                           intcon3	equ	0xFF0
 15854                           indf0	equ	0xFEF
 15855                           postinc0	equ	0xFEE
 15856                           plusw0	equ	0xFEB
 15857                           fsr0h	equ	0xFEA
 15858                           fsr0l	equ	0xFE9
 15859                           wreg	equ	0xFE8
 15860                           indf1	equ	0xFE7
 15861                           postinc1	equ	0xFE6
 15862                           postdec1	equ	0xFE5
 15863                           plusw1	equ	0xFE3
 15864                           fsr1h	equ	0xFE2
 15865                           fsr1l	equ	0xFE1
 15866                           indf2	equ	0xFDF
 15867                           postinc2	equ	0xFDE
 15868                           postdec2	equ	0xFDD
 15869                           plusw2	equ	0xFDB
 15870                           fsr2h	equ	0xFDA
 15871                           fsr2l	equ	0xFD9
 15872                           status	equ	0xFD8
 15873                           
 15874 ;; *************** function _ethernetController_updateLinkStatus *****************
 15875 ;; Defined at:
 15876 ;;		line 394 in file "src/enc424j600/ENC424J600.c"
 15877 ;; Parameters:    Size  Location     Type
 15878 ;;  state           2   32[BANK0 ] PTR struct ethernetConne
 15879 ;;		 -> stack(123), 
 15880 ;; Auto vars:     Size  Location     Type
 15881 ;;  temp16          2   35[BANK0 ] unsigned int 
 15882 ;;  temp            1   34[BANK0 ] unsigned char 
 15883 ;; Return value:  Size  Location     Type
 15884 ;;                  1    wreg      void 
 15885 ;; Registers used:
 15886 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15887 ;; Tracked objects:
 15888 ;;		On entry : 0/0
 15889 ;;		On exit  : 0/0
 15890 ;;		Unchanged: 0/0
 15891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15892 ;;      Params:         0       2       0       0       0       0       0       0       0
 15893 ;;      Locals:         0       3       0       0       0       0       0       0       0
 15894 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15895 ;;      Totals:         0       5       0       0       0       0       0       0       0
 15896 ;;Total ram usage:        5 bytes
 15897 ;; Hardware stack levels used:    1
 15898 ;; Hardware stack levels required when called:    8
 15899 ;; This function calls:
 15900 ;;		_enc424j600_readControlRegisterUnbanked
 15901 ;;		_enc424j600_readPHYRegister
 15902 ;; This function is called by:
 15903 ;;		_handleStackBackgroundTasks
 15904 ;; This function uses a non-reentrant model
 15905 ;;
 15906                           
 15907                           	psect	text48
 15908  004F82                     __ptext48:
 15909                           	opt stack 0
 15910  004F82                     _ethernetController_updateLinkStatus:
 15911                           	opt stack 21
 15912                           
 15913                           ;ENC424J600.c: 395: uint8_t temp;
 15914                           ;ENC424J600.c: 396: uint16_t temp16;
 15915                           ;ENC424J600.c: 397: enc424j600_readControlRegisterUnbanked(0x1B, &temp);
 15916                           
 15917                           ; BSR set to: 0
 15918                           ;incstack = 0
 15919  004F82  0E82               	movlw	low ethernetController_updateLinkStatus@temp
 15920  004F84  0100               	movlb	0	; () banked
 15921  004F86  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 15922  004F88  0E00               	movlw	high ethernetController_updateLinkStatus@temp
 15923  004F8A  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 15924  004F8C  0E1B               	movlw	27
 15925  004F8E  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 15926                           
 15927                           ;ENC424J600.c: 398: if (temp & 0x01) {
 15928  004F92  0100               	movlb	0	; () banked
 15929  004F94  A182               	btfss	ethernetController_updateLinkStatus@temp& (0+255),0,b
 15930  004F96  D006               	goto	l195
 15931                           
 15932                           ; BSR set to: 0
 15933                           ;ENC424J600.c: 399: state->link = LINK_ESTABLISHED;
 15934  004F98  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15935  004F9C  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15936  004FA0  0E01               	movlw	1
 15937  004FA2  D005               	goto	L6
 15938  004FA4                     l195:
 15939                           
 15940                           ; BSR set to: 0
 15941                           ;ENC424J600.c: 401: state->link = NO_LINK;
 15942                           
 15943                           ; BSR set to: 0
 15944  004FA4  C080  FFD9         	movff	ethernetController_updateLinkStatus@state,fsr2l
 15945  004FA8  C081  FFDA         	movff	ethernetController_updateLinkStatus@state+1,fsr2h
 15946  004FAC  0E00               	movlw	0
 15947  004FAE                     L6:
 15948  004FAE  6EDF               	movwf	indf2,c
 15949                           
 15950                           ; BSR set to: 0
 15951                           ;ENC424J600.c: 402: }
 15952                           ;ENC424J600.c: 404: enc424j600_readPHYRegister(0x1F, &temp16);
 15953                           
 15954                           ; BSR set to: 0
 15955  004FB0  0E83               	movlw	low ethernetController_updateLinkStatus@temp16
 15956  004FB2  6F6E               	movwf	enc424j600_readPHYRegister@data& (0+255),b
 15957  004FB4  0E00               	movlw	high ethernetController_updateLinkStatus@temp16
 15958  004FB6  6F6F               	movwf	(enc424j600_readPHYRegister@data+1)& (0+255),b
 15959  004FB8  0E1F               	movlw	31
 15960  004FBA  ECB0  F021         	call	_enc424j600_readPHYRegister
 15961                           
 15962                           ;ENC424J600.c: 406: if (temp16 & (1 << 3)) {
 15963  004FBE  0100               	movlb	0	; () banked
 15964  004FC0  A783               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),3,b
 15965  004FC2  D008               	goto	l197
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;ENC424J600.c: 407: state->speed = HUNDRED_MBIT;
 15969  004FC4  EE20 F001          	lfsr	2,1
 15970  004FC8  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15971  004FCA  26D9               	addwf	fsr2l,f,c
 15972  004FCC  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15973  004FCE  22DA               	addwfc	fsr2h,f,c
 15974  004FD0  0E01               	movlw	1
 15975  004FD2  D007               	goto	L7
 15976  004FD4                     l197:
 15977                           
 15978                           ; BSR set to: 0
 15979                           ;ENC424J600.c: 409: state->speed = TEN_MBIT;
 15980                           
 15981                           ; BSR set to: 0
 15982  004FD4  EE20 F001          	lfsr	2,1
 15983  004FD8  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 15984  004FDA  26D9               	addwf	fsr2l,f,c
 15985  004FDC  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 15986  004FDE  22DA               	addwfc	fsr2h,f,c
 15987  004FE0  0E00               	movlw	0
 15988  004FE2                     L7:
 15989  004FE2  6EDF               	movwf	indf2,c
 15990                           
 15991                           ; BSR set to: 0
 15992                           ;ENC424J600.c: 410: }
 15993                           ;ENC424J600.c: 412: if (temp16 & (1 << 4)) {
 15994                           
 15995                           ; BSR set to: 0
 15996  004FE4  A983               	btfss	ethernetController_updateLinkStatus@temp16& (0+255),4,b
 15997  004FE6  D009               	goto	l199
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;ENC424J600.c: 413: state->duplex = FULL_DUPLEX;
 16001  004FE8  EE20 F002          	lfsr	2,2
 16002  004FEC  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 16003  004FEE  26D9               	addwf	fsr2l,f,c
 16004  004FF0  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 16005  004FF2  22DA               	addwfc	fsr2h,f,c
 16006  004FF4  0E01               	movlw	1
 16007  004FF6  6EDF               	movwf	indf2,c
 16008                           
 16009                           ;ENC424J600.c: 414: } else {
 16010  004FF8  0012               	return	
 16011  004FFA                     l199:
 16012                           
 16013                           ; BSR set to: 0
 16014                           ;ENC424J600.c: 415: state->duplex = HALF_DUPLEX;
 16015                           
 16016                           ; BSR set to: 0
 16017  004FFA  EE20 F002          	lfsr	2,2
 16018  004FFE  5180               	movf	ethernetController_updateLinkStatus@state& (0+255),w,b
 16019  005000  26D9               	addwf	fsr2l,f,c
 16020  005002  5181               	movf	(ethernetController_updateLinkStatus@state+1)& (0+255),w,b
 16021  005004  22DA               	addwfc	fsr2h,f,c
 16022  005006  0E00               	movlw	0
 16023  005008  6EDF               	movwf	indf2,c
 16024  00500A  0012               	return	
 16025  00500C                     __end_of_ethernetController_updateLinkStatus:
 16026                           	opt stack 0
 16027                           tblptru	equ	0xFF8
 16028                           tblptrh	equ	0xFF7
 16029                           tblptrl	equ	0xFF6
 16030                           tablat	equ	0xFF5
 16031                           prodh	equ	0xFF4
 16032                           prodl	equ	0xFF3
 16033                           intcon	equ	0xFF2
 16034                           intcon3	equ	0xFF0
 16035                           indf0	equ	0xFEF
 16036                           postinc0	equ	0xFEE
 16037                           plusw0	equ	0xFEB
 16038                           fsr0h	equ	0xFEA
 16039                           fsr0l	equ	0xFE9
 16040                           wreg	equ	0xFE8
 16041                           indf1	equ	0xFE7
 16042                           postinc1	equ	0xFE6
 16043                           postdec1	equ	0xFE5
 16044                           plusw1	equ	0xFE3
 16045                           fsr1h	equ	0xFE2
 16046                           fsr1l	equ	0xFE1
 16047                           indf2	equ	0xFDF
 16048                           postinc2	equ	0xFDE
 16049                           postdec2	equ	0xFDD
 16050                           plusw2	equ	0xFDB
 16051                           fsr2h	equ	0xFDA
 16052                           fsr2l	equ	0xFD9
 16053                           status	equ	0xFD8
 16054                           
 16055 ;; *************** function _enc424j600_readPHYRegister *****************
 16056 ;; Defined at:
 16057 ;;		line 538 in file "src/enc424j600/ENC424J600.c"
 16058 ;; Parameters:    Size  Location     Type
 16059 ;;  addr            1    wreg     unsigned char 
 16060 ;;  data            2   14[BANK0 ] PTR unsigned int 
 16061 ;;		 -> ethernetController_updateLinkStatus@temp16(2), 
 16062 ;; Auto vars:     Size  Location     Type
 16063 ;;  addr            1   22[BANK0 ] unsigned char 
 16064 ;;  timeoutCount    4   25[BANK0 ] unsigned long 
 16065 ;;  temp            1   31[BANK0 ] unsigned char 
 16066 ;;  highByte        1   30[BANK0 ] unsigned char 
 16067 ;;  lowByte         1   29[BANK0 ] unsigned char 
 16068 ;;  unusedBits      1   24[BANK0 ] unsigned char 
 16069 ;;  PHYaddress      1   23[BANK0 ] unsigned char 
 16070 ;; Return value:  Size  Location     Type
 16071 ;;                  1    wreg      void 
 16072 ;; Registers used:
 16073 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16074 ;; Tracked objects:
 16075 ;;		On entry : 0/0
 16076 ;;		On exit  : 0/0
 16077 ;;		Unchanged: 0/0
 16078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16079 ;;      Params:         0       2       0       0       0       0       0       0       0
 16080 ;;      Locals:         0      10       0       0       0       0       0       0       0
 16081 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16082 ;;      Totals:         0      18       0       0       0       0       0       0       0
 16083 ;;Total ram usage:       18 bytes
 16084 ;; Hardware stack levels used:    1
 16085 ;; Hardware stack levels required when called:    7
 16086 ;; This function calls:
 16087 ;;		_enc424j600_readControlRegisterUnbanked
 16088 ;;		_enc424j600_writeControlRegisterUnbanked
 16089 ;; This function is called by:
 16090 ;;		_ethernetController_updateLinkStatus
 16091 ;; This function uses a non-reentrant model
 16092 ;;
 16093                           
 16094                           	psect	text49
 16095  004360                     __ptext49:
 16096                           	opt stack 0
 16097  004360                     _enc424j600_readPHYRegister:
 16098                           	opt stack 21
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;incstack = 0
 16102                           ;enc424j600_readPHYRegister@addr stored from wreg
 16103  004360  0100               	movlb	0	; () banked
 16104  004362  6F76               	movwf	enc424j600_readPHYRegister@addr& (0+255),b
 16105                           
 16106                           ;ENC424J600.c: 540: uint8_t PHYaddress = addr & 0x1F;
 16107  004364  0100               	movlb	0	; () banked
 16108  004366  5176               	movf	enc424j600_readPHYRegister@addr& (0+255),w,b
 16109  004368  0B1F               	andlw	31
 16110  00436A  6F77               	movwf	enc424j600_readPHYRegister@PHYaddress& (0+255),b
 16111                           
 16112                           ; BSR set to: 0
 16113                           ;ENC424J600.c: 541: uint8_t unusedBits = 0x01;
 16114  00436C  0E01               	movlw	1
 16115  00436E  6F78               	movwf	enc424j600_readPHYRegister@unusedBits& (0+255),b
 16116                           
 16117                           ; BSR set to: 0
 16118                           ;ENC424J600.c: 542: uint8_t temp;
 16119                           ;ENC424J600.c: 543: uint8_t lowByte;
 16120                           ;ENC424J600.c: 544: uint8_t highByte;
 16121                           ;ENC424J600.c: 545: uint32_t timeoutCounter = 0;
 16122  004370  0E00               	movlw	0
 16123  004372  6F79               	movwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),b
 16124  004374  0E00               	movlw	0
 16125  004376  6F7A               	movwf	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),b
 16126  004378  0E00               	movlw	0
 16127  00437A  6F7B               	movwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),b
 16128  00437C  0E00               	movlw	0
 16129  00437E  6F7C               	movwf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),b
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;ENC424J600.c: 547: enc424j600_writeControlRegisterUnbanked(0x14 + 0x40, &PHYaddress);
 16133  004380  0E77               	movlw	low enc424j600_readPHYRegister@PHYaddress
 16134  004382  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 16135  004384  0E00               	movlw	high enc424j600_readPHYRegister@PHYaddress
 16136  004386  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16137  004388  0E54               	movlw	84
 16138  00438A  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 16139                           
 16140                           ;ENC424J600.c: 548: enc424j600_writeControlRegisterUnbanked(0x15 + 0x40, &unusedBits);
 16141  00438E  0E78               	movlw	low enc424j600_readPHYRegister@unusedBits
 16142  004390  0100               	movlb	0	; () banked
 16143  004392  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 16144  004394  0E00               	movlw	high enc424j600_readPHYRegister@unusedBits
 16145  004396  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16146  004398  0E55               	movlw	85
 16147  00439A  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 16148                           
 16149                           ;ENC424J600.c: 551: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16150  00439E  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 16151  0043A0  0100               	movlb	0	; () banked
 16152  0043A2  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16153  0043A4  0E00               	movlw	high enc424j600_readPHYRegister@temp
 16154  0043A6  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16155  0043A8  0E52               	movlw	82
 16156  0043AA  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16157                           
 16158                           ;ENC424J600.c: 552: temp |= 0x01;
 16159  0043AE  0100               	movlb	0	; () banked
 16160  0043B0  817F               	bsf	enc424j600_readPHYRegister@temp& (0+255),0,b
 16161                           
 16162                           ; BSR set to: 0
 16163                           ;ENC424J600.c: 553: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16164  0043B2  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 16165  0043B4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 16166  0043B6  0E00               	movlw	high enc424j600_readPHYRegister@temp
 16167  0043B8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16168  0043BA  0E52               	movlw	82
 16169  0043BC  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 16170                           
 16171                           ;ENC424J600.c: 555: _delay((unsigned long)((26)*(32000000UL/4000000.0)));
 16172  0043C0  0E45               	movlw	69
 16173  0043C2                     u14227:
 16174  0043C2  2EE8               	decfsz	wreg,f,c
 16175  0043C4  D7FE               	bra	u14227
 16176  0043C6  F000               	nop	
 16177  0043C8                     
 16178                           ;ENC424J600.c: 558: enc424j600_readControlRegisterUnbanked(0x0A + 0x60, &temp);
 16179  0043C8  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 16180  0043CA  0100               	movlb	0	; () banked
 16181  0043CC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16182  0043CE  0E00               	movlw	high enc424j600_readPHYRegister@temp
 16183  0043D0  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16184  0043D2  0E6A               	movlw	106
 16185  0043D4  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16186                           
 16187                           ;ENC424J600.c: 559: timeoutCounter++;
 16188  0043D8  0E01               	movlw	1
 16189  0043DA  0100               	movlb	0	; () banked
 16190  0043DC  2779               	addwf	enc424j600_readPHYRegister@timeoutCounter& (0+255),f,b
 16191  0043DE  0E00               	movlw	0
 16192  0043E0  237A               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),f,b
 16193  0043E2  237B               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),f,b
 16194  0043E4  237C               	addwfc	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),f,b
 16195                           
 16196                           ; BSR set to: 0
 16197                           ;ENC424J600.c: 560: } while ((temp & 0x01) && (timeoutCounter < 0xfff));
 16198  0043E6  A17F               	btfss	enc424j600_readPHYRegister@temp& (0+255),0,b
 16199  0043E8  D008               	goto	u12710
 16200                           
 16201                           ; BSR set to: 0
 16202  0043EA  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16203  0043EC  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16204  0043EE  E105               	bnz	l10677
 16205  0043F0  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 16206  0043F2  0E0F               	movlw	15
 16207  0043F4  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16208  0043F6  A0D8               	btfss	status,0,c
 16209  0043F8  D7E7               	goto	l258
 16210  0043FA                     u12710:
 16211  0043FA                     l10677:
 16212                           
 16213                           ; BSR set to: 0
 16214                           ;ENC424J600.c: 561: if (timeoutCounter >= 0xfff)
 16215  0043FA  517C               	movf	(enc424j600_readPHYRegister@timeoutCounter+3)& (0+255),w,b
 16216  0043FC  117B               	iorwf	(enc424j600_readPHYRegister@timeoutCounter+2)& (0+255),w,b
 16217  0043FE  E140               	bnz	l263
 16218  004400  2979               	incf	enc424j600_readPHYRegister@timeoutCounter& (0+255),w,b
 16219  004402  0E0F               	movlw	15
 16220  004404  597A               	subwfb	(enc424j600_readPHYRegister@timeoutCounter+1)& (0+255),w,b
 16221  004406  B0D8               	btfsc	status,0,c
 16222  004408  0012               	return	
 16223                           
 16224                           ; BSR set to: 0
 16225                           ;ENC424J600.c: 565: enc424j600_readControlRegisterUnbanked(0x12 + 0x40, &temp);
 16226                           
 16227                           ; BSR set to: 0
 16228                           
 16229                           ; BSR set to: 0
 16230                           ;ENC424J600.c: 562: return;
 16231  00440A  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 16232  00440C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16233  00440E  0E00               	movlw	high enc424j600_readPHYRegister@temp
 16234  004410  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16235  004412  0E52               	movlw	82
 16236  004414  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16237                           
 16238                           ;ENC424J600.c: 566: temp &= ~0x01;
 16239  004418  0100               	movlb	0	; () banked
 16240  00441A  917F               	bcf	enc424j600_readPHYRegister@temp& (0+255),0,b
 16241                           
 16242                           ; BSR set to: 0
 16243                           ;ENC424J600.c: 567: enc424j600_writeControlRegisterUnbanked(0x12 + 0x40, &temp);
 16244  00441C  0E7F               	movlw	low enc424j600_readPHYRegister@temp
 16245  00441E  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 16246  004420  0E00               	movlw	high enc424j600_readPHYRegister@temp
 16247  004422  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16248  004424  0E52               	movlw	82
 16249  004426  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 16250                           
 16251                           ;ENC424J600.c: 570: enc424j600_readControlRegisterUnbanked(0x08 + 0x60, &lowByte);
 16252  00442A  0E7D               	movlw	low enc424j600_readPHYRegister@lowByte
 16253  00442C  0100               	movlb	0	; () banked
 16254  00442E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16255  004430  0E00               	movlw	high enc424j600_readPHYRegister@lowByte
 16256  004432  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16257  004434  0E68               	movlw	104
 16258  004436  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16259                           
 16260                           ;ENC424J600.c: 571: enc424j600_readControlRegisterUnbanked(0x09 + 0x60, &highByte);
 16261  00443A  0E7E               	movlw	low enc424j600_readPHYRegister@highByte
 16262  00443C  0100               	movlb	0	; () banked
 16263  00443E  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16264  004440  0E00               	movlw	high enc424j600_readPHYRegister@highByte
 16265  004442  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16266  004444  0E69               	movlw	105
 16267  004446  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16268                           
 16269                           ;ENC424J600.c: 572: *data = (lowByte | ((highByte << 8)&0xff00));
 16270  00444A  0E00               	movlw	0
 16271  00444C  0100               	movlb	0	; () banked
 16272  00444E  6F70               	movwf	??_enc424j600_readPHYRegister& (0+255),b
 16273  004450  0EFF               	movlw	255
 16274  004452  6F71               	movwf	(??_enc424j600_readPHYRegister+1)& (0+255),b
 16275  004454  517E               	movf	enc424j600_readPHYRegister@highByte& (0+255),w,b
 16276  004456  6F73               	movwf	(??_enc424j600_readPHYRegister+3)& (0+255),b
 16277  004458  6B72               	clrf	(??_enc424j600_readPHYRegister+2)& (0+255),b
 16278  00445A  5170               	movf	??_enc424j600_readPHYRegister& (0+255),w,b
 16279  00445C  1772               	andwf	(??_enc424j600_readPHYRegister+2)& (0+255),f,b
 16280  00445E  5171               	movf	(??_enc424j600_readPHYRegister+1)& (0+255),w,b
 16281  004460  1773               	andwf	(??_enc424j600_readPHYRegister+3)& (0+255),f,b
 16282  004462  517D               	movf	enc424j600_readPHYRegister@lowByte& (0+255),w,b
 16283  004464  6F74               	movwf	(??_enc424j600_readPHYRegister+4)& (0+255),b
 16284  004466  6B75               	clrf	(??_enc424j600_readPHYRegister+5)& (0+255),b
 16285  004468  5172               	movf	(??_enc424j600_readPHYRegister+2)& (0+255),w,b
 16286  00446A  1374               	iorwf	(??_enc424j600_readPHYRegister+4)& (0+255),f,b
 16287  00446C  5173               	movf	(??_enc424j600_readPHYRegister+3)& (0+255),w,b
 16288  00446E  1375               	iorwf	(??_enc424j600_readPHYRegister+5)& (0+255),f,b
 16289  004470  C06E  FFD9         	movff	enc424j600_readPHYRegister@data,fsr2l
 16290  004474  C06F  FFDA         	movff	enc424j600_readPHYRegister@data+1,fsr2h
 16291  004478  C074  FFDE         	movff	??_enc424j600_readPHYRegister+4,postinc2
 16292  00447C  C075  FFDD         	movff	??_enc424j600_readPHYRegister+5,postdec2
 16293  004480                     l263:
 16294                           
 16295                           ; BSR set to: 0
 16296  004480  0012               	return		;funcret
 16297  004482                     __end_of_enc424j600_readPHYRegister:
 16298                           	opt stack 0
 16299                           tblptru	equ	0xFF8
 16300                           tblptrh	equ	0xFF7
 16301                           tblptrl	equ	0xFF6
 16302                           tablat	equ	0xFF5
 16303                           prodh	equ	0xFF4
 16304                           prodl	equ	0xFF3
 16305                           intcon	equ	0xFF2
 16306                           intcon3	equ	0xFF0
 16307                           indf0	equ	0xFEF
 16308                           postinc0	equ	0xFEE
 16309                           plusw0	equ	0xFEB
 16310                           fsr0h	equ	0xFEA
 16311                           fsr0l	equ	0xFE9
 16312                           wreg	equ	0xFE8
 16313                           indf1	equ	0xFE7
 16314                           postinc1	equ	0xFE6
 16315                           postdec1	equ	0xFE5
 16316                           plusw1	equ	0xFE3
 16317                           fsr1h	equ	0xFE2
 16318                           fsr1l	equ	0xFE1
 16319                           indf2	equ	0xFDF
 16320                           postinc2	equ	0xFDE
 16321                           postdec2	equ	0xFDD
 16322                           plusw2	equ	0xFDB
 16323                           fsr2h	equ	0xFDA
 16324                           fsr2l	equ	0xFD9
 16325                           status	equ	0xFD8
 16326                           
 16327 ;; *************** function _ethernetController_setLEDConfig *****************
 16328 ;; Defined at:
 16329 ;;		line 419 in file "src/enc424j600/ENC424J600.c"
 16330 ;; Parameters:    Size  Location     Type
 16331 ;;  LED             1    wreg     enum E5570
 16332 ;;  conf            1   14[BANK0 ] enum E5574
 16333 ;; Auto vars:     Size  Location     Type
 16334 ;;  LED             1   15[BANK0 ] enum E5570
 16335 ;;  data            1   16[BANK0 ] unsigned char 
 16336 ;; Return value:  Size  Location     Type
 16337 ;;                  1    wreg      void 
 16338 ;; Registers used:
 16339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16340 ;; Tracked objects:
 16341 ;;		On entry : 0/0
 16342 ;;		On exit  : 0/0
 16343 ;;		Unchanged: 0/0
 16344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16345 ;;      Params:         0       1       0       0       0       0       0       0       0
 16346 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16347 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16348 ;;      Totals:         0       3       0       0       0       0       0       0       0
 16349 ;;Total ram usage:        3 bytes
 16350 ;; Hardware stack levels used:    1
 16351 ;; Hardware stack levels required when called:    7
 16352 ;; This function calls:
 16353 ;;		_enc424j600_readControlRegisterUnbanked
 16354 ;;		_enc424j600_writeControlRegisterUnbanked
 16355 ;; This function is called by:
 16356 ;;		_handleStackBackgroundTasks
 16357 ;;		_main
 16358 ;; This function uses a non-reentrant model
 16359 ;;
 16360                           
 16361                           	psect	text50
 16362  004EF4                     __ptext50:
 16363                           	opt stack 0
 16364  004EF4                     _ethernetController_setLEDConfig:
 16365                           	opt stack 22
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;incstack = 0
 16369                           ;ethernetController_setLEDConfig@LED stored from wreg
 16370  004EF4  0100               	movlb	0	; () banked
 16371  004EF6  6F6F               	movwf	ethernetController_setLEDConfig@LED& (0+255),b
 16372                           
 16373                           ;ENC424J600.c: 420: uint8_t data;
 16374                           ;ENC424J600.c: 421: enc424j600_readControlRegisterUnbanked(0x15 + 0x60, &data);
 16375  004EF8  0E70               	movlw	low ethernetController_setLEDConfig@data
 16376  004EFA  0100               	movlb	0	; () banked
 16377  004EFC  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16378  004EFE  0E00               	movlw	high ethernetController_setLEDConfig@data
 16379  004F00  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16380  004F02  0E75               	movlw	117
 16381  004F04  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16382                           
 16383                           ;ENC424J600.c: 422: if (LED == LEDB) {
 16384  004F08  0100               	movlb	0	; () banked
 16385  004F0A  056F               	decf	ethernetController_setLEDConfig@LED& (0+255),w,b
 16386  004F0C  B4D8               	btfsc	status,2,c
 16387  004F0E  D00B               	goto	l205
 16388  004F10  D015               	goto	l204
 16389  004F12                     
 16390                           ; BSR set to: 0
 16391                           ;ENC424J600.c: 427: data &= ~0x0f;
 16392                           
 16393                           ; BSR set to: 0
 16394                           
 16395                           ;ENC424J600.c: 426: case LED_OFF:
 16396                           
 16397                           ; BSR set to: 0
 16398  004F12  0EF0               	movlw	240
 16399  004F14  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;ENC424J600.c: 428: data |= 0x01;
 16403  004F16  8170               	bsf	ethernetController_setLEDConfig@data& (0+255),0,b
 16404                           
 16405                           ;ENC424J600.c: 429: break;
 16406  004F18  D02C               	goto	l216
 16407  004F1A                     
 16408                           ; BSR set to: 0
 16409                           ;ENC424J600.c: 431: data &= ~0x0f;
 16410                           
 16411                           ; BSR set to: 0
 16412  004F1A  0EF0               	movlw	240
 16413  004F1C  D018               	goto	L8
 16414  004F1E                     
 16415                           ; BSR set to: 0
 16416                           ;ENC424J600.c: 434: data &= ~0x0f;
 16417                           
 16418                           ; BSR set to: 0
 16419  004F1E  0EF0               	movlw	240
 16420  004F20  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16421                           
 16422                           ;ENC424J600.c: 435: data |= 0x06;
 16423  004F22  0E06               	movlw	6
 16424  004F24  D019               	goto	L9
 16425  004F26                     l205:
 16426                           
 16427                           ; BSR set to: 0
 16428                           
 16429                           ; BSR set to: 0
 16430  004F26  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 16431                           
 16432                           ; Switch size 1, requested type "space"
 16433                           ; Number of cases is 3, Range of values is 0 to 2
 16434                           ; switch strategies available:
 16435                           ; Name         Instructions Cycles
 16436                           ; simple_byte           10     6 (average)
 16437                           ;	Chosen strategy is simple_byte
 16438  004F28  0A00               	xorlw	0	; case 0
 16439  004F2A  B4D8               	btfsc	status,2,c
 16440  004F2C  D7F6               	goto	l209
 16441  004F2E  0A01               	xorlw	1	; case 1
 16442  004F30  B4D8               	btfsc	status,2,c
 16443  004F32  D7EF               	goto	l206
 16444  004F34  0A03               	xorlw	3	; case 2
 16445  004F36  B4D8               	btfsc	status,2,c
 16446  004F38  D7F2               	goto	l210
 16447  004F3A  D7EB               	goto	l206
 16448  004F3C                     l204:
 16449                           
 16450                           ; BSR set to: 0
 16451                           
 16452                           ; BSR set to: 0
 16453  004F3C  516F               	movf	ethernetController_setLEDConfig@LED& (0+255),w,b
 16454  004F3E  B4D8               	btfsc	status,2,c
 16455  004F40  D00D               	goto	l213
 16456  004F42  D017               	goto	l216
 16457  004F44                     
 16458                           ; BSR set to: 0
 16459                           ;ENC424J600.c: 442: data &= ~(0x0f << 4);
 16460                           
 16461                           ; BSR set to: 0
 16462                           
 16463                           ;ENC424J600.c: 441: case LED_OFF:
 16464                           
 16465                           ; BSR set to: 0
 16466  004F44  0E0F               	movlw	15
 16467  004F46  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16468                           
 16469                           ; BSR set to: 0
 16470                           ;ENC424J600.c: 443: data |= (0x01 << 4);
 16471  004F48  8970               	bsf	ethernetController_setLEDConfig@data& (0+255),4,b
 16472                           
 16473                           ;ENC424J600.c: 444: break;
 16474  004F4A  D013               	goto	l216
 16475  004F4C                     
 16476                           ; BSR set to: 0
 16477                           ;ENC424J600.c: 446: data &= ~(0x0f << 4);
 16478                           
 16479                           ; BSR set to: 0
 16480  004F4C  0E0F               	movlw	15
 16481  004F4E                     L8:
 16482  004F4E  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16483                           
 16484                           ;ENC424J600.c: 447: break;
 16485  004F50  D010               	goto	l216
 16486  004F52                     
 16487                           ; BSR set to: 0
 16488                           ;ENC424J600.c: 449: data &= ~(0x0f << 4);
 16489                           
 16490                           ; BSR set to: 0
 16491  004F52  0E0F               	movlw	15
 16492  004F54  1770               	andwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16493                           
 16494                           ;ENC424J600.c: 450: data |= (0x06 << 4);
 16495  004F56  0E60               	movlw	96
 16496  004F58                     L9:
 16497  004F58  1370               	iorwf	ethernetController_setLEDConfig@data& (0+255),f,b
 16498                           
 16499                           ; BSR set to: 0
 16500                           ;ENC424J600.c: 452: }
 16501                           
 16502                           ;ENC424J600.c: 451: break;
 16503  004F5A  D00B               	goto	l216
 16504  004F5C                     l213:
 16505                           
 16506                           ; BSR set to: 0
 16507                           
 16508                           ; BSR set to: 0
 16509  004F5C  516E               	movf	ethernetController_setLEDConfig@conf& (0+255),w,b
 16510                           
 16511                           ; Switch size 1, requested type "space"
 16512                           ; Number of cases is 3, Range of values is 0 to 2
 16513                           ; switch strategies available:
 16514                           ; Name         Instructions Cycles
 16515                           ; simple_byte           10     6 (average)
 16516                           ;	Chosen strategy is simple_byte
 16517  004F5E  0A00               	xorlw	0	; case 0
 16518  004F60  B4D8               	btfsc	status,2,c
 16519  004F62  D7F4               	goto	l217
 16520  004F64  0A01               	xorlw	1	; case 1
 16521  004F66  B4D8               	btfsc	status,2,c
 16522  004F68  D7ED               	goto	l214
 16523  004F6A  0A03               	xorlw	3	; case 2
 16524  004F6C  B4D8               	btfsc	status,2,c
 16525  004F6E  D7F1               	goto	l218
 16526  004F70  D7E9               	goto	l214
 16527  004F72                     l216:
 16528                           
 16529                           ; BSR set to: 0
 16530                           ;ENC424J600.c: 453: }
 16531                           ;ENC424J600.c: 454: enc424j600_writeControlRegisterUnbanked(0x15 + 0x60, &data);
 16532                           
 16533                           ; BSR set to: 0
 16534                           
 16535                           ; BSR set to: 0
 16536                           
 16537                           ; BSR set to: 0
 16538  004F72  0E70               	movlw	low ethernetController_setLEDConfig@data
 16539  004F74  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 16540  004F76  0E00               	movlw	high ethernetController_setLEDConfig@data
 16541  004F78  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 16542  004F7A  0E75               	movlw	117
 16543  004F7C  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 16544  004F80  0012               	return		;funcret
 16545  004F82                     __end_of_ethernetController_setLEDConfig:
 16546                           	opt stack 0
 16547                           tblptru	equ	0xFF8
 16548                           tblptrh	equ	0xFF7
 16549                           tblptrl	equ	0xFF6
 16550                           tablat	equ	0xFF5
 16551                           prodh	equ	0xFF4
 16552                           prodl	equ	0xFF3
 16553                           intcon	equ	0xFF2
 16554                           intcon3	equ	0xFF0
 16555                           indf0	equ	0xFEF
 16556                           postinc0	equ	0xFEE
 16557                           plusw0	equ	0xFEB
 16558                           fsr0h	equ	0xFEA
 16559                           fsr0l	equ	0xFE9
 16560                           wreg	equ	0xFE8
 16561                           indf1	equ	0xFE7
 16562                           postinc1	equ	0xFE6
 16563                           postdec1	equ	0xFE5
 16564                           plusw1	equ	0xFE3
 16565                           fsr1h	equ	0xFE2
 16566                           fsr1l	equ	0xFE1
 16567                           indf2	equ	0xFDF
 16568                           postinc2	equ	0xFDE
 16569                           postdec2	equ	0xFDD
 16570                           plusw2	equ	0xFDB
 16571                           fsr2h	equ	0xFDA
 16572                           fsr2l	equ	0xFD9
 16573                           status	equ	0xFD8
 16574                           
 16575 ;; *************** function _ethernetController_pollInterruptFlags *****************
 16576 ;; Defined at:
 16577 ;;		line 312 in file "src/enc424j600/ENC424J600.c"
 16578 ;; Parameters:    Size  Location     Type
 16579 ;;		None
 16580 ;; Auto vars:     Size  Location     Type
 16581 ;;  reg             2   32[BANK0 ] unsigned int 
 16582 ;;  flags           2   30[BANK0 ] struct interruptFlags
 16583 ;; Return value:  Size  Location     Type
 16584 ;;                  2   24[BANK0 ] struct interruptFlags
 16585 ;; Registers used:
 16586 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16587 ;; Tracked objects:
 16588 ;;		On entry : 0/0
 16589 ;;		On exit  : 0/0
 16590 ;;		Unchanged: 0/0
 16591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16592 ;;      Params:         0       2       0       0       0       0       0       0       0
 16593 ;;      Locals:         0       4       0       0       0       0       0       0       0
 16594 ;;      Temps:          0       4       0       0       0       0       0       0       0
 16595 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16596 ;;Total ram usage:       10 bytes
 16597 ;; Hardware stack levels used:    1
 16598 ;; Hardware stack levels required when called:    8
 16599 ;; This function calls:
 16600 ;;		_enc424j600_getInterruptFlags
 16601 ;; This function is called by:
 16602 ;;		_handleStackBackgroundTasks
 16603 ;; This function uses a non-reentrant model
 16604 ;;
 16605                           
 16606                           	psect	text51
 16607  003D26                     __ptext51:
 16608                           	opt stack 0
 16609  003D26                     _ethernetController_pollInterruptFlags:
 16610                           	opt stack 21
 16611                           
 16612                           ;ENC424J600.c: 313: interruptFlags_t flags;
 16613                           ;ENC424J600.c: 314: uint16_t reg = enc424j600_getInterruptFlags();
 16614                           
 16615                           ;incstack = 0
 16616  003D26  EC60  F02D         	call	_enc424j600_getInterruptFlags	;wreg free
 16617  003D2A  C06E  F080         	movff	?_enc424j600_getInterruptFlags,ethernetController_pollInterruptFlags@reg
 16618  003D2E  C06F  F081         	movff	?_enc424j600_getInterruptFlags+1,ethernetController_pollInterruptFlags@reg+1
 16619                           
 16620                           ;ENC424J600.c: 315: flags.MODEXIF = (reg & (1 << MODEXIF)) != 0 ? 1 : 0;
 16621  003D32  0100               	movlb	0	; () banked
 16622  003D34  AD81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),6,b
 16623  003D36  D003               	goto	u13170
 16624  003D38  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16625  003D3A  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16626  003D3C  D002               	goto	u13188
 16627  003D3E                     u13170:
 16628  003D3E  0100               	movlb	0	; () banked
 16629  003D40  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16630  003D42                     u13188:
 16631  003D42  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16632  003D44  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16633  003D46  0BFE               	andlw	-2
 16634  003D48  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16635  003D4A  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16636                           
 16637                           ; BSR set to: 0
 16638                           ;ENC424J600.c: 316: flags.HASHIF = (reg & (1 << HASHIF)) != 0 ? 1 : 0;
 16639  003D4C  AB81               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),5,b
 16640  003D4E  D003               	goto	u13190
 16641  003D50  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16642  003D52  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16643  003D54  D002               	goto	u13208
 16644  003D56                     u13190:
 16645  003D56  0100               	movlb	0	; () banked
 16646  003D58  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16647  003D5A                     u13208:
 16648  003D5A  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16649  003D5C  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16650  003D5E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16651  003D60  0BFD               	andlw	-3
 16652  003D62  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16653  003D64  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;ENC424J600.c: 317: flags.AESIF = (reg & (1 << AESIF)) != 0 ? 1 : 0;
 16657  003D66  A981               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),4,b
 16658  003D68  D003               	goto	u13210
 16659  003D6A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16660  003D6C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16661  003D6E  D002               	goto	u13228
 16662  003D70                     u13210:
 16663  003D70  0100               	movlb	0	; () banked
 16664  003D72  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16665  003D74                     u13228:
 16666  003D74  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16667  003D76  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16668  003D78  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16669  003D7A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16670  003D7C  0BFB               	andlw	-5
 16671  003D7E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16672  003D80  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16673                           
 16674                           ; BSR set to: 0
 16675                           ;ENC424J600.c: 318: flags.LINKIF = (reg & (1 << LINKIF)) != 0 ? 1 : 0;
 16676  003D82  A781               	btfss	(ethernetController_pollInterruptFlags@reg+1)& (0+255),3,b
 16677  003D84  D003               	goto	u13230
 16678  003D86  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16679  003D88  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16680  003D8A  D002               	goto	u13248
 16681  003D8C                     u13230:
 16682  003D8C  0100               	movlb	0	; () banked
 16683  003D8E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16684  003D90                     u13248:
 16685  003D90  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16686  003D92  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16687  003D94  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16688  003D96  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16689  003D98  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16690  003D9A  0BF7               	andlw	-9
 16691  003D9C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16692  003D9E  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;ENC424J600.c: 320: flags.PKTIF = (reg & (1 << PKTIF)) != 0 ? 1 : 0;
 16696  003DA0  AD80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),6,b
 16697  003DA2  D003               	goto	u13250
 16698  003DA4  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16699  003DA6  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16700  003DA8  D002               	goto	u13268
 16701  003DAA                     u13250:
 16702  003DAA  0100               	movlb	0	; () banked
 16703  003DAC  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16704  003DAE                     u13268:
 16705  003DAE  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16706  003DB0  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16707  003DB2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16708  003DB4  0BEF               	andlw	-17
 16709  003DB6  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16710  003DB8  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16711                           
 16712                           ; BSR set to: 0
 16713                           ;ENC424J600.c: 321: flags.DMAIF = (reg & (1 << DMAIF)) != 0 ? 1 : 0;
 16714  003DBA  AB80               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),5,b
 16715  003DBC  D003               	goto	u13270
 16716  003DBE  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16717  003DC0  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16718  003DC2  D002               	goto	u13288
 16719  003DC4                     u13270:
 16720  003DC4  0100               	movlb	0	; () banked
 16721  003DC6  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16722  003DC8                     u13288:
 16723  003DC8  3B7A               	swapf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16724  003DCA  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16725  003DCC  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16726  003DCE  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16727  003DD0  0BDF               	andlw	-33
 16728  003DD2  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16729  003DD4  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16730                           
 16731                           ; BSR set to: 0
 16732                           ;ENC424J600.c: 323: flags.TXIF = (reg & (1 << TXIF)) != 0 ? 1 : 0;
 16733  003DD6  A89E               	btfss	3998,4,c	;volatile
 16734  003DD8  D003               	goto	u13290
 16735  003DDA  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16736  003DDC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16737  003DDE  D002               	goto	u13308
 16738  003DE0                     u13290:
 16739  003DE0  0100               	movlb	0	; () banked
 16740  003DE2  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16741  003DE4                     u13308:
 16742  003DE4  0E01               	movlw	1
 16743  003DE6  6F7B               	movwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),b
 16744  003DE8  0E00               	movlw	0
 16745  003DEA  6F7C               	movwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),b
 16746  003DEC  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16747  003DEE  D003               	goto	u13314
 16748  003DF0                     u13315:
 16749  003DF0  90D8               	bcf	status,0,c
 16750  003DF2  377B               	rlcf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 16751  003DF4  377C               	rlcf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 16752  003DF6                     u13314:
 16753  003DF6  2F7A               	decfsz	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16754  003DF8  D7FB               	goto	u13315
 16755  003DFA  0100               	movlb	0	; () banked
 16756  003DFC  5180               	movf	ethernetController_pollInterruptFlags@reg& (0+255),w,b
 16757  003DFE  177B               	andwf	(??_ethernetController_pollInterruptFlags+1)& (0+255),f,b
 16758  003E00  5181               	movf	(ethernetController_pollInterruptFlags@reg+1)& (0+255),w,b
 16759  003E02  177C               	andwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),f,b
 16760  003E04  517B               	movf	(??_ethernetController_pollInterruptFlags+1)& (0+255),w,b
 16761  003E06  117C               	iorwf	(??_ethernetController_pollInterruptFlags+2)& (0+255),w,b
 16762  003E08  B4D8               	btfsc	status,2,c
 16763  003E0A  D003               	goto	u13320
 16764  003E0C  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 16765  003E0E  2B7D               	incf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 16766  003E10  D002               	goto	u13338
 16767  003E12                     u13320:
 16768  003E12  0100               	movlb	0	; () banked
 16769  003E14  6B7D               	clrf	(??_ethernetController_pollInterruptFlags+3)& (0+255),b
 16770  003E16                     u13338:
 16771  003E16  3B7D               	swapf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 16772  003E18  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 16773  003E1A  477D               	rlncf	(??_ethernetController_pollInterruptFlags+3)& (0+255),f,b
 16774  003E1C  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16775  003E1E  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 16776  003E20  0BBF               	andlw	-65
 16777  003E22  197D               	xorwf	(??_ethernetController_pollInterruptFlags+3)& (0+255),w,b
 16778  003E24  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16779                           
 16780                           ; BSR set to: 0
 16781                           ;ENC424J600.c: 324: flags.TXABTIF = (reg & (1 << TXABTIF)) != 0 ? 1 : 0;
 16782  003E26  A580               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),2,b
 16783  003E28  D003               	goto	u13340
 16784  003E2A  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16785  003E2C  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16786  003E2E  D002               	goto	u13358
 16787  003E30                     u13340:
 16788  003E30  0100               	movlb	0	; () banked
 16789  003E32  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16790  003E34                     u13358:
 16791  003E34  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16792  003E36  337A               	rrcf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16793  003E38  517E               	movf	ethernetController_pollInterruptFlags@flags& (0+255),w,b
 16794  003E3A  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16795  003E3C  0B7F               	andlw	-129
 16796  003E3E  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16797  003E40  6F7E               	movwf	ethernetController_pollInterruptFlags@flags& (0+255),b
 16798                           
 16799                           ; BSR set to: 0
 16800                           ;ENC424J600.c: 325: flags.RXABTIF = (reg & (1 << RXABTIF)) != 0 ? 1 : 0;
 16801  003E42  A380               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),1,b
 16802  003E44  D003               	goto	u13360
 16803  003E46  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16804  003E48  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16805  003E4A  D002               	goto	u13378
 16806  003E4C                     u13360:
 16807  003E4C  0100               	movlb	0	; () banked
 16808  003E4E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16809  003E50                     u13378:
 16810  003E50  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16811  003E52  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16812  003E54  0BFE               	andlw	-2
 16813  003E56  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16814  003E58  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16815                           
 16816                           ; BSR set to: 0
 16817                           ;ENC424J600.c: 326: flags.PCFULIF = (reg & (1 << PCFULIF)) != 0 ? 1 : 0;
 16818  003E5A  A180               	btfss	ethernetController_pollInterruptFlags@reg& (0+255),0,b
 16819  003E5C  D003               	goto	u13380
 16820  003E5E  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16821  003E60  2B7A               	incf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16822  003E62  D002               	goto	u13398
 16823  003E64                     u13380:
 16824  003E64  0100               	movlb	0	; () banked
 16825  003E66  6B7A               	clrf	??_ethernetController_pollInterruptFlags& (0+255),b
 16826  003E68                     u13398:
 16827  003E68  477A               	rlncf	??_ethernetController_pollInterruptFlags& (0+255),f,b
 16828  003E6A  517F               	movf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),w,b
 16829  003E6C  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16830  003E6E  0BFD               	andlw	-3
 16831  003E70  197A               	xorwf	??_ethernetController_pollInterruptFlags& (0+255),w,b
 16832  003E72  6F7F               	movwf	(ethernetController_pollInterruptFlags@flags+1)& (0+255),b
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;ENC424J600.c: 327: return flags;
 16836  003E74  C07E  F078         	movff	ethernetController_pollInterruptFlags@flags,?_ethernetController_pollInterruptFla
      +                          gs
 16837  003E78  C07F  F079         	movff	ethernetController_pollInterruptFlags@flags+1,?_ethernetController_pollInterruptF
      +                          lags+1
 16838  003E7C  0012               	return	
 16839  003E7E                     __end_of_ethernetController_pollInterruptFlags:
 16840                           	opt stack 0
 16841                           tblptru	equ	0xFF8
 16842                           tblptrh	equ	0xFF7
 16843                           tblptrl	equ	0xFF6
 16844                           tablat	equ	0xFF5
 16845                           prodh	equ	0xFF4
 16846                           prodl	equ	0xFF3
 16847                           intcon	equ	0xFF2
 16848                           intcon3	equ	0xFF0
 16849                           indf0	equ	0xFEF
 16850                           postinc0	equ	0xFEE
 16851                           plusw0	equ	0xFEB
 16852                           fsr0h	equ	0xFEA
 16853                           fsr0l	equ	0xFE9
 16854                           wreg	equ	0xFE8
 16855                           indf1	equ	0xFE7
 16856                           postinc1	equ	0xFE6
 16857                           postdec1	equ	0xFE5
 16858                           plusw1	equ	0xFE3
 16859                           fsr1h	equ	0xFE2
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           plusw2	equ	0xFDB
 16865                           fsr2h	equ	0xFDA
 16866                           fsr2l	equ	0xFD9
 16867                           status	equ	0xFD8
 16868                           
 16869 ;; *************** function _enc424j600_getInterruptFlags *****************
 16870 ;; Defined at:
 16871 ;;		line 696 in file "src/enc424j600/ENC424J600.c"
 16872 ;; Parameters:    Size  Location     Type
 16873 ;;		None
 16874 ;; Auto vars:     Size  Location     Type
 16875 ;;  high            1   23[BANK0 ] unsigned char 
 16876 ;;  low             1   22[BANK0 ] unsigned char 
 16877 ;; Return value:  Size  Location     Type
 16878 ;;                  2   14[BANK0 ] unsigned int 
 16879 ;; Registers used:
 16880 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16881 ;; Tracked objects:
 16882 ;;		On entry : 0/0
 16883 ;;		On exit  : 0/0
 16884 ;;		Unchanged: 0/0
 16885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16886 ;;      Params:         0       2       0       0       0       0       0       0       0
 16887 ;;      Locals:         0       2       0       0       0       0       0       0       0
 16888 ;;      Temps:          0       6       0       0       0       0       0       0       0
 16889 ;;      Totals:         0      10       0       0       0       0       0       0       0
 16890 ;;Total ram usage:       10 bytes
 16891 ;; Hardware stack levels used:    1
 16892 ;; Hardware stack levels required when called:    7
 16893 ;; This function calls:
 16894 ;;		_enc424j600_readControlRegisterUnbanked
 16895 ;; This function is called by:
 16896 ;;		_ethernetController_pollInterruptFlags
 16897 ;; This function uses a non-reentrant model
 16898 ;;
 16899                           
 16900                           	psect	text52
 16901  005AC0                     __ptext52:
 16902                           	opt stack 0
 16903  005AC0                     _enc424j600_getInterruptFlags:
 16904                           	opt stack 21
 16905                           
 16906                           ;ENC424J600.c: 697: uint8_t low, high;
 16907                           ;ENC424J600.c: 698: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &low);
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;incstack = 0
 16911  005AC0  0E76               	movlw	low enc424j600_getInterruptFlags@low
 16912  005AC2  0100               	movlb	0	; () banked
 16913  005AC4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16914  005AC6  0E00               	movlw	high enc424j600_getInterruptFlags@low
 16915  005AC8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16916  005ACA  0E1C               	movlw	28
 16917  005ACC  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16918                           
 16919                           ;ENC424J600.c: 699: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &high);
 16920  005AD0  0E77               	movlw	low enc424j600_getInterruptFlags@high
 16921  005AD2  0100               	movlb	0	; () banked
 16922  005AD4  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 16923  005AD6  0E00               	movlw	high enc424j600_getInterruptFlags@high
 16924  005AD8  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 16925  005ADA  0E1D               	movlw	29
 16926  005ADC  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 16927                           
 16928                           ;ENC424J600.c: 700: return ( (((uint16_t) low)&0x00ff) | (((uint16_t) high << 8)&0xff00)
      +                          );
 16929  005AE0  0E00               	movlw	0
 16930  005AE2  0100               	movlb	0	; () banked
 16931  005AE4  6F70               	movwf	??_enc424j600_getInterruptFlags& (0+255),b
 16932  005AE6  0EFF               	movlw	255
 16933  005AE8  6F71               	movwf	(??_enc424j600_getInterruptFlags+1)& (0+255),b
 16934  005AEA  5177               	movf	enc424j600_getInterruptFlags@high& (0+255),w,b
 16935  005AEC  6F73               	movwf	(??_enc424j600_getInterruptFlags+3)& (0+255),b
 16936  005AEE  6B72               	clrf	(??_enc424j600_getInterruptFlags+2)& (0+255),b
 16937  005AF0  5170               	movf	??_enc424j600_getInterruptFlags& (0+255),w,b
 16938  005AF2  1772               	andwf	(??_enc424j600_getInterruptFlags+2)& (0+255),f,b
 16939  005AF4  5171               	movf	(??_enc424j600_getInterruptFlags+1)& (0+255),w,b
 16940  005AF6  1773               	andwf	(??_enc424j600_getInterruptFlags+3)& (0+255),f,b
 16941  005AF8  5176               	movf	enc424j600_getInterruptFlags@low& (0+255),w,b
 16942  005AFA  6F74               	movwf	(??_enc424j600_getInterruptFlags+4)& (0+255),b
 16943  005AFC  6B75               	clrf	(??_enc424j600_getInterruptFlags+5)& (0+255),b
 16944  005AFE  5172               	movf	(??_enc424j600_getInterruptFlags+2)& (0+255),w,b
 16945  005B00  1174               	iorwf	(??_enc424j600_getInterruptFlags+4)& (0+255),w,b
 16946  005B02  6F6E               	movwf	?_enc424j600_getInterruptFlags& (0+255),b
 16947  005B04  5173               	movf	(??_enc424j600_getInterruptFlags+3)& (0+255),w,b
 16948  005B06  1175               	iorwf	(??_enc424j600_getInterruptFlags+5)& (0+255),w,b
 16949  005B08  6F6F               	movwf	(?_enc424j600_getInterruptFlags+1)& (0+255),b
 16950  005B0A  0012               	return	
 16951  005B0C                     __end_of_enc424j600_getInterruptFlags:
 16952                           	opt stack 0
 16953                           tblptru	equ	0xFF8
 16954                           tblptrh	equ	0xFF7
 16955                           tblptrl	equ	0xFF6
 16956                           tablat	equ	0xFF5
 16957                           prodh	equ	0xFF4
 16958                           prodl	equ	0xFF3
 16959                           intcon	equ	0xFF2
 16960                           intcon3	equ	0xFF0
 16961                           indf0	equ	0xFEF
 16962                           postinc0	equ	0xFEE
 16963                           plusw0	equ	0xFEB
 16964                           fsr0h	equ	0xFEA
 16965                           fsr0l	equ	0xFE9
 16966                           wreg	equ	0xFE8
 16967                           indf1	equ	0xFE7
 16968                           postinc1	equ	0xFE6
 16969                           postdec1	equ	0xFE5
 16970                           plusw1	equ	0xFE3
 16971                           fsr1h	equ	0xFE2
 16972                           fsr1l	equ	0xFE1
 16973                           indf2	equ	0xFDF
 16974                           postinc2	equ	0xFDE
 16975                           postdec2	equ	0xFDD
 16976                           plusw2	equ	0xFDB
 16977                           fsr2h	equ	0xFDA
 16978                           fsr2l	equ	0xFD9
 16979                           status	equ	0xFD8
 16980                           
 16981 ;; *************** function _ethernetController_newPacketAvailable *****************
 16982 ;; Defined at:
 16983 ;;		line 390 in file "src/enc424j600/ENC424J600.c"
 16984 ;; Parameters:    Size  Location     Type
 16985 ;;		None
 16986 ;; Auto vars:     Size  Location     Type
 16987 ;;		None
 16988 ;; Return value:  Size  Location     Type
 16989 ;;                  1    wreg      unsigned char 
 16990 ;; Registers used:
 16991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16992 ;; Tracked objects:
 16993 ;;		On entry : 0/0
 16994 ;;		On exit  : 0/0
 16995 ;;		Unchanged: 0/0
 16996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16997 ;;      Params:         0       0       0       0       0       0       0       0       0
 16998 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16999 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17000 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17001 ;;Total ram usage:        0 bytes
 17002 ;; Hardware stack levels used:    1
 17003 ;; Hardware stack levels required when called:    8
 17004 ;; This function calls:
 17005 ;;		_enc424j600_getPacketCount
 17006 ;; This function is called by:
 17007 ;;		_handleStackBackgroundTasks
 17008 ;; This function uses a non-reentrant model
 17009 ;;
 17010                           
 17011                           	psect	text53
 17012  0061DE                     __ptext53:
 17013                           	opt stack 0
 17014  0061DE                     _ethernetController_newPacketAvailable:
 17015                           	opt stack 21
 17016                           
 17017                           ;ENC424J600.c: 391: return (unsigned) (enc424j600_getPacketCount() != 0);
 17018                           
 17019                           ; BSR set to: 0
 17020                           ;incstack = 0
 17021  0061DE  ECB9  F030         	call	_enc424j600_getPacketCount	;wreg free
 17022  0061E2  0900               	iorlw	0
 17023  0061E4  B4D8               	btfsc	status,2,c
 17024  0061E6  D002               	goto	u13400
 17025  0061E8  0E01               	movlw	1
 17026  0061EA  0012               	return	
 17027  0061EC                     u13400:
 17028  0061EC  0E00               	movlw	0
 17029  0061EE  0012               	return	
 17030  0061F0                     __end_of_ethernetController_newPacketAvailable:
 17031                           	opt stack 0
 17032                           tblptru	equ	0xFF8
 17033                           tblptrh	equ	0xFF7
 17034                           tblptrl	equ	0xFF6
 17035                           tablat	equ	0xFF5
 17036                           prodh	equ	0xFF4
 17037                           prodl	equ	0xFF3
 17038                           intcon	equ	0xFF2
 17039                           intcon3	equ	0xFF0
 17040                           indf0	equ	0xFEF
 17041                           postinc0	equ	0xFEE
 17042                           plusw0	equ	0xFEB
 17043                           fsr0h	equ	0xFEA
 17044                           fsr0l	equ	0xFE9
 17045                           wreg	equ	0xFE8
 17046                           indf1	equ	0xFE7
 17047                           postinc1	equ	0xFE6
 17048                           postdec1	equ	0xFE5
 17049                           plusw1	equ	0xFE3
 17050                           fsr1h	equ	0xFE2
 17051                           fsr1l	equ	0xFE1
 17052                           indf2	equ	0xFDF
 17053                           postinc2	equ	0xFDE
 17054                           postdec2	equ	0xFDD
 17055                           plusw2	equ	0xFDB
 17056                           fsr2h	equ	0xFDA
 17057                           fsr2l	equ	0xFD9
 17058                           status	equ	0xFD8
 17059                           
 17060 ;; *************** function _ethernetController_init *****************
 17061 ;; Defined at:
 17062 ;;		line 34 in file "src/enc424j600/ENC424J600.c"
 17063 ;; Parameters:    Size  Location     Type
 17064 ;;		None
 17065 ;; Auto vars:     Size  Location     Type
 17066 ;;  err             3   29[BANK0 ] struct error
 17067 ;; Return value:  Size  Location     Type
 17068 ;;                  3   26[BANK0 ] struct error
 17069 ;; Registers used:
 17070 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17071 ;; Tracked objects:
 17072 ;;		On entry : 0/0
 17073 ;;		On exit  : 0/0
 17074 ;;		Unchanged: 0/0
 17075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17076 ;;      Params:         0       3       0       0       0       0       0       0       0
 17077 ;;      Locals:         0       3       0       0       0       0       0       0       0
 17078 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17079 ;;      Totals:         0       6       0       0       0       0       0       0       0
 17080 ;;Total ram usage:        6 bytes
 17081 ;; Hardware stack levels used:    1
 17082 ;; Hardware stack levels required when called:    8
 17083 ;; This function calls:
 17084 ;;		_enc424j600_enableAutoMACInsertion
 17085 ;;		_enc424j600_enableReception
 17086 ;;		_enc424j600_initSPI
 17087 ;;		_enc424j600_setNextPacketPointer
 17088 ;;		_enc424j600_setRXBufferStartAddress
 17089 ;;		_enc424j600_setRXTailPointer
 17090 ;;		_ethernetController_checkDeviceId
 17091 ;;		_ethernetController_softReset
 17092 ;; This function is called by:
 17093 ;;		_handleStackBackgroundTasks
 17094 ;;		_main
 17095 ;; This function uses a non-reentrant model
 17096 ;;
 17097                           
 17098                           	psect	text54
 17099  004DB6                     __ptext54:
 17100                           	opt stack 0
 17101  004DB6                     _ethernetController_init:
 17102                           	opt stack 21
 17103                           
 17104                           ;ENC424J600.c: 35: error_t err;
 17105                           ;ENC424J600.c: 36: enc424j600_initSPI();
 17106                           
 17107                           ;incstack = 0
 17108  004DB6  EC9E  F030         	call	_enc424j600_initSPI	;wreg free
 17109                           
 17110                           ;ENC424J600.c: 37: err = ethernetController_softReset();
 17111  004DBA  ECD0  F022         	call	_ethernetController_softReset	;wreg free
 17112  004DBE  C06E  F07D         	movff	?_ethernetController_softReset,ethernetController_init@err
 17113  004DC2  C06F  F07E         	movff	?_ethernetController_softReset+1,ethernetController_init@err+1
 17114  004DC6  C070  F07F         	movff	?_ethernetController_softReset+2,ethernetController_init@err+2
 17115                           
 17116                           ;ENC424J600.c: 38: if (err.code != (uint16_t)0) {
 17117  004DCA  0100               	movlb	0	; () banked
 17118  004DCC  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 17119  004DCE  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 17120  004DD0  B4D8               	btfsc	status,2,c
 17121  004DD2  D007               	goto	l75
 17122                           
 17123                           ; BSR set to: 0
 17124                           ;ENC424J600.c: 39: return err;
 17125  004DD4  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 17126  004DD8  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17127  004DDC  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17128  004DE0  0012               	return	
 17129  004DE2                     l75:
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;ENC424J600.c: 40: }
 17133                           ;ENC424J600.c: 41: err = ethernetController_checkDeviceId();
 17134                           
 17135                           ; BSR set to: 0
 17136  004DE2  EC12  F02D         	call	_ethernetController_checkDeviceId	;wreg free
 17137  004DE6  C06E  F07D         	movff	?_ethernetController_checkDeviceId,ethernetController_init@err
 17138  004DEA  C06F  F07E         	movff	?_ethernetController_checkDeviceId+1,ethernetController_init@err+1
 17139  004DEE  C070  F07F         	movff	?_ethernetController_checkDeviceId+2,ethernetController_init@err+2
 17140                           
 17141                           ;ENC424J600.c: 42: if (err.code != (uint16_t)0) {
 17142  004DF2  0100               	movlb	0	; () banked
 17143  004DF4  517E               	movf	(ethernetController_init@err+1)& (0+255),w,b
 17144  004DF6  117F               	iorwf	(ethernetController_init@err+2)& (0+255),w,b
 17145  004DF8  B4D8               	btfsc	status,2,c
 17146  004DFA  D007               	goto	l77
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;ENC424J600.c: 43: return err;
 17150  004DFC  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 17151  004E00  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17152  004E04  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17153  004E08  0012               	return	
 17154  004E0A                     l77:
 17155                           
 17156                           ; BSR set to: 0
 17157                           ;ENC424J600.c: 44: }
 17158                           ;ENC424J600.c: 63: enc424j600_setRXBufferStartAddress(0x3000);
 17159                           
 17160                           ; BSR set to: 0
 17161  004E0A  0E30               	movlw	48
 17162  004E0C  6F6F               	movwf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),b
 17163  004E0E  0E00               	movlw	0
 17164  004E10  6F6E               	movwf	enc424j600_setRXBufferStartAddress@addr& (0+255),b
 17165  004E12  EC86  F02F         	call	_enc424j600_setRXBufferStartAddress	;wreg free
 17166                           
 17167                           ;ENC424J600.c: 64: enc424j600_setNextPacketPointer(0x3000);
 17168  004E16  0E30               	movlw	48
 17169  004E18  0100               	movlb	0	; () banked
 17170  004E1A  6F61               	movwf	(enc424j600_setNextPacketPointer@ptr+1)& (0+255),b
 17171  004E1C  0E00               	movlw	0
 17172  004E1E  6F60               	movwf	enc424j600_setNextPacketPointer@ptr& (0+255),b
 17173  004E20  EC3F  F031         	call	_enc424j600_setNextPacketPointer	;wreg free
 17174                           
 17175                           ;ENC424J600.c: 65: enc424j600_setRXTailPointer(0x5FFE);
 17176  004E24  0E5F               	movlw	95
 17177  004E26  0100               	movlb	0	; () banked
 17178  004E28  6F6F               	movwf	(enc424j600_setRXTailPointer@addr+1)& (0+255),b
 17179  004E2A  0EFE               	movlw	254
 17180  004E2C  6F6E               	movwf	enc424j600_setRXTailPointer@addr& (0+255),b
 17181  004E2E  EC71  F02F         	call	_enc424j600_setRXTailPointer	;wreg free
 17182                           
 17183                           ;ENC424J600.c: 67: enc424j600_enableReception();
 17184  004E32  EC44  F031         	call	_enc424j600_enableReception	;wreg free
 17185                           
 17186                           ;ENC424J600.c: 68: enc424j600_enableAutoMACInsertion();
 17187  004E36  ECC5  F02F         	call	_enc424j600_enableAutoMACInsertion	;wreg free
 17188                           
 17189                           ;ENC424J600.c: 70: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17190  004E3A  0E01               	movlw	1
 17191  004E3C  0100               	movlb	0	; () banked
 17192  004E3E  6F7D               	movwf	ethernetController_init@err& (0+255),b
 17193                           
 17194                           ; BSR set to: 0
 17195                           ;ENC424J600.c: 71: err.code = (uint16_t)0;
 17196  004E40  0E00               	movlw	0
 17197  004E42  6F7F               	movwf	(ethernetController_init@err+2)& (0+255),b
 17198  004E44  0E00               	movlw	0
 17199  004E46  6F7E               	movwf	(ethernetController_init@err+1)& (0+255),b
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;ENC424J600.c: 72: return err;
 17203  004E48  C07D  F07A         	movff	ethernetController_init@err,?_ethernetController_init
 17204  004E4C  C07E  F07B         	movff	ethernetController_init@err+1,?_ethernetController_init+1
 17205  004E50  C07F  F07C         	movff	ethernetController_init@err+2,?_ethernetController_init+2
 17206  004E54  0012               	return	
 17207  004E56                     __end_of_ethernetController_init:
 17208                           	opt stack 0
 17209                           tblptru	equ	0xFF8
 17210                           tblptrh	equ	0xFF7
 17211                           tblptrl	equ	0xFF6
 17212                           tablat	equ	0xFF5
 17213                           prodh	equ	0xFF4
 17214                           prodl	equ	0xFF3
 17215                           intcon	equ	0xFF2
 17216                           intcon3	equ	0xFF0
 17217                           indf0	equ	0xFEF
 17218                           postinc0	equ	0xFEE
 17219                           plusw0	equ	0xFEB
 17220                           fsr0h	equ	0xFEA
 17221                           fsr0l	equ	0xFE9
 17222                           wreg	equ	0xFE8
 17223                           indf1	equ	0xFE7
 17224                           postinc1	equ	0xFE6
 17225                           postdec1	equ	0xFE5
 17226                           plusw1	equ	0xFE3
 17227                           fsr1h	equ	0xFE2
 17228                           fsr1l	equ	0xFE1
 17229                           indf2	equ	0xFDF
 17230                           postinc2	equ	0xFDE
 17231                           postdec2	equ	0xFDD
 17232                           plusw2	equ	0xFDB
 17233                           fsr2h	equ	0xFDA
 17234                           fsr2l	equ	0xFD9
 17235                           status	equ	0xFD8
 17236                           
 17237 ;; *************** function _ethernetController_softReset *****************
 17238 ;; Defined at:
 17239 ;;		line 75 in file "src/enc424j600/ENC424J600.c"
 17240 ;; Parameters:    Size  Location     Type
 17241 ;;		None
 17242 ;; Auto vars:     Size  Location     Type
 17243 ;;  err             3   23[BANK0 ] struct error
 17244 ;;  receivedData    2   21[BANK0 ] unsigned char [2]
 17245 ;;  dataToSend      2   19[BANK0 ] unsigned char [2]
 17246 ;;  comFailCount    1   18[BANK0 ] unsigned char 
 17247 ;; Return value:  Size  Location     Type
 17248 ;;                  3   14[BANK0 ] struct error
 17249 ;; Registers used:
 17250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17251 ;; Tracked objects:
 17252 ;;		On entry : 0/0
 17253 ;;		On exit  : 0/0
 17254 ;;		Unchanged: 0/0
 17255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17256 ;;      Params:         0       3       0       0       0       0       0       0       0
 17257 ;;      Locals:         0       8       0       0       0       0       0       0       0
 17258 ;;      Temps:          0       1       0       0       0       0       0       0       0
 17259 ;;      Totals:         0      12       0       0       0       0       0       0       0
 17260 ;;Total ram usage:       12 bytes
 17261 ;; Hardware stack levels used:    1
 17262 ;; Hardware stack levels required when called:    7
 17263 ;; This function calls:
 17264 ;;		_enc424j600_readControlRegisterUnbanked
 17265 ;;		_enc424j600_writeControlRegisterUnbanked
 17266 ;;		_enc424j600_writeSingleByte
 17267 ;; This function is called by:
 17268 ;;		_ethernetController_init
 17269 ;; This function uses a non-reentrant model
 17270 ;;
 17271                           
 17272                           	psect	text55
 17273  0045A0                     __ptext55:
 17274                           	opt stack 0
 17275  0045A0                     _ethernetController_softReset:
 17276                           	opt stack 21
 17277                           
 17278                           ;ENC424J600.c: 93: uint8_t comFailCount = 0;
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;incstack = 0
 17282  0045A0  0E00               	movlw	0
 17283  0045A2  0100               	movlb	0	; () banked
 17284  0045A4  6F72               	movwf	ethernetController_softReset@comFailCount& (0+255),b
 17285                           
 17286                           ; BSR set to: 0
 17287                           ;ENC424J600.c: 94: uint8_t dataToSend[2] = {0x12, 0x34};
 17288  0045A6  C2AD  F073         	movff	ethernetController_softReset@F5988,ethernetController_softReset@dataToSend
 17289  0045AA  C2AE  F074         	movff	ethernetController_softReset@F5988+1,ethernetController_softReset@dataToSend+1
 17290                           
 17291                           ; BSR set to: 0
 17292                           ;ENC424J600.c: 95: uint8_t receivedData[2] = {0, 0};
 17293  0045AE  C264  F075         	movff	ethernetController_softReset@F5990,ethernetController_softReset@receivedData
 17294  0045B2  C265  F076         	movff	ethernetController_softReset@F5990+1,ethernetController_softReset@receivedData+1
 17295                           
 17296                           ;ENC424J600.c: 96: error_t err;
 17297                           ;ENC424J600.c: 97: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17298  0045B6  0E01               	movlw	1
 17299  0045B8  6F77               	movwf	ethernetController_softReset@err& (0+255),b
 17300                           
 17301                           ;ENC424J600.c: 98: err.code = (uint16_t)0;
 17302  0045BA  0E00               	movlw	0
 17303  0045BC  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17304  0045BE  0E00               	movlw	0
 17305  0045C0  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;ENC424J600.c: 99: if (comFailCount < 5) {
 17309  0045C2  0E05               	movlw	5
 17310  0045C4  6172               	cpfslt	ethernetController_softReset@comFailCount& (0+255),b
 17311  0045C6  D05F               	goto	l84
 17312                           
 17313                           ; BSR set to: 0
 17314                           ;ENC424J600.c: 101: enc424j600_writeControlRegisterUnbanked(0x16 + 0x00, &dataToSend[0])
      +                          ;
 17315  0045C8  0E73               	movlw	low ethernetController_softReset@dataToSend
 17316  0045CA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17317  0045CC  0E00               	movlw	high ethernetController_softReset@dataToSend
 17318  0045CE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17319  0045D0  0E16               	movlw	22
 17320  0045D2  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17321                           
 17322                           ;ENC424J600.c: 102: enc424j600_writeControlRegisterUnbanked(0x17 + 0x00, &dataToSend[1])
      +                          ;
 17323  0045D6  0E74               	movlw	low (ethernetController_softReset@dataToSend+1)
 17324  0045D8  0100               	movlb	0	; () banked
 17325  0045DA  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17326  0045DC  0E00               	movlw	high (ethernetController_softReset@dataToSend+1)
 17327  0045DE  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17328  0045E0  0E17               	movlw	23
 17329  0045E2  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17330                           
 17331                           ;ENC424J600.c: 104: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17332  0045E6  0E75               	movlw	low ethernetController_softReset@receivedData
 17333  0045E8  0100               	movlb	0	; () banked
 17334  0045EA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 17335  0045EC  0E00               	movlw	high ethernetController_softReset@receivedData
 17336  0045EE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 17337  0045F0  0E16               	movlw	22
 17338  0045F2  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 17339                           
 17340                           ;ENC424J600.c: 105: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17341  0045F6  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 17342  0045F8  0100               	movlb	0	; () banked
 17343  0045FA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 17344  0045FC  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17345  0045FE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 17346  004600  0E17               	movlw	23
 17347  004602  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 17348                           
 17349                           ;ENC424J600.c: 107: if ((receivedData[0] == dataToSend[0]) && (receivedData[1] == dataTo
      +                          Send[1])) {
 17350  004606  0100               	movlb	0	; () banked
 17351  004608  5173               	movf	ethernetController_softReset@dataToSend& (0+255),w,b
 17352  00460A  1975               	xorwf	ethernetController_softReset@receivedData& (0+255),w,b
 17353  00460C  A4D8               	btfss	status,2,c
 17354  00460E  D038               	goto	l88
 17355                           
 17356                           ; BSR set to: 0
 17357  004610  5174               	movf	(ethernetController_softReset@dataToSend+1)& (0+255),w,b
 17358  004612  1976               	xorwf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17359  004614  A4D8               	btfss	status,2,c
 17360  004616  D034               	goto	l88
 17361                           
 17362                           ; BSR set to: 0
 17363                           ;ENC424J600.c: 109: enc424j600_writeSingleByte(0b11001010);
 17364  004618  0ECA               	movlw	202
 17365  00461A  ECC6  F030         	call	_enc424j600_writeSingleByte
 17366                           
 17367                           ;ENC424J600.c: 110: _delay((unsigned long)((25)*(32000000UL/4000000.0)));
 17368  00461E  0E42               	movlw	66
 17369  004620                     u14237:
 17370  004620  2EE8               	decfsz	wreg,f,c
 17371  004622  D7FE               	bra	u14237
 17372  004624  D000               	nop2	
 17373                           
 17374                           ;ENC424J600.c: 112: enc424j600_readControlRegisterUnbanked(0x16 + 0x00, &receivedData[0]
      +                          );
 17375  004626  0E75               	movlw	low ethernetController_softReset@receivedData
 17376  004628  0100               	movlb	0	; () banked
 17377  00462A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 17378  00462C  0E00               	movlw	high ethernetController_softReset@receivedData
 17379  00462E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 17380  004630  0E16               	movlw	22
 17381  004632  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 17382                           
 17383                           ;ENC424J600.c: 113: enc424j600_readControlRegisterUnbanked(0x17 + 0x00, &receivedData[1]
      +                          );
 17384  004636  0E76               	movlw	low (ethernetController_softReset@receivedData+1)
 17385  004638  0100               	movlb	0	; () banked
 17386  00463A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 17387  00463C  0E00               	movlw	high (ethernetController_softReset@receivedData+1)
 17388  00463E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 17389  004640  0E17               	movlw	23
 17390  004642  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 17391                           
 17392                           ;ENC424J600.c: 115: if (!receivedData[0] && !receivedData[1]) {
 17393  004646  0100               	movlb	0	; () banked
 17394  004648  5175               	movf	ethernetController_softReset@receivedData& (0+255),w,b
 17395  00464A  A4D8               	btfss	status,2,c
 17396  00464C  D00D               	goto	l86
 17397                           
 17398                           ; BSR set to: 0
 17399  00464E  5176               	movf	(ethernetController_softReset@receivedData+1)& (0+255),w,b
 17400  004650  A4D8               	btfss	status,2,c
 17401  004652  D00A               	goto	l86
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;ENC424J600.c: 117: _delay((unsigned long)((256)*(32000000UL/4000000.0)));
 17405  004654  0E03               	movlw	3
 17406  004656  0100               	movlb	0	; () banked
 17407  004658  6F71               	movwf	??_ethernetController_softReset& (0+255),b
 17408  00465A  0EA7               	movlw	167
 17409  00465C                     u14247:
 17410  00465C  2EE8               	decfsz	wreg,f,c
 17411  00465E  D7FE               	bra	u14247
 17412  004660  2F71               	decfsz	??_ethernetController_softReset& (0+255),f,b
 17413  004662  D7FC               	bra	u14247
 17414  004664  D000               	nop2	
 17415  004666  D005               	goto	l10525
 17416  004668                     l86:
 17417                           
 17418                           ;ENC424J600.c: 120: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17419  004668  0E01               	movlw	1
 17420  00466A  0100               	movlb	0	; () banked
 17421  00466C  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17422  00466E  0E2E               	movlw	46
 17423  004670  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17424  004672                     l10525:
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;ENC424J600.c: 121: return err;
 17428  004672  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17429  004676  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17430  00467A  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17431                           
 17432                           ; BSR set to: 0
 17433  00467E  0012               	return	
 17434  004680                     l88:
 17435                           
 17436                           ;ENC424J600.c: 122: }
 17437                           ;ENC424J600.c: 123: }
 17438                           ;ENC424J600.c: 124: comFailCount++;
 17439                           
 17440                           ; BSR set to: 0
 17441                           
 17442                           ; BSR set to: 0
 17443  004680  0100               	movlb	0	; () banked
 17444  004682  2B72               	incf	ethernetController_softReset@comFailCount& (0+255),f,b
 17445                           
 17446                           ;ENC424J600.c: 125: } else {
 17447  004684  D00B               	goto	l89
 17448  004686                     l84:
 17449                           
 17450                           ; BSR set to: 0
 17451                           ;ENC424J600.c: 126: err.code = ERROR_ETHERNET_CONTROLLER_UNRESPONSIVE;
 17452                           
 17453                           ; BSR set to: 0
 17454  004686  0E01               	movlw	1
 17455  004688  6F79               	movwf	(ethernetController_softReset@err+2)& (0+255),b
 17456  00468A  0E2E               	movlw	46
 17457  00468C  6F78               	movwf	(ethernetController_softReset@err+1)& (0+255),b
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;ENC424J600.c: 127: return err;
 17461  00468E  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17462  004692  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17463  004696  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17464                           
 17465                           ; BSR set to: 0
 17466  00469A  0012               	return	
 17467  00469C                     l89:
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;ENC424J600.c: 128: }
 17471                           ;ENC424J600.c: 129: return err;
 17472  00469C  C077  F06E         	movff	ethernetController_softReset@err,?_ethernetController_softReset
 17473  0046A0  C078  F06F         	movff	ethernetController_softReset@err+1,?_ethernetController_softReset+1
 17474  0046A4  C079  F070         	movff	ethernetController_softReset@err+2,?_ethernetController_softReset+2
 17475  0046A8  0012               	return		;funcret
 17476  0046AA                     __end_of_ethernetController_softReset:
 17477                           	opt stack 0
 17478                           tblptru	equ	0xFF8
 17479                           tblptrh	equ	0xFF7
 17480                           tblptrl	equ	0xFF6
 17481                           tablat	equ	0xFF5
 17482                           prodh	equ	0xFF4
 17483                           prodl	equ	0xFF3
 17484                           intcon	equ	0xFF2
 17485                           intcon3	equ	0xFF0
 17486                           indf0	equ	0xFEF
 17487                           postinc0	equ	0xFEE
 17488                           plusw0	equ	0xFEB
 17489                           fsr0h	equ	0xFEA
 17490                           fsr0l	equ	0xFE9
 17491                           wreg	equ	0xFE8
 17492                           indf1	equ	0xFE7
 17493                           postinc1	equ	0xFE6
 17494                           postdec1	equ	0xFE5
 17495                           plusw1	equ	0xFE3
 17496                           fsr1h	equ	0xFE2
 17497                           fsr1l	equ	0xFE1
 17498                           indf2	equ	0xFDF
 17499                           postinc2	equ	0xFDE
 17500                           postdec2	equ	0xFDD
 17501                           plusw2	equ	0xFDB
 17502                           fsr2h	equ	0xFDA
 17503                           fsr2l	equ	0xFD9
 17504                           status	equ	0xFD8
 17505                           
 17506 ;; *************** function _ethernetController_checkDeviceId *****************
 17507 ;; Defined at:
 17508 ;;		line 132 in file "src/enc424j600/ENC424J600.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;		None
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  err             3   18[BANK0 ] struct error
 17513 ;;  data            1   17[BANK0 ] unsigned char 
 17514 ;; Return value:  Size  Location     Type
 17515 ;;                  3   14[BANK0 ] struct error
 17516 ;; Registers used:
 17517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17518 ;; Tracked objects:
 17519 ;;		On entry : 0/0
 17520 ;;		On exit  : 0/0
 17521 ;;		Unchanged: 0/0
 17522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17523 ;;      Params:         0       3       0       0       0       0       0       0       0
 17524 ;;      Locals:         0       4       0       0       0       0       0       0       0
 17525 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17526 ;;      Totals:         0       7       0       0       0       0       0       0       0
 17527 ;;Total ram usage:        7 bytes
 17528 ;; Hardware stack levels used:    1
 17529 ;; Hardware stack levels required when called:    7
 17530 ;; This function calls:
 17531 ;;		_enc424j600_readControlRegisterUnbanked
 17532 ;; This function is called by:
 17533 ;;		_ethernetController_init
 17534 ;;		_main
 17535 ;; This function uses a non-reentrant model
 17536 ;;
 17537                           
 17538                           	psect	text56
 17539  005A24                     __ptext56:
 17540                           	opt stack 0
 17541  005A24                     _ethernetController_checkDeviceId:
 17542                           	opt stack 21
 17543                           
 17544                           ;ENC424J600.c: 133: error_t err;
 17545                           ;ENC424J600.c: 134: err.module = ERROR_MODULE_ETHERNET_CONTROLLER;
 17546                           
 17547                           ;incstack = 0
 17548  005A24  0E01               	movlw	1
 17549  005A26  0100               	movlb	0	; () banked
 17550  005A28  6F72               	movwf	ethernetController_checkDeviceId@err& (0+255),b
 17551                           
 17552                           ;ENC424J600.c: 135: err.code = (uint16_t)0;
 17553  005A2A  0E00               	movlw	0
 17554  005A2C  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17555  005A2E  0E00               	movlw	0
 17556  005A30  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17557                           
 17558                           ;ENC424J600.c: 136: uint8_t data = 0;
 17559  005A32  0E00               	movlw	0
 17560  005A34  6F71               	movwf	ethernetController_checkDeviceId@data& (0+255),b
 17561                           
 17562                           ; BSR set to: 0
 17563                           ;ENC424J600.c: 137: enc424j600_readControlRegisterUnbanked(0x14 + 0x60, &data);
 17564  005A36  0E71               	movlw	low ethernetController_checkDeviceId@data
 17565  005A38  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 17566  005A3A  0E00               	movlw	high ethernetController_checkDeviceId@data
 17567  005A3C  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 17568  005A3E  0E74               	movlw	116
 17569  005A40  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 17570                           
 17571                           ;ENC424J600.c: 138: if (((data >> 5)&0x07) == 0b001)
 17572  005A44  0100               	movlb	0	; () banked
 17573  005A46  3971               	swapf	ethernetController_checkDeviceId@data& (0+255),w,b
 17574  005A48  42E8               	rrncf	wreg,f,c
 17575  005A4A  0B07               	andlw	7
 17576  005A4C  0B07               	andlw	7
 17577  005A4E  06E8               	decf	wreg,f,c
 17578  005A50  A4D8               	btfss	status,2,c
 17579  005A52  D004               	goto	l92
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;ENC424J600.c: 139: err.code = (uint16_t)0;
 17583  005A54  0E00               	movlw	0
 17584  005A56  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17585  005A58  0E00               	movlw	0
 17586  005A5A  D003               	goto	L10
 17587  005A5C                     l92:
 17588                           
 17589                           ; BSR set to: 0
 17590                           ;ENC424J600.c: 140: else
 17591                           ;ENC424J600.c: 141: err.code = ERROR_ETHERNET_CONTROLLER_UNKNOWN_DEVICE_ID;
 17592                           
 17593                           ; BSR set to: 0
 17594  005A5C  0E01               	movlw	1
 17595  005A5E  6F74               	movwf	(ethernetController_checkDeviceId@err+2)& (0+255),b
 17596  005A60  0E2D               	movlw	45
 17597  005A62                     L10:
 17598  005A62  6F73               	movwf	(ethernetController_checkDeviceId@err+1)& (0+255),b
 17599                           
 17600                           ; BSR set to: 0
 17601                           ;ENC424J600.c: 142: return err;
 17602                           
 17603                           ; BSR set to: 0
 17604  005A64  C072  F06E         	movff	ethernetController_checkDeviceId@err,?_ethernetController_checkDeviceId
 17605  005A68  C073  F06F         	movff	ethernetController_checkDeviceId@err+1,?_ethernetController_checkDeviceId+1
 17606  005A6C  C074  F070         	movff	ethernetController_checkDeviceId@err+2,?_ethernetController_checkDeviceId+2
 17607  005A70  0012               	return	
 17608  005A72                     __end_of_ethernetController_checkDeviceId:
 17609                           	opt stack 0
 17610                           tblptru	equ	0xFF8
 17611                           tblptrh	equ	0xFF7
 17612                           tblptrl	equ	0xFF6
 17613                           tablat	equ	0xFF5
 17614                           prodh	equ	0xFF4
 17615                           prodl	equ	0xFF3
 17616                           intcon	equ	0xFF2
 17617                           intcon3	equ	0xFF0
 17618                           indf0	equ	0xFEF
 17619                           postinc0	equ	0xFEE
 17620                           plusw0	equ	0xFEB
 17621                           fsr0h	equ	0xFEA
 17622                           fsr0l	equ	0xFE9
 17623                           wreg	equ	0xFE8
 17624                           indf1	equ	0xFE7
 17625                           postinc1	equ	0xFE6
 17626                           postdec1	equ	0xFE5
 17627                           plusw1	equ	0xFE3
 17628                           fsr1h	equ	0xFE2
 17629                           fsr1l	equ	0xFE1
 17630                           indf2	equ	0xFDF
 17631                           postinc2	equ	0xFDE
 17632                           postdec2	equ	0xFDD
 17633                           plusw2	equ	0xFDB
 17634                           fsr2h	equ	0xFDA
 17635                           fsr2l	equ	0xFD9
 17636                           status	equ	0xFD8
 17637                           
 17638 ;; *************** function _enc424j600_setRXTailPointer *****************
 17639 ;; Defined at:
 17640 ;;		line 649 in file "src/enc424j600/ENC424J600.c"
 17641 ;; Parameters:    Size  Location     Type
 17642 ;;  addr            2   14[BANK0 ] unsigned int 
 17643 ;; Auto vars:     Size  Location     Type
 17644 ;;  highByte        1   17[BANK0 ] unsigned char 
 17645 ;;  lowByte         1   16[BANK0 ] unsigned char 
 17646 ;; Return value:  Size  Location     Type
 17647 ;;                  1    wreg      void 
 17648 ;; Registers used:
 17649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17655 ;;      Params:         0       2       0       0       0       0       0       0       0
 17656 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17657 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17658 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17659 ;;Total ram usage:        4 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    7
 17662 ;; This function calls:
 17663 ;;		_enc424j600_writeControlRegisterUnbanked
 17664 ;; This function is called by:
 17665 ;;		_ethernetController_init
 17666 ;;		_ethernetController_dropPacket
 17667 ;; This function uses a non-reentrant model
 17668 ;;
 17669                           
 17670                           	psect	text57
 17671  005EE2                     __ptext57:
 17672                           	opt stack 0
 17673  005EE2                     _enc424j600_setRXTailPointer:
 17674                           	opt stack 19
 17675                           
 17676                           ;ENC424J600.c: 650: uint8_t lowByte = addr & 0x00ff;
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;incstack = 0
 17680  005EE2  C06E  F070         	movff	enc424j600_setRXTailPointer@addr,enc424j600_setRXTailPointer@lowByte
 17681                           
 17682                           ;ENC424J600.c: 651: uint8_t highByte = (addr >> 8) & 0xff;
 17683  005EE6  0100               	movlb	0	; () banked
 17684  005EE8  516F               	movf	(enc424j600_setRXTailPointer@addr+1)& (0+255),w,b
 17685  005EEA  6F71               	movwf	enc424j600_setRXTailPointer@highByte& (0+255),b
 17686                           
 17687                           ; BSR set to: 0
 17688                           ;ENC424J600.c: 652: enc424j600_writeControlRegisterUnbanked(0x06 + 0x00, &lowByte);
 17689  005EEC  0E70               	movlw	low enc424j600_setRXTailPointer@lowByte
 17690  005EEE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17691  005EF0  0E00               	movlw	high enc424j600_setRXTailPointer@lowByte
 17692  005EF2  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17693  005EF4  0E06               	movlw	6
 17694  005EF6  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17695                           
 17696                           ;ENC424J600.c: 653: enc424j600_writeControlRegisterUnbanked(0x07 + 0x00, &highByte);
 17697  005EFA  0E71               	movlw	low enc424j600_setRXTailPointer@highByte
 17698  005EFC  0100               	movlb	0	; () banked
 17699  005EFE  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17700  005F00  0E00               	movlw	high enc424j600_setRXTailPointer@highByte
 17701  005F02  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17702  005F04  0E07               	movlw	7
 17703  005F06  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17704  005F0A  0012               	return		;funcret
 17705  005F0C                     __end_of_enc424j600_setRXTailPointer:
 17706                           	opt stack 0
 17707                           tblptru	equ	0xFF8
 17708                           tblptrh	equ	0xFF7
 17709                           tblptrl	equ	0xFF6
 17710                           tablat	equ	0xFF5
 17711                           prodh	equ	0xFF4
 17712                           prodl	equ	0xFF3
 17713                           intcon	equ	0xFF2
 17714                           intcon3	equ	0xFF0
 17715                           indf0	equ	0xFEF
 17716                           postinc0	equ	0xFEE
 17717                           plusw0	equ	0xFEB
 17718                           fsr0h	equ	0xFEA
 17719                           fsr0l	equ	0xFE9
 17720                           wreg	equ	0xFE8
 17721                           indf1	equ	0xFE7
 17722                           postinc1	equ	0xFE6
 17723                           postdec1	equ	0xFE5
 17724                           plusw1	equ	0xFE3
 17725                           fsr1h	equ	0xFE2
 17726                           fsr1l	equ	0xFE1
 17727                           indf2	equ	0xFDF
 17728                           postinc2	equ	0xFDE
 17729                           postdec2	equ	0xFDD
 17730                           plusw2	equ	0xFDB
 17731                           fsr2h	equ	0xFDA
 17732                           fsr2l	equ	0xFD9
 17733                           status	equ	0xFD8
 17734                           
 17735 ;; *************** function _enc424j600_setRXBufferStartAddress *****************
 17736 ;; Defined at:
 17737 ;;		line 642 in file "src/enc424j600/ENC424J600.c"
 17738 ;; Parameters:    Size  Location     Type
 17739 ;;  addr            2   14[BANK0 ] unsigned int 
 17740 ;; Auto vars:     Size  Location     Type
 17741 ;;  highByte        1   17[BANK0 ] unsigned char 
 17742 ;;  lowByte         1   16[BANK0 ] unsigned char 
 17743 ;; Return value:  Size  Location     Type
 17744 ;;                  1    wreg      void 
 17745 ;; Registers used:
 17746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17747 ;; Tracked objects:
 17748 ;;		On entry : 0/0
 17749 ;;		On exit  : 0/0
 17750 ;;		Unchanged: 0/0
 17751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17752 ;;      Params:         0       2       0       0       0       0       0       0       0
 17753 ;;      Locals:         0       2       0       0       0       0       0       0       0
 17754 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17755 ;;      Totals:         0       4       0       0       0       0       0       0       0
 17756 ;;Total ram usage:        4 bytes
 17757 ;; Hardware stack levels used:    1
 17758 ;; Hardware stack levels required when called:    7
 17759 ;; This function calls:
 17760 ;;		_enc424j600_writeControlRegisterUnbanked
 17761 ;; This function is called by:
 17762 ;;		_ethernetController_init
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text58
 17767  005F0C                     __ptext58:
 17768                           	opt stack 0
 17769  005F0C                     _enc424j600_setRXBufferStartAddress:
 17770                           	opt stack 21
 17771                           
 17772                           ;ENC424J600.c: 643: uint8_t lowByte = addr & 0x00ff;
 17773                           
 17774                           ;incstack = 0
 17775  005F0C  C06E  F070         	movff	enc424j600_setRXBufferStartAddress@addr,enc424j600_setRXBufferStartAddress@lowByt
      +                          e
 17776                           
 17777                           ;ENC424J600.c: 644: uint8_t highByte = (addr >> 8) & 0xff;
 17778  005F10  0100               	movlb	0	; () banked
 17779  005F12  516F               	movf	(enc424j600_setRXBufferStartAddress@addr+1)& (0+255),w,b
 17780  005F14  6F71               	movwf	enc424j600_setRXBufferStartAddress@highByte& (0+255),b
 17781                           
 17782                           ; BSR set to: 0
 17783                           ;ENC424J600.c: 645: enc424j600_writeControlRegisterUnbanked(0x04 + 0x00, &lowByte);
 17784  005F16  0E70               	movlw	low enc424j600_setRXBufferStartAddress@lowByte
 17785  005F18  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17786  005F1A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@lowByte
 17787  005F1C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17788  005F1E  0E04               	movlw	4
 17789  005F20  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17790                           
 17791                           ;ENC424J600.c: 646: enc424j600_writeControlRegisterUnbanked(0x05 + 0x00, &highByte);
 17792  005F24  0E71               	movlw	low enc424j600_setRXBufferStartAddress@highByte
 17793  005F26  0100               	movlb	0	; () banked
 17794  005F28  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 17795  005F2A  0E00               	movlw	high enc424j600_setRXBufferStartAddress@highByte
 17796  005F2C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 17797  005F2E  0E05               	movlw	5
 17798  005F30  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 17799  005F34  0012               	return		;funcret
 17800  005F36                     __end_of_enc424j600_setRXBufferStartAddress:
 17801                           	opt stack 0
 17802                           tblptru	equ	0xFF8
 17803                           tblptrh	equ	0xFF7
 17804                           tblptrl	equ	0xFF6
 17805                           tablat	equ	0xFF5
 17806                           prodh	equ	0xFF4
 17807                           prodl	equ	0xFF3
 17808                           intcon	equ	0xFF2
 17809                           intcon3	equ	0xFF0
 17810                           indf0	equ	0xFEF
 17811                           postinc0	equ	0xFEE
 17812                           plusw0	equ	0xFEB
 17813                           fsr0h	equ	0xFEA
 17814                           fsr0l	equ	0xFE9
 17815                           wreg	equ	0xFE8
 17816                           indf1	equ	0xFE7
 17817                           postinc1	equ	0xFE6
 17818                           postdec1	equ	0xFE5
 17819                           plusw1	equ	0xFE3
 17820                           fsr1h	equ	0xFE2
 17821                           fsr1l	equ	0xFE1
 17822                           indf2	equ	0xFDF
 17823                           postinc2	equ	0xFDE
 17824                           postdec2	equ	0xFDD
 17825                           plusw2	equ	0xFDB
 17826                           fsr2h	equ	0xFDA
 17827                           fsr2l	equ	0xFD9
 17828                           status	equ	0xFD8
 17829                           
 17830 ;; *************** function _enc424j600_setNextPacketPointer *****************
 17831 ;; Defined at:
 17832 ;;		line 586 in file "src/enc424j600/ENC424J600.c"
 17833 ;; Parameters:    Size  Location     Type
 17834 ;;  ptr             2    0[BANK0 ] unsigned int 
 17835 ;; Auto vars:     Size  Location     Type
 17836 ;;		None
 17837 ;; Return value:  Size  Location     Type
 17838 ;;                  1    wreg      void 
 17839 ;; Registers used:
 17840 ;;		None
 17841 ;; Tracked objects:
 17842 ;;		On entry : 0/0
 17843 ;;		On exit  : 0/0
 17844 ;;		Unchanged: 0/0
 17845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17846 ;;      Params:         0       2       0       0       0       0       0       0       0
 17847 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17848 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17849 ;;      Totals:         0       2       0       0       0       0       0       0       0
 17850 ;;Total ram usage:        2 bytes
 17851 ;; Hardware stack levels used:    1
 17852 ;; Hardware stack levels required when called:    4
 17853 ;; This function calls:
 17854 ;;		Nothing
 17855 ;; This function is called by:
 17856 ;;		_ethernetController_init
 17857 ;;		_ethernetController_updateNextPacketPointer
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           	psect	text59
 17862  00627E                     __ptext59:
 17863                           	opt stack 0
 17864  00627E                     _enc424j600_setNextPacketPointer:
 17865                           	opt stack 23
 17866                           
 17867                           ;ENC424J600.c: 587: nextPacketPointer = ptr;
 17868                           
 17869                           ;incstack = 0
 17870  00627E  C060  F041         	movff	enc424j600_setNextPacketPointer@ptr,_nextPacketPointer
 17871  006282  C061  F042         	movff	enc424j600_setNextPacketPointer@ptr+1,_nextPacketPointer+1
 17872  006286  0012               	return		;funcret
 17873  006288                     __end_of_enc424j600_setNextPacketPointer:
 17874                           	opt stack 0
 17875                           tblptru	equ	0xFF8
 17876                           tblptrh	equ	0xFF7
 17877                           tblptrl	equ	0xFF6
 17878                           tablat	equ	0xFF5
 17879                           prodh	equ	0xFF4
 17880                           prodl	equ	0xFF3
 17881                           intcon	equ	0xFF2
 17882                           intcon3	equ	0xFF0
 17883                           indf0	equ	0xFEF
 17884                           postinc0	equ	0xFEE
 17885                           plusw0	equ	0xFEB
 17886                           fsr0h	equ	0xFEA
 17887                           fsr0l	equ	0xFE9
 17888                           wreg	equ	0xFE8
 17889                           indf1	equ	0xFE7
 17890                           postinc1	equ	0xFE6
 17891                           postdec1	equ	0xFE5
 17892                           plusw1	equ	0xFE3
 17893                           fsr1h	equ	0xFE2
 17894                           fsr1l	equ	0xFE1
 17895                           indf2	equ	0xFDF
 17896                           postinc2	equ	0xFDE
 17897                           postdec2	equ	0xFDD
 17898                           plusw2	equ	0xFDB
 17899                           fsr2h	equ	0xFDA
 17900                           fsr2l	equ	0xFD9
 17901                           status	equ	0xFD8
 17902                           
 17903 ;; *************** function _enc424j600_enableReception *****************
 17904 ;; Defined at:
 17905 ;;		line 672 in file "src/enc424j600/ENC424J600.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;		None
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;		None
 17910 ;; Return value:  Size  Location     Type
 17911 ;;                  1    wreg      void 
 17912 ;; Registers used:
 17913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17914 ;; Tracked objects:
 17915 ;;		On entry : 0/0
 17916 ;;		On exit  : 0/0
 17917 ;;		Unchanged: 0/0
 17918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17919 ;;      Params:         0       0       0       0       0       0       0       0       0
 17920 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17921 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17922 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17923 ;;Total ram usage:        0 bytes
 17924 ;; Hardware stack levels used:    1
 17925 ;; Hardware stack levels required when called:    7
 17926 ;; This function calls:
 17927 ;;		_enc424j600_writeSingleByte
 17928 ;; This function is called by:
 17929 ;;		_ethernetController_init
 17930 ;;		_ethernetController_enableReception
 17931 ;; This function uses a non-reentrant model
 17932 ;;
 17933                           
 17934                           	psect	text60
 17935  006288                     __ptext60:
 17936                           	opt stack 0
 17937  006288                     _enc424j600_enableReception:
 17938                           	opt stack 21
 17939                           
 17940                           ;ENC424J600.c: 673: enc424j600_writeSingleByte(0b11101000);
 17941                           
 17942                           ;incstack = 0
 17943  006288  0EE8               	movlw	232
 17944  00628A  ECC6  F030         	call	_enc424j600_writeSingleByte
 17945  00628E  0012               	return		;funcret
 17946  006290                     __end_of_enc424j600_enableReception:
 17947                           	opt stack 0
 17948                           tblptru	equ	0xFF8
 17949                           tblptrh	equ	0xFF7
 17950                           tblptrl	equ	0xFF6
 17951                           tablat	equ	0xFF5
 17952                           prodh	equ	0xFF4
 17953                           prodl	equ	0xFF3
 17954                           intcon	equ	0xFF2
 17955                           intcon3	equ	0xFF0
 17956                           indf0	equ	0xFEF
 17957                           postinc0	equ	0xFEE
 17958                           plusw0	equ	0xFEB
 17959                           fsr0h	equ	0xFEA
 17960                           fsr0l	equ	0xFE9
 17961                           wreg	equ	0xFE8
 17962                           indf1	equ	0xFE7
 17963                           postinc1	equ	0xFE6
 17964                           postdec1	equ	0xFE5
 17965                           plusw1	equ	0xFE3
 17966                           fsr1h	equ	0xFE2
 17967                           fsr1l	equ	0xFE1
 17968                           indf2	equ	0xFDF
 17969                           postinc2	equ	0xFDE
 17970                           postdec2	equ	0xFDD
 17971                           plusw2	equ	0xFDB
 17972                           fsr2h	equ	0xFDA
 17973                           fsr2l	equ	0xFD9
 17974                           status	equ	0xFD8
 17975                           
 17976 ;; *************** function _enc424j600_enableAutoMACInsertion *****************
 17977 ;; Defined at:
 17978 ;;		line 658 in file "src/enc424j600/ENC424J600.c"
 17979 ;; Parameters:    Size  Location     Type
 17980 ;;		None
 17981 ;; Auto vars:     Size  Location     Type
 17982 ;;  temp            1   14[BANK0 ] unsigned char 
 17983 ;; Return value:  Size  Location     Type
 17984 ;;                  1    wreg      void 
 17985 ;; Registers used:
 17986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17987 ;; Tracked objects:
 17988 ;;		On entry : 0/0
 17989 ;;		On exit  : 0/0
 17990 ;;		Unchanged: 0/0
 17991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17992 ;;      Params:         0       0       0       0       0       0       0       0       0
 17993 ;;      Locals:         0       1       0       0       0       0       0       0       0
 17994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17995 ;;      Totals:         0       1       0       0       0       0       0       0       0
 17996 ;;Total ram usage:        1 bytes
 17997 ;; Hardware stack levels used:    1
 17998 ;; Hardware stack levels required when called:    7
 17999 ;; This function calls:
 18000 ;;		_enc424j600_readControlRegisterUnbanked
 18001 ;;		_enc424j600_writeControlRegisterUnbanked
 18002 ;; This function is called by:
 18003 ;;		_ethernetController_init
 18004 ;; This function uses a non-reentrant model
 18005 ;;
 18006                           
 18007                           	psect	text61
 18008  005F8A                     __ptext61:
 18009                           	opt stack 0
 18010  005F8A                     _enc424j600_enableAutoMACInsertion:
 18011                           	opt stack 21
 18012                           
 18013                           ;ENC424J600.c: 659: uint8_t temp = 0;
 18014                           
 18015                           ;incstack = 0
 18016  005F8A  0E00               	movlw	0
 18017  005F8C  0100               	movlb	0	; () banked
 18018  005F8E  6F6E               	movwf	enc424j600_enableAutoMACInsertion@temp& (0+255),b
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;ENC424J600.c: 660: enc424j600_readControlRegisterUnbanked(0x0F + 0x60, &temp);
 18022  005F90  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 18023  005F92  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18024  005F94  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 18025  005F96  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18026  005F98  0E6F               	movlw	111
 18027  005F9A  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 18028                           
 18029                           ;ENC424J600.c: 661: temp |= (1 << 5);
 18030  005F9E  0100               	movlb	0	; () banked
 18031  005FA0  8B6E               	bsf	enc424j600_enableAutoMACInsertion@temp& (0+255),5,b
 18032                           
 18033                           ; BSR set to: 0
 18034                           ;ENC424J600.c: 662: enc424j600_writeControlRegisterUnbanked(0x0F + 0x60, &temp);
 18035  005FA2  0E6E               	movlw	low enc424j600_enableAutoMACInsertion@temp
 18036  005FA4  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 18037  005FA6  0E00               	movlw	high enc424j600_enableAutoMACInsertion@temp
 18038  005FA8  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18039  005FAA  0E6F               	movlw	111
 18040  005FAC  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 18041  005FB0  0012               	return		;funcret
 18042  005FB2                     __end_of_enc424j600_enableAutoMACInsertion:
 18043                           	opt stack 0
 18044                           tblptru	equ	0xFF8
 18045                           tblptrh	equ	0xFF7
 18046                           tblptrl	equ	0xFF6
 18047                           tablat	equ	0xFF5
 18048                           prodh	equ	0xFF4
 18049                           prodl	equ	0xFF3
 18050                           intcon	equ	0xFF2
 18051                           intcon3	equ	0xFF0
 18052                           indf0	equ	0xFEF
 18053                           postinc0	equ	0xFEE
 18054                           plusw0	equ	0xFEB
 18055                           fsr0h	equ	0xFEA
 18056                           fsr0l	equ	0xFE9
 18057                           wreg	equ	0xFE8
 18058                           indf1	equ	0xFE7
 18059                           postinc1	equ	0xFE6
 18060                           postdec1	equ	0xFE5
 18061                           plusw1	equ	0xFE3
 18062                           fsr1h	equ	0xFE2
 18063                           fsr1l	equ	0xFE1
 18064                           indf2	equ	0xFDF
 18065                           postinc2	equ	0xFDE
 18066                           postdec2	equ	0xFDD
 18067                           plusw2	equ	0xFDB
 18068                           fsr2h	equ	0xFDA
 18069                           fsr2l	equ	0xFD9
 18070                           status	equ	0xFD8
 18071                           
 18072 ;; *************** function _ethernetController_getMTU *****************
 18073 ;; Defined at:
 18074 ;;		line 168 in file "src/enc424j600/ENC424J600.c"
 18075 ;; Parameters:    Size  Location     Type
 18076 ;;		None
 18077 ;; Auto vars:     Size  Location     Type
 18078 ;;		None
 18079 ;; Return value:  Size  Location     Type
 18080 ;;                  2    0[BANK0 ] unsigned int 
 18081 ;; Registers used:
 18082 ;;		wreg, status,2
 18083 ;; Tracked objects:
 18084 ;;		On entry : 0/0
 18085 ;;		On exit  : 0/0
 18086 ;;		Unchanged: 0/0
 18087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18088 ;;      Params:         0       2       0       0       0       0       0       0       0
 18089 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18090 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18091 ;;      Totals:         0       2       0       0       0       0       0       0       0
 18092 ;;Total ram usage:        2 bytes
 18093 ;; Hardware stack levels used:    1
 18094 ;; Hardware stack levels required when called:    4
 18095 ;; This function calls:
 18096 ;;		Nothing
 18097 ;; This function is called by:
 18098 ;;		_handleStackBackgroundTasks
 18099 ;; This function uses a non-reentrant model
 18100 ;;
 18101                           
 18102                           	psect	text62
 18103  00625E                     __ptext62:
 18104                           	opt stack 0
 18105  00625E                     _ethernetController_getMTU:
 18106                           	opt stack 25
 18107                           
 18108                           ;ENC424J600.c: 169: return 1500;
 18109                           
 18110                           ;incstack = 0
 18111  00625E  0E05               	movlw	5
 18112  006260  0100               	movlb	0	; () banked
 18113  006262  6F61               	movwf	(?_ethernetController_getMTU+1)& (0+255),b
 18114  006264  0EDC               	movlw	220
 18115  006266  6F60               	movwf	?_ethernetController_getMTU& (0+255),b
 18116  006268  0012               	return	
 18117  00626A                     __end_of_ethernetController_getMTU:
 18118                           	opt stack 0
 18119                           tblptru	equ	0xFF8
 18120                           tblptrh	equ	0xFF7
 18121                           tblptrl	equ	0xFF6
 18122                           tablat	equ	0xFF5
 18123                           prodh	equ	0xFF4
 18124                           prodl	equ	0xFF3
 18125                           intcon	equ	0xFF2
 18126                           intcon3	equ	0xFF0
 18127                           indf0	equ	0xFEF
 18128                           postinc0	equ	0xFEE
 18129                           plusw0	equ	0xFEB
 18130                           fsr0h	equ	0xFEA
 18131                           fsr0l	equ	0xFE9
 18132                           wreg	equ	0xFE8
 18133                           indf1	equ	0xFE7
 18134                           postinc1	equ	0xFE6
 18135                           postdec1	equ	0xFE5
 18136                           plusw1	equ	0xFE3
 18137                           fsr1h	equ	0xFE2
 18138                           fsr1l	equ	0xFE1
 18139                           indf2	equ	0xFDF
 18140                           postinc2	equ	0xFDE
 18141                           postdec2	equ	0xFDD
 18142                           plusw2	equ	0xFDB
 18143                           fsr2h	equ	0xFDA
 18144                           fsr2l	equ	0xFD9
 18145                           status	equ	0xFD8
 18146                           
 18147 ;; *************** function _ethernetController_disableEthernet *****************
 18148 ;; Defined at:
 18149 ;;		line 197 in file "src/enc424j600/ENC424J600.c"
 18150 ;; Parameters:    Size  Location     Type
 18151 ;;		None
 18152 ;; Auto vars:     Size  Location     Type
 18153 ;;		None
 18154 ;; Return value:  Size  Location     Type
 18155 ;;                  1    wreg      void 
 18156 ;; Registers used:
 18157 ;;		None
 18158 ;; Tracked objects:
 18159 ;;		On entry : 0/0
 18160 ;;		On exit  : 0/0
 18161 ;;		Unchanged: 0/0
 18162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18163 ;;      Params:         0       0       0       0       0       0       0       0       0
 18164 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18165 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18166 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18167 ;;Total ram usage:        0 bytes
 18168 ;; Hardware stack levels used:    1
 18169 ;; Hardware stack levels required when called:    4
 18170 ;; This function calls:
 18171 ;;		Nothing
 18172 ;; This function is called by:
 18173 ;;		_handleStackBackgroundTasks
 18174 ;; This function uses a non-reentrant model
 18175 ;;
 18176                           
 18177                           	psect	text63
 18178  006296                     __ptext63:
 18179                           	opt stack 0
 18180  006296                     _ethernetController_disableEthernet:
 18181                           	opt stack 25
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;incstack = 0
 18185  006296  0012               	return		;funcret
 18186  006298                     __end_of_ethernetController_disableEthernet:
 18187                           	opt stack 0
 18188                           tblptru	equ	0xFF8
 18189                           tblptrh	equ	0xFF7
 18190                           tblptrl	equ	0xFF6
 18191                           tablat	equ	0xFF5
 18192                           prodh	equ	0xFF4
 18193                           prodl	equ	0xFF3
 18194                           intcon	equ	0xFF2
 18195                           intcon3	equ	0xFF0
 18196                           indf0	equ	0xFEF
 18197                           postinc0	equ	0xFEE
 18198                           plusw0	equ	0xFEB
 18199                           fsr0h	equ	0xFEA
 18200                           fsr0l	equ	0xFE9
 18201                           wreg	equ	0xFE8
 18202                           indf1	equ	0xFE7
 18203                           postinc1	equ	0xFE6
 18204                           postdec1	equ	0xFE5
 18205                           plusw1	equ	0xFE3
 18206                           fsr1h	equ	0xFE2
 18207                           fsr1l	equ	0xFE1
 18208                           indf2	equ	0xFDF
 18209                           postinc2	equ	0xFDE
 18210                           postdec2	equ	0xFDD
 18211                           plusw2	equ	0xFDB
 18212                           fsr2h	equ	0xFDA
 18213                           fsr2l	equ	0xFD9
 18214                           status	equ	0xFD8
 18215                           
 18216 ;; *************** function _ethernetController_clearInterruptFlag *****************
 18217 ;; Defined at:
 18218 ;;		line 330 in file "src/enc424j600/ENC424J600.c"
 18219 ;; Parameters:    Size  Location     Type
 18220 ;;  flag            1    wreg     unsigned char 
 18221 ;; Auto vars:     Size  Location     Type
 18222 ;;  flag            1   18[BANK0 ] unsigned char 
 18223 ;; Return value:  Size  Location     Type
 18224 ;;                  1    wreg      void 
 18225 ;; Registers used:
 18226 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18227 ;; Tracked objects:
 18228 ;;		On entry : 0/0
 18229 ;;		On exit  : 0/0
 18230 ;;		Unchanged: 0/0
 18231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18232 ;;      Params:         0       0       0       0       0       0       0       0       0
 18233 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18234 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18235 ;;      Totals:         0       1       0       0       0       0       0       0       0
 18236 ;;Total ram usage:        1 bytes
 18237 ;; Hardware stack levels used:    1
 18238 ;; Hardware stack levels required when called:    8
 18239 ;; This function calls:
 18240 ;;		_enc424j600_clearInterruptFlag
 18241 ;; This function is called by:
 18242 ;;		_handleStackBackgroundTasks
 18243 ;; This function uses a non-reentrant model
 18244 ;;
 18245                           
 18246                           	psect	text64
 18247  006242                     __ptext64:
 18248                           	opt stack 0
 18249  006242                     _ethernetController_clearInterruptFlag:
 18250                           	opt stack 21
 18251                           
 18252                           ;incstack = 0
 18253                           ;ethernetController_clearInterruptFlag@flag stored from wreg
 18254  006242  0100               	movlb	0	; () banked
 18255  006244  6F72               	movwf	ethernetController_clearInterruptFlag@flag& (0+255),b
 18256                           
 18257                           ;ENC424J600.c: 331: enc424j600_clearInterruptFlag(flag);
 18258  006246  0100               	movlb	0	; () banked
 18259  006248  5172               	movf	ethernetController_clearInterruptFlag@flag& (0+255),w,b
 18260  00624A  EC06  F028         	call	_enc424j600_clearInterruptFlag
 18261  00624E  0012               	return		;funcret
 18262  006250                     __end_of_ethernetController_clearInterruptFlag:
 18263                           	opt stack 0
 18264                           tblptru	equ	0xFF8
 18265                           tblptrh	equ	0xFF7
 18266                           tblptrl	equ	0xFF6
 18267                           tablat	equ	0xFF5
 18268                           prodh	equ	0xFF4
 18269                           prodl	equ	0xFF3
 18270                           intcon	equ	0xFF2
 18271                           intcon3	equ	0xFF0
 18272                           indf0	equ	0xFEF
 18273                           postinc0	equ	0xFEE
 18274                           plusw0	equ	0xFEB
 18275                           fsr0h	equ	0xFEA
 18276                           fsr0l	equ	0xFE9
 18277                           wreg	equ	0xFE8
 18278                           indf1	equ	0xFE7
 18279                           postinc1	equ	0xFE6
 18280                           postdec1	equ	0xFE5
 18281                           plusw1	equ	0xFE3
 18282                           fsr1h	equ	0xFE2
 18283                           fsr1l	equ	0xFE1
 18284                           indf2	equ	0xFDF
 18285                           postinc2	equ	0xFDE
 18286                           postdec2	equ	0xFDD
 18287                           plusw2	equ	0xFDB
 18288                           fsr2h	equ	0xFDA
 18289                           fsr2l	equ	0xFD9
 18290                           status	equ	0xFD8
 18291                           
 18292 ;; *************** function _enc424j600_clearInterruptFlag *****************
 18293 ;; Defined at:
 18294 ;;		line 703 in file "src/enc424j600/ENC424J600.c"
 18295 ;; Parameters:    Size  Location     Type
 18296 ;;  flag            1    wreg     unsigned char 
 18297 ;; Auto vars:     Size  Location     Type
 18298 ;;  flag            1   16[BANK0 ] unsigned char 
 18299 ;;  temp            1   17[BANK0 ] unsigned char 
 18300 ;; Return value:  Size  Location     Type
 18301 ;;                  1    wreg      void 
 18302 ;; Registers used:
 18303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18304 ;; Tracked objects:
 18305 ;;		On entry : 0/0
 18306 ;;		On exit  : 0/0
 18307 ;;		Unchanged: 0/0
 18308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18309 ;;      Params:         0       0       0       0       0       0       0       0       0
 18310 ;;      Locals:         0       2       0       0       0       0       0       0       0
 18311 ;;      Temps:          0       2       0       0       0       0       0       0       0
 18312 ;;      Totals:         0       4       0       0       0       0       0       0       0
 18313 ;;Total ram usage:        4 bytes
 18314 ;; Hardware stack levels used:    1
 18315 ;; Hardware stack levels required when called:    7
 18316 ;; This function calls:
 18317 ;;		_enc424j600_readControlRegisterUnbanked
 18318 ;;		_enc424j600_writeControlRegisterUnbanked
 18319 ;; This function is called by:
 18320 ;;		_ethernetController_clearInterruptFlag
 18321 ;; This function uses a non-reentrant model
 18322 ;;
 18323                           
 18324                           	psect	text65
 18325  00500C                     __ptext65:
 18326                           	opt stack 0
 18327  00500C                     _enc424j600_clearInterruptFlag:
 18328                           	opt stack 21
 18329                           
 18330                           ;incstack = 0
 18331                           ;enc424j600_clearInterruptFlag@flag stored from wreg
 18332  00500C  0100               	movlb	0	; () banked
 18333  00500E  6F70               	movwf	enc424j600_clearInterruptFlag@flag& (0+255),b
 18334                           
 18335                           ;ENC424J600.c: 704: uint8_t temp;
 18336                           ;ENC424J600.c: 705: if (flag < 8) {
 18337  005010  0E08               	movlw	8
 18338  005012  0100               	movlb	0	; () banked
 18339  005014  6170               	cpfslt	enc424j600_clearInterruptFlag@flag& (0+255),b
 18340  005016  D01E               	goto	l317
 18341                           
 18342                           ; BSR set to: 0
 18343                           ;ENC424J600.c: 706: enc424j600_readControlRegisterUnbanked(0x1C + 0x00, &temp);
 18344  005018  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 18345  00501A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18346  00501C  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 18347  00501E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18348  005020  0E1C               	movlw	28
 18349  005022  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 18350                           
 18351                           ;ENC424J600.c: 707: temp &= ~(1 << flag);
 18352  005026  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 18353  00502A  0E01               	movlw	1
 18354  00502C  0100               	movlb	0	; () banked
 18355  00502E  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 18356  005030  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 18357  005032  D002               	goto	u12684
 18358  005034                     u12685:
 18359  005034  90D8               	bcf	status,0,c
 18360  005036  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 18361  005038                     u12684:
 18362  005038  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 18363  00503A  D7FC               	goto	u12685
 18364  00503C  0100               	movlb	0	; () banked
 18365  00503E  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 18366  005040  0AFF               	xorlw	255
 18367  005042  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;ENC424J600.c: 708: enc424j600_writeControlRegisterUnbanked(0x1C + 0x00, &temp);
 18371  005044  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 18372  005046  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 18373  005048  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 18374  00504A  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18375  00504C  0E1C               	movlw	28
 18376  00504E  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 18377                           
 18378                           ;ENC424J600.c: 709: } else {
 18379  005052  0012               	return	
 18380  005054                     l317:
 18381                           
 18382                           ;ENC424J600.c: 710: flag -= 8;
 18383  005054  0E08               	movlw	8
 18384  005056  0100               	movlb	0	; () banked
 18385  005058  5F70               	subwf	enc424j600_clearInterruptFlag@flag& (0+255),f,b
 18386                           
 18387                           ; BSR set to: 0
 18388                           ;ENC424J600.c: 711: enc424j600_readControlRegisterUnbanked(0x1D + 0x00, &temp);
 18389  00505A  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 18390  00505C  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 18391  00505E  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 18392  005060  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 18393  005062  0E1D               	movlw	29
 18394  005064  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 18395                           
 18396                           ;ENC424J600.c: 712: temp &= ~(1 << flag);
 18397  005068  C070  F06E         	movff	enc424j600_clearInterruptFlag@flag,??_enc424j600_clearInterruptFlag
 18398  00506C  0E01               	movlw	1
 18399  00506E  0100               	movlb	0	; () banked
 18400  005070  6F6F               	movwf	(??_enc424j600_clearInterruptFlag+1)& (0+255),b
 18401  005072  2B6E               	incf	??_enc424j600_clearInterruptFlag& (0+255),f,b
 18402  005074  D002               	goto	u12694
 18403  005076                     u12695:
 18404  005076  90D8               	bcf	status,0,c
 18405  005078  376F               	rlcf	(??_enc424j600_clearInterruptFlag+1)& (0+255),f,b
 18406  00507A                     u12694:
 18407  00507A  2F6E               	decfsz	??_enc424j600_clearInterruptFlag& (0+255),f,b
 18408  00507C  D7FC               	goto	u12695
 18409  00507E  0100               	movlb	0	; () banked
 18410  005080  516F               	movf	(??_enc424j600_clearInterruptFlag+1)& (0+255),w,b
 18411  005082  0AFF               	xorlw	255
 18412  005084  1771               	andwf	enc424j600_clearInterruptFlag@temp& (0+255),f,b
 18413                           
 18414                           ;ENC424J600.c: 713: enc424j600_writeControlRegisterUnbanked(0x1D + 0x00, &temp);
 18415  005086  0E71               	movlw	low enc424j600_clearInterruptFlag@temp
 18416  005088  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 18417  00508A  0E00               	movlw	high enc424j600_clearInterruptFlag@temp
 18418  00508C  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 18419  00508E  0E1D               	movlw	29
 18420  005090  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 18421  005094  0012               	return	
 18422  005096                     __end_of_enc424j600_clearInterruptFlag:
 18423                           	opt stack 0
 18424                           tblptru	equ	0xFF8
 18425                           tblptrh	equ	0xFF7
 18426                           tblptrl	equ	0xFF6
 18427                           tablat	equ	0xFF5
 18428                           prodh	equ	0xFF4
 18429                           prodl	equ	0xFF3
 18430                           intcon	equ	0xFF2
 18431                           intcon3	equ	0xFF0
 18432                           indf0	equ	0xFEF
 18433                           postinc0	equ	0xFEE
 18434                           plusw0	equ	0xFEB
 18435                           fsr0h	equ	0xFEA
 18436                           fsr0l	equ	0xFE9
 18437                           wreg	equ	0xFE8
 18438                           indf1	equ	0xFE7
 18439                           postinc1	equ	0xFE6
 18440                           postdec1	equ	0xFE5
 18441                           plusw1	equ	0xFE3
 18442                           fsr1h	equ	0xFE2
 18443                           fsr1l	equ	0xFE1
 18444                           indf2	equ	0xFDF
 18445                           postinc2	equ	0xFDE
 18446                           postdec2	equ	0xFDD
 18447                           plusw2	equ	0xFDB
 18448                           fsr2h	equ	0xFDA
 18449                           fsr2l	equ	0xFD9
 18450                           status	equ	0xFD8
 18451                           
 18452 ;; *************** function _arp_init *****************
 18453 ;; Defined at:
 18454 ;;		line 509 in file "src/stack/protocols/arp.c"
 18455 ;; Parameters:    Size  Location     Type
 18456 ;;		None
 18457 ;; Auto vars:     Size  Location     Type
 18458 ;;  i               1   92[BANK0 ] unsigned char 
 18459 ;;  mac             6   82[BANK0 ] struct macaddress
 18460 ;;  ip              4   88[BANK0 ] struct ipv4_address
 18461 ;; Return value:  Size  Location     Type
 18462 ;;                  1    wreg      void 
 18463 ;; Registers used:
 18464 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18465 ;; Tracked objects:
 18466 ;;		On entry : 0/0
 18467 ;;		On exit  : 0/0
 18468 ;;		Unchanged: 0/0
 18469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18470 ;;      Params:         0       0       0       0       0       0       0       0       0
 18471 ;;      Locals:         0      11       0       0       0       0       0       0       0
 18472 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18473 ;;      Totals:         0      11       0       0       0       0       0       0       0
 18474 ;;Total ram usage:       11 bytes
 18475 ;; Hardware stack levels used:    1
 18476 ;; Hardware stack levels required when called:    7
 18477 ;; This function calls:
 18478 ;;		_UARTTransmitText
 18479 ;;		_arp_setNewEntry
 18480 ;;		_ipv4_setToAllZero
 18481 ;;		_mac_setAllZero
 18482 ;; This function is called by:
 18483 ;;		_handleStackBackgroundTasks
 18484 ;;		_stack_init
 18485 ;; This function uses a non-reentrant model
 18486 ;;
 18487                           
 18488                           	psect	text66
 18489  005402                     __ptext66:
 18490                           	opt stack 0
 18491  005402                     _arp_init:
 18492                           	opt stack 22
 18493                           
 18494                           ;arp.c: 510: macaddress_t mac;
 18495                           ;arp.c: 511: ipv4_address_t ip;
 18496                           ;arp.c: 512: mac_setAllZero(&mac);
 18497                           
 18498                           ;incstack = 0
 18499  005402  0EB2               	movlw	low arp_init@mac
 18500  005404  0100               	movlb	0	; () banked
 18501  005406  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 18502  005408  0E00               	movlw	high arp_init@mac
 18503  00540A  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 18504  00540C  EC14  F030         	call	_mac_setAllZero	;wreg free
 18505                           
 18506                           ;arp.c: 513: ipv4_setToAllZero(&ip);
 18507  005410  0EB8               	movlw	low arp_init@ip
 18508  005412  0100               	movlb	0	; () banked
 18509  005414  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 18510  005416  0E00               	movlw	high arp_init@ip
 18511  005418  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 18512  00541A  EC01  F030         	call	_ipv4_setToAllZero	;wreg free
 18513                           
 18514                           ;arp.c: 515: for (uint8_t i = 0; i < 8u; i++)
 18515  00541E  0E00               	movlw	0
 18516  005420  0100               	movlb	0	; () banked
 18517  005422  6FBC               	movwf	arp_init@i& (0+255),b
 18518  005424                     l11195:
 18519                           
 18520                           ; BSR set to: 0
 18521  005424  0E07               	movlw	7
 18522  005426  65BC               	cpfsgt	arp_init@i& (0+255),b
 18523  005428  D001               	goto	l1116
 18524  00542A  D01E               	goto	u13570
 18525  00542C                     l1116:
 18526                           
 18527                           ; BSR set to: 0
 18528                           ;arp.c: 516: arp_setNewEntry(mac, ip, 0xffffffff);
 18529                           
 18530                           ; BSR set to: 0
 18531  00542C  EE20  F0B2         	lfsr	2,arp_init@mac
 18532  005430  EE00  F09A         	lfsr	0,arp_setNewEntry@mac
 18533  005434  0E05               	movlw	5
 18534  005436                     u13561:
 18535  005436  CFDB FFEB          	movff	plusw2,plusw0
 18536  00543A  06E8               	decf	wreg,f,c
 18537  00543C  E2FC               	bc	u13561
 18538  00543E  C0B8  F0A0         	movff	arp_init@ip,arp_setNewEntry@ip
 18539  005442  C0B9  F0A1         	movff	arp_init@ip+1,arp_setNewEntry@ip+1
 18540  005446  C0BA  F0A2         	movff	arp_init@ip+2,arp_setNewEntry@ip+2
 18541  00544A  C0BB  F0A3         	movff	arp_init@ip+3,arp_setNewEntry@ip+3
 18542  00544E  0EFF               	movlw	255
 18543  005450  6FA4               	movwf	arp_setNewEntry@timestamp& (0+255),b
 18544  005452  0EFF               	movlw	255
 18545  005454  6FA5               	movwf	(arp_setNewEntry@timestamp+1)& (0+255),b
 18546  005456  0EFF               	movlw	255
 18547  005458  6FA6               	movwf	(arp_setNewEntry@timestamp+2)& (0+255),b
 18548  00545A  0EFF               	movlw	255
 18549  00545C  6FA7               	movwf	(arp_setNewEntry@timestamp+3)& (0+255),b
 18550  00545E  EC23  F01A         	call	_arp_setNewEntry	;wreg free
 18551  005462  0100               	movlb	0	; () banked
 18552  005464  2BBC               	incf	arp_init@i& (0+255),f,b
 18553  005466  D7DE               	goto	l11195
 18554  005468                     u13570:
 18555                           
 18556                           ; BSR set to: 0
 18557                           ;arp.c: 519: UARTTransmitText("[ARP]: Table was reset successfully.\n\r");
 18558                           
 18559                           ; BSR set to: 0
 18560  005468  0EDF               	movlw	low STR_118
 18561  00546A  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18562  00546C  0E7A               	movlw	high STR_118
 18563  00546E  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18564  005470  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18565  005474  0012               	return		;funcret
 18566  005476                     __end_of_arp_init:
 18567                           	opt stack 0
 18568                           tblptru	equ	0xFF8
 18569                           tblptrh	equ	0xFF7
 18570                           tblptrl	equ	0xFF6
 18571                           tablat	equ	0xFF5
 18572                           prodh	equ	0xFF4
 18573                           prodl	equ	0xFF3
 18574                           intcon	equ	0xFF2
 18575                           intcon3	equ	0xFF0
 18576                           indf0	equ	0xFEF
 18577                           postinc0	equ	0xFEE
 18578                           plusw0	equ	0xFEB
 18579                           fsr0h	equ	0xFEA
 18580                           fsr0l	equ	0xFE9
 18581                           wreg	equ	0xFE8
 18582                           indf1	equ	0xFE7
 18583                           postinc1	equ	0xFE6
 18584                           postdec1	equ	0xFE5
 18585                           plusw1	equ	0xFE3
 18586                           fsr1h	equ	0xFE2
 18587                           fsr1l	equ	0xFE1
 18588                           indf2	equ	0xFDF
 18589                           postinc2	equ	0xFDE
 18590                           postdec2	equ	0xFDD
 18591                           plusw2	equ	0xFDB
 18592                           fsr2h	equ	0xFDA
 18593                           fsr2l	equ	0xFD9
 18594                           status	equ	0xFD8
 18595                           
 18596 ;; *************** function _arp_setNewEntry *****************
 18597 ;; Defined at:
 18598 ;;		line 482 in file "src/stack/protocols/arp.c"
 18599 ;; Parameters:    Size  Location     Type
 18600 ;;  mac             6   58[BANK0 ] struct macaddress
 18601 ;;  ip              4   64[BANK0 ] struct ipv4_address
 18602 ;;  timestamp       4   68[BANK0 ] unsigned long 
 18603 ;; Auto vars:     Size  Location     Type
 18604 ;;  i               1   81[BANK0 ] unsigned char 
 18605 ;;  maxSeconds      4   76[BANK0 ] unsigned long 
 18606 ;;  oldestIndex     1   80[BANK0 ] unsigned char 
 18607 ;; Return value:  Size  Location     Type
 18608 ;;                  1    wreg      void 
 18609 ;; Registers used:
 18610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18611 ;; Tracked objects:
 18612 ;;		On entry : 0/0
 18613 ;;		On exit  : 0/0
 18614 ;;		Unchanged: 0/0
 18615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18616 ;;      Params:         0      14       0       0       0       0       0       0       0
 18617 ;;      Locals:         0       6       0       0       0       0       0       0       0
 18618 ;;      Temps:          0       4       0       0       0       0       0       0       0
 18619 ;;      Totals:         0      24       0       0       0       0       0       0       0
 18620 ;;Total ram usage:       24 bytes
 18621 ;; Hardware stack levels used:    1
 18622 ;; Hardware stack levels required when called:    6
 18623 ;; This function calls:
 18624 ;;		_UARTTransmitText
 18625 ;;		_ipAdressToString
 18626 ;;		_ipv4_isAllZero
 18627 ;;		_macToString
 18628 ;;		_mac_isAllZero
 18629 ;; This function is called by:
 18630 ;;		_arp_handleNewPacket
 18631 ;;		_arp_init
 18632 ;; This function uses a non-reentrant model
 18633 ;;
 18634                           
 18635                           	psect	text67
 18636  003446                     __ptext67:
 18637                           	opt stack 0
 18638  003446                     _arp_setNewEntry:
 18639                           	opt stack 22
 18640                           
 18641                           ;arp.c: 483: time_t maxSeconds = 0;
 18642                           
 18643                           ;incstack = 0
 18644  003446  0E00               	movlw	0
 18645  003448  0100               	movlb	0	; () banked
 18646  00344A  6FAC               	movwf	arp_setNewEntry@maxSeconds& (0+255),b
 18647  00344C  0E00               	movlw	0
 18648  00344E  6FAD               	movwf	(arp_setNewEntry@maxSeconds+1)& (0+255),b
 18649  003450  0E00               	movlw	0
 18650  003452  6FAE               	movwf	(arp_setNewEntry@maxSeconds+2)& (0+255),b
 18651  003454  0E00               	movlw	0
 18652  003456  6FAF               	movwf	(arp_setNewEntry@maxSeconds+3)& (0+255),b
 18653                           
 18654                           ;arp.c: 484: uint8_t oldestIndex = 0;
 18655  003458  0E00               	movlw	0
 18656  00345A  6FB0               	movwf	arp_setNewEntry@oldestIndex& (0+255),b
 18657                           
 18658                           ;arp.c: 486: for (uint8_t i = 0; i < 8u; i++) {
 18659  00345C  0E00               	movlw	0
 18660  00345E  6FB1               	movwf	arp_setNewEntry@i& (0+255),b
 18661  003460                     l10299:
 18662                           
 18663                           ; BSR set to: 0
 18664  003460  0E07               	movlw	7
 18665  003462  65B1               	cpfsgt	arp_setNewEntry@i& (0+255),b
 18666  003464  D001               	goto	l1107
 18667  003466  D02E               	goto	u12290
 18668  003468                     l1107:
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;arp.c: 487: if (arp_table[i].timeCreated > maxSeconds) {
 18672                           
 18673                           ; BSR set to: 0
 18674  003468  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 18675  00346A  0D0E               	mullw	14
 18676  00346C  0E0A               	movlw	10
 18677  00346E  26F3               	addwf	prodl,f,c
 18678  003470  0E00               	movlw	0
 18679  003472  22F4               	addwfc	prodh,f,c
 18680  003474  0E00               	movlw	low _arp_table
 18681  003476  24F3               	addwf	prodl,w,c
 18682  003478  6ED9               	movwf	fsr2l,c
 18683  00347A  0E04               	movlw	high _arp_table
 18684  00347C  20F4               	addwfc	prodh,w,c
 18685  00347E  6EDA               	movwf	fsr2h,c
 18686  003480  50DE               	movf	postinc2,w,c
 18687  003482  5DAC               	subwf	arp_setNewEntry@maxSeconds& (0+255),w,b
 18688  003484  50DE               	movf	postinc2,w,c
 18689  003486  59AD               	subwfb	(arp_setNewEntry@maxSeconds+1)& (0+255),w,b
 18690  003488  50DE               	movf	postinc2,w,c
 18691  00348A  59AE               	subwfb	(arp_setNewEntry@maxSeconds+2)& (0+255),w,b
 18692  00348C  50DE               	movf	postinc2,w,c
 18693  00348E  59AF               	subwfb	(arp_setNewEntry@maxSeconds+3)& (0+255),w,b
 18694  003490  B0D8               	btfsc	status,0,c
 18695  003492  D016               	goto	l1109
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;arp.c: 488: maxSeconds = arp_table[i].timeCreated;
 18699  003494  51B1               	movf	arp_setNewEntry@i& (0+255),w,b
 18700  003496  0D0E               	mullw	14
 18701  003498  0E0A               	movlw	10
 18702  00349A  26F3               	addwf	prodl,f,c
 18703  00349C  0E00               	movlw	0
 18704  00349E  22F4               	addwfc	prodh,f,c
 18705  0034A0  0E00               	movlw	low _arp_table
 18706  0034A2  24F3               	addwf	prodl,w,c
 18707  0034A4  6ED9               	movwf	fsr2l,c
 18708  0034A6  0E04               	movlw	high _arp_table
 18709  0034A8  20F4               	addwfc	prodh,w,c
 18710  0034AA  6EDA               	movwf	fsr2h,c
 18711  0034AC  CFDE F0AC          	movff	postinc2,arp_setNewEntry@maxSeconds
 18712  0034B0  CFDE F0AD          	movff	postinc2,arp_setNewEntry@maxSeconds+1
 18713  0034B4  CFDE F0AE          	movff	postinc2,arp_setNewEntry@maxSeconds+2
 18714  0034B8  CFDE F0AF          	movff	postinc2,arp_setNewEntry@maxSeconds+3
 18715                           
 18716                           ; BSR set to: 0
 18717                           ;arp.c: 489: oldestIndex = i;
 18718  0034BC  C0B1  F0B0         	movff	arp_setNewEntry@i,arp_setNewEntry@oldestIndex
 18719  0034C0                     l1109:
 18720                           
 18721                           ; BSR set to: 0
 18722                           
 18723                           ; BSR set to: 0
 18724  0034C0  2BB1               	incf	arp_setNewEntry@i& (0+255),f,b
 18725  0034C2  D7CE               	goto	l10299
 18726  0034C4                     u12290:
 18727                           
 18728                           ; BSR set to: 0
 18729                           ;arp.c: 490: }
 18730                           ;arp.c: 491: }
 18731                           ;arp.c: 493: arp_table[oldestIndex].ip = ip;
 18732                           
 18733                           ; BSR set to: 0
 18734  0034C4  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 18735  0034C6  0D0E               	mullw	14
 18736  0034C8  0E00               	movlw	low _arp_table
 18737  0034CA  24F3               	addwf	prodl,w,c
 18738  0034CC  6ED9               	movwf	fsr2l,c
 18739  0034CE  0E04               	movlw	high _arp_table
 18740  0034D0  20F4               	addwfc	prodh,w,c
 18741  0034D2  6EDA               	movwf	fsr2h,c
 18742  0034D4  C0A0  FFDE         	movff	arp_setNewEntry@ip,postinc2
 18743  0034D8  C0A1  FFDE         	movff	arp_setNewEntry@ip+1,postinc2
 18744  0034DC  C0A2  FFDE         	movff	arp_setNewEntry@ip+2,postinc2
 18745  0034E0  C0A3  FFDE         	movff	arp_setNewEntry@ip+3,postinc2
 18746                           
 18747                           ; BSR set to: 0
 18748                           ;arp.c: 494: arp_table[oldestIndex].mac = mac;
 18749  0034E4  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 18750  0034E8  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 18751  0034EA  0D0E               	mullw	14
 18752  0034EC  0E04               	movlw	4
 18753  0034EE  26F3               	addwf	prodl,f,c
 18754  0034F0  0E00               	movlw	0
 18755  0034F2  22F4               	addwfc	prodh,f,c
 18756  0034F4  0E00               	movlw	low _arp_table
 18757  0034F6  24F3               	addwf	prodl,w,c
 18758  0034F8  6EE1               	movwf	fsr1l,c
 18759  0034FA  0E04               	movlw	high _arp_table
 18760  0034FC  20F4               	addwfc	prodh,w,c
 18761  0034FE  6EE2               	movwf	fsr1h,c
 18762  003500  0E05               	movlw	5
 18763  003502                     u12301:
 18764  003502  CFDB FFE3          	movff	plusw2,plusw1
 18765  003506  06E8               	decf	wreg,f,c
 18766  003508  E2FC               	bc	u12301
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;arp.c: 495: arp_table[oldestIndex].timeCreated = timestamp;
 18770  00350A  51B0               	movf	arp_setNewEntry@oldestIndex& (0+255),w,b
 18771  00350C  0D0E               	mullw	14
 18772  00350E  0E0A               	movlw	10
 18773  003510  26F3               	addwf	prodl,f,c
 18774  003512  0E00               	movlw	0
 18775  003514  22F4               	addwfc	prodh,f,c
 18776  003516  0E00               	movlw	low _arp_table
 18777  003518  24F3               	addwf	prodl,w,c
 18778  00351A  6ED9               	movwf	fsr2l,c
 18779  00351C  0E04               	movlw	high _arp_table
 18780  00351E  20F4               	addwfc	prodh,w,c
 18781  003520  6EDA               	movwf	fsr2h,c
 18782  003522  C0A4  FFDE         	movff	arp_setNewEntry@timestamp,postinc2
 18783  003526  C0A5  FFDE         	movff	arp_setNewEntry@timestamp+1,postinc2
 18784  00352A  C0A6  FFDE         	movff	arp_setNewEntry@timestamp+2,postinc2
 18785  00352E  C0A7  FFDE         	movff	arp_setNewEntry@timestamp+3,postinc2
 18786                           
 18787                           ; BSR set to: 0
 18788                           ;arp.c: 497: if (!((mac_isAllZero(&mac)) && ipv4_isAllZero(&ip))) {
 18789  003532  0E9A               	movlw	low arp_setNewEntry@mac
 18790  003534  6F60               	movwf	mac_isAllZero@mac& (0+255),b
 18791  003536  0E00               	movlw	high arp_setNewEntry@mac
 18792  003538  6F61               	movwf	(mac_isAllZero@mac+1)& (0+255),b
 18793  00353A  EC2A  F02F         	call	_mac_isAllZero	;wreg free
 18794  00353E  0100               	movlb	0	; () banked
 18795  003540  A0D8               	btfss	status,0,c
 18796  003542  D009               	goto	u12320
 18797                           
 18798                           ; BSR set to: 0
 18799  003544  0EA0               	movlw	low arp_setNewEntry@ip
 18800  003546  6F60               	movwf	ipv4_isAllZero@ip& (0+255),b
 18801  003548  0E00               	movlw	high arp_setNewEntry@ip
 18802  00354A  6F61               	movwf	(ipv4_isAllZero@ip+1)& (0+255),b
 18803  00354C  EC42  F02F         	call	_ipv4_isAllZero	;wreg free
 18804  003550  0100               	movlb	0	; () banked
 18805  003552  B0D8               	btfsc	status,0,c
 18806  003554  0012               	return	
 18807  003556                     u12320:
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;arp.c: 498: UARTTransmitText("\033[44;10;10m");
 18811                           
 18812                           ; BSR set to: 0
 18813  003556  0E2F               	movlw	low STR_8
 18814  003558  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18815  00355A  0E7F               	movlw	high STR_8
 18816  00355C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18817  00355E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18818                           
 18819                           ;arp.c: 499: UARTTransmitText("[ARP]: New entry created for ");
 18820  003562  0E21               	movlw	low STR_114
 18821  003564  0100               	movlb	0	; () banked
 18822  003566  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18823  003568  0E7C               	movlw	high STR_114
 18824  00356A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18825  00356C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18826                           
 18827                           ;arp.c: 500: UARTTransmitText(ipAdressToString(ip));
 18828  003570  C0A0  F073         	movff	arp_setNewEntry@ip,ipAdressToString@ip
 18829  003574  C0A1  F074         	movff	arp_setNewEntry@ip+1,ipAdressToString@ip+1
 18830  003578  C0A2  F075         	movff	arp_setNewEntry@ip+2,ipAdressToString@ip+2
 18831  00357C  C0A3  F076         	movff	arp_setNewEntry@ip+3,ipAdressToString@ip+3
 18832  003580  EC96  F016         	call	_ipAdressToString	;wreg free
 18833  003584  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 18834  003588  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 18835  00358C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18836                           
 18837                           ;arp.c: 501: UARTTransmitText(" (");
 18838  003590  0EEF               	movlw	low STR_31
 18839  003592  0100               	movlb	0	; () banked
 18840  003594  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18841  003596  0E7F               	movlw	high STR_31
 18842  003598  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18843  00359A  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18844                           
 18845                           ;arp.c: 502: UARTTransmitText(macToString(mac));
 18846  00359E  EE20  F09A         	lfsr	2,arp_setNewEntry@mac
 18847  0035A2  EE00  F07A         	lfsr	0,macToString@addr
 18848  0035A6  0E05               	movlw	5
 18849  0035A8                     u12331:
 18850  0035A8  CFDB FFEB          	movff	plusw2,plusw0
 18851  0035AC  06E8               	decf	wreg,f,c
 18852  0035AE  E2FC               	bc	u12331
 18853  0035B0  EC55  F023         	call	_macToString	;wreg free
 18854  0035B4  C07A  F098         	movff	?_macToString,UARTTransmitText@str
 18855  0035B8  C07B  F099         	movff	?_macToString+1,UARTTransmitText@str+1
 18856  0035BC  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18857                           
 18858                           ;arp.c: 503: UARTTransmitText(") ");
 18859  0035C0  0EEC               	movlw	low STR_32
 18860  0035C2  0100               	movlb	0	; () banked
 18861  0035C4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18862  0035C6  0E7F               	movlw	high STR_32
 18863  0035C8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18864  0035CA  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18865                           
 18866                           ;arp.c: 504: UARTTransmitText("\033[0m");
 18867  0035CE  0ED7               	movlw	low STR_7
 18868  0035D0  0100               	movlb	0	; () banked
 18869  0035D2  6F98               	movwf	UARTTransmitText@str& (0+255),b
 18870  0035D4  0E7F               	movlw	high STR_7
 18871  0035D6  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 18872  0035D8  EC42  F02C         	call	_UARTTransmitText	;wreg free
 18873  0035DC  0012               	return	
 18874  0035DE                     __end_of_arp_setNewEntry:
 18875                           	opt stack 0
 18876                           tblptru	equ	0xFF8
 18877                           tblptrh	equ	0xFF7
 18878                           tblptrl	equ	0xFF6
 18879                           tablat	equ	0xFF5
 18880                           prodh	equ	0xFF4
 18881                           prodl	equ	0xFF3
 18882                           intcon	equ	0xFF2
 18883                           intcon3	equ	0xFF0
 18884                           indf0	equ	0xFEF
 18885                           postinc0	equ	0xFEE
 18886                           plusw0	equ	0xFEB
 18887                           fsr0h	equ	0xFEA
 18888                           fsr0l	equ	0xFE9
 18889                           wreg	equ	0xFE8
 18890                           indf1	equ	0xFE7
 18891                           postinc1	equ	0xFE6
 18892                           postdec1	equ	0xFE5
 18893                           plusw1	equ	0xFE3
 18894                           fsr1h	equ	0xFE2
 18895                           fsr1l	equ	0xFE1
 18896                           indf2	equ	0xFDF
 18897                           postinc2	equ	0xFDE
 18898                           postdec2	equ	0xFDD
 18899                           plusw2	equ	0xFDB
 18900                           fsr2h	equ	0xFDA
 18901                           fsr2l	equ	0xFD9
 18902                           status	equ	0xFD8
 18903                           
 18904 ;; *************** function _mac_isAllZero *****************
 18905 ;; Defined at:
 18906 ;;		line 31 in file "src/eth/mac.c"
 18907 ;; Parameters:    Size  Location     Type
 18908 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 18909 ;;		 -> arp_setNewEntry@mac(6), arp_parseFromRXBuffer@arp(32), 
 18910 ;; Auto vars:     Size  Location     Type
 18911 ;;  i               1    2[BANK0 ] unsigned char 
 18912 ;; Return value:  Size  Location     Type
 18913 ;;		None               void
 18914 ;; Registers used:
 18915 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18916 ;; Tracked objects:
 18917 ;;		On entry : 0/0
 18918 ;;		On exit  : 0/0
 18919 ;;		Unchanged: 0/0
 18920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18921 ;;      Params:         0       2       0       0       0       0       0       0       0
 18922 ;;      Locals:         0       1       0       0       0       0       0       0       0
 18923 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18924 ;;      Totals:         0       3       0       0       0       0       0       0       0
 18925 ;;Total ram usage:        3 bytes
 18926 ;; Hardware stack levels used:    1
 18927 ;; Hardware stack levels required when called:    4
 18928 ;; This function calls:
 18929 ;;		Nothing
 18930 ;; This function is called by:
 18931 ;;		_arp_parseFromRXBuffer
 18932 ;;		_arp_setNewEntry
 18933 ;; This function uses a non-reentrant model
 18934 ;;
 18935                           
 18936                           	psect	text68
 18937  005E54                     __ptext68:
 18938                           	opt stack 0
 18939  005E54                     _mac_isAllZero:
 18940                           	opt stack 23
 18941                           
 18942                           ;mac.c: 32: for (uint8_t i = 0; i < 6; i++) {
 18943                           
 18944                           ;incstack = 0
 18945  005E54  0E00               	movlw	0
 18946  005E56  0100               	movlb	0	; () banked
 18947  005E58  6F62               	movwf	mac_isAllZero@i& (0+255),b
 18948  005E5A                     l9859:
 18949                           
 18950                           ; BSR set to: 0
 18951  005E5A  0E05               	movlw	5
 18952  005E5C  6562               	cpfsgt	mac_isAllZero@i& (0+255),b
 18953  005E5E  D001               	goto	l384
 18954  005E60  D00F               	goto	u11160
 18955  005E62                     l384:
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;mac.c: 33: if (mac->address[i] != 0x00)
 18959                           
 18960                           ; BSR set to: 0
 18961  005E62  5162               	movf	mac_isAllZero@i& (0+255),w,b
 18962  005E64  0D01               	mullw	1
 18963  005E66  50F3               	movf	prodl,w,c
 18964  005E68  2560               	addwf	mac_isAllZero@mac& (0+255),w,b
 18965  005E6A  6ED9               	movwf	fsr2l,c
 18966  005E6C  50F4               	movf	prodh,w,c
 18967  005E6E  2161               	addwfc	(mac_isAllZero@mac+1)& (0+255),w,b
 18968  005E70  6EDA               	movwf	fsr2h,c
 18969  005E72  50DF               	movf	indf2,w,c
 18970  005E74  B4D8               	btfsc	status,2,c
 18971  005E76  D002               	goto	l386
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;mac.c: 34: return 0;
 18975  005E78  90D8               	bcf	status,0,c
 18976                           
 18977                           ; BSR set to: 0
 18978  005E7A  0012               	return	
 18979  005E7C                     l386:
 18980                           
 18981                           ; BSR set to: 0
 18982                           
 18983                           ; BSR set to: 0
 18984  005E7C  2B62               	incf	mac_isAllZero@i& (0+255),f,b
 18985  005E7E  D7ED               	goto	l9859
 18986  005E80                     u11160:
 18987                           
 18988                           ; BSR set to: 0
 18989                           ;mac.c: 35: }
 18990                           ;mac.c: 36: return 1;
 18991                           
 18992                           ; BSR set to: 0
 18993  005E80  80D8               	bsf	status,0,c
 18994  005E82  0012               	return	
 18995  005E84                     __end_of_mac_isAllZero:
 18996                           	opt stack 0
 18997                           tblptru	equ	0xFF8
 18998                           tblptrh	equ	0xFF7
 18999                           tblptrl	equ	0xFF6
 19000                           tablat	equ	0xFF5
 19001                           prodh	equ	0xFF4
 19002                           prodl	equ	0xFF3
 19003                           intcon	equ	0xFF2
 19004                           intcon3	equ	0xFF0
 19005                           indf0	equ	0xFEF
 19006                           postinc0	equ	0xFEE
 19007                           plusw0	equ	0xFEB
 19008                           fsr0h	equ	0xFEA
 19009                           fsr0l	equ	0xFE9
 19010                           wreg	equ	0xFE8
 19011                           indf1	equ	0xFE7
 19012                           postinc1	equ	0xFE6
 19013                           postdec1	equ	0xFE5
 19014                           plusw1	equ	0xFE3
 19015                           fsr1h	equ	0xFE2
 19016                           fsr1l	equ	0xFE1
 19017                           indf2	equ	0xFDF
 19018                           postinc2	equ	0xFDE
 19019                           postdec2	equ	0xFDD
 19020                           plusw2	equ	0xFDB
 19021                           fsr2h	equ	0xFDA
 19022                           fsr2l	equ	0xFD9
 19023                           status	equ	0xFD8
 19024                           
 19025 ;; *************** function _macToString *****************
 19026 ;; Defined at:
 19027 ;;		line 107 in file "src/system/uart.c"
 19028 ;; Parameters:    Size  Location     Type
 19029 ;;  addr            6   26[BANK0 ] struct macaddress
 19030 ;; Auto vars:     Size  Location     Type
 19031 ;;  i               2   53[BANK0 ] int 
 19032 ;;  address        18   33[BANK0 ] unsigned char [18]
 19033 ;;  j               1   55[BANK0 ] unsigned char 
 19034 ;;  secondDigit     1   52[BANK0 ] unsigned char 
 19035 ;;  firstDigit      1   51[BANK0 ] unsigned char 
 19036 ;; Return value:  Size  Location     Type
 19037 ;;                  2   26[BANK0 ] PTR unsigned char 
 19038 ;; Registers used:
 19039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19040 ;; Tracked objects:
 19041 ;;		On entry : 0/0
 19042 ;;		On exit  : 0/0
 19043 ;;		Unchanged: 0/0
 19044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19045 ;;      Params:         0       6       0       0       0       0       0       0       0
 19046 ;;      Locals:         0      23       0       0       0       0       0       0       0
 19047 ;;      Temps:          0       1       0       0       0       0       0       0       0
 19048 ;;      Totals:         0      30       0       0       0       0       0       0       0
 19049 ;;Total ram usage:       30 bytes
 19050 ;; Hardware stack levels used:    1
 19051 ;; Hardware stack levels required when called:    4
 19052 ;; This function calls:
 19053 ;;		Nothing
 19054 ;; This function is called by:
 19055 ;;		_ethernet_rxGetNewFrame
 19056 ;;		_main
 19057 ;;		_arp_handleNewPacket
 19058 ;;		_arp_sendReply
 19059 ;;		_arp_setNewEntry
 19060 ;;		_arpEntryToString
 19061 ;; This function uses a non-reentrant model
 19062 ;;
 19063                           
 19064                           	psect	text69
 19065  0046AA                     __ptext69:
 19066                           	opt stack 0
 19067  0046AA                     _macToString:
 19068                           	opt stack 23
 19069                           
 19070                           ;uart.c: 108: char address[] = "??:??:??:??:??:??";
 19071                           
 19072                           ; BSR set to: 0
 19073                           ;incstack = 0
 19074  0046AA  EE22  F08B         	lfsr	2,macToString@F5948
 19075  0046AE  EE10  F081         	lfsr	1,macToString@address
 19076  0046B2  0E11               	movlw	17
 19077  0046B4                     u11081:
 19078  0046B4  CFDB FFE3          	movff	plusw2,plusw1
 19079  0046B8  06E8               	decf	wreg,f,c
 19080  0046BA  E2FC               	bc	u11081
 19081                           
 19082                           ;uart.c: 109: uint8_t j = 0;
 19083  0046BC  0E00               	movlw	0
 19084  0046BE  0100               	movlb	0	; () banked
 19085  0046C0  6F97               	movwf	macToString@j& (0+255),b
 19086                           
 19087                           ; BSR set to: 0
 19088                           ;uart.c: 110: uint8_t firstDigit;
 19089                           ;uart.c: 111: uint8_t secondDigit;
 19090                           ;uart.c: 113: for (int i = 0; i < 6; i++) {
 19091  0046C2  0E00               	movlw	0
 19092  0046C4  6F96               	movwf	(macToString@i+1)& (0+255),b
 19093  0046C6  0E00               	movlw	0
 19094  0046C8  6F95               	movwf	macToString@i& (0+255),b
 19095                           
 19096                           ; BSR set to: 0
 19097  0046CA  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 19098  0046CC  D006               	goto	l860
 19099  0046CE  5196               	movf	(macToString@i+1)& (0+255),w,b
 19100  0046D0  E16B               	bnz	l861
 19101  0046D2  0E06               	movlw	6
 19102  0046D4  5D95               	subwf	macToString@i& (0+255),w,b
 19103  0046D6  B0D8               	btfsc	status,0,c
 19104  0046D8  D067               	goto	u11130
 19105  0046DA                     l860:
 19106                           
 19107                           ; BSR set to: 0
 19108                           ;uart.c: 114: firstDigit = ((addr.address[i] & 0xF0) >> 4)&0x0F;
 19109                           
 19110                           ; BSR set to: 0
 19111  0046DA  0E7A               	movlw	low macToString@addr
 19112  0046DC  2595               	addwf	macToString@i& (0+255),w,b
 19113  0046DE  6ED9               	movwf	fsr2l,c
 19114  0046E0  0E00               	movlw	high macToString@addr
 19115  0046E2  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 19116  0046E4  6EDA               	movwf	fsr2h,c
 19117  0046E6  50DF               	movf	indf2,w,c
 19118  0046E8  6F80               	movwf	??_macToString& (0+255),b
 19119  0046EA  3980               	swapf	??_macToString& (0+255),w,b
 19120  0046EC  0B0F               	andlw	15
 19121  0046EE  0B0F               	andlw	15
 19122  0046F0  6F93               	movwf	macToString@firstDigit& (0+255),b
 19123                           
 19124                           ;uart.c: 115: secondDigit = addr.address[i] & 0x0F;
 19125  0046F2  0E7A               	movlw	low macToString@addr
 19126  0046F4  2595               	addwf	macToString@i& (0+255),w,b
 19127  0046F6  6ED9               	movwf	fsr2l,c
 19128  0046F8  0E00               	movlw	high macToString@addr
 19129  0046FA  2196               	addwfc	(macToString@i+1)& (0+255),w,b
 19130  0046FC  6EDA               	movwf	fsr2h,c
 19131  0046FE  50DF               	movf	indf2,w,c
 19132  004700  0B0F               	andlw	15
 19133  004702  6F94               	movwf	macToString@secondDigit& (0+255),b
 19134                           
 19135                           ; BSR set to: 0
 19136                           ;uart.c: 117: firstDigit += 0x30;
 19137  004704  0E30               	movlw	48
 19138  004706  2793               	addwf	macToString@firstDigit& (0+255),f,b
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;uart.c: 118: secondDigit += 0x30;
 19142  004708  0E30               	movlw	48
 19143  00470A  2794               	addwf	macToString@secondDigit& (0+255),f,b
 19144                           
 19145                           ; BSR set to: 0
 19146                           ;uart.c: 120: if (firstDigit > '9') {
 19147  00470C  0E39               	movlw	57
 19148  00470E  6593               	cpfsgt	macToString@firstDigit& (0+255),b
 19149  004710  D00C               	goto	l862
 19150                           
 19151                           ; BSR set to: 0
 19152                           ;uart.c: 121: address[j++] = firstDigit + 7;
 19153  004712  5197               	movf	macToString@j& (0+255),w,b
 19154  004714  0D01               	mullw	1
 19155  004716  0E81               	movlw	low macToString@address
 19156  004718  24F3               	addwf	prodl,w,c
 19157  00471A  6ED9               	movwf	fsr2l,c
 19158  00471C  0E00               	movlw	high macToString@address
 19159  00471E  20F4               	addwfc	prodh,w,c
 19160  004720  6EDA               	movwf	fsr2h,c
 19161  004722  5193               	movf	macToString@firstDigit& (0+255),w,b
 19162  004724  0F07               	addlw	7
 19163  004726  6EDF               	movwf	indf2,c
 19164  004728  D00A               	goto	l9831
 19165  00472A                     l862:
 19166                           
 19167                           ; BSR set to: 0
 19168                           ;uart.c: 123: address[j++] = firstDigit;
 19169                           
 19170                           ; BSR set to: 0
 19171  00472A  5197               	movf	macToString@j& (0+255),w,b
 19172  00472C  0D01               	mullw	1
 19173  00472E  0E81               	movlw	low macToString@address
 19174  004730  24F3               	addwf	prodl,w,c
 19175  004732  6ED9               	movwf	fsr2l,c
 19176  004734  0E00               	movlw	high macToString@address
 19177  004736  20F4               	addwfc	prodh,w,c
 19178  004738  6EDA               	movwf	fsr2h,c
 19179  00473A  C093  FFDF         	movff	macToString@firstDigit,indf2
 19180  00473E                     l9831:
 19181                           
 19182                           ; BSR set to: 0
 19183  00473E  2B97               	incf	macToString@j& (0+255),f,b
 19184                           
 19185                           ; BSR set to: 0
 19186                           ;uart.c: 124: }
 19187                           ;uart.c: 125: if (secondDigit > '9') {
 19188                           
 19189                           ; BSR set to: 0
 19190  004740  0E39               	movlw	57
 19191  004742  6594               	cpfsgt	macToString@secondDigit& (0+255),b
 19192  004744  D00C               	goto	l864
 19193                           
 19194                           ; BSR set to: 0
 19195                           ;uart.c: 126: address[j++] = secondDigit + 7;
 19196  004746  5197               	movf	macToString@j& (0+255),w,b
 19197  004748  0D01               	mullw	1
 19198  00474A  0E81               	movlw	low macToString@address
 19199  00474C  24F3               	addwf	prodl,w,c
 19200  00474E  6ED9               	movwf	fsr2l,c
 19201  004750  0E00               	movlw	high macToString@address
 19202  004752  20F4               	addwfc	prodh,w,c
 19203  004754  6EDA               	movwf	fsr2h,c
 19204  004756  5194               	movf	macToString@secondDigit& (0+255),w,b
 19205  004758  0F07               	addlw	7
 19206  00475A  6EDF               	movwf	indf2,c
 19207  00475C  D00A               	goto	l9841
 19208  00475E                     l864:
 19209                           
 19210                           ; BSR set to: 0
 19211                           ;uart.c: 128: address[j++] = secondDigit;
 19212                           
 19213                           ; BSR set to: 0
 19214  00475E  5197               	movf	macToString@j& (0+255),w,b
 19215  004760  0D01               	mullw	1
 19216  004762  0E81               	movlw	low macToString@address
 19217  004764  24F3               	addwf	prodl,w,c
 19218  004766  6ED9               	movwf	fsr2l,c
 19219  004768  0E00               	movlw	high macToString@address
 19220  00476A  20F4               	addwfc	prodh,w,c
 19221  00476C  6EDA               	movwf	fsr2h,c
 19222  00476E  C094  FFDF         	movff	macToString@secondDigit,indf2
 19223  004772                     l9841:
 19224                           
 19225                           ; BSR set to: 0
 19226  004772  2B97               	incf	macToString@j& (0+255),f,b
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;uart.c: 129: }
 19230                           ;uart.c: 131: if (i < 5) {
 19231                           
 19232                           ; BSR set to: 0
 19233  004774  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 19234  004776  D006               	goto	u11120
 19235  004778  5196               	movf	(macToString@i+1)& (0+255),w,b
 19236  00477A  E10F               	bnz	l9849
 19237  00477C  0E05               	movlw	5
 19238  00477E  5D95               	subwf	macToString@i& (0+255),w,b
 19239  004780  B0D8               	btfsc	status,0,c
 19240  004782  D00B               	goto	l866
 19241  004784                     u11120:
 19242                           
 19243                           ; BSR set to: 0
 19244                           ;uart.c: 132: address[j++] = ':';
 19245  004784  5197               	movf	macToString@j& (0+255),w,b
 19246  004786  0D01               	mullw	1
 19247  004788  0E81               	movlw	low macToString@address
 19248  00478A  24F3               	addwf	prodl,w,c
 19249  00478C  6ED9               	movwf	fsr2l,c
 19250  00478E  0E00               	movlw	high macToString@address
 19251  004790  20F4               	addwfc	prodh,w,c
 19252  004792  6EDA               	movwf	fsr2h,c
 19253  004794  0E3A               	movlw	58
 19254  004796  6EDF               	movwf	indf2,c
 19255                           
 19256                           ; BSR set to: 0
 19257  004798  2B97               	incf	macToString@j& (0+255),f,b
 19258  00479A                     l866:
 19259  00479A                     l9849:
 19260                           
 19261                           ; BSR set to: 0
 19262  00479A  4B95               	infsnz	macToString@i& (0+255),f,b
 19263  00479C  2B96               	incf	(macToString@i+1)& (0+255),f,b
 19264                           
 19265                           ; BSR set to: 0
 19266  00479E  BF96               	btfsc	(macToString@i+1)& (0+255),7,b
 19267  0047A0  D79C               	goto	l860
 19268  0047A2  5196               	movf	(macToString@i+1)& (0+255),w,b
 19269  0047A4  E101               	bnz	l9853
 19270  0047A6  D795               	goto	L11
 19271  0047A8                     u11130:
 19272  0047A8                     l861:
 19273  0047A8                     l9853:
 19274                           
 19275                           ; BSR set to: 0
 19276                           ;uart.c: 133: }
 19277                           ;uart.c: 134: }
 19278                           ;uart.c: 135: return address;
 19279  0047A8  0E81               	movlw	low macToString@address
 19280  0047AA  6F7A               	movwf	?_macToString& (0+255),b
 19281  0047AC  0E00               	movlw	high macToString@address
 19282  0047AE  6F7B               	movwf	(?_macToString+1)& (0+255),b
 19283  0047B0  0012               	return	
 19284  0047B2                     __end_of_macToString:
 19285                           	opt stack 0
 19286                           tblptru	equ	0xFF8
 19287                           tblptrh	equ	0xFF7
 19288                           tblptrl	equ	0xFF6
 19289                           tablat	equ	0xFF5
 19290                           prodh	equ	0xFF4
 19291                           prodl	equ	0xFF3
 19292                           intcon	equ	0xFF2
 19293                           intcon3	equ	0xFF0
 19294                           indf0	equ	0xFEF
 19295                           postinc0	equ	0xFEE
 19296                           plusw0	equ	0xFEB
 19297                           fsr0h	equ	0xFEA
 19298                           fsr0l	equ	0xFE9
 19299                           wreg	equ	0xFE8
 19300                           indf1	equ	0xFE7
 19301                           postinc1	equ	0xFE6
 19302                           postdec1	equ	0xFE5
 19303                           plusw1	equ	0xFE3
 19304                           fsr1h	equ	0xFE2
 19305                           fsr1l	equ	0xFE1
 19306                           indf2	equ	0xFDF
 19307                           postinc2	equ	0xFDE
 19308                           postdec2	equ	0xFDD
 19309                           plusw2	equ	0xFDB
 19310                           fsr2h	equ	0xFDA
 19311                           fsr2l	equ	0xFD9
 19312                           status	equ	0xFD8
 19313                           
 19314 ;; *************** function _ipv4_isAllZero *****************
 19315 ;; Defined at:
 19316 ;;		line 462 in file "src/stack/protocols/ipv4.c"
 19317 ;; Parameters:    Size  Location     Type
 19318 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 19319 ;;		 -> arp_setNewEntry@ip(4), arp_parseFromRXBuffer@arp(32), arp_handleNewPacket@arp(32), 
 19320 ;; Auto vars:     Size  Location     Type
 19321 ;;  i               1    2[BANK0 ] unsigned char 
 19322 ;; Return value:  Size  Location     Type
 19323 ;;		None               void
 19324 ;; Registers used:
 19325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19326 ;; Tracked objects:
 19327 ;;		On entry : 0/0
 19328 ;;		On exit  : 0/0
 19329 ;;		Unchanged: 0/0
 19330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19331 ;;      Params:         0       2       0       0       0       0       0       0       0
 19332 ;;      Locals:         0       1       0       0       0       0       0       0       0
 19333 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19334 ;;      Totals:         0       3       0       0       0       0       0       0       0
 19335 ;;Total ram usage:        3 bytes
 19336 ;; Hardware stack levels used:    1
 19337 ;; Hardware stack levels required when called:    4
 19338 ;; This function calls:
 19339 ;;		Nothing
 19340 ;; This function is called by:
 19341 ;;		_arp_handleNewPacket
 19342 ;;		_arp_parseFromRXBuffer
 19343 ;;		_arp_setNewEntry
 19344 ;; This function uses a non-reentrant model
 19345 ;;
 19346                           
 19347                           	psect	text70
 19348  005E84                     __ptext70:
 19349                           	opt stack 0
 19350  005E84                     _ipv4_isAllZero:
 19351                           	opt stack 23
 19352                           
 19353                           ;ipv4.c: 463: for (uint8_t i = 0; i < 4; i++) {
 19354                           
 19355                           ; BSR set to: 0
 19356                           ;incstack = 0
 19357  005E84  0E00               	movlw	0
 19358  005E86  0100               	movlb	0	; () banked
 19359  005E88  6F62               	movwf	ipv4_isAllZero@i& (0+255),b
 19360  005E8A                     l9911:
 19361                           
 19362                           ; BSR set to: 0
 19363  005E8A  0E03               	movlw	3
 19364  005E8C  6562               	cpfsgt	ipv4_isAllZero@i& (0+255),b
 19365  005E8E  D001               	goto	l1259
 19366  005E90  D00F               	goto	u11240
 19367  005E92                     l1259:
 19368                           
 19369                           ; BSR set to: 0
 19370                           ;ipv4.c: 464: if (ip->address[i] != 0x00)
 19371                           
 19372                           ; BSR set to: 0
 19373  005E92  5162               	movf	ipv4_isAllZero@i& (0+255),w,b
 19374  005E94  0D01               	mullw	1
 19375  005E96  50F3               	movf	prodl,w,c
 19376  005E98  2560               	addwf	ipv4_isAllZero@ip& (0+255),w,b
 19377  005E9A  6ED9               	movwf	fsr2l,c
 19378  005E9C  50F4               	movf	prodh,w,c
 19379  005E9E  2161               	addwfc	(ipv4_isAllZero@ip+1)& (0+255),w,b
 19380  005EA0  6EDA               	movwf	fsr2h,c
 19381  005EA2  50DF               	movf	indf2,w,c
 19382  005EA4  B4D8               	btfsc	status,2,c
 19383  005EA6  D002               	goto	l1261
 19384                           
 19385                           ; BSR set to: 0
 19386                           ;ipv4.c: 465: return 0;
 19387  005EA8  90D8               	bcf	status,0,c
 19388                           
 19389                           ; BSR set to: 0
 19390  005EAA  0012               	return	
 19391  005EAC                     l1261:
 19392                           
 19393                           ; BSR set to: 0
 19394                           
 19395                           ; BSR set to: 0
 19396  005EAC  2B62               	incf	ipv4_isAllZero@i& (0+255),f,b
 19397  005EAE  D7ED               	goto	l9911
 19398  005EB0                     u11240:
 19399                           
 19400                           ; BSR set to: 0
 19401                           ;ipv4.c: 466: }
 19402                           ;ipv4.c: 467: return 1;
 19403                           
 19404                           ; BSR set to: 0
 19405  005EB0  80D8               	bsf	status,0,c
 19406  005EB2  0012               	return	
 19407  005EB4                     __end_of_ipv4_isAllZero:
 19408                           	opt stack 0
 19409                           tblptru	equ	0xFF8
 19410                           tblptrh	equ	0xFF7
 19411                           tblptrl	equ	0xFF6
 19412                           tablat	equ	0xFF5
 19413                           prodh	equ	0xFF4
 19414                           prodl	equ	0xFF3
 19415                           intcon	equ	0xFF2
 19416                           intcon3	equ	0xFF0
 19417                           indf0	equ	0xFEF
 19418                           postinc0	equ	0xFEE
 19419                           plusw0	equ	0xFEB
 19420                           fsr0h	equ	0xFEA
 19421                           fsr0l	equ	0xFE9
 19422                           wreg	equ	0xFE8
 19423                           indf1	equ	0xFE7
 19424                           postinc1	equ	0xFE6
 19425                           postdec1	equ	0xFE5
 19426                           plusw1	equ	0xFE3
 19427                           fsr1h	equ	0xFE2
 19428                           fsr1l	equ	0xFE1
 19429                           indf2	equ	0xFDF
 19430                           postinc2	equ	0xFDE
 19431                           postdec2	equ	0xFDD
 19432                           plusw2	equ	0xFDB
 19433                           fsr2h	equ	0xFDA
 19434                           fsr2l	equ	0xFD9
 19435                           status	equ	0xFD8
 19436                           
 19437 ;; *************** function _arp_background *****************
 19438 ;; Defined at:
 19439 ;;		line 394 in file "src/stack/protocols/arp.c"
 19440 ;; Parameters:    Size  Location     Type
 19441 ;;  link            1    wreg     enum E233
 19442 ;; Auto vars:     Size  Location     Type
 19443 ;;  link            1   86[BANK1 ] enum E233
 19444 ;;  errProbe        3   90[BANK1 ] struct error
 19445 ;;  errAnnounce     3   87[BANK1 ] struct error
 19446 ;; Return value:  Size  Location     Type
 19447 ;;                  3   81[BANK1 ] struct error
 19448 ;; Registers used:
 19449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19450 ;; Tracked objects:
 19451 ;;		On entry : 0/0
 19452 ;;		On exit  : 0/0
 19453 ;;		Unchanged: 0/0
 19454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19455 ;;      Params:         0       0       3       0       0       0       0       0       0
 19456 ;;      Locals:         0       0       7       0       0       0       0       0       0
 19457 ;;      Temps:          0       0       2       0       0       0       0       0       0
 19458 ;;      Totals:         0       0      12       0       0       0       0       0       0
 19459 ;;Total ram usage:       12 bytes
 19460 ;; Hardware stack levels used:    1
 19461 ;; Hardware stack levels required when called:   12
 19462 ;; This function calls:
 19463 ;;		_UARTTransmitText
 19464 ;;		_arp_gratuitous
 19465 ;;		_arp_probe
 19466 ;;		_ipv4_SrcAddrChanged
 19467 ;;		_ipv4_getPreliminaryIPSourceAddress
 19468 ;; This function is called by:
 19469 ;;		_handleStackBackgroundTasks
 19470 ;; This function uses a non-reentrant model
 19471 ;;
 19472                           
 19473                           	psect	text71
 19474  0038E8                     __ptext71:
 19475                           	opt stack 0
 19476  0038E8                     _arp_background:
 19477                           	opt stack 17
 19478                           
 19479                           ; BSR set to: 0
 19480                           ;incstack = 0
 19481                           ;arp_background@link stored from wreg
 19482  0038E8  0101               	movlb	1	; () banked
 19483  0038EA  6F56               	movwf	arp_background@link& (0+255),b
 19484                           
 19485                           ;arp.c: 395: error_t static err;
 19486                           ;arp.c: 396: error_t errProbe;
 19487                           ;arp.c: 397: error_t errAnnounce;
 19488                           ;arp.c: 398: bool_t static fAnnounce = 0;
 19489                           ;arp.c: 399: int8_t static state = 0;
 19490                           ;arp.c: 400: ipv4_address_t static ipPreliminary;
 19491                           ;arp.c: 401: err.code = ERROR_ARP_WAITING;
 19492  0038EC  0E01               	movlw	1
 19493  0038EE  6E4F               	movwf	arp_background@err+2,c
 19494  0038F0  0E91               	movlw	145
 19495  0038F2  6E4E               	movwf	arp_background@err+1,c
 19496                           
 19497                           ;arp.c: 402: err.module = ERROR_MODULE_ARP;
 19498  0038F4  0E03               	movlw	3
 19499  0038F6  6E4D               	movwf	arp_background@err,c
 19500                           
 19501                           ;arp.c: 404: switch (state) {
 19502  0038F8  D0A5               	goto	l1080
 19503  0038FA                     
 19504                           ;arp.c: 408: ipPreliminary = ipv4_getPreliminaryIPSourceAddress();
 19505  0038FA  ECF8  F030         	call	_ipv4_getPreliminaryIPSourceAddress	;wreg free
 19506  0038FE  C060  F257         	movff	?_ipv4_getPreliminaryIPSourceAddress,arp_background@ipPreliminary
 19507  003902  C061  F258         	movff	?_ipv4_getPreliminaryIPSourceAddress+1,arp_background@ipPreliminary+1
 19508  003906  C062  F259         	movff	?_ipv4_getPreliminaryIPSourceAddress+2,arp_background@ipPreliminary+2
 19509  00390A  C063  F25A         	movff	?_ipv4_getPreliminaryIPSourceAddress+3,arp_background@ipPreliminary+3
 19510                           
 19511                           ;arp.c: 409: if (ipv4_SrcAddrChanged(&err)) {
 19512  00390E  0E4D               	movlw	low arp_background@err
 19513  003910  0100               	movlb	0	; () banked
 19514  003912  6F60               	movwf	ipv4_SrcAddrChanged@err& (0+255),b
 19515  003914  0E00               	movlw	high arp_background@err
 19516  003916  6F61               	movwf	(ipv4_SrcAddrChanged@err+1)& (0+255),b
 19517  003918  ECDC  F030         	call	_ipv4_SrcAddrChanged	;wreg free
 19518  00391C  0100               	movlb	0	; () banked
 19519  00391E  A0D8               	btfss	status,0,c
 19520  003920  D054               	goto	l1085
 19521                           
 19522                           ; BSR set to: 0
 19523                           ;arp.c: 410: errProbe.code = arp_probe(ipPreliminary, link).code;
 19524  003922  C257  F134         	movff	arp_background@ipPreliminary,arp_probe@ipTarget
 19525  003926  C258  F135         	movff	arp_background@ipPreliminary+1,arp_probe@ipTarget+1
 19526  00392A  C259  F136         	movff	arp_background@ipPreliminary+2,arp_probe@ipTarget+2
 19527  00392E  C25A  F137         	movff	arp_background@ipPreliminary+3,arp_probe@ipTarget+3
 19528  003932  C156  F138         	movff	arp_background@link,arp_probe@link
 19529  003936  EC4B  F00F         	call	_arp_probe	;wreg free
 19530  00393A  0E34               	movlw	low ?_arp_probe
 19531  00393C  6ED9               	movwf	fsr2l,c
 19532  00393E  0E01               	movlw	high ?_arp_probe
 19533  003940  6EDA               	movwf	fsr2h,c
 19534  003942  0E01               	movlw	1
 19535  003944  26D9               	addwf	fsr2l,f,c
 19536  003946  0E00               	movlw	0
 19537  003948  22DA               	addwfc	fsr2h,f,c
 19538  00394A  CFDE F15B          	movff	postinc2,arp_background@errProbe+1
 19539  00394E  CFDD F15C          	movff	postdec2,arp_background@errProbe+2
 19540                           
 19541                           ;arp.c: 411: switch (errProbe.code) {
 19542  003952  D022               	goto	l1083
 19543  003954                     
 19544                           ;arp.c: 414: UARTTransmitText("[ARP]: Conflict during probing.\n\r");
 19545  003954  0EBC               	movlw	low STR_107
 19546  003956  0100               	movlb	0	; () banked
 19547  003958  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19548  00395A  0E7B               	movlw	high STR_107
 19549  00395C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19550  00395E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19551                           
 19552                           ;arp.c: 416: break;
 19553  003962  D033               	goto	l1085
 19554  003964                     
 19555                           ;arp.c: 419: UARTTransmitText("[ARP]: Nobody answered to probes.\n\r");
 19556  003964  0E75               	movlw	low STR_108
 19557  003966  0100               	movlb	0	; () banked
 19558  003968  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19559  00396A  0E7B               	movlw	high STR_108
 19560  00396C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19561  00396E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19562                           
 19563                           ;arp.c: 421: state = 1;
 19564  003972  0E01               	movlw	1
 19565  003974  6E44               	movwf	arp_background@state,c
 19566                           
 19567                           ;arp.c: 424: break;
 19568                           
 19569                           ;arp.c: 423: case ERROR_ARP_WAITING:
 19570                           
 19571                           ;arp.c: 422: break;
 19572  003976  D029               	goto	l1085
 19573  003978                     
 19574                           ;arp.c: 427: UARTTransmitText("[ARP]: Operation was interrupted because link was lost.\n
      +                          \r");
 19575  003978  0E1C               	movlw	low STR_109
 19576  00397A  0100               	movlb	0	; () banked
 19577  00397C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19578  00397E  0E79               	movlw	high STR_109
 19579  003980  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19580  003982  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19581                           
 19582                           ;arp.c: 429: break;
 19583  003986  D021               	goto	l1085
 19584  003988                     
 19585                           ;arp.c: 432: UARTTransmitText("[ARP]: An unknown error occured.\n\r");
 19586  003988  0E99               	movlw	low STR_110
 19587  00398A  0100               	movlb	0	; () banked
 19588  00398C  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19589  00398E  0E7B               	movlw	high STR_110
 19590  003990  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19591  003992  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19592                           
 19593                           ;arp.c: 435: }
 19594                           
 19595                           ;arp.c: 434: break;
 19596  003996  D019               	goto	l1085
 19597  003998                     l1083:
 19598  003998  EE21  F05B         	lfsr	2,arp_background@errProbe+1
 19599  00399C  CFDE F154          	movff	postinc2,??_arp_background
 19600  0039A0  CFDD F155          	movff	postdec2,??_arp_background+1
 19601                           
 19602                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 19603                           ; Switch size 1, requested type "space"
 19604                           ; Number of cases is 1, Range of values is 1 to 1
 19605                           ; switch strategies available:
 19606                           ; Name         Instructions Cycles
 19607                           ; simple_byte            4     3 (average)
 19608                           ;	Chosen strategy is simple_byte
 19609  0039A4  0101               	movlb	1	; () banked
 19610  0039A6  5155               	movf	(??_arp_background+1)& (0+255),w,b
 19611  0039A8  0A01               	xorlw	1	; case 1
 19612  0039AA  A4D8               	btfss	status,2,c
 19613  0039AC  D7ED               	goto	l1089
 19614                           
 19615                           ; BSR set to: 1
 19616                           ; Switch size 1, requested type "space"
 19617                           ; Number of cases is 4, Range of values is 145 to 151
 19618                           ; switch strategies available:
 19619                           ; Name         Instructions Cycles
 19620                           ; simple_byte           13     7 (average)
 19621                           ;	Chosen strategy is simple_byte
 19622  0039AE  5154               	movf	??_arp_background& (0+255),w,b
 19623  0039B0  0A91               	xorlw	145	; case 145
 19624  0039B2  B4D8               	btfsc	status,2,c
 19625  0039B4  D00A               	goto	l1085
 19626  0039B6  0A02               	xorlw	2	; case 147
 19627  0039B8  B4D8               	btfsc	status,2,c
 19628  0039BA  D7D4               	goto	l1086
 19629  0039BC  0A05               	xorlw	5	; case 150
 19630  0039BE  B4D8               	btfsc	status,2,c
 19631  0039C0  D7C9               	goto	l1084
 19632  0039C2  0A01               	xorlw	1	; case 151
 19633  0039C4  B4D8               	btfsc	status,2,c
 19634  0039C6  D7D8               	goto	l1088
 19635  0039C8  D7DF               	goto	l1089
 19636  0039CA                     l1085:
 19637                           
 19638                           ;arp.c: 436: }
 19639                           ;arp.c: 437: err.code = errProbe.code;
 19640                           
 19641                           ; BSR set to: 1
 19642  0039CA  C15B  F04E         	movff	arp_background@errProbe+1,arp_background@err+1
 19643  0039CE  C15C  F04F         	movff	arp_background@errProbe+2,arp_background@err+2
 19644                           
 19645                           ;arp.c: 439: break;
 19646  0039D2  D03F               	goto	l1090
 19647  0039D4                     
 19648                           ;arp.c: 442: errAnnounce = arp_gratuitous(ipPreliminary, link);
 19649  0039D4  C257  F134         	movff	arp_background@ipPreliminary,arp_gratuitous@ip
 19650  0039D8  C258  F135         	movff	arp_background@ipPreliminary+1,arp_gratuitous@ip+1
 19651  0039DC  C259  F136         	movff	arp_background@ipPreliminary+2,arp_gratuitous@ip+2
 19652  0039E0  C25A  F137         	movff	arp_background@ipPreliminary+3,arp_gratuitous@ip+3
 19653  0039E4  C156  F138         	movff	arp_background@link,arp_gratuitous@link
 19654  0039E8  EC79  F015         	call	_arp_gratuitous	;wreg free
 19655  0039EC  C134  F157         	movff	?_arp_gratuitous,arp_background@errAnnounce
 19656  0039F0  C135  F158         	movff	?_arp_gratuitous+1,arp_background@errAnnounce+1
 19657  0039F4  C136  F159         	movff	?_arp_gratuitous+2,arp_background@errAnnounce+2
 19658                           
 19659                           ;arp.c: 443: err.code = errAnnounce.code;
 19660  0039F8  C158  F04E         	movff	arp_background@errAnnounce+1,arp_background@err+1
 19661  0039FC  C159  F04F         	movff	arp_background@errAnnounce+2,arp_background@err+2
 19662                           
 19663                           ;arp.c: 444: if (err.code == ERROR_ARP_IPv4_ADDRESS_CONFLICT) {
 19664  003A00  0E96               	movlw	150
 19665  003A02  184E               	xorwf	arp_background@err+1,w,c
 19666  003A04  E10C               	bnz	l11275
 19667  003A06  044F               	decf	arp_background@err+2,w,c
 19668  003A08  A4D8               	btfss	status,2,c
 19669  003A0A  D009               	goto	l1092
 19670                           
 19671                           ;arp.c: 446: UARTTransmitText("[ARP]: Conflict during announcement.\n\r");
 19672  003A0C  0EB8               	movlw	low STR_111
 19673  003A0E  0100               	movlb	0	; () banked
 19674  003A10  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19675  003A12  0E7A               	movlw	high STR_111
 19676  003A14  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19677  003A16  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19678                           
 19679                           ;arp.c: 448: state = 0;
 19680  003A1A  0E00               	movlw	0
 19681  003A1C  6E44               	movwf	arp_background@state,c
 19682  003A1E                     l1092:
 19683  003A1E                     l11275:
 19684                           
 19685                           ;arp.c: 449: }
 19686                           ;arp.c: 450: if (errAnnounce.module == ERROR_MODULE_ARP &&
 19687                           ;arp.c: 451: errAnnounce.code == (uint16_t)0) {
 19688  003A1E  0E03               	movlw	3
 19689  003A20  0101               	movlb	1	; () banked
 19690  003A22  1957               	xorwf	arp_background@errAnnounce& (0+255),w,b
 19691  003A24  A4D8               	btfss	status,2,c
 19692  003A26  D015               	goto	l1090
 19693                           
 19694                           ; BSR set to: 1
 19695  003A28  5158               	movf	(arp_background@errAnnounce+1)& (0+255),w,b
 19696  003A2A  1159               	iorwf	(arp_background@errAnnounce+2)& (0+255),w,b
 19697  003A2C  A4D8               	btfss	status,2,c
 19698  003A2E  D011               	goto	l1090
 19699                           
 19700                           ; BSR set to: 1
 19701                           ;arp.c: 453: UARTTransmitText("[ARP]: All announcements sent.\n\r");
 19702  003A30  0E00               	movlw	low STR_112
 19703  003A32  0100               	movlb	0	; () banked
 19704  003A34  6F98               	movwf	UARTTransmitText@str& (0+255),b
 19705  003A36  0E7C               	movlw	high STR_112
 19706  003A38  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 19707  003A3A  EC42  F02C         	call	_UARTTransmitText	;wreg free
 19708                           
 19709                           ;arp.c: 455: state = 0;
 19710  003A3E  0E00               	movlw	0
 19711  003A40  6E44               	movwf	arp_background@state,c
 19712                           
 19713                           ;arp.c: 458: }
 19714                           
 19715                           ;arp.c: 456: }
 19716                           ;arp.c: 457: break;
 19717  003A42  D007               	goto	l1090
 19718  003A44                     l1080:
 19719  003A44  5044               	movf	arp_background@state,w,c
 19720                           
 19721                           ; Switch size 1, requested type "space"
 19722                           ; Number of cases is 2, Range of values is 0 to 1
 19723                           ; switch strategies available:
 19724                           ; Name         Instructions Cycles
 19725                           ; simple_byte            7     4 (average)
 19726                           ;	Chosen strategy is simple_byte
 19727  003A46  0A00               	xorlw	0	; case 0
 19728  003A48  B4D8               	btfsc	status,2,c
 19729  003A4A  D757               	goto	l1081
 19730  003A4C  0A01               	xorlw	1	; case 1
 19731  003A4E  B4D8               	btfsc	status,2,c
 19732  003A50  D7C1               	goto	l1091
 19733  003A52                     l1090:
 19734                           
 19735                           ;arp.c: 460: return err;
 19736  003A52  C04D  F151         	movff	arp_background@err,?_arp_background
 19737  003A56  C04E  F152         	movff	arp_background@err+1,?_arp_background+1
 19738  003A5A  C04F  F153         	movff	arp_background@err+2,?_arp_background+2
 19739  003A5E  0012               	return		;funcret
 19740  003A60                     __end_of_arp_background:
 19741                           	opt stack 0
 19742                           tblptru	equ	0xFF8
 19743                           tblptrh	equ	0xFF7
 19744                           tblptrl	equ	0xFF6
 19745                           tablat	equ	0xFF5
 19746                           prodh	equ	0xFF4
 19747                           prodl	equ	0xFF3
 19748                           intcon	equ	0xFF2
 19749                           intcon3	equ	0xFF0
 19750                           indf0	equ	0xFEF
 19751                           postinc0	equ	0xFEE
 19752                           plusw0	equ	0xFEB
 19753                           fsr0h	equ	0xFEA
 19754                           fsr0l	equ	0xFE9
 19755                           wreg	equ	0xFE8
 19756                           indf1	equ	0xFE7
 19757                           postinc1	equ	0xFE6
 19758                           postdec1	equ	0xFE5
 19759                           plusw1	equ	0xFE3
 19760                           fsr1h	equ	0xFE2
 19761                           fsr1l	equ	0xFE1
 19762                           indf2	equ	0xFDF
 19763                           postinc2	equ	0xFDE
 19764                           postdec2	equ	0xFDD
 19765                           plusw2	equ	0xFDB
 19766                           fsr2h	equ	0xFDA
 19767                           fsr2l	equ	0xFD9
 19768                           status	equ	0xFD8
 19769                           
 19770 ;; *************** function _ipv4_getPreliminaryIPSourceAddress *****************
 19771 ;; Defined at:
 19772 ;;		line 396 in file "src/stack/protocols/ipv4.c"
 19773 ;; Parameters:    Size  Location     Type
 19774 ;;		None
 19775 ;; Auto vars:     Size  Location     Type
 19776 ;;		None
 19777 ;; Return value:  Size  Location     Type
 19778 ;;                  4    0[BANK0 ] struct ipv4_address
 19779 ;; Registers used:
 19780 ;;		None
 19781 ;; Tracked objects:
 19782 ;;		On entry : 0/0
 19783 ;;		On exit  : 0/0
 19784 ;;		Unchanged: 0/0
 19785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19786 ;;      Params:         0       4       0       0       0       0       0       0       0
 19787 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19788 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19789 ;;      Totals:         0       4       0       0       0       0       0       0       0
 19790 ;;Total ram usage:        4 bytes
 19791 ;; Hardware stack levels used:    1
 19792 ;; Hardware stack levels required when called:    4
 19793 ;; This function calls:
 19794 ;;		Nothing
 19795 ;; This function is called by:
 19796 ;;		_arp_background
 19797 ;; This function uses a non-reentrant model
 19798 ;;
 19799                           
 19800                           	psect	text72
 19801  0061F0                     __ptext72:
 19802                           	opt stack 0
 19803  0061F0                     _ipv4_getPreliminaryIPSourceAddress:
 19804                           	opt stack 24
 19805                           
 19806                           ;ipv4.c: 397: return ipPreliminarySource;
 19807                           
 19808                           ;incstack = 0
 19809  0061F0  C282  F060         	movff	_ipPreliminarySource,?_ipv4_getPreliminaryIPSourceAddress
 19810  0061F4  C283  F061         	movff	_ipPreliminarySource+1,?_ipv4_getPreliminaryIPSourceAddress+1
 19811  0061F8  C284  F062         	movff	_ipPreliminarySource+2,?_ipv4_getPreliminaryIPSourceAddress+2
 19812  0061FC  C285  F063         	movff	_ipPreliminarySource+3,?_ipv4_getPreliminaryIPSourceAddress+3
 19813  006200  0012               	return		;funcret
 19814  006202                     __end_of_ipv4_getPreliminaryIPSourceAddress:
 19815                           	opt stack 0
 19816                           tblptru	equ	0xFF8
 19817                           tblptrh	equ	0xFF7
 19818                           tblptrl	equ	0xFF6
 19819                           tablat	equ	0xFF5
 19820                           prodh	equ	0xFF4
 19821                           prodl	equ	0xFF3
 19822                           intcon	equ	0xFF2
 19823                           intcon3	equ	0xFF0
 19824                           indf0	equ	0xFEF
 19825                           postinc0	equ	0xFEE
 19826                           plusw0	equ	0xFEB
 19827                           fsr0h	equ	0xFEA
 19828                           fsr0l	equ	0xFE9
 19829                           wreg	equ	0xFE8
 19830                           indf1	equ	0xFE7
 19831                           postinc1	equ	0xFE6
 19832                           postdec1	equ	0xFE5
 19833                           plusw1	equ	0xFE3
 19834                           fsr1h	equ	0xFE2
 19835                           fsr1l	equ	0xFE1
 19836                           indf2	equ	0xFDF
 19837                           postinc2	equ	0xFDE
 19838                           postdec2	equ	0xFDD
 19839                           plusw2	equ	0xFDB
 19840                           fsr2h	equ	0xFDA
 19841                           fsr2l	equ	0xFD9
 19842                           status	equ	0xFD8
 19843                           
 19844 ;; *************** function _ipv4_SrcAddrChanged *****************
 19845 ;; Defined at:
 19846 ;;		line 447 in file "src/stack/protocols/ipv4.c"
 19847 ;; Parameters:    Size  Location     Type
 19848 ;;  err             2    0[BANK0 ] PTR struct error
 19849 ;;		 -> arp_background@err(3), 
 19850 ;; Auto vars:     Size  Location     Type
 19851 ;;		None
 19852 ;; Return value:  Size  Location     Type
 19853 ;;		None               void
 19854 ;; Registers used:
 19855 ;;		wreg, status,2, status,0
 19856 ;; Tracked objects:
 19857 ;;		On entry : 0/0
 19858 ;;		On exit  : 0/0
 19859 ;;		Unchanged: 0/0
 19860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19861 ;;      Params:         0       2       0       0       0       0       0       0       0
 19862 ;;      Locals:         0       0       0       0       0       0       0       0       0
 19863 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19864 ;;      Totals:         0       2       0       0       0       0       0       0       0
 19865 ;;Total ram usage:        2 bytes
 19866 ;; Hardware stack levels used:    1
 19867 ;; Hardware stack levels required when called:    4
 19868 ;; This function calls:
 19869 ;;		Nothing
 19870 ;; This function is called by:
 19871 ;;		_arp_background
 19872 ;; This function uses a non-reentrant model
 19873 ;;
 19874                           
 19875                           	psect	text73
 19876  0061B8                     __ptext73:
 19877                           	opt stack 0
 19878  0061B8                     _ipv4_SrcAddrChanged:
 19879                           	opt stack 24
 19880                           
 19881                           ;ipv4.c: 448: arpStatus = err;
 19882                           
 19883                           ;incstack = 0
 19884  0061B8  C060  F03D         	movff	ipv4_SrcAddrChanged@err,_arpStatus
 19885  0061BC  C061  F03E         	movff	ipv4_SrcAddrChanged@err+1,_arpStatus+1
 19886                           
 19887                           ;ipv4.c: 449: return fSrcAddrChanged;
 19888  0061C0  B050               	btfsc	_fSrcAddrChanged/(0+8),_fSrcAddrChanged& (0+7),c
 19889  0061C2  D002               	goto	l8889
 19890  0061C4  90D8               	bcf	status,0,c
 19891  0061C6  0012               	return	
 19892  0061C8                     l8889:
 19893  0061C8  80D8               	bsf	status,0,c
 19894  0061CA  0012               	return	
 19895  0061CC                     __end_of_ipv4_SrcAddrChanged:
 19896                           	opt stack 0
 19897                           tblptru	equ	0xFF8
 19898                           tblptrh	equ	0xFF7
 19899                           tblptrl	equ	0xFF6
 19900                           tablat	equ	0xFF5
 19901                           prodh	equ	0xFF4
 19902                           prodl	equ	0xFF3
 19903                           intcon	equ	0xFF2
 19904                           intcon3	equ	0xFF0
 19905                           indf0	equ	0xFEF
 19906                           postinc0	equ	0xFEE
 19907                           plusw0	equ	0xFEB
 19908                           fsr0h	equ	0xFEA
 19909                           fsr0l	equ	0xFE9
 19910                           wreg	equ	0xFE8
 19911                           indf1	equ	0xFE7
 19912                           postinc1	equ	0xFE6
 19913                           postdec1	equ	0xFE5
 19914                           plusw1	equ	0xFE3
 19915                           fsr1h	equ	0xFE2
 19916                           fsr1l	equ	0xFE1
 19917                           indf2	equ	0xFDF
 19918                           postinc2	equ	0xFDE
 19919                           postdec2	equ	0xFDD
 19920                           plusw2	equ	0xFDB
 19921                           fsr2h	equ	0xFDA
 19922                           fsr2l	equ	0xFD9
 19923                           status	equ	0xFD8
 19924                           
 19925 ;; *************** function _arp_probe *****************
 19926 ;; Defined at:
 19927 ;;		line 253 in file "src/stack/protocols/arp.c"
 19928 ;; Parameters:    Size  Location     Type
 19929 ;;  ipTarget        4   52[BANK1 ] struct ipv4_address
 19930 ;;  link            1   56[BANK1 ] enum E233
 19931 ;; Auto vars:     Size  Location     Type
 19932 ;;  ipSender        4   74[BANK1 ] struct ipv4_address
 19933 ;;  waitingTime     4   70[BANK1 ] unsigned long 
 19934 ;;  timeStart       4   66[BANK1 ] unsigned long 
 19935 ;;  err             3   78[BANK1 ] struct error
 19936 ;;  index           1   65[BANK1 ] unsigned char 
 19937 ;; Return value:  Size  Location     Type
 19938 ;;                  3   52[BANK1 ] struct error
 19939 ;; Registers used:
 19940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19941 ;; Tracked objects:
 19942 ;;		On entry : 0/0
 19943 ;;		On exit  : 0/0
 19944 ;;		Unchanged: 0/0
 19945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19946 ;;      Params:         0       0       5       0       0       0       0       0       0
 19947 ;;      Locals:         0       0      16       0       0       0       0       0       0
 19948 ;;      Temps:          0       0       8       0       0       0       0       0       0
 19949 ;;      Totals:         0       0      29       0       0       0       0       0       0
 19950 ;;Total ram usage:       29 bytes
 19951 ;; Hardware stack levels used:    1
 19952 ;; Hardware stack levels required when called:   11
 19953 ;; This function calls:
 19954 ;;		_UARTTransmitText
 19955 ;;		___lwmod
 19956 ;;		_arp_checkForEntry
 19957 ;;		_arp_sendRequest
 19958 ;;		_getMillis
 19959 ;;		_ipAdressToString
 19960 ;;		_ipv4_setToAllZero
 19961 ;;		_rand
 19962 ;; This function is called by:
 19963 ;;		_arp_background
 19964 ;; This function uses a non-reentrant model
 19965 ;;
 19966                           
 19967                           	psect	text74
 19968  001E96                     __ptext74:
 19969                           	opt stack 0
 19970  001E96                     _arp_probe:
 19971                           	opt stack 17
 19972                           
 19973                           ;arp.c: 254: time_t timeStart;
 19974                           ;arp.c: 255: time_t waitingTime;
 19975                           ;arp.c: 256: ipv4_address_t ipSender;
 19976                           ;arp.c: 257: uint8_t static probeCounter = 0;
 19977                           ;arp.c: 258: error_t err;
 19978                           ;arp.c: 260: enum states {
 19979                           ;arp.c: 261: PREPARING_PROBE, WAITING_TO_SEND, SENDING_PROBE, ARP_ENTRY_FOUND
 19980                           ;arp.c: 262: };
 19981                           ;arp.c: 263: uint8_t static state = PREPARING_PROBE;
 19982                           ;arp.c: 264: uint8_t index;
 19983                           ;arp.c: 265: err.module = ERROR_MODULE_ARP;
 19984                           
 19985                           ;incstack = 0
 19986  001E96  0E03               	movlw	3
 19987  001E98  0101               	movlb	1	; () banked
 19988  001E9A  6F4E               	movwf	arp_probe@err& (0+255),b
 19989                           
 19990                           ;arp.c: 267: if (link == NO_LINK) {
 19991  001E9C  5138               	movf	arp_probe@link& (0+255),w,b
 19992  001E9E  A4D8               	btfss	status,2,c
 19993  001EA0  D00F               	goto	l1032
 19994                           
 19995                           ; BSR set to: 1
 19996                           ;arp.c: 268: state = PREPARING_PROBE;
 19997  001EA2  0E00               	movlw	0
 19998  001EA4  6E47               	movwf	arp_probe@state,c
 19999                           
 20000                           ;arp.c: 269: probeCounter = 0;
 20001  001EA6  0E00               	movlw	0
 20002  001EA8  6E48               	movwf	arp_probe@probeCounter,c
 20003                           
 20004                           ;arp.c: 270: err.code = ERROR_ARP_CONNECTION_FAILED;
 20005  001EAA  0E01               	movlw	1
 20006  001EAC  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 20007  001EAE  0E97               	movlw	151
 20008  001EB0  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 20009                           
 20010                           ; BSR set to: 1
 20011                           ;arp.c: 271: return err;
 20012  001EB2  C14E  F134         	movff	arp_probe@err,?_arp_probe
 20013  001EB6  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 20014  001EBA  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 20015                           
 20016                           ; BSR set to: 1
 20017  001EBE  0012               	return	
 20018  001EC0                     l1032:
 20019                           
 20020                           ; BSR set to: 1
 20021                           ;arp.c: 272: }
 20022                           ;arp.c: 274: if (arp_checkForEntry(ipTarget, &index)) {
 20023                           
 20024                           ; BSR set to: 1
 20025  001EC0  C134  F067         	movff	arp_probe@ipTarget,arp_checkForEntry@ip
 20026  001EC4  C135  F068         	movff	arp_probe@ipTarget+1,arp_checkForEntry@ip+1
 20027  001EC8  C136  F069         	movff	arp_probe@ipTarget+2,arp_checkForEntry@ip+2
 20028  001ECC  C137  F06A         	movff	arp_probe@ipTarget+3,arp_checkForEntry@ip+3
 20029  001ED0  0E41               	movlw	low arp_probe@index
 20030  001ED2  0100               	movlb	0	; () banked
 20031  001ED4  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 20032  001ED6  0E01               	movlw	high arp_probe@index
 20033  001ED8  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 20034  001EDA  EC84  F025         	call	_arp_checkForEntry	;wreg free
 20035  001EDE  0900               	iorlw	0
 20036  001EE0  B4D8               	btfsc	status,2,c
 20037  001EE2  D12C               	goto	l1035
 20038                           
 20039                           ;arp.c: 275: state = ARP_ENTRY_FOUND;
 20040  001EE4  0E03               	movlw	3
 20041  001EE6  6E47               	movwf	arp_probe@state,c
 20042                           
 20043                           ;arp.c: 276: }
 20044                           ;arp.c: 278: switch (state) {
 20045  001EE8  D129               	goto	l1035
 20046  001EEA                     
 20047                           ;arp.c: 280: ipv4_setToAllZero(&ipSender);
 20048  001EEA  0E4A               	movlw	low arp_probe@ipSender
 20049  001EEC  0100               	movlb	0	; () banked
 20050  001EEE  6F60               	movwf	ipv4_setToAllZero@ip& (0+255),b
 20051  001EF0  0E01               	movlw	high arp_probe@ipSender
 20052  001EF2  6F61               	movwf	(ipv4_setToAllZero@ip+1)& (0+255),b
 20053  001EF4  EC01  F030         	call	_ipv4_setToAllZero	;wreg free
 20054                           
 20055                           ;arp.c: 281: timeStart = getMillis();
 20056  001EF8  EC01  F031         	call	_getMillis	;wreg free
 20057  001EFC  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 20058  001F00  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 20059  001F04  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 20060  001F08  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 20061                           
 20062                           ;arp.c: 282: waitingTime = rand() % 1000u;
 20063  001F0C  ECE8  F02B         	call	_rand	;wreg free
 20064  001F10  C06C  F06E         	movff	?_rand,___lwmod@dividend
 20065  001F14  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 20066  001F18  0E03               	movlw	3
 20067  001F1A  0100               	movlb	0	; () banked
 20068  001F1C  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 20069  001F1E  0EE8               	movlw	232
 20070  001F20  6F70               	movwf	___lwmod@divisor& (0+255),b
 20071  001F22  ECCB  F02D         	call	___lwmod	;wreg free
 20072  001F26  0100               	movlb	0	; () banked
 20073  001F28  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 20074  001F2C  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 20075  001F30  0101               	movlb	1	; () banked
 20076  001F32  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 20077  001F34  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 20078                           
 20079                           ; BSR set to: 1
 20080                           ;arp.c: 283: state = WAITING_TO_SEND;
 20081  001F36  0E01               	movlw	1
 20082  001F38  6E47               	movwf	arp_probe@state,c
 20083  001F3A  D055               	goto	l1039
 20084  001F3C                     
 20085                           ;arp.c: 287: if (getMillis() - timeStart >= waitingTime) {
 20086                           
 20087                           ; BSR set to: 1
 20088  001F3C  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 20089  001F40  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 20090  001F44  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 20091  001F48  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 20092  001F4C  0101               	movlb	1	; () banked
 20093  001F4E  1F39               	comf	??_arp_probe& (0+255),f,b
 20094  001F50  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 20095  001F52  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 20096  001F54  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 20097  001F56  2B39               	incf	??_arp_probe& (0+255),f,b
 20098  001F58  0E00               	movlw	0
 20099  001F5A  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 20100  001F5C  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 20101  001F5E  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 20102  001F60  EC01  F031         	call	_getMillis	;wreg free
 20103  001F64  0101               	movlb	1	; () banked
 20104  001F66  5139               	movf	??_arp_probe& (0+255),w,b
 20105  001F68  0100               	movlb	0	; () banked
 20106  001F6A  2560               	addwf	?_getMillis& (0+255),w,b
 20107  001F6C  0101               	movlb	1	; () banked
 20108  001F6E  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 20109  001F70  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 20110  001F72  0100               	movlb	0	; () banked
 20111  001F74  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 20112  001F76  0101               	movlb	1	; () banked
 20113  001F78  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 20114  001F7A  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 20115  001F7C  0100               	movlb	0	; () banked
 20116  001F7E  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 20117  001F80  0101               	movlb	1	; () banked
 20118  001F82  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 20119  001F84  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 20120  001F86  0100               	movlb	0	; () banked
 20121  001F88  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 20122  001F8A  0101               	movlb	1	; () banked
 20123  001F8C  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 20124  001F8E  5146               	movf	arp_probe@waitingTime& (0+255),w,b
 20125  001F90  5D3D               	subwf	(??_arp_probe+4)& (0+255),w,b
 20126  001F92  5147               	movf	(arp_probe@waitingTime+1)& (0+255),w,b
 20127  001F94  593E               	subwfb	(??_arp_probe+5)& (0+255),w,b
 20128  001F96  5148               	movf	(arp_probe@waitingTime+2)& (0+255),w,b
 20129  001F98  593F               	subwfb	(??_arp_probe+6)& (0+255),w,b
 20130  001F9A  5149               	movf	(arp_probe@waitingTime+3)& (0+255),w,b
 20131  001F9C  5940               	subwfb	(??_arp_probe+7)& (0+255),w,b
 20132  001F9E  A0D8               	btfss	status,0,c
 20133  001FA0  D022               	goto	l1039
 20134                           
 20135                           ; BSR set to: 1
 20136                           ;arp.c: 288: state = SENDING_PROBE;
 20137  001FA2  0E02               	movlw	2
 20138  001FA4  6E47               	movwf	arp_probe@state,c
 20139                           
 20140                           ; BSR set to: 1
 20141                           ;arp.c: 290: waitingTime = (rand() % (2000u - 1000u)) + 1000u;
 20142  001FA6  0EE8               	movlw	232
 20143  001FA8  6F39               	movwf	??_arp_probe& (0+255),b
 20144  001FAA  0E03               	movlw	3
 20145  001FAC  6F3A               	movwf	(??_arp_probe+1)& (0+255),b
 20146  001FAE  ECE8  F02B         	call	_rand	;wreg free
 20147  001FB2  C06C  F06E         	movff	?_rand,___lwmod@dividend
 20148  001FB6  C06D  F06F         	movff	?_rand+1,___lwmod@dividend+1
 20149  001FBA  0E03               	movlw	3
 20150  001FBC  0100               	movlb	0	; () banked
 20151  001FBE  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 20152  001FC0  0EE8               	movlw	232
 20153  001FC2  6F70               	movwf	___lwmod@divisor& (0+255),b
 20154  001FC4  ECCB  F02D         	call	___lwmod	;wreg free
 20155  001FC8  0101               	movlb	1	; () banked
 20156  001FCA  5139               	movf	??_arp_probe& (0+255),w,b
 20157  001FCC  0100               	movlb	0	; () banked
 20158  001FCE  276E               	addwf	?___lwmod& (0+255),f,b
 20159  001FD0  0101               	movlb	1	; () banked
 20160  001FD2  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 20161  001FD4  0100               	movlb	0	; () banked
 20162  001FD6  236F               	addwfc	(?___lwmod+1)& (0+255),f,b
 20163  001FD8  C06E  F146         	movff	?___lwmod,arp_probe@waitingTime
 20164  001FDC  C06F  F147         	movff	?___lwmod+1,arp_probe@waitingTime+1
 20165  001FE0  0101               	movlb	1	; () banked
 20166  001FE2  6B48               	clrf	(arp_probe@waitingTime+2)& (0+255),b
 20167  001FE4  6B49               	clrf	(arp_probe@waitingTime+3)& (0+255),b
 20168  001FE6                     l1039:
 20169                           
 20170                           ; BSR set to: 1
 20171                           ;arp.c: 291: }
 20172                           ;arp.c: 292: err.code = ERROR_ARP_WAITING;
 20173                           
 20174                           ; BSR set to: 1
 20175  001FE6  0E01               	movlw	1
 20176  001FE8  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 20177  001FEA  0E91               	movlw	145
 20178  001FEC  D0A5               	goto	L13
 20179  001FEE                     
 20180                           ;arp.c: 295: if (probeCounter == 0 || (getMillis() - timeStart) > waitingTime) {
 20181                           
 20182                           ; BSR set to: 1
 20183  001FEE  5048               	movf	arp_probe@probeCounter,w,c
 20184  001FF0  B4D8               	btfsc	status,2,c
 20185  001FF2  D033               	goto	u12980
 20186  001FF4  C142  F139         	movff	arp_probe@timeStart,??_arp_probe
 20187  001FF8  C143  F13A         	movff	arp_probe@timeStart+1,??_arp_probe+1
 20188  001FFC  C144  F13B         	movff	arp_probe@timeStart+2,??_arp_probe+2
 20189  002000  C145  F13C         	movff	arp_probe@timeStart+3,??_arp_probe+3
 20190  002004  0101               	movlb	1	; () banked
 20191  002006  1F39               	comf	??_arp_probe& (0+255),f,b
 20192  002008  1F3A               	comf	(??_arp_probe+1)& (0+255),f,b
 20193  00200A  1F3B               	comf	(??_arp_probe+2)& (0+255),f,b
 20194  00200C  1F3C               	comf	(??_arp_probe+3)& (0+255),f,b
 20195  00200E  2B39               	incf	??_arp_probe& (0+255),f,b
 20196  002010  0E00               	movlw	0
 20197  002012  233A               	addwfc	(??_arp_probe+1)& (0+255),f,b
 20198  002014  233B               	addwfc	(??_arp_probe+2)& (0+255),f,b
 20199  002016  233C               	addwfc	(??_arp_probe+3)& (0+255),f,b
 20200  002018  EC01  F031         	call	_getMillis	;wreg free
 20201  00201C  0101               	movlb	1	; () banked
 20202  00201E  5139               	movf	??_arp_probe& (0+255),w,b
 20203  002020  0100               	movlb	0	; () banked
 20204  002022  2560               	addwf	?_getMillis& (0+255),w,b
 20205  002024  0101               	movlb	1	; () banked
 20206  002026  6F3D               	movwf	(??_arp_probe+4)& (0+255),b
 20207  002028  513A               	movf	(??_arp_probe+1)& (0+255),w,b
 20208  00202A  0100               	movlb	0	; () banked
 20209  00202C  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 20210  00202E  0101               	movlb	1	; () banked
 20211  002030  6F3E               	movwf	(??_arp_probe+5)& (0+255),b
 20212  002032  513B               	movf	(??_arp_probe+2)& (0+255),w,b
 20213  002034  0100               	movlb	0	; () banked
 20214  002036  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 20215  002038  0101               	movlb	1	; () banked
 20216  00203A  6F3F               	movwf	(??_arp_probe+6)& (0+255),b
 20217  00203C  513C               	movf	(??_arp_probe+3)& (0+255),w,b
 20218  00203E  0100               	movlb	0	; () banked
 20219  002040  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 20220  002042  0101               	movlb	1	; () banked
 20221  002044  6F40               	movwf	(??_arp_probe+7)& (0+255),b
 20222  002046  513D               	movf	(??_arp_probe+4)& (0+255),w,b
 20223  002048  5D46               	subwf	arp_probe@waitingTime& (0+255),w,b
 20224  00204A  513E               	movf	(??_arp_probe+5)& (0+255),w,b
 20225  00204C  5947               	subwfb	(arp_probe@waitingTime+1)& (0+255),w,b
 20226  00204E  513F               	movf	(??_arp_probe+6)& (0+255),w,b
 20227  002050  5948               	subwfb	(arp_probe@waitingTime+2)& (0+255),w,b
 20228  002052  5140               	movf	(??_arp_probe+7)& (0+255),w,b
 20229  002054  5949               	subwfb	(arp_probe@waitingTime+3)& (0+255),w,b
 20230  002056  B0D8               	btfsc	status,0,c
 20231  002058  D07E               	goto	l1037
 20232  00205A                     u12980:
 20233                           
 20234                           ;arp.c: 296: timeStart = getMillis();
 20235                           
 20236                           ; BSR set to: 1
 20237  00205A  EC01  F031         	call	_getMillis	;wreg free
 20238  00205E  C060  F142         	movff	?_getMillis,arp_probe@timeStart
 20239  002062  C061  F143         	movff	?_getMillis+1,arp_probe@timeStart+1
 20240  002066  C062  F144         	movff	?_getMillis+2,arp_probe@timeStart+2
 20241  00206A  C063  F145         	movff	?_getMillis+3,arp_probe@timeStart+3
 20242                           
 20243                           ;arp.c: 298: if (probeCounter < 3u) {
 20244  00206E  0E03               	movlw	3
 20245  002070  6048               	cpfslt	arp_probe@probeCounter,c
 20246  002072  D047               	goto	l1044
 20247                           
 20248                           ;arp.c: 300: UARTTransmitText("[ARP]: Sending Probe for ");
 20249  002074  0EEA               	movlw	low STR_102
 20250  002076  0100               	movlb	0	; () banked
 20251  002078  6F98               	movwf	UARTTransmitText@str& (0+255),b
 20252  00207A  0E7C               	movlw	high STR_102
 20253  00207C  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 20254  00207E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 20255                           
 20256                           ;arp.c: 301: UARTTransmitText(ipAdressToString(ipTarget));
 20257  002082  C134  F073         	movff	arp_probe@ipTarget,ipAdressToString@ip
 20258  002086  C135  F074         	movff	arp_probe@ipTarget+1,ipAdressToString@ip+1
 20259  00208A  C136  F075         	movff	arp_probe@ipTarget+2,ipAdressToString@ip+2
 20260  00208E  C137  F076         	movff	arp_probe@ipTarget+3,ipAdressToString@ip+3
 20261  002092  EC96  F016         	call	_ipAdressToString	;wreg free
 20262  002096  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 20263  00209A  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 20264  00209E  EC42  F02C         	call	_UARTTransmitText	;wreg free
 20265                           
 20266                           ;arp.c: 302: UARTTransmitText(" (reply to ");
 20267  0020A2  0EF3               	movlw	low STR_103
 20268  0020A4  0100               	movlb	0	; () banked
 20269  0020A6  6F98               	movwf	UARTTransmitText@str& (0+255),b
 20270  0020A8  0E7E               	movlw	high STR_103
 20271  0020AA  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 20272  0020AC  EC42  F02C         	call	_UARTTransmitText	;wreg free
 20273                           
 20274                           ;arp.c: 303: UARTTransmitText(ipAdressToString(ipSender));
 20275  0020B0  C14A  F073         	movff	arp_probe@ipSender,ipAdressToString@ip
 20276  0020B4  C14B  F074         	movff	arp_probe@ipSender+1,ipAdressToString@ip+1
 20277  0020B8  C14C  F075         	movff	arp_probe@ipSender+2,ipAdressToString@ip+2
 20278  0020BC  C14D  F076         	movff	arp_probe@ipSender+3,ipAdressToString@ip+3
 20279  0020C0  EC96  F016         	call	_ipAdressToString	;wreg free
 20280  0020C4  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 20281  0020C8  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 20282  0020CC  EC42  F02C         	call	_UARTTransmitText	;wreg free
 20283                           
 20284                           ;arp.c: 304: UARTTransmitText(")\n\r");
 20285  0020D0  0EDC               	movlw	low STR_104
 20286  0020D2  0100               	movlb	0	; () banked
 20287  0020D4  6F98               	movwf	UARTTransmitText@str& (0+255),b
 20288  0020D6  0E7F               	movlw	high STR_104
 20289  0020D8  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 20290  0020DA  EC42  F02C         	call	_UARTTransmitText	;wreg free
 20291                           
 20292                           ;arp.c: 306: arp_sendRequest(ipSender, ipTarget);
 20293  0020DE  C14A  F100         	movff	arp_probe@ipSender,arp_sendRequest@ipSender
 20294  0020E2  C14B  F101         	movff	arp_probe@ipSender+1,arp_sendRequest@ipSender+1
 20295  0020E6  C14C  F102         	movff	arp_probe@ipSender+2,arp_sendRequest@ipSender+2
 20296  0020EA  C14D  F103         	movff	arp_probe@ipSender+3,arp_sendRequest@ipSender+3
 20297  0020EE  C134  F104         	movff	arp_probe@ipTarget,arp_sendRequest@ipTarget
 20298  0020F2  C135  F105         	movff	arp_probe@ipTarget+1,arp_sendRequest@ipTarget+1
 20299  0020F6  C136  F106         	movff	arp_probe@ipTarget+2,arp_sendRequest@ipTarget+2
 20300  0020FA  C137  F107         	movff	arp_probe@ipTarget+3,arp_sendRequest@ipTarget+3
 20301  0020FE  EC2B  F027         	call	_arp_sendRequest	;wreg free
 20302  002102                     l1044:
 20303                           
 20304                           ;arp.c: 307: }
 20305                           ;arp.c: 308: if (probeCounter >= 3u) {
 20306  002102  0E02               	movlw	2
 20307  002104  6448               	cpfsgt	arp_probe@probeCounter,c
 20308  002106  D009               	goto	l1045
 20309                           
 20310                           ;arp.c: 309: probeCounter = 0;
 20311  002108  0E00               	movlw	0
 20312  00210A  6E48               	movwf	arp_probe@probeCounter,c
 20313                           
 20314                           ;arp.c: 310: state = PREPARING_PROBE;
 20315  00210C  0E00               	movlw	0
 20316  00210E  6E47               	movwf	arp_probe@state,c
 20317                           
 20318                           ;arp.c: 311: err.code = ERROR_ARP_MAXIMUM_NUMBER_OF_PROBES_REACHED;
 20319  002110  0E01               	movlw	1
 20320  002112  0101               	movlb	1	; () banked
 20321  002114  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 20322  002116  0E93               	movlw	147
 20323  002118  D00F               	goto	L13
 20324  00211A                     l1045:
 20325                           
 20326                           ;arp.c: 313: err.code = ERROR_ARP_WAITING;
 20327                           
 20328                           ; BSR set to: 1
 20329  00211A  0E01               	movlw	1
 20330  00211C  0101               	movlb	1	; () banked
 20331  00211E  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 20332  002120  0E91               	movlw	145
 20333  002122  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 20334                           
 20335                           ; BSR set to: 1
 20336                           ;arp.c: 314: probeCounter++;
 20337  002124  2A48               	incf	arp_probe@probeCounter,f,c
 20338                           
 20339                           ; BSR set to: 1
 20340                           ;arp.c: 315: }
 20341                           ;arp.c: 316: }
 20342                           ;arp.c: 317: break;
 20343                           
 20344                           ; BSR set to: 1
 20345  002126  D017               	goto	l1037
 20346  002128                     
 20347                           ;arp.c: 319: probeCounter = 0;
 20348                           
 20349                           ; BSR set to: 1
 20350  002128  0E00               	movlw	0
 20351  00212A  6E48               	movwf	arp_probe@probeCounter,c
 20352                           
 20353                           ;arp.c: 320: state = PREPARING_PROBE;
 20354  00212C  0E00               	movlw	0
 20355  00212E  6E47               	movwf	arp_probe@state,c
 20356                           
 20357                           ;arp.c: 321: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 20358  002130  0E01               	movlw	1
 20359  002132  0101               	movlb	1	; () banked
 20360  002134  6F50               	movwf	(arp_probe@err+2)& (0+255),b
 20361  002136  0E96               	movlw	150
 20362  002138                     L13:
 20363  002138  6F4F               	movwf	(arp_probe@err+1)& (0+255),b
 20364                           
 20365                           ;arp.c: 322: }
 20366  00213A  D00D               	goto	l1037
 20367  00213C                     l1035:
 20368                           
 20369                           ; BSR set to: 1
 20370  00213C  5047               	movf	arp_probe@state,w,c
 20371                           
 20372                           ; Switch size 1, requested type "space"
 20373                           ; Number of cases is 4, Range of values is 0 to 3
 20374                           ; switch strategies available:
 20375                           ; Name         Instructions Cycles
 20376                           ; simple_byte           13     7 (average)
 20377                           ;	Chosen strategy is simple_byte
 20378  00213E  0A00               	xorlw	0	; case 0
 20379  002140  B4D8               	btfsc	status,2,c
 20380  002142  D6D3               	goto	l1036
 20381  002144  0A01               	xorlw	1	; case 1
 20382  002146  B4D8               	btfsc	status,2,c
 20383  002148  D6F9               	goto	l1038
 20384  00214A  0A03               	xorlw	3	; case 2
 20385  00214C  B4D8               	btfsc	status,2,c
 20386  00214E  D74F               	goto	l1040
 20387  002150  0A01               	xorlw	1	; case 3
 20388  002152  B4D8               	btfsc	status,2,c
 20389  002154  D7E9               	goto	l1047
 20390  002156                     l1037:
 20391                           
 20392                           ;arp.c: 323: return err;
 20393  002156  C14E  F134         	movff	arp_probe@err,?_arp_probe
 20394  00215A  C14F  F135         	movff	arp_probe@err+1,?_arp_probe+1
 20395  00215E  C150  F136         	movff	arp_probe@err+2,?_arp_probe+2
 20396  002162  0012               	return		;funcret
 20397  002164                     __end_of_arp_probe:
 20398                           	opt stack 0
 20399                           tblptru	equ	0xFF8
 20400                           tblptrh	equ	0xFF7
 20401                           tblptrl	equ	0xFF6
 20402                           tablat	equ	0xFF5
 20403                           prodh	equ	0xFF4
 20404                           prodl	equ	0xFF3
 20405                           intcon	equ	0xFF2
 20406                           intcon3	equ	0xFF0
 20407                           indf0	equ	0xFEF
 20408                           postinc0	equ	0xFEE
 20409                           plusw0	equ	0xFEB
 20410                           fsr0h	equ	0xFEA
 20411                           fsr0l	equ	0xFE9
 20412                           wreg	equ	0xFE8
 20413                           indf1	equ	0xFE7
 20414                           postinc1	equ	0xFE6
 20415                           postdec1	equ	0xFE5
 20416                           plusw1	equ	0xFE3
 20417                           fsr1h	equ	0xFE2
 20418                           fsr1l	equ	0xFE1
 20419                           indf2	equ	0xFDF
 20420                           postinc2	equ	0xFDE
 20421                           postdec2	equ	0xFDD
 20422                           plusw2	equ	0xFDB
 20423                           fsr2h	equ	0xFDA
 20424                           fsr2l	equ	0xFD9
 20425                           status	equ	0xFD8
 20426                           
 20427 ;; *************** function _rand *****************
 20428 ;; Defined at:
 20429 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\rand.c"
 20430 ;; Parameters:    Size  Location     Type
 20431 ;;		None
 20432 ;; Auto vars:     Size  Location     Type
 20433 ;;		None
 20434 ;; Return value:  Size  Location     Type
 20435 ;;                  2   12[BANK0 ] int 
 20436 ;; Registers used:
 20437 ;;		wreg, status,2, status,0, cstack
 20438 ;; Tracked objects:
 20439 ;;		On entry : 0/0
 20440 ;;		On exit  : 0/0
 20441 ;;		Unchanged: 0/0
 20442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20443 ;;      Params:         0       2       0       0       0       0       0       0       0
 20444 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20445 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20446 ;;      Totals:         0       2       0       0       0       0       0       0       0
 20447 ;;Total ram usage:        2 bytes
 20448 ;; Hardware stack levels used:    1
 20449 ;; Hardware stack levels required when called:    5
 20450 ;; This function calls:
 20451 ;;		___lmul
 20452 ;; This function is called by:
 20453 ;;		_arp_probe
 20454 ;;		_ipv4_generateAutoIP
 20455 ;; This function uses a non-reentrant model
 20456 ;;
 20457                           
 20458                           	psect	text75
 20459  0057D0                     __ptext75:
 20460                           	opt stack 0
 20461  0057D0                     _rand:
 20462                           	opt stack 24
 20463                           
 20464                           ;incstack = 0
 20465  0057D0  C2A9  F060         	movff	_randx,___lmul@multiplier
 20466  0057D4  C2AA  F061         	movff	_randx+1,___lmul@multiplier+1
 20467  0057D8  C2AB  F062         	movff	_randx+2,___lmul@multiplier+2
 20468  0057DC  C2AC  F063         	movff	_randx+3,___lmul@multiplier+3
 20469  0057E0  0E6D               	movlw	109
 20470  0057E2  0100               	movlb	0	; () banked
 20471  0057E4  6F64               	movwf	___lmul@multiplicand& (0+255),b
 20472  0057E6  0E4E               	movlw	78
 20473  0057E8  6F65               	movwf	(___lmul@multiplicand+1)& (0+255),b
 20474  0057EA  0EC6               	movlw	198
 20475  0057EC  6F66               	movwf	(___lmul@multiplicand+2)& (0+255),b
 20476  0057EE  0E41               	movlw	65
 20477  0057F0  6F67               	movwf	(___lmul@multiplicand+3)& (0+255),b
 20478  0057F2  EC16  F02C         	call	___lmul	;wreg free
 20479  0057F6  C060  F2A9         	movff	?___lmul,_randx
 20480  0057FA  C061  F2AA         	movff	?___lmul+1,_randx+1
 20481  0057FE  C062  F2AB         	movff	?___lmul+2,_randx+2
 20482  005802  C063  F2AC         	movff	?___lmul+3,_randx+3
 20483  005806  0E39               	movlw	57
 20484  005808  0102               	movlb	2	; () banked
 20485  00580A  27A9               	addwf	_randx& (0+255),f,b
 20486  00580C  0E30               	movlw	48
 20487  00580E  23AA               	addwfc	(_randx+1)& (0+255),f,b
 20488  005810  0E00               	movlw	0
 20489  005812  23AB               	addwfc	(_randx+2)& (0+255),f,b
 20490  005814  0E00               	movlw	0
 20491  005816  23AC               	addwfc	(_randx+3)& (0+255),f,b
 20492                           
 20493                           ; BSR set to: 2
 20494  005818  0EFF               	movlw	255
 20495  00581A  15AB               	andwf	(_randx+2)& (0+255),w,b
 20496  00581C  0100               	movlb	0	; () banked
 20497  00581E  6F6C               	movwf	?_rand& (0+255),b
 20498  005820  0E7F               	movlw	127
 20499  005822  0102               	movlb	2	; () banked
 20500  005824  15AC               	andwf	(_randx+3)& (0+255),w,b
 20501  005826  0100               	movlb	0	; () banked
 20502  005828  6F6D               	movwf	(?_rand+1)& (0+255),b
 20503  00582A  0012               	return	
 20504  00582C                     __end_of_rand:
 20505                           	opt stack 0
 20506                           tblptru	equ	0xFF8
 20507                           tblptrh	equ	0xFF7
 20508                           tblptrl	equ	0xFF6
 20509                           tablat	equ	0xFF5
 20510                           prodh	equ	0xFF4
 20511                           prodl	equ	0xFF3
 20512                           intcon	equ	0xFF2
 20513                           intcon3	equ	0xFF0
 20514                           indf0	equ	0xFEF
 20515                           postinc0	equ	0xFEE
 20516                           plusw0	equ	0xFEB
 20517                           fsr0h	equ	0xFEA
 20518                           fsr0l	equ	0xFE9
 20519                           wreg	equ	0xFE8
 20520                           indf1	equ	0xFE7
 20521                           postinc1	equ	0xFE6
 20522                           postdec1	equ	0xFE5
 20523                           plusw1	equ	0xFE3
 20524                           fsr1h	equ	0xFE2
 20525                           fsr1l	equ	0xFE1
 20526                           indf2	equ	0xFDF
 20527                           postinc2	equ	0xFDE
 20528                           postdec2	equ	0xFDD
 20529                           plusw2	equ	0xFDB
 20530                           fsr2h	equ	0xFDA
 20531                           fsr2l	equ	0xFD9
 20532                           status	equ	0xFD8
 20533                           
 20534 ;; *************** function ___lmul *****************
 20535 ;; Defined at:
 20536 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul32.c"
 20537 ;; Parameters:    Size  Location     Type
 20538 ;;  multiplier      4    0[BANK0 ] unsigned long 
 20539 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 20540 ;; Auto vars:     Size  Location     Type
 20541 ;;  product         4    8[BANK0 ] unsigned long 
 20542 ;; Return value:  Size  Location     Type
 20543 ;;                  4    0[BANK0 ] unsigned long 
 20544 ;; Registers used:
 20545 ;;		wreg, status,2, status,0
 20546 ;; Tracked objects:
 20547 ;;		On entry : 0/0
 20548 ;;		On exit  : 0/0
 20549 ;;		Unchanged: 0/0
 20550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20551 ;;      Params:         0       8       0       0       0       0       0       0       0
 20552 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20553 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20554 ;;      Totals:         0      12       0       0       0       0       0       0       0
 20555 ;;Total ram usage:       12 bytes
 20556 ;; Hardware stack levels used:    1
 20557 ;; Hardware stack levels required when called:    4
 20558 ;; This function calls:
 20559 ;;		Nothing
 20560 ;; This function is called by:
 20561 ;;		_rand
 20562 ;; This function uses a non-reentrant model
 20563 ;;
 20564                           
 20565                           	psect	text76
 20566  00582C                     __ptext76:
 20567                           	opt stack 0
 20568  00582C                     ___lmul:
 20569                           	opt stack 24
 20570                           
 20571                           ; BSR set to: 0
 20572                           ;incstack = 0
 20573  00582C  0E00               	movlw	0
 20574  00582E  0100               	movlb	0	; () banked
 20575  005830  6F68               	movwf	___lmul@product& (0+255),b
 20576  005832  0E00               	movlw	0
 20577  005834  6F69               	movwf	(___lmul@product+1)& (0+255),b
 20578  005836  0E00               	movlw	0
 20579  005838  6F6A               	movwf	(___lmul@product+2)& (0+255),b
 20580  00583A  0E00               	movlw	0
 20581  00583C  6F6B               	movwf	(___lmul@product+3)& (0+255),b
 20582  00583E                     
 20583                           ; BSR set to: 0
 20584                           
 20585                           ; BSR set to: 0
 20586  00583E  A160               	btfss	___lmul@multiplier& (0+255),0,b
 20587  005840  D008               	goto	l1364
 20588                           
 20589                           ; BSR set to: 0
 20590  005842  5164               	movf	___lmul@multiplicand& (0+255),w,b
 20591  005844  2768               	addwf	___lmul@product& (0+255),f,b
 20592  005846  5165               	movf	(___lmul@multiplicand+1)& (0+255),w,b
 20593  005848  2369               	addwfc	(___lmul@product+1)& (0+255),f,b
 20594  00584A  5166               	movf	(___lmul@multiplicand+2)& (0+255),w,b
 20595  00584C  236A               	addwfc	(___lmul@product+2)& (0+255),f,b
 20596  00584E  5167               	movf	(___lmul@multiplicand+3)& (0+255),w,b
 20597  005850  236B               	addwfc	(___lmul@product+3)& (0+255),f,b
 20598  005852                     l1364:
 20599                           
 20600                           ; BSR set to: 0
 20601                           
 20602                           ; BSR set to: 0
 20603  005852  90D8               	bcf	status,0,c
 20604  005854  3764               	rlcf	___lmul@multiplicand& (0+255),f,b
 20605  005856  3765               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
 20606  005858  3766               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
 20607  00585A  3767               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
 20608                           
 20609                           ; BSR set to: 0
 20610  00585C  90D8               	bcf	status,0,c
 20611  00585E  3363               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
 20612  005860  3362               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
 20613  005862  3361               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
 20614  005864  3360               	rrcf	___lmul@multiplier& (0+255),f,b
 20615  005866  5160               	movf	___lmul@multiplier& (0+255),w,b
 20616  005868  1161               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
 20617  00586A  1162               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
 20618  00586C  1163               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
 20619  00586E  A4D8               	btfss	status,2,c
 20620  005870  D7E6               	goto	l1363
 20621                           
 20622                           ; BSR set to: 0
 20623  005872  C068  F060         	movff	___lmul@product,?___lmul
 20624  005876  C069  F061         	movff	___lmul@product+1,?___lmul+1
 20625  00587A  C06A  F062         	movff	___lmul@product+2,?___lmul+2
 20626  00587E  C06B  F063         	movff	___lmul@product+3,?___lmul+3
 20627                           
 20628                           ; BSR set to: 0
 20629  005882  0012               	return		;funcret
 20630  005884                     __end_of___lmul:
 20631                           	opt stack 0
 20632                           tblptru	equ	0xFF8
 20633                           tblptrh	equ	0xFF7
 20634                           tblptrl	equ	0xFF6
 20635                           tablat	equ	0xFF5
 20636                           prodh	equ	0xFF4
 20637                           prodl	equ	0xFF3
 20638                           intcon	equ	0xFF2
 20639                           intcon3	equ	0xFF0
 20640                           indf0	equ	0xFEF
 20641                           postinc0	equ	0xFEE
 20642                           plusw0	equ	0xFEB
 20643                           fsr0h	equ	0xFEA
 20644                           fsr0l	equ	0xFE9
 20645                           wreg	equ	0xFE8
 20646                           indf1	equ	0xFE7
 20647                           postinc1	equ	0xFE6
 20648                           postdec1	equ	0xFE5
 20649                           plusw1	equ	0xFE3
 20650                           fsr1h	equ	0xFE2
 20651                           fsr1l	equ	0xFE1
 20652                           indf2	equ	0xFDF
 20653                           postinc2	equ	0xFDE
 20654                           postdec2	equ	0xFDD
 20655                           plusw2	equ	0xFDB
 20656                           fsr2h	equ	0xFDA
 20657                           fsr2l	equ	0xFD9
 20658                           status	equ	0xFD8
 20659                           
 20660 ;; *************** function _ipv4_setToAllZero *****************
 20661 ;; Defined at:
 20662 ;;		line 470 in file "src/stack/protocols/ipv4.c"
 20663 ;; Parameters:    Size  Location     Type
 20664 ;;  ip              2    0[BANK0 ] PTR struct ipv4_address
 20665 ;;		 -> ipPreliminarySource(4), ipSource(4), arp_init@ip(4), arp_probe@ipSender(4), 
 20666 ;; Auto vars:     Size  Location     Type
 20667 ;;  i               1    2[BANK0 ] unsigned char 
 20668 ;; Return value:  Size  Location     Type
 20669 ;;                  1    wreg      void 
 20670 ;; Registers used:
 20671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20672 ;; Tracked objects:
 20673 ;;		On entry : 0/0
 20674 ;;		On exit  : 0/0
 20675 ;;		Unchanged: 0/0
 20676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20677 ;;      Params:         0       2       0       0       0       0       0       0       0
 20678 ;;      Locals:         0       1       0       0       0       0       0       0       0
 20679 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20680 ;;      Totals:         0       3       0       0       0       0       0       0       0
 20681 ;;Total ram usage:        3 bytes
 20682 ;; Hardware stack levels used:    1
 20683 ;; Hardware stack levels required when called:    4
 20684 ;; This function calls:
 20685 ;;		Nothing
 20686 ;; This function is called by:
 20687 ;;		_arp_probe
 20688 ;;		_arp_init
 20689 ;;		_ipv4_init
 20690 ;; This function uses a non-reentrant model
 20691 ;;
 20692                           
 20693                           	psect	text77
 20694  006002                     __ptext77:
 20695                           	opt stack 0
 20696  006002                     _ipv4_setToAllZero:
 20697                           	opt stack 24
 20698                           
 20699                           ;ipv4.c: 471: for (uint8_t i = 0; i < 4; i++) {
 20700                           
 20701                           ; BSR set to: 0
 20702                           ;incstack = 0
 20703  006002  0E00               	movlw	0
 20704  006004  0100               	movlb	0	; () banked
 20705  006006  6F62               	movwf	ipv4_setToAllZero@i& (0+255),b
 20706  006008                     l10383:
 20707                           
 20708                           ; BSR set to: 0
 20709  006008  0E03               	movlw	3
 20710  00600A  6562               	cpfsgt	ipv4_setToAllZero@i& (0+255),b
 20711  00600C  D001               	goto	l1265
 20712  00600E  0012               	return	
 20713  006010                     l1265:
 20714                           
 20715                           ; BSR set to: 0
 20716                           ;ipv4.c: 472: ip->address[i] = 0x00;
 20717                           
 20718                           ; BSR set to: 0
 20719  006010  5162               	movf	ipv4_setToAllZero@i& (0+255),w,b
 20720  006012  0D01               	mullw	1
 20721  006014  50F3               	movf	prodl,w,c
 20722  006016  2560               	addwf	ipv4_setToAllZero@ip& (0+255),w,b
 20723  006018  6ED9               	movwf	fsr2l,c
 20724  00601A  50F4               	movf	prodh,w,c
 20725  00601C  2161               	addwfc	(ipv4_setToAllZero@ip+1)& (0+255),w,b
 20726  00601E  6EDA               	movwf	fsr2h,c
 20727  006020  0E00               	movlw	0
 20728  006022  6EDF               	movwf	indf2,c
 20729                           
 20730                           ; BSR set to: 0
 20731  006024  2B62               	incf	ipv4_setToAllZero@i& (0+255),f,b
 20732  006026  D7F0               	goto	l10383
 20733  006028                     __end_of_ipv4_setToAllZero:
 20734                           	opt stack 0
 20735                           tblptru	equ	0xFF8
 20736                           tblptrh	equ	0xFF7
 20737                           tblptrl	equ	0xFF6
 20738                           tablat	equ	0xFF5
 20739                           prodh	equ	0xFF4
 20740                           prodl	equ	0xFF3
 20741                           intcon	equ	0xFF2
 20742                           intcon3	equ	0xFF0
 20743                           indf0	equ	0xFEF
 20744                           postinc0	equ	0xFEE
 20745                           plusw0	equ	0xFEB
 20746                           fsr0h	equ	0xFEA
 20747                           fsr0l	equ	0xFE9
 20748                           wreg	equ	0xFE8
 20749                           indf1	equ	0xFE7
 20750                           postinc1	equ	0xFE6
 20751                           postdec1	equ	0xFE5
 20752                           plusw1	equ	0xFE3
 20753                           fsr1h	equ	0xFE2
 20754                           fsr1l	equ	0xFE1
 20755                           indf2	equ	0xFDF
 20756                           postinc2	equ	0xFDE
 20757                           postdec2	equ	0xFDD
 20758                           plusw2	equ	0xFDB
 20759                           fsr2h	equ	0xFDA
 20760                           fsr2l	equ	0xFD9
 20761                           status	equ	0xFD8
 20762                           
 20763 ;; *************** function _arp_gratuitous *****************
 20764 ;; Defined at:
 20765 ;;		line 326 in file "src/stack/protocols/arp.c"
 20766 ;; Parameters:    Size  Location     Type
 20767 ;;  ip              4   52[BANK1 ] struct ipv4_address
 20768 ;;  link            1   56[BANK1 ] enum E233
 20769 ;; Auto vars:     Size  Location     Type
 20770 ;;  err             3  157[BANK0 ] struct error
 20771 ;;  index           1  156[BANK0 ] unsigned char 
 20772 ;; Return value:  Size  Location     Type
 20773 ;;                  3   52[BANK1 ] struct error
 20774 ;; Registers used:
 20775 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20776 ;; Tracked objects:
 20777 ;;		On entry : 0/0
 20778 ;;		On exit  : 0/0
 20779 ;;		Unchanged: 0/0
 20780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20781 ;;      Params:         0       0       5       0       0       0       0       0       0
 20782 ;;      Locals:         0       4       0       0       0       0       0       0       0
 20783 ;;      Temps:          0       0       8       0       0       0       0       0       0
 20784 ;;      Totals:         0       4      13       0       0       0       0       0       0
 20785 ;;Total ram usage:       17 bytes
 20786 ;; Hardware stack levels used:    1
 20787 ;; Hardware stack levels required when called:   11
 20788 ;; This function calls:
 20789 ;;		_UARTTransmitText
 20790 ;;		_arp_checkForEntry
 20791 ;;		_arp_sendRequest
 20792 ;;		_getMillis
 20793 ;;		_ipAdressToString
 20794 ;; This function is called by:
 20795 ;;		_arp_background
 20796 ;; This function uses a non-reentrant model
 20797 ;;
 20798                           
 20799                           	psect	text78
 20800  002AF2                     __ptext78:
 20801                           	opt stack 0
 20802  002AF2                     _arp_gratuitous:
 20803                           	opt stack 17
 20804                           
 20805                           ;arp.c: 327: uint8_t static announceCounter = 0;
 20806                           ;arp.c: 328: uint8_t static state = 0;
 20807                           ;arp.c: 329: time_t static timeStart = 0;
 20808                           ;arp.c: 330: uint8_t index;
 20809                           ;arp.c: 331: error_t err;
 20810                           ;arp.c: 333: enum states {
 20811                           ;arp.c: 334: INIT, WAIT_FOR_ANNOUNCE, ANNOUNCING, ENTRY_FOUND
 20812                           ;arp.c: 335: };
 20813                           ;arp.c: 336: err.module = ERROR_MODULE_ARP;
 20814                           
 20815                           ; BSR set to: 0
 20816                           ;incstack = 0
 20817  002AF2  0E03               	movlw	3
 20818  002AF4  0100               	movlb	0	; () banked
 20819  002AF6  6FFD               	movwf	arp_gratuitous@err& (0+255),b
 20820                           
 20821                           ;arp.c: 337: err.code = ERROR_ARP_WAITING;
 20822  002AF8  0E01               	movlw	1
 20823  002AFA  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 20824  002AFC  0E91               	movlw	145
 20825  002AFE  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 20826                           
 20827                           ;arp.c: 339: if (link == NO_LINK) {
 20828  002B00  0101               	movlb	1	; () banked
 20829  002B02  5138               	movf	arp_gratuitous@link& (0+255),w,b
 20830  002B04  A4D8               	btfss	status,2,c
 20831  002B06  D010               	goto	l1056
 20832                           
 20833                           ; BSR set to: 1
 20834                           ;arp.c: 340: announceCounter = 0;
 20835  002B08  0E00               	movlw	0
 20836  002B0A  6E46               	movwf	arp_gratuitous@announceCounter,c
 20837                           
 20838                           ;arp.c: 341: state = INIT;
 20839  002B0C  0E00               	movlw	0
 20840  002B0E  6E45               	movwf	arp_gratuitous@state,c
 20841                           
 20842                           ;arp.c: 342: err.code = ERROR_ARP_CONNECTION_FAILED;
 20843  002B10  0E01               	movlw	1
 20844  002B12  0100               	movlb	0	; () banked
 20845  002B14  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 20846  002B16  0E97               	movlw	151
 20847  002B18  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 20848                           
 20849                           ; BSR set to: 0
 20850                           ;arp.c: 343: return err;
 20851  002B1A  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 20852  002B1E  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 20853  002B22  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 20854                           
 20855                           ; BSR set to: 0
 20856  002B26  0012               	return	
 20857  002B28                     l1056:
 20858                           
 20859                           ;arp.c: 344: }
 20860                           ;arp.c: 346: if (arp_checkForEntry(ip, &index)) {
 20861                           
 20862                           ; BSR set to: 0
 20863  002B28  C134  F067         	movff	arp_gratuitous@ip,arp_checkForEntry@ip
 20864  002B2C  C135  F068         	movff	arp_gratuitous@ip+1,arp_checkForEntry@ip+1
 20865  002B30  C136  F069         	movff	arp_gratuitous@ip+2,arp_checkForEntry@ip+2
 20866  002B34  C137  F06A         	movff	arp_gratuitous@ip+3,arp_checkForEntry@ip+3
 20867  002B38  0EFC               	movlw	low arp_gratuitous@index
 20868  002B3A  0100               	movlb	0	; () banked
 20869  002B3C  6F6B               	movwf	arp_checkForEntry@index& (0+255),b
 20870  002B3E  0E00               	movlw	high arp_gratuitous@index
 20871  002B40  6F6C               	movwf	(arp_checkForEntry@index+1)& (0+255),b
 20872  002B42  EC84  F025         	call	_arp_checkForEntry	;wreg free
 20873  002B46  0900               	iorlw	0
 20874  002B48  B4D8               	btfsc	status,2,c
 20875  002B4A  D0DC               	goto	l1059
 20876                           
 20877                           ;arp.c: 347: state = ENTRY_FOUND;
 20878  002B4C  0E03               	movlw	3
 20879  002B4E  6E45               	movwf	arp_gratuitous@state,c
 20880                           
 20881                           ;arp.c: 348: }
 20882                           ;arp.c: 350: switch (state) {
 20883  002B50  D0D9               	goto	l1059
 20884  002B52                     
 20885                           ;arp.c: 352: err.code = ERROR_ARP_WAITING;
 20886  002B52  0E01               	movlw	1
 20887  002B54  0100               	movlb	0	; () banked
 20888  002B56  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 20889  002B58  0E91               	movlw	145
 20890  002B5A  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 20891                           
 20892                           ; BSR set to: 0
 20893                           ;arp.c: 353: timeStart = getMillis();
 20894  002B5C  EC01  F031         	call	_getMillis	;wreg free
 20895  002B60  C060  F031         	movff	?_getMillis,arp_gratuitous@timeStart
 20896  002B64  C061  F032         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 20897  002B68  C062  F033         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 20898  002B6C  C063  F034         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 20899                           
 20900                           ;arp.c: 354: state = WAIT_FOR_ANNOUNCE;
 20901  002B70  0E01               	movlw	1
 20902  002B72  6E45               	movwf	arp_gratuitous@state,c
 20903                           
 20904                           ;arp.c: 355: break;
 20905  002B74  D0D4               	goto	l1061
 20906  002B76                     
 20907                           ;arp.c: 357: err.code = ERROR_ARP_WAITING;
 20908  002B76  0E01               	movlw	1
 20909  002B78  0100               	movlb	0	; () banked
 20910  002B7A  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 20911  002B7C  0E91               	movlw	145
 20912  002B7E  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 20913                           
 20914                           ; BSR set to: 0
 20915                           ;arp.c: 358: if ((getMillis() - timeStart) > 2000u) {
 20916  002B80  C031  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 20917  002B84  C032  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 20918  002B88  C033  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 20919  002B8C  C034  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 20920  002B90  0101               	movlb	1	; () banked
 20921  002B92  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 20922  002B94  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 20923  002B96  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 20924  002B98  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 20925  002B9A  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 20926  002B9C  0E00               	movlw	0
 20927  002B9E  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 20928  002BA0  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 20929  002BA2  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 20930  002BA4  EC01  F031         	call	_getMillis	;wreg free
 20931  002BA8  0101               	movlb	1	; () banked
 20932  002BAA  5139               	movf	??_arp_gratuitous& (0+255),w,b
 20933  002BAC  0100               	movlb	0	; () banked
 20934  002BAE  2560               	addwf	?_getMillis& (0+255),w,b
 20935  002BB0  0101               	movlb	1	; () banked
 20936  002BB2  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 20937  002BB4  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 20938  002BB6  0100               	movlb	0	; () banked
 20939  002BB8  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 20940  002BBA  0101               	movlb	1	; () banked
 20941  002BBC  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 20942  002BBE  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 20943  002BC0  0100               	movlb	0	; () banked
 20944  002BC2  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 20945  002BC4  0101               	movlb	1	; () banked
 20946  002BC6  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 20947  002BC8  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 20948  002BCA  0100               	movlb	0	; () banked
 20949  002BCC  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 20950  002BCE  0101               	movlb	1	; () banked
 20951  002BD0  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 20952  002BD2  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 20953  002BD4  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 20954  002BD6  E106               	bnz	u13030
 20955  002BD8  0ED1               	movlw	209
 20956  002BDA  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 20957  002BDC  0E07               	movlw	7
 20958  002BDE  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 20959  002BE0  A0D8               	btfss	status,0,c
 20960  002BE2  D09D               	goto	l1061
 20961  002BE4                     u13030:
 20962                           
 20963                           ; BSR set to: 1
 20964                           ;arp.c: 359: state = ANNOUNCING;
 20965  002BE4  0E02               	movlw	2
 20966  002BE6  6E45               	movwf	arp_gratuitous@state,c
 20967                           
 20968                           ;arp.c: 360: announceCounter = 0;
 20969  002BE8  0E00               	movlw	0
 20970  002BEA  6E46               	movwf	arp_gratuitous@announceCounter,c
 20971                           
 20972                           ; BSR set to: 1
 20973                           ;arp.c: 361: }
 20974                           ;arp.c: 362: break;
 20975  002BEC  D098               	goto	l1061
 20976  002BEE                     
 20977                           ;arp.c: 364: err.code = ERROR_ARP_WAITING;
 20978                           
 20979                           ; BSR set to: 1
 20980  002BEE  0E01               	movlw	1
 20981  002BF0  0100               	movlb	0	; () banked
 20982  002BF2  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 20983  002BF4  0E91               	movlw	145
 20984  002BF6  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 20985                           
 20986                           ;arp.c: 365: if ((announceCounter == 0) || (getMillis() - timeStart) > 2000u) {
 20987  002BF8  5046               	movf	arp_gratuitous@announceCounter,w,c
 20988  002BFA  B4D8               	btfsc	status,2,c
 20989  002BFC  D032               	goto	u13050
 20990                           
 20991                           ; BSR set to: 0
 20992  002BFE  C031  F139         	movff	arp_gratuitous@timeStart,??_arp_gratuitous
 20993  002C02  C032  F13A         	movff	arp_gratuitous@timeStart+1,??_arp_gratuitous+1
 20994  002C06  C033  F13B         	movff	arp_gratuitous@timeStart+2,??_arp_gratuitous+2
 20995  002C0A  C034  F13C         	movff	arp_gratuitous@timeStart+3,??_arp_gratuitous+3
 20996  002C0E  0101               	movlb	1	; () banked
 20997  002C10  1F39               	comf	??_arp_gratuitous& (0+255),f,b
 20998  002C12  1F3A               	comf	(??_arp_gratuitous+1)& (0+255),f,b
 20999  002C14  1F3B               	comf	(??_arp_gratuitous+2)& (0+255),f,b
 21000  002C16  1F3C               	comf	(??_arp_gratuitous+3)& (0+255),f,b
 21001  002C18  2B39               	incf	??_arp_gratuitous& (0+255),f,b
 21002  002C1A  0E00               	movlw	0
 21003  002C1C  233A               	addwfc	(??_arp_gratuitous+1)& (0+255),f,b
 21004  002C1E  233B               	addwfc	(??_arp_gratuitous+2)& (0+255),f,b
 21005  002C20  233C               	addwfc	(??_arp_gratuitous+3)& (0+255),f,b
 21006  002C22  EC01  F031         	call	_getMillis	;wreg free
 21007  002C26  0101               	movlb	1	; () banked
 21008  002C28  5139               	movf	??_arp_gratuitous& (0+255),w,b
 21009  002C2A  0100               	movlb	0	; () banked
 21010  002C2C  2560               	addwf	?_getMillis& (0+255),w,b
 21011  002C2E  0101               	movlb	1	; () banked
 21012  002C30  6F3D               	movwf	(??_arp_gratuitous+4)& (0+255),b
 21013  002C32  513A               	movf	(??_arp_gratuitous+1)& (0+255),w,b
 21014  002C34  0100               	movlb	0	; () banked
 21015  002C36  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 21016  002C38  0101               	movlb	1	; () banked
 21017  002C3A  6F3E               	movwf	(??_arp_gratuitous+5)& (0+255),b
 21018  002C3C  513B               	movf	(??_arp_gratuitous+2)& (0+255),w,b
 21019  002C3E  0100               	movlb	0	; () banked
 21020  002C40  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 21021  002C42  0101               	movlb	1	; () banked
 21022  002C44  6F3F               	movwf	(??_arp_gratuitous+6)& (0+255),b
 21023  002C46  513C               	movf	(??_arp_gratuitous+3)& (0+255),w,b
 21024  002C48  0100               	movlb	0	; () banked
 21025  002C4A  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 21026  002C4C  0101               	movlb	1	; () banked
 21027  002C4E  6F40               	movwf	(??_arp_gratuitous+7)& (0+255),b
 21028  002C50  5140               	movf	(??_arp_gratuitous+7)& (0+255),w,b
 21029  002C52  113F               	iorwf	(??_arp_gratuitous+6)& (0+255),w,b
 21030  002C54  E106               	bnz	l10907
 21031  002C56  0ED1               	movlw	209
 21032  002C58  5D3D               	subwf	(??_arp_gratuitous+4)& (0+255),w,b
 21033  002C5A  0E07               	movlw	7
 21034  002C5C  593E               	subwfb	(??_arp_gratuitous+5)& (0+255),w,b
 21035  002C5E  A0D8               	btfss	status,0,c
 21036  002C60  D03B               	goto	l1065
 21037  002C62                     u13050:
 21038  002C62                     l10907:
 21039                           
 21040                           ;arp.c: 367: UARTTransmitText("[ARP]: Sending Gratuitous ARP request for ");
 21041  002C62  0E66               	movlw	low STR_105
 21042  002C64  0100               	movlb	0	; () banked
 21043  002C66  6F98               	movwf	UARTTransmitText@str& (0+255),b
 21044  002C68  0E7A               	movlw	high STR_105
 21045  002C6A  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 21046  002C6C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 21047                           
 21048                           ;arp.c: 368: UARTTransmitText(ipAdressToString(ip));
 21049  002C70  C134  F073         	movff	arp_gratuitous@ip,ipAdressToString@ip
 21050  002C74  C135  F074         	movff	arp_gratuitous@ip+1,ipAdressToString@ip+1
 21051  002C78  C136  F075         	movff	arp_gratuitous@ip+2,ipAdressToString@ip+2
 21052  002C7C  C137  F076         	movff	arp_gratuitous@ip+3,ipAdressToString@ip+3
 21053  002C80  EC96  F016         	call	_ipAdressToString	;wreg free
 21054  002C84  C073  F098         	movff	?_ipAdressToString,UARTTransmitText@str
 21055  002C88  C074  F099         	movff	?_ipAdressToString+1,UARTTransmitText@str+1
 21056  002C8C  EC42  F02C         	call	_UARTTransmitText	;wreg free
 21057                           
 21058                           ;arp.c: 369: UARTTransmitText("\n\r");
 21059  002C90  0EDD               	movlw	low (STR_104+1)
 21060  002C92  0100               	movlb	0	; () banked
 21061  002C94  6F98               	movwf	UARTTransmitText@str& (0+255),b
 21062  002C96  0E7F               	movlw	high (STR_104+1)
 21063  002C98  6F99               	movwf	(UARTTransmitText@str+1)& (0+255),b
 21064  002C9A  EC42  F02C         	call	_UARTTransmitText	;wreg free
 21065                           
 21066                           ;arp.c: 371: timeStart = getMillis();
 21067  002C9E  EC01  F031         	call	_getMillis	;wreg free
 21068  002CA2  C060  F031         	movff	?_getMillis,arp_gratuitous@timeStart
 21069  002CA6  C061  F032         	movff	?_getMillis+1,arp_gratuitous@timeStart+1
 21070  002CAA  C062  F033         	movff	?_getMillis+2,arp_gratuitous@timeStart+2
 21071  002CAE  C063  F034         	movff	?_getMillis+3,arp_gratuitous@timeStart+3
 21072                           
 21073                           ;arp.c: 372: arp_sendRequest(ip, ip);
 21074  002CB2  C134  F100         	movff	arp_gratuitous@ip,arp_sendRequest@ipSender
 21075  002CB6  C135  F101         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipSender+1
 21076  002CBA  C136  F102         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipSender+2
 21077  002CBE  C137  F103         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipSender+3
 21078  002CC2  C134  F104         	movff	arp_gratuitous@ip,arp_sendRequest@ipTarget
 21079  002CC6  C135  F105         	movff	arp_gratuitous@ip+1,arp_sendRequest@ipTarget+1
 21080  002CCA  C136  F106         	movff	arp_gratuitous@ip+2,arp_sendRequest@ipTarget+2
 21081  002CCE  C137  F107         	movff	arp_gratuitous@ip+3,arp_sendRequest@ipTarget+3
 21082  002CD2  EC2B  F027         	call	_arp_sendRequest	;wreg free
 21083                           
 21084                           ;arp.c: 373: announceCounter++;
 21085  002CD6  2A46               	incf	arp_gratuitous@announceCounter,f,c
 21086  002CD8                     l1065:
 21087                           
 21088                           ;arp.c: 374: }
 21089                           ;arp.c: 375: if (announceCounter >= 2u) {
 21090  002CD8  0E01               	movlw	1
 21091  002CDA  6446               	cpfsgt	arp_gratuitous@announceCounter,c
 21092  002CDC  D020               	goto	l1061
 21093                           
 21094                           ;arp.c: 377: announceCounter = 0;
 21095  002CDE  0E00               	movlw	0
 21096  002CE0  6E46               	movwf	arp_gratuitous@announceCounter,c
 21097                           
 21098                           ;arp.c: 378: state = INIT;
 21099  002CE2  0E00               	movlw	0
 21100  002CE4  6E45               	movwf	arp_gratuitous@state,c
 21101                           
 21102                           ;arp.c: 379: err.code = (uint16_t)0;
 21103  002CE6  0E00               	movlw	0
 21104  002CE8  0100               	movlb	0	; () banked
 21105  002CEA  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 21106  002CEC  0E00               	movlw	0
 21107  002CEE  D008               	goto	L14
 21108  002CF0                     
 21109                           ;arp.c: 383: announceCounter = 0;
 21110                           
 21111                           ; BSR set to: 0
 21112  002CF0  0E00               	movlw	0
 21113  002CF2  6E46               	movwf	arp_gratuitous@announceCounter,c
 21114                           
 21115                           ;arp.c: 384: state = INIT;
 21116  002CF4  0E00               	movlw	0
 21117  002CF6  6E45               	movwf	arp_gratuitous@state,c
 21118                           
 21119                           ;arp.c: 385: err.code = ERROR_ARP_IPv4_ADDRESS_CONFLICT;
 21120  002CF8  0E01               	movlw	1
 21121  002CFA  0100               	movlb	0	; () banked
 21122  002CFC  6FFF               	movwf	(arp_gratuitous@err+2)& (0+255),b
 21123  002CFE  0E96               	movlw	150
 21124  002D00                     L14:
 21125  002D00  6FFE               	movwf	(arp_gratuitous@err+1)& (0+255),b
 21126                           
 21127                           ; BSR set to: 0
 21128                           ;arp.c: 388: }
 21129                           
 21130                           ;arp.c: 386: break;
 21131  002D02  D00D               	goto	l1061
 21132  002D04                     l1059:
 21133                           
 21134                           ; BSR set to: 0
 21135  002D04  5045               	movf	arp_gratuitous@state,w,c
 21136                           
 21137                           ; Switch size 1, requested type "space"
 21138                           ; Number of cases is 4, Range of values is 0 to 3
 21139                           ; switch strategies available:
 21140                           ; Name         Instructions Cycles
 21141                           ; simple_byte           13     7 (average)
 21142                           ;	Chosen strategy is simple_byte
 21143  002D06  0A00               	xorlw	0	; case 0
 21144  002D08  B4D8               	btfsc	status,2,c
 21145  002D0A  D723               	goto	l1060
 21146  002D0C  0A01               	xorlw	1	; case 1
 21147  002D0E  B4D8               	btfsc	status,2,c
 21148  002D10  D732               	goto	l1062
 21149  002D12  0A03               	xorlw	3	; case 2
 21150  002D14  B4D8               	btfsc	status,2,c
 21151  002D16  D76B               	goto	l1064
 21152  002D18  0A01               	xorlw	1	; case 3
 21153  002D1A  B4D8               	btfsc	status,2,c
 21154  002D1C  D7E9               	goto	l1069
 21155  002D1E                     l1061:
 21156                           
 21157                           ;arp.c: 389: return err;
 21158  002D1E  C0FD  F134         	movff	arp_gratuitous@err,?_arp_gratuitous
 21159  002D22  C0FE  F135         	movff	arp_gratuitous@err+1,?_arp_gratuitous+1
 21160  002D26  C0FF  F136         	movff	arp_gratuitous@err+2,?_arp_gratuitous+2
 21161  002D2A  0012               	return		;funcret
 21162  002D2C                     __end_of_arp_gratuitous:
 21163                           	opt stack 0
 21164                           tblptru	equ	0xFF8
 21165                           tblptrh	equ	0xFF7
 21166                           tblptrl	equ	0xFF6
 21167                           tablat	equ	0xFF5
 21168                           prodh	equ	0xFF4
 21169                           prodl	equ	0xFF3
 21170                           intcon	equ	0xFF2
 21171                           intcon3	equ	0xFF0
 21172                           indf0	equ	0xFEF
 21173                           postinc0	equ	0xFEE
 21174                           plusw0	equ	0xFEB
 21175                           fsr0h	equ	0xFEA
 21176                           fsr0l	equ	0xFE9
 21177                           wreg	equ	0xFE8
 21178                           indf1	equ	0xFE7
 21179                           postinc1	equ	0xFE6
 21180                           postdec1	equ	0xFE5
 21181                           plusw1	equ	0xFE3
 21182                           fsr1h	equ	0xFE2
 21183                           fsr1l	equ	0xFE1
 21184                           indf2	equ	0xFDF
 21185                           postinc2	equ	0xFDE
 21186                           postdec2	equ	0xFDD
 21187                           plusw2	equ	0xFDB
 21188                           fsr2h	equ	0xFDA
 21189                           fsr2l	equ	0xFD9
 21190                           status	equ	0xFD8
 21191                           
 21192 ;; *************** function _ipAdressToString *****************
 21193 ;; Defined at:
 21194 ;;		line 162 in file "src/system/uart.c"
 21195 ;; Parameters:    Size  Location     Type
 21196 ;;  ip              4   19[BANK0 ] struct ipv4_address
 21197 ;; Auto vars:     Size  Location     Type
 21198 ;;  i               1   40[BANK0 ] unsigned char 
 21199 ;;  hundreds        4   35[BANK0 ] unsigned char [4]
 21200 ;;  tens            4   31[BANK0 ] unsigned char [4]
 21201 ;;  ones            4   27[BANK0 ] unsigned char [4]
 21202 ;;  pointer         1   39[BANK0 ] unsigned char 
 21203 ;; Return value:  Size  Location     Type
 21204 ;;                  2   19[BANK0 ] PTR unsigned char 
 21205 ;; Registers used:
 21206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21207 ;; Tracked objects:
 21208 ;;		On entry : 0/0
 21209 ;;		On exit  : 0/0
 21210 ;;		Unchanged: 0/0
 21211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21212 ;;      Params:         0       4       0       0       0       0       0       0       0
 21213 ;;      Locals:         0      14       0       0       0       0       0       0       0
 21214 ;;      Temps:          0       4       0       0       0       0       0       0       0
 21215 ;;      Totals:         0      22       0       0       0       0       0       0       0
 21216 ;;Total ram usage:       22 bytes
 21217 ;; Hardware stack levels used:    1
 21218 ;; Hardware stack levels required when called:    5
 21219 ;; This function calls:
 21220 ;;		___lwdiv
 21221 ;;		___lwmod
 21222 ;; This function is called by:
 21223 ;;		_handleStackBackgroundTasks
 21224 ;;		_arp_handleNewPacket
 21225 ;;		_arp_sendReply
 21226 ;;		_arp_probe
 21227 ;;		_arp_gratuitous
 21228 ;;		_arp_setNewEntry
 21229 ;;		_icmp_sendEchoReply
 21230 ;;		_arpEntryToString
 21231 ;; This function uses a non-reentrant model
 21232 ;;
 21233                           
 21234                           	psect	text79
 21235  002D2C                     __ptext79:
 21236                           	opt stack 0
 21237  002D2C                     _ipAdressToString:
 21238                           	opt stack 22
 21239                           
 21240                           ;uart.c: 163: char static address [] = "???.???.???.???";
 21241                           ;uart.c: 164: uint8_t hundreds[4];
 21242                           ;uart.c: 165: uint8_t tens[4];
 21243                           ;uart.c: 166: uint8_t ones[4];
 21244                           ;uart.c: 167: uint8_t pointer = 0;
 21245                           
 21246                           ;incstack = 0
 21247  002D2C  0E00               	movlw	0
 21248  002D2E  0100               	movlb	0	; () banked
 21249  002D30  6F87               	movwf	ipAdressToString@pointer& (0+255),b
 21250                           
 21251                           ;uart.c: 169: for (uint8_t i = 0; i < 4; i++) {
 21252  002D32  0E00               	movlw	0
 21253  002D34  6F88               	movwf	ipAdressToString@i& (0+255),b
 21254  002D36                     l9575:
 21255                           
 21256                           ; BSR set to: 0
 21257  002D36  0E03               	movlw	3
 21258  002D38  6588               	cpfsgt	ipAdressToString@i& (0+255),b
 21259  002D3A  D001               	goto	l889
 21260  002D3C  D0DF               	goto	u10870
 21261  002D3E                     l889:
 21262                           
 21263                           ; BSR set to: 0
 21264                           ;uart.c: 171: hundreds[i] = ip.address[i] / 100u;
 21265                           
 21266                           ; BSR set to: 0
 21267  002D3E  5188               	movf	ipAdressToString@i& (0+255),w,b
 21268  002D40  0D01               	mullw	1
 21269  002D42  0E83               	movlw	low ipAdressToString@hundreds
 21270  002D44  24F3               	addwf	prodl,w,c
 21271  002D46  6ED9               	movwf	fsr2l,c
 21272  002D48  0E00               	movlw	high ipAdressToString@hundreds
 21273  002D4A  20F4               	addwfc	prodh,w,c
 21274  002D4C  6EDA               	movwf	fsr2h,c
 21275  002D4E  5188               	movf	ipAdressToString@i& (0+255),w,b
 21276  002D50  0D01               	mullw	1
 21277  002D52  0E73               	movlw	low ipAdressToString@ip
 21278  002D54  24F3               	addwf	prodl,w,c
 21279  002D56  6EE1               	movwf	fsr1l,c
 21280  002D58  0E00               	movlw	high ipAdressToString@ip
 21281  002D5A  20F4               	addwfc	prodh,w,c
 21282  002D5C  6EE2               	movwf	fsr1h,c
 21283  002D5E  50E7               	movf	indf1,w,c
 21284  002D60  6F77               	movwf	??_ipAdressToString& (0+255),b
 21285  002D62  5177               	movf	??_ipAdressToString& (0+255),w,b
 21286  002D64  6F60               	movwf	___lwdiv@dividend& (0+255),b
 21287  002D66  6B61               	clrf	(___lwdiv@dividend+1)& (0+255),b
 21288  002D68  0E00               	movlw	0
 21289  002D6A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 21290  002D6C  0E64               	movlw	100
 21291  002D6E  6F62               	movwf	___lwdiv@divisor& (0+255),b
 21292  002D70  EC97  F02C         	call	___lwdiv	;wreg free
 21293  002D74  0100               	movlb	0	; () banked
 21294  002D76  5160               	movf	?___lwdiv& (0+255),w,b
 21295  002D78  6EDF               	movwf	indf2,c
 21296                           
 21297                           ;uart.c: 172: tens[i] = (ip.address[i] - hundreds[i]*100u) / 10u;
 21298  002D7A  5188               	movf	ipAdressToString@i& (0+255),w,b
 21299  002D7C  0D01               	mullw	1
 21300  002D7E  0E7F               	movlw	low ipAdressToString@tens
 21301  002D80  24F3               	addwf	prodl,w,c
 21302  002D82  6ED9               	movwf	fsr2l,c
 21303  002D84  0E00               	movlw	high ipAdressToString@tens
 21304  002D86  20F4               	addwfc	prodh,w,c
 21305  002D88  6EDA               	movwf	fsr2h,c
 21306  002D8A  5188               	movf	ipAdressToString@i& (0+255),w,b
 21307  002D8C  0D01               	mullw	1
 21308  002D8E  0E83               	movlw	low ipAdressToString@hundreds
 21309  002D90  24F3               	addwf	prodl,w,c
 21310  002D92  6EE1               	movwf	fsr1l,c
 21311  002D94  0E00               	movlw	high ipAdressToString@hundreds
 21312  002D96  20F4               	addwfc	prodh,w,c
 21313  002D98  6EE2               	movwf	fsr1h,c
 21314  002D9A  50E7               	movf	indf1,w,c
 21315  002D9C  6F77               	movwf	??_ipAdressToString& (0+255),b
 21316  002D9E  5177               	movf	??_ipAdressToString& (0+255),w,b
 21317  002DA0  0D64               	mullw	100
 21318  002DA2  CFF3 F078          	movff	prodl,??_ipAdressToString+1
 21319  002DA6  CFF4 F079          	movff	prodh,??_ipAdressToString+2
 21320  002DAA  1F78               	comf	(??_ipAdressToString+1)& (0+255),f,b
 21321  002DAC  1F79               	comf	(??_ipAdressToString+2)& (0+255),f,b
 21322  002DAE  4B78               	infsnz	(??_ipAdressToString+1)& (0+255),f,b
 21323  002DB0  2B79               	incf	(??_ipAdressToString+2)& (0+255),f,b
 21324  002DB2  5188               	movf	ipAdressToString@i& (0+255),w,b
 21325  002DB4  0D01               	mullw	1
 21326  002DB6  0E73               	movlw	low ipAdressToString@ip
 21327  002DB8  24F3               	addwf	prodl,w,c
 21328  002DBA  6EE1               	movwf	fsr1l,c
 21329  002DBC  0E00               	movlw	high ipAdressToString@ip
 21330  002DBE  20F4               	addwfc	prodh,w,c
 21331  002DC0  6EE2               	movwf	fsr1h,c
 21332  002DC2  50E7               	movf	indf1,w,c
 21333  002DC4  6F7A               	movwf	(??_ipAdressToString+3)& (0+255),b
 21334  002DC6  517A               	movf	(??_ipAdressToString+3)& (0+255),w,b
 21335  002DC8  2578               	addwf	(??_ipAdressToString+1)& (0+255),w,b
 21336  002DCA  6F60               	movwf	___lwdiv@dividend& (0+255),b
 21337  002DCC  0E00               	movlw	0
 21338  002DCE  2179               	addwfc	(??_ipAdressToString+2)& (0+255),w,b
 21339  002DD0  6F61               	movwf	(___lwdiv@dividend+1)& (0+255),b
 21340  002DD2  0E00               	movlw	0
 21341  002DD4  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 21342  002DD6  0E0A               	movlw	10
 21343  002DD8  6F62               	movwf	___lwdiv@divisor& (0+255),b
 21344  002DDA  EC97  F02C         	call	___lwdiv	;wreg free
 21345  002DDE  0100               	movlb	0	; () banked
 21346  002DE0  5160               	movf	?___lwdiv& (0+255),w,b
 21347  002DE2  6EDF               	movwf	indf2,c
 21348                           
 21349                           ;uart.c: 173: ones[i] = ip.address[i] % 10u;
 21350  002DE4  5188               	movf	ipAdressToString@i& (0+255),w,b
 21351  002DE6  0D01               	mullw	1
 21352  002DE8  0E7B               	movlw	low ipAdressToString@ones
 21353  002DEA  24F3               	addwf	prodl,w,c
 21354  002DEC  6ED9               	movwf	fsr2l,c
 21355  002DEE  0E00               	movlw	high ipAdressToString@ones
 21356  002DF0  20F4               	addwfc	prodh,w,c
 21357  002DF2  6EDA               	movwf	fsr2h,c
 21358  002DF4  5188               	movf	ipAdressToString@i& (0+255),w,b
 21359  002DF6  0D01               	mullw	1
 21360  002DF8  0E73               	movlw	low ipAdressToString@ip
 21361  002DFA  24F3               	addwf	prodl,w,c
 21362  002DFC  6EE1               	movwf	fsr1l,c
 21363  002DFE  0E00               	movlw	high ipAdressToString@ip
 21364  002E00  20F4               	addwfc	prodh,w,c
 21365  002E02  6EE2               	movwf	fsr1h,c
 21366  002E04  50E7               	movf	indf1,w,c
 21367  002E06  6F77               	movwf	??_ipAdressToString& (0+255),b
 21368  002E08  5177               	movf	??_ipAdressToString& (0+255),w,b
 21369  002E0A  6F6E               	movwf	___lwmod@dividend& (0+255),b
 21370  002E0C  6B6F               	clrf	(___lwmod@dividend+1)& (0+255),b
 21371  002E0E  0E00               	movlw	0
 21372  002E10  6F71               	movwf	(___lwmod@divisor+1)& (0+255),b
 21373  002E12  0E0A               	movlw	10
 21374  002E14  6F70               	movwf	___lwmod@divisor& (0+255),b
 21375  002E16  ECCB  F02D         	call	___lwmod	;wreg free
 21376  002E1A  0100               	movlb	0	; () banked
 21377  002E1C  516E               	movf	?___lwmod& (0+255),w,b
 21378  002E1E  6EDF               	movwf	indf2,c
 21379                           
 21380                           ; BSR set to: 0
 21381                           ;uart.c: 175: if (hundreds[i] > 0)
 21382  002E20  5188               	movf	ipAdressToString@i& (0+255),w,b
 21383  002E22  0D01               	mullw	1
 21384  002E24  0E83               	movlw	low ipAdressToString@hundreds
 21385  002E26  24F3               	addwf	prodl,w,c
 21386  002E28  6ED9               	movwf	fsr2l,c
 21387  002E2A  0E00               	movlw	high ipAdressToString@hundreds
 21388  002E2C  20F4               	addwfc	prodh,w,c
 21389  002E2E  6EDA               	movwf	fsr2h,c
 21390  002E30  50DF               	movf	indf2,w,c
 21391  002E32  B4D8               	btfsc	status,2,c
 21392  002E34  D014               	goto	l891
 21393                           
 21394                           ; BSR set to: 0
 21395                           ;uart.c: 176: address[pointer++] = hundreds[i] + 0x30;
 21396  002E36  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 21397  002E38  0D01               	mullw	1
 21398  002E3A  0EAF               	movlw	low ipAdressToString@address
 21399  002E3C  24F3               	addwf	prodl,w,c
 21400  002E3E  6ED9               	movwf	fsr2l,c
 21401  002E40  0E02               	movlw	high ipAdressToString@address
 21402  002E42  20F4               	addwfc	prodh,w,c
 21403  002E44  6EDA               	movwf	fsr2h,c
 21404  002E46  5188               	movf	ipAdressToString@i& (0+255),w,b
 21405  002E48  0D01               	mullw	1
 21406  002E4A  0E83               	movlw	low ipAdressToString@hundreds
 21407  002E4C  24F3               	addwf	prodl,w,c
 21408  002E4E  6EE1               	movwf	fsr1l,c
 21409  002E50  0E00               	movlw	high ipAdressToString@hundreds
 21410  002E52  20F4               	addwfc	prodh,w,c
 21411  002E54  6EE2               	movwf	fsr1h,c
 21412  002E56  50E7               	movf	indf1,w,c
 21413  002E58  0F30               	addlw	48
 21414  002E5A  6EDF               	movwf	indf2,c
 21415                           
 21416                           ; BSR set to: 0
 21417  002E5C  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 21418  002E5E                     l891:
 21419                           
 21420                           ; BSR set to: 0
 21421                           ;uart.c: 177: if ((tens[i] > 0) || hundreds[i] > 0)
 21422                           
 21423                           ; BSR set to: 0
 21424  002E5E  5188               	movf	ipAdressToString@i& (0+255),w,b
 21425  002E60  0D01               	mullw	1
 21426  002E62  0E7F               	movlw	low ipAdressToString@tens
 21427  002E64  24F3               	addwf	prodl,w,c
 21428  002E66  6ED9               	movwf	fsr2l,c
 21429  002E68  0E00               	movlw	high ipAdressToString@tens
 21430  002E6A  20F4               	addwfc	prodh,w,c
 21431  002E6C  6EDA               	movwf	fsr2h,c
 21432  002E6E  50DF               	movf	indf2,w,c
 21433  002E70  A4D8               	btfss	status,2,c
 21434  002E72  D00B               	goto	u10850
 21435                           
 21436                           ; BSR set to: 0
 21437  002E74  5188               	movf	ipAdressToString@i& (0+255),w,b
 21438  002E76  0D01               	mullw	1
 21439  002E78  0E83               	movlw	low ipAdressToString@hundreds
 21440  002E7A  24F3               	addwf	prodl,w,c
 21441  002E7C  6ED9               	movwf	fsr2l,c
 21442  002E7E  0E00               	movlw	high ipAdressToString@hundreds
 21443  002E80  20F4               	addwfc	prodh,w,c
 21444  002E82  6EDA               	movwf	fsr2h,c
 21445  002E84  50DF               	movf	indf2,w,c
 21446  002E86  B4D8               	btfsc	status,2,c
 21447  002E88  D014               	goto	l892
 21448  002E8A                     u10850:
 21449                           
 21450                           ; BSR set to: 0
 21451                           ;uart.c: 178: address[pointer++] = tens[i] + 0x30;
 21452                           
 21453                           ; BSR set to: 0
 21454  002E8A  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 21455  002E8C  0D01               	mullw	1
 21456  002E8E  0EAF               	movlw	low ipAdressToString@address
 21457  002E90  24F3               	addwf	prodl,w,c
 21458  002E92  6ED9               	movwf	fsr2l,c
 21459  002E94  0E02               	movlw	high ipAdressToString@address
 21460  002E96  20F4               	addwfc	prodh,w,c
 21461  002E98  6EDA               	movwf	fsr2h,c
 21462  002E9A  5188               	movf	ipAdressToString@i& (0+255),w,b
 21463  002E9C  0D01               	mullw	1
 21464  002E9E  0E7F               	movlw	low ipAdressToString@tens
 21465  002EA0  24F3               	addwf	prodl,w,c
 21466  002EA2  6EE1               	movwf	fsr1l,c
 21467  002EA4  0E00               	movlw	high ipAdressToString@tens
 21468  002EA6  20F4               	addwfc	prodh,w,c
 21469  002EA8  6EE2               	movwf	fsr1h,c
 21470  002EAA  50E7               	movf	indf1,w,c
 21471  002EAC  0F30               	addlw	48
 21472  002EAE  6EDF               	movwf	indf2,c
 21473                           
 21474                           ; BSR set to: 0
 21475  002EB0  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 21476  002EB2                     l892:
 21477                           
 21478                           ; BSR set to: 0
 21479                           ;uart.c: 179: address[pointer++] = ones[i] + 0x30;
 21480                           
 21481                           ; BSR set to: 0
 21482  002EB2  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 21483  002EB4  0D01               	mullw	1
 21484  002EB6  0EAF               	movlw	low ipAdressToString@address
 21485  002EB8  24F3               	addwf	prodl,w,c
 21486  002EBA  6ED9               	movwf	fsr2l,c
 21487  002EBC  0E02               	movlw	high ipAdressToString@address
 21488  002EBE  20F4               	addwfc	prodh,w,c
 21489  002EC0  6EDA               	movwf	fsr2h,c
 21490  002EC2  5188               	movf	ipAdressToString@i& (0+255),w,b
 21491  002EC4  0D01               	mullw	1
 21492  002EC6  0E7B               	movlw	low ipAdressToString@ones
 21493  002EC8  24F3               	addwf	prodl,w,c
 21494  002ECA  6EE1               	movwf	fsr1l,c
 21495  002ECC  0E00               	movlw	high ipAdressToString@ones
 21496  002ECE  20F4               	addwfc	prodh,w,c
 21497  002ED0  6EE2               	movwf	fsr1h,c
 21498  002ED2  50E7               	movf	indf1,w,c
 21499  002ED4  0F30               	addlw	48
 21500  002ED6  6EDF               	movwf	indf2,c
 21501  002ED8  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 21502                           
 21503                           ; BSR set to: 0
 21504                           ;uart.c: 180: if (i != 3)
 21505  002EDA  0E03               	movlw	3
 21506  002EDC  1988               	xorwf	ipAdressToString@i& (0+255),w,b
 21507  002EDE  B4D8               	btfsc	status,2,c
 21508  002EE0  D00B               	goto	l895
 21509                           
 21510                           ; BSR set to: 0
 21511                           ;uart.c: 181: address[pointer++] = '.';
 21512  002EE2  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 21513  002EE4  0D01               	mullw	1
 21514  002EE6  0EAF               	movlw	low ipAdressToString@address
 21515  002EE8  24F3               	addwf	prodl,w,c
 21516  002EEA  6ED9               	movwf	fsr2l,c
 21517  002EEC  0E02               	movlw	high ipAdressToString@address
 21518  002EEE  20F4               	addwfc	prodh,w,c
 21519  002EF0  6EDA               	movwf	fsr2h,c
 21520  002EF2  0E2E               	movlw	46
 21521  002EF4  6EDF               	movwf	indf2,c
 21522                           
 21523                           ; BSR set to: 0
 21524  002EF6  2B87               	incf	ipAdressToString@pointer& (0+255),f,b
 21525  002EF8                     l895:
 21526                           
 21527                           ; BSR set to: 0
 21528                           
 21529                           ; BSR set to: 0
 21530  002EF8  2B88               	incf	ipAdressToString@i& (0+255),f,b
 21531  002EFA  D71D               	goto	l9575
 21532  002EFC                     u10870:
 21533                           
 21534                           ; BSR set to: 0
 21535                           ;uart.c: 182: }
 21536                           ;uart.c: 183: address[pointer] = '\0';
 21537                           
 21538                           ; BSR set to: 0
 21539  002EFC  5187               	movf	ipAdressToString@pointer& (0+255),w,b
 21540  002EFE  0D01               	mullw	1
 21541  002F00  0EAF               	movlw	low ipAdressToString@address
 21542  002F02  24F3               	addwf	prodl,w,c
 21543  002F04  6ED9               	movwf	fsr2l,c
 21544  002F06  0E02               	movlw	high ipAdressToString@address
 21545  002F08  20F4               	addwfc	prodh,w,c
 21546  002F0A  6EDA               	movwf	fsr2h,c
 21547  002F0C  0E00               	movlw	0
 21548  002F0E  6EDF               	movwf	indf2,c
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;uart.c: 184: return address;
 21552  002F10  0EAF               	movlw	low ipAdressToString@address
 21553  002F12  6F73               	movwf	?_ipAdressToString& (0+255),b
 21554  002F14  0E02               	movlw	high ipAdressToString@address
 21555  002F16  6F74               	movwf	(?_ipAdressToString+1)& (0+255),b
 21556  002F18  0012               	return	
 21557  002F1A                     __end_of_ipAdressToString:
 21558                           	opt stack 0
 21559                           tblptru	equ	0xFF8
 21560                           tblptrh	equ	0xFF7
 21561                           tblptrl	equ	0xFF6
 21562                           tablat	equ	0xFF5
 21563                           prodh	equ	0xFF4
 21564                           prodl	equ	0xFF3
 21565                           intcon	equ	0xFF2
 21566                           intcon3	equ	0xFF0
 21567                           indf0	equ	0xFEF
 21568                           postinc0	equ	0xFEE
 21569                           plusw0	equ	0xFEB
 21570                           fsr0h	equ	0xFEA
 21571                           fsr0l	equ	0xFE9
 21572                           wreg	equ	0xFE8
 21573                           indf1	equ	0xFE7
 21574                           postinc1	equ	0xFE6
 21575                           postdec1	equ	0xFE5
 21576                           plusw1	equ	0xFE3
 21577                           fsr1h	equ	0xFE2
 21578                           fsr1l	equ	0xFE1
 21579                           indf2	equ	0xFDF
 21580                           postinc2	equ	0xFDE
 21581                           postdec2	equ	0xFDD
 21582                           plusw2	equ	0xFDB
 21583                           fsr2h	equ	0xFDA
 21584                           fsr2l	equ	0xFD9
 21585                           status	equ	0xFD8
 21586                           
 21587 ;; *************** function ___lwmod *****************
 21588 ;; Defined at:
 21589 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 21590 ;; Parameters:    Size  Location     Type
 21591 ;;  dividend        2   14[BANK0 ] unsigned int 
 21592 ;;  divisor         2   16[BANK0 ] unsigned int 
 21593 ;; Auto vars:     Size  Location     Type
 21594 ;;  counter         1   18[BANK0 ] unsigned char 
 21595 ;; Return value:  Size  Location     Type
 21596 ;;                  2   14[BANK0 ] unsigned int 
 21597 ;; Registers used:
 21598 ;;		wreg, status,2, status,0
 21599 ;; Tracked objects:
 21600 ;;		On entry : 0/0
 21601 ;;		On exit  : 0/0
 21602 ;;		Unchanged: 0/0
 21603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21604 ;;      Params:         0       4       0       0       0       0       0       0       0
 21605 ;;      Locals:         0       1       0       0       0       0       0       0       0
 21606 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21607 ;;      Totals:         0       5       0       0       0       0       0       0       0
 21608 ;;Total ram usage:        5 bytes
 21609 ;; Hardware stack levels used:    1
 21610 ;; Hardware stack levels required when called:    4
 21611 ;; This function calls:
 21612 ;;		Nothing
 21613 ;; This function is called by:
 21614 ;;		_ipAdressToString
 21615 ;;		_arp_probe
 21616 ;; This function uses a non-reentrant model
 21617 ;;
 21618                           
 21619                           	psect	text80
 21620  005B96                     __ptext80:
 21621                           	opt stack 0
 21622  005B96                     ___lwmod:
 21623                           	opt stack 22
 21624                           
 21625                           ; BSR set to: 0
 21626                           ;incstack = 0
 21627  005B96  0100               	movlb	0	; () banked
 21628  005B98  5170               	movf	___lwmod@divisor& (0+255),w,b
 21629  005B9A  1171               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 21630  005B9C  B4D8               	btfsc	status,2,c
 21631  005B9E  D018               	goto	l1784
 21632                           
 21633                           ; BSR set to: 0
 21634  005BA0  0E01               	movlw	1
 21635  005BA2  6F72               	movwf	___lwmod@counter& (0+255),b
 21636  005BA4  D004               	goto	l1779
 21637  005BA6                     
 21638                           ; BSR set to: 0
 21639                           
 21640                           ; BSR set to: 0
 21641  005BA6  90D8               	bcf	status,0,c
 21642  005BA8  3770               	rlcf	___lwmod@divisor& (0+255),f,b
 21643  005BAA  3771               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 21644  005BAC  2B72               	incf	___lwmod@counter& (0+255),f,b
 21645  005BAE                     l1779:
 21646                           
 21647                           ; BSR set to: 0
 21648                           
 21649                           ; BSR set to: 0
 21650  005BAE  AF71               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 21651  005BB0  D7FA               	goto	l1780
 21652  005BB2                     u10710:
 21653                           
 21654                           ; BSR set to: 0
 21655                           
 21656                           ; BSR set to: 0
 21657                           
 21658                           ; BSR set to: 0
 21659  005BB2  5170               	movf	___lwmod@divisor& (0+255),w,b
 21660  005BB4  5D6E               	subwf	___lwmod@dividend& (0+255),w,b
 21661  005BB6  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 21662  005BB8  596F               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 21663  005BBA  A0D8               	btfss	status,0,c
 21664  005BBC  D004               	goto	l1783
 21665                           
 21666                           ; BSR set to: 0
 21667  005BBE  5170               	movf	___lwmod@divisor& (0+255),w,b
 21668  005BC0  5F6E               	subwf	___lwmod@dividend& (0+255),f,b
 21669  005BC2  5171               	movf	(___lwmod@divisor+1)& (0+255),w,b
 21670  005BC4  5B6F               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 21671  005BC6                     l1783:
 21672                           
 21673                           ; BSR set to: 0
 21674                           
 21675                           ; BSR set to: 0
 21676  005BC6  90D8               	bcf	status,0,c
 21677  005BC8  3371               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 21678  005BCA  3370               	rrcf	___lwmod@divisor& (0+255),f,b
 21679                           
 21680                           ; BSR set to: 0
 21681  005BCC  2F72               	decfsz	___lwmod@counter& (0+255),f,b
 21682  005BCE  D7F1               	goto	u10710
 21683  005BD0                     l1784:
 21684                           
 21685                           ; BSR set to: 0
 21686                           
 21687                           ; BSR set to: 0
 21688  005BD0  C06E  F06E         	movff	___lwmod@dividend,?___lwmod
 21689  005BD4  C06F  F06F         	movff	___lwmod@dividend+1,?___lwmod+1
 21690                           
 21691                           ; BSR set to: 0
 21692  005BD8  0012               	return		;funcret
 21693  005BDA                     __end_of___lwmod:
 21694                           	opt stack 0
 21695                           tblptru	equ	0xFF8
 21696                           tblptrh	equ	0xFF7
 21697                           tblptrl	equ	0xFF6
 21698                           tablat	equ	0xFF5
 21699                           prodh	equ	0xFF4
 21700                           prodl	equ	0xFF3
 21701                           intcon	equ	0xFF2
 21702                           intcon3	equ	0xFF0
 21703                           indf0	equ	0xFEF
 21704                           postinc0	equ	0xFEE
 21705                           plusw0	equ	0xFEB
 21706                           fsr0h	equ	0xFEA
 21707                           fsr0l	equ	0xFE9
 21708                           wreg	equ	0xFE8
 21709                           indf1	equ	0xFE7
 21710                           postinc1	equ	0xFE6
 21711                           postdec1	equ	0xFE5
 21712                           plusw1	equ	0xFE3
 21713                           fsr1h	equ	0xFE2
 21714                           fsr1l	equ	0xFE1
 21715                           indf2	equ	0xFDF
 21716                           postinc2	equ	0xFDE
 21717                           postdec2	equ	0xFDD
 21718                           plusw2	equ	0xFDB
 21719                           fsr2h	equ	0xFDA
 21720                           fsr2l	equ	0xFD9
 21721                           status	equ	0xFD8
 21722                           
 21723 ;; *************** function ___lwdiv *****************
 21724 ;; Defined at:
 21725 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 21726 ;; Parameters:    Size  Location     Type
 21727 ;;  dividend        2    0[BANK0 ] unsigned int 
 21728 ;;  divisor         2    2[BANK0 ] unsigned int 
 21729 ;; Auto vars:     Size  Location     Type
 21730 ;;  quotient        2    5[BANK0 ] unsigned int 
 21731 ;;  counter         1    4[BANK0 ] unsigned char 
 21732 ;; Return value:  Size  Location     Type
 21733 ;;                  2    0[BANK0 ] unsigned int 
 21734 ;; Registers used:
 21735 ;;		wreg, status,2, status,0
 21736 ;; Tracked objects:
 21737 ;;		On entry : 0/0
 21738 ;;		On exit  : 0/0
 21739 ;;		Unchanged: 0/0
 21740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21741 ;;      Params:         0       4       0       0       0       0       0       0       0
 21742 ;;      Locals:         0       3       0       0       0       0       0       0       0
 21743 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21744 ;;      Totals:         0       7       0       0       0       0       0       0       0
 21745 ;;Total ram usage:        7 bytes
 21746 ;; Hardware stack levels used:    1
 21747 ;; Hardware stack levels required when called:    4
 21748 ;; This function calls:
 21749 ;;		Nothing
 21750 ;; This function is called by:
 21751 ;;		_ipAdressToString
 21752 ;; This function uses a non-reentrant model
 21753 ;;
 21754                           
 21755                           	psect	text81
 21756  00592E                     __ptext81:
 21757                           	opt stack 0
 21758  00592E                     ___lwdiv:
 21759                           	opt stack 22
 21760                           
 21761                           ; BSR set to: 0
 21762                           ;incstack = 0
 21763  00592E  0E00               	movlw	0
 21764  005930  0100               	movlb	0	; () banked
 21765  005932  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 21766  005934  0E00               	movlw	0
 21767  005936  6F65               	movwf	___lwdiv@quotient& (0+255),b
 21768                           
 21769                           ; BSR set to: 0
 21770  005938  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21771  00593A  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 21772  00593C  B4D8               	btfsc	status,2,c
 21773  00593E  D01C               	goto	l1774
 21774                           
 21775                           ; BSR set to: 0
 21776  005940  0E01               	movlw	1
 21777  005942  6F64               	movwf	___lwdiv@counter& (0+255),b
 21778  005944  D004               	goto	l1769
 21779  005946                     
 21780                           ; BSR set to: 0
 21781                           
 21782                           ; BSR set to: 0
 21783  005946  90D8               	bcf	status,0,c
 21784  005948  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 21785  00594A  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 21786  00594C  2B64               	incf	___lwdiv@counter& (0+255),f,b
 21787  00594E                     l1769:
 21788                           
 21789                           ; BSR set to: 0
 21790                           
 21791                           ; BSR set to: 0
 21792  00594E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 21793  005950  D7FA               	goto	l1770
 21794  005952                     u10680:
 21795                           
 21796                           ; BSR set to: 0
 21797                           
 21798                           ; BSR set to: 0
 21799                           
 21800                           ; BSR set to: 0
 21801  005952  90D8               	bcf	status,0,c
 21802  005954  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 21803  005956  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 21804                           
 21805                           ; BSR set to: 0
 21806  005958  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21807  00595A  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 21808  00595C  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21809  00595E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 21810  005960  A0D8               	btfss	status,0,c
 21811  005962  D005               	goto	l1773
 21812                           
 21813                           ; BSR set to: 0
 21814  005964  5162               	movf	___lwdiv@divisor& (0+255),w,b
 21815  005966  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 21816  005968  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 21817  00596A  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 21818                           
 21819                           ; BSR set to: 0
 21820  00596C  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 21821  00596E                     l1773:
 21822                           
 21823                           ; BSR set to: 0
 21824                           
 21825                           ; BSR set to: 0
 21826  00596E  90D8               	bcf	status,0,c
 21827  005970  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 21828  005972  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 21829                           
 21830                           ; BSR set to: 0
 21831  005974  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 21832  005976  D7ED               	goto	u10680
 21833  005978                     l1774:
 21834                           
 21835                           ; BSR set to: 0
 21836                           
 21837                           ; BSR set to: 0
 21838  005978  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 21839  00597C  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 21840                           
 21841                           ; BSR set to: 0
 21842  005980  0012               	return		;funcret
 21843  005982                     __end_of___lwdiv:
 21844                           	opt stack 0
 21845                           tblptru	equ	0xFF8
 21846                           tblptrh	equ	0xFF7
 21847                           tblptrl	equ	0xFF6
 21848                           tablat	equ	0xFF5
 21849                           prodh	equ	0xFF4
 21850                           prodl	equ	0xFF3
 21851                           intcon	equ	0xFF2
 21852                           intcon3	equ	0xFF0
 21853                           indf0	equ	0xFEF
 21854                           postinc0	equ	0xFEE
 21855                           plusw0	equ	0xFEB
 21856                           fsr0h	equ	0xFEA
 21857                           fsr0l	equ	0xFE9
 21858                           wreg	equ	0xFE8
 21859                           indf1	equ	0xFE7
 21860                           postinc1	equ	0xFE6
 21861                           postdec1	equ	0xFE5
 21862                           plusw1	equ	0xFE3
 21863                           fsr1h	equ	0xFE2
 21864                           fsr1l	equ	0xFE1
 21865                           indf2	equ	0xFDF
 21866                           postinc2	equ	0xFDE
 21867                           postdec2	equ	0xFDD
 21868                           plusw2	equ	0xFDB
 21869                           fsr2h	equ	0xFDA
 21870                           fsr2l	equ	0xFD9
 21871                           status	equ	0xFD8
 21872                           
 21873 ;; *************** function _arp_sendRequest *****************
 21874 ;; Defined at:
 21875 ;;		line 190 in file "src/stack/protocols/arp.c"
 21876 ;; Parameters:    Size  Location     Type
 21877 ;;  ipSender        4    0[BANK1 ] struct ipv4_address
 21878 ;;  ipTarget        4    4[BANK1 ] struct ipv4_address
 21879 ;; Auto vars:     Size  Location     Type
 21880 ;;  request        32   20[BANK1 ] struct arp_message
 21881 ;;  targetMAC       6   14[BANK1 ] struct macaddress
 21882 ;;  senderMAC       6    8[BANK1 ] struct macaddress
 21883 ;; Return value:  Size  Location     Type
 21884 ;;                  1    wreg      void 
 21885 ;; Registers used:
 21886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21887 ;; Tracked objects:
 21888 ;;		On entry : 0/0
 21889 ;;		On exit  : 0/0
 21890 ;;		Unchanged: 0/0
 21891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 21892 ;;      Params:         0       0       8       0       0       0       0       0       0
 21893 ;;      Locals:         0       0      44       0       0       0       0       0       0
 21894 ;;      Temps:          0       0       0       0       0       0       0       0       0
 21895 ;;      Totals:         0       0      52       0       0       0       0       0       0
 21896 ;;Total ram usage:       52 bytes
 21897 ;; Hardware stack levels used:    1
 21898 ;; Hardware stack levels required when called:   10
 21899 ;; This function calls:
 21900 ;;		_arp_send
 21901 ;;		_ethernetController_getMacAddress
 21902 ;;		_mac_setAllZero
 21903 ;; This function is called by:
 21904 ;;		_arp_probe
 21905 ;;		_arp_gratuitous
 21906 ;;		_ipv4_sendFrame
 21907 ;; This function uses a non-reentrant model
 21908 ;;
 21909                           
 21910                           	psect	text82
 21911  004E56                     __ptext82:
 21912                           	opt stack 0
 21913  004E56                     _arp_sendRequest:
 21914                           	opt stack 18
 21915                           
 21916                           ;arp.c: 191: arp_message_t request;
 21917                           ;arp.c: 192: macaddress_t senderMAC;
 21918                           ;arp.c: 193: macaddress_t targetMAC;
 21919                           ;arp.c: 195: senderMAC = ethernetController_getMacAddress();
 21920                           
 21921                           ; BSR set to: 0
 21922                           ;incstack = 0
 21923  004E56  EC3B  F02A         	call	_ethernetController_getMacAddress	;wreg free
 21924  004E5A  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 21925  004E5E  0E05               	movlw	5
 21926  004E60                     u12341:
 21927  004E60  CFEB FFDB          	movff	plusw0,plusw2
 21928  004E64  06E8               	decf	wreg,f,c
 21929  004E66  E2FC               	bc	u12341
 21930                           
 21931                           ;arp.c: 196: mac_setAllZero(&targetMAC);
 21932  004E68  0E0E               	movlw	low arp_sendRequest@targetMAC
 21933  004E6A  0100               	movlb	0	; () banked
 21934  004E6C  6F60               	movwf	mac_setAllZero@mac& (0+255),b
 21935  004E6E  0E01               	movlw	high arp_sendRequest@targetMAC
 21936  004E70  6F61               	movwf	(mac_setAllZero@mac+1)& (0+255),b
 21937  004E72  EC14  F030         	call	_mac_setAllZero	;wreg free
 21938                           
 21939                           ;arp.c: 198: request.hlen = 6u;
 21940  004E76  0E06               	movlw	6
 21941  004E78  0101               	movlb	1	; () banked
 21942  004E7A  6F18               	movwf	(arp_sendRequest@request+4)& (0+255),b
 21943                           
 21944                           ; BSR set to: 1
 21945                           ;arp.c: 199: request.plen = 4u;
 21946  004E7C  0E04               	movlw	4
 21947  004E7E  6F19               	movwf	(arp_sendRequest@request+5)& (0+255),b
 21948                           
 21949                           ; BSR set to: 1
 21950                           ;arp.c: 200: request.htype = ARP_HTYPE_ETHERNET;
 21951  004E80  0E00               	movlw	0
 21952  004E82  6F15               	movwf	(arp_sendRequest@request+1)& (0+255),b
 21953  004E84  0E01               	movlw	1
 21954  004E86  6F14               	movwf	arp_sendRequest@request& (0+255),b
 21955                           
 21956                           ; BSR set to: 1
 21957                           ;arp.c: 201: request.ptype = ARP_PTYPE_IPv4;
 21958  004E88  0E08               	movlw	8
 21959  004E8A  6F17               	movwf	(arp_sendRequest@request+3)& (0+255),b
 21960  004E8C  0E00               	movlw	0
 21961  004E8E  6F16               	movwf	(arp_sendRequest@request+2)& (0+255),b
 21962                           
 21963                           ; BSR set to: 1
 21964                           ;arp.c: 202: request.operation = ARP_REQUEST;
 21965  004E90  0E00               	movlw	0
 21966  004E92  6F1B               	movwf	(arp_sendRequest@request+7)& (0+255),b
 21967  004E94  0E01               	movlw	1
 21968  004E96  6F1A               	movwf	(arp_sendRequest@request+6)& (0+255),b
 21969                           
 21970                           ; BSR set to: 1
 21971                           ;arp.c: 203: request.senderIPAddress = ipSender;
 21972  004E98  C100  F122         	movff	arp_sendRequest@ipSender,arp_sendRequest@request+14
 21973  004E9C  C101  F123         	movff	arp_sendRequest@ipSender+1,arp_sendRequest@request+15
 21974  004EA0  C102  F124         	movff	arp_sendRequest@ipSender+2,arp_sendRequest@request+16
 21975  004EA4  C103  F125         	movff	arp_sendRequest@ipSender+3,arp_sendRequest@request+17
 21976                           
 21977                           ; BSR set to: 1
 21978                           ;arp.c: 204: request.senderMACAddress = senderMAC;
 21979  004EA8  EE21  F008         	lfsr	2,arp_sendRequest@senderMAC
 21980  004EAC  EE11  F01C         	lfsr	1,arp_sendRequest@request+8
 21981  004EB0  0E05               	movlw	5
 21982  004EB2                     u12351:
 21983  004EB2  CFDB FFE3          	movff	plusw2,plusw1
 21984  004EB6  06E8               	decf	wreg,f,c
 21985  004EB8  E2FC               	bc	u12351
 21986                           
 21987                           ; BSR set to: 1
 21988                           ;arp.c: 205: request.targetIPAddress = ipTarget;
 21989  004EBA  C104  F12C         	movff	arp_sendRequest@ipTarget,arp_sendRequest@request+24
 21990  004EBE  C105  F12D         	movff	arp_sendRequest@ipTarget+1,arp_sendRequest@request+25
 21991  004EC2  C106  F12E         	movff	arp_sendRequest@ipTarget+2,arp_sendRequest@request+26
 21992  004EC6  C107  F12F         	movff	arp_sendRequest@ipTarget+3,arp_sendRequest@request+27
 21993                           
 21994                           ; BSR set to: 1
 21995                           ;arp.c: 206: request.targetMACAddress = targetMAC;
 21996  004ECA  EE21  F00E         	lfsr	2,arp_sendRequest@targetMAC
 21997  004ECE  EE11  F026         	lfsr	1,arp_sendRequest@request+18
 21998  004ED2  0E05               	movlw	5
 21999  004ED4                     u12361:
 22000  004ED4  CFDB FFE3          	movff	plusw2,plusw1
 22001  004ED8  06E8               	decf	wreg,f,c
 22002  004EDA  E2FC               	bc	u12361
 22003                           
 22004                           ; BSR set to: 1
 22005                           ;arp.c: 208: arp_send(request);
 22006  004EDC  EE21  F014         	lfsr	2,arp_sendRequest@request
 22007  004EE0  EE00  F0A7         	lfsr	0,arp_send@arp
 22008  004EE4  0E1F               	movlw	31
 22009  004EE6                     u12371:
 22010  004EE6  CFDB FFEB          	movff	plusw2,plusw0
 22011  004EEA  06E8               	decf	wreg,f,c
 22012  004EEC  E2FC               	bc	u12371
 22013  004EEE  ECEF  F011         	call	_arp_send	;wreg free
 22014  004EF2  0012               	return		;funcret
 22015  004EF4                     __end_of_arp_sendRequest:
 22016                           	opt stack 0
 22017                           tblptru	equ	0xFF8
 22018                           tblptrh	equ	0xFF7
 22019                           tblptrl	equ	0xFF6
 22020                           tablat	equ	0xFF5
 22021                           prodh	equ	0xFF4
 22022                           prodl	equ	0xFF3
 22023                           intcon	equ	0xFF2
 22024                           intcon3	equ	0xFF0
 22025                           indf0	equ	0xFEF
 22026                           postinc0	equ	0xFEE
 22027                           plusw0	equ	0xFEB
 22028                           fsr0h	equ	0xFEA
 22029                           fsr0l	equ	0xFE9
 22030                           wreg	equ	0xFE8
 22031                           indf1	equ	0xFE7
 22032                           postinc1	equ	0xFE6
 22033                           postdec1	equ	0xFE5
 22034                           plusw1	equ	0xFE3
 22035                           fsr1h	equ	0xFE2
 22036                           fsr1l	equ	0xFE1
 22037                           indf2	equ	0xFDF
 22038                           postinc2	equ	0xFDE
 22039                           postdec2	equ	0xFDD
 22040                           plusw2	equ	0xFDB
 22041                           fsr2h	equ	0xFDA
 22042                           fsr2l	equ	0xFD9
 22043                           status	equ	0xFD8
 22044                           
 22045 ;; *************** function _mac_setAllZero *****************
 22046 ;; Defined at:
 22047 ;;		line 47 in file "src/eth/mac.c"
 22048 ;; Parameters:    Size  Location     Type
 22049 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 22050 ;;		 -> arp_init@mac(6), arp_sendRequest@targetMAC(6), 
 22051 ;; Auto vars:     Size  Location     Type
 22052 ;;  i               1    2[BANK0 ] unsigned char 
 22053 ;; Return value:  Size  Location     Type
 22054 ;;                  1    wreg      void 
 22055 ;; Registers used:
 22056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22057 ;; Tracked objects:
 22058 ;;		On entry : 0/0
 22059 ;;		On exit  : 0/0
 22060 ;;		Unchanged: 0/0
 22061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22062 ;;      Params:         0       2       0       0       0       0       0       0       0
 22063 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22064 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22065 ;;      Totals:         0       3       0       0       0       0       0       0       0
 22066 ;;Total ram usage:        3 bytes
 22067 ;; Hardware stack levels used:    1
 22068 ;; Hardware stack levels required when called:    4
 22069 ;; This function calls:
 22070 ;;		Nothing
 22071 ;; This function is called by:
 22072 ;;		_arp_sendRequest
 22073 ;;		_arp_init
 22074 ;; This function uses a non-reentrant model
 22075 ;;
 22076                           
 22077                           	psect	text83
 22078  006028                     __ptext83:
 22079                           	opt stack 0
 22080  006028                     _mac_setAllZero:
 22081                           	opt stack 24
 22082                           
 22083                           ;mac.c: 48: for (uint8_t i = 0; i < 6; i++)
 22084                           
 22085                           ;incstack = 0
 22086  006028  0E00               	movlw	0
 22087  00602A  0100               	movlb	0	; () banked
 22088  00602C  6F62               	movwf	mac_setAllZero@i& (0+255),b
 22089  00602E                     l9899:
 22090                           
 22091                           ; BSR set to: 0
 22092  00602E  0E05               	movlw	5
 22093  006030  6562               	cpfsgt	mac_setAllZero@i& (0+255),b
 22094  006032  D001               	goto	l396
 22095  006034  0012               	return	
 22096  006036                     l396:
 22097                           
 22098                           ; BSR set to: 0
 22099                           ;mac.c: 49: mac->address[i] = 0x00;
 22100                           
 22101                           ; BSR set to: 0
 22102  006036  5162               	movf	mac_setAllZero@i& (0+255),w,b
 22103  006038  0D01               	mullw	1
 22104  00603A  50F3               	movf	prodl,w,c
 22105  00603C  2560               	addwf	mac_setAllZero@mac& (0+255),w,b
 22106  00603E  6ED9               	movwf	fsr2l,c
 22107  006040  50F4               	movf	prodh,w,c
 22108  006042  2161               	addwfc	(mac_setAllZero@mac+1)& (0+255),w,b
 22109  006044  6EDA               	movwf	fsr2h,c
 22110  006046  0E00               	movlw	0
 22111  006048  6EDF               	movwf	indf2,c
 22112                           
 22113                           ; BSR set to: 0
 22114  00604A  2B62               	incf	mac_setAllZero@i& (0+255),f,b
 22115  00604C  D7F0               	goto	l9899
 22116  00604E                     __end_of_mac_setAllZero:
 22117                           	opt stack 0
 22118                           tblptru	equ	0xFF8
 22119                           tblptrh	equ	0xFF7
 22120                           tblptrl	equ	0xFF6
 22121                           tablat	equ	0xFF5
 22122                           prodh	equ	0xFF4
 22123                           prodl	equ	0xFF3
 22124                           intcon	equ	0xFF2
 22125                           intcon3	equ	0xFF0
 22126                           indf0	equ	0xFEF
 22127                           postinc0	equ	0xFEE
 22128                           plusw0	equ	0xFEB
 22129                           fsr0h	equ	0xFEA
 22130                           fsr0l	equ	0xFE9
 22131                           wreg	equ	0xFE8
 22132                           indf1	equ	0xFE7
 22133                           postinc1	equ	0xFE6
 22134                           postdec1	equ	0xFE5
 22135                           plusw1	equ	0xFE3
 22136                           fsr1h	equ	0xFE2
 22137                           fsr1l	equ	0xFE1
 22138                           indf2	equ	0xFDF
 22139                           postinc2	equ	0xFDE
 22140                           postdec2	equ	0xFDD
 22141                           plusw2	equ	0xFDB
 22142                           fsr2h	equ	0xFDA
 22143                           fsr2l	equ	0xFD9
 22144                           status	equ	0xFD8
 22145                           
 22146 ;; *************** function _ethernetController_getMacAddress *****************
 22147 ;; Defined at:
 22148 ;;		line 157 in file "src/enc424j600/ENC424J600.c"
 22149 ;; Parameters:    Size  Location     Type
 22150 ;;		None
 22151 ;; Auto vars:     Size  Location     Type
 22152 ;;  mac             6   20[BANK0 ] struct macaddress
 22153 ;; Return value:  Size  Location     Type
 22154 ;;                  6   14[BANK0 ] struct macaddress
 22155 ;; Registers used:
 22156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 22157 ;; Tracked objects:
 22158 ;;		On entry : 0/0
 22159 ;;		On exit  : 0/0
 22160 ;;		Unchanged: 0/0
 22161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22162 ;;      Params:         0       6       0       0       0       0       0       0       0
 22163 ;;      Locals:         0       6       0       0       0       0       0       0       0
 22164 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22165 ;;      Totals:         0      12       0       0       0       0       0       0       0
 22166 ;;Total ram usage:       12 bytes
 22167 ;; Hardware stack levels used:    1
 22168 ;; Hardware stack levels required when called:    7
 22169 ;; This function calls:
 22170 ;;		_enc424j600_readControlRegisterUnbanked
 22171 ;; This function is called by:
 22172 ;;		_main
 22173 ;;		_arp_sendRequest
 22174 ;;		_arp_sendReply
 22175 ;;		_ipv4_sendFrame
 22176 ;; This function uses a non-reentrant model
 22177 ;;
 22178                           
 22179                           	psect	text84
 22180  005476                     __ptext84:
 22181                           	opt stack 0
 22182  005476                     _ethernetController_getMacAddress:
 22183                           	opt stack 21
 22184                           
 22185                           ;ENC424J600.c: 158: macaddress_t mac;
 22186                           ;ENC424J600.c: 159: enc424j600_readControlRegisterUnbanked(0x04 + 0x60, &mac.address[0])
      +                          ;
 22187                           
 22188                           ; BSR set to: 0
 22189                           ;incstack = 0
 22190  005476  0E74               	movlw	low ethernetController_getMacAddress@mac
 22191  005478  0100               	movlb	0	; () banked
 22192  00547A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22193  00547C  0E00               	movlw	high ethernetController_getMacAddress@mac
 22194  00547E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22195  005480  0E64               	movlw	100
 22196  005482  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22197                           
 22198                           ;ENC424J600.c: 160: enc424j600_readControlRegisterUnbanked(0x05 + 0x60, &mac.address[1])
      +                          ;
 22199  005486  0E75               	movlw	low (ethernetController_getMacAddress@mac+1)
 22200  005488  0100               	movlb	0	; () banked
 22201  00548A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22202  00548C  0E00               	movlw	high (ethernetController_getMacAddress@mac+1)
 22203  00548E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22204  005490  0E65               	movlw	101
 22205  005492  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22206                           
 22207                           ;ENC424J600.c: 161: enc424j600_readControlRegisterUnbanked(0x02 + 0x60, &mac.address[2])
      +                          ;
 22208  005496  0E76               	movlw	low (ethernetController_getMacAddress@mac+2)
 22209  005498  0100               	movlb	0	; () banked
 22210  00549A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22211  00549C  0E00               	movlw	high (ethernetController_getMacAddress@mac+2)
 22212  00549E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22213  0054A0  0E62               	movlw	98
 22214  0054A2  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22215                           
 22216                           ;ENC424J600.c: 162: enc424j600_readControlRegisterUnbanked(0x03 + 0x60, &mac.address[3])
      +                          ;
 22217  0054A6  0E77               	movlw	low (ethernetController_getMacAddress@mac+3)
 22218  0054A8  0100               	movlb	0	; () banked
 22219  0054AA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22220  0054AC  0E00               	movlw	high (ethernetController_getMacAddress@mac+3)
 22221  0054AE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22222  0054B0  0E63               	movlw	99
 22223  0054B2  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22224                           
 22225                           ;ENC424J600.c: 163: enc424j600_readControlRegisterUnbanked(0x00 + 0x60, &mac.address[4])
      +                          ;
 22226  0054B6  0E78               	movlw	low (ethernetController_getMacAddress@mac+4)
 22227  0054B8  0100               	movlb	0	; () banked
 22228  0054BA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22229  0054BC  0E00               	movlw	high (ethernetController_getMacAddress@mac+4)
 22230  0054BE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22231  0054C0  0E60               	movlw	96
 22232  0054C2  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22233                           
 22234                           ;ENC424J600.c: 164: enc424j600_readControlRegisterUnbanked(0x01 + 0x60, &mac.address[5])
      +                          ;
 22235  0054C6  0E79               	movlw	low (ethernetController_getMacAddress@mac+5)
 22236  0054C8  0100               	movlb	0	; () banked
 22237  0054CA  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 22238  0054CC  0E00               	movlw	high (ethernetController_getMacAddress@mac+5)
 22239  0054CE  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 22240  0054D0  0E61               	movlw	97
 22241  0054D2  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 22242                           
 22243                           ;ENC424J600.c: 165: return mac;
 22244  0054D6  EE20  F074         	lfsr	2,ethernetController_getMacAddress@mac
 22245  0054DA  EE00  F06E         	lfsr	0,?_ethernetController_getMacAddress
 22246  0054DE  0E05               	movlw	5
 22247  0054E0                     u11071:
 22248  0054E0  CFDB FFEB          	movff	plusw2,plusw0
 22249  0054E4  06E8               	decf	wreg,f,c
 22250  0054E6  E2FC               	bc	u11071
 22251  0054E8  0012               	return	
 22252  0054EA                     __end_of_ethernetController_getMacAddress:
 22253                           	opt stack 0
 22254                           tblptru	equ	0xFF8
 22255                           tblptrh	equ	0xFF7
 22256                           tblptrl	equ	0xFF6
 22257                           tablat	equ	0xFF5
 22258                           prodh	equ	0xFF4
 22259                           prodl	equ	0xFF3
 22260                           intcon	equ	0xFF2
 22261                           intcon3	equ	0xFF0
 22262                           indf0	equ	0xFEF
 22263                           postinc0	equ	0xFEE
 22264                           plusw0	equ	0xFEB
 22265                           fsr0h	equ	0xFEA
 22266                           fsr0l	equ	0xFE9
 22267                           wreg	equ	0xFE8
 22268                           indf1	equ	0xFE7
 22269                           postinc1	equ	0xFE6
 22270                           postdec1	equ	0xFE5
 22271                           plusw1	equ	0xFE3
 22272                           fsr1h	equ	0xFE2
 22273                           fsr1l	equ	0xFE1
 22274                           indf2	equ	0xFDF
 22275                           postinc2	equ	0xFDE
 22276                           postdec2	equ	0xFDD
 22277                           plusw2	equ	0xFDB
 22278                           fsr2h	equ	0xFDA
 22279                           fsr2l	equ	0xFD9
 22280                           status	equ	0xFD8
 22281                           
 22282 ;; *************** function _arp_send *****************
 22283 ;; Defined at:
 22284 ;;		line 144 in file "src/stack/protocols/arp.c"
 22285 ;; Parameters:    Size  Location     Type
 22286 ;;  arp            32   71[BANK0 ] struct arp_message
 22287 ;; Auto vars:     Size  Location     Type
 22288 ;;  i               1  112[BANK0 ] unsigned char 
 22289 ;;  i               1  111[BANK0 ] unsigned char 
 22290 ;;  i               1  110[BANK0 ] unsigned char 
 22291 ;;  i               1  109[BANK0 ] unsigned char 
 22292 ;;  ethFrame       34  113[BANK0 ] struct ethernetFrame
 22293 ;;  field           9  147[BANK0 ] struct memoryField
 22294 ;;  destination     6  103[BANK0 ] struct macaddress
 22295 ;; Return value:  Size  Location     Type
 22296 ;;                  1    wreg      void 
 22297 ;; Registers used:
 22298 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22299 ;; Tracked objects:
 22300 ;;		On entry : 0/0
 22301 ;;		On exit  : 0/0
 22302 ;;		Unchanged: 0/0
 22303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22304 ;;      Params:         0      32       0       0       0       0       0       0       0
 22305 ;;      Locals:         0      53       0       0       0       0       0       0       0
 22306 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22307 ;;      Totals:         0      85       0       0       0       0       0       0       0
 22308 ;;Total ram usage:       85 bytes
 22309 ;; Hardware stack levels used:    1
 22310 ;; Hardware stack levels required when called:    9
 22311 ;; This function calls:
 22312 ;;		_ethernetController_getSourceMACAddress
 22313 ;;		_ethernetController_sendPacket
 22314 ;;		_ethernetController_streamToTransmitBuffer
 22315 ;;		_ethernet_txFrameRequest
 22316 ;;		_mac_setToBroadcast
 22317 ;; This function is called by:
 22318 ;;		_arp_sendRequest
 22319 ;;		_arp_sendReply
 22320 ;; This function uses a non-reentrant model
 22321 ;;
 22322                           
 22323                           	psect	text85
 22324  0023DE                     __ptext85:
 22325                           	opt stack 0
 22326  0023DE                     _arp_send:
 22327                           	opt stack 18
 22328                           
 22329                           ;arp.c: 145: memoryField_t field;
 22330                           ;arp.c: 146: ethernetFrame_t ethFrame;
 22331                           ;arp.c: 149: macaddress_t destination;
 22332                           ;arp.c: 150: mac_setToBroadcast(&destination);
 22333                           
 22334                           ;incstack = 0
 22335  0023DE  0EC7               	movlw	low arp_send@destination
 22336  0023E0  0100               	movlb	0	; () banked
 22337  0023E2  6F60               	movwf	mac_setToBroadcast@mac& (0+255),b
 22338  0023E4  0E00               	movlw	high arp_send@destination
 22339  0023E6  6F61               	movwf	(mac_setToBroadcast@mac+1)& (0+255),b
 22340  0023E8  EC27  F030         	call	_mac_setToBroadcast	;wreg free
 22341                           
 22342                           ;arp.c: 151: ethFrame.destination = destination;
 22343  0023EC  EE20  F0C7         	lfsr	2,arp_send@destination
 22344  0023F0  EE10  F0D9         	lfsr	1,arp_send@ethFrame+8
 22345  0023F4  0E05               	movlw	5
 22346  0023F6                     u11281:
 22347  0023F6  CFDB FFE3          	movff	plusw2,plusw1
 22348  0023FA  06E8               	decf	wreg,f,c
 22349  0023FC  E2FC               	bc	u11281
 22350                           
 22351                           ;arp.c: 155: ethFrame.length = 36;
 22352  0023FE  0E00               	movlw	0
 22353  002400  0100               	movlb	0	; () banked
 22354  002402  6FD2               	movwf	(arp_send@ethFrame+1)& (0+255),b
 22355  002404  0E24               	movlw	36
 22356  002406  6FD1               	movwf	arp_send@ethFrame& (0+255),b
 22357                           
 22358                           ; BSR set to: 0
 22359                           ;arp.c: 156: ethFrame.source = ethernetController_getSourceMACAddress(field);
 22360  002408  EE20  F0F3         	lfsr	2,arp_send@field
 22361  00240C  EE00  F06F         	lfsr	0,ethernetController_getSourceMACAddress@field
 22362  002410  0E08               	movlw	8
 22363  002412                     u11291:
 22364  002412  CFDB FFEB          	movff	plusw2,plusw0
 22365  002416  06E8               	decf	wreg,f,c
 22366  002418  E2FC               	bc	u11291
 22367  00241A  ECE6  F02A         	call	_ethernetController_getSourceMACAddress	;wreg free
 22368  00241E  EE20  F0D3         	lfsr	2,arp_send@ethFrame+2
 22369  002422  0E05               	movlw	5
 22370  002424                     u11301:
 22371  002424  CFEB FFDB          	movff	plusw0,plusw2
 22372  002428  06E8               	decf	wreg,f,c
 22373  00242A  E2FC               	bc	u11301
 22374                           
 22375                           ;arp.c: 157: ethFrame.ethertype = ETHERTYPE_ARP;
 22376  00242C  0E08               	movlw	8
 22377  00242E  0100               	movlb	0	; () banked
 22378  002430  6FE0               	movwf	(arp_send@ethFrame+15)& (0+255),b
 22379  002432  0E06               	movlw	6
 22380  002434  6FDF               	movwf	(arp_send@ethFrame+14)& (0+255),b
 22381                           
 22382                           ; BSR set to: 0
 22383                           ;arp.c: 159: ethernet_txFrameRequest(&ethFrame);
 22384  002436  0ED1               	movlw	low arp_send@ethFrame
 22385  002438  6FA2               	movwf	ethernet_txFrameRequest@frame& (0+255),b
 22386  00243A  0E00               	movlw	high arp_send@ethFrame
 22387  00243C  6FA3               	movwf	(ethernet_txFrameRequest@frame+1)& (0+255),b
 22388  00243E  EC58  F024         	call	_ethernet_txFrameRequest	;wreg free
 22389                           
 22390                           ;arp.c: 161: if (ethFrame.memory.fOutOfMemory) {
 22391  002442  0100               	movlb	0	; () banked
 22392  002444  51E8               	movf	(arp_send@ethFrame+23)& (0+255),w,b
 22393  002446  A4D8               	btfss	status,2,c
 22394  002448  0012               	return	
 22395                           
 22396                           ; BSR set to: 0
 22397                           ;arp.c: 163: }
 22398                           ;arp.c: 165: field.start = ethFrame.memory.start + 8;
 22399                           
 22400                           ; BSR set to: 0
 22401                           
 22402                           ; BSR set to: 0
 22403                           ;arp.c: 162: return;
 22404  00244A  0E08               	movlw	8
 22405  00244C  25E1               	addwf	(arp_send@ethFrame+16)& (0+255),w,b
 22406  00244E  6FF3               	movwf	arp_send@field& (0+255),b
 22407  002450  0E00               	movlw	0
 22408  002452  21E2               	addwfc	(arp_send@ethFrame+17)& (0+255),w,b
 22409  002454  6FF4               	movwf	(arp_send@field+1)& (0+255),b
 22410                           
 22411                           ; BSR set to: 0
 22412                           ;arp.c: 166: field.end = ethFrame.memory.end;
 22413  002456  C0E3  F0F5         	movff	arp_send@ethFrame+18,arp_send@field+2
 22414  00245A  C0E4  F0F6         	movff	arp_send@ethFrame+19,arp_send@field+3
 22415                           
 22416                           ; BSR set to: 0
 22417                           ;arp.c: 167: field.length = 28;
 22418  00245E  0E00               	movlw	0
 22419  002460  6FF8               	movwf	(arp_send@field+5)& (0+255),b
 22420  002462  0E1C               	movlw	28
 22421  002464  6FF7               	movwf	(arp_send@field+4)& (0+255),b
 22422                           
 22423                           ; BSR set to: 0
 22424                           ;arp.c: 169: ethernetController_streamToTransmitBuffer((arp.htype & 0xff00) >> 8, field)
      +                          ;
 22425  002466  EE20  F0F3         	lfsr	2,arp_send@field
 22426  00246A  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22427  00246E  0E08               	movlw	8
 22428  002470                     u11321:
 22429  002470  CFDB FFEB          	movff	plusw2,plusw0
 22430  002474  06E8               	decf	wreg,f,c
 22431  002476  E2FC               	bc	u11321
 22432  002478  51A8               	movf	(arp_send@arp+1)& (0+255),w,b
 22433  00247A  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22434                           
 22435                           ;arp.c: 170: ethernetController_streamToTransmitBuffer(arp.htype & 0x00ff, field);
 22436  00247E  EE20  F0F3         	lfsr	2,arp_send@field
 22437  002482  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22438  002486  0E08               	movlw	8
 22439  002488                     u11331:
 22440  002488  CFDB FFEB          	movff	plusw2,plusw0
 22441  00248C  06E8               	decf	wreg,f,c
 22442  00248E  E2FC               	bc	u11331
 22443  002490  0100               	movlb	0	; () banked
 22444  002492  51A7               	movf	arp_send@arp& (0+255),w,b
 22445  002494  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22446                           
 22447                           ;arp.c: 171: ethernetController_streamToTransmitBuffer((arp.ptype & 0xff00) >> 8, field)
      +                          ;
 22448  002498  EE20  F0F3         	lfsr	2,arp_send@field
 22449  00249C  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22450  0024A0  0E08               	movlw	8
 22451  0024A2                     u11341:
 22452  0024A2  CFDB FFEB          	movff	plusw2,plusw0
 22453  0024A6  06E8               	decf	wreg,f,c
 22454  0024A8  E2FC               	bc	u11341
 22455  0024AA  0100               	movlb	0	; () banked
 22456  0024AC  51AA               	movf	(arp_send@arp+3)& (0+255),w,b
 22457  0024AE  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22458                           
 22459                           ;arp.c: 172: ethernetController_streamToTransmitBuffer(arp.ptype & 0x00ff, field);
 22460  0024B2  EE20  F0F3         	lfsr	2,arp_send@field
 22461  0024B6  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22462  0024BA  0E08               	movlw	8
 22463  0024BC                     u11351:
 22464  0024BC  CFDB FFEB          	movff	plusw2,plusw0
 22465  0024C0  06E8               	decf	wreg,f,c
 22466  0024C2  E2FC               	bc	u11351
 22467  0024C4  0100               	movlb	0	; () banked
 22468  0024C6  51A9               	movf	(arp_send@arp+2)& (0+255),w,b
 22469  0024C8  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22470                           
 22471                           ;arp.c: 173: ethernetController_streamToTransmitBuffer(arp.hlen, field);
 22472  0024CC  EE20  F0F3         	lfsr	2,arp_send@field
 22473  0024D0  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22474  0024D4  0E08               	movlw	8
 22475  0024D6                     u11361:
 22476  0024D6  CFDB FFEB          	movff	plusw2,plusw0
 22477  0024DA  06E8               	decf	wreg,f,c
 22478  0024DC  E2FC               	bc	u11361
 22479  0024DE  0100               	movlb	0	; () banked
 22480  0024E0  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 22481  0024E2  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22482                           
 22483                           ;arp.c: 174: ethernetController_streamToTransmitBuffer(arp.plen, field);
 22484  0024E6  EE20  F0F3         	lfsr	2,arp_send@field
 22485  0024EA  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22486  0024EE  0E08               	movlw	8
 22487  0024F0                     u11371:
 22488  0024F0  CFDB FFEB          	movff	plusw2,plusw0
 22489  0024F4  06E8               	decf	wreg,f,c
 22490  0024F6  E2FC               	bc	u11371
 22491  0024F8  0100               	movlb	0	; () banked
 22492  0024FA  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 22493  0024FC  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22494                           
 22495                           ;arp.c: 175: ethernetController_streamToTransmitBuffer((arp.operation & 0xff00) >> 8, fi
      +                          eld);
 22496  002500  EE20  F0F3         	lfsr	2,arp_send@field
 22497  002504  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22498  002508  0E08               	movlw	8
 22499  00250A                     u11381:
 22500  00250A  CFDB FFEB          	movff	plusw2,plusw0
 22501  00250E  06E8               	decf	wreg,f,c
 22502  002510  E2FC               	bc	u11381
 22503  002512  0100               	movlb	0	; () banked
 22504  002514  51AE               	movf	(arp_send@arp+7)& (0+255),w,b
 22505  002516  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22506                           
 22507                           ;arp.c: 176: ethernetController_streamToTransmitBuffer(arp.operation & 0x00ff, field);
 22508  00251A  EE20  F0F3         	lfsr	2,arp_send@field
 22509  00251E  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22510  002522  0E08               	movlw	8
 22511  002524                     u11391:
 22512  002524  CFDB FFEB          	movff	plusw2,plusw0
 22513  002528  06E8               	decf	wreg,f,c
 22514  00252A  E2FC               	bc	u11391
 22515  00252C  0100               	movlb	0	; () banked
 22516  00252E  51AD               	movf	(arp_send@arp+6)& (0+255),w,b
 22517  002530  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22518                           
 22519                           ;arp.c: 177: for (uint8_t i = 0; i < arp.hlen; i++)
 22520  002534  0E00               	movlw	0
 22521  002536  0100               	movlb	0	; () banked
 22522  002538  6FCD               	movwf	arp_send@i& (0+255),b
 22523  00253A  D01A               	goto	l1006
 22524  00253C                     
 22525                           ; BSR set to: 0
 22526                           ;arp.c: 178: ethernetController_streamToTransmitBuffer(arp.senderMACAddress.address[i], 
      +                          field);
 22527                           
 22528                           ; BSR set to: 0
 22529  00253C  EE20  F0F3         	lfsr	2,arp_send@field
 22530  002540  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22531  002544  0E08               	movlw	8
 22532  002546                     u11401:
 22533  002546  CFDB FFEB          	movff	plusw2,plusw0
 22534  00254A  06E8               	decf	wreg,f,c
 22535  00254C  E2FC               	bc	u11401
 22536  00254E  51CD               	movf	arp_send@i& (0+255),w,b
 22537  002550  0D01               	mullw	1
 22538  002552  0E08               	movlw	8
 22539  002554  26F3               	addwf	prodl,f,c
 22540  002556  0E00               	movlw	0
 22541  002558  22F4               	addwfc	prodh,f,c
 22542  00255A  0EA7               	movlw	low arp_send@arp
 22543  00255C  24F3               	addwf	prodl,w,c
 22544  00255E  6ED9               	movwf	fsr2l,c
 22545  002560  0E00               	movlw	high arp_send@arp
 22546  002562  20F4               	addwfc	prodh,w,c
 22547  002564  6EDA               	movwf	fsr2h,c
 22548  002566  50DF               	movf	indf2,w,c
 22549  002568  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22550  00256C  0100               	movlb	0	; () banked
 22551  00256E  2BCD               	incf	arp_send@i& (0+255),f,b
 22552  002570                     l1006:
 22553                           
 22554                           ; BSR set to: 0
 22555                           
 22556                           ; BSR set to: 0
 22557  002570  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 22558  002572  5DCD               	subwf	arp_send@i& (0+255),w,b
 22559  002574  A0D8               	btfss	status,0,c
 22560  002576  D7E2               	goto	l1007
 22561                           
 22562                           ; BSR set to: 0
 22563                           ;arp.c: 179: for (uint8_t i = 0; i < arp.plen; i++)
 22564                           
 22565                           ; BSR set to: 0
 22566  002578  0E00               	movlw	0
 22567  00257A  6FCE               	movwf	arp_send@i_3290& (0+255),b
 22568  00257C  D01A               	goto	l1009
 22569  00257E                     
 22570                           ; BSR set to: 0
 22571                           ;arp.c: 180: ethernetController_streamToTransmitBuffer(arp.senderIPAddress.address[i], f
      +                          ield);
 22572                           
 22573                           ; BSR set to: 0
 22574  00257E  EE20  F0F3         	lfsr	2,arp_send@field
 22575  002582  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22576  002586  0E08               	movlw	8
 22577  002588                     u11421:
 22578  002588  CFDB FFEB          	movff	plusw2,plusw0
 22579  00258C  06E8               	decf	wreg,f,c
 22580  00258E  E2FC               	bc	u11421
 22581  002590  51CE               	movf	arp_send@i_3290& (0+255),w,b
 22582  002592  0D01               	mullw	1
 22583  002594  0E0E               	movlw	14
 22584  002596  26F3               	addwf	prodl,f,c
 22585  002598  0E00               	movlw	0
 22586  00259A  22F4               	addwfc	prodh,f,c
 22587  00259C  0EA7               	movlw	low arp_send@arp
 22588  00259E  24F3               	addwf	prodl,w,c
 22589  0025A0  6ED9               	movwf	fsr2l,c
 22590  0025A2  0E00               	movlw	high arp_send@arp
 22591  0025A4  20F4               	addwfc	prodh,w,c
 22592  0025A6  6EDA               	movwf	fsr2h,c
 22593  0025A8  50DF               	movf	indf2,w,c
 22594  0025AA  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22595  0025AE  0100               	movlb	0	; () banked
 22596  0025B0  2BCE               	incf	arp_send@i_3290& (0+255),f,b
 22597  0025B2                     l1009:
 22598                           
 22599                           ; BSR set to: 0
 22600                           
 22601                           ; BSR set to: 0
 22602  0025B2  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 22603  0025B4  5DCE               	subwf	arp_send@i_3290& (0+255),w,b
 22604  0025B6  A0D8               	btfss	status,0,c
 22605  0025B8  D7E2               	goto	l1010
 22606                           
 22607                           ; BSR set to: 0
 22608                           ;arp.c: 181: for (uint8_t i = 0; i < arp.hlen; i++)
 22609                           
 22610                           ; BSR set to: 0
 22611  0025BA  0E00               	movlw	0
 22612  0025BC  6FCF               	movwf	arp_send@i_3291& (0+255),b
 22613  0025BE  D01A               	goto	l1012
 22614  0025C0                     
 22615                           ; BSR set to: 0
 22616                           ;arp.c: 182: ethernetController_streamToTransmitBuffer(arp.targetMACAddress.address[i], 
      +                          field);
 22617                           
 22618                           ; BSR set to: 0
 22619  0025C0  EE20  F0F3         	lfsr	2,arp_send@field
 22620  0025C4  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22621  0025C8  0E08               	movlw	8
 22622  0025CA                     u11441:
 22623  0025CA  CFDB FFEB          	movff	plusw2,plusw0
 22624  0025CE  06E8               	decf	wreg,f,c
 22625  0025D0  E2FC               	bc	u11441
 22626  0025D2  51CF               	movf	arp_send@i_3291& (0+255),w,b
 22627  0025D4  0D01               	mullw	1
 22628  0025D6  0E12               	movlw	18
 22629  0025D8  26F3               	addwf	prodl,f,c
 22630  0025DA  0E00               	movlw	0
 22631  0025DC  22F4               	addwfc	prodh,f,c
 22632  0025DE  0EA7               	movlw	low arp_send@arp
 22633  0025E0  24F3               	addwf	prodl,w,c
 22634  0025E2  6ED9               	movwf	fsr2l,c
 22635  0025E4  0E00               	movlw	high arp_send@arp
 22636  0025E6  20F4               	addwfc	prodh,w,c
 22637  0025E8  6EDA               	movwf	fsr2h,c
 22638  0025EA  50DF               	movf	indf2,w,c
 22639  0025EC  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22640  0025F0  0100               	movlb	0	; () banked
 22641  0025F2  2BCF               	incf	arp_send@i_3291& (0+255),f,b
 22642  0025F4                     l1012:
 22643                           
 22644                           ; BSR set to: 0
 22645                           
 22646                           ; BSR set to: 0
 22647  0025F4  51AB               	movf	(arp_send@arp+4)& (0+255),w,b
 22648  0025F6  5DCF               	subwf	arp_send@i_3291& (0+255),w,b
 22649  0025F8  A0D8               	btfss	status,0,c
 22650  0025FA  D7E2               	goto	l1013
 22651                           
 22652                           ; BSR set to: 0
 22653                           ;arp.c: 183: for (uint8_t i = 0; i < arp.plen; i++)
 22654                           
 22655                           ; BSR set to: 0
 22656  0025FC  0E00               	movlw	0
 22657  0025FE  6FD0               	movwf	arp_send@i_3292& (0+255),b
 22658  002600  D01A               	goto	l1015
 22659  002602                     
 22660                           ; BSR set to: 0
 22661                           ;arp.c: 184: ethernetController_streamToTransmitBuffer(arp.targetIPAddress.address[i], f
      +                          ield);
 22662                           
 22663                           ; BSR set to: 0
 22664  002602  EE20  F0F3         	lfsr	2,arp_send@field
 22665  002606  EE00  F06F         	lfsr	0,ethernetController_streamToTransmitBuffer@field
 22666  00260A  0E08               	movlw	8
 22667  00260C                     u11461:
 22668  00260C  CFDB FFEB          	movff	plusw2,plusw0
 22669  002610  06E8               	decf	wreg,f,c
 22670  002612  E2FC               	bc	u11461
 22671  002614  51D0               	movf	arp_send@i_3292& (0+255),w,b
 22672  002616  0D01               	mullw	1
 22673  002618  0E18               	movlw	24
 22674  00261A  26F3               	addwf	prodl,f,c
 22675  00261C  0E00               	movlw	0
 22676  00261E  22F4               	addwfc	prodh,f,c
 22677  002620  0EA7               	movlw	low arp_send@arp
 22678  002622  24F3               	addwf	prodl,w,c
 22679  002624  6ED9               	movwf	fsr2l,c
 22680  002626  0E00               	movlw	high arp_send@arp
 22681  002628  20F4               	addwfc	prodh,w,c
 22682  00262A  6EDA               	movwf	fsr2h,c
 22683  00262C  50DF               	movf	indf2,w,c
 22684  00262E  EC8B  F029         	call	_ethernetController_streamToTransmitBuffer
 22685  002632  0100               	movlb	0	; () banked
 22686  002634  2BD0               	incf	arp_send@i_3292& (0+255),f,b
 22687  002636                     l1015:
 22688                           
 22689                           ; BSR set to: 0
 22690                           
 22691                           ; BSR set to: 0
 22692  002636  51AC               	movf	(arp_send@arp+5)& (0+255),w,b
 22693  002638  5DD0               	subwf	arp_send@i_3292& (0+255),w,b
 22694  00263A  A0D8               	btfss	status,0,c
 22695  00263C  D7E2               	goto	l1016
 22696                           
 22697                           ; BSR set to: 0
 22698                           ;arp.c: 186: ethernetController_sendPacket(ethFrame.memory);
 22699                           
 22700                           ; BSR set to: 0
 22701  00263E  EE20  F0E1         	lfsr	2,arp_send@ethFrame+16
 22702  002642  EE00  F072         	lfsr	0,ethernetController_sendPacket@field
 22703  002646  0E08               	movlw	8
 22704  002648                     u11481:
 22705  002648  CFDB FFEB          	movff	plusw2,plusw0
 22706  00264C  06E8               	decf	wreg,f,c
 22707  00264E  E2FC               	bc	u11481
 22708  002650  ECED  F02F         	call	_ethernetController_sendPacket	;wreg free
 22709  002654  0012               	return		;funcret
 22710  002656                     __end_of_arp_send:
 22711                           	opt stack 0
 22712                           tblptru	equ	0xFF8
 22713                           tblptrh	equ	0xFF7
 22714                           tblptrl	equ	0xFF6
 22715                           tablat	equ	0xFF5
 22716                           prodh	equ	0xFF4
 22717                           prodl	equ	0xFF3
 22718                           intcon	equ	0xFF2
 22719                           intcon3	equ	0xFF0
 22720                           indf0	equ	0xFEF
 22721                           postinc0	equ	0xFEE
 22722                           plusw0	equ	0xFEB
 22723                           fsr0h	equ	0xFEA
 22724                           fsr0l	equ	0xFE9
 22725                           wreg	equ	0xFE8
 22726                           indf1	equ	0xFE7
 22727                           postinc1	equ	0xFE6
 22728                           postdec1	equ	0xFE5
 22729                           plusw1	equ	0xFE3
 22730                           fsr1h	equ	0xFE2
 22731                           fsr1l	equ	0xFE1
 22732                           indf2	equ	0xFDF
 22733                           postinc2	equ	0xFDE
 22734                           postdec2	equ	0xFDD
 22735                           plusw2	equ	0xFDB
 22736                           fsr2h	equ	0xFDA
 22737                           fsr2l	equ	0xFD9
 22738                           status	equ	0xFD8
 22739                           
 22740 ;; *************** function _mac_setToBroadcast *****************
 22741 ;; Defined at:
 22742 ;;		line 26 in file "src/eth/mac.c"
 22743 ;; Parameters:    Size  Location     Type
 22744 ;;  mac             2    0[BANK0 ] PTR struct macaddress
 22745 ;;		 -> arp_send@destination(6), 
 22746 ;; Auto vars:     Size  Location     Type
 22747 ;;  i               1    2[BANK0 ] unsigned char 
 22748 ;; Return value:  Size  Location     Type
 22749 ;;                  1    wreg      void 
 22750 ;; Registers used:
 22751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22752 ;; Tracked objects:
 22753 ;;		On entry : 0/0
 22754 ;;		On exit  : 0/0
 22755 ;;		Unchanged: 0/0
 22756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22757 ;;      Params:         0       2       0       0       0       0       0       0       0
 22758 ;;      Locals:         0       1       0       0       0       0       0       0       0
 22759 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22760 ;;      Totals:         0       3       0       0       0       0       0       0       0
 22761 ;;Total ram usage:        3 bytes
 22762 ;; Hardware stack levels used:    1
 22763 ;; Hardware stack levels required when called:    4
 22764 ;; This function calls:
 22765 ;;		Nothing
 22766 ;; This function is called by:
 22767 ;;		_arp_send
 22768 ;; This function uses a non-reentrant model
 22769 ;;
 22770                           
 22771                           	psect	text86
 22772  00604E                     __ptext86:
 22773                           	opt stack 0
 22774  00604E                     _mac_setToBroadcast:
 22775                           	opt stack 22
 22776                           
 22777                           ;mac.c: 27: for (uint8_t i = 0; i < 6; i++)
 22778                           
 22779                           ;incstack = 0
 22780  00604E  0E00               	movlw	0
 22781  006050  0100               	movlb	0	; () banked
 22782  006052  6F62               	movwf	mac_setToBroadcast@i& (0+255),b
 22783  006054                     l9563:
 22784                           
 22785                           ; BSR set to: 0
 22786  006054  0E05               	movlw	5
 22787  006056  6562               	cpfsgt	mac_setToBroadcast@i& (0+255),b
 22788  006058  D001               	goto	l379
 22789  00605A  0012               	return	
 22790  00605C                     l379:
 22791                           
 22792                           ; BSR set to: 0
 22793                           ;mac.c: 28: mac->address[i] = 0xff;
 22794                           
 22795                           ; BSR set to: 0
 22796  00605C  5162               	movf	mac_setToBroadcast@i& (0+255),w,b
 22797  00605E  0D01               	mullw	1
 22798  006060  50F3               	movf	prodl,w,c
 22799  006062  2560               	addwf	mac_setToBroadcast@mac& (0+255),w,b
 22800  006064  6ED9               	movwf	fsr2l,c
 22801  006066  50F4               	movf	prodh,w,c
 22802  006068  2161               	addwfc	(mac_setToBroadcast@mac+1)& (0+255),w,b
 22803  00606A  6EDA               	movwf	fsr2h,c
 22804  00606C  0EFF               	movlw	255
 22805  00606E  6EDF               	movwf	indf2,c
 22806                           
 22807                           ; BSR set to: 0
 22808  006070  2B62               	incf	mac_setToBroadcast@i& (0+255),f,b
 22809  006072  D7F0               	goto	l9563
 22810  006074                     __end_of_mac_setToBroadcast:
 22811                           	opt stack 0
 22812                           tblptru	equ	0xFF8
 22813                           tblptrh	equ	0xFF7
 22814                           tblptrl	equ	0xFF6
 22815                           tablat	equ	0xFF5
 22816                           prodh	equ	0xFF4
 22817                           prodl	equ	0xFF3
 22818                           intcon	equ	0xFF2
 22819                           intcon3	equ	0xFF0
 22820                           indf0	equ	0xFEF
 22821                           postinc0	equ	0xFEE
 22822                           plusw0	equ	0xFEB
 22823                           fsr0h	equ	0xFEA
 22824                           fsr0l	equ	0xFE9
 22825                           wreg	equ	0xFE8
 22826                           indf1	equ	0xFE7
 22827                           postinc1	equ	0xFE6
 22828                           postdec1	equ	0xFE5
 22829                           plusw1	equ	0xFE3
 22830                           fsr1h	equ	0xFE2
 22831                           fsr1l	equ	0xFE1
 22832                           indf2	equ	0xFDF
 22833                           postinc2	equ	0xFDE
 22834                           postdec2	equ	0xFDD
 22835                           plusw2	equ	0xFDB
 22836                           fsr2h	equ	0xFDA
 22837                           fsr2l	equ	0xFD9
 22838                           status	equ	0xFD8
 22839                           
 22840 ;; *************** function _ethernet_txFrameRequest *****************
 22841 ;; Defined at:
 22842 ;;		line 30 in file "src/eth/ethernet.c"
 22843 ;; Parameters:    Size  Location     Type
 22844 ;;  frame           2   66[BANK0 ] PTR struct ethernetFrame
 22845 ;;		 -> icmp_sendEchoReply@ipReply(66), arp_send@ethFrame(34), stack(123), 
 22846 ;; Auto vars:     Size  Location     Type
 22847 ;;  err             3   68[BANK0 ] struct error
 22848 ;; Return value:  Size  Location     Type
 22849 ;;                  3   66[BANK0 ] struct error
 22850 ;; Registers used:
 22851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22852 ;; Tracked objects:
 22853 ;;		On entry : 0/0
 22854 ;;		On exit  : 0/0
 22855 ;;		Unchanged: 0/0
 22856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 22857 ;;      Params:         0       2       0       0       0       0       0       0       0
 22858 ;;      Locals:         0       3       0       0       0       0       0       0       0
 22859 ;;      Temps:          0       0       0       0       0       0       0       0       0
 22860 ;;      Totals:         0       5       0       0       0       0       0       0       0
 22861 ;;Total ram usage:        5 bytes
 22862 ;; Hardware stack levels used:    1
 22863 ;; Hardware stack levels required when called:    8
 22864 ;; This function calls:
 22865 ;;		_ethernetController_writeDestinationMACAddress
 22866 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 22867 ;;		_memory_txFrameRequest
 22868 ;; This function is called by:
 22869 ;;		_arp_send
 22870 ;;		_ipv4_txFrameRequest
 22871 ;; This function uses a non-reentrant model
 22872 ;;
 22873                           
 22874                           	psect	text87
 22875  0048B0                     __ptext87:
 22876                           	opt stack 0
 22877  0048B0                     _ethernet_txFrameRequest:
 22878                           	opt stack 21
 22879                           
 22880                           ;ethernet.c: 32: error_t err;
 22881                           ;ethernet.c: 33: err.module = ERROR_MODULE_ETHERNET;
 22882                           
 22883                           ; BSR set to: 0
 22884                           ;incstack = 0
 22885  0048B0  0E02               	movlw	2
 22886  0048B2  0100               	movlb	0	; () banked
 22887  0048B4  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 22888                           
 22889                           ;ethernet.c: 34: err.code = (uint16_t)0;
 22890  0048B6  0E00               	movlw	0
 22891  0048B8  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 22892  0048BA  0E00               	movlw	0
 22893  0048BC  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 22894                           
 22895                           ; BSR set to: 0
 22896                           ;ethernet.c: 35: frame->memory = memory_txFrameRequest(frame->length);
 22897  0048BE  C0A2  FFD9         	movff	ethernet_txFrameRequest@frame,fsr2l
 22898  0048C2  C0A3  FFDA         	movff	ethernet_txFrameRequest@frame+1,fsr2h
 22899  0048C6  CFDE F084          	movff	postinc2,memory_txFrameRequest@length
 22900  0048CA  CFDD F085          	movff	postdec2,memory_txFrameRequest@length+1
 22901  0048CE  ECFB  F002         	call	_memory_txFrameRequest	;wreg free
 22902  0048D2  0100               	movlb	0	; () banked
 22903  0048D4  EE20 F010          	lfsr	2,16
 22904  0048D8  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 22905  0048DA  26D9               	addwf	fsr2l,f,c
 22906  0048DC  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 22907  0048DE  22DA               	addwfc	fsr2h,f,c
 22908  0048E0  0E08               	movlw	8
 22909  0048E2                     u10581:
 22910  0048E2  CFEB FFDB          	movff	plusw0,plusw2
 22911  0048E6  06E8               	decf	wreg,f,c
 22912  0048E8  E2FC               	bc	u10581
 22913                           
 22914                           ; BSR set to: 0
 22915                           ;ethernet.c: 37: if (frame->memory.fOutOfMemory) {
 22916  0048EA  EE20 F017          	lfsr	2,23
 22917  0048EE  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 22918  0048F0  26D9               	addwf	fsr2l,f,c
 22919  0048F2  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 22920  0048F4  22DA               	addwfc	fsr2h,f,c
 22921  0048F6  50DF               	movf	indf2,w,c
 22922  0048F8  B4D8               	btfsc	status,2,c
 22923  0048FA  D007               	goto	l359
 22924                           
 22925                           ; BSR set to: 0
 22926                           ;ethernet.c: 39: err.module = ERROR_MODULE_MEMORY;
 22927  0048FC  0E00               	movlw	0
 22928  0048FE  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 22929                           
 22930                           ;ethernet.c: 40: err.code = ERROR_MEMORY_OUT_OF_MEMORY;
 22931  004900  0E00               	movlw	0
 22932  004902  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 22933  004904  0E65               	movlw	101
 22934  004906  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 22935                           
 22936                           ; BSR set to: 0
 22937                           ;ethernet.c: 41: return err;
 22938                           ;	Return value of _ethernet_txFrameRequest is never used
 22939  004908  0012               	return	
 22940  00490A                     l359:
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;ethernet.c: 42: }
 22944                           ;ethernet.c: 43: if (!frame->memory.fIsAssigned) {
 22945                           
 22946                           ; BSR set to: 0
 22947  00490A  EE20 F016          	lfsr	2,22
 22948  00490E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 22949  004910  26D9               	addwf	fsr2l,f,c
 22950  004912  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 22951  004914  22DA               	addwfc	fsr2h,f,c
 22952  004916  50DF               	movf	indf2,w,c
 22953  004918  A4D8               	btfss	status,2,c
 22954  00491A  D007               	goto	l361
 22955                           
 22956                           ; BSR set to: 0
 22957                           ;ethernet.c: 45: err.module = ERROR_MODULE_MEMORY;
 22958  00491C  0E00               	movlw	0
 22959  00491E  6FA4               	movwf	ethernet_txFrameRequest@err& (0+255),b
 22960                           
 22961                           ;ethernet.c: 46: err.code = ERROR_MEMORY_UNKNOWN;
 22962  004920  0E00               	movlw	0
 22963  004922  6FA6               	movwf	(ethernet_txFrameRequest@err+2)& (0+255),b
 22964  004924  0EC7               	movlw	199
 22965  004926  6FA5               	movwf	(ethernet_txFrameRequest@err+1)& (0+255),b
 22966                           
 22967                           ; BSR set to: 0
 22968                           ;ethernet.c: 47: return err;
 22969                           ;	Return value of _ethernet_txFrameRequest is never used
 22970  004928  0012               	return	
 22971  00492A                     l361:
 22972                           
 22973                           ; BSR set to: 0
 22974                           ;ethernet.c: 48: }
 22975                           ;ethernet.c: 50: ethernetController_writeDestinationMACAddress(frame->destination, frame
      +                          ->memory);
 22976                           
 22977                           ; BSR set to: 0
 22978  00492A  EE20 F008          	lfsr	2,8
 22979  00492E  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 22980  004930  26D9               	addwf	fsr2l,f,c
 22981  004932  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 22982  004934  22DA               	addwfc	fsr2h,f,c
 22983  004936  EE00  F06F         	lfsr	0,ethernetController_writeDestinationMACAddress@addr
 22984  00493A  0E05               	movlw	5
 22985  00493C                     u10611:
 22986  00493C  CFDB FFEB          	movff	plusw2,plusw0
 22987  004940  06E8               	decf	wreg,f,c
 22988  004942  E2FC               	bc	u10611
 22989  004944  EE20 F010          	lfsr	2,16
 22990  004948  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 22991  00494A  26D9               	addwf	fsr2l,f,c
 22992  00494C  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 22993  00494E  22DA               	addwfc	fsr2h,f,c
 22994  004950  EE00  F075         	lfsr	0,ethernetController_writeDestinationMACAddress@field
 22995  004954  0E08               	movlw	8
 22996  004956                     u10621:
 22997  004956  CFDB FFEB          	movff	plusw2,plusw0
 22998  00495A  06E8               	decf	wreg,f,c
 22999  00495C  E2FC               	bc	u10621
 23000  00495E  ECCF  F028         	call	_ethernetController_writeDestinationMACAddress	;wreg free
 23001                           
 23002                           ;ethernet.c: 51: ethernetController_writeEtherTypeFieldToBuffer(frame->ethertype, frame-
      +                          >memory);
 23003  004962  0100               	movlb	0	; () banked
 23004  004964  EE20 F00E          	lfsr	2,14
 23005  004968  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 23006  00496A  26D9               	addwf	fsr2l,f,c
 23007  00496C  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 23008  00496E  22DA               	addwfc	fsr2h,f,c
 23009  004970  CFDE F06F          	movff	postinc2,ethernetController_writeEtherTypeFieldToBuffer@ethtype
 23010  004974  CFDD F070          	movff	postdec2,ethernetController_writeEtherTypeFieldToBuffer@ethtype+1
 23011  004978  EE20 F010          	lfsr	2,16
 23012  00497C  51A2               	movf	ethernet_txFrameRequest@frame& (0+255),w,b
 23013  00497E  26D9               	addwf	fsr2l,f,c
 23014  004980  51A3               	movf	(ethernet_txFrameRequest@frame+1)& (0+255),w,b
 23015  004982  22DA               	addwfc	fsr2h,f,c
 23016  004984  EE00  F071         	lfsr	0,ethernetController_writeEtherTypeFieldToBuffer@field
 23017  004988  0E08               	movlw	8
 23018  00498A                     u10631:
 23019  00498A  CFDB FFEB          	movff	plusw2,plusw0
 23020  00498E  06E8               	decf	wreg,f,c
 23021  004990  E2FC               	bc	u10631
 23022  004992  EC39  F02D         	call	_ethernetController_writeEtherTypeFieldToBuffer	;wreg free
 23023  004996  0012               	return	
 23024  004998                     __end_of_ethernet_txFrameRequest:
 23025                           	opt stack 0
 23026                           tblptru	equ	0xFF8
 23027                           tblptrh	equ	0xFF7
 23028                           tblptrl	equ	0xFF6
 23029                           tablat	equ	0xFF5
 23030                           prodh	equ	0xFF4
 23031                           prodl	equ	0xFF3
 23032                           intcon	equ	0xFF2
 23033                           intcon3	equ	0xFF0
 23034                           indf0	equ	0xFEF
 23035                           postinc0	equ	0xFEE
 23036                           plusw0	equ	0xFEB
 23037                           fsr0h	equ	0xFEA
 23038                           fsr0l	equ	0xFE9
 23039                           wreg	equ	0xFE8
 23040                           indf1	equ	0xFE7
 23041                           postinc1	equ	0xFE6
 23042                           postdec1	equ	0xFE5
 23043                           plusw1	equ	0xFE3
 23044                           fsr1h	equ	0xFE2
 23045                           fsr1l	equ	0xFE1
 23046                           indf2	equ	0xFDF
 23047                           postinc2	equ	0xFDE
 23048                           postdec2	equ	0xFDD
 23049                           plusw2	equ	0xFDB
 23050                           fsr2h	equ	0xFDA
 23051                           fsr2l	equ	0xFD9
 23052                           status	equ	0xFD8
 23053                           
 23054 ;; *************** function _memory_txFrameRequest *****************
 23055 ;; Defined at:
 23056 ;;		line 134 in file "src/mem/memoryController.c"
 23057 ;; Parameters:    Size  Location     Type
 23058 ;;  length          2   36[BANK0 ] unsigned int 
 23059 ;; Auto vars:     Size  Location     Type
 23060 ;;  i               1   54[BANK0 ] unsigned char 
 23061 ;;  i               1   55[BANK0 ] unsigned char 
 23062 ;;  fNoOverlapMa    1   53[BANK0 ] unsigned char 
 23063 ;;  field           9   56[BANK0 ] struct memoryField
 23064 ;;  freeIndex       1   65[BANK0 ] unsigned char 
 23065 ;; Return value:  Size  Location     Type
 23066 ;;                  9   36[BANK0 ] struct memoryField
 23067 ;; Registers used:
 23068 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 23069 ;; Tracked objects:
 23070 ;;		On entry : 0/0
 23071 ;;		On exit  : 0/0
 23072 ;;		Unchanged: 0/0
 23073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23074 ;;      Params:         0       9       0       0       0       0       0       0       0
 23075 ;;      Locals:         0      15       0       0       0       0       0       0       0
 23076 ;;      Temps:          0       6       0       0       0       0       0       0       0
 23077 ;;      Totals:         0      30       0       0       0       0       0       0       0
 23078 ;;Total ram usage:       30 bytes
 23079 ;; Hardware stack levels used:    1
 23080 ;; Hardware stack levels required when called:    6
 23081 ;; This function calls:
 23082 ;;		___wmul
 23083 ;;		_checkForOverlap
 23084 ;;		_entireMemoryEmpty
 23085 ;;		_entireMemoryFull
 23086 ;; This function is called by:
 23087 ;;		_ethernet_txFrameRequest
 23088 ;; This function uses a non-reentrant model
 23089 ;;
 23090                           
 23091                           	psect	text88
 23092  0005F6                     __ptext88:
 23093                           	opt stack 0
 23094  0005F6                     _memory_txFrameRequest:
 23095                           	opt stack 22
 23096                           
 23097                           ;memoryController.c: 135: memoryField_t field;
 23098                           ;memoryController.c: 136: uint8_t freeIndex = 0;
 23099                           
 23100                           ;incstack = 0
 23101  0005F6  0E00               	movlw	0
 23102  0005F8  0100               	movlb	0	; () banked
 23103  0005FA  6FA1               	movwf	memory_txFrameRequest@freeIndex& (0+255),b
 23104                           
 23105                           ; BSR set to: 0
 23106                           ;memoryController.c: 138: if (length == 0) {
 23107  0005FC  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 23108  0005FE  1185               	iorwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 23109  000600  A4D8               	btfss	status,2,c
 23110  000602  D00C               	goto	l464
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;memoryController.c: 139: field.fOutOfMemory = 1;
 23114  000604  0E01               	movlw	1
 23115  000606  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 23116                           
 23117                           ; BSR set to: 0
 23118                           ;memoryController.c: 140: return field;
 23119  000608  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23120  00060C  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23121  000610  0E08               	movlw	8
 23122  000612                     u10131:
 23123  000612  CFDB FFEB          	movff	plusw2,plusw0
 23124  000616  06E8               	decf	wreg,f,c
 23125  000618  E2FC               	bc	u10131
 23126                           
 23127                           ; BSR set to: 0
 23128  00061A  0012               	return	
 23129  00061C                     l464:
 23130                           
 23131                           ; BSR set to: 0
 23132                           ;memoryController.c: 141: }
 23133                           ;memoryController.c: 143: if (entireMemoryFull()) {
 23134                           
 23135                           ; BSR set to: 0
 23136  00061C  EC89  F02E         	call	_entireMemoryFull	;wreg free
 23137  000620  A0D8               	btfss	status,0,c
 23138  000622  D00D               	goto	l466
 23139                           
 23140                           ;memoryController.c: 144: field.fOutOfMemory = 1;
 23141  000624  0E01               	movlw	1
 23142  000626  0100               	movlb	0	; () banked
 23143  000628  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 23144                           
 23145                           ; BSR set to: 0
 23146                           ;memoryController.c: 145: return field;
 23147  00062A  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23148  00062E  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23149  000632  0E08               	movlw	8
 23150  000634                     u10151:
 23151  000634  CFDB FFEB          	movff	plusw2,plusw0
 23152  000638  06E8               	decf	wreg,f,c
 23153  00063A  E2FC               	bc	u10151
 23154                           
 23155                           ; BSR set to: 0
 23156  00063C  0012               	return	
 23157  00063E                     l466:
 23158                           
 23159                           ;memoryController.c: 146: }
 23160                           ;memoryController.c: 147: if (entireMemoryEmpty()) {
 23161                           
 23162                           ; BSR set to: 0
 23163  00063E  ECA5  F02E         	call	_entireMemoryEmpty	;wreg free
 23164  000642  A0D8               	btfss	status,0,c
 23165  000644  D238               	goto	l491
 23166                           
 23167                           ;memoryController.c: 149: if ((0x0000 + length) > 0x3000 - 1) {
 23168  000646  0E30               	movlw	48
 23169  000648  0100               	movlb	0	; () banked
 23170  00064A  5D85               	subwf	(memory_txFrameRequest@length+1)& (0+255),w,b
 23171  00064C  A0D8               	btfss	status,0,c
 23172  00064E  D00C               	goto	l468
 23173                           
 23174                           ; BSR set to: 0
 23175                           ;memoryController.c: 150: field.fOutOfMemory = 1;
 23176  000650  0E01               	movlw	1
 23177  000652  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 23178                           
 23179                           ; BSR set to: 0
 23180                           ;memoryController.c: 151: return field;
 23181  000654  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23182  000658  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23183  00065C  0E08               	movlw	8
 23184  00065E                     u10181:
 23185  00065E  CFDB FFEB          	movff	plusw2,plusw0
 23186  000662  06E8               	decf	wreg,f,c
 23187  000664  E2FC               	bc	u10181
 23188                           
 23189                           ; BSR set to: 0
 23190  000666  0012               	return	
 23191  000668                     l468:
 23192                           
 23193                           ; BSR set to: 0
 23194                           ;memoryController.c: 153: occupiedMemory[0].start = 0x0000;
 23195                           
 23196                           ; BSR set to: 0
 23197  000668  0E00               	movlw	0
 23198  00066A  0102               	movlb	2	; () banked
 23199  00066C  6F01               	movwf	(_occupiedMemory+1)& (0+255),b
 23200  00066E  0E00               	movlw	0
 23201  000670  6F00               	movwf	_occupiedMemory& (0+255),b
 23202                           
 23203                           ; BSR set to: 2
 23204                           ;memoryController.c: 154: occupiedMemory[0].end = 0x0000 + length;
 23205  000672  C084  F202         	movff	memory_txFrameRequest@length,_occupiedMemory+2
 23206  000676  C085  F203         	movff	memory_txFrameRequest@length+1,_occupiedMemory+3
 23207                           
 23208                           ; BSR set to: 2
 23209                           ;memoryController.c: 155: occupiedMemory[0].length = length;
 23210  00067A  C084  F204         	movff	memory_txFrameRequest@length,_occupiedMemory+4
 23211  00067E  C085  F205         	movff	memory_txFrameRequest@length+1,_occupiedMemory+5
 23212                           
 23213                           ;memoryController.c: 156: occupiedMemory[0].fIsAssigned = 1;
 23214  000682  0E01               	movlw	1
 23215  000684  6F06               	movwf	(_occupiedMemory+6)& (0+255),b
 23216                           
 23217                           ;memoryController.c: 157: occupiedMemory[0].index = 0;
 23218  000686  0E00               	movlw	0
 23219  000688  6F08               	movwf	(_occupiedMemory+8)& (0+255),b
 23220                           
 23221                           ; BSR set to: 2
 23222                           ;memoryController.c: 158: return occupiedMemory[0];
 23223  00068A  EE22  F000         	lfsr	2,_occupiedMemory
 23224  00068E  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23225  000692  0E08               	movlw	8
 23226  000694                     u10191:
 23227  000694  CFDB FFEB          	movff	plusw2,plusw0
 23228  000698  06E8               	decf	wreg,f,c
 23229  00069A  E2FC               	bc	u10191
 23230                           
 23231                           ; BSR set to: 2
 23232  00069C  0012               	return	
 23233  00069E                     
 23234                           ;memoryController.c: 164: if (!occupiedMemory[freeIndex].fIsAssigned) {
 23235                           
 23236                           ; BSR set to: 2
 23237  00069E  0100               	movlb	0	; () banked
 23238  0006A0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23239  0006A2  0D09               	mullw	9
 23240  0006A4  0E06               	movlw	6
 23241  0006A6  26F3               	addwf	prodl,f,c
 23242  0006A8  0E00               	movlw	0
 23243  0006AA  22F4               	addwfc	prodh,f,c
 23244  0006AC  0E00               	movlw	low _occupiedMemory
 23245  0006AE  24F3               	addwf	prodl,w,c
 23246  0006B0  6ED9               	movwf	fsr2l,c
 23247  0006B2  0E02               	movlw	high _occupiedMemory
 23248  0006B4  20F4               	addwfc	prodh,w,c
 23249  0006B6  6EDA               	movwf	fsr2h,c
 23250  0006B8  50DF               	movf	indf2,w,c
 23251  0006BA  A4D8               	btfss	status,2,c
 23252  0006BC  D1EB               	goto	l490
 23253                           
 23254                           ; BSR set to: 0
 23255                           ;memoryController.c: 168: occupiedMemory[freeIndex].start = occupiedMemory[(freeIndex ==
      +                           0) ? 8 - 1 : freeIndex - 1].end + 1;
 23256  0006BE  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23257  0006C0  B4D8               	btfsc	status,2,c
 23258  0006C2  D007               	goto	l474
 23259                           
 23260                           ; BSR set to: 0
 23261  0006C4  0EFF               	movlw	255
 23262  0006C6  25A1               	addwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23263  0006C8  6F93               	movwf	_memory_txFrameRequest$1179& (0+255),b
 23264  0006CA  6B94               	clrf	(_memory_txFrameRequest$1179+1)& (0+255),b
 23265  0006CC  0EFF               	movlw	255
 23266  0006CE  2394               	addwfc	(_memory_txFrameRequest$1179+1)& (0+255),f,b
 23267  0006D0  D004               	goto	l476
 23268  0006D2                     l474:
 23269                           
 23270                           ; BSR set to: 0
 23271                           
 23272                           ; BSR set to: 0
 23273  0006D2  0E00               	movlw	0
 23274  0006D4  6F94               	movwf	(_memory_txFrameRequest$1179+1)& (0+255),b
 23275  0006D6  0E07               	movlw	7
 23276  0006D8  6F93               	movwf	_memory_txFrameRequest$1179& (0+255),b
 23277  0006DA                     l476:
 23278                           
 23279                           ; BSR set to: 0
 23280                           
 23281                           ; BSR set to: 0
 23282  0006DA  C093  F060         	movff	_memory_txFrameRequest$1179,___wmul@multiplier
 23283  0006DE  C094  F061         	movff	_memory_txFrameRequest$1179+1,___wmul@multiplier+1
 23284  0006E2  0E00               	movlw	0
 23285  0006E4  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 23286  0006E6  0E09               	movlw	9
 23287  0006E8  6F62               	movwf	___wmul@multiplicand& (0+255),b
 23288  0006EA  ECD9  F02F         	call	___wmul	;wreg free
 23289  0006EE  0E02               	movlw	2
 23290  0006F0  0100               	movlb	0	; () banked
 23291  0006F2  2760               	addwf	?___wmul& (0+255),f,b
 23292  0006F4  0E00               	movlw	0
 23293  0006F6  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 23294  0006F8  0E00               	movlw	low _occupiedMemory
 23295  0006FA  2560               	addwf	?___wmul& (0+255),w,b
 23296  0006FC  6ED9               	movwf	fsr2l,c
 23297  0006FE  0E02               	movlw	high _occupiedMemory
 23298  000700  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 23299  000702  6EDA               	movwf	fsr2h,c
 23300  000704  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 23301  000708  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 23302  00070C  0E01               	movlw	1
 23303  00070E  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 23304  000710  0E00               	movlw	0
 23305  000712  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 23306  000714  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23307  000716  0D09               	mullw	9
 23308  000718  0E00               	movlw	low _occupiedMemory
 23309  00071A  24F3               	addwf	prodl,w,c
 23310  00071C  6ED9               	movwf	fsr2l,c
 23311  00071E  0E02               	movlw	high _occupiedMemory
 23312  000720  20F4               	addwfc	prodh,w,c
 23313  000722  6EDA               	movwf	fsr2h,c
 23314  000724  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 23315  000728  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 23316                           
 23317                           ; BSR set to: 0
 23318                           ;memoryController.c: 169: if (occupiedMemory[freeIndex].start + length > 0x3000) {
 23319  00072C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23320  00072E  0D09               	mullw	9
 23321  000730  0E00               	movlw	low _occupiedMemory
 23322  000732  24F3               	addwf	prodl,w,c
 23323  000734  6ED9               	movwf	fsr2l,c
 23324  000736  0E02               	movlw	high _occupiedMemory
 23325  000738  20F4               	addwfc	prodh,w,c
 23326  00073A  6EDA               	movwf	fsr2h,c
 23327  00073C  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 23328  000740  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 23329  000744  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 23330  000746  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 23331  000748  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 23332  00074A  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 23333  00074C  058D               	decf	??_memory_txFrameRequest& (0+255),w,b
 23334  00074E  0E30               	movlw	48
 23335  000750  598E               	subwfb	(??_memory_txFrameRequest+1)& (0+255),w,b
 23336  000752  A0D8               	btfss	status,0,c
 23337  000754  D0CF               	goto	l478
 23338                           
 23339                           ; BSR set to: 0
 23340                           ;memoryController.c: 170: if (freeIndex == 8 - 1 && !occupiedMemory[0].fIsAssigned) {
 23341  000756  0E07               	movlw	7
 23342  000758  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23343  00075A  A4D8               	btfss	status,2,c
 23344  00075C  D0CB               	goto	l478
 23345                           
 23346                           ; BSR set to: 0
 23347  00075E  0102               	movlb	2	; () banked
 23348  000760  5106               	movf	(_occupiedMemory+6)& (0+255),w,b
 23349  000762  A4D8               	btfss	status,2,c
 23350  000764  D0C7               	goto	l478
 23351                           
 23352                           ; BSR set to: 2
 23353                           ;memoryController.c: 171: occupiedMemory[freeIndex].length = length;
 23354  000766  0100               	movlb	0	; () banked
 23355  000768  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23356  00076A  0D09               	mullw	9
 23357  00076C  0E04               	movlw	4
 23358  00076E  26F3               	addwf	prodl,f,c
 23359  000770  0E00               	movlw	0
 23360  000772  22F4               	addwfc	prodh,f,c
 23361  000774  0E00               	movlw	low _occupiedMemory
 23362  000776  24F3               	addwf	prodl,w,c
 23363  000778  6ED9               	movwf	fsr2l,c
 23364  00077A  0E02               	movlw	high _occupiedMemory
 23365  00077C  20F4               	addwfc	prodh,w,c
 23366  00077E  6EDA               	movwf	fsr2h,c
 23367  000780  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 23368  000784  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 23369                           
 23370                           ;memoryController.c: 172: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].leng
      +                          th - ((0x3000 - 1) - occupiedMemory[freeIndex].start);
 23371  000788  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23372  00078A  0D09               	mullw	9
 23373  00078C  0E04               	movlw	4
 23374  00078E  26F3               	addwf	prodl,f,c
 23375  000790  0E00               	movlw	0
 23376  000792  22F4               	addwfc	prodh,f,c
 23377  000794  0E00               	movlw	low _occupiedMemory
 23378  000796  24F3               	addwf	prodl,w,c
 23379  000798  6ED9               	movwf	fsr2l,c
 23380  00079A  0E02               	movlw	high _occupiedMemory
 23381  00079C  20F4               	addwfc	prodh,w,c
 23382  00079E  6EDA               	movwf	fsr2h,c
 23383  0007A0  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 23384  0007A4  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 23385  0007A8  0EFF               	movlw	255
 23386  0007AA  6F8F               	movwf	(??_memory_txFrameRequest+2)& (0+255),b
 23387  0007AC  0E2F               	movlw	47
 23388  0007AE  6F90               	movwf	(??_memory_txFrameRequest+3)& (0+255),b
 23389  0007B0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23390  0007B2  0D09               	mullw	9
 23391  0007B4  0E00               	movlw	low _occupiedMemory
 23392  0007B6  24F3               	addwf	prodl,w,c
 23393  0007B8  6ED9               	movwf	fsr2l,c
 23394  0007BA  0E02               	movlw	high _occupiedMemory
 23395  0007BC  20F4               	addwfc	prodh,w,c
 23396  0007BE  6EDA               	movwf	fsr2h,c
 23397  0007C0  CFDE F091          	movff	postinc2,??_memory_txFrameRequest+4
 23398  0007C4  CFDD F092          	movff	postdec2,??_memory_txFrameRequest+5
 23399  0007C8  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 23400  0007CA  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 23401  0007CC  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 23402  0007CE  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 23403  0007D0  518F               	movf	(??_memory_txFrameRequest+2)& (0+255),w,b
 23404  0007D2  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 23405  0007D4  5190               	movf	(??_memory_txFrameRequest+3)& (0+255),w,b
 23406  0007D6  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 23407  0007D8  1F91               	comf	(??_memory_txFrameRequest+4)& (0+255),f,b
 23408  0007DA  1F92               	comf	(??_memory_txFrameRequest+5)& (0+255),f,b
 23409  0007DC  4B91               	infsnz	(??_memory_txFrameRequest+4)& (0+255),f,b
 23410  0007DE  2B92               	incf	(??_memory_txFrameRequest+5)& (0+255),f,b
 23411  0007E0  518D               	movf	??_memory_txFrameRequest& (0+255),w,b
 23412  0007E2  2791               	addwf	(??_memory_txFrameRequest+4)& (0+255),f,b
 23413  0007E4  518E               	movf	(??_memory_txFrameRequest+1)& (0+255),w,b
 23414  0007E6  2392               	addwfc	(??_memory_txFrameRequest+5)& (0+255),f,b
 23415  0007E8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23416  0007EA  0D09               	mullw	9
 23417  0007EC  0E02               	movlw	2
 23418  0007EE  26F3               	addwf	prodl,f,c
 23419  0007F0  0E00               	movlw	0
 23420  0007F2  22F4               	addwfc	prodh,f,c
 23421  0007F4  0E00               	movlw	low _occupiedMemory
 23422  0007F6  24F3               	addwf	prodl,w,c
 23423  0007F8  6ED9               	movwf	fsr2l,c
 23424  0007FA  0E02               	movlw	high _occupiedMemory
 23425  0007FC  20F4               	addwfc	prodh,w,c
 23426  0007FE  6EDA               	movwf	fsr2h,c
 23427  000800  C091  FFDE         	movff	??_memory_txFrameRequest+4,postinc2
 23428  000804  C092  FFDD         	movff	??_memory_txFrameRequest+5,postdec2
 23429                           
 23430                           ; BSR set to: 0
 23431                           ;memoryController.c: 173: for (uint8_t i = 0; i < 8; i++) {
 23432  000808  0E00               	movlw	0
 23433  00080A  6F96               	movwf	memory_txFrameRequest@i& (0+255),b
 23434  00080C                     l9205:
 23435                           
 23436                           ; BSR set to: 0
 23437  00080C  0E07               	movlw	7
 23438  00080E  6596               	cpfsgt	memory_txFrameRequest@i& (0+255),b
 23439  000810  D001               	goto	l479
 23440  000812  D044               	goto	u10320
 23441  000814                     l479:
 23442                           
 23443                           ; BSR set to: 0
 23444                           ;memoryController.c: 174: if (i == freeIndex)
 23445                           
 23446                           ; BSR set to: 0
 23447  000814  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23448  000816  1996               	xorwf	memory_txFrameRequest@i& (0+255),w,b
 23449  000818  B4D8               	btfsc	status,2,c
 23450  00081A  D03E               	goto	l483
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;memoryController.c: 176: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]) && occupiedMemory[i].fIsAssigned) {
 23454                           
 23455                           ; BSR set to: 0
 23456                           
 23457                           ; BSR set to: 0
 23458                           ;memoryController.c: 175: continue;
 23459  00081C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23460  00081E  0D09               	mullw	9
 23461  000820  0E00               	movlw	low _occupiedMemory
 23462  000822  24F3               	addwf	prodl,w,c
 23463  000824  6ED9               	movwf	fsr2l,c
 23464  000826  0E02               	movlw	high _occupiedMemory
 23465  000828  20F4               	addwfc	prodh,w,c
 23466  00082A  6EDA               	movwf	fsr2h,c
 23467  00082C  EE00  F072         	lfsr	0,checkForOverlap@a
 23468  000830  0E08               	movlw	8
 23469  000832                     u10271:
 23470  000832  CFDB FFEB          	movff	plusw2,plusw0
 23471  000836  06E8               	decf	wreg,f,c
 23472  000838  E2FC               	bc	u10271
 23473  00083A  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 23474  00083C  0D09               	mullw	9
 23475  00083E  0E00               	movlw	low _occupiedMemory
 23476  000840  24F3               	addwf	prodl,w,c
 23477  000842  6ED9               	movwf	fsr2l,c
 23478  000844  0E02               	movlw	high _occupiedMemory
 23479  000846  20F4               	addwfc	prodh,w,c
 23480  000848  6EDA               	movwf	fsr2h,c
 23481  00084A  EE00  F07B         	lfsr	0,checkForOverlap@b
 23482  00084E  0E08               	movlw	8
 23483  000850                     u10281:
 23484  000850  CFDB FFEB          	movff	plusw2,plusw0
 23485  000854  06E8               	decf	wreg,f,c
 23486  000856  E2FC               	bc	u10281
 23487  000858  EC41  F022         	call	_checkForOverlap	;wreg free
 23488  00085C  0100               	movlb	0	; () banked
 23489  00085E  A0D8               	btfss	status,0,c
 23490  000860  D01B               	goto	l483
 23491                           
 23492                           ; BSR set to: 0
 23493  000862  5196               	movf	memory_txFrameRequest@i& (0+255),w,b
 23494  000864  0D09               	mullw	9
 23495  000866  0E06               	movlw	6
 23496  000868  26F3               	addwf	prodl,f,c
 23497  00086A  0E00               	movlw	0
 23498  00086C  22F4               	addwfc	prodh,f,c
 23499  00086E  0E00               	movlw	low _occupiedMemory
 23500  000870  24F3               	addwf	prodl,w,c
 23501  000872  6ED9               	movwf	fsr2l,c
 23502  000874  0E02               	movlw	high _occupiedMemory
 23503  000876  20F4               	addwfc	prodh,w,c
 23504  000878  6EDA               	movwf	fsr2h,c
 23505  00087A  50DF               	movf	indf2,w,c
 23506  00087C  B4D8               	btfsc	status,2,c
 23507  00087E  D00C               	goto	l483
 23508                           
 23509                           ; BSR set to: 0
 23510                           ;memoryController.c: 178: field.fOutOfMemory = 1;
 23511  000880  0E01               	movlw	1
 23512  000882  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 23513                           
 23514                           ; BSR set to: 0
 23515                           ;memoryController.c: 179: return field;
 23516  000884  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23517  000888  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23518  00088C  0E08               	movlw	8
 23519  00088E                     u10311:
 23520  00088E  CFDB FFEB          	movff	plusw2,plusw0
 23521  000892  06E8               	decf	wreg,f,c
 23522  000894  E2FC               	bc	u10311
 23523                           
 23524                           ; BSR set to: 0
 23525  000896  0012               	return	
 23526  000898                     l483:
 23527                           
 23528                           ; BSR set to: 0
 23529                           
 23530                           ; BSR set to: 0
 23531                           
 23532                           ; BSR set to: 0
 23533  000898  2B96               	incf	memory_txFrameRequest@i& (0+255),f,b
 23534  00089A  D7B8               	goto	l9205
 23535  00089C                     u10320:
 23536                           
 23537                           ; BSR set to: 0
 23538                           ;memoryController.c: 180: }
 23539                           ;memoryController.c: 181: }
 23540                           ;memoryController.c: 182: occupiedMemory[freeIndex].fIsAssigned = 1;
 23541                           
 23542                           ; BSR set to: 0
 23543  00089C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23544  00089E  0D09               	mullw	9
 23545  0008A0  0E06               	movlw	6
 23546  0008A2  26F3               	addwf	prodl,f,c
 23547  0008A4  0E00               	movlw	0
 23548  0008A6  22F4               	addwfc	prodh,f,c
 23549  0008A8  0E00               	movlw	low _occupiedMemory
 23550  0008AA  24F3               	addwf	prodl,w,c
 23551  0008AC  6ED9               	movwf	fsr2l,c
 23552  0008AE  0E02               	movlw	high _occupiedMemory
 23553  0008B0  20F4               	addwfc	prodh,w,c
 23554  0008B2  6EDA               	movwf	fsr2h,c
 23555  0008B4  0E01               	movlw	1
 23556  0008B6  6EDF               	movwf	indf2,c
 23557                           
 23558                           ;memoryController.c: 183: occupiedMemory[freeIndex].index = freeIndex;
 23559  0008B8  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23560  0008BA  0D09               	mullw	9
 23561  0008BC  0E08               	movlw	8
 23562  0008BE  26F3               	addwf	prodl,f,c
 23563  0008C0  0E00               	movlw	0
 23564  0008C2  22F4               	addwfc	prodh,f,c
 23565  0008C4  0E00               	movlw	low _occupiedMemory
 23566  0008C6  24F3               	addwf	prodl,w,c
 23567  0008C8  6ED9               	movwf	fsr2l,c
 23568  0008CA  0E02               	movlw	high _occupiedMemory
 23569  0008CC  20F4               	addwfc	prodh,w,c
 23570  0008CE  6EDA               	movwf	fsr2h,c
 23571  0008D0  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 23572                           
 23573                           ; BSR set to: 0
 23574                           ;memoryController.c: 184: return occupiedMemory[freeIndex];
 23575  0008D4  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23576  0008D6  0D09               	mullw	9
 23577  0008D8  0E00               	movlw	low _occupiedMemory
 23578  0008DA  24F3               	addwf	prodl,w,c
 23579  0008DC  6ED9               	movwf	fsr2l,c
 23580  0008DE  0E02               	movlw	high _occupiedMemory
 23581  0008E0  20F4               	addwfc	prodh,w,c
 23582  0008E2  6EDA               	movwf	fsr2h,c
 23583  0008E4  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23584  0008E8  0E08               	movlw	8
 23585  0008EA                     u10331:
 23586  0008EA  CFDB FFEB          	movff	plusw2,plusw0
 23587  0008EE  06E8               	decf	wreg,f,c
 23588  0008F0  E2FC               	bc	u10331
 23589                           
 23590                           ; BSR set to: 0
 23591  0008F2  0012               	return	
 23592  0008F4                     l478:
 23593                           
 23594                           ;memoryController.c: 185: }
 23595                           ;memoryController.c: 186: }
 23596                           ;memoryController.c: 188: uint8_t fNoOverlapMarker = 1;
 23597                           
 23598                           ; BSR set to: 0
 23599                           
 23600                           ; BSR set to: 0
 23601  0008F4  0E01               	movlw	1
 23602  0008F6  0100               	movlb	0	; () banked
 23603  0008F8  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 23604                           
 23605                           ; BSR set to: 0
 23606                           ;memoryController.c: 189: uint8_t i;
 23607                           ;memoryController.c: 190: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 23608  0008FA  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23609  0008FC  0D09               	mullw	9
 23610  0008FE  0E00               	movlw	low _occupiedMemory
 23611  000900  24F3               	addwf	prodl,w,c
 23612  000902  6ED9               	movwf	fsr2l,c
 23613  000904  0E02               	movlw	high _occupiedMemory
 23614  000906  20F4               	addwfc	prodh,w,c
 23615  000908  6EDA               	movwf	fsr2h,c
 23616  00090A  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 23617  00090E  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 23618  000912  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 23619  000914  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 23620  000916  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 23621  000918  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 23622  00091A  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23623  00091C  0D09               	mullw	9
 23624  00091E  0E02               	movlw	2
 23625  000920  26F3               	addwf	prodl,f,c
 23626  000922  0E00               	movlw	0
 23627  000924  22F4               	addwfc	prodh,f,c
 23628  000926  0E00               	movlw	low _occupiedMemory
 23629  000928  24F3               	addwf	prodl,w,c
 23630  00092A  6ED9               	movwf	fsr2l,c
 23631  00092C  0E02               	movlw	high _occupiedMemory
 23632  00092E  20F4               	addwfc	prodh,w,c
 23633  000930  6EDA               	movwf	fsr2h,c
 23634  000932  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 23635  000936  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 23636                           
 23637                           ; BSR set to: 0
 23638                           ;memoryController.c: 191: for (i = 0; i < 8; i++) {
 23639  00093A  0E00               	movlw	0
 23640  00093C  6F97               	movwf	memory_txFrameRequest@i_1183& (0+255),b
 23641  00093E                     l9239:
 23642                           
 23643                           ; BSR set to: 0
 23644  00093E  0E07               	movlw	7
 23645  000940  6597               	cpfsgt	memory_txFrameRequest@i_1183& (0+255),b
 23646  000942  D001               	goto	l484
 23647  000944  D03A               	goto	u10400
 23648  000946                     l484:
 23649                           
 23650                           ; BSR set to: 0
 23651                           ;memoryController.c: 192: if (i == freeIndex)
 23652                           
 23653                           ; BSR set to: 0
 23654  000946  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23655  000948  1997               	xorwf	memory_txFrameRequest@i_1183& (0+255),w,b
 23656  00094A  B4D8               	btfsc	status,2,c
 23657  00094C  D034               	goto	l489
 23658                           
 23659                           ; BSR set to: 0
 23660                           ;memoryController.c: 194: if (!occupiedMemory[i].fIsAssigned) {
 23661                           
 23662                           ; BSR set to: 0
 23663                           
 23664                           ; BSR set to: 0
 23665                           ;memoryController.c: 193: continue;
 23666  00094E  5197               	movf	memory_txFrameRequest@i_1183& (0+255),w,b
 23667  000950  0D09               	mullw	9
 23668  000952  0E06               	movlw	6
 23669  000954  26F3               	addwf	prodl,f,c
 23670  000956  0E00               	movlw	0
 23671  000958  22F4               	addwfc	prodh,f,c
 23672  00095A  0E00               	movlw	low _occupiedMemory
 23673  00095C  24F3               	addwf	prodl,w,c
 23674  00095E  6ED9               	movwf	fsr2l,c
 23675  000960  0E02               	movlw	high _occupiedMemory
 23676  000962  20F4               	addwfc	prodh,w,c
 23677  000964  6EDA               	movwf	fsr2h,c
 23678  000966  50DF               	movf	indf2,w,c
 23679  000968  B4D8               	btfsc	status,2,c
 23680  00096A  D025               	goto	l489
 23681                           
 23682                           ; BSR set to: 0
 23683                           ;memoryController.c: 197: }
 23684                           ;memoryController.c: 199: if (checkForOverlap(occupiedMemory[freeIndex], occupiedMemory[
      +                          i]))
 23685                           
 23686                           ; BSR set to: 0
 23687                           
 23688                           ; BSR set to: 0
 23689                           ;memoryController.c: 195: continue;
 23690  00096C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23691  00096E  0D09               	mullw	9
 23692  000970  0E00               	movlw	low _occupiedMemory
 23693  000972  24F3               	addwf	prodl,w,c
 23694  000974  6ED9               	movwf	fsr2l,c
 23695  000976  0E02               	movlw	high _occupiedMemory
 23696  000978  20F4               	addwfc	prodh,w,c
 23697  00097A  6EDA               	movwf	fsr2h,c
 23698  00097C  EE00  F072         	lfsr	0,checkForOverlap@a
 23699  000980  0E08               	movlw	8
 23700  000982                     u10371:
 23701  000982  CFDB FFEB          	movff	plusw2,plusw0
 23702  000986  06E8               	decf	wreg,f,c
 23703  000988  E2FC               	bc	u10371
 23704  00098A  5197               	movf	memory_txFrameRequest@i_1183& (0+255),w,b
 23705  00098C  0D09               	mullw	9
 23706  00098E  0E00               	movlw	low _occupiedMemory
 23707  000990  24F3               	addwf	prodl,w,c
 23708  000992  6ED9               	movwf	fsr2l,c
 23709  000994  0E02               	movlw	high _occupiedMemory
 23710  000996  20F4               	addwfc	prodh,w,c
 23711  000998  6EDA               	movwf	fsr2h,c
 23712  00099A  EE00  F07B         	lfsr	0,checkForOverlap@b
 23713  00099E  0E08               	movlw	8
 23714  0009A0                     u10381:
 23715  0009A0  CFDB FFEB          	movff	plusw2,plusw0
 23716  0009A4  06E8               	decf	wreg,f,c
 23717  0009A6  E2FC               	bc	u10381
 23718  0009A8  EC41  F022         	call	_checkForOverlap	;wreg free
 23719  0009AC  0100               	movlb	0	; () banked
 23720  0009AE  A0D8               	btfss	status,0,c
 23721  0009B0  D002               	goto	l489
 23722                           
 23723                           ; BSR set to: 0
 23724                           ;memoryController.c: 200: fNoOverlapMarker = 0;
 23725  0009B2  0E00               	movlw	0
 23726  0009B4  6F95               	movwf	memory_txFrameRequest@fNoOverlapMarker& (0+255),b
 23727  0009B6                     l489:
 23728                           
 23729                           ; BSR set to: 0
 23730                           
 23731                           ; BSR set to: 0
 23732                           
 23733                           ; BSR set to: 0
 23734  0009B6  2B97               	incf	memory_txFrameRequest@i_1183& (0+255),f,b
 23735  0009B8  D7C2               	goto	l9239
 23736  0009BA                     u10400:
 23737                           
 23738                           ; BSR set to: 0
 23739                           ;memoryController.c: 202: }
 23740                           ;memoryController.c: 203: if (fNoOverlapMarker) {
 23741                           
 23742                           ; BSR set to: 0
 23743  0009BA  5195               	movf	memory_txFrameRequest@fNoOverlapMarker& (0+255),w,b
 23744  0009BC  B4D8               	btfsc	status,2,c
 23745  0009BE  D06A               	goto	l490
 23746                           
 23747                           ; BSR set to: 0
 23748                           ;memoryController.c: 204: occupiedMemory[freeIndex].fIsAssigned = 1;
 23749  0009C0  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23750  0009C2  0D09               	mullw	9
 23751  0009C4  0E06               	movlw	6
 23752  0009C6  26F3               	addwf	prodl,f,c
 23753  0009C8  0E00               	movlw	0
 23754  0009CA  22F4               	addwfc	prodh,f,c
 23755  0009CC  0E00               	movlw	low _occupiedMemory
 23756  0009CE  24F3               	addwf	prodl,w,c
 23757  0009D0  6ED9               	movwf	fsr2l,c
 23758  0009D2  0E02               	movlw	high _occupiedMemory
 23759  0009D4  20F4               	addwfc	prodh,w,c
 23760  0009D6  6EDA               	movwf	fsr2h,c
 23761  0009D8  0E01               	movlw	1
 23762  0009DA  6EDF               	movwf	indf2,c
 23763                           
 23764                           ;memoryController.c: 205: occupiedMemory[freeIndex].end = occupiedMemory[freeIndex].star
      +                          t + length;
 23765  0009DC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23766  0009DE  0D09               	mullw	9
 23767  0009E0  0E00               	movlw	low _occupiedMemory
 23768  0009E2  24F3               	addwf	prodl,w,c
 23769  0009E4  6ED9               	movwf	fsr2l,c
 23770  0009E6  0E02               	movlw	high _occupiedMemory
 23771  0009E8  20F4               	addwfc	prodh,w,c
 23772  0009EA  6EDA               	movwf	fsr2h,c
 23773  0009EC  CFDE F08D          	movff	postinc2,??_memory_txFrameRequest
 23774  0009F0  CFDD F08E          	movff	postdec2,??_memory_txFrameRequest+1
 23775  0009F4  5184               	movf	memory_txFrameRequest@length& (0+255),w,b
 23776  0009F6  278D               	addwf	??_memory_txFrameRequest& (0+255),f,b
 23777  0009F8  5185               	movf	(memory_txFrameRequest@length+1)& (0+255),w,b
 23778  0009FA  238E               	addwfc	(??_memory_txFrameRequest+1)& (0+255),f,b
 23779  0009FC  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23780  0009FE  0D09               	mullw	9
 23781  000A00  0E02               	movlw	2
 23782  000A02  26F3               	addwf	prodl,f,c
 23783  000A04  0E00               	movlw	0
 23784  000A06  22F4               	addwfc	prodh,f,c
 23785  000A08  0E00               	movlw	low _occupiedMemory
 23786  000A0A  24F3               	addwf	prodl,w,c
 23787  000A0C  6ED9               	movwf	fsr2l,c
 23788  000A0E  0E02               	movlw	high _occupiedMemory
 23789  000A10  20F4               	addwfc	prodh,w,c
 23790  000A12  6EDA               	movwf	fsr2h,c
 23791  000A14  C08D  FFDE         	movff	??_memory_txFrameRequest,postinc2
 23792  000A18  C08E  FFDD         	movff	??_memory_txFrameRequest+1,postdec2
 23793                           
 23794                           ;memoryController.c: 206: occupiedMemory[freeIndex].fOutOfMemory = 0;
 23795  000A1C  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23796  000A1E  0D09               	mullw	9
 23797  000A20  0E07               	movlw	7
 23798  000A22  26F3               	addwf	prodl,f,c
 23799  000A24  0E00               	movlw	0
 23800  000A26  22F4               	addwfc	prodh,f,c
 23801  000A28  0E00               	movlw	low _occupiedMemory
 23802  000A2A  24F3               	addwf	prodl,w,c
 23803  000A2C  6ED9               	movwf	fsr2l,c
 23804  000A2E  0E02               	movlw	high _occupiedMemory
 23805  000A30  20F4               	addwfc	prodh,w,c
 23806  000A32  6EDA               	movwf	fsr2h,c
 23807  000A34  0E00               	movlw	0
 23808  000A36  6EDF               	movwf	indf2,c
 23809                           
 23810                           ;memoryController.c: 207: occupiedMemory[freeIndex].length = length;
 23811  000A38  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23812  000A3A  0D09               	mullw	9
 23813  000A3C  0E04               	movlw	4
 23814  000A3E  26F3               	addwf	prodl,f,c
 23815  000A40  0E00               	movlw	0
 23816  000A42  22F4               	addwfc	prodh,f,c
 23817  000A44  0E00               	movlw	low _occupiedMemory
 23818  000A46  24F3               	addwf	prodl,w,c
 23819  000A48  6ED9               	movwf	fsr2l,c
 23820  000A4A  0E02               	movlw	high _occupiedMemory
 23821  000A4C  20F4               	addwfc	prodh,w,c
 23822  000A4E  6EDA               	movwf	fsr2h,c
 23823  000A50  C084  FFDE         	movff	memory_txFrameRequest@length,postinc2
 23824  000A54  C085  FFDD         	movff	memory_txFrameRequest@length+1,postdec2
 23825                           
 23826                           ;memoryController.c: 208: occupiedMemory[freeIndex].index = freeIndex;
 23827  000A58  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23828  000A5A  0D09               	mullw	9
 23829  000A5C  0E08               	movlw	8
 23830  000A5E  26F3               	addwf	prodl,f,c
 23831  000A60  0E00               	movlw	0
 23832  000A62  22F4               	addwfc	prodh,f,c
 23833  000A64  0E00               	movlw	low _occupiedMemory
 23834  000A66  24F3               	addwf	prodl,w,c
 23835  000A68  6ED9               	movwf	fsr2l,c
 23836  000A6A  0E02               	movlw	high _occupiedMemory
 23837  000A6C  20F4               	addwfc	prodh,w,c
 23838  000A6E  6EDA               	movwf	fsr2h,c
 23839  000A70  C0A1  FFDF         	movff	memory_txFrameRequest@freeIndex,indf2
 23840                           
 23841                           ; BSR set to: 0
 23842                           ;memoryController.c: 209: return occupiedMemory[freeIndex];
 23843  000A74  51A1               	movf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23844  000A76  0D09               	mullw	9
 23845  000A78  0E00               	movlw	low _occupiedMemory
 23846  000A7A  24F3               	addwf	prodl,w,c
 23847  000A7C  6ED9               	movwf	fsr2l,c
 23848  000A7E  0E02               	movlw	high _occupiedMemory
 23849  000A80  20F4               	addwfc	prodh,w,c
 23850  000A82  6EDA               	movwf	fsr2h,c
 23851  000A84  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23852  000A88  0E08               	movlw	8
 23853  000A8A                     u10421:
 23854  000A8A  CFDB FFEB          	movff	plusw2,plusw0
 23855  000A8E  06E8               	decf	wreg,f,c
 23856  000A90  E2FC               	bc	u10421
 23857                           
 23858                           ; BSR set to: 0
 23859  000A92  0012               	return	
 23860  000A94                     l490:
 23861                           
 23862                           ; BSR set to: 0
 23863                           ;memoryController.c: 210: }
 23864                           ;memoryController.c: 211: }
 23865                           ;memoryController.c: 212: freeIndex++;
 23866                           
 23867                           ; BSR set to: 0
 23868                           
 23869                           ; BSR set to: 0
 23870  000A94  2BA1               	incf	memory_txFrameRequest@freeIndex& (0+255),f,b
 23871                           
 23872                           ; BSR set to: 0
 23873                           ;memoryController.c: 213: if (freeIndex == 8) {
 23874  000A96  0E08               	movlw	8
 23875  000A98  19A1               	xorwf	memory_txFrameRequest@freeIndex& (0+255),w,b
 23876  000A9A  A4D8               	btfss	status,2,c
 23877  000A9C  D00C               	goto	l491
 23878                           
 23879                           ; BSR set to: 0
 23880                           ;memoryController.c: 215: field.fOutOfMemory = 1;
 23881  000A9E  0E01               	movlw	1
 23882  000AA0  6F9F               	movwf	(memory_txFrameRequest@field+7)& (0+255),b
 23883                           
 23884                           ; BSR set to: 0
 23885                           ;memoryController.c: 216: return field;
 23886  000AA2  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23887  000AA6  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23888  000AAA  0E08               	movlw	8
 23889  000AAC                     u10441:
 23890  000AAC  CFDB FFEB          	movff	plusw2,plusw0
 23891  000AB0  06E8               	decf	wreg,f,c
 23892  000AB2  E2FC               	bc	u10441
 23893                           
 23894                           ; BSR set to: 0
 23895  000AB4  0012               	return	
 23896  000AB6                     l491:
 23897                           
 23898                           ; BSR set to: 0
 23899                           
 23900                           ; BSR set to: 0
 23901  000AB6  0E08               	movlw	8
 23902  000AB8  0100               	movlb	0	; () banked
 23903  000ABA  65A1               	cpfsgt	memory_txFrameRequest@freeIndex& (0+255),b
 23904  000ABC  D5F0               	goto	l471
 23905                           
 23906                           ; BSR set to: 0
 23907                           ;memoryController.c: 217: }
 23908                           ;memoryController.c: 218: }
 23909                           ;memoryController.c: 219: return field;
 23910                           
 23911                           ; BSR set to: 0
 23912  000ABE  EE20  F098         	lfsr	2,memory_txFrameRequest@field
 23913  000AC2  EE00  F084         	lfsr	0,?_memory_txFrameRequest
 23914  000AC6  0E08               	movlw	8
 23915  000AC8                     u10461:
 23916  000AC8  CFDB FFEB          	movff	plusw2,plusw0
 23917  000ACC  06E8               	decf	wreg,f,c
 23918  000ACE  E2FC               	bc	u10461
 23919  000AD0  0012               	return	
 23920  000AD2                     __end_of_memory_txFrameRequest:
 23921                           	opt stack 0
 23922                           tblptru	equ	0xFF8
 23923                           tblptrh	equ	0xFF7
 23924                           tblptrl	equ	0xFF6
 23925                           tablat	equ	0xFF5
 23926                           prodh	equ	0xFF4
 23927                           prodl	equ	0xFF3
 23928                           intcon	equ	0xFF2
 23929                           intcon3	equ	0xFF0
 23930                           indf0	equ	0xFEF
 23931                           postinc0	equ	0xFEE
 23932                           plusw0	equ	0xFEB
 23933                           fsr0h	equ	0xFEA
 23934                           fsr0l	equ	0xFE9
 23935                           wreg	equ	0xFE8
 23936                           indf1	equ	0xFE7
 23937                           postinc1	equ	0xFE6
 23938                           postdec1	equ	0xFE5
 23939                           plusw1	equ	0xFE3
 23940                           fsr1h	equ	0xFE2
 23941                           fsr1l	equ	0xFE1
 23942                           indf2	equ	0xFDF
 23943                           postinc2	equ	0xFDE
 23944                           postdec2	equ	0xFDD
 23945                           plusw2	equ	0xFDB
 23946                           fsr2h	equ	0xFDA
 23947                           fsr2l	equ	0xFD9
 23948                           status	equ	0xFD8
 23949                           
 23950 ;; *************** function _entireMemoryFull *****************
 23951 ;; Defined at:
 23952 ;;		line 46 in file "src/mem/memoryController.c"
 23953 ;; Parameters:    Size  Location     Type
 23954 ;;		None
 23955 ;; Auto vars:     Size  Location     Type
 23956 ;;  i               1    0[BANK0 ] unsigned char 
 23957 ;; Return value:  Size  Location     Type
 23958 ;;		None               void
 23959 ;; Registers used:
 23960 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23961 ;; Tracked objects:
 23962 ;;		On entry : 0/0
 23963 ;;		On exit  : 0/0
 23964 ;;		Unchanged: 0/0
 23965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 23966 ;;      Params:         0       0       0       0       0       0       0       0       0
 23967 ;;      Locals:         0       1       0       0       0       0       0       0       0
 23968 ;;      Temps:          0       0       0       0       0       0       0       0       0
 23969 ;;      Totals:         0       1       0       0       0       0       0       0       0
 23970 ;;Total ram usage:        1 bytes
 23971 ;; Hardware stack levels used:    1
 23972 ;; Hardware stack levels required when called:    4
 23973 ;; This function calls:
 23974 ;;		Nothing
 23975 ;; This function is called by:
 23976 ;;		_memory_txFrameRequest
 23977 ;; This function uses a non-reentrant model
 23978 ;;
 23979                           
 23980                           	psect	text89
 23981  005D12                     __ptext89:
 23982                           	opt stack 0
 23983  005D12                     _entireMemoryFull:
 23984                           	opt stack 23
 23985                           
 23986                           ;memoryController.c: 47: for (uint8_t i = 0; i < 8; i++) {
 23987                           
 23988                           ;incstack = 0
 23989  005D12  0E00               	movlw	0
 23990  005D14  0100               	movlb	0	; () banked
 23991  005D16  6F60               	movwf	entireMemoryFull@i& (0+255),b
 23992  005D18                     l8999:
 23993                           
 23994                           ; BSR set to: 0
 23995  005D18  0E07               	movlw	7
 23996  005D1A  6560               	cpfsgt	entireMemoryFull@i& (0+255),b
 23997  005D1C  D001               	goto	l420
 23998  005D1E  D013               	goto	u9880
 23999  005D20                     l420:
 24000                           
 24001                           ; BSR set to: 0
 24002                           ;memoryController.c: 48: if (!occupiedMemory[i].fIsAssigned)
 24003                           
 24004                           ; BSR set to: 0
 24005  005D20  5160               	movf	entireMemoryFull@i& (0+255),w,b
 24006  005D22  0D09               	mullw	9
 24007  005D24  0E06               	movlw	6
 24008  005D26  26F3               	addwf	prodl,f,c
 24009  005D28  0E00               	movlw	0
 24010  005D2A  22F4               	addwfc	prodh,f,c
 24011  005D2C  0E00               	movlw	low _occupiedMemory
 24012  005D2E  24F3               	addwf	prodl,w,c
 24013  005D30  6ED9               	movwf	fsr2l,c
 24014  005D32  0E02               	movlw	high _occupiedMemory
 24015  005D34  20F4               	addwfc	prodh,w,c
 24016  005D36  6EDA               	movwf	fsr2h,c
 24017  005D38  50DF               	movf	indf2,w,c
 24018  005D3A  A4D8               	btfss	status,2,c
 24019  005D3C  D002               	goto	l422
 24020                           
 24021                           ; BSR set to: 0
 24022                           ;memoryController.c: 49: return 0;
 24023  005D3E  90D8               	bcf	status,0,c
 24024                           
 24025                           ; BSR set to: 0
 24026  005D40  0012               	return	
 24027  005D42                     l422:
 24028                           
 24029                           ; BSR set to: 0
 24030                           
 24031                           ; BSR set to: 0
 24032  005D42  2B60               	incf	entireMemoryFull@i& (0+255),f,b
 24033  005D44  D7E9               	goto	l8999
 24034  005D46                     u9880:
 24035                           
 24036                           ; BSR set to: 0
 24037                           ;memoryController.c: 50: }
 24038                           ;memoryController.c: 51: return 1;
 24039                           
 24040                           ; BSR set to: 0
 24041  005D46  80D8               	bsf	status,0,c
 24042  005D48  0012               	return	
 24043  005D4A                     __end_of_entireMemoryFull:
 24044                           	opt stack 0
 24045                           tblptru	equ	0xFF8
 24046                           tblptrh	equ	0xFF7
 24047                           tblptrl	equ	0xFF6
 24048                           tablat	equ	0xFF5
 24049                           prodh	equ	0xFF4
 24050                           prodl	equ	0xFF3
 24051                           intcon	equ	0xFF2
 24052                           intcon3	equ	0xFF0
 24053                           indf0	equ	0xFEF
 24054                           postinc0	equ	0xFEE
 24055                           plusw0	equ	0xFEB
 24056                           fsr0h	equ	0xFEA
 24057                           fsr0l	equ	0xFE9
 24058                           wreg	equ	0xFE8
 24059                           indf1	equ	0xFE7
 24060                           postinc1	equ	0xFE6
 24061                           postdec1	equ	0xFE5
 24062                           plusw1	equ	0xFE3
 24063                           fsr1h	equ	0xFE2
 24064                           fsr1l	equ	0xFE1
 24065                           indf2	equ	0xFDF
 24066                           postinc2	equ	0xFDE
 24067                           postdec2	equ	0xFDD
 24068                           plusw2	equ	0xFDB
 24069                           fsr2h	equ	0xFDA
 24070                           fsr2l	equ	0xFD9
 24071                           status	equ	0xFD8
 24072                           
 24073 ;; *************** function _entireMemoryEmpty *****************
 24074 ;; Defined at:
 24075 ;;		line 38 in file "src/mem/memoryController.c"
 24076 ;; Parameters:    Size  Location     Type
 24077 ;;		None
 24078 ;; Auto vars:     Size  Location     Type
 24079 ;;  i               1    0[BANK0 ] unsigned char 
 24080 ;; Return value:  Size  Location     Type
 24081 ;;		None               void
 24082 ;; Registers used:
 24083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 24084 ;; Tracked objects:
 24085 ;;		On entry : 0/0
 24086 ;;		On exit  : 0/0
 24087 ;;		Unchanged: 0/0
 24088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24089 ;;      Params:         0       0       0       0       0       0       0       0       0
 24090 ;;      Locals:         0       1       0       0       0       0       0       0       0
 24091 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24092 ;;      Totals:         0       1       0       0       0       0       0       0       0
 24093 ;;Total ram usage:        1 bytes
 24094 ;; Hardware stack levels used:    1
 24095 ;; Hardware stack levels required when called:    4
 24096 ;; This function calls:
 24097 ;;		Nothing
 24098 ;; This function is called by:
 24099 ;;		_memory_txFrameRequest
 24100 ;; This function uses a non-reentrant model
 24101 ;;
 24102                           
 24103                           	psect	text90
 24104  005D4A                     __ptext90:
 24105                           	opt stack 0
 24106  005D4A                     _entireMemoryEmpty:
 24107                           	opt stack 23
 24108                           
 24109                           ;memoryController.c: 39: for (uint8_t i = 0; i < 8; i++) {
 24110                           
 24111                           ; BSR set to: 0
 24112                           ;incstack = 0
 24113  005D4A  0E00               	movlw	0
 24114  005D4C  0100               	movlb	0	; () banked
 24115  005D4E  6F60               	movwf	entireMemoryEmpty@i& (0+255),b
 24116  005D50                     l8979:
 24117                           
 24118                           ; BSR set to: 0
 24119  005D50  0E07               	movlw	7
 24120  005D52  6560               	cpfsgt	entireMemoryEmpty@i& (0+255),b
 24121  005D54  D001               	goto	l414
 24122  005D56  D013               	goto	u9850
 24123  005D58                     l414:
 24124                           
 24125                           ; BSR set to: 0
 24126                           ;memoryController.c: 40: if (occupiedMemory[i].fIsAssigned)
 24127                           
 24128                           ; BSR set to: 0
 24129  005D58  5160               	movf	entireMemoryEmpty@i& (0+255),w,b
 24130  005D5A  0D09               	mullw	9
 24131  005D5C  0E06               	movlw	6
 24132  005D5E  26F3               	addwf	prodl,f,c
 24133  005D60  0E00               	movlw	0
 24134  005D62  22F4               	addwfc	prodh,f,c
 24135  005D64  0E00               	movlw	low _occupiedMemory
 24136  005D66  24F3               	addwf	prodl,w,c
 24137  005D68  6ED9               	movwf	fsr2l,c
 24138  005D6A  0E02               	movlw	high _occupiedMemory
 24139  005D6C  20F4               	addwfc	prodh,w,c
 24140  005D6E  6EDA               	movwf	fsr2h,c
 24141  005D70  50DF               	movf	indf2,w,c
 24142  005D72  B4D8               	btfsc	status,2,c
 24143  005D74  D002               	goto	l416
 24144                           
 24145                           ; BSR set to: 0
 24146                           ;memoryController.c: 41: return 0;
 24147  005D76  90D8               	bcf	status,0,c
 24148                           
 24149                           ; BSR set to: 0
 24150  005D78  0012               	return	
 24151  005D7A                     l416:
 24152                           
 24153                           ; BSR set to: 0
 24154                           
 24155                           ; BSR set to: 0
 24156  005D7A  2B60               	incf	entireMemoryEmpty@i& (0+255),f,b
 24157  005D7C  D7E9               	goto	l8979
 24158  005D7E                     u9850:
 24159                           
 24160                           ; BSR set to: 0
 24161                           ;memoryController.c: 42: }
 24162                           ;memoryController.c: 43: return 1;
 24163                           
 24164                           ; BSR set to: 0
 24165  005D7E  80D8               	bsf	status,0,c
 24166  005D80  0012               	return	
 24167  005D82                     __end_of_entireMemoryEmpty:
 24168                           	opt stack 0
 24169                           tblptru	equ	0xFF8
 24170                           tblptrh	equ	0xFF7
 24171                           tblptrl	equ	0xFF6
 24172                           tablat	equ	0xFF5
 24173                           prodh	equ	0xFF4
 24174                           prodl	equ	0xFF3
 24175                           intcon	equ	0xFF2
 24176                           intcon3	equ	0xFF0
 24177                           indf0	equ	0xFEF
 24178                           postinc0	equ	0xFEE
 24179                           plusw0	equ	0xFEB
 24180                           fsr0h	equ	0xFEA
 24181                           fsr0l	equ	0xFE9
 24182                           wreg	equ	0xFE8
 24183                           indf1	equ	0xFE7
 24184                           postinc1	equ	0xFE6
 24185                           postdec1	equ	0xFE5
 24186                           plusw1	equ	0xFE3
 24187                           fsr1h	equ	0xFE2
 24188                           fsr1l	equ	0xFE1
 24189                           indf2	equ	0xFDF
 24190                           postinc2	equ	0xFDE
 24191                           postdec2	equ	0xFDD
 24192                           plusw2	equ	0xFDB
 24193                           fsr2h	equ	0xFDA
 24194                           fsr2l	equ	0xFD9
 24195                           status	equ	0xFD8
 24196                           
 24197 ;; *************** function _checkForOverlap *****************
 24198 ;; Defined at:
 24199 ;;		line 64 in file "src/mem/memoryController.c"
 24200 ;; Parameters:    Size  Location     Type
 24201 ;;  a               9   18[BANK0 ] struct memoryField
 24202 ;;  b               9   27[BANK0 ] struct memoryField
 24203 ;; Auto vars:     Size  Location     Type
 24204 ;;		None
 24205 ;; Return value:  Size  Location     Type
 24206 ;;		None               void
 24207 ;; Registers used:
 24208 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, cstack
 24209 ;; Tracked objects:
 24210 ;;		On entry : 0/0
 24211 ;;		On exit  : 0/0
 24212 ;;		Unchanged: 0/0
 24213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24214 ;;      Params:         0      18       0       0       0       0       0       0       0
 24215 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24216 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24217 ;;      Totals:         0      18       0       0       0       0       0       0       0
 24218 ;;Total ram usage:       18 bytes
 24219 ;; Hardware stack levels used:    1
 24220 ;; Hardware stack levels required when called:    5
 24221 ;; This function calls:
 24222 ;;		_checkForOverlapSwitched
 24223 ;; This function is called by:
 24224 ;;		_memory_txFrameRequest
 24225 ;; This function uses a non-reentrant model
 24226 ;;
 24227                           
 24228                           	psect	text91
 24229  004482                     __ptext91:
 24230                           	opt stack 0
 24231  004482                     _checkForOverlap:
 24232                           	opt stack 22
 24233                           
 24234                           ;memoryController.c: 65: if ((a.start == b.start) ||
 24235                           ;memoryController.c: 66: (a.end == b.end) ||
 24236                           ;memoryController.c: 67: (a.start == b.end) ||
 24237                           ;memoryController.c: 68: (a.end == b.start) ||
 24238                           ;memoryController.c: 69: (a.end > 0x3000) ||
 24239                           ;memoryController.c: 70: (a.start > 0x3000) ||
 24240                           ;memoryController.c: 71: (b.end > 0x3000) ||
 24241                           ;memoryController.c: 72: (b.start > 0x3000))
 24242                           
 24243                           ; BSR set to: 0
 24244                           ;incstack = 0
 24245  004482  0100               	movlb	0	; () banked
 24246  004484  517B               	movf	checkForOverlap@b& (0+255),w,b
 24247  004486  1972               	xorwf	checkForOverlap@a& (0+255),w,b
 24248  004488  E104               	bnz	u9890
 24249  00448A  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 24250  00448C  1973               	xorwf	(checkForOverlap@a+1)& (0+255),w,b
 24251  00448E  B4D8               	btfsc	status,2,c
 24252  004490  D029               	goto	u9960
 24253  004492                     u9890:
 24254                           
 24255                           ; BSR set to: 0
 24256  004492  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 24257  004494  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 24258  004496  E104               	bnz	u9900
 24259  004498  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 24260  00449A  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 24261  00449C  B4D8               	btfsc	status,2,c
 24262  00449E  D022               	goto	u9960
 24263  0044A0                     u9900:
 24264                           
 24265                           ; BSR set to: 0
 24266  0044A0  5172               	movf	checkForOverlap@a& (0+255),w,b
 24267  0044A2  197D               	xorwf	(checkForOverlap@b+2)& (0+255),w,b
 24268  0044A4  E104               	bnz	u9910
 24269  0044A6  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 24270  0044A8  197E               	xorwf	(checkForOverlap@b+3)& (0+255),w,b
 24271  0044AA  B4D8               	btfsc	status,2,c
 24272  0044AC  D01B               	goto	u9960
 24273  0044AE                     u9910:
 24274                           
 24275                           ; BSR set to: 0
 24276  0044AE  517B               	movf	checkForOverlap@b& (0+255),w,b
 24277  0044B0  1974               	xorwf	(checkForOverlap@a+2)& (0+255),w,b
 24278  0044B2  E104               	bnz	u9920
 24279  0044B4  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 24280  0044B6  1975               	xorwf	(checkForOverlap@a+3)& (0+255),w,b
 24281  0044B8  B4D8               	btfsc	status,2,c
 24282  0044BA  D014               	goto	u9960
 24283  0044BC                     u9920:
 24284                           
 24285                           ; BSR set to: 0
 24286  0044BC  0574               	decf	(checkForOverlap@a+2)& (0+255),w,b
 24287  0044BE  0E30               	movlw	48
 24288  0044C0  5975               	subwfb	(checkForOverlap@a+3)& (0+255),w,b
 24289  0044C2  B0D8               	btfsc	status,0,c
 24290  0044C4  D00F               	goto	u9960
 24291                           
 24292                           ; BSR set to: 0
 24293  0044C6  0572               	decf	checkForOverlap@a& (0+255),w,b
 24294  0044C8  0E30               	movlw	48
 24295  0044CA  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 24296  0044CC  B0D8               	btfsc	status,0,c
 24297  0044CE  D00A               	goto	u9960
 24298                           
 24299                           ; BSR set to: 0
 24300  0044D0  057D               	decf	(checkForOverlap@b+2)& (0+255),w,b
 24301  0044D2  0E30               	movlw	48
 24302  0044D4  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 24303  0044D6  B0D8               	btfsc	status,0,c
 24304  0044D8  D005               	goto	u9960
 24305                           
 24306                           ; BSR set to: 0
 24307  0044DA  057B               	decf	checkForOverlap@b& (0+255),w,b
 24308  0044DC  0E30               	movlw	48
 24309  0044DE  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 24310  0044E0  A0D8               	btfss	status,0,c
 24311  0044E2  D002               	goto	l434
 24312  0044E4                     u9960:
 24313                           
 24314                           ; BSR set to: 0
 24315                           ;memoryController.c: 73: return 1;
 24316                           
 24317                           ; BSR set to: 0
 24318  0044E4  80D8               	bsf	status,0,c
 24319                           
 24320                           ; BSR set to: 0
 24321  0044E6  0012               	return	
 24322  0044E8                     l434:
 24323                           
 24324                           ; BSR set to: 0
 24325                           ;memoryController.c: 76: if (a.start < a.end) {
 24326                           
 24327                           ; BSR set to: 0
 24328  0044E8  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 24329  0044EA  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 24330  0044EC  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 24331  0044EE  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 24332  0044F0  B0D8               	btfsc	status,0,c
 24333  0044F2  D03B               	goto	l438
 24334                           
 24335                           ; BSR set to: 0
 24336                           ;memoryController.c: 77: if (b.start < b.end) {
 24337  0044F4  517D               	movf	(checkForOverlap@b+2)& (0+255),w,b
 24338  0044F6  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 24339  0044F8  517E               	movf	(checkForOverlap@b+3)& (0+255),w,b
 24340  0044FA  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 24341  0044FC  B0D8               	btfsc	status,0,c
 24342  0044FE  D02B               	goto	l439
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;memoryController.c: 79: if (a.start < b.start) {
 24346  004500  517B               	movf	checkForOverlap@b& (0+255),w,b
 24347  004502  5D72               	subwf	checkForOverlap@a& (0+255),w,b
 24348  004504  517C               	movf	(checkForOverlap@b+1)& (0+255),w,b
 24349  004506  5973               	subwfb	(checkForOverlap@a+1)& (0+255),w,b
 24350  004508  B0D8               	btfsc	status,0,c
 24351  00450A  D00A               	goto	l440
 24352                           
 24353                           ; BSR set to: 0
 24354                           ;memoryController.c: 80: if (a.end > b.start) {
 24355  00450C  5174               	movf	(checkForOverlap@a+2)& (0+255),w,b
 24356  00450E  5D7B               	subwf	checkForOverlap@b& (0+255),w,b
 24357  004510  5175               	movf	(checkForOverlap@a+3)& (0+255),w,b
 24358  004512  597C               	subwfb	(checkForOverlap@b+1)& (0+255),w,b
 24359  004514  B0D8               	btfsc	status,0,c
 24360  004516  D002               	goto	l441
 24361                           
 24362                           ; BSR set to: 0
 24363                           ;memoryController.c: 81: return 1;
 24364  004518  80D8               	bsf	status,0,c
 24365                           
 24366                           ; BSR set to: 0
 24367                           ;memoryController.c: 82: } else {
 24368                           
 24369                           ; BSR set to: 0
 24370  00451A  0012               	return	
 24371  00451C                     l441:
 24372                           
 24373                           ; BSR set to: 0
 24374                           ;memoryController.c: 83: return 0;
 24375                           
 24376                           ; BSR set to: 0
 24377  00451C  90D8               	bcf	status,0,c
 24378                           
 24379                           ; BSR set to: 0
 24380                           ;memoryController.c: 84: }
 24381                           ;memoryController.c: 85: } else {
 24382                           
 24383                           ; BSR set to: 0
 24384  00451E  0012               	return	
 24385  004520                     l440:
 24386                           
 24387                           ; BSR set to: 0
 24388                           ;memoryController.c: 86: return checkForOverlapSwitched(b, a);
 24389                           
 24390                           ; BSR set to: 0
 24391  004520  EE20  F07B         	lfsr	2,checkForOverlap@b
 24392  004524  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 24393  004528  0E08               	movlw	8
 24394  00452A                     u10011:
 24395  00452A  CFDB FFEB          	movff	plusw2,plusw0
 24396  00452E  06E8               	decf	wreg,f,c
 24397  004530  E2FC               	bc	u10011
 24398  004532  EE20  F072         	lfsr	2,checkForOverlap@a
 24399  004536  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 24400  00453A  0E08               	movlw	8
 24401  00453C                     u10021:
 24402  00453C  CFDB FFEB          	movff	plusw2,plusw0
 24403  004540  06E8               	decf	wreg,f,c
 24404  004542  E2FC               	bc	u10021
 24405  004544  EC2B  F025         	call	_checkForOverlapSwitched	;wreg free
 24406  004548  0100               	movlb	0	; () banked
 24407  00454A  B0D8               	btfsc	status,0,c
 24408  00454C  D002               	goto	l8881
 24409                           
 24410                           ; BSR set to: 0
 24411  00454E  90D8               	bcf	status,0,c
 24412  004550  0012               	return	
 24413  004552                     l8881:
 24414                           
 24415                           ; BSR set to: 0
 24416                           
 24417                           ; BSR set to: 0
 24418  004552  80D8               	bsf	status,0,c
 24419                           
 24420                           ; BSR set to: 0
 24421                           ;memoryController.c: 87: }
 24422                           ;memoryController.c: 88: } else {
 24423                           
 24424                           ; BSR set to: 0
 24425                           
 24426                           ; BSR set to: 0
 24427  004554  0012               	return	
 24428  004556                     l439:
 24429                           
 24430                           ; BSR set to: 0
 24431                           ;memoryController.c: 89: if (b.end < a.start)
 24432                           
 24433                           ; BSR set to: 0
 24434  004556  5172               	movf	checkForOverlap@a& (0+255),w,b
 24435  004558  5D7D               	subwf	(checkForOverlap@b+2)& (0+255),w,b
 24436  00455A  5173               	movf	(checkForOverlap@a+1)& (0+255),w,b
 24437  00455C  597E               	subwfb	(checkForOverlap@b+3)& (0+255),w,b
 24438  00455E  B0D8               	btfsc	status,0,c
 24439  004560  D002               	goto	l445
 24440                           
 24441                           ; BSR set to: 0
 24442                           ;memoryController.c: 90: return 0;
 24443  004562  90D8               	bcf	status,0,c
 24444                           
 24445                           ; BSR set to: 0
 24446                           
 24447                           ; BSR set to: 0
 24448  004564  0012               	return	
 24449  004566                     l445:
 24450                           
 24451                           ; BSR set to: 0
 24452                           ;memoryController.c: 91: else
 24453                           ;memoryController.c: 92: return 1;
 24454                           
 24455                           ; BSR set to: 0
 24456  004566  80D8               	bsf	status,0,c
 24457                           
 24458                           ; BSR set to: 0
 24459                           ;memoryController.c: 93: }
 24460                           ;memoryController.c: 94: } else {
 24461                           
 24462                           ; BSR set to: 0
 24463                           
 24464                           ; BSR set to: 0
 24465  004568  0012               	return	
 24466  00456A                     l438:
 24467                           
 24468                           ; BSR set to: 0
 24469                           ;memoryController.c: 95: return checkForOverlapSwitched(b, a);
 24470                           
 24471                           ; BSR set to: 0
 24472  00456A  EE20  F07B         	lfsr	2,checkForOverlap@b
 24473  00456E  EE00  F060         	lfsr	0,checkForOverlapSwitched@a
 24474  004572  0E08               	movlw	8
 24475  004574                     u10051:
 24476  004574  CFDB FFEB          	movff	plusw2,plusw0
 24477  004578  06E8               	decf	wreg,f,c
 24478  00457A  E2FC               	bc	u10051
 24479  00457C  EE20  F072         	lfsr	2,checkForOverlap@a
 24480  004580  EE00  F069         	lfsr	0,checkForOverlapSwitched@b
 24481  004584  0E08               	movlw	8
 24482  004586                     u10061:
 24483  004586  CFDB FFEB          	movff	plusw2,plusw0
 24484  00458A  06E8               	decf	wreg,f,c
 24485  00458C  E2FC               	bc	u10061
 24486  00458E  EC2B  F025         	call	_checkForOverlapSwitched	;wreg free
 24487  004592  0100               	movlb	0	; () banked
 24488  004594  B0D8               	btfsc	status,0,c
 24489  004596  D002               	goto	l8885
 24490                           
 24491                           ; BSR set to: 0
 24492  004598  90D8               	bcf	status,0,c
 24493  00459A  0012               	return	
 24494  00459C                     l8885:
 24495                           
 24496                           ; BSR set to: 0
 24497                           
 24498                           ; BSR set to: 0
 24499  00459C  80D8               	bsf	status,0,c
 24500                           
 24501                           ; BSR set to: 0
 24502                           
 24503                           ; BSR set to: 0
 24504  00459E  0012               	return	
 24505  0045A0                     __end_of_checkForOverlap:
 24506                           	opt stack 0
 24507                           tblptru	equ	0xFF8
 24508                           tblptrh	equ	0xFF7
 24509                           tblptrl	equ	0xFF6
 24510                           tablat	equ	0xFF5
 24511                           prodh	equ	0xFF4
 24512                           prodl	equ	0xFF3
 24513                           intcon	equ	0xFF2
 24514                           intcon3	equ	0xFF0
 24515                           indf0	equ	0xFEF
 24516                           postinc0	equ	0xFEE
 24517                           plusw0	equ	0xFEB
 24518                           fsr0h	equ	0xFEA
 24519                           fsr0l	equ	0xFE9
 24520                           wreg	equ	0xFE8
 24521                           indf1	equ	0xFE7
 24522                           postinc1	equ	0xFE6
 24523                           postdec1	equ	0xFE5
 24524                           plusw1	equ	0xFE3
 24525                           fsr1h	equ	0xFE2
 24526                           fsr1l	equ	0xFE1
 24527                           indf2	equ	0xFDF
 24528                           postinc2	equ	0xFDE
 24529                           postdec2	equ	0xFDD
 24530                           plusw2	equ	0xFDB
 24531                           fsr2h	equ	0xFDA
 24532                           fsr2l	equ	0xFD9
 24533                           status	equ	0xFD8
 24534                           
 24535 ;; *************** function _checkForOverlapSwitched *****************
 24536 ;; Defined at:
 24537 ;;		line 99 in file "src/mem/memoryController.c"
 24538 ;; Parameters:    Size  Location     Type
 24539 ;;  a               9    0[BANK0 ] struct memoryField
 24540 ;;  b               9    9[BANK0 ] struct memoryField
 24541 ;; Auto vars:     Size  Location     Type
 24542 ;;		None
 24543 ;; Return value:  Size  Location     Type
 24544 ;;		None               void
 24545 ;; Registers used:
 24546 ;;		wreg, status,2, status,0
 24547 ;; Tracked objects:
 24548 ;;		On entry : 0/0
 24549 ;;		On exit  : 0/0
 24550 ;;		Unchanged: 0/0
 24551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24552 ;;      Params:         0      18       0       0       0       0       0       0       0
 24553 ;;      Locals:         0       0       0       0       0       0       0       0       0
 24554 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24555 ;;      Totals:         0      18       0       0       0       0       0       0       0
 24556 ;;Total ram usage:       18 bytes
 24557 ;; Hardware stack levels used:    1
 24558 ;; Hardware stack levels required when called:    4
 24559 ;; This function calls:
 24560 ;;		Nothing
 24561 ;; This function is called by:
 24562 ;;		_checkForOverlap
 24563 ;; This function uses a non-reentrant model
 24564 ;;
 24565                           
 24566                           	psect	text92
 24567  004A56                     __ptext92:
 24568                           	opt stack 0
 24569  004A56                     _checkForOverlapSwitched:
 24570                           	opt stack 22
 24571                           
 24572                           ;memoryController.c: 102: if ((a.start == b.start) ||
 24573                           ;memoryController.c: 103: (a.end == b.end) ||
 24574                           ;memoryController.c: 104: (a.start == b.end) ||
 24575                           ;memoryController.c: 105: (a.end == b.start) ||
 24576                           ;memoryController.c: 106: (a.end > 0x3000) ||
 24577                           ;memoryController.c: 107: (a.start > 0x3000) ||
 24578                           ;memoryController.c: 108: (b.end > 0x3000) ||
 24579                           ;memoryController.c: 109: (b.start > 0x3000))
 24580                           
 24581                           ; BSR set to: 0
 24582                           ;incstack = 0
 24583  004A56  0100               	movlb	0	; () banked
 24584  004A58  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 24585  004A5A  1960               	xorwf	checkForOverlapSwitched@a& (0+255),w,b
 24586  004A5C  E104               	bnz	u9700
 24587  004A5E  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24588  004A60  1961               	xorwf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24589  004A62  B4D8               	btfsc	status,2,c
 24590  004A64  D029               	goto	u9770
 24591  004A66                     u9700:
 24592                           
 24593                           ; BSR set to: 0
 24594  004A66  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 24595  004A68  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 24596  004A6A  E104               	bnz	u9710
 24597  004A6C  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 24598  004A6E  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 24599  004A70  B4D8               	btfsc	status,2,c
 24600  004A72  D022               	goto	u9770
 24601  004A74                     u9710:
 24602                           
 24603                           ; BSR set to: 0
 24604  004A74  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 24605  004A76  196B               	xorwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 24606  004A78  E104               	bnz	u9720
 24607  004A7A  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24608  004A7C  196C               	xorwf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 24609  004A7E  B4D8               	btfsc	status,2,c
 24610  004A80  D01B               	goto	u9770
 24611  004A82                     u9720:
 24612                           
 24613                           ; BSR set to: 0
 24614  004A82  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 24615  004A84  1962               	xorwf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 24616  004A86  E104               	bnz	u9730
 24617  004A88  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24618  004A8A  1963               	xorwf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 24619  004A8C  B4D8               	btfsc	status,2,c
 24620  004A8E  D014               	goto	u9770
 24621  004A90                     u9730:
 24622                           
 24623                           ; BSR set to: 0
 24624  004A90  0562               	decf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 24625  004A92  0E30               	movlw	48
 24626  004A94  5963               	subwfb	(checkForOverlapSwitched@a+3)& (0+255),w,b
 24627  004A96  B0D8               	btfsc	status,0,c
 24628  004A98  D00F               	goto	u9770
 24629                           
 24630                           ; BSR set to: 0
 24631  004A9A  0560               	decf	checkForOverlapSwitched@a& (0+255),w,b
 24632  004A9C  0E30               	movlw	48
 24633  004A9E  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24634  004AA0  B0D8               	btfsc	status,0,c
 24635  004AA2  D00A               	goto	u9770
 24636                           
 24637                           ; BSR set to: 0
 24638  004AA4  056B               	decf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 24639  004AA6  0E30               	movlw	48
 24640  004AA8  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 24641  004AAA  B0D8               	btfsc	status,0,c
 24642  004AAC  D005               	goto	u9770
 24643                           
 24644                           ; BSR set to: 0
 24645  004AAE  0569               	decf	checkForOverlapSwitched@b& (0+255),w,b
 24646  004AB0  0E30               	movlw	48
 24647  004AB2  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24648  004AB4  A0D8               	btfss	status,0,c
 24649  004AB6  D002               	goto	l450
 24650  004AB8                     u9770:
 24651                           
 24652                           ; BSR set to: 0
 24653                           ;memoryController.c: 110: return 1;
 24654                           
 24655                           ; BSR set to: 0
 24656  004AB8  80D8               	bsf	status,0,c
 24657                           
 24658                           ; BSR set to: 0
 24659  004ABA  0012               	return	
 24660  004ABC                     l450:
 24661                           
 24662                           ; BSR set to: 0
 24663                           ;memoryController.c: 113: if (a.start < a.end) {
 24664                           
 24665                           ; BSR set to: 0
 24666  004ABC  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 24667  004ABE  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 24668  004AC0  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 24669  004AC2  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24670  004AC4  B0D8               	btfsc	status,0,c
 24671  004AC6  D01E               	goto	l461
 24672                           
 24673                           ; BSR set to: 0
 24674                           ;memoryController.c: 114: if (b.start < b.end) {
 24675  004AC8  516B               	movf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 24676  004ACA  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 24677  004ACC  516C               	movf	(checkForOverlapSwitched@b+3)& (0+255),w,b
 24678  004ACE  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24679  004AD0  B0D8               	btfsc	status,0,c
 24680  004AD2  D010               	goto	l455
 24681                           
 24682                           ; BSR set to: 0
 24683                           ;memoryController.c: 116: if (a.start < b.start) {
 24684  004AD4  5169               	movf	checkForOverlapSwitched@b& (0+255),w,b
 24685  004AD6  5D60               	subwf	checkForOverlapSwitched@a& (0+255),w,b
 24686  004AD8  516A               	movf	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24687  004ADA  5961               	subwfb	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24688  004ADC  B0D8               	btfsc	status,0,c
 24689  004ADE  D012               	goto	l461
 24690                           
 24691                           ; BSR set to: 0
 24692                           ;memoryController.c: 117: if (a.end > b.start) {
 24693  004AE0  5162               	movf	(checkForOverlapSwitched@a+2)& (0+255),w,b
 24694  004AE2  5D69               	subwf	checkForOverlapSwitched@b& (0+255),w,b
 24695  004AE4  5163               	movf	(checkForOverlapSwitched@a+3)& (0+255),w,b
 24696  004AE6  596A               	subwfb	(checkForOverlapSwitched@b+1)& (0+255),w,b
 24697  004AE8  B0D8               	btfsc	status,0,c
 24698  004AEA  D002               	goto	l457
 24699                           
 24700                           ; BSR set to: 0
 24701                           ;memoryController.c: 118: return 1;
 24702  004AEC  80D8               	bsf	status,0,c
 24703                           
 24704                           ; BSR set to: 0
 24705  004AEE  0012               	return	
 24706  004AF0                     l457:
 24707                           
 24708                           ; BSR set to: 0
 24709                           ;memoryController.c: 120: return 0;
 24710                           
 24711                           ; BSR set to: 0
 24712  004AF0  90D8               	bcf	status,0,c
 24713                           
 24714                           ; BSR set to: 0
 24715  004AF2  0012               	return	
 24716  004AF4                     l455:
 24717                           
 24718                           ; BSR set to: 0
 24719                           ;memoryController.c: 124: if (b.end < a.start)
 24720                           
 24721                           ; BSR set to: 0
 24722  004AF4  5160               	movf	checkForOverlapSwitched@a& (0+255),w,b
 24723  004AF6  5D6B               	subwf	(checkForOverlapSwitched@b+2)& (0+255),w,b
 24724  004AF8  5161               	movf	(checkForOverlapSwitched@a+1)& (0+255),w,b
 24725  004AFA  596C               	subwfb	(checkForOverlapSwitched@b+3)& (0+255),w,b
 24726  004AFC  A0D8               	btfss	status,0,c
 24727  004AFE  D7F8               	goto	l457
 24728                           
 24729                           ; BSR set to: 0
 24730                           ;memoryController.c: 126: else
 24731                           ;memoryController.c: 127: return 1;
 24732                           
 24733                           ; BSR set to: 0
 24734                           
 24735                           ; BSR set to: 0
 24736                           
 24737                           ; BSR set to: 0
 24738                           
 24739                           ; BSR set to: 0
 24740                           ;memoryController.c: 125: return 0;
 24741  004B00  80D8               	bsf	status,0,c
 24742                           
 24743                           ; BSR set to: 0
 24744  004B02  0012               	return	
 24745  004B04                     l461:
 24746                           
 24747                           ; BSR set to: 0
 24748                           ;memoryController.c: 128: }
 24749                           ;memoryController.c: 129: }
 24750                           ;memoryController.c: 131: return 1;
 24751                           
 24752                           ; BSR set to: 0
 24753                           
 24754                           ; BSR set to: 0
 24755                           
 24756                           ; BSR set to: 0
 24757  004B04  80D8               	bsf	status,0,c
 24758  004B06  0012               	return	
 24759  004B08                     __end_of_checkForOverlapSwitched:
 24760                           	opt stack 0
 24761                           tblptru	equ	0xFF8
 24762                           tblptrh	equ	0xFF7
 24763                           tblptrl	equ	0xFF6
 24764                           tablat	equ	0xFF5
 24765                           prodh	equ	0xFF4
 24766                           prodl	equ	0xFF3
 24767                           intcon	equ	0xFF2
 24768                           intcon3	equ	0xFF0
 24769                           indf0	equ	0xFEF
 24770                           postinc0	equ	0xFEE
 24771                           plusw0	equ	0xFEB
 24772                           fsr0h	equ	0xFEA
 24773                           fsr0l	equ	0xFE9
 24774                           wreg	equ	0xFE8
 24775                           indf1	equ	0xFE7
 24776                           postinc1	equ	0xFE6
 24777                           postdec1	equ	0xFE5
 24778                           plusw1	equ	0xFE3
 24779                           fsr1h	equ	0xFE2
 24780                           fsr1l	equ	0xFE1
 24781                           indf2	equ	0xFDF
 24782                           postinc2	equ	0xFDE
 24783                           postdec2	equ	0xFDD
 24784                           plusw2	equ	0xFDB
 24785                           fsr2h	equ	0xFDA
 24786                           fsr2l	equ	0xFD9
 24787                           status	equ	0xFD8
 24788                           
 24789 ;; *************** function ___wmul *****************
 24790 ;; Defined at:
 24791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 24792 ;; Parameters:    Size  Location     Type
 24793 ;;  multiplier      2    0[BANK0 ] unsigned int 
 24794 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 24795 ;; Auto vars:     Size  Location     Type
 24796 ;;  product         2    4[BANK0 ] unsigned int 
 24797 ;; Return value:  Size  Location     Type
 24798 ;;                  2    0[BANK0 ] unsigned int 
 24799 ;; Registers used:
 24800 ;;		wreg, status,2, status,0, prodl, prodh
 24801 ;; Tracked objects:
 24802 ;;		On entry : 0/0
 24803 ;;		On exit  : 0/0
 24804 ;;		Unchanged: 0/0
 24805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24806 ;;      Params:         0       4       0       0       0       0       0       0       0
 24807 ;;      Locals:         0       2       0       0       0       0       0       0       0
 24808 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24809 ;;      Totals:         0       6       0       0       0       0       0       0       0
 24810 ;;Total ram usage:        6 bytes
 24811 ;; Hardware stack levels used:    1
 24812 ;; Hardware stack levels required when called:    4
 24813 ;; This function calls:
 24814 ;;		Nothing
 24815 ;; This function is called by:
 24816 ;;		_memory_txFrameRequest
 24817 ;; This function uses a non-reentrant model
 24818 ;;
 24819                           
 24820                           	psect	text93
 24821  005FB2                     __ptext93:
 24822                           	opt stack 0
 24823  005FB2                     ___wmul:
 24824                           	opt stack 23
 24825                           
 24826                           ; BSR set to: 0
 24827                           ;incstack = 0
 24828  005FB2  0100               	movlb	0	; () banked
 24829  005FB4  5160               	movf	___wmul@multiplier& (0+255),w,b
 24830  005FB6  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24831  005FB8  CFF3 F064          	movff	prodl,___wmul@product
 24832  005FBC  CFF4 F065          	movff	prodh,___wmul@product+1
 24833  005FC0  5160               	movf	___wmul@multiplier& (0+255),w,b
 24834  005FC2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 24835  005FC4  50F3               	movf	prodl,w,c
 24836  005FC6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 24837  005FC8  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 24838  005FCA  0362               	mulwf	___wmul@multiplicand& (0+255),b
 24839  005FCC  50F3               	movf	prodl,w,c
 24840  005FCE  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 24841                           
 24842                           ; BSR set to: 0
 24843  005FD0  C064  F060         	movff	___wmul@product,?___wmul
 24844  005FD4  C065  F061         	movff	___wmul@product+1,?___wmul+1
 24845  005FD8  0012               	return	
 24846  005FDA                     __end_of___wmul:
 24847                           	opt stack 0
 24848                           tblptru	equ	0xFF8
 24849                           tblptrh	equ	0xFF7
 24850                           tblptrl	equ	0xFF6
 24851                           tablat	equ	0xFF5
 24852                           prodh	equ	0xFF4
 24853                           prodl	equ	0xFF3
 24854                           intcon	equ	0xFF2
 24855                           intcon3	equ	0xFF0
 24856                           indf0	equ	0xFEF
 24857                           postinc0	equ	0xFEE
 24858                           plusw0	equ	0xFEB
 24859                           fsr0h	equ	0xFEA
 24860                           fsr0l	equ	0xFE9
 24861                           wreg	equ	0xFE8
 24862                           indf1	equ	0xFE7
 24863                           postinc1	equ	0xFE6
 24864                           postdec1	equ	0xFE5
 24865                           plusw1	equ	0xFE3
 24866                           fsr1h	equ	0xFE2
 24867                           fsr1l	equ	0xFE1
 24868                           indf2	equ	0xFDF
 24869                           postinc2	equ	0xFDE
 24870                           postdec2	equ	0xFDD
 24871                           plusw2	equ	0xFDB
 24872                           fsr2h	equ	0xFDA
 24873                           fsr2l	equ	0xFD9
 24874                           status	equ	0xFD8
 24875                           
 24876 ;; *************** function _ethernetController_writeEtherTypeFieldToBuffer *****************
 24877 ;; Defined at:
 24878 ;;		line 241 in file "src/enc424j600/ENC424J600.c"
 24879 ;; Parameters:    Size  Location     Type
 24880 ;;  ethtype         2   15[BANK0 ] enum E5509
 24881 ;;  field           9   17[BANK0 ] struct memoryField
 24882 ;; Auto vars:     Size  Location     Type
 24883 ;;  opcode          1   28[BANK0 ] unsigned char 
 24884 ;;  highByte        1   27[BANK0 ] unsigned char 
 24885 ;;  lowByte         1   26[BANK0 ] unsigned char 
 24886 ;; Return value:  Size  Location     Type
 24887 ;;                  1    wreg      void 
 24888 ;; Registers used:
 24889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24890 ;; Tracked objects:
 24891 ;;		On entry : 0/0
 24892 ;;		On exit  : 0/0
 24893 ;;		Unchanged: 0/0
 24894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 24895 ;;      Params:         0      11       0       0       0       0       0       0       0
 24896 ;;      Locals:         0       3       0       0       0       0       0       0       0
 24897 ;;      Temps:          0       0       0       0       0       0       0       0       0
 24898 ;;      Totals:         0      14       0       0       0       0       0       0       0
 24899 ;;Total ram usage:       14 bytes
 24900 ;; Hardware stack levels used:    1
 24901 ;; Hardware stack levels required when called:    7
 24902 ;; This function calls:
 24903 ;;		_enc424j600_setGPDATAWritePointer
 24904 ;;		_enc424j600_writeSPI
 24905 ;; This function is called by:
 24906 ;;		_ethernet_txFrameRequest
 24907 ;; This function uses a non-reentrant model
 24908 ;;
 24909                           
 24910                           	psect	text94
 24911  005A72                     __ptext94:
 24912                           	opt stack 0
 24913  005A72                     _ethernetController_writeEtherTypeFieldToBuffer:
 24914                           	opt stack 21
 24915                           
 24916                           ;ENC424J600.c: 242: enc424j600_setGPDATAWritePointer(field.start + 0x0006);
 24917                           
 24918                           ; BSR set to: 0
 24919                           ;incstack = 0
 24920  005A72  0E06               	movlw	6
 24921  005A74  0100               	movlb	0	; () banked
 24922  005A76  2571               	addwf	ethernetController_writeEtherTypeFieldToBuffer@field& (0+255),w,b
 24923  005A78  6F6A               	movwf	enc424j600_setGPDATAWritePointer@addr& (0+255),b
 24924  005A7A  0E00               	movlw	0
 24925  005A7C  2172               	addwfc	(ethernetController_writeEtherTypeFieldToBuffer@field+1)& (0+255),w,b
 24926  005A7E  6F6B               	movwf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),b
 24927  005A80  EC4D  F02E         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 24928                           
 24929                           ;ENC424J600.c: 243: uint8_t lowByte = ethtype & 0x00ff;
 24930  005A84  C06F  F07A         	movff	ethernetController_writeEtherTypeFieldToBuffer@ethtype,ethernetController_writeEt
      +                          herTypeFieldToBuffer@lowByte
 24931                           
 24932                           ;ENC424J600.c: 244: uint8_t highByte = (ethtype & 0xff00) >> 8;
 24933  005A88  0100               	movlb	0	; () banked
 24934  005A8A  5170               	movf	(ethernetController_writeEtherTypeFieldToBuffer@ethtype+1)& (0+255),w,b
 24935  005A8C  6F7B               	movwf	ethernetController_writeEtherTypeFieldToBuffer@highByte& (0+255),b
 24936                           
 24937                           ; BSR set to: 0
 24938                           ;ENC424J600.c: 245: uint8_t opcode = 0x2A;
 24939  005A8E  0E2A               	movlw	42
 24940  005A90  6F7C               	movwf	ethernetController_writeEtherTypeFieldToBuffer@opcode& (0+255),b
 24941                           
 24942                           ; BSR set to: 0
 24943                           ;ENC424J600.c: 246: PORTBbits.RB4=0;
 24944  005A92  9881               	bcf	3969,4,c	;volatile
 24945                           
 24946                           ;ENC424J600.c: 247: enc424j600_writeSPI(&opcode);
 24947  005A94  0E7C               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@opcode
 24948  005A96  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24949  005A98  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@opcode
 24950  005A9A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24951  005A9C  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 24952                           
 24953                           ;ENC424J600.c: 248: enc424j600_writeSPI(&highByte);
 24954  005AA0  0E7B               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@highByte
 24955  005AA2  0100               	movlb	0	; () banked
 24956  005AA4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24957  005AA6  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@highByte
 24958  005AA8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24959  005AAA  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 24960                           
 24961                           ;ENC424J600.c: 249: enc424j600_writeSPI(&lowByte);
 24962  005AAE  0E7A               	movlw	low ethernetController_writeEtherTypeFieldToBuffer@lowByte
 24963  005AB0  0100               	movlb	0	; () banked
 24964  005AB2  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 24965  005AB4  0E00               	movlw	high ethernetController_writeEtherTypeFieldToBuffer@lowByte
 24966  005AB6  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 24967  005AB8  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 24968                           
 24969                           ;ENC424J600.c: 250: PORTBbits.RB4=1;
 24970  005ABC  8881               	bsf	3969,4,c	;volatile
 24971  005ABE  0012               	return		;funcret
 24972  005AC0                     __end_of_ethernetController_writeEtherTypeFieldToBuffer:
 24973                           	opt stack 0
 24974                           tblptru	equ	0xFF8
 24975                           tblptrh	equ	0xFF7
 24976                           tblptrl	equ	0xFF6
 24977                           tablat	equ	0xFF5
 24978                           prodh	equ	0xFF4
 24979                           prodl	equ	0xFF3
 24980                           intcon	equ	0xFF2
 24981                           intcon3	equ	0xFF0
 24982                           indf0	equ	0xFEF
 24983                           postinc0	equ	0xFEE
 24984                           plusw0	equ	0xFEB
 24985                           fsr0h	equ	0xFEA
 24986                           fsr0l	equ	0xFE9
 24987                           wreg	equ	0xFE8
 24988                           indf1	equ	0xFE7
 24989                           postinc1	equ	0xFE6
 24990                           postdec1	equ	0xFE5
 24991                           plusw1	equ	0xFE3
 24992                           fsr1h	equ	0xFE2
 24993                           fsr1l	equ	0xFE1
 24994                           indf2	equ	0xFDF
 24995                           postinc2	equ	0xFDE
 24996                           postdec2	equ	0xFDD
 24997                           plusw2	equ	0xFDB
 24998                           fsr2h	equ	0xFDA
 24999                           fsr2l	equ	0xFD9
 25000                           status	equ	0xFD8
 25001                           
 25002 ;; *************** function _ethernetController_writeDestinationMACAddress *****************
 25003 ;; Defined at:
 25004 ;;		line 228 in file "src/enc424j600/ENC424J600.c"
 25005 ;; Parameters:    Size  Location     Type
 25006 ;;  addr            6   15[BANK0 ] struct macaddress
 25007 ;;  field           9   21[BANK0 ] struct memoryField
 25008 ;; Auto vars:     Size  Location     Type
 25009 ;;  i               1   37[BANK0 ] unsigned char 
 25010 ;;  i               1   38[BANK0 ] unsigned char 
 25011 ;;  data            6   30[BANK0 ] unsigned char [6]
 25012 ;;  opcode          1   36[BANK0 ] unsigned char 
 25013 ;; Return value:  Size  Location     Type
 25014 ;;                  1    wreg      void 
 25015 ;; Registers used:
 25016 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25017 ;; Tracked objects:
 25018 ;;		On entry : 0/0
 25019 ;;		On exit  : 0/0
 25020 ;;		Unchanged: 0/0
 25021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25022 ;;      Params:         0      15       0       0       0       0       0       0       0
 25023 ;;      Locals:         0       9       0       0       0       0       0       0       0
 25024 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25025 ;;      Totals:         0      24       0       0       0       0       0       0       0
 25026 ;;Total ram usage:       24 bytes
 25027 ;; Hardware stack levels used:    1
 25028 ;; Hardware stack levels required when called:    7
 25029 ;; This function calls:
 25030 ;;		_enc424j600_setGPDATAWritePointer
 25031 ;;		_enc424j600_writeSPI
 25032 ;; This function is called by:
 25033 ;;		_ethernet_txFrameRequest
 25034 ;;		_ipv4_sendFrame
 25035 ;; This function uses a non-reentrant model
 25036 ;;
 25037                           
 25038                           	psect	text95
 25039  00519E                     __ptext95:
 25040                           	opt stack 0
 25041  00519E                     _ethernetController_writeDestinationMACAddress:
 25042                           	opt stack 21
 25043                           
 25044                           ;ENC424J600.c: 229: enc424j600_setGPDATAWritePointer(field.start);
 25045                           
 25046                           ;incstack = 0
 25047  00519E  C075  F06A         	movff	ethernetController_writeDestinationMACAddress@field,enc424j600_setGPDATAWritePoin
      +                          ter@addr
 25048  0051A2  C076  F06B         	movff	ethernetController_writeDestinationMACAddress@field+1,enc424j600_setGPDATAWritePo
      +                          inter@addr+1
 25049  0051A6  EC4D  F02E         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 25050                           
 25051                           ;ENC424J600.c: 230: uint8_t data[6];
 25052                           ;ENC424J600.c: 231: for (uint8_t i = 0; i < 6; i++)
 25053  0051AA  0E00               	movlw	0
 25054  0051AC  0100               	movlb	0	; () banked
 25055  0051AE  6F86               	movwf	ethernetController_writeDestinationMACAddress@i& (0+255),b
 25056  0051B0                     l9105:
 25057                           
 25058                           ; BSR set to: 0
 25059  0051B0  0E05               	movlw	5
 25060  0051B2  6586               	cpfsgt	ethernetController_writeDestinationMACAddress@i& (0+255),b
 25061  0051B4  D001               	goto	l140
 25062  0051B6  D014               	goto	u10090
 25063  0051B8                     l140:
 25064                           
 25065                           ; BSR set to: 0
 25066                           ;ENC424J600.c: 232: data[i] = addr.address[i];
 25067                           
 25068                           ; BSR set to: 0
 25069  0051B8  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 25070  0051BA  0D01               	mullw	1
 25071  0051BC  0E6F               	movlw	low ethernetController_writeDestinationMACAddress@addr
 25072  0051BE  24F3               	addwf	prodl,w,c
 25073  0051C0  6ED9               	movwf	fsr2l,c
 25074  0051C2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@addr
 25075  0051C4  20F4               	addwfc	prodh,w,c
 25076  0051C6  6EDA               	movwf	fsr2h,c
 25077  0051C8  5186               	movf	ethernetController_writeDestinationMACAddress@i& (0+255),w,b
 25078  0051CA  0D01               	mullw	1
 25079  0051CC  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 25080  0051CE  24F3               	addwf	prodl,w,c
 25081  0051D0  6EE1               	movwf	fsr1l,c
 25082  0051D2  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 25083  0051D4  20F4               	addwfc	prodh,w,c
 25084  0051D6  6EE2               	movwf	fsr1h,c
 25085  0051D8  CFDF FFE7          	movff	indf2,indf1
 25086                           
 25087                           ; BSR set to: 0
 25088  0051DC  2B86               	incf	ethernetController_writeDestinationMACAddress@i& (0+255),f,b
 25089  0051DE  D7E8               	goto	l9105
 25090  0051E0                     u10090:
 25091                           
 25092                           ; BSR set to: 0
 25093                           ;ENC424J600.c: 233: uint8_t opcode = 0x2A;
 25094                           
 25095                           ; BSR set to: 0
 25096  0051E0  0E2A               	movlw	42
 25097  0051E2  6F84               	movwf	ethernetController_writeDestinationMACAddress@opcode& (0+255),b
 25098                           
 25099                           ; BSR set to: 0
 25100                           ;ENC424J600.c: 234: PORTBbits.RB4=0;
 25101  0051E4  9881               	bcf	3969,4,c	;volatile
 25102                           
 25103                           ; BSR set to: 0
 25104                           ;ENC424J600.c: 235: enc424j600_writeSPI(&opcode);
 25105  0051E6  0E84               	movlw	low ethernetController_writeDestinationMACAddress@opcode
 25106  0051E8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25107  0051EA  0E00               	movlw	high ethernetController_writeDestinationMACAddress@opcode
 25108  0051EC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25109  0051EE  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25110                           
 25111                           ;ENC424J600.c: 236: for (uint8_t i = 0; i < 6; i++)
 25112  0051F2  0E00               	movlw	0
 25113  0051F4  0100               	movlb	0	; () banked
 25114  0051F6  6F85               	movwf	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 25115  0051F8                     l9123:
 25116                           
 25117                           ; BSR set to: 0
 25118  0051F8  0E05               	movlw	5
 25119  0051FA  6585               	cpfsgt	ethernetController_writeDestinationMACAddress@i_638& (0+255),b
 25120  0051FC  D001               	goto	l142
 25121  0051FE  D00D               	goto	u10110
 25122  005200                     l142:
 25123                           
 25124                           ; BSR set to: 0
 25125                           ;ENC424J600.c: 237: enc424j600_writeSPI(&data[i]);
 25126                           
 25127                           ; BSR set to: 0
 25128  005200  5185               	movf	ethernetController_writeDestinationMACAddress@i_638& (0+255),w,b
 25129  005202  0D01               	mullw	1
 25130  005204  0E7E               	movlw	low ethernetController_writeDestinationMACAddress@data
 25131  005206  24F3               	addwf	prodl,w,c
 25132  005208  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25133  00520A  0E00               	movlw	high ethernetController_writeDestinationMACAddress@data
 25134  00520C  20F4               	addwfc	prodh,w,c
 25135  00520E  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25136  005210  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25137  005214  0100               	movlb	0	; () banked
 25138  005216  2B85               	incf	ethernetController_writeDestinationMACAddress@i_638& (0+255),f,b
 25139  005218  D7EF               	goto	l9123
 25140  00521A                     u10110:
 25141                           
 25142                           ; BSR set to: 0
 25143                           ;ENC424J600.c: 238: PORTBbits.RB4=1;
 25144  00521A  8881               	bsf	3969,4,c	;volatile
 25145                           
 25146                           ; BSR set to: 0
 25147  00521C  0012               	return		;funcret
 25148  00521E                     __end_of_ethernetController_writeDestinationMACAddress:
 25149                           	opt stack 0
 25150                           tblptru	equ	0xFF8
 25151                           tblptrh	equ	0xFF7
 25152                           tblptrl	equ	0xFF6
 25153                           tablat	equ	0xFF5
 25154                           prodh	equ	0xFF4
 25155                           prodl	equ	0xFF3
 25156                           intcon	equ	0xFF2
 25157                           intcon3	equ	0xFF0
 25158                           indf0	equ	0xFEF
 25159                           postinc0	equ	0xFEE
 25160                           plusw0	equ	0xFEB
 25161                           fsr0h	equ	0xFEA
 25162                           fsr0l	equ	0xFE9
 25163                           wreg	equ	0xFE8
 25164                           indf1	equ	0xFE7
 25165                           postinc1	equ	0xFE6
 25166                           postdec1	equ	0xFE5
 25167                           plusw1	equ	0xFE3
 25168                           fsr1h	equ	0xFE2
 25169                           fsr1l	equ	0xFE1
 25170                           indf2	equ	0xFDF
 25171                           postinc2	equ	0xFDE
 25172                           postdec2	equ	0xFDD
 25173                           plusw2	equ	0xFDB
 25174                           fsr2h	equ	0xFDA
 25175                           fsr2l	equ	0xFD9
 25176                           status	equ	0xFD8
 25177                           
 25178 ;; *************** function _ethernetController_streamToTransmitBuffer *****************
 25179 ;; Defined at:
 25180 ;;		line 208 in file "src/enc424j600/ENC424J600.c"
 25181 ;; Parameters:    Size  Location     Type
 25182 ;;  data            1    wreg     unsigned char 
 25183 ;;  field           9   15[BANK0 ] struct memoryField
 25184 ;; Auto vars:     Size  Location     Type
 25185 ;;  data            1   28[BANK0 ] unsigned char 
 25186 ;;  opcode          1   29[BANK0 ] unsigned char 
 25187 ;; Return value:  Size  Location     Type
 25188 ;;                  1    wreg      void 
 25189 ;; Registers used:
 25190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25191 ;; Tracked objects:
 25192 ;;		On entry : 0/0
 25193 ;;		On exit  : 0/0
 25194 ;;		Unchanged: 0/0
 25195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25196 ;;      Params:         0       9       0       0       0       0       0       0       0
 25197 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25198 ;;      Temps:          0       4       0       0       0       0       0       0       0
 25199 ;;      Totals:         0      15       0       0       0       0       0       0       0
 25200 ;;Total ram usage:       15 bytes
 25201 ;; Hardware stack levels used:    1
 25202 ;; Hardware stack levels required when called:    7
 25203 ;; This function calls:
 25204 ;;		_enc424j600_setGPDATAWritePointer
 25205 ;;		_enc424j600_writeSPI
 25206 ;; This function is called by:
 25207 ;;		_arp_send
 25208 ;;		_ipv4_streamToTransmissionBuffer
 25209 ;; This function uses a non-reentrant model
 25210 ;;
 25211                           
 25212                           	psect	text96
 25213  005316                     __ptext96:
 25214                           	opt stack 0
 25215  005316                     _ethernetController_streamToTransmitBuffer:
 25216                           	opt stack 22
 25217                           
 25218                           ; BSR set to: 0
 25219                           ;incstack = 0
 25220                           ;ethernetController_streamToTransmitBuffer@data stored from wreg
 25221  005316  0100               	movlb	0	; () banked
 25222  005318  6F7C               	movwf	ethernetController_streamToTransmitBuffer@data& (0+255),b
 25223                           
 25224                           ;ENC424J600.c: 209: uint8_t opcode;
 25225                           ;ENC424J600.c: 210: uint16_t static pointer = 0;
 25226                           ;ENC424J600.c: 211: if (pointer == 0) {
 25227  00531A  503F               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 25228  00531C  1040               	iorwf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 25229  00531E  A4D8               	btfss	status,2,c
 25230  005320  D010               	goto	l134
 25231                           
 25232                           ;ENC424J600.c: 212: enc424j600_setGPDATAWritePointer(field.start);
 25233  005322  C06F  F06A         	movff	ethernetController_streamToTransmitBuffer@field,enc424j600_setGPDATAWritePointer@
      +                          addr
 25234  005326  C070  F06B         	movff	ethernetController_streamToTransmitBuffer@field+1,enc424j600_setGPDATAWritePointe
      +                          r@addr+1
 25235  00532A  EC4D  F02E         	call	_enc424j600_setGPDATAWritePointer	;wreg free
 25236                           
 25237                           ;ENC424J600.c: 213: opcode = 0x2A;
 25238  00532E  0E2A               	movlw	42
 25239  005330  0100               	movlb	0	; () banked
 25240  005332  6F7D               	movwf	ethernetController_streamToTransmitBuffer@opcode& (0+255),b
 25241                           
 25242                           ; BSR set to: 0
 25243                           ;ENC424J600.c: 214: PORTBbits.RB4=0;
 25244  005334  9881               	bcf	3969,4,c	;volatile
 25245                           
 25246                           ; BSR set to: 0
 25247                           ;ENC424J600.c: 215: enc424j600_writeSPI(&opcode);
 25248  005336  0E7D               	movlw	low ethernetController_streamToTransmitBuffer@opcode
 25249  005338  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25250  00533A  0E00               	movlw	high ethernetController_streamToTransmitBuffer@opcode
 25251  00533C  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25252  00533E  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25253  005342                     l134:
 25254                           
 25255                           ;ENC424J600.c: 216: }
 25256                           ;ENC424J600.c: 218: enc424j600_writeSPI(&data);
 25257  005342  0E7C               	movlw	low ethernetController_streamToTransmitBuffer@data
 25258  005344  0100               	movlb	0	; () banked
 25259  005346  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25260  005348  0E00               	movlw	high ethernetController_streamToTransmitBuffer@data
 25261  00534A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25262  00534C  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25263                           
 25264                           ;ENC424J600.c: 220: if (pointer == field.length - 1) {
 25265  005350  0EFF               	movlw	255
 25266  005352  0100               	movlb	0	; () banked
 25267  005354  6F78               	movwf	??_ethernetController_streamToTransmitBuffer& (0+255),b
 25268  005356  0EFF               	movlw	255
 25269  005358  6F79               	movwf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),b
 25270  00535A  EE20  F073         	lfsr	2,ethernetController_streamToTransmitBuffer@field+4
 25271  00535E  CFDE F07A          	movff	postinc2,??_ethernetController_streamToTransmitBuffer+2
 25272  005362  CFDD F07B          	movff	postdec2,??_ethernetController_streamToTransmitBuffer+3
 25273  005366  5178               	movf	??_ethernetController_streamToTransmitBuffer& (0+255),w,b
 25274  005368  277A               	addwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),f,b
 25275  00536A  5179               	movf	(??_ethernetController_streamToTransmitBuffer+1)& (0+255),w,b
 25276  00536C  237B               	addwfc	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),f,b
 25277  00536E  503F               	movf	ethernetController_streamToTransmitBuffer@pointer,w,c
 25278  005370  197A               	xorwf	(??_ethernetController_streamToTransmitBuffer+2)& (0+255),w,b
 25279  005372  E10A               	bnz	l9363
 25280  005374  5040               	movf	ethernetController_streamToTransmitBuffer@pointer+1,w,c
 25281  005376  197B               	xorwf	(??_ethernetController_streamToTransmitBuffer+3)& (0+255),w,b
 25282  005378  A4D8               	btfss	status,2,c
 25283  00537A  D006               	goto	l135
 25284                           
 25285                           ; BSR set to: 0
 25286                           ;ENC424J600.c: 221: PORTBbits.RB4=1;
 25287  00537C  8881               	bsf	3969,4,c	;volatile
 25288                           
 25289                           ; BSR set to: 0
 25290                           ;ENC424J600.c: 222: pointer = 0;
 25291  00537E  0E00               	movlw	0
 25292  005380  6E40               	movwf	ethernetController_streamToTransmitBuffer@pointer+1,c
 25293  005382  0E00               	movlw	0
 25294  005384  6E3F               	movwf	ethernetController_streamToTransmitBuffer@pointer,c
 25295                           
 25296                           ;ENC424J600.c: 223: } else {
 25297  005386  0012               	return	
 25298  005388                     l135:
 25299  005388                     l9363:
 25300                           
 25301                           ; BSR set to: 0
 25302                           ;ENC424J600.c: 224: pointer++;
 25303  005388  4A3F               	infsnz	ethernetController_streamToTransmitBuffer@pointer,f,c
 25304  00538A  2A40               	incf	ethernetController_streamToTransmitBuffer@pointer+1,f,c
 25305  00538C  0012               	return	
 25306  00538E                     __end_of_ethernetController_streamToTransmitBuffer:
 25307                           	opt stack 0
 25308                           tblptru	equ	0xFF8
 25309                           tblptrh	equ	0xFF7
 25310                           tblptrl	equ	0xFF6
 25311                           tablat	equ	0xFF5
 25312                           prodh	equ	0xFF4
 25313                           prodl	equ	0xFF3
 25314                           intcon	equ	0xFF2
 25315                           intcon3	equ	0xFF0
 25316                           indf0	equ	0xFEF
 25317                           postinc0	equ	0xFEE
 25318                           plusw0	equ	0xFEB
 25319                           fsr0h	equ	0xFEA
 25320                           fsr0l	equ	0xFE9
 25321                           wreg	equ	0xFE8
 25322                           indf1	equ	0xFE7
 25323                           postinc1	equ	0xFE6
 25324                           postdec1	equ	0xFE5
 25325                           plusw1	equ	0xFE3
 25326                           fsr1h	equ	0xFE2
 25327                           fsr1l	equ	0xFE1
 25328                           indf2	equ	0xFDF
 25329                           postinc2	equ	0xFDE
 25330                           postdec2	equ	0xFDD
 25331                           plusw2	equ	0xFDB
 25332                           fsr2h	equ	0xFDA
 25333                           fsr2l	equ	0xFD9
 25334                           status	equ	0xFD8
 25335                           
 25336 ;; *************** function _enc424j600_setGPDATAWritePointer *****************
 25337 ;; Defined at:
 25338 ;;		line 609 in file "src/enc424j600/ENC424J600.c"
 25339 ;; Parameters:    Size  Location     Type
 25340 ;;  addr            2   10[BANK0 ] unsigned int 
 25341 ;; Auto vars:     Size  Location     Type
 25342 ;;  highByte        1   14[BANK0 ] unsigned char 
 25343 ;;  lowByte         1   13[BANK0 ] unsigned char 
 25344 ;;  opcode          1   12[BANK0 ] unsigned char 
 25345 ;; Return value:  Size  Location     Type
 25346 ;;                  1    wreg      void 
 25347 ;; Registers used:
 25348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25349 ;; Tracked objects:
 25350 ;;		On entry : 0/0
 25351 ;;		On exit  : 0/0
 25352 ;;		Unchanged: 0/0
 25353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25354 ;;      Params:         0       2       0       0       0       0       0       0       0
 25355 ;;      Locals:         0       3       0       0       0       0       0       0       0
 25356 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25357 ;;      Totals:         0       5       0       0       0       0       0       0       0
 25358 ;;Total ram usage:        5 bytes
 25359 ;; Hardware stack levels used:    1
 25360 ;; Hardware stack levels required when called:    6
 25361 ;; This function calls:
 25362 ;;		_enc424j600_writeSPI
 25363 ;; This function is called by:
 25364 ;;		_ethernetController_streamToTransmitBuffer
 25365 ;;		_ethernetController_writeDestinationMACAddress
 25366 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 25367 ;; This function uses a non-reentrant model
 25368 ;;
 25369                           
 25370                           	psect	text97
 25371  005C9A                     __ptext97:
 25372                           	opt stack 0
 25373  005C9A                     _enc424j600_setGPDATAWritePointer:
 25374                           	opt stack 21
 25375                           
 25376                           ;ENC424J600.c: 610: uint8_t opcode = 0x6C;
 25377                           
 25378                           ; BSR set to: 0
 25379                           ;incstack = 0
 25380  005C9A  0E6C               	movlw	108
 25381  005C9C  0100               	movlb	0	; () banked
 25382  005C9E  6F6C               	movwf	enc424j600_setGPDATAWritePointer@opcode& (0+255),b
 25383                           
 25384                           ; BSR set to: 0
 25385                           ;ENC424J600.c: 611: uint8_t lowByte = addr & 0x00ff;
 25386  005CA0  C06A  F06D         	movff	enc424j600_setGPDATAWritePointer@addr,enc424j600_setGPDATAWritePointer@lowByte
 25387                           
 25388                           ;ENC424J600.c: 612: uint8_t highByte = (addr & 0xff00) >> 8;
 25389  005CA4  516B               	movf	(enc424j600_setGPDATAWritePointer@addr+1)& (0+255),w,b
 25390  005CA6  6F6E               	movwf	enc424j600_setGPDATAWritePointer@highByte& (0+255),b
 25391                           
 25392                           ; BSR set to: 0
 25393                           ;ENC424J600.c: 613: PORTBbits.RB4=0;
 25394  005CA8  9881               	bcf	3969,4,c	;volatile
 25395                           
 25396                           ; BSR set to: 0
 25397                           ;ENC424J600.c: 614: enc424j600_writeSPI(&opcode);
 25398  005CAA  0E6C               	movlw	low enc424j600_setGPDATAWritePointer@opcode
 25399  005CAC  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25400  005CAE  0E00               	movlw	high enc424j600_setGPDATAWritePointer@opcode
 25401  005CB0  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25402  005CB2  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25403                           
 25404                           ;ENC424J600.c: 615: enc424j600_writeSPI(&lowByte);
 25405  005CB6  0E6D               	movlw	low enc424j600_setGPDATAWritePointer@lowByte
 25406  005CB8  0100               	movlb	0	; () banked
 25407  005CBA  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25408  005CBC  0E00               	movlw	high enc424j600_setGPDATAWritePointer@lowByte
 25409  005CBE  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25410  005CC0  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25411                           
 25412                           ;ENC424J600.c: 616: enc424j600_writeSPI(&highByte);
 25413  005CC4  0E6E               	movlw	low enc424j600_setGPDATAWritePointer@highByte
 25414  005CC6  0100               	movlb	0	; () banked
 25415  005CC8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25416  005CCA  0E00               	movlw	high enc424j600_setGPDATAWritePointer@highByte
 25417  005CCC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25418  005CCE  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25419                           
 25420                           ;ENC424J600.c: 617: PORTBbits.RB4=1;
 25421  005CD2  8881               	bsf	3969,4,c	;volatile
 25422  005CD4  0012               	return		;funcret
 25423  005CD6                     __end_of_enc424j600_setGPDATAWritePointer:
 25424                           	opt stack 0
 25425                           tblptru	equ	0xFF8
 25426                           tblptrh	equ	0xFF7
 25427                           tblptrl	equ	0xFF6
 25428                           tablat	equ	0xFF5
 25429                           prodh	equ	0xFF4
 25430                           prodl	equ	0xFF3
 25431                           intcon	equ	0xFF2
 25432                           intcon3	equ	0xFF0
 25433                           indf0	equ	0xFEF
 25434                           postinc0	equ	0xFEE
 25435                           plusw0	equ	0xFEB
 25436                           fsr0h	equ	0xFEA
 25437                           fsr0l	equ	0xFE9
 25438                           wreg	equ	0xFE8
 25439                           indf1	equ	0xFE7
 25440                           postinc1	equ	0xFE6
 25441                           postdec1	equ	0xFE5
 25442                           plusw1	equ	0xFE3
 25443                           fsr1h	equ	0xFE2
 25444                           fsr1l	equ	0xFE1
 25445                           indf2	equ	0xFDF
 25446                           postinc2	equ	0xFDE
 25447                           postdec2	equ	0xFDD
 25448                           plusw2	equ	0xFDB
 25449                           fsr2h	equ	0xFDA
 25450                           fsr2l	equ	0xFD9
 25451                           status	equ	0xFD8
 25452                           
 25453 ;; *************** function _ethernetController_sendPacket *****************
 25454 ;; Defined at:
 25455 ;;		line 201 in file "src/enc424j600/ENC424J600.c"
 25456 ;; Parameters:    Size  Location     Type
 25457 ;;  field           9   18[BANK0 ] struct memoryField
 25458 ;; Auto vars:     Size  Location     Type
 25459 ;;		None
 25460 ;; Return value:  Size  Location     Type
 25461 ;;                  1    wreg      void 
 25462 ;; Registers used:
 25463 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25464 ;; Tracked objects:
 25465 ;;		On entry : 0/0
 25466 ;;		On exit  : 0/0
 25467 ;;		Unchanged: 0/0
 25468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25469 ;;      Params:         0       9       0       0       0       0       0       0       0
 25470 ;;      Locals:         0       0       0       0       0       0       0       0       0
 25471 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25472 ;;      Totals:         0       9       0       0       0       0       0       0       0
 25473 ;;Total ram usage:        9 bytes
 25474 ;; Hardware stack levels used:    1
 25475 ;; Hardware stack levels required when called:    8
 25476 ;; This function calls:
 25477 ;;		_enc424j600_setTXLength
 25478 ;;		_enc424j600_setTXStartAddress
 25479 ;;		_enc424j600_writeSingleByte
 25480 ;;		_memory_txFrameClear
 25481 ;; This function is called by:
 25482 ;;		_arp_send
 25483 ;;		_ipv4_sendFrame
 25484 ;; This function uses a non-reentrant model
 25485 ;;
 25486                           
 25487                           	psect	text98
 25488  005FDA                     __ptext98:
 25489                           	opt stack 0
 25490  005FDA                     _ethernetController_sendPacket:
 25491                           	opt stack 20
 25492                           
 25493                           ;ENC424J600.c: 202: enc424j600_setTXStartAddress(field.start);
 25494                           
 25495                           ;incstack = 0
 25496  005FDA  C072  F06E         	movff	ethernetController_sendPacket@field,enc424j600_setTXStartAddress@addr
 25497  005FDE  C073  F06F         	movff	ethernetController_sendPacket@field+1,enc424j600_setTXStartAddress@addr+1
 25498  005FE2  EC9B  F02F         	call	_enc424j600_setTXStartAddress	;wreg free
 25499                           
 25500                           ;ENC424J600.c: 203: enc424j600_setTXLength(field.length);
 25501  005FE6  C076  F06E         	movff	ethernetController_sendPacket@field+4,enc424j600_setTXLength@len
 25502  005FEA  C077  F06F         	movff	ethernetController_sendPacket@field+5,enc424j600_setTXLength@len+1
 25503  005FEE  ECB0  F02F         	call	_enc424j600_setTXLength	;wreg free
 25504                           
 25505                           ;ENC424J600.c: 204: enc424j600_writeSingleByte(0b11010100);
 25506  005FF2  0ED4               	movlw	212
 25507  005FF4  ECC6  F030         	call	_enc424j600_writeSingleByte
 25508                           
 25509                           ;ENC424J600.c: 205: memory_txFrameClear(field.index);
 25510  005FF8  0100               	movlb	0	; () banked
 25511  005FFA  517A               	movf	(ethernetController_sendPacket@field+8)& (0+255),w,b
 25512  005FFC  EC3A  F030         	call	_memory_txFrameClear
 25513  006000  0012               	return		;funcret
 25514  006002                     __end_of_ethernetController_sendPacket:
 25515                           	opt stack 0
 25516                           tblptru	equ	0xFF8
 25517                           tblptrh	equ	0xFF7
 25518                           tblptrl	equ	0xFF6
 25519                           tablat	equ	0xFF5
 25520                           prodh	equ	0xFF4
 25521                           prodl	equ	0xFF3
 25522                           intcon	equ	0xFF2
 25523                           intcon3	equ	0xFF0
 25524                           indf0	equ	0xFEF
 25525                           postinc0	equ	0xFEE
 25526                           plusw0	equ	0xFEB
 25527                           fsr0h	equ	0xFEA
 25528                           fsr0l	equ	0xFE9
 25529                           wreg	equ	0xFE8
 25530                           indf1	equ	0xFE7
 25531                           postinc1	equ	0xFE6
 25532                           postdec1	equ	0xFE5
 25533                           plusw1	equ	0xFE3
 25534                           fsr1h	equ	0xFE2
 25535                           fsr1l	equ	0xFE1
 25536                           indf2	equ	0xFDF
 25537                           postinc2	equ	0xFDE
 25538                           postdec2	equ	0xFDD
 25539                           plusw2	equ	0xFDB
 25540                           fsr2h	equ	0xFDA
 25541                           fsr2l	equ	0xFD9
 25542                           status	equ	0xFD8
 25543                           
 25544 ;; *************** function _memory_txFrameClear *****************
 25545 ;; Defined at:
 25546 ;;		line 222 in file "src/mem/memoryController.c"
 25547 ;; Parameters:    Size  Location     Type
 25548 ;;  index           1    wreg     unsigned char 
 25549 ;; Auto vars:     Size  Location     Type
 25550 ;;  index           1    0[BANK0 ] unsigned char 
 25551 ;; Return value:  Size  Location     Type
 25552 ;;                  1    wreg      void 
 25553 ;; Registers used:
 25554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25555 ;; Tracked objects:
 25556 ;;		On entry : 0/0
 25557 ;;		On exit  : 0/0
 25558 ;;		Unchanged: 0/0
 25559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25560 ;;      Params:         0       0       0       0       0       0       0       0       0
 25561 ;;      Locals:         0       1       0       0       0       0       0       0       0
 25562 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25563 ;;      Totals:         0       1       0       0       0       0       0       0       0
 25564 ;;Total ram usage:        1 bytes
 25565 ;; Hardware stack levels used:    1
 25566 ;; Hardware stack levels required when called:    4
 25567 ;; This function calls:
 25568 ;;		Nothing
 25569 ;; This function is called by:
 25570 ;;		_ethernetController_sendPacket
 25571 ;; This function uses a non-reentrant model
 25572 ;;
 25573                           
 25574                           	psect	text99
 25575  006074                     __ptext99:
 25576                           	opt stack 0
 25577  006074                     _memory_txFrameClear:
 25578                           	opt stack 23
 25579                           
 25580                           ;incstack = 0
 25581                           ;memory_txFrameClear@index stored from wreg
 25582  006074  0100               	movlb	0	; () banked
 25583  006076  6F60               	movwf	memory_txFrameClear@index& (0+255),b
 25584                           
 25585                           ;memoryController.c: 223: occupiedMemory[index].fIsAssigned = 0;
 25586  006078  0100               	movlb	0	; () banked
 25587  00607A  5160               	movf	memory_txFrameClear@index& (0+255),w,b
 25588  00607C  0D09               	mullw	9
 25589  00607E  0E06               	movlw	6
 25590  006080  26F3               	addwf	prodl,f,c
 25591  006082  0E00               	movlw	0
 25592  006084  22F4               	addwfc	prodh,f,c
 25593  006086  0E00               	movlw	low _occupiedMemory
 25594  006088  24F3               	addwf	prodl,w,c
 25595  00608A  6ED9               	movwf	fsr2l,c
 25596  00608C  0E02               	movlw	high _occupiedMemory
 25597  00608E  20F4               	addwfc	prodh,w,c
 25598  006090  6EDA               	movwf	fsr2h,c
 25599  006092  0E00               	movlw	0
 25600  006094  6EDF               	movwf	indf2,c
 25601                           
 25602                           ; BSR set to: 0
 25603  006096  0012               	return		;funcret
 25604  006098                     __end_of_memory_txFrameClear:
 25605                           	opt stack 0
 25606                           tblptru	equ	0xFF8
 25607                           tblptrh	equ	0xFF7
 25608                           tblptrl	equ	0xFF6
 25609                           tablat	equ	0xFF5
 25610                           prodh	equ	0xFF4
 25611                           prodl	equ	0xFF3
 25612                           intcon	equ	0xFF2
 25613                           intcon3	equ	0xFF0
 25614                           indf0	equ	0xFEF
 25615                           postinc0	equ	0xFEE
 25616                           plusw0	equ	0xFEB
 25617                           fsr0h	equ	0xFEA
 25618                           fsr0l	equ	0xFE9
 25619                           wreg	equ	0xFE8
 25620                           indf1	equ	0xFE7
 25621                           postinc1	equ	0xFE6
 25622                           postdec1	equ	0xFE5
 25623                           plusw1	equ	0xFE3
 25624                           fsr1h	equ	0xFE2
 25625                           fsr1l	equ	0xFE1
 25626                           indf2	equ	0xFDF
 25627                           postinc2	equ	0xFDE
 25628                           postdec2	equ	0xFDD
 25629                           plusw2	equ	0xFDB
 25630                           fsr2h	equ	0xFDA
 25631                           fsr2l	equ	0xFD9
 25632                           status	equ	0xFD8
 25633                           
 25634 ;; *************** function _enc424j600_writeSingleByte *****************
 25635 ;; Defined at:
 25636 ;;		line 512 in file "src/enc424j600/ENC424J600.c"
 25637 ;; Parameters:    Size  Location     Type
 25638 ;;  opcode          1    wreg     unsigned char 
 25639 ;; Auto vars:     Size  Location     Type
 25640 ;;  opcode          1   10[BANK0 ] unsigned char 
 25641 ;; Return value:  Size  Location     Type
 25642 ;;                  1    wreg      void 
 25643 ;; Registers used:
 25644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25645 ;; Tracked objects:
 25646 ;;		On entry : 0/0
 25647 ;;		On exit  : 0/0
 25648 ;;		Unchanged: 0/0
 25649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25650 ;;      Params:         0       0       0       0       0       0       0       0       0
 25651 ;;      Locals:         0       1       0       0       0       0       0       0       0
 25652 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25653 ;;      Totals:         0       1       0       0       0       0       0       0       0
 25654 ;;Total ram usage:        1 bytes
 25655 ;; Hardware stack levels used:    1
 25656 ;; Hardware stack levels required when called:    6
 25657 ;; This function calls:
 25658 ;;		_enc424j600_writeSPI
 25659 ;; This function is called by:
 25660 ;;		_ethernetController_softReset
 25661 ;;		_ethernetController_sendPacket
 25662 ;;		_ethernetController_dropPacket
 25663 ;;		_enc424j600_enableReception
 25664 ;;		_enc424j600_disableReception
 25665 ;; This function uses a non-reentrant model
 25666 ;;
 25667                           
 25668                           	psect	text100
 25669  00618C                     __ptext100:
 25670                           	opt stack 0
 25671  00618C                     _enc424j600_writeSingleByte:
 25672                           	opt stack 21
 25673                           
 25674                           ; BSR set to: 0
 25675                           ;incstack = 0
 25676                           ;enc424j600_writeSingleByte@opcode stored from wreg
 25677  00618C  0100               	movlb	0	; () banked
 25678  00618E  6F6A               	movwf	enc424j600_writeSingleByte@opcode& (0+255),b
 25679                           
 25680                           ;ENC424J600.c: 513: PORTBbits.RB4=0;
 25681  006190  9881               	bcf	3969,4,c	;volatile
 25682                           
 25683                           ;ENC424J600.c: 514: enc424j600_writeSPI(&opcode);
 25684  006192  0E6A               	movlw	low enc424j600_writeSingleByte@opcode
 25685  006194  0100               	movlb	0	; () banked
 25686  006196  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25687  006198  0E00               	movlw	high enc424j600_writeSingleByte@opcode
 25688  00619A  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25689  00619C  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25690                           
 25691                           ;ENC424J600.c: 515: PORTBbits.RB4=1;
 25692  0061A0  8881               	bsf	3969,4,c	;volatile
 25693  0061A2  0012               	return		;funcret
 25694  0061A4                     __end_of_enc424j600_writeSingleByte:
 25695                           	opt stack 0
 25696                           tblptru	equ	0xFF8
 25697                           tblptrh	equ	0xFF7
 25698                           tblptrl	equ	0xFF6
 25699                           tablat	equ	0xFF5
 25700                           prodh	equ	0xFF4
 25701                           prodl	equ	0xFF3
 25702                           intcon	equ	0xFF2
 25703                           intcon3	equ	0xFF0
 25704                           indf0	equ	0xFEF
 25705                           postinc0	equ	0xFEE
 25706                           plusw0	equ	0xFEB
 25707                           fsr0h	equ	0xFEA
 25708                           fsr0l	equ	0xFE9
 25709                           wreg	equ	0xFE8
 25710                           indf1	equ	0xFE7
 25711                           postinc1	equ	0xFE6
 25712                           postdec1	equ	0xFE5
 25713                           plusw1	equ	0xFE3
 25714                           fsr1h	equ	0xFE2
 25715                           fsr1l	equ	0xFE1
 25716                           indf2	equ	0xFDF
 25717                           postinc2	equ	0xFDE
 25718                           postdec2	equ	0xFDD
 25719                           plusw2	equ	0xFDB
 25720                           fsr2h	equ	0xFDA
 25721                           fsr2l	equ	0xFD9
 25722                           status	equ	0xFD8
 25723                           
 25724 ;; *************** function _enc424j600_setTXStartAddress *****************
 25725 ;; Defined at:
 25726 ;;		line 602 in file "src/enc424j600/ENC424J600.c"
 25727 ;; Parameters:    Size  Location     Type
 25728 ;;  addr            2   14[BANK0 ] unsigned int 
 25729 ;; Auto vars:     Size  Location     Type
 25730 ;;  highByte        1   17[BANK0 ] unsigned char 
 25731 ;;  lowByte         1   16[BANK0 ] unsigned char 
 25732 ;; Return value:  Size  Location     Type
 25733 ;;                  1    wreg      void 
 25734 ;; Registers used:
 25735 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25736 ;; Tracked objects:
 25737 ;;		On entry : 0/0
 25738 ;;		On exit  : 0/0
 25739 ;;		Unchanged: 0/0
 25740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25741 ;;      Params:         0       2       0       0       0       0       0       0       0
 25742 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25743 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25744 ;;      Totals:         0       4       0       0       0       0       0       0       0
 25745 ;;Total ram usage:        4 bytes
 25746 ;; Hardware stack levels used:    1
 25747 ;; Hardware stack levels required when called:    7
 25748 ;; This function calls:
 25749 ;;		_enc424j600_writeControlRegisterUnbanked
 25750 ;; This function is called by:
 25751 ;;		_ethernetController_sendPacket
 25752 ;; This function uses a non-reentrant model
 25753 ;;
 25754                           
 25755                           	psect	text101
 25756  005F36                     __ptext101:
 25757                           	opt stack 0
 25758  005F36                     _enc424j600_setTXStartAddress:
 25759                           	opt stack 20
 25760                           
 25761                           ;ENC424J600.c: 603: uint8_t lowByte = addr & 0xff;
 25762                           
 25763                           ;incstack = 0
 25764  005F36  C06E  F070         	movff	enc424j600_setTXStartAddress@addr,enc424j600_setTXStartAddress@lowByte
 25765                           
 25766                           ;ENC424J600.c: 604: uint8_t highByte = (addr & 0xff00) >> 8;
 25767  005F3A  0100               	movlb	0	; () banked
 25768  005F3C  516F               	movf	(enc424j600_setTXStartAddress@addr+1)& (0+255),w,b
 25769  005F3E  6F71               	movwf	enc424j600_setTXStartAddress@highByte& (0+255),b
 25770                           
 25771                           ; BSR set to: 0
 25772                           ;ENC424J600.c: 605: enc424j600_writeControlRegisterUnbanked(0x00 + 0x00, &lowByte);
 25773  005F40  0E70               	movlw	low enc424j600_setTXStartAddress@lowByte
 25774  005F42  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 25775  005F44  0E00               	movlw	high enc424j600_setTXStartAddress@lowByte
 25776  005F46  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 25777  005F48  0E00               	movlw	0
 25778  005F4A  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 25779                           
 25780                           ;ENC424J600.c: 606: enc424j600_writeControlRegisterUnbanked(0x01 + 0x00, &highByte);
 25781  005F4E  0E71               	movlw	low enc424j600_setTXStartAddress@highByte
 25782  005F50  0100               	movlb	0	; () banked
 25783  005F52  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 25784  005F54  0E00               	movlw	high enc424j600_setTXStartAddress@highByte
 25785  005F56  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 25786  005F58  0E01               	movlw	1
 25787  005F5A  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 25788  005F5E  0012               	return		;funcret
 25789  005F60                     __end_of_enc424j600_setTXStartAddress:
 25790                           	opt stack 0
 25791                           tblptru	equ	0xFF8
 25792                           tblptrh	equ	0xFF7
 25793                           tblptrl	equ	0xFF6
 25794                           tablat	equ	0xFF5
 25795                           prodh	equ	0xFF4
 25796                           prodl	equ	0xFF3
 25797                           intcon	equ	0xFF2
 25798                           intcon3	equ	0xFF0
 25799                           indf0	equ	0xFEF
 25800                           postinc0	equ	0xFEE
 25801                           plusw0	equ	0xFEB
 25802                           fsr0h	equ	0xFEA
 25803                           fsr0l	equ	0xFE9
 25804                           wreg	equ	0xFE8
 25805                           indf1	equ	0xFE7
 25806                           postinc1	equ	0xFE6
 25807                           postdec1	equ	0xFE5
 25808                           plusw1	equ	0xFE3
 25809                           fsr1h	equ	0xFE2
 25810                           fsr1l	equ	0xFE1
 25811                           indf2	equ	0xFDF
 25812                           postinc2	equ	0xFDE
 25813                           postdec2	equ	0xFDD
 25814                           plusw2	equ	0xFDB
 25815                           fsr2h	equ	0xFDA
 25816                           fsr2l	equ	0xFD9
 25817                           status	equ	0xFD8
 25818                           
 25819 ;; *************** function _enc424j600_setTXLength *****************
 25820 ;; Defined at:
 25821 ;;		line 577 in file "src/enc424j600/ENC424J600.c"
 25822 ;; Parameters:    Size  Location     Type
 25823 ;;  len             2   14[BANK0 ] unsigned int 
 25824 ;; Auto vars:     Size  Location     Type
 25825 ;;  highByte        1   17[BANK0 ] unsigned char 
 25826 ;;  lowByte         1   16[BANK0 ] unsigned char 
 25827 ;; Return value:  Size  Location     Type
 25828 ;;                  1    wreg      void 
 25829 ;; Registers used:
 25830 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25831 ;; Tracked objects:
 25832 ;;		On entry : 0/0
 25833 ;;		On exit  : 0/0
 25834 ;;		Unchanged: 0/0
 25835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25836 ;;      Params:         0       2       0       0       0       0       0       0       0
 25837 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25838 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25839 ;;      Totals:         0       4       0       0       0       0       0       0       0
 25840 ;;Total ram usage:        4 bytes
 25841 ;; Hardware stack levels used:    1
 25842 ;; Hardware stack levels required when called:    7
 25843 ;; This function calls:
 25844 ;;		_enc424j600_writeControlRegisterUnbanked
 25845 ;; This function is called by:
 25846 ;;		_ethernetController_sendPacket
 25847 ;; This function uses a non-reentrant model
 25848 ;;
 25849                           
 25850                           	psect	text102
 25851  005F60                     __ptext102:
 25852                           	opt stack 0
 25853  005F60                     _enc424j600_setTXLength:
 25854                           	opt stack 20
 25855                           
 25856                           ;ENC424J600.c: 578: uint8_t lowByte = len & 0x00ff;
 25857                           
 25858                           ;incstack = 0
 25859  005F60  C06E  F070         	movff	enc424j600_setTXLength@len,enc424j600_setTXLength@lowByte
 25860                           
 25861                           ;ENC424J600.c: 579: uint8_t highByte = len >> 8;
 25862  005F64  0100               	movlb	0	; () banked
 25863  005F66  516F               	movf	(enc424j600_setTXLength@len+1)& (0+255),w,b
 25864  005F68  6F71               	movwf	enc424j600_setTXLength@highByte& (0+255),b
 25865                           
 25866                           ; BSR set to: 0
 25867                           ;ENC424J600.c: 580: enc424j600_writeControlRegisterUnbanked(0x02 + 0x00, &lowByte);
 25868  005F6A  0E70               	movlw	low enc424j600_setTXLength@lowByte
 25869  005F6C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 25870  005F6E  0E00               	movlw	high enc424j600_setTXLength@lowByte
 25871  005F70  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 25872  005F72  0E02               	movlw	2
 25873  005F74  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 25874                           
 25875                           ;ENC424J600.c: 581: enc424j600_writeControlRegisterUnbanked(0x03 + 0x00, &highByte);
 25876  005F78  0E71               	movlw	low enc424j600_setTXLength@highByte
 25877  005F7A  0100               	movlb	0	; () banked
 25878  005F7C  6F6A               	movwf	enc424j600_writeControlRegisterUnbanked@data& (0+255),b
 25879  005F7E  0E00               	movlw	high enc424j600_setTXLength@highByte
 25880  005F80  6F6B               	movwf	(enc424j600_writeControlRegisterUnbanked@data+1)& (0+255),b
 25881  005F82  0E03               	movlw	3
 25882  005F84  ECC1  F02E         	call	_enc424j600_writeControlRegisterUnbanked
 25883  005F88  0012               	return		;funcret
 25884  005F8A                     __end_of_enc424j600_setTXLength:
 25885                           	opt stack 0
 25886                           tblptru	equ	0xFF8
 25887                           tblptrh	equ	0xFF7
 25888                           tblptrl	equ	0xFF6
 25889                           tablat	equ	0xFF5
 25890                           prodh	equ	0xFF4
 25891                           prodl	equ	0xFF3
 25892                           intcon	equ	0xFF2
 25893                           intcon3	equ	0xFF0
 25894                           indf0	equ	0xFEF
 25895                           postinc0	equ	0xFEE
 25896                           plusw0	equ	0xFEB
 25897                           fsr0h	equ	0xFEA
 25898                           fsr0l	equ	0xFE9
 25899                           wreg	equ	0xFE8
 25900                           indf1	equ	0xFE7
 25901                           postinc1	equ	0xFE6
 25902                           postdec1	equ	0xFE5
 25903                           plusw1	equ	0xFE3
 25904                           fsr1h	equ	0xFE2
 25905                           fsr1l	equ	0xFE1
 25906                           indf2	equ	0xFDF
 25907                           postinc2	equ	0xFDE
 25908                           postdec2	equ	0xFDD
 25909                           plusw2	equ	0xFDB
 25910                           fsr2h	equ	0xFDA
 25911                           fsr2l	equ	0xFD9
 25912                           status	equ	0xFD8
 25913                           
 25914 ;; *************** function _enc424j600_writeControlRegisterUnbanked *****************
 25915 ;; Defined at:
 25916 ;;		line 518 in file "src/enc424j600/ENC424J600.c"
 25917 ;; Parameters:    Size  Location     Type
 25918 ;;  addr            1    wreg     unsigned char 
 25919 ;;  data            2   10[BANK0 ] PTR unsigned char 
 25920 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 25921 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 25922 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setTXStartAddress@highByte(1), enc424j600_setTXStartAd
      +dress@lowByte(1), enc424j600_setTXLength@highByte(1), 
 25923 ;;		 -> enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc424j600_readPHYRegister@unusedBits(1),
      + enc424j600_readPHYRegister@PHYaddress(1), 
 25924 ;;		 -> ethernetController_setLEDConfig@data(1), mac.address(6), ethernetController_setMacAddress@mac(6), ethernetContro
      +ller_softReset@dataToSend(2), 
 25925 ;; Auto vars:     Size  Location     Type
 25926 ;;  addr            1   12[BANK0 ] unsigned char 
 25927 ;;  opcode          1   13[BANK0 ] unsigned char 
 25928 ;; Return value:  Size  Location     Type
 25929 ;;                  1    wreg      void 
 25930 ;; Registers used:
 25931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25932 ;; Tracked objects:
 25933 ;;		On entry : 0/0
 25934 ;;		On exit  : 0/0
 25935 ;;		Unchanged: 0/0
 25936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 25937 ;;      Params:         0       2       0       0       0       0       0       0       0
 25938 ;;      Locals:         0       2       0       0       0       0       0       0       0
 25939 ;;      Temps:          0       0       0       0       0       0       0       0       0
 25940 ;;      Totals:         0       4       0       0       0       0       0       0       0
 25941 ;;Total ram usage:        4 bytes
 25942 ;; Hardware stack levels used:    1
 25943 ;; Hardware stack levels required when called:    6
 25944 ;; This function calls:
 25945 ;;		_enc424j600_writeSPI
 25946 ;; This function is called by:
 25947 ;;		_ethernetController_softReset
 25948 ;;		_ethernetController_setLEDConfig
 25949 ;;		_enc424j600_readPHYRegister
 25950 ;;		_enc424j600_setTXLength
 25951 ;;		_enc424j600_setTXStartAddress
 25952 ;;		_enc424j600_setRXBufferStartAddress
 25953 ;;		_enc424j600_setRXTailPointer
 25954 ;;		_enc424j600_enableAutoMACInsertion
 25955 ;;		_enc424j600_clearInterruptFlag
 25956 ;;		_ethernetController_setMacAddress
 25957 ;;		_enc424j600_disableAutoMACInsertion
 25958 ;;		_enc424j600_enable
 25959 ;;		_enc424j600_disable
 25960 ;; This function uses a non-reentrant model
 25961 ;;
 25962                           
 25963                           	psect	text103
 25964  005D82                     __ptext103:
 25965                           	opt stack 0
 25966  005D82                     _enc424j600_writeControlRegisterUnbanked:
 25967                           	opt stack 20
 25968                           
 25969                           ;incstack = 0
 25970                           ;enc424j600_writeControlRegisterUnbanked@addr stored from wreg
 25971  005D82  0100               	movlb	0	; () banked
 25972  005D84  6F6C               	movwf	enc424j600_writeControlRegisterUnbanked@addr& (0+255),b
 25973                           
 25974                           ;ENC424J600.c: 519: uint8_t opcode = 0x22;
 25975  005D86  0E22               	movlw	34
 25976  005D88  0100               	movlb	0	; () banked
 25977  005D8A  6F6D               	movwf	enc424j600_writeControlRegisterUnbanked@opcode& (0+255),b
 25978                           
 25979                           ; BSR set to: 0
 25980                           ;ENC424J600.c: 520: PORTBbits.RB4=0;
 25981  005D8C  9881               	bcf	3969,4,c	;volatile
 25982                           
 25983                           ; BSR set to: 0
 25984                           ;ENC424J600.c: 521: enc424j600_writeSPI(&opcode);
 25985  005D8E  0E6D               	movlw	low enc424j600_writeControlRegisterUnbanked@opcode
 25986  005D90  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25987  005D92  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@opcode
 25988  005D94  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25989  005D96  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25990                           
 25991                           ;ENC424J600.c: 522: enc424j600_writeSPI(&addr);
 25992  005D9A  0E6C               	movlw	low enc424j600_writeControlRegisterUnbanked@addr
 25993  005D9C  0100               	movlb	0	; () banked
 25994  005D9E  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 25995  005DA0  0E00               	movlw	high enc424j600_writeControlRegisterUnbanked@addr
 25996  005DA2  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 25997  005DA4  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 25998                           
 25999                           ;ENC424J600.c: 523: enc424j600_writeSPI(data);
 26000  005DA8  C06A  F060         	movff	enc424j600_writeControlRegisterUnbanked@data,enc424j600_writeSPI@data
 26001  005DAC  C06B  F061         	movff	enc424j600_writeControlRegisterUnbanked@data+1,enc424j600_writeSPI@data+1
 26002  005DB0  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 26003                           
 26004                           ;ENC424J600.c: 524: PORTBbits.RB4=1;
 26005  005DB4  8881               	bsf	3969,4,c	;volatile
 26006  005DB6  0012               	return		;funcret
 26007  005DB8                     __end_of_enc424j600_writeControlRegisterUnbanked:
 26008                           	opt stack 0
 26009                           tblptru	equ	0xFF8
 26010                           tblptrh	equ	0xFF7
 26011                           tblptrl	equ	0xFF6
 26012                           tablat	equ	0xFF5
 26013                           prodh	equ	0xFF4
 26014                           prodl	equ	0xFF3
 26015                           intcon	equ	0xFF2
 26016                           intcon3	equ	0xFF0
 26017                           indf0	equ	0xFEF
 26018                           postinc0	equ	0xFEE
 26019                           plusw0	equ	0xFEB
 26020                           fsr0h	equ	0xFEA
 26021                           fsr0l	equ	0xFE9
 26022                           wreg	equ	0xFE8
 26023                           indf1	equ	0xFE7
 26024                           postinc1	equ	0xFE6
 26025                           postdec1	equ	0xFE5
 26026                           plusw1	equ	0xFE3
 26027                           fsr1h	equ	0xFE2
 26028                           fsr1l	equ	0xFE1
 26029                           indf2	equ	0xFDF
 26030                           postinc2	equ	0xFDE
 26031                           postdec2	equ	0xFDD
 26032                           plusw2	equ	0xFDB
 26033                           fsr2h	equ	0xFDA
 26034                           fsr2l	equ	0xFD9
 26035                           status	equ	0xFD8
 26036                           
 26037 ;; *************** function _ethernetController_getSourceMACAddress *****************
 26038 ;; Defined at:
 26039 ;;		line 268 in file "src/enc424j600/ENC424J600.c"
 26040 ;; Parameters:    Size  Location     Type
 26041 ;;  field           9   15[BANK0 ] struct memoryField
 26042 ;; Auto vars:     Size  Location     Type
 26043 ;;  temp            1   31[BANK0 ] unsigned char 
 26044 ;;  i               1   32[BANK0 ] unsigned char 
 26045 ;;  sourceAddres    6   25[BANK0 ] struct macaddress
 26046 ;;  opcode          1   24[BANK0 ] unsigned char 
 26047 ;; Return value:  Size  Location     Type
 26048 ;;                  6   15[BANK0 ] struct macaddress
 26049 ;; Registers used:
 26050 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26051 ;; Tracked objects:
 26052 ;;		On entry : 0/0
 26053 ;;		On exit  : 0/0
 26054 ;;		Unchanged: 0/0
 26055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26056 ;;      Params:         0       9       0       0       0       0       0       0       0
 26057 ;;      Locals:         0       9       0       0       0       0       0       0       0
 26058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26059 ;;      Totals:         0      18       0       0       0       0       0       0       0
 26060 ;;Total ram usage:       18 bytes
 26061 ;; Hardware stack levels used:    1
 26062 ;; Hardware stack levels required when called:    7
 26063 ;; This function calls:
 26064 ;;		_enc424j600_readSPI
 26065 ;;		_enc424j600_setERXDATAReadPointer
 26066 ;;		_enc424j600_writeSPI
 26067 ;; This function is called by:
 26068 ;;		_arp_send
 26069 ;; This function uses a non-reentrant model
 26070 ;;
 26071                           
 26072                           	psect	text104
 26073  0055CC                     __ptext104:
 26074                           	opt stack 0
 26075  0055CC                     _ethernetController_getSourceMACAddress:
 26076                           	opt stack 19
 26077                           
 26078                           ;ENC424J600.c: 269: macaddress_t sourceAddress;
 26079                           ;ENC424J600.c: 270: enc424j600_setERXDATAReadPointer(field.start + 14);
 26080                           
 26081                           ;incstack = 0
 26082  0055CC  0E0E               	movlw	14
 26083  0055CE  0100               	movlb	0	; () banked
 26084  0055D0  256F               	addwf	ethernetController_getSourceMACAddress@field& (0+255),w,b
 26085  0055D2  6F6A               	movwf	enc424j600_setERXDATAReadPointer@addr& (0+255),b
 26086  0055D4  0E00               	movlw	0
 26087  0055D6  2170               	addwfc	(ethernetController_getSourceMACAddress@field+1)& (0+255),w,b
 26088  0055D8  6F6B               	movwf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),b
 26089  0055DA  EC6B  F02E         	call	_enc424j600_setERXDATAReadPointer	;wreg free
 26090                           
 26091                           ;ENC424J600.c: 271: uint8_t opcode = 0x2C;
 26092  0055DE  0E2C               	movlw	44
 26093  0055E0  0100               	movlb	0	; () banked
 26094  0055E2  6F78               	movwf	ethernetController_getSourceMACAddress@opcode& (0+255),b
 26095                           
 26096                           ; BSR set to: 0
 26097                           ;ENC424J600.c: 272: PORTBbits.RB4=0;
 26098  0055E4  9881               	bcf	3969,4,c	;volatile
 26099                           
 26100                           ; BSR set to: 0
 26101                           ;ENC424J600.c: 273: enc424j600_writeSPI(&opcode);
 26102  0055E6  0E78               	movlw	low ethernetController_getSourceMACAddress@opcode
 26103  0055E8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 26104  0055EA  0E00               	movlw	high ethernetController_getSourceMACAddress@opcode
 26105  0055EC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 26106  0055EE  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 26107                           
 26108                           ;ENC424J600.c: 274: for (uint8_t i = 0; i < 6; i++) {
 26109  0055F2  0E00               	movlw	0
 26110  0055F4  0100               	movlb	0	; () banked
 26111  0055F6  6F80               	movwf	ethernetController_getSourceMACAddress@i& (0+255),b
 26112  0055F8                     l9503:
 26113                           
 26114                           ; BSR set to: 0
 26115  0055F8  0E05               	movlw	5
 26116  0055FA  6580               	cpfsgt	ethernetController_getSourceMACAddress@i& (0+255),b
 26117  0055FC  D001               	goto	l155
 26118  0055FE  D013               	goto	u10740
 26119  005600                     l155:
 26120                           
 26121                           ; BSR set to: 0
 26122                           ;ENC424J600.c: 275: uint8_t temp;
 26123                           ;ENC424J600.c: 276: enc424j600_readSPI(&temp);
 26124                           
 26125                           ; BSR set to: 0
 26126  005600  0E7F               	movlw	low ethernetController_getSourceMACAddress@temp
 26127  005602  6F60               	movwf	enc424j600_readSPI@data& (0+255),b
 26128  005604  0E00               	movlw	high ethernetController_getSourceMACAddress@temp
 26129  005606  6F61               	movwf	(enc424j600_readSPI@data+1)& (0+255),b
 26130  005608  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 26131                           
 26132                           ;ENC424J600.c: 277: sourceAddress.address[i] = temp;
 26133  00560C  0100               	movlb	0	; () banked
 26134  00560E  5180               	movf	ethernetController_getSourceMACAddress@i& (0+255),w,b
 26135  005610  0D01               	mullw	1
 26136  005612  0E79               	movlw	low ethernetController_getSourceMACAddress@sourceAddress
 26137  005614  24F3               	addwf	prodl,w,c
 26138  005616  6ED9               	movwf	fsr2l,c
 26139  005618  0E00               	movlw	high ethernetController_getSourceMACAddress@sourceAddress
 26140  00561A  20F4               	addwfc	prodh,w,c
 26141  00561C  6EDA               	movwf	fsr2h,c
 26142  00561E  C07F  FFDF         	movff	ethernetController_getSourceMACAddress@temp,indf2
 26143                           
 26144                           ; BSR set to: 0
 26145  005622  2B80               	incf	ethernetController_getSourceMACAddress@i& (0+255),f,b
 26146  005624  D7E9               	goto	l9503
 26147  005626                     u10740:
 26148                           
 26149                           ; BSR set to: 0
 26150                           ;ENC424J600.c: 278: }
 26151                           ;ENC424J600.c: 279: PORTBbits.RB4=1;
 26152  005626  8881               	bsf	3969,4,c	;volatile
 26153                           
 26154                           ; BSR set to: 0
 26155                           ;ENC424J600.c: 280: return sourceAddress;
 26156  005628  EE20  F079         	lfsr	2,ethernetController_getSourceMACAddress@sourceAddress
 26157  00562C  EE00  F06F         	lfsr	0,?_ethernetController_getSourceMACAddress
 26158  005630  0E05               	movlw	5
 26159  005632                     u10751:
 26160  005632  CFDB FFEB          	movff	plusw2,plusw0
 26161  005636  06E8               	decf	wreg,f,c
 26162  005638  E2FC               	bc	u10751
 26163  00563A  0012               	return	
 26164  00563C                     __end_of_ethernetController_getSourceMACAddress:
 26165                           	opt stack 0
 26166                           tblptru	equ	0xFF8
 26167                           tblptrh	equ	0xFF7
 26168                           tblptrl	equ	0xFF6
 26169                           tablat	equ	0xFF5
 26170                           prodh	equ	0xFF4
 26171                           prodl	equ	0xFF3
 26172                           intcon	equ	0xFF2
 26173                           intcon3	equ	0xFF0
 26174                           indf0	equ	0xFEF
 26175                           postinc0	equ	0xFEE
 26176                           plusw0	equ	0xFEB
 26177                           fsr0h	equ	0xFEA
 26178                           fsr0l	equ	0xFE9
 26179                           wreg	equ	0xFE8
 26180                           indf1	equ	0xFE7
 26181                           postinc1	equ	0xFE6
 26182                           postdec1	equ	0xFE5
 26183                           plusw1	equ	0xFE3
 26184                           fsr1h	equ	0xFE2
 26185                           fsr1l	equ	0xFE1
 26186                           indf2	equ	0xFDF
 26187                           postinc2	equ	0xFDE
 26188                           postdec2	equ	0xFDD
 26189                           plusw2	equ	0xFDB
 26190                           fsr2h	equ	0xFDA
 26191                           fsr2l	equ	0xFD9
 26192                           status	equ	0xFD8
 26193                           
 26194 ;; *************** function _enc424j600_setERXDATAReadPointer *****************
 26195 ;; Defined at:
 26196 ;;		line 631 in file "src/enc424j600/ENC424J600.c"
 26197 ;; Parameters:    Size  Location     Type
 26198 ;;  addr            2   10[BANK0 ] unsigned int 
 26199 ;; Auto vars:     Size  Location     Type
 26200 ;;  highByte        1   14[BANK0 ] unsigned char 
 26201 ;;  lowByte         1   13[BANK0 ] unsigned char 
 26202 ;;  opcode          1   12[BANK0 ] unsigned char 
 26203 ;; Return value:  Size  Location     Type
 26204 ;;                  1    wreg      void 
 26205 ;; Registers used:
 26206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26207 ;; Tracked objects:
 26208 ;;		On entry : 0/0
 26209 ;;		On exit  : 0/0
 26210 ;;		Unchanged: 0/0
 26211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26212 ;;      Params:         0       2       0       0       0       0       0       0       0
 26213 ;;      Locals:         0       3       0       0       0       0       0       0       0
 26214 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26215 ;;      Totals:         0       5       0       0       0       0       0       0       0
 26216 ;;Total ram usage:        5 bytes
 26217 ;; Hardware stack levels used:    1
 26218 ;; Hardware stack levels required when called:    6
 26219 ;; This function calls:
 26220 ;;		_enc424j600_writeSPI
 26221 ;; This function is called by:
 26222 ;;		_ethernetController_getSourceMACAddress
 26223 ;;		_ethernetController_getEtherTypeField
 26224 ;;		_ethernetController_getRSV
 26225 ;;		_ethernetController_updateNextPacketPointer
 26226 ;;		_ethernetController_streamFromRXBuffer
 26227 ;;		_ethernetController_getDestinationMACAddress
 26228 ;; This function uses a non-reentrant model
 26229 ;;
 26230                           
 26231                           	psect	text105
 26232  005CD6                     __ptext105:
 26233                           	opt stack 0
 26234  005CD6                     _enc424j600_setERXDATAReadPointer:
 26235                           	opt stack 19
 26236                           
 26237                           ;ENC424J600.c: 632: uint8_t opcode = 0x64;
 26238                           
 26239                           ; BSR set to: 0
 26240                           ;incstack = 0
 26241  005CD6  0E64               	movlw	100
 26242  005CD8  0100               	movlb	0	; () banked
 26243  005CDA  6F6C               	movwf	enc424j600_setERXDATAReadPointer@opcode& (0+255),b
 26244                           
 26245                           ; BSR set to: 0
 26246                           ;ENC424J600.c: 633: uint8_t lowByte = addr & 0x00ff;
 26247  005CDC  C06A  F06D         	movff	enc424j600_setERXDATAReadPointer@addr,enc424j600_setERXDATAReadPointer@lowByte
 26248                           
 26249                           ;ENC424J600.c: 634: uint8_t highByte = (addr >> 8) & 0xff;
 26250  005CE0  516B               	movf	(enc424j600_setERXDATAReadPointer@addr+1)& (0+255),w,b
 26251  005CE2  6F6E               	movwf	enc424j600_setERXDATAReadPointer@highByte& (0+255),b
 26252                           
 26253                           ; BSR set to: 0
 26254                           ;ENC424J600.c: 635: PORTBbits.RB4=0;
 26255  005CE4  9881               	bcf	3969,4,c	;volatile
 26256                           
 26257                           ; BSR set to: 0
 26258                           ;ENC424J600.c: 636: enc424j600_writeSPI(&opcode);
 26259  005CE6  0E6C               	movlw	low enc424j600_setERXDATAReadPointer@opcode
 26260  005CE8  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 26261  005CEA  0E00               	movlw	high enc424j600_setERXDATAReadPointer@opcode
 26262  005CEC  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 26263  005CEE  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 26264                           
 26265                           ;ENC424J600.c: 637: enc424j600_writeSPI(&lowByte);
 26266  005CF2  0E6D               	movlw	low enc424j600_setERXDATAReadPointer@lowByte
 26267  005CF4  0100               	movlb	0	; () banked
 26268  005CF6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 26269  005CF8  0E00               	movlw	high enc424j600_setERXDATAReadPointer@lowByte
 26270  005CFA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 26271  005CFC  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 26272                           
 26273                           ;ENC424J600.c: 638: enc424j600_writeSPI(&highByte);
 26274  005D00  0E6E               	movlw	low enc424j600_setERXDATAReadPointer@highByte
 26275  005D02  0100               	movlb	0	; () banked
 26276  005D04  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 26277  005D06  0E00               	movlw	high enc424j600_setERXDATAReadPointer@highByte
 26278  005D08  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 26279  005D0A  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 26280                           
 26281                           ;ENC424J600.c: 639: PORTBbits.RB4=1;
 26282  005D0E  8881               	bsf	3969,4,c	;volatile
 26283  005D10  0012               	return		;funcret
 26284  005D12                     __end_of_enc424j600_setERXDATAReadPointer:
 26285                           	opt stack 0
 26286                           tblptru	equ	0xFF8
 26287                           tblptrh	equ	0xFF7
 26288                           tblptrl	equ	0xFF6
 26289                           tablat	equ	0xFF5
 26290                           prodh	equ	0xFF4
 26291                           prodl	equ	0xFF3
 26292                           intcon	equ	0xFF2
 26293                           intcon3	equ	0xFF0
 26294                           indf0	equ	0xFEF
 26295                           postinc0	equ	0xFEE
 26296                           plusw0	equ	0xFEB
 26297                           fsr0h	equ	0xFEA
 26298                           fsr0l	equ	0xFE9
 26299                           wreg	equ	0xFE8
 26300                           indf1	equ	0xFE7
 26301                           postinc1	equ	0xFE6
 26302                           postdec1	equ	0xFE5
 26303                           plusw1	equ	0xFE3
 26304                           fsr1h	equ	0xFE2
 26305                           fsr1l	equ	0xFE1
 26306                           indf2	equ	0xFDF
 26307                           postinc2	equ	0xFDE
 26308                           postdec2	equ	0xFDD
 26309                           plusw2	equ	0xFDB
 26310                           fsr2h	equ	0xFDA
 26311                           fsr2l	equ	0xFD9
 26312                           status	equ	0xFD8
 26313                           
 26314 ;; *************** function _arp_checkForEntry *****************
 26315 ;; Defined at:
 26316 ;;		line 465 in file "src/stack/protocols/arp.c"
 26317 ;; Parameters:    Size  Location     Type
 26318 ;;  ip              4    7[BANK0 ] struct ipv4_address
 26319 ;;  index           2   11[BANK0 ] PTR unsigned char 
 26320 ;;		 -> ipv4_sendFrame@index(1), arp_gratuitous@index(1), arp_probe@index(1), 
 26321 ;; Auto vars:     Size  Location     Type
 26322 ;;  i               1   21[BANK0 ] unsigned char 
 26323 ;; Return value:  Size  Location     Type
 26324 ;;                  1    wreg      unsigned char 
 26325 ;; Registers used:
 26326 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26327 ;; Tracked objects:
 26328 ;;		On entry : 0/0
 26329 ;;		On exit  : 0/0
 26330 ;;		Unchanged: 0/0
 26331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26332 ;;      Params:         0       6       0       0       0       0       0       0       0
 26333 ;;      Locals:         0       1       0       0       0       0       0       0       0
 26334 ;;      Temps:          0       8       0       0       0       0       0       0       0
 26335 ;;      Totals:         0      15       0       0       0       0       0       0       0
 26336 ;;Total ram usage:       15 bytes
 26337 ;; Hardware stack levels used:    1
 26338 ;; Hardware stack levels required when called:    5
 26339 ;; This function calls:
 26340 ;;		_getMillis
 26341 ;;		_ipv4_cmp
 26342 ;; This function is called by:
 26343 ;;		_arp_probe
 26344 ;;		_arp_gratuitous
 26345 ;;		_ipv4_sendFrame
 26346 ;; This function uses a non-reentrant model
 26347 ;;
 26348                           
 26349                           	psect	text106
 26350  004B08                     __ptext106:
 26351                           	opt stack 0
 26352  004B08                     _arp_checkForEntry:
 26353                           	opt stack 23
 26354                           
 26355                           ;arp.c: 466: for (uint8_t i = 0; i < 8u; i++) {
 26356                           
 26357                           ;incstack = 0
 26358  004B08  0E00               	movlw	0
 26359  004B0A  0100               	movlb	0	; () banked
 26360  004B0C  6F75               	movwf	arp_checkForEntry@i& (0+255),b
 26361  004B0E                     l10359:
 26362                           
 26363                           ; BSR set to: 0
 26364  004B0E  0E07               	movlw	7
 26365  004B10  6575               	cpfsgt	arp_checkForEntry@i& (0+255),b
 26366  004B12  D001               	goto	l1097
 26367  004B14  D050               	goto	u12410
 26368  004B16                     l1097:
 26369                           
 26370                           ; BSR set to: 0
 26371                           ;arp.c: 467: if (ipv4_cmp(&arp_table[i].ip, &ip)) {
 26372                           
 26373                           ; BSR set to: 0
 26374  004B16  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 26375  004B18  0D0E               	mullw	14
 26376  004B1A  0E00               	movlw	low _arp_table
 26377  004B1C  24F3               	addwf	prodl,w,c
 26378  004B1E  6F60               	movwf	ipv4_cmp@a& (0+255),b
 26379  004B20  0E04               	movlw	high _arp_table
 26380  004B22  20F4               	addwfc	prodh,w,c
 26381  004B24  6F61               	movwf	(ipv4_cmp@a+1)& (0+255),b
 26382  004B26  0E67               	movlw	low arp_checkForEntry@ip
 26383  004B28  6F62               	movwf	ipv4_cmp@b& (0+255),b
 26384  004B2A  0E00               	movlw	high arp_checkForEntry@ip
 26385  004B2C  6F63               	movwf	(ipv4_cmp@b+1)& (0+255),b
 26386  004B2E  EC0E  F02E         	call	_ipv4_cmp	;wreg free
 26387  004B32  0100               	movlb	0	; () banked
 26388  004B34  A0D8               	btfss	status,0,c
 26389  004B36  D03D               	goto	l1100
 26390                           
 26391                           ; BSR set to: 0
 26392                           ;arp.c: 468: if (getMillis() - arp_table[i].timeCreated < 30000u) {
 26393  004B38  5175               	movf	arp_checkForEntry@i& (0+255),w,b
 26394  004B3A  0D0E               	mullw	14
 26395  004B3C  0E0A               	movlw	10
 26396  004B3E  26F3               	addwf	prodl,f,c
 26397  004B40  0E00               	movlw	0
 26398  004B42  22F4               	addwfc	prodh,f,c
 26399  004B44  0E00               	movlw	low _arp_table
 26400  004B46  24F3               	addwf	prodl,w,c
 26401  004B48  6ED9               	movwf	fsr2l,c
 26402  004B4A  0E04               	movlw	high _arp_table
 26403  004B4C  20F4               	addwfc	prodh,w,c
 26404  004B4E  6EDA               	movwf	fsr2h,c
 26405  004B50  CFDE F06D          	movff	postinc2,??_arp_checkForEntry
 26406  004B54  CFDE F06E          	movff	postinc2,??_arp_checkForEntry+1
 26407  004B58  CFDE F06F          	movff	postinc2,??_arp_checkForEntry+2
 26408  004B5C  CFDE F070          	movff	postinc2,??_arp_checkForEntry+3
 26409  004B60  1F6D               	comf	??_arp_checkForEntry& (0+255),f,b
 26410  004B62  1F6E               	comf	(??_arp_checkForEntry+1)& (0+255),f,b
 26411  004B64  1F6F               	comf	(??_arp_checkForEntry+2)& (0+255),f,b
 26412  004B66  1F70               	comf	(??_arp_checkForEntry+3)& (0+255),f,b
 26413  004B68  2B6D               	incf	??_arp_checkForEntry& (0+255),f,b
 26414  004B6A  0E00               	movlw	0
 26415  004B6C  236E               	addwfc	(??_arp_checkForEntry+1)& (0+255),f,b
 26416  004B6E  236F               	addwfc	(??_arp_checkForEntry+2)& (0+255),f,b
 26417  004B70  2370               	addwfc	(??_arp_checkForEntry+3)& (0+255),f,b
 26418  004B72  EC01  F031         	call	_getMillis	;wreg free
 26419  004B76  0100               	movlb	0	; () banked
 26420  004B78  516D               	movf	??_arp_checkForEntry& (0+255),w,b
 26421  004B7A  2560               	addwf	?_getMillis& (0+255),w,b
 26422  004B7C  6F71               	movwf	(??_arp_checkForEntry+4)& (0+255),b
 26423  004B7E  516E               	movf	(??_arp_checkForEntry+1)& (0+255),w,b
 26424  004B80  2161               	addwfc	(?_getMillis+1)& (0+255),w,b
 26425  004B82  6F72               	movwf	(??_arp_checkForEntry+5)& (0+255),b
 26426  004B84  516F               	movf	(??_arp_checkForEntry+2)& (0+255),w,b
 26427  004B86  2162               	addwfc	(?_getMillis+2)& (0+255),w,b
 26428  004B88  6F73               	movwf	(??_arp_checkForEntry+6)& (0+255),b
 26429  004B8A  5170               	movf	(??_arp_checkForEntry+3)& (0+255),w,b
 26430  004B8C  2163               	addwfc	(?_getMillis+3)& (0+255),w,b
 26431  004B8E  6F74               	movwf	(??_arp_checkForEntry+7)& (0+255),b
 26432  004B90  5174               	movf	(??_arp_checkForEntry+7)& (0+255),w,b
 26433  004B92  1173               	iorwf	(??_arp_checkForEntry+6)& (0+255),w,b
 26434  004B94  E10E               	bnz	l10373
 26435  004B96  0E30               	movlw	48
 26436  004B98  5D71               	subwf	(??_arp_checkForEntry+4)& (0+255),w,b
 26437  004B9A  0E75               	movlw	117
 26438  004B9C  5972               	subwfb	(??_arp_checkForEntry+5)& (0+255),w,b
 26439  004B9E  B0D8               	btfsc	status,0,c
 26440  004BA0  D008               	goto	l1100
 26441                           
 26442                           ; BSR set to: 0
 26443                           ;arp.c: 470: *index = i;
 26444  004BA2  C06B  FFD9         	movff	arp_checkForEntry@index,fsr2l
 26445  004BA6  C06C  FFDA         	movff	arp_checkForEntry@index+1,fsr2h
 26446  004BAA  C075  FFDF         	movff	arp_checkForEntry@i,indf2
 26447                           
 26448                           ; BSR set to: 0
 26449                           ;arp.c: 471: return 1;
 26450  004BAE  0E01               	movlw	1
 26451                           
 26452                           ; BSR set to: 0
 26453  004BB0  0012               	return	
 26454  004BB2                     l1100:
 26455  004BB2                     l10373:
 26456                           
 26457                           ; BSR set to: 0
 26458  004BB2  2B75               	incf	arp_checkForEntry@i& (0+255),f,b
 26459  004BB4  D7AC               	goto	l10359
 26460  004BB6                     u12410:
 26461                           
 26462                           ; BSR set to: 0
 26463                           ;arp.c: 472: }
 26464                           ;arp.c: 473: }
 26465                           ;arp.c: 474: }
 26466                           ;arp.c: 475: return 0;
 26467                           
 26468                           ; BSR set to: 0
 26469  004BB6  0E00               	movlw	0
 26470  004BB8  0012               	return	
 26471  004BBA                     __end_of_arp_checkForEntry:
 26472                           	opt stack 0
 26473                           tblptru	equ	0xFF8
 26474                           tblptrh	equ	0xFF7
 26475                           tblptrl	equ	0xFF6
 26476                           tablat	equ	0xFF5
 26477                           prodh	equ	0xFF4
 26478                           prodl	equ	0xFF3
 26479                           intcon	equ	0xFF2
 26480                           intcon3	equ	0xFF0
 26481                           indf0	equ	0xFEF
 26482                           postinc0	equ	0xFEE
 26483                           plusw0	equ	0xFEB
 26484                           fsr0h	equ	0xFEA
 26485                           fsr0l	equ	0xFE9
 26486                           wreg	equ	0xFE8
 26487                           indf1	equ	0xFE7
 26488                           postinc1	equ	0xFE6
 26489                           postdec1	equ	0xFE5
 26490                           plusw1	equ	0xFE3
 26491                           fsr1h	equ	0xFE2
 26492                           fsr1l	equ	0xFE1
 26493                           indf2	equ	0xFDF
 26494                           postinc2	equ	0xFDE
 26495                           postdec2	equ	0xFDD
 26496                           plusw2	equ	0xFDB
 26497                           fsr2h	equ	0xFDA
 26498                           fsr2l	equ	0xFD9
 26499                           status	equ	0xFD8
 26500                           
 26501 ;; *************** function _ipv4_cmp *****************
 26502 ;; Defined at:
 26503 ;;		line 454 in file "src/stack/protocols/ipv4.c"
 26504 ;; Parameters:    Size  Location     Type
 26505 ;;  a               2    0[BANK0 ] PTR struct ipv4_address
 26506 ;;		 -> arp_table(112), arp_sendReply@request(32), arp_parseFromRXBuffer@arp(32), 
 26507 ;;  b               2    2[BANK0 ] PTR struct ipv4_address
 26508 ;;		 -> arp_checkForEntry@ip(4), arp_sendReply@myIP(4), arp_parseFromRXBuffer@arp(32), 
 26509 ;; Auto vars:     Size  Location     Type
 26510 ;;  i               1    6[BANK0 ] unsigned char 
 26511 ;; Return value:  Size  Location     Type
 26512 ;;		None               void
 26513 ;; Registers used:
 26514 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26515 ;; Tracked objects:
 26516 ;;		On entry : 0/0
 26517 ;;		On exit  : 0/0
 26518 ;;		Unchanged: 0/0
 26519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26520 ;;      Params:         0       4       0       0       0       0       0       0       0
 26521 ;;      Locals:         0       1       0       0       0       0       0       0       0
 26522 ;;      Temps:          0       2       0       0       0       0       0       0       0
 26523 ;;      Totals:         0       7       0       0       0       0       0       0       0
 26524 ;;Total ram usage:        7 bytes
 26525 ;; Hardware stack levels used:    1
 26526 ;; Hardware stack levels required when called:    4
 26527 ;; This function calls:
 26528 ;;		Nothing
 26529 ;; This function is called by:
 26530 ;;		_arp_parseFromRXBuffer
 26531 ;;		_arp_sendReply
 26532 ;;		_arp_checkForEntry
 26533 ;; This function uses a non-reentrant model
 26534 ;;
 26535                           
 26536                           	psect	text107
 26537  005C1C                     __ptext107:
 26538                           	opt stack 0
 26539  005C1C                     _ipv4_cmp:
 26540                           	opt stack 23
 26541                           
 26542                           ;ipv4.c: 455: for (uint8_t i = 0; i < 4; i++) {
 26543                           
 26544                           ; BSR set to: 0
 26545                           ;incstack = 0
 26546  005C1C  0E00               	movlw	0
 26547  005C1E  0100               	movlb	0	; () banked
 26548  005C20  6F66               	movwf	ipv4_cmp@i& (0+255),b
 26549  005C22                     l9931:
 26550                           
 26551                           ; BSR set to: 0
 26552  005C22  0E03               	movlw	3
 26553  005C24  6566               	cpfsgt	ipv4_cmp@i& (0+255),b
 26554  005C26  D001               	goto	l1253
 26555  005C28  D018               	goto	u11270
 26556  005C2A                     l1253:
 26557                           
 26558                           ; BSR set to: 0
 26559                           ;ipv4.c: 456: if (a->address[i] != b->address[i])
 26560                           
 26561                           ; BSR set to: 0
 26562  005C2A  5166               	movf	ipv4_cmp@i& (0+255),w,b
 26563  005C2C  0D01               	mullw	1
 26564  005C2E  50F3               	movf	prodl,w,c
 26565  005C30  2562               	addwf	ipv4_cmp@b& (0+255),w,b
 26566  005C32  6ED9               	movwf	fsr2l,c
 26567  005C34  50F4               	movf	prodh,w,c
 26568  005C36  2163               	addwfc	(ipv4_cmp@b+1)& (0+255),w,b
 26569  005C38  6EDA               	movwf	fsr2h,c
 26570  005C3A  5166               	movf	ipv4_cmp@i& (0+255),w,b
 26571  005C3C  0D01               	mullw	1
 26572  005C3E  50F3               	movf	prodl,w,c
 26573  005C40  2560               	addwf	ipv4_cmp@a& (0+255),w,b
 26574  005C42  6EE1               	movwf	fsr1l,c
 26575  005C44  50F4               	movf	prodh,w,c
 26576  005C46  2161               	addwfc	(ipv4_cmp@a+1)& (0+255),w,b
 26577  005C48  6EE2               	movwf	fsr1h,c
 26578  005C4A  50DE               	movf	postinc2,w,c
 26579  005C4C  18E6               	xorwf	postinc1,w,c
 26580  005C4E  B4D8               	btfsc	status,2,c
 26581  005C50  D002               	goto	l1255
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;ipv4.c: 457: return 0;
 26585  005C52  90D8               	bcf	status,0,c
 26586                           
 26587                           ; BSR set to: 0
 26588  005C54  0012               	return	
 26589  005C56                     l1255:
 26590                           
 26591                           ; BSR set to: 0
 26592                           
 26593                           ; BSR set to: 0
 26594  005C56  2B66               	incf	ipv4_cmp@i& (0+255),f,b
 26595  005C58  D7E4               	goto	l9931
 26596  005C5A                     u11270:
 26597                           
 26598                           ; BSR set to: 0
 26599                           ;ipv4.c: 458: }
 26600                           ;ipv4.c: 459: return 1;
 26601                           
 26602                           ; BSR set to: 0
 26603  005C5A  80D8               	bsf	status,0,c
 26604  005C5C  0012               	return	
 26605  005C5E                     __end_of_ipv4_cmp:
 26606                           	opt stack 0
 26607                           tblptru	equ	0xFF8
 26608                           tblptrh	equ	0xFF7
 26609                           tblptrl	equ	0xFF6
 26610                           tablat	equ	0xFF5
 26611                           prodh	equ	0xFF4
 26612                           prodl	equ	0xFF3
 26613                           intcon	equ	0xFF2
 26614                           intcon3	equ	0xFF0
 26615                           indf0	equ	0xFEF
 26616                           postinc0	equ	0xFEE
 26617                           plusw0	equ	0xFEB
 26618                           fsr0h	equ	0xFEA
 26619                           fsr0l	equ	0xFE9
 26620                           wreg	equ	0xFE8
 26621                           indf1	equ	0xFE7
 26622                           postinc1	equ	0xFE6
 26623                           postdec1	equ	0xFE5
 26624                           plusw1	equ	0xFE3
 26625                           fsr1h	equ	0xFE2
 26626                           fsr1l	equ	0xFE1
 26627                           indf2	equ	0xFDF
 26628                           postinc2	equ	0xFDE
 26629                           postdec2	equ	0xFDD
 26630                           plusw2	equ	0xFDB
 26631                           fsr2h	equ	0xFDA
 26632                           fsr2l	equ	0xFD9
 26633                           status	equ	0xFD8
 26634                           
 26635 ;; *************** function _getMillis *****************
 26636 ;; Defined at:
 26637 ;;		line 34 in file "src/stack/time.c"
 26638 ;; Parameters:    Size  Location     Type
 26639 ;;		None
 26640 ;; Auto vars:     Size  Location     Type
 26641 ;;		None
 26642 ;; Return value:  Size  Location     Type
 26643 ;;                  4    0[BANK0 ] unsigned long 
 26644 ;; Registers used:
 26645 ;;		None
 26646 ;; Tracked objects:
 26647 ;;		On entry : 0/0
 26648 ;;		On exit  : 0/0
 26649 ;;		Unchanged: 0/0
 26650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26651 ;;      Params:         0       4       0       0       0       0       0       0       0
 26652 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26653 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26654 ;;      Totals:         0       4       0       0       0       0       0       0       0
 26655 ;;Total ram usage:        4 bytes
 26656 ;; Hardware stack levels used:    1
 26657 ;; Hardware stack levels required when called:    4
 26658 ;; This function calls:
 26659 ;;		Nothing
 26660 ;; This function is called by:
 26661 ;;		_ethernet_rxGetNewFrame
 26662 ;;		_arp_handleNewPacket
 26663 ;;		_arp_probe
 26664 ;;		_arp_gratuitous
 26665 ;;		_arp_checkForEntry
 26666 ;;		_ipv4_sendFrame
 26667 ;; This function uses a non-reentrant model
 26668 ;;
 26669                           
 26670                           	psect	text108
 26671  006202                     __ptext108:
 26672                           	opt stack 0
 26673  006202                     _getMillis:
 26674                           	opt stack 24
 26675                           
 26676                           ;time.c: 35: return time;
 26677                           
 26678                           ; BSR set to: 0
 26679                           ;incstack = 0
 26680  006202  C029  F060         	movff	_time,?_getMillis	;volatile
 26681  006206  C02A  F061         	movff	_time+1,?_getMillis+1	;volatile
 26682  00620A  C02B  F062         	movff	_time+2,?_getMillis+2	;volatile
 26683  00620E  C02C  F063         	movff	_time+3,?_getMillis+3	;volatile
 26684  006212  0012               	return		;funcret
 26685  006214                     __end_of_getMillis:
 26686                           	opt stack 0
 26687                           tblptru	equ	0xFF8
 26688                           tblptrh	equ	0xFF7
 26689                           tblptrl	equ	0xFF6
 26690                           tablat	equ	0xFF5
 26691                           prodh	equ	0xFF4
 26692                           prodl	equ	0xFF3
 26693                           intcon	equ	0xFF2
 26694                           intcon3	equ	0xFF0
 26695                           indf0	equ	0xFEF
 26696                           postinc0	equ	0xFEE
 26697                           plusw0	equ	0xFEB
 26698                           fsr0h	equ	0xFEA
 26699                           fsr0l	equ	0xFE9
 26700                           wreg	equ	0xFE8
 26701                           indf1	equ	0xFE7
 26702                           postinc1	equ	0xFE6
 26703                           postdec1	equ	0xFE5
 26704                           plusw1	equ	0xFE3
 26705                           fsr1h	equ	0xFE2
 26706                           fsr1l	equ	0xFE1
 26707                           indf2	equ	0xFDF
 26708                           postinc2	equ	0xFDE
 26709                           postdec2	equ	0xFDD
 26710                           plusw2	equ	0xFDB
 26711                           fsr2h	equ	0xFDA
 26712                           fsr2l	equ	0xFD9
 26713                           status	equ	0xFD8
 26714                           
 26715 ;; *************** function _UARTTransmitText *****************
 26716 ;; Defined at:
 26717 ;;		line 36 in file "src/system/uart.c"
 26718 ;; Parameters:    Size  Location     Type
 26719 ;;  str             2   56[BANK0 ] PTR const unsigned char 
 26720 ;;		 -> STR_163(5), STR_162(2), STR_161(21), STR_160(12), 
 26721 ;;		 -> STR_159(2), STR_158(7), STR_157(5), STR_156(5), 
 26722 ;;		 -> STR_155(15), STR_154(12), STR_153(5), STR_152(2), 
 26723 ;;		 -> STR_151(2), STR_150(12), STR_149(16), STR_148(10), 
 26724 ;;		 -> STR_147(26), STR_146(14), STR_145(20), STR_144(21), 
 26725 ;;		 -> STR_143(13), STR_142(1), STR_141(1), STR_140(17), 
 26726 ;;		 -> STR_139(14), STR_138(24), STR_137(1), STR_136(1), 
 26727 ;;		 -> STR_135(11), STR_134(16), STR_133(10), STR_132(26), 
 26728 ;;		 -> STR_131(14), STR_130(20), STR_129(21), STR_128(13), 
 26729 ;;		 -> STR_127(1), STR_126(1), STR_125(17), STR_124(14), 
 26730 ;;		 -> STR_123(24), STR_122(1), STR_121(1), STR_120(11), 
 26731 ;;		 -> STR_119(3), STR_118(39), STR_117(5), STR_116(3), 
 26732 ;;		 -> STR_115(3), STR_114(30), STR_113(12), STR_112(33), 
 26733 ;;		 -> STR_111(39), STR_110(35), STR_109(58), STR_108(36), 
 26734 ;;		 -> STR_107(34), STR_106(3), STR_105(43), STR_104(4), 
 26735 ;;		 -> STR_103(12), STR_102(26), STR_101(5), STR_100(2), 
 26736 ;;		 -> STR_99(3), STR_98(16), STR_97(12), STR_96(5), 
 26737 ;;		 -> STR_95(15), STR_94(10), STR_93(11), STR_92(2), 
 26738 ;;		 -> STR_91(3), STR_90(5), STR_89(3), STR_88(2), 
 26739 ;;		 -> STR_87(39), arpEntryToString@string(50), ipAdressToString@address(16), STR_82(18), 
 26740 ;;		 -> STR_81(4), STR_80(5), macToString@address(18), intToString@number(10), 
 26741 ;;		 -> STR_79(5), STR_78(9), STR_77(30), STR_76(34), 
 26742 ;;		 -> STR_75(55), STR_74(37), STR_73(15), STR_72(14), 
 26743 ;;		 -> STR_71(19), STR_70(30), STR_69(17), STR_68(8), 
 26744 ;;		 -> STR_67(29), STR_66(29), STR_65(20), STR_64(19), 
 26745 ;;		 -> STR_63(19), STR_62(13), STR_61(51), STR_60(4), 
 26746 ;;		 -> STR_59(23), STR_58(12), STR_57(4), STR_56(9), 
 26747 ;;		 -> STR_55(2), STR_54(12), STR_53(26), STR_52(5), 
 26748 ;;		 -> STR_51(49), STR_50(48), STR_49(53), STR_48(2), 
 26749 ;;		 -> STR_47(12), STR_46(2), STR_45(5), STR_44(3), 
 26750 ;;		 -> STR_43(37), STR_42(12), STR_41(5), STR_40(37), 
 26751 ;;		 -> STR_39(12), STR_38(3), STR_37(5), STR_36(27), 
 26752 ;;		 -> STR_35(12), STR_34(3), STR_33(21), STR_32(3), 
 26753 ;;		 -> STR_31(3), STR_30(5), STR_29(3), STR_28(5), 
 26754 ;;		 -> STR_27(58), STR_26(58), STR_25(62), STR_24(2), 
 26755 ;;		 -> STR_23(12), STR_22(3), STR_21(5), STR_20(3), 
 26756 ;;		 -> STR_19(5), STR_18(3), STR_17(3), STR_16(2), 
 26757 ;;		 -> STR_15(20), STR_14(11), STR_13(5), STR_12(7), 
 26758 ;;		 -> STR_11(12), STR_10(5), STR_9(6), STR_8(12), 
 26759 ;;		 -> STR_7(5), STR_6(16), STR_5(11), STR_4(10), 
 26760 ;;		 -> STR_3(12), STR_2(2), STR_1(2), ethernetController_getDeviceName@string(11), 
 26761 ;; Auto vars:     Size  Location     Type
 26762 ;;		None
 26763 ;; Return value:  Size  Location     Type
 26764 ;;                  1    wreg      void 
 26765 ;; Registers used:
 26766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 26767 ;; Tracked objects:
 26768 ;;		On entry : 0/0
 26769 ;;		On exit  : 0/0
 26770 ;;		Unchanged: 0/0
 26771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26772 ;;      Params:         0       2       0       0       0       0       0       0       0
 26773 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26774 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26775 ;;      Totals:         0       2       0       0       0       0       0       0       0
 26776 ;;Total ram usage:        2 bytes
 26777 ;; Hardware stack levels used:    1
 26778 ;; Hardware stack levels required when called:    4
 26779 ;; This function calls:
 26780 ;;		Nothing
 26781 ;; This function is called by:
 26782 ;;		_ethernet_rxGetNewFrame
 26783 ;;		_handleStackBackgroundTasks
 26784 ;;		_main
 26785 ;;		_printEthernetState
 26786 ;;		_printErrorMessage
 26787 ;;		_UARTTransmitInt
 26788 ;;		_arp_handleNewPacket
 26789 ;;		_arp_sendReply
 26790 ;;		_arp_probe
 26791 ;;		_arp_gratuitous
 26792 ;;		_arp_background
 26793 ;;		_arp_setNewEntry
 26794 ;;		_arp_init
 26795 ;;		_icmp_handleNewPacket
 26796 ;;		_icmp_sendEchoReply
 26797 ;;		_printArpTable
 26798 ;; This function uses a non-reentrant model
 26799 ;;
 26800                           
 26801                           	psect	text109
 26802  005884                     __ptext109:
 26803                           	opt stack 0
 26804  005884                     _UARTTransmitText:
 26805                           	opt stack 23
 26806                           
 26807                           ;uart.c: 37: while (*str) {
 26808                           
 26809                           ;incstack = 0
 26810  005884  D016               	goto	u10770
 26811  005886                     
 26812                           ;uart.c: 38: TXREG1 = *str++;
 26813  005886  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 26814  00588A  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 26815  00588E  6AF8               	clrf	tblptru,c
 26816  005890  0E07               	movlw	(high __ramtop+-1)
 26817  005892  64F7               	cpfsgt	tblptrh,c
 26818  005894  D003               	bra	u10767
 26819  005896  0008               	tblrd		*
 26820  005898  50F5               	movf	tablat,w,c
 26821  00589A  D005               	bra	u10760
 26822  00589C                     u10767:
 26823  00589C  CFF6 FFE9          	movff	tblptrl,fsr0l
 26824  0058A0  CFF7 FFEA          	movff	tblptrh,fsr0h
 26825  0058A4  50EF               	movf	indf0,w,c
 26826  0058A6                     u10760:
 26827  0058A6  6EAD               	movwf	4013,c	;volatile
 26828  0058A8  0100               	movlb	0	; () banked
 26829  0058AA  4B98               	infsnz	UARTTransmitText@str& (0+255),f,b
 26830  0058AC  2B99               	incf	(UARTTransmitText@str+1)& (0+255),f,b
 26831  0058AE                     
 26832                           ; BSR set to: 0
 26833  0058AE  A2AC               	btfss	4012,1,c	;volatile
 26834  0058B0  D7FE               	goto	l832
 26835  0058B2                     u10770:
 26836  0058B2  C098  FFF6         	movff	UARTTransmitText@str,tblptrl
 26837  0058B6  C099  FFF7         	movff	UARTTransmitText@str+1,tblptrh
 26838  0058BA  6AF8               	clrf	tblptru,c
 26839  0058BC  0E07               	movlw	(high __ramtop+-1)
 26840  0058BE  64F7               	cpfsgt	tblptrh,c
 26841  0058C0  D003               	bra	u10787
 26842  0058C2  0008               	tblrd		*
 26843  0058C4  50F5               	movf	tablat,w,c
 26844  0058C6  D005               	bra	u10780
 26845  0058C8                     u10787:
 26846  0058C8  CFF6 FFE9          	movff	tblptrl,fsr0l
 26847  0058CC  CFF7 FFEA          	movff	tblptrh,fsr0h
 26848  0058D0  50EF               	movf	indf0,w,c
 26849  0058D2                     u10780:
 26850  0058D2  0900               	iorlw	0
 26851  0058D4  B4D8               	btfsc	status,2,c
 26852  0058D6  0012               	return	
 26853  0058D8  D7D6               	goto	l830
 26854  0058DA                     __end_of_UARTTransmitText:
 26855                           	opt stack 0
 26856                           tblptru	equ	0xFF8
 26857                           tblptrh	equ	0xFF7
 26858                           tblptrl	equ	0xFF6
 26859                           tablat	equ	0xFF5
 26860                           prodh	equ	0xFF4
 26861                           prodl	equ	0xFF3
 26862                           intcon	equ	0xFF2
 26863                           intcon3	equ	0xFF0
 26864                           indf0	equ	0xFEF
 26865                           postinc0	equ	0xFEE
 26866                           plusw0	equ	0xFEB
 26867                           fsr0h	equ	0xFEA
 26868                           fsr0l	equ	0xFE9
 26869                           wreg	equ	0xFE8
 26870                           indf1	equ	0xFE7
 26871                           postinc1	equ	0xFE6
 26872                           postdec1	equ	0xFE5
 26873                           plusw1	equ	0xFE3
 26874                           fsr1h	equ	0xFE2
 26875                           fsr1l	equ	0xFE1
 26876                           indf2	equ	0xFDF
 26877                           postinc2	equ	0xFDE
 26878                           postdec2	equ	0xFDD
 26879                           plusw2	equ	0xFDB
 26880                           fsr2h	equ	0xFDA
 26881                           fsr2l	equ	0xFD9
 26882                           status	equ	0xFD8
 26883                           
 26884 ;; *************** function _ethernetController_getDeviceName *****************
 26885 ;; Defined at:
 26886 ;;		line 145 in file "src/enc424j600/ENC424J600.c"
 26887 ;; Parameters:    Size  Location     Type
 26888 ;;		None
 26889 ;; Auto vars:     Size  Location     Type
 26890 ;;  string         11    2[BANK0 ] const unsigned char [11]
 26891 ;; Return value:  Size  Location     Type
 26892 ;;                  2    0[BANK0 ] PTR unsigned char 
 26893 ;; Registers used:
 26894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 26895 ;; Tracked objects:
 26896 ;;		On entry : 0/0
 26897 ;;		On exit  : 0/0
 26898 ;;		Unchanged: 0/0
 26899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26900 ;;      Params:         0       2       0       0       0       0       0       0       0
 26901 ;;      Locals:         0      11       0       0       0       0       0       0       0
 26902 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26903 ;;      Totals:         0      13       0       0       0       0       0       0       0
 26904 ;;Total ram usage:       13 bytes
 26905 ;; Hardware stack levels used:    1
 26906 ;; Hardware stack levels required when called:    4
 26907 ;; This function calls:
 26908 ;;		Nothing
 26909 ;; This function is called by:
 26910 ;;		_main
 26911 ;; This function uses a non-reentrant model
 26912 ;;
 26913                           
 26914                           	psect	text110
 26915  006098                     __ptext110:
 26916                           	opt stack 0
 26917  006098                     _ethernetController_getDeviceName:
 26918                           	opt stack 26
 26919                           
 26920                           ;ENC424J600.c: 146: const char string [] = "ENC424J600";
 26921                           
 26922                           ;incstack = 0
 26923  006098  0ED3               	movlw	low ethernetController_getDeviceName@F6000
 26924  00609A  6EF6               	movwf	tblptrl,c
 26925  00609C                     	if	1	;There is more than 1 active tblptr byte
 26926  00609C  0E78               	movlw	high ethernetController_getDeviceName@F6000
 26927  00609E  6EF7               	movwf	tblptrh,c
 26928  0060A0                     	endif
 26929  0060A0                     	if	0	;There are less than 3 active tblptr bytes
 26930  0060A0                     	endif
 26931  0060A0  EE20  F062         	lfsr	2,ethernetController_getDeviceName@string
 26932  0060A4  0E0A               	movlw	10
 26933  0060A6                     u13730:
 26934  0060A6  0009               	tblrd		*+
 26935  0060A8  CFF5 FFDE          	movff	tablat,postinc2
 26936  0060AC  06E8               	decf	wreg,f,c
 26937  0060AE  E2FB               	bc	u13730
 26938                           
 26939                           ;ENC424J600.c: 147: return (char*) string;
 26940  0060B0  0E62               	movlw	low ethernetController_getDeviceName@string
 26941  0060B2  0100               	movlb	0	; () banked
 26942  0060B4  6F60               	movwf	?_ethernetController_getDeviceName& (0+255),b
 26943  0060B6  0E00               	movlw	high ethernetController_getDeviceName@string
 26944  0060B8  6F61               	movwf	(?_ethernetController_getDeviceName+1)& (0+255),b
 26945  0060BA  0012               	return	
 26946  0060BC                     __end_of_ethernetController_getDeviceName:
 26947                           	opt stack 0
 26948                           tblptru	equ	0xFF8
 26949                           tblptrh	equ	0xFF7
 26950                           tblptrl	equ	0xFF6
 26951                           tablat	equ	0xFF5
 26952                           prodh	equ	0xFF4
 26953                           prodl	equ	0xFF3
 26954                           intcon	equ	0xFF2
 26955                           intcon3	equ	0xFF0
 26956                           indf0	equ	0xFEF
 26957                           postinc0	equ	0xFEE
 26958                           plusw0	equ	0xFEB
 26959                           fsr0h	equ	0xFEA
 26960                           fsr0l	equ	0xFE9
 26961                           wreg	equ	0xFE8
 26962                           indf1	equ	0xFE7
 26963                           postinc1	equ	0xFE6
 26964                           postdec1	equ	0xFE5
 26965                           plusw1	equ	0xFE3
 26966                           fsr1h	equ	0xFE2
 26967                           fsr1l	equ	0xFE1
 26968                           indf2	equ	0xFDF
 26969                           postinc2	equ	0xFDE
 26970                           postdec2	equ	0xFDD
 26971                           plusw2	equ	0xFDB
 26972                           fsr2h	equ	0xFDA
 26973                           fsr2l	equ	0xFD9
 26974                           status	equ	0xFD8
 26975                           
 26976 ;; *************** function _ethernetController_getCurrentPacketCount *****************
 26977 ;; Defined at:
 26978 ;;		line 457 in file "src/enc424j600/ENC424J600.c"
 26979 ;; Parameters:    Size  Location     Type
 26980 ;;		None
 26981 ;; Auto vars:     Size  Location     Type
 26982 ;;		None
 26983 ;; Return value:  Size  Location     Type
 26984 ;;                  1    wreg      unsigned char 
 26985 ;; Registers used:
 26986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26987 ;; Tracked objects:
 26988 ;;		On entry : 0/0
 26989 ;;		On exit  : 0/0
 26990 ;;		Unchanged: 0/0
 26991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 26992 ;;      Params:         0       0       0       0       0       0       0       0       0
 26993 ;;      Locals:         0       0       0       0       0       0       0       0       0
 26994 ;;      Temps:          0       0       0       0       0       0       0       0       0
 26995 ;;      Totals:         0       0       0       0       0       0       0       0       0
 26996 ;;Total ram usage:        0 bytes
 26997 ;; Hardware stack levels used:    1
 26998 ;; Hardware stack levels required when called:    8
 26999 ;; This function calls:
 27000 ;;		_enc424j600_getPacketCount
 27001 ;; This function is called by:
 27002 ;;		_main
 27003 ;; This function uses a non-reentrant model
 27004 ;;
 27005                           
 27006                           	psect	text111
 27007  006290                     __ptext111:
 27008                           	opt stack 0
 27009  006290                     _ethernetController_getCurrentPacketCount:
 27010                           	opt stack 22
 27011                           
 27012                           ;ENC424J600.c: 458: return enc424j600_getPacketCount();
 27013                           
 27014                           ; BSR set to: 0
 27015                           ;incstack = 0
 27016  006290  ECB9  F030         	call	_enc424j600_getPacketCount	;wreg free
 27017  006294  0012               	return	
 27018  006296                     __end_of_ethernetController_getCurrentPacketCount:
 27019                           	opt stack 0
 27020                           tblptru	equ	0xFF8
 27021                           tblptrh	equ	0xFF7
 27022                           tblptrl	equ	0xFF6
 27023                           tablat	equ	0xFF5
 27024                           prodh	equ	0xFF4
 27025                           prodl	equ	0xFF3
 27026                           intcon	equ	0xFF2
 27027                           intcon3	equ	0xFF0
 27028                           indf0	equ	0xFEF
 27029                           postinc0	equ	0xFEE
 27030                           plusw0	equ	0xFEB
 27031                           fsr0h	equ	0xFEA
 27032                           fsr0l	equ	0xFE9
 27033                           wreg	equ	0xFE8
 27034                           indf1	equ	0xFE7
 27035                           postinc1	equ	0xFE6
 27036                           postdec1	equ	0xFE5
 27037                           plusw1	equ	0xFE3
 27038                           fsr1h	equ	0xFE2
 27039                           fsr1l	equ	0xFE1
 27040                           indf2	equ	0xFDF
 27041                           postinc2	equ	0xFDE
 27042                           postdec2	equ	0xFDD
 27043                           plusw2	equ	0xFDB
 27044                           fsr2h	equ	0xFDA
 27045                           fsr2l	equ	0xFD9
 27046                           status	equ	0xFD8
 27047                           
 27048 ;; *************** function _enc424j600_getPacketCount *****************
 27049 ;; Defined at:
 27050 ;;		line 594 in file "src/enc424j600/ENC424J600.c"
 27051 ;; Parameters:    Size  Location     Type
 27052 ;;		None
 27053 ;; Auto vars:     Size  Location     Type
 27054 ;;  lowByte         1   14[BANK0 ] unsigned char 
 27055 ;; Return value:  Size  Location     Type
 27056 ;;                  1    wreg      unsigned char 
 27057 ;; Registers used:
 27058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27059 ;; Tracked objects:
 27060 ;;		On entry : 0/0
 27061 ;;		On exit  : 0/0
 27062 ;;		Unchanged: 0/0
 27063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27064 ;;      Params:         0       0       0       0       0       0       0       0       0
 27065 ;;      Locals:         0       1       0       0       0       0       0       0       0
 27066 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27067 ;;      Totals:         0       1       0       0       0       0       0       0       0
 27068 ;;Total ram usage:        1 bytes
 27069 ;; Hardware stack levels used:    1
 27070 ;; Hardware stack levels required when called:    7
 27071 ;; This function calls:
 27072 ;;		_enc424j600_readControlRegisterUnbanked
 27073 ;; This function is called by:
 27074 ;;		_ethernetController_newPacketAvailable
 27075 ;;		_ethernetController_getCurrentPacketCount
 27076 ;; This function uses a non-reentrant model
 27077 ;;
 27078                           
 27079                           	psect	text112
 27080  006172                     __ptext112:
 27081                           	opt stack 0
 27082  006172                     _enc424j600_getPacketCount:
 27083                           	opt stack 21
 27084                           
 27085                           ;ENC424J600.c: 595: uint8_t lowByte = 0;
 27086                           
 27087                           ;incstack = 0
 27088  006172  0E00               	movlw	0
 27089  006174  0100               	movlb	0	; () banked
 27090  006176  6F6E               	movwf	enc424j600_getPacketCount@lowByte& (0+255),b
 27091                           
 27092                           ; BSR set to: 0
 27093                           ;ENC424J600.c: 596: enc424j600_readControlRegisterUnbanked(0x1A + 0x00, &lowByte);
 27094  006178  0E6E               	movlw	low enc424j600_getPacketCount@lowByte
 27095  00617A  6F6A               	movwf	enc424j600_readControlRegisterUnbanked@data& (0+255),b
 27096  00617C  0E00               	movlw	high enc424j600_getPacketCount@lowByte
 27097  00617E  6F6B               	movwf	(enc424j600_readControlRegisterUnbanked@data+1)& (0+255),b
 27098  006180  0E1A               	movlw	26
 27099  006182  ECDC  F02E         	call	_enc424j600_readControlRegisterUnbanked
 27100                           
 27101                           ;ENC424J600.c: 597: return (uint32_t) lowByte;
 27102  006186  0100               	movlb	0	; () banked
 27103  006188  516E               	movf	enc424j600_getPacketCount@lowByte& (0+255),w,b
 27104  00618A  0012               	return	
 27105  00618C                     __end_of_enc424j600_getPacketCount:
 27106                           	opt stack 0
 27107                           tblptru	equ	0xFF8
 27108                           tblptrh	equ	0xFF7
 27109                           tblptrl	equ	0xFF6
 27110                           tablat	equ	0xFF5
 27111                           prodh	equ	0xFF4
 27112                           prodl	equ	0xFF3
 27113                           intcon	equ	0xFF2
 27114                           intcon3	equ	0xFF0
 27115                           indf0	equ	0xFEF
 27116                           postinc0	equ	0xFEE
 27117                           plusw0	equ	0xFEB
 27118                           fsr0h	equ	0xFEA
 27119                           fsr0l	equ	0xFE9
 27120                           wreg	equ	0xFE8
 27121                           indf1	equ	0xFE7
 27122                           postinc1	equ	0xFE6
 27123                           postdec1	equ	0xFE5
 27124                           plusw1	equ	0xFE3
 27125                           fsr1h	equ	0xFE2
 27126                           fsr1l	equ	0xFE1
 27127                           indf2	equ	0xFDF
 27128                           postinc2	equ	0xFDE
 27129                           postdec2	equ	0xFDD
 27130                           plusw2	equ	0xFDB
 27131                           fsr2h	equ	0xFDA
 27132                           fsr2l	equ	0xFD9
 27133                           status	equ	0xFD8
 27134                           
 27135 ;; *************** function _enc424j600_readControlRegisterUnbanked *****************
 27136 ;; Defined at:
 27137 ;;		line 527 in file "src/enc424j600/ENC424J600.c"
 27138 ;; Parameters:    Size  Location     Type
 27139 ;;  addr            1    wreg     unsigned char 
 27140 ;;  data            2   10[BANK0 ] PTR unsigned char 
 27141 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 27142 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 27143 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 27144 ;;		 -> ethernetController_updateLinkStatus@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), ethernetCo
      +ntroller_getSiliconRevision@data(1), 
 27145 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 27146 ;; Auto vars:     Size  Location     Type
 27147 ;;  addr            1   12[BANK0 ] unsigned char 
 27148 ;;  opcode          1   13[BANK0 ] unsigned char 
 27149 ;; Return value:  Size  Location     Type
 27150 ;;                  1    wreg      void 
 27151 ;; Registers used:
 27152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27153 ;; Tracked objects:
 27154 ;;		On entry : 0/0
 27155 ;;		On exit  : 0/0
 27156 ;;		Unchanged: 0/0
 27157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27158 ;;      Params:         0       2       0       0       0       0       0       0       0
 27159 ;;      Locals:         0       2       0       0       0       0       0       0       0
 27160 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27161 ;;      Totals:         0       4       0       0       0       0       0       0       0
 27162 ;;Total ram usage:        4 bytes
 27163 ;; Hardware stack levels used:    1
 27164 ;; Hardware stack levels required when called:    6
 27165 ;; This function calls:
 27166 ;;		_enc424j600_readSPI
 27167 ;;		_enc424j600_writeSPI
 27168 ;; This function is called by:
 27169 ;;		_ethernetController_softReset
 27170 ;;		_ethernetController_checkDeviceId
 27171 ;;		_ethernetController_getMacAddress
 27172 ;;		_ethernetController_updateLinkStatus
 27173 ;;		_ethernetController_setLEDConfig
 27174 ;;		_enc424j600_readPHYRegister
 27175 ;;		_enc424j600_getPacketCount
 27176 ;;		_enc424j600_enableAutoMACInsertion
 27177 ;;		_enc424j600_getInterruptFlags
 27178 ;;		_enc424j600_clearInterruptFlag
 27179 ;;		_ethernetController_getSiliconRevision
 27180 ;;		_enc424j600_disableAutoMACInsertion
 27181 ;;		_enc424j600_enable
 27182 ;;		_enc424j600_disable
 27183 ;; This function uses a non-reentrant model
 27184 ;;
 27185                           
 27186                           	psect	text113
 27187  005DB8                     __ptext113:
 27188                           	opt stack 0
 27189  005DB8                     _enc424j600_readControlRegisterUnbanked:
 27190                           	opt stack 21
 27191                           
 27192                           ; BSR set to: 0
 27193                           ;incstack = 0
 27194                           ;enc424j600_readControlRegisterUnbanked@addr stored from wreg
 27195  005DB8  0100               	movlb	0	; () banked
 27196  005DBA  6F6C               	movwf	enc424j600_readControlRegisterUnbanked@addr& (0+255),b
 27197                           
 27198                           ;ENC424J600.c: 528: uint8_t opcode = 0x20;
 27199  005DBC  0E20               	movlw	32
 27200  005DBE  0100               	movlb	0	; () banked
 27201  005DC0  6F6D               	movwf	enc424j600_readControlRegisterUnbanked@opcode& (0+255),b
 27202                           
 27203                           ; BSR set to: 0
 27204                           ;ENC424J600.c: 529: PORTBbits.RB4=0;
 27205  005DC2  9881               	bcf	3969,4,c	;volatile
 27206                           
 27207                           ; BSR set to: 0
 27208                           ;ENC424J600.c: 530: enc424j600_writeSPI(&opcode);
 27209  005DC4  0E6D               	movlw	low enc424j600_readControlRegisterUnbanked@opcode
 27210  005DC6  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27211  005DC8  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@opcode
 27212  005DCA  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27213  005DCC  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 27214                           
 27215                           ;ENC424J600.c: 531: enc424j600_writeSPI(&addr);
 27216  005DD0  0E6C               	movlw	low enc424j600_readControlRegisterUnbanked@addr
 27217  005DD2  0100               	movlb	0	; () banked
 27218  005DD4  6F60               	movwf	enc424j600_writeSPI@data& (0+255),b
 27219  005DD6  0E00               	movlw	high enc424j600_readControlRegisterUnbanked@addr
 27220  005DD8  6F61               	movwf	(enc424j600_writeSPI@data+1)& (0+255),b
 27221  005DDA  EC87  F02B         	call	_enc424j600_writeSPI	;wreg free
 27222                           
 27223                           ;ENC424J600.c: 532: enc424j600_readSPI(data);
 27224  005DDE  C06A  F060         	movff	enc424j600_readControlRegisterUnbanked@data,enc424j600_readSPI@data
 27225  005DE2  C06B  F061         	movff	enc424j600_readControlRegisterUnbanked@data+1,enc424j600_readSPI@data+1
 27226  005DE6  EC1E  F02B         	call	_enc424j600_readSPI	;wreg free
 27227                           
 27228                           ;ENC424J600.c: 533: PORTBbits.RB4=1;
 27229  005DEA  8881               	bsf	3969,4,c	;volatile
 27230  005DEC  0012               	return		;funcret
 27231  005DEE                     __end_of_enc424j600_readControlRegisterUnbanked:
 27232                           	opt stack 0
 27233                           tblptru	equ	0xFF8
 27234                           tblptrh	equ	0xFF7
 27235                           tblptrl	equ	0xFF6
 27236                           tablat	equ	0xFF5
 27237                           prodh	equ	0xFF4
 27238                           prodl	equ	0xFF3
 27239                           intcon	equ	0xFF2
 27240                           intcon3	equ	0xFF0
 27241                           indf0	equ	0xFEF
 27242                           postinc0	equ	0xFEE
 27243                           plusw0	equ	0xFEB
 27244                           fsr0h	equ	0xFEA
 27245                           fsr0l	equ	0xFE9
 27246                           wreg	equ	0xFE8
 27247                           indf1	equ	0xFE7
 27248                           postinc1	equ	0xFE6
 27249                           postdec1	equ	0xFE5
 27250                           plusw1	equ	0xFE3
 27251                           fsr1h	equ	0xFE2
 27252                           fsr1l	equ	0xFE1
 27253                           indf2	equ	0xFDF
 27254                           postinc2	equ	0xFDE
 27255                           postdec2	equ	0xFDD
 27256                           plusw2	equ	0xFDB
 27257                           fsr2h	equ	0xFDA
 27258                           fsr2l	equ	0xFD9
 27259                           status	equ	0xFD8
 27260                           
 27261 ;; *************** function _enc424j600_writeSPI *****************
 27262 ;; Defined at:
 27263 ;;		line 487 in file "src/enc424j600/ENC424J600.c"
 27264 ;; Parameters:    Size  Location     Type
 27265 ;;  data            2    0[BANK0 ] PTR unsigned char 
 27266 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_disable@temp(1), enc424j600_enable@temp(1), enc424j600_disable
      +AutoMACInsertion@temp(1), 
 27267 ;;		 -> enc424j600_enableAutoMACInsertion@temp(1), enc424j600_setRXTailPointer@highByte(1), enc424j600_setRXTailPointer@
      +lowByte(1), enc424j600_setRXBufferStartAddress@highByte(1), 
 27268 ;;		 -> enc424j600_setRXBufferStartAddress@lowByte(1), enc424j600_setERXDATAReadPointer@highByte(1), enc424j600_setERXDA
      +TAReadPointer@lowByte(1), enc424j600_setERXDATAReadPointer@opcode(1), 
 27269 ;;		 -> enc424j600_setGPDATAReadPointer@highByte(1), enc424j600_setGPDATAReadPointer@lowByte(1), enc424j600_setGPDATARea
      +dPointer@opcode(1), enc424j600_setGPDATAWritePointer@highByte(1), 
 27270 ;;		 -> enc424j600_setGPDATAWritePointer@lowByte(1), enc424j600_setGPDATAWritePointer@opcode(1), enc424j600_setTXStartAd
      +dress@highByte(1), enc424j600_setTXStartAddress@lowByte(1), 
 27271 ;;		 -> enc424j600_setTXLength@highByte(1), enc424j600_setTXLength@lowByte(1), enc424j600_readPHYRegister@temp(1), enc42
      +4j600_readPHYRegister@unusedBits(1), 
 27272 ;;		 -> enc424j600_readPHYRegister@PHYaddress(1), enc424j600_readControlRegisterUnbanked@addr(1), enc424j600_readControl
      +RegisterUnbanked@opcode(1), enc424j600_writeControlRegisterUnbanked@addr(1), 
 27273 ;;		 -> enc424j600_writeControlRegisterUnbanked@opcode(1), enc424j600_writeSingleByte@opcode(1), ethernetController_setL
      +EDConfig@data(1), ethernetController_streamFromRXBuffer@opcode(1), 
 27274 ;;		 -> ethernetController_updateNextPacketPointer@opcode(1), ethernetController_getRSV@opcode(1), ethernetController_ge
      +tEtherTypeField@opcode(1), ethernetController_getSourceMACAddress@opcode(1), 
 27275 ;;		 -> ethernetController_getDestinationMACAddress@opcode(1), ethernetController_writeEtherTypeFieldToBuffer@opcode(1),
      + ethernetController_writeEtherTypeFieldToBuffer@highByte(1), ethernetController_writeEtherTypeFieldToBuffer@lowByte(1), 
 27276 ;;		 -> ethernetController_writeDestinationMACAddress@opcode(1), ethernetController_writeDestinationMACAddress@data(6), 
      +ethernetController_streamToTransmitBuffer@data(1), ethernetController_streamToTransmitBuffer@opcode(1), 
 27277 ;;		 -> mac.address(6), ethernetController_setMacAddress@mac(6), ethernetController_softReset@dataToSend(2), 
 27278 ;; Auto vars:     Size  Location     Type
 27279 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 27280 ;; Return value:  Size  Location     Type
 27281 ;;                  1    wreg      void 
 27282 ;; Registers used:
 27283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27284 ;; Tracked objects:
 27285 ;;		On entry : 0/0
 27286 ;;		On exit  : 0/0
 27287 ;;		Unchanged: 0/0
 27288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27289 ;;      Params:         0       2       0       0       0       0       0       0       0
 27290 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27291 ;;      Temps:          0       4       0       0       0       0       0       0       0
 27292 ;;      Totals:         0      10       0       0       0       0       0       0       0
 27293 ;;Total ram usage:       10 bytes
 27294 ;; Hardware stack levels used:    1
 27295 ;; Hardware stack levels required when called:    5
 27296 ;; This function calls:
 27297 ;;		_enc424j600_initSPI
 27298 ;; This function is called by:
 27299 ;;		_ethernetController_streamToTransmitBuffer
 27300 ;;		_ethernetController_writeDestinationMACAddress
 27301 ;;		_ethernetController_writeEtherTypeFieldToBuffer
 27302 ;;		_ethernetController_getSourceMACAddress
 27303 ;;		_ethernetController_getEtherTypeField
 27304 ;;		_ethernetController_getRSV
 27305 ;;		_ethernetController_updateNextPacketPointer
 27306 ;;		_ethernetController_streamFromRXBuffer
 27307 ;;		_enc424j600_writeSingleByte
 27308 ;;		_enc424j600_writeControlRegisterUnbanked
 27309 ;;		_enc424j600_readControlRegisterUnbanked
 27310 ;;		_enc424j600_setGPDATAWritePointer
 27311 ;;		_enc424j600_setERXDATAReadPointer
 27312 ;;		_ethernetController_getDestinationMACAddress
 27313 ;;		_enc424j600_setGPDATAReadPointer
 27314 ;; This function uses a non-reentrant model
 27315 ;;
 27316                           
 27317                           	psect	text114
 27318  00570E                     __ptext114:
 27319                           	opt stack 0
 27320  00570E                     _enc424j600_writeSPI:
 27321                           	opt stack 22
 27322                           
 27323                           ;ENC424J600.c: 489: uint32_t timeoutCounter = 0;
 27324                           
 27325                           ;incstack = 0
 27326  00570E  0E00               	movlw	0
 27327  005710  0100               	movlb	0	; () banked
 27328  005712  6F66               	movwf	enc424j600_writeSPI@timeoutCounter& (0+255),b
 27329  005714  0E00               	movlw	0
 27330  005716  6F67               	movwf	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),b
 27331  005718  0E00               	movlw	0
 27332  00571A  6F68               	movwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),b
 27333  00571C  0E00               	movlw	0
 27334  00571E  6F69               	movwf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),b
 27335                           
 27336                           ; BSR set to: 0
 27337                           ;ENC424J600.c: 490: SSP1BUF = *data;
 27338  005720  C060  FFD9         	movff	enc424j600_writeSPI@data,fsr2l
 27339  005724  C061  FFDA         	movff	enc424j600_writeSPI@data+1,fsr2h
 27340  005728  50DF               	movf	indf2,w,c
 27341  00572A  6EC9               	movwf	4041,c	;volatile
 27342  00572C                     
 27343                           ; BSR set to: 0
 27344                           
 27345                           ; BSR set to: 0
 27346  00572C  B0C7               	btfsc	4039,0,c	;volatile
 27347  00572E  D015               	goto	u9680
 27348                           
 27349                           ; BSR set to: 0
 27350  005730  C066  F062         	movff	enc424j600_writeSPI@timeoutCounter,??_enc424j600_writeSPI
 27351  005734  C067  F063         	movff	enc424j600_writeSPI@timeoutCounter+1,??_enc424j600_writeSPI+1
 27352  005738  C068  F064         	movff	enc424j600_writeSPI@timeoutCounter+2,??_enc424j600_writeSPI+2
 27353  00573C  C069  F065         	movff	enc424j600_writeSPI@timeoutCounter+3,??_enc424j600_writeSPI+3
 27354  005740  2B66               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),f,b
 27355  005742  0E00               	movlw	0
 27356  005744  2367               	addwfc	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),f,b
 27357  005746  2368               	addwfc	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),f,b
 27358  005748  2369               	addwfc	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),f,b
 27359  00574A  5165               	movf	(??_enc424j600_writeSPI+3)& (0+255),w,b
 27360  00574C  1164               	iorwf	(??_enc424j600_writeSPI+2)& (0+255),w,b
 27361  00574E  E105               	bnz	l8901
 27362  005750  2962               	incf	??_enc424j600_writeSPI& (0+255),w,b
 27363  005752  0E0F               	movlw	15
 27364  005754  5963               	subwfb	(??_enc424j600_writeSPI+1)& (0+255),w,b
 27365  005756  A0D8               	btfss	status,0,c
 27366  005758  D7E9               	goto	l232
 27367  00575A                     u9680:
 27368  00575A                     l8901:
 27369                           
 27370                           ; BSR set to: 0
 27371                           ;ENC424J600.c: 492: if (timeoutCounter >= 0xfff) {
 27372  00575A  5169               	movf	(enc424j600_writeSPI@timeoutCounter+3)& (0+255),w,b
 27373  00575C  1168               	iorwf	(enc424j600_writeSPI@timeoutCounter+2)& (0+255),w,b
 27374  00575E  E105               	bnz	u9690
 27375  005760  2966               	incf	enc424j600_writeSPI@timeoutCounter& (0+255),w,b
 27376  005762  0E0F               	movlw	15
 27377  005764  5967               	subwfb	(enc424j600_writeSPI@timeoutCounter+1)& (0+255),w,b
 27378  005766  A0D8               	btfss	status,0,c
 27379  005768  0012               	return	
 27380  00576A                     u9690:
 27381                           
 27382                           ; BSR set to: 0
 27383                           ;ENC424J600.c: 493: PORTBbits.RB4=1;
 27384  00576A  8881               	bsf	3969,4,c	;volatile
 27385                           
 27386                           ; BSR set to: 0
 27387                           ;ENC424J600.c: 494: enc424j600_initSPI();
 27388  00576C  EC9E  F030         	call	_enc424j600_initSPI	;wreg free
 27389                           
 27390                           ;ENC424J600.c: 495: return;
 27391  005770  0012               	return	
 27392  005772                     __end_of_enc424j600_writeSPI:
 27393                           	opt stack 0
 27394                           tblptru	equ	0xFF8
 27395                           tblptrh	equ	0xFF7
 27396                           tblptrl	equ	0xFF6
 27397                           tablat	equ	0xFF5
 27398                           prodh	equ	0xFF4
 27399                           prodl	equ	0xFF3
 27400                           intcon	equ	0xFF2
 27401                           intcon3	equ	0xFF0
 27402                           indf0	equ	0xFEF
 27403                           postinc0	equ	0xFEE
 27404                           plusw0	equ	0xFEB
 27405                           fsr0h	equ	0xFEA
 27406                           fsr0l	equ	0xFE9
 27407                           wreg	equ	0xFE8
 27408                           indf1	equ	0xFE7
 27409                           postinc1	equ	0xFE6
 27410                           postdec1	equ	0xFE5
 27411                           plusw1	equ	0xFE3
 27412                           fsr1h	equ	0xFE2
 27413                           fsr1l	equ	0xFE1
 27414                           indf2	equ	0xFDF
 27415                           postinc2	equ	0xFDE
 27416                           postdec2	equ	0xFDD
 27417                           plusw2	equ	0xFDB
 27418                           fsr2h	equ	0xFDA
 27419                           fsr2l	equ	0xFD9
 27420                           status	equ	0xFD8
 27421                           
 27422 ;; *************** function _enc424j600_readSPI *****************
 27423 ;; Defined at:
 27424 ;;		line 499 in file "src/enc424j600/ENC424J600.c"
 27425 ;; Parameters:    Size  Location     Type
 27426 ;;  data            2    0[BANK0 ] PTR unsigned char 
 27427 ;;		 -> enc424j600_clearInterruptFlag@temp(1), enc424j600_getInterruptFlags@high(1), enc424j600_getInterruptFlags@low(1)
      +, enc424j600_disable@temp(1), 
 27428 ;;		 -> enc424j600_enable@temp(1), enc424j600_disableAutoMACInsertion@temp(1), enc424j600_enableAutoMACInsertion@temp(1)
      +, enc424j600_getPacketCount@lowByte(1), 
 27429 ;;		 -> enc424j600_readPHYRegister@highByte(1), enc424j600_readPHYRegister@lowByte(1), enc424j600_readPHYRegister@temp(1
      +), ethernetController_setLEDConfig@data(1), 
 27430 ;;		 -> ethernetController_updateLinkStatus@temp(1), ethernetController_streamFromRXBuffer@temp(1), ethernetController_u
      +pdateNextPacketPointer@newPointerH(1), ethernetController_updateNextPacketPointer@newPointerL(1), 
 27431 ;;		 -> ethernetController_getRSV@temp(6), ethernetController_getEtherTypeField@lowByte(1), ethernetController_getEtherT
      +ypeField@highByte(1), ethernetController_getSourceMACAddress@temp(1), 
 27432 ;;		 -> ethernetController_getDestinationMACAddress@temp(1), mac.address(6), ethernetController_getMacAddress@mac(6), et
      +hernetController_getSiliconRevision@data(1), 
 27433 ;;		 -> ethernetController_checkDeviceId@data(1), ethernetController_softReset@receivedData(2), 
 27434 ;; Auto vars:     Size  Location     Type
 27435 ;;  timeoutCount    4    6[BANK0 ] unsigned long 
 27436 ;; Return value:  Size  Location     Type
 27437 ;;                  1    wreg      void 
 27438 ;; Registers used:
 27439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27440 ;; Tracked objects:
 27441 ;;		On entry : 0/0
 27442 ;;		On exit  : 0/0
 27443 ;;		Unchanged: 0/0
 27444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27445 ;;      Params:         0       2       0       0       0       0       0       0       0
 27446 ;;      Locals:         0       4       0       0       0       0       0       0       0
 27447 ;;      Temps:          0       4       0       0       0       0       0       0       0
 27448 ;;      Totals:         0      10       0       0       0       0       0       0       0
 27449 ;;Total ram usage:       10 bytes
 27450 ;; Hardware stack levels used:    1
 27451 ;; Hardware stack levels required when called:    5
 27452 ;; This function calls:
 27453 ;;		_enc424j600_initSPI
 27454 ;; This function is called by:
 27455 ;;		_ethernetController_getSourceMACAddress
 27456 ;;		_ethernetController_getEtherTypeField
 27457 ;;		_ethernetController_getRSV
 27458 ;;		_ethernetController_updateNextPacketPointer
 27459 ;;		_ethernetController_streamFromRXBuffer
 27460 ;;		_enc424j600_readControlRegisterUnbanked
 27461 ;;		_ethernetController_getDestinationMACAddress
 27462 ;; This function uses a non-reentrant model
 27463 ;;
 27464                           
 27465                           	psect	text115
 27466  00563C                     __ptext115:
 27467                           	opt stack 0
 27468  00563C                     _enc424j600_readSPI:
 27469                           	opt stack 21
 27470                           
 27471                           ;ENC424J600.c: 501: uint32_t timeoutCounter = 0;
 27472                           
 27473                           ;incstack = 0
 27474  00563C  0E00               	movlw	0
 27475  00563E  0100               	movlb	0	; () banked
 27476  005640  6F66               	movwf	enc424j600_readSPI@timeoutCounter& (0+255),b
 27477  005642  0E00               	movlw	0
 27478  005644  6F67               	movwf	(enc424j600_readSPI@timeoutCounter+1)& (0+255),b
 27479  005646  0E00               	movlw	0
 27480  005648  6F68               	movwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),b
 27481  00564A  0E00               	movlw	0
 27482  00564C  6F69               	movwf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),b
 27483                           
 27484                           ;ENC424J600.c: 502: SSP1BUF = 0x00;
 27485  00564E  0E00               	movlw	0
 27486  005650  6EC9               	movwf	4041,c	;volatile
 27487  005652                     
 27488                           ; BSR set to: 0
 27489                           
 27490                           ; BSR set to: 0
 27491  005652  B0C7               	btfsc	4039,0,c	;volatile
 27492  005654  D015               	goto	u10560
 27493                           
 27494                           ; BSR set to: 0
 27495  005656  C066  F062         	movff	enc424j600_readSPI@timeoutCounter,??_enc424j600_readSPI
 27496  00565A  C067  F063         	movff	enc424j600_readSPI@timeoutCounter+1,??_enc424j600_readSPI+1
 27497  00565E  C068  F064         	movff	enc424j600_readSPI@timeoutCounter+2,??_enc424j600_readSPI+2
 27498  005662  C069  F065         	movff	enc424j600_readSPI@timeoutCounter+3,??_enc424j600_readSPI+3
 27499  005666  2B66               	incf	enc424j600_readSPI@timeoutCounter& (0+255),f,b
 27500  005668  0E00               	movlw	0
 27501  00566A  2367               	addwfc	(enc424j600_readSPI@timeoutCounter+1)& (0+255),f,b
 27502  00566C  2368               	addwfc	(enc424j600_readSPI@timeoutCounter+2)& (0+255),f,b
 27503  00566E  2369               	addwfc	(enc424j600_readSPI@timeoutCounter+3)& (0+255),f,b
 27504  005670  5165               	movf	(??_enc424j600_readSPI+3)& (0+255),w,b
 27505  005672  1164               	iorwf	(??_enc424j600_readSPI+2)& (0+255),w,b
 27506  005674  E105               	bnz	l9383
 27507  005676  2962               	incf	??_enc424j600_readSPI& (0+255),w,b
 27508  005678  0E0F               	movlw	15
 27509  00567A  5963               	subwfb	(??_enc424j600_readSPI+1)& (0+255),w,b
 27510  00567C  A0D8               	btfss	status,0,c
 27511  00567E  D7E9               	goto	l241
 27512  005680                     u10560:
 27513  005680                     l9383:
 27514                           
 27515                           ; BSR set to: 0
 27516                           ;ENC424J600.c: 504: if (timeoutCounter >= 0xfff) {
 27517  005680  5169               	movf	(enc424j600_readSPI@timeoutCounter+3)& (0+255),w,b
 27518  005682  1168               	iorwf	(enc424j600_readSPI@timeoutCounter+2)& (0+255),w,b
 27519  005684  E105               	bnz	u10570
 27520  005686  2966               	incf	enc424j600_readSPI@timeoutCounter& (0+255),w,b
 27521  005688  0E0F               	movlw	15
 27522  00568A  5967               	subwfb	(enc424j600_readSPI@timeoutCounter+1)& (0+255),w,b
 27523  00568C  A0D8               	btfss	status,0,c
 27524  00568E  D004               	goto	l245
 27525  005690                     u10570:
 27526                           
 27527                           ; BSR set to: 0
 27528                           ;ENC424J600.c: 505: PORTBbits.RB4=1;
 27529  005690  8881               	bsf	3969,4,c	;volatile
 27530                           
 27531                           ; BSR set to: 0
 27532                           ;ENC424J600.c: 506: enc424j600_initSPI();
 27533  005692  EC9E  F030         	call	_enc424j600_initSPI	;wreg free
 27534                           
 27535                           ;ENC424J600.c: 507: return;
 27536  005696  0012               	return	
 27537  005698                     l245:
 27538                           
 27539                           ;ENC424J600.c: 508: }
 27540                           ;ENC424J600.c: 509: *data = SSP1BUF;
 27541  005698  C060  FFD9         	movff	enc424j600_readSPI@data,fsr2l
 27542  00569C  C061  FFDA         	movff	enc424j600_readSPI@data+1,fsr2h
 27543  0056A0  CFC9 FFDF          	movff	4041,indf2	;volatile
 27544  0056A4  0012               	return		;funcret
 27545  0056A6                     __end_of_enc424j600_readSPI:
 27546                           	opt stack 0
 27547                           tblptru	equ	0xFF8
 27548                           tblptrh	equ	0xFF7
 27549                           tblptrl	equ	0xFF6
 27550                           tablat	equ	0xFF5
 27551                           prodh	equ	0xFF4
 27552                           prodl	equ	0xFF3
 27553                           intcon	equ	0xFF2
 27554                           intcon3	equ	0xFF0
 27555                           indf0	equ	0xFEF
 27556                           postinc0	equ	0xFEE
 27557                           plusw0	equ	0xFEB
 27558                           fsr0h	equ	0xFEA
 27559                           fsr0l	equ	0xFE9
 27560                           wreg	equ	0xFE8
 27561                           indf1	equ	0xFE7
 27562                           postinc1	equ	0xFE6
 27563                           postdec1	equ	0xFE5
 27564                           plusw1	equ	0xFE3
 27565                           fsr1h	equ	0xFE2
 27566                           fsr1l	equ	0xFE1
 27567                           indf2	equ	0xFDF
 27568                           postinc2	equ	0xFDE
 27569                           postdec2	equ	0xFDD
 27570                           plusw2	equ	0xFDB
 27571                           fsr2h	equ	0xFDA
 27572                           fsr2l	equ	0xFD9
 27573                           status	equ	0xFD8
 27574                           
 27575 ;; *************** function _enc424j600_initSPI *****************
 27576 ;; Defined at:
 27577 ;;		line 469 in file "src/enc424j600/ENC424J600.c"
 27578 ;; Parameters:    Size  Location     Type
 27579 ;;		None
 27580 ;; Auto vars:     Size  Location     Type
 27581 ;;		None
 27582 ;; Return value:  Size  Location     Type
 27583 ;;                  1    wreg      void 
 27584 ;; Registers used:
 27585 ;;		None
 27586 ;; Tracked objects:
 27587 ;;		On entry : 0/0
 27588 ;;		On exit  : 0/0
 27589 ;;		Unchanged: 0/0
 27590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27591 ;;      Params:         0       0       0       0       0       0       0       0       0
 27592 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27593 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27594 ;;      Totals:         0       0       0       0       0       0       0       0       0
 27595 ;;Total ram usage:        0 bytes
 27596 ;; Hardware stack levels used:    1
 27597 ;; Hardware stack levels required when called:    4
 27598 ;; This function calls:
 27599 ;;		Nothing
 27600 ;; This function is called by:
 27601 ;;		_ethernetController_init
 27602 ;;		_enc424j600_writeSPI
 27603 ;;		_enc424j600_readSPI
 27604 ;; This function uses a non-reentrant model
 27605 ;;
 27606                           
 27607                           	psect	text116
 27608  00613C                     __ptext116:
 27609                           	opt stack 0
 27610  00613C                     _enc424j600_initSPI:
 27611                           	opt stack 22
 27612                           
 27613                           ;ENC424J600.c: 470: SSP1CON1bits.SSPEN = 0;
 27614                           
 27615                           ;incstack = 0
 27616  00613C  9AC6               	bcf	4038,5,c	;volatile
 27617                           
 27618                           ;ENC424J600.c: 471: SSP1STATbits.CKE = 1;
 27619  00613E  8CC7               	bsf	4039,6,c	;volatile
 27620                           
 27621                           ;ENC424J600.c: 473: TRISBbits.TRISB0 = 1;
 27622  006140  8093               	bsf	3987,0,c	;volatile
 27623                           
 27624                           ;ENC424J600.c: 474: ANSELBbits.ANSB0 = 0;
 27625  006142  010F               	movlb	15	; () banked
 27626  006144  915C               	bcf	92,0,b	;volatile
 27627                           
 27628                           ;ENC424J600.c: 475: TRISBbits.TRISB1 = 0;
 27629  006146  9293               	bcf	3987,1,c	;volatile
 27630                           
 27631                           ;ENC424J600.c: 476: ANSELBbits.ANSB1 = 0;
 27632  006148  935C               	bcf	92,1,b	;volatile
 27633                           
 27634                           ;ENC424J600.c: 477: TRISBbits.TRISB3 = 0;
 27635  00614A  9693               	bcf	3987,3,c	;volatile
 27636                           
 27637                           ;ENC424J600.c: 478: ANSELBbits.ANSB3 = 0;
 27638  00614C  975C               	bcf	92,3,b	;volatile
 27639                           
 27640                           ;ENC424J600.c: 479: TRISBbits.TRISB4 = 0;
 27641  00614E  9893               	bcf	3987,4,c	;volatile
 27642                           
 27643                           ;ENC424J600.c: 480: ANSELBbits.ANSB4 = 0;
 27644  006150  995C               	bcf	92,4,b	;volatile
 27645                           
 27646                           ;ENC424J600.c: 481: PORTBbits.RB4=1;
 27647  006152  8881               	bsf	3969,4,c	;volatile
 27648                           
 27649                           ;ENC424J600.c: 482: SSP1CON1bits.SSPEN = 1;
 27650  006154  8AC6               	bsf	4038,5,c	;volatile
 27651                           
 27652                           ; BSR set to: 15
 27653  006156  0012               	return		;funcret
 27654  006158                     __end_of_enc424j600_initSPI:
 27655                           	opt stack 0
 27656                           tblptru	equ	0xFF8
 27657                           tblptrh	equ	0xFF7
 27658                           tblptrl	equ	0xFF6
 27659                           tablat	equ	0xFF5
 27660                           prodh	equ	0xFF4
 27661                           prodl	equ	0xFF3
 27662                           intcon	equ	0xFF2
 27663                           intcon3	equ	0xFF0
 27664                           indf0	equ	0xFEF
 27665                           postinc0	equ	0xFEE
 27666                           plusw0	equ	0xFEB
 27667                           fsr0h	equ	0xFEA
 27668                           fsr0l	equ	0xFE9
 27669                           wreg	equ	0xFE8
 27670                           indf1	equ	0xFE7
 27671                           postinc1	equ	0xFE6
 27672                           postdec1	equ	0xFE5
 27673                           plusw1	equ	0xFE3
 27674                           fsr1h	equ	0xFE2
 27675                           fsr1l	equ	0xFE1
 27676                           indf2	equ	0xFDF
 27677                           postinc2	equ	0xFDE
 27678                           postdec2	equ	0xFDD
 27679                           plusw2	equ	0xFDB
 27680                           fsr2h	equ	0xFDA
 27681                           fsr2l	equ	0xFD9
 27682                           status	equ	0xFD8
 27683                           
 27684 ;; *************** function _UARTInit *****************
 27685 ;; Defined at:
 27686 ;;		line 26 in file "src/system/uart.c"
 27687 ;; Parameters:    Size  Location     Type
 27688 ;;		None
 27689 ;; Auto vars:     Size  Location     Type
 27690 ;;		None
 27691 ;; Return value:  Size  Location     Type
 27692 ;;                  1    wreg      void 
 27693 ;; Registers used:
 27694 ;;		wreg, status,2
 27695 ;; Tracked objects:
 27696 ;;		On entry : 0/0
 27697 ;;		On exit  : 0/0
 27698 ;;		Unchanged: 0/0
 27699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27700 ;;      Params:         0       0       0       0       0       0       0       0       0
 27701 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27702 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27703 ;;      Totals:         0       0       0       0       0       0       0       0       0
 27704 ;;Total ram usage:        0 bytes
 27705 ;; Hardware stack levels used:    1
 27706 ;; Hardware stack levels required when called:    4
 27707 ;; This function calls:
 27708 ;;		Nothing
 27709 ;; This function is called by:
 27710 ;;		_main
 27711 ;; This function uses a non-reentrant model
 27712 ;;
 27713                           
 27714                           	psect	text117
 27715  006224                     __ptext117:
 27716                           	opt stack 0
 27717  006224                     _UARTInit:
 27718                           	opt stack 26
 27719                           
 27720                           ;uart.c: 27: TXSTA1bits.TXEN = 1;
 27721                           
 27722                           ; BSR set to: 15
 27723                           ;incstack = 0
 27724  006224  8AAC               	bsf	4012,5,c	;volatile
 27725                           
 27726                           ;uart.c: 28: TXSTA1bits.SYNC = 0;
 27727  006226  98AC               	bcf	4012,4,c	;volatile
 27728                           
 27729                           ;uart.c: 29: RCSTA1bits.SPEN = 1;
 27730  006228  8EAB               	bsf	4011,7,c	;volatile
 27731                           
 27732                           ;uart.c: 30: TXSTA1bits.TX9 = 1;
 27733  00622A  8CAC               	bsf	4012,6,c	;volatile
 27734                           
 27735                           ;uart.c: 31: TXSTA1bits.TX9D = 1;
 27736  00622C  80AC               	bsf	4012,0,c	;volatile
 27737                           
 27738                           ;uart.c: 32: SPBRG = 3;
 27739  00622E  0E03               	movlw	3
 27740  006230  6EAF               	movwf	4015,c	;volatile
 27741  006232  0012               	return		;funcret
 27742  006234                     __end_of_UARTInit:
 27743                           	opt stack 0
 27744                           tblptru	equ	0xFF8
 27745                           tblptrh	equ	0xFF7
 27746                           tblptrl	equ	0xFF6
 27747                           tablat	equ	0xFF5
 27748                           prodh	equ	0xFF4
 27749                           prodl	equ	0xFF3
 27750                           intcon	equ	0xFF2
 27751                           intcon3	equ	0xFF0
 27752                           indf0	equ	0xFEF
 27753                           postinc0	equ	0xFEE
 27754                           plusw0	equ	0xFEB
 27755                           fsr0h	equ	0xFEA
 27756                           fsr0l	equ	0xFE9
 27757                           wreg	equ	0xFE8
 27758                           indf1	equ	0xFE7
 27759                           postinc1	equ	0xFE6
 27760                           postdec1	equ	0xFE5
 27761                           plusw1	equ	0xFE3
 27762                           fsr1h	equ	0xFE2
 27763                           fsr1l	equ	0xFE1
 27764                           indf2	equ	0xFDF
 27765                           postinc2	equ	0xFDE
 27766                           postdec2	equ	0xFDD
 27767                           plusw2	equ	0xFDB
 27768                           fsr2h	equ	0xFDA
 27769                           fsr2l	equ	0xFD9
 27770                           status	equ	0xFD8
 27771                           
 27772 ;; *************** function _ISR *****************
 27773 ;; Defined at:
 27774 ;;		line 287 in file "src/system/main.c"
 27775 ;; Parameters:    Size  Location     Type
 27776 ;;		None
 27777 ;; Auto vars:     Size  Location     Type
 27778 ;;		None
 27779 ;; Return value:  Size  Location     Type
 27780 ;;                  1    wreg      void 
 27781 ;; Registers used:
 27782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27783 ;; Tracked objects:
 27784 ;;		On entry : 0/0
 27785 ;;		On exit  : 0/0
 27786 ;;		Unchanged: 0/0
 27787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27788 ;;      Params:         0       0       0       0       0       0       0       0       0
 27789 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27790 ;;      Temps:         19       0       0       0       0       0       0       0       0
 27791 ;;      Totals:        19       0       0       0       0       0       0       0       0
 27792 ;;Total ram usage:       19 bytes
 27793 ;; Hardware stack levels used:    1
 27794 ;; Hardware stack levels required when called:    3
 27795 ;; This function calls:
 27796 ;;		_buttonHandler
 27797 ;;		_sevenSegmentUpdate
 27798 ;;		_updateTime
 27799 ;; This function is called by:
 27800 ;;		Interrupt level 2
 27801 ;; This function uses a non-reentrant model
 27802 ;;
 27803                           
 27804                           	psect	intcode
 27805  000008                     __pintcode:
 27806                           	opt stack 0
 27807  000008                     _ISR:
 27808                           	opt stack 16
 27809                           
 27810                           ;incstack = 0
 27811  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 27812  00000A  CFFA F017          	movff	pclath,??_ISR+1
 27813  00000E  CFFB F018          	movff	pclatu,??_ISR+2
 27814  000012  CFE9 F019          	movff	fsr0l,??_ISR+3
 27815  000016  CFEA F01A          	movff	fsr0h,??_ISR+4
 27816  00001A  CFE1 F01B          	movff	fsr1l,??_ISR+5
 27817  00001E  CFE2 F01C          	movff	fsr1h,??_ISR+6
 27818  000022  CFD9 F01D          	movff	fsr2l,??_ISR+7
 27819  000026  CFDA F01E          	movff	fsr2h,??_ISR+8
 27820  00002A  CFF3 F01F          	movff	prodl,??_ISR+9
 27821  00002E  CFF4 F020          	movff	prodh,??_ISR+10
 27822  000032  CFF6 F021          	movff	tblptrl,??_ISR+11
 27823  000036  CFF7 F022          	movff	tblptrh,??_ISR+12
 27824  00003A  CFF8 F023          	movff	tblptru,??_ISR+13
 27825  00003E  CFF5 F024          	movff	tablat,??_ISR+14
 27826  000042  C051  F025         	movff	btemp,??_ISR+15
 27827  000046  C052  F026         	movff	btemp+1,??_ISR+16
 27828  00004A  C053  F027         	movff	btemp+2,??_ISR+17
 27829  00004E  C054  F028         	movff	btemp+3,??_ISR+18
 27830                           
 27831                           ;main.c: 289: if (PIR1bits.CCP1IF) {
 27832  000052  A49E               	btfss	3998,2,c	;volatile
 27833  000054  D012               	goto	i2l759
 27834                           
 27835                           ;main.c: 290: PIR1bits.CCP1IF = 0;
 27836  000056  949E               	bcf	3998,2,c	;volatile
 27837                           
 27838                           ;main.c: 291: PORTBbits.RB6 = ~PORTBbits.RB6;
 27839  000058  AC81               	btfss	3969,6,c	;volatile
 27840  00005A  D002               	goto	i2u958_40
 27841  00005C  0E01               	movlw	1
 27842  00005E  D001               	goto	i2u958_46
 27843  000060                     i2u958_40:
 27844  000060  0E00               	movlw	0
 27845  000062                     i2u958_46:
 27846  000062  0AFF               	xorlw	255
 27847  000064  6E16               	movwf	??_ISR& (0+255),c
 27848  000066  3A16               	swapf	??_ISR,f,c
 27849  000068  4616               	rlncf	??_ISR,f,c
 27850  00006A  4616               	rlncf	??_ISR,f,c
 27851  00006C  5081               	movf	3969,w,c	;volatile
 27852  00006E  1816               	xorwf	??_ISR,w,c
 27853  000070  0BBF               	andlw	-65
 27854  000072  1816               	xorwf	??_ISR,w,c
 27855  000074  6E81               	movwf	3969,c	;volatile
 27856                           
 27857                           ;main.c: 292: updateTime();
 27858  000076  EC28  F031         	call	_updateTime	;wreg free
 27859  00007A                     i2l759:
 27860                           
 27861                           ;main.c: 293: }
 27862                           ;main.c: 295: if (INTCONbits.TMR0IF) {
 27863  00007A  A4F2               	btfss	intcon,2,c	;volatile
 27864  00007C  D00D               	goto	i2l760
 27865                           
 27866                           ;main.c: 296: INTCONbits.TMR0IF = 0;
 27867  00007E  94F2               	bcf	intcon,2,c	;volatile
 27868                           
 27869                           ;main.c: 297: sevenSegmentUpdate(numberToDisplay);
 27870  000080  C039  F00F         	movff	_numberToDisplay,sevenSegmentUpdate@numberToDisplay	;volatile
 27871  000084  C03A  F010         	movff	_numberToDisplay+1,sevenSegmentUpdate@numberToDisplay+1	;volatile
 27872  000088  ECCC  F024         	call	_sevenSegmentUpdate	;wreg free
 27873                           
 27874                           ;main.c: 298: buttonHandler(&buttonState);
 27875  00008C  0E8A               	movlw	low _buttonState
 27876  00008E  6E01               	movwf	buttonHandler@state,c
 27877  000090  0E02               	movlw	high _buttonState
 27878  000092  6E02               	movwf	buttonHandler@state+1,c
 27879  000094  EC34  F026         	call	_buttonHandler	;wreg free
 27880  000098                     i2l760:
 27881                           
 27882                           ;main.c: 301: }
 27883                           ;main.c: 303: if (INTCON3bits.INT2IF) {
 27884  000098  B2F0               	btfsc	intcon3,1,c	;volatile
 27885                           
 27886                           ;main.c: 304: INTCON3bits.INT2IF = 0;
 27887  00009A  92F0               	bcf	intcon3,1,c	;volatile
 27888                           
 27889                           ;main.c: 311: }
 27890                           ;main.c: 312: if (RCIF) {
 27891  00009C  C028  F054         	movff	??_ISR+18,btemp+3
 27892  0000A0  C027  F053         	movff	??_ISR+17,btemp+2
 27893  0000A4  C026  F052         	movff	??_ISR+16,btemp+1
 27894  0000A8  C025  F051         	movff	??_ISR+15,btemp
 27895  0000AC  C024  FFF5         	movff	??_ISR+14,tablat
 27896  0000B0  C023  FFF8         	movff	??_ISR+13,tblptru
 27897  0000B4  C022  FFF7         	movff	??_ISR+12,tblptrh
 27898  0000B8  C021  FFF6         	movff	??_ISR+11,tblptrl
 27899  0000BC  C020  FFF4         	movff	??_ISR+10,prodh
 27900  0000C0  C01F  FFF3         	movff	??_ISR+9,prodl
 27901  0000C4  C01E  FFDA         	movff	??_ISR+8,fsr2h
 27902  0000C8  C01D  FFD9         	movff	??_ISR+7,fsr2l
 27903  0000CC  C01C  FFE2         	movff	??_ISR+6,fsr1h
 27904  0000D0  C01B  FFE1         	movff	??_ISR+5,fsr1l
 27905  0000D4  C01A  FFEA         	movff	??_ISR+4,fsr0h
 27906  0000D8  C019  FFE9         	movff	??_ISR+3,fsr0l
 27907  0000DC  C018  FFFB         	movff	??_ISR+2,pclatu
 27908  0000E0  C017  FFFA         	movff	??_ISR+1,pclath
 27909  0000E4  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 27910  0000E6  0011               	retfie		f
 27911  0000E8                     __end_of_ISR:
 27912                           	opt stack 0
 27913                           pclatu	equ	0xFFB
 27914                           pclath	equ	0xFFA
 27915                           tblptru	equ	0xFF8
 27916                           tblptrh	equ	0xFF7
 27917                           tblptrl	equ	0xFF6
 27918                           tablat	equ	0xFF5
 27919                           prodh	equ	0xFF4
 27920                           prodl	equ	0xFF3
 27921                           intcon	equ	0xFF2
 27922                           intcon3	equ	0xFF0
 27923                           indf0	equ	0xFEF
 27924                           postinc0	equ	0xFEE
 27925                           plusw0	equ	0xFEB
 27926                           fsr0h	equ	0xFEA
 27927                           fsr0l	equ	0xFE9
 27928                           wreg	equ	0xFE8
 27929                           indf1	equ	0xFE7
 27930                           postinc1	equ	0xFE6
 27931                           postdec1	equ	0xFE5
 27932                           plusw1	equ	0xFE3
 27933                           fsr1h	equ	0xFE2
 27934                           fsr1l	equ	0xFE1
 27935                           indf2	equ	0xFDF
 27936                           postinc2	equ	0xFDE
 27937                           postdec2	equ	0xFDD
 27938                           plusw2	equ	0xFDB
 27939                           fsr2h	equ	0xFDA
 27940                           fsr2l	equ	0xFD9
 27941                           status	equ	0xFD8
 27942                           
 27943 ;; *************** function _updateTime *****************
 27944 ;; Defined at:
 27945 ;;		line 30 in file "src/stack/time.c"
 27946 ;; Parameters:    Size  Location     Type
 27947 ;;		None
 27948 ;; Auto vars:     Size  Location     Type
 27949 ;;		None
 27950 ;; Return value:  Size  Location     Type
 27951 ;;                  1    wreg      void 
 27952 ;; Registers used:
 27953 ;;		wreg, status,2, status,0
 27954 ;; Tracked objects:
 27955 ;;		On entry : 0/0
 27956 ;;		On exit  : 0/0
 27957 ;;		Unchanged: 0/0
 27958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 27959 ;;      Params:         0       0       0       0       0       0       0       0       0
 27960 ;;      Locals:         0       0       0       0       0       0       0       0       0
 27961 ;;      Temps:          0       0       0       0       0       0       0       0       0
 27962 ;;      Totals:         0       0       0       0       0       0       0       0       0
 27963 ;;Total ram usage:        0 bytes
 27964 ;; Hardware stack levels used:    1
 27965 ;; This function calls:
 27966 ;;		Nothing
 27967 ;; This function is called by:
 27968 ;;		_ISR
 27969 ;; This function uses a non-reentrant model
 27970 ;;
 27971                           
 27972                           	psect	text119
 27973  006250                     __ptext119:
 27974                           	opt stack 0
 27975  006250                     _updateTime:
 27976                           	opt stack 18
 27977                           
 27978                           ;time.c: 31: time++;
 27979                           
 27980                           ;incstack = 0
 27981  006250  0E01               	movlw	1
 27982  006252  2629               	addwf	_time,f,c	;volatile
 27983  006254  0E00               	movlw	0
 27984  006256  222A               	addwfc	_time+1,f,c	;volatile
 27985  006258  222B               	addwfc	_time+2,f,c	;volatile
 27986  00625A  222C               	addwfc	_time+3,f,c	;volatile
 27987  00625C  0012               	return		;funcret
 27988  00625E                     __end_of_updateTime:
 27989                           	opt stack 0
 27990                           pclatu	equ	0xFFB
 27991                           pclath	equ	0xFFA
 27992                           tblptru	equ	0xFF8
 27993                           tblptrh	equ	0xFF7
 27994                           tblptrl	equ	0xFF6
 27995                           tablat	equ	0xFF5
 27996                           prodh	equ	0xFF4
 27997                           prodl	equ	0xFF3
 27998                           intcon	equ	0xFF2
 27999                           intcon3	equ	0xFF0
 28000                           indf0	equ	0xFEF
 28001                           postinc0	equ	0xFEE
 28002                           plusw0	equ	0xFEB
 28003                           fsr0h	equ	0xFEA
 28004                           fsr0l	equ	0xFE9
 28005                           wreg	equ	0xFE8
 28006                           indf1	equ	0xFE7
 28007                           postinc1	equ	0xFE6
 28008                           postdec1	equ	0xFE5
 28009                           plusw1	equ	0xFE3
 28010                           fsr1h	equ	0xFE2
 28011                           fsr1l	equ	0xFE1
 28012                           indf2	equ	0xFDF
 28013                           postinc2	equ	0xFDE
 28014                           postdec2	equ	0xFDD
 28015                           plusw2	equ	0xFDB
 28016                           fsr2h	equ	0xFDA
 28017                           fsr2l	equ	0xFD9
 28018                           status	equ	0xFD8
 28019                           
 28020 ;; *************** function _sevenSegmentUpdate *****************
 28021 ;; Defined at:
 28022 ;;		line 41 in file "src/system/sevenseg.c"
 28023 ;; Parameters:    Size  Location     Type
 28024 ;;  numberToDisp    2   14[COMRAM] unsigned int 
 28025 ;; Auto vars:     Size  Location     Type
 28026 ;;  i               1   20[COMRAM] unsigned char 
 28027 ;; Return value:  Size  Location     Type
 28028 ;;                  1    wreg      void 
 28029 ;; Registers used:
 28030 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 28031 ;; Tracked objects:
 28032 ;;		On entry : 0/0
 28033 ;;		On exit  : 0/0
 28034 ;;		Unchanged: 0/0
 28035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28036 ;;      Params:         2       0       0       0       0       0       0       0       0
 28037 ;;      Locals:         3       0       0       0       0       0       0       0       0
 28038 ;;      Temps:          2       0       0       0       0       0       0       0       0
 28039 ;;      Totals:         7       0       0       0       0       0       0       0       0
 28040 ;;Total ram usage:        7 bytes
 28041 ;; Hardware stack levels used:    1
 28042 ;; Hardware stack levels required when called:    2
 28043 ;; This function calls:
 28044 ;;		_parseNumber
 28045 ;; This function is called by:
 28046 ;;		_ISR
 28047 ;; This function uses a non-reentrant model
 28048 ;;
 28049                           
 28050                           	psect	text120
 28051  004998                     __ptext120:
 28052                           	opt stack 0
 28053  004998                     _sevenSegmentUpdate:
 28054                           	opt stack 16
 28055                           
 28056                           ;sevenseg.c: 43: uint8_t static digitPointer = 0;
 28057                           ;sevenseg.c: 44: uint8_t static digitsToDisplay[3] = {0, 0, 0};
 28058                           ;sevenseg.c: 45: PORTC &= ~(unsigned)(1 << digitPointer);
 28059                           
 28060                           ;incstack = 0
 28061  004998  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 28062  00499C  0E01               	movlw	1
 28063  00499E  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 28064  0049A0  2A11               	incf	??_sevenSegmentUpdate,f,c
 28065  0049A2  D002               	goto	i2u924_44
 28066  0049A4                     i2u924_45:
 28067  0049A4  90D8               	bcf	status,0,c
 28068  0049A6  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 28069  0049A8                     i2u924_44:
 28070  0049A8  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 28071  0049AA  D7FC               	goto	i2u924_45
 28072  0049AC  5012               	movf	??_sevenSegmentUpdate+1,w,c
 28073  0049AE  0AFF               	xorlw	255
 28074  0049B0  1682               	andwf	3970,f,c	;volatile
 28075                           
 28076                           ;sevenseg.c: 46: PORTA = 0x00;
 28077  0049B2  0E00               	movlw	0
 28078  0049B4  6E80               	movwf	3968,c	;volatile
 28079                           
 28080                           ;sevenseg.c: 47: digitPointer = (unsigned)((digitPointer >= 2) ? 0 : digitPointer + 1);
 28081  0049B6  0E02               	movlw	2
 28082  0049B8  6049               	cpfslt	sevenSegmentUpdate@digitPointer,c
 28083  0049BA  D007               	goto	i2l792
 28084  0049BC  0E01               	movlw	1
 28085  0049BE  2449               	addwf	sevenSegmentUpdate@digitPointer,w,c
 28086  0049C0  6E13               	movwf	_sevenSegmentUpdate$2675,c
 28087  0049C2  6A14               	clrf	_sevenSegmentUpdate$2675+1,c
 28088  0049C4  0E00               	movlw	0
 28089  0049C6  2214               	addwfc	_sevenSegmentUpdate$2675+1,f,c
 28090  0049C8  D004               	goto	i2l794
 28091  0049CA                     i2l792:
 28092  0049CA  0E00               	movlw	0
 28093  0049CC  6E14               	movwf	_sevenSegmentUpdate$2675+1,c
 28094  0049CE  0E00               	movlw	0
 28095  0049D0  6E13               	movwf	_sevenSegmentUpdate$2675,c
 28096  0049D2                     i2l794:
 28097  0049D2  C013  F049         	movff	_sevenSegmentUpdate$2675,sevenSegmentUpdate@digitPointer
 28098                           
 28099                           ;sevenseg.c: 49: if (numberToDisplay > 999) {
 28100  0049D6  0EE8               	movlw	232
 28101  0049D8  5C0F               	subwf	sevenSegmentUpdate@numberToDisplay,w,c
 28102  0049DA  0E03               	movlw	3
 28103  0049DC  5810               	subwfb	sevenSegmentUpdate@numberToDisplay+1,w,c
 28104  0049DE  B0D8               	btfsc	status,0,c
 28105  0049E0  0012               	return	
 28106                           
 28107                           ;sevenseg.c: 51: }
 28108                           ;sevenseg.c: 52: for (uint8_t i = 0; i < 3; i++) {
 28109                           
 28110                           ;sevenseg.c: 50: return;
 28111  0049E2  0E00               	movlw	0
 28112  0049E4  6E15               	movwf	sevenSegmentUpdate@i,c
 28113  0049E6                     i2l8325:
 28114  0049E6  0E02               	movlw	2
 28115  0049E8  6415               	cpfsgt	sevenSegmentUpdate@i,c
 28116  0049EA  D001               	goto	i2l797
 28117  0049EC  D013               	goto	i2u928_40
 28118  0049EE                     i2l797:
 28119                           
 28120                           ;sevenseg.c: 53: digitsToDisplay[i] = parseNumber(numberToDisplay, i);
 28121  0049EE  5015               	movf	sevenSegmentUpdate@i,w,c
 28122  0049F0  0D01               	mullw	1
 28123  0049F2  0E5F               	movlw	low sevenSegmentUpdate@digitsToDisplay
 28124  0049F4  24F3               	addwf	prodl,w,c
 28125  0049F6  6ED9               	movwf	fsr2l,c
 28126  0049F8  0E02               	movlw	high sevenSegmentUpdate@digitsToDisplay
 28127  0049FA  20F4               	addwfc	prodh,w,c
 28128  0049FC  6EDA               	movwf	fsr2h,c
 28129  0049FE  C00F  F008         	movff	sevenSegmentUpdate@numberToDisplay,parseNumber@numberToDisplay
 28130  004A02  C010  F009         	movff	sevenSegmentUpdate@numberToDisplay+1,parseNumber@numberToDisplay+1
 28131  004A06  C015  F00A         	movff	sevenSegmentUpdate@i,parseNumber@digit
 28132  004A0A  EC0F  F029         	call	_parseNumber	;wreg free
 28133  004A0E  6EDF               	movwf	indf2,c
 28134  004A10  2A15               	incf	sevenSegmentUpdate@i,f,c
 28135  004A12  D7E9               	goto	i2l8325
 28136  004A14                     i2u928_40:
 28137                           
 28138                           ;sevenseg.c: 54: }
 28139                           ;sevenseg.c: 55: PORTC |= (unsigned)(1 << digitPointer);
 28140  004A14  C049  F011         	movff	sevenSegmentUpdate@digitPointer,??_sevenSegmentUpdate
 28141  004A18  0E01               	movlw	1
 28142  004A1A  6E12               	movwf	(??_sevenSegmentUpdate+1)& (0+255),c
 28143  004A1C  2A11               	incf	??_sevenSegmentUpdate,f,c
 28144  004A1E  D002               	goto	i2u929_44
 28145  004A20                     i2u929_45:
 28146  004A20  90D8               	bcf	status,0,c
 28147  004A22  3612               	rlcf	??_sevenSegmentUpdate+1,f,c
 28148  004A24                     i2u929_44:
 28149  004A24  2E11               	decfsz	??_sevenSegmentUpdate,f,c
 28150  004A26  D7FC               	goto	i2u929_45
 28151  004A28  5012               	movf	??_sevenSegmentUpdate+1,w,c
 28152  004A2A  1282               	iorwf	3970,f,c	;volatile
 28153                           
 28154                           ;sevenseg.c: 56: PORTA = (sevenSegCharacters[digitsToDisplay[digitPointer]]);
 28155  004A2C  5049               	movf	sevenSegmentUpdate@digitPointer,w,c
 28156  004A2E  0D01               	mullw	1
 28157  004A30  0E5F               	movlw	low sevenSegmentUpdate@digitsToDisplay
 28158  004A32  24F3               	addwf	prodl,w,c
 28159  004A34  6ED9               	movwf	fsr2l,c
 28160  004A36  0E02               	movlw	high sevenSegmentUpdate@digitsToDisplay
 28161  004A38  20F4               	addwfc	prodh,w,c
 28162  004A3A  6EDA               	movwf	fsr2h,c
 28163  004A3C  50DF               	movf	indf2,w,c
 28164  004A3E  6E11               	movwf	??_sevenSegmentUpdate& (0+255),c
 28165  004A40  5011               	movf	??_sevenSegmentUpdate,w,c
 28166  004A42  0D01               	mullw	1
 28167  004A44  0E9D               	movlw	low _sevenSegCharacters
 28168  004A46  24F3               	addwf	prodl,w,c
 28169  004A48  6ED9               	movwf	fsr2l,c
 28170  004A4A  0E02               	movlw	high _sevenSegCharacters
 28171  004A4C  20F4               	addwfc	prodh,w,c
 28172  004A4E  6EDA               	movwf	fsr2h,c
 28173  004A50  50DF               	movf	indf2,w,c
 28174  004A52  6E80               	movwf	3968,c	;volatile
 28175  004A54  0012               	return		;funcret
 28176  004A56                     __end_of_sevenSegmentUpdate:
 28177                           	opt stack 0
 28178                           pclatu	equ	0xFFB
 28179                           pclath	equ	0xFFA
 28180                           tblptru	equ	0xFF8
 28181                           tblptrh	equ	0xFF7
 28182                           tblptrl	equ	0xFF6
 28183                           tablat	equ	0xFF5
 28184                           prodh	equ	0xFF4
 28185                           prodl	equ	0xFF3
 28186                           intcon	equ	0xFF2
 28187                           intcon3	equ	0xFF0
 28188                           indf0	equ	0xFEF
 28189                           postinc0	equ	0xFEE
 28190                           plusw0	equ	0xFEB
 28191                           fsr0h	equ	0xFEA
 28192                           fsr0l	equ	0xFE9
 28193                           wreg	equ	0xFE8
 28194                           indf1	equ	0xFE7
 28195                           postinc1	equ	0xFE6
 28196                           postdec1	equ	0xFE5
 28197                           plusw1	equ	0xFE3
 28198                           fsr1h	equ	0xFE2
 28199                           fsr1l	equ	0xFE1
 28200                           indf2	equ	0xFDF
 28201                           postinc2	equ	0xFDE
 28202                           postdec2	equ	0xFDD
 28203                           plusw2	equ	0xFDB
 28204                           fsr2h	equ	0xFDA
 28205                           fsr2l	equ	0xFD9
 28206                           status	equ	0xFD8
 28207                           
 28208 ;; *************** function _parseNumber *****************
 28209 ;; Defined at:
 28210 ;;		line 59 in file "src/system/sevenseg.c"
 28211 ;; Parameters:    Size  Location     Type
 28212 ;;  numberToDisp    2    7[COMRAM] unsigned int 
 28213 ;;  digit           1    9[COMRAM] unsigned char 
 28214 ;; Auto vars:     Size  Location     Type
 28215 ;;  hundreds        1   13[COMRAM] unsigned char 
 28216 ;;  tens            1   12[COMRAM] unsigned char 
 28217 ;;  ones            1   11[COMRAM] unsigned char 
 28218 ;; Return value:  Size  Location     Type
 28219 ;;                  1    wreg      unsigned char 
 28220 ;; Registers used:
 28221 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 28222 ;; Tracked objects:
 28223 ;;		On entry : 0/0
 28224 ;;		On exit  : 0/0
 28225 ;;		Unchanged: 0/0
 28226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28227 ;;      Params:         3       0       0       0       0       0       0       0       0
 28228 ;;      Locals:         3       0       0       0       0       0       0       0       0
 28229 ;;      Temps:          1       0       0       0       0       0       0       0       0
 28230 ;;      Totals:         7       0       0       0       0       0       0       0       0
 28231 ;;Total ram usage:        7 bytes
 28232 ;; Hardware stack levels used:    1
 28233 ;; Hardware stack levels required when called:    1
 28234 ;; This function calls:
 28235 ;;		i2___lwdiv
 28236 ;; This function is called by:
 28237 ;;		_sevenSegmentUpdate
 28238 ;; This function uses a non-reentrant model
 28239 ;;
 28240                           
 28241                           	psect	text121
 28242  00521E                     __ptext121:
 28243                           	opt stack 0
 28244  00521E                     _parseNumber:
 28245                           	opt stack 16
 28246                           
 28247                           ;sevenseg.c: 61: uint8_t hundreds = numberToDisplay / 100u;
 28248                           
 28249                           ;incstack = 0
 28250  00521E  C008  F001         	movff	parseNumber@numberToDisplay,i2___lwdiv@dividend
 28251  005222  C009  F002         	movff	parseNumber@numberToDisplay+1,i2___lwdiv@dividend+1
 28252  005226  0E00               	movlw	0
 28253  005228  6E04               	movwf	i2___lwdiv@divisor+1,c
 28254  00522A  0E64               	movlw	100
 28255  00522C  6E03               	movwf	i2___lwdiv@divisor,c
 28256  00522E  ECC1  F02C         	call	i2___lwdiv	;wreg free
 28257  005232  5001               	movf	?i2___lwdiv,w,c
 28258  005234  6E0E               	movwf	parseNumber@hundreds,c
 28259                           
 28260                           ;sevenseg.c: 62: uint8_t tens = (numberToDisplay - hundreds * 100u) / 10u;
 28261  005236  500E               	movf	parseNumber@hundreds,w,c
 28262  005238  0D64               	mullw	100
 28263  00523A  1EF3               	comf	prodl,f,c
 28264  00523C  1EF4               	comf	prodh,f,c
 28265  00523E  4AF3               	infsnz	prodl,f,c
 28266  005240  2AF4               	incf	prodh,f,c
 28267  005242  5008               	movf	parseNumber@numberToDisplay,w,c
 28268  005244  24F3               	addwf	prodl,w,c
 28269  005246  6E01               	movwf	i2___lwdiv@dividend,c
 28270  005248  5009               	movf	parseNumber@numberToDisplay+1,w,c
 28271  00524A  20F4               	addwfc	prodh,w,c
 28272  00524C  6E02               	movwf	i2___lwdiv@dividend+1,c
 28273  00524E  0E00               	movlw	0
 28274  005250  6E04               	movwf	i2___lwdiv@divisor+1,c
 28275  005252  0E0A               	movlw	10
 28276  005254  6E03               	movwf	i2___lwdiv@divisor,c
 28277  005256  ECC1  F02C         	call	i2___lwdiv	;wreg free
 28278  00525A  5001               	movf	?i2___lwdiv,w,c
 28279  00525C  6E0D               	movwf	parseNumber@tens,c
 28280                           
 28281                           ;sevenseg.c: 63: uint8_t ones = (numberToDisplay - hundreds * 100u - tens * 10u);
 28282  00525E  500D               	movf	parseNumber@tens,w,c
 28283  005260  0D0A               	mullw	10
 28284  005262  CFF3 F00B          	movff	prodl,??_parseNumber
 28285  005266  500E               	movf	parseNumber@hundreds,w,c
 28286  005268  0D64               	mullw	100
 28287  00526A  50F3               	movf	prodl,w,c
 28288  00526C  240B               	addwf	??_parseNumber,w,c
 28289  00526E  0800               	sublw	0
 28290  005270  2408               	addwf	parseNumber@numberToDisplay,w,c
 28291  005272  6E0C               	movwf	parseNumber@ones,c
 28292                           
 28293                           ;sevenseg.c: 64: switch (digit) {
 28294  005274  D008               	goto	i2l801
 28295  005276                     
 28296                           ;sevenseg.c: 66: return ones;
 28297  005276  500C               	movf	parseNumber@ones,w,c
 28298  005278  0012               	return	
 28299  00527A                     
 28300                           ;sevenseg.c: 68: return tens;
 28301  00527A  500D               	movf	parseNumber@tens,w,c
 28302  00527C  0012               	return	
 28303  00527E                     
 28304                           ;sevenseg.c: 70: return hundreds;
 28305  00527E  500E               	movf	parseNumber@hundreds,w,c
 28306  005280  0012               	return	
 28307  005282  0E00               	movlw	0
 28308                           
 28309                           ;sevenseg.c: 72: }
 28310  005284  0012               	return	
 28311  005286                     i2l801:
 28312  005286  500A               	movf	parseNumber@digit,w,c
 28313                           
 28314                           ; Switch size 1, requested type "space"
 28315                           ; Number of cases is 3, Range of values is 0 to 2
 28316                           ; switch strategies available:
 28317                           ; Name         Instructions Cycles
 28318                           ; simple_byte           10     6 (average)
 28319                           ;	Chosen strategy is simple_byte
 28320  005288  0A00               	xorlw	0	; case 0
 28321  00528A  B4D8               	btfsc	status,2,c
 28322  00528C  D7F8               	goto	i2l805
 28323  00528E  0A01               	xorlw	1	; case 1
 28324  005290  B4D8               	btfsc	status,2,c
 28325  005292  D7F3               	goto	i2l804
 28326  005294  0A03               	xorlw	3	; case 2
 28327  005296  B4D8               	btfsc	status,2,c
 28328  005298  D7EE               	goto	i2l802
 28329  00529A  D7F3               	goto	i2l806
 28330  00529C                     __end_of_parseNumber:
 28331                           	opt stack 0
 28332                           pclatu	equ	0xFFB
 28333                           pclath	equ	0xFFA
 28334                           tblptru	equ	0xFF8
 28335                           tblptrh	equ	0xFF7
 28336                           tblptrl	equ	0xFF6
 28337                           tablat	equ	0xFF5
 28338                           prodh	equ	0xFF4
 28339                           prodl	equ	0xFF3
 28340                           intcon	equ	0xFF2
 28341                           intcon3	equ	0xFF0
 28342                           indf0	equ	0xFEF
 28343                           postinc0	equ	0xFEE
 28344                           plusw0	equ	0xFEB
 28345                           fsr0h	equ	0xFEA
 28346                           fsr0l	equ	0xFE9
 28347                           wreg	equ	0xFE8
 28348                           indf1	equ	0xFE7
 28349                           postinc1	equ	0xFE6
 28350                           postdec1	equ	0xFE5
 28351                           plusw1	equ	0xFE3
 28352                           fsr1h	equ	0xFE2
 28353                           fsr1l	equ	0xFE1
 28354                           indf2	equ	0xFDF
 28355                           postinc2	equ	0xFDE
 28356                           postdec2	equ	0xFDD
 28357                           plusw2	equ	0xFDB
 28358                           fsr2h	equ	0xFDA
 28359                           fsr2l	equ	0xFD9
 28360                           status	equ	0xFD8
 28361                           
 28362 ;; *************** function i2___lwdiv *****************
 28363 ;; Defined at:
 28364 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
 28365 ;; Parameters:    Size  Location     Type
 28366 ;;  dividend        2    0[COMRAM] unsigned int 
 28367 ;;  divisor         2    2[COMRAM] unsigned int 
 28368 ;; Auto vars:     Size  Location     Type
 28369 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 28370 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 28371 ;; Return value:  Size  Location     Type
 28372 ;;                  2    0[COMRAM] unsigned int 
 28373 ;; Registers used:
 28374 ;;		wreg, status,2, status,0
 28375 ;; Tracked objects:
 28376 ;;		On entry : 0/0
 28377 ;;		On exit  : 0/0
 28378 ;;		Unchanged: 0/0
 28379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28380 ;;      Params:         4       0       0       0       0       0       0       0       0
 28381 ;;      Locals:         3       0       0       0       0       0       0       0       0
 28382 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28383 ;;      Totals:         7       0       0       0       0       0       0       0       0
 28384 ;;Total ram usage:        7 bytes
 28385 ;; Hardware stack levels used:    1
 28386 ;; This function calls:
 28387 ;;		Nothing
 28388 ;; This function is called by:
 28389 ;;		_parseNumber
 28390 ;; This function uses a non-reentrant model
 28391 ;;
 28392                           
 28393                           	psect	text122
 28394  005982                     __ptext122:
 28395                           	opt stack 0
 28396  005982                     i2___lwdiv:
 28397                           	opt stack 16
 28398                           
 28399                           ;incstack = 0
 28400  005982  0E00               	movlw	0
 28401  005984  6E06               	movwf	i2___lwdiv@quotient+1,c
 28402  005986  0E00               	movlw	0
 28403  005988  6E05               	movwf	i2___lwdiv@quotient,c
 28404  00598A  5003               	movf	i2___lwdiv@divisor,w,c
 28405  00598C  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 28406  00598E  B4D8               	btfsc	status,2,c
 28407  005990  D01C               	goto	i2l1774
 28408  005992  0E01               	movlw	1
 28409  005994  6E07               	movwf	i2___lwdiv@counter,c
 28410  005996  D004               	goto	i2l1769
 28411  005998  90D8               	bcf	status,0,c
 28412  00599A  3603               	rlcf	i2___lwdiv@divisor,f,c
 28413  00599C  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 28414  00599E  2A07               	incf	i2___lwdiv@counter,f,c
 28415  0059A0                     i2l1769:
 28416  0059A0  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 28417  0059A2  D7FA               	goto	i2l1770
 28418  0059A4                     i2u833_40:
 28419  0059A4  90D8               	bcf	status,0,c
 28420  0059A6  3605               	rlcf	i2___lwdiv@quotient,f,c
 28421  0059A8  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 28422  0059AA  5003               	movf	i2___lwdiv@divisor,w,c
 28423  0059AC  5C01               	subwf	i2___lwdiv@dividend,w,c
 28424  0059AE  5004               	movf	i2___lwdiv@divisor+1,w,c
 28425  0059B0  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 28426  0059B2  A0D8               	btfss	status,0,c
 28427  0059B4  D005               	goto	i2l1773
 28428  0059B6  5003               	movf	i2___lwdiv@divisor,w,c
 28429  0059B8  5E01               	subwf	i2___lwdiv@dividend,f,c
 28430  0059BA  5004               	movf	i2___lwdiv@divisor+1,w,c
 28431  0059BC  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 28432  0059BE  8005               	bsf	i2___lwdiv@quotient,0,c
 28433  0059C0                     i2l1773:
 28434  0059C0  90D8               	bcf	status,0,c
 28435  0059C2  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 28436  0059C4  3203               	rrcf	i2___lwdiv@divisor,f,c
 28437  0059C6  2E07               	decfsz	i2___lwdiv@counter,f,c
 28438  0059C8  D7ED               	goto	i2u833_40
 28439  0059CA                     i2l1774:
 28440  0059CA  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 28441  0059CE  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 28442  0059D2  0012               	return		;funcret
 28443  0059D4                     __end_ofi2___lwdiv:
 28444                           	opt stack 0
 28445                           pclatu	equ	0xFFB
 28446                           pclath	equ	0xFFA
 28447                           tblptru	equ	0xFF8
 28448                           tblptrh	equ	0xFF7
 28449                           tblptrl	equ	0xFF6
 28450                           tablat	equ	0xFF5
 28451                           prodh	equ	0xFF4
 28452                           prodl	equ	0xFF3
 28453                           intcon	equ	0xFF2
 28454                           intcon3	equ	0xFF0
 28455                           indf0	equ	0xFEF
 28456                           postinc0	equ	0xFEE
 28457                           plusw0	equ	0xFEB
 28458                           fsr0h	equ	0xFEA
 28459                           fsr0l	equ	0xFE9
 28460                           wreg	equ	0xFE8
 28461                           indf1	equ	0xFE7
 28462                           postinc1	equ	0xFE6
 28463                           postdec1	equ	0xFE5
 28464                           plusw1	equ	0xFE3
 28465                           fsr1h	equ	0xFE2
 28466                           fsr1l	equ	0xFE1
 28467                           indf2	equ	0xFDF
 28468                           postinc2	equ	0xFDE
 28469                           postdec2	equ	0xFDD
 28470                           plusw2	equ	0xFDB
 28471                           fsr2h	equ	0xFDA
 28472                           fsr2l	equ	0xFD9
 28473                           status	equ	0xFD8
 28474                           
 28475 ;; *************** function _buttonHandler *****************
 28476 ;; Defined at:
 28477 ;;		line 263 in file "src/system/main.c"
 28478 ;; Parameters:    Size  Location     Type
 28479 ;;  state           2    0[COMRAM] PTR volatile unsigned ch
 28480 ;;		 -> buttonState(1), 
 28481 ;; Auto vars:     Size  Location     Type
 28482 ;;  debounceValu    4    6[COMRAM] const unsigned long 
 28483 ;;  resetValue      4    2[COMRAM] const unsigned long 
 28484 ;; Return value:  Size  Location     Type
 28485 ;;                  1    wreg      void 
 28486 ;; Registers used:
 28487 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28488 ;; Tracked objects:
 28489 ;;		On entry : 0/0
 28490 ;;		On exit  : 0/0
 28491 ;;		Unchanged: 0/0
 28492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 28493 ;;      Params:         2       0       0       0       0       0       0       0       0
 28494 ;;      Locals:         8       0       0       0       0       0       0       0       0
 28495 ;;      Temps:          0       0       0       0       0       0       0       0       0
 28496 ;;      Totals:        10       0       0       0       0       0       0       0       0
 28497 ;;Total ram usage:       10 bytes
 28498 ;; Hardware stack levels used:    1
 28499 ;; This function calls:
 28500 ;;		Nothing
 28501 ;; This function is called by:
 28502 ;;		_ISR
 28503 ;; This function uses a non-reentrant model
 28504 ;;
 28505                           
 28506                           	psect	text123
 28507  004C68                     __ptext123:
 28508                           	opt stack 0
 28509  004C68                     _buttonHandler:
 28510                           	opt stack 18
 28511                           
 28512                           ;main.c: 264: uint8_t static oldState = 0;
 28513                           ;main.c: 265: uint8_t static newState = 0;
 28514                           ;main.c: 266: uint32_t static debounceCounter = 0;
 28515                           ;main.c: 267: const uint32_t debounceValue = 0x1f;
 28516                           
 28517                           ;incstack = 0
 28518  004C68  0E1F               	movlw	31
 28519  004C6A  6E07               	movwf	buttonHandler@debounceValue,c
 28520  004C6C  0E00               	movlw	0
 28521  004C6E  6E08               	movwf	buttonHandler@debounceValue+1,c
 28522  004C70  0E00               	movlw	0
 28523  004C72  6E09               	movwf	buttonHandler@debounceValue+2,c
 28524  004C74  0E00               	movlw	0
 28525  004C76  6E0A               	movwf	buttonHandler@debounceValue+3,c
 28526                           
 28527                           ;main.c: 268: const uint32_t resetValue = 0x3ff;
 28528  004C78  0EFF               	movlw	255
 28529  004C7A  6E03               	movwf	buttonHandler@resetValue,c
 28530  004C7C  0E03               	movlw	3
 28531  004C7E  6E04               	movwf	buttonHandler@resetValue+1,c
 28532  004C80  0E00               	movlw	0
 28533  004C82  6E05               	movwf	buttonHandler@resetValue+2,c
 28534  004C84  0E00               	movlw	0
 28535  004C86  6E06               	movwf	buttonHandler@resetValue+3,c
 28536                           
 28537                           ;main.c: 269: if ((unsigned)(!(PORTB & (1<<5)))) {
 28538  004C88  BA81               	btfsc	3969,5,c	;volatile
 28539  004C8A  D007               	goto	i2l749
 28540                           
 28541                           ;main.c: 270: debounceCounter++;
 28542  004C8C  0E01               	movlw	1
 28543  004C8E  2635               	addwf	buttonHandler@debounceCounter,f,c
 28544  004C90  0E00               	movlw	0
 28545  004C92  2236               	addwfc	buttonHandler@debounceCounter+1,f,c
 28546  004C94  2237               	addwfc	buttonHandler@debounceCounter+2,f,c
 28547  004C96  2238               	addwfc	buttonHandler@debounceCounter+3,f,c
 28548                           
 28549                           ;main.c: 271: } else {
 28550  004C98  D008               	goto	i2l750
 28551  004C9A                     i2l749:
 28552                           
 28553                           ;main.c: 272: debounceCounter = 0;
 28554  004C9A  0E00               	movlw	0
 28555  004C9C  6E35               	movwf	buttonHandler@debounceCounter,c
 28556  004C9E  0E00               	movlw	0
 28557  004CA0  6E36               	movwf	buttonHandler@debounceCounter+1,c
 28558  004CA2  0E00               	movlw	0
 28559  004CA4  6E37               	movwf	buttonHandler@debounceCounter+2,c
 28560  004CA6  0E00               	movlw	0
 28561  004CA8  6E38               	movwf	buttonHandler@debounceCounter+3,c
 28562  004CAA                     i2l750:
 28563                           
 28564                           ;main.c: 273: }
 28565                           ;main.c: 274: newState = (unsigned) ((debounceCounter >= debounceValue) ? 1 : 0);
 28566  004CAA  5007               	movf	buttonHandler@debounceValue,w,c
 28567  004CAC  5C35               	subwf	buttonHandler@debounceCounter,w,c
 28568  004CAE  5008               	movf	buttonHandler@debounceValue+1,w,c
 28569  004CB0  5836               	subwfb	buttonHandler@debounceCounter+1,w,c
 28570  004CB2  5009               	movf	buttonHandler@debounceValue+2,w,c
 28571  004CB4  5837               	subwfb	buttonHandler@debounceCounter+2,w,c
 28572  004CB6  500A               	movf	buttonHandler@debounceValue+3,w,c
 28573  004CB8  5838               	subwfb	buttonHandler@debounceCounter+3,w,c
 28574  004CBA  A0D8               	btfss	status,0,c
 28575  004CBC  D002               	goto	i2u919_40
 28576  004CBE  0E01               	movlw	1
 28577  004CC0  D001               	goto	i2u920_40
 28578  004CC2                     i2u919_40:
 28579  004CC2  0E00               	movlw	0
 28580  004CC4                     i2u920_40:
 28581  004CC4  6E4A               	movwf	buttonHandler@newState,c
 28582                           
 28583                           ;main.c: 275: if (newState && !oldState) {
 28584  004CC6  504A               	movf	buttonHandler@newState,w,c
 28585  004CC8  B4D8               	btfsc	status,2,c
 28586  004CCA  D011               	goto	i2l751
 28587  004CCC  504B               	movf	buttonHandler@oldState,w,c
 28588  004CCE  A4D8               	btfss	status,2,c
 28589  004CD0  D00E               	goto	i2l751
 28590                           
 28591                           ;main.c: 276: debounceCounter = debounceValue;
 28592  004CD2  C007  F035         	movff	buttonHandler@debounceValue,buttonHandler@debounceCounter
 28593  004CD6  C008  F036         	movff	buttonHandler@debounceValue+1,buttonHandler@debounceCounter+1
 28594  004CDA  C009  F037         	movff	buttonHandler@debounceValue+2,buttonHandler@debounceCounter+2
 28595  004CDE  C00A  F038         	movff	buttonHandler@debounceValue+3,buttonHandler@debounceCounter+3
 28596                           
 28597                           ;main.c: 277: *state = 1;
 28598  004CE2  C001  FFD9         	movff	buttonHandler@state,fsr2l
 28599  004CE6  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 28600  004CEA  0E01               	movlw	1
 28601  004CEC  D005               	goto	L15
 28602  004CEE                     i2l751:
 28603                           
 28604                           ;main.c: 279: *state = 0;
 28605  004CEE  C001  FFD9         	movff	buttonHandler@state,fsr2l
 28606  004CF2  C002  FFDA         	movff	buttonHandler@state+1,fsr2h
 28607  004CF6  0E00               	movlw	0
 28608  004CF8                     L15:
 28609  004CF8  6EDF               	movwf	indf2,c
 28610                           
 28611                           ;main.c: 280: }
 28612                           ;main.c: 281: if (debounceCounter > resetValue)
 28613  004CFA  5035               	movf	buttonHandler@debounceCounter,w,c
 28614  004CFC  5C03               	subwf	buttonHandler@resetValue,w,c
 28615  004CFE  5036               	movf	buttonHandler@debounceCounter+1,w,c
 28616  004D00  5804               	subwfb	buttonHandler@resetValue+1,w,c
 28617  004D02  5037               	movf	buttonHandler@debounceCounter+2,w,c
 28618  004D04  5805               	subwfb	buttonHandler@resetValue+2,w,c
 28619  004D06  5038               	movf	buttonHandler@debounceCounter+3,w,c
 28620  004D08  5806               	subwfb	buttonHandler@resetValue+3,w,c
 28621  004D0A  A0D8               	btfss	status,0,c
 28622  004D0C  00FF               	reset		;# 
 28623                           
 28624                           ;main.c: 284: oldState = newState;
 28625  004D0E  C04A  F04B         	movff	buttonHandler@newState,buttonHandler@oldState
 28626  004D12  0012               	return		;funcret
 28627  004D14                     __end_of_buttonHandler:
 28628                           	opt stack 0
 28629                           pclatu	equ	0xFFB
 28630                           pclath	equ	0xFFA
 28631                           tblptru	equ	0xFF8
 28632                           tblptrh	equ	0xFF7
 28633                           tblptrl	equ	0xFF6
 28634                           tablat	equ	0xFF5
 28635                           prodh	equ	0xFF4
 28636                           prodl	equ	0xFF3
 28637                           intcon	equ	0xFF2
 28638                           intcon3	equ	0xFF0
 28639                           indf0	equ	0xFEF
 28640                           postinc0	equ	0xFEE
 28641                           plusw0	equ	0xFEB
 28642                           fsr0h	equ	0xFEA
 28643                           fsr0l	equ	0xFE9
 28644                           wreg	equ	0xFE8
 28645                           indf1	equ	0xFE7
 28646                           postinc1	equ	0xFE6
 28647                           postdec1	equ	0xFE5
 28648                           plusw1	equ	0xFE3
 28649                           fsr1h	equ	0xFE2
 28650                           fsr1l	equ	0xFE1
 28651                           indf2	equ	0xFDF
 28652                           postinc2	equ	0xFDE
 28653                           postdec2	equ	0xFDD
 28654                           plusw2	equ	0xFDB
 28655                           fsr2h	equ	0xFDA
 28656                           fsr2l	equ	0xFD9
 28657                           status	equ	0xFD8
 28658                           pclatu	equ	0xFFB
 28659                           pclath	equ	0xFFA
 28660                           tblptru	equ	0xFF8
 28661                           tblptrh	equ	0xFF7
 28662                           tblptrl	equ	0xFF6
 28663                           tablat	equ	0xFF5
 28664                           prodh	equ	0xFF4
 28665                           prodl	equ	0xFF3
 28666                           intcon	equ	0xFF2
 28667                           intcon3	equ	0xFF0
 28668                           indf0	equ	0xFEF
 28669                           postinc0	equ	0xFEE
 28670                           plusw0	equ	0xFEB
 28671                           fsr0h	equ	0xFEA
 28672                           fsr0l	equ	0xFE9
 28673                           wreg	equ	0xFE8
 28674                           indf1	equ	0xFE7
 28675                           postinc1	equ	0xFE6
 28676                           postdec1	equ	0xFE5
 28677                           plusw1	equ	0xFE3
 28678                           fsr1h	equ	0xFE2
 28679                           fsr1l	equ	0xFE1
 28680                           indf2	equ	0xFDF
 28681                           postinc2	equ	0xFDE
 28682                           postdec2	equ	0xFDD
 28683                           plusw2	equ	0xFDB
 28684                           fsr2h	equ	0xFDA
 28685                           fsr2l	equ	0xFD9
 28686                           status	equ	0xFD8
 28687                           
 28688                           	psect	rparam
 28689  0000                     pclatu	equ	0xFFB
 28690                           pclath	equ	0xFFA
 28691                           tblptru	equ	0xFF8
 28692                           tblptrh	equ	0xFF7
 28693                           tblptrl	equ	0xFF6
 28694                           tablat	equ	0xFF5
 28695                           prodh	equ	0xFF4
 28696                           prodl	equ	0xFF3
 28697                           intcon	equ	0xFF2
 28698                           intcon3	equ	0xFF0
 28699                           indf0	equ	0xFEF
 28700                           postinc0	equ	0xFEE
 28701                           plusw0	equ	0xFEB
 28702                           fsr0h	equ	0xFEA
 28703                           fsr0l	equ	0xFE9
 28704                           wreg	equ	0xFE8
 28705                           indf1	equ	0xFE7
 28706                           postinc1	equ	0xFE6
 28707                           postdec1	equ	0xFE5
 28708                           plusw1	equ	0xFE3
 28709                           fsr1h	equ	0xFE2
 28710                           fsr1l	equ	0xFE1
 28711                           indf2	equ	0xFDF
 28712                           postinc2	equ	0xFDE
 28713                           postdec2	equ	0xFDD
 28714                           plusw2	equ	0xFDB
 28715                           fsr2h	equ	0xFDA
 28716                           fsr2l	equ	0xFD9
 28717                           status	equ	0xFD8
 28718                           
 28719                           	psect	temp
 28720  000051                     btemp:
 28721                           	opt stack 0
 28722  000051                     	ds	1
 28723  0000                     int$flags	set	btemp
 28724  0000                     wtemp6	set	btemp+1
 28725                           pclatu	equ	0xFFB
 28726                           pclath	equ	0xFFA
 28727                           tblptru	equ	0xFF8
 28728                           tblptrh	equ	0xFF7
 28729                           tblptrl	equ	0xFF6
 28730                           tablat	equ	0xFF5
 28731                           prodh	equ	0xFF4
 28732                           prodl	equ	0xFF3
 28733                           intcon	equ	0xFF2
 28734                           intcon3	equ	0xFF0
 28735                           indf0	equ	0xFEF
 28736                           postinc0	equ	0xFEE
 28737                           plusw0	equ	0xFEB
 28738                           fsr0h	equ	0xFEA
 28739                           fsr0l	equ	0xFE9
 28740                           wreg	equ	0xFE8
 28741                           indf1	equ	0xFE7
 28742                           postinc1	equ	0xFE6
 28743                           postdec1	equ	0xFE5
 28744                           plusw1	equ	0xFE3
 28745                           fsr1h	equ	0xFE2
 28746                           fsr1l	equ	0xFE1
 28747                           indf2	equ	0xFDF
 28748                           postinc2	equ	0xFDE
 28749                           postdec2	equ	0xFDD
 28750                           plusw2	equ	0xFDB
 28751                           fsr2h	equ	0xFDA
 28752                           fsr2l	equ	0xFD9
 28753                           status	equ	0xFD8


Data Sizes:
    Strings     1825
    Constant    11
    Data        82
    BSS         530
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    160     160
    BANK1           256    254     255
    BANK2           256     25     216
    BANK3           256      0     239
    BANK4           256     47     189
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    ultoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@buf	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ltoa@cp	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    icmp_writeHeaderIntoBuffer@buf	PTR unsigned char  size(2) Largest target is 64
		 -> icmp_sendEchoReply@icmpMessage(BANK1[64]), 

    icmp_calculateChecksumBuf@buf	PTR unsigned char  size(2) Largest target is 64
		 -> icmp_sendEchoReply@icmpMessage(BANK1[64]), 

    icmp_parseHeader@icmpHeader	PTR struct icmpHeader size(2) Largest target is 8
		 -> icmp_handleNewPacket@icmpHeader(BANK0[8]), 

    ipv4_setToAllZero@ip	PTR struct ipv4_address size(2) Largest target is 4
		 -> ipPreliminarySource(BANK2[4]), ipSource(BANK2[4]), arp_init@ip(BANK0[4]), arp_probe@ipSender(BANK1[4]), 

    ipv4_isAllZero@ip	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_setNewEntry@ip(BANK0[4]), arp_parseFromRXBuffer@arp(BANK0[32]), arp_handleNewPacket@arp(BANK1[32]), 

    ipv4_cmp@b	PTR struct ipv4_address size(2) Largest target is 32
		 -> arp_checkForEntry@ip(BANK0[4]), arp_sendReply@myIP(BANK1[4]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_cmp@a	PTR struct ipv4_address size(2) Largest target is 112
		 -> arp_table(BANK4[112]), arp_sendReply@request(BANK1[32]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    ipv4_SrcAddrChanged@err	PTR struct error size(2) Largest target is 3
		 -> arp_background@err(COMRAM[3]), 

    arpStatus	PTR struct error size(2) Largest target is 3
		 -> NULL(NULL[0]), arp_background@err(COMRAM[3]), 

    ipv4_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    ipv4_checkHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 23
		 -> ipv4_handleNewPacket@header(BANK1[23]), 

    ipv4_parseHeader@field	PTR struct memoryField size(2) Largest target is 9
		 -> ipv4_handleNewPacket@headerField(BANK1[9]), 

    ipv4_calculateHeaderChecksum@header	PTR struct ipv4_header size(2) Largest target is 123
		 -> icmp_sendEchoReply@ipReply(BANK1[66]), ipv4_checkHeaderChecksum@testHeader(BANK0[23]), stack.pendingPacketToSend(BANK3[66]), stack(BANK3[123]), 

    ipv4_writeHeaderIntoBuffer@ptr	PTR unsigned char  size(2) Largest target is 32
		 -> icmp_sendEchoReply@headerBuf(BANK1[32]), main@headerBuf(BANK4[32]), 

    ipv4_txFrameRequest@packet	PTR struct ipv4_packet size(2) Largest target is 123
		 -> icmp_sendEchoReply@ipReply(BANK1[66]), stack(BANK3[123]), 

    icmpTxtMessages	PTR const unsigned char [15] size(2) Largest target is 26
		 -> STR_149(CODE[16]), STR_148(CODE[10]), STR_147(CODE[26]), STR_146(CODE[14]), 
		 -> STR_145(CODE[20]), STR_144(CODE[21]), STR_143(CODE[13]), STR_142(CODE[1]), 
		 -> STR_141(CODE[1]), STR_140(CODE[17]), STR_139(CODE[14]), STR_138(CODE[24]), 
		 -> STR_137(CODE[1]), STR_136(CODE[1]), STR_135(CODE[11]), STR_134(CODE[16]), 
		 -> STR_133(CODE[10]), STR_132(CODE[26]), STR_131(CODE[14]), STR_130(CODE[20]), 
		 -> STR_129(CODE[21]), STR_128(CODE[13]), STR_127(CODE[1]), STR_126(CODE[1]), 
		 -> STR_125(CODE[17]), STR_124(CODE[14]), STR_123(CODE[24]), STR_122(CODE[1]), 
		 -> STR_121(CODE[1]), STR_120(CODE[11]), 

    arp_checkForEntry@index	PTR unsigned char  size(2) Largest target is 1
		 -> ipv4_sendFrame@index(BANK0[1]), arp_gratuitous@index(BANK0[1]), arp_probe@index(BANK1[1]), 

    arp_parseFromRXBuffer@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    arp_handleNewPacket@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    sp__arpEntryToString	PTR unsigned char  size(2) Largest target is 50
		 -> arpEntryToString@string(BANK3[50]), 

    sp__ipProtocolToString	PTR unsigned char  size(2) Largest target is 17
		 -> STR_86(CODE[17]), STR_85(CODE[4]), STR_84(CODE[4]), STR_83(CODE[5]), 

    sp__hexToString	PTR unsigned char  size(2) Largest target is 10
		 -> hexToString@number(BANK2[10]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    UARTTransmitText@str	PTR const unsigned char  size(2) Largest target is 62
		 -> STR_163(CODE[5]), STR_162(CODE[2]), STR_161(CODE[21]), STR_160(CODE[12]), 
		 -> STR_159(CODE[2]), STR_158(CODE[7]), STR_157(CODE[5]), STR_156(CODE[5]), 
		 -> STR_155(CODE[15]), STR_154(CODE[12]), STR_153(CODE[5]), STR_152(CODE[2]), 
		 -> STR_151(CODE[2]), STR_150(CODE[12]), STR_149(CODE[16]), STR_148(CODE[10]), 
		 -> STR_147(CODE[26]), STR_146(CODE[14]), STR_145(CODE[20]), STR_144(CODE[21]), 
		 -> STR_143(CODE[13]), STR_142(CODE[1]), STR_141(CODE[1]), STR_140(CODE[17]), 
		 -> STR_139(CODE[14]), STR_138(CODE[24]), STR_137(CODE[1]), STR_136(CODE[1]), 
		 -> STR_135(CODE[11]), STR_134(CODE[16]), STR_133(CODE[10]), STR_132(CODE[26]), 
		 -> STR_131(CODE[14]), STR_130(CODE[20]), STR_129(CODE[21]), STR_128(CODE[13]), 
		 -> STR_127(CODE[1]), STR_126(CODE[1]), STR_125(CODE[17]), STR_124(CODE[14]), 
		 -> STR_123(CODE[24]), STR_122(CODE[1]), STR_121(CODE[1]), STR_120(CODE[11]), 
		 -> STR_119(CODE[3]), STR_118(CODE[39]), STR_117(CODE[5]), STR_116(CODE[3]), 
		 -> STR_115(CODE[3]), STR_114(CODE[30]), STR_113(CODE[12]), STR_112(CODE[33]), 
		 -> STR_111(CODE[39]), STR_110(CODE[35]), STR_109(CODE[58]), STR_108(CODE[36]), 
		 -> STR_107(CODE[34]), STR_106(CODE[3]), STR_105(CODE[43]), STR_104(CODE[4]), 
		 -> STR_103(CODE[12]), STR_102(CODE[26]), STR_101(CODE[5]), STR_100(CODE[2]), 
		 -> STR_99(CODE[3]), STR_98(CODE[16]), STR_97(CODE[12]), STR_96(CODE[5]), 
		 -> STR_95(CODE[15]), STR_94(CODE[10]), STR_93(CODE[11]), STR_92(CODE[2]), 
		 -> STR_91(CODE[3]), STR_90(CODE[5]), STR_89(CODE[3]), STR_88(CODE[2]), 
		 -> STR_87(CODE[39]), arpEntryToString@string(BANK3[50]), ipAdressToString@address(BANK2[16]), STR_82(CODE[18]), 
		 -> STR_81(CODE[4]), STR_80(CODE[5]), macToString@address(BANK0[18]), intToString@number(BANK2[10]), 
		 -> STR_79(CODE[5]), STR_78(CODE[9]), STR_77(CODE[30]), STR_76(CODE[34]), 
		 -> STR_75(CODE[55]), STR_74(CODE[37]), STR_73(CODE[15]), STR_72(CODE[14]), 
		 -> STR_71(CODE[19]), STR_70(CODE[30]), STR_69(CODE[17]), STR_68(CODE[8]), 
		 -> STR_67(CODE[29]), STR_66(CODE[29]), STR_65(CODE[20]), STR_64(CODE[19]), 
		 -> STR_63(CODE[19]), STR_62(CODE[13]), STR_61(CODE[51]), STR_60(CODE[4]), 
		 -> STR_59(CODE[23]), STR_58(CODE[12]), STR_57(CODE[4]), STR_56(CODE[9]), 
		 -> STR_55(CODE[2]), STR_54(CODE[12]), STR_53(CODE[26]), STR_52(CODE[5]), 
		 -> STR_51(CODE[49]), STR_50(CODE[48]), STR_49(CODE[53]), STR_48(CODE[2]), 
		 -> STR_47(CODE[12]), STR_46(CODE[2]), STR_45(CODE[5]), STR_44(CODE[3]), 
		 -> STR_43(CODE[37]), STR_42(CODE[12]), STR_41(CODE[5]), STR_40(CODE[37]), 
		 -> STR_39(CODE[12]), STR_38(CODE[3]), STR_37(CODE[5]), STR_36(CODE[27]), 
		 -> STR_35(CODE[12]), STR_34(CODE[3]), STR_33(CODE[21]), STR_32(CODE[3]), 
		 -> STR_31(CODE[3]), STR_30(CODE[5]), STR_29(CODE[3]), STR_28(CODE[5]), 
		 -> STR_27(CODE[58]), STR_26(CODE[58]), STR_25(CODE[62]), STR_24(CODE[2]), 
		 -> STR_23(CODE[12]), STR_22(CODE[3]), STR_21(CODE[5]), STR_20(CODE[3]), 
		 -> STR_19(CODE[5]), STR_18(CODE[3]), STR_17(CODE[3]), STR_16(CODE[2]), 
		 -> STR_15(CODE[20]), STR_14(CODE[11]), STR_13(CODE[5]), STR_12(CODE[7]), 
		 -> STR_11(CODE[12]), STR_10(CODE[5]), STR_9(CODE[6]), STR_8(CODE[12]), 
		 -> STR_7(CODE[5]), STR_6(CODE[16]), STR_5(CODE[11]), STR_4(CODE[10]), 
		 -> STR_3(CODE[12]), STR_2(CODE[2]), STR_1(CODE[2]), ethernetController_getDeviceName@string(BANK0[11]), 

    buttonHandler@state	PTR volatile unsigned char  size(2) Largest target is 1
		 -> buttonState(BANK2[1]), 

    sp__ipAdressToString	PTR unsigned char  size(2) Largest target is 16
		 -> ipAdressToString@address(BANK2[16]), 

    handleStackBackgroundTasks@stack	PTR struct stack size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    mac_setAllZero@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_init@mac(BANK0[6]), arp_sendRequest@targetMAC(BANK1[6]), 

    mac_cmp@b	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_cmp@a	PTR struct macaddress size(2) Largest target is 32
		 -> arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_isAllZero@mac	PTR struct macaddress size(2) Largest target is 32
		 -> arp_setNewEntry@mac(BANK0[6]), arp_parseFromRXBuffer@arp(BANK0[32]), 

    mac_setToBroadcast@mac	PTR struct macaddress size(2) Largest target is 6
		 -> arp_send@destination(BANK0[6]), 

    sp__etherTypeToString	PTR unsigned char  size(2) Largest target is 18
		 -> STR_82(CODE[18]), STR_81(CODE[4]), STR_80(CODE[5]), 

    sp__macToString	PTR unsigned char  size(2) Largest target is 18
		 -> macToString@address(BANK0[18]), 

    sp__intToString	PTR unsigned char  size(2) Largest target is 10
		 -> intToString@number(BANK2[10]), 

    ethernet_rxGetNewFrame@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    ethernet_txFrameRequest@frame	PTR struct ethernetFrame size(2) Largest target is 123
		 -> icmp_sendEchoReply@ipReply(BANK1[66]), arp_send@ethFrame(BANK0[34]), stack(BANK3[123]), 

    enc424j600_updateReceiveStatusVector@rsv	PTR unsigned char  size(2) Largest target is 6
		 -> ethernetController_getRSV@temp(BANK2[6]), 

    enc424j600_readPHYRegister@data	PTR unsigned int  size(2) Largest target is 2
		 -> ethernetController_updateLinkStatus@temp16(BANK0[2]), 

    enc424j600_readControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeControlRegisterUnbanked@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), enc424j600_setTXLength@highByte(BANK0[1]), 
		 -> enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), enc424j600_readPHYRegister@PHYaddress(BANK0[1]), 
		 -> ethernetController_setLEDConfig@data(BANK0[1]), mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    enc424j600_readSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_getInterruptFlags@high(BANK0[1]), enc424j600_getInterruptFlags@low(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), 
		 -> enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_getPacketCount@lowByte(BANK0[1]), 
		 -> enc424j600_readPHYRegister@highByte(BANK0[1]), enc424j600_readPHYRegister@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), 
		 -> ethernetController_updateLinkStatus@temp(BANK0[1]), ethernetController_streamFromRXBuffer@temp(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerH(BANK0[1]), ethernetController_updateNextPacketPointer@newPointerL(BANK0[1]), 
		 -> ethernetController_getRSV@temp(BANK2[6]), ethernetController_getEtherTypeField@lowByte(BANK0[1]), ethernetController_getEtherTypeField@highByte(BANK0[1]), ethernetController_getSourceMACAddress@temp(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@temp(COMRAM[1]), mac.address(COMRAM[6]), ethernetController_getMacAddress@mac(BANK0[6]), ethernetController_getSiliconRevision@data(COMRAM[1]), 
		 -> ethernetController_checkDeviceId@data(BANK0[1]), ethernetController_softReset@receivedData(BANK0[2]), 

    enc424j600_writeSPI@data	PTR unsigned char  size(2) Largest target is 6
		 -> enc424j600_clearInterruptFlag@temp(BANK0[1]), enc424j600_disable@temp(COMRAM[1]), enc424j600_enable@temp(COMRAM[1]), enc424j600_disableAutoMACInsertion@temp(COMRAM[1]), 
		 -> enc424j600_enableAutoMACInsertion@temp(BANK0[1]), enc424j600_setRXTailPointer@highByte(BANK0[1]), enc424j600_setRXTailPointer@lowByte(BANK0[1]), enc424j600_setRXBufferStartAddress@highByte(BANK0[1]), 
		 -> enc424j600_setRXBufferStartAddress@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@highByte(BANK0[1]), enc424j600_setERXDATAReadPointer@lowByte(BANK0[1]), enc424j600_setERXDATAReadPointer@opcode(BANK0[1]), 
		 -> enc424j600_setGPDATAReadPointer@highByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@lowByte(COMRAM[1]), enc424j600_setGPDATAReadPointer@opcode(COMRAM[1]), enc424j600_setGPDATAWritePointer@highByte(BANK0[1]), 
		 -> enc424j600_setGPDATAWritePointer@lowByte(BANK0[1]), enc424j600_setGPDATAWritePointer@opcode(BANK0[1]), enc424j600_setTXStartAddress@highByte(BANK0[1]), enc424j600_setTXStartAddress@lowByte(BANK0[1]), 
		 -> enc424j600_setTXLength@highByte(BANK0[1]), enc424j600_setTXLength@lowByte(BANK0[1]), enc424j600_readPHYRegister@temp(BANK0[1]), enc424j600_readPHYRegister@unusedBits(BANK0[1]), 
		 -> enc424j600_readPHYRegister@PHYaddress(BANK0[1]), enc424j600_readControlRegisterUnbanked@addr(BANK0[1]), enc424j600_readControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeControlRegisterUnbanked@addr(BANK0[1]), 
		 -> enc424j600_writeControlRegisterUnbanked@opcode(BANK0[1]), enc424j600_writeSingleByte@opcode(BANK0[1]), ethernetController_setLEDConfig@data(BANK0[1]), ethernetController_streamFromRXBuffer@opcode(BANK0[1]), 
		 -> ethernetController_updateNextPacketPointer@opcode(BANK0[1]), ethernetController_getRSV@opcode(BANK0[1]), ethernetController_getEtherTypeField@opcode(BANK0[1]), ethernetController_getSourceMACAddress@opcode(BANK0[1]), 
		 -> ethernetController_getDestinationMACAddress@opcode(COMRAM[1]), ethernetController_writeEtherTypeFieldToBuffer@opcode(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@highByte(BANK0[1]), ethernetController_writeEtherTypeFieldToBuffer@lowByte(BANK0[1]), 
		 -> ethernetController_writeDestinationMACAddress@opcode(BANK0[1]), ethernetController_writeDestinationMACAddress@data(BANK0[6]), ethernetController_streamToTransmitBuffer@data(BANK0[1]), ethernetController_streamToTransmitBuffer@opcode(BANK0[1]), 
		 -> mac.address(COMRAM[6]), ethernetController_setMacAddress@mac(COMRAM[6]), ethernetController_softReset@dataToSend(BANK0[2]), 

    ethernetController_updateLinkStatus@state	PTR struct ethernetConnection size(2) Largest target is 123
		 -> stack(BANK3[123]), 

    sp__ethernetController_getDeviceName	PTR unsigned char  size(2) Largest target is 11
		 -> ethernetController_getDeviceName@string(BANK0[11]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    _ISR->_sevenSegmentUpdate
    _sevenSegmentUpdate->_parseNumber
    _parseNumber->i2___lwdiv

Critical Paths under _main in BANK0

    _stack_init->_arp_init
    _ipv4_init->_ipv4_setToAllZero
    _srand->_ethernetController_getMacAddress
    _printEthernetState->_UARTTransmitText
    _printErrorMessage->_UARTTransmitText
    _handleStackBackgroundTasks->_ipv4_sendFrame
    _ipv4_generateAutoIP->___awmod
    ___awmod->_rand
    _ethernet_rxGetNewFrame->_arp_handleNewPacket
    _ipv4_handleNewPacket->_icmp_handleNewPacket
    _ipv4_parseHeader->_ethernetController_streamFromRXBuffer
    _ipv4_checkHeaderChecksum->_ipv4_calculateHeaderChecksum
    _icmp_handleNewPacket->_icmp_sendEchoReply
    _icmp_sendEchoReply->_ipv4_streamToTransmissionBuffer
    _ipv4_txFrameRequest->_ethernet_txFrameRequest
    _ipv4_streamToTransmissionBuffer->_ethernetController_streamToTransmitBuffer
    _icmp_parseHeader->_ethernetController_streamFromRXBuffer
    _icmp_calculateChecksum->_ethernetController_streamFromRXBuffer
    _ethernetController_updateNextPacketPointer->_enc424j600_setERXDATAReadPointer
    _ethernetController_getRSV->_enc424j600_updateReceiveStatusVector
    _ethernetController_getEtherTypeField->_enc424j600_setERXDATAReadPointer
    _ethernetController_dropPacket->_enc424j600_setRXTailPointer
    _ethernetController_getNextPacketPointer->_enc424j600_getNextPacketPointer
    _arp_sendReply->_arp_send
    _arp_parseFromRXBuffer->_ethernetController_streamFromRXBuffer
    _ethernetController_streamFromRXBuffer->_enc424j600_setERXDATAReadPointer
    _UARTTransmitInt->_UARTTransmitText
    _intToString->_ltoa
    _ltoa->_ultoa
    _ultoa->___lldiv
    _ethernetController_updateLinkStatus->_enc424j600_readPHYRegister
    _enc424j600_readPHYRegister->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readPHYRegister->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_readControlRegisterUnbanked
    _ethernetController_setLEDConfig->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_pollInterruptFlags->_enc424j600_getInterruptFlags
    _enc424j600_getInterruptFlags->_enc424j600_readControlRegisterUnbanked
    _ethernetController_newPacketAvailable->_enc424j600_getPacketCount
    _ethernetController_init->_ethernetController_softReset
    _ethernetController_softReset->_enc424j600_readControlRegisterUnbanked
    _ethernetController_softReset->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_checkDeviceId->_enc424j600_readControlRegisterUnbanked
    _enc424j600_setRXTailPointer->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setRXBufferStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_enableReception->_enc424j600_writeSingleByte
    _enc424j600_enableAutoMACInsertion->_enc424j600_readControlRegisterUnbanked
    _enc424j600_enableAutoMACInsertion->_enc424j600_writeControlRegisterUnbanked
    _ethernetController_clearInterruptFlag->_enc424j600_clearInterruptFlag
    _enc424j600_clearInterruptFlag->_enc424j600_readControlRegisterUnbanked
    _enc424j600_clearInterruptFlag->_enc424j600_writeControlRegisterUnbanked
    _arp_init->_arp_setNewEntry
    _arp_setNewEntry->_UARTTransmitText
    _macToString->_ethernetController_getMacAddress
    _arp_background->_arp_gratuitous
    _rand->___lmul
    _ipAdressToString->___lwmod
    ___lwmod->_rand
    _arp_sendRequest->_arp_send
    _ethernetController_getMacAddress->_enc424j600_readControlRegisterUnbanked
    _arp_send->_ethernet_txFrameRequest
    _ethernet_txFrameRequest->_memory_txFrameRequest
    _memory_txFrameRequest->_checkForOverlap
    _checkForOverlap->_checkForOverlapSwitched
    _ethernetController_writeEtherTypeFieldToBuffer->_enc424j600_setGPDATAWritePointer
    _ethernetController_writeDestinationMACAddress->_enc424j600_setGPDATAWritePointer
    _ethernetController_streamToTransmitBuffer->_enc424j600_setGPDATAWritePointer
    _enc424j600_setGPDATAWritePointer->_enc424j600_writeSPI
    _ethernetController_sendPacket->_enc424j600_setTXLength
    _ethernetController_sendPacket->_enc424j600_setTXStartAddress
    _enc424j600_writeSingleByte->_enc424j600_writeSPI
    _enc424j600_setTXStartAddress->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_setTXLength->_enc424j600_writeControlRegisterUnbanked
    _enc424j600_writeControlRegisterUnbanked->_enc424j600_writeSPI
    _ethernetController_getSourceMACAddress->_enc424j600_setERXDATAReadPointer
    _enc424j600_setERXDATAReadPointer->_enc424j600_writeSPI
    _arp_checkForEntry->_ipv4_cmp
    _UARTTransmitText->_macToString
    _ethernetController_getCurrentPacketCount->_enc424j600_getPacketCount
    _enc424j600_getPacketCount->_enc424j600_readControlRegisterUnbanked
    _enc424j600_readControlRegisterUnbanked->_enc424j600_readSPI
    _enc424j600_readControlRegisterUnbanked->_enc424j600_writeSPI

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame
    _ipv4_sendFrame->_arp_sendRequest
    _ethernet_rxGetNewFrame->_ipv4_handleNewPacket
    _ipv4_handleNewPacket->_icmp_handleNewPacket
    _icmp_handleNewPacket->_icmp_sendEchoReply
    _arp_handleNewPacket->_arp_sendReply
    _arp_background->_arp_probe
    _arp_probe->_arp_sendRequest
    _arp_gratuitous->_arp_sendRequest

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_handleStackBackgroundTasks
    _handleStackBackgroundTasks->_ethernet_rxGetNewFrame

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                50    50      0 1072659
                                             23 BANK2      2     2      0
                                              0 BANK4     47    47      0
                           _UARTInit
                   _UARTTransmitText
   _ethernetController_checkDeviceId
_ethernetController_getCurrentPacket
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
            _ethernetController_init
    _ethernetController_setLEDConfig
         _handleStackBackgroundTasks
       _ipv4_calculateHeaderChecksum
                _ipv4_generateAutoIP
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
                        _macToString
                  _printErrorMessage
                 _printEthernetState
                   _sevenSegmentInit
                              _srand
                         _stack_init
 ---------------------------------------------------------------------------------
 (1) _stack_init                                           0     0      0   41861
                           _arp_init
                          _ipv4_init
 ---------------------------------------------------------------------------------
 (2) _ipv4_init                                            0     0      0     546
                  _ipv4_setToAllZero
 ---------------------------------------------------------------------------------
 (1) _srand                                                2     0      2     135
                                             26 BANK0      2     0      2
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (1) _sevenSegmentInit                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printEthernetState                                  15     0     15   16684
                                             58 BANK0     15     0     15
                   _UARTTransmitText
 ---------------------------------------------------------------------------------
 (1) _printErrorMessage                                    5     2      3   20165
                                             58 BANK0      5     2      3
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (1) _handleStackBackgroundTasks                          22    20      2  852485
                                             11 BANK2     12    10      2
                   _UARTTransmitText
                     _arp_background
                           _arp_init
_ethernetController_clearInterruptFl
 _ethernetController_disableEthernet
          _ethernetController_getMTU
            _ethernetController_init
_ethernetController_newPacketAvailab
_ethernetController_pollInterruptFla
    _ethernetController_setLEDConfig
_ethernetController_updateLinkStatus
             _ethernet_rxGetNewFrame
                        _intToString
                   _ipAdressToString
                    _ipv4_background
                _ipv4_generateAutoIP
                     _ipv4_sendFrame
            _ipv4_setIPSourceAddress
 ---------------------------------------------------------------------------------
 (2) _ipv4_setIPSourceAddress                              4     0      4     239
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ipv4_sendFrame                                      78    12     66   95635
                                            156 BANK0      4     4      0
                                             52 BANK1     74     8     66
                  _arp_checkForEntry
              _arp_getEntryFromTable
                    _arp_sendRequest
   _ethernetController_getMacAddress
      _ethernetController_sendPacket
_ethernetController_writeDestination
                          _getMillis
 ---------------------------------------------------------------------------------
 (3) _arp_getEntryFromTable                                8     1      7      31
                                              0 BANK0      8     1      7
 ---------------------------------------------------------------------------------
 (1) _ipv4_generateAutoIP                                  8     4      4    1298
                                             20 BANK0      8     4      4
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     641
                                             14 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (2) _ipv4_background                                      9     6      3     343
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) _ethernet_rxGetNewFrame                              13    11      2  382260
                                            252 BANK1      2     0      2
                                              0 BANK2     11    11      0
                    _UARTTransmitInt
                   _UARTTransmitText
                _arp_handleNewPacket
                  _etherTypeToString
      _ethernetController_dropPacket
_ethernetController_getEtherTypeFiel
_ethernetController_getNextPacketPoi
          _ethernetController_getRSV
_ethernetController_updateNextPacket
                          _getMillis
                        _intToString
               _ipv4_handleNewPacket
                        _macToString
 ---------------------------------------------------------------------------------
 (3) _ipv4_handleNewPacket                                49    47      2  144626
                                            153 BANK0      4     4      0
                                            207 BANK1     45    43      2
      _ethernetController_dropPacket
               _icmp_handleNewPacket
           _ipv4_checkHeaderChecksum
                   _ipv4_parseHeader
 ---------------------------------------------------------------------------------
 (4) _ipv4_parseHeader                                    50    27     23   14519
                                             20 BANK0     50    27     23
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (4) _ipv4_checkHeaderChecksum                            27    25      2    1976
                                             15 BANK0     27    25      2
       _ipv4_calculateHeaderChecksum
 ---------------------------------------------------------------------------------
 (4) _icmp_handleNewPacket                                44    12     32  117303
                                            141 BANK0     12    12      0
                                            175 BANK1     32     0     32
                   _UARTTransmitText
             _icmp_calculateChecksum
                   _icmp_parseHeader
                 _icmp_sendEchoReply
                        _intToString
 ---------------------------------------------------------------------------------
 (5) _icmp_sendEchoReply                                 219   179     40   69586
                                             97 BANK0     44     4     40
                                              0 BANK1    175   175      0
                   _UARTTransmitText
_ethernetController_streamFromRXBuff
          _icmp_calculateChecksumBuf
         _icmp_writeHeaderIntoBuffer
                   _ipAdressToString
       _ipv4_calculateHeaderChecksum
            _ipv4_getIPSourceAddress
    _ipv4_streamToTransmissionBuffer
                _ipv4_txFrameRequest
         _ipv4_writeHeaderIntoBuffer
 ---------------------------------------------------------------------------------
 (1) _ipv4_writeHeaderIntoBuffer                          27     2     25    1815
                                              0 BANK0     27     2     25
 ---------------------------------------------------------------------------------
 (1) _ipv4_txFrameRequest                                  6     4      2   20775
                                             71 BANK0      6     4      2
            _ethernet_txFrameRequest
 ---------------------------------------------------------------------------------
 (1) _ipv4_streamToTransmissionBuffer                     67     1     66    8470
                                             30 BANK0     67     1     66
_ethernetController_streamToTransmit
 ---------------------------------------------------------------------------------
 (1) _ipv4_calculateHeaderChecksum                        15    13      2    1645
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (6) _icmp_writeHeaderIntoBuffer                          14     4     10     725
                                              0 BANK0     14     4     10
 ---------------------------------------------------------------------------------
 (6) _icmp_calculateChecksumBuf                           17    13      4     597
                                              0 BANK0     17    13      4
 ---------------------------------------------------------------------------------
 (5) _icmp_parseHeader                                    16     5     11   13666
                                             20 BANK0     16     5     11
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (5) _icmp_calculateChecksum                              22    13      9   13486
                                             20 BANK0     22    13      9
_ethernetController_streamFromRXBuff
 ---------------------------------------------------------------------------------
 (3) _ethernetController_updateNextPacketPointer          11    11      0    8291
                                             15 BANK0     11    11      0
    _enc424j600_getNextPacketPointer
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
    _enc424j600_setNextPacketPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getRSV                            7     2      5    9486
                                             17 BANK0      7     2      5
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
_enc424j600_updateReceiveStatusVecto
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_updateReceiveStatusVector                17    12      5    1370
                                              0 BANK0     17    12      5
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getEtherTypeField                18     9      9    8190
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _etherTypeToString                                    4     2      2     135
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _arp_handleNewPacket                                 36    34      2  159408
                                            156 BANK0      4     2      2
                                             88 BANK1     32    32      0
                   _UARTTransmitText
              _arp_parseFromRXBuffer
                      _arp_sendReply
                    _arp_setNewEntry
      _ethernetController_dropPacket
                          _getMillis
                   _ipAdressToString
                     _ipv4_isAllZero
                        _macToString
 ---------------------------------------------------------------------------------
 (4) _ethernetController_dropPacket                        2     0      2    9408
                                             18 BANK0      2     0      2
        _enc424j600_setRXTailPointer
         _enc424j600_writeSingleByte
_ethernetController_getNextPacketPoi
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getNextPacketPointer              2     0      2       0
                                              2 BANK0      2     0      2
    _enc424j600_getNextPacketPointer
 ---------------------------------------------------------------------------------
 (6) _enc424j600_getNextPacketPointer                      2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _arp_sendReply                                       88    56     32   85245
                                              0 BANK1     88    56     32
                   _UARTTransmitText
                           _arp_send
   _ethernetController_getMacAddress
                   _ipAdressToString
                           _ipv4_cmp
            _ipv4_getIPSourceAddress
                        _macToString
 ---------------------------------------------------------------------------------
 (1) _ipv4_getIPSourceAddress                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _arp_parseFromRXBuffer                               73    41     32   17747
                                             20 BANK0     73    41     32
_ethernetController_streamFromRXBuff
                           _ipv4_cmp
                     _ipv4_isAllZero
                            _mac_cmp
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (5) _mac_cmp                                              7     3      4     400
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _ethernetController_streamFromRXBuffer                5     3      2   12900
                                             15 BANK0      5     3      2
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _UARTTransmitInt                                      4     0      4   20094
                                             58 BANK0      4     0      4
                   _UARTTransmitText
                        _intToString
 ---------------------------------------------------------------------------------
 (2) _intToString                                          4     0      4    3670
                                             36 BANK0      4     0      4
                               _ltoa
 ---------------------------------------------------------------------------------
 (3) _ltoa                                                10     2      8    2599
                                             26 BANK0     10     2      8
                              _ultoa
 ---------------------------------------------------------------------------------
 (4) _ultoa                                               13     5      8    2054
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (5) ___llmod                                              9     1      8     648
                                              0 BANK0      9     1      8
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8     657
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _ethernetController_updateLinkStatus                  5     3      2   21128
                                             32 BANK0      5     3      2
_enc424j600_readControlRegisterUnban
         _enc424j600_readPHYRegister
 ---------------------------------------------------------------------------------
 (3) _enc424j600_readPHYRegister                          18    16      2   13617
                                             14 BANK0     18    16      2
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_setLEDConfig                      3     2      1   14029
                                             14 BANK0      3     2      1
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_pollInterruptFlags               10     8      2    7626
                                             24 BANK0     10     8      2
       _enc424j600_getInterruptFlags
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getInterruptFlags                        10     8      2    7190
                                             14 BANK0     10     8      2
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (2) _ethernetController_newPacketAvailable                0     0      0    7125
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (2) _ethernetController_init                              6     3      3   53016
                                             26 BANK0      6     3      3
  _enc424j600_enableAutoMACInsertion
         _enc424j600_enableReception
                 _enc424j600_initSPI
    _enc424j600_setNextPacketPointer
 _enc424j600_setRXBufferStartAddress
        _enc424j600_setRXTailPointer
   _ethernetController_checkDeviceId
       _ethernetController_softReset
 ---------------------------------------------------------------------------------
 (3) _ethernetController_softReset                        12     9      3   16685
                                             14 BANK0     12     9      3
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (3) _ethernetController_checkDeviceId                     7     4      3    7270
                                             14 BANK0      7     4      3
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (5) _enc424j600_setRXTailPointer                          4     2      2    6366
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
_ethernetController_getNextPacketPoi (ARG)
 ---------------------------------------------------------------------------------
 (3) _enc424j600_setRXBufferStartAddress                   4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setNextPacketPointer                      2     0      2     239
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _enc424j600_enableReception                           0     0      0    3042
         _enc424j600_writeSingleByte
 ---------------------------------------------------------------------------------
 (3) _enc424j600_enableAutoMACInsertion                    1     1      0   13049
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _ethernetController_getMTU                            2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ethernetController_disableEthernet                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ethernetController_clearInterruptFlag                1     1      0   13238
                                             18 BANK0      1     1      0
      _enc424j600_clearInterruptFlag
 ---------------------------------------------------------------------------------
 (3) _enc424j600_clearInterruptFlag                        4     4      0   13207
                                             14 BANK0      4     4      0
_enc424j600_readControlRegisterUnban
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (2) _arp_init                                            11    11      0   41315
                                             82 BANK0     11    11      0
                   _UARTTransmitText
                    _arp_setNewEntry
                  _ipv4_setToAllZero
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _arp_setNewEntry                                     24    10     14   23944
                                             58 BANK0     24    10     14
                   _UARTTransmitText
                          _getMillis (ARG)
                   _ipAdressToString
                     _ipv4_isAllZero
                        _macToString
                      _mac_isAllZero
 ---------------------------------------------------------------------------------
 (4) _mac_isAllZero                                        3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _macToString                                         30    24      6    1675
                                             26 BANK0     30    24      6
   _ethernetController_getMacAddress (ARG)
 ---------------------------------------------------------------------------------
 (4) _ipv4_isAllZero                                       3     1      2     442
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _arp_background                                      12     9      3  190346
                                             81 BANK1     12     9      3
                   _UARTTransmitText
                     _arp_gratuitous
                          _arp_probe
                _ipv4_SrcAddrChanged
 _ipv4_getPreliminaryIPSourceAddress
 ---------------------------------------------------------------------------------
 (3) _ipv4_getPreliminaryIPSourceAddress                   4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ipv4_SrcAddrChanged                                  2     0      2     135
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _arp_probe                                           29    24      5   87864
                                             52 BANK1     29    24      5
                   _UARTTransmitText
                            ___lwmod
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
                  _ipv4_setToAllZero
                               _rand
 ---------------------------------------------------------------------------------
 (2) _rand                                                 2     0      2     512
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     512
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _ipv4_setToAllZero                                    3     1      2     546
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _arp_gratuitous                                      17    12      5   85786
                                            156 BANK0      4     4      0
                                             52 BANK1     13     8      5
                   _UARTTransmitText
                  _arp_checkForEntry
                    _arp_sendRequest
                          _getMillis
                   _ipAdressToString
 ---------------------------------------------------------------------------------
 (4) _ipAdressToString                                    22    18      4    4056
                                             19 BANK0     22    18      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     856
                                             14 BANK0      5     1      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     933
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _arp_sendRequest                                     52    44      8   62843
                                              0 BANK1     52    44      8
                           _arp_send
   _ethernetController_getMacAddress
                     _mac_setAllZero
 ---------------------------------------------------------------------------------
 (3) _mac_setAllZero                                       3     1      2     338
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _ethernetController_getMacAddress                    12     6      6    7277
                                             14 BANK0     12     6      6
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _arp_send                                            85    53     32   54113
                                             71 BANK0     85    53     32
_ethernetController_getSourceMACAddr
      _ethernetController_sendPacket
_ethernetController_streamToTransmit
            _ethernet_txFrameRequest
                 _mac_setToBroadcast
 ---------------------------------------------------------------------------------
 (5) _mac_setToBroadcast                                   3     1      2     234
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _ethernet_txFrameRequest                              5     3      2   20071
                                             66 BANK0      5     3      2
_ethernetController_writeDestination
_ethernetController_writeEtherTypeFi
              _memory_txFrameRequest
 ---------------------------------------------------------------------------------
 (3) _memory_txFrameRequest                               30    21      9    5242
                                             36 BANK0     30    21      9
                             ___wmul
                    _checkForOverlap
                  _entireMemoryEmpty
                   _entireMemoryFull
 ---------------------------------------------------------------------------------
 (4) _entireMemoryFull                                     1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _entireMemoryEmpty                                    1     1      0      99
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _checkForOverlap                                     18     0     18    2380
                                             18 BANK0     18     0     18
            _checkForOverlapSwitched
 ---------------------------------------------------------------------------------
 (5) _checkForOverlapSwitched                             18     0     18    1128
                                              0 BANK0     18     0     18
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     578
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeEtherTypeFieldToBuffer      14     3     11    6913
                                             15 BANK0     14     3     11
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_writeDestinationMACAddress       24     9     15    7319
                                             15 BANK0     24     9     15
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (2) _ethernetController_streamToTransmitBuffer           15     6      9    7989
                                             15 BANK0     15     6      9
   _enc424j600_setGPDATAWritePointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setGPDATAWritePointer                     5     3      2    3493
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _ethernetController_sendPacket                        9     0      9   15696
                                             18 BANK0      9     0      9
             _enc424j600_setTXLength
       _enc424j600_setTXStartAddress
         _enc424j600_writeSingleByte
                _memory_txFrameClear
 ---------------------------------------------------------------------------------
 (4) _memory_txFrameClear                                  1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSingleByte                           1     1      0    3042
                                             10 BANK0      1     1      0
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXStartAddress                         4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (4) _enc424j600_setTXLength                               4     2      2    6158
                                             14 BANK0      4     2      2
_enc424j600_writeControlRegisterUnba
 ---------------------------------------------------------------------------------
 (5) _enc424j600_writeControlRegisterUnbanked              4     2      2    5918
                                             10 BANK0      4     2      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (5) _ethernetController_getSourceMACAddress              18     9      9    8252
                                             15 BANK0     18     9      9
                 _enc424j600_readSPI
   _enc424j600_setERXDATAReadPointer
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (6) _enc424j600_setERXDATAReadPointer                     5     3      2    3805
                                             10 BANK0      5     3      2
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (3) _arp_checkForEntry                                   15     9      6    1874
                                              7 BANK0     15     9      6
                          _getMillis
                           _ipv4_cmp
 ---------------------------------------------------------------------------------
 (4) _ipv4_cmp                                             7     3      4    1024
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _getMillis                                            4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (4) _UARTTransmitText                                     2     0      2   16289
                                             56 BANK0      2     0      2
                  _etherTypeToString (ARG)
   _ethernetController_getDeviceName (ARG)
   _ethernetController_getMacAddress (ARG)
                        _intToString (ARG)
                   _ipAdressToString (ARG)
                        _macToString (ARG)
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getDeviceName                    13    11      2      40
                                              0 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (1) _ethernetController_getCurrentPacketCount             0     0      0    7125
          _enc424j600_getPacketCount
 ---------------------------------------------------------------------------------
 (3) _enc424j600_getPacketCount                            1     1      0    7125
                                             14 BANK0      1     1      0
_enc424j600_readControlRegisterUnban
 ---------------------------------------------------------------------------------
 (4) _enc424j600_readControlRegisterUnbanked               4     2      2    7054
                                             10 BANK0      4     2      2
                 _enc424j600_readSPI
                _enc424j600_writeSPI
 ---------------------------------------------------------------------------------
 (4) _enc424j600_writeSPI                                 10     8      2    3008
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_readSPI                                  10     8      2    1032
                                              0 BANK0     10     8      2
                 _enc424j600_initSPI
 ---------------------------------------------------------------------------------
 (5) _enc424j600_initSPI                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UARTInit                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR                                                19    19      0    1115
                                             21 COMRAM    19    19      0
                      _buttonHandler
                 _sevenSegmentUpdate
                         _updateTime
 ---------------------------------------------------------------------------------
 (13) _updateTime                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _sevenSegmentUpdate                                  7     5      2     914
                                             14 COMRAM     7     5      2
                        _parseNumber
 ---------------------------------------------------------------------------------
 (14) _parseNumber                                         7     4      3     667
                                              7 COMRAM     7     4      3
                          i2___lwdiv
 ---------------------------------------------------------------------------------
 (15) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (13) _buttonHandler                                      10     8      2     201
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UARTInit
   _UARTTransmitText
     _etherTypeToString (ARG)
     _ethernetController_getDeviceName (ARG)
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _intToString (ARG)
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString (ARG)
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
     _macToString (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
   _ethernetController_checkDeviceId
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_getCurrentPacketCount
     _enc424j600_getPacketCount
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_getDeviceName
   _ethernetController_getMacAddress
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ethernetController_init
     _enc424j600_enableAutoMACInsertion
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_enableReception
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_initSPI
     _enc424j600_setNextPacketPointer
     _enc424j600_setRXBufferStartAddress
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _enc424j600_setRXTailPointer
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer (ARG)
         _enc424j600_getNextPacketPointer
     _ethernetController_checkDeviceId
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_softReset
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSingleByte
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _ethernetController_setLEDConfig
     _enc424j600_readControlRegisterUnbanked
       _enc424j600_readSPI
         _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
     _enc424j600_writeControlRegisterUnbanked
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _handleStackBackgroundTasks
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _arp_background
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_gratuitous
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
       _arp_probe
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         ___lwmod
           _rand (ARG)
             ___lmul
         _arp_checkForEntry
           _getMillis
           _ipv4_cmp
         _arp_sendRequest
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _mac_setAllZero
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipv4_setToAllZero
         _rand
           ___lmul
       _ipv4_SrcAddrChanged
       _ipv4_getPreliminaryIPSourceAddress
     _arp_init
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_setNewEntry
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ethernetController_clearInterruptFlag
       _enc424j600_clearInterruptFlag
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_disableEthernet
     _ethernetController_getMTU
     _ethernetController_init
       _enc424j600_enableAutoMACInsertion
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_enableReception
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_initSPI
       _enc424j600_setNextPacketPointer
       _enc424j600_setRXBufferStartAddress
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _enc424j600_setRXTailPointer
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer (ARG)
           _enc424j600_getNextPacketPointer
       _ethernetController_checkDeviceId
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_softReset
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_newPacketAvailable
       _enc424j600_getPacketCount
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_pollInterruptFlags
       _enc424j600_getInterruptFlags
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernetController_setLEDConfig
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeControlRegisterUnbanked
         _enc424j600_writeSPI
           _enc424j600_initSPI
     _ethernetController_updateLinkStatus
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_readPHYRegister
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeControlRegisterUnbanked
           _enc424j600_writeSPI
             _enc424j600_initSPI
     _ethernet_rxGetNewFrame
       _UARTTransmitInt
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _intToString
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_handleNewPacket
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_parseFromRXBuffer
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ipv4_cmp
           _ipv4_isAllZero
           _mac_cmp
           _mac_isAllZero
         _arp_sendReply
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _arp_send
             _ethernetController_getSourceMACAddress
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_sendPacket
               _enc424j600_setTXLength
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_setTXStartAddress
                 _enc424j600_writeControlRegisterUnbanked
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _enc424j600_writeSingleByte
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameClear
             _ethernetController_streamToTransmitBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernet_txFrameRequest
               _ethernetController_writeDestinationMACAddress
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _ethernetController_writeEtherTypeFieldToBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _memory_txFrameRequest
                 ___wmul
                 _checkForOverlap
                   _checkForOverlapSwitched
                 _entireMemoryEmpty
                 _entireMemoryFull
             _mac_setToBroadcast
           _ethernetController_getMacAddress
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _ipAdressToString
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipv4_cmp
           _ipv4_getIPSourceAddress
           _macToString
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _arp_setNewEntry
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _getMillis (ARG)
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _ipv4_isAllZero (ARG)
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
           _mac_isAllZero (ARG)
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _getMillis
         _ipAdressToString
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipv4_isAllZero
         _macToString
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _etherTypeToString
       _ethernetController_dropPacket
         _enc424j600_setRXTailPointer
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer (ARG)
             _enc424j600_getNextPacketPointer
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _ethernetController_getNextPacketPointer
           _enc424j600_getNextPacketPointer
       _ethernetController_getEtherTypeField
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_getNextPacketPointer
         _enc424j600_getNextPacketPointer
       _ethernetController_getRSV
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_updateReceiveStatusVector
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_updateNextPacketPointer
         _enc424j600_getNextPacketPointer
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_setERXDATAReadPointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_setNextPacketPointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
       _intToString
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipv4_handleNewPacket
         _ethernetController_dropPacket
           _enc424j600_setRXTailPointer
             _enc424j600_writeControlRegisterUnbanked
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_getNextPacketPointer (ARG)
               _enc424j600_getNextPacketPointer
           _enc424j600_writeSingleByte
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_getNextPacketPointer
             _enc424j600_getNextPacketPointer
         _icmp_handleNewPacket
           _UARTTransmitText
             _etherTypeToString (ARG)
             _ethernetController_getDeviceName (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _intToString (ARG)
               _ltoa
                 _ultoa
                   ___lldiv
                   ___llmod
             _ipAdressToString (ARG)
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _macToString (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
           _icmp_calculateChecksum
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _icmp_parseHeader
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _icmp_sendEchoReply
             _UARTTransmitText
               _etherTypeToString (ARG)
               _ethernetController_getDeviceName (ARG)
               _ethernetController_getMacAddress (ARG)
                 _enc424j600_readControlRegisterUnbanked
                   _enc424j600_readSPI
                     _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
               _intToString (ARG)
                 _ltoa
                   _ultoa
                     ___lldiv
                     ___llmod
               _ipAdressToString (ARG)
                 ___lwdiv
                 ___lwmod
                   _rand (ARG)
                     ___lmul
               _macToString (ARG)
                 _ethernetController_getMacAddress (ARG)
                   _enc424j600_readControlRegisterUnbanked
                     _enc424j600_readSPI
                       _enc424j600_initSPI
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
             _ethernetController_streamFromRXBuffer
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_setERXDATAReadPointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _icmp_calculateChecksumBuf
             _icmp_writeHeaderIntoBuffer
             _ipAdressToString
               ___lwdiv
               ___lwmod
                 _rand (ARG)
                   ___lmul
             _ipv4_calculateHeaderChecksum
             _ipv4_getIPSourceAddress
             _ipv4_streamToTransmissionBuffer
               _ethernetController_streamToTransmitBuffer
                 _enc424j600_setGPDATAWritePointer
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _ipv4_txFrameRequest
               _ethernet_txFrameRequest
                 _ethernetController_writeDestinationMACAddress
                   _enc424j600_setGPDATAWritePointer
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _ethernetController_writeEtherTypeFieldToBuffer
                   _enc424j600_setGPDATAWritePointer
                     _enc424j600_writeSPI
                       _enc424j600_initSPI
                   _enc424j600_writeSPI
                     _enc424j600_initSPI
                 _memory_txFrameRequest
                   ___wmul
                   _checkForOverlap
                     _checkForOverlapSwitched
                   _entireMemoryEmpty
                   _entireMemoryFull
             _ipv4_writeHeaderIntoBuffer
           _intToString
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
         _ipv4_checkHeaderChecksum
           _ipv4_calculateHeaderChecksum
         _ipv4_parseHeader
           _ethernetController_streamFromRXBuffer
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
       _macToString
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
     _ipAdressToString
       ___lwdiv
       ___lwmod
         _rand (ARG)
           ___lmul
     _ipv4_background
     _ipv4_generateAutoIP
       ___awmod
         _rand (ARG)
           ___lmul
       _rand
         ___lmul
     _ipv4_sendFrame
       _arp_checkForEntry
         _getMillis
         _ipv4_cmp
       _arp_getEntryFromTable
       _arp_sendRequest
         _arp_send
           _ethernetController_getSourceMACAddress
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_setERXDATAReadPointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernetController_sendPacket
             _enc424j600_setTXLength
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_setTXStartAddress
               _enc424j600_writeControlRegisterUnbanked
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
             _enc424j600_writeSingleByte
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameClear
           _ethernetController_streamToTransmitBuffer
             _enc424j600_setGPDATAWritePointer
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
           _ethernet_txFrameRequest
             _ethernetController_writeDestinationMACAddress
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _ethernetController_writeEtherTypeFieldToBuffer
               _enc424j600_setGPDATAWritePointer
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
             _memory_txFrameRequest
               ___wmul
               _checkForOverlap
                 _checkForOverlapSwitched
               _entireMemoryEmpty
               _entireMemoryFull
           _mac_setToBroadcast
         _ethernetController_getMacAddress
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _mac_setAllZero
       _ethernetController_getMacAddress
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _ethernetController_sendPacket
         _enc424j600_setTXLength
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_setTXStartAddress
           _enc424j600_writeControlRegisterUnbanked
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _enc424j600_writeSingleByte
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _memory_txFrameClear
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _getMillis
     _ipv4_setIPSourceAddress
   _ipv4_calculateHeaderChecksum
   _ipv4_generateAutoIP
     ___awmod
       _rand (ARG)
         ___lmul
     _rand
       ___lmul
   _ipv4_getIPSourceAddress
   _ipv4_streamToTransmissionBuffer
     _ethernetController_streamToTransmitBuffer
       _enc424j600_setGPDATAWritePointer
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _enc424j600_writeSPI
         _enc424j600_initSPI
   _ipv4_txFrameRequest
     _ethernet_txFrameRequest
       _ethernetController_writeDestinationMACAddress
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _ethernetController_writeEtherTypeFieldToBuffer
         _enc424j600_setGPDATAWritePointer
           _enc424j600_writeSPI
             _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
       _memory_txFrameRequest
         ___wmul
         _checkForOverlap
           _checkForOverlapSwitched
         _entireMemoryEmpty
         _entireMemoryFull
   _ipv4_writeHeaderIntoBuffer
   _macToString
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _printErrorMessage
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
     _intToString
       _ltoa
         _ultoa
           ___lldiv
           ___llmod
   _printEthernetState
     _UARTTransmitText
       _etherTypeToString (ARG)
       _ethernetController_getDeviceName (ARG)
       _ethernetController_getMacAddress (ARG)
         _enc424j600_readControlRegisterUnbanked
           _enc424j600_readSPI
             _enc424j600_initSPI
           _enc424j600_writeSPI
             _enc424j600_initSPI
       _intToString (ARG)
         _ltoa
           _ultoa
             ___lldiv
             ___llmod
       _ipAdressToString (ARG)
         ___lwdiv
         ___lwmod
           _rand (ARG)
             ___lmul
       _macToString (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
   _sevenSegmentInit
   _srand
     _ethernetController_getMacAddress (ARG)
       _enc424j600_readControlRegisterUnbanked
         _enc424j600_readSPI
           _enc424j600_initSPI
         _enc424j600_writeSPI
           _enc424j600_initSPI
   _stack_init
     _arp_init
       _UARTTransmitText
         _etherTypeToString (ARG)
         _ethernetController_getDeviceName (ARG)
         _ethernetController_getMacAddress (ARG)
           _enc424j600_readControlRegisterUnbanked
             _enc424j600_readSPI
               _enc424j600_initSPI
             _enc424j600_writeSPI
               _enc424j600_initSPI
         _intToString (ARG)
           _ltoa
             _ultoa
               ___lldiv
               ___llmod
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
       _arp_setNewEntry
         _UARTTransmitText
           _etherTypeToString (ARG)
           _ethernetController_getDeviceName (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
           _intToString (ARG)
             _ltoa
               _ultoa
                 ___lldiv
                 ___llmod
           _ipAdressToString (ARG)
             ___lwdiv
             ___lwmod
               _rand (ARG)
                 ___lmul
           _macToString (ARG)
             _ethernetController_getMacAddress (ARG)
               _enc424j600_readControlRegisterUnbanked
                 _enc424j600_readSPI
                   _enc424j600_initSPI
                 _enc424j600_writeSPI
                   _enc424j600_initSPI
         _getMillis (ARG)
         _ipAdressToString (ARG)
           ___lwdiv
           ___lwmod
             _rand (ARG)
               ___lmul
         _ipv4_isAllZero (ARG)
         _macToString (ARG)
           _ethernetController_getMacAddress (ARG)
             _enc424j600_readControlRegisterUnbanked
               _enc424j600_readSPI
                 _enc424j600_initSPI
               _enc424j600_writeSPI
                 _enc424j600_initSPI
         _mac_isAllZero (ARG)
       _ipv4_setToAllZero
       _mac_setAllZero
     _ipv4_init
       _ipv4_setToAllZero

 _ISR (ROOT)
   _buttonHandler
   _sevenSegmentUpdate
     _parseNumber
       i2___lwdiv
   _updateTime

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100     2F      BD      14       73.8%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      EF      12       93.4%
BITBANK2           100      0       0       9        0.0%
BANK2              100     19      D8      10       84.4%
BITBANK1           100      0       0       7        0.0%
BANK1              100     FE      FF       8       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     A0      A0       5      100.0%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     28      50       1       85.1%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     473       6        0.0%
DATA                 0      0     473       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 22 17:51:08 2019

                       ipv4_calculateHeaderChecksum@carry 006A  
                __end_of_ethernetController_getMacAddress 54EA  
               __size_of_ethernetController_getMacAddress 0074  
                      ??_ethernetController_getMacAddress 0074  
                       ?_ethernetController_getMacAddress 006E  
                        _ethernetController_getMacAddress 5476  
                                             arp_init@mac 00B2  
                                                      l75 4DE2  
                                                      l92 5A5C  
                                                      l84 4686  
                                                      l77 4E0A  
                                                      l86 4668  
                                                      l88 4680  
                                                      l89 469C  
                     __size_of_ipv4_writeHeaderIntoBuffer 016E  
                        __end_of_ipv4_checkHeaderChecksum 5A24  
                 ethernetController_getSourceMACAddress@i 0080  
                                     ___wmul@multiplicand 0062  
                                      i2___lwdiv@dividend 0001  
                      ipv4_calculateHeaderChecksum@header 0060  
                                            __CFG_CP0$OFF 000000  
                                            __CFG_CP1$OFF 000000  
                                            __CFG_CP2$OFF 000000  
                                            __CFG_CP3$OFF 000000  
                                             __CFG_LVP$ON 000000  
                                             arp_send@arp 00A7  
                                 ??_memory_txFrameRequest 008D  
                                                     l210 4F1E  
                                                     l140 51B8  
                                                     l204 4F3C  
                                                     l213 4F5C  
                                                     l205 4F26  
                                                     l134 5342  
                                                     l142 5200  
                                                     l214 4F44  
                                                     l206 4F12  
                                                     l135 5388  
                                                     l232 572C  
                                                     l216 4F72  
                                                     l241 5652  
                                                     l217 4F4C  
                                                     l209 4F1A  
                                                     l218 4F52  
                                                     l155 5600  
                                                     l420 5D20  
                                                     l180 5778  
                                                     l245 5698  
                                                     l317 5054  
                                                     l165 53C2  
                                                     l414 5D58  
                                                     l422 5D42  
                                                     l182 579C  
                                                     l263 4480  
                                                     l183 57B0  
                                                     l440 4520  
                                                     l416 5D7A  
                                                     l441 451C  
                                                     l361 492A  
                                                     l450 4ABC  
                                                     l434 44E8  
                                                     l258 43C8  
                                                     l195 4FA4  
                                                     l179 57B6  
                                                     l187 5C7C  
                                                     l371 0F0C  
                                                     l188 5C92  
                                                     l372 0D86  
                                                     l540 01A2  
                                                     l700 1B02  
                                                     l461 4B04  
                                                     l445 4566  
                                                     l197 4FD4  
                                                     l373 0F3C  
                                                     l541 0214  
                                                     l701 1B3C  
                                                     l438 456A  
                                                     l390 5BE8  
                                                     l374 0DBE  
                                                     l366 0C40  
                                                     l702 1B58  
                                                     l455 4AF4  
                                                     l439 4556  
                                                     l471 069E  
                                                     l359 490A  
                                                     l199 4FFA  
                                                     l375 0DF6  
                                                     l367 0C8A  
                                                     l464 061C  
                                                     l384 5E62  
                                                     l392 5C14  
                                                     l368 0D28  
                                                     l536 0186  
                                                     l712 4D34  
                                                     l457 4AF0  
                                                     l369 0D48  
                                                     l553 04B6  
                                                     l561 02CC  
                                                     l537 0164  
                                                     l721 4DA2  
                                                     l490 0A94  
                                                     l474 06D2  
                                                     l466 063E  
                                                     l386 5E7C  
                                                     l562 02D4  
                                                     l554 022A  
                                                     l538 0180  
                                                     l730 4272  
                                                     l714 4D48  
                                                     l491 0AB6  
                                                     l483 0898  
                                                     l379 605C  
                                                     l563 03B8  
                                                     l555 024C  
                                                     l731 4282  
                                                     l484 0946  
                                                     l476 06DA  
                                                     l468 0668  
                                                     l396 6036  
                                                     l716 4D64  
                                                     l573 05F4  
                                                     l557 04CA  
                                                     l565 0480  
                                                     l733 42F2  
                                                     l725 4292  
                                                     l830 5886  
                                                     l478 08F4  
                                                     l558 026E  
                                                     l734 42B6  
                                                     l726 4242  
                                                     l718 4D78  
                                                     l479 0814  
                                                     l559 029C  
                                                     l735 4324  
                                                     l719 4D8E  
                                                     l832 58AE  
                                                     l568 03F0  
                                                     l736 42C4  
                                                     l728 4252  
                                                     l489 09B6  
                                                     l569 0406  
                                                     l737 42D4  
                                                     l729 4262  
                                                     l738 42E2  
                                                     l860 46DA  
                                                     l692 1A0E  
                                                     l861 47A8  
                                                     l685 1864  
                                                     l862 472A  
                                                     l870 5B74  
                                                     l694 1A4E  
                                                     l686 18D4  
                                                     l871 5B54  
                                                     l687 190C  
                                                     l864 475E  
                                                     l696 1A58  
                                                     l873 5B60  
                                                     l866 479A  
                                                     l874 5B6A  
                                                     l891 2E5E  
                                                     l971 2F44  
                                                     l699 1B5E  
                                                     l892 2EB2  
                                                     l980 1542  
                                                     l973 2F84  
                                                     l982 15E0  
                                                     l974 3070  
                                                     l895 2EF8  
                                                     l991 16D2  
                                                     l983 1598  
                                                     l975 3084  
                                                     l976 30F6  
                                                     l889 2D3E  
                                                     l993 1708  
                                                     l985 1636  
                                                     l986 15EE  
                                                     l995 174A  
                                                     l979 158A  
                                                     l996 174C  
                                                     l988 168C  
                                                     l997 1782  
                                                     l989 1644  
                                            __CFG_CPB$OFF 000000  
                             __end_of_ipv4_txFrameRequest 40FE  
                              __end_of_icmp_sendEchoReply 23DE  
                                            __CFG_CPD$OFF 000000  
                                                     _ISR 0008  
           enc424j600_writeControlRegisterUnbanked@opcode 006D  
                            ??_enc424j600_writeSingleByte 006A  
                __end_of_ethernetController_getDeviceName 60BC  
               __size_of_ethernetController_getDeviceName 0024  
                      ??_ethernetController_getDeviceName 0062  
                       ?_ethernetController_getDeviceName 0060  
                        _ethernetController_getDeviceName 6098  
                                memory_txFrameClear@index 0060  
                    enc424j600_readPHYRegister@unusedBits 0078  
                     ethernetController_getMacAddress@mac 0074  
                          memory_txFrameRequest@freeIndex 00A1  
                                            ___awmod@sign 0073  
                                                     prod 000FF3  
           ethernetController_streamFromRXBuffer@startEnd 0071  
                                                     wreg 000FE8  
                                              _TXSTA1bits 000FAC  
                                      _sevenSegmentUpdate 4998  
               ethernetController_getEtherTypeField@field 006F  
                                  _numberOfOccupiedFields 004C  
                      ethernetController_setLEDConfig@LED 006F  
                      __size_of_ethernetController_getMTU 000C  
                      __size_of_ethernetController_getRSV 0074  
                      __end_of_enc424j600_readPHYRegister 4482  
                              _enc424j600_readPHYRegister 4360  
                          __end_of_enc424j600_setTXLength 5F8A  
                                        ??_arp_background 0154  
                                                    ?_ISR 0001  
                          ?_ethernetController_sendPacket 0072  
                                                    l1010 257E  
                                                    l1100 4BB2  
                                                    l1012 25F4  
                                                    l1013 25C0  
                                                    l1006 2570  
                                                    l1015 2636  
                                                    l1007 253C  
                                                    l1016 2602  
                                                    l1040 1FEE  
                                                    l1032 1EC0  
                                                    l1009 25B2  
                                                    l1035 213C  
                                                    l1107 3468  
                                                    l1203 5A20  
                                                    l1060 2B52  
                                                    l1044 2102  
                                                    l1036 1EEA  
                                                    l1116 542C  
                                                    l1220 2860  
                                                    l1212 27CE  
                                                    l1061 2D1E  
                                                    l1045 211A  
                                                    l1037 2156  
                                                    l1109 34C0  
                                                    l1221 289A  
                                                    l1062 2B76  
                                                    l1038 1F3C  
                                                    l1047 2128  
                                                    l1039 1FE6  
                                                    l1215 281E  
                                                    l1207 267E  
                                                    l1064 2BEE  
                                                    l1056 2B28  
                                                    l1080 3A44  
                                                    l1216 2834  
                                                    l1240 3ED6  
                                                    l1065 2CD8  
                                                    l1081 38FA  
                                                    l1217 2848  
                                                    l1209 274E  
                                                    l1241 3EF8  
                                                    l1090 3A52  
                                                    l1242 3F10  
                                                    l1059 2D04  
                                                    l1091 39D4  
                                                    l1083 3998  
                                                    l1219 288A  
                                                    l1243 3F1E  
                                                    l1092 3A1E  
                                                    l1084 3954  
                                                    l1324 3C58  
                                                    l1332 4174  
                                                    l1340 2272  
                                                    l1316 3370  
                                                    l1236 3FB2  
                                                    l1244 3F42  
                                                    l1253 5C2A  
                                                    l1069 2CF0  
                                                    l1085 39CA  
                                                    l1261 5EAC  
                                                    l1325 3C02  
                                                    l1333 4122  
                                                    l1341 2242  
                                                    l1237 3F66  
                                                    l1086 3964  
                                                    l1326 3C44  
                                                    l1334 4160  
                                                    l1190 1276  
                                                    l1238 3EA2  
                                                    l1174 38DA  
                                                    l1255 5C56  
                                                    l1191 12E4  
                                                    l1343 2360  
                                                    l1088 3978  
                                                    l1328 3D1C  
                                                    l1336 4228  
                                                    l1192 1352  
                                                    l1184 1012  
                                                    l1344 22EA  
                                                    l1097 4B16  
                                                    l1265 6010  
                                                    l1089 3988  
                                                    l1185 1064  
                                                    l1345 2320  
                                                    l1169 381C  
                                                    l1186 10B6  
                                                    l1346 235A  
                                                    l1363 583E  
                                                    l1259 5E92  
                                                    l1187 112E  
                                                    l1364 5852  
                                                    l1188 119A  
                                                    l1196 2A48  
                                                    l1540 5544  
                                                    l1532 5500  
                                                    l1189 1208  
                                                    l1541 5552  
                                                    l1533 550C  
                                                    l1702 514A  
                                                    l1198 2A8E  
                                                    l1703 513E  
                                                    l1535 5522  
                                                    l1712 56C6  
                                                    l1536 551A  
                                                    l1713 56BA  
                                                    l1706 517E  
                                                    l1707 518C  
                                                    l1539 553A  
                                                    l1716 56EE  
                                                    l1717 56FC  
                                                    l1751 5908  
                                                    l1770 5946  
                                                    l1755 47C2  
                                                    l1780 5BA6  
                                                    l1773 596E  
                                                    l1757 481E  
                                                    l1774 5978  
                                                    l1758 488C  
                                                    l1783 5BC6  
                                                    l1784 5BD0  
                                                    l1769 594E  
                                                    l1779 5BAE  
                                                    l9105 51B0  
                                                    l9123 51F8  
                                                    l9205 080C  
                                                    l9503 55F8  
                                                    l9239 093E  
                                                    l9363 5388  
         ethernetController_streamToTransmitBuffer@opcode 007D  
                                                    l8901 575A  
                                                    l9383 5680  
                                                    l9563 6054  
                                                    l9575 2D36  
                                                    l9911 5E8A  
                                                    l9831 473E  
                                                    l8881 4552  
                                                    l9841 4772  
                                                    l9931 5C22  
                                                    l8885 459C  
                                                    l9853 47A8  
                                                    STR_1 7FBC  
                                                    STR_2 7FAC  
                                                    l8889 61C8  
                                                    l9849 479A  
                                                    STR_3 7F23  
                                                    STR_4 7F7C  
                                                    l8979 5D50  
                                                    l9859 5E5A  
                                                    STR_5 7F5D  
                           ?_ethernetController_softReset 006E  
                                                    STR_6 7E66  
                                                    STR_7 7FD7  
                                                    STR_8 7F2F  
                                                    l8999 5D18  
                                                    l9879 5BE0  
                                                    STR_9 7FAE  
                                                    l9899 602E  
               ethernetController_clearInterruptFlag@flag 0072  
                                __end_of_icmp_parseHeader 32AC  
               enc424j600_setRXBufferStartAddress@lowByte 0070  
                                                    _RCIE 007CED  
                                                    _RCIF 007CF5  
                                                    _RCIP 007CFD  
                                                    u9700 4A66  
                                                    u9710 4A74  
                                                    u9720 4A82  
                                                    u9730 4A90  
                                                    u9900 44A0  
                                                    u9910 44AE  
                                                    u9680 575A  
                                                    u9920 44BC  
                                                    u9690 576A  
                                                    u9770 4AB8  
                                                    u9850 5D7E  
                                                    u9960 44E4  
                                                    u9880 5D46  
                                                    u9890 4492  
                                                    _TRMT 007D61  
                                                    _TXIF 007CF4  
                                          mac_isAllZero@i 0062  
                                     ?_sevenSegmentUpdate 000F  
                                       _ipv4_setToAllZero 6002  
                                                    _main 17A2  
                                                    _rand 57D0  
                                 printEthernetState@state 009A  
                                                    _ltoa 58DA  
                                                    _time 0029  
                                                    fsr0h 000FEA  
                                                    fsr1h 000FE2  
                                      i2___lwdiv@quotient 0005  
                                                    indf0 000FEF  
                                                    fsr2h 000FDA  
                                                    fsr0l 000FE9  
                                                    indf1 000FE7  
                                                    indf2 000FDF  
                                                    fsr1l 000FE1  
                                                    fsr2l 000FD9  
                                                    btemp 0051  
                                           __CFG_BORV$190 000000  
                               __size_of_sevenSegmentInit 001A  
                                 _ethernetController_init 4DB6  
                                      ?_ipv4_setToAllZero 0060  
                                                    prodh 000FF4  
                                                    prodl 000FF3  
                     __size_of_handleStackBackgroundTasks 050A  
                                                    start 00E8  
          __end_of_ethernetController_getSourceMACAddress 563C  
         __size_of_ethernetController_getSourceMACAddress 0070  
                ??_ethernetController_getSourceMACAddress 0078  
                 ?_ethernetController_getSourceMACAddress 006F  
                  _ethernetController_getSourceMACAddress 55CC  
                                            arp_probe@err 014E  
                                           __CFG_IESO$OFF 000000  
                                 __end_of_UARTTransmitInt 60DE  
                                         ??_mac_isAllZero 0062  
                                           __CFG_MCLRE$ON 000000  
                              memory_txFrameRequest@field 0098  
                                            ___param_bank 000000  
                           ethernet_rxGetNewFrame@counter 025B  
                                 _checkForOverlapSwitched 4A56  
              enc424j600_setRXBufferStartAddress@highByte 0071  
            __end_of_ethernetController_getEtherTypeField 55CC  
           __size_of_ethernetController_getEtherTypeField 0070  
                  ??_ethernetController_getEtherTypeField 0078  
                   ?_ethernetController_getEtherTypeField 006F  
                    _ethernetController_getEtherTypeField 555C  
                                                   ??_ISR 0016  
                                     ??_ipv4_setToAllZero 0062  
                             ?_icmp_writeHeaderIntoBuffer 0060  
                             ?_enc424j600_enableReception 0001  
                      __size_of_enc424j600_getPacketCount 001A  
                                          _ipv4_isAllZero 5E84  
                     ethernetController_setLEDConfig@data 0070  
                                    ??_sevenSegmentUpdate 0011  
                                            ?_intToString 0084  
                          handleStackBackgroundTasks@intf 02D1  
                     ethernetController_setLEDConfig@conf 006E  
        __end_of_ethernetController_getCurrentPacketCount 6296  
       __size_of_ethernetController_getCurrentPacketCount 0006  
               ?_ethernetController_getCurrentPacketCount 0001  
              ??_ethernetController_getCurrentPacketCount 006F  
                _ethernetController_getCurrentPacketCount 6290  
                                           arp_send@field 00F3  
                                                   l10237 177A  
                                                   l10417 2A40  
                                                   l10373 4BB2  
                                                   l10525 4672  
                                                   l10429 2A86  
                                                   l11229 388C  
                                                   l10359 4B0E  
                                                   l10383 6008  
                                                   l10457 5A20  
                                                   l11275 3A1E  
                                                   l10299 3460  
                                                   l11195 5424  
                                                   l12091 3F8A  
                                                   l12093 3F94  
                                                   l12087 049C  
                                                   l10593 53BA  
                                                   l12089 04A6  
                                                   l10907 2C62  
                                                   l10677 43FA  
                                     arp_checkForEntry@ip 0067  
                                       _nextPacketPointer 0041  
                                                   ?_main 0001  
                                                   ?_rand 006C  
                                                   _CCPR1 000FBE  
                                                   STR_10 7FD7  
                                                   ?_ltoa 007A  
                                                   STR_11 7F3B  
                                                   STR_20 7FF2  
                                                   STR_12 7FA7  
                                                   STR_21 7FD7  
                                                   STR_13 7FD7  
                                                   STR_22 7FDD  
                                                   STR_14 7F5D  
                                                   STR_30 7FCD  
                                                   STR_31 7FEF  
                                                   STR_23 7F17  
                                                   STR_15 7DB4  
                                                   STR_16 7FBC  
                                                   STR_24 7FFD  
                                                   STR_32 7FEC  
                                                   STR_40 7B2B  
                                                   STR_41 7FD7  
                                                   STR_17 7FF5  
                                                   STR_33 7D77  
                                                   STR_25 78DE  
                                                   STR_34 7FDD  
                                                   STR_42 7F17  
                                                   STR_18 7FF8  
                                                   STR_50 7A36  
                                                   STR_26 7956  
                                                   STR_51 7999  
                                                   STR_35 7F17  
                                                   STR_19 7FD2  
                                                   STR_43 7B50  
                                                   STR_27 7990  
                                                   STR_44 7FDD  
                                                   STR_60 7FC9  
                                                   STR_52 7FD7  
                                                   STR_28 7FD7  
                                                   STR_36 7CB5  
                                         __end_of___awmod 555C  
                                                   STR_29 7FDD  
                                                   STR_61 7A03  
                                                   STR_45 7FD7  
                                                   STR_37 7FD7  
                                                   STR_53 7D04  
                                                   STR_38 7FDD  
                                                   STR_46 7FFB  
                                                   STR_54 7F0B  
                                                   STR_62 7EDA  
                                                   STR_70 7C3F  
                                                   STR_55 7FED  
                                                   STR_47 7F17  
                                                   STR_39 7F17  
                                                   STR_71 7DEE  
                                                   STR_63 7DDB  
                                                   STR_48 7FFD  
                                                   STR_80 7FBE  
                                                   STR_56 7F8F  
                                                   STR_72 7EBF  
                                                   STR_64 7DC8  
                                                   STR_57 7FC9  
                                                   STR_81 7FE8  
                                                   STR_73 7E94  
                                                   STR_65 7DA0  
                                                   STR_49 7A01  
                                                   STR_90 7FB9  
                                                   STR_58 7EFF  
                                                   STR_82 7E01  
                                                   STR_66 7C7B  
                                                   STR_74 7B06  
                                                   STR_91 7DB1  
                                                   STR_83 7FC3  
                                                   STR_59 7D36  
                                                   STR_67 7C98  
                                                   STR_75 79CA  
                                                   STR_92 7FAC  
                                                   STR_84 7FE0  
                                                   STR_68 7F98  
                                                   STR_76 7BDE  
                                                   STR_85 7FE4  
                                                   STR_93 7F52  
                                                   STR_69 7E35  
                                                   STR_77 7C5D  
                                                   STR_78 7F86  
                                                   STR_94 7F72  
                                                   STR_86 7E24  
                                                   STR_79 7FC8  
                                                   STR_95 7E85  
                                                   STR_87 7A91  
                                                   STR_88 7FBC  
                                                   STR_96 7FD7  
                                                   STR_89 7DB1  
                                                   STR_97 7F2F  
                                                   STR_98 7E56  
                                                   STR_99 7DB1  
                                                   u10011 452A  
                                         __end_of___lldiv 519E  
                                                   u10021 453C  
                                                   u10110 521A  
                                                   u10051 4574  
                                                   u10131 0612  
                                                   u10061 4586  
                                                   u11030 41B0  
                                                   u10311 088E  
                                                   u10151 0634  
                                                   u10400 09BA  
                                                   u10320 089C  
                                                   u11120 4784  
                                                   u11040 41DE  
                                                   u12001 1E8C  
                                                   u10090 51E0  
                                                   u11130 47A8  
                                                   u11050 4204  
                                                   u10331 08EA  
                                                   u11035 41A6  
                                                   u11060 4C2E  
                                                   u10421 0A8A  
                                                   u10181 065E  
                                                   u11301 2424  
                                                   u10510 56CA  
                                                   u10271 0832  
                                                   u10191 0694  
                                                   u11071 54E0  
                                                   u11055 41FA  
                                                   u11240 5EB0  
                                                   u11160 5E80  
                                                   u12120 1746  
                                                   u10441 0AAC  
                                                   u10281 0850  
                                                   u11401 2546  
                                                   u11321 2470  
                                                   u11081 46B4  
                                                   u11065 4C24  
                                                   u10371 0982  
                                                   u10611 493C  
                                                   u11331 2488  
                                                   u12211 3622  
                                                   u10461 0AC8  
                                                   u10381 09A0  
                                                   u10621 4956  
                                                   u11421 2588  
                                                   u11341 24A2  
                                                   u12301 3502  
                                                   u12221 3634  
                                                   u11270 5C5A  
                                                   u10710 5BB2  
                                                   u13030 2BE4  
                                                   u11190 5C18  
                                                   u11510 3CA4  
                                                   u10631 498A  
                                                   u11351 24BC  
                                                   u12231 369C  
                                                   u10560 5680  
                                                   u12320 3556  
                                                   u10480 514E  
                                                   u11520 3CD2  
                                                   u13120 5526  
                                                   u11441 25CA  
                                                   u11361 24D6  
                                                   u11281 23F6  
                                         __end_of___llmod 570E  
                                                   u12241 36BE  
                                                   u10570 5690  
                                                   u12410 4BB6  
                                                   u13050 2C62  
                                                   u13210 3D70  
                                                   u12170 177A  
                                                   u11530 3CF8  
                                                   u11371 24F0  
                                                   u11291 2412  
                                                   u12331 35A8  
                                                   u12251 36D0  
                                                   u11515 3C9A  
                                                   u11611 23CE  
                                                   u10740 5626  
                                                   u11700 1C44  
                                                   u10900 1040  
                                                   u10581 48E2  
                                                   u11461 260C  
                                                   u11381 250A  
                                                   u12341 4E60  
                                                   u12181 1798  
                                                   u12261 3702  
                                                   u11541 21CE  
                                                   u13230 3D8C  
                                                   u10910 1092  
                                                   u10751 5632  
                                                   u11391 2524  
                                                   u12351 4EB2  
                                                   u11535 3CEE  
                                                   u11551 221A  
                                                   u12511 32B6  
                                                   u10760 58A6  
                                                   u10680 5952  
                                                   u13400 61EC  
                                                   u13320 3E12  
                                                   u13208 3D5A  
                                                   u11800 1D0E  
                                                   u11720 1C6E  
                                                   u11640 1BD2  
                                                   u11481 2648  
                                                   u12361 4ED4  
                                                   u12521 332C  
                                                   u13081 5ED8  
                                                   u14121 1AD2  
                                                   u10770 58B2  
                                                   u10850 2E8A  
                                                   u12290 34C4  
                                                   u13314 3DF6  
                                                   u13250 3DAA  
                                                   u13170 3D3E  
                                                   u10930 110A  
                                                   u12530 3348  
                                                   u12450 2A82  
                                                   u12371 4EE6  
                                                   u13315 3DF0  
                                                   u10780 58D2  
                                                   u13340 3E30  
                                                   u13308 3DE4  
                                                   u13228 3D74  
                                                   u11900 1DD4  
                                                   u11820 1D34  
                                                   u11740 1C94  
                                                   u11660 1BF6  
                                                   u10940 1176  
                                                   u10925 10DE  
                                                   u11581 2304  
                                                   u14141 1B20  
                                                   u10870 2EFC  
                                                   u13270 3DC4  
                                                   u13190 3D56  
                                                   u12710 43FA  
                                                   u11718 1C48  
                                                   u10950 11E4  
                                                   u12470 2AC8  
                                                   u10767 589C  
                                                   u11591 232A  
                                                   u12551 3414  
                                                   u14151 1B46  
                                                   u14071 192C  
                                                   u14207 17F4  
                                                   u13360 3E4C  
                                                   u13248 3D90  
                                                   u11920 1DFE  
                                                   u11840 1D5C  
                                                   u11760 1CBC  
                                                   u11680 1C1C  
                                                   u10960 1252  
                                                   u12801 309C  
                                                   u12561 3426  
                                                   u12481 2AE8  
                                                   u13601 37B6  
                                                   u14081 1A28  
                                                   u14217 1988  
                                                   u13338 3E16  
                                                   u13290 3DE0  
                                                   u12730 2F36  
                                                   u11818 1D12  
                                                   u11738 1C72  
                                                   u11658 1BD6  
                                                   u12650 53DC  
                                                   u10970 12C0  
                                                   u10890 0FEE  
                                                   u10787 58C8  
                                                   u14227 43C2  
                                                   u12571 3438  
                                                   u12491 59E2  
                                                   u13531 0E34  
                                                   u13611 37C8  
                                                   u13380 3E64  
                                                   u13268 3DAE  
                                                   u13188 3D42  
                                                   u11940 1E26  
                                                   u11860 1D86  
                                                   u11780 1CE6  
                                                   u10980 132E  
                                                   u14237 4620  
                                                   u12821 30C6  
                                                   u12741 2F56  
                                                   u12661 53F8  
                                                   u10885 0FA6  
                                                   u13541 0E6E  
                                                   u13621 37DA  
                                                   u13358 3E34  
                                                   u11918 1DD8  
                                                   u11838 1D38  
                                                   u11758 1C98  
                                                   u11678 1BFA  
                                                   u12830 2670  
                                                   u14247 465C  
                                                   u10991 610C  
                                                   u13471 0B5E  
                                                   u13631 37F0  
                                                   u13288 3DC8  
                                                   u11960 1E4A  
                                                   u11880 1DAC  
                                                   u13561 5436  
                                                   u12761 2F9C  
                                                   u12921 286A  
                                                   u12841 2692  
                                                   u13730 60A6  
                                                   u13570 5468  
                                                   u13378 3E50  
                                                   u11938 1E02  
                                                   u11858 1D60  
                                                   u11778 1CC0  
                                                   u11698 1C20  
                                                   u13650 388C  
                                                   u12771 2FFA  
                                                   u12931 287C  
                                                   u12851 26D6  
                                                   u13491 0C9C  
                                                   u13811 0264  
                                                   u12684 5038  
                                                   u11980 1E70  
                                                   u12685 5034  
                                                   u13821 0280  
                                                   u12694 507A  
                                                   u13398 3E68  
                                                   u11958 1E2A  
                                                   u11878 1D8A  
                                                   u11798 1CEA  
                                                   u12695 5076  
                                                   u13591 37A4  
                                                   u11978 1E4E  
                                                   u11898 1DB0  
                                                   u13851 03CA  
                                                   u12980 205A  
                                                   u11998 1E74  
                                                   u13971 4DAC  
                                         __end_of___lwdiv 5982  
                              __end_of_printEthernetState 4DB6  
                                         __end_of___lwmod 5BDA  
                                           __CFG_WDTEN$ON 000000  
                                                   i2l801 5286  
                                                   i2l802 5276  
        ethernetController_streamToTransmitBuffer@pointer 003F  
                                                   i2l804 527A  
                                                   i2l805 527E  
                                                   i2l750 4CAA  
                                                   i2l806 5282  
                                                   i2l751 4CEE  
                                                   i2l760 0098  
                                                   i2l749 4C9A  
                                                   i2l759 007A  
                                                   i2l792 49CA  
                                                   i2l794 49D2  
                                                   i2l797 49EE  
                                     _arp_handleNewPacket 2F1A  
                                                   _SPBRG 000FAF  
                                                   _PORTA 000F80  
                                                   _PORTB 000F81  
                                                   _PORTC 000F82  
                        __size_of_ethernet_txFrameRequest 00E8  
                                                   _TRISA 000F92  
                                                   _TRISB 000F93  
                                                   _TRISC 000F94  
         __end_of_enc424j600_writeControlRegisterUnbanked 5DB8  
        __size_of_enc424j600_writeControlRegisterUnbanked 0036  
               ??_enc424j600_writeControlRegisterUnbanked 006C  
                ?_enc424j600_writeControlRegisterUnbanked 006A  
                 _enc424j600_writeControlRegisterUnbanked 5D82  
                                           __CFG_WRT0$OFF 000000  
                                           __CFG_WRT1$OFF 000000  
                                           __CFG_WRT2$OFF 000000  
                                     ___lmul@multiplicand 0064  
                                           __CFG_WRT3$OFF 000000  
                                          __CFG_EBTR0$OFF 000000  
                                          __CFG_FCMEN$OFF 000000  
                                          __CFG_EBTR1$OFF 000000  
                                          __CFG_EBTR2$OFF 000000  
                                          __CFG_EBTR3$OFF 000000  
                                         __end_of_mac_cmp 5C1C  
                                         _ipv4_background 3E7E  
                                        __end_of_UARTInit 6234  
                                         ??_arp_sendReply 00FC  
                                           __CFG_WRTB$OFF 000000  
                                           __CFG_WRTC$OFF 000000  
                                           __CFG_WRTD$OFF 000000  
                                          __CFG_EBTRB$OFF 000000  
                                                   _randx 02A9  
                                ??_icmp_calculateChecksum 007D  
                               __end_of_ipv4_setToAllZero 6028  
                                                   _srand 6214  
                                                   _stack 0342  
                               arp_background@errAnnounce 0157  
                                                   main@i 0499  
                                                   _ultoa 47B2  
                       __end_of_ethernetController_getMTU 626A  
           ethernetController_streamToTransmitBuffer@data 007C  
                       __end_of_ethernetController_getRSV 5402  
                                          __pbitbssCOMRAM 0280  
                                                   pclath 000FFA  
                                                   tablat 000FF5  
                                            main@spamming 0283  
                            ethernet_txFrameRequest@frame 00A2  
                                        ?_checkForOverlap 0072  
                                                   plusw0 000FEB  
                                                   plusw1 000FE3  
                                                   plusw2 000FDB  
                             memory_txFrameRequest@i_1183 0097  
                                                   status 000FD8  
                                          __CFG_T3CMX$RC0 000000  
                                                   wtemp6 0052  
                                            main@unlocked 0282  
                       enc424j600_clearInterruptFlag@flag 0070  
                             __size_of_mac_setToBroadcast 0026  
                                           arp_probe@link 0138  
                                          __CFG_ICPRT$OFF 000000  
                       enc424j600_clearInterruptFlag@temp 0071  
                                    ?_arp_handleNewPacket 00FC  
                                __end_of_UARTTransmitText 58DA  
                               _ipv4_handleNewPacket$3967 01D1  
                                          __CFG_PBADEN$ON 000000  
                                          _ipv4_sendFrame 3766  
                                      __size_ofi2___lwdiv 0052  
                                            ?_parseNumber 0008  
                                        _ipAdressToString 2D2C  
                                         __initialization 5096  
                       ethernetController_softReset@F5990 0264  
                       ethernetController_softReset@F5988 02AD  
                             memory_txFrameRequest@length 0084  
                            __end_of_icmp_handleNewPacket 3446  
                                            __end_of_main 1B7A  
                                  __end_of_ipv4_isAllZero 5EB4  
                                            __end_of_rand 582C  
                                            __end_of_ltoa 592E  
                                ?_ipv4_getIPSourceAddress 0060  
                                  arpEntryToString@string 03BD  
                                ?_ipv4_setIPSourceAddress 0060  
                                    _ipv4_handleNewPacket 2656  
                                          __CFG_PCLKEN$ON 000000  
                              _memory_txFrameRequest$1179 0093  
                       __end_of_enc424j600_getPacketCount 618C  
                                           main@headerBuf 0474  
                                          arp_send@i_3290 00CE  
                                          arp_send@i_3291 00CF  
                                          arp_send@i_3292 00D0  
                            icmp_sendEchoReply@icmpHeader 0165  
                                                  ??_main 02D6  
                                                  ??_rand 006E  
                               __size_of_entireMemoryFull 0038  
                                                  ??_ltoa 0082  
                                           __activetblptr 000002  
                      __end_of_ipv4_writeHeaderIntoBuffer 3BCE  
                              _ipv4_writeHeaderIntoBuffer 3A60  
                         handleStackBackgroundTasks@stack 02CA  
                         handleStackBackgroundTasks@state 0267  
                                        ??_arp_gratuitous 0139  
                                          __CFG_SDOMX$RB3 000000  
                                         __CFG_CCP2MX$RC1 000000  
       ethernetController_writeDestinationMACAddress@addr 006F  
       ethernetController_writeDestinationMACAddress@data 007E  
                ethernetController_pollInterruptFlags@reg 0080  
                                        ___llmod@dividend 0060  
                                                  STR_100 7FAC  
                                                  STR_101 7FD7  
                                                  STR_102 7CEA  
                                                  STR_110 7B99  
                                                  STR_103 7EF3  
                                                  STR_111 7AB8  
                                                  STR_104 7FDC  
                                                  STR_120 7F47  
                                                  STR_112 7C00  
                                                  STR_113 7F2F  
                                                  STR_105 7A66  
                                                  STR_106 7FDD  
                                                  STR_130 7D8C  
                                                  STR_114 7C21  
                                                  STR_115 7FEF  
                                                  STR_131 7EA3  
                                                  STR_123 7D1E  
                                                  STR_107 7BBC  
                                                  STR_116 7FEC  
                                                  STR_124 7EB1  
                                                  STR_132 7CD0  
                                                  STR_108 7B75  
                                                  STR_140 7E13  
                                                  STR_117 7FD7  
                                                  STR_133 7F68  
                                                  STR_125 7E13  
                                                  STR_109 791C  
                                                  STR_141 7FFE  
                                                  STR_150 7EE7  
                                                  STR_134 7E46  
                                                  STR_118 7ADF  
                                                  STR_142 7FFE  
                                                  STR_151 7FBC  
                                                  STR_143 7ECD  
                                                  STR_135 7F47  
                                                  STR_152 7FAC  
                                                  STR_160 7EE7  
                                                  STR_128 7ECD  
                                                  STR_144 7D62  
                                                  STR_136 7FFE  
                                                  STR_153 7FD7  
                                                  STR_129 7D62  
                                                  STR_161 7D4D  
                                                  STR_145 7D8C  
                                                  STR_137 7FFE  
                                                  STR_162 7FAC  
                                                  STR_154 7F17  
                                                  STR_146 7EA3  
                                                  STR_138 7D1E  
                                                  STR_163 7FD7  
                                                  STR_155 7E76  
                                                  STR_147 7CD0  
                                                  STR_139 7EB1  
                                                  STR_156 7FD7  
                                                  STR_148 7F68  
                                                  STR_157 7FB4  
                                                  STR_149 7E46  
                                                  STR_158 7FA0  
                                                  STR_159 7FAC  
                                    __size_of_macToString 0108  
                                                  ?_srand 007A  
                                   _arp_getEntryFromTable 5EB4  
                                                  _ANSELA 000F5B  
                                                  _ANSELB 000F5C  
                                                  _ANSELC 000F5D  
                              ethernetController_getRSV@i 0077  
                                                  ?_ultoa 006D  
                                    ipv4_parseHeader@temp 008E  
                       __size_of_ipv4_checkHeaderChecksum 0050  
                              printEthernetState@oldState 0248  
                                                  i2l1770 5998  
                                                  i2l1773 59C0  
                                                  i2l1774 59CA  
                                                  i2l1769 59A0  
                              icmp_calculateChecksumBuf@i 006B  
                               ??_ethernetController_init 007D  
                                                  i2l8325 49E6  
                               ?_ipv4_checkHeaderChecksum 006F  
                      ipv4_sendFrame@failedResolveCounter 0043  
       __end_of_ethernetController_streamToTransmitBuffer 538E  
      __size_of_ethernetController_streamToTransmitBuffer 0078  
             ??_ethernetController_streamToTransmitBuffer 0078  
              ?_ethernetController_streamToTransmitBuffer 006F  
               _ethernetController_streamToTransmitBuffer 5316  
                        ipv4_handleNewPacket@payloadField 01EA  
                                         _fSrcAddrChanged 0280  
                                  __end_of_ipv4_sendFrame 38E8  
                                   ??_arp_handleNewPacket 00FE  
                                                  _TXREG1 000FAD  
                                        mac_isAllZero@mac 0060  
                          ??_ethernetController_softReset 0071  
                               ??_checkForOverlapSwitched 0072  
                              ethernetController_init@err 007D  
                                  __size_of_buttonHandler 00AC  
                                 ?_ethernet_rxGetNewFrame 01FC  
                                        ?_UARTTransmitInt 009A  
                                          __CFG_XINST$OFF 000000  
                                        __end_of_arp_init 5476  
                                        __end_of_arp_send 2656  
                                                  ___lmul 582C  
                                        __end_of_ipv4_cmp 5C5E  
                                         ?_ipv4_isAllZero 0060  
                                                  ___wmul 5FB2  
                                   ?_ipv4_handleNewPacket 01CF  
                      __end_of_handleStackBackgroundTasks 05F6  
                              _handleStackBackgroundTasks 00EC  
                                          __CFG_STVREN$ON 000000  
                                               ??___awmod 0072  
                                   buttonHandler@oldState 004B  
                                               ??___lldiv 0068  
             enc424j600_writeControlRegisterUnbanked@addr 006C  
                                   buttonHandler@newState 004A  
             enc424j600_writeControlRegisterUnbanked@data 006A  
                                               ??___llmod 0068  
                                               ??___lwdiv 0064  
                                               ??___lwmod 0072  
                           enc424j600_setTXLength@lowByte 0070  
                            buttonHandler@debounceCounter 0035  
                                                  clear_0 50DC  
                                                  clear_1 50E8  
                                                  clear_2 50F4  
                                                  clear_3 5106  
                                         ___awmod@divisor 0070  
                              parseNumber@numberToDisplay 0008  
                                arp_parseFromRXBuffer@arp 009D  
                handleStackBackgroundTasks@lastEndAddress 0262  
                                 __end_of_ipv4_background 3FC8  
                                         ___awmod@counter 0072  
  __end_of_ethernetController_writeEtherTypeFieldToBuffer 5AC0  
 __size_of_ethernetController_writeEtherTypeFieldToBuffer 004E  
        ??_ethernetController_writeEtherTypeFieldToBuffer 007A  
         ?_ethernetController_writeEtherTypeFieldToBuffer 006F  
          _ethernetController_writeEtherTypeFieldToBuffer 5A72  
                                               ??_mac_cmp 0064  
                             ??_icmp_calculateChecksumBuf 0064  
                                        ??_mac_setAllZero 0062  
                                           main@prescaler 0470  
          ethernetController_streamToTransmitBuffer@field 006F  
          __end_of_enc424j600_readControlRegisterUnbanked 5DEE  
         __size_of_enc424j600_readControlRegisterUnbanked 0036  
                ??_enc424j600_readControlRegisterUnbanked 006C  
                 ?_enc424j600_readControlRegisterUnbanked 006A  
                  _enc424j600_readControlRegisterUnbanked 5DB8  
                                      _enc424j600_initSPI 613C  
                           ?_enc424j600_setTXStartAddress 006E  
                                      _enc424j600_readSPI 563C  
                ethernetController_softReset@comFailCount 0072  
                                                  ltoa@cp 0082  
                                       __end_ofi2___lwdiv 59D4  
                                            __mediumconst 78D2  
                                                  tblptrh 000FF7  
                                                  tblptrl 000FF6  
                                                  tblptru 000FF8  
                                                  srand@x 007A  
           __end_of_ethernetController_clearInterruptFlag 6250  
          __size_of_ethernetController_clearInterruptFlag 000E  
                  ?_ethernetController_clearInterruptFlag 0001  
                 ??_ethernetController_clearInterruptFlag 0072  
                   _ethernetController_clearInterruptFlag 6242  
                             __end_of_ipv4_generateAutoIP 5B52  
                                     mac_setToBroadcast@i 0062  
                                                  ultoa@c 0079  
                                                  ultoa@v 0075  
                              __size_of_ipv4_setToAllZero 0026  
                                     ?_enc424j600_initSPI 0001  
                                      ipv4_background@err 0065  
                         __size_of_icmp_calculateChecksum 0158  
                                          arp_probe@index 0141  
                                     ?_enc424j600_readSPI 0060  
                         ethernetController_softReset@err 0077  
                                         _numberToDisplay 0039  
                                    __CFG_LS48MHZ$SYS24X4 000000  
                                          arp_probe@state 0047  
                                 ipAdressToString@address 02AF  
      __end_of_ethernetController_updateNextPacketPointer 5316  
     __size_of_ethernetController_updateNextPacketPointer 007A  
             ?_ethernetController_updateNextPacketPointer 0001  
            ??_ethernetController_updateNextPacketPointer 006F  
              _ethernetController_updateNextPacketPointer 529C  
                     __size_of_enc424j600_enableReception 0008  
                                __size_of_arp_setNewEntry 0198  
                       sevenSegmentUpdate@digitsToDisplay 025F  
                                              __accesstop 0060  
                                 __end_of__initialization 510C  
                                       _printErrorMessage 4232  
                                __size_of_arp_sendRequest 009E  
                            ??_enc424j600_readPHYRegister 0070  
           ethernetController_getEtherTypeField@ethertype 007C  
                                         ?_ipv4_sendFrame 0134  
                                   _arp_parseFromRXBuffer 13A8  
                          __end_of_ethernet_rxGetNewFrame 0F4C  
                                        _sevenSegmentInit 6158  
                            __size_of_enc424j600_writeSPI 0064  
               ethernetController_updateLinkStatus@temp16 0083  
                                           ___rparam_used 000001  
                     icmp_sendEchoReply@icmpRequestHeader 00D8  
                                      ?_printErrorMessage 009A  
                             arp_parseFromRXBuffer@i_3215 0098  
                             arp_parseFromRXBuffer@i_3216 0099  
                             arp_parseFromRXBuffer@i_3217 009A  
              ethernetController_pollInterruptFlags@flags 007E  
               handleStackBackgroundTasks@remainingLength 01FE  
                                 enc424j600_writeSPI@data 0060  
                                          __pcstackCOMRAM 0001  
                             icmp_sendEchoReply@headerBuf 0140  
                                        __CFG_nPWRTEN$OFF 000000  
                                 ipAdressToString@pointer 0087  
 enc424j600_updateReceiveStatusVector@receiveStatusVector 006C  
                                            __pidataBANK2 5DEE  
                                            __pidataBANK4 611E  
                                       ipv4_parseHeader@i 008C  
                                               ?_UARTInit 0001  
                                    ??_enc424j600_initSPI 0060  
                                    ??_enc424j600_readSPI 0062  
                                     ??_printErrorMessage 009D  
                         enc424j600_setRXTailPointer@addr 006E  
                         __end_of_ethernetController_init 4E56  
                                           __end_of_srand 6224  
                         ??_ethernetController_dropPacket 0074  
                                           __end_of_ultoa 48B0  
                             arp_parseFromRXBuffer@offset 009B  
                             icmp_sendEchoReply@ipPayload 00E0  
     ethernetController_getSourceMACAddress@sourceAddress 0079  
                           ?_enc424j600_getInterruptFlags 006E  
                                     arp_send@destination 00C7  
                                 _ethernet_txFrameRequest 48B0  
                               __size_of_ipv4_parseHeader 024A  
                                    __size_of_intToString 0032  
                         __end_of_checkForOverlapSwitched 4B08  
                                      __size_of_getMillis 0012  
                                           _buttonHandler 4C68  
                          __size_of_memory_txFrameRequest 04DC  
                             __end_of_ipv4_SrcAddrChanged 61CC  
                               icmp_calculateChecksum@foo 0082  
                           __end_of_memory_txFrameRequest 0AD2  
                               icmp_calculateChecksum@sum 0086  
                                 arp_background@fAnnounce 0281  
                 handleStackBackgroundTasks@currentPacket 0300  
                                      __size_of_arp_probe 02CE  
                                  ?_arp_getEntryFromTable 0060  
                                  arp_parseFromRXBuffer@i 0097  
                    __size_of_enc424j600_setRXTailPointer 002A  
                                    _icmp_handleNewPacket 32AC  
                                                 ??_srand 007C  
                                      __size_of_ipv4_init 0020  
                                                 ??_ultoa 0075  
                               __end_of_printErrorMessage 4360  
                        enc424j600_getPacketCount@lowByte 006E  
                                              __pbssBANK1 01FE  
                                              __pbssBANK2 0200  
                                              __pbssBANK3 0300  
                                              __pbssBANK4 0400  
           handleStackBackgroundTasks@numberOfPacketsSent 0266  
                           icmp_sendEchoReply@icmpMessage 0100  
                                       ?_icmp_parseHeader 0074  
                                      _icmp_sendEchoReply 2164  
                               _icmp_calculateChecksumBuf 40FE  
                             __end_of_memory_txFrameClear 6098  
                                      ??_icmp_parseHeader 007F  
                          ?_enc424j600_clearInterruptFlag 0001  
                                       _etherTypeToString 5B52  
                                     ?_icmp_sendEchoReply 00C1  
                                      ?_etherTypeToString 0060  
                                       __CFG_PLLSEL$PLL4X 000000  
                                  ??_ipv4_handleNewPacket 00F9  
                         ??_ethernetController_sendPacket 007B  
                                                 ?___lmul 0060  
                                                 ?___wmul 0060  
                                              ??_UARTInit 0060  
                                    __size_of_parseNumber 007E  
                                  _icmp_calculateChecksum 3BCE  
                                          ___lmul@product 0068  
                                   macToString@firstDigit 0093  
                                     ??_etherTypeToString 0062  
          ethernetController_writeDestinationMACAddress@i 0086  
                                        ?_ipv4_background 0060  
                                        _entireMemoryFull 5D12  
                                   ipv4_parseHeader@field 0074  
                                          ?_buttonHandler 0001  
                              etherTypeToString@ethertype 0060  
                             icmp_calculateChecksum@carry 0081  
                                  ipv4_SrcAddrChanged@err 0060  
                 enc424j600_updateReceiveStatusVector@rsv 0060  
                        icmp_writeHeaderIntoBuffer@header 0062  
                                    ??_icmp_sendEchoReply 00E9  
                       enc424j600_readPHYRegister@lowByte 007D  
                                __end_of_ipAdressToString 2F1A  
                                         __CFG_WDTPS$1024 000000  
                enc424j600_setERXDATAReadPointer@highByte 006E  
                                                 _SSP1BUF 000FC9  
                                       ipv4_sendFrame@err 00FD  
  ethernetController_writeEtherTypeFieldToBuffer@highByte 007B  
                                   ?_icmp_handleNewPacket 01AF  
                                               ?_arp_init 0001  
                                               ?_arp_send 00A7  
                            __size_of_ipv4_txFrameRequest 0136  
                          ??_enc424j600_setTXStartAddress 0070  
                                               ?_ipv4_cmp 0060  
                                        __CFG_CFGPLLEN$ON 000000  
                                      _printEthernetState 4D14  
                               __end_of_etherTypeToString 5B96  
                                  ?_arp_parseFromRXBuffer 0074  
                  enc424j600_setRXBufferStartAddress@addr 006E  
           __end_of_ethernetController_streamFromRXBuffer 57D0  
          __size_of_ethernetController_streamFromRXBuffer 005E  
                 ??_ethernetController_streamFromRXBuffer 0071  
                  ?_ethernetController_streamFromRXBuffer 006F  
                   _ethernetController_streamFromRXBuffer 5772  
                          sevenSegmentUpdate@digitPointer 0049  
                                       ?_UARTTransmitText 0098  
                                       __end_of_getMillis 6214  
                                                 __Hparam 0000  
                      __end_of_enc424j600_enableReception 6290  
                              _enc424j600_enableReception 6288  
ethernetController_updateNextPacketPointer@nextPktPointer 0075  
                                                 __Lparam 0000  
                                         ipv4_isAllZero@i 0062  
                                     ?_printEthernetState 009A  
                                       ??_arp_setNewEntry 00A8  
               __end_of_enc424j600_enableAutoMACInsertion 5FB2  
              __size_of_enc424j600_enableAutoMACInsertion 0028  
                      ?_enc424j600_enableAutoMACInsertion 0001  
                     ??_enc424j600_enableAutoMACInsertion 006E  
                       _enc424j600_enableAutoMACInsertion 5F8A  
                                      ??_UARTTransmitText 009A  
                                checkForOverlapSwitched@a 0060  
                                checkForOverlapSwitched@b 0069  
                                       ??_arp_sendRequest 00FC  
                                       __end_of_arp_probe 2164  
                                      buttonHandler@state 0001  
                               enc424j600_setTXLength@len 006E  
                                   __end_of_mac_isAllZero 5E84  
                                         __size_of___lmul 0058  
                                                 ___awmod 54EA  
                          enc424j600_setTXLength@highByte 0071  
                                                 ___lldiv 511A  
                                         __size_of___wmul 0028  
                                                 ___llmod 56A6  
                                                 ___lwdiv 592E  
                                                 ___lwmod 5B96  
                    enc424j600_setGPDATAWritePointer@addr 006A  
                               ??_ethernet_txFrameRequest 00A4  
                                       __end_of_ipv4_init 60FE  
                                     sevenSegmentUpdate@i 0015  
                                                 __pcinit 5096  
                             __size_of_sevenSegmentUpdate 00BE  
                                     parseNumber@hundreds 000E  
                              icmp_parseHeader@icmpHeader 007D  
                                                 __ramtop 0800  
                                                 __ptext0 17A2  
                                                 __ptext1 626A  
                                                 __ptext2 60DE  
                                                 __ptext3 6214  
                                                 __ptext4 6158  
                                                 __ptext5 4D14  
                                                 __ptext6 4232  
                                                 __ptext7 00EC  
                                                 __ptext8 61A4  
                                                 __ptext9 3766  
                                                 _mac_cmp 5BDA  
                                               _T0CONbits 000FD5  
                            ??_handleStackBackgroundTasks 02CC  
                                            __size_of_ISR 00E0  
                                               _T1CONbits 000FCD  
                  enc424j600_setGPDATAWritePointer@opcode 006C  
                      enc424j600_setRXTailPointer@lowByte 0070  
              __end_of_enc424j600_setRXBufferStartAddress 5F36  
             __size_of_enc424j600_setRXBufferStartAddress 002A  
                    ??_enc424j600_setRXBufferStartAddress 0070  
                     ?_enc424j600_setRXBufferStartAddress 006E  
                      _enc424j600_setRXBufferStartAddress 5F0C  
                   __end_of_ethernetController_dropPacket 5C9A  
                  __size_of_ethernetController_dropPacket 003C  
                           _ethernetController_dropPacket 5C5E  
                             ?_ipv4_writeHeaderIntoBuffer 0060  
                                        ___awmod@dividend 006E  
                                    ??_printEthernetState 00A9  
           __end_of_ethernetController_pollInterruptFlags 3E7E  
          __size_of_ethernetController_pollInterruptFlags 0158  
                 ??_ethernetController_pollInterruptFlags 007A  
                  ?_ethernetController_pollInterruptFlags 0078  
                   _ethernetController_pollInterruptFlags 3D26  
                          ??_enc424j600_getInterruptFlags 0070  
                        __size_of_ipv4_getIPSourceAddress 0012  
                 enc424j600_setGPDATAWritePointer@lowByte 006D  
                        __size_of_ipv4_setIPSourceAddress 0014  
                                              ??_arp_init 00B2  
                                                 main@err 0496  
                                              ??_arp_send 00C7  
                                   __end_of_arp_sendReply 3766  
                                    end_of_initialization 510C  
                              __size_of_printErrorMessage 012E  
                                              ??_ipv4_cmp 0064  
                              __end_of_mac_setToBroadcast 6074  
                              ?_ethernetController_getMTU 0060  
                              ?_ethernetController_getRSV 0071  
                                        arp_gratuitous@ip 0134  
                                           __Lmediumconst 78D2  
                                icmp_sendEchoReply@i_4342 0163  
                                                 ltoa@buf 007A  
                                        ??_ipv4_isAllZero 0062  
                         ipv4_calculateHeaderChecksum@sum 006B  
                                                 ltoa@val 007C  
                                         mac_setAllZero@i 0062  
             ethernetController_streamFromRXBuffer@opcode 0072  
                                         ___lldiv@divisor 0064  
                                         ___lldiv@counter 006C  
                                 __size_of_arp_background 0178  
                                      entireMemoryEmpty@i 0060  
                                __size_of_checkForOverlap 011E  
                                                 postdec1 000FE5  
                                                 postdec2 000FDD  
                                         macToString@addr 007A  
                                                 postinc0 000FEE  
                                                 postinc1 000FE6  
                                                 postinc2 000FDE  
                                       arp_setNewEntry@ip 00A0  
                             ?_handleStackBackgroundTasks 02CA  
                                       _arp_checkForEntry 4B08  
                   memory_txFrameRequest@fNoOverlapMarker 0095  
                    enc424j600_readPHYRegister@PHYaddress 0077  
                                         ??_buttonHandler 0003  
                                      ?_arp_checkForEntry 0067  
                   __end_of_ethernetController_sendPacket 6002  
                  __size_of_ethernetController_sendPacket 0028  
                           _ethernetController_sendPacket 5FDA  
                                       arp_sendReply@myIP 0134  
                                               _PORTBbits 000F81  
                                     ipv4_background@link 0001  
                                        _ipv4_parseHeader 28A8  
                             ?_enc424j600_writeSingleByte 0001  
                                     ipv4_sendFrame@index 00FC  
                              ?_enc424j600_getPacketCount 0001  
                                ??_enc424j600_setTXLength 0070  
                       sevenSegmentUpdate@numberToDisplay 000F  
                                __end_of_sevenSegmentInit 6172  
                                     _enc424j600_writeSPI 570E  
                 __end_of_ipv4_streamToTransmissionBuffer 611E  
                __size_of_ipv4_streamToTransmissionBuffer 0020  
                       ??_ipv4_streamToTransmissionBuffer 00C0  
                        ?_ipv4_streamToTransmissionBuffer 007E  
                         _ipv4_streamToTransmissionBuffer 60FE  
                                              _stack_init 626A  
                              ipv4_handleNewPacket@header 01D3  
                                           ??_macToString 0080  
                  ethernetController_softReset@dataToSend 0073  
                                               _TRISBbits 000F93  
                                     ??_arp_checkForEntry 006D  
                                              _updateTime 6250  
                           icmp_handleNewPacket@ipPayload 01C6  
                                  ??_icmp_handleNewPacket 00ED  
         __end_of_ethernetController_getNextPacketPointer 6242  
        __size_of_ethernetController_getNextPacketPointer 000E  
               ??_ethernetController_getNextPacketPointer 0064  
                ?_ethernetController_getNextPacketPointer 0062  
                 _ethernetController_getNextPacketPointer 6234  
                                              arp_init@ip 00B8  
                             __end_of_arp_handleNewPacket 30FC  
                                        ??_ipv4_sendFrame 0176  
                                       i2___lwdiv@divisor 0003  
                         __end_of_ethernet_txFrameRequest 4998  
                        ethernetController_getRSV@address 0071  
                                               i2___lwdiv 5982  
                                       i2___lwdiv@counter 0007  
                              __size_of_etherTypeToString 0044  
                                     UARTTransmitText@str 0098  
                                             _CCP1CONbits 000FBD  
                    __end_of_ipv4_calculateHeaderChecksum 13A8  
                   __size_of_ipv4_calculateHeaderChecksum 045C  
                            _ipv4_calculateHeaderChecksum 0F4C  
                    enc424j600_setTXStartAddress@highByte 0071  
                                    ?_enc424j600_writeSPI 0060  
                               icmp_sendEchoReply@ipReply 016D  
                                       intToString@number 0272  
                                ipAdressToString@hundreds 0083  
                                   arp_probe@probeCounter 0048  
                               __end_of_arp_checkForEntry 4BBA  
                              arp_getEntryFromTable@index 0067  
                      __size_of_icmp_calculateChecksumBuf 0134  
                              arp_setNewEntry@oldestIndex 00B0  
                                      arp_checkForEntry@i 0075  
                                      ipv4_parseHeader@ip 008F  
                                          __end_of___lmul 5884  
        ethernetController_updateNextPacketPointer@opcode 0077  
                                     icmp_sendEchoReply@i 0162  
                                          __end_of___wmul 5FDA  
                                        parseNumber@digit 000A  
                            ?_enc424j600_setRXTailPointer 006E  
                                __size_of_UARTTransmitInt 0022  
                                       __size_of_UARTInit 0010  
                  enc424j600_setERXDATAReadPointer@opcode 006C  
                      ipv4_checkHeaderChecksum@testHeader 0073  
                                  arp_sendReply@senderMAC 0120  
                                  arp_sendReply@targetMAC 0126  
                                 ??_arp_getEntryFromTable 0067  
             __end_of_ethernetController_updateLinkStatus 500C  
            __size_of_ethernetController_updateLinkStatus 008A  
                   ??_ethernetController_updateLinkStatus 0082  
                    ?_ethernetController_updateLinkStatus 0080  
                     _ethernetController_updateLinkStatus 4F82  
                                     start_initialization 5096  
                                             __end_of_ISR 00E8  
                                  enc424j600_readSPI@data 0060  
                                          intToString@val 0084  
                          ipv4_checkHeaderChecksum@header 006F  
                                ?_ethernetController_init 007A  
                                _ipv4_checkHeaderChecksum 59D4  
                         ipv4_handleNewPacket@headerField 01F3  
                                              ?i2___lwdiv 0001  
                icmp_calculateChecksumBuf@ipPayloadLength 0062  
                           ipv4_writeHeaderIntoBuffer@ptr 0077  
                                ?_checkForOverlapSwitched 0060  
                                     __end_of_macToString 47B2  
                                         __CFG_nLPBOR$OFF 000000  
                                   ??_enc424j600_writeSPI 0062  
                                __end_of_entireMemoryFull 5D4A  
                            __size_of_ipv4_generateAutoIP 0046  
   __end_of_ethernetController_writeDestinationMACAddress 521E  
  __size_of_ethernetController_writeDestinationMACAddress 0080  
         ??_ethernetController_writeDestinationMACAddress 007E  
          ?_ethernetController_writeDestinationMACAddress 006F  
           _ethernetController_writeDestinationMACAddress 519E  
                                         ___llmod@divisor 0064  
                     ethernetController_checkDeviceId@err 0072  
                                 __size_of_arp_gratuitous 023A  
                                     arp_background@state 0044  
                                         ___llmod@counter 0068  
                           ?_ipv4_calculateHeaderChecksum 0060  
                           ethernetController_getRSV@temp 027C  
                                 ?_icmp_calculateChecksum 0074  
                     __end_of_enc424j600_setRXTailPointer 5F0C  
                             _enc424j600_setRXTailPointer 5EE2  
                                    printErrorMessage@err 009A  
                                                ??___lmul 0068  
                                          _occupiedMemory 0200  
                                                ??___wmul 0064  
                                     arp_gratuitous@index 00FC  
                                     _ipv4_txFrameRequest 3FC8  
                             arp_background@ipPreliminary 0257  
                  ethernetController_getDeviceName@string 0062  
                             __size_of_enc424j600_initSPI 001C  
                                             __pdataBANK2 028B  
                                     arp_gratuitous@state 0045  
                                             __pdataBANK4 049F  
                            ??_icmp_writeHeaderIntoBuffer 006A  
                             __size_of_enc424j600_readSPI 006A  
                                           ??_intToString 0088  
                               __size_of_icmp_parseHeader 01B0  
                            ??_enc424j600_enableReception 006B  
                       __end_of_icmp_calculateChecksumBuf 4232  
                                        checkForOverlap@a 0072  
                                        checkForOverlap@b 007B  
                        enc424j600_readSPI@timeoutCounter 0066  
                         ??_enc424j600_clearInterruptFlag 006E  
                                       ??_checkForOverlap 0084  
                           ??_enc424j600_setRXTailPointer 0070  
                                             ?_stack_init 0001  
                         __size_of_enc424j600_setTXLength 002A  
                                             __pbssCOMRAM 0029  
                        enc424j600_writeSingleByte@opcode 006A  
                                 _ipv4_getIPSourceAddress 61CC  
                                 _ipv4_setIPSourceAddress 61A4  
                ethernetController_updateLinkStatus@state 0080  
                              icmp_sendEchoReply@checksum 0160  
                                           __pcstackBANK0 0060  
                                           __pcstackBANK1 0100  
                                           __pcstackBANK2 02BF  
                                           __pcstackBANK4 0470  
                                             ?_updateTime 0001  
                              icmp_sendEchoReply@ipHeader 00C1  
                                       ?_ipAdressToString 0073  
                                   _memory_txFrameRequest 05F6  
           __end_of_ethernetController_newPacketAvailable 61F0  
          __size_of_ethernetController_newPacketAvailable 0012  
                  ?_ethernetController_newPacketAvailable 0001  
                 ??_ethernetController_newPacketAvailable 006F  
                   _ethernetController_newPacketAvailable 61DE  
                              arp_parseFromRXBuffer@frame 0074  
                                 ??_arp_parseFromRXBuffer 0094  
                                    ?_ipv4_txFrameRequest 00A7  
                ethernetController_softReset@receivedData 0075  
                                      ??_ipAdressToString 0077  
                                         _arp_setNewEntry 3446  
                            __size_of_ipv4_SrcAddrChanged 0014  
                        enc424j600_getInterruptFlags@high 0077  
                                         _arp_sendRequest 4E56  
                                 __size_of_mac_setAllZero 0026  
                                       __size_of_arp_init 0074  
                                       __size_of_arp_send 0278  
                                       __size_of_ipv4_cmp 0042  
                               ipv4_txFrameRequest@packet 00A7  
                          __end_of_icmp_calculateChecksum 3D26  
                     __size_of_icmp_writeHeaderIntoBuffer 00AE  
                              buttonHandler@debounceValue 0007  
                                        arp_send@ethFrame 00D1  
                                          _arp_background 38E8  
                     __size_of_enc424j600_writeSingleByte 0018  
                          icmp_calculateChecksumBuf@carry 0068  
                                           ??_parseNumber 000B  
                                               _main$2589 0494  
                                        ___lwdiv@dividend 0060  
                                      _sevenSegCharacters 029D  
              ethernetController_getEtherTypeField@opcode 007E  
                              __size_of_arp_checkForEntry 00B2  
                                               __pintcode 0008  
                            __size_of_memory_txFrameClear 0024  
                                           __pmediumconst 78D2  
                                               _getMillis 6202  
                                               __ptext100 618C  
                                               __ptext101 5F36  
                                               __ptext110 6098  
                                               __ptext102 5F60  
                                               __ptext111 6290  
                                               __ptext103 5D82  
                                               __ptext120 4998  
                                               __ptext112 6172  
                                               __ptext104 55CC  
                                               __ptext121 521E  
                                               __ptext113 5DB8  
                                               __ptext105 5CD6  
                                               __ptext122 5982  
                                               __ptext114 570E  
                                               __ptext106 4B08  
                                               __ptext123 4C68  
                                               __ptext115 563C  
                                               __ptext107 5C1C  
                                               __ptext116 613C  
                                               __ptext108 6202  
                                               __ptext117 6224  
                                               __ptext109 5884  
                                               __ptext119 6250  
                                                ?___awmod 006E  
                                                ?___lldiv 0060  
                                                ?___llmod 0060  
                           __size_of_ipv4_handleNewPacket 0252  
                                  arp_checkForEntry@index 006B  
                                                ?___lwdiv 0060  
                                               _arpStatus 003D  
                                                ?___lwmod 006E  
     ethernetController_writeEtherTypeFieldToBuffer@field 0071  
                                               _arp_table 0400  
                                               _arp_probe 1E96  
                                     ipv4_setToAllZero@ip 0060  
                                                ?_mac_cmp 0060  
                               __size_of_UARTTransmitText 0056  
                                               _ipv4_init 60DE  
              ethernetController_getSourceMACAddress@temp 007F  
                    enc424j600_setERXDATAReadPointer@addr 006A  
                                  arp_background@errProbe 015A  
                 enc424j600_setERXDATAReadPointer@lowByte 006D  
                                      ipAdressToString@ip 0073  
                                  ipv4_parseHeader@i_3863 008D  
                                     __end_of_intToString 5E54  
                             __size_of_icmp_sendEchoReply 027A  
                                             _macToString 46AA  
                                       ??_UARTTransmitInt 009E  
                                   ??_ipv4_txFrameRequest 00A9  
                                        ___lwdiv@quotient 0065  
                                   ipv4_generateAutoIP@ip 0078  
                                __size_of_ipv4_background 014A  
                                       _entireMemoryEmpty 5D4A  
                                ??_ethernet_rxGetNewFrame 02BF  
                                             ??i2___lwdiv 0005  
                                          __size_of_srand 0010  
                                          __size_of_ultoa 00FE  
                      enc424j600_readPHYRegister@highByte 007E  
                                      ?_entireMemoryEmpty 0001  
                             ?_enc424j600_readPHYRegister 006E  
                     ipv4_streamToTransmissionBuffer@data 00C0  
                                arp_setNewEntry@timestamp 00A4  
                             ??_ethernetController_getMTU 0062  
                             ??_ethernetController_getRSV 0076  
                           arp_gratuitous@announceCounter 0046  
                                  __end_of_arp_background 3A60  
                                          ___wmul@product 0064  
                             ethernet_rxGetNewFrame@frame 01FC  
                                __end_of_ipv4_parseHeader 2AF2  
                                  _enc424j600_setTXLength 5F60  
                            icmp_calculateChecksumBuf@buf 0060  
                            icmp_calculateChecksumBuf@foo 0069  
                            icmp_calculateChecksumBuf@sum 006D  
                                                _PIE1bits 000F9D  
                       enc424j600_writeSPI@timeoutCounter 0066  
                                     __size_of_stack_init 000A  
                                     ??_entireMemoryEmpty 0060  
                                                _PIR1bits 000F9E  
                                       entireMemoryFull@i 0060  
                                                i2u920_40 4CC4  
                                                i2u833_40 59A4  
                                                i2u924_44 49A8  
                                                i2u924_45 49A4  
                                                i2u919_40 4CC2  
                                                i2u928_40 4A14  
                                                i2u929_44 4A24  
                                                i2u929_45 4A20  
                                                i2u958_40 0060  
                                                i2u958_46 0062  
                                                _RCONbits 000FD0  
                                        arp_setNewEntry@i 00B1  
                                     __size_of_updateTime 000E  
                                      _mac_setToBroadcast 604E  
                              __end_of_sevenSegmentUpdate 4A56  
                                              ?_getMillis 0060  
                                                _UARTInit 6224  
                          ??_ipv4_calculateHeaderChecksum 0062  
              __end_of_ethernetController_disableEthernet 6298  
             __size_of_ethernetController_disableEthernet 0002  
                     ?_ethernetController_disableEthernet 0001  
                    ??_ethernetController_disableEthernet 0060  
                      _ethernetController_disableEthernet 6296  
                            icmp_handleNewPacket@ipHeader 01AF  
                    __end_of_enc424j600_setTXStartAddress 5F60  
                   __size_of_enc424j600_setTXStartAddress 002A  
                            _enc424j600_setTXStartAddress 5F36  
                                  arp_handleNewPacket@arp 0158  
                                      UARTTransmitInt@val 009A  
                                     __end_of_parseNumber 529C  
                __end_of_enc424j600_setERXDATAReadPointer 5D12  
               __size_of_enc424j600_setERXDATAReadPointer 003C  
                      ??_enc424j600_setERXDATAReadPointer 006C  
                       ?_enc424j600_setERXDATAReadPointer 006A  
                        _enc424j600_setERXDATAReadPointer 5CD6  
                                              ?_arp_probe 0134  
                                               arp_init@i 00BC  
                               ??_ipv4_getIPSourceAddress 0064  
                                       ___wmul@multiplier 0060  
                               ??_ipv4_setIPSourceAddress 0064  
                                     ?_mac_setToBroadcast 0060  
                                               arp_send@i 00CD  
                             ??_enc424j600_getPacketCount 006E  
                                              ?_ipv4_init 0001  
                                 arp_gratuitous@timeStart 0031  
   ethernetController_updateNextPacketPointer@newPointerH 0079  
   ethernetController_updateNextPacketPointer@newPointerL 0078  
                                               main@ipDst 049B  
                                       ?_sevenSegmentInit 0001  
                                 __end_of_arp_setNewEntry 35DE  
                                 __end_of_arp_sendRequest 4EF4  
                               __end_of_entireMemoryEmpty 5D82  
                                  ?_memory_txFrameRequest 0084  
                    ethernetController_checkDeviceId@data 0071  
                             __size_of_printEthernetState 00A2  
                   __end_of_enc424j600_clearInterruptFlag 5096  
                  __size_of_enc424j600_clearInterruptFlag 008A  
                           _enc424j600_clearInterruptFlag 500C  
                                      ??_sevenSegmentInit 0060  
                     enc424j600_setTXStartAddress@lowByte 0070  
                                               ipv4_cmp@a 0060  
                                               ipv4_cmp@b 0062  
                                               ipv4_cmp@i 0066  
                                    arp_probe@waitingTime 0146  
                                       ___lmul@multiplier 0060  
                                             _INTCON3bits 000FF0  
                                               copy_data0 50AA  
                                               copy_data1 50CA  
                                         parseNumber@ones 000C  
                                         parseNumber@tens 000D  
                                       hexToString@number 0268  
                                  __size_of_mac_isAllZero 0030  
                                   arp_sendReply@senderIP 012C  
                                   arp_sendReply@targetIP 0130  
                                      macToString@address 0081  
                                    ipAdressToString@ones 007B  
                                    ipAdressToString@tens 007F  
                                    ??_mac_setToBroadcast 0062  
                                          _arp_gratuitous 2AF2  
                                         ?_arp_background 0151  
                                         _icmpTxtMessages 049F  
                __end_of_ethernetController_checkDeviceId 5A72  
               __size_of_ethernetController_checkDeviceId 004E  
                      ??_ethernetController_checkDeviceId 0071  
                       ?_ethernetController_checkDeviceId 006E  
                        _ethernetController_checkDeviceId 5A24  
                                      arp_background@link 0156  
                                                __Hrparam 0000  
                                        ipv4_isAllZero@ip 0060  
                        enc424j600_setTXStartAddress@addr 006E  
                                ?_ethernet_txFrameRequest 00A2  
                                                __Lrparam 0000  
                    __end_of_enc424j600_getInterruptFlags 5B0C  
                   __size_of_enc424j600_getInterruptFlags 004C  
                            _enc424j600_getInterruptFlags 5AC0  
                                      __CFG_BOREN$SBORDIS 000000  
                        ipv4_writeHeaderIntoBuffer@header 0060  
                                      arp_gratuitous@link 0138  
                      __end_of_icmp_writeHeaderIntoBuffer 4C68  
                              _icmp_writeHeaderIntoBuffer 4BBA  
                      __end_of_enc424j600_writeSingleByte 61A4  
                              _enc424j600_writeSingleByte 618C  
                                        _icmp_parseHeader 30FC  
                                  macToString@secondDigit 0094  
                                        __size_of___awmod 0072  
                                  __size_of_arp_sendReply 0188  
                                        __size_of___lldiv 0084  
                                        __size_of___llmod 0068  
                                             _intToString 5E22  
                       handleStackBackgroundTasks@errIPv4 02D3  
                                        __size_of___lwdiv 0054  
                                        __size_of___lwmod 0044  
                 ethernetController_updateLinkStatus@temp 0082  
                              ??_ipv4_checkHeaderChecksum 0071  
                               _ethernetController_getMTU 625E  
                               _ethernetController_getRSV 538E  
                 __end_of_ethernetController_setLEDConfig 4F82  
                __size_of_ethernetController_setLEDConfig 008E  
                       ??_ethernetController_setLEDConfig 006F  
                        ?_ethernetController_setLEDConfig 006E  
                         _ethernetController_setLEDConfig 4EF4  
            ethernetController_getEtherTypeField@highByte 0080  
                                     _ipv4_generateAutoIP 5B0C  
                                              _ANSELBbits 000F5C  
                                   __end_of_buttonHandler 4D14  
                         enc424j600_getInterruptFlags@low 0076  
                                        __size_of_mac_cmp 0042  
       ethernetController_streamFromRXBuffer@startAddress 006F  
                                             _buttonState 028A  
                     enc424j600_setRXTailPointer@highByte 0071  
                                arp_sendRequest@senderMAC 0108  
                                  memory_txFrameRequest@i 0096  
                          __size_of_arp_getEntryFromTable 002E  
                                arp_sendRequest@targetMAC 010E  
                                         ___lwdiv@divisor 0062  
                           __end_of_arp_getEntryFromTable 5EE2  
                                         ___lwdiv@counter 0064  
                                       mac_setAllZero@mac 0060  
                                     _ipPreliminarySource 0282  
                                                __ptext10 5EB4  
                                                __ptext11 5B0C  
                                                __ptext20 3A60  
                                                __ptext12 54EA  
                                                __ptext21 3FC8  
                                                __ptext13 3E7E  
                                                __ptext30 1B7A  
                                                __ptext22 60FE  
                                                __ptext14 0AD2  
                                                __ptext31 555C  
                                                __ptext23 0F4C  
                                                __ptext15 2656  
                                                __ptext40 5BDA  
                                                __ptext32 5B52  
                                                __ptext24 4BBA  
                                                __ptext16 28A8  
                                                __ptext41 5772  
                                                __ptext33 2F1A  
                                                __ptext25 40FE  
                                                __ptext17 59D4  
                                                __ptext50 4EF4  
                                                __ptext42 60BC  
                                                __ptext34 5C5E  
                                                __ptext26 30FC  
                                                __ptext18 32AC  
                                                __ptext51 3D26  
                                                __ptext43 5E22  
                                                __ptext35 6234  
                                                __ptext27 3BCE  
                                                __ptext19 2164  
                                                __ptext60 6288  
                                                __ptext52 5AC0  
                                                __ptext44 58DA  
                                                __ptext36 6274  
                                                __ptext28 529C  
                                                __ptext61 5F8A  
                                                __ptext53 61DE  
                                                __ptext45 47B2  
                                                __ptext37 35DE  
                                                __ptext29 538E  
                                                __ptext70 5E84  
                                                __ptext62 625E  
                                                __ptext54 4DB6  
                                                __ptext46 56A6  
                                                __ptext38 61CC  
                                                __ptext71 38E8  
                                                __ptext63 6296  
                                                __ptext55 45A0  
                                                __ptext47 511A  
                                                __ptext39 13A8  
                                                __ptext80 5B96  
                                                __ptext72 61F0  
                                                __ptext64 6242  
                                                __ptext56 5A24  
                                                __ptext48 4F82  
                                                __ptext81 592E  
                                                __ptext73 61B8  
                                                __ptext65 500C  
                                                __ptext57 5EE2  
                                                __ptext49 4360  
                                                __ptext90 5D4A  
                                                __ptext82 4E56  
                                                __ptext74 1E96  
                                                __ptext66 5402  
                                                __ptext58 5F0C  
                                                __ptext91 4482  
                                                __ptext83 6028  
                                                __ptext75 57D0  
                                                __ptext67 3446  
                                                __ptext59 627E  
                                                __ptext92 4A56  
                                                __ptext84 5476  
                                                __ptext76 582C  
                                                __ptext68 5E54  
                                                __ptext93 5FB2  
                                                __ptext85 23DE  
                                                __ptext77 6002  
                                                __ptext69 46AA  
                                                __ptext94 5A72  
                                                __ptext86 604E  
                                                __ptext78 2AF2  
                                                __ptext95 519E  
                                                __ptext87 48B0  
                                                __ptext79 2D2C  
                                                __ptext96 5316  
                                                __ptext88 05F6  
                                                __ptext97 5C9A  
                                                __ptext89 5D12  
                                                __ptext98 5FDA  
                                                __ptext99 6074  
                                            _SSP1CON1bits 000FC6  
                   enc424j600_enableAutoMACInsertion@temp 006E  
                                                _arp_init 5402  
                                                _arp_send 23DE  
                           __size_of_icmp_handleNewPacket 019A  
                                      ipv4_setToAllZero@i 0062  
                         __size_of_ethernet_rxGetNewFrame 047A  
                                          _mac_setAllZero 6028  
                                  __end_of_arp_gratuitous 2D2C  
                                                _ipv4_cmp 5C1C  
                                                _ipSource 0286  
                                             _OSCCON2bits 000FD2  
                                       ipAdressToString@i 0088  
                         __end_of_ipv4_getIPSourceAddress 61DE  
                enc424j600_setGPDATAWritePointer@highByte 006E  
                         __end_of_ipv4_setIPSourceAddress 61B8  
              __end_of_ipv4_getPreliminaryIPSourceAddress 6202  
             __size_of_ipv4_getPreliminaryIPSourceAddress 0012  
                    ??_ipv4_getPreliminaryIPSourceAddress 0064  
                     ?_ipv4_getPreliminaryIPSourceAddress 0060  
                      _ipv4_getPreliminaryIPSourceAddress 61F0  
                                    ?_ipv4_generateAutoIP 0074  
                                           __size_of_main 03D8  
                                           __size_of_rand 005C  
                                           __size_of_ltoa 0054  
                               _enc424j600_getPacketCount 6172  
                                       ??_ipv4_background 0063  
                                       ?_entireMemoryFull 0001  
                            __size_of_arp_handleNewPacket 01E2  
                 __end_of_enc424j600_getNextPacketPointer 627E  
                __size_of_enc424j600_getNextPacketPointer 000A  
                       ??_enc424j600_getNextPacketPointer 0062  
                        ?_enc424j600_getNextPacketPointer 0060  
                         _enc424j600_getNextPacketPointer 6274  
                 __end_of_enc424j600_setNextPacketPointer 6288  
                __size_of_enc424j600_setNextPacketPointer 000A  
                       ??_enc424j600_setNextPacketPointer 0062  
                        ?_enc424j600_setNextPacketPointer 0060  
                         _enc424j600_setNextPacketPointer 627E  
     ethernetController_writeDestinationMACAddress@opcode 0084  
                        __size_of_ethernetController_init 00A0  
                                         _checkForOverlap 4482  
                                      ??_entireMemoryFull 0060  
                                             _parseNumber 521E  
                                             ??_getMillis 0064  
                                                int$flags 0051  
                                 buttonHandler@resetValue 0003  
                                                mac_cmp@a 0060  
                        __size_of_checkForOverlapSwitched 00B2  
                                                mac_cmp@b 0062  
                                                mac_cmp@i 0066  
            enc424j600_readControlRegisterUnbanked@opcode 006D  
                                           _mac_isAllZero 5E54  
                   ipv4_streamToTransmissionBuffer@packet 007E  
                                     _ipv4_SrcAddrChanged 61B8  
                                            _SSP1STATbits 000FC7  
                              ethernet_txFrameRequest@err 00A4  
                                             ??_arp_probe 0139  
                                 __size_of_ipv4_isAllZero 0030  
                               ipv4_setIPSourceAddress@ip 0060  
                               ethernet_rxGetNewFrame@err 02C7  
                                        _UARTTransmitText 5884  
                         icmp_calculateChecksum@ipPayload 0074  
                                             ??_ipv4_init 0063  
                     __size_of_enc424j600_readPHYRegister 0122  
                                            ??_stack_init 00BD  
                                    arp_sendReply@request 0100  
                                 arp_sendRequest@ipSender 0100  
                                 arp_sendRequest@ipTarget 0104  
                                              _INTCONbits 000FF2  
                                        ?_arp_setNewEntry 009A  
                                  ipv4_sendFrame@ipPacket 0134  
                                       arp_background@err 004D  
                              __size_of_entireMemoryEmpty 0038  
                                            ??_updateTime 0001  
   ethernetController_writeEtherTypeFieldToBuffer@ethtype 006F  
                                        ?_arp_sendRequest 0100  
   ethernetController_writeEtherTypeFieldToBuffer@lowByte 007A  
                                       arp_gratuitous@err 00FD  
                                  __end_of_mac_setAllZero 604E  
                                               ultoa@base 0073  
                                     _memory_txFrameClear 6074  
                             __end_of_enc424j600_writeSPI 5772  
                        handleStackBackgroundTasks@errArp 02CE  
                                           _arp_sendReply 35DE  
                                                intlevel2 0000  
                                    ?_ipv4_SrcAddrChanged 0060  
                          __size_of_arp_parseFromRXBuffer 03FA  
                                         ?_arp_gratuitous 0134  
                           __end_of_arp_parseFromRXBuffer 17A2  
                                                ltoa@base 0080  
                               icmp_parseHeader@ipPayload 0074  
                                   ??_ipv4_generateAutoIP 0078  
                                        ___lwmod@dividend 006E  
                                        ___lldiv@dividend 0060  
             ethernetController_getEtherTypeField@lowByte 007F  
                           icmp_writeHeaderIntoBuffer@buf 0060  
      ethernetController_writeDestinationMACAddress@i_638 0085  
               ethernetController_streamFromRXBuffer@temp 0073  
                          enc424j600_readPHYRegister@addr 0076  
                                              _RCSTA1bits 000FAB  
                          enc424j600_readPHYRegister@data 006E  
                                 icmp_calculateChecksum@i 0084  
                                        macToString@F5948 028B  
                          enc424j600_readPHYRegister@temp 007F  
      ethernetController_writeDestinationMACAddress@field 0075  
                               arp_setNewEntry@maxSeconds 00AC  
                                              _OSCCONbits 000FD3  
                                 __size_of_ipv4_sendFrame 0182  
                               __size_of_ipAdressToString 01EE  
                                      __end_of_stack_init 6274  
                                            macToString@i 0095  
                                            macToString@j 0097  
                enc424j600_readPHYRegister@timeoutCounter 0079  
                              __end_of_enc424j600_initSPI 6158  
                              __end_of_enc424j600_readSPI 56A6  
                                    ?_memory_txFrameClear 0001  
                                      arp_probe@timeStart 0142  
                                          ?_mac_isAllZero 0060  
                                  _ethernet_rxGetNewFrame 0AD2  
                                      __end_of_updateTime 625E  
                                    __CFG_CPUDIV$NOCLKDIV 000000  
                                       arp_probe@ipSender 014A  
                                       arp_probe@ipTarget 0134  
                                         _UARTTransmitInt 60BC  
                                      arp_setNewEntry@mac 009A  
                      ethernetController_sendPacket@field 0072  
            ethernetController_getSourceMACAddress@opcode 0078  
    ethernetController_writeEtherTypeFieldToBuffer@opcode 007C  
                              ?_icmp_calculateChecksumBuf 0060  
            __end_of_enc424j600_updateReceiveStatusVector 1E96  
           __size_of_enc424j600_updateReceiveStatusVector 031C  
                  ??_enc424j600_updateReceiveStatusVector 0065  
                   ?_enc424j600_updateReceiveStatusVector 0060  
                    _enc424j600_updateReceiveStatusVector 1B7A  
                                   mac_setToBroadcast@mac 0060  
                                                ultoa@buf 006D  
                                                ultoa@val 006F  
                               ipv4_handleNewPacket@frame 01CF  
                                   ipv4_sendFrame@oldTime 002D  
                __end_of_enc424j600_setGPDATAWritePointer 5CD6  
               __size_of_enc424j600_setGPDATAWritePointer 003C  
                      ??_enc424j600_setGPDATAWritePointer 006C  
                       ?_enc424j600_setGPDATAWritePointer 006A  
                        _enc424j600_setGPDATAWritePointer 5C9A  
                                        ___lldiv@quotient 0068  
                                         ___lwmod@divisor 0070  
                                  arp_sendRequest@request 0114  
                      enc424j600_setNextPacketPointer@ptr 0060  
                                         ___lwmod@counter 0072  
                            ??_ipv4_writeHeaderIntoBuffer 0079  
                                            ?_macToString 007A  
              enc424j600_readControlRegisterUnbanked@addr 006C  
              enc424j600_readControlRegisterUnbanked@data 006A  
                         ethernetController_getRSV@opcode 0076  
                    __end_of_ethernetController_softReset 46AA  
                   __size_of_ethernetController_softReset 010A  
                            _ethernetController_softReset 45A0  
                                         ?_mac_setAllZero 0060  
                            __end_of_ipv4_handleNewPacket 28A8  
             ethernetController_getSourceMACAddress@field 006F  
                                      arp_sendReply@reply 0138  
                                          ?_arp_sendReply 0100  
                                   ??_ipv4_SrcAddrChanged 0062  
                                arp_handleNewPacket@frame 00FC  
                                      __CFG_FOSC$INTOSCIO 000000  
                                 ?_enc424j600_setTXLength 006E  
                                 __end_of_checkForOverlap 45A0  
           __end_ofethernetController_getDeviceName@F6000 78DE  
                   ethernetController_getDeviceName@F6000 78D3  
                          ?_ethernetController_dropPacket 0072  
                                       ?_ipv4_parseHeader 0074  
                          icmp_handleNewPacket@icmpHeader 00F1  
                                 _sevenSegmentUpdate$2675 0013  
                                      ??_ipv4_parseHeader 008B  
                                   ??_memory_txFrameClear 0060  
